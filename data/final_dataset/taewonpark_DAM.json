{"home.repos.pwc.inspect_result.taewonpark_DAM.None.eval.run_model": [[37, 70], ["dnc.DNC.initial_state", "tensorflow.nn.dynamic_rnn", "model.DAM_test.dam.DAM", "model.DNC.dnc.DNC", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.initial_state"], ["def", "run_model", "(", "input_data", ",", "sequence_length", ",", "output_size", ")", ":", "\n", "    ", "\"\"\"Runs model on input sequence.\"\"\"", "\n", "\n", "access_config", "=", "{", "\n", "\"memory_size\"", ":", "FLAGS", ".", "memory_address_size", ",", "\n", "\"word_size\"", ":", "FLAGS", ".", "memory_length_size", ",", "\n", "\"num_reads\"", ":", "FLAGS", ".", "num_read_heads", ",", "\n", "\"num_writes\"", ":", "FLAGS", ".", "num_write_heads", ",", "\n", "}", "\n", "controller_config", "=", "{", "\n", "\"hidden_size\"", ":", "FLAGS", ".", "hidden_size", ",", "\n", "}", "\n", "other_config", "=", "{", "\n", "\"keep_prob\"", ":", "FLAGS", ".", "keep_prob", ",", "\n", "\"num_memory_block\"", ":", "FLAGS", ".", "num_memory_blocks", "\n", "}", "\n", "\n", "if", "FLAGS", ".", "dam", ":", "\n", "        ", "core", "=", "dam", ".", "DAM", "(", "access_config", ",", "controller_config", ",", "other_config", ",", "output_size", ")", "\n", "", "else", ":", "\n", "        ", "core", "=", "dnc", ".", "DNC", "(", "access_config", ",", "controller_config", ",", "output_size", ")", "\n", "\n", "", "batch_size", "=", "tf", ".", "shape", "(", "input_data", ")", "[", "0", "]", "\n", "\n", "initial_state", "=", "core", ".", "initial_state", "(", "batch_size", ")", "\n", "output_sequence", ",", "_", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "core", ",", "\n", "inputs", "=", "input_data", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "time_major", "=", "False", ",", "\n", "initial_state", "=", "initial_state", ")", "\n", "\n", "return", "output_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.eval.test": [[72, 145], ["loader.BAbITestBatchGenerator", "loader.BAbIData", "eval.run_model", "tensorflow.nn.softmax", "tensorflow.train.Saver", "tensorflow.ConfigProto", "tensorflow.Session", "tf.train.Saver.restore", "os.listdir", "print", "print", "print", "range", "print", "print", "print", "os.path.join", "loader.BAbITestBatchGenerator.feed_data", "loader.BAbITestBatchGenerator.feed_batch_size", "range", "print", "str", "print", "numpy.sum", "next", "sess.run", "numpy.squeeze", "zip", "numpy.mean", "tasks_results.iteritems", "numpy.mean", "str", "int", "int", "loader.BAbITestBatchGenerator.feed_batch_size", "numpy.argmax", "numpy.array", "results.append", "question_grade.append", "numpy.prod", "len"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.None.run_convexhull.run_model", "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbITestBatchGenerator.feed_data", "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbITestBatchGenerator.feed_batch_size", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.next", "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbITestBatchGenerator.feed_batch_size"], ["", "def", "test", "(", ")", ":", "\n", "    ", "\"\"\"Trains the DNC and periodically reports the loss.\"\"\"", "\n", "\n", "test_data", "=", "BAbITestBatchGenerator", "(", ")", "\n", "dataset", "=", "BAbIData", "(", "None", ",", "test_data", ".", "input_size", ",", "test_data", ".", "output_size", ",", "FLAGS", ".", "embedding_size", ")", "\n", "\n", "output_logits", "=", "run_model", "(", "dataset", ".", "processed_input_data", ",", "dataset", ".", "sequence_length", ",", "test_data", ".", "output_size", ")", "\n", "softmaxed", "=", "tf", ".", "nn", ".", "softmax", "(", "output_logits", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "# Train.", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "\n", "        ", "saver", ".", "restore", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ",", "'checkpoint'", ",", "'model.ckpt-'", "+", "str", "(", "FLAGS", ".", "num", ")", ")", ")", "\n", "\n", "tasks_results", "=", "{", "}", "\n", "tasks_names", "=", "{", "}", "\n", "\n", "for", "t", "in", "os", ".", "listdir", "(", "test_data", ".", "test_data_dir", ")", ":", "\n", "            ", "task_number", ",", "task_name", ",", "test_size", "=", "test_data", ".", "feed_data", "(", "t", ")", "\n", "tasks_names", "[", "task_number", "]", "=", "task_name", "\n", "counter", "=", "0", "\n", "results", "=", "[", "]", "\n", "\n", "test_data", ".", "feed_batch_size", "(", "FLAGS", ".", "batch_size", ")", "\n", "for", "idx", "in", "range", "(", "int", "(", "test_size", "/", "FLAGS", ".", "batch_size", ")", "+", "1", ")", ":", "\n", "                ", "if", "idx", "==", "int", "(", "test_size", "/", "FLAGS", ".", "batch_size", ")", ":", "\n", "                    ", "if", "test_size", "%", "FLAGS", ".", "batch_size", "==", "0", ":", "\n", "                        ", "break", "\n", "", "test_data", ".", "feed_batch_size", "(", "test_size", "%", "FLAGS", ".", "batch_size", ")", "\n", "\n", "", "i_d", ",", "s_l", ",", "questions_indecies", ",", "target_mask", ",", "desired_answers", "=", "next", "(", "test_data", ")", "\n", "softmax_output", "=", "sess", ".", "run", "(", "[", "softmaxed", "]", ",", "feed_dict", "=", "{", "\n", "dataset", ".", "input_data", ":", "i_d", ",", "\n", "dataset", ".", "sequence_length", ":", "s_l", ",", "\n", "}", ")", "\n", "\n", "softmax_output", "=", "np", ".", "squeeze", "(", "softmax_output", ",", "axis", "=", "0", ")", "\n", "for", "astory", ",", "s_o", ",", "q_i", ",", "t_m", ",", "d_a", "in", "zip", "(", "i_d", ",", "softmax_output", ",", "questions_indecies", ",", "target_mask", ",", "desired_answers", ")", ":", "\n", "                    ", "given_answers", "=", "np", ".", "argmax", "(", "s_o", "[", "t_m", "]", ",", "axis", "=", "1", ")", "\n", "\n", "answers_cursor", "=", "0", "\n", "for", "question_indx", "in", "q_i", ":", "\n", "                        ", "question_grade", "=", "[", "]", "\n", "targets_cursor", "=", "question_indx", "+", "1", "\n", "while", "targets_cursor", "<", "len", "(", "astory", ")", "and", "astory", "[", "targets_cursor", "]", "==", "test_data", ".", "target_code", ":", "\n", "                            ", "question_grade", ".", "append", "(", "given_answers", "[", "answers_cursor", "]", "==", "d_a", "[", "answers_cursor", "]", ")", "\n", "answers_cursor", "+=", "1", "\n", "targets_cursor", "+=", "1", "\n", "", "results", ".", "append", "(", "np", ".", "prod", "(", "question_grade", ")", ")", "\n", "", "counter", "+=", "1", "\n", "\n", "", "", "error_rate", "=", "1.", "-", "np", ".", "mean", "(", "results", ")", "\n", "tasks_results", "[", "task_number", "]", "=", "error_rate", "\n", "print", "(", "\"\\r%s ... %.3f%% Error Rate.\\n\"", "%", "(", "task_name", ",", "error_rate", "*", "100", ")", ")", "\n", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "print", "(", "\"%-27s%s\"", "%", "(", "\"Task\"", ",", "\"Result\"", ")", ")", "\n", "print", "(", "\"-----------------------------------\"", ")", "\n", "for", "k", "in", "range", "(", "20", ")", ":", "\n", "            ", "task_id", "=", "str", "(", "k", "+", "1", ")", "\n", "task_result", "=", "\"%.2f%%\"", "%", "(", "tasks_results", "[", "task_id", "]", "*", "100", ")", "\n", "print", "(", "\"%-27s%s\"", "%", "(", "tasks_names", "[", "task_id", "]", ",", "task_result", ")", ")", "\n", "", "print", "(", "\"-----------------------------------\"", ")", "\n", "all_tasks_results", "=", "[", "v", "for", "_", ",", "v", "in", "tasks_results", ".", "iteritems", "(", ")", "]", "\n", "results_mean", "=", "\"%.2f%%\"", "%", "(", "np", ".", "mean", "(", "all_tasks_results", ")", "*", "100", ")", "\n", "failed_count", "=", "\"%d\"", "%", "(", "np", ".", "sum", "(", "np", ".", "array", "(", "all_tasks_results", ")", ">", "0.05", ")", ")", "\n", "\n", "print", "(", "\"%-27s%s\"", "%", "(", "\"Mean Err.\"", ",", "results_mean", ")", ")", "\n", "print", "(", "\"%-27s%s\"", "%", "(", "\"Failed (err. > 5%)\"", ",", "failed_count", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.eval.main": [[147, 150], ["tensorflow.logging.set_verbosity", "eval.test"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.None.eval.test"], ["", "", "def", "main", "(", "unused_argv", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "set_verbosity", "(", "3", ")", "# Print INFO log messages.", "\n", "test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.run_nfar.run_model": [[51, 93], ["print", "dnc.DNC.initial_state", "tensorflow.nn.dynamic_rnn", "model.DAM_test.dam.DAM", "model.DNC.dnc.DNC", "tensorflow.shape", "str"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.initial_state"], ["def", "run_model", "(", "input_data", ",", "sequence_length", ",", "input_size", ",", "target_size", ")", ":", "\n", "    ", "\"\"\"Runs model on input sequence.\"\"\"", "\n", "\n", "access_config", "=", "{", "\n", "\"memory_size\"", ":", "FLAGS", ".", "memory_address_size", ",", "\n", "\"word_size\"", ":", "FLAGS", ".", "memory_length_size", ",", "\n", "\"num_reads\"", ":", "FLAGS", ".", "num_read_heads", ",", "\n", "\"num_writes\"", ":", "FLAGS", ".", "num_write_heads", ",", "\n", "}", "\n", "controller_config", "=", "{", "\n", "\"hidden_size\"", ":", "FLAGS", ".", "hidden_size", ",", "\n", "}", "\n", "other_config", "=", "{", "\n", "\"keep_prob\"", ":", "FLAGS", ".", "keep_prob", ",", "\n", "\"num_memory_block\"", ":", "FLAGS", ".", "num_memory_blocks", ",", "\n", "\"act_fn_list\"", ":", "[", "'relu'", ",", "'relu'", ",", "'relu'", ",", "'relu'", "]", ",", "\n", "\"layer_size_list\"", ":", "[", "256", ",", "256", ",", "256", ",", "256", "]", "\n", "}", "\n", "clip_value", "=", "FLAGS", ".", "clip_value", "\n", "\n", "output_size", "=", "input_size", "+", "target_size", "\n", "\n", "if", "FLAGS", ".", "dam", ":", "\n", "        ", "dnc_core", "=", "dam", ".", "DAM", "(", "access_config", ",", "controller_config", ",", "other_config", ",", "output_size", ",", "clip_value", ")", "\n", "", "else", ":", "\n", "        ", "dnc_core", "=", "dnc", ".", "DNC", "(", "access_config", ",", "controller_config", ",", "output_size", ",", "clip_value", ")", "\n", "\n", "", "print", "(", "\"DNC Core: \"", "+", "str", "(", "dnc_core", ")", ")", "\n", "\n", "batch_size", "=", "tf", ".", "shape", "(", "input_data", ")", "[", "0", "]", "\n", "initial_state", "=", "dnc_core", ".", "initial_state", "(", "batch_size", ")", "\n", "output_sequence", ",", "_", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "dnc_core", ",", "\n", "inputs", "=", "input_data", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "time_major", "=", "False", ",", "\n", "initial_state", "=", "initial_state", ")", "\n", "\n", "self_supervised_output", "=", "output_sequence", "[", ":", ",", ":", ",", ":", "input_size", "]", "\n", "target_output", "=", "output_sequence", "[", ":", ",", ":", ",", "input_size", ":", "]", "\n", "\n", "return", "self_supervised_output", ",", "target_output", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.run_nfar.train": [[95, 209], ["task.loader_nfar.NFarthest", "task.loader_nfar.NFarthest.get_test_example", "task.loader_nfar.NFarthestData", "run_nfar.run_model", "print", "print", "print", "task.loader_nfar.NFarthestData.task_loss", "task.loader_nfar.NFarthestData.self_supervised_loss", "task.loader_nfar.NFarthestData.show_task_loss", "task.loader_nfar.NFarthestData.self_supervised_loss", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge_all", "tensorflow.no_op", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.trainable_variables", "tensorflow.clip_by_global_norm", "tensorflow.get_variable", "tensorflow.train.AdamOptimizer", "tf.train.AdamOptimizer.apply_gradients", "tensorflow.train.Saver", "tensorflow.ConfigProto", "tensorflow.gradients", "zip", "tensorflow.train.SingularMonitoredSession", "tensorflow.summary.FileWriter", "int", "sess.run", "numpy.mean", "tensorflow.logging.info", "range", "str", "str", "str", "tensorflow.zeros_initializer", "tensorflow.train.CheckpointSaverHook", "os.path.join", "range", "os.path.join", "tensorflow.get_default_graph", "next", "sess.run", "os.path.join", "tf.summary.FileWriter.add_summary", "sess.run", "numpy.mean", "tensorflow.logging.info"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.get_test_example", "home.repos.pwc.inspect_result.taewonpark_DAM.None.run_convexhull.run_model", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestData.task_loss", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestData.self_supervised_loss", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestData.show_task_loss", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestData.self_supervised_loss", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.next"], ["", "def", "train", "(", "epoch", ",", "report_interval", ")", ":", "\n", "    ", "\"\"\"Trains the DNC and periodically reports the loss.\"\"\"", "\n", "\n", "data", "=", "NFarthest", "(", "FLAGS", ".", "batch_size", ",", "FLAGS", ".", "p_re", ")", "\n", "test_input_data", ",", "test_target", ",", "test_seq_len", "=", "data", ".", "get_test_example", "(", ")", "\n", "dataset", "=", "NFarthestData", "(", "data", ".", "input_size", ",", "data", ".", "output_size", ",", "data", ".", "seq_len", ")", "\n", "self_supervised_output", ",", "target_output", "=", "run_model", "(", "dataset", ".", "input_data", ",", "dataset", ".", "sequence_length", ",", "dataset", ".", "input_size", ",", "dataset", ".", "output_size", ")", "\n", "\n", "print", "(", "\"Memory Refreshing Probability: \"", "+", "str", "(", "FLAGS", ".", "p_re", ")", ")", "\n", "print", "(", "\"Train Data Generator: \"", "+", "str", "(", "data", ")", ")", "\n", "print", "(", "\"Dataset: \"", "+", "str", "(", "dataset", ")", ")", "\n", "\n", "task_loss", "=", "dataset", ".", "task_loss", "(", "target_output", ")", "\n", "self_supervised_loss", "=", "dataset", ".", "self_supervised_loss", "(", "self_supervised_output", ")", "\n", "train_loss", "=", "task_loss", "+", "self_supervised_loss", "\n", "\n", "showed_original_loss", ",", "showed_scale_loss", "=", "dataset", ".", "show_task_loss", "(", "target_output", ")", "\n", "showed_self_supervised_loss", "=", "dataset", ".", "self_supervised_loss", "(", "self_supervised_output", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"original_loss\"", ",", "showed_original_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"scale_loss\"", ",", "showed_scale_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"self_supervised_loss\"", ",", "showed_self_supervised_loss", ")", "\n", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "no_summary", "=", "tf", ".", "no_op", "(", ")", "\n", "\n", "result", "=", "tf", ".", "nn", ".", "softmax", "(", "target_output", "[", ":", ",", "-", "1", ",", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "final_result", "=", "tf", ".", "argmax", "(", "result", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Set up optimizer with global norm clipping.", "\n", "trainable_variables", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "grads", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "\n", "tf", ".", "gradients", "(", "train_loss", ",", "trainable_variables", ")", ",", "FLAGS", ".", "max_grad_norm", ")", "\n", "\n", "global_step", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"global_step\"", ",", "\n", "shape", "=", "[", "]", ",", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "trainable", "=", "False", ",", "\n", "collections", "=", "[", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "tf", ".", "GraphKeys", ".", "GLOBAL_STEP", "]", ")", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "FLAGS", ".", "learning_rate", ")", "\n", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "\n", "zip", "(", "grads", ",", "trainable_variables", ")", ",", "global_step", "=", "global_step", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "save_steps", "=", "FLAGS", ".", "checkpoint_interval", "\n", "\n", "if", "FLAGS", ".", "checkpoint_interval", ">", "0", ":", "\n", "        ", "hooks", "=", "[", "\n", "tf", ".", "train", ".", "CheckpointSaverHook", "(", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ",", "\"checkpoint\"", ")", ",", "\n", "save_steps", "=", "save_steps", ",", "\n", "saver", "=", "saver", ")", "\n", "]", "\n", "", "else", ":", "\n", "        ", "hooks", "=", "[", "]", "\n", "\n", "# Train.", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "train", ".", "SingularMonitoredSession", "(", "\n", "hooks", "=", "hooks", ",", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ",", "\"checkpoint\"", ")", ",", "config", "=", "config", ")", "as", "sess", ":", "\n", "\n", "        ", "fetches", "=", "{", "\n", "'train_op'", ":", "train_op", ",", "\n", "'loss'", ":", "showed_original_loss", ",", "\n", "# 'summary_op': summary_op,", "\n", "'step'", ":", "global_step", ",", "\n", "}", "\n", "\n", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ",", "\"log\"", ")", ",", "graph", "=", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "\n", "iteration_per_epoch", "=", "int", "(", "FLAGS", ".", "training_iteration", "/", "epoch", ")", "\n", "\n", "# First.", "\n", "prediction", "=", "sess", ".", "run", "(", "final_result", ",", "feed_dict", "=", "{", "\n", "dataset", ".", "input_data", ":", "test_input_data", ",", "\n", "dataset", ".", "sequence_length", ":", "test_seq_len", "\n", "}", ")", "\n", "accuracy", "=", "np", ".", "mean", "(", "prediction", "==", "test_target", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"Training Iteration %d/%d: Accuracy %.3f.\\n\"", ",", "\n", "0", ",", "epoch", "*", "iteration_per_epoch", ",", "accuracy", ")", "\n", "\n", "loss", "=", "0", "\n", "for", "e", "in", "range", "(", "epoch", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "iteration_per_epoch", ")", ":", "\n", "                ", "i_d", ",", "t_o", ",", "s_l", ",", "l_m", ",", "o_l_m", ",", "s_f", "=", "next", "(", "data", ")", "\n", "\n", "fetches", "[", "'summary_op'", "]", "=", "summary_op", "if", "i", "%", "FLAGS", ".", "summarize", "==", "0", "else", "no_summary", "\n", "fetches_", "=", "sess", ".", "run", "(", "fetches", ",", "feed_dict", "=", "{", "\n", "dataset", ".", "input_data", ":", "i_d", ",", "\n", "dataset", ".", "target_output", ":", "t_o", ",", "\n", "dataset", ".", "sequence_length", ":", "s_l", ",", "\n", "dataset", ".", "loss_mask", ":", "l_m", ",", "\n", "dataset", ".", "original_loss_mask", ":", "o_l_m", ",", "\n", "dataset", ".", "scale_factor", ":", "s_f", ",", "\n", "}", ")", "\n", "loss", "+=", "fetches_", "[", "'loss'", "]", "\n", "\n", "if", "i", "%", "FLAGS", ".", "summarize", "==", "0", ":", "\n", "                    ", "summary_writer", ".", "add_summary", "(", "fetches_", "[", "'summary_op'", "]", ",", "fetches_", "[", "'step'", "]", ")", "\n", "\n", "", "if", "(", "e", "*", "iteration_per_epoch", "+", "i", "+", "1", ")", "%", "report_interval", "==", "0", ":", "\n", "\n", "                    ", "prediction", "=", "sess", ".", "run", "(", "final_result", ",", "feed_dict", "=", "{", "\n", "dataset", ".", "input_data", ":", "test_input_data", ",", "\n", "dataset", ".", "sequence_length", ":", "test_seq_len", "\n", "}", ")", "\n", "accuracy", "=", "np", ".", "mean", "(", "prediction", "==", "test_target", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"Training Iteration %d/%d: Avg loss %.3f, Accuracy %.3f.\\n\"", ",", "\n", "e", "*", "iteration_per_epoch", "+", "i", "+", "1", ",", "epoch", "*", "iteration_per_epoch", ",", "loss", "/", "report_interval", ",", "accuracy", ")", "\n", "loss", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.run_nfar.main": [[211, 219], ["time.time", "tensorflow.logging.set_verbosity", "run_nfar.train", "print", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "time.time"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.None.run_convexhull.train"], ["", "", "", "", "", "def", "main", "(", "unused_argv", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ")", ")", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "3", ")", "# Print INFO log messages.", "\n", "train", "(", "FLAGS", ".", "epoch", ",", "FLAGS", ".", "report_interval", ")", "\n", "print", "(", "\"Total time: %.2f min\"", "%", "(", "(", "time", ".", "time", "(", ")", "-", "start", ")", "/", "60", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.train.run_model": [[60, 94], ["print", "dnc.DNC.initial_state", "tensorflow.nn.dynamic_rnn", "model.DAM.dam.DAM", "model.DNC.dnc.DNC", "str"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.initial_state"], ["def", "run_model", "(", "input_data", ",", "sequence_length", ",", "output_size", ")", ":", "\n", "    ", "\"\"\"Runs model on input sequence.\"\"\"", "\n", "\n", "access_config", "=", "{", "\n", "\"memory_size\"", ":", "FLAGS", ".", "memory_address_size", ",", "\n", "\"word_size\"", ":", "FLAGS", ".", "memory_length_size", ",", "\n", "\"num_reads\"", ":", "FLAGS", ".", "num_read_heads", ",", "\n", "\"num_writes\"", ":", "FLAGS", ".", "num_write_heads", ",", "\n", "}", "\n", "controller_config", "=", "{", "\n", "\"hidden_size\"", ":", "FLAGS", ".", "hidden_size", ",", "\n", "}", "\n", "other_config", "=", "{", "\n", "\"keep_prob\"", ":", "FLAGS", ".", "keep_prob", ",", "\n", "\"num_memory_block\"", ":", "FLAGS", ".", "num_memory_blocks", "\n", "}", "\n", "clip_value", "=", "FLAGS", ".", "clip_value", "\n", "\n", "if", "FLAGS", ".", "dam", ":", "\n", "        ", "core", "=", "dam", ".", "DAM", "(", "access_config", ",", "controller_config", ",", "other_config", ",", "output_size", ",", "clip_value", ")", "\n", "", "else", ":", "\n", "        ", "core", "=", "dnc", ".", "DNC", "(", "access_config", ",", "controller_config", ",", "output_size", ",", "clip_value", ")", "\n", "\n", "", "print", "(", "\"Core: \"", "+", "str", "(", "core", ")", ")", "\n", "\n", "initial_state", "=", "core", ".", "initial_state", "(", "FLAGS", ".", "batch_size", ")", "\n", "output_sequence", ",", "_", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "core", ",", "\n", "inputs", "=", "input_data", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "time_major", "=", "False", ",", "\n", "initial_state", "=", "initial_state", ")", "\n", "\n", "return", "output_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.train.train": [[96, 200], ["print", "print", "print", "loader.AlgorithmicData.cost", "loader.AlgorithmicData.check_cost", "tensorflow.summary.scalar", "tensorflow.summary.merge_all", "tensorflow.trainable_variables", "tensorflow.clip_by_global_norm", "tensorflow.get_variable", "tensorflow.train.RMSPropOptimizer", "tf.train.RMSPropOptimizer.apply_gradients", "tensorflow.train.Saver", "tensorflow.ConfigProto", "loader.BAbIBatchGenerator", "loader.BAbIData", "train.run_model", "loader.AlgorithmicData", "train.run_model", "tensorflow.gradients", "zip", "tensorflow.train.SingularMonitoredSession", "tensorflow.summary.FileWriter", "range", "loader.Copy", "str", "str", "str", "tensorflow.zeros_initializer", "int", "tensorflow.train.CheckpointSaverHook", "os.path.join", "int", "int", "range", "loader.AssociativeRecall", "os.path.join", "tensorflow.get_default_graph", "next", "sess.run", "tf.summary.FileWriter.add_summary", "loader.RepresentationRecall", "os.path.join", "tensorflow.logging.info", "tensorflow.logging.info", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.AlgorithmicData.cost", "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.AlgorithmicData.check_cost", "home.repos.pwc.inspect_result.taewonpark_DAM.None.run_convexhull.run_model", "home.repos.pwc.inspect_result.taewonpark_DAM.None.run_convexhull.run_model", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.next"], ["", "def", "train", "(", "epoch", ",", "report_interval", ")", ":", "\n", "    ", "\"\"\"Trains the model and periodically reports the loss.\"\"\"", "\n", "\n", "if", "FLAGS", ".", "mode", "==", "\"bAbI\"", ":", "\n", "        ", "train_data", "=", "BAbIBatchGenerator", "(", "FLAGS", ".", "batch_size", ",", "FLAGS", ".", "p_re", ",", "shuffle", "=", "True", ")", "\n", "dataset", "=", "BAbIData", "(", "FLAGS", ".", "batch_size", ",", "train_data", ".", "input_size", ",", "train_data", ".", "output_size", ",", "FLAGS", ".", "embedding_size", ")", "\n", "output_logits", "=", "run_model", "(", "dataset", ".", "processed_input_data", ",", "dataset", ".", "sequence_length", ",", "train_data", ".", "output_size", ")", "\n", "", "else", ":", "\n", "        ", "if", "FLAGS", ".", "mode", "==", "\"Copy\"", ":", "\n", "            ", "train_data", "=", "Copy", "(", "FLAGS", ".", "batch_size", ",", "FLAGS", ".", "p_re", ",", "FLAGS", ".", "bit_w", ",", "FLAGS", ".", "min_length", ",", "FLAGS", ".", "max_length", ")", "\n", "", "elif", "FLAGS", ".", "mode", "==", "\"AssociativeRecall\"", ":", "\n", "            ", "train_data", "=", "AssociativeRecall", "(", "FLAGS", ".", "batch_size", ",", "FLAGS", ".", "p_re", ",", "FLAGS", ".", "bit_w", ",", "FLAGS", ".", "item_bit", ",", "FLAGS", ".", "min_length", ",", "FLAGS", ".", "max_length", ")", "\n", "", "elif", "FLAGS", ".", "mode", "==", "'RepresentationRecall'", ":", "\n", "            ", "train_data", "=", "RepresentationRecall", "(", "FLAGS", ".", "batch_size", ",", "FLAGS", ".", "N", ",", "FLAGS", ".", "bit_w", ",", "FLAGS", ".", "num_bit", ",", "FLAGS", ".", "min_length", ",", "FLAGS", ".", "max_length", ")", "\n", "", "dataset", "=", "AlgorithmicData", "(", "FLAGS", ".", "batch_size", ",", "train_data", ".", "input_size", ",", "train_data", ".", "output_size", ")", "\n", "output_logits", "=", "run_model", "(", "dataset", ".", "input_data", ",", "dataset", ".", "sequence_length", ",", "train_data", ".", "output_size", ")", "\n", "\n", "", "print", "(", "\"Memory Refreshing Probability: \"", "+", "str", "(", "FLAGS", ".", "p_re", ")", ")", "\n", "print", "(", "\"Train Data Generator: \"", "+", "str", "(", "train_data", ")", ")", "\n", "print", "(", "\"Dataset: \"", "+", "str", "(", "dataset", ")", ")", "\n", "\n", "train_loss", "=", "dataset", ".", "cost", "(", "output_logits", ")", "\n", "original_loss", "=", "dataset", ".", "check_cost", "(", "output_logits", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss\"", ",", "original_loss", ")", "\n", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n", "# Set up optimizer with global norm clipping.", "\n", "trainable_variables", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "grads", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "\n", "tf", ".", "gradients", "(", "train_loss", ",", "trainable_variables", ")", ",", "FLAGS", ".", "max_grad_norm", ")", "\n", "\n", "global_step", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"global_step\"", ",", "\n", "shape", "=", "[", "]", ",", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "trainable", "=", "False", ",", "\n", "collections", "=", "[", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "tf", ".", "GraphKeys", ".", "GLOBAL_STEP", "]", ")", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "\n", "FLAGS", ".", "learning_rate", ",", "momentum", "=", "FLAGS", ".", "momentum", ",", "epsilon", "=", "FLAGS", ".", "optimizer_epsilon", ")", "\n", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "\n", "zip", "(", "grads", ",", "trainable_variables", ")", ",", "global_step", "=", "global_step", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "save_steps", "=", "int", "(", "train_data", ".", "data_size", "/", "FLAGS", ".", "batch_size", ")", "*", "FLAGS", ".", "checkpoint_interval", "if", "(", "'bAbI'", "in", "FLAGS", ".", "mode", ")", "else", "FLAGS", ".", "training_iteration", "\n", "\n", "if", "FLAGS", ".", "checkpoint_interval", ">", "0", ":", "\n", "        ", "hooks", "=", "[", "\n", "tf", ".", "train", ".", "CheckpointSaverHook", "(", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ",", "\"checkpoint\"", ")", ",", "\n", "save_steps", "=", "save_steps", ",", "\n", "saver", "=", "saver", ")", "\n", "]", "\n", "", "else", ":", "\n", "        ", "hooks", "=", "[", "]", "\n", "\n", "# Train.", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "train", ".", "SingularMonitoredSession", "(", "\n", "hooks", "=", "hooks", ",", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ",", "\"checkpoint\"", ")", ",", "config", "=", "config", ")", "as", "sess", ":", "\n", "\n", "        ", "fetches", "=", "{", "\n", "'train_op'", ":", "train_op", ",", "\n", "'loss'", ":", "original_loss", ",", "\n", "'summary_op'", ":", "summary_op", ",", "\n", "'step'", ":", "global_step", ",", "\n", "}", "\n", "\n", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ",", "\"log\"", ")", ",", "graph", "=", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "\n", "if", "'bAbI'", "in", "FLAGS", ".", "mode", ":", "\n", "            ", "iteration_per_epoch", "=", "int", "(", "train_data", ".", "data_size", "/", "FLAGS", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "iteration_per_epoch", "=", "int", "(", "FLAGS", ".", "training_iteration", "/", "epoch", ")", "\n", "\n", "", "loss", "=", "0", "\n", "for", "e", "in", "range", "(", "epoch", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "iteration_per_epoch", ")", ":", "\n", "                ", "i_d", ",", "t_o", ",", "s_l", ",", "l_m", ",", "o_l_m", "=", "next", "(", "train_data", ")", "\n", "\n", "fetches_", "=", "sess", ".", "run", "(", "fetches", ",", "feed_dict", "=", "{", "\n", "dataset", ".", "input_data", ":", "i_d", ",", "\n", "dataset", ".", "target_output", ":", "t_o", ",", "\n", "dataset", ".", "sequence_length", ":", "s_l", ",", "\n", "dataset", ".", "loss_mask", ":", "l_m", ",", "\n", "dataset", ".", "original_loss_mask", ":", "o_l_m", "\n", "}", ")", "\n", "loss", "+=", "fetches_", "[", "'loss'", "]", "\n", "\n", "summary_writer", ".", "add_summary", "(", "fetches_", "[", "'summary_op'", "]", ",", "fetches_", "[", "'step'", "]", ")", "\n", "\n", "if", "(", "e", "*", "iteration_per_epoch", "+", "i", "+", "1", ")", "%", "report_interval", "==", "0", ":", "\n", "                    ", "if", "'bAbI'", "in", "FLAGS", ".", "mode", ":", "\n", "                        ", "tf", ".", "logging", ".", "info", "(", "\"Training Iteration %d/%d: Avg training loss %f.\\n\"", ",", "\n", "e", "*", "iteration_per_epoch", "+", "i", "+", "1", ",", "epoch", "*", "iteration_per_epoch", ",", "\n", "loss", "/", "report_interval", ")", "\n", "", "else", ":", "\n", "                        ", "tf", ".", "logging", ".", "info", "(", "\"Training Iteration %d/%d: Avg training accuracy %f.\\n\"", ",", "\n", "e", "*", "iteration_per_epoch", "+", "i", "+", "1", ",", "epoch", "*", "iteration_per_epoch", ",", "\n", "np", ".", "exp", "(", "-", "loss", "/", "report_interval", ")", ")", "\n", "", "loss", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.train.main": [[202, 208], ["tensorflow.logging.set_verbosity", "train.train", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.None.run_convexhull.train"], ["", "", "", "", "", "def", "main", "(", "unused_argv", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ")", ")", "\n", "\n", "", "tf", ".", "logging", ".", "set_verbosity", "(", "3", ")", "# Print INFO log messages.", "\n", "train", "(", "FLAGS", ".", "epoch", ",", "FLAGS", ".", "report_interval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.preprocess.create_dictionary": [[9, 26], ["enumerate", "open", "line.replace.replace", "line.replace.replace", "line.replace.replace", "line.replace.split", "word.isalpha", "len", "word.lower", "word.lower"], "function", ["None"], ["def", "create_dictionary", "(", "files_list", ")", ":", "\n", "\n", "    ", "lexicons_dict", "=", "{", "'<PAD>'", ":", "0", ",", "'.'", ":", "1", ",", "'?'", ":", "2", ",", "'-'", ":", "3", "}", "\n", "\n", "for", "indx", ",", "filename", "in", "enumerate", "(", "files_list", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "for", "line", "in", "fobj", ":", "\n", "\n", "# first seperate . and ? away from words into seperate lexicons", "\n", "                ", "line", "=", "line", ".", "replace", "(", "'.'", ",", "' .'", ")", "\n", "line", "=", "line", ".", "replace", "(", "'?'", ",", "' ?'", ")", "\n", "line", "=", "line", ".", "replace", "(", "','", ",", "' '", ")", "\n", "\n", "for", "word", "in", "line", ".", "split", "(", ")", ":", "\n", "                    ", "if", "not", "word", ".", "lower", "(", ")", "in", "lexicons_dict", "and", "word", ".", "isalpha", "(", ")", ":", "\n", "                        ", "lexicons_dict", "[", "word", ".", "lower", "(", ")", "]", "=", "len", "(", "lexicons_dict", ")", "\n", "", "", "", "", "", "return", "lexicons_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.preprocess.encode_data": [[28, 103], ["enumerate", "open", "line.replace.replace", "line.replace.replace", "line.replace.replace", "enumerate", "stories_lengths.append", "line.replace.split", "len", "files[].append", "word.isalpha", "len", "stories_lengths.append", "story_inputs.append", "story_inputs.append", "story_outputs.append", "masking.append", "len", "files[].append", "len", "word.lower", "word.lower"], "function", ["None"], ["", "def", "encode_data", "(", "files_list", ",", "lexicons_dictionary", ",", "length_limit", "=", "800", ")", ":", "\n", "\n", "    ", "files", "=", "{", "}", "\n", "story_outputs", "=", "None", "\n", "masking", "=", "None", "\n", "check_mask", "=", "None", "\n", "stories_lengths", "=", "[", "]", "\n", "answers_flag", "=", "False", "\n", "limit", "=", "length_limit", "\n", "\n", "for", "indx", ",", "filename", "in", "enumerate", "(", "files_list", ")", ":", "\n", "\n", "        ", "test_flag", "=", "(", "'test'", "in", "filename", ")", "\n", "files", "[", "filename", "]", "=", "[", "]", "\n", "story_inputs", "=", "None", "\n", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "for", "line", "in", "fobj", ":", "\n", "\n", "# first seperate . and ? away from words into seperate lexicons", "\n", "                ", "line", "=", "line", ".", "replace", "(", "'.'", ",", "' .'", ")", "\n", "line", "=", "line", ".", "replace", "(", "'?'", ",", "' ?'", ")", "\n", "line", "=", "line", ".", "replace", "(", "','", ",", "' '", ")", "\n", "\n", "answers_flag", "=", "False", "# reset as answers end by end of line", "\n", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "line", ".", "split", "(", ")", ")", ":", "\n", "\n", "                    ", "if", "word", "==", "'1'", "and", "i", "==", "0", ":", "\n", "# beginning of a new story", "\n", "                        ", "if", "not", "story_inputs", "is", "None", ":", "\n", "                            ", "stories_lengths", ".", "append", "(", "len", "(", "story_inputs", ")", ")", "\n", "if", "(", "len", "(", "story_inputs", ")", "<=", "limit", ")", "or", "test_flag", ":", "\n", "                                ", "files", "[", "filename", "]", ".", "append", "(", "{", "\n", "'inputs'", ":", "story_inputs", ",", "\n", "'outputs'", ":", "story_outputs", ",", "\n", "'question_mask'", ":", "masking", "\n", "}", ")", "\n", "", "", "story_inputs", "=", "[", "]", "\n", "story_outputs", "=", "[", "]", "\n", "masking", "=", "[", "]", "\n", "check_mask", "=", "0", "\n", "\n", "", "if", "word", ".", "isalpha", "(", ")", "or", "word", "==", "'?'", "or", "word", "==", "'.'", ":", "\n", "                        ", "if", "not", "answers_flag", ":", "\n", "                            ", "story_inputs", ".", "append", "(", "lexicons_dictionary", "[", "word", ".", "lower", "(", ")", "]", ")", "\n", "check_mask", "+=", "1", "\n", "if", "word", "==", "'.'", ":", "\n", "                                ", "masking", "+=", "[", "0", "]", "*", "check_mask", "\n", "check_mask", "=", "0", "\n", "", "elif", "word", "==", "'?'", ":", "\n", "                                ", "masking", "+=", "[", "1", "]", "*", "check_mask", "\n", "check_mask", "=", "0", "\n", "", "", "else", ":", "\n", "                            ", "story_inputs", ".", "append", "(", "lexicons_dictionary", "[", "'-'", "]", ")", "\n", "story_outputs", ".", "append", "(", "lexicons_dictionary", "[", "word", ".", "lower", "(", ")", "]", ")", "\n", "masking", ".", "append", "(", "0", ")", "\n", "\n", "# set the answers_flags if a question mark is encountered", "\n", "", "if", "not", "answers_flag", ":", "\n", "                            ", "answers_flag", "=", "(", "word", "==", "'?'", ")", "\n", "", "", "", "", "if", "not", "story_inputs", "is", "None", ":", "\n", "                ", "stories_lengths", ".", "append", "(", "len", "(", "story_inputs", ")", ")", "\n", "if", "(", "len", "(", "story_inputs", ")", "<=", "limit", ")", "or", "test_flag", ":", "\n", "                    ", "files", "[", "filename", "]", ".", "append", "(", "{", "\n", "'inputs'", ":", "story_inputs", ",", "\n", "'outputs'", ":", "story_outputs", ",", "\n", "'question_mask'", ":", "masking", "\n", "}", ")", "\n", "", "story_inputs", "=", "[", "]", "\n", "story_outputs", "=", "[", "]", "\n", "masking", "=", "[", "]", "\n", "check_mask", "=", "0", "\n", "\n", "", "", "", "return", "files", ",", "stories_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.preprocess.bAbI_preprocessing": [[105, 146], ["requests.get", "tarfile.open", "tarfile.open.extractall", "os.path.join", "os.listdir", "preprocess.create_dictionary", "preprocess.encode_data", "shutil.rmtree", "os.path.join", "os.path.join", "os.mkdir", "os.mkdir", "os.mkdir", "pickle.dump", "pickle.dump", "os.path.join", "os.path.isfile", "open", "filename.endswith", "open", "io.BytesIO", "files_list.append", "os.path.join", "pickle.dump", "filename.endswith", "os.path.join", "open", "train_data.extend", "os.path.join", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.None.preprocess.create_dictionary", "home.repos.pwc.inspect_result.taewonpark_DAM.None.preprocess.encode_data"], ["", "def", "bAbI_preprocessing", "(", "data_dir", ")", ":", "\n", "\n", "    ", "download_url", "=", "'http://www.thespermwhale.com/jaseweston/babi/tasks_1-20_v1-2.tar.gz'", "\n", "download_dir", "=", "'tasks_1-20_v1-2'", "\n", "\n", "r", "=", "requests", ".", "get", "(", "download_url", ")", "\n", "t", "=", "tarfile", ".", "open", "(", "fileobj", "=", "io", ".", "BytesIO", "(", "r", ".", "content", ")", ",", "mode", "=", "'r|gz'", ")", "\n", "t", ".", "extractall", "(", "'.'", ")", "\n", "\n", "files_list", "=", "[", "]", "\n", "task_dir", "=", "join", "(", "download_dir", ",", "'en-10k'", ")", "\n", "for", "entryname", "in", "listdir", "(", "task_dir", ")", ":", "\n", "        ", "entry_path", "=", "join", "(", "task_dir", ",", "entryname", ")", "\n", "if", "isfile", "(", "entry_path", ")", ":", "\n", "            ", "files_list", ".", "append", "(", "entry_path", ")", "\n", "\n", "", "", "lexicon_dictionary", "=", "create_dictionary", "(", "files_list", ")", "\n", "encoded_files", ",", "stories_lengths", "=", "encode_data", "(", "files_list", ",", "lexicon_dictionary", ")", "\n", "\n", "rmtree", "(", "download_dir", ")", "\n", "\n", "train_data_dir", "=", "join", "(", "data_dir", ",", "'train'", ")", "\n", "test_data_dir", "=", "join", "(", "data_dir", ",", "'test'", ")", "\n", "\n", "mkdir", "(", "data_dir", ")", "\n", "mkdir", "(", "train_data_dir", ")", "\n", "mkdir", "(", "test_data_dir", ")", "\n", "\n", "pickle", ".", "dump", "(", "lexicon_dictionary", ",", "open", "(", "join", "(", "data_dir", ",", "'lexicon-dict.pkl'", ")", ",", "'wb'", ")", ")", "\n", "\n", "train_data", "=", "[", "]", "\n", "\n", "for", "filename", "in", "encoded_files", ":", "\n", "        ", "if", "filename", ".", "endswith", "(", "\"test.txt\"", ")", ":", "\n", "            ", "pickle", ".", "dump", "(", "encoded_files", "[", "filename", "]", ",", "open", "(", "join", "(", "test_data_dir", ",", "basename", "(", "filename", ")", "+", "'.pkl'", ")", ",", "'wb'", ")", ")", "\n", "", "elif", "filename", ".", "endswith", "(", "\"train.txt\"", ")", ":", "\n", "            ", "train_data", ".", "extend", "(", "encoded_files", "[", "filename", "]", ")", "\n", "\n", "", "", "pickle", ".", "dump", "(", "train_data", ",", "open", "(", "join", "(", "train_data_dir", ",", "'train.pkl'", ")", ",", "'wb'", ")", ")", "\n", "\n", "return", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.run_convexhull.run_model": [[51, 93], ["print", "dnc.DNC.initial_state", "tensorflow.nn.dynamic_rnn", "model.DAM_test.dam.DAM", "model.DNC.dnc.DNC", "tensorflow.shape", "str"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.initial_state"], ["def", "run_model", "(", "input_data", ",", "sequence_length", ",", "input_size", ",", "target_size", ")", ":", "\n", "    ", "\"\"\"Runs model on input sequence.\"\"\"", "\n", "\n", "access_config", "=", "{", "\n", "\"memory_size\"", ":", "FLAGS", ".", "memory_address_size", ",", "\n", "\"word_size\"", ":", "FLAGS", ".", "memory_length_size", ",", "\n", "\"num_reads\"", ":", "FLAGS", ".", "num_read_heads", ",", "\n", "\"num_writes\"", ":", "FLAGS", ".", "num_write_heads", ",", "\n", "}", "\n", "controller_config", "=", "{", "\n", "\"hidden_size\"", ":", "FLAGS", ".", "hidden_size", ",", "\n", "}", "\n", "other_config", "=", "{", "\n", "\"keep_prob\"", ":", "FLAGS", ".", "keep_prob", ",", "\n", "\"num_memory_block\"", ":", "FLAGS", ".", "num_memory_blocks", ",", "\n", "\"act_fn_list\"", ":", "[", "'relu'", ",", "'relu'", "]", ",", "\n", "\"layer_size_list\"", ":", "[", "256", ",", "256", "]", "\n", "}", "\n", "clip_value", "=", "FLAGS", ".", "clip_value", "\n", "\n", "output_size", "=", "input_size", "+", "target_size", "\n", "\n", "if", "FLAGS", ".", "dam", ":", "\n", "        ", "dnc_core", "=", "dam", ".", "DAM", "(", "access_config", ",", "controller_config", ",", "other_config", ",", "output_size", ",", "clip_value", ")", "\n", "", "else", ":", "\n", "        ", "dnc_core", "=", "dnc", ".", "DNC", "(", "access_config", ",", "controller_config", ",", "output_size", ",", "clip_value", ")", "\n", "\n", "", "print", "(", "\"DNC Core: \"", "+", "str", "(", "dnc_core", ")", ")", "\n", "\n", "batch_size", "=", "tf", ".", "shape", "(", "input_data", ")", "[", "0", "]", "\n", "initial_state", "=", "dnc_core", ".", "initial_state", "(", "batch_size", ")", "\n", "output_sequence", ",", "_", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "dnc_core", ",", "\n", "inputs", "=", "input_data", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "time_major", "=", "False", ",", "\n", "initial_state", "=", "initial_state", ")", "\n", "\n", "self_supervised_output", "=", "output_sequence", "[", ":", ",", ":", ",", ":", "input_size", "]", "\n", "target_output", "=", "output_sequence", "[", ":", ",", ":", ",", "input_size", ":", "]", "\n", "\n", "return", "self_supervised_output", ",", "target_output", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.run_convexhull.train": [[95, 249], ["task.loader_convexhull.ConvexHull", "task.loader_convexhull.ConvexHull", "task.loader_convexhull.ConvexHull", "task.loader_convexhull.ConvexHullData", "run_convexhull.run_model", "print", "print", "print", "print", "task.loader_convexhull.ConvexHullData.task_loss", "task.loader_convexhull.ConvexHullData.self_supervised_loss", "task.loader_convexhull.ConvexHullData.show_task_loss", "task.loader_convexhull.ConvexHullData.self_supervised_loss", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge_all", "tensorflow.no_op", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.trainable_variables", "tensorflow.clip_by_global_norm", "tensorflow.get_variable", "tensorflow.train.RMSPropOptimizer", "tf.train.RMSPropOptimizer.apply_gradients", "tensorflow.train.Saver", "tensorflow.ConfigProto", "tensorflow.gradients", "zip", "tensorflow.train.SingularMonitoredSession", "tensorflow.summary.FileWriter", "int", "range", "range", "tensorflow.logging.info", "range", "str", "str", "str", "numpy.sum", "tensorflow.zeros_initializer", "tensorflow.train.CheckpointSaverHook", "os.path.join", "task.loader_convexhull.ConvexHull.get_test_sample_wlen", "sess.run", "zip", "task.loader_convexhull.ConvexHull.get_test_sample_wlen", "sess.run", "zip", "range", "os.path.join", "tensorflow.get_default_graph", "numpy.mean", "numpy.mean", "task.loader_convexhull.ConvexHull.get_train_sample_wlen", "sess.run", "numpy.prod", "os.path.join", "tf.summary.FileWriter.add_summary", "range", "range", "tensorflow.logging.info", "v.get_shape().as_list", "tensorflow.trainable_variables", "task.loader_convexhull.ConvexHull.get_test_sample_wlen", "sess.run", "zip", "task.loader_convexhull.ConvexHull.get_test_sample_wlen", "sess.run", "zip", "numpy.mean", "numpy.mean", "v.get_shape"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.None.run_convexhull.run_model", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestData.task_loss", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestData.self_supervised_loss", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestData.show_task_loss", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestData.self_supervised_loss", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.get_test_sample_wlen", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.get_test_sample_wlen", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.get_train_sample_wlen", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.get_test_sample_wlen", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.get_test_sample_wlen"], ["", "def", "train", "(", "epoch", ",", "report_interval", ")", ":", "\n", "    ", "\"\"\"Trains the DNC and periodically reports the loss.\"\"\"", "\n", "\n", "data", "=", "ConvexHull", "(", "FLAGS", ".", "batch_size", ",", "FLAGS", ".", "p_re", ",", "mode", "=", "'train'", ")", "\n", "test_5_data", "=", "ConvexHull", "(", "500", ",", "0.0", ",", "test_n", "=", "5", ",", "mode", "=", "'test'", ")", "\n", "test_10_data", "=", "ConvexHull", "(", "500", ",", "0.0", ",", "test_n", "=", "10", ",", "mode", "=", "'test'", ")", "\n", "dataset", "=", "ConvexHullData", "(", "data", ".", "input_size", ",", "data", ".", "output_size", ")", "\n", "self_supervised_output", ",", "target_output", "=", "run_model", "(", "dataset", ".", "input_data", ",", "dataset", ".", "sequence_length", ",", "dataset", ".", "input_size", ",", "dataset", ".", "output_size", ")", "\n", "\n", "print", "(", "\"Association Reinforcing Probability: \"", "+", "str", "(", "FLAGS", ".", "p_re", ")", ")", "\n", "print", "(", "\"Train Data Generator: \"", "+", "str", "(", "data", ")", ")", "\n", "print", "(", "\"Dataset: \"", "+", "str", "(", "dataset", ")", ")", "\n", "print", "(", "\"Number of training paramter: {0}\"", ".", "format", "(", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "v", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "]", ")", ")", ")", "\n", "\n", "task_loss", "=", "dataset", ".", "task_loss", "(", "target_output", ")", "\n", "self_supervised_loss", "=", "dataset", ".", "self_supervised_loss", "(", "self_supervised_output", ")", "\n", "train_loss", "=", "task_loss", "+", "self_supervised_loss", "\n", "\n", "showed_original_loss", ",", "showed_scale_loss", "=", "dataset", ".", "show_task_loss", "(", "target_output", ")", "\n", "showed_self_supervised_loss", "=", "dataset", ".", "self_supervised_loss", "(", "self_supervised_output", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"original_loss\"", ",", "showed_original_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"scale_loss\"", ",", "showed_scale_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"self_supervised_loss\"", ",", "showed_self_supervised_loss", ")", "\n", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "no_summary", "=", "tf", ".", "no_op", "(", ")", "\n", "\n", "result", "=", "tf", ".", "nn", ".", "softmax", "(", "target_output", ",", "axis", "=", "-", "1", ")", "\n", "final_result", "=", "tf", ".", "argmax", "(", "result", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Set up optimizer with global norm clipping.", "\n", "trainable_variables", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "grads", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "\n", "tf", ".", "gradients", "(", "train_loss", ",", "trainable_variables", ")", ",", "FLAGS", ".", "max_grad_norm", ")", "\n", "\n", "global_step", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"global_step\"", ",", "\n", "shape", "=", "[", "]", ",", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "trainable", "=", "False", ",", "\n", "collections", "=", "[", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "tf", ".", "GraphKeys", ".", "GLOBAL_STEP", "]", ")", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "\n", "FLAGS", ".", "learning_rate", ",", "momentum", "=", "FLAGS", ".", "momentum", ",", "epsilon", "=", "FLAGS", ".", "optimizer_epsilon", ")", "\n", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "\n", "zip", "(", "grads", ",", "trainable_variables", ")", ",", "global_step", "=", "global_step", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "save_steps", "=", "FLAGS", ".", "checkpoint_interval", "\n", "\n", "if", "FLAGS", ".", "checkpoint_interval", ">", "0", ":", "\n", "        ", "hooks", "=", "[", "\n", "tf", ".", "train", ".", "CheckpointSaverHook", "(", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ",", "\"checkpoint\"", ")", ",", "\n", "save_steps", "=", "save_steps", ",", "\n", "saver", "=", "saver", ")", "\n", "]", "\n", "", "else", ":", "\n", "        ", "hooks", "=", "[", "]", "\n", "\n", "# Train.", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "train", ".", "SingularMonitoredSession", "(", "\n", "hooks", "=", "hooks", ",", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ",", "\"checkpoint\"", ")", ",", "config", "=", "config", ")", "as", "sess", ":", "\n", "\n", "        ", "fetches", "=", "{", "\n", "'train_op'", ":", "train_op", ",", "\n", "'loss'", ":", "showed_original_loss", ",", "\n", "# 'summary_op': summary_op,", "\n", "'step'", ":", "global_step", ",", "\n", "}", "\n", "\n", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ",", "\"log\"", ")", ",", "graph", "=", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "\n", "iteration_per_epoch", "=", "int", "(", "FLAGS", ".", "training_iteration", "/", "epoch", ")", "\n", "\n", "# Accuracy for N=5.", "\n", "accuracy_for_5", "=", "0", "\n", "for", "_", "in", "range", "(", "test_5_data", ".", "test_iter", ")", ":", "\n", "            ", "i_d", ",", "t_o", ",", "s_l", ",", "_", ",", "o_l_m", ",", "_", "=", "test_5_data", ".", "get_test_sample_wlen", "(", ")", "\n", "prediction", "=", "sess", ".", "run", "(", "final_result", ",", "feed_dict", "=", "{", "\n", "dataset", ".", "input_data", ":", "i_d", ",", "\n", "dataset", ".", "sequence_length", ":", "s_l", "\n", "}", ")", "\n", "for", "p_", ",", "t_", ",", "o_", "in", "zip", "(", "prediction", ",", "t_o", ",", "o_l_m", ")", ":", "\n", "                ", "test_bed", "=", "np", ".", "mean", "(", "p_", "[", "o_", "==", "1.0", "]", "==", "t_", "[", "o_", "==", "1.0", "]", ")", "\n", "accuracy_for_5", "+=", "1", "if", "test_bed", "==", "1.0", "else", "0", "\n", "", "", "accuracy_for_5", "/=", "test_5_data", ".", "data_size", "\n", "\n", "# Accuracy for N=5.", "\n", "accuracy_for_10", "=", "0", "\n", "for", "_", "in", "range", "(", "test_10_data", ".", "test_iter", ")", ":", "\n", "            ", "i_d", ",", "t_o", ",", "s_l", ",", "_", ",", "o_l_m", ",", "_", "=", "test_10_data", ".", "get_test_sample_wlen", "(", ")", "\n", "prediction", "=", "sess", ".", "run", "(", "final_result", ",", "feed_dict", "=", "{", "\n", "dataset", ".", "input_data", ":", "i_d", ",", "\n", "dataset", ".", "sequence_length", ":", "s_l", "\n", "}", ")", "\n", "for", "p_", ",", "t_", ",", "o_", "in", "zip", "(", "prediction", ",", "t_o", ",", "o_l_m", ")", ":", "\n", "                ", "test_bed", "=", "np", ".", "mean", "(", "p_", "[", "o_", "==", "1.0", "]", "==", "t_", "[", "o_", "==", "1.0", "]", ")", "\n", "accuracy_for_10", "+=", "1", "if", "test_bed", "==", "1.0", "else", "0", "\n", "", "", "accuracy_for_10", "/=", "test_10_data", ".", "data_size", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"Training Iteration %d/%d: N=5 Accuracy %.3f, N=10 Accuracy %.3f.\\n\"", ",", "0", ",", "epoch", "*", "iteration_per_epoch", ",", "accuracy_for_5", ",", "accuracy_for_10", ")", "\n", "\n", "loss", "=", "0", "\n", "for", "e", "in", "range", "(", "epoch", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "iteration_per_epoch", ")", ":", "\n", "                ", "i_d", ",", "t_o", ",", "s_l", ",", "l_m", ",", "o_l_m", ",", "s_f", "=", "data", ".", "get_train_sample_wlen", "(", ")", "\n", "\n", "fetches", "[", "'summary_op'", "]", "=", "summary_op", "if", "i", "%", "FLAGS", ".", "summarize", "==", "0", "else", "no_summary", "\n", "fetches_", "=", "sess", ".", "run", "(", "fetches", ",", "feed_dict", "=", "{", "\n", "dataset", ".", "input_data", ":", "i_d", ",", "\n", "dataset", ".", "target_output", ":", "t_o", ",", "\n", "dataset", ".", "sequence_length", ":", "s_l", ",", "\n", "dataset", ".", "loss_mask", ":", "l_m", ",", "\n", "dataset", ".", "original_loss_mask", ":", "o_l_m", ",", "\n", "dataset", ".", "scale_factor", ":", "s_f", ",", "\n", "}", ")", "\n", "loss", "+=", "fetches_", "[", "'loss'", "]", "\n", "\n", "if", "i", "%", "FLAGS", ".", "summarize", "==", "0", ":", "\n", "                    ", "summary_writer", ".", "add_summary", "(", "fetches_", "[", "'summary_op'", "]", ",", "fetches_", "[", "'step'", "]", ")", "\n", "\n", "", "if", "(", "e", "*", "iteration_per_epoch", "+", "i", "+", "1", ")", "%", "report_interval", "==", "0", ":", "\n", "\n", "                    ", "accuracy_for_5", "=", "0", "\n", "for", "_", "in", "range", "(", "test_5_data", ".", "test_iter", ")", ":", "\n", "                        ", "i_d", ",", "t_o", ",", "s_l", ",", "_", ",", "o_l_m", ",", "_", "=", "test_5_data", ".", "get_test_sample_wlen", "(", ")", "\n", "prediction", "=", "sess", ".", "run", "(", "final_result", ",", "feed_dict", "=", "{", "\n", "dataset", ".", "input_data", ":", "i_d", ",", "\n", "dataset", ".", "sequence_length", ":", "s_l", "\n", "}", ")", "\n", "for", "p_", ",", "t_", ",", "o_", "in", "zip", "(", "prediction", ",", "t_o", ",", "o_l_m", ")", ":", "\n", "                            ", "test_bed", "=", "np", ".", "mean", "(", "p_", "[", "o_", "==", "1.0", "]", "==", "t_", "[", "o_", "==", "1.0", "]", ")", "\n", "accuracy_for_5", "+=", "1", "if", "test_bed", "==", "1.0", "else", "0", "\n", "", "", "accuracy_for_5", "/=", "test_5_data", ".", "data_size", "\n", "\n", "# Accuracy for N=5.", "\n", "accuracy_for_10", "=", "0", "\n", "for", "_", "in", "range", "(", "test_10_data", ".", "test_iter", ")", ":", "\n", "                        ", "i_d", ",", "t_o", ",", "s_l", ",", "_", ",", "o_l_m", ",", "_", "=", "test_10_data", ".", "get_test_sample_wlen", "(", ")", "\n", "prediction", "=", "sess", ".", "run", "(", "final_result", ",", "feed_dict", "=", "{", "\n", "dataset", ".", "input_data", ":", "i_d", ",", "\n", "dataset", ".", "sequence_length", ":", "s_l", "\n", "}", ")", "\n", "for", "p_", ",", "t_", ",", "o_", "in", "zip", "(", "prediction", ",", "t_o", ",", "o_l_m", ")", ":", "\n", "                            ", "test_bed", "=", "np", ".", "mean", "(", "p_", "[", "o_", "==", "1.0", "]", "==", "t_", "[", "o_", "==", "1.0", "]", ")", "\n", "accuracy_for_10", "+=", "1", "if", "test_bed", "==", "1.0", "else", "0", "\n", "", "", "accuracy_for_10", "/=", "test_10_data", ".", "data_size", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"Training Iteration %d/%d: Avg loss %.3f,\\nN=5 Accuracy %.3f, N=10 Accuracy %.3f.\\n\"", ",", "e", "*", "iteration_per_epoch", "+", "i", "+", "1", ",", "\n", "epoch", "*", "iteration_per_epoch", ",", "loss", "/", "report_interval", ",", "accuracy_for_5", ",", "accuracy_for_10", ")", "\n", "loss", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.run_convexhull.main": [[251, 259], ["time.time", "tensorflow.logging.set_verbosity", "run_convexhull.train", "print", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "time.time"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.None.run_convexhull.train"], ["", "", "", "", "", "def", "main", "(", "unused_argv", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "'info'", ",", "FLAGS", ".", "name", ")", ")", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "3", ")", "# Print INFO log messages.", "\n", "train", "(", "FLAGS", ".", "epoch", ",", "FLAGS", ".", "report_interval", ")", "\n", "print", "(", "\"Total time: %.2f min\"", "%", "(", "(", "time", ".", "time", "(", ")", "-", "start", ")", "/", "60", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbIData.__init__": [[19, 37], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "loader.BAbIData._build_var", "tensorflow.nn.embedding_lookup", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.constant", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbIData._build_var", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.one_hot", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.one_hot"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "input_size", ",", "output_size", ",", "embedding_size", ")", ":", "\n", "        ", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "\n", "self", ".", "input_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "batch_size", ",", "None", "]", ",", "name", "=", "'input'", ")", "\n", "self", ".", "target_output", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "batch_size", ",", "None", "]", ",", "name", "=", "'targets'", ")", "\n", "self", ".", "sequence_length", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "batch_size", "]", ",", "name", "=", "'sequence_length'", ")", "\n", "self", ".", "loss_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "None", "]", ")", "\n", "self", ".", "original_loss_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "None", "]", ")", "\n", "\n", "self", ".", "_build_var", "(", ")", "\n", "\n", "self", ".", "processed_input_data", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_matrix", ",", "self", ".", "input_data", ")", "\n", "self", ".", "one_hot_input_data", "=", "tf", ".", "one_hot", "(", "self", ".", "input_data", ",", "self", ".", "input_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "processed_target_data", "=", "tf", ".", "one_hot", "(", "self", ".", "target_output", ",", "self", ".", "output_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "eps", "=", "tf", ".", "constant", "(", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbIData._build_var": [[38, 43], ["tensorflow.get_variable", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["", "def", "_build_var", "(", "self", ")", ":", "\n", "        ", "self", ".", "embedding_matrix", "=", "tf", ".", "get_variable", "(", "name", "=", "'embedding_matrix'", ",", "\n", "shape", "=", "[", "self", ".", "input_size", ",", "self", ".", "embedding_size", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbIData.cost": [[44, 49], ["tensorflow.reduce_mean", "tensorflow.nn.softmax_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "cost", "(", "self", ",", "logit", ")", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_mean", "(", "\n", "self", ".", "loss_mask", "*", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "processed_target_data", ",", "\n", "logits", "=", "logit", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbIData.check_cost": [[50, 55], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.softmax_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "check_cost", "(", "self", ",", "logit", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_sum", "(", "\n", "self", ".", "original_loss_mask", "*", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "processed_target_data", ",", "\n", "logits", "=", "logit", ")", "\n", ")", "/", "(", "tf", ".", "reduce_sum", "(", "self", ".", "original_loss_mask", ")", "+", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbIBatchGenerator.__init__": [[58, 79], ["loader.load", "loader.load", "random.shuffle", "int", "os.path.exists", "preprocess.bAbI_preprocessing", "os.path.join", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.load", "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.load", "home.repos.pwc.inspect_result.taewonpark_DAM.None.preprocess.bAbI_preprocessing"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "p_re", ",", "\n", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "p_re", "=", "p_re", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n", "data_dir", "=", "'bAbI_data'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "            ", "bAbI_preprocessing", "(", "data_dir", ")", "\n", "\n", "", "self", ".", "dataset", "=", "load", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'train'", ",", "'train.pkl'", ")", ")", "\n", "self", ".", "lexicon_dict", "=", "load", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'lexicon-dict.pkl'", ")", ")", "\n", "self", ".", "target_code", "=", "self", ".", "lexicon_dict", "[", "'-'", "]", "\n", "self", ".", "question_code", "=", "self", ".", "lexicon_dict", "[", "'?'", "]", "\n", "self", ".", "rest_code", "=", "self", ".", "lexicon_dict", "[", "'.'", "]", "\n", "\n", "random", ".", "shuffle", "(", "self", ".", "dataset", ")", "\n", "\n", "self", ".", "count", "=", "0", "\n", "\n", "self", ".", "limit", "=", "int", "(", "len", "(", "self", ".", "dataset", ")", "/", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbIBatchGenerator.increase_count": [[80, 86], ["random.shuffle"], "methods", ["None"], ["", "def", "increase_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "+=", "1", "\n", "if", "self", ".", "count", ">=", "self", ".", "limit", ":", "\n", "            ", "if", "self", ".", "shuffle", ":", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "dataset", ")", "\n", "", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbIBatchGenerator.__iter__": [[87, 89], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbIBatchGenerator.__next__": [[90, 132], ["map", "numpy.array", "numpy.transpose", "target_mask.astype", "numpy.copy", "list", "loader.BAbIBatchGenerator.increase_count", "list", "itertools.chain.from_iterable", "numpy.random.choice", "weights_vec.astype.astype.astype", "numpy.array", "numpy.transpose", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.reshape", "itertools.izip_longest", "numpy.size", "numpy.reshape", "list", "numpy.sum", "len", "itertools.izip_longest", "list", "itertools.chain.from_iterable"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbIBatchGenerator.increase_count"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "samples", "=", "self", ".", "dataset", "[", "self", ".", "count", "*", "self", ".", "batch_size", ":", "(", "self", ".", "count", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "\n", "input_vec", "=", "[", "sample", "[", "'inputs'", "]", "for", "sample", "in", "samples", "]", "\n", "\n", "seq_len", "=", "map", "(", "len", ",", "input_vec", ")", "\n", "\n", "input_vec", "=", "np", ".", "array", "(", "list", "(", "izip_longest", "(", "*", "input_vec", ",", "fillvalue", "=", "0", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "input_vec", "=", "np", ".", "transpose", "(", "input_vec", ",", "(", "1", ",", "0", ")", ")", "\n", "\n", "target_mask", "=", "(", "input_vec", "==", "self", ".", "target_code", ")", "\n", "original_weights", "=", "target_mask", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "temp_output", "=", "[", "sample", "[", "'outputs'", "]", "for", "sample", "in", "samples", "]", "\n", "output_vec", "=", "np", ".", "copy", "(", "input_vec", ")", "\n", "output_vec", "[", "target_mask", "]", "=", "list", "(", "chain", ".", "from_iterable", "(", "temp_output", ")", ")", "\n", "\n", "if", "self", ".", "p_re", ":", "\n", "            ", "weights_vec", "=", "(", "input_vec", "!=", "0", ")", "\n", "temp_weights", "=", "np", ".", "random", ".", "choice", "(", "2", ",", "np", ".", "size", "(", "input_vec", ")", ",", "p", "=", "[", "1", "-", "self", ".", "p_re", ",", "self", ".", "p_re", "]", ")", "\n", "weights_vec", "=", "weights_vec", "&", "np", ".", "reshape", "(", "temp_weights", ",", "(", "self", ".", "batch_size", ",", "-", "1", ")", ")", "\n", "weights_vec", "=", "weights_vec", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "question_mask", "=", "[", "sample", "[", "'question_mask'", "]", "for", "sample", "in", "samples", "]", "\n", "question_mask", "=", "np", ".", "array", "(", "list", "(", "izip_longest", "(", "*", "question_mask", ",", "fillvalue", "=", "0", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "question_mask", "=", "np", ".", "transpose", "(", "question_mask", ",", "(", "1", ",", "0", ")", ")", "\n", "\n", "weights_vec", "[", "question_mask", "]", "=", "0.0", "\n", "weights_vec", "[", "input_vec", "==", "self", ".", "rest_code", "]", "=", "0.0", "\n", "weights_vec", "[", "target_mask", "]", "=", "np", ".", "sum", "(", "weights_vec", "==", "1", ",", "dtype", "=", "np", ".", "float32", ")", "/", "len", "(", "\n", "list", "(", "chain", ".", "from_iterable", "(", "temp_output", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "weights_vec", "=", "original_weights", "\n", "\n", "", "self", ".", "increase_count", "(", ")", "\n", "\n", "return", "(", "\n", "np", ".", "reshape", "(", "input_vec", ",", "(", "self", ".", "batch_size", ",", "-", "1", ")", ")", ",", "\n", "np", ".", "reshape", "(", "output_vec", ",", "(", "self", ".", "batch_size", ",", "-", "1", ")", ")", ",", "\n", "np", ".", "reshape", "(", "seq_len", ",", "(", "-", "1", ")", ")", ",", "\n", "np", ".", "reshape", "(", "weights_vec", ",", "(", "self", ".", "batch_size", ",", "-", "1", ")", ")", ",", "\n", "np", ".", "reshape", "(", "original_weights", ",", "(", "self", ".", "batch_size", ",", "-", "1", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbIBatchGenerator.next": [[135, 137], ["loader.BAbIBatchGenerator.__next__"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.__next__"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__next__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbIBatchGenerator.input_size": [[138, 141], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "lexicon_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbIBatchGenerator.output_size": [[142, 145], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "lexicon_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbIBatchGenerator.data_size": [[146, 149], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbITestBatchGenerator.__init__": [[152, 166], ["os.path.join", "loader.load", "os.path.exists", "preprocess.bAbI_preprocessing", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.load", "home.repos.pwc.inspect_result.taewonpark_DAM.None.preprocess.bAbI_preprocessing"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "data_dir", "=", "'bAbI_data'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "            ", "bAbI_preprocessing", "(", "data_dir", ")", "\n", "\n", "", "self", ".", "batch_size", "=", "0", "\n", "self", ".", "test_data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'test'", ")", "\n", "self", ".", "dataset", "=", "None", "\n", "self", ".", "lexicon_dict", "=", "load", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'lexicon-dict.pkl'", ")", ")", "\n", "self", ".", "target_code", "=", "self", ".", "lexicon_dict", "[", "'-'", "]", "\n", "self", ".", "question_code", "=", "self", ".", "lexicon_dict", "[", "'?'", "]", "\n", "\n", "self", ".", "count", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbITestBatchGenerator.feed_data": [[167, 180], ["os.path.join", "os.path.basename", "re.match", "re.match.group", "re.match.group().replace", "loader.load", "len", "re.match.group"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.load"], ["", "def", "feed_data", "(", "self", ",", "task_dir", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "\n", "cur_task_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "test_data_dir", ",", "task_dir", ")", "\n", "task_regexp", "=", "r'qa([0-9]{1,2})_([a-z\\-]*)_test.txt.pkl'", "\n", "task_filename", "=", "os", ".", "path", ".", "basename", "(", "task_dir", ")", "\n", "task_match_obj", "=", "re", ".", "match", "(", "task_regexp", ",", "task_filename", ")", "\n", "task_number", "=", "task_match_obj", ".", "group", "(", "1", ")", "\n", "task_name", "=", "task_match_obj", ".", "group", "(", "2", ")", ".", "replace", "(", "'-'", ",", "' '", ")", "\n", "\n", "self", ".", "dataset", "=", "load", "(", "cur_task_dir", ")", "\n", "\n", "return", "task_number", ",", "task_name", ",", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbITestBatchGenerator.feed_batch_size": [[181, 183], ["None"], "methods", ["None"], ["", "def", "feed_batch_size", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbITestBatchGenerator.__iter__": [[184, 186], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbITestBatchGenerator.__next__": [[187, 212], ["map", "numpy.array", "numpy.transpose", "list", "numpy.argwhere", "questions_indecies.append", "numpy.array", "numpy.reshape", "numpy.reshape", "itertools.izip_longest", "numpy.reshape"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "samples", "=", "self", ".", "dataset", "[", "self", ".", "count", ":", "self", ".", "count", "+", "self", ".", "batch_size", "]", "\n", "self", ".", "count", "+=", "self", ".", "batch_size", "\n", "\n", "input_vec", "=", "[", "sample", "[", "'inputs'", "]", "for", "sample", "in", "samples", "]", "\n", "\n", "seq_len", "=", "map", "(", "len", ",", "input_vec", ")", "\n", "\n", "input_vec", "=", "np", ".", "array", "(", "list", "(", "izip_longest", "(", "*", "input_vec", ",", "fillvalue", "=", "0", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "input_vec", "=", "np", ".", "transpose", "(", "input_vec", ",", "(", "1", ",", "0", ")", ")", "\n", "\n", "questions_indecies", "=", "[", "]", "\n", "for", "i", "in", "input_vec", ":", "\n", "            ", "q", "=", "np", ".", "argwhere", "(", "i", "==", "self", ".", "question_code", ")", "\n", "questions_indecies", ".", "append", "(", "np", ".", "reshape", "(", "q", ",", "(", "-", "1", ",", ")", ")", ")", "\n", "\n", "", "desired_answers", "=", "[", "np", ".", "array", "(", "sample", "[", "'outputs'", "]", ")", "for", "sample", "in", "samples", "]", "\n", "target_mask", "=", "(", "input_vec", "==", "self", ".", "target_code", ")", "\n", "\n", "return", "(", "\n", "np", ".", "reshape", "(", "input_vec", ",", "(", "self", ".", "batch_size", ",", "-", "1", ")", ")", ",", "\n", "np", ".", "reshape", "(", "seq_len", ",", "(", "-", "1", ")", ")", ",", "\n", "questions_indecies", ",", "\n", "target_mask", ",", "\n", "desired_answers", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbITestBatchGenerator.next": [[215, 217], ["loader.BAbITestBatchGenerator.__next__"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.__next__"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__next__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbITestBatchGenerator.input_size": [[218, 221], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "lexicon_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbITestBatchGenerator.output_size": [[222, 225], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "lexicon_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.BAbITestBatchGenerator.data_size": [[226, 229], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.AlgorithmicData.__init__": [[232, 243], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.constant", "numpy.finfo"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "input_size", ",", "output_size", ")", ":", "\n", "        ", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n", "self", ".", "input_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "None", ",", "input_size", "]", ",", "name", "=", "'input'", ")", "\n", "self", ".", "target_output", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "None", ",", "output_size", "]", ",", "name", "=", "'targets'", ")", "\n", "self", ".", "sequence_length", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "batch_size", "]", ",", "name", "=", "'sequence_length'", ")", "\n", "self", ".", "loss_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "None", "]", ")", "\n", "self", ".", "original_loss_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "None", "]", ")", "\n", "\n", "self", ".", "eps", "=", "tf", ".", "constant", "(", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.AlgorithmicData.cost": [[244, 248], ["tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "cost", "(", "self", ",", "logit", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_mean", "(", "\n", "self", ".", "loss_mask", "*", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "target_output", ",", "logits", "=", "logit", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.AlgorithmicData.check_cost": [[249, 254], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "check_cost", "(", "self", ",", "logit", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_sum", "(", "\n", "self", ".", "original_loss_mask", "*", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "target_output", ",", "logits", "=", "logit", ")", ",", "axis", "=", "-", "1", ")", "\n", ")", "/", "(", "tf", ".", "reduce_sum", "(", "self", ".", "original_loss_mask", ")", "*", "self", ".", "output_size", "+", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.Copy.__init__": [[257, 267], ["numpy.random.RandomState"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "p_re", ",", "bit_w", "=", "8", ",", "min_length", "=", "8", ",", "max_length", "=", "32", ",", "seed", "=", "0xABC", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "p_re", "=", "p_re", "\n", "self", ".", "bit_w", "=", "bit_w", "\n", "self", ".", "min_length", "=", "min_length", "\n", "self", ".", "max_length", "=", "max_length", "+", "1", "\n", "\n", "self", ".", "io_size", "=", "self", ".", "bit_w", "+", "2", "\n", "\n", "self", ".", "seed", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.Copy.__iter__": [[268, 270], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.Copy.__next__": [[271, 333], ["loader.Copy.seed.randint", "zip", "numpy.transpose", "numpy.transpose", "numpy.transpose", "loader.Copy.seed.randint", "numpy.transpose.append", "numpy.transpose.append", "numpy.zeros", "numpy.transpose.append", "list", "list", "list", "numpy.transpose", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.random.choice", "alpha_weights.astype.astype.astype", "numpy.copy.append", "itertools.izip_longest", "itertools.izip_longest", "itertools.izip_longest", "list", "numpy.sum", "numpy.sum", "numpy.size", "itertools.izip_longest", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "\n", "        ", "item_lengths", "=", "self", ".", "seed", ".", "randint", "(", "self", ".", "min_length", ",", "self", ".", "max_length", ",", "[", "self", ".", "batch_size", "]", ")", "\n", "seq_len", "=", "(", "item_lengths", "+", "1", ")", "*", "2", "\n", "\n", "input_vec", "=", "[", "]", "\n", "output_vec", "=", "[", "]", "\n", "weights_vec", "=", "[", "]", "\n", "original_weights", "=", "[", "]", "\n", "\n", "for", "item_length", ",", "s_l", "in", "zip", "(", "item_lengths", ",", "seq_len", ")", ":", "\n", "\n", "            ", "bit", "=", "self", ".", "seed", ".", "randint", "(", "0", ",", "2", ",", "[", "(", "item_length", "+", "1", ")", "*", "2", ",", "self", ".", "io_size", "]", ")", "\n", "\n", "# Set input flag, output flag part to 0", "\n", "bit", "[", ":", ",", "-", "2", ":", "]", "=", "0", "\n", "# Set flag bits position to 0", "\n", "bit", "[", "0", ":", ":", "item_length", "+", "1", ",", ":", "]", "=", "0", "\n", "# Set input flag part to 1", "\n", "bit", "[", "0", ",", "-", "2", "]", "=", "1", "\n", "# Set output flag part to 1", "\n", "bit", "[", "item_length", "+", "1", ",", "-", "1", "]", "=", "1", "\n", "# Set output part to 0", "\n", "bit", "[", "item_length", "+", "2", ":", ",", ":", "]", "=", "0", "\n", "\n", "input_vec", ".", "append", "(", "np", ".", "copy", "(", "bit", ")", ")", "\n", "\n", "bit", "[", "item_length", "+", "2", ":", ",", ":", "]", "=", "bit", "[", "1", ":", "item_length", "+", "1", "]", "\n", "\n", "output_vec", ".", "append", "(", "np", ".", "copy", "(", "bit", ")", ")", "\n", "\n", "weight", "=", "np", ".", "zeros", "(", "[", "(", "item_length", "+", "1", ")", "*", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "weight", "[", "item_length", "+", "2", ":", "]", "=", "1", "\n", "\n", "original_weights", ".", "append", "(", "weight", ")", "\n", "\n", "if", "self", ".", "p_re", ":", "\n", "                ", "alpha_weights", "=", "np", ".", "random", ".", "choice", "(", "2", ",", "np", ".", "size", "(", "weight", ")", ",", "p", "=", "[", "1", "-", "self", ".", "p_re", ",", "self", ".", "p_re", "]", ")", "\n", "alpha_weights", "=", "alpha_weights", ".", "astype", "(", "np", ".", "float32", ")", "\n", "alpha_weights", "[", "s_l", ":", "]", "=", "0", "\n", "alpha_weights", "[", "0", ":", ":", "item_length", "+", "1", "]", "=", "0", "\n", "alpha_weights", "[", "weight", "==", "1", "]", "=", "0", "\n", "weights_vec", ".", "append", "(", "alpha_weights", ")", "\n", "\n", "", "", "input_vec", "=", "np", ".", "transpose", "(", "list", "(", "izip_longest", "(", "*", "input_vec", ",", "fillvalue", "=", "np", ".", "zeros", "(", "[", "self", ".", "io_size", "]", ")", ")", ")", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "output_vec", "=", "np", ".", "transpose", "(", "list", "(", "izip_longest", "(", "*", "output_vec", ",", "fillvalue", "=", "np", ".", "zeros", "(", "[", "self", ".", "io_size", "]", ")", ")", ")", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "original_weights", "=", "np", ".", "transpose", "(", "list", "(", "izip_longest", "(", "*", "original_weights", ",", "fillvalue", "=", "0", ")", ")", ",", "[", "1", ",", "0", "]", ")", "\n", "\n", "if", "self", ".", "p_re", ":", "\n", "            ", "weights_vec", "=", "np", ".", "transpose", "(", "list", "(", "izip_longest", "(", "*", "weights_vec", ",", "fillvalue", "=", "0", ")", ")", ",", "[", "1", ",", "0", "]", ")", "\n", "alpha", "=", "np", ".", "sum", "(", "weights_vec", ")", "/", "np", ".", "sum", "(", "original_weights", ")", "\n", "alpha", "=", "alpha", "if", "alpha", ">=", "1", "else", "1.0", "\n", "weights_vec", "[", "original_weights", "==", "1", "]", "=", "alpha", "\n", "", "else", ":", "\n", "            ", "weights_vec", "=", "np", ".", "copy", "(", "original_weights", ")", "\n", "\n", "", "return", "(", "\n", "input_vec", ",", "\n", "output_vec", ",", "\n", "seq_len", ",", "\n", "weights_vec", ",", "\n", "original_weights", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.Copy.next": [[336, 338], ["loader.Copy.__next__"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.__next__"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__next__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.Copy.input_size": [[339, 342], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "io_size", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.Copy.output_size": [[343, 346], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "io_size", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.AssociativeRecall.__init__": [[349, 361], ["numpy.random.RandomState"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "p_re", ",", "bit_w", "=", "8", ",", "item_bit", "=", "3", ",", "min_length", "=", "2", ",", "max_length", "=", "8", ",", "seed", "=", "0xABC", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "p_re", "=", "p_re", "\n", "self", ".", "bit_w", "=", "bit_w", "\n", "self", ".", "item_bit", "=", "item_bit", "\n", "self", ".", "min_item", "=", "min_length", "\n", "self", ".", "max_item", "=", "max_length", "+", "1", "\n", "\n", "self", ".", "item", "=", "self", ".", "item_bit", "+", "1", "\n", "self", ".", "io_size", "=", "self", ".", "bit_w", "+", "2", "\n", "\n", "self", ".", "seed", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.AssociativeRecall.__iter__": [[362, 364], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.AssociativeRecall.__next__": [[365, 435], ["loader.AssociativeRecall.seed.randint", "zip", "numpy.transpose", "numpy.transpose", "numpy.transpose", "loader.AssociativeRecall.seed.randint", "loader.AssociativeRecall.seed.randint", "numpy.concatenate", "numpy.transpose.append", "numpy.transpose.append", "numpy.zeros", "numpy.transpose.append", "list", "list", "list", "numpy.transpose", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.random.choice", "alpha_weights.astype.astype.astype", "numpy.copy.append", "itertools.izip_longest", "itertools.izip_longest", "itertools.izip_longest", "list", "numpy.sum", "numpy.sum", "numpy.zeros", "numpy.size", "itertools.izip_longest", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "\n", "        ", "num_items", "=", "self", ".", "seed", ".", "randint", "(", "self", ".", "min_item", ",", "self", ".", "max_item", ",", "[", "self", ".", "batch_size", "]", ")", "\n", "seq_len", "=", "(", "num_items", "+", "2", ")", "*", "self", ".", "item", "\n", "\n", "input_vec", "=", "[", "]", "\n", "output_vec", "=", "[", "]", "\n", "weights_vec", "=", "[", "]", "\n", "original_weights", "=", "[", "]", "\n", "\n", "for", "n_items", ",", "s_l", "in", "zip", "(", "num_items", ",", "seq_len", ")", ":", "\n", "\n", "            ", "bit", "=", "self", ".", "seed", ".", "randint", "(", "0", ",", "2", ",", "[", "n_items", "*", "self", ".", "item", ",", "self", ".", "io_size", "]", ")", "\n", "\n", "# Set input flag, output flag part to 0", "\n", "bit", "[", ":", ",", "-", "2", ":", "]", "=", "0", "\n", "# Set input flag bit to 0", "\n", "bit", "[", "0", ":", ":", "self", ".", "item", ",", ":", "]", "=", "0", "\n", "# Set input flag part to 1", "\n", "bit", "[", "0", ":", ":", "self", ".", "item", ",", "-", "2", "]", "=", "1", "\n", "\n", "# Select item", "\n", "seleted_item", "=", "self", ".", "seed", ".", "randint", "(", "0", ",", "n_items", "-", "1", ")", "\n", "\n", "# Concatenate items with selected item.", "\n", "bit", "=", "np", ".", "concatenate", "(", "[", "bit", ",", "\n", "bit", "[", "seleted_item", "*", "self", ".", "item", ":", "(", "seleted_item", "+", "1", ")", "*", "self", ".", "item", ",", ":", "]", ",", "\n", "np", ".", "zeros", "(", "[", "self", ".", "item", ",", "self", ".", "bit_w", "+", "2", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "bit", "[", "n_items", "*", "self", ".", "item", ":", ":", "self", ".", "item", ",", ":", "]", "=", "0", "\n", "bit", "[", "n_items", "*", "self", ".", "item", ":", "(", "n_items", "+", "2", ")", "*", "self", ".", "item", ":", "self", ".", "item", ",", "-", "1", "]", "=", "1", "\n", "\n", "input_vec", ".", "append", "(", "np", ".", "copy", "(", "bit", ")", ")", "\n", "\n", "bit", "[", "-", "self", ".", "item_bit", ":", ",", ":", "-", "2", "]", "=", "bit", "[", "(", "seleted_item", "+", "1", ")", "*", "self", ".", "item", "+", "1", ":", "(", "seleted_item", "+", "2", ")", "*", "self", ".", "item", ",", ":", "-", "2", "]", "\n", "\n", "output_vec", ".", "append", "(", "np", ".", "copy", "(", "bit", ")", ")", "\n", "\n", "weight", "=", "np", ".", "zeros", "(", "[", "(", "n_items", "+", "2", ")", "*", "self", ".", "item", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "weight", "[", "-", "self", ".", "item_bit", ":", "]", "=", "1", "\n", "\n", "original_weights", ".", "append", "(", "weight", ")", "\n", "\n", "if", "self", ".", "p_re", ":", "\n", "                ", "alpha_weights", "=", "np", ".", "random", ".", "choice", "(", "2", ",", "np", ".", "size", "(", "weight", ")", ",", "p", "=", "[", "1", "-", "self", ".", "p_re", ",", "self", ".", "p_re", "]", ")", "\n", "alpha_weights", "=", "alpha_weights", ".", "astype", "(", "np", ".", "float32", ")", "\n", "alpha_weights", "[", "-", "(", "2", "*", "self", ".", "item", ")", ":", "]", "=", "0", "\n", "alpha_weights", "[", "0", ":", ":", "self", ".", "item", "]", "=", "0", "\n", "alpha_weights", "[", "weight", "==", "1", "]", "=", "0", "\n", "weights_vec", ".", "append", "(", "alpha_weights", ")", "\n", "\n", "", "", "input_vec", "=", "np", ".", "transpose", "(", "list", "(", "izip_longest", "(", "*", "input_vec", ",", "fillvalue", "=", "np", ".", "zeros", "(", "[", "self", ".", "io_size", "]", ")", ")", ")", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "output_vec", "=", "np", ".", "transpose", "(", "list", "(", "izip_longest", "(", "*", "output_vec", ",", "fillvalue", "=", "np", ".", "zeros", "(", "[", "self", ".", "io_size", "]", ")", ")", ")", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "original_weights", "=", "np", ".", "transpose", "(", "list", "(", "izip_longest", "(", "*", "original_weights", ",", "fillvalue", "=", "0", ")", ")", ",", "[", "1", ",", "0", "]", ")", "\n", "\n", "if", "self", ".", "p_re", ":", "\n", "            ", "weights_vec", "=", "np", ".", "transpose", "(", "list", "(", "izip_longest", "(", "*", "weights_vec", ",", "fillvalue", "=", "0", ")", ")", ",", "[", "1", ",", "0", "]", ")", "\n", "alpha", "=", "np", ".", "sum", "(", "weights_vec", ")", "/", "np", ".", "sum", "(", "original_weights", ")", "\n", "alpha", "=", "alpha", "if", "alpha", ">=", "1", "else", "1.0", "\n", "weights_vec", "[", "original_weights", "==", "1", "]", "=", "alpha", "\n", "", "else", ":", "\n", "            ", "weights_vec", "=", "np", ".", "copy", "(", "original_weights", ")", "\n", "\n", "", "return", "(", "\n", "input_vec", ",", "\n", "output_vec", ",", "\n", "seq_len", ",", "\n", "weights_vec", ",", "\n", "original_weights", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.AssociativeRecall.next": [[438, 440], ["loader.AssociativeRecall.__next__"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.__next__"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__next__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.AssociativeRecall.input_size": [[441, 444], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "io_size", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.AssociativeRecall.output_size": [[445, 448], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "io_size", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.RepresentationRecall.__init__": [[451, 468], ["numpy.random.RandomState", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "num_segment", ",", "bit_w", "=", "64", ",", "num_bits", "=", "8", ",", "min_length", "=", "8", ",", "max_length", "=", "16", ",", "seed", "=", "0xABC", ")", ":", "\n", "\n", "        ", "assert", "num_segment", "%", "2", "==", "0", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_segment", "=", "num_segment", "\n", "self", ".", "bit_w", "=", "bit_w", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "min_length", "=", "min_length", "\n", "self", ".", "max_length", "=", "max_length", "+", "1", "\n", "\n", "self", ".", "subpart_bit", "=", "self", ".", "bit_w", "//", "self", ".", "num_segment", "\n", "self", ".", "max_value", "=", "2", "**", "self", ".", "subpart_bit", "-", "1", "\n", "\n", "self", ".", "subpart_candidate", "=", "[", "range", "(", "i", "*", "self", ".", "subpart_bit", ",", "(", "i", "+", "1", ")", "*", "self", ".", "subpart_bit", ")", "for", "i", "in", "range", "(", "self", ".", "num_segment", ")", "]", "\n", "\n", "self", ".", "seed", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.RepresentationRecall.__iter__": [[469, 471], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.RepresentationRecall.__next__": [[472, 547], ["loader.RepresentationRecall.seed.randint", "max", "range", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.concatenate", "loader.RepresentationRecall.seed.randint", "numpy.concatenate", "numpy.concatenate", "numpy.reshape", "input_vec.append", "output_vec.append", "numpy.zeros", "original_weights.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate.reshape().view", "numpy.unpackbits", "numpy.array.append", "numpy.sort", "loader.RepresentationRecall.seed.randint", "numpy.unique", "numpy.concatenate.astype", "range", "range", "loader.RepresentationRecall.seed.choice", "range", "numpy.concatenate", "numpy.concatenate.reshape", "numpy.flip", "int", "int", "numpy.ceil"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "\n", "        ", "length", "=", "self", ".", "seed", ".", "randint", "(", "self", ".", "min_length", ",", "self", ".", "max_length", ",", "[", "self", ".", "batch_size", "]", ")", "\n", "seq_len", "=", "self", ".", "num_bits", "+", "length", "+", "2", "\n", "\n", "input_vec", "=", "[", "]", "\n", "output_vec", "=", "[", "]", "\n", "original_weights", "=", "[", "]", "\n", "\n", "s_l", "=", "max", "(", "seq_len", ")", "\n", "\n", "for", "l", "in", "length", ":", "\n", "\n", "# Construct Unique Bits.", "\n", "            ", "data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_segment", ")", ":", "\n", "\n", "                ", "datum", "=", "None", "\n", "last_size", "=", "0", "\n", "while", "last_size", "!=", "self", ".", "num_bits", ":", "\n", "                    ", "temp", "=", "self", ".", "seed", ".", "randint", "(", "1", ",", "self", ".", "max_value", ",", "size", "=", "(", "self", ".", "num_bits", "-", "last_size", ")", ")", "\n", "if", "datum", "is", "not", "None", ":", "\n", "                        ", "datum", "=", "np", ".", "concatenate", "(", "(", "temp", ",", "datum", ")", ")", "\n", "", "else", ":", "\n", "                        ", "datum", "=", "temp", "\n", "\n", "", "datum", "=", "np", ".", "unique", "(", "datum", ")", "\n", "last_size", "=", "datum", ".", "size", "\n", "\n", "", "datum", "=", "datum", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "view", "(", "np", ".", "uint8", ")", "\n", "datum", "=", "np", ".", "unpackbits", "(", "np", ".", "flip", "(", "datum", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "-", "int", "(", "np", ".", "ceil", "(", "self", ".", "subpart_bit", "/", "8", ")", ")", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "datum", "=", "datum", "[", ":", ",", "-", "self", ".", "subpart_bit", ":", "]", "\n", "data", ".", "append", "(", "datum", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "data", "=", "np", ".", "array", "(", "data", ",", "dtype", "=", "np", ".", "float32", ")", "# [num_segments, num_bits, subpart_bit]", "\n", "\n", "input_datum", "=", "np", ".", "zeros", "(", "[", "s_l", ",", "self", ".", "input_size", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "output_datum", "=", "np", ".", "zeros", "(", "[", "s_l", ",", "self", ".", "output_size", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Input Stage.", "\n", "input_datum", "[", "0", ",", "-", "2", "]", "=", "1", "# Input flag by 1.", "\n", "input_datum", "[", "1", ":", "self", ".", "num_bits", "+", "1", ",", ":", "-", "2", "]", "=", "np", ".", "concatenate", "(", "data", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Query Stage.", "\n", "input_datum", "[", "self", ".", "num_bits", "+", "1", ",", "-", "1", "]", "=", "1", "\n", "query_index", "=", "self", ".", "seed", ".", "randint", "(", "low", "=", "1", ",", "high", "=", "self", ".", "num_bits", "+", "1", ",", "size", "=", "[", "l", "]", ")", "\n", "\n", "input_datum", "[", "self", ".", "num_bits", "+", "2", ":", "self", ".", "num_bits", "+", "2", "+", "l", ",", ":", "]", "=", "input_datum", "[", "query_index", "]", "\n", "\n", "sequence_index", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "num_bits", "+", "2", ",", "self", ".", "num_bits", "+", "2", "+", "l", ")", "for", "_", "in", "range", "(", "self", ".", "output_size", ")", "]", "\n", "\n", "subpart_index", "=", "[", "np", ".", "sort", "(", "self", ".", "seed", ".", "choice", "(", "self", ".", "num_segment", ",", "size", "=", "int", "(", "self", ".", "num_segment", "/", "2", ")", ",", "replace", "=", "False", ")", ")", "for", "_", "in", "range", "(", "l", ")", "]", "\n", "subpart_index", "=", "np", ".", "concatenate", "(", "subpart_index", ")", "\n", "subpart_index", "=", "[", "self", ".", "subpart_candidate", "[", "i", "]", "for", "i", "in", "subpart_index", "]", "\n", "subpart_index", "=", "np", ".", "concatenate", "(", "subpart_index", ")", "\n", "\n", "output_datum", "[", "self", ".", "num_bits", "+", "2", ":", "self", ".", "num_bits", "+", "2", "+", "l", ",", ":", "]", "=", "np", ".", "reshape", "(", "input_datum", "[", "sequence_index", ",", "subpart_index", "]", ",", "(", "l", ",", "-", "1", ")", ")", "\n", "input_datum", "[", "sequence_index", ",", "subpart_index", "]", "=", "0.0", "\n", "\n", "input_vec", ".", "append", "(", "input_datum", ")", "\n", "output_vec", ".", "append", "(", "output_datum", ")", "\n", "\n", "# Loss Mask.", "\n", "weight", "=", "np", ".", "zeros", "(", "[", "s_l", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "weight", "[", "self", ".", "num_bits", "+", "2", ":", "self", ".", "num_bits", "+", "2", "+", "l", "]", "=", "1", "\n", "original_weights", ".", "append", "(", "weight", ")", "\n", "\n", "", "weights_vec", "=", "original_weights", "\n", "\n", "return", "(", "\n", "np", ".", "array", "(", "input_vec", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "output_vec", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "seq_len", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "np", ".", "array", "(", "weights_vec", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "original_weights", ",", "dtype", "=", "np", ".", "float32", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.RepresentationRecall.next": [[549, 551], ["loader.RepresentationRecall.__next__"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.__next__"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__next__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.RepresentationRecall.input_size": [[552, 555], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "subpart_bit", "*", "self", ".", "num_segment", "+", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.RepresentationRecall.output_size": [[556, 559], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "subpart_bit", "*", "self", ".", "num_segment", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.load": [[14, 16], ["pickle.load", "open"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.None.loader.load"], ["def", "load", "(", "path", ")", ":", "\n", "    ", "return", "pickle", ".", "load", "(", "open", "(", "path", ",", "'rb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHullData.__init__": [[10, 25], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.one_hot", "tensorflow.expand_dims", "tensorflow.constant", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.one_hot"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ")", ":", "\n", "        ", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n", "self", ".", "input_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", ",", "input_size", "]", ",", "name", "=", "'input_data'", ")", "# [batch, seq_len, size]", "\n", "self", ".", "target_output", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ",", "name", "=", "'target'", ")", "\n", "self", ".", "sequence_length", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "'sequence_length'", ")", "\n", "self", ".", "loss_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ")", "\n", "self", ".", "original_loss_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ")", "\n", "self", ".", "scale_factor", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", ")", ",", "name", "=", "\"scale_factor\"", ")", "\n", "\n", "self", ".", "processed_target_data", "=", "tf", ".", "one_hot", "(", "self", ".", "target_output", ",", "self", ".", "output_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "processed_loss_mask", "=", "tf", ".", "expand_dims", "(", "self", ".", "loss_mask", ",", "axis", "=", "-", "1", ")", "\n", "\n", "self", ".", "eps", "=", "tf", ".", "constant", "(", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHullData.show_task_loss": [[26, 33], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.softmax_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "show_task_loss", "(", "self", ",", "logit", ")", ":", "\n", "        ", "original_loss", "=", "tf", ".", "reduce_sum", "(", "\n", "self", ".", "original_loss_mask", "*", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "processed_target_data", ",", "\n", "logits", "=", "logit", ")", "\n", ")", "/", "(", "tf", ".", "reduce_sum", "(", "self", ".", "original_loss_mask", ")", "+", "self", ".", "eps", ")", "\n", "scale_loss", "=", "self", ".", "scale_factor", "*", "original_loss", "\n", "return", "original_loss", ",", "scale_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHullData.show_self_supervised_loss": [[34, 39], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.pow", "tensorflow.cast", "tensorflow.not_equal"], "methods", ["None"], ["", "def", "show_self_supervised_loss", "(", "self", ",", "logit", ")", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_sum", "(", "\n", "self", ".", "processed_loss_mask", "*", "tf", ".", "pow", "(", "self", ".", "input_data", "-", "logit", ",", "2", ")", "\n", ")", "/", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "self", ".", "loss_mask", ",", "0.0", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "+", "self", ".", "eps", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHullData.task_loss": [[40, 45], ["tensorflow.reduce_mean", "tensorflow.nn.softmax_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "task_loss", "(", "self", ",", "logit", ")", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_mean", "(", "\n", "self", ".", "original_loss_mask", "*", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "processed_target_data", ",", "\n", "logits", "=", "logit", ")", ")", "\n", "return", "self", ".", "scale_factor", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHullData.self_supervised_loss": [[46, 49], ["tensorflow.reduce_mean", "tensorflow.pow"], "methods", ["None"], ["", "def", "self_supervised_loss", "(", "self", ",", "logit", ")", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "processed_loss_mask", "*", "tf", ".", "pow", "(", "self", ".", "input_data", "-", "logit", ",", "2", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.__init__": [[52, 77], ["os.path.join", "loader_convexhull.ConvexHull.read_file", "os.path.join", "loader_convexhull.ConvexHull.read_file", "loader_convexhull.ConvexHull.train_samples.sort", "str", "len"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.read_file", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.read_file"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "p_re", ",", "max_n", "=", "20", ",", "test_n", "=", "5", ",", "curriculum", "=", "False", ",", "mode", "=", "\"train\"", ")", ":", "\n", "\n", "        ", "assert", "mode", "in", "[", "'train'", ",", "'test'", "]", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "p_re", "=", "p_re", "\n", "self", ".", "max_n", "=", "max_n", "\n", "self", ".", "cur_index", "=", "-", "1", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "data_path", "=", "'Convexhull_data'", "\n", "\n", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "train_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'all_lengths_data_shuffled.txt'", ")", "\n", "self", ".", "train_samples", "=", "self", ".", "read_file", "(", "train_dir", ",", "same_len", "=", "True", ")", "\n", "if", "curriculum", ":", "\n", "                ", "self", ".", "cur_index", "=", "0", "\n", "self", ".", "train_samples", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "\"inputs\"", "]", ")", ")", "\n", "", "", "if", "mode", "==", "\"test\"", ":", "\n", "            ", "assert", "test_n", "in", "[", "5", ",", "10", "]", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'convex_hull_'", "+", "str", "(", "test_n", ")", "+", "'_test.txt'", ")", "\n", "self", ".", "test_samples", "=", "self", ".", "read_file", "(", "test_dir", ")", "\n", "\n", "", "self", ".", "in_dim", "=", "max_n", "+", "2", "+", "1", "# (N_one_hot; node value; end signal)", "\n", "self", ".", "end_token", "=", "0", "# max_n + 1", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.read_file": [[78, 108], ["open", "line.strip().split", "len", "len", "line.strip", "ys.append", "all_data_blen[].append", "all_data_blen.append", "xs.append", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "len"], "methods", ["None"], ["", "def", "read_file", "(", "self", ",", "filepath", ",", "same_len", "=", "False", ")", ":", "\n", "        ", "all_data_blen", "=", "[", "]", "\n", "if", "same_len", ":", "\n", "            ", "all_data_blen", "=", "{", "}", "\n", "", "with", "open", "(", "filepath", ")", "as", "fp", ":", "\n", "            ", "for", "line", "in", "fp", ":", "\n", "                ", "xs", "=", "[", "]", "\n", "ys", "=", "[", "]", "\n", "all_items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "after_output", "=", "False", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "all_items", ")", ":", "\n", "                    ", "if", "not", "after_output", ":", "\n", "                        ", "if", "all_items", "[", "i", "]", "==", "\"output\"", ":", "\n", "                            ", "after_output", "=", "True", "\n", "", "else", ":", "\n", "                            ", "xs", ".", "append", "(", "[", "all_items", "[", "i", "]", ",", "all_items", "[", "i", "+", "1", "]", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "else", ":", "\n", "                        ", "ys", ".", "append", "(", "all_items", "[", "i", "]", ")", "\n", "", "i", "+=", "1", "\n", "", "if", "len", "(", "xs", ")", "<=", "self", ".", "max_n", ":", "\n", "                    ", "if", "same_len", ":", "\n", "                        ", "if", "len", "(", "xs", ")", "not", "in", "all_data_blen", ":", "\n", "                            ", "all_data_blen", "[", "len", "(", "xs", ")", "]", "=", "[", "]", "\n", "", "all_data_blen", "[", "len", "(", "xs", ")", "]", ".", "append", "(", "{", "\"inputs\"", ":", "np", ".", "array", "(", "xs", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\"outputs\"", ":", "np", ".", "array", "(", "ys", ",", "dtype", "=", "np", ".", "int32", ")", "}", ")", "\n", "", "else", ":", "\n", "                        ", "all_data_blen", ".", "append", "(", "{", "\"inputs\"", ":", "np", ".", "array", "(", "xs", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\"outputs\"", ":", "np", ".", "array", "(", "ys", ",", "dtype", "=", "np", ".", "int32", ")", "}", ")", "\n", "\n", "", "", "", "return", "all_data_blen", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.get_train_sample_wlen": [[109, 128], ["random.choice", "numpy.random.choice", "loader_convexhull.ConvexHull.prepare_sample_batch", "loader_convexhull.ConvexHull.prepare_sample_batch", "list", "len", "len", "loader_convexhull.ConvexHull.train_samples.keys"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.prepare_sample_batch", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.prepare_sample_batch"], ["", "", "def", "get_train_sample_wlen", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "cur_index", "<", "0", ":", "\n", "            ", "chosen_key", "=", "random", ".", "choice", "(", "list", "(", "self", ".", "train_samples", ".", "keys", "(", ")", ")", ")", "\n", "samples", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "train_samples", "[", "chosen_key", "]", ",", "self", ".", "batch_size", ")", "\n", "data", "=", "self", ".", "prepare_sample_batch", "(", "samples", ")", "\n", "return", "data", "\n", "", "else", ":", "\n", "            ", "find", "=", "self", ".", "cur_index", "\n", "tind", "=", "self", ".", "cur_index", "+", "self", ".", "batch_size", "\n", "if", "tind", ">", "len", "(", "self", ".", "train_samples", ")", ":", "\n", "                ", "tind", "=", "len", "(", "self", ".", "train_samples", ")", "\n", "find", "=", "tind", "-", "self", ".", "batch_size", "\n", "self", ".", "cur_index", "=", "0", "\n", "", "else", ":", "\n", "                ", "self", ".", "cur_index", "+=", "self", ".", "batch_size", "\n", "", "samples", "=", "self", ".", "train_samples", "[", "find", ":", "tind", "]", "\n", "data", "=", "self", ".", "prepare_sample_batch", "(", "samples", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.get_test_sample_wlen": [[129, 137], ["loader_convexhull.ConvexHull.prepare_sample_batch", "len"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.prepare_sample_batch"], ["", "", "def", "get_test_sample_wlen", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cur_index", "<", "0", "or", "self", ".", "cur_index", ">=", "len", "(", "self", ".", "test_samples", ")", ":", "\n", "            ", "self", ".", "cur_index", "=", "0", "\n", "\n", "", "samples", "=", "self", ".", "test_samples", "[", "self", ".", "cur_index", ":", "self", ".", "cur_index", "+", "self", ".", "batch_size", "]", "\n", "self", ".", "cur_index", "+=", "self", ".", "batch_size", "\n", "data", "=", "self", ".", "prepare_sample_batch", "(", "samples", ",", "random_mode", "=", "False", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.prepare_sample_batch": [[138, 194], ["len", "numpy.array", "numpy.max", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.random.choice().astype", "numpy.zeros_like.reshape", "enumerate", "numpy.array", "zip", "list", "list", "loader_convexhull.ConvexHull.append", "outputs.append", "loader_convexhull.ConvexHull.one_hot", "numpy.zeros_like", "len", "numpy.random.choice", "range", "range", "random.shuffle", "dict", "dict", "numpy.sum", "numpy.sum", "len", "numpy.size", "zip", "zip", "len", "len", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.one_hot"], ["", "def", "prepare_sample_batch", "(", "self", ",", "samples", ",", "random_mode", "=", "True", ")", ":", "\n", "\n", "        ", "batch_size", "=", "len", "(", "samples", ")", "\n", "input_seq_len", "=", "np", ".", "array", "(", "[", "len", "(", "s", "[", "'inputs'", "]", ")", "for", "s", "in", "samples", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "output_seq_len", "=", "np", ".", "array", "(", "[", "len", "(", "s", "[", "'outputs'", "]", ")", "for", "s", "in", "samples", "]", ",", "dtype", "=", "np", ".", "int32", ")", "+", "1", "# output end signal", "\n", "seq_len", "=", "input_seq_len", "+", "output_seq_len", "+", "1", "# input end signal", "\n", "\n", "max_seq_len", "=", "np", ".", "max", "(", "seq_len", ")", "\n", "\n", "input_vecs", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_seq_len", ",", "self", ".", "in_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "output_vecs", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_seq_len", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "original_mask", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_seq_len", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "weight_mask", "=", "np", ".", "random", ".", "choice", "(", "2", ",", "np", ".", "size", "(", "original_mask", ")", ",", "p", "=", "[", "1", "-", "self", ".", "p_re", ",", "self", ".", "p_re", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "weight_mask", "=", "weight_mask", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "for", "i", ",", "(", "s", ",", "i_s", ",", "o_s", ")", "in", "enumerate", "(", "zip", "(", "samples", ",", "input_seq_len", ",", "output_seq_len", ")", ")", ":", "\n", "            ", "inputs", "=", "s", "[", "'inputs'", "]", "\n", "outputs", "=", "s", "[", "'outputs'", "]", "\n", "\n", "input_label", "=", "list", "(", "range", "(", "1", ",", "len", "(", "inputs", ")", "+", "1", ")", ")", "\n", "label_mapping", "=", "list", "(", "range", "(", "1", ",", "len", "(", "inputs", ")", "+", "1", ")", ")", "\n", "if", "random_mode", ":", "\n", "                ", "random", ".", "shuffle", "(", "label_mapping", ")", "\n", "label_mapping", "=", "dict", "(", "zip", "(", "list", "(", "range", "(", "1", ",", "len", "(", "inputs", ")", "+", "1", ")", ")", ",", "label_mapping", ")", ")", "\n", "", "else", ":", "\n", "                ", "label_mapping", "=", "dict", "(", "zip", "(", "label_mapping", ",", "label_mapping", ")", ")", "\n", "\n", "", "input_label", "=", "[", "label_mapping", "[", "label", "]", "for", "label", "in", "input_label", "]", "\n", "input_label", ".", "append", "(", "0", ")", "# end signal", "\n", "outputs", "=", "[", "label_mapping", "[", "label", "]", "for", "label", "in", "outputs", "]", "\n", "outputs", ".", "append", "(", "self", ".", "end_token", ")", "\n", "\n", "input_vecs", "[", "i", ",", ":", "i_s", ",", ":", "2", "]", "=", "inputs", "\n", "input_label", "=", "self", ".", "one_hot", "(", "input_label", ",", "self", ".", "max_n", "+", "1", ")", "\n", "input_vecs", "[", "i", ",", ":", "i_s", "+", "1", ",", "2", ":", "]", "=", "input_label", "\n", "\n", "output_vecs", "[", "i", ",", "i_s", "+", "1", ":", "i_s", "+", "1", "+", "o_s", "]", "=", "outputs", "\n", "original_mask", "[", "i", ",", "i_s", "+", "1", ":", "i_s", "+", "1", "+", "o_s", "]", "=", "1.0", "\n", "weight_mask", "[", "i", ",", "i_s", ":", "]", "=", "0.0", "\n", "\n", "", "if", "self", ".", "p_re", ":", "\n", "            ", "scale_factor", "=", "np", ".", "sum", "(", "weight_mask", ")", "/", "np", ".", "sum", "(", "original_mask", ")", "\n", "if", "scale_factor", "<", "1.0", ":", "\n", "                ", "scale_factor", "=", "1.0", "\n", "", "", "else", ":", "\n", "            ", "weight_mask", "=", "np", ".", "zeros_like", "(", "original_mask", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "scale_factor", "=", "1.0", "\n", "\n", "", "return", "(", "\n", "input_vecs", ",", "\n", "output_vecs", ",", "\n", "seq_len", ",", "\n", "weight_mask", ",", "\n", "original_mask", ",", "\n", "scale_factor", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.one_hot": [[196, 199], ["numpy.eye"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "one_hot", "(", "value", ",", "dim", ")", ":", "\n", "        ", "return", "np", ".", "eye", "(", "dim", ")", "[", "value", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.input_size": [[200, 203], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "in_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.output_size": [[204, 207], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "max_n", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.data_size": [[208, 217], ["loader_convexhull.ConvexHull.train_samples.keys", "len", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_size", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "size", "=", "0", "\n", "for", "k", "in", "self", ".", "train_samples", ".", "keys", "(", ")", ":", "\n", "                ", "size", "+=", "len", "(", "self", ".", "train_samples", "[", "k", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "size", "=", "len", "(", "self", ".", "test_samples", ")", "\n", "", "return", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_convexhull.ConvexHull.test_iter": [[218, 228], ["len", "int", "int"], "methods", ["None"], ["", "@", "property", "\n", "def", "test_iter", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "test_data_size", "=", "len", "(", "self", ".", "test_samples", ")", "\n", "if", "test_data_size", "%", "self", ".", "batch_size", "==", "0", ":", "\n", "                ", "return", "int", "(", "test_data_size", "/", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "                ", "return", "int", "(", "test_data_size", "/", "self", ".", "batch_size", ")", "+", "1", "\n", "", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestDataL1.__init__": [[8, 23], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.one_hot", "tensorflow.expand_dims", "tensorflow.constant", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.one_hot"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "seq_len", ")", ":", "\n", "        ", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n", "self", ".", "input_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "seq_len", ",", "input_size", "]", ",", "name", "=", "'input_data'", ")", "\n", "self", ".", "target_output", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "seq_len", "]", ",", "name", "=", "'target'", ")", "\n", "self", ".", "sequence_length", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "'sequence_length'", ")", "\n", "self", ".", "loss_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "seq_len", "]", ")", "\n", "self", ".", "original_loss_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "seq_len", "]", ")", "\n", "self", ".", "scale_factor", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", ")", ",", "name", "=", "\"scale_factor\"", ")", "\n", "\n", "self", ".", "processed_target_data", "=", "tf", ".", "one_hot", "(", "self", ".", "target_output", ",", "self", ".", "output_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "processed_loss_mask", "=", "tf", ".", "expand_dims", "(", "self", ".", "loss_mask", ",", "axis", "=", "-", "1", ")", "\n", "\n", "self", ".", "eps", "=", "tf", ".", "constant", "(", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestDataL1.show_task_loss": [[24, 31], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.softmax_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "show_task_loss", "(", "self", ",", "logit", ")", ":", "\n", "        ", "original_loss", "=", "tf", ".", "reduce_sum", "(", "\n", "self", ".", "original_loss_mask", "*", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "processed_target_data", ",", "\n", "logits", "=", "logit", ")", "\n", ")", "/", "(", "tf", ".", "reduce_sum", "(", "self", ".", "original_loss_mask", ")", "+", "self", ".", "eps", ")", "\n", "scale_loss", "=", "self", ".", "scale_factor", "*", "original_loss", "\n", "return", "original_loss", ",", "scale_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestDataL1.show_self_supervised_loss": [[32, 37], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.not_equal"], "methods", ["None"], ["", "def", "show_self_supervised_loss", "(", "self", ",", "logit", ")", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_sum", "(", "\n", "self", ".", "processed_loss_mask", "*", "(", "self", ".", "input_data", "-", "logit", ")", "\n", ")", "/", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "self", ".", "loss_mask", ",", "0.0", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "+", "self", ".", "eps", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestDataL1.task_loss": [[38, 43], ["tensorflow.reduce_mean", "tensorflow.nn.softmax_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "task_loss", "(", "self", ",", "logit", ")", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_mean", "(", "\n", "self", ".", "original_loss_mask", "*", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "processed_target_data", ",", "\n", "logits", "=", "logit", ")", ")", "\n", "return", "self", ".", "scale_factor", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestDataL1.self_supervised_loss": [[44, 47], ["tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "self_supervised_loss", "(", "self", ",", "logit", ")", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "processed_loss_mask", "*", "(", "self", ".", "input_data", "-", "logit", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestData.__init__": [[50, 65], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.one_hot", "tensorflow.expand_dims", "tensorflow.constant", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.one_hot"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "seq_len", ")", ":", "\n", "        ", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n", "self", ".", "input_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "seq_len", ",", "input_size", "]", ",", "name", "=", "'input_data'", ")", "\n", "self", ".", "target_output", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "seq_len", "]", ",", "name", "=", "'target'", ")", "\n", "self", ".", "sequence_length", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "'sequence_length'", ")", "\n", "self", ".", "loss_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "seq_len", "]", ")", "\n", "self", ".", "original_loss_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "seq_len", "]", ")", "\n", "self", ".", "scale_factor", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", ")", ",", "name", "=", "\"scale_factor\"", ")", "\n", "\n", "self", ".", "processed_target_data", "=", "tf", ".", "one_hot", "(", "self", ".", "target_output", ",", "self", ".", "output_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "processed_loss_mask", "=", "tf", ".", "expand_dims", "(", "self", ".", "loss_mask", ",", "axis", "=", "-", "1", ")", "\n", "\n", "self", ".", "eps", "=", "tf", ".", "constant", "(", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestData.show_task_loss": [[66, 73], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.softmax_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "show_task_loss", "(", "self", ",", "logit", ")", ":", "\n", "        ", "original_loss", "=", "tf", ".", "reduce_sum", "(", "\n", "self", ".", "original_loss_mask", "*", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "processed_target_data", ",", "\n", "logits", "=", "logit", ")", "\n", ")", "/", "(", "tf", ".", "reduce_sum", "(", "self", ".", "original_loss_mask", ")", "+", "self", ".", "eps", ")", "\n", "scale_loss", "=", "self", ".", "scale_factor", "*", "original_loss", "\n", "return", "original_loss", ",", "scale_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestData.show_self_supervised_loss": [[74, 79], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.pow", "tensorflow.cast", "tensorflow.not_equal"], "methods", ["None"], ["", "def", "show_self_supervised_loss", "(", "self", ",", "logit", ")", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_sum", "(", "\n", "self", ".", "processed_loss_mask", "*", "tf", ".", "pow", "(", "self", ".", "input_data", "-", "logit", ",", "2", ")", "\n", ")", "/", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "self", ".", "loss_mask", ",", "0.0", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "+", "self", ".", "eps", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestData.task_loss": [[80, 85], ["tensorflow.reduce_mean", "tensorflow.nn.softmax_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "task_loss", "(", "self", ",", "logit", ")", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_mean", "(", "\n", "self", ".", "original_loss_mask", "*", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "processed_target_data", ",", "\n", "logits", "=", "logit", ")", ")", "\n", "return", "self", ".", "scale_factor", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthestData.self_supervised_loss": [[86, 89], ["tensorflow.reduce_mean", "tensorflow.pow"], "methods", ["None"], ["", "def", "self_supervised_loss", "(", "self", ",", "logit", ")", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "processed_loss_mask", "*", "tf", ".", "pow", "(", "self", ".", "input_data", "-", "logit", ",", "2", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.__init__": [[92, 100], ["numpy.random.RandomState", "numpy.random.RandomState"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "batch_prob", ",", "num_vectors", "=", "8", ",", "num_dims", "=", "16", ",", "seed", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "batch_prob", "=", "batch_prob", "\n", "self", ".", "num_vectors", "=", "num_vectors", "\n", "self", ".", "num_dims", "=", "num_dims", "\n", "\n", "self", ".", "seed", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "if", "seed", "is", "not", "None", "else", "np", ".", "random", ".", "RandomState", "(", "0xABC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.get_test_example": [[101, 109], ["numpy.zeros", "numpy.zeros", "range", "loader_nfar.NFarthest.get_example", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.get_example"], ["", "def", "get_test_example", "(", "self", ",", "num_test_examples", "=", "3200", ")", ":", "\n", "        ", "X", "=", "np", ".", "zeros", "(", "(", "num_test_examples", ",", "self", ".", "num_vectors", ",", "self", ".", "input_size", ")", ")", "\n", "y", "=", "np", ".", "zeros", "(", "num_test_examples", ")", "\n", "for", "i", "in", "range", "(", "num_test_examples", ")", ":", "\n", "            ", "X_single", ",", "y_single", "=", "self", ".", "get_example", "(", ")", "\n", "X", "[", "i", ",", ":", "]", "=", "X_single", "\n", "y", "[", "i", "]", "=", "y_single", "\n", "", "return", "X", ",", "y", ",", "np", ".", "array", "(", "[", "self", ".", "num_vectors", "]", "*", "num_test_examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.one_hot_encode": [[110, 116], ["numpy.zeros", "range", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "one_hot_encode", "(", "array", ",", "num_dims", "=", "8", ")", ":", "\n", "        ", "one_hot", "=", "np", ".", "zeros", "(", "(", "len", "(", "array", ")", ",", "num_dims", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "array", ")", ")", ":", "\n", "            ", "one_hot", "[", "i", ",", "array", "[", "i", "]", "]", "=", "1", "\n", "", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.get_example": [[117, 137], ["loader_nfar.NFarthest.seed.choice", "loader_nfar.NFarthest.seed.choice", "loader_nfar.NFarthest.seed.choice", "numpy.linalg.norm", "numpy.zeros", "loader_nfar.NFarthest.one_hot_encode", "numpy.reshape", "numpy.tile", "loader_nfar.NFarthest.one_hot_encode", "loader_nfar.NFarthest.seed.rand", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.one_hot_encode", "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.one_hot_encode"], ["", "def", "get_example", "(", "self", ")", ":", "\n", "        ", "input_size", "=", "self", ".", "num_dims", "+", "self", ".", "num_vectors", "*", "3", "\n", "n", "=", "self", ".", "seed", ".", "choice", "(", "self", ".", "num_vectors", ",", "1", ")", "# nth farthest from target vector", "\n", "labels", "=", "self", ".", "seed", ".", "choice", "(", "self", ".", "num_vectors", ",", "self", ".", "num_vectors", ",", "replace", "=", "False", ")", "\n", "m_index", "=", "self", ".", "seed", ".", "choice", "(", "self", ".", "num_vectors", ",", "1", ")", "# m comes after the m_index-th vector", "\n", "m", "=", "labels", "[", "m_index", "]", "\n", "\n", "# Vectors sampled from U(-1,1)", "\n", "vectors", "=", "self", ".", "seed", ".", "rand", "(", "self", ".", "num_vectors", ",", "self", ".", "num_dims", ")", "*", "2", "-", "1", "\n", "target_vector", "=", "vectors", "[", "m_index", "]", "\n", "dist_from_target", "=", "np", ".", "linalg", ".", "norm", "(", "vectors", "-", "target_vector", ",", "axis", "=", "1", ")", "\n", "X_single", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_vectors", ",", "input_size", ")", ")", "\n", "X_single", "[", ":", ",", ":", "self", ".", "num_dims", "]", "=", "vectors", "\n", "labels_onehot", "=", "self", ".", "one_hot_encode", "(", "labels", ",", "num_dims", "=", "self", ".", "num_vectors", ")", "\n", "X_single", "[", ":", ",", "self", ".", "num_dims", ":", "self", ".", "num_dims", "+", "self", ".", "num_vectors", "]", "=", "labels_onehot", "\n", "nm_onehot", "=", "np", ".", "reshape", "(", "self", ".", "one_hot_encode", "(", "[", "n", ",", "m", "]", ",", "num_dims", "=", "self", ".", "num_vectors", ")", ",", "-", "1", ")", "\n", "X_single", "[", ":", ",", "self", ".", "num_dims", "+", "self", ".", "num_vectors", ":", "]", "=", "np", ".", "tile", "(", "nm_onehot", ",", "(", "self", ".", "num_vectors", ",", "1", ")", ")", "\n", "y_single", "=", "labels", "[", "np", ".", "argsort", "(", "dist_from_target", ")", "[", "-", "(", "n", "+", "1", ")", "]", "]", "\n", "\n", "return", "X_single", ",", "y_single", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.__iter__": [[138, 140], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.__next__": [[141, 165], ["numpy.zeros", "numpy.zeros", "range", "numpy.array", "numpy.zeros_like", "loader_nfar.NFarthest.get_example", "loader_nfar.NFarthest.seed.choice", "numpy.reshape", "numpy.zeros_like", "numpy.size", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.get_example"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_vectors", ",", "self", ".", "input_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_vectors", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "X_single", ",", "y_single", "=", "self", ".", "get_example", "(", ")", "\n", "X", "[", "i", ",", ":", "]", "=", "X_single", "\n", "y", "[", "i", ",", "-", "1", "]", "=", "y_single", "\n", "\n", "", "seq_len", "=", "np", ".", "array", "(", "[", "self", ".", "num_vectors", "]", "*", "self", ".", "batch_size", ")", "\n", "\n", "original_weights", "=", "np", ".", "zeros_like", "(", "y", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "original_weights", "[", ":", ",", "-", "1", "]", "=", "1.0", "\n", "\n", "if", "self", ".", "batch_prob", ":", "\n", "            ", "weights_vec", "=", "self", ".", "seed", ".", "choice", "(", "2", ",", "np", ".", "size", "(", "original_weights", ")", ",", "p", "=", "[", "1", "-", "self", ".", "batch_prob", ",", "self", ".", "batch_prob", "]", ")", "\n", "weights_vec", "=", "np", ".", "reshape", "(", "weights_vec", ",", "[", "self", ".", "batch_size", ",", "self", ".", "num_vectors", "]", ")", "\n", "scale_factor", "=", "np", ".", "sum", "(", "weights_vec", "==", "1", ",", "dtype", "=", "np", ".", "float32", ")", "/", "self", ".", "batch_size", "\n", "if", "scale_factor", "<", "1.0", ":", "\n", "                ", "scale_factor", "=", "1.0", "\n", "", "", "else", ":", "\n", "            ", "weights_vec", "=", "np", ".", "zeros_like", "(", "original_weights", ")", "\n", "scale_factor", "=", "1.0", "\n", "\n", "", "return", "X", ",", "y", ",", "seq_len", ",", "weights_vec", ",", "original_weights", ",", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.next": [[167, 169], ["loader_nfar.NFarthest.__next__"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.__next__"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__next__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.input_size": [[170, 173], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_dims", "+", "self", ".", "num_vectors", "*", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.seq_len": [[174, 177], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "seq_len", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.task.loader_nfar.NFarthest.output_size": [[178, 181], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.access.MemoryAccess.__init__": [[68, 100], ["sonnet.RNNCore.__init__", "model.DAM_test.addressing.CosineWeights", "model.DAM_test.addressing.CosineWeights", "model.DAM_test.addressing.Freeness", "access.MemoryAccess._bulid_var"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.__init__", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._bulid_var"], ["def", "__init__", "(", "self", ",", "\n", "num_memory_block", "=", "2", ",", "\n", "memory_size", "=", "128", ",", "\n", "word_size", "=", "20", ",", "\n", "num_reads", "=", "1", ",", "\n", "num_writes", "=", "1", ",", "\n", "name", "=", "'memory_access'", ")", ":", "\n", "        ", "\"\"\"Creates a MemoryAccess module.\n\n        Args:\n          num_memory_block: The number of memory blocks.\n          memory_size: The number of memory slots (N in the DNC paper).\n          word_size: The width of each memory slot (W in the DNC paper)\n          num_reads: The number of read heads (R in the DNC paper).\n          num_writes: The number of write heads (fixed at 1 in the paper).\n          name: The name of the module.\n        \"\"\"", "\n", "super", "(", "MemoryAccess", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "_num_memory_block", "=", "num_memory_block", "\n", "self", ".", "_memory_size", "=", "memory_size", "\n", "self", ".", "_word_size", "=", "word_size", "\n", "self", ".", "_num_reads", "=", "num_reads", "\n", "self", ".", "_num_writes", "=", "num_writes", "\n", "\n", "self", ".", "_write_content_weights_mod", "=", "addressing", ".", "CosineWeights", "(", "\n", "num_writes", ",", "word_size", ",", "name", "=", "'write_content_weights'", ")", "\n", "self", ".", "_read_content_weights_mod", "=", "addressing", ".", "CosineWeights", "(", "\n", "num_reads", ",", "word_size", ",", "name", "=", "'read_content_weights'", ")", "\n", "\n", "self", ".", "_freeness", "=", "addressing", ".", "Freeness", "(", "num_memory_block", ",", "memory_size", ")", "\n", "\n", "self", ".", "_interface_size", ",", "self", ".", "_range_list", "=", "self", ".", "_bulid_var", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.access.MemoryAccess._bulid_var": [[101, 121], ["sum", "range_list.append"], "methods", ["None"], ["", "def", "_bulid_var", "(", "self", ")", ":", "\n", "        ", "parameter_size_list", "=", "[", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", "*", "self", ".", "_word_size", ",", "# write_vectors", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", "*", "self", ".", "_word_size", ",", "# erase_vectors", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_reads", ",", "# free_gate", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", ",", "# allocation_gate", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", ",", "# write_gate", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", "*", "self", ".", "_word_size", ",", "# write_keys", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", ",", "# write_strengths", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_reads", "*", "self", ".", "_word_size", ",", "# read_keys", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_reads", ",", "# read_strengths", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_reads", "# which read vector", "\n", "]", "\n", "interface_size", "=", "sum", "(", "parameter_size_list", ")", "\n", "\n", "range_list", "=", "[", "0", "]", "\n", "for", "size", "in", "parameter_size_list", ":", "\n", "            ", "range_list", ".", "append", "(", "range_list", "[", "-", "1", "]", "+", "size", ")", "\n", "\n", "", "return", "interface_size", ",", "range_list", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.access.MemoryAccess._build": [[122, 166], ["access.MemoryAccess._read_inputs", "access.MemoryAccess._freeness", "access.MemoryAccess._write_weights", "access._erase_and_write", "access.MemoryAccess._read_weights", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.reduce_sum", "AccessState"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._read_inputs", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._write_weights", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access._erase_and_write", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._read_weights"], ["", "def", "_build", "(", "self", ",", "inputs", ",", "prev_state", ")", ":", "\n", "        ", "\"\"\"Connects the MemoryAccess module into the graph.\n\n        Args:\n          inputs: tensor of shape `[batch_size, input_size]`. This is used to\n              control this access module.\n          prev_state: Instance of `AccessState` containing the previous state.\n\n        Returns:\n          A tuple `(output, next_state)`, where `output` is a tensor of shape\n          `[batch_size, num_reads, word_size]`, and `next_state` is the new\n          `AccessState` named tuple at the current time t.\n        \"\"\"", "\n", "control", "=", "self", ".", "_read_inputs", "(", "inputs", ")", "\n", "\n", "# Update usage using inputs['free_gate'] and previous read & write weights.", "\n", "usage", "=", "self", ".", "_freeness", "(", "\n", "write_weights", "=", "prev_state", ".", "write_weights", ",", "\n", "free_gate", "=", "control", "[", "'free_gate'", "]", ",", "\n", "read_weights", "=", "prev_state", ".", "read_weights", ",", "\n", "prev_usage", "=", "prev_state", ".", "usage", ")", "\n", "\n", "# Write to memory.", "\n", "write_weights", "=", "self", ".", "_write_weights", "(", "control", ",", "prev_state", ".", "memory", ",", "usage", ")", "\n", "memory", "=", "_erase_and_write", "(", "\n", "prev_state", ".", "memory", ",", "\n", "address", "=", "write_weights", ",", "\n", "reset_weights", "=", "control", "[", "'erase_vectors'", "]", ",", "\n", "values", "=", "control", "[", "'write_vectors'", "]", ")", "\n", "\n", "# Read from memory.", "\n", "read_weights", "=", "self", ".", "_read_weights", "(", "\n", "control", ",", "\n", "memory", "=", "memory", ")", "\n", "read_weights", "=", "tf", ".", "multiply", "(", "read_weights", ",", "control", "[", "'attentive_gate'", "]", ")", "\n", "read_words", "=", "tf", ".", "matmul", "(", "read_weights", ",", "memory", ")", "\n", "read_words", "=", "tf", ".", "reduce_sum", "(", "read_words", ",", "axis", "=", "1", ")", "\n", "\n", "return", "(", "read_words", ",", "AccessState", "(", "\n", "memory", "=", "memory", ",", "\n", "read_weights", "=", "read_weights", ",", "\n", "write_weights", "=", "write_weights", ",", "\n", "usage", "=", "usage", ",", "\n", "attentive_gate", "=", "control", "[", "'attentive_gate'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.access.MemoryAccess._read_inputs": [[167, 228], ["tensorflow.layers.dense", "access.MemoryAccess._read_inputs._alloc_2d"], "methods", ["None"], ["", "def", "_read_inputs", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Applies transformations to `inputs` to get control for this module.\"\"\"", "\n", "\n", "def", "_alloc_1d", "(", "input", ",", "num_memory_block", ",", "first_dim", ",", "name", ",", "activation", "=", "None", ")", ":", "\n", "            ", "vector", "=", "tf", ".", "reshape", "(", "input", ",", "[", "-", "1", ",", "num_memory_block", ",", "first_dim", "]", ",", "name", "=", "name", ")", "\n", "if", "activation", "is", "not", "None", ":", "\n", "                ", "vector", "=", "activation", "(", "vector", ",", "name", "=", "name", "+", "'_activation'", ")", "\n", "", "return", "vector", "\n", "\n", "", "def", "_alloc_2d", "(", "input", ",", "num_memory_block", ",", "first_dim", ",", "second_dim", ",", "name", ",", "activation", "=", "None", ")", ":", "\n", "            ", "vector", "=", "tf", ".", "reshape", "(", "input", ",", "[", "-", "1", ",", "num_memory_block", ",", "first_dim", ",", "second_dim", "]", ",", "name", "=", "name", ")", "\n", "if", "activation", "is", "not", "None", ":", "\n", "                ", "vector", "=", "activation", "(", "vector", ",", "name", "=", "name", "+", "'_activation'", ")", "\n", "", "return", "vector", "\n", "\n", "", "interface_vector", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "_interface_size", ",", "\n", "kernel_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "name", "=", "'interface_vector'", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "\n", "write_vectors", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "0", "]", ":", "self", ".", "_range_list", "[", "1", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "self", ".", "_word_size", ",", "'write_vectors'", ")", "\n", "\n", "erase_vectors", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "1", "]", ":", "self", ".", "_range_list", "[", "2", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "self", ".", "_word_size", ",", "'erase_vectors'", ",", "tf", ".", "sigmoid", ")", "\n", "\n", "free_gate", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "2", "]", ":", "self", ".", "_range_list", "[", "3", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "'free_gate'", ",", "tf", ".", "sigmoid", ")", "\n", "\n", "allocation_gate", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "3", "]", ":", "self", ".", "_range_list", "[", "4", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "'allocation_gate'", ",", "tf", ".", "sigmoid", ")", "\n", "\n", "write_gate", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "4", "]", ":", "self", ".", "_range_list", "[", "5", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "'write_gate'", ",", "tf", ".", "sigmoid", ")", "\n", "write_keys", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "5", "]", ":", "self", ".", "_range_list", "[", "6", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "self", ".", "_word_size", ",", "'write_keys'", ")", "\n", "write_strengths", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "6", "]", ":", "self", ".", "_range_list", "[", "7", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "'write_strengths'", ")", "\n", "\n", "read_keys", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "7", "]", ":", "self", ".", "_range_list", "[", "8", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "self", ".", "_word_size", ",", "'read_keys'", ")", "\n", "read_strengths", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "8", "]", ":", "self", ".", "_range_list", "[", "9", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "'read_strengths'", ")", "\n", "\n", "attentive_gate", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "9", "]", ":", "self", ".", "_range_list", "[", "10", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "1", ",", "'attentive_gate'", ")", "\n", "\n", "result", "=", "{", "\n", "'read_content_keys'", ":", "read_keys", ",", "\n", "'read_content_strengths'", ":", "read_strengths", ",", "\n", "'write_content_keys'", ":", "write_keys", ",", "\n", "'write_content_strengths'", ":", "write_strengths", ",", "\n", "'write_vectors'", ":", "write_vectors", ",", "\n", "'erase_vectors'", ":", "erase_vectors", ",", "\n", "'free_gate'", ":", "free_gate", ",", "\n", "'allocation_gate'", ":", "allocation_gate", ",", "\n", "'write_gate'", ":", "write_gate", ",", "\n", "'attentive_gate'", ":", "tf", ".", "nn", ".", "softmax", "(", "attentive_gate", ",", "axis", "=", "1", ")", ",", "\n", "}", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.access.MemoryAccess._write_weights": [[229, 267], ["tensorflow.name_scope", "access.MemoryAccess._write_content_weights_mod", "access.MemoryAccess._freeness.write_allocation_weights", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness.write_allocation_weights"], ["", "def", "_write_weights", "(", "self", ",", "inputs", ",", "memory", ",", "usage", ")", ":", "\n", "        ", "\"\"\"Calculates the memory locations to write to.\n\n        This uses a combination of content-based lookup and finding an unused\n        location in memory, for each write head.\n\n        Args:\n          inputs: Collection of inputs to the access module, including controls for\n              how to chose memory writing, such as the content to look-up and the\n              weighting between content-based and allocation-based addressing.\n          memory: A tensor of shape  `[batch_size, num_memory_blocks, memory_size, word_size]`\n              containing the current memory contents.\n          usage: Current memory usage, which is a tensor of shape `[batch_size, num_memory_blocks,\n              memory_size]`, used for allocation-based addressing.\n\n        Returns:\n          tensor of shape `[batch_size, num_memory_blocks, num_writes, memory_size]` indicating where\n              to write to (if anywhere) for each write head.\n        \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'write_weights'", ",", "values", "=", "[", "inputs", ",", "memory", ",", "usage", "]", ")", ":", "\n", "# c_t^{w, i} - The content-based weights for each write head.", "\n", "            ", "write_content_weights", "=", "self", ".", "_write_content_weights_mod", "(", "\n", "memory", ",", "inputs", "[", "'write_content_keys'", "]", ",", "\n", "inputs", "[", "'write_content_strengths'", "]", ")", "\n", "\n", "# a_t^i - The allocation weights for each write head.", "\n", "write_allocation_weights", "=", "self", ".", "_freeness", ".", "write_allocation_weights", "(", "\n", "usage", "=", "usage", ",", "\n", "write_gates", "=", "(", "inputs", "[", "'allocation_gate'", "]", "*", "inputs", "[", "'write_gate'", "]", ")", ",", "\n", "num_writes", "=", "self", ".", "_num_writes", ")", "\n", "\n", "# Expands gates over memory locations.", "\n", "allocation_gate", "=", "tf", ".", "expand_dims", "(", "inputs", "[", "'allocation_gate'", "]", ",", "-", "1", ")", "\n", "write_gate", "=", "tf", ".", "expand_dims", "(", "inputs", "[", "'write_gate'", "]", ",", "-", "1", ")", "\n", "\n", "# w_t^{w, i} - The write weightings for each write head.", "\n", "return", "write_gate", "*", "(", "allocation_gate", "*", "write_allocation_weights", "+", "\n", "(", "1", "-", "allocation_gate", ")", "*", "write_content_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.access.MemoryAccess._read_weights": [[268, 294], ["tensorflow.name_scope", "access.MemoryAccess._read_content_weights_mod"], "methods", ["None"], ["", "", "def", "_read_weights", "(", "self", ",", "inputs", ",", "memory", ")", ":", "\n", "        ", "\"\"\"Calculates read weights for each read head.\n\n        The read weights are a combination of following the link graphs in the\n        forward or backward directions from the previous read position, and doing\n        content-based lookup. The interpolation between these different modes is\n        done by `inputs['read_mode']`.\n\n        Args:\n          inputs: Controls for this access module. This contains the content-based\n              keys to lookup, and the weightings for the different read modes.\n          memory: A tensor of shape `[batch_size, num_memory_blocks, memory_size, word_size]`\n              containing the current memory contents to do content-based lookup.\n          name: string, 'left' or 'right'.\n\n        Returns:\n          A tensor of shape `[batch_size, num_memory_blocks, num_reads, memory_size]` containing the\n          read weights for each read head.\n        \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\n", "'read_weights'", ",", "values", "=", "[", "inputs", ",", "memory", "]", ")", ":", "\n", "# c_t^{r, i} - The content weightings for each read head.", "\n", "            ", "read_weights", "=", "self", ".", "_read_content_weights_mod", "(", "\n", "memory", ",", "inputs", "[", "'read_content_keys'", "]", ",", "inputs", "[", "'read_content_strengths'", "]", ")", "\n", "\n", "return", "read_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.access.MemoryAccess.state_size": [[295, 304], ["AccessState", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a tuple of the shape of the state tensors.\"\"\"", "\n", "return", "AccessState", "(", "\n", "memory", "=", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_memory_block", ",", "self", ".", "_memory_size", ",", "self", ".", "_word_size", "]", ")", ",", "\n", "read_weights", "=", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "self", ".", "_memory_size", "]", ")", ",", "\n", "write_weights", "=", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "self", ".", "_memory_size", "]", ")", ",", "\n", "usage", "=", "self", ".", "_freeness", ".", "state_size", ",", "\n", "attentive_gate", "=", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.access.MemoryAccess.output_size": [[305, 309], ["tensorflow.TensorShape"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the output shape.\"\"\"", "\n", "return", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_reads", ",", "self", ".", "_word_size", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.access._erase_and_write": [[18, 51], ["tensorflow.name_scope", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.transpose", "model.DAM_test.util.reduce_prod", "tensorflow.name_scope", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.reduce_prod"], ["def", "_erase_and_write", "(", "memory", ",", "address", ",", "reset_weights", ",", "values", ")", ":", "\n", "    ", "\"\"\"Module to erase and write in the external memory.\n\n    Erase operation:\n      M_t'(i) = M_{t-1}(i) * (1 - w_t(i) * e_t)\n\n    Add operation:\n      M_t(i) = M_t'(i) + w_t(i) * a_t\n\n    where e are the reset_weights, w the write weights and a the values.\n\n    Args:\n      memory: 4-D tensor of shape `[batch_size, num_memory_blocks, memory_size, word_size]`.\n      address: 4-D tensor `[batch_size, num_memory_blocks, num_writes, memory_size]`.\n      reset_weights: 4-D tensor `[batch_size, num_memory_blocks, num_writes, word_size]`.\n      values: 4-D tensor `[batch_size, num_memory_blocks, num_writes, word_size]`.\n\n    Returns:\n      3-D tensor of shape `[batch_size, num_writes, word_size]`.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'erase_memory'", ",", "values", "=", "[", "memory", ",", "address", ",", "reset_weights", "]", ")", ":", "\n", "        ", "expand_address", "=", "tf", ".", "expand_dims", "(", "address", ",", "4", ")", "\n", "reset_weights", "=", "tf", ".", "expand_dims", "(", "reset_weights", ",", "3", ")", "\n", "weighted_resets", "=", "expand_address", "*", "reset_weights", "\n", "weighted_resets", "=", "tf", ".", "transpose", "(", "weighted_resets", ",", "[", "0", ",", "2", ",", "1", ",", "3", ",", "4", "]", ")", "\n", "reset_gate", "=", "util", ".", "reduce_prod", "(", "1", "-", "weighted_resets", ",", "1", ")", "\n", "memory", "*=", "reset_gate", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'additive_write'", ",", "values", "=", "[", "memory", ",", "address", ",", "values", "]", ")", ":", "\n", "        ", "add_matrix", "=", "tf", ".", "matmul", "(", "address", ",", "values", ",", "adjoint_a", "=", "True", ")", "\n", "memory", "+=", "add_matrix", "\n", "\n", "", "return", "memory", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.addressing.CosineWeights.__init__": [[46, 63], ["sonnet.AbstractModule.__init__"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_heads", ",", "\n", "word_size", ",", "\n", "strength_op", "=", "tf", ".", "nn", ".", "softplus", ",", "\n", "name", "=", "'cosine_weights'", ")", ":", "\n", "    ", "\"\"\"Initializes the CosineWeights module.\n\n    Args:\n      num_heads: number of memory heads.\n      word_size: memory word size.\n      strength_op: operation to apply to strengths (default is tf.nn.softplus).\n      name: module name (default 'cosine_weights')\n    \"\"\"", "\n", "super", "(", "CosineWeights", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "_num_heads", "=", "num_heads", "\n", "self", ".", "_word_size", "=", "word_size", "\n", "self", ".", "_strength_op", "=", "strength_op", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.addressing.CosineWeights._build": [[64, 87], ["tensorflow.matmul", "addressing._vector_norms", "addressing._vector_norms", "tensorflow.matmul", "addressing.weighted_softmax"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing._vector_norms", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing._vector_norms", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.weighted_softmax"], ["", "def", "_build", "(", "self", ",", "memory", ",", "keys", ",", "strengths", ")", ":", "\n", "    ", "\"\"\"Connects the CosineWeights module into the graph.\n\n    Args:\n      memory: A 4-D tensor of shape `[batch_size, num_memory_blocks, memory_size, word_size]`.\n      keys: A 4-D tensor of shape `[batch_size, num_memory_blocks, num_heads, word_size]`.\n      strengths: A 3-D tensor of shape `[batch_size, num_memory_blocks, num_heads]`.\n\n    Returns:\n      Weights tensor of shape `[batch_size, num_memory_blocks, num_heads, memory_size]`.\n    \"\"\"", "\n", "# Calculates the inner product between the query vector and words in memory.", "\n", "dot", "=", "tf", ".", "matmul", "(", "keys", ",", "memory", ",", "adjoint_b", "=", "True", ")", "\n", "\n", "# Outer product to compute denominator (euclidean norm of query and memory).", "\n", "memory_norms", "=", "_vector_norms", "(", "memory", ")", "\n", "key_norms", "=", "_vector_norms", "(", "keys", ")", "\n", "norm", "=", "tf", ".", "matmul", "(", "key_norms", ",", "memory_norms", ",", "adjoint_b", "=", "True", ")", "\n", "\n", "# Calculates cosine similarity between the query vector and words in memory.", "\n", "similarity", "=", "dot", "/", "(", "norm", "+", "_EPSILON", ")", "\n", "\n", "return", "weighted_softmax", "(", "similarity", ",", "strengths", ",", "self", ".", "_strength_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.addressing.Freeness.__init__": [[106, 116], ["sonnet.RNNCore.__init__"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.__init__"], ["def", "__init__", "(", "self", ",", "num_memory_block", ",", "memory_size", ",", "name", "=", "'freeness'", ")", ":", "\n", "    ", "\"\"\"Creates a Freeness module.\n\n    Args:\n      memory_size: Number of memory slots.\n      name: Name of the module.\n    \"\"\"", "\n", "super", "(", "Freeness", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "_num_memory_block", "=", "num_memory_block", "\n", "self", ".", "_memory_size", "=", "memory_size", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.addressing.Freeness._build": [[117, 144], ["tensorflow.stop_gradient", "addressing.Freeness._usage_after_write", "addressing.Freeness._usage_after_read"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness._usage_after_write", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness._usage_after_read"], ["", "def", "_build", "(", "self", ",", "write_weights", ",", "free_gate", ",", "read_weights", ",", "prev_usage", ")", ":", "\n", "    ", "\"\"\"Calculates the new memory usage u_t.\n\n    Memory that was written to in the previous time step will have its usage\n    increased; memory that was read from and the controller says can be \"freed\"\n    will have its usage decreased.\n\n    Args:\n      write_weights: tensor of shape `[batch_size, num_memory_blocks, num_writes,\n          memory_size]` giving write weights at previous time step.\n      free_gate: tensor of shape `[batch_size, num_memory_blocks, num_reads]` which indicates\n          which read heads read memory that can now be freed.\n      read_weights: tensor of shape `[batch_size, num_memory_blocks, num_reads,\n          memory_size]` giving read weights at previous time step.\n      prev_usage: tensor of shape `[batch_size, num_memory_blocks, memory_size]` giving\n          usage u_{t - 1} at the previous time step, with entries in range\n          [0, 1].\n\n    Returns:\n      tensor of shape `[batch_size, num_memory_blocks, memory_size]` representing updated memory\n      usage.\n    \"\"\"", "\n", "# Calculation of usage is not differentiable with respect to write weights.", "\n", "write_weights", "=", "tf", ".", "stop_gradient", "(", "write_weights", ")", "\n", "usage", "=", "self", ".", "_usage_after_write", "(", "prev_usage", ",", "write_weights", ")", "\n", "usage", "=", "self", ".", "_usage_after_read", "(", "usage", ",", "free_gate", ",", "read_weights", ")", "\n", "return", "usage", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.addressing.Freeness.write_allocation_weights": [[145, 179], ["tensorflow.name_scope", "tensorflow.expand_dims", "range", "tensorflow.stack", "allocation_weights.append", "addressing.Freeness._allocation"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness._allocation"], ["", "def", "write_allocation_weights", "(", "self", ",", "usage", ",", "write_gates", ",", "num_writes", ")", ":", "\n", "    ", "\"\"\"Calculates freeness-based locations for writing to.\n\n    This finds unused memory by ranking the memory locations by usage, for each\n    write head. (For more than one write head, we use a \"simulated new usage\"\n    which takes into account the fact that the previous write head will increase\n    the usage in that area of the memory.)\n\n    Args:\n      usage: A tensor of shape `[batch_size, num_memory_blocks, memory_size]` representing\n          current memory usage.\n      write_gates: A tensor of shape `[batch_size, num_memory_blocks, num_writes]` with values in\n          the range [0, 1] indicating how much each write head does writing\n          based on the address returned here (and hence how much usage\n          increases).\n      num_writes: The number of write heads to calculate write weights for.\n\n    Returns:\n      tensor of shape `[batch_size, num_memory_blocks, num_writes, memory_size]` containing the\n          freeness-based write locations. Note that this isn't scaled by\n          `write_gate`; this scaling must be applied externally.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'write_allocation_weights'", ")", ":", "\n", "# expand gatings over memory locations", "\n", "      ", "write_gates", "=", "tf", ".", "expand_dims", "(", "write_gates", ",", "-", "1", ")", "\n", "\n", "allocation_weights", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_writes", ")", ":", "\n", "        ", "allocation_weights", ".", "append", "(", "self", ".", "_allocation", "(", "usage", ")", ")", "\n", "# update usage to take into account writing to this new allocation", "\n", "usage", "+=", "(", "(", "1", "-", "usage", ")", "*", "write_gates", "[", ":", ",", "i", ",", ":", ",", ":", "]", "*", "allocation_weights", "[", "i", "]", ")", "\n", "\n", "# Pack the allocation weights for the write heads into one tensor.", "\n", "", "return", "tf", ".", "stack", "(", "allocation_weights", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.addressing.Freeness._usage_after_write": [[180, 195], ["tensorflow.name_scope", "tensorflow.transpose", "model.DAM_test.util.reduce_prod"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.reduce_prod"], ["", "", "def", "_usage_after_write", "(", "self", ",", "prev_usage", ",", "write_weights", ")", ":", "\n", "    ", "\"\"\"Calcualtes the new usage after writing to memory.\n\n    Args:\n      prev_usage: tensor of shape `[batch_size, num_memory_blocks, memory_size]`.\n      write_weights: tensor of shape `[batch_size, num_memory_blocks, num_writes, memory_size]`.\n\n    Returns:\n      New usage, a tensor of shape `[batch_size, num_memory_blocks, memory_size]`.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'usage_after_write'", ")", ":", "\n", "# Calculate the aggregated effect of all write heads", "\n", "      ", "write_weights", "=", "tf", ".", "transpose", "(", "write_weights", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "write_weights", "=", "1", "-", "util", ".", "reduce_prod", "(", "1", "-", "write_weights", ",", "1", ")", "\n", "return", "prev_usage", "+", "(", "1", "-", "prev_usage", ")", "*", "write_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.addressing.Freeness._usage_after_read": [[196, 215], ["tensorflow.name_scope", "tensorflow.expand_dims", "tensorflow.transpose", "model.DAM_test.util.reduce_prod"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.reduce_prod"], ["", "", "def", "_usage_after_read", "(", "self", ",", "prev_usage", ",", "free_gate", ",", "read_weights", ")", ":", "\n", "    ", "\"\"\"Calcualtes the new usage after reading and freeing from memory.\n\n    Args:\n      prev_usage: tensor of shape `[batch_size, num_memory_blocks, memory_size]`.\n      free_gate: tensor of shape `[batch_size, num_memory_blocks, num_reads]` with entries in the\n          range [0, 1] indicating the amount that locations read from can be\n          freed.\n      read_weights: tensor of shape `[batch_size, num_memory_blocks, num_reads, memory_size]`.\n\n    Returns:\n      New usage, a tensor of shape `[batch_size, num_memory_blocks, memory_size]`.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'usage_after_read'", ")", ":", "\n", "      ", "free_gate", "=", "tf", ".", "expand_dims", "(", "free_gate", ",", "-", "1", ")", "\n", "free_read_weights", "=", "free_gate", "*", "read_weights", "\n", "free_read_weights", "=", "tf", ".", "transpose", "(", "free_read_weights", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "phi", "=", "util", ".", "reduce_prod", "(", "1", "-", "free_read_weights", ",", "1", ",", "name", "=", "'phi'", ")", "\n", "return", "prev_usage", "*", "phi", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.addressing.Freeness._allocation": [[216, 246], ["tensorflow.name_scope", "tensorflow.nn.top_k", "tensorflow.cumprod", "model.DAM_test.util.batch_invert_permutation", "model.DAM_test.util.batch_gather"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.batch_invert_permutation", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.batch_gather"], ["", "", "def", "_allocation", "(", "self", ",", "usage", ")", ":", "\n", "    ", "r\"\"\"Computes allocation by sorting `usage`.\n\n    This corresponds to the value a = a_t[\\phi_t[j]] in the paper.\n\n    Args:\n      usage: tensor of shape `[batch_size, num_memory_blocks, memory_size]` indicating current\n          memory usage. This is equal to u_t in the paper when we only have one\n          write head, but for multiple write heads, one should update the usage\n          while iterating through the write heads to take into account the\n          allocation returned by this function.\n\n    Returns:\n      Tensor of shape `[batch_size, num_memory_blocks, memory_size]` corresponding to allocation.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'allocation'", ")", ":", "\n", "# Ensure values are not too small prior to cumprod.", "\n", "      ", "usage", "=", "_EPSILON", "+", "(", "1", "-", "_EPSILON", ")", "*", "usage", "\n", "\n", "nonusage", "=", "1", "-", "usage", "\n", "sorted_nonusage", ",", "indices", "=", "tf", ".", "nn", ".", "top_k", "(", "\n", "nonusage", ",", "k", "=", "self", ".", "_memory_size", ",", "name", "=", "'sort'", ")", "\n", "sorted_usage", "=", "1", "-", "sorted_nonusage", "\n", "prod_sorted_usage", "=", "tf", ".", "cumprod", "(", "sorted_usage", ",", "axis", "=", "2", ",", "exclusive", "=", "True", ")", "\n", "sorted_allocation", "=", "sorted_nonusage", "*", "prod_sorted_usage", "\n", "inverse_indices", "=", "util", ".", "batch_invert_permutation", "(", "indices", ")", "\n", "\n", "# This final line \"unsorts\" sorted_allocation, so that the indexing", "\n", "# corresponds to the original indexing of `usage`.", "\n", "return", "util", ".", "batch_gather", "(", "sorted_allocation", ",", "inverse_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.addressing.Freeness.state_size": [[247, 251], ["tensorflow.TensorShape"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns the shape of the state tensor.\"\"\"", "\n", "return", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_memory_block", ",", "self", ".", "_memory_size", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.addressing._vector_norms": [[16, 19], ["tensorflow.reduce_sum", "tensorflow.sqrt"], "function", ["None"], ["def", "_vector_norms", "(", "m", ")", ":", "\n", "  ", "squared_norms", "=", "tf", ".", "reduce_sum", "(", "m", "*", "m", ",", "axis", "=", "3", ",", "keepdims", "=", "True", ")", "\n", "return", "tf", ".", "sqrt", "(", "squared_norms", "+", "_EPSILON", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.addressing.weighted_softmax": [[21, 37], ["tensorflow.expand_dims", "tensorflow.nn.softmax", "strengths_op"], "function", ["None"], ["", "def", "weighted_softmax", "(", "activations", ",", "strengths", ",", "strengths_op", ")", ":", "\n", "  ", "\"\"\"Returns softmax over activations multiplied by positive strengths.\n\n  Args:\n    activations: A tensor of shape `[batch_size, num_memory_blocks, num_heads, memory_size]`, of\n      activations to be transformed. Softmax is taken over the last dimension.\n    strengths: A tensor of shape `[batch_size, num_memory_blocks, num_heads]` containing strengths to\n      multiply by the activations prior to the softmax.\n    strengths_op: An operation to transform strengths before softmax.\n\n  Returns:\n    A tensor of same shape as `activations` with weighted softmax applied.\n  \"\"\"", "\n", "transformed_strengths", "=", "tf", ".", "expand_dims", "(", "strengths_op", "(", "strengths", ")", ",", "axis", "=", "-", "1", ")", "\n", "sharp_activations", "=", "activations", "*", "transformed_strengths", "\n", "return", "tf", ".", "nn", ".", "softmax", "(", "sharp_activations", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.util.batch_invert_permutation": [[11, 28], ["tensorflow.name_scope", "tensorflow.cast", "int", "int", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.range", "tensorflow.reshape", "tensorflow.tile", "tensorflow.add", "tensorflow.reshape", "tensorflow.invert_permutation", "tensorflow.reshape", "tensorflow.subtract", "tensorflow.cast", "tensorflow.cast", "tf.reshape.get_shape", "tf.reshape.get_shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["def", "batch_invert_permutation", "(", "permutations", ")", ":", "\n", "    ", "\"\"\"Returns batched `tf.invert_permutation` for every row in `permutations`.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'batch_invert_permutation'", ",", "values", "=", "[", "permutations", "]", ")", ":", "\n", "        ", "perm", "=", "tf", ".", "cast", "(", "permutations", ",", "tf", ".", "float32", ")", "\n", "dim", "=", "int", "(", "perm", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "\n", "n_block", "=", "int", "(", "perm", ".", "get_shape", "(", ")", "[", "1", "]", ")", "\n", "size", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "perm", ")", "[", "0", "]", ",", "tf", ".", "float32", ")", "\n", "blocks", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "perm", ")", "[", "1", "]", ",", "tf", ".", "float32", ")", "\n", "delta", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "perm", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "\n", "rg", "=", "tf", ".", "range", "(", "0", ",", "size", "*", "blocks", "*", "delta", ",", "delta", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "rg", "=", "tf", ".", "reshape", "(", "rg", ",", "[", "-", "1", ",", "n_block", ",", "1", "]", ")", "\n", "rg", "=", "tf", ".", "tile", "(", "rg", ",", "[", "1", ",", "1", ",", "dim", "]", ")", "\n", "perm", "=", "tf", ".", "add", "(", "perm", ",", "rg", ")", "\n", "flat", "=", "tf", ".", "reshape", "(", "perm", ",", "[", "-", "1", "]", ")", "\n", "perm", "=", "tf", ".", "invert_permutation", "(", "tf", ".", "cast", "(", "flat", ",", "tf", ".", "int32", ")", ")", "\n", "perm", "=", "tf", ".", "reshape", "(", "perm", ",", "[", "-", "1", ",", "n_block", ",", "dim", "]", ")", "\n", "return", "tf", ".", "subtract", "(", "perm", ",", "tf", ".", "cast", "(", "rg", ",", "tf", ".", "int32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.util.batch_gather": [[30, 49], ["tensorflow.name_scope", "tensorflow.expand_dims", "tensorflow.range", "tensorflow.reshape", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.range", "tensorflow.reshape", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.gather_nd", "tensorflow.shape", "tensorflow.shape", "int", "int", "int", "tensorflow.shape", "indices.get_shape", "indices.get_shape", "indices.get_shape"], "function", ["None"], ["", "", "def", "batch_gather", "(", "values", ",", "indices", ")", ":", "\n", "    ", "\"\"\"Returns batched `tf.gather` for every row in the input.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'batch_gather'", ",", "values", "=", "[", "values", ",", "indices", "]", ")", ":", "\n", "        ", "idx", "=", "tf", ".", "expand_dims", "(", "indices", ",", "-", "1", ")", "\n", "size", "=", "tf", ".", "shape", "(", "indices", ")", "[", "0", "]", "\n", "blocks", "=", "tf", ".", "shape", "(", "indices", ")", "[", "1", "]", "\n", "\n", "rg", "=", "tf", ".", "range", "(", "size", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "rg", "=", "tf", ".", "reshape", "(", "rg", ",", "(", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "rg", "=", "tf", ".", "tile", "(", "rg", ",", "[", "1", ",", "int", "(", "indices", ".", "get_shape", "(", ")", "[", "1", "]", ")", ",", "int", "(", "indices", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "]", ")", "\n", "rg", "=", "tf", ".", "expand_dims", "(", "rg", ",", "-", "1", ")", "\n", "\n", "bg", "=", "tf", ".", "range", "(", "blocks", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "bg", "=", "tf", ".", "reshape", "(", "bg", ",", "(", "1", ",", "-", "1", ",", "1", ")", ")", "\n", "bg", "=", "tf", ".", "tile", "(", "bg", ",", "[", "tf", ".", "shape", "(", "indices", ")", "[", "0", "]", ",", "1", ",", "int", "(", "indices", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "]", ")", "\n", "bg", "=", "tf", ".", "expand_dims", "(", "bg", ",", "-", "1", ")", "\n", "\n", "gidx", "=", "tf", ".", "concat", "(", "[", "rg", ",", "bg", ",", "idx", "]", ",", "-", "1", ")", "\n", "return", "tf", ".", "gather_nd", "(", "values", ",", "gidx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.util.one_hot": [[51, 56], ["numpy.zeros"], "function", ["None"], ["", "", "def", "one_hot", "(", "length", ",", "index", ")", ":", "\n", "    ", "\"\"\"Return an nd array of given `length` filled with 0s and a 1 at `index`.\"\"\"", "\n", "result", "=", "np", ".", "zeros", "(", "length", ")", "\n", "result", "[", "index", "]", "=", "1", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.util.reduce_prod": [[58, 70], ["tensorflow.name_scope", "tensorflow.cumprod", "tensorflow.range", "tensorflow.zeros", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.shape", "tensorflow.cast", "tensorflow.cast"], "function", ["None"], ["", "def", "reduce_prod", "(", "x", ",", "axis", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Efficient reduce product over axis.\n\n    Uses tf.cumprod and tf.gather_nd as a workaround to the poor performance of calculating tf.reduce_prod's gradient on CPU.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ",", "'util_reduce_prod'", ",", "values", "=", "[", "x", "]", ")", ":", "\n", "        ", "cp", "=", "tf", ".", "cumprod", "(", "x", ",", "axis", ",", "reverse", "=", "True", ")", "\n", "size", "=", "tf", ".", "shape", "(", "cp", ")", "[", "0", "]", "\n", "idx1", "=", "tf", ".", "range", "(", "tf", ".", "cast", "(", "size", ",", "tf", ".", "float32", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "idx2", "=", "tf", ".", "zeros", "(", "[", "size", "]", ",", "tf", ".", "float32", ")", "\n", "indices", "=", "tf", ".", "stack", "(", "[", "idx1", ",", "idx2", "]", ",", "1", ")", "\n", "return", "tf", ".", "gather_nd", "(", "cp", ",", "tf", ".", "cast", "(", "indices", ",", "tf", ".", "int32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.util.layer_normalization": [[72, 89], ["tensorflow.nn.moments", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.sqrt", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "weights.get_shape", "weights.get_shape"], "function", ["None"], ["", "", "def", "layer_normalization", "(", "weights", ",", "dtype", "=", "tf", ".", "float32", ",", "reuse", "=", "False", ",", "name", "=", "'layer_norm'", ")", ":", "\n", "    ", "_eps", "=", "1e-6", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'{}'", ".", "format", "(", "name", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "scale", "=", "tf", ".", "get_variable", "(", "'scale'", ",", "shape", "=", "[", "weights", ".", "get_shape", "(", ")", "[", "1", "]", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ",", "\n", "collections", "=", "[", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", "]", ",", "\n", "dtype", "=", "dtype", ")", "\n", "beta", "=", "tf", ".", "get_variable", "(", "'beta'", ",", "shape", "=", "[", "weights", ".", "get_shape", "(", ")", "[", "1", "]", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ",", "\n", "collections", "=", "[", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", "]", ",", "\n", "dtype", "=", "dtype", ")", "\n", "\n", "", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "weights", ",", "axes", "=", "[", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "norm_weights", "=", "(", "weights", "-", "mean", ")", "/", "tf", ".", "sqrt", "(", "var", "+", "_eps", ")", "\n", "\n", "return", "norm_weights", "*", "scale", "+", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.dam.DAM.__init__": [[29, 70], ["sonnet.RNNCore.__init__", "numpy.prod", "tensorflow.TensorShape", "DAMState", "dam.DAM._enter_variable_scope", "sonnet.LSTM", "model.DAM_test.access.MemoryAccess", "dam.DAM._access.output_size.as_list", "other_config.keys", "other_config.keys"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.__init__"], ["def", "__init__", "(", "self", ",", "\n", "access_config", ",", "\n", "controller_config", ",", "\n", "other_config", ",", "\n", "output_size", ",", "\n", "clip_value", "=", "None", ",", "\n", "name", "=", "'DAM'", ")", ":", "\n", "        ", "\"\"\"Initializes the DAM core.\n\n        Args:\n          access_config: dictionary of access module configurations.\n          controller_config: dictionary of controller (LSTM) module configurations.\n          output_size: output dimension size of core.\n          clip_value: clips controller and core output values to between\n              `[-clip_value, clip_value]` if specified.\n          name: module name (default 'DAM').\n\n        Raises:\n          TypeError: if direct_input_size is not None for any access module other\n            than KeyValueMemory.\n        \"\"\"", "\n", "super", "(", "DAM", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n", "with", "self", ".", "_enter_variable_scope", "(", ")", ":", "\n", "            ", "self", ".", "_controller", "=", "snt", ".", "LSTM", "(", "**", "controller_config", ")", "\n", "self", ".", "_access", "=", "access", ".", "MemoryAccess", "(", "num_memory_block", "=", "other_config", "[", "'num_memory_block'", "]", ",", "**", "access_config", ")", "\n", "\n", "", "self", ".", "_access_output_size", "=", "np", ".", "prod", "(", "self", ".", "_access", ".", "output_size", ".", "as_list", "(", ")", ")", "\n", "self", ".", "_output_size", "=", "output_size", "\n", "self", ".", "_clip_value", "=", "clip_value", "or", "0", "\n", "\n", "self", ".", "_act_fn_list", "=", "other_config", "[", "'act_fn_list'", "]", "if", "'act_fn_list'", "in", "other_config", ".", "keys", "(", ")", "else", "[", "]", "\n", "self", ".", "_layer_size_list", "=", "other_config", "[", "'layer_size_list'", "]", "if", "'act_fn_list'", "in", "other_config", ".", "keys", "(", ")", "else", "[", "]", "\n", "\n", "self", ".", "_keep_prob", "=", "other_config", "[", "'keep_prob'", "]", "\n", "\n", "self", ".", "_output_size", "=", "tf", ".", "TensorShape", "(", "[", "output_size", "]", ")", "\n", "self", ".", "_state_size", "=", "DAMState", "(", "\n", "access_output", "=", "self", ".", "_access_output_size", ",", "\n", "access_state", "=", "self", ".", "_access", ".", "state_size", ",", "\n", "controller_state", "=", "self", ".", "_controller", ".", "state_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.dam.DAM._clip_if_enabled": [[71, 76], ["tensorflow.clip_by_value"], "methods", ["None"], ["", "def", "_clip_if_enabled", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "_clip_value", ">", "0", ":", "\n", "            ", "return", "tf", ".", "clip_by_value", "(", "x", ",", "-", "self", ".", "_clip_value", ",", "self", ".", "_clip_value", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.dam.DAM._build": [[77, 133], ["sonnet.BatchFlatten", "tensorflow.concat", "dam.DAM._controller", "dam.DAM._clip_if_enabled", "tensorflow.contrib.framework.nest.map_structure", "model.DAM_test.util.layer_normalization", "dam.DAM._access", "tensorflow.nn.dropout", "tensorflow.concat", "enumerate", "dam.DAM._clip_if_enabled", "zip", "tensorflow.layers.dense", "sonnet.Linear", "DAMState", "sonnet.BatchFlatten.", "sonnet.BatchFlatten.", "sonnet.BatchFlatten.", "tensorflow.contrib.layers.xavier_initializer", "str", "dam.DAM._output_size.as_list"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM._clip_if_enabled", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.layer_normalization", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM._clip_if_enabled"], ["", "", "def", "_build", "(", "self", ",", "inputs", ",", "prev_state", ")", ":", "\n", "        ", "\"\"\"Connects the DAM core into the graph.\n\n        Args:\n          inputs: Tensor input.\n          prev_state: A `DAMState` tuple containing the fields `access_output`,\n              `access_state` and `controller_state`. `access_state` is a 3-D Tensor\n              of shape `[batch_size, num_reads, word_size]` containing read words.\n              `access_state` is a tuple of the access module's state, and\n              `controller_state` is a tuple of controller module's state.\n\n        Returns:\n          A tuple `(output, next_state)` where `output` is a tensor and `next_state`\n          is a `DAMState` tuple containing the fields `access_output`,\n          `access_state`, and `controller_state`.\n        \"\"\"", "\n", "\n", "prev_access_output", "=", "prev_state", ".", "access_output", "\n", "prev_access_state", "=", "prev_state", ".", "access_state", "\n", "prev_controller_state", "=", "prev_state", ".", "controller_state", "\n", "\n", "batch_flatten", "=", "snt", ".", "BatchFlatten", "(", ")", "\n", "controller_input", "=", "tf", ".", "concat", "(", "\n", "[", "batch_flatten", "(", "inputs", ")", ",", "batch_flatten", "(", "prev_access_output", ")", "]", ",", "1", ")", "\n", "\n", "controller_output", ",", "controller_state", "=", "self", ".", "_controller", "(", "\n", "controller_input", ",", "prev_controller_state", ")", "\n", "\n", "controller_output", "=", "self", ".", "_clip_if_enabled", "(", "controller_output", ")", "\n", "controller_state", "=", "tf", ".", "contrib", ".", "framework", ".", "nest", ".", "map_structure", "(", "self", ".", "_clip_if_enabled", ",", "controller_state", ")", "\n", "\n", "controller_output", "=", "layer_normalization", "(", "controller_output", ")", "\n", "\n", "access_output", ",", "access_state", "=", "self", ".", "_access", "(", "controller_output", ",", "\n", "prev_access_state", ")", "\n", "\n", "controller_output", "=", "tf", ".", "nn", ".", "dropout", "(", "controller_output", ",", "self", ".", "_keep_prob", ")", "\n", "\n", "output", "=", "tf", ".", "concat", "(", "[", "controller_output", ",", "batch_flatten", "(", "access_output", ")", "]", ",", "1", ")", "\n", "\n", "for", "i", ",", "(", "act_fn", ",", "size", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "_act_fn_list", ",", "self", ".", "_layer_size_list", ")", ")", ":", "\n", "            ", "output", "=", "tf", ".", "layers", ".", "dense", "(", "output", ",", "size", ",", "\n", "activation", "=", "act_fn", ",", "\n", "kernel_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "name", "=", "'projection_'", "+", "str", "(", "i", ")", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "\n", "", "output", "=", "snt", ".", "Linear", "(", "\n", "output_size", "=", "self", ".", "_output_size", ".", "as_list", "(", ")", "[", "0", "]", ",", "\n", "name", "=", "'output_linear'", ")", "(", "output", ")", "\n", "output", "=", "self", ".", "_clip_if_enabled", "(", "output", ")", "\n", "\n", "return", "output", ",", "DAMState", "(", "\n", "access_output", "=", "access_output", ",", "\n", "access_state", "=", "access_state", ",", "\n", "controller_state", "=", "controller_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.dam.DAM.initial_state": [[134, 140], ["DAMState", "dam.DAM._controller.initial_state", "dam.DAM._access.initial_state", "tensorflow.zeros", "dam.DAM._access.output_size.as_list"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.initial_state", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.initial_state"], ["", "def", "initial_state", "(", "self", ",", "batch_size", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "        ", "return", "DAMState", "(", "\n", "controller_state", "=", "self", ".", "_controller", ".", "initial_state", "(", "batch_size", ",", "dtype", ")", ",", "\n", "access_state", "=", "self", ".", "_access", ".", "initial_state", "(", "batch_size", ",", "dtype", ")", ",", "\n", "access_output", "=", "tf", ".", "zeros", "(", "\n", "[", "batch_size", "]", "+", "self", ".", "_access", ".", "output_size", ".", "as_list", "(", ")", ",", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.dam.DAM.state_size": [[141, 144], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM_test.dam.DAM.output_size": [[145, 148], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.access.MemoryAccess.__init__": [[70, 100], ["sonnet.RNNCore.__init__", "model.DNC.addressing.CosineWeights", "model.DNC.addressing.CosineWeights", "model.DNC.addressing.TemporalLinkage", "model.DNC.addressing.Freeness"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.__init__"], ["memory_size", "=", "128", ",", "\n", "word_size", "=", "20", ",", "\n", "num_reads", "=", "1", ",", "\n", "num_writes", "=", "1", ",", "\n", "name", "=", "'memory_access'", ")", ":", "\n", "        ", "\"\"\"Creates a MemoryAccess module.\n\n        Args:\n          num_memory_block: The number of memory blocks.\n          memory_size: The number of memory slots (N in the DNC paper).\n          word_size: The width of each memory slot (W in the DNC paper)\n          num_reads: The number of read heads (R in the DNC paper).\n          num_writes: The number of write heads (fixed at 1 in the paper).\n          name: The name of the module.\n        \"\"\"", "\n", "super", "(", "MemoryAccess", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "_num_memory_block", "=", "num_memory_block", "\n", "self", ".", "_memory_size", "=", "memory_size", "\n", "self", ".", "_word_size", "=", "word_size", "\n", "self", ".", "_num_reads", "=", "num_reads", "\n", "self", ".", "_num_writes", "=", "num_writes", "\n", "\n", "self", ".", "_write_content_weights_mod", "=", "addressing", ".", "CosineWeights", "(", "\n", "num_writes", ",", "word_size", ",", "name", "=", "'write_content_weights'", ")", "\n", "self", ".", "_read_content_weights_mod", "=", "addressing", ".", "CosineWeights", "(", "\n", "num_reads", ",", "word_size", ",", "name", "=", "'read_content_weights'", ")", "\n", "\n", "self", ".", "_freeness", "=", "addressing", ".", "Freeness", "(", "num_memory_block", ",", "memory_size", ")", "\n", "\n", "self", ".", "_interface_size", ",", "self", ".", "_range_list", "=", "self", ".", "_bulid_var", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.access.MemoryAccess._build": [[101, 147], ["access.MemoryAccess._read_inputs", "access.MemoryAccess._freeness", "access.MemoryAccess._write_weights", "access._erase_and_write", "access.MemoryAccess._linkage", "access.MemoryAccess._read_weights", "tensorflow.matmul", "AccessState"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._read_inputs", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._write_weights", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access._erase_and_write", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._read_weights"], ["", "def", "_bulid_var", "(", "self", ")", ":", "\n", "        ", "parameter_size_list", "=", "[", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", "*", "self", ".", "_word_size", ",", "# write_vectors", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", "*", "self", ".", "_word_size", ",", "# erase_vectors", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_reads", ",", "# free_gate", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", ",", "# allocation_gate", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", ",", "# write_gate", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", "*", "self", ".", "_word_size", ",", "# write_keys", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", ",", "# write_strengths", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_reads", "*", "self", ".", "_word_size", ",", "# read_keys", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_reads", ",", "# read_strengths", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_reads", "# which read vector", "\n", "]", "\n", "interface_size", "=", "sum", "(", "parameter_size_list", ")", "\n", "\n", "range_list", "=", "[", "0", "]", "\n", "for", "size", "in", "parameter_size_list", ":", "\n", "            ", "range_list", ".", "append", "(", "range_list", "[", "-", "1", "]", "+", "size", ")", "\n", "\n", "", "return", "interface_size", ",", "range_list", "\n", "\n", "", "def", "_build", "(", "self", ",", "inputs", ",", "prev_state", ")", ":", "\n", "        ", "\"\"\"Connects the MemoryAccess module into the graph.\n\n        Args:\n          inputs: tensor of shape `[batch_size, input_size]`. This is used to\n              control this access module.\n          prev_state: Instance of `AccessState` containing the previous state.\n\n        Returns:\n          A tuple `(output, next_state)`, where `output` is a tensor of shape\n          `[batch_size, num_reads, word_size]`, and `next_state` is the new\n          `AccessState` named tuple at the current time t.\n        \"\"\"", "\n", "control", "=", "self", ".", "_read_inputs", "(", "inputs", ")", "\n", "\n", "# Update usage using inputs['free_gate'] and previous read & write weights.", "\n", "usage", "=", "self", ".", "_freeness", "(", "\n", "write_weights", "=", "prev_state", ".", "write_weights", ",", "\n", "free_gate", "=", "control", "[", "'free_gate'", "]", ",", "\n", "read_weights", "=", "prev_state", ".", "read_weights", ",", "\n", "prev_usage", "=", "prev_state", ".", "usage", ")", "\n", "\n", "# Write to memory.", "\n", "write_weights", "=", "self", ".", "_write_weights", "(", "control", ",", "prev_state", ".", "memory", ",", "usage", ")", "\n", "memory", "=", "_erase_and_write", "(", "\n", "prev_state", ".", "memory", ",", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.access.MemoryAccess._read_inputs": [[148, 207], ["access.MemoryAccess._read_inputs._linear"], "methods", ["None"], ["address", "=", "write_weights", ",", "\n", "reset_weights", "=", "control", "[", "'erase_vectors'", "]", ",", "\n", "values", "=", "control", "[", "'write_vectors'", "]", ")", "\n", "\n", "# Read from memory.", "\n", "read_weights", "=", "self", ".", "_read_weights", "(", "\n", "control", ",", "\n", "memory", "=", "memory", ")", "\n", "read_weights", "=", "tf", ".", "multiply", "(", "read_weights", ",", "control", "[", "'attentive_gate'", "]", ")", "\n", "read_words", "=", "tf", ".", "matmul", "(", "read_weights", ",", "memory", ")", "\n", "read_words", "=", "tf", ".", "reduce_sum", "(", "read_words", ",", "axis", "=", "1", ")", "\n", "\n", "return", "(", "read_words", ",", "AccessState", "(", "\n", "memory", "=", "memory", ",", "\n", "read_weights", "=", "read_weights", ",", "\n", "write_weights", "=", "write_weights", ",", "\n", "usage", "=", "usage", ",", "\n", "attentive_gate", "=", "control", "[", "'attentive_gate'", "]", ")", ")", "\n", "\n", "", "def", "_read_inputs", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Applies transformations to `inputs` to get control for this module.\"\"\"", "\n", "\n", "def", "_alloc_1d", "(", "input", ",", "num_memory_block", ",", "first_dim", ",", "name", ",", "activation", "=", "None", ")", ":", "\n", "            ", "vector", "=", "tf", ".", "reshape", "(", "input", ",", "[", "-", "1", ",", "num_memory_block", ",", "first_dim", "]", ",", "name", "=", "name", ")", "\n", "if", "activation", "is", "not", "None", ":", "\n", "                ", "vector", "=", "activation", "(", "vector", ",", "name", "=", "name", "+", "'_activation'", ")", "\n", "", "return", "vector", "\n", "\n", "", "def", "_alloc_2d", "(", "input", ",", "num_memory_block", ",", "first_dim", ",", "second_dim", ",", "name", ",", "activation", "=", "None", ")", ":", "\n", "            ", "vector", "=", "tf", ".", "reshape", "(", "input", ",", "[", "-", "1", ",", "num_memory_block", ",", "first_dim", ",", "second_dim", "]", ",", "name", "=", "name", ")", "\n", "if", "activation", "is", "not", "None", ":", "\n", "                ", "vector", "=", "activation", "(", "vector", ",", "name", "=", "name", "+", "'_activation'", ")", "\n", "", "return", "vector", "\n", "\n", "", "interface_vector", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "_interface_size", ",", "\n", "kernel_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "name", "=", "'interface_vector'", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "\n", "write_vectors", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "0", "]", ":", "self", ".", "_range_list", "[", "1", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "self", ".", "_word_size", ",", "'write_vectors'", ")", "\n", "\n", "erase_vectors", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "1", "]", ":", "self", ".", "_range_list", "[", "2", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "self", ".", "_word_size", ",", "'erase_vectors'", ",", "tf", ".", "sigmoid", ")", "\n", "\n", "free_gate", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "2", "]", ":", "self", ".", "_range_list", "[", "3", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "'free_gate'", ",", "tf", ".", "sigmoid", ")", "\n", "\n", "allocation_gate", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "3", "]", ":", "self", ".", "_range_list", "[", "4", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "'allocation_gate'", ",", "tf", ".", "sigmoid", ")", "\n", "\n", "write_gate", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "4", "]", ":", "self", ".", "_range_list", "[", "5", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "'write_gate'", ",", "tf", ".", "sigmoid", ")", "\n", "write_keys", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "5", "]", ":", "self", ".", "_range_list", "[", "6", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "self", ".", "_word_size", ",", "'write_keys'", ")", "\n", "write_strengths", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "6", "]", ":", "self", ".", "_range_list", "[", "7", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "'write_strengths'", ")", "\n", "\n", "read_keys", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "7", "]", ":", "self", ".", "_range_list", "[", "8", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "self", ".", "_word_size", ",", "'read_keys'", ")", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.access.MemoryAccess._write_weights": [[208, 246], ["tensorflow.name_scope", "access.MemoryAccess._write_content_weights_mod", "access.MemoryAccess._freeness.write_allocation_weights", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness.write_allocation_weights"], ["read_strengths", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "8", "]", ":", "self", ".", "_range_list", "[", "9", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "'read_strengths'", ")", "\n", "\n", "attentive_gate", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "9", "]", ":", "self", ".", "_range_list", "[", "10", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "1", ",", "'attentive_gate'", ")", "\n", "\n", "result", "=", "{", "\n", "'read_content_keys'", ":", "read_keys", ",", "\n", "'read_content_strengths'", ":", "read_strengths", ",", "\n", "'write_content_keys'", ":", "write_keys", ",", "\n", "'write_content_strengths'", ":", "write_strengths", ",", "\n", "'write_vectors'", ":", "write_vectors", ",", "\n", "'erase_vectors'", ":", "erase_vectors", ",", "\n", "'free_gate'", ":", "free_gate", ",", "\n", "'allocation_gate'", ":", "allocation_gate", ",", "\n", "'write_gate'", ":", "write_gate", ",", "\n", "'attentive_gate'", ":", "tf", ".", "nn", ".", "softmax", "(", "attentive_gate", ",", "axis", "=", "1", ")", ",", "\n", "}", "\n", "\n", "return", "result", "\n", "\n", "", "def", "_write_weights", "(", "self", ",", "inputs", ",", "memory", ",", "usage", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.access.MemoryAccess._read_weights": [[247, 292], ["tensorflow.name_scope", "access.MemoryAccess._read_content_weights_mod", "access.MemoryAccess._linkage.directional_read_weights", "access.MemoryAccess._linkage.directional_read_weights", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.TemporalLinkage.directional_read_weights", "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.TemporalLinkage.directional_read_weights"], ["\n", "with", "tf", ".", "name_scope", "(", "'write_weights'", ",", "values", "=", "[", "inputs", ",", "memory", ",", "usage", "]", ")", ":", "\n", "# c_t^{w, i} - The content-based weights for each write head.", "\n", "            ", "write_content_weights", "=", "self", ".", "_write_content_weights_mod", "(", "\n", "memory", ",", "inputs", "[", "'write_content_keys'", "]", ",", "\n", "inputs", "[", "'write_content_strengths'", "]", ")", "\n", "\n", "# a_t^i - The allocation weights for each write head.", "\n", "write_allocation_weights", "=", "self", ".", "_freeness", ".", "write_allocation_weights", "(", "\n", "usage", "=", "usage", ",", "\n", "write_gates", "=", "(", "inputs", "[", "'allocation_gate'", "]", "*", "inputs", "[", "'write_gate'", "]", ")", ",", "\n", "num_writes", "=", "self", ".", "_num_writes", ")", "\n", "\n", "# Expands gates over memory locations.", "\n", "allocation_gate", "=", "tf", ".", "expand_dims", "(", "inputs", "[", "'allocation_gate'", "]", ",", "-", "1", ")", "\n", "write_gate", "=", "tf", ".", "expand_dims", "(", "inputs", "[", "'write_gate'", "]", ",", "-", "1", ")", "\n", "\n", "# w_t^{w, i} - The write weightings for each write head.", "\n", "return", "write_gate", "*", "(", "allocation_gate", "*", "write_allocation_weights", "+", "\n", "(", "1", "-", "allocation_gate", ")", "*", "write_content_weights", ")", "\n", "\n", "", "", "def", "_read_weights", "(", "self", ",", "inputs", ",", "memory", ")", ":", "\n", "        ", "\"\"\"Calculates read weights for each read head.\n\n        The read weights are a combination of following the link graphs in the\n        forward or backward directions from the previous read position, and doing\n        content-based lookup. The interpolation between these different modes is\n        done by `inputs['read_mode']`.\n\n        Args:\n          inputs: Controls for this access module. This contains the content-based\n              keys to lookup, and the weightings for the different read modes.\n          memory: A tensor of shape `[batch_size, num_memory_blocks, memory_size, word_size]`\n              containing the current memory contents to do content-based lookup.\n          name: string, 'left' or 'right'.\n\n        Returns:\n          A tensor of shape `[batch_size, num_memory_blocks, num_reads, memory_size]` containing the\n          read weights for each read head.\n        \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\n", "'read_weights'", ",", "values", "=", "[", "inputs", ",", "memory", "]", ")", ":", "\n", "# c_t^{r, i} - The content weightings for each read head.", "\n", "            ", "read_weights", "=", "self", ".", "_read_content_weights_mod", "(", "\n", "memory", ",", "inputs", "[", "'read_content_keys'", "]", ",", "inputs", "[", "'read_content_strengths'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.access.MemoryAccess.state_size": [[293, 302], ["AccessState", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape"], "methods", ["None"], ["return", "read_weights", "\n", "\n", "", "", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a tuple of the shape of the state tensors.\"\"\"", "\n", "return", "AccessState", "(", "\n", "memory", "=", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_memory_block", ",", "self", ".", "_memory_size", ",", "self", ".", "_word_size", "]", ")", ",", "\n", "read_weights", "=", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "self", ".", "_memory_size", "]", ")", ",", "\n", "write_weights", "=", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "self", ".", "_memory_size", "]", ")", ",", "\n", "usage", "=", "self", ".", "_freeness", ".", "state_size", ",", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.access.MemoryAccess.output_size": [[303, 307], ["tensorflow.TensorShape"], "methods", ["None"], ["attentive_gate", "=", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "1", "]", ")", ")", "\n", "\n", "", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the output shape.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.access._erase_and_write": [[18, 50], ["tensorflow.name_scope", "tensorflow.expand_dims", "tensorflow.expand_dims", "model.DNC.util.reduce_prod", "tensorflow.name_scope", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.reduce_prod"], ["def", "_erase_and_write", "(", "memory", ",", "address", ",", "reset_weights", ",", "values", ")", ":", "\n", "    ", "\"\"\"Module to erase and write in the external memory.\n\n    Erase operation:\n      M_t'(i) = M_{t-1}(i) * (1 - w_t(i) * e_t)\n\n    Add operation:\n      M_t(i) = M_t'(i) + w_t(i) * a_t\n\n    where e are the reset_weights, w the write weights and a the values.\n\n    Args:\n      memory: 4-D tensor of shape `[batch_size, num_memory_blocks, memory_size, word_size]`.\n      address: 4-D tensor `[batch_size, num_memory_blocks, num_writes, memory_size]`.\n      reset_weights: 4-D tensor `[batch_size, num_memory_blocks, num_writes, word_size]`.\n      values: 4-D tensor `[batch_size, num_memory_blocks, num_writes, word_size]`.\n\n    Returns:\n      3-D tensor of shape `[batch_size, num_writes, word_size]`.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'erase_memory'", ",", "values", "=", "[", "memory", ",", "address", ",", "reset_weights", "]", ")", ":", "\n", "        ", "expand_address", "=", "tf", ".", "expand_dims", "(", "address", ",", "4", ")", "\n", "reset_weights", "=", "tf", ".", "expand_dims", "(", "reset_weights", ",", "3", ")", "\n", "weighted_resets", "=", "expand_address", "*", "reset_weights", "\n", "weighted_resets", "=", "tf", ".", "transpose", "(", "weighted_resets", ",", "[", "0", ",", "2", ",", "1", ",", "3", ",", "4", "]", ")", "\n", "reset_gate", "=", "util", ".", "reduce_prod", "(", "1", "-", "weighted_resets", ",", "1", ")", "\n", "memory", "*=", "reset_gate", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'additive_write'", ",", "values", "=", "[", "memory", ",", "address", ",", "values", "]", ")", ":", "\n", "        ", "add_matrix", "=", "tf", ".", "matmul", "(", "address", ",", "values", ",", "adjoint_a", "=", "True", ")", "\n", "memory", "+=", "add_matrix", "\n", "\n", "", "return", "memory", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.CosineWeights.__init__": [[51, 68], ["sonnet.AbstractModule.__init__"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.__init__"], ["    ", "\"\"\"Initializes the CosineWeights module.\n\n    Args:\n      num_heads: number of memory heads.\n      word_size: memory word size.\n      strength_op: operation to apply to strengths (default is tf.nn.softplus).\n      name: module name (default 'cosine_weights')\n    \"\"\"", "\n", "super", "(", "CosineWeights", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "_num_heads", "=", "num_heads", "\n", "self", ".", "_word_size", "=", "word_size", "\n", "self", ".", "_strength_op", "=", "strength_op", "\n", "\n", "", "def", "_build", "(", "self", ",", "memory", ",", "keys", ",", "strengths", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.CosineWeights._build": [[69, 92], ["tensorflow.matmul", "addressing._vector_norms", "addressing._vector_norms", "tensorflow.matmul", "addressing.weighted_softmax"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing._vector_norms", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing._vector_norms", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.weighted_softmax"], ["\n", "# Calculates the inner product between the query vector and words in memory.", "\n", "dot", "=", "tf", ".", "matmul", "(", "keys", ",", "memory", ",", "adjoint_b", "=", "True", ")", "\n", "\n", "# Outer product to compute denominator (euclidean norm of query and memory).", "\n", "memory_norms", "=", "_vector_norms", "(", "memory", ")", "\n", "key_norms", "=", "_vector_norms", "(", "keys", ")", "\n", "norm", "=", "tf", ".", "matmul", "(", "key_norms", ",", "memory_norms", ",", "adjoint_b", "=", "True", ")", "\n", "\n", "# Calculates cosine similarity between the query vector and words in memory.", "\n", "similarity", "=", "dot", "/", "(", "norm", "+", "_EPSILON", ")", "\n", "\n", "return", "weighted_softmax", "(", "similarity", ",", "strengths", ",", "self", ".", "_strength_op", ")", "\n", "\n", "\n", "", "", "class", "Freeness", "(", "snt", ".", "RNNCore", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.TemporalLinkage.__init__": [[107, 118], ["sonnet.RNNCore.__init__"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.__init__"], ["    ", "\"\"\"Creates a Freeness module.\n\n    Args:\n      memory_size: Number of memory slots.\n      name: Name of the module.\n    \"\"\"", "\n", "super", "(", "Freeness", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "_num_memory_block", "=", "num_memory_block", "\n", "self", ".", "_memory_size", "=", "memory_size", "\n", "\n", "", "def", "_build", "(", "self", ",", "write_weights", ",", "free_gate", ",", "read_weights", ",", "prev_usage", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.TemporalLinkage._build": [[119, 140], ["addressing.TemporalLinkage._link", "addressing.TemporalLinkage._precedence_weights", "TemporalLinkageState"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.TemporalLinkage._link", "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.TemporalLinkage._precedence_weights"], ["\n", "# Calculation of usage is not differentiable with respect to write weights.", "\n", "write_weights", "=", "tf", ".", "stop_gradient", "(", "write_weights", ")", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.TemporalLinkage.directional_read_weights": [[141, 168], ["tensorflow.name_scope", "tensorflow.stack", "tensorflow.matmul", "tensorflow.transpose"], "methods", ["None"], ["usage", "=", "self", ".", "_usage_after_write", "(", "prev_usage", ",", "write_weights", ")", "\n", "usage", "=", "self", ".", "_usage_after_read", "(", "usage", ",", "free_gate", ",", "read_weights", ")", "\n", "return", "usage", "\n", "\n", "", "def", "write_allocation_weights", "(", "self", ",", "usage", ",", "write_gates", ",", "num_writes", ")", ":", "\n", "    ", "\"\"\"Calculates freeness-based locations for writing to.\n\n    This finds unused memory by ranking the memory locations by usage, for each\n    write head. (For more than one write head, we use a \"simulated new usage\"\n    which takes into account the fact that the previous write head will increase\n    the usage in that area of the memory.)\n\n    Args:\n      usage: A tensor of shape `[batch_size, num_memory_blocks, memory_size]` representing\n          current memory usage.\n      write_gates: A tensor of shape `[batch_size, num_memory_blocks, num_writes]` with values in\n          the range [0, 1] indicating how much each write head does writing\n          based on the address returned here (and hence how much usage\n          increases).\n      num_writes: The number of write heads to calculate write weights for.\n\n    Returns:\n      tensor of shape `[batch_size, num_memory_blocks, num_writes, memory_size]` containing the\n          freeness-based write locations. Note that this isn't scaled by\n          `write_gate`; this scaling must be applied externally.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'write_allocation_weights'", ")", ":", "\n", "# expand gatings over memory locations", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.TemporalLinkage._link": [[169, 205], ["tensorflow.name_scope", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.matrix_set_diag", "tensorflow.shape", "tensorflow.zeros"], "methods", ["None"], ["      ", "write_gates", "=", "tf", ".", "expand_dims", "(", "write_gates", ",", "-", "1", ")", "\n", "\n", "allocation_weights", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_writes", ")", ":", "\n", "        ", "allocation_weights", ".", "append", "(", "self", ".", "_allocation", "(", "usage", ")", ")", "\n", "# update usage to take into account writing to this new allocation", "\n", "usage", "+=", "(", "(", "1", "-", "usage", ")", "*", "write_gates", "[", ":", ",", "i", ",", ":", ",", ":", "]", "*", "allocation_weights", "[", "i", "]", ")", "\n", "\n", "# Pack the allocation weights for the write heads into one tensor.", "\n", "", "return", "tf", ".", "stack", "(", "allocation_weights", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "def", "_usage_after_write", "(", "self", ",", "prev_usage", ",", "write_weights", ")", ":", "\n", "    ", "\"\"\"Calcualtes the new usage after writing to memory.\n\n    Args:\n      prev_usage: tensor of shape `[batch_size, num_memory_blocks, memory_size]`.\n      write_weights: tensor of shape `[batch_size, num_memory_blocks, num_writes, memory_size]`.\n\n    Returns:\n      New usage, a tensor of shape `[batch_size, num_memory_blocks, memory_size]`.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'usage_after_write'", ")", ":", "\n", "# Calculate the aggregated effect of all write heads", "\n", "      ", "write_weights", "=", "tf", ".", "transpose", "(", "write_weights", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "write_weights", "=", "1", "-", "util", ".", "reduce_prod", "(", "1", "-", "write_weights", ",", "1", ")", "\n", "return", "prev_usage", "+", "(", "1", "-", "prev_usage", ")", "*", "write_weights", "\n", "\n", "", "", "def", "_usage_after_read", "(", "self", ",", "prev_usage", ",", "free_gate", ",", "read_weights", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.TemporalLinkage._precedence_weights": [[206, 227], ["tensorflow.name_scope", "tensorflow.reduce_sum"], "methods", ["None"], ["\n", "with", "tf", ".", "name_scope", "(", "'usage_after_read'", ")", ":", "\n", "      ", "free_gate", "=", "tf", ".", "expand_dims", "(", "free_gate", ",", "-", "1", ")", "\n", "free_read_weights", "=", "free_gate", "*", "read_weights", "\n", "free_read_weights", "=", "tf", ".", "transpose", "(", "free_read_weights", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "phi", "=", "util", ".", "reduce_prod", "(", "1", "-", "free_read_weights", ",", "1", ",", "name", "=", "'phi'", ")", "\n", "return", "prev_usage", "*", "phi", "\n", "\n", "", "", "def", "_allocation", "(", "self", ",", "usage", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.TemporalLinkage.state_size": [[228, 236], ["TemporalLinkageState", "tensorflow.TensorShape", "tensorflow.TensorShape"], "methods", ["None"], ["\n", "with", "tf", ".", "name_scope", "(", "'allocation'", ")", ":", "\n", "# Ensure values are not too small prior to cumprod.", "\n", "      ", "usage", "=", "_EPSILON", "+", "(", "1", "-", "_EPSILON", ")", "*", "usage", "\n", "\n", "nonusage", "=", "1", "-", "usage", "\n", "sorted_nonusage", ",", "indices", "=", "tf", ".", "nn", ".", "top_k", "(", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.Freeness.__init__": [[255, 264], ["sonnet.RNNCore.__init__"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.__init__"], []], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.Freeness._build": [[265, 292], ["tensorflow.stop_gradient", "addressing.Freeness._usage_after_write", "addressing.Freeness._usage_after_read"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness._usage_after_write", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness._usage_after_read"], []], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.Freeness.write_allocation_weights": [[293, 327], ["tensorflow.name_scope", "tensorflow.expand_dims", "range", "tensorflow.stack", "allocation_weights.append", "addressing.Freeness._allocation"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness._allocation"], []], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.Freeness._usage_after_write": [[328, 342], ["tensorflow.name_scope", "model.DNC.util.reduce_prod"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.reduce_prod"], []], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.Freeness._usage_after_read": [[343, 361], ["tensorflow.name_scope", "tensorflow.expand_dims", "model.DNC.util.reduce_prod"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.reduce_prod"], []], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.Freeness._allocation": [[362, 392], ["tensorflow.name_scope", "tensorflow.nn.top_k", "tensorflow.cumprod", "model.DNC.util.batch_invert_permutation", "model.DNC.util.batch_gather"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.batch_invert_permutation", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.batch_gather"], []], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.Freeness.state_size": [[393, 397], ["tensorflow.TensorShape"], "methods", ["None"], []], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing._vector_norms": [[20, 23], ["tensorflow.reduce_sum", "tensorflow.sqrt"], "function", ["None"], ["\n", "", "def", "weighted_softmax", "(", "activations", ",", "strengths", ",", "strengths_op", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.addressing.weighted_softmax": [[25, 42], ["tensorflow.expand_dims", "sonnet.BatchApply", "snt.BatchApply.", "strengths_op"], "function", ["None"], ["\n", "transformed_strengths", "=", "tf", ".", "expand_dims", "(", "strengths_op", "(", "strengths", ")", ",", "axis", "=", "-", "1", ")", "\n", "sharp_activations", "=", "activations", "*", "transformed_strengths", "\n", "return", "tf", ".", "nn", ".", "softmax", "(", "sharp_activations", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "", "class", "CosineWeights", "(", "snt", ".", "AbstractModule", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.dnc.DNC.__init__": [[28, 63], ["sonnet.RNNCore.__init__", "numpy.prod", "tensorflow.TensorShape", "DNCState", "dnc.DNC._enter_variable_scope", "sonnet.LSTM", "model.DNC.access.MemoryAccess", "dnc.DNC._access.output_size.as_list"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.__init__"], ["def", "__init__", "(", "self", ",", "\n", "access_config", ",", "\n", "controller_config", ",", "\n", "output_size", ",", "\n", "clip_value", "=", "None", ",", "\n", "name", "=", "'dnc'", ")", ":", "\n", "    ", "\"\"\"Initializes the DNC core.\n\n    Args:\n      access_config: dictionary of access module configurations.\n      controller_config: dictionary of controller (LSTM) module configurations.\n      output_size: output dimension size of core.\n      clip_value: clips controller and core output values to between\n          `[-clip_value, clip_value]` if specified.\n      name: module name (default 'dnc').\n\n    Raises:\n      TypeError: if direct_input_size is not None for any access module other\n        than KeyValueMemory.\n    \"\"\"", "\n", "super", "(", "DNC", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n", "with", "self", ".", "_enter_variable_scope", "(", ")", ":", "\n", "      ", "self", ".", "_controller", "=", "snt", ".", "LSTM", "(", "**", "controller_config", ")", "\n", "self", ".", "_access", "=", "access", ".", "MemoryAccess", "(", "**", "access_config", ")", "\n", "\n", "", "self", ".", "_access_output_size", "=", "np", ".", "prod", "(", "self", ".", "_access", ".", "output_size", ".", "as_list", "(", ")", ")", "\n", "self", ".", "_output_size", "=", "output_size", "\n", "self", ".", "_clip_value", "=", "clip_value", "or", "0", "\n", "\n", "self", ".", "_output_size", "=", "tf", ".", "TensorShape", "(", "[", "output_size", "]", ")", "\n", "self", ".", "_state_size", "=", "DNCState", "(", "\n", "access_output", "=", "self", ".", "_access_output_size", ",", "\n", "access_state", "=", "self", ".", "_access", ".", "state_size", ",", "\n", "controller_state", "=", "self", ".", "_controller", ".", "state_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.dnc.DNC._clip_if_enabled": [[64, 69], ["tensorflow.clip_by_value"], "methods", ["None"], ["", "def", "_clip_if_enabled", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "_clip_value", ">", "0", ":", "\n", "      ", "return", "tf", ".", "clip_by_value", "(", "x", ",", "-", "self", ".", "_clip_value", ",", "self", ".", "_clip_value", ")", "\n", "", "else", ":", "\n", "      ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.dnc.DNC._build": [[70, 114], ["sonnet.BatchFlatten", "tensorflow.concat", "dnc.DNC._controller", "dnc.DNC._clip_if_enabled", "tensorflow.contrib.framework.nest.map_structure", "dnc.DNC._access", "tensorflow.concat", "dnc.DNC._clip_if_enabled", "sonnet.Linear", "DNCState", "sonnet.BatchFlatten.", "sonnet.BatchFlatten.", "sonnet.BatchFlatten.", "dnc.DNC._output_size.as_list"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM._clip_if_enabled", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM._clip_if_enabled"], ["", "", "def", "_build", "(", "self", ",", "inputs", ",", "prev_state", ")", ":", "\n", "    ", "\"\"\"Connects the DNC core into the graph.\n\n    Args:\n      inputs: Tensor input.\n      prev_state: A `DNCState` tuple containing the fields `access_output`,\n          `access_state` and `controller_state`. `access_state` is a 3-D Tensor\n          of shape `[batch_size, num_reads, word_size]` containing read words.\n          `access_state` is a tuple of the access module's state, and\n          `controller_state` is a tuple of controller module's state.\n\n    Returns:\n      A tuple `(output, next_state)` where `output` is a tensor and `next_state`\n      is a `DNCState` tuple containing the fields `access_output`,\n      `access_state`, and `controller_state`.\n    \"\"\"", "\n", "\n", "prev_access_output", "=", "prev_state", ".", "access_output", "\n", "prev_access_state", "=", "prev_state", ".", "access_state", "\n", "prev_controller_state", "=", "prev_state", ".", "controller_state", "\n", "\n", "batch_flatten", "=", "snt", ".", "BatchFlatten", "(", ")", "\n", "controller_input", "=", "tf", ".", "concat", "(", "\n", "[", "batch_flatten", "(", "inputs", ")", ",", "batch_flatten", "(", "prev_access_output", ")", "]", ",", "1", ")", "\n", "\n", "controller_output", ",", "controller_state", "=", "self", ".", "_controller", "(", "\n", "controller_input", ",", "prev_controller_state", ")", "\n", "\n", "controller_output", "=", "self", ".", "_clip_if_enabled", "(", "controller_output", ")", "\n", "controller_state", "=", "tf", ".", "contrib", ".", "framework", ".", "nest", ".", "map_structure", "(", "self", ".", "_clip_if_enabled", ",", "controller_state", ")", "\n", "\n", "access_output", ",", "access_state", "=", "self", ".", "_access", "(", "controller_output", ",", "\n", "prev_access_state", ")", "\n", "\n", "output", "=", "tf", ".", "concat", "(", "[", "controller_output", ",", "batch_flatten", "(", "access_output", ")", "]", ",", "1", ")", "\n", "output", "=", "snt", ".", "Linear", "(", "\n", "output_size", "=", "self", ".", "_output_size", ".", "as_list", "(", ")", "[", "0", "]", ",", "\n", "name", "=", "'output_linear'", ")", "(", "output", ")", "\n", "output", "=", "self", ".", "_clip_if_enabled", "(", "output", ")", "\n", "\n", "return", "output", ",", "DNCState", "(", "\n", "access_output", "=", "access_output", ",", "\n", "access_state", "=", "access_state", ",", "\n", "controller_state", "=", "controller_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.dnc.DNC.initial_state": [[115, 121], ["DNCState", "dnc.DNC._controller.initial_state", "dnc.DNC._access.initial_state", "tensorflow.zeros", "dnc.DNC._access.output_size.as_list"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.initial_state", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.initial_state"], ["", "def", "initial_state", "(", "self", ",", "batch_size", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "    ", "return", "DNCState", "(", "\n", "controller_state", "=", "self", ".", "_controller", ".", "initial_state", "(", "batch_size", ",", "dtype", ")", ",", "\n", "access_state", "=", "self", ".", "_access", ".", "initial_state", "(", "batch_size", ",", "dtype", ")", ",", "\n", "access_output", "=", "tf", ".", "zeros", "(", "\n", "[", "batch_size", "]", "+", "self", ".", "_access", ".", "output_size", ".", "as_list", "(", ")", ",", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.dnc.DNC.state_size": [[122, 125], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.dnc.DNC.output_size": [[126, 129], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_output_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.util.batch_invert_permutation": [[11, 26], ["tensorflow.name_scope", "tensorflow.cast", "int", "tensorflow.cast", "tensorflow.cast", "tensorflow.range", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.add", "tensorflow.reshape", "tensorflow.invert_permutation", "tensorflow.reshape", "tensorflow.subtract", "tensorflow.cast", "tensorflow.cast", "tf.reshape.get_shape", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["def", "batch_invert_permutation", "(", "permutations", ")", ":", "\n", "    ", "\"\"\"Returns batched `tf.invert_permutation` for every row in `permutations`.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'batch_invert_permutation'", ",", "values", "=", "[", "permutations", "]", ")", ":", "\n", "        ", "perm", "=", "tf", ".", "cast", "(", "permutations", ",", "tf", ".", "float32", ")", "\n", "dim", "=", "int", "(", "perm", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "\n", "n_block", "=", "int", "(", "perm", ".", "get_shape", "(", ")", "[", "1", "]", ")", "\n", "size", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "perm", ")", "[", "0", "]", ",", "tf", ".", "float32", ")", "\n", "blocks", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "perm", ")", "[", "1", "]", ",", "tf", ".", "float32", ")", "\n", "delta", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "perm", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "\n", "rg", "=", "tf", ".", "range", "(", "0", ",", "size", "*", "blocks", "*", "delta", ",", "delta", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "rg", "=", "tf", ".", "reshape", "(", "rg", ",", "[", "-", "1", ",", "n_block", ",", "1", "]", ")", "\n", "rg", "=", "tf", ".", "tile", "(", "rg", ",", "[", "1", ",", "1", ",", "dim", "]", ")", "\n", "perm", "=", "tf", ".", "add", "(", "perm", ",", "rg", ")", "\n", "flat", "=", "tf", ".", "reshape", "(", "perm", ",", "[", "-", "1", "]", ")", "\n", "perm", "=", "tf", ".", "invert_permutation", "(", "tf", ".", "cast", "(", "flat", ",", "tf", ".", "int32", ")", ")", "\n", "perm", "=", "tf", ".", "reshape", "(", "perm", ",", "[", "-", "1", ",", "n_block", ",", "dim", "]", ")", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.util.batch_gather": [[28, 39], ["tensorflow.name_scope", "tensorflow.expand_dims", "tensorflow.range", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.gather_nd", "tensorflow.shape", "int", "indices.get_shape"], "function", ["None"], ["\n", "\n", "", "", "def", "batch_gather", "(", "values", ",", "indices", ")", ":", "\n", "    ", "\"\"\"Returns batched `tf.gather` for every row in the input.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'batch_gather'", ",", "values", "=", "[", "values", ",", "indices", "]", ")", ":", "\n", "        ", "idx", "=", "tf", ".", "expand_dims", "(", "indices", ",", "-", "1", ")", "\n", "size", "=", "tf", ".", "shape", "(", "indices", ")", "[", "0", "]", "\n", "blocks", "=", "tf", ".", "shape", "(", "indices", ")", "[", "1", "]", "\n", "\n", "rg", "=", "tf", ".", "range", "(", "size", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "rg", "=", "tf", ".", "reshape", "(", "rg", ",", "(", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "rg", "=", "tf", ".", "tile", "(", "rg", ",", "[", "1", ",", "int", "(", "indices", ".", "get_shape", "(", ")", "[", "1", "]", ")", ",", "int", "(", "indices", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.util.one_hot": [[41, 46], ["numpy.zeros"], "function", ["None"], ["\n", "bg", "=", "tf", ".", "range", "(", "blocks", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "bg", "=", "tf", ".", "reshape", "(", "bg", ",", "(", "1", ",", "-", "1", ",", "1", ")", ")", "\n", "bg", "=", "tf", ".", "tile", "(", "bg", ",", "[", "tf", ".", "shape", "(", "indices", ")", "[", "0", "]", ",", "1", ",", "int", "(", "indices", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "]", ")", "\n", "bg", "=", "tf", ".", "expand_dims", "(", "bg", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.util.reduce_prod": [[48, 60], ["tensorflow.name_scope", "tensorflow.cumprod", "tensorflow.range", "tensorflow.zeros", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.shape", "tensorflow.cast", "tensorflow.cast"], "function", ["None"], ["return", "tf", ".", "gather_nd", "(", "values", ",", "gidx", ")", "\n", "\n", "\n", "", "", "def", "one_hot", "(", "length", ",", "index", ")", ":", "\n", "    ", "\"\"\"Return an nd array of given `length` filled with 0s and a 1 at `index`.\"\"\"", "\n", "result", "=", "np", ".", "zeros", "(", "length", ")", "\n", "result", "[", "index", "]", "=", "1", "\n", "return", "result", "\n", "\n", "\n", "", "def", "reduce_prod", "(", "x", ",", "axis", ",", "name", "=", "None", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.taewonpark_DAM.DNC.util.layer_normalization": [[62, 79], ["tensorflow.nn.moments", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.sqrt", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "weights.get_shape", "weights.get_shape"], "function", ["None"], ["\n", "with", "tf", ".", "name_scope", "(", "name", ",", "'util_reduce_prod'", ",", "values", "=", "[", "x", "]", ")", ":", "\n", "        ", "cp", "=", "tf", ".", "cumprod", "(", "x", ",", "axis", ",", "reverse", "=", "True", ")", "\n", "size", "=", "tf", ".", "shape", "(", "cp", ")", "[", "0", "]", "\n", "idx1", "=", "tf", ".", "range", "(", "tf", ".", "cast", "(", "size", ",", "tf", ".", "float32", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "idx2", "=", "tf", ".", "zeros", "(", "[", "size", "]", ",", "tf", ".", "float32", ")", "\n", "indices", "=", "tf", ".", "stack", "(", "[", "idx1", ",", "idx2", "]", ",", "1", ")", "\n", "return", "tf", ".", "gather_nd", "(", "cp", ",", "tf", ".", "cast", "(", "indices", ",", "tf", ".", "int32", ")", ")", "\n", "\n", "\n", "", "", "def", "layer_normalization", "(", "weights", ",", "dtype", "=", "tf", ".", "float32", ",", "reuse", "=", "False", ",", "name", "=", "'layer_norm'", ")", ":", "\n", "    ", "_eps", "=", "1e-6", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'{}'", ".", "format", "(", "name", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "scale", "=", "tf", ".", "get_variable", "(", "'scale'", ",", "shape", "=", "[", "weights", ".", "get_shape", "(", ")", "[", "1", "]", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ",", "\n", "collections", "=", "[", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", "]", ",", "\n", "dtype", "=", "dtype", ")", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess.__init__": [[69, 103], ["sonnet.RNNCore.__init__", "model.DAM.addressing.CosineWeights", "model.DAM.addressing.CosineWeights", "model.DAM.addressing.Freeness", "access.MemoryAccess._bulid_var"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.__init__", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._bulid_var"], ["num_memory_block", "=", "2", ",", "\n", "memory_size", "=", "128", ",", "\n", "word_size", "=", "20", ",", "\n", "num_reads", "=", "1", ",", "\n", "num_writes", "=", "1", ",", "\n", "name", "=", "'memory_access'", ")", ":", "\n", "        ", "\"\"\"Creates a MemoryAccess module.\n\n        Args:\n          num_memory_block: The number of memory blocks.\n          memory_size: The number of memory slots (N in the DNC paper).\n          word_size: The width of each memory slot (W in the DNC paper)\n          num_reads: The number of read heads (R in the DNC paper).\n          num_writes: The number of write heads (fixed at 1 in the paper).\n          name: The name of the module.\n        \"\"\"", "\n", "super", "(", "MemoryAccess", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "_num_memory_block", "=", "num_memory_block", "\n", "self", ".", "_memory_size", "=", "memory_size", "\n", "self", ".", "_word_size", "=", "word_size", "\n", "self", ".", "_num_reads", "=", "num_reads", "\n", "self", ".", "_num_writes", "=", "num_writes", "\n", "\n", "self", ".", "_write_content_weights_mod", "=", "addressing", ".", "CosineWeights", "(", "\n", "num_writes", ",", "word_size", ",", "name", "=", "'write_content_weights'", ")", "\n", "self", ".", "_read_content_weights_mod", "=", "addressing", ".", "CosineWeights", "(", "\n", "num_reads", ",", "word_size", ",", "name", "=", "'read_content_weights'", ")", "\n", "\n", "self", ".", "_freeness", "=", "addressing", ".", "Freeness", "(", "num_memory_block", ",", "memory_size", ")", "\n", "\n", "self", ".", "_interface_size", ",", "self", ".", "_range_list", "=", "self", ".", "_bulid_var", "(", ")", "\n", "\n", "", "def", "_bulid_var", "(", "self", ")", ":", "\n", "        ", "parameter_size_list", "=", "[", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", "*", "self", ".", "_word_size", ",", "# write_vectors", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._bulid_var": [[104, 124], ["sum", "range_list.append"], "methods", ["None"], ["self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", "*", "self", ".", "_word_size", ",", "# erase_vectors", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_reads", ",", "# free_gate", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", ",", "# allocation_gate", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", ",", "# write_gate", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", "*", "self", ".", "_word_size", ",", "# write_keys", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_writes", ",", "# write_strengths", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_reads", "*", "self", ".", "_word_size", ",", "# read_keys", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_reads", ",", "# read_strengths", "\n", "self", ".", "_num_memory_block", "*", "self", ".", "_num_reads", "# which read vector", "\n", "]", "\n", "interface_size", "=", "sum", "(", "parameter_size_list", ")", "\n", "\n", "range_list", "=", "[", "0", "]", "\n", "for", "size", "in", "parameter_size_list", ":", "\n", "            ", "range_list", ".", "append", "(", "range_list", "[", "-", "1", "]", "+", "size", ")", "\n", "\n", "", "return", "interface_size", ",", "range_list", "\n", "\n", "", "def", "_build", "(", "self", ",", "inputs", ",", "prev_state", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._build": [[125, 169], ["access.MemoryAccess._read_inputs", "access.MemoryAccess._freeness", "access.MemoryAccess._write_weights", "access._erase_and_write", "access.MemoryAccess._read_weights", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.reduce_sum", "AccessState"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._read_inputs", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._write_weights", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access._erase_and_write", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._read_weights"], ["\n", "control", "=", "self", ".", "_read_inputs", "(", "inputs", ")", "\n", "\n", "# Update usage using inputs['free_gate'] and previous read & write weights.", "\n", "usage", "=", "self", ".", "_freeness", "(", "\n", "write_weights", "=", "prev_state", ".", "write_weights", ",", "\n", "free_gate", "=", "control", "[", "'free_gate'", "]", ",", "\n", "read_weights", "=", "prev_state", ".", "read_weights", ",", "\n", "prev_usage", "=", "prev_state", ".", "usage", ")", "\n", "\n", "# Write to memory.", "\n", "write_weights", "=", "self", ".", "_write_weights", "(", "control", ",", "prev_state", ".", "memory", ",", "usage", ")", "\n", "memory", "=", "_erase_and_write", "(", "\n", "prev_state", ".", "memory", ",", "\n", "address", "=", "write_weights", ",", "\n", "reset_weights", "=", "control", "[", "'erase_vectors'", "]", ",", "\n", "values", "=", "control", "[", "'write_vectors'", "]", ")", "\n", "\n", "# Read from memory.", "\n", "read_weights", "=", "self", ".", "_read_weights", "(", "\n", "control", ",", "\n", "memory", "=", "memory", ")", "\n", "read_weights", "=", "tf", ".", "multiply", "(", "read_weights", ",", "control", "[", "'attentive_gate'", "]", ")", "\n", "read_words", "=", "tf", ".", "matmul", "(", "read_weights", ",", "memory", ")", "\n", "read_words", "=", "tf", ".", "reduce_sum", "(", "read_words", ",", "axis", "=", "1", ")", "\n", "\n", "return", "(", "read_words", ",", "AccessState", "(", "\n", "memory", "=", "memory", ",", "\n", "read_weights", "=", "read_weights", ",", "\n", "write_weights", "=", "write_weights", ",", "\n", "usage", "=", "usage", ",", "\n", "attentive_gate", "=", "control", "[", "'attentive_gate'", "]", ")", ")", "\n", "\n", "", "def", "_read_inputs", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Applies transformations to `inputs` to get control for this module.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._read_inputs": [[170, 232], ["tensorflow.layers.dense", "access.MemoryAccess._read_inputs._alloc_2d"], "methods", ["None"], ["def", "_alloc_1d", "(", "input", ",", "num_memory_block", ",", "first_dim", ",", "name", ",", "activation", "=", "None", ")", ":", "\n", "            ", "vector", "=", "tf", ".", "reshape", "(", "input", ",", "[", "-", "1", ",", "num_memory_block", ",", "first_dim", "]", ",", "name", "=", "name", ")", "\n", "if", "activation", "is", "not", "None", ":", "\n", "                ", "vector", "=", "activation", "(", "vector", ",", "name", "=", "name", "+", "'_activation'", ")", "\n", "", "return", "vector", "\n", "\n", "", "def", "_alloc_2d", "(", "input", ",", "num_memory_block", ",", "first_dim", ",", "second_dim", ",", "name", ",", "activation", "=", "None", ")", ":", "\n", "            ", "vector", "=", "tf", ".", "reshape", "(", "input", ",", "[", "-", "1", ",", "num_memory_block", ",", "first_dim", ",", "second_dim", "]", ",", "name", "=", "name", ")", "\n", "if", "activation", "is", "not", "None", ":", "\n", "                ", "vector", "=", "activation", "(", "vector", ",", "name", "=", "name", "+", "'_activation'", ")", "\n", "", "return", "vector", "\n", "\n", "", "interface_vector", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "self", ".", "_interface_size", ",", "\n", "kernel_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "name", "=", "'interface_vector'", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "\n", "write_vectors", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "0", "]", ":", "self", ".", "_range_list", "[", "1", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "self", ".", "_word_size", ",", "'write_vectors'", ")", "\n", "\n", "erase_vectors", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "1", "]", ":", "self", ".", "_range_list", "[", "2", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "self", ".", "_word_size", ",", "'erase_vectors'", ",", "tf", ".", "sigmoid", ")", "\n", "\n", "free_gate", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "2", "]", ":", "self", ".", "_range_list", "[", "3", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "'free_gate'", ",", "tf", ".", "sigmoid", ")", "\n", "\n", "allocation_gate", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "3", "]", ":", "self", ".", "_range_list", "[", "4", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "'allocation_gate'", ",", "tf", ".", "sigmoid", ")", "\n", "\n", "write_gate", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "4", "]", ":", "self", ".", "_range_list", "[", "5", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "'write_gate'", ",", "tf", ".", "sigmoid", ")", "\n", "write_keys", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "5", "]", ":", "self", ".", "_range_list", "[", "6", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "self", ".", "_word_size", ",", "'write_keys'", ")", "\n", "write_strengths", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "6", "]", ":", "self", ".", "_range_list", "[", "7", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "'write_strengths'", ")", "\n", "\n", "read_keys", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "7", "]", ":", "self", ".", "_range_list", "[", "8", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "self", ".", "_word_size", ",", "'read_keys'", ")", "\n", "read_strengths", "=", "_alloc_1d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "8", "]", ":", "self", ".", "_range_list", "[", "9", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "'read_strengths'", ")", "\n", "\n", "attentive_gate", "=", "_alloc_2d", "(", "interface_vector", "[", ":", ",", "self", ".", "_range_list", "[", "9", "]", ":", "self", ".", "_range_list", "[", "10", "]", "]", ",", "\n", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "1", ",", "'attentive_gate'", ")", "\n", "\n", "result", "=", "{", "\n", "'read_content_keys'", ":", "read_keys", ",", "\n", "'read_content_strengths'", ":", "read_strengths", ",", "\n", "'write_content_keys'", ":", "write_keys", ",", "\n", "'write_content_strengths'", ":", "write_strengths", ",", "\n", "'write_vectors'", ":", "write_vectors", ",", "\n", "'erase_vectors'", ":", "erase_vectors", ",", "\n", "'free_gate'", ":", "free_gate", ",", "\n", "'allocation_gate'", ":", "allocation_gate", ",", "\n", "'write_gate'", ":", "write_gate", ",", "\n", "'attentive_gate'", ":", "tf", ".", "nn", ".", "softmax", "(", "attentive_gate", ",", "axis", "=", "1", ")", ",", "\n", "}", "\n", "\n", "return", "result", "\n", "\n", "", "def", "_write_weights", "(", "self", ",", "inputs", ",", "memory", ",", "usage", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._write_weights": [[233, 271], ["tensorflow.name_scope", "access.MemoryAccess._write_content_weights_mod", "access.MemoryAccess._freeness.write_allocation_weights", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness.write_allocation_weights"], ["\n", "with", "tf", ".", "name_scope", "(", "'write_weights'", ",", "values", "=", "[", "inputs", ",", "memory", ",", "usage", "]", ")", ":", "\n", "# c_t^{w, i} - The content-based weights for each write head.", "\n", "            ", "write_content_weights", "=", "self", ".", "_write_content_weights_mod", "(", "\n", "memory", ",", "inputs", "[", "'write_content_keys'", "]", ",", "\n", "inputs", "[", "'write_content_strengths'", "]", ")", "\n", "\n", "# a_t^i - The allocation weights for each write head.", "\n", "write_allocation_weights", "=", "self", ".", "_freeness", ".", "write_allocation_weights", "(", "\n", "usage", "=", "usage", ",", "\n", "write_gates", "=", "(", "inputs", "[", "'allocation_gate'", "]", "*", "inputs", "[", "'write_gate'", "]", ")", ",", "\n", "num_writes", "=", "self", ".", "_num_writes", ")", "\n", "\n", "# Expands gates over memory locations.", "\n", "allocation_gate", "=", "tf", ".", "expand_dims", "(", "inputs", "[", "'allocation_gate'", "]", ",", "-", "1", ")", "\n", "write_gate", "=", "tf", ".", "expand_dims", "(", "inputs", "[", "'write_gate'", "]", ",", "-", "1", ")", "\n", "\n", "# w_t^{w, i} - The write weightings for each write head.", "\n", "return", "write_gate", "*", "(", "allocation_gate", "*", "write_allocation_weights", "+", "\n", "(", "1", "-", "allocation_gate", ")", "*", "write_content_weights", ")", "\n", "\n", "", "", "def", "_read_weights", "(", "self", ",", "inputs", ",", "memory", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess._read_weights": [[272, 298], ["tensorflow.name_scope", "access.MemoryAccess._read_content_weights_mod"], "methods", ["None"], ["\n", "with", "tf", ".", "name_scope", "(", "\n", "'read_weights'", ",", "values", "=", "[", "inputs", ",", "memory", "]", ")", ":", "\n", "# c_t^{r, i} - The content weightings for each read head.", "\n", "            ", "read_weights", "=", "self", ".", "_read_content_weights_mod", "(", "\n", "memory", ",", "inputs", "[", "'read_content_keys'", "]", ",", "inputs", "[", "'read_content_strengths'", "]", ")", "\n", "\n", "return", "read_weights", "\n", "\n", "", "", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a tuple of the shape of the state tensors.\"\"\"", "\n", "return", "AccessState", "(", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess.state_size": [[299, 308], ["AccessState", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape"], "methods", ["None"], ["memory", "=", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_memory_block", ",", "self", ".", "_memory_size", ",", "self", ".", "_word_size", "]", ")", ",", "\n", "read_weights", "=", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "self", ".", "_memory_size", "]", ")", ",", "\n", "write_weights", "=", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_memory_block", ",", "self", ".", "_num_writes", ",", "self", ".", "_memory_size", "]", ")", ",", "\n", "usage", "=", "self", ".", "_freeness", ".", "state_size", ",", "\n", "attentive_gate", "=", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_memory_block", ",", "self", ".", "_num_reads", ",", "1", "]", ")", ")", "\n", "\n", "", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the output shape.\"\"\"", "\n", "return", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_reads", ",", "self", ".", "_word_size", "]", ")", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access.MemoryAccess.output_size": [[309, 313], ["tensorflow.TensorShape"], "methods", ["None"], ["", "", ""]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.access._erase_and_write": [[18, 51], ["tensorflow.name_scope", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.transpose", "model.DAM.util.reduce_prod", "tensorflow.name_scope", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.reduce_prod"], ["def", "_erase_and_write", "(", "memory", ",", "address", ",", "reset_weights", ",", "values", ")", ":", "\n", "    ", "\"\"\"Module to erase and write in the external memory.\n\n    Erase operation:\n      M_t'(i) = M_{t-1}(i) * (1 - w_t(i) * e_t)\n\n    Add operation:\n      M_t(i) = M_t'(i) + w_t(i) * a_t\n\n    where e are the reset_weights, w the write weights and a the values.\n\n    Args:\n      memory: 4-D tensor of shape `[batch_size, num_memory_blocks, memory_size, word_size]`.\n      address: 4-D tensor `[batch_size, num_memory_blocks, num_writes, memory_size]`.\n      reset_weights: 4-D tensor `[batch_size, num_memory_blocks, num_writes, word_size]`.\n      values: 4-D tensor `[batch_size, num_memory_blocks, num_writes, word_size]`.\n\n    Returns:\n      3-D tensor of shape `[batch_size, num_writes, word_size]`.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'erase_memory'", ",", "values", "=", "[", "memory", ",", "address", ",", "reset_weights", "]", ")", ":", "\n", "        ", "expand_address", "=", "tf", ".", "expand_dims", "(", "address", ",", "4", ")", "\n", "reset_weights", "=", "tf", ".", "expand_dims", "(", "reset_weights", ",", "3", ")", "\n", "weighted_resets", "=", "expand_address", "*", "reset_weights", "\n", "weighted_resets", "=", "tf", ".", "transpose", "(", "weighted_resets", ",", "[", "0", ",", "2", ",", "1", ",", "3", ",", "4", "]", ")", "\n", "reset_gate", "=", "util", ".", "reduce_prod", "(", "1", "-", "weighted_resets", ",", "1", ")", "\n", "memory", "*=", "reset_gate", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'additive_write'", ",", "values", "=", "[", "memory", ",", "address", ",", "values", "]", ")", ":", "\n", "        ", "add_matrix", "=", "tf", ".", "matmul", "(", "address", ",", "values", ",", "adjoint_a", "=", "True", ")", "\n", "memory", "+=", "add_matrix", "\n", "\n", "", "return", "memory", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.CosineWeights.__init__": [[46, 63], ["sonnet.AbstractModule.__init__"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_heads", ",", "\n", "word_size", ",", "\n", "strength_op", "=", "tf", ".", "nn", ".", "softplus", ",", "\n", "name", "=", "'cosine_weights'", ")", ":", "\n", "    ", "\"\"\"Initializes the CosineWeights module.\n\n    Args:\n      num_heads: number of memory heads.\n      word_size: memory word size.\n      strength_op: operation to apply to strengths (default is tf.nn.softplus).\n      name: module name (default 'cosine_weights')\n    \"\"\"", "\n", "super", "(", "CosineWeights", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "_num_heads", "=", "num_heads", "\n", "self", ".", "_word_size", "=", "word_size", "\n", "self", ".", "_strength_op", "=", "strength_op", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.CosineWeights._build": [[64, 87], ["tensorflow.matmul", "addressing._vector_norms", "addressing._vector_norms", "tensorflow.matmul", "addressing.weighted_softmax"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing._vector_norms", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing._vector_norms", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.weighted_softmax"], ["", "def", "_build", "(", "self", ",", "memory", ",", "keys", ",", "strengths", ")", ":", "\n", "    ", "\"\"\"Connects the CosineWeights module into the graph.\n\n    Args:\n      memory: A 4-D tensor of shape `[batch_size, num_memory_blocks, memory_size, word_size]`.\n      keys: A 4-D tensor of shape `[batch_size, num_memory_blocks, num_heads, word_size]`.\n      strengths: A 3-D tensor of shape `[batch_size, num_memory_blocks, num_heads]`.\n\n    Returns:\n      Weights tensor of shape `[batch_size, num_memory_blocks, num_heads, memory_size]`.\n    \"\"\"", "\n", "# Calculates the inner product between the query vector and words in memory.", "\n", "dot", "=", "tf", ".", "matmul", "(", "keys", ",", "memory", ",", "adjoint_b", "=", "True", ")", "\n", "\n", "# Outer product to compute denominator (euclidean norm of query and memory).", "\n", "memory_norms", "=", "_vector_norms", "(", "memory", ")", "\n", "key_norms", "=", "_vector_norms", "(", "keys", ")", "\n", "norm", "=", "tf", ".", "matmul", "(", "key_norms", ",", "memory_norms", ",", "adjoint_b", "=", "True", ")", "\n", "\n", "# Calculates cosine similarity between the query vector and words in memory.", "\n", "similarity", "=", "dot", "/", "(", "norm", "+", "_EPSILON", ")", "\n", "\n", "return", "weighted_softmax", "(", "similarity", ",", "strengths", ",", "self", ".", "_strength_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness.__init__": [[106, 116], ["sonnet.RNNCore.__init__"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.__init__"], ["def", "__init__", "(", "self", ",", "num_memory_block", ",", "memory_size", ",", "name", "=", "'freeness'", ")", ":", "\n", "    ", "\"\"\"Creates a Freeness module.\n\n    Args:\n      memory_size: Number of memory slots.\n      name: Name of the module.\n    \"\"\"", "\n", "super", "(", "Freeness", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "_num_memory_block", "=", "num_memory_block", "\n", "self", ".", "_memory_size", "=", "memory_size", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness._build": [[117, 144], ["tensorflow.stop_gradient", "addressing.Freeness._usage_after_write", "addressing.Freeness._usage_after_read"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness._usage_after_write", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness._usage_after_read"], ["", "def", "_build", "(", "self", ",", "write_weights", ",", "free_gate", ",", "read_weights", ",", "prev_usage", ")", ":", "\n", "    ", "\"\"\"Calculates the new memory usage u_t.\n\n    Memory that was written to in the previous time step will have its usage\n    increased; memory that was read from and the controller says can be \"freed\"\n    will have its usage decreased.\n\n    Args:\n      write_weights: tensor of shape `[batch_size, num_memory_blocks, num_writes,\n          memory_size]` giving write weights at previous time step.\n      free_gate: tensor of shape `[batch_size, num_memory_blocks, num_reads]` which indicates\n          which read heads read memory that can now be freed.\n      read_weights: tensor of shape `[batch_size, num_memory_blocks, num_reads,\n          memory_size]` giving read weights at previous time step.\n      prev_usage: tensor of shape `[batch_size, num_memory_blocks, memory_size]` giving\n          usage u_{t - 1} at the previous time step, with entries in range\n          [0, 1].\n\n    Returns:\n      tensor of shape `[batch_size, num_memory_blocks, memory_size]` representing updated memory\n      usage.\n    \"\"\"", "\n", "# Calculation of usage is not differentiable with respect to write weights.", "\n", "write_weights", "=", "tf", ".", "stop_gradient", "(", "write_weights", ")", "\n", "usage", "=", "self", ".", "_usage_after_write", "(", "prev_usage", ",", "write_weights", ")", "\n", "usage", "=", "self", ".", "_usage_after_read", "(", "usage", ",", "free_gate", ",", "read_weights", ")", "\n", "return", "usage", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness.write_allocation_weights": [[145, 179], ["tensorflow.name_scope", "tensorflow.expand_dims", "range", "tensorflow.stack", "allocation_weights.append", "addressing.Freeness._allocation"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness._allocation"], ["", "def", "write_allocation_weights", "(", "self", ",", "usage", ",", "write_gates", ",", "num_writes", ")", ":", "\n", "    ", "\"\"\"Calculates freeness-based locations for writing to.\n\n    This finds unused memory by ranking the memory locations by usage, for each\n    write head. (For more than one write head, we use a \"simulated new usage\"\n    which takes into account the fact that the previous write head will increase\n    the usage in that area of the memory.)\n\n    Args:\n      usage: A tensor of shape `[batch_size, num_memory_blocks, memory_size]` representing\n          current memory usage.\n      write_gates: A tensor of shape `[batch_size, num_memory_blocks, num_writes]` with values in\n          the range [0, 1] indicating how much each write head does writing\n          based on the address returned here (and hence how much usage\n          increases).\n      num_writes: The number of write heads to calculate write weights for.\n\n    Returns:\n      tensor of shape `[batch_size, num_memory_blocks, num_writes, memory_size]` containing the\n          freeness-based write locations. Note that this isn't scaled by\n          `write_gate`; this scaling must be applied externally.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'write_allocation_weights'", ")", ":", "\n", "# expand gatings over memory locations", "\n", "      ", "write_gates", "=", "tf", ".", "expand_dims", "(", "write_gates", ",", "-", "1", ")", "\n", "\n", "allocation_weights", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_writes", ")", ":", "\n", "        ", "allocation_weights", ".", "append", "(", "self", ".", "_allocation", "(", "usage", ")", ")", "\n", "# update usage to take into account writing to this new allocation", "\n", "usage", "+=", "(", "(", "1", "-", "usage", ")", "*", "write_gates", "[", ":", ",", "i", ",", ":", ",", ":", "]", "*", "allocation_weights", "[", "i", "]", ")", "\n", "\n", "# Pack the allocation weights for the write heads into one tensor.", "\n", "", "return", "tf", ".", "stack", "(", "allocation_weights", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness._usage_after_write": [[180, 195], ["tensorflow.name_scope", "tensorflow.transpose", "model.DAM.util.reduce_prod"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.reduce_prod"], ["", "", "def", "_usage_after_write", "(", "self", ",", "prev_usage", ",", "write_weights", ")", ":", "\n", "    ", "\"\"\"Calcualtes the new usage after writing to memory.\n\n    Args:\n      prev_usage: tensor of shape `[batch_size, num_memory_blocks, memory_size]`.\n      write_weights: tensor of shape `[batch_size, num_memory_blocks, num_writes, memory_size]`.\n\n    Returns:\n      New usage, a tensor of shape `[batch_size, num_memory_blocks, memory_size]`.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'usage_after_write'", ")", ":", "\n", "# Calculate the aggregated effect of all write heads", "\n", "      ", "write_weights", "=", "tf", ".", "transpose", "(", "write_weights", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "write_weights", "=", "1", "-", "util", ".", "reduce_prod", "(", "1", "-", "write_weights", ",", "1", ")", "\n", "return", "prev_usage", "+", "(", "1", "-", "prev_usage", ")", "*", "write_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness._usage_after_read": [[196, 215], ["tensorflow.name_scope", "tensorflow.expand_dims", "tensorflow.transpose", "model.DAM.util.reduce_prod"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.reduce_prod"], ["", "", "def", "_usage_after_read", "(", "self", ",", "prev_usage", ",", "free_gate", ",", "read_weights", ")", ":", "\n", "    ", "\"\"\"Calcualtes the new usage after reading and freeing from memory.\n\n    Args:\n      prev_usage: tensor of shape `[batch_size, num_memory_blocks, memory_size]`.\n      free_gate: tensor of shape `[batch_size, num_memory_blocks, num_reads]` with entries in the\n          range [0, 1] indicating the amount that locations read from can be\n          freed.\n      read_weights: tensor of shape `[batch_size, num_memory_blocks, num_reads, memory_size]`.\n\n    Returns:\n      New usage, a tensor of shape `[batch_size, num_memory_blocks, memory_size]`.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'usage_after_read'", ")", ":", "\n", "      ", "free_gate", "=", "tf", ".", "expand_dims", "(", "free_gate", ",", "-", "1", ")", "\n", "free_read_weights", "=", "free_gate", "*", "read_weights", "\n", "free_read_weights", "=", "tf", ".", "transpose", "(", "free_read_weights", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "phi", "=", "util", ".", "reduce_prod", "(", "1", "-", "free_read_weights", ",", "1", ",", "name", "=", "'phi'", ")", "\n", "return", "prev_usage", "*", "phi", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness._allocation": [[216, 246], ["tensorflow.name_scope", "tensorflow.nn.top_k", "tensorflow.cumprod", "model.DAM.util.batch_invert_permutation", "model.DAM.util.batch_gather"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.batch_invert_permutation", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.batch_gather"], ["", "", "def", "_allocation", "(", "self", ",", "usage", ")", ":", "\n", "    ", "r\"\"\"Computes allocation by sorting `usage`.\n\n    This corresponds to the value a = a_t[\\phi_t[j]] in the paper.\n\n    Args:\n      usage: tensor of shape `[batch_size, num_memory_blocks, memory_size]` indicating current\n          memory usage. This is equal to u_t in the paper when we only have one\n          write head, but for multiple write heads, one should update the usage\n          while iterating through the write heads to take into account the\n          allocation returned by this function.\n\n    Returns:\n      Tensor of shape `[batch_size, num_memory_blocks, memory_size]` corresponding to allocation.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'allocation'", ")", ":", "\n", "# Ensure values are not too small prior to cumprod.", "\n", "      ", "usage", "=", "_EPSILON", "+", "(", "1", "-", "_EPSILON", ")", "*", "usage", "\n", "\n", "nonusage", "=", "1", "-", "usage", "\n", "sorted_nonusage", ",", "indices", "=", "tf", ".", "nn", ".", "top_k", "(", "\n", "nonusage", ",", "k", "=", "self", ".", "_memory_size", ",", "name", "=", "'sort'", ")", "\n", "sorted_usage", "=", "1", "-", "sorted_nonusage", "\n", "prod_sorted_usage", "=", "tf", ".", "cumprod", "(", "sorted_usage", ",", "axis", "=", "2", ",", "exclusive", "=", "True", ")", "\n", "sorted_allocation", "=", "sorted_nonusage", "*", "prod_sorted_usage", "\n", "inverse_indices", "=", "util", ".", "batch_invert_permutation", "(", "indices", ")", "\n", "\n", "# This final line \"unsorts\" sorted_allocation, so that the indexing", "\n", "# corresponds to the original indexing of `usage`.", "\n", "return", "util", ".", "batch_gather", "(", "sorted_allocation", ",", "inverse_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.Freeness.state_size": [[247, 251], ["tensorflow.TensorShape"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns the shape of the state tensor.\"\"\"", "\n", "return", "tf", ".", "TensorShape", "(", "[", "self", ".", "_num_memory_block", ",", "self", ".", "_memory_size", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing._vector_norms": [[16, 19], ["tensorflow.reduce_sum", "tensorflow.sqrt"], "function", ["None"], ["def", "_vector_norms", "(", "m", ")", ":", "\n", "  ", "squared_norms", "=", "tf", ".", "reduce_sum", "(", "m", "*", "m", ",", "axis", "=", "3", ",", "keepdims", "=", "True", ")", "\n", "return", "tf", ".", "sqrt", "(", "squared_norms", "+", "_EPSILON", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.addressing.weighted_softmax": [[21, 37], ["tensorflow.expand_dims", "tensorflow.nn.softmax", "strengths_op"], "function", ["None"], ["", "def", "weighted_softmax", "(", "activations", ",", "strengths", ",", "strengths_op", ")", ":", "\n", "  ", "\"\"\"Returns softmax over activations multiplied by positive strengths.\n\n  Args:\n    activations: A tensor of shape `[batch_size, num_memory_blocks, num_heads, memory_size]`, of\n      activations to be transformed. Softmax is taken over the last dimension.\n    strengths: A tensor of shape `[batch_size, num_memory_blocks, num_heads]` containing strengths to\n      multiply by the activations prior to the softmax.\n    strengths_op: An operation to transform strengths before softmax.\n\n  Returns:\n    A tensor of same shape as `activations` with weighted softmax applied.\n  \"\"\"", "\n", "transformed_strengths", "=", "tf", ".", "expand_dims", "(", "strengths_op", "(", "strengths", ")", ",", "axis", "=", "-", "1", ")", "\n", "sharp_activations", "=", "activations", "*", "transformed_strengths", "\n", "return", "tf", ".", "nn", ".", "softmax", "(", "sharp_activations", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.batch_invert_permutation": [[11, 28], ["tensorflow.name_scope", "tensorflow.cast", "int", "int", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.range", "tensorflow.reshape", "tensorflow.tile", "tensorflow.add", "tensorflow.reshape", "tensorflow.invert_permutation", "tensorflow.reshape", "tensorflow.subtract", "tensorflow.cast", "tensorflow.cast", "tf.reshape.get_shape", "tf.reshape.get_shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["def", "batch_invert_permutation", "(", "permutations", ")", ":", "\n", "    ", "\"\"\"Returns batched `tf.invert_permutation` for every row in `permutations`.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'batch_invert_permutation'", ",", "values", "=", "[", "permutations", "]", ")", ":", "\n", "        ", "perm", "=", "tf", ".", "cast", "(", "permutations", ",", "tf", ".", "float32", ")", "\n", "dim", "=", "int", "(", "perm", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "\n", "n_block", "=", "int", "(", "perm", ".", "get_shape", "(", ")", "[", "1", "]", ")", "\n", "size", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "perm", ")", "[", "0", "]", ",", "tf", ".", "float32", ")", "\n", "blocks", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "perm", ")", "[", "1", "]", ",", "tf", ".", "float32", ")", "\n", "delta", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "perm", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "\n", "rg", "=", "tf", ".", "range", "(", "0", ",", "size", "*", "blocks", "*", "delta", ",", "delta", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "rg", "=", "tf", ".", "reshape", "(", "rg", ",", "[", "-", "1", ",", "n_block", ",", "1", "]", ")", "\n", "rg", "=", "tf", ".", "tile", "(", "rg", ",", "[", "1", ",", "1", ",", "dim", "]", ")", "\n", "perm", "=", "tf", ".", "add", "(", "perm", ",", "rg", ")", "\n", "flat", "=", "tf", ".", "reshape", "(", "perm", ",", "[", "-", "1", "]", ")", "\n", "perm", "=", "tf", ".", "invert_permutation", "(", "tf", ".", "cast", "(", "flat", ",", "tf", ".", "int32", ")", ")", "\n", "perm", "=", "tf", ".", "reshape", "(", "perm", ",", "[", "-", "1", ",", "n_block", ",", "dim", "]", ")", "\n", "return", "tf", ".", "subtract", "(", "perm", ",", "tf", ".", "cast", "(", "rg", ",", "tf", ".", "int32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.batch_gather": [[30, 49], ["tensorflow.name_scope", "tensorflow.expand_dims", "tensorflow.range", "tensorflow.reshape", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.range", "tensorflow.reshape", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.gather_nd", "tensorflow.shape", "tensorflow.shape", "int", "int", "int", "int", "indices.get_shape", "indices.get_shape", "indices.get_shape", "indices.get_shape"], "function", ["None"], ["", "", "def", "batch_gather", "(", "values", ",", "indices", ")", ":", "\n", "    ", "\"\"\"Returns batched `tf.gather` for every row in the input.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'batch_gather'", ",", "values", "=", "[", "values", ",", "indices", "]", ")", ":", "\n", "        ", "idx", "=", "tf", ".", "expand_dims", "(", "indices", ",", "-", "1", ")", "\n", "size", "=", "tf", ".", "shape", "(", "indices", ")", "[", "0", "]", "\n", "blocks", "=", "tf", ".", "shape", "(", "indices", ")", "[", "1", "]", "\n", "\n", "rg", "=", "tf", ".", "range", "(", "size", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "rg", "=", "tf", ".", "reshape", "(", "rg", ",", "(", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "rg", "=", "tf", ".", "tile", "(", "rg", ",", "[", "1", ",", "int", "(", "indices", ".", "get_shape", "(", ")", "[", "1", "]", ")", ",", "int", "(", "indices", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "]", ")", "\n", "rg", "=", "tf", ".", "expand_dims", "(", "rg", ",", "-", "1", ")", "\n", "\n", "bg", "=", "tf", ".", "range", "(", "blocks", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "bg", "=", "tf", ".", "reshape", "(", "bg", ",", "(", "1", ",", "-", "1", ",", "1", ")", ")", "\n", "bg", "=", "tf", ".", "tile", "(", "bg", ",", "[", "tf", ".", "shape", "(", "indices", ")", "[", "0", "]", ",", "1", ",", "int", "(", "indices", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "]", ")", "\n", "bg", "=", "tf", ".", "expand_dims", "(", "bg", ",", "-", "1", ")", "\n", "\n", "gidx", "=", "tf", ".", "concat", "(", "[", "rg", ",", "bg", ",", "idx", "]", ",", "-", "1", ")", "\n", "return", "tf", ".", "gather_nd", "(", "values", ",", "gidx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.one_hot": [[51, 56], ["numpy.zeros"], "function", ["None"], ["", "", "def", "one_hot", "(", "length", ",", "index", ")", ":", "\n", "    ", "\"\"\"Return an nd array of given `length` filled with 0s and a 1 at `index`.\"\"\"", "\n", "result", "=", "np", ".", "zeros", "(", "length", ")", "\n", "result", "[", "index", "]", "=", "1", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.reduce_prod": [[58, 70], ["tensorflow.name_scope", "tensorflow.cumprod", "tensorflow.range", "tensorflow.zeros", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.shape", "tensorflow.cast", "tensorflow.cast"], "function", ["None"], ["", "def", "reduce_prod", "(", "x", ",", "axis", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Efficient reduce product over axis.\n\n    Uses tf.cumprod and tf.gather_nd as a workaround to the poor performance of calculating tf.reduce_prod's gradient on CPU.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ",", "'util_reduce_prod'", ",", "values", "=", "[", "x", "]", ")", ":", "\n", "        ", "cp", "=", "tf", ".", "cumprod", "(", "x", ",", "axis", ",", "reverse", "=", "True", ")", "\n", "size", "=", "tf", ".", "shape", "(", "cp", ")", "[", "0", "]", "\n", "idx1", "=", "tf", ".", "range", "(", "tf", ".", "cast", "(", "size", ",", "tf", ".", "float32", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "idx2", "=", "tf", ".", "zeros", "(", "[", "size", "]", ",", "tf", ".", "float32", ")", "\n", "indices", "=", "tf", ".", "stack", "(", "[", "idx1", ",", "idx2", "]", ",", "1", ")", "\n", "return", "tf", ".", "gather_nd", "(", "cp", ",", "tf", ".", "cast", "(", "indices", ",", "tf", ".", "int32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.layer_normalization": [[72, 89], ["tensorflow.nn.moments", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.sqrt", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "weights.get_shape", "weights.get_shape"], "function", ["None"], ["", "", "def", "layer_normalization", "(", "weights", ",", "dtype", "=", "tf", ".", "float32", ",", "reuse", "=", "False", ",", "name", "=", "'layer_norm'", ")", ":", "\n", "    ", "_eps", "=", "1e-6", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'{}'", ".", "format", "(", "name", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "scale", "=", "tf", ".", "get_variable", "(", "'scale'", ",", "shape", "=", "[", "weights", ".", "get_shape", "(", ")", "[", "1", "]", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ",", "\n", "collections", "=", "[", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", "]", ",", "\n", "dtype", "=", "dtype", ")", "\n", "beta", "=", "tf", ".", "get_variable", "(", "'beta'", ",", "shape", "=", "[", "weights", ".", "get_shape", "(", ")", "[", "1", "]", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ",", "\n", "collections", "=", "[", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", "]", ",", "\n", "dtype", "=", "dtype", ")", "\n", "\n", "", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "weights", ",", "axes", "=", "[", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "norm_weights", "=", "(", "weights", "-", "mean", ")", "/", "tf", ".", "sqrt", "(", "var", "+", "_eps", ")", "\n", "\n", "return", "norm_weights", "*", "scale", "+", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.clip_if_enabled": [[91, 96], ["tensorflow.clip_by_value"], "function", ["None"], []], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.__init__": [[29, 70], ["sonnet.RNNCore.__init__", "numpy.prod", "tensorflow.TensorShape", "DAMState", "dam.DAM._enter_variable_scope", "sonnet.LSTM", "model.DAM.access.MemoryAccess", "dam.DAM._access.output_size.as_list", "other_config.keys", "other_config.keys"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.__init__"], ["def", "__init__", "(", "self", ",", "\n", "access_config", ",", "\n", "controller_config", ",", "\n", "other_config", ",", "\n", "output_size", ",", "\n", "clip_value", "=", "None", ",", "\n", "name", "=", "'DAM'", ")", ":", "\n", "        ", "\"\"\"Initializes the DAM core.\n\n        Args:\n          access_config: dictionary of access module configurations.\n          controller_config: dictionary of controller (LSTM) module configurations.\n          output_size: output dimension size of core.\n          clip_value: clips controller and core output values to between\n              `[-clip_value, clip_value]` if specified.\n          name: module name (default 'DAM').\n\n        Raises:\n          TypeError: if direct_input_size is not None for any access module other\n            than KeyValueMemory.\n        \"\"\"", "\n", "super", "(", "DAM", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n", "with", "self", ".", "_enter_variable_scope", "(", ")", ":", "\n", "            ", "self", ".", "_controller", "=", "snt", ".", "LSTM", "(", "**", "controller_config", ")", "\n", "self", ".", "_access", "=", "access", ".", "MemoryAccess", "(", "num_memory_block", "=", "other_config", "[", "'num_memory_block'", "]", ",", "**", "access_config", ")", "\n", "\n", "", "self", ".", "_access_output_size", "=", "np", ".", "prod", "(", "self", ".", "_access", ".", "output_size", ".", "as_list", "(", ")", ")", "\n", "self", ".", "_output_size", "=", "output_size", "\n", "self", ".", "_clip_value", "=", "clip_value", "or", "0", "\n", "\n", "self", ".", "_act_fn_list", "=", "other_config", "[", "'act_fn_list'", "]", "if", "'act_fn_list'", "in", "other_config", ".", "keys", "(", ")", "else", "[", "]", "\n", "self", ".", "_layer_size_list", "=", "other_config", "[", "'layer_size_list'", "]", "if", "'act_fn_list'", "in", "other_config", ".", "keys", "(", ")", "else", "[", "]", "\n", "\n", "self", ".", "_keep_prob", "=", "other_config", "[", "'keep_prob'", "]", "\n", "\n", "self", ".", "_output_size", "=", "tf", ".", "TensorShape", "(", "[", "output_size", "]", ")", "\n", "self", ".", "_state_size", "=", "DAMState", "(", "\n", "access_output", "=", "self", ".", "_access_output_size", ",", "\n", "access_state", "=", "self", ".", "_access", ".", "state_size", ",", "\n", "controller_state", "=", "self", ".", "_controller", ".", "state_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM._clip_if_enabled": [[71, 76], ["tensorflow.clip_by_value"], "methods", ["None"], ["", "def", "_clip_if_enabled", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "_clip_value", ">", "0", ":", "\n", "            ", "return", "tf", ".", "clip_by_value", "(", "x", ",", "-", "self", ".", "_clip_value", ",", "self", ".", "_clip_value", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM._build": [[77, 133], ["sonnet.BatchFlatten", "tensorflow.concat", "dam.DAM._controller", "dam.DAM._clip_if_enabled", "tensorflow.contrib.framework.nest.map_structure", "model.DAM.util.layer_normalization", "dam.DAM._access", "tensorflow.nn.dropout", "tensorflow.concat", "enumerate", "dam.DAM._clip_if_enabled", "zip", "tensorflow.layers.dense", "sonnet.Linear", "DAMState", "sonnet.BatchFlatten.", "sonnet.BatchFlatten.", "sonnet.BatchFlatten.", "tensorflow.contrib.layers.xavier_initializer", "str", "dam.DAM._output_size.as_list"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM._clip_if_enabled", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.util.layer_normalization", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM._clip_if_enabled"], ["", "", "def", "_build", "(", "self", ",", "inputs", ",", "prev_state", ")", ":", "\n", "        ", "\"\"\"Connects the DAM core into the graph.\n\n        Args:\n          inputs: Tensor input.\n          prev_state: A `DAMState` tuple containing the fields `access_output`,\n              `access_state` and `controller_state`. `access_state` is a 3-D Tensor\n              of shape `[batch_size, num_reads, word_size]` containing read words.\n              `access_state` is a tuple of the access module's state, and\n              `controller_state` is a tuple of controller module's state.\n\n        Returns:\n          A tuple `(output, next_state)` where `output` is a tensor and `next_state`\n          is a `DAMState` tuple containing the fields `access_output`,\n          `access_state`, and `controller_state`.\n        \"\"\"", "\n", "\n", "prev_access_output", "=", "prev_state", ".", "access_output", "\n", "prev_access_state", "=", "prev_state", ".", "access_state", "\n", "prev_controller_state", "=", "prev_state", ".", "controller_state", "\n", "\n", "batch_flatten", "=", "snt", ".", "BatchFlatten", "(", ")", "\n", "controller_input", "=", "tf", ".", "concat", "(", "\n", "[", "batch_flatten", "(", "inputs", ")", ",", "batch_flatten", "(", "prev_access_output", ")", "]", ",", "1", ")", "\n", "\n", "controller_output", ",", "controller_state", "=", "self", ".", "_controller", "(", "\n", "controller_input", ",", "prev_controller_state", ")", "\n", "\n", "controller_output", "=", "self", ".", "_clip_if_enabled", "(", "controller_output", ")", "\n", "controller_state", "=", "tf", ".", "contrib", ".", "framework", ".", "nest", ".", "map_structure", "(", "self", ".", "_clip_if_enabled", ",", "controller_state", ")", "\n", "\n", "controller_output", "=", "layer_normalization", "(", "controller_output", ")", "\n", "\n", "access_output", ",", "access_state", "=", "self", ".", "_access", "(", "controller_output", ",", "\n", "prev_access_state", ")", "\n", "\n", "controller_output", "=", "tf", ".", "nn", ".", "dropout", "(", "controller_output", ",", "self", ".", "_keep_prob", ")", "\n", "\n", "output", "=", "tf", ".", "concat", "(", "[", "controller_output", ",", "batch_flatten", "(", "access_output", ")", "]", ",", "1", ")", "\n", "\n", "for", "i", ",", "(", "act_fn", ",", "size", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "_act_fn_list", ",", "self", ".", "_layer_size_list", ")", ")", ":", "\n", "            ", "output", "=", "tf", ".", "layers", ".", "dense", "(", "output", ",", "size", ",", "\n", "activation", "=", "act_fn", ",", "\n", "kernel_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "name", "=", "'projection_'", "+", "str", "(", "i", ")", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "\n", "", "output", "=", "snt", ".", "Linear", "(", "\n", "output_size", "=", "self", ".", "_output_size", ".", "as_list", "(", ")", "[", "0", "]", ",", "\n", "name", "=", "'output_linear'", ")", "(", "output", ")", "\n", "output", "=", "self", ".", "_clip_if_enabled", "(", "output", ")", "\n", "\n", "return", "output", ",", "DAMState", "(", "\n", "access_output", "=", "access_output", ",", "\n", "access_state", "=", "access_state", ",", "\n", "controller_state", "=", "controller_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.initial_state": [[134, 140], ["DAMState", "dam.DAM._controller.initial_state", "dam.DAM._access.initial_state", "tensorflow.zeros", "dam.DAM._access.output_size.as_list"], "methods", ["home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.initial_state", "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.initial_state"], ["", "def", "initial_state", "(", "self", ",", "batch_size", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "        ", "return", "DAMState", "(", "\n", "controller_state", "=", "self", ".", "_controller", ".", "initial_state", "(", "batch_size", ",", "dtype", ")", ",", "\n", "access_state", "=", "self", ".", "_access", ".", "initial_state", "(", "batch_size", ",", "dtype", ")", ",", "\n", "access_output", "=", "tf", ".", "zeros", "(", "\n", "[", "batch_size", "]", "+", "self", ".", "_access", ".", "output_size", ".", "as_list", "(", ")", ",", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.state_size": [[141, 144], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.taewonpark_DAM.DAM.dam.DAM.output_size": [[145, 148], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_size", "\n", "", "", ""]]}