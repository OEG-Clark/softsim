{"home.repos.pwc.inspect_result.skyesong38_cswintt.utils.modelsize_estimate.modelsize": [[6, 38], ["sum", "print", "input.clone", "input.clone.requires_grad_", "list", "range", "range", "print", "print", "model.modules", "len", "isinstance", "m", "out_sizes.append", "len", "numpy.prod", "numpy.prod", "model._get_name", "numpy.array", "numpy.array", "model._get_name", "model._get_name", "list", "model.parameters", "m.size", "p.size"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.parameter.cswintt.parameters"], ["def", "modelsize", "(", "model", ",", "input", ",", "type_size", "=", "4", ")", ":", "\n", "    ", "para", "=", "sum", "(", "[", "np", ".", "prod", "(", "list", "(", "p", ".", "size", "(", ")", ")", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "# print('Model {} : Number of params: {}'.format(model._get_name(), para))", "\n", "print", "(", "'Model {} : params: {:4f}M'", ".", "format", "(", "model", ".", "_get_name", "(", ")", ",", "para", "*", "type_size", "/", "1000", "/", "1000", ")", ")", "\n", "\n", "input_", "=", "input", ".", "clone", "(", ")", "\n", "input_", ".", "requires_grad_", "(", "requires_grad", "=", "False", ")", "\n", "\n", "mods", "=", "list", "(", "model", ".", "modules", "(", ")", ")", "\n", "out_sizes", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "mods", ")", ")", ":", "\n", "        ", "m", "=", "mods", "[", "i", "]", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "ReLU", ")", ":", "\n", "            ", "if", "m", ".", "inplace", ":", "\n", "                ", "continue", "\n", "", "", "out", "=", "m", "(", "input_", ")", "\n", "out_sizes", ".", "append", "(", "np", ".", "array", "(", "out", ".", "size", "(", ")", ")", ")", "\n", "input_", "=", "out", "\n", "\n", "", "total_nums", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "out_sizes", ")", ")", ":", "\n", "        ", "s", "=", "out_sizes", "[", "i", "]", "\n", "nums", "=", "np", ".", "prod", "(", "np", ".", "array", "(", "s", ")", ")", "\n", "total_nums", "+=", "nums", "\n", "\n", "# print('Model {} : Number of intermedite variables without backward: {}'.format(model._get_name(), total_nums))", "\n", "# print('Model {} : Number of intermedite variables with backward: {}'.format(model._get_name(), total_nums*2))", "\n", "", "print", "(", "'Model {} : intermedite variables: {:3f} M (without backward)'", "\n", ".", "format", "(", "model", ".", "_get_name", "(", ")", ",", "total_nums", "*", "type_size", "/", "1000", "/", "1000", ")", ")", "\n", "print", "(", "'Model {} : intermedite variables: {:3f} M (with backward)'", "\n", ".", "format", "(", "model", ".", "_get_name", "(", ")", ",", "total_nums", "*", "type_size", "*", "2", "/", "1000", "/", "1000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.xcorr.xcorr_slow": [[12, 26], ["range", "torch.cat", "torch.cat", "x.size", "px.view.view", "pk.view.view", "torch.conv2d", "torch.cat.append", "px.view.size", "px.view.size", "pk.view.size", "pk.view.size"], "function", ["None"], ["def", "xcorr_slow", "(", "x", ",", "kernel", ")", ":", "\n", "\t", "\"\"\"for loop to calculate cross correlation, slow version\n\t\"\"\"", "\n", "batch", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "\t\t", "px", "=", "x", "[", "i", "]", "\n", "pk", "=", "kernel", "[", "i", "]", "\n", "px", "=", "px", ".", "view", "(", "1", ",", "-", "1", ",", "px", ".", "size", "(", ")", "[", "1", "]", ",", "px", ".", "size", "(", ")", "[", "2", "]", ")", "\n", "pk", "=", "pk", ".", "view", "(", "1", ",", "-", "1", ",", "pk", ".", "size", "(", ")", "[", "1", "]", ",", "pk", ".", "size", "(", ")", "[", "2", "]", ")", "\n", "po", "=", "F", ".", "conv2d", "(", "px", ",", "pk", ")", "\n", "out", ".", "append", "(", "po", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "out", ",", "0", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.xcorr.xcorr_fast": [[28, 37], ["kernel.view", "x.view", "torch.conv2d", "po.view.view", "kernel.size", "x.size", "kernel.size", "kernel.size", "x.size", "x.size", "po.view.size", "po.view.size"], "function", ["None"], ["", "def", "xcorr_fast", "(", "x", ",", "kernel", ")", ":", "\n", "\t", "\"\"\"group conv2d to calculate cross correlation, fast version\n\t\"\"\"", "\n", "batch", "=", "kernel", ".", "size", "(", ")", "[", "0", "]", "\n", "pk", "=", "kernel", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", ")", "[", "1", "]", ",", "kernel", ".", "size", "(", ")", "[", "2", "]", ",", "kernel", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "px", "=", "x", ".", "view", "(", "1", ",", "-", "1", ",", "x", ".", "size", "(", ")", "[", "2", "]", ",", "x", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "po", "=", "F", ".", "conv2d", "(", "px", ",", "pk", ",", "groups", "=", "batch", ")", "\n", "po", "=", "po", ".", "view", "(", "batch", ",", "-", "1", ",", "po", ".", "size", "(", ")", "[", "2", "]", ",", "po", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "return", "po", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.xcorr.xcorr_depthwise": [[39, 49], ["kernel.view.size", "kernel.view.size", "x.view.view", "kernel.view.view", "torch.conv2d", "out.view.view", "x.view.size", "x.view.size", "kernel.view.size", "kernel.view.size", "out.view.size", "out.view.size"], "function", ["None"], ["", "def", "xcorr_depthwise", "(", "x", ",", "kernel", ")", ":", "\n", "\t", "\"\"\"depthwise cross correlation\n\t\"\"\"", "\n", "batch", "=", "kernel", ".", "size", "(", "0", ")", "\n", "channel", "=", "kernel", ".", "size", "(", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "batch", "*", "channel", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "kernel", "=", "kernel", ".", "view", "(", "batch", "*", "channel", ",", "1", ",", "kernel", ".", "size", "(", "2", ")", ",", "kernel", ".", "size", "(", "3", ")", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "x", ",", "kernel", ",", "groups", "=", "batch", "*", "channel", ")", "\n", "out", "=", "out", ".", "view", "(", "batch", ",", "channel", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ")", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.__init__": [[46, 53], ["set", "datetime.datetime.now"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "detail", "=", "True", ",", "path", "=", "''", ",", "verbose", "=", "False", ",", "device", "=", "0", ")", ":", "\n", "        ", "self", ".", "print_detail", "=", "detail", "\n", "self", ".", "last_tensor_sizes", "=", "set", "(", ")", "\n", "self", ".", "gpu_profile_fn", "=", "path", "+", "f'{datetime.datetime.now():%d-%b-%y-%H:%M:%S}-gpu_mem_track.txt'", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "begin", "=", "True", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.get_tensors": [[54, 66], ["gc.get_objects", "torch.is_tensor", "hasattr", "torch.is_tensor", "print"], "methods", ["None"], ["", "def", "get_tensors", "(", "self", ")", ":", "\n", "        ", "for", "obj", "in", "gc", ".", "get_objects", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "torch", ".", "is_tensor", "(", "obj", ")", "or", "(", "hasattr", "(", "obj", ",", "'data'", ")", "and", "torch", ".", "is_tensor", "(", "obj", ".", "data", ")", ")", ":", "\n", "                    ", "tensor", "=", "obj", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "if", "tensor", ".", "is_cuda", ":", "\n", "                    ", "yield", "tensor", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "if", "self", ".", "verbose", ":", "\n", "                    ", "print", "(", "'A trivial exception occured: {}'", ".", "format", "(", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.get_tensor_usage": [[67, 70], ["numpy.sum", "numpy.prod", "gpu_mem_track.get_mem_space", "gpu_mem_track.MemTracker.get_tensors", "numpy.array", "tensor.size"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.get_mem_space", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.get_tensors"], ["", "", "", "", "def", "get_tensor_usage", "(", "self", ")", ":", "\n", "        ", "sizes", "=", "[", "np", ".", "prod", "(", "np", ".", "array", "(", "tensor", ".", "size", "(", ")", ")", ")", "*", "get_mem_space", "(", "tensor", ".", "dtype", ")", "for", "tensor", "in", "self", ".", "get_tensors", "(", ")", "]", "\n", "return", "np", ".", "sum", "(", "sizes", ")", "/", "1024", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.get_allocate_usage": [[71, 73], ["torch.cuda.memory_allocated"], "methods", ["None"], ["", "def", "get_allocate_usage", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "cuda", ".", "memory_allocated", "(", ")", "/", "1024", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.clear_cache": [[74, 77], ["gc.collect", "torch.cuda.empty_cache"], "methods", ["None"], ["", "def", "clear_cache", "(", "self", ")", ":", "\n", "        ", "gc", ".", "collect", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.print_all_gpu_tensor": [[78, 81], ["gpu_mem_track.MemTracker.get_tensors", "print", "x.size", "numpy.prod", "gpu_mem_track.get_mem_space", "numpy.array", "x.size"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.get_tensors", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.get_mem_space"], ["", "def", "print_all_gpu_tensor", "(", "self", ",", "file", "=", "None", ")", ":", "\n", "        ", "for", "x", "in", "self", ".", "get_tensors", "(", ")", ":", "\n", "            ", "print", "(", "x", ".", "size", "(", ")", ",", "x", ".", "dtype", ",", "np", ".", "prod", "(", "np", ".", "array", "(", "x", ".", "size", "(", ")", ")", ")", "*", "get_mem_space", "(", "x", ".", "dtype", ")", "/", "1024", "**", "2", ",", "file", "=", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.track": [[82, 112], ["inspect.stack", "open", "f.write", "f.write", "str", "f.write", "f.write", "tensor.size", "gpu_mem_track.MemTracker.get_tensors", "type", "tuple", "ts_list.count", "gpu_mem_track.MemTracker.get_tensors", "gpu_mem_track.MemTracker.get_tensor_usage", "gpu_mem_track.MemTracker.get_allocate_usage", "datetime.datetime.now", "gpu_mem_track.MemTracker.get_tensor_usage", "gpu_mem_track.MemTracker.get_allocate_usage", "x.size", "x.size", "numpy.prod", "gpu_mem_track.get_mem_space", "str", "str", "str", "str", "str", "str", "numpy.array", "str", "str", "x.size"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.get_tensors", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.get_tensors", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.get_tensor_usage", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.get_allocate_usage", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.get_tensor_usage", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.MemTracker.get_allocate_usage", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.get_mem_space"], ["", "", "def", "track", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Track the GPU memory usage\n        \"\"\"", "\n", "frameinfo", "=", "inspect", ".", "stack", "(", ")", "[", "1", "]", "\n", "where_str", "=", "frameinfo", ".", "filename", "+", "' line '", "+", "str", "(", "frameinfo", ".", "lineno", ")", "+", "': '", "+", "frameinfo", ".", "function", "\n", "\n", "with", "open", "(", "self", ".", "gpu_profile_fn", ",", "'a+'", ")", "as", "f", ":", "\n", "\n", "            ", "if", "self", ".", "begin", ":", "\n", "                ", "f", ".", "write", "(", "f\"GPU Memory Track | {datetime.datetime.now():%d-%b-%y-%H:%M:%S} |\"", "\n", "f\" Total Tensor Used Memory:{self.get_tensor_usage():<7.1f}Mb\"", "\n", "f\" Total Allocated Memory:{self.get_allocate_usage():<7.1f}Mb\\n\\n\"", ")", "\n", "self", ".", "begin", "=", "False", "\n", "\n", "", "if", "self", ".", "print_detail", "is", "True", ":", "\n", "                ", "ts_list", "=", "[", "(", "tensor", ".", "size", "(", ")", ",", "tensor", ".", "dtype", ")", "for", "tensor", "in", "self", ".", "get_tensors", "(", ")", "]", "\n", "new_tensor_sizes", "=", "{", "(", "type", "(", "x", ")", ",", "\n", "tuple", "(", "x", ".", "size", "(", ")", ")", ",", "\n", "ts_list", ".", "count", "(", "(", "x", ".", "size", "(", ")", ",", "x", ".", "dtype", ")", ")", ",", "\n", "np", ".", "prod", "(", "np", ".", "array", "(", "x", ".", "size", "(", ")", ")", ")", "*", "get_mem_space", "(", "x", ".", "dtype", ")", "/", "1024", "**", "2", ",", "\n", "x", ".", "dtype", ")", "for", "x", "in", "self", ".", "get_tensors", "(", ")", "}", "\n", "for", "t", ",", "s", ",", "n", ",", "m", ",", "data_type", "in", "new_tensor_sizes", "-", "self", ".", "last_tensor_sizes", ":", "\n", "                    ", "f", ".", "write", "(", "f'+ | {str(n)} * Size:{str(s):<20} | Memory: {str(m*n)[:6]} M | {str(t):<20} | {data_type}\\n'", ")", "\n", "", "for", "t", ",", "s", ",", "n", ",", "m", ",", "data_type", "in", "self", ".", "last_tensor_sizes", "-", "new_tensor_sizes", ":", "\n", "                    ", "f", ".", "write", "(", "f'- | {str(n)} * Size:{str(s):<20} | Memory: {str(m*n)[:6]} M | {str(t):<20} | {data_type}\\n'", ")", "\n", "\n", "", "self", ".", "last_tensor_sizes", "=", "new_tensor_sizes", "\n", "\n", "", "f", ".", "write", "(", "f\"\\nAt {where_str:<50}\"", "\n", "f\" Total Tensor Used Memory:{self.get_tensor_usage():<7.1f}Mb\"", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.gpu_mem_track.get_mem_space": [[30, 36], ["print"], "function", ["None"], ["", "def", "get_mem_space", "(", "x", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "ret", "=", "dtype_memory_size_dict", "[", "x", "]", "\n", "", "except", "KeyError", ":", "\n", "        ", "print", "(", "f\"dtype {x} is not supported!\"", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.box_cxcywh_to_xyxy": [[6, 11], ["x.unbind", "torch.stack"], "function", ["None"], ["def", "box_cxcywh_to_xyxy", "(", "x", ")", ":", "\n", "\t", "x_c", ",", "y_c", ",", "w", ",", "h", "=", "x", ".", "unbind", "(", "-", "1", ")", "\n", "b", "=", "[", "(", "x_c", "-", "0.5", "*", "w", ")", ",", "(", "y_c", "-", "0.5", "*", "h", ")", ",", "\n", "(", "x_c", "+", "0.5", "*", "w", ")", ",", "(", "y_c", "+", "0.5", "*", "h", ")", "]", "\n", "return", "torch", ".", "stack", "(", "b", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.box_xywh_to_xyxy": [[13, 17], ["x.unbind", "torch.stack"], "function", ["None"], ["", "def", "box_xywh_to_xyxy", "(", "x", ")", ":", "\n", "\t", "x1", ",", "y1", ",", "w", ",", "h", "=", "x", ".", "unbind", "(", "-", "1", ")", "\n", "b", "=", "[", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", "]", "\n", "return", "torch", ".", "stack", "(", "b", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.box_xyxy_to_xywh": [[19, 23], ["x.unbind", "torch.stack"], "function", ["None"], ["", "def", "box_xyxy_to_xywh", "(", "x", ")", ":", "\n", "\t", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "x", ".", "unbind", "(", "-", "1", ")", "\n", "b", "=", "[", "x1", ",", "y1", ",", "x2", "-", "x1", ",", "y2", "-", "y1", "]", "\n", "return", "torch", ".", "stack", "(", "b", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.box_xyxy_to_cxcywh": [[25, 30], ["x.unbind", "torch.stack"], "function", ["None"], ["", "def", "box_xyxy_to_cxcywh", "(", "x", ")", ":", "\n", "\t", "x0", ",", "y0", ",", "x1", ",", "y1", "=", "x", ".", "unbind", "(", "-", "1", ")", "\n", "b", "=", "[", "(", "x0", "+", "x1", ")", "/", "2", ",", "(", "y0", "+", "y1", ")", "/", "2", ",", "\n", "(", "x1", "-", "x0", ")", ",", "(", "y1", "-", "y0", ")", "]", "\n", "return", "torch", ".", "stack", "(", "b", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.box_iou": [[36, 56], ["torchvision.ops.boxes.box_area", "torchvision.ops.boxes.box_area", "torch.max", "torch.min"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["def", "box_iou", "(", "boxes1", ",", "boxes2", ")", ":", "\n", "\t", "\"\"\"\n\n\t:param boxes1: (N, 4) (x1,y1,x2,y2)\n\t:param boxes2: (N, 4) (x1,y1,x2,y2)\n\t:return:\n\t\"\"\"", "\n", "area1", "=", "box_area", "(", "boxes1", ")", "# (N,)", "\n", "area2", "=", "box_area", "(", "boxes2", ")", "# (N,)", "\n", "\n", "lt", "=", "torch", ".", "max", "(", "boxes1", "[", ":", ",", ":", "2", "]", ",", "boxes2", "[", ":", ",", ":", "2", "]", ")", "# (N,2)", "\n", "rb", "=", "torch", ".", "min", "(", "boxes1", "[", ":", ",", "2", ":", "]", ",", "boxes2", "[", ":", ",", "2", ":", "]", ")", "# (N,2)", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", ")", ".", "clamp", "(", "min", "=", "0", ")", "# (N,2)", "\n", "inter", "=", "wh", "[", ":", ",", "0", "]", "*", "wh", "[", ":", ",", "1", "]", "# (N,)", "\n", "\n", "union", "=", "area1", "+", "area2", "-", "inter", "\n", "\n", "iou", "=", "inter", "/", "union", "\n", "return", "iou", ",", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.generalized_box_iou": [[61, 84], ["box_ops.box_iou", "torch.min", "torch.max"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.box_iou", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["def", "generalized_box_iou", "(", "boxes1", ",", "boxes2", ")", ":", "\n", "\t", "\"\"\"\n\tGeneralized IoU from https://giou.stanford.edu/\n\n\tThe boxes should be in [x0, y0, x1, y1] format\n\n\tboxes1: (N, 4)\n\tboxes2: (N, 4)\n\t\"\"\"", "\n", "# degenerate boxes gives inf / nan results", "\n", "# so do an early check", "\n", "# try:", "\n", "assert", "(", "boxes1", "[", ":", ",", "2", ":", "]", ">=", "boxes1", "[", ":", ",", ":", "2", "]", ")", ".", "all", "(", ")", "\n", "assert", "(", "boxes2", "[", ":", ",", "2", ":", "]", ">=", "boxes2", "[", ":", ",", ":", "2", "]", ")", ".", "all", "(", ")", "\n", "iou", ",", "union", "=", "box_iou", "(", "boxes1", ",", "boxes2", ")", "# (N,)", "\n", "\n", "lt", "=", "torch", ".", "min", "(", "boxes1", "[", ":", ",", ":", "2", "]", ",", "boxes2", "[", ":", ",", ":", "2", "]", ")", "\n", "rb", "=", "torch", ".", "max", "(", "boxes1", "[", ":", ",", "2", ":", "]", ",", "boxes2", "[", ":", ",", "2", ":", "]", ")", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", ")", ".", "clamp", "(", "min", "=", "0", ")", "# (N,2)", "\n", "area", "=", "wh", "[", ":", ",", "0", "]", "*", "wh", "[", ":", ",", "1", "]", "# (N,)", "\n", "\n", "return", "iou", "-", "(", "area", "-", "union", ")", "/", "area", ",", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.giou_loss": [[86, 95], ["box_ops.generalized_box_iou"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.generalized_box_iou"], ["", "def", "giou_loss", "(", "boxes1", ",", "boxes2", ")", ":", "\n", "\t", "\"\"\"\n\n\t:param boxes1: (N, 4) (x1,y1,x2,y2)\n\t:param boxes2: (N, 4) (x1,y1,x2,y2)\n\t:return:\n\t\"\"\"", "\n", "giou", ",", "iou", "=", "generalized_box_iou", "(", "boxes1", ",", "boxes2", ")", "\n", "return", "(", "1", "-", "giou", ")", ".", "mean", "(", ")", ",", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.clip_box": [[97, 107], ["min", "min", "min", "min", "max", "max", "max", "max", "max", "max"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "def", "clip_box", "(", "box", ":", "list", ",", "H", ",", "W", ",", "margin", "=", "0", ")", ":", "\n", "\t", "x1", ",", "y1", ",", "w", ",", "h", "=", "box", "\n", "x2", ",", "y2", "=", "x1", "+", "w", ",", "y1", "+", "h", "\n", "x1", "=", "min", "(", "max", "(", "0", ",", "x1", ")", ",", "W", "-", "margin", ")", "\n", "x2", "=", "min", "(", "max", "(", "margin", ",", "x2", ")", ",", "W", ")", "\n", "y1", "=", "min", "(", "max", "(", "0", ",", "y1", ")", ",", "H", "-", "margin", ")", "\n", "y2", "=", "min", "(", "max", "(", "margin", ",", "y2", ")", ",", "H", ")", "\n", "w", "=", "max", "(", "margin", ",", "x2", "-", "x1", ")", "\n", "h", "=", "max", "(", "margin", ",", "y2", "-", "y1", ")", "\n", "return", "[", "x1", ",", "y1", ",", "w", ",", "h", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.diou_loss": [[109, 149], ["box_ops.box_iou", "torch.min", "torch.min", "torch.max", "torch.max", "torch.clamp", "torch.mean", "torch.sum"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.box_iou", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean"], ["", "def", "diou_loss", "(", "preds", ",", "bbox", ",", "reduction", "=", "'mean'", ")", ":", "\n", "\t", "'''\n\thttps://github.com/Zzh-tju/DIoU-SSD-pytorch/blob/master/utils/loss/multibox_loss.py\n\t:param preds:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,]\n\t:param bbox:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,]\n\t:param eps: eps to avoid divide 0\n\t:param reduction: mean or sum\n\t:return: diou-loss\n\t'''", "\n", "iou", ",", "union", "=", "box_iou", "(", "preds", ",", "bbox", ")", "\n", "\n", "# inter_diag", "\n", "cxpreds", "=", "(", "preds", "[", ":", ",", "2", "]", "+", "preds", "[", ":", ",", "0", "]", ")", "/", "2", "\n", "cypreds", "=", "(", "preds", "[", ":", ",", "3", "]", "+", "preds", "[", ":", ",", "1", "]", ")", "/", "2", "\n", "\n", "cxbbox", "=", "(", "bbox", "[", ":", ",", "2", "]", "+", "bbox", "[", ":", ",", "0", "]", ")", "/", "2", "\n", "cybbox", "=", "(", "bbox", "[", ":", ",", "3", "]", "+", "bbox", "[", ":", ",", "1", "]", ")", "/", "2", "\n", "\n", "inter_diag", "=", "(", "cxbbox", "-", "cxpreds", ")", "**", "2", "+", "(", "cybbox", "-", "cypreds", ")", "**", "2", "\n", "\n", "# outer_diag", "\n", "ox1", "=", "torch", ".", "min", "(", "preds", "[", ":", ",", "0", "]", ",", "bbox", "[", ":", ",", "0", "]", ")", "\n", "oy1", "=", "torch", ".", "min", "(", "preds", "[", ":", ",", "1", "]", ",", "bbox", "[", ":", ",", "1", "]", ")", "\n", "ox2", "=", "torch", ".", "max", "(", "preds", "[", ":", ",", "2", "]", ",", "bbox", "[", ":", ",", "2", "]", ")", "\n", "oy2", "=", "torch", ".", "max", "(", "preds", "[", ":", ",", "3", "]", ",", "bbox", "[", ":", ",", "3", "]", ")", "\n", "\n", "outer_diag", "=", "(", "ox1", "-", "ox2", ")", "**", "2", "+", "(", "oy1", "-", "oy2", ")", "**", "2", "\n", "\n", "diou", "=", "iou", "-", "inter_diag", "/", "outer_diag", "\n", "diou", "=", "torch", ".", "clamp", "(", "diou", ",", "min", "=", "-", "1.0", ",", "max", "=", "1.0", ")", "\n", "\n", "diou_loss", "=", "1", "-", "diou", "\n", "\n", "if", "reduction", "==", "'mean'", ":", "\n", "\t\t", "loss", "=", "torch", ".", "mean", "(", "diou_loss", ")", "\n", "", "elif", "reduction", "==", "'sum'", ":", "\n", "\t\t", "loss", "=", "torch", ".", "sum", "(", "diou_loss", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "", "return", "loss", ",", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.ciou_loss": [[150, 190], ["box_ops.box_iou", "torch.min", "torch.min", "torch.max", "torch.max", "torch.clamp", "torch.pow", "torch.mean", "torch.sum", "torch.atan", "torch.atan"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.box_iou", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean"], ["", "def", "ciou_loss", "(", "preds", ",", "bbox", ",", "reduction", "=", "'mean'", ")", ":", "\n", "\t", "iou", ",", "union", "=", "box_iou", "(", "preds", ",", "bbox", ")", "\n", "\n", "# inter_diag", "\n", "cxpreds", "=", "(", "preds", "[", ":", ",", "2", "]", "+", "preds", "[", ":", ",", "0", "]", ")", "/", "2", "\n", "cypreds", "=", "(", "preds", "[", ":", ",", "3", "]", "+", "preds", "[", ":", ",", "1", "]", ")", "/", "2", "\n", "\n", "cxbbox", "=", "(", "bbox", "[", ":", ",", "2", "]", "+", "bbox", "[", ":", ",", "0", "]", ")", "/", "2", "\n", "cybbox", "=", "(", "bbox", "[", ":", ",", "3", "]", "+", "bbox", "[", ":", ",", "1", "]", ")", "/", "2", "\n", "\n", "inter_diag", "=", "(", "cxbbox", "-", "cxpreds", ")", "**", "2", "+", "(", "cybbox", "-", "cypreds", ")", "**", "2", "\n", "\n", "# outer_diag", "\n", "ox1", "=", "torch", ".", "min", "(", "preds", "[", ":", ",", "0", "]", ",", "bbox", "[", ":", ",", "0", "]", ")", "\n", "oy1", "=", "torch", ".", "min", "(", "preds", "[", ":", ",", "1", "]", ",", "bbox", "[", ":", ",", "1", "]", ")", "\n", "ox2", "=", "torch", ".", "max", "(", "preds", "[", ":", ",", "2", "]", ",", "bbox", "[", ":", ",", "2", "]", ")", "\n", "oy2", "=", "torch", ".", "max", "(", "preds", "[", ":", ",", "3", "]", ",", "bbox", "[", ":", ",", "3", "]", ")", "\n", "\n", "outer_diag", "=", "(", "ox1", "-", "ox2", ")", "**", "2", "+", "(", "oy1", "-", "oy2", ")", "**", "2", "\n", "\n", "diou", "=", "iou", "-", "inter_diag", "/", "outer_diag", "\n", "\n", "# calculate v,alpha", "\n", "wbbox", "=", "bbox", "[", ":", ",", "2", "]", "-", "bbox", "[", ":", ",", "0", "]", "+", "1.0", "\n", "hbbox", "=", "bbox", "[", ":", ",", "3", "]", "-", "bbox", "[", ":", ",", "1", "]", "+", "1.0", "\n", "wpreds", "=", "preds", "[", ":", ",", "2", "]", "-", "preds", "[", ":", ",", "0", "]", "+", "1.0", "\n", "hpreds", "=", "preds", "[", ":", ",", "3", "]", "-", "preds", "[", ":", ",", "1", "]", "+", "1.0", "\n", "v", "=", "torch", ".", "pow", "(", "(", "torch", ".", "atan", "(", "wbbox", "/", "hbbox", ")", "-", "torch", ".", "atan", "(", "wpreds", "/", "hpreds", ")", ")", ",", "2", ")", "*", "(", "4", "/", "(", "math", ".", "pi", "**", "2", ")", ")", "\n", "alpha", "=", "v", "/", "(", "1", "-", "iou", "+", "v", ")", "\n", "ciou", "=", "diou", "-", "alpha", "*", "v", "\n", "ciou", "=", "torch", ".", "clamp", "(", "ciou", ",", "min", "=", "-", "1.0", ",", "max", "=", "1.0", ")", "\n", "\n", "ciou_loss", "=", "1", "-", "ciou", "\n", "if", "reduction", "==", "'mean'", ":", "\n", "\t\t", "loss", "=", "torch", ".", "mean", "(", "ciou_loss", ")", "\n", "", "elif", "reduction", "==", "'sum'", ":", "\n", "\t\t", "loss", "=", "torch", ".", "sum", "(", "ciou_loss", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "", "return", "loss", ",", "iou", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.__init__": [[31, 38], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.4f} ({global_avg:.4f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.update": [[39, 43], ["misc.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.synchronize_between_processes": [[44, 56], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "misc.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.median": [[57, 61], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.median", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.avg": [[62, 66], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.global_avg": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max": [[71, 74], ["misc.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.value": [[75, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.__str__": [[79, 86], ["misc.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.MetricLogger.__init__": [[159, 162], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.MetricLogger.update": [[163, 169], ["kwargs.items", "isinstance", "isinstance", "misc.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.MetricLogger.__getattr__": [[170, 177], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.MetricLogger.__str__": [[178, 185], ["misc.MetricLogger.meters.items", "misc.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.MetricLogger.synchronize_between_processes": [[186, 189], ["misc.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.MetricLogger.add_meter": [[190, 192], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.MetricLogger.log_every": [[193, 246], ["time.time", "time.time", "misc.SmoothedValue", "misc.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str", "print", "misc.MetricLogger.delimiter.join", "misc.MetricLogger.delimiter.join", "misc.SmoothedValue.update", "misc.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "misc.MetricLogger.format", "misc.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", ",", "\n", "'max mem: {memory:.0f}'", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", "\n", "]", ")", "\n", "", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.4f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.NestedTensor.__init__": [[284, 287], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tensors", ",", "mask", ":", "Optional", "[", "Tensor", "]", ")", ":", "\n", "        ", "self", ".", "tensors", "=", "tensors", "\n", "self", ".", "mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.NestedTensor.to": [[288, 298], ["misc.NestedTensor.tensors.to", "misc.NestedTensor", "mask.to"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "# type: (Device) -> NestedTensor # noqa", "\n", "        ", "cast_tensor", "=", "self", ".", "tensors", ".", "to", "(", "device", ")", "\n", "mask", "=", "self", ".", "mask", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "assert", "mask", "is", "not", "None", "\n", "cast_mask", "=", "mask", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "cast_mask", "=", "None", "\n", "", "return", "NestedTensor", "(", "cast_tensor", ",", "cast_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.NestedTensor.decompose": [[299, 301], ["None"], "methods", ["None"], ["", "def", "decompose", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tensors", ",", "self", ".", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.NestedTensor.__repr__": [[302, 304], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.all_gather": [[88, 129], ["misc.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.tensor", "torch.tensor", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.tensor", "torch.tensor", "int", "tensor_list.append", "torch.empty", "torch.empty", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "range", "size.item", "torch.empty", "torch.empty", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.dist.get_world_size", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.all_gather", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.all_gather"], ["", "", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "tensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ",", "device", "=", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "tensor", "(", "[", "0", "]", ",", "device", "=", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "empty", "(", "(", "max_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "empty", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.reduce_dict": [[131, 156], ["misc.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.all_reduce", "input_dict.keys", "names.append", "torch.stack.append", "zip"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.dist.get_world_size"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that all processes\n    have the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "all_reduce", "(", "values", ")", "\n", "if", "average", ":", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.get_sha": [[248, 266], ["os.path.dirname", "os.path.abspath", "subprocess.check_output().decode().strip", "misc.get_sha._run"], "function", ["None"], ["", "", "def", "get_sha", "(", ")", ":", "\n", "    ", "cwd", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "\n", "def", "_run", "(", "command", ")", ":", "\n", "        ", "return", "subprocess", ".", "check_output", "(", "command", ",", "cwd", "=", "cwd", ")", ".", "decode", "(", "'ascii'", ")", ".", "strip", "(", ")", "\n", "", "sha", "=", "'N/A'", "\n", "diff", "=", "\"clean\"", "\n", "branch", "=", "'N/A'", "\n", "try", ":", "\n", "        ", "sha", "=", "_run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'diff'", "]", ",", "cwd", "=", "cwd", ")", "\n", "diff", "=", "_run", "(", "[", "'git'", ",", "'diff-index'", ",", "'HEAD'", "]", ")", "\n", "diff", "=", "\"has uncommited changes\"", "if", "diff", "else", "\"clean\"", "\n", "branch", "=", "_run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'--abbrev-ref'", ",", "'HEAD'", "]", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pass", "\n", "", "message", "=", "f\"sha: {sha}, status: {diff}, branch: {branch}\"", "\n", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.collate_fn": [[268, 272], ["list", "misc.nested_tensor_from_tensor_list", "tuple", "zip"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.nested_tensor_from_tensor_list"], ["", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "batch", "[", "0", "]", "=", "nested_tensor_from_tensor_list", "(", "batch", "[", "0", "]", ")", "\n", "return", "tuple", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc._max_by_axis": [[274, 281], ["enumerate", "max"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "def", "_max_by_axis", "(", "the_list", ")", ":", "\n", "# type: (List[List[int]]) -> List[int]", "\n", "    ", "maxes", "=", "the_list", "[", "0", "]", "# get the first one", "\n", "for", "sublist", "in", "the_list", "[", "1", ":", "]", ":", "# [h,w,3]", "\n", "        ", "for", "index", ",", "item", "in", "enumerate", "(", "sublist", ")", ":", "# index: 0,1,2", "\n", "            ", "maxes", "[", "index", "]", "=", "max", "(", "maxes", "[", "index", "]", ",", "item", ")", "# compare current max with the other elements in the whole", "\n", "", "", "return", "maxes", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.nested_tensor_from_tensor_list": [[306, 329], ["misc.NestedTensor", "torchvision._is_tracing", "misc._max_by_axis", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "zip", "ValueError", "misc._onnx_nested_tensor_from_tensor_list", "pad_img[].copy_", "list", "len"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc._max_by_axis", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc._onnx_nested_tensor_from_tensor_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "", "def", "nested_tensor_from_tensor_list", "(", "tensor_list", ":", "List", "[", "Tensor", "]", ")", ":", "\n", "# TODO make this more general", "\n", "    ", "if", "tensor_list", "[", "0", "]", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "torchvision", ".", "_is_tracing", "(", ")", ":", "\n", "# nested_tensor_from_tensor_list() does not export well to ONNX", "\n", "# call _onnx_nested_tensor_from_tensor_list() instead", "\n", "            ", "return", "_onnx_nested_tensor_from_tensor_list", "(", "tensor_list", ")", "\n", "\n", "# TODO make it support different-sized images", "\n", "", "max_size", "=", "_max_by_axis", "(", "[", "list", "(", "img", ".", "shape", ")", "for", "img", "in", "tensor_list", "]", ")", "# [[3,h1,w1], [3,h2,w2], [3,h3,w3], ...]", "\n", "# min_size = tuple(min(s) for s in zip(*[img.shape for img in tensor_list]))", "\n", "batch_shape", "=", "[", "len", "(", "tensor_list", ")", "]", "+", "max_size", "# ()", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "batch_shape", "\n", "dtype", "=", "tensor_list", "[", "0", "]", ".", "dtype", "\n", "device", "=", "tensor_list", "[", "0", "]", ".", "device", "\n", "tensor", "=", "torch", ".", "zeros", "(", "batch_shape", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "(", "b", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", ")", "\n", "for", "img", ",", "pad_img", ",", "m", "in", "zip", "(", "tensor_list", ",", "tensor", ",", "mask", ")", ":", "\n", "            ", "pad_img", "[", ":", "img", ".", "shape", "[", "0", "]", ",", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "img", ".", "shape", "[", "2", "]", "]", ".", "copy_", "(", "img", ")", "# copy valid regions of the images to the largest padded base.", "\n", "m", "[", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "img", ".", "shape", "[", "2", "]", "]", "=", "False", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'not supported'", ")", "\n", "", "return", "NestedTensor", "(", "tensor", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc._onnx_nested_tensor_from_tensor_list": [[333, 360], ["range", "tuple", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "misc.NestedTensor", "tensor_list[].dim", "torch.max().to", "torch.max().to", "tuple.append", "torch.nn.functional.pad", "torch.nn.functional.pad", "padded_imgs.append", "torch.zeros_like", "torch.zeros_like", "torch.nn.functional.pad", "torch.nn.functional.pad", "padded_masks.append", "torch.nn.functional.pad.to", "torch.max", "torch.max", "zip", "torch.stack().to", "torch.stack().to", "tuple", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "_onnx_nested_tensor_from_tensor_list", "(", "tensor_list", ":", "List", "[", "Tensor", "]", ")", "->", "NestedTensor", ":", "\n", "    ", "max_size", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "tensor_list", "[", "0", "]", ".", "dim", "(", ")", ")", ":", "\n", "        ", "max_size_i", "=", "torch", ".", "max", "(", "torch", ".", "stack", "(", "[", "img", ".", "shape", "[", "i", "]", "for", "img", "in", "tensor_list", "]", ")", ".", "to", "(", "torch", ".", "float32", ")", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "max_size", ".", "append", "(", "max_size_i", ")", "\n", "", "max_size", "=", "tuple", "(", "max_size", ")", "\n", "\n", "# work around for", "\n", "# pad_img[: img.shape[0], : img.shape[1], : img.shape[2]].copy_(img)", "\n", "# m[: img.shape[1], :img.shape[2]] = False", "\n", "# which is not yet supported in onnx", "\n", "padded_imgs", "=", "[", "]", "\n", "padded_masks", "=", "[", "]", "\n", "for", "img", "in", "tensor_list", ":", "\n", "        ", "padding", "=", "[", "(", "s1", "-", "s2", ")", "for", "s1", ",", "s2", "in", "zip", "(", "max_size", ",", "tuple", "(", "img", ".", "shape", ")", ")", "]", "\n", "padded_img", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "img", ",", "(", "0", ",", "padding", "[", "2", "]", ",", "0", ",", "padding", "[", "1", "]", ",", "0", ",", "padding", "[", "0", "]", ")", ")", "\n", "padded_imgs", ".", "append", "(", "padded_img", ")", "\n", "\n", "m", "=", "torch", ".", "zeros_like", "(", "img", "[", "0", "]", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "img", ".", "device", ")", "\n", "padded_mask", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "m", ",", "(", "0", ",", "padding", "[", "2", "]", ",", "0", ",", "padding", "[", "1", "]", ")", ",", "\"constant\"", ",", "1", ")", "\n", "padded_masks", ".", "append", "(", "padded_mask", ".", "to", "(", "torch", ".", "bool", ")", ")", "\n", "\n", "", "tensor", "=", "torch", ".", "stack", "(", "padded_imgs", ")", "\n", "mask", "=", "torch", ".", "stack", "(", "padded_masks", ")", "\n", "\n", "return", "NestedTensor", "(", "tensor", ",", "mask", "=", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.setup_for_distributed": [[362, 375], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.is_dist_avail_and_initialized": [[377, 383], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.get_world_size": [[385, 389], ["torch.get_world_size", "misc.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.dist.get_world_size", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.get_rank": [[390, 394], ["torch.get_rank", "misc.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.get_rank", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.is_main_process": [[396, 398], ["misc.get_rank"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.save_on_master": [[400, 403], ["misc.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.init_distributed_mode": [[405, 428], ["torch.cuda.set_device", "torch.cuda.set_device", "misc.setup_for_distributed.print", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.barrier", "torch.distributed.barrier", "misc.setup_for_distributed", "int", "int", "int", "int", "misc.setup_for_distributed.print", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.setup_for_distributed"], ["", "", "def", "init_distributed_mode", "(", "args", ")", ":", "\n", "    ", "if", "'RANK'", "in", "os", ".", "environ", "and", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not using distributed mode'", ")", "\n", "args", ".", "distributed", "=", "False", "\n", "return", "\n", "\n", "", "args", ".", "distributed", "=", "True", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "args", ".", "dist_backend", "=", "'nccl'", "\n", "print", "(", "'| distributed init (rank {}): {}'", ".", "format", "(", "\n", "args", ".", "rank", ",", "args", ".", "dist_url", ")", ",", "flush", "=", "True", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "args", ".", "rank", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.accuracy": [[430, 447], ["torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.numel", "target.view().expand_as", "correct[].view().float().sum", "res.append", "torch.zeros", "torch.zeros", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "if", "target", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "[", "torch", ".", "zeros", "(", "[", "]", ",", "device", "=", "output", ".", "device", ")", "]", "\n", "", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.interpolate": [[449, 467], ["float", "_output_size", "_new_empty_tensor", "torchvision.ops.misc.interpolate", "input.numel", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "list", "list"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.interpolate", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.interpolate", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.interpolate", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "def", "interpolate", "(", "input", ",", "size", "=", "None", ",", "scale_factor", "=", "None", ",", "mode", "=", "\"nearest\"", ",", "align_corners", "=", "None", ")", ":", "\n", "# type: (Tensor, Optional[List[int]], Optional[float], str, Optional[bool]) -> Tensor", "\n", "    ", "\"\"\"\n    Equivalent to nn.functional.interpolate, but with support for empty batch sizes.\n    This will eventually be supported natively by PyTorch, and this\n    class can go away.\n    \"\"\"", "\n", "if", "float", "(", "torchvision", ".", "__version__", "[", ":", "3", "]", ")", "<", "0.7", ":", "\n", "        ", "if", "input", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "input", ",", "size", ",", "scale_factor", ",", "mode", ",", "align_corners", "\n", ")", "\n", "\n", "", "output_shape", "=", "_output_size", "(", "2", ",", "input", ",", "size", ",", "scale_factor", ")", "\n", "output_shape", "=", "list", "(", "input", ".", "shape", "[", ":", "-", "2", "]", ")", "+", "list", "(", "output_shape", ")", "\n", "return", "_new_empty_tensor", "(", "input", ",", "output_shape", ")", "\n", "", "else", ":", "\n", "        ", "return", "torchvision", ".", "ops", ".", "misc", ".", "interpolate", "(", "input", ",", "size", ",", "scale_factor", ",", "mode", ",", "align_corners", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.dist.get_world_size": [[5, 15], ["os.environ.get", "int", "os.environ.get", "int", "torch.cuda.device_count", "os.environ.get", "os.environ.get"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "\"\"\"Find OMPI world size without calling mpi functions\n    :rtype: int\n    \"\"\"", "\n", "if", "os", ".", "environ", ".", "get", "(", "'PMI_SIZE'", ")", "is", "not", "None", ":", "\n", "        ", "return", "int", "(", "os", ".", "environ", ".", "get", "(", "'PMI_SIZE'", ")", "or", "1", ")", "\n", "", "elif", "os", ".", "environ", ".", "get", "(", "'OMPI_COMM_WORLD_SIZE'", ")", "is", "not", "None", ":", "\n", "        ", "return", "int", "(", "os", ".", "environ", ".", "get", "(", "'OMPI_COMM_WORLD_SIZE'", ")", "or", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.dist.get_global_rank": [[17, 27], ["os.environ.get", "int", "os.environ.get", "int", "os.environ.get", "os.environ.get"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get"], ["", "", "def", "get_global_rank", "(", ")", ":", "\n", "    ", "\"\"\"Find OMPI world rank without calling mpi functions\n    :rtype: int\n    \"\"\"", "\n", "if", "os", ".", "environ", ".", "get", "(", "'PMI_RANK'", ")", "is", "not", "None", ":", "\n", "        ", "return", "int", "(", "os", ".", "environ", ".", "get", "(", "'PMI_RANK'", ")", "or", "0", ")", "\n", "", "elif", "os", ".", "environ", ".", "get", "(", "'OMPI_COMM_WORLD_RANK'", ")", "is", "not", "None", ":", "\n", "        ", "return", "int", "(", "os", ".", "environ", ".", "get", "(", "'OMPI_COMM_WORLD_RANK'", ")", "or", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.dist.get_local_rank": [[29, 39], ["os.environ.get", "int", "os.environ.get", "int", "os.environ.get", "os.environ.get"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get"], ["", "", "def", "get_local_rank", "(", ")", ":", "\n", "    ", "\"\"\"Find OMPI local rank without calling mpi functions\n    :rtype: int\n    \"\"\"", "\n", "if", "os", ".", "environ", ".", "get", "(", "'MPI_LOCALRANKID'", ")", "is", "not", "None", ":", "\n", "        ", "return", "int", "(", "os", ".", "environ", ".", "get", "(", "'MPI_LOCALRANKID'", ")", "or", "0", ")", "\n", "", "elif", "os", ".", "environ", ".", "get", "(", "'OMPI_COMM_WORLD_LOCAL_RANK'", ")", "is", "not", "None", ":", "\n", "        ", "return", "int", "(", "os", ".", "environ", ".", "get", "(", "'OMPI_COMM_WORLD_LOCAL_RANK'", ")", "or", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.dist.get_master_ip": [[41, 48], ["os.environ.get", "os.environ.get().split", "os.environ.get", "os.environ.get", "os.environ.get"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get"], ["", "", "def", "get_master_ip", "(", ")", ":", "\n", "    ", "if", "os", ".", "environ", ".", "get", "(", "'AZ_BATCH_MASTER_NODE'", ")", "is", "not", "None", ":", "\n", "        ", "return", "os", ".", "environ", ".", "get", "(", "'AZ_BATCH_MASTER_NODE'", ")", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "", "elif", "os", ".", "environ", ".", "get", "(", "'AZ_BATCHAI_MPI_MASTER_NODE'", ")", "is", "not", "None", ":", "\n", "        ", "return", "os", ".", "environ", ".", "get", "(", "'AZ_BATCHAI_MPI_MASTER_NODE'", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"127.0.0.1\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.get_lmdb_handle": [[11, 21], ["LMDB_HANDLES.get", "lmdb.open", "lmdb.open.begin"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get"], ["def", "get_lmdb_handle", "(", "name", ")", ":", "\n", "    ", "global", "LMDB_HANDLES", ",", "LMDB_FILELISTS", "\n", "item", "=", "LMDB_HANDLES", ".", "get", "(", "name", ",", "None", ")", "\n", "if", "item", "is", "None", ":", "\n", "        ", "env", "=", "lmdb", ".", "open", "(", "name", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "readahead", "=", "False", ",", "meminit", "=", "False", ")", "\n", "LMDB_ENVS", "[", "name", "]", "=", "env", "\n", "item", "=", "env", ".", "begin", "(", "write", "=", "False", ")", "\n", "LMDB_HANDLES", "[", "name", "]", "=", "item", "\n", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_img": [[23, 31], ["lmdb_utils.get_lmdb_handle", "get_lmdb_handle.get", "numpy.frombuffer", "cv2.cvtColor", "key_name.encode", "print", "cv2.imdecode"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.get_lmdb_handle", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get"], ["", "def", "decode_img", "(", "lmdb_fname", ",", "key_name", ")", ":", "\n", "    ", "handle", "=", "get_lmdb_handle", "(", "lmdb_fname", ")", "\n", "binfile", "=", "handle", ".", "get", "(", "key_name", ".", "encode", "(", ")", ")", "\n", "if", "binfile", "is", "None", ":", "\n", "        ", "print", "(", "\"Illegal data detected. %s %s\"", "%", "(", "lmdb_fname", ",", "key_name", ")", ")", "\n", "", "s", "=", "np", ".", "frombuffer", "(", "binfile", ",", "np", ".", "uint8", ")", "\n", "x", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imdecode", "(", "s", ",", "cv2", ".", "IMREAD_COLOR", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_str": [[33, 38], ["lmdb_utils.get_lmdb_handle", "get_lmdb_handle.get", "handle.get.decode", "key_name.encode"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.get_lmdb_handle", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get"], ["", "def", "decode_str", "(", "lmdb_fname", ",", "key_name", ")", ":", "\n", "    ", "handle", "=", "get_lmdb_handle", "(", "lmdb_fname", ")", "\n", "binfile", "=", "handle", ".", "get", "(", "key_name", ".", "encode", "(", ")", ")", "\n", "string", "=", "binfile", ".", "decode", "(", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_json": [[40, 42], ["json.loads", "lmdb_utils.decode_str"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_str"], ["", "def", "decode_json", "(", "lmdb_fname", ",", "key_name", ")", ":", "\n", "    ", "return", "json", ".", "loads", "(", "decode_str", "(", "lmdb_fname", ",", "key_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain.remove_prefix": [[7, 12], ["f", "x.startswith", "state_dict.items", "x.split"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.f"], ["def", "remove_prefix", "(", "state_dict", ",", "prefix", ")", ":", "\n", "\t", "''' Old style model is stored with all names of parameters\n\tshare common prefix 'module.' '''", "\n", "f", "=", "lambda", "x", ":", "x", ".", "split", "(", "prefix", ",", "1", ")", "[", "-", "1", "]", "if", "x", ".", "startswith", "(", "prefix", ")", "else", "x", "\n", "return", "{", "f", "(", "key", ")", ":", "value", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic": [[14, 17], ["f", "x.startswith", "dict.items", "key.startswith", "x.split"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.f"], ["", "def", "_get_prefix_dic", "(", "dict", ",", "prefix", ")", ":", "\n", "\t", "f", "=", "lambda", "x", ":", "x", ".", "split", "(", "prefix", ",", "1", ")", "[", "-", "1", "]", "if", "x", ".", "startswith", "(", "prefix", ")", "else", "x", "\n", "return", "{", "f", "(", "key", ")", ":", "value", "for", "key", ",", "value", "in", "dict", ".", "items", "(", ")", "if", "key", ".", "startswith", "(", "prefix", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._add_prefix_dic": [[19, 22], ["f", "str", "str", "dict.items"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.f"], ["", "def", "_add_prefix_dic", "(", "dict", ",", "prefix", ")", ":", "\n", "\t", "f", "=", "lambda", "x", ":", "str", "(", "prefix", ")", "+", "str", "(", "x", ")", "\n", "return", "{", "f", "(", "key", ")", ":", "value", "for", "key", ",", "value", "in", "dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain.load_my_tracker": [[23, 40], ["net.backbone.load_state_dict", "net.bottleneck.load_state_dict", "net.transformer.transformer.load_state_dict", "net.transformer.transformer_post.load_state_dict", "net.transformer.post_norm.load_state_dict", "net.box_head.load_state_dict", "net.cls_head.load_state_dict", "net.query_embed.load_state_dict", "torch.load", "torch.load", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic"], ["", "def", "load_my_tracker", "(", "net", ")", ":", "\n", "\t", "checkpoint_path", "=", "'/home/szk/Developer/trans_tracking/Stark-main/output/checkpoints/TRACKER_MY_ep0120.pth.tar'", "\n", "checkpoint_path_raw", "=", "'/home/szk/Developer/trans_tracking/Stark-main/output/checkpoints/STARKST_ep0500.pth.tar'", "\n", "\n", "check_old", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "[", "'net'", "]", "\n", "check_decorder", "=", "torch", ".", "load", "(", "checkpoint_path_raw", ",", "map_location", "=", "'cpu'", ")", "[", "'net'", "]", "\n", "net", ".", "backbone", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_old", ",", "\"backbone.\"", ")", ",", "strict", "=", "True", ")", "\n", "net", ".", "bottleneck", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_old", ",", "\"bottleneck.\"", ")", ",", "strict", "=", "True", ")", "\n", "net", ".", "transformer", ".", "transformer", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_old", ",", "\"transformer.transformer.\"", ")", ",", "strict", "=", "True", ")", "\n", "net", ".", "transformer", ".", "transformer_post", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_decorder", ",", "\"transformer.decoder.layers.\"", ")", ",", "\n", "strict", "=", "True", ")", "\n", "net", ".", "transformer", ".", "post_norm", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_decorder", ",", "\"transformer.decoder.norm.\"", ")", ",", "\n", "strict", "=", "True", ")", "\n", "net", ".", "box_head", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_decorder", ",", "\"box_head.\"", ")", ",", "strict", "=", "True", ")", "\n", "net", ".", "cls_head", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_decorder", ",", "\"cls_head.\"", ")", ",", "strict", "=", "True", ")", "\n", "net", ".", "query_embed", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_decorder", ",", "\"query_embed.\"", ")", ",", "strict", "=", "True", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain.load_stark_for_cstrt": [[42, 67], ["net.backbone.load_state_dict", "net.bottleneck.load_state_dict", "net.box_head.load_state_dict", "net.cls_head.load_state_dict", "net.query_embed.load_state_dict", "range", "net.transformer.transformer_post.load_state_dict", "net.transformer.post_norm.load_state_dict", "os.path.abspath", "torch.load", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "net.transformer.transformer[].output_linear.load_state_dict", "net.transformer.transformer[].feedforward[].load_state_dict", "net.transformer.transformer[].feedforward[].load_state_dict", "net.transformer.transformer[].norm1.load_state_dict", "net.transformer.transformer[].norm2.load_state_dict", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "os.path.join", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "load_pretrain._get_prefix_dic", "os.getcwd", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_pretrain._get_prefix_dic"], ["", "def", "load_stark_for_cstrt", "(", "net", ")", ":", "\n", "\t", "checkpoint_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"../..\"", ")", ")", "+", "'/output/checkpoints/STARKST_ep0500.pth.tar'", "\n", "\n", "check_point", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "[", "'net'", "]", "\n", "net", ".", "backbone", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_point", ",", "\"backbone.\"", ")", ",", "strict", "=", "True", ")", "\n", "net", ".", "bottleneck", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_point", ",", "\"bottleneck.\"", ")", ",", "strict", "=", "True", ")", "\n", "net", ".", "box_head", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_point", ",", "\"box_head.\"", ")", ",", "strict", "=", "True", ")", "\n", "net", ".", "cls_head", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_point", ",", "\"cls_head.\"", ")", ",", "strict", "=", "True", ")", "\n", "net", ".", "query_embed", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_point", ",", "\"query_embed.\"", ")", ",", "strict", "=", "True", ")", "\n", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "\t\t", "net", ".", "transformer", ".", "transformer", "[", "i", "]", ".", "qkv_embedding", ".", "weight", ".", "data", "=", "check_point", "[", "\"transformer.encoder.layers.%s.self_attn.in_proj_weight\"", "%", "(", "str", "(", "i", ")", ")", "]", "\n", "net", ".", "transformer", ".", "transformer", "[", "i", "]", ".", "qkv_embedding", ".", "bias", ".", "data", "=", "check_point", "[", "\"transformer.encoder.layers.%s.self_attn.in_proj_bias\"", "%", "(", "str", "(", "i", ")", ")", "]", "\n", "net", ".", "transformer", ".", "transformer", "[", "i", "]", ".", "output_linear", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_point", ",", "(", "\"transformer.encoder.layers.%s.self_attn.out_proj.\"", "%", "(", "str", "(", "i", ")", ")", ")", ")", ",", "strict", "=", "True", ")", "\n", "net", ".", "transformer", ".", "transformer", "[", "i", "]", ".", "feedforward", "[", "0", "]", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_point", ",", "(", "\"transformer.encoder.layers.%s.linear1.\"", "%", "(", "str", "(", "i", ")", ")", ")", ")", ",", "strict", "=", "True", ")", "\n", "net", ".", "transformer", ".", "transformer", "[", "i", "]", ".", "feedforward", "[", "3", "]", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_point", ",", "(", "\"transformer.encoder.layers.%s.linear2.\"", "%", "(", "str", "(", "i", ")", ")", ")", ")", ",", "strict", "=", "True", ")", "\n", "net", ".", "transformer", ".", "transformer", "[", "i", "]", ".", "norm1", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_point", ",", "(", "\"transformer.encoder.layers.%s.norm1.\"", "%", "(", "str", "(", "i", ")", ")", ")", ")", ",", "strict", "=", "True", ")", "\n", "net", ".", "transformer", ".", "transformer", "[", "i", "]", ".", "norm2", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_point", ",", "(", "\"transformer.encoder.layers.%s.norm2.\"", "%", "(", "str", "(", "i", ")", ")", ")", ")", ",", "strict", "=", "True", ")", "\n", "\n", "", "net", ".", "transformer", ".", "transformer_post", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_point", ",", "\"transformer.decoder.layers.\"", ")", ",", "\n", "strict", "=", "True", ")", "\n", "net", ".", "transformer", ".", "post_norm", ".", "load_state_dict", "(", "_get_prefix_dic", "(", "check_point", ",", "\"transformer.decoder.norm.\"", ")", ",", "\n", "strict", "=", "True", ")", "\n", "\n", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.merge.merge_template_search": [[4, 8], ["torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["def", "merge_template_search", "(", "inp_list", ")", ":", "\n", "    ", "return", "{", "\"feat\"", ":", "torch", ".", "cat", "(", "[", "x", "[", "\"feat\"", "]", "for", "x", "in", "inp_list", "]", ",", "dim", "=", "0", ")", ",", "\n", "\"mask\"", ":", "torch", ".", "cat", "(", "[", "x", "[", "\"mask\"", "]", "for", "x", "in", "inp_list", "]", ",", "dim", "=", "1", ")", ",", "\n", "\"pos\"", ":", "torch", ".", "cat", "(", "[", "x", "[", "\"pos\"", "]", "for", "x", "in", "inp_list", "]", ",", "dim", "=", "0", ")", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.image.load_image": [[16, 42], ["cv2.imread", "os.path.isfile", "loguru.logger.info", "loguru.logger.info"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.info", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.info"], ["def", "load_image", "(", "img_file", ":", "str", ")", "->", "np", ".", "array", ":", "\n", "\t", "\"\"\"Image loader used by data module (e.g. image sampler)\n\n\tParameters\n\t----------\n\timg_file: str\n\t\tpath to image file\n\tReturns\n\t-------\n\tnp.array\n\t\tloaded image\n\n\tRaises\n\t------\n\tFileExistsError\n\t\tinvalid image file\n\tRuntimeError\n\t\tunloadable image file\n\t\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "img_file", ")", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Image file %s does not exist.\"", "%", "img_file", ")", "\n", "# read with OpenCV", "\n", "", "img", "=", "cv2", ".", "imread", "(", "img_file", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "if", "img", "is", "None", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Fail to load Image file %s\"", "%", "img_file", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.image.draw_image": [[44, 52], ["numpy.array", "matplotlib.subplots", "ax.imshow", "matplotlib.show", "matplotlib.Rectangle", "ax.add_patch"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display.show"], ["", "def", "draw_image", "(", "img", ",", "box", "=", "None", ",", "color", "=", "'r'", ")", ":", "\n", "\t", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "int", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "ax", ".", "imshow", "(", "img", ")", "\n", "if", "box", "is", "not", "None", ":", "\n", "\t\t", "rect", "=", "patches", ".", "Rectangle", "(", "box", "[", ":", "2", "]", ",", "box", "[", "2", "]", ",", "box", "[", "3", "]", ",", "linewidth", "=", "2", ",", "fill", "=", "False", ",", "edgecolor", "=", "color", ")", "\n", "ax", ".", "add_patch", "(", "rect", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.image.draw_norm_image": [[54, 68], ["numpy.array", "matplotlib.subplots", "ax.imshow", "matplotlib.show", "matplotlib.Rectangle", "ax.add_patch"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display.show"], ["", "def", "draw_norm_image", "(", "img", ",", "box", "=", "None", ",", "color", "=", "'r'", ")", ":", "\n", "\t", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "int", ")", "\n", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "img", "=", "img", "*", "std", "+", "mean", "\n", "img", "=", "img", "*", "255", "/", "0.2", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "ax", ".", "imshow", "(", "img", ")", "\n", "if", "box", "is", "not", "None", ":", "\n", "\t\t", "rect", "=", "patches", ".", "Rectangle", "(", "box", "[", ":", "2", "]", ",", "box", "[", "2", "]", ",", "box", "[", "3", "]", ",", "linewidth", "=", "2", ",", "fill", "=", "False", ",", "edgecolor", "=", "color", ")", "\n", "ax", ".", "add_patch", "(", "rect", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.image.draw_tensor": [[70, 77], ["a.squeeze().cpu().clone().detach().numpy", "matplotlib.subplots", "ax.imshow", "matplotlib.show", "numpy.transpose", "a.squeeze().cpu().clone().detach", "a.squeeze().cpu().clone", "a.squeeze().cpu", "a.squeeze"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display.show"], ["", "def", "draw_tensor", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "\t", "a_np", "=", "a", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "a_np", ".", "ndim", "==", "3", ":", "\n", "\t\t", "a_np", "=", "np", ".", "transpose", "(", "a_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "ax", ".", "imshow", "(", "a_np", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.image.draw_feat": [[79, 122], ["a.squeeze().cpu().clone().detach().numpy", "a_np.astype.astype", "int", "numpy.zeros", "range", "image.draw_image", "len", "a.squeeze().size", "numpy.max", "numpy.min", "numpy.ceil", "range", "a.squeeze().size", "len", "a.squeeze().size", "a.squeeze().cpu().clone().detach", "math.sqrt", "a.squeeze", "a.squeeze().size", "numpy.minimum", "a.squeeze", "a.squeeze", "a.squeeze().cpu().clone", "numpy.maximum", "a.squeeze", "a.squeeze().cpu", "a.squeeze"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.image.draw_image", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "def", "draw_feat", "(", "a", ":", "torch", ".", "Tensor", ",", "fix_max_min", "=", "True", ")", ":", "\n", "# a = (H,W,channel)", "\n", "\t", "one_channel", "=", "False", "\n", "if", "len", "(", "a", ".", "squeeze", "(", ")", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "\t\t", "H", ",", "W", "=", "a", ".", "squeeze", "(", ")", ".", "size", "(", ")", "\n", "C", "=", "1", "\n", "one_channel", "=", "True", "\n", "", "elif", "len", "(", "a", ".", "squeeze", "(", ")", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "\t\t", "H", ",", "W", ",", "C", "=", "a", ".", "squeeze", "(", ")", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "return", "\n", "\n", "", "a_np", "=", "a", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "fix_max_min", ":", "\n", "\t\t", "max", "=", "1.5", "\n", "min", "=", "-", "1.5", "\n", "", "else", ":", "\n", "\t\t", "max", "=", "np", ".", "max", "(", "a_np", ")", "\n", "min", "=", "np", ".", "min", "(", "a_np", ")", "\n", "\n", "", "a_np", "=", "(", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "a_np", ",", "min", ")", ",", "max", ")", "-", "min", ")", "/", "(", "max", "-", "min", ")", "*", "255.", "\n", "a_np", "=", "a_np", ".", "astype", "(", "int", ")", "\n", "\n", "h_num", "=", "int", "(", "np", ".", "ceil", "(", "math", ".", "sqrt", "(", "C", ")", ")", ")", "\n", "\n", "image", "=", "np", ".", "zeros", "(", "[", "H", "*", "h_num", "+", "h_num", "-", "1", ",", "W", "*", "h_num", "+", "h_num", "-", "1", "]", ")", "\n", "\n", "flag", "=", "True", "\n", "for", "i", "in", "range", "(", "h_num", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "h_num", ")", ":", "\n", "\t\t\t", "index", "=", "i", "*", "h_num", "+", "j", "\n", "if", "index", ">=", "C", ":", "\n", "\t\t\t\t", "flag", "=", "False", "\n", "break", "\n", "", "if", "one_channel", ":", "\n", "\t\t\t\t", "image", "[", "i", "*", "(", "H", "+", "1", ")", ":", "i", "*", "(", "H", "+", "1", ")", "+", "H", ",", "j", "*", "(", "W", "+", "1", ")", ":", "j", "*", "(", "W", "+", "1", ")", "+", "W", "]", "=", "a_np", "\n", "", "else", ":", "\n", "\t\t\t\t", "image", "[", "i", "*", "(", "H", "+", "1", ")", ":", "i", "*", "(", "H", "+", "1", ")", "+", "H", ",", "j", "*", "(", "W", "+", "1", ")", ":", "j", "*", "(", "W", "+", "1", ")", "+", "W", "]", "=", "a_np", "[", ":", ",", ":", ",", "index", "]", "\n", "", "", "if", "not", "flag", ":", "\n", "\t\t\t", "break", "\n", "\n", "", "", "draw_image", "(", "image", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorDict.concat": [[10, 13], ["tensor.TensorDict"], "methods", ["None"], ["def", "concat", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Concatenates two dicts without copying internal data.\"\"\"", "\n", "return", "TensorDict", "(", "self", ",", "**", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorDict.copy": [[14, 16], ["tensor.TensorDict", "super().copy"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "TensorDict", "(", "super", "(", "TensorDict", ",", "self", ")", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorDict.__deepcopy__": [[17, 19], ["tensor.TensorDict", "copy.deepcopy", "list"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "def", "__deepcopy__", "(", "self", ",", "memodict", "=", "{", "}", ")", ":", "\n", "        ", "return", "TensorDict", "(", "copy", ".", "deepcopy", "(", "list", "(", "self", ")", ",", "memodict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorDict.__getattr__": [[20, 27], ["hasattr", "AttributeError", "tensor.TensorDict", "hasattr", "tensor.TensorDict.items", "getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "torch", ".", "Tensor", ",", "name", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "'\\'TensorDict\\' object has not attribute \\'{}\\''", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "def", "apply_attr", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "return", "TensorDict", "(", "{", "n", ":", "getattr", "(", "e", ",", "name", ")", "(", "*", "args", ",", "**", "kwargs", ")", "if", "hasattr", "(", "e", ",", "name", ")", "else", "e", "for", "n", ",", "e", "in", "self", ".", "items", "(", ")", "}", ")", "\n", "", "return", "apply_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorDict.attribute": [[28, 30], ["tensor.TensorDict", "getattr", "tensor.TensorDict.items"], "methods", ["None"], ["", "def", "attribute", "(", "self", ",", "attr", ":", "str", ",", "*", "args", ")", ":", "\n", "        ", "return", "TensorDict", "(", "{", "n", ":", "getattr", "(", "e", ",", "attr", ",", "*", "args", ")", "for", "n", ",", "e", "in", "self", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorDict.apply": [[31, 33], ["tensor.TensorDict", "fn", "tensor.TensorDict.items"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "TensorDict", "(", "{", "n", ":", "fn", "(", "e", ",", "*", "args", ",", "**", "kwargs", ")", "for", "n", ",", "e", "in", "self", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorDict._iterable": [[34, 37], ["isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_iterable", "(", "a", ")", ":", "\n", "        ", "return", "isinstance", "(", "a", ",", "(", "TensorDict", ",", "list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__init__": [[42, 46], ["list.__init__", "tensor.TensorList.list"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["def", "__init__", "(", "self", ",", "list_of_tensors", "=", "None", ")", ":", "\n", "        ", "if", "list_of_tensors", "is", "None", ":", "\n", "            ", "list_of_tensors", "=", "list", "(", ")", "\n", "", "super", "(", "TensorList", ",", "self", ")", ".", "__init__", "(", "list_of_tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__deepcopy__": [[47, 49], ["tensor.TensorList", "copy.deepcopy", "tensor.TensorList.list"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "def", "__deepcopy__", "(", "self", ",", "memodict", "=", "{", "}", ")", ":", "\n", "        ", "return", "TensorList", "(", "copy", ".", "deepcopy", "(", "list", "(", "self", ")", ",", "memodict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__getitem__": [[50, 57], ["isinstance", "list.__getitem__", "isinstance", "tensor.TensorList", "tensor.TensorList", "list.__getitem__", "list.__getitem__"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.__getitem__", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.__getitem__", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "int", ")", ":", "\n", "            ", "return", "super", "(", "TensorList", ",", "self", ")", ".", "__getitem__", "(", "item", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "super", "(", "TensorList", ",", "self", ")", ".", "__getitem__", "(", "i", ")", "for", "i", "in", "item", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "TensorList", "(", "super", "(", "TensorList", ",", "self", ")", ".", "__getitem__", "(", "item", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__add__": [[58, 62], ["tensor.TensorList._iterable", "tensor.TensorList", "tensor.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "+", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "+", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__radd__": [[63, 67], ["tensor.TensorList._iterable", "tensor.TensorList", "tensor.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__radd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "+", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "+", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__iadd__": [[68, 76], ["tensor.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__iadd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "+=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "+=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__sub__": [[77, 81], ["tensor.TensorList._iterable", "tensor.TensorList", "tensor.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__sub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "-", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "-", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__rsub__": [[82, 86], ["tensor.TensorList._iterable", "tensor.TensorList", "tensor.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__rsub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "-", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "-", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__isub__": [[87, 95], ["tensor.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__isub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "-=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "-=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__mul__": [[96, 100], ["tensor.TensorList._iterable", "tensor.TensorList", "tensor.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "*", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "*", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__rmul__": [[101, 105], ["tensor.TensorList._iterable", "tensor.TensorList", "tensor.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__rmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "*", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "*", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__imul__": [[106, 114], ["tensor.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__imul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "*=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "*=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__truediv__": [[115, 119], ["tensor.TensorList._iterable", "tensor.TensorList", "tensor.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__truediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "/", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "/", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__rtruediv__": [[120, 124], ["tensor.TensorList._iterable", "tensor.TensorList", "tensor.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__rtruediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "/", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "/", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__itruediv__": [[125, 133], ["tensor.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__itruediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "/=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "/=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__matmul__": [[134, 138], ["tensor.TensorList._iterable", "tensor.TensorList", "tensor.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__matmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "@", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "@", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__rmatmul__": [[139, 143], ["tensor.TensorList._iterable", "tensor.TensorList", "tensor.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__rmatmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "@", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "@", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__imatmul__": [[144, 152], ["tensor.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__imatmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "@=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "@=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__mod__": [[153, 157], ["tensor.TensorList._iterable", "tensor.TensorList", "tensor.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__mod__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "%", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "%", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__rmod__": [[158, 162], ["tensor.TensorList._iterable", "tensor.TensorList", "tensor.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__rmod__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "%", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "%", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__pos__": [[163, 165], ["tensor.TensorList"], "methods", ["None"], ["", "def", "__pos__", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "+", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__neg__": [[166, 168], ["tensor.TensorList"], "methods", ["None"], ["", "def", "__neg__", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "-", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__le__": [[169, 173], ["tensor.TensorList._iterable", "tensor.TensorList", "tensor.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__le__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "<=", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "<=", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__ge__": [[174, 178], ["tensor.TensorList._iterable", "tensor.TensorList", "tensor.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable"], ["", "def", "__ge__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", ">=", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", ">=", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.concat": [[179, 181], ["tensor.TensorList", "list.__add__"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.__add__"], ["", "def", "concat", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "TensorList", "(", "super", "(", "TensorList", ",", "self", ")", ".", "__add__", "(", "other", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.copy": [[182, 184], ["tensor.TensorList", "super().copy"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "super", "(", "TensorList", ",", "self", ")", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.unroll": [[185, 196], ["tensor.TensorList", "any", "isinstance", "TensorList.extend", "TensorList.append", "isinstance", "t.unroll"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.unroll"], ["", "def", "unroll", "(", "self", ")", ":", "\n", "        ", "if", "not", "any", "(", "isinstance", "(", "t", ",", "TensorList", ")", "for", "t", "in", "self", ")", ":", "\n", "            ", "return", "self", "\n", "\n", "", "new_list", "=", "TensorList", "(", ")", "\n", "for", "t", "in", "self", ":", "\n", "            ", "if", "isinstance", "(", "t", ",", "TensorList", ")", ":", "\n", "                ", "new_list", ".", "extend", "(", "t", ".", "unroll", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "new_list", ".", "append", "(", "t", ")", "\n", "", "", "return", "new_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list": [[197, 199], ["tensor.TensorList.list"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "def", "list", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.attribute": [[200, 202], ["tensor.TensorList", "getattr"], "methods", ["None"], ["", "def", "attribute", "(", "self", ",", "attr", ":", "str", ",", "*", "args", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "getattr", "(", "e", ",", "attr", ",", "*", "args", ")", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.apply": [[203, 205], ["tensor.TensorList", "fn"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "fn", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "fn", "(", "e", ")", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.__getattr__": [[206, 214], ["hasattr", "AttributeError", "tensor.TensorList", "getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "torch", ".", "Tensor", ",", "name", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "'\\'TensorList\\' object has not attribute \\'{}\\''", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "def", "apply_attr", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "getattr", "(", "e", ",", "name", ")", "(", "*", "args", ",", "**", "kwargs", ")", "for", "e", "in", "self", "]", ")", "\n", "\n", "", "return", "apply_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList._iterable": [[215, 218], ["isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_iterable", "(", "a", ")", ":", "\n", "        ", "return", "isinstance", "(", "a", ",", "(", "TensorList", ",", "list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.tensor_operation": [[220, 245], ["functools.wraps", "isinstance", "op", "len", "ValueError", "len", "tensor.tensor_operation.islist"], "function", ["None"], ["", "", "def", "tensor_operation", "(", "op", ")", ":", "\n", "    ", "def", "islist", "(", "a", ")", ":", "\n", "        ", "return", "isinstance", "(", "a", ",", "TensorList", ")", "\n", "\n", "", "@", "functools", ".", "wraps", "(", "op", ")", "\n", "def", "oplist", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Must be at least one argument without keyword (i.e. operand).'", ")", "\n", "\n", "", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "if", "islist", "(", "args", "[", "0", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "[", "op", "(", "a", ",", "**", "kwargs", ")", "for", "a", "in", "args", "[", "0", "]", "]", ")", "\n", "", "", "else", ":", "\n", "# Multiple operands, assume max two", "\n", "            ", "if", "islist", "(", "args", "[", "0", "]", ")", "and", "islist", "(", "args", "[", "1", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "[", "op", "(", "a", ",", "b", ",", "*", "args", "[", "2", ":", "]", ",", "**", "kwargs", ")", "for", "a", ",", "b", "in", "zip", "(", "*", "args", "[", ":", "2", "]", ")", "]", ")", "\n", "", "if", "islist", "(", "args", "[", "0", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "[", "op", "(", "a", ",", "*", "args", "[", "1", ":", "]", ",", "**", "kwargs", ")", "for", "a", "in", "args", "[", "0", "]", "]", ")", "\n", "", "if", "islist", "(", "args", "[", "1", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "[", "op", "(", "args", "[", "0", "]", ",", "b", ",", "*", "args", "[", "2", ":", "]", ",", "**", "kwargs", ")", "for", "b", "in", "args", "[", "1", "]", "]", ")", "\n", "\n", "# None of the operands are lists", "\n", "", "", "return", "op", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "oplist", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.transform_got10k.transform_got10k": [[8, 42], ["lib.test.evaluation.environment.env_settings", "os.path.join", "os.path.join", "os.listdir", "shutil.make_archive", "shutil.make_archive", "shutil.rmtree", "shutil.rmtree", "os.path.exists", "os.makedirs", "os.path.join", "item.replace", "os.path.join", "item.replace", "os.path.join", "numpy.loadtxt", "numpy.savetxt", "item.replace", "os.path.join", "os.path.join", "os.system", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings"], ["def", "transform_got10k", "(", "tracker_name", ",", "cfg_name", ")", ":", "\n", "    ", "env", "=", "env_settings", "(", ")", "\n", "result_dir", "=", "env", ".", "results_path", "\n", "src_dir", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "\"%s/%s/got10k/\"", "%", "(", "tracker_name", ",", "cfg_name", ")", ")", "\n", "dest_dir", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "\"%s/%s/got10k_submit/\"", "%", "(", "tracker_name", ",", "cfg_name", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dest_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dest_dir", ")", "\n", "", "items", "=", "os", ".", "listdir", "(", "src_dir", ")", "\n", "for", "item", "in", "items", ":", "\n", "        ", "if", "\"all\"", "in", "item", ":", "\n", "            ", "continue", "\n", "", "src_path", "=", "os", ".", "path", ".", "join", "(", "src_dir", ",", "item", ")", "\n", "if", "\"time\"", "not", "in", "item", ":", "\n", "            ", "seq_name", "=", "item", ".", "replace", "(", "\".txt\"", ",", "''", ")", "\n", "seq_dir", "=", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "seq_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "seq_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "seq_dir", ")", "\n", "", "new_item", "=", "item", ".", "replace", "(", "\".txt\"", ",", "'_001.txt'", ")", "\n", "dest_path", "=", "os", ".", "path", ".", "join", "(", "seq_dir", ",", "new_item", ")", "\n", "bbox_arr", "=", "np", ".", "loadtxt", "(", "src_path", ",", "dtype", "=", "np", ".", "int", ",", "delimiter", "=", "'\\t'", ")", "\n", "np", ".", "savetxt", "(", "dest_path", ",", "bbox_arr", ",", "fmt", "=", "'%d'", ",", "delimiter", "=", "','", ")", "\n", "", "else", ":", "\n", "            ", "seq_name", "=", "item", ".", "replace", "(", "\"_time.txt\"", ",", "''", ")", "\n", "seq_dir", "=", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "seq_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "seq_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "seq_dir", ")", "\n", "", "dest_path", "=", "os", ".", "path", ".", "join", "(", "seq_dir", ",", "item", ")", "\n", "os", ".", "system", "(", "\"cp %s %s\"", "%", "(", "src_path", ",", "dest_path", ")", ")", "\n", "# make zip archive", "\n", "", "", "shutil", ".", "make_archive", "(", "src_dir", ",", "\"zip\"", ",", "src_dir", ")", "\n", "shutil", ".", "make_archive", "(", "dest_dir", ",", "\"zip\"", ",", "dest_dir", ")", "\n", "# Remove the original files", "\n", "shutil", ".", "rmtree", "(", "src_dir", ")", "\n", "shutil", ".", "rmtree", "(", "dest_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.transform_trackingnet.transform_trackingnet": [[8, 30], ["lib.test.evaluation.environment.env_settings", "os.path.join", "os.path.join", "os.listdir", "shutil.make_archive", "shutil.make_archive", "shutil.rmtree", "shutil.rmtree", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "numpy.loadtxt", "numpy.savetxt"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings"], ["def", "transform_trackingnet", "(", "tracker_name", ",", "cfg_name", ")", ":", "\n", "    ", "env", "=", "env_settings", "(", ")", "\n", "result_dir", "=", "env", ".", "results_path", "\n", "src_dir", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "\"%s/%s/trackingnet/\"", "%", "(", "tracker_name", ",", "cfg_name", ")", ")", "\n", "dest_dir", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "\"%s/%s/trackingnet_submit/\"", "%", "(", "tracker_name", ",", "cfg_name", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dest_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dest_dir", ")", "\n", "", "items", "=", "os", ".", "listdir", "(", "src_dir", ")", "\n", "for", "item", "in", "items", ":", "\n", "        ", "if", "\"all\"", "in", "item", ":", "\n", "            ", "continue", "\n", "", "if", "\"time\"", "not", "in", "item", ":", "\n", "            ", "src_path", "=", "os", ".", "path", ".", "join", "(", "src_dir", ",", "item", ")", "\n", "dest_path", "=", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "item", ")", "\n", "bbox_arr", "=", "np", ".", "loadtxt", "(", "src_path", ",", "dtype", "=", "np", ".", "int", ",", "delimiter", "=", "'\\t'", ")", "\n", "np", ".", "savetxt", "(", "dest_path", ",", "bbox_arr", ",", "fmt", "=", "'%d'", ",", "delimiter", "=", "','", ")", "\n", "# make zip archive", "\n", "", "", "shutil", ".", "make_archive", "(", "src_dir", ",", "\"zip\"", ",", "src_dir", ")", "\n", "shutil", ".", "make_archive", "(", "dest_dir", ",", "\"zip\"", ",", "dest_dir", ")", "\n", "# Remove the original files", "\n", "shutil", ".", "rmtree", "(", "src_dir", ")", "\n", "shutil", ".", "rmtree", "(", "dest_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text_numpy": [[5, 18], ["isinstance", "Exception", "numpy.loadtxt", "numpy.loadtxt"], "function", ["None"], ["def", "load_text_numpy", "(", "path", ",", "delimiter", ",", "dtype", ")", ":", "\n", "    ", "if", "isinstance", "(", "delimiter", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "for", "d", "in", "delimiter", ":", "\n", "            ", "try", ":", "\n", "                ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "path", ",", "delimiter", "=", "d", ",", "dtype", "=", "dtype", ")", "\n", "return", "ground_truth_rect", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "", "raise", "Exception", "(", "'Could not read file {}'", ".", "format", "(", "path", ")", ")", "\n", "", "else", ":", "\n", "        ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "path", ",", "delimiter", "=", "delimiter", ",", "dtype", "=", "dtype", ")", "\n", "return", "ground_truth_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text_pandas": [[20, 35], ["isinstance", "Exception", "pandas.read_csv", "pandas.read_csv"], "function", ["None"], ["", "", "def", "load_text_pandas", "(", "path", ",", "delimiter", ",", "dtype", ")", ":", "\n", "    ", "if", "isinstance", "(", "delimiter", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "for", "d", "in", "delimiter", ":", "\n", "            ", "try", ":", "\n", "                ", "ground_truth_rect", "=", "pd", ".", "read_csv", "(", "path", ",", "delimiter", "=", "d", ",", "header", "=", "None", ",", "dtype", "=", "dtype", ",", "na_filter", "=", "False", ",", "\n", "low_memory", "=", "False", ")", ".", "values", "\n", "return", "ground_truth_rect", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "pass", "\n", "\n", "", "", "raise", "Exception", "(", "'Could not read file {}'", ".", "format", "(", "path", ")", ")", "\n", "", "else", ":", "\n", "        ", "ground_truth_rect", "=", "pd", ".", "read_csv", "(", "path", ",", "delimiter", "=", "delimiter", ",", "header", "=", "None", ",", "dtype", "=", "dtype", ",", "na_filter", "=", "False", ",", "\n", "low_memory", "=", "False", ")", ".", "values", "\n", "return", "ground_truth_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text": [[37, 42], ["load_text.load_text_numpy", "load_text.load_text_pandas"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text_numpy", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text_pandas"], ["", "", "def", "load_text", "(", "path", ",", "delimiter", "=", "' '", ",", "dtype", "=", "np", ".", "float32", ",", "backend", "=", "'numpy'", ")", ":", "\n", "    ", "if", "backend", "==", "'numpy'", ":", "\n", "        ", "return", "load_text_numpy", "(", "path", ",", "delimiter", ",", "dtype", ")", "\n", "", "elif", "backend", "==", "'pandas'", ":", "\n", "        ", "return", "load_text_pandas", "(", "path", ",", "delimiter", ",", "dtype", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.params.TrackerParams.set_default_values": [[7, 11], ["default_vals.items", "hasattr", "setattr"], "methods", ["None"], ["def", "set_default_values", "(", "self", ",", "default_vals", ":", "dict", ")", ":", "\n", "        ", "for", "name", ",", "val", "in", "default_vals", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "name", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "name", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.params.TrackerParams.get": [[12, 22], ["getattr", "len", "ValueError", "getattr"], "methods", ["None"], ["", "", "", "def", "get", "(", "self", ",", "name", ":", "str", ",", "*", "default", ")", ":", "\n", "        ", "\"\"\"Get a parameter value with the given name. If it does not exists, it return the default value given as a\n        second argument or returns an error if no default value is given.\"\"\"", "\n", "if", "len", "(", "default", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Can only give one default value.'", ")", "\n", "\n", "", "if", "not", "default", ":", "\n", "            ", "return", "getattr", "(", "self", ",", "name", ")", "\n", "\n", "", "return", "getattr", "(", "self", ",", "name", ",", "default", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.params.TrackerParams.has": [[23, 26], ["hasattr"], "methods", ["None"], ["", "def", "has", "(", "self", ",", "name", ":", "str", ")", ":", "\n", "        ", "\"\"\"Check if there exist a parameter with the given name.\"\"\"", "\n", "return", "hasattr", "(", "self", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.params.FeatureParams.__init__": [[30, 39], ["kwargs.items", "len", "isinstance", "setattr", "setattr", "lib.utils.TensorList"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "", "for", "name", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "name", ",", "TensorList", "(", "val", ")", ")", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "name", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.params.Choice": [[41, 44], ["random.choice"], "function", ["None"], ["", "", "", "", "def", "Choice", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"Can be used to sample random parameter values.\"\"\"", "\n", "return", "random", ".", "choice", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.vot20.vot.VOT.__init__": [[24, 57], ["trax.Server", "vot.VOT._trax.wait", "isinstance", "vot.VOT._trax.status", "Polygon", "isinstance", "x.path", "len", "dict", "vot.VOT.region.array", "Rectangle", "vot.VOT.image.items", "Point", "Exception", "vot.VOT.region.bounds"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "region_format", ",", "channels", "=", "None", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            region_format: Region format options\n        \"\"\"", "\n", "assert", "(", "region_format", "in", "[", "trax", ".", "Region", ".", "RECTANGLE", ",", "trax", ".", "Region", ".", "POLYGON", ",", "trax", ".", "Region", ".", "MASK", "]", ")", "\n", "\n", "if", "channels", "is", "None", ":", "\n", "            ", "channels", "=", "[", "'color'", "]", "\n", "", "elif", "channels", "==", "'rgbd'", ":", "\n", "            ", "channels", "=", "[", "'color'", ",", "'depth'", "]", "\n", "", "elif", "channels", "==", "'rgbt'", ":", "\n", "            ", "channels", "=", "[", "'color'", ",", "'ir'", "]", "\n", "", "elif", "channels", "==", "'ir'", ":", "\n", "            ", "channels", "=", "[", "'ir'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Illegal configuration {}.'", ".", "format", "(", "channels", ")", ")", "\n", "\n", "", "self", ".", "_trax", "=", "trax", ".", "Server", "(", "[", "region_format", "]", ",", "[", "trax", ".", "Image", ".", "PATH", "]", ",", "channels", ",", "customMetadata", "=", "dict", "(", "vot", "=", "\"python\"", ")", ")", "\n", "\n", "request", "=", "self", ".", "_trax", ".", "wait", "(", ")", "\n", "assert", "(", "request", ".", "type", "==", "'initialize'", ")", "\n", "if", "isinstance", "(", "request", ".", "region", ",", "trax", ".", "Polygon", ")", ":", "\n", "            ", "self", ".", "_region", "=", "Polygon", "(", "[", "Point", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "request", ".", "region", "]", ")", "\n", "", "elif", "isinstance", "(", "request", ".", "region", ",", "trax", ".", "Mask", ")", ":", "\n", "            ", "self", ".", "_region", "=", "request", ".", "region", ".", "array", "(", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_region", "=", "Rectangle", "(", "*", "request", ".", "region", ".", "bounds", "(", ")", ")", "\n", "", "self", ".", "_image", "=", "[", "x", ".", "path", "(", ")", "for", "k", ",", "x", "in", "request", ".", "image", ".", "items", "(", ")", "]", "\n", "if", "len", "(", "self", ".", "_image", ")", "==", "1", ":", "\n", "            ", "self", ".", "_image", "=", "self", ".", "_image", "[", "0", "]", "\n", "\n", "", "self", ".", "_trax", ".", "status", "(", "request", ".", "region", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.vot20.vot.VOT.region": [[58, 67], ["None"], "methods", ["None"], ["", "def", "region", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Send configuration message to the client and receive the initialization\n        region and the path of the first image\n        Returns:\n            initialization region\n        \"\"\"", "\n", "\n", "return", "self", ".", "_region", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.vot20.vot.VOT.report": [[68, 85], ["isinstance", "isinstance", "vot.VOT._trax.status", "trax.Polygon.create", "isinstance", "trax.Mask.create", "trax.Rectangle.create"], "methods", ["None"], ["", "def", "report", "(", "self", ",", "region", ",", "confidence", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Report the tracking results to the client\n        Arguments:\n            region: region for the frame\n        \"\"\"", "\n", "assert", "(", "isinstance", "(", "region", ",", "(", "Rectangle", ",", "Polygon", ",", "np", ".", "ndarray", ")", ")", ")", "\n", "if", "isinstance", "(", "region", ",", "Polygon", ")", ":", "\n", "            ", "tregion", "=", "trax", ".", "Polygon", ".", "create", "(", "[", "(", "x", ".", "x", ",", "x", ".", "y", ")", "for", "x", "in", "region", ".", "points", "]", ")", "\n", "", "elif", "isinstance", "(", "region", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "tregion", "=", "trax", ".", "Mask", ".", "create", "(", "region", ")", "\n", "", "else", ":", "\n", "            ", "tregion", "=", "trax", ".", "Rectangle", ".", "create", "(", "region", ".", "x", ",", "region", ".", "y", ",", "region", ".", "width", ",", "region", ".", "height", ")", "\n", "", "properties", "=", "{", "}", "\n", "if", "not", "confidence", "is", "None", ":", "\n", "            ", "properties", "[", "'confidence'", "]", "=", "confidence", "\n", "", "self", ".", "_trax", ".", "status", "(", "tregion", ",", "properties", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.vot20.vot.VOT.frame": [[86, 106], ["hasattr", "vot.VOT._trax.wait", "x.path", "len", "vot.VOT.image.items"], "methods", ["None"], ["", "def", "frame", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get a frame (image path) from client\n        Returns:\n            absolute path of the image\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"_image\"", ")", ":", "\n", "            ", "image", "=", "self", ".", "_image", "\n", "del", "self", ".", "_image", "\n", "return", "image", "\n", "\n", "", "request", "=", "self", ".", "_trax", ".", "wait", "(", ")", "\n", "\n", "if", "request", ".", "type", "==", "'frame'", ":", "\n", "            ", "image", "=", "[", "x", ".", "path", "(", ")", "for", "k", ",", "x", "in", "request", ".", "image", ".", "items", "(", ")", "]", "\n", "if", "len", "(", "image", ")", "==", "1", ":", "\n", "                ", "return", "image", "[", "0", "]", "\n", "", "return", "image", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.vot20.vot.VOT.quit": [[108, 111], ["hasattr", "vot.VOT._trax.quit"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.quit"], ["", "", "def", "quit", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'_trax'", ")", ":", "\n", "            ", "self", ".", "_trax", ".", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.vot20.vot.VOT.__del__": [[112, 114], ["vot.VOT.quit"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.quit"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "quit", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.vot20.cswintt_vot20.cswintt_vot20.__init__": [[16, 23], ["lib.test.evaluation.Tracker", "lib.test.evaluation.Tracker.get_parameters", "lib.test.evaluation.Tracker.create_tracker"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker.get_parameters", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker.create_tracker"], ["    ", "def", "__init__", "(", "self", ",", "tracker_name", "=", "'cswintt'", ",", "para_name", "=", "'baseline_cs'", ")", ":", "\n", "# create tracker", "\n", "        ", "tracker_info", "=", "Tracker", "(", "tracker_name", ",", "para_name", ",", "\"vot20\"", ",", "None", ")", "\n", "params", "=", "tracker_info", ".", "get_parameters", "(", ")", "\n", "params", ".", "visualization", "=", "False", "\n", "params", ".", "debug", "=", "False", "\n", "self", ".", "tracker", "=", "tracker_info", ".", "create_tracker", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.vot20.cswintt_vot20.cswintt_vot20.initialize": [[24, 32], ["cswintt_vot20.cswintt_vot20.tracker.initialize", "np.array"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.basetracker.BaseTracker.initialize"], ["", "def", "initialize", "(", "self", ",", "img_rgb", ",", "mask", "=", "None", ")", ":", "\n", "# init on the 1st frame", "\n", "# region = rect_from_mask(mask)", "\n", "        ", "region", "=", "mask", "\n", "self", ".", "H", ",", "self", ".", "W", ",", "_", "=", "img_rgb", ".", "shape", "\n", "# init_info = {'init_bbox': region}", "\n", "init_info", "=", "{", "'init_bbox'", ":", "np", ".", "array", "(", "[", "region", ".", "x", ",", "region", ".", "y", ",", "region", ".", "width", ",", "region", ".", "height", "]", ",", "dtype", "=", "np", ".", "float", ")", "}", "\n", "_", "=", "self", ".", "tracker", ".", "initialize", "(", "img_rgb", ",", "init_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.vot20.cswintt_vot20.cswintt_vot20.track": [[33, 42], ["cswintt_vot20.cswintt_vot20.tracker.track", "vot.Rectangle"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.basetracker.BaseTracker.track"], ["", "def", "track", "(", "self", ",", "img_rgb", ")", ":", "\n", "# track", "\n", "# return {\"target_bbox\": self.state,", "\n", "#         \"conf_score\": conf_score}", "\n", "        ", "outputs", "=", "self", ".", "tracker", ".", "track", "(", "img_rgb", ")", "\n", "pred_bbox", "=", "outputs", "[", "'target_bbox'", "]", "\n", "pred_bbox", "=", "vot", ".", "Rectangle", "(", "pred_bbox", "[", "0", "]", ",", "pred_bbox", "[", "1", "]", ",", "pred_bbox", "[", "2", "]", ",", "pred_bbox", "[", "3", "]", ")", "\n", "# final_mask = mask_from_rect(pred_bbox, (self.W, self.H))", "\n", "return", "pred_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.vot20.cswintt_vot20.run_vot_exp": [[43, 77], ["torch.set_num_threads", "cswintt_vot20.cswintt_vot20", "vot.VOT", "vot.VOT.region", "vot.VOT.frame", "cv2.cvtColor", "cswintt_vot20.initialize", "os.mkdir", "sys.exit", "os.path.join", "int", "os.path.join", "cv2.imread", "vot.VOT.frame", "cv2.cvtColor", "cswintt_vot20.track", "vot.VOT.report", "os.path.exists", "handle.frame.split", "os.path.exists", "os.mkdir", "str", "os.path.exists", "os.makedirs", "cv2.imread", "time.time"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.region", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.frame", "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.basetracker.BaseTracker.initialize", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.frame", "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.basetracker.BaseTracker.track", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.report"], ["", "", "def", "run_vot_exp", "(", "tracker_name", "=", "\"cswintt\"", ",", "para_name", "=", "\"baseline_cs\"", ",", "vis", "=", "False", ")", ":", "\n", "    ", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "save_root", "=", "''", "\n", "if", "vis", "and", "(", "not", "os", ".", "path", ".", "exists", "(", "save_root", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_root", ")", "\n", "", "tracker", "=", "cswintt_vot20", "(", "tracker_name", "=", "tracker_name", ",", "para_name", "=", "para_name", ")", "\n", "handle", "=", "vot", ".", "VOT", "(", "\"rectangle\"", ")", "\n", "selection", "=", "handle", ".", "region", "(", ")", "\n", "imagefile", "=", "handle", ".", "frame", "(", ")", "\n", "if", "not", "imagefile", ":", "\n", "        ", "sys", ".", "exit", "(", "0", ")", "\n", "", "if", "vis", ":", "\n", "        ", "'''for vis'''", "\n", "seq_name", "=", "imagefile", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "save_v_dir", "=", "os", ".", "path", ".", "join", "(", "save_root", ",", "seq_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_v_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "save_v_dir", ")", "\n", "", "cur_time", "=", "int", "(", "time", ".", "time", "(", ")", "%", "10000", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "save_v_dir", ",", "str", "(", "cur_time", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "", "image", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "imagefile", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "# Right", "\n", "# mask given by the toolkit ends with the target (zero-padding to the right and down is needed)", "\n", "# mask = make_full_size(selection, (image.shape[1], image.shape[0]))", "\n", "tracker", ".", "initialize", "(", "image", ",", "selection", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "imagefile", "=", "handle", ".", "frame", "(", ")", "\n", "if", "not", "imagefile", ":", "\n", "            ", "break", "\n", "", "image", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "imagefile", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "# Right", "\n", "b1", "=", "tracker", ".", "track", "(", "image", ")", "\n", "handle", ".", "report", "(", "b1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.vot20.vot20_utils.make_full_size": [[4, 23], ["numpy.pad"], "function", ["None"], ["def", "make_full_size", "(", "x", ",", "output_sz", ")", ":", "\n", "    ", "\"\"\"\n    zero-pad input x (right and down) to match output_sz\n    x: numpy array e.g., binary mask\n    output_sz: size of the output [width, height]\n    \"\"\"", "\n", "if", "x", ".", "shape", "[", "0", "]", "==", "output_sz", "[", "1", "]", "and", "x", ".", "shape", "[", "1", "]", "==", "output_sz", "[", "0", "]", ":", "\n", "        ", "return", "x", "\n", "", "pad_x", "=", "output_sz", "[", "0", "]", "-", "x", ".", "shape", "[", "1", "]", "\n", "if", "pad_x", "<", "0", ":", "\n", "        ", "x", "=", "x", "[", ":", ",", ":", "x", ".", "shape", "[", "1", "]", "+", "pad_x", "]", "\n", "# padding has to be set to zero, otherwise pad function fails", "\n", "pad_x", "=", "0", "\n", "", "pad_y", "=", "output_sz", "[", "1", "]", "-", "x", ".", "shape", "[", "0", "]", "\n", "if", "pad_y", "<", "0", ":", "\n", "        ", "x", "=", "x", "[", ":", "x", ".", "shape", "[", "0", "]", "+", "pad_y", ",", ":", "]", "\n", "# padding has to be set to zero, otherwise pad function fails", "\n", "pad_y", "=", "0", "\n", "", "return", "np", ".", "pad", "(", "x", ",", "(", "(", "0", ",", "pad_y", ")", ",", "(", "0", ",", "pad_x", ")", ")", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.vot20.vot20_utils.rect_from_mask": [[25, 37], ["numpy.sum", "numpy.sum", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.nonzero", "numpy.nonzero", "numpy.nonzero", "numpy.nonzero"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "def", "rect_from_mask", "(", "mask", ")", ":", "\n", "    ", "\"\"\"\n    create an axis-aligned rectangle from a given binary mask\n    mask in created as a minimal rectangle containing all non-zero pixels\n    \"\"\"", "\n", "x_", "=", "np", ".", "sum", "(", "mask", ",", "axis", "=", "0", ")", "\n", "y_", "=", "np", ".", "sum", "(", "mask", ",", "axis", "=", "1", ")", "\n", "x0", "=", "np", ".", "min", "(", "np", ".", "nonzero", "(", "x_", ")", ")", "\n", "x1", "=", "np", ".", "max", "(", "np", ".", "nonzero", "(", "x_", ")", ")", "\n", "y0", "=", "np", ".", "min", "(", "np", ".", "nonzero", "(", "y_", ")", ")", "\n", "y1", "=", "np", ".", "max", "(", "np", ".", "nonzero", "(", "y_", ")", ")", "\n", "return", "[", "x0", ",", "y0", ",", "x1", "-", "x0", "+", "1", ",", "y1", "-", "y0", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.vot20.vot20_utils.mask_from_rect": [[39, 52], ["numpy.zeros", "max", "max", "min", "min", "int", "int", "int", "int", "round", "round", "round", "round"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "def", "mask_from_rect", "(", "rect", ",", "output_sz", ")", ":", "\n", "    ", "\"\"\"\n    create a binary mask from a given rectangle\n    rect: axis-aligned rectangle [x0, y0, width, height]\n    output_sz: size of the output [width, height]\n    \"\"\"", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "output_sz", "[", "1", "]", ",", "output_sz", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "x0", "=", "max", "(", "int", "(", "round", "(", "rect", "[", "0", "]", ")", ")", ",", "0", ")", "\n", "y0", "=", "max", "(", "int", "(", "round", "(", "rect", "[", "1", "]", ")", ")", ",", "0", ")", "\n", "x1", "=", "min", "(", "int", "(", "round", "(", "rect", "[", "0", "]", "+", "rect", "[", "2", "]", ")", ")", ",", "output_sz", "[", "0", "]", ")", "\n", "y1", "=", "min", "(", "int", "(", "round", "(", "rect", "[", "1", "]", "+", "rect", "[", "3", "]", ")", ")", ",", "output_sz", "[", "1", "]", ")", "\n", "mask", "[", "y0", ":", "y1", ",", "x0", ":", "x1", "]", "=", "1", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.vot20.vot20_utils.bbox_clip": [[54, 61], ["max", "max", "max", "max", "min", "min", "min", "min"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "def", "bbox_clip", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "boundary", ",", "min_sz", "=", "10", ")", ":", "\n", "    ", "\"\"\"boundary (H,W)\"\"\"", "\n", "x1_new", "=", "max", "(", "0", ",", "min", "(", "x1", ",", "boundary", "[", "1", "]", "-", "min_sz", ")", ")", "\n", "y1_new", "=", "max", "(", "0", ",", "min", "(", "y1", ",", "boundary", "[", "0", "]", "-", "min_sz", ")", ")", "\n", "x2_new", "=", "max", "(", "min_sz", ",", "min", "(", "x2", ",", "boundary", "[", "1", "]", ")", ")", "\n", "y2_new", "=", "max", "(", "min_sz", ",", "min", "(", "y2", ",", "boundary", "[", "0", "]", ")", ")", "\n", "return", "x1_new", ",", "y1_new", ",", "x2_new", ",", "y2_new", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.parameter.cswintt.parameters": [[5, 28], ["lib.test.utils.TrackerParams", "os.path.join", "lib.config.cswintt_cls.config.update_config_from_file", "print", "os.path.join", "lib.test.evaluation.environment.env_settings", "lib.test.evaluation.environment.env_settings"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.config.update_config_from_file", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings"], ["def", "parameters", "(", "yaml_name", ":", "str", ")", ":", "\n", "    ", "params", "=", "TrackerParams", "(", ")", "\n", "prj_dir", "=", "env_settings", "(", ")", ".", "prj_dir", "\n", "save_dir", "=", "env_settings", "(", ")", ".", "save_dir", "\n", "# update default config from yaml file", "\n", "yaml_file", "=", "os", ".", "path", ".", "join", "(", "prj_dir", ",", "'experiments/cswintt_cls/%s.yaml'", "%", "yaml_name", ")", "\n", "update_config_from_file", "(", "yaml_file", ")", "\n", "params", ".", "cfg", "=", "cfg", "\n", "print", "(", "\"test config: \"", ",", "cfg", ")", "\n", "\n", "# template and search region", "\n", "params", ".", "template_factor", "=", "cfg", ".", "TEST", ".", "TEMPLATE_FACTOR", "\n", "params", ".", "template_size", "=", "cfg", ".", "TEST", ".", "TEMPLATE_SIZE", "\n", "params", ".", "search_factor", "=", "cfg", ".", "TEST", ".", "SEARCH_FACTOR", "\n", "params", ".", "search_size", "=", "cfg", ".", "TEST", ".", "SEARCH_SIZE", "\n", "\n", "# Network checkpoint path", "\n", "params", ".", "checkpoint_cls", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"checkpoints/CSWinTT.pth\"", ")", "\n", "\n", "# whether to save boxes from all queries", "\n", "params", ".", "save_all_boxes", "=", "False", "\n", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.text_bargraph": [[7, 22], ["numpy.array", "numpy.array", "numpy.isnan", "str.join", "len", "len"], "function", ["None"], ["def", "text_bargraph", "(", "values", ")", ":", "\n", "\n", "    ", "blocks", "=", "np", ".", "array", "(", "(", "'u'", ",", "' '", ",", "'\u2581'", ",", "'\u2582'", ",", "'\u2583'", ",", "'\u2584'", ",", "'\u2585'", ",", "'\u2586'", ",", "'\u2587'", ",", "'\u2588'", ",", "'o'", ")", ")", "\n", "nsteps", "=", "len", "(", "blocks", ")", "-", "2", "-", "1", "\n", "hstep", "=", "1", "/", "(", "2", "*", "nsteps", ")", "\n", "values", "=", "np", ".", "array", "(", "values", ")", "\n", "nans", "=", "np", ".", "isnan", "(", "values", ")", "\n", "values", "[", "nans", "]", "=", "0", "# '\u2591'", "\n", "indices", "=", "(", "(", "values", "+", "hstep", ")", "*", "nsteps", "+", "1", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "indices", "[", "values", "<", "0", "]", "=", "0", "\n", "indices", "[", "values", ">", "1", "]", "=", "len", "(", "blocks", ")", "-", "1", "\n", "graph", "=", "blocks", "[", "indices", "]", "\n", "graph", "[", "nans", "]", "=", "'\u2591'", "\n", "graph", "=", "str", ".", "join", "(", "''", ",", "graph", ")", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.davis_jaccard_measure": [[34, 50], ["gt_mask.astype.astype", "fg_mask.astype.astype", "numpy.isclose", "numpy.isclose", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "davis_jaccard_measure", "(", "fg_mask", ",", "gt_mask", ")", ":", "\n", "    ", "\"\"\" Compute region similarity as the Jaccard Index.\n\n    :param fg_mask: (ndarray): binary segmentation map.\n    :param gt_mask: (ndarray): binary annotation map.\n    :return: jaccard (float): region similarity\n    \"\"\"", "\n", "\n", "gt_mask", "=", "gt_mask", ".", "astype", "(", "np", ".", "bool", ")", "\n", "fg_mask", "=", "fg_mask", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "if", "np", ".", "isclose", "(", "np", ".", "sum", "(", "gt_mask", ")", ",", "0", ")", "and", "np", ".", "isclose", "(", "np", ".", "sum", "(", "fg_mask", ")", ",", "0", ")", ":", "\n", "        ", "return", "1", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "sum", "(", "(", "gt_mask", "&", "fg_mask", ")", ")", "/", "np", ".", "sum", "(", "(", "gt_mask", "|", "fg_mask", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.davis_jaccard_measure_torch": [[52, 68], ["gt_mask.sum", "fg_mask.sum"], "function", ["None"], ["", "", "def", "davis_jaccard_measure_torch", "(", "fg_mask", ",", "gt_mask", ")", ":", "\n", "    ", "\"\"\" Compute region similarity as the Jaccard Index.\n\n    :param fg_mask: (ndarray): binary segmentation map.\n    :param gt_mask: (ndarray): binary annotation map.\n    :return: jaccard (float): region similarity\n    \"\"\"", "\n", "\n", "#gt_mask = gt_mask.astype(np.bool)", "\n", "#fg_mask = fg_mask.astype(np.bool)", "\n", "\n", "if", "gt_mask", ".", "sum", "(", ")", "==", "0", "and", "fg_mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "return", "1", "\n", "", "else", ":", "\n", "        ", "return", "(", "gt_mask", "&", "fg_mask", ")", ".", "sum", "(", ")", "/", "(", "gt_mask", "|", "fg_mask", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.davis_f_measure": [[70, 126], ["vos_utils.seg2bmap", "vos_utils.seg2bmap", "skimage.morphology.binary_dilation", "skimage.morphology.binary_dilation", "numpy.sum", "numpy.sum", "numpy.ceil", "skimage.morphology.disk", "skimage.morphology.disk", "numpy.atleast_3d", "numpy.linalg.norm", "numpy.sum", "float", "numpy.sum", "float"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.seg2bmap", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.seg2bmap"], ["", "", "def", "davis_f_measure", "(", "foreground_mask", ",", "gt_mask", ",", "bound_th", "=", "0.008", ")", ":", "\n", "    ", "\"\"\"\n    Compute mean,recall and decay from per-frame evaluation.\n    Calculates precision/recall for boundaries between foreground_mask and\n    gt_mask using morphological operators to speed it up.\n\n    Arguments:\n        foreground_mask (ndarray): binary segmentation image.\n        gt_mask         (ndarray): binary annotated image.\n\n    Returns:\n        F (float): boundaries F-measure\n        P (float): boundaries precision\n        R (float): boundaries recall\n    \"\"\"", "\n", "assert", "np", ".", "atleast_3d", "(", "foreground_mask", ")", ".", "shape", "[", "2", "]", "==", "1", "\n", "\n", "bound_pix", "=", "bound_th", "if", "bound_th", ">=", "1", "else", "np", ".", "ceil", "(", "bound_th", "*", "np", ".", "linalg", ".", "norm", "(", "foreground_mask", ".", "shape", ")", ")", "\n", "\n", "# Get the pixel boundaries of both masks", "\n", "fg_boundary", "=", "seg2bmap", "(", "foreground_mask", ")", "\n", "gt_boundary", "=", "seg2bmap", "(", "gt_mask", ")", "\n", "\n", "fg_dil", "=", "binary_dilation", "(", "fg_boundary", ",", "disk", "(", "bound_pix", ")", ")", "\n", "gt_dil", "=", "binary_dilation", "(", "gt_boundary", ",", "disk", "(", "bound_pix", ")", ")", "\n", "\n", "# Get the intersection", "\n", "gt_match", "=", "gt_boundary", "*", "fg_dil", "\n", "fg_match", "=", "fg_boundary", "*", "gt_dil", "\n", "\n", "# Area of the intersection", "\n", "n_fg", "=", "np", ".", "sum", "(", "fg_boundary", ")", "\n", "n_gt", "=", "np", ".", "sum", "(", "gt_boundary", ")", "\n", "\n", "# % Compute precision and recall", "\n", "if", "n_fg", "==", "0", "and", "n_gt", ">", "0", ":", "\n", "        ", "precision", "=", "1", "\n", "recall", "=", "0", "\n", "", "elif", "n_fg", ">", "0", "and", "n_gt", "==", "0", ":", "\n", "        ", "precision", "=", "0", "\n", "recall", "=", "1", "\n", "", "elif", "n_fg", "==", "0", "and", "n_gt", "==", "0", ":", "\n", "        ", "precision", "=", "1", "\n", "recall", "=", "1", "\n", "", "else", ":", "\n", "        ", "precision", "=", "np", ".", "sum", "(", "fg_match", ")", "/", "float", "(", "n_fg", ")", "\n", "recall", "=", "np", ".", "sum", "(", "gt_match", ")", "/", "float", "(", "n_gt", ")", "\n", "\n", "# Compute F measure", "\n", "", "if", "precision", "+", "recall", "==", "0", ":", "\n", "        ", "F", "=", "0", "\n", "", "else", ":", "\n", "        ", "F", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "\n", "", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.seg2bmap": [[128, 187], ["seg.astype.astype", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "float", "float", "float", "float", "numpy.zeros", "range", "range", "numpy.atleast_3d", "abs", "math.floor", "math.floor"], "function", ["None"], ["", "def", "seg2bmap", "(", "seg", ",", "width", "=", "None", ",", "height", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    From a segmentation, compute a binary boundary map with 1 pixel wide\n    boundaries.  The boundary pixels are offset by 1/2 pixel towards the\n    origin from the actual segment boundary.\n\n    Arguments:\n        seg     : Segments labeled from 1..k.\n        width\t  :\tWidth of desired bmap  <= seg.shape[1]\n        height  :\tHeight of desired bmap <= seg.shape[0]\n\n    Returns:\n        bmap (ndarray):\tBinary boundary map.\n\n     David Martin <dmartin@eecs.berkeley.edu>\n     January 2003\n \"\"\"", "\n", "\n", "seg", "=", "seg", ".", "astype", "(", "np", ".", "bool", ")", "\n", "seg", "[", "seg", ">", "0", "]", "=", "1", "\n", "\n", "assert", "np", ".", "atleast_3d", "(", "seg", ")", ".", "shape", "[", "2", "]", "==", "1", "\n", "\n", "width", "=", "seg", ".", "shape", "[", "1", "]", "if", "width", "is", "None", "else", "width", "\n", "height", "=", "seg", ".", "shape", "[", "0", "]", "if", "height", "is", "None", "else", "height", "\n", "\n", "h", ",", "w", "=", "seg", ".", "shape", "[", ":", "2", "]", "\n", "\n", "ar1", "=", "float", "(", "width", ")", "/", "float", "(", "height", ")", "\n", "ar2", "=", "float", "(", "w", ")", "/", "float", "(", "h", ")", "\n", "\n", "assert", "not", "(", "width", ">", "w", "|", "height", ">", "h", "|", "abs", "(", "ar1", "-", "ar2", ")", ">", "0.01", ")", ",", "'Can'", "'t convert %dx%d seg to %dx%d bmap.'", "%", "(", "w", ",", "h", ",", "width", ",", "height", ")", "\n", "\n", "e", "=", "np", ".", "zeros_like", "(", "seg", ")", "\n", "s", "=", "np", ".", "zeros_like", "(", "seg", ")", "\n", "se", "=", "np", ".", "zeros_like", "(", "seg", ")", "\n", "\n", "e", "[", ":", ",", ":", "-", "1", "]", "=", "seg", "[", ":", ",", "1", ":", "]", "\n", "s", "[", ":", "-", "1", ",", ":", "]", "=", "seg", "[", "1", ":", ",", ":", "]", "\n", "se", "[", ":", "-", "1", ",", ":", "-", "1", "]", "=", "seg", "[", "1", ":", ",", "1", ":", "]", "\n", "\n", "b", "=", "seg", "^", "e", "|", "seg", "^", "s", "|", "seg", "^", "se", "\n", "b", "[", "-", "1", ",", ":", "]", "=", "seg", "[", "-", "1", ",", ":", "]", "^", "e", "[", "-", "1", ",", ":", "]", "\n", "b", "[", ":", ",", "-", "1", "]", "=", "seg", "[", ":", ",", "-", "1", "]", "^", "s", "[", ":", ",", "-", "1", "]", "\n", "b", "[", "-", "1", ",", "-", "1", "]", "=", "0", "\n", "\n", "if", "w", "==", "width", "and", "h", "==", "height", ":", "\n", "        ", "bmap", "=", "b", "\n", "", "else", ":", "\n", "        ", "bmap", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "\n", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "                ", "if", "b", "[", "y", ",", "x", "]", ":", "\n", "                    ", "j", "=", "1", "+", "floor", "(", "(", "y", "-", "1", ")", "+", "height", "/", "h", ")", "\n", "i", "=", "1", "+", "floor", "(", "(", "x", "-", "1", ")", "+", "width", "/", "h", ")", "\n", "bmap", "[", "j", ",", "i", "]", "=", "1", "\n", "\n", "", "", "", "", "return", "bmap", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.nanmean": [[189, 193], ["warnings.catch_warnings", "warnings.simplefilter", "numpy.nanmean"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.nanmean"], ["", "def", "nanmean", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ",", "category", "=", "RuntimeWarning", ")", "\n", "return", "np", ".", "nanmean", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean": [[195, 200], ["numpy.nanmean"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.nanmean"], ["", "", "def", "mean", "(", "X", ")", ":", "\n", "    ", "\"\"\"\n    Compute average ignoring NaN values.\n    \"\"\"", "\n", "return", "np", ".", "nanmean", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.recall": [[202, 211], ["warnings.catch_warnings", "warnings.simplefilter", "vos_utils.mean", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean"], ["", "def", "recall", "(", "X", ",", "threshold", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"\n    Fraction of values of X scoring higher than 'threshold'\n    \"\"\"", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ",", "category", "=", "RuntimeWarning", ")", "\n", "x", "=", "X", "[", "~", "np", ".", "isnan", "(", "X", ")", "]", "\n", "x", "=", "mean", "(", "x", ">", "threshold", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.decay": [[213, 227], ["ids.astype.astype", "numpy.round", "warnings.catch_warnings", "warnings.simplefilter", "range", "numpy.nanmean", "numpy.nanmean", "numpy.isnan", "numpy.linspace", "len"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.nanmean", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.nanmean"], ["", "def", "decay", "(", "X", ",", "n_bins", "=", "4", ")", ":", "\n", "    ", "\"\"\"\n    Performance loss over time.\n    \"\"\"", "\n", "X", "=", "X", "[", "~", "np", ".", "isnan", "(", "X", ")", "]", "\n", "ids", "=", "np", ".", "round", "(", "np", ".", "linspace", "(", "1", ",", "len", "(", "X", ")", ",", "n_bins", "+", "1", ")", "+", "1e-10", ")", "-", "1", "\n", "ids", "=", "ids", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "D_bins", "=", "[", "X", "[", "ids", "[", "i", "]", ":", "ids", "[", "i", "+", "1", "]", "+", "1", "]", "for", "i", "in", "range", "(", "0", ",", "4", ")", "]", "\n", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ",", "category", "=", "RuntimeWarning", ")", "\n", "D", "=", "np", ".", "nanmean", "(", "D_bins", "[", "0", "]", ")", "-", "np", ".", "nanmean", "(", "D_bins", "[", "3", "]", ")", "\n", "", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.std": [[229, 234], ["numpy.nanstd"], "function", ["None"], ["", "def", "std", "(", "X", ")", ":", "\n", "    ", "\"\"\"\n    Compute standard deviation.\n    \"\"\"", "\n", "return", "np", ".", "nanstd", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_plot_draw_styles": [[12, 32], ["None"], "function", ["None"], ["def", "get_plot_draw_styles", "(", ")", ":", "\n", "    ", "plot_draw_style", "=", "[", "{", "'color'", ":", "(", "1.0", ",", "0.0", ",", "0.0", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "0.0", ",", "1.0", ",", "0.0", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "0.0", ",", "0.0", ",", "1.0", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "0.0", ",", "0.0", ",", "0.0", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "1.0", ",", "0.0", ",", "1.0", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "0.0", ",", "1.0", ",", "1.0", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "136.0", "/", "255.0", ",", "0.0", ",", "21.0", "/", "255.0", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "1.0", ",", "127.0", "/", "255.0", ",", "39.0", "/", "255.0", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "0.0", ",", "162.0", "/", "255.0", ",", "232.0", "/", "255.0", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "0.0", ",", "0.5", ",", "0.0", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "1.0", ",", "0.5", ",", "0.2", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "0.1", ",", "0.4", ",", "0.0", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "0.6", ",", "0.3", ",", "0.9", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "0.4", ",", "0.7", ",", "0.1", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "0.2", ",", "0.1", ",", "0.7", ")", ",", "'line_style'", ":", "'-'", "}", ",", "\n", "{", "'color'", ":", "(", "0.7", ",", "0.6", ",", "0.2", ")", ",", "'line_style'", ":", "'-'", "}", "]", "\n", "\n", "return", "plot_draw_style", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.check_eval_data_is_valid": [[34, 43], ["None"], "function", ["None"], ["", "def", "check_eval_data_is_valid", "(", "eval_data", ",", "trackers", ",", "dataset", ")", ":", "\n", "    ", "\"\"\" Checks if the pre-computed results are valid\"\"\"", "\n", "seq_names", "=", "[", "s", ".", "name", "for", "s", "in", "dataset", "]", "\n", "seq_names_saved", "=", "eval_data", "[", "'sequences'", "]", "\n", "\n", "tracker_names_f", "=", "[", "(", "t", ".", "name", ",", "t", ".", "parameter_name", ",", "t", ".", "run_id", ")", "for", "t", "in", "trackers", "]", "\n", "tracker_names_f_saved", "=", "[", "(", "t", "[", "'name'", "]", ",", "t", "[", "'param'", "]", ",", "t", "[", "'run_id'", "]", ")", "for", "t", "in", "eval_data", "[", "'trackers'", "]", "]", "\n", "\n", "return", "seq_names", "==", "seq_names_saved", "and", "tracker_names_f", "==", "tracker_names_f_saved", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.merge_multiple_runs": [[45, 87], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.tolist", "torch.stack.tolist", "torch.stack.tolist", "torch.stack.tolist", "len", "len", "new_tracker_names.append", "torch.tensor", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "ave_success_rate_plot_overlap[].mean", "ave_success_rate_plot_center[].mean", "ave_success_rate_plot_center_norm[].mean", "avg_overlap_all[].mean"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean"], ["", "def", "merge_multiple_runs", "(", "eval_data", ")", ":", "\n", "    ", "new_tracker_names", "=", "[", "]", "\n", "ave_success_rate_plot_overlap_merged", "=", "[", "]", "\n", "ave_success_rate_plot_center_merged", "=", "[", "]", "\n", "ave_success_rate_plot_center_norm_merged", "=", "[", "]", "\n", "avg_overlap_all_merged", "=", "[", "]", "\n", "\n", "ave_success_rate_plot_overlap", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'ave_success_rate_plot_overlap'", "]", ")", "\n", "ave_success_rate_plot_center", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'ave_success_rate_plot_center'", "]", ")", "\n", "ave_success_rate_plot_center_norm", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'ave_success_rate_plot_center_norm'", "]", ")", "\n", "avg_overlap_all", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'avg_overlap_all'", "]", ")", "\n", "\n", "trackers", "=", "eval_data", "[", "'trackers'", "]", "\n", "merged", "=", "torch", ".", "zeros", "(", "len", "(", "trackers", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "trackers", ")", ")", ":", "\n", "        ", "if", "merged", "[", "i", "]", ":", "\n", "            ", "continue", "\n", "", "base_tracker", "=", "trackers", "[", "i", "]", "\n", "new_tracker_names", ".", "append", "(", "base_tracker", ")", "\n", "\n", "match", "=", "[", "t", "[", "'name'", "]", "==", "base_tracker", "[", "'name'", "]", "and", "t", "[", "'param'", "]", "==", "base_tracker", "[", "'param'", "]", "for", "t", "in", "trackers", "]", "\n", "match", "=", "torch", ".", "tensor", "(", "match", ")", "\n", "\n", "ave_success_rate_plot_overlap_merged", ".", "append", "(", "ave_success_rate_plot_overlap", "[", ":", ",", "match", ",", ":", "]", ".", "mean", "(", "1", ")", ")", "\n", "ave_success_rate_plot_center_merged", ".", "append", "(", "ave_success_rate_plot_center", "[", ":", ",", "match", ",", ":", "]", ".", "mean", "(", "1", ")", ")", "\n", "ave_success_rate_plot_center_norm_merged", ".", "append", "(", "ave_success_rate_plot_center_norm", "[", ":", ",", "match", ",", ":", "]", ".", "mean", "(", "1", ")", ")", "\n", "avg_overlap_all_merged", ".", "append", "(", "avg_overlap_all", "[", ":", ",", "match", "]", ".", "mean", "(", "1", ")", ")", "\n", "\n", "merged", "[", "match", "]", "=", "1", "\n", "\n", "", "ave_success_rate_plot_overlap_merged", "=", "torch", ".", "stack", "(", "ave_success_rate_plot_overlap_merged", ",", "dim", "=", "1", ")", "\n", "ave_success_rate_plot_center_merged", "=", "torch", ".", "stack", "(", "ave_success_rate_plot_center_merged", ",", "dim", "=", "1", ")", "\n", "ave_success_rate_plot_center_norm_merged", "=", "torch", ".", "stack", "(", "ave_success_rate_plot_center_norm_merged", ",", "dim", "=", "1", ")", "\n", "avg_overlap_all_merged", "=", "torch", ".", "stack", "(", "avg_overlap_all_merged", ",", "dim", "=", "1", ")", "\n", "\n", "eval_data", "[", "'trackers'", "]", "=", "new_tracker_names", "\n", "eval_data", "[", "'ave_success_rate_plot_overlap'", "]", "=", "ave_success_rate_plot_overlap_merged", ".", "tolist", "(", ")", "\n", "eval_data", "[", "'ave_success_rate_plot_center'", "]", "=", "ave_success_rate_plot_center_merged", ".", "tolist", "(", ")", "\n", "eval_data", "[", "'ave_success_rate_plot_center_norm'", "]", "=", "ave_success_rate_plot_center_norm_merged", ".", "tolist", "(", ")", "\n", "eval_data", "[", "'avg_overlap_all'", "]", "=", "avg_overlap_all_merged", ".", "tolist", "(", ")", "\n", "\n", "return", "eval_data", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_tracker_display_name": [[89, 100], ["None"], "function", ["None"], ["", "def", "get_tracker_display_name", "(", "tracker", ")", ":", "\n", "    ", "if", "tracker", "[", "'disp_name'", "]", "is", "None", ":", "\n", "        ", "if", "tracker", "[", "'run_id'", "]", "is", "None", ":", "\n", "            ", "disp_name", "=", "'{}_{}'", ".", "format", "(", "tracker", "[", "'name'", "]", ",", "tracker", "[", "'param'", "]", ")", "\n", "", "else", ":", "\n", "            ", "disp_name", "=", "'{}_{}_{:03d}'", ".", "format", "(", "tracker", "[", "'name'", "]", ",", "tracker", "[", "'param'", "]", ",", "\n", "tracker", "[", "'run_id'", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "disp_name", "=", "tracker", "[", "'disp_name'", "]", "\n", "\n", "", "return", "disp_name", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.plot_draw_save": [[102, 168], ["plot_opts.get", "plot_opts.get", "plot_opts.get", "plot_opts.get", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.subplots", "scores.argsort", "enumerate", "ax.set", "ax.grid", "fig.tight_layout", "tikzplotlib.save", "fig.savefig", "matplotlib.draw", "ylabel.replace", "ax.plot", "plotted_lines.append", "plot_results.get_tracker_display_name", "legend_text.append", "range", "ax.legend", "x.tolist", "y[].tolist", "scores.argsort.numel", "scores.argsort.numel"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_tracker_display_name"], ["", "def", "plot_draw_save", "(", "y", ",", "x", ",", "scores", ",", "trackers", ",", "plot_draw_styles", ",", "result_plot_path", ",", "plot_opts", ")", ":", "\n", "    ", "plt", ".", "rcParams", "[", "'text.usetex'", "]", "=", "True", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"Monospace\"", "\n", "# Plot settings", "\n", "font_size", "=", "plot_opts", ".", "get", "(", "'font_size'", ",", "20", ")", "\n", "font_size_axis", "=", "plot_opts", ".", "get", "(", "'font_size_axis'", ",", "20", ")", "\n", "line_width", "=", "plot_opts", ".", "get", "(", "'line_width'", ",", "2", ")", "\n", "font_size_legend", "=", "plot_opts", ".", "get", "(", "'font_size_legend'", ",", "20", ")", "\n", "\n", "plot_type", "=", "plot_opts", "[", "'plot_type'", "]", "\n", "legend_loc", "=", "plot_opts", "[", "'legend_loc'", "]", "\n", "\n", "xlabel", "=", "plot_opts", "[", "'xlabel'", "]", "\n", "ylabel", "=", "plot_opts", "[", "'ylabel'", "]", "\n", "ylabel", "=", "\"%s\"", "%", "(", "ylabel", ".", "replace", "(", "'%'", ",", "'\\%'", ")", ")", "\n", "xlim", "=", "plot_opts", "[", "'xlim'", "]", "\n", "ylim", "=", "plot_opts", "[", "'ylim'", "]", "\n", "\n", "title", "=", "r\"$\\bf{%s}$\"", "%", "(", "plot_opts", "[", "'title'", "]", ")", "\n", "\n", "matplotlib", ".", "rcParams", ".", "update", "(", "{", "'font.size'", ":", "font_size", "}", ")", "\n", "matplotlib", ".", "rcParams", ".", "update", "(", "{", "'axes.titlesize'", ":", "font_size_axis", "}", ")", "\n", "matplotlib", ".", "rcParams", ".", "update", "(", "{", "'axes.titleweight'", ":", "'black'", "}", ")", "\n", "matplotlib", ".", "rcParams", ".", "update", "(", "{", "'axes.labelsize'", ":", "font_size_axis", "}", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "index_sort", "=", "scores", ".", "argsort", "(", "descending", "=", "False", ")", "\n", "\n", "plotted_lines", "=", "[", "]", "\n", "legend_text", "=", "[", "]", "\n", "\n", "for", "id", ",", "id_sort", "in", "enumerate", "(", "index_sort", ")", ":", "\n", "        ", "line", "=", "ax", ".", "plot", "(", "x", ".", "tolist", "(", ")", ",", "y", "[", "id_sort", ",", ":", "]", ".", "tolist", "(", ")", ",", "\n", "linewidth", "=", "line_width", ",", "\n", "color", "=", "plot_draw_styles", "[", "index_sort", ".", "numel", "(", ")", "-", "id", "-", "1", "]", "[", "'color'", "]", ",", "\n", "linestyle", "=", "plot_draw_styles", "[", "index_sort", ".", "numel", "(", ")", "-", "id", "-", "1", "]", "[", "'line_style'", "]", ")", "\n", "\n", "plotted_lines", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "\n", "tracker", "=", "trackers", "[", "id_sort", "]", "\n", "disp_name", "=", "get_tracker_display_name", "(", "tracker", ")", "\n", "\n", "legend_text", ".", "append", "(", "'{} [{:.1f}]'", ".", "format", "(", "disp_name", ",", "scores", "[", "id_sort", "]", ")", ")", "\n", "\n", "", "try", ":", "\n", "# add bold to our method", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "2", ")", ":", "\n", "            ", "legend_text", "[", "-", "i", "]", "=", "r'\\textbf{%s}'", "%", "(", "legend_text", "[", "-", "i", "]", ")", "\n", "\n", "", "ax", ".", "legend", "(", "plotted_lines", "[", ":", ":", "-", "1", "]", ",", "legend_text", "[", ":", ":", "-", "1", "]", ",", "loc", "=", "legend_loc", ",", "fancybox", "=", "False", ",", "edgecolor", "=", "'black'", ",", "\n", "fontsize", "=", "font_size_legend", ",", "framealpha", "=", "1.0", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "ax", ".", "set", "(", "xlabel", "=", "xlabel", ",", "\n", "ylabel", "=", "ylabel", ",", "\n", "xlim", "=", "xlim", ",", "ylim", "=", "ylim", ",", "\n", "title", "=", "title", ")", "\n", "\n", "ax", ".", "grid", "(", "True", ",", "linestyle", "=", "'-.'", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "tikzplotlib", ".", "save", "(", "'{}/{}_plot.tex'", ".", "format", "(", "result_plot_path", ",", "plot_type", ")", ")", "\n", "fig", ".", "savefig", "(", "'{}/{}_plot.pdf'", ".", "format", "(", "result_plot_path", ",", "plot_type", ")", ",", "dpi", "=", "300", ",", "format", "=", "'pdf'", ",", "transparent", "=", "True", ")", "\n", "plt", ".", "draw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.check_and_load_precomputed_results": [[170, 197], ["lib.test.evaluation.environment.env_settings", "os.path.join", "os.path.join", "os.path.isfile", "lib.test.analysis.extract_results.extract_results", "plot_results.check_eval_data_is_valid", "lib.test.analysis.extract_results.extract_results", "open", "pickle.dump", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.extract_results.extract_results", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.check_eval_data_is_valid", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.extract_results.extract_results"], ["", "def", "check_and_load_precomputed_results", "(", "trackers", ",", "dataset", ",", "report_name", ",", "force_evaluation", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "# Load data", "\n", "    ", "settings", "=", "env_settings", "(", ")", "\n", "\n", "# Load pre-computed results", "\n", "result_plot_path", "=", "os", ".", "path", ".", "join", "(", "settings", ".", "result_plot_path", ",", "report_name", ")", "\n", "eval_data_path", "=", "os", ".", "path", ".", "join", "(", "result_plot_path", ",", "'eval_data.pkl'", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "eval_data_path", ")", "and", "not", "force_evaluation", ":", "\n", "        ", "with", "open", "(", "eval_data_path", ",", "'rb'", ")", "as", "fh", ":", "\n", "            ", "eval_data", "=", "pickle", ".", "load", "(", "fh", ")", "\n", "", "", "else", ":", "\n", "# print('Pre-computed evaluation data not found. Computing results!')", "\n", "        ", "eval_data", "=", "extract_results", "(", "trackers", ",", "dataset", ",", "report_name", ",", "**", "kwargs", ")", "\n", "\n", "", "if", "not", "check_eval_data_is_valid", "(", "eval_data", ",", "trackers", ",", "dataset", ")", ":", "\n", "# print('Pre-computed evaluation data invalid. Re-computing results!')", "\n", "        ", "eval_data", "=", "extract_results", "(", "trackers", ",", "dataset", ",", "report_name", ",", "**", "kwargs", ")", "\n", "# pass", "\n", "", "else", ":", "\n", "# Update display names", "\n", "        ", "tracker_names", "=", "[", "{", "'name'", ":", "t", ".", "name", ",", "'param'", ":", "t", ".", "parameter_name", ",", "'run_id'", ":", "t", ".", "run_id", ",", "'disp_name'", ":", "t", ".", "display_name", "}", "\n", "for", "t", "in", "trackers", "]", "\n", "eval_data", "[", "'trackers'", "]", "=", "tracker_names", "\n", "", "with", "open", "(", "eval_data_path", ",", "'wb'", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "eval_data", ",", "fh", ")", "\n", "", "return", "eval_data", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_auc_curve": [[199, 205], ["auc_curve.mean", "ave_success_rate_plot_overlap.mean"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean"], ["", "def", "get_auc_curve", "(", "ave_success_rate_plot_overlap", ",", "valid_sequence", ")", ":", "\n", "    ", "ave_success_rate_plot_overlap", "=", "ave_success_rate_plot_overlap", "[", "valid_sequence", ",", ":", ",", ":", "]", "\n", "auc_curve", "=", "ave_success_rate_plot_overlap", ".", "mean", "(", "0", ")", "*", "100.0", "\n", "auc", "=", "auc_curve", ".", "mean", "(", "-", "1", ")", "\n", "\n", "return", "auc_curve", ",", "auc", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_prec_curve": [[207, 213], ["ave_success_rate_plot_center.mean"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean"], ["", "def", "get_prec_curve", "(", "ave_success_rate_plot_center", ",", "valid_sequence", ")", ":", "\n", "    ", "ave_success_rate_plot_center", "=", "ave_success_rate_plot_center", "[", "valid_sequence", ",", ":", ",", ":", "]", "\n", "prec_curve", "=", "ave_success_rate_plot_center", ".", "mean", "(", "0", ")", "*", "100.0", "\n", "prec_score", "=", "prec_curve", "[", ":", ",", "20", "]", "\n", "\n", "return", "prec_curve", ",", "prec_score", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.plot_results": [[215, 290], ["lib.test.evaluation.environment.env_settings", "plot_results.get_plot_draw_styles", "os.path.join", "plot_results.check_and_load_precomputed_results", "torch.tensor", "print", "print", "matplotlib.show", "plot_results.merge_multiple_runs", "torch.tensor", "plot_results.get_auc_curve", "torch.tensor", "plot_results.plot_draw_save", "torch.tensor", "plot_results.get_prec_curve", "torch.tensor", "plot_results.plot_draw_save", "torch.tensor", "plot_results.get_prec_curve", "torch.tensor", "plot_results.plot_draw_save", "torch.tensor.long().sum().item", "torch.tensor.long().sum", "torch.tensor.long"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_plot_draw_styles", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.check_and_load_precomputed_results", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display.show", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.merge_multiple_runs", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_auc_curve", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.plot_draw_save", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_prec_curve", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.plot_draw_save", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_prec_curve", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.plot_draw_save"], ["", "def", "plot_results", "(", "trackers", ",", "dataset", ",", "report_name", ",", "merge_results", "=", "False", ",", "\n", "plot_types", "=", "(", "'success'", ")", ",", "force_evaluation", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Plot results for the given trackers\n\n    args:\n        trackers - List of trackers to evaluate\n        dataset - List of sequences to evaluate\n        report_name - Name of the folder in env_settings.perm_mat_path where the computed results and plots are saved\n        merge_results - If True, multiple random runs for a non-deterministic trackers are averaged\n        plot_types - List of scores to display. Can contain 'success',\n                    'prec' (precision), and 'norm_prec' (normalized precision)\n    \"\"\"", "\n", "# Load data", "\n", "settings", "=", "env_settings", "(", ")", "\n", "\n", "plot_draw_styles", "=", "get_plot_draw_styles", "(", ")", "\n", "\n", "# Load pre-computed results", "\n", "result_plot_path", "=", "os", ".", "path", ".", "join", "(", "settings", ".", "result_plot_path", ",", "report_name", ")", "\n", "eval_data", "=", "check_and_load_precomputed_results", "(", "trackers", ",", "dataset", ",", "report_name", ",", "force_evaluation", ",", "**", "kwargs", ")", "\n", "\n", "# Merge results from multiple runs", "\n", "if", "merge_results", ":", "\n", "        ", "eval_data", "=", "merge_multiple_runs", "(", "eval_data", ")", "\n", "\n", "", "tracker_names", "=", "eval_data", "[", "'trackers'", "]", "\n", "\n", "valid_sequence", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'valid_sequence'", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "print", "(", "'\\nPlotting results over {} / {} sequences'", ".", "format", "(", "valid_sequence", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "valid_sequence", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "print", "(", "'\\nGenerating plots for: {}'", ".", "format", "(", "report_name", ")", ")", "\n", "\n", "# ********************************  Success Plot **************************************", "\n", "if", "'success'", "in", "plot_types", ":", "\n", "        ", "ave_success_rate_plot_overlap", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'ave_success_rate_plot_overlap'", "]", ")", "\n", "\n", "# Index out valid sequences", "\n", "auc_curve", ",", "auc", "=", "get_auc_curve", "(", "ave_success_rate_plot_overlap", ",", "valid_sequence", ")", "\n", "threshold_set_overlap", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'threshold_set_overlap'", "]", ")", "\n", "\n", "success_plot_opts", "=", "{", "'plot_type'", ":", "'success'", ",", "'legend_loc'", ":", "'lower left'", ",", "'xlabel'", ":", "'Overlap threshold'", ",", "\n", "'ylabel'", ":", "'Overlap Precision [%]'", ",", "'xlim'", ":", "(", "0", ",", "1.0", ")", ",", "'ylim'", ":", "(", "0", ",", "88", ")", ",", "'title'", ":", "'Success'", "}", "\n", "plot_draw_save", "(", "auc_curve", ",", "threshold_set_overlap", ",", "auc", ",", "tracker_names", ",", "plot_draw_styles", ",", "result_plot_path", ",", "success_plot_opts", ")", "\n", "\n", "# ********************************  Precision Plot **************************************", "\n", "", "if", "'prec'", "in", "plot_types", ":", "\n", "        ", "ave_success_rate_plot_center", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'ave_success_rate_plot_center'", "]", ")", "\n", "\n", "# Index out valid sequences", "\n", "prec_curve", ",", "prec_score", "=", "get_prec_curve", "(", "ave_success_rate_plot_center", ",", "valid_sequence", ")", "\n", "threshold_set_center", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'threshold_set_center'", "]", ")", "\n", "\n", "precision_plot_opts", "=", "{", "'plot_type'", ":", "'precision'", ",", "'legend_loc'", ":", "'lower right'", ",", "\n", "'xlabel'", ":", "'Location error threshold [pixels]'", ",", "'ylabel'", ":", "'Distance Precision [%]'", ",", "\n", "'xlim'", ":", "(", "0", ",", "50", ")", ",", "'ylim'", ":", "(", "0", ",", "100", ")", ",", "'title'", ":", "'Precision plot'", "}", "\n", "plot_draw_save", "(", "prec_curve", ",", "threshold_set_center", ",", "prec_score", ",", "tracker_names", ",", "plot_draw_styles", ",", "result_plot_path", ",", "\n", "precision_plot_opts", ")", "\n", "\n", "# ********************************  Norm Precision Plot **************************************", "\n", "", "if", "'norm_prec'", "in", "plot_types", ":", "\n", "        ", "ave_success_rate_plot_center_norm", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'ave_success_rate_plot_center_norm'", "]", ")", "\n", "\n", "# Index out valid sequences", "\n", "prec_curve", ",", "prec_score", "=", "get_prec_curve", "(", "ave_success_rate_plot_center_norm", ",", "valid_sequence", ")", "\n", "threshold_set_center_norm", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'threshold_set_center_norm'", "]", ")", "\n", "\n", "norm_precision_plot_opts", "=", "{", "'plot_type'", ":", "'norm_precision'", ",", "'legend_loc'", ":", "'lower right'", ",", "\n", "'xlabel'", ":", "'Location error threshold'", ",", "'ylabel'", ":", "'Distance Precision [%]'", ",", "\n", "'xlim'", ":", "(", "0", ",", "0.5", ")", ",", "'ylim'", ":", "(", "0", ",", "85", ")", ",", "'title'", ":", "'Normalized Precision'", "}", "\n", "plot_draw_save", "(", "prec_curve", ",", "threshold_set_center_norm", ",", "prec_score", ",", "tracker_names", ",", "plot_draw_styles", ",", "result_plot_path", ",", "\n", "norm_precision_plot_opts", ")", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.generate_formatted_report": [[292, 316], ["zip", "enumerate", "max", "max", "scores.keys", "zip", "scores.keys", "scores.items", "len", "len", "len", "score_value[].item"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "def", "generate_formatted_report", "(", "row_labels", ",", "scores", ",", "table_name", "=", "''", ")", ":", "\n", "    ", "name_width", "=", "max", "(", "[", "len", "(", "d", ")", "for", "d", "in", "row_labels", "]", "+", "[", "len", "(", "table_name", ")", "]", ")", "+", "5", "\n", "min_score_width", "=", "10", "\n", "\n", "report_text", "=", "'\\n{label: <{width}} |'", ".", "format", "(", "label", "=", "table_name", ",", "width", "=", "name_width", ")", "\n", "\n", "score_widths", "=", "[", "max", "(", "min_score_width", ",", "len", "(", "k", ")", "+", "3", ")", "for", "k", "in", "scores", ".", "keys", "(", ")", "]", "\n", "\n", "for", "s", ",", "s_w", "in", "zip", "(", "scores", ".", "keys", "(", ")", ",", "score_widths", ")", ":", "\n", "        ", "report_text", "=", "'{prev} {s: <{width}} |'", ".", "format", "(", "prev", "=", "report_text", ",", "s", "=", "s", ",", "width", "=", "s_w", ")", "\n", "\n", "", "report_text", "=", "'{prev}\\n'", ".", "format", "(", "prev", "=", "report_text", ")", "\n", "\n", "for", "trk_id", ",", "d_name", "in", "enumerate", "(", "row_labels", ")", ":", "\n", "# display name", "\n", "        ", "report_text", "=", "'{prev}{tracker: <{width}} |'", ".", "format", "(", "prev", "=", "report_text", ",", "tracker", "=", "d_name", ",", "\n", "width", "=", "name_width", ")", "\n", "for", "(", "score_type", ",", "score_value", ")", ",", "s_w", "in", "zip", "(", "scores", ".", "items", "(", ")", ",", "score_widths", ")", ":", "\n", "            ", "report_text", "=", "'{prev} {score: <{width}} |'", ".", "format", "(", "prev", "=", "report_text", ",", "\n", "score", "=", "'{:0.2f}'", ".", "format", "(", "score_value", "[", "trk_id", "]", ".", "item", "(", ")", ")", ",", "\n", "width", "=", "s_w", ")", "\n", "", "report_text", "=", "'{prev}\\n'", ".", "format", "(", "prev", "=", "report_text", ")", "\n", "\n", "", "return", "report_text", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.print_results": [[318, 374], ["plot_results.check_and_load_precomputed_results", "torch.tensor", "print", "plot_results.generate_formatted_report", "print", "plot_results.merge_multiple_runs", "torch.tensor", "torch.tensor", "plot_results.get_auc_curve", "torch.tensor", "plot_results.get_prec_curve", "torch.tensor", "plot_results.get_prec_curve", "plot_results.get_tracker_display_name", "torch.tensor.long().sum().item", "torch.tensor.long().sum", "torch.tensor.long"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.check_and_load_precomputed_results", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.generate_formatted_report", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.merge_multiple_runs", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_auc_curve", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_prec_curve", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_prec_curve", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_tracker_display_name"], ["", "def", "print_results", "(", "trackers", ",", "dataset", ",", "report_name", ",", "merge_results", "=", "False", ",", "\n", "plot_types", "=", "(", "'success'", ")", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Print the results for the given trackers in a formatted table\n    args:\n        trackers - List of trackers to evaluate\n        dataset - List of sequences to evaluate\n        report_name - Name of the folder in env_settings.perm_mat_path where the computed results and plots are saved\n        merge_results - If True, multiple random runs for a non-deterministic trackers are averaged\n        plot_types - List of scores to display. Can contain 'success' (prints AUC, OP50, and OP75 scores),\n                    'prec' (prints precision score), and 'norm_prec' (prints normalized precision score)\n    \"\"\"", "\n", "# Load pre-computed results", "\n", "eval_data", "=", "check_and_load_precomputed_results", "(", "trackers", ",", "dataset", ",", "report_name", ",", "**", "kwargs", ")", "\n", "\n", "# Merge results from multiple runs", "\n", "if", "merge_results", ":", "\n", "        ", "eval_data", "=", "merge_multiple_runs", "(", "eval_data", ")", "\n", "\n", "", "tracker_names", "=", "eval_data", "[", "'trackers'", "]", "\n", "valid_sequence", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'valid_sequence'", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "print", "(", "'\\nReporting results over {} / {} sequences'", ".", "format", "(", "valid_sequence", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "valid_sequence", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "scores", "=", "{", "}", "\n", "\n", "# ********************************  Success Plot **************************************", "\n", "if", "'success'", "in", "plot_types", ":", "\n", "        ", "threshold_set_overlap", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'threshold_set_overlap'", "]", ")", "\n", "ave_success_rate_plot_overlap", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'ave_success_rate_plot_overlap'", "]", ")", "\n", "\n", "# Index out valid sequences", "\n", "auc_curve", ",", "auc", "=", "get_auc_curve", "(", "ave_success_rate_plot_overlap", ",", "valid_sequence", ")", "\n", "scores", "[", "'AUC'", "]", "=", "auc", "\n", "scores", "[", "'OP50'", "]", "=", "auc_curve", "[", ":", ",", "threshold_set_overlap", "==", "0.50", "]", "\n", "scores", "[", "'OP75'", "]", "=", "auc_curve", "[", ":", ",", "threshold_set_overlap", "==", "0.75", "]", "\n", "\n", "# ********************************  Precision Plot **************************************", "\n", "", "if", "'prec'", "in", "plot_types", ":", "\n", "        ", "ave_success_rate_plot_center", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'ave_success_rate_plot_center'", "]", ")", "\n", "\n", "# Index out valid sequences", "\n", "prec_curve", ",", "prec_score", "=", "get_prec_curve", "(", "ave_success_rate_plot_center", ",", "valid_sequence", ")", "\n", "scores", "[", "'Precision'", "]", "=", "prec_score", "\n", "\n", "# ********************************  Norm Precision Plot *********************************", "\n", "", "if", "'norm_prec'", "in", "plot_types", ":", "\n", "        ", "ave_success_rate_plot_center_norm", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'ave_success_rate_plot_center_norm'", "]", ")", "\n", "\n", "# Index out valid sequences", "\n", "norm_prec_curve", ",", "norm_prec_score", "=", "get_prec_curve", "(", "ave_success_rate_plot_center_norm", ",", "valid_sequence", ")", "\n", "scores", "[", "'Norm Precision'", "]", "=", "norm_prec_score", "\n", "\n", "# Print", "\n", "", "tracker_disp_names", "=", "[", "get_tracker_display_name", "(", "trk", ")", "for", "trk", "in", "tracker_names", "]", "\n", "report_text", "=", "generate_formatted_report", "(", "tracker_disp_names", ",", "scores", ",", "table_name", "=", "report_name", ")", "\n", "print", "(", "report_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.plot_got_success": [[376, 435], ["lib.test.evaluation.environment.env_settings", "plot_results.get_plot_draw_styles", "os.path.join", "torch.zeros", "torch.zeros", "enumerate", "torch.arange", "plot_results.plot_draw_save", "matplotlib.show", "len", "os.path.isfile", "tracker_names.append", "len", "Exception", "len", "json.load.keys", "torch.tensor", "open", "json.load", "json.load.keys", "Exception", "list", "json.load.keys", "eval_data[].keys", "json.load.keys"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_plot_draw_styles", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.plot_draw_save", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display.show", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "def", "plot_got_success", "(", "trackers", ",", "report_name", ")", ":", "\n", "    ", "\"\"\" Plot success plot for GOT-10k dataset using the json reports.\n    Save the json reports from http://got-10k.aitestunion.com/leaderboard in the directory set to\n    env_settings.got_reports_path\n\n    The tracker name in the experiment file should be set to the name of the report file for that tracker,\n    e.g. DiMP50_report_2019_09_02_15_44_25 if the report is name DiMP50_report_2019_09_02_15_44_25.json\n\n    args:\n        trackers - List of trackers to evaluate\n        report_name - Name of the folder in env_settings.perm_mat_path where the computed results and plots are saved\n    \"\"\"", "\n", "# Load data", "\n", "settings", "=", "env_settings", "(", ")", "\n", "plot_draw_styles", "=", "get_plot_draw_styles", "(", ")", "\n", "\n", "result_plot_path", "=", "os", ".", "path", ".", "join", "(", "settings", ".", "result_plot_path", ",", "report_name", ")", "\n", "\n", "auc_curve", "=", "torch", ".", "zeros", "(", "(", "len", "(", "trackers", ")", ",", "101", ")", ")", "\n", "scores", "=", "torch", ".", "zeros", "(", "len", "(", "trackers", ")", ")", "\n", "\n", "# Load results", "\n", "tracker_names", "=", "[", "]", "\n", "for", "trk_id", ",", "trk", "in", "enumerate", "(", "trackers", ")", ":", "\n", "        ", "json_path", "=", "'{}/{}.json'", ".", "format", "(", "settings", ".", "got_reports_path", ",", "trk", ".", "name", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "json_path", ")", ":", "\n", "            ", "with", "open", "(", "json_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "eval_data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Report not found {}'", ".", "format", "(", "json_path", ")", ")", "\n", "\n", "", "if", "len", "(", "eval_data", ".", "keys", "(", ")", ")", ">", "1", ":", "\n", "            ", "raise", "Exception", "\n", "\n", "# First field is the tracker name. Index it out", "\n", "", "eval_data", "=", "eval_data", "[", "list", "(", "eval_data", ".", "keys", "(", ")", ")", "[", "0", "]", "]", "\n", "if", "'succ_curve'", "in", "eval_data", ".", "keys", "(", ")", ":", "\n", "            ", "curve", "=", "eval_data", "[", "'succ_curve'", "]", "\n", "ao", "=", "eval_data", "[", "'ao'", "]", "\n", "", "elif", "'overall'", "in", "eval_data", ".", "keys", "(", ")", "and", "'succ_curve'", "in", "eval_data", "[", "'overall'", "]", ".", "keys", "(", ")", ":", "\n", "            ", "curve", "=", "eval_data", "[", "'overall'", "]", "[", "'succ_curve'", "]", "\n", "ao", "=", "eval_data", "[", "'overall'", "]", "[", "'ao'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Invalid JSON file {}'", ".", "format", "(", "json_path", ")", ")", "\n", "\n", "", "auc_curve", "[", "trk_id", ",", ":", "]", "=", "torch", ".", "tensor", "(", "curve", ")", "*", "100.0", "\n", "scores", "[", "trk_id", "]", "=", "ao", "*", "100.0", "\n", "\n", "tracker_names", ".", "append", "(", "{", "'name'", ":", "trk", ".", "name", ",", "'param'", ":", "trk", ".", "parameter_name", ",", "'run_id'", ":", "trk", ".", "run_id", ",", "\n", "'disp_name'", ":", "trk", ".", "display_name", "}", ")", "\n", "\n", "", "threshold_set_overlap", "=", "torch", ".", "arange", "(", "0.0", ",", "1.01", ",", "0.01", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "\n", "success_plot_opts", "=", "{", "'plot_type'", ":", "'success'", ",", "'legend_loc'", ":", "'lower left'", ",", "'xlabel'", ":", "'Overlap threshold'", ",", "\n", "'ylabel'", ":", "'Overlap Precision [%]'", ",", "'xlim'", ":", "(", "0", ",", "1.0", ")", ",", "'ylim'", ":", "(", "0", ",", "100", ")", ",", "'title'", ":", "'Success plot'", "}", "\n", "plot_draw_save", "(", "auc_curve", ",", "threshold_set_overlap", ",", "scores", ",", "tracker_names", ",", "plot_draw_styles", ",", "result_plot_path", ",", "\n", "success_plot_opts", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.print_per_sequence_results": [[437, 496], ["plot_results.check_and_load_precomputed_results", "torch.tensor", "plot_results.generate_formatted_report", "print", "plot_results.merge_multiple_runs", "torch.tensor", "plot_results.get_tracker_display_name", "enumerate", "enumerate", "avg_overlap_all.min", "zip", "avg_overlap_all.max", "torch.tensor.tolist", "avg_overlap_all.min", "avg_overlap_all.max"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.check_and_load_precomputed_results", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.generate_formatted_report", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.merge_multiple_runs", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_tracker_display_name", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "def", "print_per_sequence_results", "(", "trackers", ",", "dataset", ",", "report_name", ",", "merge_results", "=", "False", ",", "\n", "filter_criteria", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Print per-sequence results for the given trackers. Additionally, the sequences to list can be filtered using\n    the filter criteria.\n\n    args:\n        trackers - List of trackers to evaluate\n        dataset - List of sequences to evaluate\n        report_name - Name of the folder in env_settings.perm_mat_path where the computed results and plots are saved\n        merge_results - If True, multiple random runs for a non-deterministic trackers are averaged\n        filter_criteria - Filter sequence results which are reported. Following modes are supported\n                        None: No filtering. Display results for all sequences in dataset\n                        'ao_min': Only display sequences for which the minimum average overlap (AO) score over the\n                                  trackers is less than a threshold filter_criteria['threshold']. This mode can\n                                  be used to select sequences where at least one tracker performs poorly.\n                        'ao_max': Only display sequences for which the maximum average overlap (AO) score over the\n                                  trackers is less than a threshold filter_criteria['threshold']. This mode can\n                                  be used to select sequences all tracker performs poorly.\n                        'delta_ao': Only display sequences for which the performance of different trackers vary by at\n                                    least filter_criteria['threshold'] in average overlap (AO) score. This mode can\n                                    be used to select sequences where the behaviour of the trackers greatly differ\n                                    between each other.\n    \"\"\"", "\n", "# Load pre-computed results", "\n", "eval_data", "=", "check_and_load_precomputed_results", "(", "trackers", ",", "dataset", ",", "report_name", ",", "**", "kwargs", ")", "\n", "\n", "# Merge results from multiple runs", "\n", "if", "merge_results", ":", "\n", "        ", "eval_data", "=", "merge_multiple_runs", "(", "eval_data", ")", "\n", "\n", "", "tracker_names", "=", "eval_data", "[", "'trackers'", "]", "\n", "valid_sequence", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'valid_sequence'", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "sequence_names", "=", "eval_data", "[", "'sequences'", "]", "\n", "avg_overlap_all", "=", "torch", ".", "tensor", "(", "eval_data", "[", "'avg_overlap_all'", "]", ")", "*", "100.0", "\n", "\n", "# Filter sequences", "\n", "if", "filter_criteria", "is", "not", "None", ":", "\n", "        ", "if", "filter_criteria", "[", "'mode'", "]", "==", "'ao_min'", ":", "\n", "            ", "min_ao", "=", "avg_overlap_all", ".", "min", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "valid_sequence", "=", "valid_sequence", "&", "(", "min_ao", "<", "filter_criteria", "[", "'threshold'", "]", ")", "\n", "", "elif", "filter_criteria", "[", "'mode'", "]", "==", "'ao_max'", ":", "\n", "            ", "max_ao", "=", "avg_overlap_all", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "valid_sequence", "=", "valid_sequence", "&", "(", "max_ao", "<", "filter_criteria", "[", "'threshold'", "]", ")", "\n", "", "elif", "filter_criteria", "[", "'mode'", "]", "==", "'delta_ao'", ":", "\n", "            ", "min_ao", "=", "avg_overlap_all", ".", "min", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "max_ao", "=", "avg_overlap_all", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "valid_sequence", "=", "valid_sequence", "&", "(", "(", "max_ao", "-", "min_ao", ")", ">", "filter_criteria", "[", "'threshold'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "\n", "\n", "", "", "avg_overlap_all", "=", "avg_overlap_all", "[", "valid_sequence", ",", ":", "]", "\n", "sequence_names", "=", "[", "s", "+", "' (ID={})'", ".", "format", "(", "i", ")", "for", "i", ",", "(", "s", ",", "v", ")", "in", "enumerate", "(", "zip", "(", "sequence_names", ",", "valid_sequence", ".", "tolist", "(", ")", ")", ")", "if", "v", "]", "\n", "\n", "tracker_disp_names", "=", "[", "get_tracker_display_name", "(", "trk", ")", "for", "trk", "in", "tracker_names", "]", "\n", "\n", "scores_per_tracker", "=", "{", "k", ":", "avg_overlap_all", "[", ":", ",", "i", "]", "for", "i", ",", "k", "in", "enumerate", "(", "tracker_disp_names", ")", "}", "\n", "report_text", "=", "generate_formatted_report", "(", "sequence_names", ",", "scores_per_tracker", ")", "\n", "\n", "print", "(", "report_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display.__init__": [[20, 33], ["matplotlib.subplots", "matplotlib.subplots", "playback_results.Display.fig.canvas.mpl_connect", "matplotlib.tight_layout", "matplotlib.tight_layout"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sequence_length", ",", "plot_draw_styles", ",", "sequence_name", ")", ":", "\n", "        ", "self", ".", "active", "=", "True", "\n", "self", ".", "frame_number", "=", "0", "\n", "self", ".", "pause_mode", "=", "True", "\n", "self", ".", "step_size", "=", "0", "\n", "self", ".", "step_direction", "=", "'forward'", "\n", "self", ".", "fig", ",", "self", ".", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "self", ".", "fig", ".", "canvas", ".", "mpl_connect", "(", "'key_press_event'", ",", "self", ".", "key_callback_fn", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "self", ".", "sequence_length", "=", "sequence_length", "\n", "self", ".", "sequence_name", "=", "sequence_name", "\n", "self", ".", "plot_draw_styles", "=", "plot_draw_styles", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display.key_callback_fn": [[34, 67], ["None"], "methods", ["None"], ["", "def", "key_callback_fn", "(", "self", ",", "event", ")", ":", "\n", "        ", "if", "event", ".", "key", "==", "' '", ":", "\n", "            ", "self", ".", "pause_mode", "=", "not", "self", ".", "pause_mode", "\n", "self", ".", "step_size", "=", "0", "\n", "self", ".", "step_direction", "=", "'forward'", "\n", "", "elif", "event", ".", "key", "==", "'right'", ":", "\n", "            ", "if", "self", ".", "pause_mode", ":", "\n", "                ", "self", ".", "frame_number", "+=", "1", "\n", "\n", "if", "self", ".", "frame_number", ">=", "self", ".", "sequence_length", ":", "\n", "                    ", "self", ".", "frame_number", "=", "self", ".", "sequence_length", "-", "1", "\n", "", "", "elif", "self", ".", "step_direction", "==", "'stop'", ":", "\n", "                ", "self", ".", "step_direction", "=", "'forward'", "\n", "self", ".", "step_size", "=", "0", "\n", "", "elif", "self", ".", "step_direction", "==", "'backward'", "and", "self", ".", "step_size", "==", "0", ":", "\n", "                ", "self", ".", "step_direction", "=", "'stop'", "\n", "", "else", ":", "\n", "                ", "self", ".", "step_size", "+=", "1", "\n", "", "", "elif", "event", ".", "key", "==", "'left'", ":", "\n", "            ", "if", "self", ".", "pause_mode", ":", "\n", "                ", "self", ".", "frame_number", "-=", "1", "\n", "\n", "if", "self", ".", "frame_number", "<", "0", ":", "\n", "                    ", "self", ".", "frame_number", "=", "0", "\n", "", "", "elif", "self", ".", "step_direction", "==", "'stop'", ":", "\n", "                ", "self", ".", "step_direction", "=", "'backward'", "\n", "self", ".", "step_size", "=", "0", "\n", "", "elif", "self", ".", "step_direction", "==", "'forward'", "and", "self", ".", "step_size", "==", "0", ":", "\n", "                ", "self", ".", "step_direction", "=", "'stop'", "\n", "", "else", ":", "\n", "                ", "self", ".", "step_size", "-=", "1", "\n", "", "", "elif", "event", ".", "key", "==", "'escape'", "or", "event", ".", "key", "==", "'q'", ":", "\n", "            ", "self", ".", "active", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display._get_speed": [[68, 76], ["abs", "abs"], "methods", ["None"], ["", "", "def", "_get_speed", "(", "self", ")", ":", "\n", "        ", "delta", "=", "0", "\n", "if", "self", ".", "step_direction", "==", "'forward'", ":", "\n", "            ", "delta", "=", "2", "**", "abs", "(", "self", ".", "step_size", ")", "\n", "", "elif", "self", ".", "step_direction", "==", "'backward'", ":", "\n", "            ", "delta", "=", "-", "1", "*", "2", "**", "abs", "(", "self", ".", "step_size", ")", "\n", "\n", "", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display.step": [[77, 85], ["playback_results.Display._get_speed"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display._get_speed"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "delta", "=", "self", ".", "_get_speed", "(", ")", "\n", "\n", "self", ".", "frame_number", "+=", "delta", "\n", "if", "self", ".", "frame_number", "<", "0", ":", "\n", "            ", "self", ".", "frame_number", "=", "0", "\n", "", "elif", "self", ".", "frame_number", ">=", "self", ".", "sequence_length", ":", "\n", "            ", "self", ".", "frame_number", "=", "self", ".", "sequence_length", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display.show": [[86, 116], ["playback_results.Display.ax.cla", "playback_results.Display.ax.imshow", "enumerate", "playback_results.Display.ax.set_axis_off", "playback_results.Display.ax.axis", "matplotlib.legend", "matplotlib.legend", "playback_results.Display._get_speed", "playback_results.Display.fig.suptitle", "pytracking.utils.plotting.draw_figure", "matplotlib.Rectangle", "matplotlib.Rectangle", "playback_results.Display.ax.add_patch", "rect_handles.append", "matplotlib.Rectangle", "matplotlib.Rectangle", "playback_results.Display.ax.add_patch", "rect_handles.append", "matplotlib.Rectangle", "matplotlib.Rectangle"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display._get_speed"], ["", "", "def", "show", "(", "self", ",", "image", ",", "bb_list", ",", "trackers", ",", "gt", "=", "None", ")", ":", "\n", "        ", "self", ".", "ax", ".", "cla", "(", ")", "\n", "self", ".", "ax", ".", "imshow", "(", "image", ")", "\n", "\n", "# Draw rects", "\n", "rect_handles", "=", "[", "]", "\n", "for", "i", ",", "bb", "in", "enumerate", "(", "bb_list", ")", ":", "\n", "            ", "rect", "=", "patches", ".", "Rectangle", "(", "(", "bb", "[", "0", "]", ",", "bb", "[", "1", "]", ")", ",", "bb", "[", "2", "]", ",", "bb", "[", "3", "]", ",", "linewidth", "=", "1", ",", "\n", "edgecolor", "=", "self", ".", "plot_draw_styles", "[", "i", "]", "[", "'color'", "]", ",", "facecolor", "=", "'none'", ")", "\n", "self", ".", "ax", ".", "add_patch", "(", "rect", ")", "\n", "\n", "rect_handles", ".", "append", "(", "patches", ".", "Rectangle", "(", "(", "bb", "[", "0", "]", ",", "bb", "[", "1", "]", ")", ",", "bb", "[", "2", "]", ",", "bb", "[", "3", "]", ",", "linewidth", "=", "1", ",", "\n", "edgecolor", "=", "self", ".", "plot_draw_styles", "[", "i", "]", "[", "'color'", "]", ",", "\n", "facecolor", "=", "self", ".", "plot_draw_styles", "[", "i", "]", "[", "'color'", "]", ",", "\n", "label", "=", "trackers", "[", "i", "]", ")", ")", "\n", "\n", "", "if", "gt", "is", "not", "None", ":", "\n", "            ", "rect", "=", "patches", ".", "Rectangle", "(", "(", "gt", "[", "0", "]", ",", "gt", "[", "1", "]", ")", ",", "gt", "[", "2", "]", ",", "gt", "[", "3", "]", ",", "linewidth", "=", "2", ",", "edgecolor", "=", "'g'", ",", "\n", "facecolor", "=", "'none'", ")", "\n", "self", ".", "ax", ".", "add_patch", "(", "rect", ")", "\n", "rect_handles", ".", "append", "(", "rect", ")", "\n", "\n", "", "self", ".", "ax", ".", "set_axis_off", "(", ")", "\n", "self", ".", "ax", ".", "axis", "(", "'equal'", ")", "\n", "plt", ".", "legend", "(", "handles", "=", "rect_handles", ",", "loc", "=", "4", ",", "borderaxespad", "=", "0.", ")", "\n", "mode", "=", "'manual'", "if", "self", ".", "pause_mode", "else", "'auto     '", "\n", "speed", "=", "self", ".", "_get_speed", "(", ")", "\n", "self", ".", "fig", ".", "suptitle", "(", "'Sequence: {}    Mode: {}    Speed: {:d}x'", ".", "format", "(", "self", ".", "sequence_name", ",", "mode", ",", "speed", ")", ",", "\n", "fontsize", "=", "14", ")", "\n", "draw_figure", "(", "self", ".", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.read_image": [[118, 121], ["cv2.imread", "cv2.cvtColor"], "function", ["None"], ["", "", "def", "read_image", "(", "image_file", ":", "str", ")", ":", "\n", "    ", "im", "=", "cv", ".", "imread", "(", "image_file", ")", "\n", "return", "cv", ".", "cvtColor", "(", "im", ",", "cv", ".", "COLOR_BGR2RGB", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results._get_display_name": [[123, 131], ["None"], "function", ["None"], ["", "def", "_get_display_name", "(", "tracker", ")", ":", "\n", "    ", "if", "tracker", ".", "display_name", "is", "None", ":", "\n", "        ", "if", "tracker", ".", "run_id", "is", "not", "None", ":", "\n", "            ", "return", "'{}_{}_{:03d}'", ".", "format", "(", "tracker", ".", "name", ",", "tracker", ".", "parameter_name", ",", "tracker", ".", "run_id", ")", "\n", "", "else", ":", "\n", "            ", "return", "'{}_{}'", ".", "format", "(", "tracker", ".", "name", ",", "tracker", ".", "parameter_name", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "tracker", ".", "display_name", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.playback_results": [[133, 176], ["pytracking.analysis.plot_results.get_plot_draw_styles", "enumerate", "torch.stack().tolist", "playback_results.Display", "os.path.isfile", "torch.stack().tolist.append", "playback_results._get_display_name", "len", "playback_results.read_image", "playback_results.Display.show", "time.sleep", "Exception", "torch.stack", "time.sleep", "torch.tensor", "playback_results.Display.step", "numpy.loadtxt", "torch.tensor", "str", "numpy.loadtxt", "str"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.get_plot_draw_styles", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results._get_display_name", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.read_image", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display.show", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display.step"], ["", "", "def", "playback_results", "(", "trackers", ",", "sequence", ")", ":", "\n", "    ", "\"\"\"\n    Playback saved results of input trackers for a particular sequence. You can navigate the sequence using left/right\n    arrow keys. You can also change to 'auto' mode by pressing space bar, in which case the sequence will be replayed\n    at a particular speed. The speed for playback in 'auto' mode can be controlled using the left/right arrow keys.\n    You can exit the application using escape or q keys.\n    \"\"\"", "\n", "plot_draw_styles", "=", "get_plot_draw_styles", "(", ")", "\n", "\n", "tracker_results", "=", "[", "]", "\n", "# Load results", "\n", "for", "trk_id", ",", "trk", "in", "enumerate", "(", "trackers", ")", ":", "\n", "# Load results", "\n", "        ", "base_results_path", "=", "'{}/{}'", ".", "format", "(", "trk", ".", "results_dir", ",", "sequence", ".", "name", ")", "\n", "results_path", "=", "'{}.txt'", ".", "format", "(", "base_results_path", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "results_path", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "pred_bb", "=", "torch", ".", "tensor", "(", "np", ".", "loadtxt", "(", "str", "(", "results_path", ")", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "", "except", ":", "\n", "                ", "pred_bb", "=", "torch", ".", "tensor", "(", "np", ".", "loadtxt", "(", "str", "(", "results_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Result not found. {}'", ".", "format", "(", "results_path", ")", ")", "\n", "\n", "", "tracker_results", ".", "append", "(", "pred_bb", ")", "\n", "\n", "# Convert to list of shape seq_length * num_trackers * 4", "\n", "", "tracker_results", "=", "torch", ".", "stack", "(", "tracker_results", ",", "dim", "=", "1", ")", ".", "tolist", "(", ")", "\n", "tracker_names", "=", "[", "_get_display_name", "(", "t", ")", "for", "t", "in", "trackers", "]", "\n", "\n", "display", "=", "Display", "(", "len", "(", "tracker_results", ")", ",", "plot_draw_styles", ",", "sequence", ".", "name", ")", "\n", "\n", "while", "display", ".", "active", ":", "\n", "        ", "frame_number", "=", "display", ".", "frame_number", "\n", "image", "=", "read_image", "(", "sequence", ".", "frames", "[", "frame_number", "]", ")", "\n", "\n", "display", ".", "show", "(", "image", ",", "tracker_results", "[", "frame_number", "]", ",", "tracker_names", ")", "\n", "\n", "time", ".", "sleep", "(", "0.01", ")", "\n", "if", "display", ".", "pause_mode", "and", "display", ".", "frame_number", "==", "frame_number", ":", "\n", "            ", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "elif", "not", "display", ".", "pause_mode", ":", "\n", "            ", "display", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.extract_results.calc_err_center": [[16, 26], ["None"], "function", ["None"], ["def", "calc_err_center", "(", "pred_bb", ",", "anno_bb", ",", "normalized", "=", "False", ")", ":", "\n", "    ", "pred_center", "=", "pred_bb", "[", ":", ",", ":", "2", "]", "+", "0.5", "*", "(", "pred_bb", "[", ":", ",", "2", ":", "]", "-", "1.0", ")", "\n", "anno_center", "=", "anno_bb", "[", ":", ",", ":", "2", "]", "+", "0.5", "*", "(", "anno_bb", "[", ":", ",", "2", ":", "]", "-", "1.0", ")", "\n", "\n", "if", "normalized", ":", "\n", "        ", "pred_center", "=", "pred_center", "/", "anno_bb", "[", ":", ",", "2", ":", "]", "\n", "anno_center", "=", "anno_center", "/", "anno_bb", "[", ":", ",", "2", ":", "]", "\n", "\n", "", "err_center", "=", "(", "(", "pred_center", "-", "anno_center", ")", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "sqrt", "(", ")", "\n", "return", "err_center", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.extract_results.calc_iou_overlap": [[28, 38], ["torch.max", "torch.min", "sz.prod", "pred_bb[].prod", "anno_bb[].prod"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "def", "calc_iou_overlap", "(", "pred_bb", ",", "anno_bb", ")", ":", "\n", "    ", "tl", "=", "torch", ".", "max", "(", "pred_bb", "[", ":", ",", ":", "2", "]", ",", "anno_bb", "[", ":", ",", ":", "2", "]", ")", "\n", "br", "=", "torch", ".", "min", "(", "pred_bb", "[", ":", ",", ":", "2", "]", "+", "pred_bb", "[", ":", ",", "2", ":", "]", "-", "1.0", ",", "anno_bb", "[", ":", ",", ":", "2", "]", "+", "anno_bb", "[", ":", ",", "2", ":", "]", "-", "1.0", ")", "\n", "sz", "=", "(", "br", "-", "tl", "+", "1.0", ")", ".", "clamp", "(", "0", ")", "\n", "\n", "# Area", "\n", "intersection", "=", "sz", ".", "prod", "(", "dim", "=", "1", ")", "\n", "union", "=", "pred_bb", "[", ":", ",", "2", ":", "]", ".", "prod", "(", "dim", "=", "1", ")", "+", "anno_bb", "[", ":", ",", "2", ":", "]", ".", "prod", "(", "dim", "=", "1", ")", "-", "intersection", "\n", "\n", "return", "intersection", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.extract_results.calc_seq_err_robust": [[40, 100], ["torch.cat.clone", "torch.isnan().any", "extract_results.calc_err_center", "extract_results.calc_err_center", "extract_results.calc_iou_overlap", "torch.isnan().any", "torch.isnan().any", "Exception", "range", "target_visible.bool.bool", "float", "float", "float", "Exception", "torch.isnan", "Exception", "torch.isnan", "torch.isnan", "Exception", "torch.zeros().type_as", "torch.cat", "torch.isnan().any", "torch.zeros", "torch.isnan"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.extract_results.calc_err_center", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.extract_results.calc_err_center", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.extract_results.calc_iou_overlap"], ["", "def", "calc_seq_err_robust", "(", "pred_bb", ",", "anno_bb", ",", "dataset", ",", "target_visible", "=", "None", ")", ":", "\n", "    ", "pred_bb", "=", "pred_bb", ".", "clone", "(", ")", "\n", "\n", "# Check if invalid values are present", "\n", "if", "torch", ".", "isnan", "(", "pred_bb", ")", ".", "any", "(", ")", "or", "(", "pred_bb", "[", ":", ",", "2", ":", "]", "<", "0.0", ")", ".", "any", "(", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Error: Invalid results'", ")", "\n", "\n", "", "if", "torch", ".", "isnan", "(", "anno_bb", ")", ".", "any", "(", ")", ":", "\n", "        ", "if", "dataset", "==", "'uav'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Warning: NaNs in annotation'", ")", "\n", "\n", "", "", "if", "(", "pred_bb", "[", ":", ",", "2", ":", "]", "==", "0.0", ")", ".", "any", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "pred_bb", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "(", "pred_bb", "[", "i", ",", "2", ":", "]", "==", "0.0", ")", ".", "any", "(", ")", "and", "not", "torch", ".", "isnan", "(", "anno_bb", "[", "i", ",", ":", "]", ")", ".", "any", "(", ")", ":", "\n", "                ", "pred_bb", "[", "i", ",", ":", "]", "=", "pred_bb", "[", "i", "-", "1", ",", ":", "]", "\n", "\n", "", "", "", "if", "pred_bb", ".", "shape", "[", "0", "]", "!=", "anno_bb", ".", "shape", "[", "0", "]", ":", "\n", "        ", "if", "dataset", "==", "'lasot'", ":", "\n", "            ", "if", "pred_bb", ".", "shape", "[", "0", "]", ">", "anno_bb", ".", "shape", "[", "0", "]", ":", "\n", "# For monkey-17, there is a mismatch for some trackers.", "\n", "                ", "pred_bb", "=", "pred_bb", "[", ":", "anno_bb", ".", "shape", "[", "0", "]", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Mis-match in tracker prediction and GT lengths'", ")", "\n", "", "", "else", ":", "\n", "# print('Warning: Mis-match in tracker prediction and GT lengths')", "\n", "            ", "if", "pred_bb", ".", "shape", "[", "0", "]", ">", "anno_bb", ".", "shape", "[", "0", "]", ":", "\n", "                ", "pred_bb", "=", "pred_bb", "[", ":", "anno_bb", ".", "shape", "[", "0", "]", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "pad", "=", "torch", ".", "zeros", "(", "(", "anno_bb", ".", "shape", "[", "0", "]", "-", "pred_bb", ".", "shape", "[", "0", "]", ",", "4", ")", ")", ".", "type_as", "(", "pred_bb", ")", "\n", "pred_bb", "=", "torch", ".", "cat", "(", "(", "pred_bb", ",", "pad", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "", "pred_bb", "[", "0", ",", ":", "]", "=", "anno_bb", "[", "0", ",", ":", "]", "\n", "\n", "if", "target_visible", "is", "not", "None", ":", "\n", "        ", "target_visible", "=", "target_visible", ".", "bool", "(", ")", "\n", "valid", "=", "(", "(", "anno_bb", "[", ":", ",", "2", ":", "]", ">", "0.0", ")", ".", "sum", "(", "1", ")", "==", "2", ")", "&", "target_visible", "\n", "", "else", ":", "\n", "        ", "valid", "=", "(", "(", "anno_bb", "[", ":", ",", "2", ":", "]", ">", "0.0", ")", ".", "sum", "(", "1", ")", "==", "2", ")", "\n", "\n", "", "err_center", "=", "calc_err_center", "(", "pred_bb", ",", "anno_bb", ")", "\n", "err_center_normalized", "=", "calc_err_center", "(", "pred_bb", ",", "anno_bb", ",", "normalized", "=", "True", ")", "\n", "err_overlap", "=", "calc_iou_overlap", "(", "pred_bb", ",", "anno_bb", ")", "\n", "\n", "# handle invalid anno cases", "\n", "if", "dataset", "in", "[", "'uav'", "]", ":", "\n", "        ", "err_center", "[", "~", "valid", "]", "=", "-", "1.0", "\n", "", "else", ":", "\n", "        ", "err_center", "[", "~", "valid", "]", "=", "float", "(", "\"Inf\"", ")", "\n", "", "err_center_normalized", "[", "~", "valid", "]", "=", "-", "1.0", "\n", "err_overlap", "[", "~", "valid", "]", "=", "-", "1.0", "\n", "\n", "if", "dataset", "==", "'lasot'", ":", "\n", "        ", "err_center_normalized", "[", "~", "target_visible", "]", "=", "float", "(", "\"Inf\"", ")", "\n", "err_center", "[", "~", "target_visible", "]", "=", "float", "(", "\"Inf\"", ")", "\n", "\n", "", "if", "torch", ".", "isnan", "(", "err_overlap", ")", ".", "any", "(", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Nans in calculated overlap'", ")", "\n", "", "return", "err_overlap", ",", "err_center", ",", "err_center_normalized", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.extract_results.extract_results": [[102, 183], ["lib.test.evaluation.environment.env_settings", "os.path.join", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "enumerate", "print", "os.path.exists", "os.makedirs", "torch.arange", "len", "tqdm.tqdm", "torch.tensor", "enumerate", "torch.ones.tolist", "torch.zeros.tolist", "torch.zeros.tolist", "torch.zeros.tolist", "torch.zeros.tolist", "torch.arange.tolist", "torch.arange.tolist", "threshold_set_center_norm.tolist", "open", "pickle.dump", "len", "len", "len", "len", "torch.arange.numel", "len", "len", "torch.arange.numel", "len", "len", "torch.arange.numel", "torch.tensor", "os.path.isfile", "extract_results.calc_seq_err_robust", "err_overlap[].mean", "torch.ones.long().sum().item", "torch.tensor", "valid_frame.long().sum", "Exception", "lib.test.utils.load_text.load_text", "Exception", "torch.ones.long().sum", "str", "valid_frame.long", "torch.ones.long", "err_overlap.view", "torch.arange.view", "err_center.view", "torch.arange.view", "err_center_normalized.view", "threshold_set_center_norm.view"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.extract_results.calc_seq_err_robust", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text"], ["", "def", "extract_results", "(", "trackers", ",", "dataset", ",", "report_name", ",", "skip_missing_seq", "=", "False", ",", "plot_bin_gap", "=", "0.05", ",", "\n", "exclude_invalid_frames", "=", "False", ")", ":", "\n", "    ", "settings", "=", "env_settings", "(", ")", "\n", "eps", "=", "1e-16", "\n", "\n", "result_plot_path", "=", "os", ".", "path", ".", "join", "(", "settings", ".", "result_plot_path", ",", "report_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "result_plot_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_plot_path", ")", "\n", "\n", "", "threshold_set_overlap", "=", "torch", ".", "arange", "(", "0.0", ",", "1.0", "+", "plot_bin_gap", ",", "plot_bin_gap", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "threshold_set_center", "=", "torch", ".", "arange", "(", "0", ",", "51", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "threshold_set_center_norm", "=", "torch", ".", "arange", "(", "0", ",", "51", ",", "dtype", "=", "torch", ".", "float64", ")", "/", "100.0", "\n", "\n", "avg_overlap_all", "=", "torch", ".", "zeros", "(", "(", "len", "(", "dataset", ")", ",", "len", "(", "trackers", ")", ")", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "ave_success_rate_plot_overlap", "=", "torch", ".", "zeros", "(", "(", "len", "(", "dataset", ")", ",", "len", "(", "trackers", ")", ",", "threshold_set_overlap", ".", "numel", "(", ")", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "\n", "ave_success_rate_plot_center", "=", "torch", ".", "zeros", "(", "(", "len", "(", "dataset", ")", ",", "len", "(", "trackers", ")", ",", "threshold_set_center", ".", "numel", "(", ")", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "\n", "ave_success_rate_plot_center_norm", "=", "torch", ".", "zeros", "(", "(", "len", "(", "dataset", ")", ",", "len", "(", "trackers", ")", ",", "threshold_set_center", ".", "numel", "(", ")", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "valid_sequence", "=", "torch", ".", "ones", "(", "len", "(", "dataset", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "\n", "for", "seq_id", ",", "seq", "in", "enumerate", "(", "tqdm", "(", "dataset", ")", ")", ":", "\n", "# Load anno", "\n", "        ", "anno_bb", "=", "torch", ".", "tensor", "(", "seq", ".", "ground_truth_rect", ")", "\n", "target_visible", "=", "torch", ".", "tensor", "(", "seq", ".", "target_visible", ",", "dtype", "=", "torch", ".", "uint8", ")", "if", "seq", ".", "target_visible", "is", "not", "None", "else", "None", "\n", "for", "trk_id", ",", "trk", "in", "enumerate", "(", "trackers", ")", ":", "\n", "# Load results", "\n", "            ", "base_results_path", "=", "'{}/{}'", ".", "format", "(", "trk", ".", "results_dir", ",", "seq", ".", "name", ")", "\n", "results_path", "=", "'{}.txt'", ".", "format", "(", "base_results_path", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "results_path", ")", ":", "\n", "                ", "pred_bb", "=", "torch", ".", "tensor", "(", "load_text", "(", "str", "(", "results_path", ")", ",", "delimiter", "=", "(", "'\\t'", ",", "','", ")", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "skip_missing_seq", ":", "\n", "                    ", "valid_sequence", "[", "seq_id", "]", "=", "0", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'Result not found. {}'", ".", "format", "(", "results_path", ")", ")", "\n", "\n", "# Calculate measures", "\n", "", "", "err_overlap", ",", "err_center", ",", "err_center_normalized", ",", "valid_frame", "=", "calc_seq_err_robust", "(", "\n", "pred_bb", ",", "anno_bb", ",", "seq", ".", "dataset", ",", "target_visible", ")", "\n", "\n", "avg_overlap_all", "[", "seq_id", ",", "trk_id", "]", "=", "err_overlap", "[", "valid_frame", "]", ".", "mean", "(", ")", "\n", "\n", "if", "exclude_invalid_frames", ":", "\n", "                ", "seq_length", "=", "valid_frame", ".", "long", "(", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "                ", "seq_length", "=", "anno_bb", ".", "shape", "[", "0", "]", "\n", "\n", "", "if", "seq_length", "<=", "0", ":", "\n", "                ", "raise", "Exception", "(", "'Seq length zero'", ")", "\n", "\n", "", "ave_success_rate_plot_overlap", "[", "seq_id", ",", "trk_id", ",", ":", "]", "=", "(", "err_overlap", ".", "view", "(", "-", "1", ",", "1", ")", ">", "threshold_set_overlap", ".", "view", "(", "1", ",", "-", "1", ")", ")", ".", "sum", "(", "0", ")", ".", "float", "(", ")", "/", "seq_length", "\n", "ave_success_rate_plot_center", "[", "seq_id", ",", "trk_id", ",", ":", "]", "=", "(", "err_center", ".", "view", "(", "-", "1", ",", "1", ")", "<=", "threshold_set_center", ".", "view", "(", "1", ",", "-", "1", ")", ")", ".", "sum", "(", "0", ")", ".", "float", "(", ")", "/", "seq_length", "\n", "ave_success_rate_plot_center_norm", "[", "seq_id", ",", "trk_id", ",", ":", "]", "=", "(", "err_center_normalized", ".", "view", "(", "-", "1", ",", "1", ")", "<=", "threshold_set_center_norm", ".", "view", "(", "1", ",", "-", "1", ")", ")", ".", "sum", "(", "0", ")", ".", "float", "(", ")", "/", "seq_length", "\n", "\n", "", "", "print", "(", "'\\n\\nComputed results over {} / {} sequences'", ".", "format", "(", "valid_sequence", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "valid_sequence", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "# Prepare dictionary for saving data", "\n", "seq_names", "=", "[", "s", ".", "name", "for", "s", "in", "dataset", "]", "\n", "tracker_names", "=", "[", "{", "'name'", ":", "t", ".", "name", ",", "'param'", ":", "t", ".", "parameter_name", ",", "'run_id'", ":", "t", ".", "run_id", ",", "'disp_name'", ":", "t", ".", "display_name", "}", "\n", "for", "t", "in", "trackers", "]", "\n", "\n", "eval_data", "=", "{", "'sequences'", ":", "seq_names", ",", "'trackers'", ":", "tracker_names", ",", "\n", "'valid_sequence'", ":", "valid_sequence", ".", "tolist", "(", ")", ",", "\n", "'ave_success_rate_plot_overlap'", ":", "ave_success_rate_plot_overlap", ".", "tolist", "(", ")", ",", "\n", "'ave_success_rate_plot_center'", ":", "ave_success_rate_plot_center", ".", "tolist", "(", ")", ",", "\n", "'ave_success_rate_plot_center_norm'", ":", "ave_success_rate_plot_center_norm", ".", "tolist", "(", ")", ",", "\n", "'avg_overlap_all'", ":", "avg_overlap_all", ".", "tolist", "(", ")", ",", "\n", "'threshold_set_overlap'", ":", "threshold_set_overlap", ".", "tolist", "(", ")", ",", "\n", "'threshold_set_center'", ":", "threshold_set_center", ".", "tolist", "(", ")", ",", "\n", "'threshold_set_center_norm'", ":", "threshold_set_center_norm", ".", "tolist", "(", ")", "}", "\n", "\n", "with", "open", "(", "result_plot_path", "+", "'/eval_data.pkl'", ",", "'wb'", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "eval_data", ",", "fh", ")", "\n", "\n", "", "return", "eval_data", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.extract_results.extract_results_my": [[185, 273], ["lib.test.evaluation.environment.env_settings", "os.path.join", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "enumerate", "print", "os.path.exists", "os.makedirs", "torch.arange", "len", "tqdm.tqdm", "torch.tensor", "enumerate", "torch.ones.tolist", "torch.zeros.tolist", "torch.zeros.tolist", "torch.zeros.tolist", "torch.zeros.tolist", "torch.arange.tolist", "torch.arange.tolist", "threshold_set_center_norm.tolist", "open", "pickle.dump", "len", "len", "len", "len", "torch.arange.numel", "len", "len", "torch.arange.numel", "len", "len", "torch.arange.numel", "torch.tensor", "os.path.isfile", "extract_results.calc_seq_err_robust", "err_overlap[].mean", "torch.ones.long().sum().item", "torch.tensor", "valid_frame.long().sum", "Exception", "lib.test.utils.load_text.load_text", "Exception", "torch.ones.long().sum", "str", "valid_frame.long", "torch.ones.long", "err_overlap.view", "torch.arange.view", "err_center.view", "torch.arange.view", "err_center_normalized.view", "threshold_set_center_norm.view"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.extract_results.calc_seq_err_robust", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text"], ["", "def", "extract_results_my", "(", "trackers", ",", "dataset", ",", "report_name", ",", "skip_missing_seq", "=", "False", ",", "plot_bin_gap", "=", "0.05", ",", "\n", "exclude_invalid_frames", "=", "False", ")", ":", "\n", "    ", "settings", "=", "env_settings", "(", ")", "\n", "eps", "=", "1e-16", "\n", "\n", "result_plot_path", "=", "os", ".", "path", ".", "join", "(", "settings", ".", "result_plot_path", ",", "report_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "result_plot_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_plot_path", ")", "\n", "\n", "", "threshold_set_overlap", "=", "torch", ".", "arange", "(", "0.0", ",", "1.0", "+", "plot_bin_gap", ",", "plot_bin_gap", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "threshold_set_center", "=", "torch", ".", "arange", "(", "0", ",", "51", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "threshold_set_center_norm", "=", "torch", ".", "arange", "(", "0", ",", "51", ",", "dtype", "=", "torch", ".", "float64", ")", "/", "100.0", "\n", "\n", "avg_overlap_all", "=", "torch", ".", "zeros", "(", "(", "len", "(", "dataset", ")", ",", "len", "(", "trackers", ")", ")", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "ave_success_rate_plot_overlap", "=", "torch", ".", "zeros", "(", "(", "len", "(", "dataset", ")", ",", "len", "(", "trackers", ")", ",", "threshold_set_overlap", ".", "numel", "(", ")", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "\n", "ave_success_rate_plot_center", "=", "torch", ".", "zeros", "(", "(", "len", "(", "dataset", ")", ",", "len", "(", "trackers", ")", ",", "threshold_set_center", ".", "numel", "(", ")", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "\n", "ave_success_rate_plot_center_norm", "=", "torch", ".", "zeros", "(", "(", "len", "(", "dataset", ")", ",", "len", "(", "trackers", ")", ",", "threshold_set_center", ".", "numel", "(", ")", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "valid_sequence", "=", "torch", ".", "ones", "(", "len", "(", "dataset", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "\n", "for", "seq_id", ",", "seq", "in", "enumerate", "(", "tqdm", "(", "dataset", ")", ")", ":", "\n", "# Load anno", "\n", "        ", "anno_bb", "=", "torch", ".", "tensor", "(", "seq", ".", "ground_truth_rect", ")", "\n", "target_visible", "=", "torch", ".", "tensor", "(", "seq", ".", "target_visible", ",", "dtype", "=", "torch", ".", "uint8", ")", "if", "seq", ".", "target_visible", "is", "not", "None", "else", "None", "\n", "for", "trk_id", ",", "trk", "in", "enumerate", "(", "trackers", ")", ":", "\n", "# Load results", "\n", "            ", "base_results_path", "=", "'{}/{}'", ".", "format", "(", "trk", ".", "results_dir", ",", "seq", ".", "name", ")", "\n", "results_path", "=", "'{}.txt'", ".", "format", "(", "base_results_path", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "results_path", ")", ":", "\n", "                ", "pred_bb", "=", "torch", ".", "tensor", "(", "load_text", "(", "str", "(", "results_path", ")", ",", "delimiter", "=", "(", "'\\t'", ",", "','", ")", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "skip_missing_seq", ":", "\n", "                    ", "valid_sequence", "[", "seq_id", "]", "=", "0", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'Result not found. {}'", ".", "format", "(", "results_path", ")", ")", "\n", "\n", "# Calculate measures", "\n", "", "", "err_overlap", ",", "err_center", ",", "err_center_normalized", ",", "valid_frame", "=", "calc_seq_err_robust", "(", "\n", "pred_bb", ",", "anno_bb", ",", "seq", ".", "dataset", ",", "target_visible", ")", "\n", "\n", "avg_overlap_all", "[", "seq_id", ",", "trk_id", "]", "=", "err_overlap", "[", "valid_frame", "]", ".", "mean", "(", ")", "\n", "\n", "if", "exclude_invalid_frames", ":", "\n", "                ", "seq_length", "=", "valid_frame", ".", "long", "(", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "                ", "seq_length", "=", "anno_bb", ".", "shape", "[", "0", "]", "\n", "\n", "", "if", "seq_length", "<=", "0", ":", "\n", "                ", "raise", "Exception", "(", "'Seq length zero'", ")", "\n", "\n", "", "ave_success_rate_plot_overlap", "[", "seq_id", ",", "trk_id", ",", ":", "]", "=", "(", "err_overlap", ".", "view", "(", "-", "1", ",", "1", ")", ">", "threshold_set_overlap", ".", "view", "(", "1", ",", "\n", "-", "1", ")", ")", ".", "sum", "(", "\n", "0", ")", ".", "float", "(", ")", "/", "seq_length", "\n", "ave_success_rate_plot_center", "[", "seq_id", ",", "trk_id", ",", ":", "]", "=", "(", "err_center", ".", "view", "(", "-", "1", ",", "1", ")", "<=", "threshold_set_center", ".", "view", "(", "1", ",", "\n", "-", "1", ")", ")", ".", "sum", "(", "\n", "0", ")", ".", "float", "(", ")", "/", "seq_length", "\n", "ave_success_rate_plot_center_norm", "[", "seq_id", ",", "trk_id", ",", ":", "]", "=", "(", "err_center_normalized", ".", "view", "(", "-", "1", ",", "\n", "1", ")", "<=", "threshold_set_center_norm", ".", "view", "(", "\n", "1", ",", "-", "1", ")", ")", ".", "sum", "(", "0", ")", ".", "float", "(", ")", "/", "seq_length", "\n", "\n", "", "", "print", "(", "'\\n\\nComputed results over {} / {} sequences'", ".", "format", "(", "valid_sequence", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "valid_sequence", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "# Prepare dictionary for saving data", "\n", "seq_names", "=", "[", "s", ".", "name", "for", "s", "in", "dataset", "]", "\n", "tracker_names", "=", "[", "{", "'name'", ":", "t", ".", "name", ",", "'param'", ":", "t", ".", "parameter_name", ",", "'run_id'", ":", "t", ".", "run_id", ",", "'disp_name'", ":", "t", ".", "display_name", "}", "\n", "for", "t", "in", "trackers", "]", "\n", "\n", "eval_data", "=", "{", "'sequences'", ":", "seq_names", ",", "'trackers'", ":", "tracker_names", ",", "\n", "'valid_sequence'", ":", "valid_sequence", ".", "tolist", "(", ")", ",", "\n", "'ave_success_rate_plot_overlap'", ":", "ave_success_rate_plot_overlap", ".", "tolist", "(", ")", ",", "\n", "'ave_success_rate_plot_center'", ":", "ave_success_rate_plot_center", ".", "tolist", "(", ")", ",", "\n", "'ave_success_rate_plot_center_norm'", ":", "ave_success_rate_plot_center_norm", ".", "tolist", "(", ")", ",", "\n", "'avg_overlap_all'", ":", "avg_overlap_all", ".", "tolist", "(", ")", ",", "\n", "'threshold_set_overlap'", ":", "threshold_set_overlap", ".", "tolist", "(", ")", ",", "\n", "'threshold_set_center'", ":", "threshold_set_center", ".", "tolist", "(", ")", ",", "\n", "'threshold_set_center_norm'", ":", "threshold_set_center_norm", ".", "tolist", "(", ")", "}", "\n", "\n", "with", "open", "(", "result_plot_path", "+", "'/eval_data.pkl'", ",", "'wb'", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "eval_data", ",", "fh", ")", "\n", "\n", "", "return", "eval_data", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.evaluate_vos.evaluate_sequence": [[14, 45], ["dict", "object_info.items", "_statistics.items", "enumerate", "collections.OrderedDict", "numpy.ones", "zip", "float", "len", "list().index", "stat_fn", "results[].values", "len", "list", "annotations.keys"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["def", "evaluate_sequence", "(", "seq_name", ",", "segmentations", ",", "annotations", ",", "object_info", ",", "measure", "=", "'J'", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate video sequence results.\n\n      Arguments:\n          segmentations (dict of ndarray): segmentation labels.\n          annotations   (dict of ndarray): ground-truth labels.\n          object_info   dict: {object_id: first_frame_index}\n\n      measure       evaluation metric (J,F)\n    \"\"\"", "\n", "\n", "results", "=", "dict", "(", "raw", "=", "OrderedDict", "(", ")", ")", "\n", "\n", "_measures", "=", "{", "'J'", ":", "utils", ".", "davis_jaccard_measure", ",", "'F'", ":", "utils", ".", "davis_f_measure", "}", "\n", "_statistics", "=", "{", "'decay'", ":", "utils", ".", "decay", ",", "'mean'", ":", "utils", ".", "mean", ",", "'recall'", ":", "utils", ".", "recall", ",", "'std'", ":", "utils", ".", "std", "}", "\n", "\n", "for", "obj_id", ",", "first_frame", "in", "object_info", ".", "items", "(", ")", ":", "\n", "\n", "        ", "r", "=", "np", ".", "ones", "(", "(", "len", "(", "annotations", ")", ")", ")", "*", "np", ".", "nan", "\n", "\n", "for", "i", ",", "(", "an", ",", "sg", ")", "in", "enumerate", "(", "zip", "(", "annotations", ",", "segmentations", ")", ")", ":", "\n", "            ", "if", "list", "(", "annotations", ".", "keys", "(", ")", ")", ".", "index", "(", "first_frame", ")", "<", "i", "<", "len", "(", "annotations", ")", "-", "1", ":", "\n", "                ", "r", "[", "i", "]", "=", "_measures", "[", "measure", "]", "(", "annotations", "[", "an", "]", "==", "obj_id", ",", "segmentations", "[", "sg", "]", "==", "obj_id", ")", "\n", "\n", "", "", "results", "[", "'raw'", "]", "[", "obj_id", "]", "=", "r", "\n", "\n", "", "for", "stat", ",", "stat_fn", "in", "_statistics", ".", "items", "(", ")", ":", "\n", "        ", "results", "[", "stat", "]", "=", "[", "float", "(", "stat_fn", "(", "r", ")", ")", "for", "r", "in", "results", "[", "'raw'", "]", ".", "values", "(", ")", "]", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.evaluate_vos.evaluate_dataset": [[47, 138], ["pytracking.evaluation.get_dataset", "collections.OrderedDict", "enumerate", "evaluate_vos.evaluate_dataset._print"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.datasets.get_dataset"], ["", "def", "evaluate_dataset", "(", "results_path", ",", "dset_name", ",", "measure", "=", "'J'", ",", "to_file", "=", "True", ",", "scores", "=", "False", ",", "sequences", "=", "None", ",", "quiet", "=", "False", ")", ":", "\n", "    ", "dset", "=", "get_dataset", "(", "dset_name", ")", "\n", "results", "=", "OrderedDict", "(", ")", "\n", "dset_scores", "=", "[", "]", "\n", "dset_decay", "=", "[", "]", "\n", "dset_recall", "=", "[", "]", "\n", "\n", "if", "to_file", ":", "\n", "        ", "f", "=", "open", "(", "results_path", "/", "(", "\"evaluation-%s.txt\"", "%", "measure", ")", ",", "\"w\"", ")", "\n", "\n", "", "def", "_print", "(", "msg", ")", ":", "\n", "        ", "if", "not", "quiet", ":", "\n", "            ", "print", "(", "msg", ")", "\n", "", "if", "to_file", ":", "\n", "            ", "print", "(", "msg", ",", "file", "=", "f", ")", "\n", "\n", "", "", "if", "sequences", "is", "not", "None", ":", "\n", "        ", "sequences", "=", "[", "sequences", "]", "if", "not", "isinstance", "(", "sequences", ",", "(", "list", ",", "tuple", ")", ")", "else", "sequences", "\n", "\n", "", "target_names", "=", "[", "]", "\n", "for", "j", ",", "sequence", "in", "enumerate", "(", "dset", ")", ":", "\n", "        ", "if", "(", "sequences", "is", "not", "None", ")", "and", "(", "sequence", ".", "name", "not", "in", "sequences", ")", ":", "\n", "            ", "continue", "\n", "\n", "# Load all frames", "\n", "", "frames", "=", "sequence", ".", "ground_truth_seg", "\n", "\n", "annotations", "=", "OrderedDict", "(", ")", "\n", "segmentations", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "f", "in", "frames", ":", "\n", "            ", "if", "f", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "file", "=", "Path", "(", "f", ")", "\n", "annotations", "[", "file", ".", "name", "]", "=", "imread_indexed", "(", "file", ")", "\n", "if", "not", "scores", ":", "\n", "                ", "segmentations", "[", "file", ".", "name", "]", "=", "imread_indexed", "(", "os", ".", "path", ".", "join", "(", "results_path", ",", "sequence", ".", "name", ",", "file", ".", "name", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "# Find object ids and starting frames", "\n", "\n", "", "", "object_info", "=", "dict", "(", ")", "\n", "\n", "for", "f_id", ",", "d", "in", "sequence", ".", "init_data", ".", "items", "(", ")", ":", "\n", "            ", "for", "obj_id", "in", "d", "[", "'object_ids'", "]", ":", "\n", "                ", "object_info", "[", "int", "(", "obj_id", ")", "]", "=", "Path", "(", "d", "[", "'mask'", "]", ")", ".", "name", "\n", "\n", "", "", "if", "0", "in", "object_info", ":", "# Remove background", "\n", "            ", "object_info", ".", "pop", "(", "0", ")", "\n", "\n", "# Evaluate", "\n", "", "n_seqs", "=", "len", "(", "dset", ")", "\n", "n_objs", "=", "len", "(", "object_info", ")", "\n", "seq_name", "=", "sequence", ".", "name", "\n", "\n", "_print", "(", "\"%d/%d: %s: %d object%s\"", "%", "(", "j", "+", "1", ",", "n_seqs", ",", "seq_name", ",", "n_objs", ",", "\"s\"", "if", "n_objs", ">", "1", "else", "\"\"", ")", ")", "\n", "r", "=", "evaluate_sequence", "(", "seq_name", ",", "segmentations", ",", "annotations", ",", "object_info", ",", "measure", "=", "measure", ")", "\n", "results", "[", "seq_name", "]", "=", "r", "\n", "\n", "# Print scores, per frame and object, ignoring NaNs", "\n", "\n", "per_obj_score", "=", "[", "]", "# Per-object accuracies, averaged over the sequence", "\n", "per_frame_score", "=", "[", "]", "# Per-frame accuracies, averaged over the objects", "\n", "\n", "for", "obj_id", ",", "score", "in", "r", "[", "'raw'", "]", ".", "items", "(", ")", ":", "\n", "            ", "target_names", ".", "append", "(", "'{}_{}'", ".", "format", "(", "seq_name", ",", "obj_id", ")", ")", "\n", "per_frame_score", ".", "append", "(", "score", ")", "\n", "s", "=", "utils", ".", "mean", "(", "score", ")", "# Sequence average for one object", "\n", "per_obj_score", ".", "append", "(", "s", ")", "\n", "if", "n_objs", ">", "1", ":", "\n", "                ", "_print", "(", "\"joint {obj}: acc {score:.3f} \u250a{apf}\u250a\"", ".", "format", "(", "obj", "=", "obj_id", ",", "score", "=", "s", ",", "apf", "=", "utils", ".", "text_bargraph", "(", "score", ")", ")", ")", "\n", "\n", "# Print mean object score per frame and final score", "\n", "", "", "dset_decay", ".", "extend", "(", "r", "[", "'decay'", "]", ")", "\n", "dset_recall", ".", "extend", "(", "r", "[", "'recall'", "]", ")", "\n", "dset_scores", ".", "extend", "(", "per_obj_score", ")", "\n", "\n", "seq_score", "=", "utils", ".", "mean", "(", "per_obj_score", ")", "# Final score", "\n", "seq_mean_score", "=", "utils", ".", "nanmean", "(", "np", ".", "array", "(", "per_frame_score", ")", ",", "axis", "=", "0", ")", "# Mean object score per frame", "\n", "\n", "# Print sequence results", "\n", "_print", "(", "\"final  : acc {seq:.3f} ({dset:.3f}) \u250a{apf}\u250a\"", ".", "format", "(", "\n", "seq", "=", "seq_score", ",", "dset", "=", "np", ".", "mean", "(", "dset_scores", ")", ",", "apf", "=", "utils", ".", "text_bargraph", "(", "seq_mean_score", ")", ")", ")", "\n", "\n", "", "_print", "(", "\"%s: %.3f, recall: %.3f, decay: %.3f\"", "%", "(", "measure", ",", "utils", ".", "mean", "(", "dset_scores", ")", ",", "utils", ".", "mean", "(", "dset_recall", ")", ",", "utils", ".", "mean", "(", "dset_decay", ")", ")", ")", "\n", "\n", "if", "to_file", ":", "\n", "        ", "f", ".", "close", "(", ")", "\n", "\n", "", "return", "target_names", ",", "dset_scores", ",", "dset_recall", ",", "dset_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.evaluate_vos.evaluate_vos": [[140, 200], ["pytracking.analysis.plot_results.generate_formatted_report", "print", "display_names.append", "os.path.join", "os.path.join", "scores[].append", "scores[].append", "scores[].append", "table_g_all.append", "table_seq_all.append", "os.path.exists", "os.path.exists", "pandas.read_csv", "pandas.read_csv", "evaluate_vos.evaluate_dataset", "numpy.array", "numpy.reshape", "pandas.DataFrame", "pandas.DataFrame", "open", "pd.DataFrame.to_csv", "open", "pd.DataFrame.to_csv", "pytracking.mean", "pytracking.mean", "pytracking.mean", "len", "list", "zip"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.plot_results.generate_formatted_report", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.evaluate_vos.evaluate_dataset", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "def", "evaluate_vos", "(", "trackers", ",", "dataset", "=", "'yt2019_jjval'", ",", "force", "=", "False", ")", ":", "\n", "    ", "\"\"\" evaluate a list of trackers on a vos dataset.\n\n    args:\n        trackers - list of trackers to evaluate\n        dataset - name of the dataset\n        force - Force re-evaluation. If False, the pre-computed results are loaded if available\n    \"\"\"", "\n", "csv_name_global", "=", "f'{dataset}_global_results.csv'", "\n", "csv_name_per_sequence", "=", "f'{dataset}_per-sequence_results.csv'", "\n", "\n", "table_g_all", "=", "[", "]", "\n", "table_seq_all", "=", "[", "]", "\n", "scores", "=", "{", "'J-Mean'", ":", "[", "]", ",", "'J-Recall'", ":", "[", "]", ",", "'J-Decay'", ":", "[", "]", "}", "\n", "display_names", "=", "[", "]", "\n", "for", "t", "in", "trackers", ":", "\n", "        ", "if", "t", ".", "display_name", "is", "not", "None", ":", "\n", "            ", "disp_name", "=", "t", ".", "display_name", "\n", "", "elif", "t", ".", "run_id", "is", "not", "None", ":", "\n", "            ", "disp_name", "=", "'{} {}_{:03d}'", ".", "format", "(", "t", ".", "name", ",", "t", ".", "parameter_name", ",", "t", ".", "run_id", ")", "\n", "", "else", ":", "\n", "            ", "disp_name", "=", "'{} {}'", ".", "format", "(", "t", ".", "name", ",", "t", ".", "parameter_name", ")", "\n", "\n", "", "display_names", ".", "append", "(", "disp_name", ")", "\n", "results_path", "=", "t", ".", "segmentation_dir", "\n", "\n", "csv_name_global_path", "=", "os", ".", "path", ".", "join", "(", "results_path", ",", "csv_name_global", ")", "\n", "csv_name_per_sequence_path", "=", "os", ".", "path", ".", "join", "(", "results_path", ",", "csv_name_per_sequence", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "csv_name_global_path", ")", "and", "os", ".", "path", ".", "exists", "(", "csv_name_per_sequence_path", ")", "and", "not", "force", ":", "\n", "            ", "table_g", "=", "pd", ".", "read_csv", "(", "csv_name_global_path", ")", "\n", "table_seq", "=", "pd", ".", "read_csv", "(", "csv_name_per_sequence_path", ")", "\n", "", "else", ":", "\n", "            ", "seq_names", ",", "dset_scores", ",", "dset_recall", ",", "dset_decay", "=", "evaluate_dataset", "(", "results_path", ",", "dataset", ",", "measure", "=", "'J'", ",", "\n", "to_file", "=", "False", ",", "scores", "=", "False", ",", "\n", "sequences", "=", "None", ")", "\n", "g_measures", "=", "[", "'J-Mean'", ",", "'J-Recall'", ",", "'J-Decay'", "]", "\n", "g_res", "=", "np", ".", "array", "(", "[", "utils", ".", "mean", "(", "dset_scores", ")", ",", "utils", ".", "mean", "(", "dset_recall", ")", ",", "utils", ".", "mean", "(", "dset_decay", ")", "]", ")", "\n", "g_res", "=", "np", ".", "reshape", "(", "g_res", ",", "[", "1", ",", "len", "(", "g_res", ")", "]", ")", "\n", "\n", "table_g", "=", "pd", ".", "DataFrame", "(", "data", "=", "g_res", ",", "columns", "=", "g_measures", ")", "\n", "with", "open", "(", "csv_name_global_path", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "table_g", ".", "to_csv", "(", "f", ",", "index", "=", "False", ",", "float_format", "=", "\"%.3f\"", ")", "\n", "\n", "", "seq_measures", "=", "[", "'Sequence'", ",", "'J-Mean'", ",", "'J-Recall'", ",", "'J-Decay'", "]", "\n", "\n", "table_seq", "=", "pd", ".", "DataFrame", "(", "data", "=", "list", "(", "zip", "(", "seq_names", ",", "dset_scores", ",", "dset_recall", ",", "dset_decay", ")", ")", ",", "columns", "=", "seq_measures", ")", "\n", "with", "open", "(", "csv_name_per_sequence_path", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "table_seq", ".", "to_csv", "(", "f", ",", "index", "=", "False", ",", "float_format", "=", "\"%.3f\"", ")", "\n", "\n", "", "", "scores", "[", "'J-Mean'", "]", ".", "append", "(", "table_g", "[", "'J-Mean'", "]", ".", "values", "[", "0", "]", "*", "100", ")", "\n", "scores", "[", "'J-Recall'", "]", ".", "append", "(", "table_g", "[", "'J-Recall'", "]", ".", "values", "[", "0", "]", "*", "100", ")", "\n", "scores", "[", "'J-Decay'", "]", ".", "append", "(", "table_g", "[", "'J-Decay'", "]", ".", "values", "[", "0", "]", "*", "100", ")", "\n", "\n", "table_g_all", ".", "append", "(", "table_g", ")", "\n", "table_seq_all", ".", "append", "(", "table_seq", ")", "\n", "\n", "", "report", "=", "generate_formatted_report", "(", "display_names", ",", "scores", ")", "\n", "print", "(", "report", ")", "\n", "\n", "return", "table_g_all", ",", "table_seq_all", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.cswintt.CSWinTT.__init__": [[11, 41], ["lib.test.tracker.basetracker.BaseTracker.__init__", "lib.models.build_cswintt", "lib.models.build_cswintt.load_state_dict", "print", "lib.models.build_cswintt.cuda", "cswintt.CSWinTT.network.eval", "lib.test.tracker.cswintt_utils.Preprocessor", "dataset_name.upper", "hasattr", "print", "len", "torch.load", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.build_cswintt", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.eval"], ["update_config_from_file", "(", "yaml_file", ")", "\n", "params", ".", "cfg", "=", "cfg", "\n", "print", "(", "\"test config: \"", ",", "cfg", ")", "\n", "\n", "# template and search region", "\n", "params", ".", "template_factor", "=", "cfg", ".", "TEST", ".", "TEMPLATE_FACTOR", "\n", "params", ".", "template_size", "=", "cfg", ".", "TEST", ".", "TEMPLATE_SIZE", "\n", "params", ".", "search_factor", "=", "cfg", ".", "TEST", ".", "SEARCH_FACTOR", "\n", "params", ".", "search_size", "=", "cfg", ".", "TEST", ".", "SEARCH_SIZE", "\n", "\n", "# Network checkpoint path", "\n", "params", ".", "checkpoint_cls", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"checkpoints/CSWinTT.pth\"", ")", "\n", "\n", "# whether to save boxes from all queries", "\n", "params", ".", "save_all_boxes", "=", "False", "\n", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.cswintt.CSWinTT.initialize": [[42, 63], ["lib.train.data.processing_utils.sample_target", "cswintt.CSWinTT.preprocessor.process", "cswintt.CSWinTT.z_dict_list.append", "range", "torch.no_grad", "cswintt.CSWinTT.network.forward_backbone", "cswintt.CSWinTT.z_dict_list.append", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing_utils.sample_target", "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.cswintt_utils.Preprocessor.process", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.forward_backbone"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.cswintt.CSWinTT.track": [[64, 111], ["lib.train.data.processing_utils.sample_target", "cswintt.CSWinTT.preprocessor.process", "out_dict[].view", "lib.utils.box_ops.clip_box", "out_dict[].view().sigmoid().item", "enumerate", "torch.no_grad", "cswintt.CSWinTT.network.forward_backbone", "cswintt.CSWinTT.network.forward_transformer", "cswintt.CSWinTT.map_box_back", "cv2.cvtColor", "cv2.rectangle", "os.path.join", "cv2.imwrite", "cswintt.CSWinTT.map_box_back_batch", "cswintt.CSWinTT.view().tolist", "out_dict[].view().sigmoid", "lib.train.data.processing_utils.sample_target", "cswintt.CSWinTT.preprocessor.process", "torch.no_grad", "cswintt.CSWinTT.network.forward_backbone", "int", "int", "int", "int", "cswintt.CSWinTT.view", "out_dict[].view.mean", "out_dict[].view"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing_utils.sample_target", "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.cswintt_utils.Preprocessor.process", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.clip_box", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.forward_backbone", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.forward_transformer", "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.cswintt.CSWinTT.map_box_back", "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.cswintt.CSWinTT.map_box_back_batch", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing_utils.sample_target", "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.cswintt_utils.Preprocessor.process", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.forward_backbone", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.cswintt.CSWinTT.map_box_back": [[112, 119], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.cswintt.CSWinTT.map_box_back_batch": [[120, 127], ["pred_box.unbind", "torch.stack"], "methods", ["None"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.cswintt.get_tracker_class": [[128, 130], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.basetracker.BaseTracker.__init__": [[7, 10], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "self", ".", "visdom", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.basetracker.BaseTracker.predicts_segmentation_mask": [[11, 13], ["None"], "methods", ["None"], ["", "def", "predicts_segmentation_mask", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.basetracker.BaseTracker.initialize": [[14, 17], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "image", ",", "info", ":", "dict", ")", "->", "dict", ":", "\n", "        ", "\"\"\"Overload this function in your tracker. This should initialize the model.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.basetracker.BaseTracker.track": [[18, 21], ["None"], "methods", ["None"], ["", "def", "track", "(", "self", ",", "image", ",", "info", ":", "dict", "=", "None", ")", "->", "dict", ":", "\n", "        ", "\"\"\"Overload this function in your tracker. This should track in the frame and update the model.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.basetracker.BaseTracker.visdom_draw_tracking": [[22, 31], ["isinstance", "basetracker.BaseTracker.visdom.register", "basetracker.BaseTracker.visdom.register", "box.items"], "methods", ["None"], ["", "def", "visdom_draw_tracking", "(", "self", ",", "image", ",", "box", ",", "segmentation", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "box", ",", "OrderedDict", ")", ":", "\n", "            ", "box", "=", "[", "v", "for", "k", ",", "v", "in", "box", ".", "items", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "box", "=", "(", "box", ",", ")", "\n", "", "if", "segmentation", "is", "None", ":", "\n", "            ", "self", ".", "visdom", ".", "register", "(", "(", "image", ",", "*", "box", ")", ",", "'Tracking'", ",", "1", ",", "'Tracking'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "visdom", ".", "register", "(", "(", "image", ",", "*", "box", ",", "segmentation", ")", ",", "'Tracking'", ",", "1", ",", "'Tracking'", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.cswintt_utils.Preprocessor.__init__": [[7, 10], ["torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.cswintt_utils.Preprocessor.process": [[11, 18], ["torch.tensor().cuda().float().permute().unsqueeze", "torch.from_numpy().to().cuda().unsqueeze", "lib.utils.misc.NestedTensor", "torch.tensor().cuda().float().permute", "torch.from_numpy().to().cuda", "torch.tensor().cuda().float", "torch.from_numpy().to", "torch.tensor().cuda", "torch.from_numpy", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to"], ["", "def", "process", "(", "self", ",", "img_arr", ":", "np", ".", "ndarray", ",", "amask_arr", ":", "np", ".", "ndarray", ")", ":", "\n", "# Deal with the image patch", "\n", "        ", "img_tensor", "=", "torch", ".", "tensor", "(", "img_arr", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "img_tensor_norm", "=", "(", "(", "img_tensor", "/", "255.0", ")", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "# (1,3,H,W)", "\n", "# Deal with the attention mask", "\n", "amask_tensor", "=", "torch", ".", "from_numpy", "(", "amask_arr", ")", ".", "to", "(", "torch", ".", "bool", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "# (1,H,W)", "\n", "return", "NestedTensor", "(", "img_tensor_norm", ",", "amask_tensor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.trackingnetdataset.TrackingNetDataset.__init__": [[18, 29], ["lib.test.evaluation.data.BaseDataset.__init__", "trackingnetdataset.TrackingNetDataset._list_sequences", "isinstance", "range"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.trackingnetdataset.TrackingNetDataset._list_sequences"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "trackingnet_path", "\n", "\n", "sets", "=", "'TEST'", "\n", "if", "not", "isinstance", "(", "sets", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "sets", "==", "'TEST'", ":", "\n", "                ", "sets", "=", "[", "'TEST'", "]", "\n", "", "elif", "sets", "==", "'TRAIN'", ":", "\n", "                ", "sets", "=", "[", "'TRAIN_{}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "", "", "self", ".", "sequence_list", "=", "self", ".", "_list_sequences", "(", "self", ".", "base_path", ",", "sets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.trackingnetdataset.TrackingNetDataset.get_sequence_list": [[30, 32], ["lib.test.evaluation.data.SequenceList", "trackingnetdataset.TrackingNetDataset._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "set", ",", "seq_name", ")", "for", "set", ",", "seq_name", "in", "self", ".", "sequence_list", "[", "390", ":", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.trackingnetdataset.TrackingNetDataset._construct_sequence": [[33, 44], ["lib.test.utils.load_text.load_text", "frame_list.sort", "lib.test.evaluation.data.Sequence", "str", "os.path.join", "lib.test.utils.load_text.load_text.reshape", "os.listdir", "frame.endswith", "int"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text"], ["", "def", "_construct_sequence", "(", "self", ",", "set", ",", "sequence_name", ")", ":", "\n", "        ", "anno_path", "=", "'{}/{}/anno/{}.txt'", ".", "format", "(", "self", ".", "base_path", ",", "set", ",", "sequence_name", ")", "\n", "\n", "ground_truth_rect", "=", "load_text", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ",", "backend", "=", "'numpy'", ")", "\n", "\n", "frames_path", "=", "'{}/{}/zips/{}'", ".", "format", "(", "self", ".", "base_path", ",", "set", ",", "sequence_name", ")", "\n", "frame_list", "=", "[", "frame", "for", "frame", "in", "os", ".", "listdir", "(", "frames_path", ")", "if", "frame", ".", "endswith", "(", "\".jpg\"", ")", "]", "\n", "frame_list", ".", "sort", "(", "key", "=", "lambda", "f", ":", "int", "(", "f", "[", ":", "-", "4", "]", ")", ")", "\n", "frames_list", "=", "[", "os", ".", "path", ".", "join", "(", "frames_path", ",", "frame", ")", "for", "frame", "in", "frame_list", "]", "\n", "\n", "return", "Sequence", "(", "sequence_name", ",", "frames_list", ",", "'trackingnet'", ",", "ground_truth_rect", ".", "reshape", "(", "-", "1", ",", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.trackingnetdataset.TrackingNetDataset.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.trackingnetdataset.TrackingNetDataset._list_sequences": [[48, 58], ["os.path.join", "os.listdir", "f.endswith", "os.path.splitext"], "methods", ["None"], ["", "def", "_list_sequences", "(", "self", ",", "root", ",", "set_ids", ")", ":", "\n", "        ", "sequence_list", "=", "[", "]", "\n", "\n", "for", "s", "in", "set_ids", ":", "\n", "            ", "anno_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "s", ",", "\"anno\"", ")", "\n", "sequences_cur_set", "=", "[", "(", "s", ",", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", ")", "for", "f", "in", "os", ".", "listdir", "(", "anno_dir", ")", "if", "f", ".", "endswith", "(", "'.txt'", ")", "]", "\n", "\n", "sequence_list", "+=", "sequences_cur_set", "\n", "\n", "", "return", "sequence_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.running._save_tracker_output": [[11, 104], ["output.items", "os.path.exists", "print", "os.makedirs", "os.path.join", "os.path.join", "numpy.array().astype", "numpy.savetxt", "numpy.array().astype", "numpy.savetxt", "os.path.exists", "os.makedirs", "numpy.around", "numpy.savetxt", "numpy.array().astype", "numpy.savetxt", "elem.items", "isinstance", "isinstance", "isinstance", "os.path.join", "os.path.join", "numpy.array", "numpy.array", "numpy.array", "running._save_tracker_output._convert_dict"], "function", ["None"], ["def", "_save_tracker_output", "(", "seq", ":", "Sequence", ",", "tracker", ":", "Tracker", ",", "output", ":", "dict", ")", ":", "\n", "    ", "\"\"\"Saves the output of the tracker.\"\"\"", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "tracker", ".", "results_dir", ")", ":", "\n", "        ", "print", "(", "\"create tracking result dir:\"", ",", "tracker", ".", "results_dir", ")", "\n", "os", ".", "makedirs", "(", "tracker", ".", "results_dir", ")", "\n", "", "if", "seq", ".", "dataset", "in", "[", "'trackingnet'", ",", "'got10k'", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "tracker", ".", "results_dir", ",", "seq", ".", "dataset", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "tracker", ".", "results_dir", ",", "seq", ".", "dataset", ")", ")", "\n", "", "", "'''2021.1.5 create new folder for these two datasets'''", "\n", "if", "seq", ".", "dataset", "in", "[", "'trackingnet'", ",", "'got10k'", "]", ":", "\n", "        ", "base_results_path", "=", "os", ".", "path", ".", "join", "(", "tracker", ".", "results_dir", ",", "seq", ".", "dataset", ",", "seq", ".", "name", ")", "\n", "", "else", ":", "\n", "        ", "base_results_path", "=", "os", ".", "path", ".", "join", "(", "tracker", ".", "results_dir", ",", "seq", ".", "name", ")", "\n", "\n", "", "def", "save_bb", "(", "file", ",", "data", ")", ":", "\n", "        ", "if", "seq", ".", "dataset", "in", "[", "'got10k'", ",", "'uav'", ",", "'trackingnet'", "]", ":", "\n", "            ", "tracked_bb", "=", "np", ".", "around", "(", "np", ".", "array", "(", "data", ")", ",", "3", ")", "\n", "np", ".", "savetxt", "(", "file", ",", "tracked_bb", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%.3f'", ")", "\n", "", "else", ":", "\n", "            ", "tracked_bb", "=", "np", ".", "array", "(", "data", ")", ".", "astype", "(", "int", ")", "\n", "np", ".", "savetxt", "(", "file", ",", "tracked_bb", ",", "delimiter", "=", "'\\t'", ",", "fmt", "=", "'%d'", ")", "\n", "\n", "", "", "def", "save_time", "(", "file", ",", "data", ")", ":", "\n", "        ", "exec_times", "=", "np", ".", "array", "(", "data", ")", ".", "astype", "(", "float", ")", "\n", "np", ".", "savetxt", "(", "file", ",", "exec_times", ",", "delimiter", "=", "'\\t'", ",", "fmt", "=", "'%f'", ")", "\n", "\n", "", "def", "save_score", "(", "file", ",", "data", ")", ":", "\n", "        ", "scores", "=", "np", ".", "array", "(", "data", ")", ".", "astype", "(", "float", ")", "\n", "np", ".", "savetxt", "(", "file", ",", "scores", ",", "delimiter", "=", "'\\t'", ",", "fmt", "=", "'%.2f'", ")", "\n", "\n", "", "def", "_convert_dict", "(", "input_dict", ")", ":", "\n", "        ", "data_dict", "=", "{", "}", "\n", "for", "elem", "in", "input_dict", ":", "\n", "            ", "for", "k", ",", "v", "in", "elem", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "in", "data_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "data_dict", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                    ", "data_dict", "[", "k", "]", "=", "[", "v", ",", "]", "\n", "", "", "", "return", "data_dict", "\n", "\n", "", "for", "key", ",", "data", "in", "output", ".", "items", "(", ")", ":", "\n", "# If data is empty", "\n", "        ", "if", "not", "data", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "key", "==", "'target_bbox'", ":", "\n", "            ", "if", "isinstance", "(", "data", "[", "0", "]", ",", "(", "dict", ",", "OrderedDict", ")", ")", ":", "\n", "                ", "data_dict", "=", "_convert_dict", "(", "data", ")", "\n", "\n", "for", "obj_id", ",", "d", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "                    ", "bbox_file", "=", "'{}_{}.txt'", ".", "format", "(", "base_results_path", ",", "obj_id", ")", "\n", "save_bb", "(", "bbox_file", ",", "d", ")", "\n", "", "", "else", ":", "\n", "# Single-object mode", "\n", "                ", "bbox_file", "=", "'{}.txt'", ".", "format", "(", "base_results_path", ")", "\n", "save_bb", "(", "bbox_file", ",", "data", ")", "\n", "\n", "", "", "if", "key", "==", "'all_boxes'", ":", "\n", "            ", "if", "isinstance", "(", "data", "[", "0", "]", ",", "(", "dict", ",", "OrderedDict", ")", ")", ":", "\n", "                ", "data_dict", "=", "_convert_dict", "(", "data", ")", "\n", "\n", "for", "obj_id", ",", "d", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "                    ", "bbox_file", "=", "'{}_{}_all_boxes.txt'", ".", "format", "(", "base_results_path", ",", "obj_id", ")", "\n", "save_bb", "(", "bbox_file", ",", "d", ")", "\n", "", "", "else", ":", "\n", "# Single-object mode", "\n", "                ", "bbox_file", "=", "'{}_all_boxes.txt'", ".", "format", "(", "base_results_path", ")", "\n", "save_bb", "(", "bbox_file", ",", "data", ")", "\n", "\n", "", "", "if", "key", "==", "'all_scores'", ":", "\n", "            ", "if", "isinstance", "(", "data", "[", "0", "]", ",", "(", "dict", ",", "OrderedDict", ")", ")", ":", "\n", "                ", "data_dict", "=", "_convert_dict", "(", "data", ")", "\n", "\n", "for", "obj_id", ",", "d", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "                    ", "bbox_file", "=", "'{}_{}_all_scores.txt'", ".", "format", "(", "base_results_path", ",", "obj_id", ")", "\n", "save_score", "(", "bbox_file", ",", "d", ")", "\n", "", "", "else", ":", "\n", "# Single-object mode", "\n", "                ", "print", "(", "\"saving scores...\"", ")", "\n", "bbox_file", "=", "'{}_all_scores.txt'", ".", "format", "(", "base_results_path", ")", "\n", "save_score", "(", "bbox_file", ",", "data", ")", "\n", "\n", "", "", "elif", "key", "==", "'time'", ":", "\n", "            ", "if", "isinstance", "(", "data", "[", "0", "]", ",", "dict", ")", ":", "\n", "                ", "data_dict", "=", "_convert_dict", "(", "data", ")", "\n", "\n", "for", "obj_id", ",", "d", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "                    ", "timings_file", "=", "'{}_{}_time.txt'", ".", "format", "(", "base_results_path", ",", "obj_id", ")", "\n", "save_time", "(", "timings_file", ",", "d", ")", "\n", "", "", "else", ":", "\n", "                ", "timings_file", "=", "'{}_time.txt'", ".", "format", "(", "base_results_path", ")", "\n", "save_time", "(", "timings_file", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.running.run_sequence": [[106, 160], ["print", "sys.stdout.flush", "isinstance", "print", "torch.cuda.set_device", "running.run_sequence._results_exist"], "function", ["None"], ["", "", "", "", "def", "run_sequence", "(", "seq", ":", "Sequence", ",", "tracker", ":", "Tracker", ",", "debug", "=", "False", ",", "num_gpu", "=", "8", ")", ":", "\n", "    ", "\"\"\"Runs a tracker on a sequence.\"\"\"", "\n", "'''2021.1.2 Add multiple gpu support'''", "\n", "try", ":", "\n", "        ", "worker_name", "=", "multiprocessing", ".", "current_process", "(", ")", ".", "name", "\n", "worker_id", "=", "int", "(", "worker_name", "[", "worker_name", ".", "find", "(", "'-'", ")", "+", "1", ":", "]", ")", "-", "1", "\n", "gpu_id", "=", "worker_id", "%", "num_gpu", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu_id", ")", "\n", "", "except", ":", "\n", "        ", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "pass", "\n", "\n", "\n", "", "def", "_results_exist", "(", ")", ":", "\n", "        ", "if", "seq", ".", "object_ids", "is", "None", ":", "\n", "            ", "if", "seq", ".", "dataset", "in", "[", "'trackingnet'", ",", "'got10k'", "]", ":", "\n", "                ", "base_results_path", "=", "os", ".", "path", ".", "join", "(", "tracker", ".", "results_dir", ",", "seq", ".", "dataset", ",", "seq", ".", "name", ")", "\n", "bbox_file", "=", "'{}.txt'", ".", "format", "(", "base_results_path", ")", "\n", "", "else", ":", "\n", "                ", "bbox_file", "=", "'{}/{}.txt'", ".", "format", "(", "tracker", ".", "results_dir", ",", "seq", ".", "name", ")", "\n", "", "return", "os", ".", "path", ".", "isfile", "(", "bbox_file", ")", "\n", "", "else", ":", "\n", "            ", "bbox_files", "=", "[", "'{}/{}_{}.txt'", ".", "format", "(", "tracker", ".", "results_dir", ",", "seq", ".", "name", ",", "obj_id", ")", "for", "obj_id", "in", "seq", ".", "object_ids", "]", "\n", "missing", "=", "[", "not", "os", ".", "path", ".", "isfile", "(", "f", ")", "for", "f", "in", "bbox_files", "]", "\n", "return", "sum", "(", "missing", ")", "==", "0", "\n", "\n", "", "", "if", "_results_exist", "(", ")", "and", "not", "debug", ":", "\n", "        ", "print", "(", "'FPS: {}'", ".", "format", "(", "-", "1", ")", ")", "\n", "return", "\n", "\n", "", "print", "(", "'Tracker: {} {} {} ,  Sequence: {}'", ".", "format", "(", "tracker", ".", "name", ",", "tracker", ".", "parameter_name", ",", "tracker", ".", "run_id", ",", "seq", ".", "name", ")", ")", "\n", "\n", "if", "debug", ":", "\n", "        ", "output", "=", "tracker", ".", "run_sequence", "(", "seq", ",", "debug", "=", "debug", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "output", "=", "tracker", ".", "run_sequence", "(", "seq", ",", "debug", "=", "debug", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "return", "\n", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "isinstance", "(", "output", "[", "'time'", "]", "[", "0", "]", ",", "(", "dict", ",", "OrderedDict", ")", ")", ":", "\n", "        ", "exec_time", "=", "sum", "(", "[", "sum", "(", "times", ".", "values", "(", ")", ")", "for", "times", "in", "output", "[", "'time'", "]", "]", ")", "\n", "num_frames", "=", "len", "(", "output", "[", "'time'", "]", ")", "\n", "", "else", ":", "\n", "        ", "exec_time", "=", "sum", "(", "output", "[", "'time'", "]", ")", "\n", "num_frames", "=", "len", "(", "output", "[", "'time'", "]", ")", "\n", "\n", "", "print", "(", "'FPS: {}'", ".", "format", "(", "num_frames", "/", "exec_time", ")", ")", "\n", "\n", "if", "not", "debug", ":", "\n", "        ", "_save_tracker_output", "(", "seq", ",", "tracker", ",", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.running.run_dataset": [[162, 190], ["multiprocessing.set_start_method", "print", "multiprocessing.set_start_method", "print", "len", "len", "running.run_sequence", "multiprocessing.Pool", "pool.starmap", "itertools.product"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker.run_sequence"], ["", "", "def", "run_dataset", "(", "dataset", ",", "trackers", ",", "debug", "=", "False", ",", "threads", "=", "0", ",", "num_gpus", "=", "8", ")", ":", "\n", "    ", "\"\"\"Runs a list of trackers on a dataset.\n    args:\n        dataset: List of Sequence instances, forming a dataset.\n        trackers: List of Tracker instances.\n        debug: Debug level.\n        threads: Number of threads to use (default 0).\n    \"\"\"", "\n", "multiprocessing", ".", "set_start_method", "(", "'spawn'", ",", "force", "=", "True", ")", "\n", "\n", "print", "(", "'Evaluating {:4d} trackers on {:5d} sequences'", ".", "format", "(", "len", "(", "trackers", ")", ",", "len", "(", "dataset", ")", ")", ")", "\n", "\n", "multiprocessing", ".", "set_start_method", "(", "'spawn'", ",", "force", "=", "True", ")", "\n", "\n", "if", "threads", "==", "0", ":", "\n", "        ", "mode", "=", "'sequential'", "\n", "", "else", ":", "\n", "        ", "mode", "=", "'parallel'", "\n", "\n", "", "if", "mode", "==", "'sequential'", ":", "\n", "        ", "for", "seq", "in", "dataset", ":", "\n", "            ", "for", "tracker_info", "in", "trackers", ":", "\n", "                ", "run_sequence", "(", "seq", ",", "tracker_info", ",", "debug", "=", "debug", ")", "\n", "", "", "", "elif", "mode", "==", "'parallel'", ":", "\n", "        ", "param_list", "=", "[", "(", "seq", ",", "tracker_info", ",", "debug", ",", "num_gpus", ")", "for", "seq", ",", "tracker_info", "in", "product", "(", "dataset", ",", "trackers", ")", "]", "\n", "with", "multiprocessing", ".", "Pool", "(", "processes", "=", "threads", ")", "as", "pool", ":", "\n", "            ", "pool", ".", "starmap", "(", "run_sequence", ",", "param_list", ")", "\n", "", "", "print", "(", "'Done'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.otbdataset.OTBDataset.__init__": [[17, 22], ["lib.test.evaluation.data.BaseDataset.__init__", "otbdataset.OTBDataset._get_sequence_info_list"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.uavdataset.UAVDataset._get_sequence_info_list"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "otb_path", "\n", "# self.base_path='/home/hust/Tracking/OTB'", "\n", "self", ".", "sequence_info_list", "=", "self", ".", "_get_sequence_info_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.otbdataset.OTBDataset.get_sequence_list": [[23, 25], ["lib.test.evaluation.data.SequenceList", "otbdataset.OTBDataset._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_info_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.otbdataset.OTBDataset._construct_sequence": [[26, 47], ["lib.test.utils.load_text.load_text", "lib.test.evaluation.data.Sequence", "str", "range"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_info", ")", ":", "\n", "        ", "sequence_path", "=", "sequence_info", "[", "'path'", "]", "\n", "nz", "=", "sequence_info", "[", "'nz'", "]", "\n", "ext", "=", "sequence_info", "[", "'ext'", "]", "\n", "start_frame", "=", "sequence_info", "[", "'startFrame'", "]", "\n", "end_frame", "=", "sequence_info", "[", "'endFrame'", "]", "\n", "\n", "init_omit", "=", "0", "\n", "if", "'initOmit'", "in", "sequence_info", ":", "\n", "            ", "init_omit", "=", "sequence_info", "[", "'initOmit'", "]", "\n", "\n", "", "frames", "=", "[", "'{base_path}/{sequence_path}/{frame:0{nz}}.{ext}'", ".", "format", "(", "base_path", "=", "self", ".", "base_path", ",", "\n", "sequence_path", "=", "sequence_path", ",", "frame", "=", "frame_num", ",", "nz", "=", "nz", ",", "ext", "=", "ext", ")", "for", "frame_num", "in", "range", "(", "start_frame", "+", "init_omit", ",", "end_frame", "+", "1", ")", "]", "\n", "\n", "anno_path", "=", "'{}/{}'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_info", "[", "'anno_path'", "]", ")", "\n", "\n", "# NOTE: OTB has some weird annos which panda cannot handle", "\n", "ground_truth_rect", "=", "load_text", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "(", "','", ",", "None", ")", ",", "dtype", "=", "np", ".", "float64", ",", "backend", "=", "'numpy'", ")", "\n", "\n", "return", "Sequence", "(", "sequence_info", "[", "'name'", "]", ",", "frames", ",", "'otb'", ",", "ground_truth_rect", "[", "init_omit", ":", ",", ":", "]", ",", "\n", "object_class", "=", "sequence_info", "[", "'object_class'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.otbdataset.OTBDataset.__len__": [[48, 50], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_info_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.otbdataset.OTBDataset._get_sequence_info_list": [[51, 256], ["None"], "methods", ["None"], ["", "def", "_get_sequence_info_list", "(", "self", ")", ":", "\n", "        ", "sequence_info_list", "=", "[", "\n", "{", "\"name\"", ":", "\"Basketball\"", ",", "\"path\"", ":", "\"Basketball/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "725", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Basketball/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Biker\"", ",", "\"path\"", ":", "\"Biker/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "142", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Biker/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person head\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Bird1\"", ",", "\"path\"", ":", "\"Bird1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "408", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Bird1/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"bird\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Bird2\"", ",", "\"path\"", ":", "\"Bird2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "99", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Bird2/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"bird\"", "}", ",", "\n", "{", "\"name\"", ":", "\"BlurBody\"", ",", "\"path\"", ":", "\"BlurBody/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "334", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"BlurBody/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"BlurCar1\"", ",", "\"path\"", ":", "\"BlurCar1/img\"", ",", "\"startFrame\"", ":", "247", ",", "\"endFrame\"", ":", "988", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"BlurCar1/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"BlurCar2\"", ",", "\"path\"", ":", "\"BlurCar2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "585", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"BlurCar2/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"BlurCar3\"", ",", "\"path\"", ":", "\"BlurCar3/img\"", ",", "\"startFrame\"", ":", "3", ",", "\"endFrame\"", ":", "359", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"BlurCar3/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"BlurCar4\"", ",", "\"path\"", ":", "\"BlurCar4/img\"", ",", "\"startFrame\"", ":", "18", ",", "\"endFrame\"", ":", "397", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"BlurCar4/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"BlurFace\"", ",", "\"path\"", ":", "\"BlurFace/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "493", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"BlurFace/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"BlurOwl\"", ",", "\"path\"", ":", "\"BlurOwl/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "631", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"BlurOwl/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Board\"", ",", "\"path\"", ":", "\"Board/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "698", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Board/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Bolt\"", ",", "\"path\"", ":", "\"Bolt/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "350", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Bolt/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Bolt2\"", ",", "\"path\"", ":", "\"Bolt2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "293", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Bolt2/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Box\"", ",", "\"path\"", ":", "\"Box/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1161", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Box/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Boy\"", ",", "\"path\"", ":", "\"Boy/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "602", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Boy/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Car1\"", ",", "\"path\"", ":", "\"Car1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1020", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Car1/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Car2\"", ",", "\"path\"", ":", "\"Car2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "913", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Car2/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Car24\"", ",", "\"path\"", ":", "\"Car24/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "3059", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Car24/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Car4\"", ",", "\"path\"", ":", "\"Car4/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "659", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Car4/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"CarDark\"", ",", "\"path\"", ":", "\"CarDark/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "393", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"CarDark/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"CarScale\"", ",", "\"path\"", ":", "\"CarScale/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "252", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"CarScale/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"ClifBar\"", ",", "\"path\"", ":", "\"ClifBar/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "472", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"ClifBar/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Coke\"", ",", "\"path\"", ":", "\"Coke/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "291", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Coke/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Couple\"", ",", "\"path\"", ":", "\"Couple/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "140", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Couple/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Coupon\"", ",", "\"path\"", ":", "\"Coupon/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "327", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Coupon/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Crossing\"", ",", "\"path\"", ":", "\"Crossing/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "120", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Crossing/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Crowds\"", ",", "\"path\"", ":", "\"Crowds/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "347", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Crowds/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Dancer\"", ",", "\"path\"", ":", "\"Dancer/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "225", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Dancer/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Dancer2\"", ",", "\"path\"", ":", "\"Dancer2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "150", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Dancer2/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"David\"", ",", "\"path\"", ":", "\"David/img\"", ",", "\"startFrame\"", ":", "300", ",", "\"endFrame\"", ":", "770", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"David/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"David2\"", ",", "\"path\"", ":", "\"David2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "537", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"David2/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"David3\"", ",", "\"path\"", ":", "\"David3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "252", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"David3/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Deer\"", ",", "\"path\"", ":", "\"Deer/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "71", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Deer/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"mammal\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Diving\"", ",", "\"path\"", ":", "\"Diving/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "215", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Diving/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Dog\"", ",", "\"path\"", ":", "\"Dog/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "127", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Dog/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"dog\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Dog1\"", ",", "\"path\"", ":", "\"Dog1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1350", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Dog1/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"dog\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Doll\"", ",", "\"path\"", ":", "\"Doll/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "3872", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Doll/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"DragonBaby\"", ",", "\"path\"", ":", "\"DragonBaby/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "113", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"DragonBaby/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Dudek\"", ",", "\"path\"", ":", "\"Dudek/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1145", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Dudek/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"FaceOcc1\"", ",", "\"path\"", ":", "\"FaceOcc1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "892", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"FaceOcc1/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"FaceOcc2\"", ",", "\"path\"", ":", "\"FaceOcc2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "812", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"FaceOcc2/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Fish\"", ",", "\"path\"", ":", "\"Fish/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "476", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Fish/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"FleetFace\"", ",", "\"path\"", ":", "\"FleetFace/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "707", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"FleetFace/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Football\"", ",", "\"path\"", ":", "\"Football/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "362", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Football/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person head\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Football1\"", ",", "\"path\"", ":", "\"Football1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "74", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Football1/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Freeman1\"", ",", "\"path\"", ":", "\"Freeman1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "326", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Freeman1/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Freeman3\"", ",", "\"path\"", ":", "\"Freeman3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "460", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Freeman3/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Freeman4\"", ",", "\"path\"", ":", "\"Freeman4/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "283", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Freeman4/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Girl\"", ",", "\"path\"", ":", "\"Girl/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "500", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Girl/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Girl2\"", ",", "\"path\"", ":", "\"Girl2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1500", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Girl2/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Gym\"", ",", "\"path\"", ":", "\"Gym/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "767", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Gym/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human2\"", ",", "\"path\"", ":", "\"Human2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1128", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human2/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human3\"", ",", "\"path\"", ":", "\"Human3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1698", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human3/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human4_2\"", ",", "\"path\"", ":", "\"Human4/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "667", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human4/groundtruth_rect.2.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human5\"", ",", "\"path\"", ":", "\"Human5/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "713", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human5/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human6\"", ",", "\"path\"", ":", "\"Human6/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "792", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human6/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human7\"", ",", "\"path\"", ":", "\"Human7/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "250", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human7/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human8\"", ",", "\"path\"", ":", "\"Human8/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "128", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human8/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human9\"", ",", "\"path\"", ":", "\"Human9/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "305", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human9/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Ironman\"", ",", "\"path\"", ":", "\"Ironman/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "166", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Ironman/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person head\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Jogging_1\"", ",", "\"path\"", ":", "\"Jogging/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "307", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Jogging/groundtruth_rect.1.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Jogging_2\"", ",", "\"path\"", ":", "\"Jogging/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "307", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Jogging/groundtruth_rect.2.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Jump\"", ",", "\"path\"", ":", "\"Jump/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "122", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Jump/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Jumping\"", ",", "\"path\"", ":", "\"Jumping/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "313", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Jumping/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"KiteSurf\"", ",", "\"path\"", ":", "\"KiteSurf/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "84", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"png\"", ",", "\"anno_path\"", ":", "\"KiteSurf/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Lemming\"", ",", "\"path\"", ":", "\"Lemming/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1336", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Lemming/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Liquor\"", ",", "\"path\"", ":", "\"Liquor/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1741", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Liquor/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Man\"", ",", "\"path\"", ":", "\"Man/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "134", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Man/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Matrix\"", ",", "\"path\"", ":", "\"Matrix/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "100", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Matrix/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person head\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Mhyang\"", ",", "\"path\"", ":", "\"Mhyang/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1490", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Mhyang/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"MotorRolling\"", ",", "\"path\"", ":", "\"MotorRolling/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "164", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"MotorRolling/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"vehicle\"", "}", ",", "\n", "{", "\"name\"", ":", "\"MountainBike\"", ",", "\"path\"", ":", "\"MountainBike/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "228", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"MountainBike/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"bicycle\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Panda\"", ",", "\"path\"", ":", "\"Panda/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1000", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Panda/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"mammal\"", "}", ",", "\n", "{", "\"name\"", ":", "\"RedTeam\"", ",", "\"path\"", ":", "\"RedTeam/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1918", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"RedTeam/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"vehicle\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Rubik\"", ",", "\"path\"", ":", "\"Rubik/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1997", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Rubik/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Shaking\"", ",", "\"path\"", ":", "\"Shaking/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "365", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Shaking/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Singer1\"", ",", "\"path\"", ":", "\"Singer1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "351", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Singer1/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Singer2\"", ",", "\"path\"", ":", "\"Singer2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "366", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Singer2/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Skater\"", ",", "\"path\"", ":", "\"Skater/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "160", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Skater/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Skater2\"", ",", "\"path\"", ":", "\"Skater2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "435", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Skater2/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Skating1\"", ",", "\"path\"", ":", "\"Skating1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "400", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Skating1/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Skating2_1\"", ",", "\"path\"", ":", "\"Skating2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "473", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Skating2/groundtruth_rect.1.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Skating2_2\"", ",", "\"path\"", ":", "\"Skating2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "473", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Skating2/groundtruth_rect.2.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Skiing\"", ",", "\"path\"", ":", "\"Skiing/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "81", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Skiing/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Soccer\"", ",", "\"path\"", ":", "\"Soccer/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "392", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Soccer/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Subway\"", ",", "\"path\"", ":", "\"Subway/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "175", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Subway/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Surfer\"", ",", "\"path\"", ":", "\"Surfer/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "376", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Surfer/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person head\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Suv\"", ",", "\"path\"", ":", "\"Suv/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "945", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Suv/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Sylvester\"", ",", "\"path\"", ":", "\"Sylvester/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1345", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Sylvester/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Tiger1\"", ",", "\"path\"", ":", "\"Tiger1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "354", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Tiger1/groundtruth_rect.txt\"", ",", "\"initOmit\"", ":", "5", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Tiger2\"", ",", "\"path\"", ":", "\"Tiger2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "365", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Tiger2/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Toy\"", ",", "\"path\"", ":", "\"Toy/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "271", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Toy/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Trans\"", ",", "\"path\"", ":", "\"Trans/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "124", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Trans/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Trellis\"", ",", "\"path\"", ":", "\"Trellis/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "569", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Trellis/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"face\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Twinnings\"", ",", "\"path\"", ":", "\"Twinnings/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "472", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Twinnings/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Vase\"", ",", "\"path\"", ":", "\"Vase/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "271", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Vase/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Walking\"", ",", "\"path\"", ":", "\"Walking/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "412", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Walking/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Walking2\"", ",", "\"path\"", ":", "\"Walking2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "500", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Walking2/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Woman\"", ",", "\"path\"", ":", "\"Woman/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "597", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Woman/groundtruth_rect.txt\"", ",", "\n", "\"object_class\"", ":", "\"person\"", "}", "\n", "]", "\n", "\n", "return", "sequence_info_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot.VOT.__init__": [[84, 108], ["trax.server.ServerOptions", "trax.server.Server", "vot.VOT._trax.wait", "str", "vot.VOT._trax.status", "vot.convert_region", "Polygon", "Rectangle", "x.strip", "vot.parse_region", "open().readlines", "open().readline", "Point", "open", "open"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot.convert_region", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot.parse_region"], ["", "self", ".", "_trax", ".", "status", "(", "tregion", ",", "properties", ")", "\n", "\n", "", "def", "frame", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get a frame (image path) from client\n        Returns:\n            absolute path of the image\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"_image\"", ")", ":", "\n", "            ", "image", "=", "self", ".", "_image", "\n", "del", "self", ".", "_image", "\n", "return", "image", "\n", "\n", "", "request", "=", "self", ".", "_trax", ".", "wait", "(", ")", "\n", "\n", "if", "request", ".", "type", "==", "'frame'", ":", "\n", "            ", "image", "=", "[", "x", ".", "path", "(", ")", "for", "k", ",", "x", "in", "request", ".", "image", ".", "items", "(", ")", "]", "\n", "if", "len", "(", "image", ")", "==", "1", ":", "\n", "                ", "return", "image", "[", "0", "]", "\n", "", "return", "image", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "\n", "", "", "def", "quit", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot.VOT.region": [[109, 119], ["None"], "methods", ["None"], ["        ", "if", "hasattr", "(", "self", ",", "'_trax'", ")", ":", "\n", "            ", "self", ".", "_trax", ".", "quit", "(", ")", "\n", "\n", "", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "quit", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot.VOT.report": [[120, 137], ["isinstance", "isinstance", "isinstance", "vot.VOT._trax.status", "vot.VOT._result.append", "trax.region.Polygon", "trax.region.Rectangle"], "methods", ["None"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot.VOT.frame": [[138, 162], ["hasattr", "vot.VOT._trax.wait", "str", "str", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot.VOT.quit": [[163, 171], ["vot.VOT._trax.quit", "hasattr", "open", "f.write", "f.write", "vot.encode_region"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.quit", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot.encode_region"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot.VOT.__del__": [[172, 174], ["vot.VOT.quit"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.quit"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot.parse_region": [[27, 34], ["map", "string.split", "len", "Rectangle", "Polygon", "len", "len", "Point", "xrange", "len"], "function", ["None"], ["\n", "assert", "(", "region_format", "in", "[", "trax", ".", "Region", ".", "RECTANGLE", ",", "trax", ".", "Region", ".", "POLYGON", ",", "trax", ".", "Region", ".", "MASK", "]", ")", "\n", "\n", "if", "channels", "is", "None", ":", "\n", "            ", "channels", "=", "[", "'color'", "]", "\n", "", "elif", "channels", "==", "'rgbd'", ":", "\n", "            ", "channels", "=", "[", "'color'", ",", "'depth'", "]", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot.encode_region": [[35, 42], ["isinstance", "isinstance"], "function", ["None"], ["", "elif", "channels", "==", "'rgbt'", ":", "\n", "            ", "channels", "=", "[", "'color'", ",", "'ir'", "]", "\n", "", "elif", "channels", "==", "'ir'", ":", "\n", "            ", "channels", "=", "[", "'ir'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Illegal configuration {}.'", ".", "format", "(", "channels", ")", ")", "\n", "\n", "", "self", ".", "_trax", "=", "trax", ".", "Server", "(", "[", "region_format", "]", ",", "[", "trax", ".", "Image", ".", "PATH", "]", ",", "channels", ",", "customMetadata", "=", "dict", "(", "vot", "=", "\"python\"", ")", ")", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot.convert_region": [[43, 81], ["isinstance", "isinstance", "copy.copy", "isinstance", "points.append", "points.append", "points.append", "points.append", "Polygon", "isinstance", "Rectangle", "copy.copy", "min", "max", "min", "max"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["\n", "request", "=", "self", ".", "_trax", ".", "wait", "(", ")", "\n", "assert", "(", "request", ".", "type", "==", "'initialize'", ")", "\n", "if", "isinstance", "(", "request", ".", "region", ",", "trax", ".", "Polygon", ")", ":", "\n", "            ", "self", ".", "_region", "=", "Polygon", "(", "[", "Point", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "request", ".", "region", "]", ")", "\n", "", "elif", "isinstance", "(", "request", ".", "region", ",", "trax", ".", "Mask", ")", ":", "\n", "            ", "self", ".", "_region", "=", "request", ".", "region", ".", "array", "(", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_region", "=", "Rectangle", "(", "*", "request", ".", "region", ".", "bounds", "(", ")", ")", "\n", "", "self", ".", "_image", "=", "[", "x", ".", "path", "(", ")", "for", "k", ",", "x", "in", "request", ".", "image", ".", "items", "(", ")", "]", "\n", "if", "len", "(", "self", ".", "_image", ")", "==", "1", ":", "\n", "            ", "self", ".", "_image", "=", "self", ".", "_image", "[", "0", "]", "\n", "\n", "", "self", ".", "_trax", ".", "status", "(", "request", ".", "region", ")", "\n", "\n", "", "def", "region", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Send configuration message to the client and receive the initialization\n        region and the path of the first image\n        Returns:\n            initialization region\n        \"\"\"", "\n", "\n", "return", "self", ".", "_region", "\n", "\n", "", "def", "report", "(", "self", ",", "region", ",", "confidence", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Report the tracking results to the client\n        Arguments:\n            region: region for the frame\n        \"\"\"", "\n", "assert", "(", "isinstance", "(", "region", ",", "(", "Rectangle", ",", "Polygon", ",", "np", ".", "ndarray", ")", ")", ")", "\n", "if", "isinstance", "(", "region", ",", "Polygon", ")", ":", "\n", "            ", "tregion", "=", "trax", ".", "Polygon", ".", "create", "(", "[", "(", "x", ".", "x", ",", "x", ".", "y", ")", "for", "x", "in", "region", ".", "points", "]", ")", "\n", "", "elif", "isinstance", "(", "region", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "tregion", "=", "trax", ".", "Mask", ".", "create", "(", "region", ")", "\n", "", "else", ":", "\n", "            ", "tregion", "=", "trax", ".", "Rectangle", ".", "create", "(", "region", ".", "x", ",", "region", ".", "y", ",", "region", ".", "width", ",", "region", ".", "height", ")", "\n", "", "properties", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.__init__": [[50, 84], ["trax.Server", "vot2020.VOT._trax.wait", "isinstance", "isinstance", "vot2020.VOT._trax.status", "Polygon", "vot2020.VOT.region.array", "Rectangle", "x.path", "len", "dict", "vot2020.VOT.image.items", "Point", "vot2020.VOT.region.bounds", "Exception"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "region_format", ",", "channels", "=", "None", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            region_format: Region format options\n        \"\"\"", "\n", "assert", "(", "region_format", "in", "[", "trax", ".", "Region", ".", "RECTANGLE", ",", "trax", ".", "Region", ".", "POLYGON", ",", "trax", ".", "Region", ".", "MASK", "]", ")", "\n", "\n", "if", "channels", "is", "None", ":", "\n", "            ", "channels", "=", "[", "'color'", "]", "\n", "", "elif", "channels", "==", "'rgbd'", ":", "\n", "            ", "channels", "=", "[", "'color'", ",", "'depth'", "]", "\n", "", "elif", "channels", "==", "'rgbt'", ":", "\n", "            ", "channels", "=", "[", "'color'", ",", "'ir'", "]", "\n", "", "elif", "channels", "==", "'ir'", ":", "\n", "            ", "channels", "=", "[", "'ir'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Illegal configuration {}.'", ".", "format", "(", "channels", ")", ")", "\n", "\n", "", "self", ".", "_trax", "=", "trax", ".", "Server", "(", "[", "region_format", "]", ",", "[", "trax", ".", "Image", ".", "PATH", "]", ",", "channels", ",", "customMetadata", "=", "dict", "(", "vot", "=", "\"python\"", ")", ")", "\n", "\n", "request", "=", "self", ".", "_trax", ".", "wait", "(", ")", "\n", "assert", "(", "request", ".", "type", "==", "'initialize'", ")", "\n", "if", "isinstance", "(", "request", ".", "region", ",", "trax", ".", "Polygon", ")", ":", "\n", "            ", "self", ".", "_region", "=", "Polygon", "(", "[", "Point", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "request", ".", "region", "]", ")", "\n", "", "if", "isinstance", "(", "request", ".", "region", ",", "trax", ".", "Mask", ")", ":", "\n", "            ", "self", ".", "_region", "=", "request", ".", "region", ".", "array", "(", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_region", "=", "Rectangle", "(", "*", "request", ".", "region", ".", "bounds", "(", ")", ")", "\n", "", "self", ".", "_image", "=", "[", "x", ".", "path", "(", ")", "for", "k", ",", "x", "in", "request", ".", "image", ".", "items", "(", ")", "]", "\n", "if", "len", "(", "self", ".", "_image", ")", "==", "1", ":", "\n", "            ", "self", ".", "_image", "=", "self", ".", "_image", "[", "0", "]", "\n", "\n", "", "self", ".", "_trax", ".", "status", "(", "request", ".", "region", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.region": [[85, 95], ["None"], "methods", ["None"], ["", "def", "region", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Send configuration message to the client and receive the initialization\n        region and the path of the first image\n\n        Returns:\n            initialization region\n        \"\"\"", "\n", "\n", "return", "self", ".", "_region", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.report": [[96, 114], ["isinstance", "isinstance", "isinstance", "vot2020.VOT._trax.status", "trax.Polygon.create", "trax.Mask.create", "trax.Rectangle.create"], "methods", ["None"], ["", "def", "report", "(", "self", ",", "region", ",", "confidence", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Report the tracking results to the client\n\n        Arguments:\n            region: region for the frame\n        \"\"\"", "\n", "assert", "(", "isinstance", "(", "region", ",", "(", "Rectangle", ",", "Polygon", ",", "np", ".", "ndarray", ")", ")", ")", "\n", "if", "isinstance", "(", "region", ",", "Polygon", ")", ":", "\n", "            ", "tregion", "=", "trax", ".", "Polygon", ".", "create", "(", "[", "(", "x", ".", "x", ",", "x", ".", "y", ")", "for", "x", "in", "region", ".", "points", "]", ")", "\n", "", "if", "isinstance", "(", "region", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "tregion", "=", "trax", ".", "Mask", ".", "create", "(", "region", ")", "\n", "", "else", ":", "\n", "            ", "tregion", "=", "trax", ".", "Rectangle", ".", "create", "(", "region", ".", "x", ",", "region", ".", "y", ",", "region", ".", "width", ",", "region", ".", "height", ")", "\n", "", "properties", "=", "{", "}", "\n", "if", "not", "confidence", "is", "None", ":", "\n", "            ", "properties", "[", "'confidence'", "]", "=", "confidence", "\n", "", "self", ".", "_trax", ".", "status", "(", "tregion", ",", "properties", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.frame": [[115, 136], ["hasattr", "vot2020.VOT._trax.wait", "x.path", "len", "vot2020.VOT.image.items"], "methods", ["None"], ["", "def", "frame", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get a frame (image path) from client\n\n        Returns:\n            absolute path of the image\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"_image\"", ")", ":", "\n", "            ", "image", "=", "self", ".", "_image", "\n", "del", "self", ".", "_image", "\n", "return", "image", "\n", "\n", "", "request", "=", "self", ".", "_trax", ".", "wait", "(", ")", "\n", "\n", "if", "request", ".", "type", "==", "'frame'", ":", "\n", "            ", "image", "=", "[", "x", ".", "path", "(", ")", "for", "k", ",", "x", "in", "request", ".", "image", ".", "items", "(", ")", "]", "\n", "if", "len", "(", "image", ")", "==", "1", ":", "\n", "                ", "return", "image", "[", "0", "]", "\n", "", "return", "image", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.quit": [[138, 141], ["hasattr", "vot2020.VOT._trax.quit"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.quit"], ["", "", "def", "quit", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'_trax'", ")", ":", "\n", "            ", "self", ".", "_trax", ".", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.__del__": [[142, 144], ["vot2020.VOT.quit"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.VOT.quit"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "quit", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.vot2020.make_full_size": [[23, 42], ["numpy.pad"], "function", ["None"], ["", "def", "make_full_size", "(", "x", ",", "output_sz", ")", ":", "\n", "    ", "'''\n    zero-pad input x (right and down) to match output_sz\n    x: numpy array e.g., binary mask\n    output_sz: size of the output [width, height]\n    '''", "\n", "if", "x", ".", "shape", "[", "0", "]", "==", "output_sz", "[", "1", "]", "and", "x", ".", "shape", "[", "1", "]", "==", "output_sz", "[", "0", "]", ":", "\n", "        ", "return", "x", "\n", "", "pad_x", "=", "output_sz", "[", "0", "]", "-", "x", ".", "shape", "[", "1", "]", "\n", "if", "pad_x", "<", "0", ":", "\n", "        ", "x", "=", "x", "[", ":", ",", ":", "x", ".", "shape", "[", "1", "]", "+", "pad_x", "]", "\n", "# padding has to be set to zero, otherwise pad function fails", "\n", "pad_x", "=", "0", "\n", "", "pad_y", "=", "output_sz", "[", "1", "]", "-", "x", ".", "shape", "[", "0", "]", "\n", "if", "pad_y", "<", "0", ":", "\n", "        ", "x", "=", "x", "[", ":", "x", ".", "shape", "[", "0", "]", "+", "pad_y", ",", ":", "]", "\n", "# padding has to be set to zero, otherwise pad function fails", "\n", "pad_y", "=", "0", "\n", "", "return", "np", ".", "pad", "(", "x", ",", "(", "(", "0", ",", "pad_y", ")", ",", "(", "0", ",", "pad_x", ")", ")", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasot_lmdbdataset.LaSOTlmdbDataset.__init__": [[19, 24], ["lib.test.evaluation.data.BaseDataset.__init__", "lasot_lmdbdataset.LaSOTlmdbDataset._get_sequence_list", "lasot_lmdbdataset.LaSOTlmdbDataset.clean_seq_list"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_sequence_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset.clean_seq_list"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "lasot_lmdb_path", "\n", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", ")", "\n", "self", ".", "clean_list", "=", "self", ".", "clean_seq_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasot_lmdbdataset.LaSOTlmdbDataset.clean_seq_list": [[25, 31], ["range", "len", "lasot_lmdbdataset.LaSOTlmdbDataset.sequence_list[].split", "clean_lst.append"], "methods", ["None"], ["", "def", "clean_seq_list", "(", "self", ")", ":", "\n", "        ", "clean_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sequence_list", ")", ")", ":", "\n", "            ", "cls", ",", "_", "=", "self", ".", "sequence_list", "[", "i", "]", ".", "split", "(", "'-'", ")", "\n", "clean_lst", ".", "append", "(", "cls", ")", "\n", "", "return", "clean_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasot_lmdbdataset.LaSOTlmdbDataset.get_sequence_list": [[32, 34], ["lib.test.evaluation.data.SequenceList", "lasot_lmdbdataset.LaSOTlmdbDataset._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasot_lmdbdataset.LaSOTlmdbDataset._construct_sequence": [[35, 60], ["str", "np.array().astype", "str", "list", "np.array().astype", "str", "list", "np.array().astype", "np.logical_and", "lib.test.evaluation.data.Sequence", "sequence_name.split", "decode_str().split", "list", "map", "map", "np.array().astype.reshape", "map", "np.array", "decode_str().split", "np.array", "decode_str().split", "np.array", "range", "decode_str", "line.split", "decode_str", "decode_str"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_str", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_str", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_str"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_name", ")", ":", "\n", "        ", "class_name", "=", "sequence_name", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "anno_path", "=", "str", "(", "'{}/{}/groundtruth.txt'", ".", "format", "(", "class_name", ",", "sequence_name", ")", ")", "\n", "# decode the groundtruth", "\n", "gt_str_list", "=", "decode_str", "(", "self", ".", "base_path", ",", "anno_path", ")", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]", "# the last line is empty", "\n", "gt_list", "=", "[", "list", "(", "map", "(", "float", ",", "line", ".", "split", "(", "','", ")", ")", ")", "for", "line", "in", "gt_str_list", "]", "\n", "ground_truth_rect", "=", "np", ".", "array", "(", "gt_list", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "# decode occlusion file", "\n", "occlusion_label_path", "=", "str", "(", "'{}/{}/full_occlusion.txt'", ".", "format", "(", "class_name", ",", "sequence_name", ")", ")", "\n", "occ_list", "=", "list", "(", "map", "(", "int", ",", "decode_str", "(", "self", ".", "base_path", ",", "occlusion_label_path", ")", ".", "split", "(", "','", ")", ")", ")", "\n", "full_occlusion", "=", "np", ".", "array", "(", "occ_list", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "# decode out of view file", "\n", "out_of_view_label_path", "=", "str", "(", "'{}/{}/out_of_view.txt'", ".", "format", "(", "class_name", ",", "sequence_name", ")", ")", "\n", "out_of_view_list", "=", "list", "(", "map", "(", "int", ",", "decode_str", "(", "self", ".", "base_path", ",", "out_of_view_label_path", ")", ".", "split", "(", "','", ")", ")", ")", "\n", "out_of_view", "=", "np", ".", "array", "(", "out_of_view_list", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "target_visible", "=", "np", ".", "logical_and", "(", "full_occlusion", "==", "0", ",", "out_of_view", "==", "0", ")", "\n", "\n", "frames_path", "=", "'{}/{}/img'", ".", "format", "(", "class_name", ",", "sequence_name", ")", "\n", "\n", "frames_list", "=", "[", "[", "self", ".", "base_path", ",", "'{}/{:08d}.jpg'", ".", "format", "(", "frames_path", ",", "frame_number", ")", "]", "for", "frame_number", "in", "range", "(", "1", ",", "ground_truth_rect", ".", "shape", "[", "0", "]", "+", "1", ")", "]", "\n", "\n", "target_class", "=", "class_name", "\n", "return", "Sequence", "(", "sequence_name", ",", "frames_list", ",", "'lasot'", ",", "ground_truth_rect", ".", "reshape", "(", "-", "1", ",", "4", ")", ",", "\n", "object_class", "=", "target_class", ",", "target_visible", "=", "target_visible", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasot_lmdbdataset.LaSOTlmdbDataset.__len__": [[61, 63], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasot_lmdbdataset.LaSOTlmdbDataset._get_sequence_list": [[64, 346], ["None"], "methods", ["None"], ["", "def", "_get_sequence_list", "(", "self", ")", ":", "\n", "        ", "sequence_list", "=", "[", "'airplane-1'", ",", "\n", "'airplane-9'", ",", "\n", "'airplane-13'", ",", "\n", "'airplane-15'", ",", "\n", "'basketball-1'", ",", "\n", "'basketball-6'", ",", "\n", "'basketball-7'", ",", "\n", "'basketball-11'", ",", "\n", "'bear-2'", ",", "\n", "'bear-4'", ",", "\n", "'bear-6'", ",", "\n", "'bear-17'", ",", "\n", "'bicycle-2'", ",", "\n", "'bicycle-7'", ",", "\n", "'bicycle-9'", ",", "\n", "'bicycle-18'", ",", "\n", "'bird-2'", ",", "\n", "'bird-3'", ",", "\n", "'bird-15'", ",", "\n", "'bird-17'", ",", "\n", "'boat-3'", ",", "\n", "'boat-4'", ",", "\n", "'boat-12'", ",", "\n", "'boat-17'", ",", "\n", "'book-3'", ",", "\n", "'book-10'", ",", "\n", "'book-11'", ",", "\n", "'book-19'", ",", "\n", "'bottle-1'", ",", "\n", "'bottle-12'", ",", "\n", "'bottle-14'", ",", "\n", "'bottle-18'", ",", "\n", "'bus-2'", ",", "\n", "'bus-5'", ",", "\n", "'bus-17'", ",", "\n", "'bus-19'", ",", "\n", "'car-2'", ",", "\n", "'car-6'", ",", "\n", "'car-9'", ",", "\n", "'car-17'", ",", "\n", "'cat-1'", ",", "\n", "'cat-3'", ",", "\n", "'cat-18'", ",", "\n", "'cat-20'", ",", "\n", "'cattle-2'", ",", "\n", "'cattle-7'", ",", "\n", "'cattle-12'", ",", "\n", "'cattle-13'", ",", "\n", "'spider-14'", ",", "\n", "'spider-16'", ",", "\n", "'spider-18'", ",", "\n", "'spider-20'", ",", "\n", "'coin-3'", ",", "\n", "'coin-6'", ",", "\n", "'coin-7'", ",", "\n", "'coin-18'", ",", "\n", "'crab-3'", ",", "\n", "'crab-6'", ",", "\n", "'crab-12'", ",", "\n", "'crab-18'", ",", "\n", "'surfboard-12'", ",", "\n", "'surfboard-4'", ",", "\n", "'surfboard-5'", ",", "\n", "'surfboard-8'", ",", "\n", "'cup-1'", ",", "\n", "'cup-4'", ",", "\n", "'cup-7'", ",", "\n", "'cup-17'", ",", "\n", "'deer-4'", ",", "\n", "'deer-8'", ",", "\n", "'deer-10'", ",", "\n", "'deer-14'", ",", "\n", "'dog-1'", ",", "\n", "'dog-7'", ",", "\n", "'dog-15'", ",", "\n", "'dog-19'", ",", "\n", "'guitar-3'", ",", "\n", "'guitar-8'", ",", "\n", "'guitar-10'", ",", "\n", "'guitar-16'", ",", "\n", "'person-1'", ",", "\n", "'person-5'", ",", "\n", "'person-10'", ",", "\n", "'person-12'", ",", "\n", "'pig-2'", ",", "\n", "'pig-10'", ",", "\n", "'pig-13'", ",", "\n", "'pig-18'", ",", "\n", "'rubicCube-1'", ",", "\n", "'rubicCube-6'", ",", "\n", "'rubicCube-14'", ",", "\n", "'rubicCube-19'", ",", "\n", "'swing-10'", ",", "\n", "'swing-14'", ",", "\n", "'swing-17'", ",", "\n", "'swing-20'", ",", "\n", "'drone-13'", ",", "\n", "'drone-15'", ",", "\n", "'drone-2'", ",", "\n", "'drone-7'", ",", "\n", "'pool-12'", ",", "\n", "'pool-15'", ",", "\n", "'pool-3'", ",", "\n", "'pool-7'", ",", "\n", "'rabbit-10'", ",", "\n", "'rabbit-13'", ",", "\n", "'rabbit-17'", ",", "\n", "'rabbit-19'", ",", "\n", "'racing-10'", ",", "\n", "'racing-15'", ",", "\n", "'racing-16'", ",", "\n", "'racing-20'", ",", "\n", "'robot-1'", ",", "\n", "'robot-19'", ",", "\n", "'robot-5'", ",", "\n", "'robot-8'", ",", "\n", "'sepia-13'", ",", "\n", "'sepia-16'", ",", "\n", "'sepia-6'", ",", "\n", "'sepia-8'", ",", "\n", "'sheep-3'", ",", "\n", "'sheep-5'", ",", "\n", "'sheep-7'", ",", "\n", "'sheep-9'", ",", "\n", "'skateboard-16'", ",", "\n", "'skateboard-19'", ",", "\n", "'skateboard-3'", ",", "\n", "'skateboard-8'", ",", "\n", "'tank-14'", ",", "\n", "'tank-16'", ",", "\n", "'tank-6'", ",", "\n", "'tank-9'", ",", "\n", "'tiger-12'", ",", "\n", "'tiger-18'", ",", "\n", "'tiger-4'", ",", "\n", "'tiger-6'", ",", "\n", "'train-1'", ",", "\n", "'train-11'", ",", "\n", "'train-20'", ",", "\n", "'train-7'", ",", "\n", "'truck-16'", ",", "\n", "'truck-3'", ",", "\n", "'truck-6'", ",", "\n", "'truck-7'", ",", "\n", "'turtle-16'", ",", "\n", "'turtle-5'", ",", "\n", "'turtle-8'", ",", "\n", "'turtle-9'", ",", "\n", "'umbrella-17'", ",", "\n", "'umbrella-19'", ",", "\n", "'umbrella-2'", ",", "\n", "'umbrella-9'", ",", "\n", "'yoyo-15'", ",", "\n", "'yoyo-17'", ",", "\n", "'yoyo-19'", ",", "\n", "'yoyo-7'", ",", "\n", "'zebra-10'", ",", "\n", "'zebra-14'", ",", "\n", "'zebra-16'", ",", "\n", "'zebra-17'", ",", "\n", "'elephant-1'", ",", "\n", "'elephant-12'", ",", "\n", "'elephant-16'", ",", "\n", "'elephant-18'", ",", "\n", "'goldfish-3'", ",", "\n", "'goldfish-7'", ",", "\n", "'goldfish-8'", ",", "\n", "'goldfish-10'", ",", "\n", "'hat-1'", ",", "\n", "'hat-2'", ",", "\n", "'hat-5'", ",", "\n", "'hat-18'", ",", "\n", "'kite-4'", ",", "\n", "'kite-6'", ",", "\n", "'kite-10'", ",", "\n", "'kite-15'", ",", "\n", "'motorcycle-1'", ",", "\n", "'motorcycle-3'", ",", "\n", "'motorcycle-9'", ",", "\n", "'motorcycle-18'", ",", "\n", "'mouse-1'", ",", "\n", "'mouse-8'", ",", "\n", "'mouse-9'", ",", "\n", "'mouse-17'", ",", "\n", "'flag-3'", ",", "\n", "'flag-9'", ",", "\n", "'flag-5'", ",", "\n", "'flag-2'", ",", "\n", "'frog-3'", ",", "\n", "'frog-4'", ",", "\n", "'frog-20'", ",", "\n", "'frog-9'", ",", "\n", "'gametarget-1'", ",", "\n", "'gametarget-2'", ",", "\n", "'gametarget-7'", ",", "\n", "'gametarget-13'", ",", "\n", "'hand-2'", ",", "\n", "'hand-3'", ",", "\n", "'hand-9'", ",", "\n", "'hand-16'", ",", "\n", "'helmet-5'", ",", "\n", "'helmet-11'", ",", "\n", "'helmet-19'", ",", "\n", "'helmet-13'", ",", "\n", "'licenseplate-6'", ",", "\n", "'licenseplate-12'", ",", "\n", "'licenseplate-13'", ",", "\n", "'licenseplate-15'", ",", "\n", "'electricfan-1'", ",", "\n", "'electricfan-10'", ",", "\n", "'electricfan-18'", ",", "\n", "'electricfan-20'", ",", "\n", "'chameleon-3'", ",", "\n", "'chameleon-6'", ",", "\n", "'chameleon-11'", ",", "\n", "'chameleon-20'", ",", "\n", "'crocodile-3'", ",", "\n", "'crocodile-4'", ",", "\n", "'crocodile-10'", ",", "\n", "'crocodile-14'", ",", "\n", "'gecko-1'", ",", "\n", "'gecko-5'", ",", "\n", "'gecko-16'", ",", "\n", "'gecko-19'", ",", "\n", "'fox-2'", ",", "\n", "'fox-3'", ",", "\n", "'fox-5'", ",", "\n", "'fox-20'", ",", "\n", "'giraffe-2'", ",", "\n", "'giraffe-10'", ",", "\n", "'giraffe-13'", ",", "\n", "'giraffe-15'", ",", "\n", "'gorilla-4'", ",", "\n", "'gorilla-6'", ",", "\n", "'gorilla-9'", ",", "\n", "'gorilla-13'", ",", "\n", "'hippo-1'", ",", "\n", "'hippo-7'", ",", "\n", "'hippo-9'", ",", "\n", "'hippo-20'", ",", "\n", "'horse-1'", ",", "\n", "'horse-4'", ",", "\n", "'horse-12'", ",", "\n", "'horse-15'", ",", "\n", "'kangaroo-2'", ",", "\n", "'kangaroo-5'", ",", "\n", "'kangaroo-11'", ",", "\n", "'kangaroo-14'", ",", "\n", "'leopard-1'", ",", "\n", "'leopard-7'", ",", "\n", "'leopard-16'", ",", "\n", "'leopard-20'", ",", "\n", "'lion-1'", ",", "\n", "'lion-5'", ",", "\n", "'lion-12'", ",", "\n", "'lion-20'", ",", "\n", "'lizard-1'", ",", "\n", "'lizard-3'", ",", "\n", "'lizard-6'", ",", "\n", "'lizard-13'", ",", "\n", "'microphone-2'", ",", "\n", "'microphone-6'", ",", "\n", "'microphone-14'", ",", "\n", "'microphone-16'", ",", "\n", "'monkey-3'", ",", "\n", "'monkey-4'", ",", "\n", "'monkey-9'", ",", "\n", "'monkey-17'", ",", "\n", "'shark-2'", ",", "\n", "'shark-3'", ",", "\n", "'shark-5'", ",", "\n", "'shark-6'", ",", "\n", "'squirrel-8'", ",", "\n", "'squirrel-11'", ",", "\n", "'squirrel-13'", ",", "\n", "'squirrel-19'", ",", "\n", "'volleyball-1'", ",", "\n", "'volleyball-13'", ",", "\n", "'volleyball-18'", ",", "\n", "'volleyball-19'", "]", "\n", "return", "sequence_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.nfsdataset.NFSDataset.__init__": [[17, 21], ["lib.test.evaluation.data.BaseDataset.__init__", "nfsdataset.NFSDataset._get_sequence_info_list"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.uavdataset.UAVDataset._get_sequence_info_list"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "nfs_path", "\n", "self", ".", "sequence_info_list", "=", "self", ".", "_get_sequence_info_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.nfsdataset.NFSDataset.get_sequence_list": [[22, 24], ["lib.test.evaluation.data.SequenceList", "nfsdataset.NFSDataset._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_info_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.nfsdataset.NFSDataset._construct_sequence": [[25, 45], ["lib.test.utils.load_text.load_text", "lib.test.evaluation.data.Sequence", "str", "range"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_info", ")", ":", "\n", "        ", "sequence_path", "=", "sequence_info", "[", "'path'", "]", "\n", "nz", "=", "sequence_info", "[", "'nz'", "]", "\n", "ext", "=", "sequence_info", "[", "'ext'", "]", "\n", "start_frame", "=", "sequence_info", "[", "'startFrame'", "]", "\n", "end_frame", "=", "sequence_info", "[", "'endFrame'", "]", "\n", "\n", "init_omit", "=", "0", "\n", "if", "'initOmit'", "in", "sequence_info", ":", "\n", "            ", "init_omit", "=", "sequence_info", "[", "'initOmit'", "]", "\n", "\n", "", "frames", "=", "[", "'{base_path}/{sequence_path}/{frame:0{nz}}.{ext}'", ".", "format", "(", "base_path", "=", "self", ".", "base_path", ",", "\n", "sequence_path", "=", "sequence_path", ",", "frame", "=", "frame_num", ",", "nz", "=", "nz", ",", "ext", "=", "ext", ")", "for", "frame_num", "in", "range", "(", "start_frame", "+", "init_omit", ",", "end_frame", "+", "1", ")", "]", "\n", "\n", "anno_path", "=", "'{}/{}'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_info", "[", "'anno_path'", "]", ")", "\n", "\n", "ground_truth_rect", "=", "load_text", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "'\\t'", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "return", "Sequence", "(", "sequence_info", "[", "'name'", "]", ",", "frames", ",", "'nfs'", ",", "ground_truth_rect", "[", "init_omit", ":", ",", ":", "]", ",", "\n", "object_class", "=", "sequence_info", "[", "'object_class'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.nfsdataset.NFSDataset.__len__": [[46, 48], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_info_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.nfsdataset.NFSDataset._get_sequence_info_list": [[49, 154], ["None"], "methods", ["None"], ["", "def", "_get_sequence_info_list", "(", "self", ")", ":", "\n", "        ", "sequence_info_list", "=", "[", "\n", "{", "\"name\"", ":", "\"nfs_Gymnastics\"", ",", "\"path\"", ":", "\"sequences/Gymnastics\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "368", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_Gymnastics.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_MachLoop_jet\"", ",", "\"path\"", ":", "\"sequences/MachLoop_jet\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "99", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_MachLoop_jet.txt\"", ",", "\"object_class\"", ":", "\"aircraft\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_Skiing_red\"", ",", "\"path\"", ":", "\"sequences/Skiing_red\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "69", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_Skiing_red.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_Skydiving\"", ",", "\"path\"", ":", "\"sequences/Skydiving\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "196", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_Skydiving.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_airboard_1\"", ",", "\"path\"", ":", "\"sequences/airboard_1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "425", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_airboard_1.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_airplane_landing\"", ",", "\"path\"", ":", "\"sequences/airplane_landing\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "81", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_airplane_landing.txt\"", ",", "\"object_class\"", ":", "\"aircraft\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_airtable_3\"", ",", "\"path\"", ":", "\"sequences/airtable_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "482", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_airtable_3.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_basketball_1\"", ",", "\"path\"", ":", "\"sequences/basketball_1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "282", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_basketball_1.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_basketball_2\"", ",", "\"path\"", ":", "\"sequences/basketball_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "102", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_basketball_2.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_basketball_3\"", ",", "\"path\"", ":", "\"sequences/basketball_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "421", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_basketball_3.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_basketball_6\"", ",", "\"path\"", ":", "\"sequences/basketball_6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "224", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_basketball_6.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_basketball_7\"", ",", "\"path\"", ":", "\"sequences/basketball_7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "240", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_basketball_7.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_basketball_player\"", ",", "\"path\"", ":", "\"sequences/basketball_player\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "369", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_basketball_player.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_basketball_player_2\"", ",", "\"path\"", ":", "\"sequences/basketball_player_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "437", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_basketball_player_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_beach_flipback_person\"", ",", "\"path\"", ":", "\"sequences/beach_flipback_person\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "61", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_beach_flipback_person.txt\"", ",", "\"object_class\"", ":", "\"person head\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bee\"", ",", "\"path\"", ":", "\"sequences/bee\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "45", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bee.txt\"", ",", "\"object_class\"", ":", "\"insect\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_biker_acrobat\"", ",", "\"path\"", ":", "\"sequences/biker_acrobat\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "128", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_biker_acrobat.txt\"", ",", "\"object_class\"", ":", "\"bicycle\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_biker_all_1\"", ",", "\"path\"", ":", "\"sequences/biker_all_1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "113", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_biker_all_1.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_biker_head_2\"", ",", "\"path\"", ":", "\"sequences/biker_head_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "132", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_biker_head_2.txt\"", ",", "\"object_class\"", ":", "\"person head\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_biker_head_3\"", ",", "\"path\"", ":", "\"sequences/biker_head_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "254", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_biker_head_3.txt\"", ",", "\"object_class\"", ":", "\"person head\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_biker_upper_body\"", ",", "\"path\"", ":", "\"sequences/biker_upper_body\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "194", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_biker_upper_body.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_biker_whole_body\"", ",", "\"path\"", ":", "\"sequences/biker_whole_body\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "572", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_biker_whole_body.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_billiard_2\"", ",", "\"path\"", ":", "\"sequences/billiard_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "604", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_billiard_2.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_billiard_3\"", ",", "\"path\"", ":", "\"sequences/billiard_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "698", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_billiard_3.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_billiard_6\"", ",", "\"path\"", ":", "\"sequences/billiard_6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "771", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_billiard_6.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_billiard_7\"", ",", "\"path\"", ":", "\"sequences/billiard_7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "724", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_billiard_7.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_billiard_8\"", ",", "\"path\"", ":", "\"sequences/billiard_8\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "778", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_billiard_8.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bird_2\"", ",", "\"path\"", ":", "\"sequences/bird_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "476", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bird_2.txt\"", ",", "\"object_class\"", ":", "\"bird\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_book\"", ",", "\"path\"", ":", "\"sequences/book\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "288", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_book.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bottle\"", ",", "\"path\"", ":", "\"sequences/bottle\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "2103", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bottle.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bowling_1\"", ",", "\"path\"", ":", "\"sequences/bowling_1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "303", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bowling_1.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bowling_2\"", ",", "\"path\"", ":", "\"sequences/bowling_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "710", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bowling_2.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bowling_3\"", ",", "\"path\"", ":", "\"sequences/bowling_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "271", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bowling_3.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bowling_6\"", ",", "\"path\"", ":", "\"sequences/bowling_6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "260", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bowling_6.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bowling_ball\"", ",", "\"path\"", ":", "\"sequences/bowling_ball\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "275", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bowling_ball.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bunny\"", ",", "\"path\"", ":", "\"sequences/bunny\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "705", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bunny.txt\"", ",", "\"object_class\"", ":", "\"mammal\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car\"", ",", "\"path\"", ":", "\"sequences/car\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "2020", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car.txt\"", ",", "\"object_class\"", ":", "\"car\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car_camaro\"", ",", "\"path\"", ":", "\"sequences/car_camaro\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "36", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car_camaro.txt\"", ",", "\"object_class\"", ":", "\"car\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car_drifting\"", ",", "\"path\"", ":", "\"sequences/car_drifting\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "173", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car_drifting.txt\"", ",", "\"object_class\"", ":", "\"car\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car_jumping\"", ",", "\"path\"", ":", "\"sequences/car_jumping\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "22", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car_jumping.txt\"", ",", "\"object_class\"", ":", "\"car\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car_rc_rolling\"", ",", "\"path\"", ":", "\"sequences/car_rc_rolling\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "62", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car_rc_rolling.txt\"", ",", "\"object_class\"", ":", "\"car\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car_rc_rotating\"", ",", "\"path\"", ":", "\"sequences/car_rc_rotating\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "80", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car_rc_rotating.txt\"", ",", "\"object_class\"", ":", "\"car\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car_side\"", ",", "\"path\"", ":", "\"sequences/car_side\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "108", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car_side.txt\"", ",", "\"object_class\"", ":", "\"car\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car_white\"", ",", "\"path\"", ":", "\"sequences/car_white\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "2063", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car_white.txt\"", ",", "\"object_class\"", ":", "\"car\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_cheetah\"", ",", "\"path\"", ":", "\"sequences/cheetah\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "167", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_cheetah.txt\"", ",", "\"object_class\"", ":", "\"mammal\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_cup\"", ",", "\"path\"", ":", "\"sequences/cup\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1281", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_cup.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_cup_2\"", ",", "\"path\"", ":", "\"sequences/cup_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "182", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_cup_2.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_dog\"", ",", "\"path\"", ":", "\"sequences/dog\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1030", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_dog.txt\"", ",", "\"object_class\"", ":", "\"dog\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_dog_1\"", ",", "\"path\"", ":", "\"sequences/dog_1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "168", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_dog_1.txt\"", ",", "\"object_class\"", ":", "\"dog\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_dog_2\"", ",", "\"path\"", ":", "\"sequences/dog_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "594", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_dog_2.txt\"", ",", "\"object_class\"", ":", "\"dog\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_dog_3\"", ",", "\"path\"", ":", "\"sequences/dog_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "200", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_dog_3.txt\"", ",", "\"object_class\"", ":", "\"dog\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_dogs\"", ",", "\"path\"", ":", "\"sequences/dogs\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "198", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_dogs.txt\"", ",", "\"object_class\"", ":", "\"dog\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_dollar\"", ",", "\"path\"", ":", "\"sequences/dollar\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1426", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_dollar.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_drone\"", ",", "\"path\"", ":", "\"sequences/drone\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "70", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_drone.txt\"", ",", "\"object_class\"", ":", "\"aircraft\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_ducks_lake\"", ",", "\"path\"", ":", "\"sequences/ducks_lake\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "107", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_ducks_lake.txt\"", ",", "\"object_class\"", ":", "\"bird\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_exit\"", ",", "\"path\"", ":", "\"sequences/exit\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "359", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_exit.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_first\"", ",", "\"path\"", ":", "\"sequences/first\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "435", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_first.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_flower\"", ",", "\"path\"", ":", "\"sequences/flower\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "448", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_flower.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_footbal_skill\"", ",", "\"path\"", ":", "\"sequences/footbal_skill\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "131", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_footbal_skill.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_helicopter\"", ",", "\"path\"", ":", "\"sequences/helicopter\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "310", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_helicopter.txt\"", ",", "\"object_class\"", ":", "\"aircraft\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_horse_jumping\"", ",", "\"path\"", ":", "\"sequences/horse_jumping\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "117", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_horse_jumping.txt\"", ",", "\"object_class\"", ":", "\"horse\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_horse_running\"", ",", "\"path\"", ":", "\"sequences/horse_running\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "139", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_horse_running.txt\"", ",", "\"object_class\"", ":", "\"horse\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_iceskating_6\"", ",", "\"path\"", ":", "\"sequences/iceskating_6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "603", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_iceskating_6.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_jellyfish_5\"", ",", "\"path\"", ":", "\"sequences/jellyfish_5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "746", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_jellyfish_5.txt\"", ",", "\"object_class\"", ":", "\"invertebrate\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_kid_swing\"", ",", "\"path\"", ":", "\"sequences/kid_swing\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "169", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_kid_swing.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_motorcross\"", ",", "\"path\"", ":", "\"sequences/motorcross\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "39", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_motorcross.txt\"", ",", "\"object_class\"", ":", "\"vehicle\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_motorcross_kawasaki\"", ",", "\"path\"", ":", "\"sequences/motorcross_kawasaki\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "65", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_motorcross_kawasaki.txt\"", ",", "\"object_class\"", ":", "\"vehicle\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_parkour\"", ",", "\"path\"", ":", "\"sequences/parkour\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "58", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_parkour.txt\"", ",", "\"object_class\"", ":", "\"person head\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_person_scooter\"", ",", "\"path\"", ":", "\"sequences/person_scooter\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "413", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_person_scooter.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_pingpong_2\"", ",", "\"path\"", ":", "\"sequences/pingpong_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1277", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_pingpong_2.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_pingpong_7\"", ",", "\"path\"", ":", "\"sequences/pingpong_7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1290", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_pingpong_7.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_pingpong_8\"", ",", "\"path\"", ":", "\"sequences/pingpong_8\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "296", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_pingpong_8.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_purse\"", ",", "\"path\"", ":", "\"sequences/purse\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "968", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_purse.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_rubber\"", ",", "\"path\"", ":", "\"sequences/rubber\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1328", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_rubber.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_running\"", ",", "\"path\"", ":", "\"sequences/running\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "677", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_running.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_running_100_m\"", ",", "\"path\"", ":", "\"sequences/running_100_m\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "313", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_running_100_m.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_running_100_m_2\"", ",", "\"path\"", ":", "\"sequences/running_100_m_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "337", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_running_100_m_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_running_2\"", ",", "\"path\"", ":", "\"sequences/running_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "363", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_running_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffleboard_1\"", ",", "\"path\"", ":", "\"sequences/shuffleboard_1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "42", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffleboard_1.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffleboard_2\"", ",", "\"path\"", ":", "\"sequences/shuffleboard_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "41", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffleboard_2.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffleboard_4\"", ",", "\"path\"", ":", "\"sequences/shuffleboard_4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "62", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffleboard_4.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffleboard_5\"", ",", "\"path\"", ":", "\"sequences/shuffleboard_5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "32", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffleboard_5.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffleboard_6\"", ",", "\"path\"", ":", "\"sequences/shuffleboard_6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "52", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffleboard_6.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffletable_2\"", ",", "\"path\"", ":", "\"sequences/shuffletable_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "372", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffletable_2.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffletable_3\"", ",", "\"path\"", ":", "\"sequences/shuffletable_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "368", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffletable_3.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffletable_4\"", ",", "\"path\"", ":", "\"sequences/shuffletable_4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "101", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffletable_4.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_ski_long\"", ",", "\"path\"", ":", "\"sequences/ski_long\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "274", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_ski_long.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_soccer_ball\"", ",", "\"path\"", ":", "\"sequences/soccer_ball\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "163", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_soccer_ball.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_soccer_ball_2\"", ",", "\"path\"", ":", "\"sequences/soccer_ball_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1934", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_soccer_ball_2.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_soccer_ball_3\"", ",", "\"path\"", ":", "\"sequences/soccer_ball_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1381", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_soccer_ball_3.txt\"", ",", "\"object_class\"", ":", "\"ball\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_soccer_player_2\"", ",", "\"path\"", ":", "\"sequences/soccer_player_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "475", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_soccer_player_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_soccer_player_3\"", ",", "\"path\"", ":", "\"sequences/soccer_player_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "319", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_soccer_player_3.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "True", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_stop_sign\"", ",", "\"path\"", ":", "\"sequences/stop_sign\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "302", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_stop_sign.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_suv\"", ",", "\"path\"", ":", "\"sequences/suv\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "2584", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_suv.txt\"", ",", "\"object_class\"", ":", "\"car\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_tiger\"", ",", "\"path\"", ":", "\"sequences/tiger\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1556", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_tiger.txt\"", ",", "\"object_class\"", ":", "\"mammal\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_walking\"", ",", "\"path\"", ":", "\"sequences/walking\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "555", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_walking.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_walking_3\"", ",", "\"path\"", ":", "\"sequences/walking_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1427", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_walking_3.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_water_ski_2\"", ",", "\"path\"", ":", "\"sequences/water_ski_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "47", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_water_ski_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_yoyo\"", ",", "\"path\"", ":", "\"sequences/yoyo\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "67", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_yoyo.txt\"", ",", "\"object_class\"", ":", "\"other\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_zebra_fish\"", ",", "\"path\"", ":", "\"sequences/zebra_fish\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "671", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_zebra_fish.txt\"", ",", "\"object_class\"", ":", "\"fish\"", ",", "'occlusion'", ":", "False", "}", ",", "\n", "]", "\n", "\n", "return", "sequence_info_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.BaseDataset.__init__": [[9, 11], ["lib.test.evaluation.environment.env_settings"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "env_settings", "=", "env_settings", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.BaseDataset.__len__": [[12, 15], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Overload this function in your dataset. This should return number of sequences in the dataset.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.BaseDataset.get_sequence_list": [[16, 19], ["None"], "methods", ["None"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "\"\"\"Overload this in your dataset. Should return the list of sequences in the dataset.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.__init__": [[23, 36], ["data.Sequence._construct_init_data", "data.Sequence._ensure_start_frame"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence._construct_init_data", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence._ensure_start_frame"], ["def", "__init__", "(", "self", ",", "name", ",", "frames", ",", "dataset", ",", "ground_truth_rect", ",", "ground_truth_seg", "=", "None", ",", "init_data", "=", "None", ",", "\n", "object_class", "=", "None", ",", "target_visible", "=", "None", ",", "object_ids", "=", "None", ",", "multiobj_mode", "=", "False", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "frames", "=", "frames", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "ground_truth_rect", "=", "ground_truth_rect", "\n", "self", ".", "ground_truth_seg", "=", "ground_truth_seg", "\n", "self", ".", "object_class", "=", "object_class", "\n", "self", ".", "target_visible", "=", "target_visible", "\n", "self", ".", "object_ids", "=", "object_ids", "\n", "self", ".", "multiobj_mode", "=", "multiobj_mode", "\n", "self", ".", "init_data", "=", "self", ".", "_construct_init_data", "(", "init_data", ")", "\n", "self", ".", "_ensure_start_frame", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence._ensure_start_frame": [[37, 55], ["min", "list", "data.Sequence.init_data.keys", "isinstance", "data.Sequence.ground_truth_rect.items", "len", "len", "data.Sequence.init_data.items"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "def", "_ensure_start_frame", "(", "self", ")", ":", "\n", "# Ensure start frame is 0", "\n", "        ", "start_frame", "=", "min", "(", "list", "(", "self", ".", "init_data", ".", "keys", "(", ")", ")", ")", "\n", "if", "start_frame", ">", "0", ":", "\n", "            ", "self", ".", "frames", "=", "self", ".", "frames", "[", "start_frame", ":", "]", "\n", "if", "self", ".", "ground_truth_rect", "is", "not", "None", ":", "\n", "                ", "if", "isinstance", "(", "self", ".", "ground_truth_rect", ",", "(", "dict", ",", "OrderedDict", ")", ")", ":", "\n", "                    ", "for", "obj_id", ",", "gt", "in", "self", ".", "ground_truth_rect", ".", "items", "(", ")", ":", "\n", "                        ", "self", ".", "ground_truth_rect", "[", "obj_id", "]", "=", "gt", "[", "start_frame", ":", ",", ":", "]", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "ground_truth_rect", "=", "self", ".", "ground_truth_rect", "[", "start_frame", ":", ",", ":", "]", "\n", "", "", "if", "self", ".", "ground_truth_seg", "is", "not", "None", ":", "\n", "                ", "self", ".", "ground_truth_seg", "=", "self", ".", "ground_truth_seg", "[", "start_frame", ":", "]", "\n", "assert", "len", "(", "self", ".", "frames", ")", "==", "len", "(", "self", ".", "ground_truth_seg", ")", "\n", "\n", "", "if", "self", ".", "target_visible", "is", "not", "None", ":", "\n", "                ", "self", ".", "target_visible", "=", "self", ".", "target_visible", "[", "start_frame", ":", "]", "\n", "", "self", ".", "init_data", "=", "{", "frame", "-", "start_frame", ":", "val", "for", "frame", ",", "val", "in", "self", ".", "init_data", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence._construct_init_data": [[56, 91], ["init_data.items", "init_data.items", "dict", "isinstance", "isinstance", "collections.OrderedDict", "isinstance", "len", "isinstance", "collections.OrderedDict", "list", "list", "list", "list", "len", "list", "data.Sequence.ground_truth_rect.items", "init_val[].items"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "", "def", "_construct_init_data", "(", "self", ",", "init_data", ")", ":", "\n", "        ", "if", "init_data", "is", "not", "None", ":", "\n", "            ", "if", "not", "self", ".", "multiobj_mode", ":", "\n", "                ", "assert", "self", ".", "object_ids", "is", "None", "or", "len", "(", "self", ".", "object_ids", ")", "==", "1", "\n", "for", "frame", ",", "init_val", "in", "init_data", ".", "items", "(", ")", ":", "\n", "                    ", "if", "'bbox'", "in", "init_val", "and", "isinstance", "(", "init_val", "[", "'bbox'", "]", ",", "(", "dict", ",", "OrderedDict", ")", ")", ":", "\n", "                        ", "init_val", "[", "'bbox'", "]", "=", "init_val", "[", "'bbox'", "]", "[", "self", ".", "object_ids", "[", "0", "]", "]", "\n", "# convert to list", "\n", "", "", "", "for", "frame", ",", "init_val", "in", "init_data", ".", "items", "(", ")", ":", "\n", "                ", "if", "'bbox'", "in", "init_val", ":", "\n", "                    ", "if", "isinstance", "(", "init_val", "[", "'bbox'", "]", ",", "(", "dict", ",", "OrderedDict", ")", ")", ":", "\n", "                        ", "init_val", "[", "'bbox'", "]", "=", "OrderedDict", "(", "{", "obj_id", ":", "list", "(", "init", ")", "for", "obj_id", ",", "init", "in", "init_val", "[", "'bbox'", "]", ".", "items", "(", ")", "}", ")", "\n", "", "else", ":", "\n", "                        ", "init_val", "[", "'bbox'", "]", "=", "list", "(", "init_val", "[", "'bbox'", "]", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "init_data", "=", "{", "0", ":", "dict", "(", ")", "}", "# Assume start from frame 0", "\n", "\n", "if", "self", ".", "object_ids", "is", "not", "None", ":", "\n", "                ", "init_data", "[", "0", "]", "[", "'object_ids'", "]", "=", "self", ".", "object_ids", "\n", "\n", "", "if", "self", ".", "ground_truth_rect", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "multiobj_mode", ":", "\n", "                    ", "assert", "isinstance", "(", "self", ".", "ground_truth_rect", ",", "(", "dict", ",", "OrderedDict", ")", ")", "\n", "init_data", "[", "0", "]", "[", "'bbox'", "]", "=", "OrderedDict", "(", "{", "obj_id", ":", "list", "(", "gt", "[", "0", ",", ":", "]", ")", "for", "obj_id", ",", "gt", "in", "self", ".", "ground_truth_rect", ".", "items", "(", ")", "}", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "self", ".", "object_ids", "is", "None", "or", "len", "(", "self", ".", "object_ids", ")", "==", "1", "\n", "if", "isinstance", "(", "self", ".", "ground_truth_rect", ",", "(", "dict", ",", "OrderedDict", ")", ")", ":", "\n", "                        ", "init_data", "[", "0", "]", "[", "'bbox'", "]", "=", "list", "(", "self", ".", "ground_truth_rect", "[", "self", ".", "object_ids", "[", "0", "]", "]", "[", "0", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "                        ", "init_data", "[", "0", "]", "[", "'bbox'", "]", "=", "list", "(", "self", ".", "ground_truth_rect", "[", "0", ",", ":", "]", ")", "\n", "\n", "", "", "", "if", "self", ".", "ground_truth_seg", "is", "not", "None", ":", "\n", "                ", "init_data", "[", "0", "]", "[", "'mask'", "]", "=", "self", ".", "ground_truth_seg", "[", "0", "]", "\n", "\n", "", "", "return", "init_data", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.init_info": [[92, 95], ["data.Sequence.frame_info"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.frame_info"], ["", "def", "init_info", "(", "self", ")", ":", "\n", "        ", "info", "=", "self", ".", "frame_info", "(", "frame_num", "=", "0", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.frame_info": [[96, 99], ["data.Sequence.object_init_data"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.object_init_data"], ["", "def", "frame_info", "(", "self", ",", "frame_num", ")", ":", "\n", "        ", "info", "=", "self", ".", "object_init_data", "(", "frame_num", "=", "frame_num", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.init_bbox": [[100, 102], ["data.Sequence.object_init_data().get", "data.Sequence.object_init_data"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.object_init_data"], ["", "def", "init_bbox", "(", "self", ",", "frame_num", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "object_init_data", "(", "frame_num", "=", "frame_num", ")", ".", "get", "(", "'init_bbox'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.init_mask": [[103, 105], ["data.Sequence.object_init_data().get", "data.Sequence.object_init_data"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.object_init_data"], ["", "def", "init_mask", "(", "self", ",", "frame_num", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "object_init_data", "(", "frame_num", "=", "frame_num", ")", ".", "get", "(", "'init_mask'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get_info": [[106, 113], ["dict", "data.Sequence.get"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get"], ["", "def", "get_info", "(", "self", ",", "keys", ",", "frame_num", "=", "None", ")", ":", "\n", "        ", "info", "=", "dict", "(", ")", "\n", "for", "k", "in", "keys", ":", "\n", "            ", "val", "=", "self", ".", "get", "(", "k", ",", "frame_num", "=", "frame_num", ")", "\n", "if", "val", "is", "not", "None", ":", "\n", "                ", "info", "[", "k", "]", "=", "val", "\n", "", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.object_init_data": [[114, 138], ["dict", "data.Sequence.init_data[].items", "dict", "lib.train.data.image_loader.imread_indexed", "len", "int"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.image_loader.imread_indexed"], ["", "def", "object_init_data", "(", "self", ",", "frame_num", "=", "None", ")", "->", "dict", ":", "\n", "        ", "if", "frame_num", "is", "None", ":", "\n", "            ", "frame_num", "=", "0", "\n", "", "if", "frame_num", "not", "in", "self", ".", "init_data", ":", "\n", "            ", "return", "dict", "(", ")", "\n", "\n", "", "init_data", "=", "dict", "(", ")", "\n", "for", "key", ",", "val", "in", "self", ".", "init_data", "[", "frame_num", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "continue", "\n", "", "init_data", "[", "'init_'", "+", "key", "]", "=", "val", "\n", "\n", "", "if", "'init_mask'", "in", "init_data", "and", "init_data", "[", "'init_mask'", "]", "is", "not", "None", ":", "\n", "            ", "anno", "=", "imread_indexed", "(", "init_data", "[", "'init_mask'", "]", ")", "\n", "if", "not", "self", ".", "multiobj_mode", "and", "self", ".", "object_ids", "is", "not", "None", ":", "\n", "                ", "assert", "len", "(", "self", ".", "object_ids", ")", "==", "1", "\n", "anno", "=", "(", "anno", "==", "int", "(", "self", ".", "object_ids", "[", "0", "]", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "init_data", "[", "'init_mask'", "]", "=", "anno", "\n", "\n", "", "if", "self", ".", "object_ids", "is", "not", "None", ":", "\n", "            ", "init_data", "[", "'object_ids'", "]", "=", "self", ".", "object_ids", "\n", "init_data", "[", "'sequence_object_ids'", "]", "=", "self", ".", "object_ids", "\n", "\n", "", "return", "init_data", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.target_class": [[139, 141], ["None"], "methods", ["None"], ["", "def", "target_class", "(", "self", ",", "frame_num", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "object_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get": [[142, 144], ["getattr"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "name", ",", "frame_num", "=", "None", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "name", ")", "(", "frame_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.__repr__": [[145, 147], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{self.__class__.__name__} {self.name}, length={len} frames\"", ".", "format", "(", "self", "=", "self", ",", "len", "=", "len", "(", "self", ".", "frames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.__getitem__": [[152, 164], ["isinstance", "IndexError", "isinstance", "list.__getitem__", "isinstance", "data.SequenceList", "data.SequenceList", "list.__getitem__", "list.__getitem__"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.__getitem__", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.__getitem__", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.__getitem__"], ["def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "str", ")", ":", "\n", "            ", "for", "seq", "in", "self", ":", "\n", "                ", "if", "seq", ".", "name", "==", "item", ":", "\n", "                    ", "return", "seq", "\n", "", "", "raise", "IndexError", "(", "'Sequence name not in the dataset.'", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "int", ")", ":", "\n", "            ", "return", "super", "(", "SequenceList", ",", "self", ")", ".", "__getitem__", "(", "item", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "return", "SequenceList", "(", "[", "super", "(", "SequenceList", ",", "self", ")", ".", "__getitem__", "(", "i", ")", "for", "i", "in", "item", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "SequenceList", "(", "super", "(", "SequenceList", ",", "self", ")", ".", "__getitem__", "(", "item", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.__add__": [[165, 167], ["data.SequenceList", "list.__add__"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.__add__"], ["", "", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "SequenceList", "(", "super", "(", "SequenceList", ",", "self", ")", ".", "__add__", "(", "other", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.copy": [[168, 170], ["data.SequenceList", "super().copy"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "super", "(", "SequenceList", ",", "self", ")", ".", "copy", "(", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker.__init__": [[36, 61], ["lib.test.evaluation.environment.env_settings", "os.path.abspath", "os.path.isfile", "isinstance", "os.path.join", "importlib.import_module", "importlib.import_module.get_tracker_class", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings", "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.cswintt.get_tracker_class"], ["def", "__init__", "(", "self", ",", "name", ":", "str", ",", "parameter_name", ":", "str", ",", "dataset_name", ":", "str", ",", "run_id", ":", "int", "=", "None", ",", "display_name", ":", "str", "=", "None", ",", "\n", "result_only", "=", "False", ")", ":", "\n", "        ", "assert", "run_id", "is", "None", "or", "isinstance", "(", "run_id", ",", "int", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "parameter_name", "=", "parameter_name", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "run_id", "=", "run_id", "\n", "self", ".", "display_name", "=", "display_name", "\n", "\n", "env", "=", "env_settings", "(", ")", "\n", "if", "self", ".", "run_id", "is", "None", ":", "\n", "            ", "self", ".", "results_dir", "=", "'{}/{}/{}'", ".", "format", "(", "env", ".", "results_path", ",", "self", ".", "name", ",", "self", ".", "parameter_name", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "results_dir", "=", "'{}/{}/{}_{:03d}'", ".", "format", "(", "env", ".", "results_path", ",", "self", ".", "name", ",", "self", ".", "parameter_name", ",", "self", ".", "run_id", ")", "\n", "", "if", "result_only", ":", "\n", "            ", "self", ".", "results_dir", "=", "'{}/{}/{}'", ".", "format", "(", "env", ".", "results_path", ",", "\"LaSOT\"", ",", "self", ".", "name", ")", "\n", "\n", "", "tracker_module_abspath", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\n", "'..'", ",", "'tracker'", ",", "'%s.py'", "%", "self", ".", "name", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "tracker_module_abspath", ")", ":", "\n", "            ", "tracker_module", "=", "importlib", ".", "import_module", "(", "'lib.test.tracker.{}'", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "self", ".", "tracker_class", "=", "tracker_module", ".", "get_tracker_class", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tracker_class", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker.create_tracker": [[62, 65], ["tracker.Tracker.Tracker.tracker_class"], "methods", ["None"], ["", "", "def", "create_tracker", "(", "self", ",", "params", ")", ":", "\n", "        ", "tracker", "=", "self", ".", "tracker_class", "(", "params", ",", "self", ".", "dataset_name", ")", "\n", "return", "tracker", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker.run_sequence": [[66, 89], ["tracker.Tracker.Tracker.get_parameters", "seq.init_info", "tracker.Tracker.Tracker.create_tracker", "tracker.Tracker.Tracker._track_sequence", "getattr"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker.get_parameters", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.init_info", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker.create_tracker", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker._track_sequence"], ["", "def", "run_sequence", "(", "self", ",", "seq", ",", "debug", "=", "None", ")", ":", "\n", "        ", "\"\"\"Run tracker on sequence.\n        args:\n            seq: Sequence to run the tracker on.\n            visualization: Set visualization flag (None means default value specified in the parameters).\n            debug: Set debug level (None means default value specified in the parameters).\n            multiobj_mode: Which mode to use for multiple objects.\n        \"\"\"", "\n", "params", "=", "self", ".", "get_parameters", "(", ")", "\n", "\n", "debug_", "=", "debug", "\n", "if", "debug", "is", "None", ":", "\n", "            ", "debug_", "=", "getattr", "(", "params", ",", "'debug'", ",", "0", ")", "\n", "\n", "", "params", ".", "debug", "=", "debug_", "\n", "\n", "# Get init information", "\n", "init_info", "=", "seq", ".", "init_info", "(", ")", "\n", "\n", "tracker", "=", "self", ".", "create_tracker", "(", "params", ")", "\n", "\n", "output", "=", "self", ".", "_track_sequence", "(", "tracker", ",", "seq", ",", "init_info", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker._track_sequence": [[90, 153], ["tracker.Tracker._read_image", "time.time", "tracker.initialize", "collections.OrderedDict", "tracker.Tracker._track_sequence._store_outputs"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker._read_image", "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.basetracker.BaseTracker.initialize"], ["", "def", "_track_sequence", "(", "self", ",", "tracker", ",", "seq", ",", "init_info", ")", ":", "\n", "# Define outputs", "\n", "# Each field in output is a list containing tracker prediction for each frame.", "\n", "\n", "# In case of single object tracking mode:", "\n", "# target_bbox[i] is the predicted bounding box for frame i", "\n", "# time[i] is the processing time for frame i", "\n", "\n", "# In case of multi object tracking mode:", "\n", "# target_bbox[i] is an OrderedDict, where target_bbox[i][obj_id] is the predicted box for target obj_id in", "\n", "# frame i", "\n", "# time[i] is either the processing time for frame i, or an OrderedDict containing processing times for each", "\n", "# object in frame i", "\n", "\n", "        ", "output", "=", "{", "'target_bbox'", ":", "[", "]", ",", "\n", "'time'", ":", "[", "]", "}", "\n", "if", "tracker", ".", "params", ".", "save_all_boxes", ":", "\n", "            ", "output", "[", "'all_boxes'", "]", "=", "[", "]", "\n", "output", "[", "'all_scores'", "]", "=", "[", "]", "\n", "\n", "", "def", "_store_outputs", "(", "tracker_out", ":", "dict", ",", "defaults", "=", "None", ")", ":", "\n", "            ", "defaults", "=", "{", "}", "if", "defaults", "is", "None", "else", "defaults", "\n", "for", "key", "in", "output", ".", "keys", "(", ")", ":", "\n", "                ", "val", "=", "tracker_out", ".", "get", "(", "key", ",", "defaults", ".", "get", "(", "key", ",", "None", ")", ")", "\n", "if", "key", "in", "tracker_out", "or", "val", "is", "not", "None", ":", "\n", "                    ", "output", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "\n", "# Initialize", "\n", "", "", "", "image", "=", "self", ".", "_read_image", "(", "seq", ".", "frames", "[", "0", "]", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "out", "=", "tracker", ".", "initialize", "(", "image", ",", "init_info", ")", "\n", "if", "out", "is", "None", ":", "\n", "            ", "out", "=", "{", "}", "\n", "\n", "", "prev_output", "=", "OrderedDict", "(", "out", ")", "\n", "init_default", "=", "{", "'target_bbox'", ":", "init_info", ".", "get", "(", "'init_bbox'", ")", ",", "\n", "'time'", ":", "time", ".", "time", "(", ")", "-", "start_time", "}", "\n", "if", "tracker", ".", "params", ".", "save_all_boxes", ":", "\n", "            ", "init_default", "[", "'all_boxes'", "]", "=", "out", "[", "'all_boxes'", "]", "\n", "init_default", "[", "'all_scores'", "]", "=", "out", "[", "'all_scores'", "]", "\n", "\n", "", "_store_outputs", "(", "out", ",", "init_default", ")", "\n", "\n", "for", "frame_num", ",", "frame_path", "in", "enumerate", "(", "seq", ".", "frames", "[", "1", ":", "]", ",", "start", "=", "1", ")", ":", "\n", "            ", "image", "=", "self", ".", "_read_image", "(", "frame_path", ")", "\n", "if", "frame_num", "==", "80", ":", "\n", "                ", "print", "(", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "info", "=", "seq", ".", "frame_info", "(", "frame_num", ")", "\n", "info", "[", "'previous_output'", "]", "=", "prev_output", "\n", "\n", "out", "=", "tracker", ".", "track", "(", "image", ",", "info", ")", "\n", "prev_output", "=", "OrderedDict", "(", "out", ")", "\n", "_store_outputs", "(", "out", ",", "{", "'time'", ":", "time", ".", "time", "(", ")", "-", "start_time", "}", ")", "\n", "\n", "", "for", "key", "in", "[", "'target_bbox'", ",", "'all_boxes'", ",", "'all_scores'", "]", ":", "\n", "            ", "if", "key", "in", "output", "and", "len", "(", "output", "[", "key", "]", ")", "<=", "1", ":", "\n", "                ", "output", ".", "pop", "(", "key", ")", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker.run_video": [[154, 273], ["MultiObjectWrapper.Tracker.get_parameters", "getattr", "os.path.isfile", "cv2.VideoCapture", "cv2.namedWindow", "cv2.resizeWindow", "cv2.VideoCapture.read", "cv2.imshow", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "getattr", "getattr", "MultiObjectWrapper.Tracker.create_tracker", "print", "exit", "isinstance", "MultiObjectWrapper.initialize", "output_boxes.append", "cv2.VideoCapture.read", "frame.copy", "MultiObjectWrapper.track", "output_boxes.append", "cv2.rectangle", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.imshow", "cv2.waitKey", "os.path.join", "numpy.array().astype", "numpy.savetxt", "MultiObjectWrapper", "ValueError", "len", "MultiObjectWrapper.Tracker.run_video._build_init_info"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker.get_parameters", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker.create_tracker", "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.basetracker.BaseTracker.initialize", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.skyesong38_cswintt.tracker.basetracker.BaseTracker.track"], ["", "def", "run_video", "(", "self", ",", "videofilepath", ",", "optional_box", "=", "None", ",", "debug", "=", "None", ",", "visdom_info", "=", "None", ",", "save_results", "=", "False", ")", ":", "\n", "        ", "\"\"\"Run the tracker with the vieofile.\n        args:\n            debug: Debug level.\n        \"\"\"", "\n", "\n", "params", "=", "self", ".", "get_parameters", "(", ")", "\n", "\n", "debug_", "=", "debug", "\n", "if", "debug", "is", "None", ":", "\n", "            ", "debug_", "=", "getattr", "(", "params", ",", "'debug'", ",", "0", ")", "\n", "", "params", ".", "debug", "=", "debug_", "\n", "\n", "params", ".", "tracker_name", "=", "self", ".", "name", "\n", "params", ".", "param_name", "=", "self", ".", "parameter_name", "\n", "# self._init_visdom(visdom_info, debug_)", "\n", "\n", "multiobj_mode", "=", "getattr", "(", "params", ",", "'multiobj_mode'", ",", "getattr", "(", "self", ".", "tracker_class", ",", "'multiobj_mode'", ",", "'default'", ")", ")", "\n", "\n", "if", "multiobj_mode", "==", "'default'", ":", "\n", "            ", "tracker", "=", "self", ".", "create_tracker", "(", "params", ")", "\n", "\n", "", "elif", "multiobj_mode", "==", "'parallel'", ":", "\n", "            ", "tracker", "=", "MultiObjectWrapper", "(", "self", ".", "tracker_class", ",", "params", ",", "self", ".", "visdom", ",", "fast_load", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown multi object mode {}'", ".", "format", "(", "multiobj_mode", ")", ")", "\n", "\n", "", "assert", "os", ".", "path", ".", "isfile", "(", "videofilepath", ")", ",", "\"Invalid param {}\"", ".", "format", "(", "videofilepath", ")", "\n", "\", videofilepath must be a valid videofile\"", "\n", "\n", "output_boxes", "=", "[", "]", "\n", "\n", "cap", "=", "cv", ".", "VideoCapture", "(", "videofilepath", ")", "\n", "display_name", "=", "'Display: '", "+", "tracker", ".", "params", ".", "tracker_name", "\n", "cv", ".", "namedWindow", "(", "display_name", ",", "cv", ".", "WINDOW_NORMAL", "|", "cv", ".", "WINDOW_KEEPRATIO", ")", "\n", "cv", ".", "resizeWindow", "(", "display_name", ",", "960", ",", "720", ")", "\n", "success", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "cv", ".", "imshow", "(", "display_name", ",", "frame", ")", "\n", "\n", "def", "_build_init_info", "(", "box", ")", ":", "\n", "            ", "return", "{", "'init_bbox'", ":", "box", "}", "\n", "\n", "", "if", "success", "is", "not", "True", ":", "\n", "            ", "print", "(", "\"Read frame from {} failed.\"", ".", "format", "(", "videofilepath", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "if", "optional_box", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "optional_box", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "optional_box", ")", "==", "4", ",", "\"valid box's foramt is [x,y,w,h]\"", "\n", "tracker", ".", "initialize", "(", "frame", ",", "_build_init_info", "(", "optional_box", ")", ")", "\n", "output_boxes", ".", "append", "(", "optional_box", ")", "\n", "", "else", ":", "\n", "            ", "while", "True", ":", "\n", "# cv.waitKey()", "\n", "                ", "frame_disp", "=", "frame", ".", "copy", "(", ")", "\n", "\n", "cv", ".", "putText", "(", "frame_disp", ",", "'Select target ROI and press ENTER'", ",", "(", "20", ",", "30", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "\n", "1.5", ",", "(", "0", ",", "0", ",", "0", ")", ",", "1", ")", "\n", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "cv", ".", "selectROI", "(", "display_name", ",", "frame_disp", ",", "fromCenter", "=", "False", ")", "\n", "init_state", "=", "[", "x", ",", "y", ",", "w", ",", "h", "]", "\n", "tracker", ".", "initialize", "(", "frame", ",", "_build_init_info", "(", "init_state", ")", ")", "\n", "output_boxes", ".", "append", "(", "init_state", ")", "\n", "break", "\n", "\n", "", "", "while", "True", ":", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "\n", "if", "frame", "is", "None", ":", "\n", "                ", "break", "\n", "\n", "", "frame_disp", "=", "frame", ".", "copy", "(", ")", "\n", "\n", "# Draw box", "\n", "out", "=", "tracker", ".", "track", "(", "frame", ")", "\n", "state", "=", "[", "int", "(", "s", ")", "for", "s", "in", "out", "[", "'target_bbox'", "]", "]", "\n", "output_boxes", ".", "append", "(", "state", ")", "\n", "\n", "cv", ".", "rectangle", "(", "frame_disp", ",", "(", "state", "[", "0", "]", ",", "state", "[", "1", "]", ")", ",", "(", "state", "[", "2", "]", "+", "state", "[", "0", "]", ",", "state", "[", "3", "]", "+", "state", "[", "1", "]", ")", ",", "\n", "(", "0", ",", "255", ",", "0", ")", ",", "5", ")", "\n", "\n", "font_color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "cv", ".", "putText", "(", "frame_disp", ",", "'Tracking!'", ",", "(", "20", ",", "30", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1", ",", "\n", "font_color", ",", "1", ")", "\n", "cv", ".", "putText", "(", "frame_disp", ",", "'Press r to reset'", ",", "(", "20", ",", "55", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1", ",", "\n", "font_color", ",", "1", ")", "\n", "cv", ".", "putText", "(", "frame_disp", ",", "'Press q to quit'", ",", "(", "20", ",", "80", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1", ",", "\n", "font_color", ",", "1", ")", "\n", "\n", "# Display the resulting frame", "\n", "cv", ".", "imshow", "(", "display_name", ",", "frame_disp", ")", "\n", "key", "=", "cv", ".", "waitKey", "(", "1", ")", "\n", "if", "key", "==", "ord", "(", "'q'", ")", ":", "\n", "                ", "break", "\n", "", "elif", "key", "==", "ord", "(", "'r'", ")", ":", "\n", "                ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "frame_disp", "=", "frame", ".", "copy", "(", ")", "\n", "\n", "cv", ".", "putText", "(", "frame_disp", ",", "'Select target ROI and press ENTER'", ",", "(", "20", ",", "30", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1.5", ",", "\n", "(", "0", ",", "0", ",", "0", ")", ",", "1", ")", "\n", "\n", "cv", ".", "imshow", "(", "display_name", ",", "frame_disp", ")", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "cv", ".", "selectROI", "(", "display_name", ",", "frame_disp", ",", "fromCenter", "=", "False", ")", "\n", "init_state", "=", "[", "x", ",", "y", ",", "w", ",", "h", "]", "\n", "tracker", ".", "initialize", "(", "frame", ",", "_build_init_info", "(", "init_state", ")", ")", "\n", "output_boxes", ".", "append", "(", "init_state", ")", "\n", "\n", "# When everything done, release the capture", "\n", "", "", "cap", ".", "release", "(", ")", "\n", "cv", ".", "destroyAllWindows", "(", ")", "\n", "\n", "if", "save_results", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "results_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "results_dir", ")", "\n", "", "video_name", "=", "Path", "(", "videofilepath", ")", ".", "stem", "\n", "base_results_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "results_dir", ",", "'video_{}'", ".", "format", "(", "video_name", ")", ")", "\n", "\n", "tracked_bb", "=", "np", ".", "array", "(", "output_boxes", ")", ".", "astype", "(", "int", ")", "\n", "bbox_file", "=", "'{}.txt'", ".", "format", "(", "base_results_path", ")", "\n", "np", ".", "savetxt", "(", "bbox_file", ",", "tracked_bb", ",", "delimiter", "=", "'\\t'", ",", "fmt", "=", "'%d'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker.get_parameters": [[275, 280], ["importlib.import_module", "importlib.import_module.parameters"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.parameter.cswintt.parameters"], ["", "", "def", "get_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get parameters.\"\"\"", "\n", "param_module", "=", "importlib", ".", "import_module", "(", "'lib.test.parameter.{}'", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "params", "=", "param_module", ".", "parameters", "(", "self", ".", "parameter_name", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.Tracker._read_image": [[281, 289], ["isinstance", "cv2.imread", "cv2.cvtColor", "isinstance", "lib.utils.lmdb_utils.decode_img", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_img"], ["", "def", "_read_image", "(", "self", ",", "image_file", ":", "str", ")", ":", "\n", "        ", "if", "isinstance", "(", "image_file", ",", "str", ")", ":", "\n", "            ", "im", "=", "cv", ".", "imread", "(", "image_file", ")", "\n", "return", "cv", ".", "cvtColor", "(", "im", ",", "cv", ".", "COLOR_BGR2RGB", ")", "\n", "", "elif", "isinstance", "(", "image_file", ",", "list", ")", "and", "len", "(", "image_file", ")", "==", "2", ":", "\n", "            ", "return", "decode_img", "(", "image_file", "[", "0", "]", ",", "image_file", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"type of image_file should be str or list\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.tracker.trackerlist": [[13, 25], ["isinstance", "tracker.Tracker"], "function", ["None"], ["def", "trackerlist", "(", "name", ":", "str", ",", "parameter_name", ":", "str", ",", "dataset_name", ":", "str", ",", "run_ids", "=", "None", ",", "display_name", ":", "str", "=", "None", ",", "\n", "result_only", "=", "False", ")", ":", "\n", "    ", "\"\"\"Generate list of trackers.\n    args:\n        name: Name of tracking method.\n        parameter_name: Name of parameter file.\n        run_ids: A single or list of run_ids.\n        display_name: Name to be displayed in the result plots.\n    \"\"\"", "\n", "if", "run_ids", "is", "None", "or", "isinstance", "(", "run_ids", ",", "int", ")", ":", "\n", "        ", "run_ids", "=", "[", "run_ids", "]", "\n", "", "return", "[", "Tracker", "(", "name", ",", "parameter_name", ",", "dataset_name", ",", "run_id", ",", "display_name", ",", "result_only", ")", "for", "run_id", "in", "run_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.votdataset.VOTDataset.__init__": [[18, 22], ["lib.test.evaluation.data.BaseDataset.__init__", "votdataset.VOTDataset._get_sequence_list"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_sequence_list"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "vot_path", "\n", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.votdataset.VOTDataset.get_sequence_list": [[23, 25], ["lib.test.evaluation.data.SequenceList", "votdataset.VOTDataset._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.votdataset.VOTDataset._construct_sequence": [[26, 56], ["lib.test.evaluation.data.Sequence", "numpy.loadtxt", "numpy.amin().reshape", "numpy.amin().reshape", "numpy.amax().reshape", "numpy.amax().reshape", "numpy.concatenate", "str", "numpy.loadtxt", "range", "str", "numpy.amin", "numpy.amin", "numpy.amax", "numpy.amax"], "methods", ["None"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_name", ")", ":", "\n", "        ", "sequence_path", "=", "sequence_name", "\n", "nz", "=", "8", "\n", "ext", "=", "'jpg'", "\n", "start_frame", "=", "1", "\n", "\n", "anno_path", "=", "'{}/{}/groundtruth.txt'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_name", ")", "\n", "try", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "except", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "", "end_frame", "=", "ground_truth_rect", ".", "shape", "[", "0", "]", "\n", "\n", "frames", "=", "[", "'{base_path}/{sequence_path}/color/{frame:0{nz}}.{ext}'", ".", "format", "(", "base_path", "=", "self", ".", "base_path", ",", "\n", "sequence_path", "=", "sequence_path", ",", "frame", "=", "frame_num", ",", "nz", "=", "nz", ",", "ext", "=", "ext", ")", "\n", "for", "frame_num", "in", "range", "(", "start_frame", ",", "end_frame", "+", "1", ")", "]", "\n", "\n", "# Convert gt", "\n", "if", "ground_truth_rect", ".", "shape", "[", "1", "]", ">", "4", ":", "\n", "            ", "gt_x_all", "=", "ground_truth_rect", "[", ":", ",", "[", "0", ",", "2", ",", "4", ",", "6", "]", "]", "\n", "gt_y_all", "=", "ground_truth_rect", "[", ":", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", "\n", "\n", "x1", "=", "np", ".", "amin", "(", "gt_x_all", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y1", "=", "np", ".", "amin", "(", "gt_y_all", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "x2", "=", "np", ".", "amax", "(", "gt_x_all", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y2", "=", "np", ".", "amax", "(", "gt_y_all", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "ground_truth_rect", "=", "np", ".", "concatenate", "(", "(", "x1", ",", "y1", ",", "x2", "-", "x1", ",", "y2", "-", "y1", ")", ",", "1", ")", "\n", "", "return", "Sequence", "(", "sequence_name", ",", "frames", ",", "'vot'", ",", "ground_truth_rect", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.votdataset.VOTDataset.__len__": [[57, 59], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.votdataset.VOTDataset._get_sequence_list": [[60, 123], ["None"], "methods", ["None"], ["", "def", "_get_sequence_list", "(", "self", ")", ":", "\n", "        ", "sequence_list", "=", "[", "'ants1'", ",", "\n", "'ants3'", ",", "\n", "'bag'", ",", "\n", "'ball1'", ",", "\n", "'ball2'", ",", "\n", "'basketball'", ",", "\n", "'birds1'", ",", "\n", "'blanket'", ",", "\n", "'bmx'", ",", "\n", "'bolt1'", ",", "\n", "'bolt2'", ",", "\n", "'book'", ",", "\n", "'butterfly'", ",", "\n", "'car1'", ",", "\n", "'conduction1'", ",", "\n", "'crabs1'", ",", "\n", "'crossing'", ",", "\n", "'dinosaur'", ",", "\n", "'drone_across'", ",", "\n", "'drone_flip'", ",", "\n", "'drone1'", ",", "\n", "'fernando'", ",", "\n", "'fish1'", ",", "\n", "'fish2'", ",", "\n", "'fish3'", ",", "\n", "'flamingo1'", ",", "\n", "'frisbee'", ",", "\n", "'girl'", ",", "\n", "'glove'", ",", "\n", "'godfather'", ",", "\n", "'graduate'", ",", "\n", "'gymnastics1'", ",", "\n", "'gymnastics2'", ",", "\n", "'gymnastics3'", ",", "\n", "'hand'", ",", "\n", "'handball1'", ",", "\n", "'handball2'", ",", "\n", "'helicopter'", ",", "\n", "'iceskater1'", ",", "\n", "'iceskater2'", ",", "\n", "'leaves'", ",", "\n", "'matrix'", ",", "\n", "'motocross1'", ",", "\n", "'motocross2'", ",", "\n", "'nature'", ",", "\n", "'pedestrian1'", ",", "\n", "'rabbit'", ",", "\n", "'racing'", ",", "\n", "'road'", ",", "\n", "'shaking'", ",", "\n", "'sheep'", ",", "\n", "'singer2'", ",", "\n", "'singer3'", ",", "\n", "'soccer1'", ",", "\n", "'soccer2'", ",", "\n", "'soldier'", ",", "\n", "'tiger'", ",", "\n", "'traffic'", ",", "\n", "'wiper'", ",", "\n", "'zebrafish1'", "]", "\n", "\n", "return", "sequence_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.uavdataset.UAVDataset.__init__": [[17, 21], ["lib.test.evaluation.data.BaseDataset.__init__", "uavdataset.UAVDataset._get_sequence_info_list"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.uavdataset.UAVDataset._get_sequence_info_list"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "uav_path", "\n", "self", ".", "sequence_info_list", "=", "self", ".", "_get_sequence_info_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.uavdataset.UAVDataset.get_sequence_list": [[22, 24], ["lib.test.evaluation.data.SequenceList", "uavdataset.UAVDataset._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_info_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.uavdataset.UAVDataset._construct_sequence": [[25, 45], ["lib.test.utils.load_text.load_text", "lib.test.evaluation.data.Sequence", "str", "range"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_info", ")", ":", "\n", "        ", "sequence_path", "=", "sequence_info", "[", "'path'", "]", "\n", "nz", "=", "sequence_info", "[", "'nz'", "]", "\n", "ext", "=", "sequence_info", "[", "'ext'", "]", "\n", "start_frame", "=", "sequence_info", "[", "'startFrame'", "]", "\n", "end_frame", "=", "sequence_info", "[", "'endFrame'", "]", "\n", "\n", "init_omit", "=", "0", "\n", "if", "'initOmit'", "in", "sequence_info", ":", "\n", "            ", "init_omit", "=", "sequence_info", "[", "'initOmit'", "]", "\n", "\n", "", "frames", "=", "[", "'{base_path}/{sequence_path}/{frame:0{nz}}.{ext}'", ".", "format", "(", "base_path", "=", "self", ".", "base_path", ",", "\n", "sequence_path", "=", "sequence_path", ",", "frame", "=", "frame_num", ",", "nz", "=", "nz", ",", "ext", "=", "ext", ")", "for", "frame_num", "in", "range", "(", "start_frame", "+", "init_omit", ",", "end_frame", "+", "1", ")", "]", "\n", "\n", "anno_path", "=", "'{}/{}'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_info", "[", "'anno_path'", "]", ")", "\n", "\n", "ground_truth_rect", "=", "load_text", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ",", "backend", "=", "'numpy'", ")", "\n", "\n", "return", "Sequence", "(", "sequence_info", "[", "'name'", "]", ",", "frames", ",", "'uav'", ",", "ground_truth_rect", "[", "init_omit", ":", ",", ":", "]", ",", "\n", "object_class", "=", "sequence_info", "[", "'object_class'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.uavdataset.UAVDataset.__len__": [[46, 48], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_info_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.uavdataset.UAVDataset._get_sequence_info_list": [[49, 300], ["None"], "methods", ["None"], ["", "def", "_get_sequence_info_list", "(", "self", ")", ":", "\n", "        ", "sequence_info_list", "=", "[", "\n", "{", "\"name\"", ":", "\"uav_bike1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/bike1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "3085", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/bike1.txt\"", ",", "\"object_class\"", ":", "\"vehicle\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_bike2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/bike2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "553", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/bike2.txt\"", ",", "\"object_class\"", ":", "\"vehicle\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_bike3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/bike3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "433", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/bike3.txt\"", ",", "\"object_class\"", ":", "\"vehicle\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_bird1_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/bird1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "253", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/bird1_1.txt\"", ",", "\"object_class\"", ":", "\"bird\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_bird1_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/bird1\"", ",", "\"startFrame\"", ":", "775", ",", "\"endFrame\"", ":", "1477", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/bird1_2.txt\"", ",", "\"object_class\"", ":", "\"bird\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_bird1_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/bird1\"", ",", "\"startFrame\"", ":", "1573", ",", "\"endFrame\"", ":", "2437", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/bird1_3.txt\"", ",", "\"object_class\"", ":", "\"bird\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "901", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat1.txt\"", ",", "\"object_class\"", ":", "\"vessel\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "799", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat2.txt\"", ",", "\"object_class\"", ":", "\"vessel\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "901", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat3.txt\"", ",", "\"object_class\"", ":", "\"vessel\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "553", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat4.txt\"", ",", "\"object_class\"", ":", "\"vessel\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat5\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "505", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat5.txt\"", ",", "\"object_class\"", ":", "\"vessel\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat6\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "805", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat6.txt\"", ",", "\"object_class\"", ":", "\"vessel\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat7\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "535", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat7.txt\"", ",", "\"object_class\"", ":", "\"vessel\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat8\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat8\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "685", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat8.txt\"", ",", "\"object_class\"", ":", "\"vessel\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat9\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat9\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1399", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat9.txt\"", ",", "\"object_class\"", ":", "\"vessel\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_building1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/building1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "469", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/building1.txt\"", ",", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_building2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/building2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "577", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/building2.txt\"", ",", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_building3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/building3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "829", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/building3.txt\"", ",", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_building4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/building4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "787", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/building4.txt\"", ",", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_building5\"", ",", "\"path\"", ":", "\"data_seq/UAV123/building5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "481", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/building5.txt\"", ",", "\"object_class\"", ":", "\"other\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car1_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "751", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car1_1.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car1_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car1\"", ",", "\"startFrame\"", ":", "751", ",", "\"endFrame\"", ":", "1627", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car1_2.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car1_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car1\"", ",", "\"startFrame\"", ":", "1627", ",", "\"endFrame\"", ":", "2629", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car1_3.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car10\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car10\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1405", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car10.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car11\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car11\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "337", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car11.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car12\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car12\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "499", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car12.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car13\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car13\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "415", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car13.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car14\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car14\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1327", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car14.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car15\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car15\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "469", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car15.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car16_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car16\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "415", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car16_1.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car16_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car16\"", ",", "\"startFrame\"", ":", "415", ",", "\"endFrame\"", ":", "1993", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car16_2.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car17\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car17\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1057", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car17.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car18\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car18\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1207", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car18.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car1_s\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car1_s\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1475", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car1_s.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1321", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car2.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car2_s\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car2_s\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "320", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car2_s.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1717", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car3.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car3_s\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car3_s\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1300", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car3_s.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1345", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car4.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car4_s\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car4_s\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "830", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car4_s.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car5\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "745", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car5.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car6_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "487", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car6_1.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car6_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car6\"", ",", "\"startFrame\"", ":", "487", ",", "\"endFrame\"", ":", "1807", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car6_2.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car6_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car6\"", ",", "\"startFrame\"", ":", "1807", ",", "\"endFrame\"", ":", "2953", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car6_3.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car6_4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car6\"", ",", "\"startFrame\"", ":", "2953", ",", "\"endFrame\"", ":", "3925", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car6_4.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car6_5\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car6\"", ",", "\"startFrame\"", ":", "3925", ",", "\"endFrame\"", ":", "4861", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car6_5.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car7\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1033", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car7.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car8_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car8\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1357", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car8_1.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car8_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car8\"", ",", "\"startFrame\"", ":", "1357", ",", "\"endFrame\"", ":", "2575", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car8_2.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car9\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car9\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1879", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car9.txt\"", ",", "\"object_class\"", ":", "\"car\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group1_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1333", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group1_1.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group1_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group1\"", ",", "\"startFrame\"", ":", "1333", ",", "\"endFrame\"", ":", "2515", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group1_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group1_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group1\"", ",", "\"startFrame\"", ":", "2515", ",", "\"endFrame\"", ":", "3925", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group1_3.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group1_4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group1\"", ",", "\"startFrame\"", ":", "3925", ",", "\"endFrame\"", ":", "4873", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group1_4.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group2_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "907", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group2_1.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group2_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group2\"", ",", "\"startFrame\"", ":", "907", ",", "\"endFrame\"", ":", "1771", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group2_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group2_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group2\"", ",", "\"startFrame\"", ":", "1771", ",", "\"endFrame\"", ":", "2683", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group2_3.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group3_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1567", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group3_1.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group3_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group3\"", ",", "\"startFrame\"", ":", "1567", ",", "\"endFrame\"", ":", "2827", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group3_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group3_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group3\"", ",", "\"startFrame\"", ":", "2827", ",", "\"endFrame\"", ":", "4369", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group3_3.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group3_4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group3\"", ",", "\"startFrame\"", ":", "4369", ",", "\"endFrame\"", ":", "5527", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group3_4.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "799", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person1.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person10\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person10\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1021", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person10.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person11\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person11\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "721", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person11.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person12_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person12\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "601", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person12_1.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person12_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person12\"", ",", "\"startFrame\"", ":", "601", ",", "\"endFrame\"", ":", "1621", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person12_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person13\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person13\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "883", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person13.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person14_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person14\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "847", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person14_1.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person14_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person14\"", ",", "\"startFrame\"", ":", "847", ",", "\"endFrame\"", ":", "1813", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person14_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person14_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person14\"", ",", "\"startFrame\"", ":", "1813", ",", "\"endFrame\"", ":", "2923", ",", "\n", "\"nz\"", ":", "6", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person14_3.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person15\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person15\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1339", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person15.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person16\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person16\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1147", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person16.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person17_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person17\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1501", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person17_1.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person17_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person17\"", ",", "\"startFrame\"", ":", "1501", ",", "\"endFrame\"", ":", "2347", ",", "\n", "\"nz\"", ":", "6", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person17_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person18\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person18\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1393", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person18.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person19_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person19\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1243", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person19_1.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person19_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person19\"", ",", "\"startFrame\"", ":", "1243", ",", "\"endFrame\"", ":", "2791", ",", "\n", "\"nz\"", ":", "6", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person19_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person19_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person19\"", ",", "\"startFrame\"", ":", "2791", ",", "\"endFrame\"", ":", "4357", ",", "\n", "\"nz\"", ":", "6", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person19_3.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person1_s\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person1_s\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1600", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person1_s.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person2_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1189", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person2_1.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person2_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person2\"", ",", "\"startFrame\"", ":", "1189", ",", "\"endFrame\"", ":", "2623", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person2_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person20\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person20\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1783", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person20.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person21\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person21\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "487", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person21.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person22\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person22\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "199", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person22.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person23\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person23\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "397", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person23.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person2_s\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person2_s\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "250", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person2_s.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "643", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person3.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person3_s\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person3_s\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "505", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person3_s.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person4_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1501", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person4_1.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person4_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person4\"", ",", "\"startFrame\"", ":", "1501", ",", "\"endFrame\"", ":", "2743", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person4_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person5_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "877", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person5_1.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person5_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person5\"", ",", "\"startFrame\"", ":", "877", ",", "\"endFrame\"", ":", "2101", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person5_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person6\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "901", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person6.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person7_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1249", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person7_1.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person7_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person7\"", ",", "\"startFrame\"", ":", "1249", ",", "\"endFrame\"", ":", "2065", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person7_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person8_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person8\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1075", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person8_1.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person8_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person8\"", ",", "\"startFrame\"", ":", "1075", ",", "\"endFrame\"", ":", "1525", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person8_2.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person9\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person9\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "661", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person9.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_truck1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/truck1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "463", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/truck1.txt\"", ",", "\"object_class\"", ":", "\"truck\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_truck2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/truck2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "385", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/truck2.txt\"", ",", "\"object_class\"", ":", "\"truck\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_truck3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/truck3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "535", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/truck3.txt\"", ",", "\"object_class\"", ":", "\"truck\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_truck4_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/truck4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "577", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/truck4_1.txt\"", ",", "\"object_class\"", ":", "\"truck\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_truck4_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/truck4\"", ",", "\"startFrame\"", ":", "577", ",", "\"endFrame\"", ":", "1261", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/truck4_2.txt\"", ",", "\"object_class\"", ":", "\"truck\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav1_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1555", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav1_1.txt\"", ",", "\"object_class\"", ":", "\"aircraft\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav1_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav1\"", ",", "\"startFrame\"", ":", "1555", ",", "\"endFrame\"", ":", "2377", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav1_2.txt\"", ",", "\"object_class\"", ":", "\"aircraft\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav1_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav1\"", ",", "\"startFrame\"", ":", "2473", ",", "\"endFrame\"", ":", "3469", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav1_3.txt\"", ",", "\"object_class\"", ":", "\"aircraft\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "133", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav2.txt\"", ",", "\"object_class\"", ":", "\"aircraft\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "265", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav3.txt\"", ",", "\"object_class\"", ":", "\"aircraft\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "157", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav4.txt\"", ",", "\"object_class\"", ":", "\"aircraft\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav5\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "139", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav5.txt\"", ",", "\"object_class\"", ":", "\"aircraft\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav6\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "109", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav6.txt\"", ",", "\"object_class\"", ":", "\"aircraft\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav7\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "373", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav7.txt\"", ",", "\"object_class\"", ":", "\"aircraft\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav8\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav8\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "301", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav8.txt\"", ",", "\"object_class\"", ":", "\"aircraft\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "421", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard1.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard10\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard10\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "469", ",", "\n", "\"nz\"", ":", "6", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard10.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "733", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard2.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "823", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard3.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "697", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard4.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard5\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1675", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard5.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard6\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1165", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard6.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard7\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "199", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard7.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard8\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard8\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1543", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard8.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard9\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard9\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "355", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard9.txt\"", ",", "\"object_class\"", ":", "\"person\"", "}", "\n", "]", "\n", "\n", "return", "sequence_info_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.got10kdataset.GOT10KDataset.__init__": [[18, 28], ["lib.test.evaluation.data.BaseDataset.__init__", "got10kdataset.GOT10KDataset._get_sequence_list", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_sequence_list"], ["def", "__init__", "(", "self", ",", "split", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Split can be test, val, or ltrval (a validation split consisting of videos from the official train set)", "\n", "if", "split", "==", "'test'", "or", "split", "==", "'val'", ":", "\n", "            ", "self", ".", "base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "env_settings", ".", "got10k_path", ",", "split", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "env_settings", ".", "got10k_path", ",", "'train'", ")", "\n", "\n", "", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", "split", ")", "\n", "self", ".", "split", "=", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.got10kdataset.GOT10KDataset.get_sequence_list": [[29, 31], ["lib.test.evaluation.data.SequenceList", "got10kdataset.GOT10KDataset._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.got10kdataset.GOT10KDataset._construct_sequence": [[32, 43], ["lib.test.utils.load_text.load_text", "frame_list.sort", "lib.test.evaluation.data.Sequence", "str", "os.path.join", "lib.test.utils.load_text.load_text.reshape", "os.listdir", "frame.endswith", "int"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_name", ")", ":", "\n", "        ", "anno_path", "=", "'{}/{}/groundtruth.txt'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_name", ")", "\n", "\n", "ground_truth_rect", "=", "load_text", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "frames_path", "=", "'{}/{}'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_name", ")", "\n", "frame_list", "=", "[", "frame", "for", "frame", "in", "os", ".", "listdir", "(", "frames_path", ")", "if", "frame", ".", "endswith", "(", "\".jpg\"", ")", "]", "\n", "frame_list", ".", "sort", "(", "key", "=", "lambda", "f", ":", "int", "(", "f", "[", ":", "-", "4", "]", ")", ")", "\n", "frames_list", "=", "[", "os", ".", "path", ".", "join", "(", "frames_path", ",", "frame", ")", "for", "frame", "in", "frame_list", "]", "\n", "\n", "return", "Sequence", "(", "sequence_name", ",", "frames_list", ",", "'got10k'", ",", "ground_truth_rect", ".", "reshape", "(", "-", "1", ",", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.got10kdataset.GOT10KDataset.__len__": [[44, 46], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.got10kdataset.GOT10KDataset._get_sequence_list": [[47, 57], ["open", "f.read().splitlines", "open", "f.read().splitlines", "f.read", "f.read", "int"], "methods", ["None"], ["", "def", "_get_sequence_list", "(", "self", ",", "split", ")", ":", "\n", "        ", "with", "open", "(", "'{}/list.txt'", ".", "format", "(", "self", ".", "base_path", ")", ")", "as", "f", ":", "\n", "            ", "sequence_list", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "if", "split", "==", "'ltrval'", ":", "\n", "            ", "with", "open", "(", "'{}/got10k_val_split.txt'", ".", "format", "(", "self", ".", "env_settings", ".", "dataspec_path", ")", ")", "as", "f", ":", "\n", "                ", "seq_ids", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "sequence_list", "=", "[", "sequence_list", "[", "int", "(", "x", ")", "]", "for", "x", "in", "seq_ids", "]", "\n", "", "return", "sequence_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset.__init__": [[18, 23], ["lib.test.evaluation.data.BaseDataset.__init__", "lasotdataset.LaSOTDataset._get_sequence_list", "lasotdataset.LaSOTDataset.clean_seq_list"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_sequence_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset.clean_seq_list"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "lasot_path", "\n", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", ")", "\n", "self", ".", "clean_list", "=", "self", ".", "clean_seq_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset.clean_seq_list": [[24, 30], ["range", "len", "lasotdataset.LaSOTDataset.sequence_list[].split", "clean_lst.append"], "methods", ["None"], ["", "def", "clean_seq_list", "(", "self", ")", ":", "\n", "        ", "clean_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sequence_list", ")", ")", ":", "\n", "            ", "cls", ",", "_", "=", "self", ".", "sequence_list", "[", "i", "]", ".", "split", "(", "'-'", ")", "\n", "clean_lst", ".", "append", "(", "cls", ")", "\n", "", "return", "clean_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset.get_sequence_list": [[31, 33], ["lib.test.evaluation.data.SequenceList", "lasotdataset.LaSOTDataset._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset._construct_sequence": [[34, 57], ["lib.test.utils.load_text.load_text", "lib.test.utils.load_text.load_text", "lib.test.utils.load_text.load_text", "numpy.logical_and", "lib.test.evaluation.data.Sequence", "sequence_name.split", "str", "str", "str", "lib.test.utils.load_text.load_text.reshape", "range"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.load_text.load_text"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_name", ")", ":", "\n", "        ", "class_name", "=", "sequence_name", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "anno_path", "=", "'{}/{}/{}/groundtruth.txt'", ".", "format", "(", "self", ".", "base_path", ",", "class_name", ",", "sequence_name", ")", "\n", "\n", "ground_truth_rect", "=", "load_text", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "occlusion_label_path", "=", "'{}/{}/{}/full_occlusion.txt'", ".", "format", "(", "self", ".", "base_path", ",", "class_name", ",", "sequence_name", ")", "\n", "\n", "# NOTE: pandas backed seems super super slow for loading occlusion/oov masks", "\n", "full_occlusion", "=", "load_text", "(", "str", "(", "occlusion_label_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ",", "backend", "=", "'numpy'", ")", "\n", "\n", "out_of_view_label_path", "=", "'{}/{}/{}/out_of_view.txt'", ".", "format", "(", "self", ".", "base_path", ",", "class_name", ",", "sequence_name", ")", "\n", "out_of_view", "=", "load_text", "(", "str", "(", "out_of_view_label_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ",", "backend", "=", "'numpy'", ")", "\n", "\n", "target_visible", "=", "np", ".", "logical_and", "(", "full_occlusion", "==", "0", ",", "out_of_view", "==", "0", ")", "\n", "\n", "frames_path", "=", "'{}/{}/{}/img'", ".", "format", "(", "self", ".", "base_path", ",", "class_name", ",", "sequence_name", ")", "\n", "\n", "frames_list", "=", "[", "'{}/{:08d}.jpg'", ".", "format", "(", "frames_path", ",", "frame_number", ")", "for", "frame_number", "in", "range", "(", "1", ",", "ground_truth_rect", ".", "shape", "[", "0", "]", "+", "1", ")", "]", "\n", "\n", "target_class", "=", "class_name", "\n", "return", "Sequence", "(", "sequence_name", ",", "frames_list", ",", "'lasot'", ",", "ground_truth_rect", ".", "reshape", "(", "-", "1", ",", "4", ")", ",", "\n", "object_class", "=", "target_class", ",", "target_visible", "=", "target_visible", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset.__len__": [[58, 60], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset._get_sequence_list": [[61, 343], ["None"], "methods", ["None"], ["", "def", "_get_sequence_list", "(", "self", ")", ":", "\n", "        ", "sequence_list", "=", "[", "'airplane-1'", ",", "\n", "'airplane-9'", ",", "\n", "'airplane-13'", ",", "\n", "'airplane-15'", ",", "\n", "'basketball-1'", ",", "\n", "'basketball-6'", ",", "\n", "'basketball-7'", ",", "\n", "'basketball-11'", ",", "\n", "'bear-2'", ",", "\n", "'bear-4'", ",", "\n", "'bear-6'", ",", "\n", "'bear-17'", ",", "\n", "'bicycle-2'", ",", "\n", "'bicycle-7'", ",", "\n", "'bicycle-9'", ",", "\n", "'bicycle-18'", ",", "\n", "'bird-2'", ",", "\n", "'bird-3'", ",", "\n", "'bird-15'", ",", "\n", "'bird-17'", ",", "\n", "'boat-3'", ",", "\n", "'boat-4'", ",", "\n", "'boat-12'", ",", "\n", "'boat-17'", ",", "\n", "'book-3'", ",", "\n", "'book-10'", ",", "\n", "'book-11'", ",", "\n", "'book-19'", ",", "\n", "'bottle-1'", ",", "\n", "'bottle-12'", ",", "\n", "'bottle-14'", ",", "\n", "'bottle-18'", ",", "\n", "'bus-2'", ",", "\n", "'bus-5'", ",", "\n", "'bus-17'", ",", "\n", "'bus-19'", ",", "\n", "'car-2'", ",", "\n", "'car-6'", ",", "\n", "'car-9'", ",", "\n", "'car-17'", ",", "\n", "'cat-1'", ",", "\n", "'cat-3'", ",", "\n", "'cat-18'", ",", "\n", "'cat-20'", ",", "\n", "'cattle-2'", ",", "\n", "'cattle-7'", ",", "\n", "'cattle-12'", ",", "\n", "'cattle-13'", ",", "\n", "'spider-14'", ",", "\n", "'spider-16'", ",", "\n", "'spider-18'", ",", "\n", "'spider-20'", ",", "\n", "'coin-3'", ",", "\n", "'coin-6'", ",", "\n", "'coin-7'", ",", "\n", "'coin-18'", ",", "\n", "'crab-3'", ",", "\n", "'crab-6'", ",", "\n", "'crab-12'", ",", "\n", "'crab-18'", ",", "\n", "'surfboard-12'", ",", "\n", "'surfboard-4'", ",", "\n", "'surfboard-5'", ",", "\n", "'surfboard-8'", ",", "\n", "'cup-1'", ",", "\n", "'cup-4'", ",", "\n", "'cup-7'", ",", "\n", "'cup-17'", ",", "\n", "'deer-4'", ",", "\n", "'deer-8'", ",", "\n", "'deer-10'", ",", "\n", "'deer-14'", ",", "\n", "'dog-1'", ",", "\n", "'dog-7'", ",", "\n", "'dog-15'", ",", "\n", "'dog-19'", ",", "\n", "'guitar-3'", ",", "\n", "'guitar-8'", ",", "\n", "'guitar-10'", ",", "\n", "'guitar-16'", ",", "\n", "'person-1'", ",", "\n", "'person-5'", ",", "\n", "'person-10'", ",", "\n", "'person-12'", ",", "\n", "'pig-2'", ",", "\n", "'pig-10'", ",", "\n", "'pig-13'", ",", "\n", "'pig-18'", ",", "\n", "'rubicCube-1'", ",", "\n", "'rubicCube-6'", ",", "\n", "'rubicCube-14'", ",", "\n", "'rubicCube-19'", ",", "\n", "'swing-10'", ",", "\n", "'swing-14'", ",", "\n", "'swing-17'", ",", "\n", "'swing-20'", ",", "\n", "'drone-13'", ",", "\n", "'drone-15'", ",", "\n", "'drone-2'", ",", "\n", "'drone-7'", ",", "\n", "'pool-12'", ",", "\n", "'pool-15'", ",", "\n", "'pool-3'", ",", "\n", "'pool-7'", ",", "\n", "'rabbit-10'", ",", "\n", "'rabbit-13'", ",", "\n", "'rabbit-17'", ",", "\n", "'rabbit-19'", ",", "\n", "'racing-10'", ",", "\n", "'racing-15'", ",", "\n", "'racing-16'", ",", "\n", "'racing-20'", ",", "\n", "'robot-1'", ",", "\n", "'robot-19'", ",", "\n", "'robot-5'", ",", "\n", "'robot-8'", ",", "\n", "'sepia-13'", ",", "\n", "'sepia-16'", ",", "\n", "'sepia-6'", ",", "\n", "'sepia-8'", ",", "\n", "'sheep-3'", ",", "\n", "'sheep-5'", ",", "\n", "'sheep-7'", ",", "\n", "'sheep-9'", ",", "\n", "'skateboard-16'", ",", "\n", "'skateboard-19'", ",", "\n", "'skateboard-3'", ",", "\n", "'skateboard-8'", ",", "\n", "'tank-14'", ",", "\n", "'tank-16'", ",", "\n", "'tank-6'", ",", "\n", "'tank-9'", ",", "\n", "'tiger-12'", ",", "\n", "'tiger-18'", ",", "\n", "'tiger-4'", ",", "\n", "'tiger-6'", ",", "\n", "'train-1'", ",", "\n", "'train-11'", ",", "\n", "'train-20'", ",", "\n", "'train-7'", ",", "\n", "'truck-16'", ",", "\n", "'truck-3'", ",", "\n", "'truck-6'", ",", "\n", "'truck-7'", ",", "\n", "'turtle-16'", ",", "\n", "'turtle-5'", ",", "\n", "'turtle-8'", ",", "\n", "'turtle-9'", ",", "\n", "'umbrella-17'", ",", "\n", "'umbrella-19'", ",", "\n", "'umbrella-2'", ",", "\n", "'umbrella-9'", ",", "\n", "'yoyo-15'", ",", "\n", "'yoyo-17'", ",", "\n", "'yoyo-19'", ",", "\n", "'yoyo-7'", ",", "\n", "'zebra-10'", ",", "\n", "'zebra-14'", ",", "\n", "'zebra-16'", ",", "\n", "'zebra-17'", ",", "\n", "'elephant-1'", ",", "\n", "'elephant-12'", ",", "\n", "'elephant-16'", ",", "\n", "'elephant-18'", ",", "\n", "'goldfish-3'", ",", "\n", "'goldfish-7'", ",", "\n", "'goldfish-8'", ",", "\n", "'goldfish-10'", ",", "\n", "'hat-1'", ",", "\n", "'hat-2'", ",", "\n", "'hat-5'", ",", "\n", "'hat-18'", ",", "\n", "'kite-4'", ",", "\n", "'kite-6'", ",", "\n", "'kite-10'", ",", "\n", "'kite-15'", ",", "\n", "'motorcycle-1'", ",", "\n", "'motorcycle-3'", ",", "\n", "'motorcycle-9'", ",", "\n", "'motorcycle-18'", ",", "\n", "'mouse-1'", ",", "\n", "'mouse-8'", ",", "\n", "'mouse-9'", ",", "\n", "'mouse-17'", ",", "\n", "'flag-3'", ",", "\n", "'flag-9'", ",", "\n", "'flag-5'", ",", "\n", "'flag-2'", ",", "\n", "'frog-3'", ",", "\n", "'frog-4'", ",", "\n", "'frog-20'", ",", "\n", "'frog-9'", ",", "\n", "'gametarget-1'", ",", "\n", "'gametarget-2'", ",", "\n", "'gametarget-7'", ",", "\n", "'gametarget-13'", ",", "\n", "'hand-2'", ",", "\n", "'hand-3'", ",", "\n", "'hand-9'", ",", "\n", "'hand-16'", ",", "\n", "'helmet-5'", ",", "\n", "'helmet-11'", ",", "\n", "'helmet-19'", ",", "\n", "'helmet-13'", ",", "\n", "'licenseplate-6'", ",", "\n", "'licenseplate-12'", ",", "\n", "'licenseplate-13'", ",", "\n", "'licenseplate-15'", ",", "\n", "'electricfan-1'", ",", "\n", "'electricfan-10'", ",", "\n", "'electricfan-18'", ",", "\n", "'electricfan-20'", ",", "\n", "'chameleon-3'", ",", "\n", "'chameleon-6'", ",", "\n", "'chameleon-11'", ",", "\n", "'chameleon-20'", ",", "\n", "'crocodile-3'", ",", "\n", "'crocodile-4'", ",", "\n", "'crocodile-10'", ",", "\n", "'crocodile-14'", ",", "\n", "'gecko-1'", ",", "\n", "'gecko-5'", ",", "\n", "'gecko-16'", ",", "\n", "'gecko-19'", ",", "\n", "'fox-2'", ",", "\n", "'fox-3'", ",", "\n", "'fox-5'", ",", "\n", "'fox-20'", ",", "\n", "'giraffe-2'", ",", "\n", "'giraffe-10'", ",", "\n", "'giraffe-13'", ",", "\n", "'giraffe-15'", ",", "\n", "'gorilla-4'", ",", "\n", "'gorilla-6'", ",", "\n", "'gorilla-9'", ",", "\n", "'gorilla-13'", ",", "\n", "'hippo-1'", ",", "\n", "'hippo-7'", ",", "\n", "'hippo-9'", ",", "\n", "'hippo-20'", ",", "\n", "'horse-1'", ",", "\n", "'horse-4'", ",", "\n", "'horse-12'", ",", "\n", "'horse-15'", ",", "\n", "'kangaroo-2'", ",", "\n", "'kangaroo-5'", ",", "\n", "'kangaroo-11'", ",", "\n", "'kangaroo-14'", ",", "\n", "'leopard-1'", ",", "\n", "'leopard-7'", ",", "\n", "'leopard-16'", ",", "\n", "'leopard-20'", ",", "\n", "'lion-1'", ",", "\n", "'lion-5'", ",", "\n", "'lion-12'", ",", "\n", "'lion-20'", ",", "\n", "'lizard-1'", ",", "\n", "'lizard-3'", ",", "\n", "'lizard-6'", ",", "\n", "'lizard-13'", ",", "\n", "'microphone-2'", ",", "\n", "'microphone-6'", ",", "\n", "'microphone-14'", ",", "\n", "'microphone-16'", ",", "\n", "'monkey-3'", ",", "\n", "'monkey-4'", ",", "\n", "'monkey-9'", ",", "\n", "'monkey-17'", ",", "\n", "'shark-2'", ",", "\n", "'shark-3'", ",", "\n", "'shark-5'", ",", "\n", "'shark-6'", ",", "\n", "'squirrel-8'", ",", "\n", "'squirrel-11'", ",", "\n", "'squirrel-13'", ",", "\n", "'squirrel-19'", ",", "\n", "'volleyball-1'", ",", "\n", "'volleyball-13'", ",", "\n", "'volleyball-18'", ",", "\n", "'volleyball-19'", "]", "\n", "return", "sequence_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.environment.EnvSettings.__init__": [[6, 27], ["os.path.abspath", "os.path.join", "os.path.dirname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "test_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'..'", ")", ")", "\n", "\n", "self", ".", "results_path", "=", "'{}/tracking_results/'", ".", "format", "(", "test_path", ")", "\n", "self", ".", "segmentation_path", "=", "'{}/segmentation_results/'", ".", "format", "(", "test_path", ")", "\n", "self", ".", "network_path", "=", "'{}/networks/'", ".", "format", "(", "test_path", ")", "\n", "self", ".", "result_plot_path", "=", "'{}/result_plots/'", ".", "format", "(", "test_path", ")", "\n", "self", ".", "otb_path", "=", "''", "\n", "self", ".", "nfs_path", "=", "''", "\n", "self", ".", "uav_path", "=", "''", "\n", "self", ".", "tpl_path", "=", "''", "\n", "self", ".", "vot_path", "=", "''", "\n", "self", ".", "got10k_path", "=", "''", "\n", "self", ".", "lasot_path", "=", "''", "\n", "self", ".", "trackingnet_path", "=", "''", "\n", "self", ".", "davis_dir", "=", "''", "\n", "self", ".", "youtubevos_dir", "=", "''", "\n", "\n", "self", ".", "got_packed_results_path", "=", "''", "\n", "self", ".", "got_reports_path", "=", "''", "\n", "self", ".", "tn_packed_results_path", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.environment.EnvSettings_ITP.__init__": [[56, 79], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "workspace_dir", ",", "data_dir", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "prj_dir", "=", "workspace_dir", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "self", ".", "results_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test/tracking_results'", ")", "\n", "self", ".", "segmentation_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test/segmentation_results'", ")", "\n", "self", ".", "network_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test/networks'", ")", "\n", "self", ".", "result_plot_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test/result_plots'", ")", "\n", "self", ".", "otb_path", "=", "''", "\n", "self", ".", "nfs_path", "=", "''", "\n", "self", ".", "uav_path", "=", "''", "\n", "self", ".", "tpl_path", "=", "''", "\n", "self", ".", "vot_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'VOT2019'", ")", "\n", "self", ".", "got10k_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'got10k'", ")", "\n", "self", ".", "got10k_lmdb_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'got10k_lmdb'", ")", "\n", "self", ".", "lasot_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'lasot'", ")", "\n", "self", ".", "lasot_lmdb_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'lasot_lmdb'", ")", "\n", "self", ".", "trackingnet_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'trackingNet'", ")", "\n", "self", ".", "davis_dir", "=", "''", "\n", "self", ".", "youtubevos_dir", "=", "''", "\n", "\n", "self", ".", "got_packed_results_path", "=", "''", "\n", "self", ".", "got_reports_path", "=", "''", "\n", "self", ".", "tn_packed_results_path", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.environment.create_default_local_file": [[29, 53], ["os.path.join", "os.path.dirname", "open", "environment.EnvSettings", "f.write", "f.write", "f.write", "f.write", "dir", "f.write", "getattr", "attr.startswith", "callable", "f.write", "f.write"], "function", ["None"], ["", "", "def", "create_default_local_file", "(", ")", ":", "\n", "    ", "comment", "=", "{", "'results_path'", ":", "'Where to store tracking results'", ",", "\n", "'network_path'", ":", "'Where tracking networks are stored.'", "}", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'local.py'", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "settings", "=", "EnvSettings", "(", ")", "\n", "\n", "f", ".", "write", "(", "'from test.evaluation.environment import EnvSettings\\n\\n'", ")", "\n", "f", ".", "write", "(", "'def local_env_settings():\\n'", ")", "\n", "f", ".", "write", "(", "'    settings = EnvSettings()\\n\\n'", ")", "\n", "f", ".", "write", "(", "'    # Set your local paths here.\\n\\n'", ")", "\n", "\n", "for", "attr", "in", "dir", "(", "settings", ")", ":", "\n", "            ", "comment_str", "=", "None", "\n", "if", "attr", "in", "comment", ":", "\n", "                ", "comment_str", "=", "comment", "[", "attr", "]", "\n", "", "attr_val", "=", "getattr", "(", "settings", ",", "attr", ")", "\n", "if", "not", "attr", ".", "startswith", "(", "'__'", ")", "and", "not", "callable", "(", "attr_val", ")", ":", "\n", "                ", "if", "comment_str", "is", "None", ":", "\n", "                    ", "f", ".", "write", "(", "'    settings.{} = \\'{}\\'\\n'", ".", "format", "(", "attr", ",", "attr_val", ")", ")", "\n", "", "else", ":", "\n", "                    ", "f", ".", "write", "(", "'    settings.{} = \\'{}\\'    # {}\\n'", ".", "format", "(", "attr", ",", "attr_val", ",", "comment_str", ")", ")", "\n", "", "", "", "f", ".", "write", "(", "'\\n    return settings\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.environment.create_default_local_file_ITP_test": [[81, 105], ["os.path.join", "os.path.dirname", "open", "environment.EnvSettings_ITP", "f.write", "f.write", "f.write", "f.write", "dir", "f.write", "getattr", "attr.startswith", "callable", "f.write", "f.write"], "function", ["None"], ["", "", "def", "create_default_local_file_ITP_test", "(", "workspace_dir", ",", "data_dir", ",", "save_dir", ")", ":", "\n", "    ", "comment", "=", "{", "'results_path'", ":", "'Where to store tracking results'", ",", "\n", "'network_path'", ":", "'Where tracking networks are stored.'", "}", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'local.py'", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "settings", "=", "EnvSettings_ITP", "(", "workspace_dir", ",", "data_dir", ",", "save_dir", ")", "\n", "\n", "f", ".", "write", "(", "'from lib.test.evaluation.environment import EnvSettings\\n\\n'", ")", "\n", "f", ".", "write", "(", "'def local_env_settings():\\n'", ")", "\n", "f", ".", "write", "(", "'    settings = EnvSettings()\\n\\n'", ")", "\n", "f", ".", "write", "(", "'    # Set your local paths here.\\n\\n'", ")", "\n", "\n", "for", "attr", "in", "dir", "(", "settings", ")", ":", "\n", "            ", "comment_str", "=", "None", "\n", "if", "attr", "in", "comment", ":", "\n", "                ", "comment_str", "=", "comment", "[", "attr", "]", "\n", "", "attr_val", "=", "getattr", "(", "settings", ",", "attr", ")", "\n", "if", "not", "attr", ".", "startswith", "(", "'__'", ")", "and", "not", "callable", "(", "attr_val", ")", ":", "\n", "                ", "if", "comment_str", "is", "None", ":", "\n", "                    ", "f", ".", "write", "(", "'    settings.{} = \\'{}\\'\\n'", ".", "format", "(", "attr", ",", "attr_val", ")", ")", "\n", "", "else", ":", "\n", "                    ", "f", ".", "write", "(", "'    settings.{} = \\'{}\\'    # {}\\n'", ".", "format", "(", "attr", ",", "attr_val", ",", "comment_str", ")", ")", "\n", "", "", "", "f", ".", "write", "(", "'\\n    return settings\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.environment.env_settings": [[107, 119], ["importlib.import_module", "importlib.import_module.local_env_settings", "os.path.join", "environment.create_default_local_file", "RuntimeError", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.local.local_env_settings", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.create_default_local_file"], ["", "", "def", "env_settings", "(", ")", ":", "\n", "    ", "env_module_name", "=", "'lib.test.evaluation.local'", "\n", "try", ":", "\n", "        ", "env_module", "=", "importlib", ".", "import_module", "(", "env_module_name", ")", "\n", "return", "env_module", ".", "local_env_settings", "(", ")", "\n", "", "except", ":", "\n", "        ", "env_file", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'local.py'", ")", "\n", "\n", "# Create a default file", "\n", "create_default_local_file", "(", ")", "\n", "raise", "RuntimeError", "(", "'YOU HAVE NOT SETUP YOUR local.py!!!\\n Go to \"{}\" and set all the paths you need. '", "\n", "'Then try to run again.'", ".", "format", "(", "env_file", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.local.local_env_settings": [[3, 33], ["lib.test.evaluation.environment.EnvSettings"], "function", ["None"], ["def", "local_env_settings", "(", ")", ":", "\n", "    ", "settings", "=", "EnvSettings", "(", ")", "\n", "\n", "# Set your local paths here.", "\n", "workspace_root", "=", "''", "\n", "data_root", "=", "''", "\n", "\n", "settings", ".", "davis_dir", "=", "''", "\n", "settings", ".", "got10k_lmdb_path", "=", "data_root", "+", "'got10k_lmdb'", "\n", "settings", ".", "got10k_path", "=", "data_root", "+", "'got-10k'", "\n", "settings", ".", "got_packed_results_path", "=", "''", "\n", "settings", ".", "got_reports_path", "=", "''", "\n", "settings", ".", "lasot_lmdb_path", "=", "data_root", "+", "'lasot_lmdb'", "\n", "settings", ".", "lasot_path", "=", "data_root", "+", "'LaSOT'", "\n", "settings", ".", "network_path", "=", "workspace_root", "+", "'output/test/networks'", "# Where tracking networks are stored.", "\n", "settings", ".", "nfs_path", "=", "''", "\n", "settings", ".", "otb_path", "=", "data_root", "+", "'OTB'", "\n", "settings", ".", "prj_dir", "=", "workspace_root", "\n", "settings", ".", "result_plot_path", "=", "workspace_root", "+", "'output/test/result_plots'", "\n", "settings", ".", "results_path", "=", "workspace_root", "+", "'output/test/tracking_results'", "# Where to store tracking results", "\n", "settings", ".", "save_dir", "=", "workspace_root", "+", "'output'", "\n", "settings", ".", "segmentation_path", "=", "workspace_root", "+", "'output/test/segmentation_results'", "\n", "settings", ".", "tn_packed_results_path", "=", "''", "\n", "settings", ".", "tpl_path", "=", "''", "\n", "settings", ".", "trackingnet_path", "=", "data_root", "+", "'TrackingNet'", "\n", "settings", ".", "uav_path", "=", "data_root", "+", "'UAV123'", "\n", "settings", ".", "vot_path", "=", "data_root", "+", "'VOT/VOT2018'", "\n", "settings", ".", "youtubevos_dir", "=", "''", "\n", "\n", "return", "settings", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.datasets.load_dataset": [[23, 33], ["name.lower.lower", "dataset_dict.get", "importlib.import_module", "dataset.get_sequence_list", "ValueError", "getattr"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.lasotdataset.LaSOTDataset.get_sequence_list"], ["def", "load_dataset", "(", "name", ":", "str", ")", ":", "\n", "    ", "\"\"\" Import and load a single dataset.\"\"\"", "\n", "name", "=", "name", ".", "lower", "(", ")", "\n", "dset_info", "=", "dataset_dict", ".", "get", "(", "name", ")", "\n", "if", "dset_info", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown dataset \\'%s\\''", "%", "name", ")", "\n", "\n", "", "m", "=", "importlib", ".", "import_module", "(", "dset_info", ".", "module", ")", "\n", "dataset", "=", "getattr", "(", "m", ",", "dset_info", ".", "class_name", ")", "(", "**", "dset_info", ".", "kwargs", ")", "# Call the constructor", "\n", "return", "dataset", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.datasets.get_dataset": [[35, 41], ["lib.test.evaluation.data.SequenceList", "lib.test.evaluation.data.SequenceList.extend", "datasets.load_dataset"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.datasets.load_dataset"], ["", "def", "get_dataset", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\" Get a single or set of datasets.\"\"\"", "\n", "dset", "=", "SequenceList", "(", ")", "\n", "for", "name", "in", "args", ":", "\n", "        ", "dset", ".", "extend", "(", "load_dataset", "(", "name", ")", ")", "\n", "", "return", "dset", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt_cls.config._edict2dict": [[101, 111], ["isinstance", "isinstance", "src_edict.items", "isinstance", "config._edict2dict"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.config._edict2dict"], ["def", "_edict2dict", "(", "dest_dict", ",", "src_edict", ")", ":", "\n", "    ", "if", "isinstance", "(", "dest_dict", ",", "dict", ")", "and", "isinstance", "(", "src_edict", ",", "dict", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "src_edict", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "v", ",", "edict", ")", ":", "\n", "                ", "dest_dict", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "dest_dict", "[", "k", "]", "=", "{", "}", "\n", "_edict2dict", "(", "dest_dict", "[", "k", "]", ",", "v", ")", "\n", "", "", "", "else", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt_cls.config.gen_config": [[113, 118], ["config._edict2dict", "open", "yaml.dump"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.config._edict2dict"], ["", "", "def", "gen_config", "(", "config_file", ")", ":", "\n", "    ", "cfg_dict", "=", "{", "}", "\n", "_edict2dict", "(", "cfg_dict", ",", "cfg", ")", "\n", "with", "open", "(", "config_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "dump", "(", "cfg_dict", ",", "f", ",", "default_flow_style", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt_cls.config._update_config": [[120, 132], ["isinstance", "isinstance", "exp_cfg.items", "ValueError", "isinstance", "config._update_config"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.config._update_config"], ["", "", "def", "_update_config", "(", "base_cfg", ",", "exp_cfg", ")", ":", "\n", "    ", "if", "isinstance", "(", "base_cfg", ",", "dict", ")", "and", "isinstance", "(", "exp_cfg", ",", "edict", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "exp_cfg", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "base_cfg", ":", "\n", "                ", "if", "not", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                    ", "base_cfg", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                    ", "_update_config", "(", "base_cfg", "[", "k", "]", ",", "v", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"{} not exist in config.py\"", ".", "format", "(", "k", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt_cls.config.update_config_from_file": [[134, 139], ["open", "easydict.EasyDict", "config._update_config", "yaml.safe_load"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.config._update_config"], ["", "", "def", "update_config_from_file", "(", "filename", ")", ":", "\n", "    ", "exp_config", "=", "None", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "exp_config", "=", "edict", "(", "yaml", ".", "safe_load", "(", "f", ")", ")", "\n", "_update_config", "(", "cfg", ",", "exp_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.config._edict2dict": [[98, 108], ["isinstance", "isinstance", "src_edict.items", "isinstance", "config._edict2dict"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.config._edict2dict"], ["cfg", ".", "TEST", ".", "UPDATE_INTERVALS", ".", "VOT20", "=", "[", "200", "]", "\n", "cfg", ".", "TEST", ".", "UPDATE_INTERVALS", ".", "VOT20LT", "=", "[", "200", "]", "\n", "\n", "def", "_edict2dict", "(", "dest_dict", ",", "src_edict", ")", ":", "\n", "    ", "if", "isinstance", "(", "dest_dict", ",", "dict", ")", "and", "isinstance", "(", "src_edict", ",", "dict", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "src_edict", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "v", ",", "edict", ")", ":", "\n", "                ", "dest_dict", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "dest_dict", "[", "k", "]", "=", "{", "}", "\n", "_edict2dict", "(", "dest_dict", "[", "k", "]", ",", "v", ")", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.config.gen_config": [[110, 115], ["config._edict2dict", "open", "yaml.dump"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.config._edict2dict"], ["        ", "return", "\n", "\n", "\n", "", "", "def", "gen_config", "(", "config_file", ")", ":", "\n", "    ", "cfg_dict", "=", "{", "}", "\n", "_edict2dict", "(", "cfg_dict", ",", "cfg", ")", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.config._update_config": [[117, 129], ["isinstance", "isinstance", "exp_cfg.items", "ValueError", "isinstance", "config._update_config"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.config._update_config"], ["        ", "yaml", ".", "dump", "(", "cfg_dict", ",", "f", ",", "default_flow_style", "=", "False", ")", "\n", "\n", "\n", "", "", "def", "_update_config", "(", "base_cfg", ",", "exp_cfg", ")", ":", "\n", "    ", "if", "isinstance", "(", "base_cfg", ",", "dict", ")", "and", "isinstance", "(", "exp_cfg", ",", "edict", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "exp_cfg", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "base_cfg", ":", "\n", "                ", "if", "not", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                    ", "base_cfg", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                    ", "_update_config", "(", "base_cfg", "[", "k", "]", ",", "v", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"{} not exist in config.py\"", ".", "format", "(", "k", ")", ")", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.config.update_config_from_file": [[131, 136], ["open", "easydict.EasyDict", "config._update_config", "yaml.safe_load"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.config._update_config"], ["        ", "return", "\n", "\n", "\n", "", "", "def", "update_config_from_file", "(", "filename", ")", ":", "\n", "    ", "exp_config", "=", "None", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.__init__": [[11, 35], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Conv2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["update_config_from_file", "(", "yaml_file", ")", "\n", "params", ".", "cfg", "=", "cfg", "\n", "print", "(", "\"test config: \"", ",", "cfg", ")", "\n", "\n", "# template and search region", "\n", "params", ".", "template_factor", "=", "cfg", ".", "TEST", ".", "TEMPLATE_FACTOR", "\n", "params", ".", "template_size", "=", "cfg", ".", "TEST", ".", "TEMPLATE_SIZE", "\n", "params", ".", "search_factor", "=", "cfg", ".", "TEST", ".", "SEARCH_FACTOR", "\n", "params", ".", "search_size", "=", "cfg", ".", "TEST", ".", "SEARCH_SIZE", "\n", "\n", "# Network checkpoint path", "\n", "params", ".", "checkpoint_cls", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"checkpoints/CSWinTT.pth\"", ")", "\n", "\n", "# whether to save boxes from all queries", "\n", "params", ".", "save_all_boxes", "=", "False", "\n", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.forward": [[36, 43], ["cswintt.CSWinTT.forward_backbone", "cswintt.CSWinTT.forward_transformer"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.forward_backbone", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.forward_transformer"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.forward_backbone": [[44, 54], ["isinstance", "cswintt.CSWinTT.backbone", "cswintt.CSWinTT.adjust"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.adjust"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.forward_transformer": [[55, 63], ["cswintt.CSWinTT.transformer", "cswintt.CSWinTT.forward_head", "ValueError"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.forward_head"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.forward_head": [[64, 80], ["out_dict.update", "cswintt.CSWinTT.forward_box_head", "out_dict.update", "cswintt.CSWinTT.cls_head"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.forward_box_head", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.forward_box_head": [[81, 106], ["hs.permute.permute.permute", "merge_feat.permute.permute.permute", "torch.matmul", "opt.size", "opt.view", "lib.utils.box_ops.box_xyxy_to_cxcywh", "cswintt.CSWinTT.view", "cswintt.CSWinTT.box_head", "cswintt.CSWinTT.box_head().sigmoid", "cswintt.CSWinTT._set_aux_loss", "cswintt.CSWinTT.box_head"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.box_xyxy_to_cxcywh", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT._set_aux_loss"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT.adjust": [[107, 119], ["output_back[].decompose", "cswintt.CSWinTT.bottleneck", "feat.permute.permute.permute", "pos_embed[].permute", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.NestedTensor.decompose"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.CSWinTT._set_aux_loss": [[120, 127], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.build_cswintt": [[128, 144], ["lib.models.cswintt.build_backbone", "lib.models.cswintt.build_transformer_cs", "lib.models.cswintt.build_box_head", "lib.models.cswintt.MLP", "cswintt.CSWinTT"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.backbone.build_backbone", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.build_transformer_cs", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.build_box_head"], []], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_post.Transformer_post.__init__": [[10, 16], ["torch.nn.Module.__init__", "transformer_post.TransformerDecoderLayer", "transformer_post._get_clones", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_post._get_clones"], ["\t", "def", "__init__", "(", "self", ",", "d_model", ",", "num_layers", ",", "nhead", "=", "8", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "decoder_layer", "=", "TransformerDecoderLayer", "(", "d_model", ",", "nhead", ",", "dim_feedforward", ",", "dropout", ")", "\n", "self", ".", "layers", "=", "_get_clones", "(", "decoder_layer", ",", "num_layers", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_post.Transformer_post.forward": [[17, 37], ["transformer_post.Transformer_post.unsqueeze", "layer", "transformer_post.Transformer_post.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "memory", ",", "\n", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "query_pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "\t\t", "output", "=", "tgt", "\n", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "\t\t\t", "output", "=", "layer", "(", "output", ",", "memory", ",", "tgt_mask", "=", "tgt_mask", ",", "\n", "memory_mask", "=", "memory_mask", ",", "\n", "tgt_key_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ",", "\n", "pos", "=", "pos", ",", "query_pos", "=", "query_pos", ")", "\n", "\n", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "\t\t\t", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "\n", "", "return", "output", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_post.TransformerDecoderLayer.__init__": [[40, 60], ["torch.nn.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "float"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["\t", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "divide_norm", "=", "False", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "divide_norm", "=", "divide_norm", "\n", "self", ".", "scale_factor", "=", "float", "(", "d_model", "//", "nhead", ")", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_post.TransformerDecoderLayer.with_pos_embed": [[61, 63], ["None"], "methods", ["None"], ["", "def", "with_pos_embed", "(", "self", ",", "tensor", ",", "pos", ":", "Optional", "[", "Tensor", "]", ")", ":", "\n", "\t\t", "return", "tensor", "if", "pos", "is", "None", "else", "tensor", "+", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_post.TransformerDecoderLayer.forward": [[64, 95], ["transformer_post.TransformerDecoderLayer.with_pos_embed", "transformer_post.TransformerDecoderLayer.norm1", "transformer_post.TransformerDecoderLayer.norm2", "transformer_post.TransformerDecoderLayer.linear2", "transformer_post.TransformerDecoderLayer.norm3", "transformer_post.TransformerDecoderLayer.self_attn", "transformer_post.TransformerDecoderLayer.dropout1", "transformer_post.TransformerDecoderLayer.with_pos_embed", "transformer_post.TransformerDecoderLayer.with_pos_embed", "transformer_post.TransformerDecoderLayer.multihead_attn", "transformer_post.TransformerDecoderLayer.dropout2", "transformer_post.TransformerDecoderLayer.dropout", "transformer_post.TransformerDecoderLayer.dropout3", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "transformer_post.TransformerDecoderLayer.activation", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "transformer_post.TransformerDecoderLayer.linear1"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.TransformerLayer.with_pos_embed", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.TransformerLayer.with_pos_embed", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.TransformerLayer.with_pos_embed"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "memory", ",", "\n", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "query_pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "# self-attention", "\n", "\t\t", "q", "=", "k", "=", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", "# Add object query to the query and key", "\n", "if", "self", ".", "divide_norm", ":", "\n", "\t\t\t", "q", "=", "q", "/", "torch", ".", "norm", "(", "q", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "*", "self", ".", "scale_factor", "\n", "k", "=", "k", "/", "torch", ".", "norm", "(", "k", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "", "tgt2", "=", "self", ".", "self_attn", "(", "q", ",", "k", ",", "value", "=", "tgt", ",", "attn_mask", "=", "tgt_mask", ",", "\n", "key_padding_mask", "=", "tgt_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "# mutual attention", "\n", "queries", ",", "keys", "=", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", ",", "self", ".", "with_pos_embed", "(", "memory", ",", "pos", ")", "\n", "if", "self", ".", "divide_norm", ":", "\n", "\t\t\t", "queries", "=", "queries", "/", "torch", ".", "norm", "(", "queries", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "*", "self", ".", "scale_factor", "\n", "keys", "=", "keys", "/", "torch", ".", "norm", "(", "keys", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "", "tgt2", "=", "self", ".", "multihead_attn", "(", "query", "=", "queries", ",", "\n", "key", "=", "keys", ",", "\n", "value", "=", "memory", ",", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout3", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm3", "(", "tgt", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_post._get_clones": [[97, 99], ["torch.nn.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "", "def", "_get_clones", "(", "module", ",", "N", ")", ":", "\n", "\t", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "i", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_post.build_transformer_post": [[101, 103], ["transformer_post.Transformer_post"], "function", ["None"], ["", "def", "build_transformer_post", "(", ")", ":", "\n", "\t", "return", "Transformer_post", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.ResNet.__init__": [[29, 85], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet.modules", "len", "ValueError", "resnet.ResNet._make_layer", "isinstance", "resnet.ResNet.modules", "resnet.ResNet._make_layer", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "resnet.ResNet._make_layer", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "last_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "last_layer", "in", "[", "'layer1'", ",", "'layer2'", ",", "'layer3'", ",", "'layer4'", ",", "'fc'", "]", "\n", "self", ".", "last_layer", "=", "last_layer", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "if", "self", ".", "last_layer", "!=", "'layer1'", ":", "\n", "            ", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "if", "self", ".", "last_layer", "!=", "'layer2'", ":", "\n", "                ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "if", "self", ".", "last_layer", "!=", "'layer3'", ":", "\n", "                    ", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "if", "self", ".", "last_layer", "!=", "'layer4'", ":", "\n", "                        ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "", "", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.ResNet._make_layer": [[86, 109], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torchvision.models.resnet.conv1x1", "norm_layer", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.ResNet._forward_impl": [[110, 130], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "if", "self", ".", "last_layer", "!=", "'layer1'", ":", "\n", "            ", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "if", "self", ".", "last_layer", "!=", "'layer2'", ":", "\n", "                ", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "if", "self", ".", "last_layer", "!=", "'layer3'", ":", "\n", "                    ", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "self", ".", "last_layer", "!=", "'layer4'", ":", "\n", "                        ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "", "", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.ResNet.forward": [[131, 133], ["resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet._resnet": [[135, 153], ["resnet.ResNet", "torchvision.models.utils.load_state_dict_from_url", "ResNet.load_state_dict", "ResNet.load_state_dict", "torchvision.models.resnet.BasicBlock", "torchvision.models.resnet.BasicBlock", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "try", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "except", ":", "\n", "# model_keys = model.state_dict().keys()", "\n", "# checkpoint_keys = state_dict.keys()", "\n", "# for key in model_keys:", "\n", "#     if key not in checkpoint_keys:", "\n", "#         print(\"key %s is not found in the checkpoint.\" % key)", "\n", "# for key in checkpoint_keys:", "\n", "#     if key not in model_keys:", "\n", "#         print(\"the checkpoint contains additional key %s\" % key)", "\n", "            ", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.resnet18": [[155, 165], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.resnet34": [[167, 177], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.resnet50": [[179, 189], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.resnet101": [[191, 201], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.resnet152": [[203, 213], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.resnext50_32x4d": [[215, 227], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.resnext101_32x8d": [[229, 241], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.wide_resnet50_2": [[243, 259], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet.wide_resnet101_2": [[261, 277], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.Transformer_CS.__init__": [[24, 59], ["torch.nn.Module.__init__", "range", "torch.nn.ModuleList", "range", "torch.nn.ModuleList", "torch.nn.LayerNorm", "transformer_cs.Transformer_CS._reset_parameters", "transformer_cs.Transformer_CS.register_parameter", "timm.models.layers.trunc_normal_", "blocks.append", "decoder_blocks.append", "torch.nn.Parameter", "transformer_cs.Transformer_CS.__getattr__", "transformer_cs.TransformerLayer", "lib.models.cswintt.transformer_post.TransformerDecoderLayer", "str", "torch.zeros().cuda().requires_grad_", "str", "torch.zeros().cuda", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.Transformer_CS._reset_parameters", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.multigpu.MultiGPU.__getattr__"], ["\t", "def", "__init__", "(", "self", ",", "search_size", ",", "template_size", ",", "d_model", "=", "256", ",", "nhead", "=", "8", ",", "d_feedforward", "=", "2048", ",", "stack_num", "=", "6", ",", "dropout", "=", "0.1", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "h1", ",", "self", ".", "w1", "=", "search_size", "\n", "self", ".", "h2", ",", "self", ".", "w2", "=", "template_size", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "nhead", "=", "nhead", "\n", "self", ".", "d_feedforward", "=", "d_feedforward", "\n", "\n", "self", ".", "L_all", "=", "self", ".", "h1", "*", "self", ".", "w1", "+", "2", "*", "self", ".", "h2", "*", "self", ".", "w2", "\n", "self", ".", "window_list", "=", "[", "1", ",", "2", ",", "4", "]", "\n", "for", "window_size", "in", "self", ".", "window_list", ":", "\n", "\t\t\t", "L", "=", "self", ".", "L_all", "//", "window_size", "//", "window_size", "\n", "self", ".", "register_parameter", "(", "\"rel_bias_table\"", "+", "str", "(", "window_size", ")", ",", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "-", "1", ")", "*", "(", "self", ".", "L_all", "//", "window_size", "+", "L", "//", "window_size", "-", "1", ")", ",", "\n", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", ".", "requires_grad_", "(", ")", ")", ")", "\n", "trunc_normal_", "(", "self", ".", "__getattr__", "(", "\"rel_bias_table\"", "+", "str", "(", "window_size", ")", ")", ",", "std", "=", ".02", ")", "\n", "\n", "", "blocks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "stack_num", ")", ":", "\n", "\t\t\t", "window_shift", "=", "False", "if", "i", "//", "2", "==", "0", "else", "True", "\n", "window_size", "=", "0", "\n", "blocks", ".", "append", "(", "\n", "TransformerLayer", "(", "self", ".", "d_model", ",", "self", ".", "nhead", ",", "search_size", ",", "template_size", ",", "window_size", ",", "window_shift", ",", "\n", "self", ".", "d_feedforward", ",", "dropout", ")", ")", "\n", "", "self", ".", "transformer", "=", "nn", ".", "ModuleList", "(", "blocks", ")", "\n", "\n", "decoder_blocks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "stack_num", ")", ":", "\n", "\t\t\t", "decoder_blocks", ".", "append", "(", "\n", "TransformerDecoderLayer", "(", "self", ".", "d_model", ",", "self", ".", "nhead", ",", "self", ".", "d_feedforward", ",", "dropout", ")", ")", "\n", "", "self", ".", "transformer_post", "=", "nn", ".", "ModuleList", "(", "decoder_blocks", ")", "\n", "self", ".", "post_norm", "=", "nn", ".", "LayerNorm", "(", "self", ".", "d_model", ")", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.Transformer_CS.get_relative_position_index": [[60, 77], ["torch.arange", "torch.arange().repeat", "torch.stack", "torch.stack", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "torch.meshgrid", "torch.arange", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "get_relative_position_index", "(", "self", ",", "window_size", ")", ":", "\n", "\t\t", "Num_win", "=", "self", ".", "L_all", "//", "window_size", "\n", "L", "=", "self", ".", "L_all", "//", "window_size", "//", "window_size", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "Num_win", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "window_size", ")", ".", "repeat", "(", "Num_win", "//", "window_size", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, W*W*Nw", "\n", "coords_flatten", "=", "torch", ".", "stack", "(", "[", "torch", ".", "flatten", "(", "coords", "[", "0", ",", ":", ",", ":", "window_size", "]", ")", ",", "\n", "torch", ".", "flatten", "(", "coords", "[", "1", ",", ":", "window_size", ",", ":", "]", ")", "]", ")", "# 2, W*W*Nw", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, W*W*Nw, W*W*Nw", "\n", "relative_coords", "[", "0", "]", "+=", "Num_win", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", "1", "]", "+=", "window_size", "-", "1", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "window_size", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "relative_position_index", "=", "relative_position_index", "[", ":", "L", "]", "\n", "return", "relative_position_index", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.Transformer_CS.get_relative_position": [[78, 89], ["transformer_cs.Transformer_CS.__getattr__", "transformer_cs.Transformer_CS.get_relative_position_index", "rel_bias_table[].view", "relative_position_bias.contiguous.contiguous.contiguous", "relative_position.update", "str", "transformer_cs.Transformer_CS.view"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.multigpu.MultiGPU.__getattr__", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.Transformer_CS.get_relative_position_index", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update"], ["", "def", "get_relative_position", "(", "self", ")", ":", "\n", "\t\t", "relative_position", "=", "{", "}", "\n", "for", "window_size", "in", "self", ".", "window_list", ":", "\n", "\t\t\t", "rel_bias_table", "=", "self", ".", "__getattr__", "(", "'rel_bias_table'", "+", "str", "(", "window_size", ")", ")", "\n", "# rel_bias_table = self.rel_bias_table.get(window_size)", "\n", "rel_index", "=", "self", ".", "get_relative_position_index", "(", "window_size", ")", "\n", "relative_position_bias", "=", "rel_bias_table", "[", "rel_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "self", ".", "L_all", "//", "window_size", "//", "window_size", ",", "\n", "self", ".", "L_all", ")", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "contiguous", "(", ")", "\n", "relative_position", ".", "update", "(", "{", "window_size", ":", "relative_position_bias", "}", ")", "\n", "", "return", "relative_position", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.Transformer_CS._reset_parameters": [[90, 94], ["transformer_cs.Transformer_CS.parameters", "p.dim", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.parameter.cswintt.parameters"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "\t\t", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "\t\t\t\t", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.Transformer_CS.forward": [[95, 141], ["search[].size", "torch.cat", "torch.cat", "torch.cat", "transformer_cs.Transformer_CS.get_relative_position", "query_embed.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.zeros_like", "transformer_cs.Transformer_CS.post_norm", "layer", "layer", "template_1[].flatten", "template_2[].flatten", "search[].flatten", "template_1[].flatten", "template_2[].flatten", "search[].flatten", "template_1[].flatten", "template_2[].flatten", "search[].flatten", "query_embed.unsqueeze().repeat.unsqueeze().repeat.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.Transformer_CS.get_relative_position"], ["", "", "", "def", "forward", "(", "self", ",", "template_1", ",", "template_2", ",", "search", ",", "query_embed", ")", ":", "\n", "# def forward(self, merge_feat, merge_mask, query_embed, merge_pos, mode=\"all\", return_encoder_output=False):", "\n", "\t\t", "\"\"\"\n\t\t:param search_feat: (h1, w1, b, c)\n\t\t:param template_feat: (h2, w2, b, c)\n\t\t:param search_mask: (b, h1, w1)\n\t\t:param template_mask: (b, h2, w2)\n\t\t:param search_pos: (h1, w1, b, c)\n\t\t:param template_pos: (h2, w2, b,c)\n\t\t:return: (h2, w2, b, c), (h1, w1, b, c)\n\t\t\"\"\"", "\n", "\n", "# -------------------merge---------------------", "\n", "b", "=", "search", "[", "\"feat\"", "]", ".", "size", "(", "2", ")", "\n", "# (L_all, b , c) , L_all = h2*w2 + h2*w2 + h1*w1", "\n", "merge_feat", "=", "torch", ".", "cat", "(", "\n", "[", "template_1", "[", "\"feat\"", "]", ".", "flatten", "(", "0", ",", "1", ")", ",", "template_2", "[", "\"feat\"", "]", ".", "flatten", "(", "0", ",", "1", ")", ",", "search", "[", "\"feat\"", "]", ".", "flatten", "(", "0", ",", "1", ")", "]", ",", "\n", "dim", "=", "0", ")", "\n", "\n", "# (b, L_all)", "\n", "merge_mask", "=", "torch", ".", "cat", "(", "\n", "[", "template_1", "[", "\"mask\"", "]", ".", "flatten", "(", "1", ",", "2", ")", ",", "template_2", "[", "\"mask\"", "]", ".", "flatten", "(", "1", ",", "2", ")", ",", "search", "[", "\"mask\"", "]", ".", "flatten", "(", "1", ",", "2", ")", "]", ",", "\n", "dim", "=", "1", ")", "\n", "\n", "# (L_all, b, c)", "\n", "merge_pos", "=", "torch", ".", "cat", "(", "\n", "[", "template_1", "[", "\"pos\"", "]", ".", "flatten", "(", "0", ",", "1", ")", ",", "template_2", "[", "\"pos\"", "]", ".", "flatten", "(", "0", ",", "1", ")", ",", "search", "[", "\"pos\"", "]", ".", "flatten", "(", "0", ",", "1", ")", "]", ",", "\n", "dim", "=", "0", ")", "\n", "# -------------------transformer---------------------", "\n", "first_L", "=", "self", ".", "h2", "*", "self", ".", "w2", "\n", "\n", "rel_pos", "=", "self", ".", "get_relative_position", "(", ")", "\n", "for", "layer", "in", "self", ".", "transformer", ":", "\n", "\t\t\t", "merge_feat", "=", "layer", "(", "merge_feat", "=", "merge_feat", ",", "merge_mask", "=", "merge_mask", ",", "rel_pos", "=", "rel_pos", ",", "merge_pos", "=", "merge_pos", ")", "\n", "\n", "# merge_feat: (L_all, b, c)", "\n", "", "search_feat", "=", "merge_feat", "[", "first_L", "*", "2", ":", "]", "\n", "# -------------------transformer_post---------------------", "\n", "query_embed", "=", "query_embed", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "b", ",", "1", ")", "# (N,C) --> (N,1,C) --> (N,B,C)", "\n", "tgt", "=", "torch", ".", "zeros_like", "(", "query_embed", ")", "\n", "output", "=", "tgt", "\n", "for", "layer", "in", "self", ".", "transformer_post", ":", "\n", "\t\t\t", "output", "=", "layer", "(", "output", ",", "merge_feat", ",", "memory_key_padding_mask", "=", "merge_mask", ",", "pos", "=", "None", ",", "query_pos", "=", "query_embed", ")", "\n", "", "hs", "=", "self", ".", "post_norm", "(", "output", ")", "\n", "\n", "return", "search_feat", ",", "hs", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.TransformerLayer.__init__": [[144, 181], ["torch.nn.Module.__init__", "transformer_cs.Attention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Dropout", "float"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["\t", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "search_size", ",", "template_size", ",", "window_size", ",", "window_shift", ",", "dim_feedforward", "=", "2048", ",", "\n", "dropout", "=", "0.1", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "h1", ",", "self", ".", "w1", "=", "search_size", "\n", "self", ".", "h2", ",", "self", ".", "w2", "=", "template_size", "\n", "if", "window_size", "==", "0", ":", "\n", "\t\t\t", "self", ".", "window_size", "=", "[", "1", ",", "2", ",", "4", ",", "8", ",", "1", ",", "2", ",", "4", ",", "8", "]", "\n", "# self.window_size = [1, 2, 2, 4, 1, 2, 2, 4]", "\n", "# self.window_size = [1, 1, 1, 1, 1, 1, 1, 1]", "\n", "self", ".", "window_shift", "=", "None", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "window_size", "=", "[", "window_size", ",", "window_size", ",", "window_size", ",", "window_size", ",", "window_size", ",", "window_size", ",", "\n", "window_size", ",", "\n", "window_size", "]", "\n", "self", ".", "window_shift", "=", "window_shift", "\n", "\n", "", "self", ".", "attn", "=", "Attention", "(", "self", ".", "window_size", ",", "dropout", ")", "\n", "\n", "self", ".", "qkv_embedding", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", "*", "3", ")", "\n", "self", ".", "output_linear", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "nhead", "=", "nhead", "\n", "head_dim", "=", "d_model", "//", "nhead", "\n", "self", ".", "scale", "=", "head_dim", "**", "-", "0.5", "\n", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "feedforward", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", "\n", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "scale_factor", "=", "float", "(", "d_model", "//", "nhead", ")", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.TransformerLayer.with_pos_embed": [[182, 184], ["None"], "methods", ["None"], ["", "def", "with_pos_embed", "(", "self", ",", "tensor", ",", "pos", ":", "Optional", "[", "Tensor", "]", ")", ":", "\n", "\t\t", "return", "tensor", "if", "pos", "is", "None", "else", "tensor", "+", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.TransformerLayer._window_partition": [[185, 217], ["merge_feat.size", "t1.permute().contiguous().view.permute().contiguous().view.contiguous().view", "t1.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "t2.permute().contiguous().view.permute().contiguous().view.contiguous().view", "t2.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "s.permute().contiguous().view.permute().contiguous().view.contiguous().view", "torch.roll.contiguous().view", "s.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "torch.cat", "torch.roll", "t1.permute().contiguous().view.permute().contiguous().view.contiguous", "t1.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "t2.permute().contiguous().view.permute().contiguous().view.contiguous", "t2.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "s.permute().contiguous().view.permute().contiguous().view.contiguous", "torch.roll.contiguous", "s.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "t1.permute().contiguous().view.permute().contiguous().view.permute", "t2.permute().contiguous().view.permute().contiguous().view.permute", "s.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.RandomHorizontalFlip.roll"], ["", "def", "_window_partition", "(", "self", ",", "merge_feat", ",", "window_size", ",", "shift_size", "=", "0", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t:param merge_feat: (b, L_all, c)\n\t\t:return: (b, L, window_size*window_size*c)\n\t\t\"\"\"", "\n", "if", "window_size", "<=", "1", ":", "\n", "\t\t\t", "return", "merge_feat", "\n", "", "b", ",", "L_all", ",", "c", "=", "merge_feat", ".", "size", "(", ")", "\n", "first_L", "=", "self", ".", "h2", "*", "self", ".", "w2", "\n", "window_size_h", "=", "window_size_w", "=", "window_size", "\n", "c_win", "=", "window_size_h", "*", "window_size_w", "*", "c", "\n", "\n", "t1", "=", "merge_feat", "[", ":", ",", ":", "first_L", ",", ":", "]", "# (b, first_L, c)", "\n", "t1", "=", "t1", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "self", ".", "h2", "//", "window_size_h", ",", "window_size_h", ",", "self", ".", "w2", "//", "window_size_w", ",", "window_size_w", ",", "\n", "c", ")", "\n", "t1", "=", "t1", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "-", "1", ",", "c_win", ")", "\n", "\n", "t2", "=", "merge_feat", "[", ":", ",", "first_L", ":", "2", "*", "first_L", ",", ":", "]", "# (b, first_L, c)", "\n", "t2", "=", "t2", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "self", ".", "h2", "//", "window_size_h", ",", "window_size_h", ",", "self", ".", "w2", "//", "window_size_w", ",", "window_size_w", ",", "\n", "c", ")", "\n", "t2", "=", "t2", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "-", "1", ",", "c_win", ")", "\n", "\n", "s", "=", "merge_feat", "[", ":", ",", "first_L", "*", "2", ":", ",", ":", "]", "\n", "s_shift", "=", "s", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "self", ".", "h1", ",", "self", ".", "w1", ",", "c", ")", "\n", "if", "shift_size", ">", "0", ":", "\n", "\t\t\t", "s_shift", "=", "torch", ".", "roll", "(", "s_shift", ",", "shifts", "=", "(", "-", "shift_size", ",", "-", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "", "s", "=", "s_shift", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "self", ".", "h1", "//", "window_size_h", ",", "window_size_h", ",", "self", ".", "w1", "//", "window_size_w", ",", "\n", "window_size_w", ",", "c", ")", "\n", "s", "=", "s", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "-", "1", ",", "c_win", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "t1", ",", "t2", ",", "s", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.TransformerLayer._window_reverse": [[218, 250], ["merge_feat.size", "t1.permute().contiguous().view.permute().contiguous().view.view", "t1.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "t2.permute().contiguous().view.permute().contiguous().view.view", "t2.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "torch.roll.view.view", "torch.roll.view.permute().contiguous().view", "torch.roll.view", "torch.cat", "torch.roll", "t1.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "t2.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "torch.roll.view.permute().contiguous", "t1.permute().contiguous().view.permute().contiguous().view.permute", "t2.permute().contiguous().view.permute().contiguous().view.permute", "torch.roll.view.permute"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.RandomHorizontalFlip.roll"], ["", "def", "_window_reverse", "(", "self", ",", "merge_feat", ",", "window_size", ",", "shift_size", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t:param merge_feat: (b, L, window_size*window_size*c)\n\t\t:return: (b, L_all, c)\n\t\t\"\"\"", "\n", "if", "window_size", "<=", "1", ":", "\n", "\t\t\t", "return", "merge_feat", "\n", "", "window_size_h", "=", "window_size_w", "=", "window_size", "\n", "\n", "b", ",", "L", ",", "c_win", "=", "merge_feat", ".", "size", "(", ")", "\n", "c", "=", "c_win", "//", "window_size_h", "//", "window_size_w", "\n", "first_L", "=", "(", "self", ".", "h2", "//", "window_size_h", ")", "*", "(", "self", ".", "w2", "//", "window_size_w", ")", "\n", "last_L", "=", "(", "self", ".", "h1", "//", "window_size_h", ")", "*", "(", "self", ".", "w1", "//", "window_size_w", ")", "\n", "\n", "t1", "=", "merge_feat", "[", ":", ",", ":", "first_L", ",", ":", "]", "# (b, first_L, window_size*window_size*c)", "\n", "t1", "=", "t1", ".", "view", "(", "b", ",", "self", ".", "h2", "//", "window_size_h", ",", "\n", "self", ".", "w2", "//", "window_size_w", ",", "window_size_h", ",", "window_size_w", ",", "c", ")", "\n", "t1", "=", "t1", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "-", "1", ",", "c", ")", "\n", "\n", "t2", "=", "merge_feat", "[", ":", ",", "first_L", ":", "2", "*", "first_L", ",", ":", "]", "# (b, first_L, window_size*window_size*c)", "\n", "t2", "=", "t2", ".", "view", "(", "b", ",", "self", ".", "h2", "//", "window_size_h", ",", "\n", "self", ".", "w2", "//", "window_size_w", ",", "window_size_h", ",", "window_size_w", ",", "c", ")", "\n", "t2", "=", "t2", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "-", "1", ",", "c", ")", "\n", "\n", "s", "=", "merge_feat", "[", ":", ",", "first_L", "*", "2", ":", ",", ":", "]", "# (b, last_L, window_size*window_size*c)", "\n", "s", "=", "s", ".", "view", "(", "b", ",", "self", ".", "h1", "//", "window_size_h", ",", "\n", "self", ".", "w1", "//", "window_size_w", ",", "window_size_h", ",", "window_size_w", ",", "c", ")", "\n", "s_shift", "=", "s", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "self", ".", "h1", ",", "self", ".", "w1", ",", "c", ")", "\n", "if", "shift_size", ">", "0", ":", "\n", "\t\t\t", "s_shift", "=", "torch", ".", "roll", "(", "s_shift", ",", "shifts", "=", "(", "shift_size", ",", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "s", "=", "s_shift", ".", "view", "(", "b", ",", "-", "1", ",", "c", ")", "\n", "return", "torch", ".", "cat", "(", "[", "t1", ",", "t2", ",", "s", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.TransformerLayer.forward": [[251, 303], ["transformer_cs.TransformerLayer.qkv_embedding().chunk", "enumerate", "torch.cat", "transformer_cs.TransformerLayer.output_linear", "transformer_cs.TransformerLayer.norm1", "transformer_cs.TransformerLayer.norm2", "zip", "transformer_cs.TransformerLayer.transpose", "transformer_cs.TransformerLayer.transpose", "transformer_cs.TransformerLayer.transpose", "transformer_cs.TransformerLayer._window_partition", "transformer_cs.TransformerLayer._window_partition", "transformer_cs.TransformerLayer._window_partition", "transformer_cs.TransformerLayer._window_partition", "transformer_cs.TransformerLayer.attn", "transformer_cs.TransformerLayer._window_reverse", "transformer_cs.TransformerLayer.append", "transformer_cs.TransformerLayer.dropout", "transformer_cs.TransformerLayer.feedforward", "transformer_cs.TransformerLayer.qkv_embedding", "torch.chunk", "torch.chunk", "torch.chunk", "merge_mask.unsqueeze", "transformer_cs.TransformerLayer.to().mean", "rel_pos.get", "transformer_cs.TransformerLayer.transpose", "transformer_cs.TransformerLayer.to"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.TransformerLayer._window_partition", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.TransformerLayer._window_partition", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.TransformerLayer._window_partition", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.TransformerLayer._window_partition", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.TransformerLayer._window_reverse", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to"], ["", "def", "forward", "(", "self", ",", "merge_feat", ",", "merge_mask", ",", "rel_pos", "=", "None", ",", "merge_pos", "=", "None", ")", ":", "\n", "# merge_feat = (L,b,c)", "\n", "# start_time = time.time()", "\n", "# -------------------Multi-head attention---------------------", "\n", "\t\t", "_query", ",", "_key", ",", "_value", "=", "self", ".", "qkv_embedding", "(", "merge_feat", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# print(\"embedding_time: \" + str(time.time() - start_time))", "\n", "_query", "=", "_query", "*", "self", ".", "scale", "\n", "output", "=", "[", "]", "\n", "for", "index", ",", "(", "window_size", ",", "query", ",", "key", ",", "value", ")", "in", "enumerate", "(", "zip", "(", "\n", "self", ".", "window_size", ",", "\n", "torch", ".", "chunk", "(", "_query", ",", "self", ".", "nhead", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "chunk", "(", "_key", ",", "self", ".", "nhead", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "chunk", "(", "_value", ",", "self", ".", "nhead", ",", "dim", "=", "-", "1", ")", ")", "\n", ")", ":", "\n", "\t\t\t", "query", "=", "query", ".", "transpose", "(", "0", ",", "1", ")", "\n", "key", "=", "key", ".", "transpose", "(", "0", ",", "1", ")", "\n", "value", "=", "value", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "if", "self", ".", "window_shift", "or", "(", "self", ".", "window_shift", "is", "None", "and", "index", ">=", "self", ".", "nhead", "//", "2", ")", ":", "\n", "\t\t\t\t", "shift_size", "=", "window_size", "//", "2", "\n", "", "else", ":", "\n", "\t\t\t\t", "shift_size", "=", "0", "\n", "\n", "# -------------------window partition---------------------", "\n", "# (b, L_all, c)  ---> (b, L, win_h * win_w * c)", "\n", "", "query", "=", "self", ".", "_window_partition", "(", "query", ",", "window_size", ",", "shift_size", ")", "\n", "key", "=", "self", ".", "_window_partition", "(", "key", ",", "window_size", ",", "shift_size", ")", "\n", "value", "=", "self", ".", "_window_partition", "(", "value", ",", "window_size", ",", "shift_size", ")", "\n", "\n", "mask", "=", "self", ".", "_window_partition", "(", "merge_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "window_size", ")", "\n", "mask", "=", "mask", ".", "to", "(", "torch", ".", "float16", ")", ".", "mean", "(", "-", "1", ")", ">=", "1", "\n", "\n", "# -------------------attention---------------------", "\n", "attn", ",", "_", "=", "self", ".", "attn", "(", "query", ",", "key", ",", "value", ",", "window_size", ",", "mask", ",", "rel_pos", ".", "get", "(", "window_size", ")", ")", "\n", "\n", "# -------------------window_reverse---------------------", "\n", "attn", "=", "self", ".", "_window_reverse", "(", "attn", ",", "window_size", ",", "shift_size", ")", "\n", "output", ".", "append", "(", "attn", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "# print(\"window_\" + str(window_size) + \"_time: \" + str(time.time() - start_time))", "\n", "", "output", "=", "torch", ".", "cat", "(", "output", ",", "-", "1", ")", "\n", "\n", "output", "=", "self", ".", "output_linear", "(", "output", ")", "\n", "# -------------------FeedForward---------------------", "\n", "\n", "merge_feat", "=", "merge_feat", "+", "self", ".", "dropout", "(", "output", ")", "\n", "merge_feat", "=", "self", ".", "norm1", "(", "merge_feat", ")", "\n", "merge_feat", "=", "merge_feat", "+", "self", ".", "feedforward", "(", "merge_feat", ")", "\n", "merge_feat", "=", "self", ".", "norm2", "(", "merge_feat", ")", "\n", "\n", "return", "merge_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.Attention.__init__": [[310, 339], ["torch.nn.Module.__init__", "torch.nn.Dropout", "torch.tensor().view", "attn_mask.unsqueeze().repeat().view().cuda.unsqueeze().repeat().view().cuda.unsqueeze().repeat().view().cuda", "transformer_cs.Attention.sr_attn_mask.update", "torch.meshgrid", "transformer_cs.Attention.x_mesh.update", "transformer_cs.Attention.y_mesh.update", "torch.nonzero", "transformer_cs.Attention.sr_attn_mask.get", "torch.tensor", "attn_mask.unsqueeze().repeat().view().cuda.unsqueeze().repeat().view().cuda.unsqueeze().repeat().view", "attn_mask.unsqueeze().repeat().view().cuda.unsqueeze().repeat().view().cuda.unsqueeze().unsqueeze", "torch.ones", "attn_mask.unsqueeze().repeat().view().cuda.unsqueeze().repeat().view().cuda.unsqueeze().repeat", "attn_mask.unsqueeze().repeat().view().cuda.unsqueeze().repeat().view().cuda.unsqueeze", "np.arange", "attn_mask.unsqueeze().repeat().view().cuda.unsqueeze().repeat().view().cuda.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get"], ["def", "__init__", "(", "self", ",", "window_size_list", ",", "p", "=", "0.1", ")", ":", "\n", "\t\t", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "p", ")", "\n", "\n", "self", ".", "x_mesh", "=", "{", "}", "\n", "self", ".", "y_mesh", "=", "{", "}", "\n", "# self.matrix_index_query = {}", "\n", "# self.matrix_index_key = {}", "\n", "self", ".", "sr_attn_mask", "=", "{", "}", "\n", "\n", "L_win", "=", "704", "\n", "\n", "for", "win_size", "in", "window_size_list", ":", "\n", "\t\t\t", "if", "win_size", "==", "1", "or", "self", ".", "sr_attn_mask", ".", "get", "(", "win_size", ")", "is", "not", "None", ":", "\n", "\t\t\t\t", "continue", "\n", "# spatially regularized attention mask", "\n", "", "L", "=", "L_win", "//", "win_size", "//", "win_size", "\n", "attn_mask_w", "=", "torch", ".", "tensor", "(", "[", "x", "if", "x", ">", "0.5", "else", "1", "-", "x", "for", "x", "in", "np", ".", "arange", "(", "0", ",", "1", ",", "1", "/", "win_size", ")", "]", ",", "\n", "dtype", "=", "torch", ".", "float16", ")", ".", "view", "(", "1", ",", "win_size", ")", "\n", "attn_mask", "=", "attn_mask_w", ".", "T", "*", "attn_mask_w", "-", "1.0", "\n", "attn_mask", "=", "attn_mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "L", ",", "1", ",", "1", ")", ".", "view", "(", "L_win", ")", ".", "cuda", "(", ")", "\n", "self", ".", "sr_attn_mask", ".", "update", "(", "{", "win_size", ":", "attn_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "}", ")", "\n", "\n", "# index for cyclic shift", "\n", "i", ",", "j", "=", "torch", ".", "nonzero", "(", "torch", ".", "ones", "(", "(", "win_size", ",", "win_size", ")", ")", ",", "as_tuple", "=", "False", ")", ".", "T", "\n", "index", "=", "j", "-", "i", "\n", "x", ",", "y", "=", "torch", ".", "meshgrid", "(", "index", ",", "index", ")", "\n", "self", ".", "x_mesh", ".", "update", "(", "{", "win_size", ":", "x", "}", ")", "\n", "self", ".", "y_mesh", ".", "update", "(", "{", "win_size", ":", "y", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.Attention.forward": [[348, 410], ["query.view.view.size", "torch.softmax", "transformer_cs.Attention.dropout", "torch.matmul", "torch.matmul", "query.view.view.view", "key[].view().permute().contiguous().view.view", "value[].view().permute().contiguous().view.view", "key[].view().permute().contiguous().view", "torch.matmul", "value[].view().permute().contiguous().view", "key[].view().permute().contiguous().view.transpose", "_attn_score.view.view.masked_fill", "query.view.view.view", "key[].view().permute().contiguous().view.transpose", "_attn_score.view.view.view", "_attn_score.view.view.masked_fill", "_attn_score.view.view.view", "rel_pos.unsqueeze", "padding_mask.size", "padding_mask.unsqueeze", "float", "key[].view().permute().contiguous", "value[].view().permute().contiguous", "transformer_cs.Attention.sr_attn_mask.get", "padding_mask.unsqueeze().unsqueeze().unsqueeze", "float", "key[].view().permute().contiguous().view.size", "padding_mask.size", "padding_mask.size", "key[].view().permute", "value[].view().permute", "padding_mask.unsqueeze().unsqueeze", "key[].view", "value[].view", "padding_mask.unsqueeze", "transformer_cs.Attention.x_mesh.get", "transformer_cs.Attention.y_mesh.get", "transformer_cs.Attention.x_mesh.get", "transformer_cs.Attention.y_mesh.get"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get"], ["", "", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "window_size", ",", "padding_mask", "=", "None", ",", "rel_pos", "=", "None", ",", "use_attn_mask", "=", "True", ")", ":", "\n", "\t\t", "b", ",", "L", ",", "c_win", "=", "query", ".", "size", "(", ")", "\n", "c", "=", "c_win", "//", "window_size", "//", "window_size", "\n", "L_win", "=", "L", "*", "window_size", "*", "window_size", "\n", "\n", "if", "window_size", "==", "1", ":", "\n", "\t\t\t", "_attn_score", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "if", "padding_mask", "is", "not", "None", ":", "\n", "\t\t\t\t", "assert", "padding_mask", ".", "size", "(", ")", "==", "key", ".", "size", "(", ")", "[", "0", ":", "2", "]", "\n", "_attn_score", "=", "_attn_score", ".", "masked_fill", "(", "padding_mask", ".", "unsqueeze", "(", "1", ")", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "", "", "else", ":", "\n", "# q,k,v =  (b, L, win_h * win_w * c)", "\n", "# mask = (b, L)", "\n", "\t\t\t", "query", "=", "query", ".", "view", "(", "b", ",", "L", ",", "window_size", ",", "window_size", ",", "c", ")", "\n", "key", "=", "key", ".", "view", "(", "b", ",", "L", ",", "window_size", ",", "window_size", ",", "c", ")", "\n", "value", "=", "value", ".", "view", "(", "b", ",", "L", ",", "window_size", ",", "window_size", ",", "c", ")", "\n", "# -------original calculation-----------", "\n", "# _attn = torch.zeros(b, L, L, window_size * window_size, window_size * window_size).cuda()", "\n", "# for q_i in range(0, window_size):", "\n", "# \tfor q_j in range(0, window_size):", "\n", "# \t\t_query = query.roll(shifts=(q_i, q_j), dims=(2, 3))", "\n", "# \t\tfor k_i in range(0, window_size):", "\n", "# \t\t\tfor k_j in range(0, window_size):", "\n", "# \t\t\t\t_key = key.roll(shifts=(k_i, k_j), dims=(2, 3))", "\n", "# \t\t\t\t_attn[:, :, :, q_i * window_size + q_j, k_i * window_size + k_j] = \\", "\n", "# \t\t\t\t\ttorch.matmul(_query.view(b, L, c_win), _key.view(b, L, c_win).transpose(-2, -1))", "\n", "# ----------------------", "\n", "\n", "# -------speed calculation-----------", "\n", "key", "=", "key", "[", ":", ",", ":", ",", "self", ".", "x_mesh", ".", "get", "(", "window_size", ")", ",", "self", ".", "y_mesh", ".", "get", "(", "window_size", ")", ",", ":", "]", ".", "view", "(", "b", ",", "L", ",", "window_size", ",", "\n", "window_size", ",", "\n", "window_size", ",", "\n", "window_size", ",", "c", ")", ".", "permute", "(", "0", ",", "1", ",", "2", ",", "4", ",", "3", ",", "5", ",", "6", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "L_win", ",", "c_win", ")", "# shift -> (b, L_win, c_win)", "\n", "_attn_score", "=", "torch", ".", "matmul", "(", "query", ".", "view", "(", "b", ",", "L", ",", "c_win", ")", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "value", "=", "value", "[", ":", ",", ":", ",", "self", ".", "x_mesh", ".", "get", "(", "window_size", ")", ",", "self", ".", "y_mesh", ".", "get", "(", "window_size", ")", ",", ":", "]", ".", "view", "(", "b", ",", "L", ",", "window_size", ",", "\n", "window_size", ",", "\n", "window_size", ",", "\n", "window_size", ",", "c", ")", ".", "permute", "(", "0", ",", "1", ",", "2", ",", "4", ",", "3", ",", "5", ",", "6", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "L_win", ",", "c_win", ")", "# shift -> (b, L_win, c_win)", "\n", "\n", "if", "use_attn_mask", ":", "\n", "\t\t\t\t", "_attn_score", "=", "_attn_score", "+", "self", ".", "sr_attn_mask", ".", "get", "(", "window_size", ")", "\n", "\n", "", "_attn_score", "=", "_attn_score", "/", "(", "window_size", "*", "window_size", ")", "\n", "\n", "if", "padding_mask", "is", "not", "None", ":", "\n", "\t\t\t\t", "assert", "padding_mask", ".", "size", "(", ")", "[", "0", "]", "==", "b", "\n", "assert", "padding_mask", ".", "size", "(", ")", "[", "1", "]", "==", "L", "\n", "_attn_score", "=", "_attn_score", ".", "view", "(", "b", ",", "L", ",", "L", ",", "window_size", ",", "window_size", ")", "\n", "_attn_score", "=", "_attn_score", ".", "masked_fill", "(", "padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "float", "(", "\"-inf\"", ")", ")", "\n", "_attn_score", "=", "_attn_score", ".", "view", "(", "b", ",", "L", ",", "L_win", ")", "\n", "\n", "", "", "if", "rel_pos", "is", "not", "None", ":", "\n", "\t\t\t", "_attn_score", "=", "_attn_score", "+", "rel_pos", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "_attn_score", ",", "dim", "=", "-", "1", ")", "\n", "p_attn", "=", "self", ".", "dropout", "(", "p_attn", ")", "\n", "p_val", "=", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", "\n", "return", "p_val", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.check_inf": [[10, 12], ["torch.isinf().any", "torch.isinf", "tensor.detach"], "function", ["None"], ["def", "check_inf", "(", "tensor", ")", ":", "\n", "\t", "return", "torch", ".", "isinf", "(", "tensor", ".", "detach", "(", ")", ")", ".", "any", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.check_nan": [[13, 15], ["torch.isnan().any", "torch.isnan", "tensor.detach"], "function", ["None"], ["", "def", "check_nan", "(", "tensor", ")", ":", "\n", "\t", "return", "torch", ".", "isnan", "(", "tensor", ".", "detach", "(", ")", ")", ".", "any", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.check_valid": [[16, 21], ["transformer_cs.check_inf", "transformer_cs.check_nan", "print", "print"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.check_inf", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.check_nan"], ["", "def", "check_valid", "(", "tensor", ",", "type_name", ")", ":", "\n", "\t", "if", "check_inf", "(", "tensor", ")", ":", "\n", "\t\t", "print", "(", "\"%s is inf.\"", "%", "type_name", ")", "\n", "", "if", "check_nan", "(", "tensor", ")", ":", "\n", "\t\t", "print", "(", "\"%s is nan\"", "%", "type_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.transformer_cs.build_transformer_cs": [[411, 419], ["transformer_cs.Transformer_CS"], "function", ["None"], ["", "", "def", "build_transformer_cs", "(", "cfg", ")", ":", "\n", "\t", "search_size", "=", "cfg", ".", "DATA", ".", "SEARCH", ".", "SIZE", "//", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "STRIDE", "\n", "template_size", "=", "cfg", ".", "DATA", ".", "TEMPLATE", ".", "SIZE", "//", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "STRIDE", "\n", "return", "Transformer_CS", "(", "[", "search_size", ",", "search_size", "]", ",", "[", "template_size", ",", "template_size", "]", ",", "d_model", "=", "cfg", ".", "MODEL", ".", "HIDDEN_DIM", ",", "\n", "nhead", "=", "cfg", ".", "MODEL", ".", "TRANSFORMER", ".", "NHEADS", ",", "\n", "d_feedforward", "=", "cfg", ".", "MODEL", ".", "TRANSFORMER", ".", "DIM_FEEDFORWARD", ",", "\n", "stack_num", "=", "cfg", ".", "MODEL", ".", "TRANSFORMER", ".", "ENC_LAYERS", ",", "\n", "dropout", "=", "cfg", ".", "MODEL", ".", "TRANSFORMER", ".", "DROPOUT", ")", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.Corner_Predictor.__init__": [[25, 52], ["torch.Module.__init__", "head.conv", "head.conv", "head.conv", "head.conv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "head.conv", "head.conv", "head.conv", "head.conv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "head.Corner_Predictor.indice.repeat().view().float().cuda", "head.Corner_Predictor.indice.repeat().view().float().cuda", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "head.Corner_Predictor.indice.repeat().view().float", "head.Corner_Predictor.indice.repeat().view().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "head.Corner_Predictor.indice.repeat().view", "head.Corner_Predictor.indice.repeat().view", "head.Corner_Predictor.indice.repeat", "head.Corner_Predictor.indice.repeat"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.conv", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.conv", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.conv", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.conv", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.conv", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.conv", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.conv", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.conv"], ["def", "__init__", "(", "self", ",", "inplanes", "=", "64", ",", "channel", "=", "256", ",", "feat_sz", "=", "20", ",", "stride", "=", "16", ",", "freeze_bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "Corner_Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat_sz", "=", "feat_sz", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "img_sz", "=", "self", ".", "feat_sz", "*", "self", ".", "stride", "\n", "'''top-left corner'''", "\n", "self", ".", "conv1_tl", "=", "conv", "(", "inplanes", ",", "channel", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "self", ".", "conv2_tl", "=", "conv", "(", "channel", ",", "channel", "//", "2", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "self", ".", "conv3_tl", "=", "conv", "(", "channel", "//", "2", ",", "channel", "//", "4", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "self", ".", "conv4_tl", "=", "conv", "(", "channel", "//", "4", ",", "channel", "//", "8", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "self", ".", "conv5_tl", "=", "nn", ".", "Conv2d", "(", "channel", "//", "8", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n", "'''bottom-right corner'''", "\n", "self", ".", "conv1_br", "=", "conv", "(", "inplanes", ",", "channel", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "self", ".", "conv2_br", "=", "conv", "(", "channel", ",", "channel", "//", "2", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "self", ".", "conv3_br", "=", "conv", "(", "channel", "//", "2", ",", "channel", "//", "4", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "self", ".", "conv4_br", "=", "conv", "(", "channel", "//", "4", ",", "channel", "//", "8", ",", "freeze_bn", "=", "freeze_bn", ")", "\n", "self", ".", "conv5_br", "=", "nn", ".", "Conv2d", "(", "channel", "//", "8", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n", "'''about coordinates and indexs'''", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "indice", "=", "torch", ".", "arange", "(", "0", ",", "self", ".", "feat_sz", ")", ".", "view", "(", "-", "1", ",", "1", ")", "*", "self", ".", "stride", "\n", "# generate mesh-grid", "\n", "self", ".", "coord_x", "=", "self", ".", "indice", ".", "repeat", "(", "(", "self", ".", "feat_sz", ",", "1", ")", ")", ".", "view", "(", "(", "self", ".", "feat_sz", "*", "self", ".", "feat_sz", ",", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "coord_y", "=", "self", ".", "indice", ".", "repeat", "(", "(", "1", ",", "self", ".", "feat_sz", ")", ")", ".", "view", "(", "(", "self", ".", "feat_sz", "*", "self", ".", "feat_sz", ",", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.Corner_Predictor.forward": [[53, 59], ["head.Corner_Predictor.get_score_map", "head.Corner_Predictor.soft_argmax", "head.Corner_Predictor.soft_argmax", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.Corner_Predictor.get_score_map", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.Corner_Predictor.soft_argmax", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.Corner_Predictor.soft_argmax"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" Forward pass with input x. \"\"\"", "\n", "score_map_tl", ",", "score_map_br", "=", "self", ".", "get_score_map", "(", "x", ")", "\n", "coorx_tl", ",", "coory_tl", "=", "self", ".", "soft_argmax", "(", "score_map_tl", ")", "\n", "coorx_br", ",", "coory_br", "=", "self", ".", "soft_argmax", "(", "score_map_br", ")", "\n", "return", "torch", ".", "stack", "(", "(", "coorx_tl", ",", "coory_tl", ",", "coorx_br", ",", "coory_br", ")", ",", "dim", "=", "1", ")", "/", "self", ".", "img_sz", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.Corner_Predictor.get_score_map": [[60, 75], ["head.Corner_Predictor.conv1_tl", "head.Corner_Predictor.conv2_tl", "head.Corner_Predictor.conv3_tl", "head.Corner_Predictor.conv4_tl", "head.Corner_Predictor.conv5_tl", "head.Corner_Predictor.conv1_br", "head.Corner_Predictor.conv2_br", "head.Corner_Predictor.conv3_br", "head.Corner_Predictor.conv4_br", "head.Corner_Predictor.conv5_br"], "methods", ["None"], ["", "def", "get_score_map", "(", "self", ",", "x", ")", ":", "\n", "# top-left branch", "\n", "        ", "x_tl1", "=", "self", ".", "conv1_tl", "(", "x", ")", "\n", "x_tl2", "=", "self", ".", "conv2_tl", "(", "x_tl1", ")", "\n", "x_tl3", "=", "self", ".", "conv3_tl", "(", "x_tl2", ")", "\n", "x_tl4", "=", "self", ".", "conv4_tl", "(", "x_tl3", ")", "\n", "score_map_tl", "=", "self", ".", "conv5_tl", "(", "x_tl4", ")", "\n", "\n", "# bottom-right branch", "\n", "x_br1", "=", "self", ".", "conv1_br", "(", "x", ")", "\n", "x_br2", "=", "self", ".", "conv2_br", "(", "x_br1", ")", "\n", "x_br3", "=", "self", ".", "conv3_br", "(", "x_br2", ")", "\n", "x_br4", "=", "self", ".", "conv4_br", "(", "x_br3", ")", "\n", "score_map_br", "=", "self", ".", "conv5_br", "(", "x_br4", ")", "\n", "return", "score_map_tl", ",", "score_map_br", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.Corner_Predictor.soft_argmax": [[76, 83], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "score_map.view"], "methods", ["None"], ["", "def", "soft_argmax", "(", "self", ",", "score_map", ")", ":", "\n", "        ", "\"\"\" get soft-argmax coordinate for a given heatmap \"\"\"", "\n", "prob_vec", "=", "nn", ".", "functional", ".", "softmax", "(", "\n", "score_map", ".", "view", "(", "(", "-", "1", ",", "self", ".", "feat_sz", "*", "self", ".", "feat_sz", ")", ")", ",", "dim", "=", "1", ")", "# (batch, feat_sz * feat_sz)", "\n", "exp_x", "=", "torch", ".", "sum", "(", "(", "self", ".", "coord_x", "*", "prob_vec", ")", ",", "dim", "=", "1", ")", "\n", "exp_y", "=", "torch", ".", "sum", "(", "(", "self", ".", "coord_y", "*", "prob_vec", ")", ",", "dim", "=", "1", ")", "\n", "return", "exp_x", ",", "exp_y", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.MLP.__init__": [[88, 93], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "zip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "output_dim", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "h", "=", "[", "hidden_dim", "]", "*", "(", "num_layers", "-", "1", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "nn", ".", "Linear", "(", "n", ",", "k", ")", "for", "n", ",", "k", "in", "zip", "(", "[", "input_dim", "]", "+", "h", ",", "h", "+", "[", "output_dim", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.MLP.forward": [[94, 98], ["enumerate", "torch.relu", "torch.relu", "torch.relu", "layer", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "layer", "(", "x", ")", ")", "if", "i", "<", "self", ".", "num_layers", "-", "1", "else", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.conv": [[7, 21], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "lib.models.cswintt.backbone.FrozenBatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "function", ["None"], ["def", "conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "\n", "freeze_bn", "=", "False", ")", ":", "\n", "    ", "if", "freeze_bn", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ",", "\n", "FrozenBatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.head.build_box_head": [[100, 116], ["head.MLP", "int", "head.Corner_Predictor", "ValueError"], "function", ["None"], ["", "", "def", "build_box_head", "(", "cfg", ")", ":", "\n", "    ", "if", "cfg", ".", "MODEL", ".", "HEAD_TYPE", "==", "\"MLP\"", ":", "\n", "        ", "hidden_dim", "=", "cfg", ".", "MODEL", ".", "HIDDEN_DIM", "\n", "mlp_head", "=", "MLP", "(", "hidden_dim", ",", "hidden_dim", ",", "4", ",", "3", ")", "# dim_in, dim_hidden, dim_out, 3 layers", "\n", "return", "mlp_head", "\n", "", "elif", "cfg", ".", "MODEL", ".", "HEAD_TYPE", "==", "\"CORNER\"", ":", "\n", "        ", "if", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "DILATION", "is", "False", ":", "\n", "            ", "stride", "=", "16", "\n", "", "else", ":", "\n", "            ", "stride", "=", "8", "\n", "", "feat_sz", "=", "int", "(", "cfg", ".", "DATA", ".", "SEARCH", ".", "SIZE", "/", "stride", ")", "\n", "corner_head", "=", "Corner_Predictor", "(", "inplanes", "=", "cfg", ".", "MODEL", ".", "HIDDEN_DIM", ",", "channel", "=", "256", ",", "\n", "feat_sz", "=", "feat_sz", ",", "stride", "=", "stride", ")", "\n", "return", "corner_head", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"HEAD TYPE %s is not supported.\"", "%", "cfg", ".", "MODEL", ".", "HEAD_TYPE", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.position_encoding.PositionEmbeddingRelative.__init__": [[13, 34], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.arange", "torch.arange", "torch.stack", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "timm.models.layers.trunc_normal_", "torch.zeros", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "window_size", ",", "num_heads", ")", ":", "\n", "        ", "super", "(", "PositionEmbeddingRelative", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "(", "window_size", ",", "window_size", ")", "\n", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "self", ".", "window_size", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "self", ".", "window_size", "[", "1", "]", "-", "1", ")", ",", "\n", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "0", "]", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "1", "]", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "self", ".", "window_size", "[", "0", "]", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "self", ".", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.position_encoding.PositionEmbeddingRelative.forward": [[35, 40], ["position_encoding.PositionEmbeddingRelative.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "position_encoding.PositionEmbeddingRelative.relative_position_index.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "return", "relative_position_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.position_encoding.PositionEmbeddingRelative_.__init__": [[43, 65], ["torch.nn.Module.__init__", "torch.nn.Parameter().cuda", "torch.arange", "torch.arange().repeat", "torch.stack", "torch.stack", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "timm.models.layers.trunc_normal_", "torch.meshgrid", "torch.nn.Parameter", "torch.arange", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "window_size", ",", "L_win", ")", ":", "\n", "        ", "super", "(", "PositionEmbeddingRelative_", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "Len_all", "=", "L_win", "\n", "self", ".", "Num_win", "=", "L_win", "//", "window_size", "\n", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "self", ".", "window_size", "-", "1", ")", "*", "(", "2", "*", "self", ".", "Num_win", "-", "1", ")", ")", ")", ".", "cuda", "(", ")", "# 2*W-1 * 2*Nw-1", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "self", ".", "Num_win", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "self", ".", "window_size", ")", ".", "repeat", "(", "self", ".", "Num_win", "//", "window_size", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, W*W*Nw", "\n", "coords_flatten", "=", "torch", ".", "stack", "(", "[", "torch", ".", "flatten", "(", "coords", "[", "0", ",", ":", ",", ":", "self", ".", "window_size", "]", ")", ",", "\n", "torch", ".", "flatten", "(", "coords", "[", "1", ",", ":", "self", ".", "window_size", ",", ":", "]", ")", "]", ")", "# 2, W*W*Nw", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, W*W*Nw, W*W*Nw", "\n", "relative_coords", "[", "0", "]", "+=", "self", ".", "Num_win", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", "1", "]", "+=", "self", ".", "window_size", "-", "1", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "self", ".", "window_size", "-", "1", "\n", "self", ".", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.position_encoding.PositionEmbeddingRelative_.forward": [[66, 71], ["position_encoding.PositionEmbeddingRelative_.relative_position_bias_table[].view", "relative_position_bias.contiguous.contiguous.contiguous", "position_encoding.PositionEmbeddingRelative_.relative_position_index.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "Len_all", ",", "self", ".", "Len_all", ")", "# Len_all,Len_all", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "contiguous", "(", ")", "# Len_all,Len_all", "\n", "return", "relative_position_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.position_encoding.PositionEmbeddingSine.__init__": [[79, 89], ["torch.nn.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["def", "__init__", "(", "self", ",", "num_pos_feats", "=", "64", ",", "temperature", "=", "10000", ",", "normalize", "=", "False", ",", "scale", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_pos_feats", "=", "num_pos_feats", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "normalize", "=", "normalize", "\n", "if", "scale", "is", "not", "None", "and", "normalize", "is", "False", ":", "\n", "            ", "raise", "ValueError", "(", "\"normalize should be True if scale is passed\"", ")", "\n", "", "if", "scale", "is", "None", ":", "\n", "            ", "scale", "=", "2", "*", "math", ".", "pi", "\n", "", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.position_encoding.PositionEmbeddingSine.forward": [[90, 111], ["not_mask.cumsum", "not_mask.cumsum", "torch.arange", "torch.stack().flatten", "torch.stack().flatten", "torch.cat().permute", "torch.stack", "torch.stack", "torch.cat", "pos_x[].sin", "pos_x[].cos", "pos_y[].sin", "pos_y[].cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensor_list", ":", "NestedTensor", ")", ":", "\n", "        ", "x", "=", "tensor_list", ".", "tensors", "\n", "mask", "=", "tensor_list", ".", "mask", "\n", "assert", "mask", "is", "not", "None", "\n", "not_mask", "=", "~", "mask", "# (b,h,w)", "\n", "y_embed", "=", "not_mask", ".", "cumsum", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "# cumulative sum along axis 1 (h axis) --> (b, h, w)", "\n", "x_embed", "=", "not_mask", ".", "cumsum", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ")", "# cumulative sum along axis 2 (w axis) --> (b, h, w)", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "eps", "=", "1e-6", "\n", "y_embed", "=", "y_embed", "/", "(", "y_embed", "[", ":", ",", "-", "1", ":", ",", ":", "]", "+", "eps", ")", "*", "self", ".", "scale", "# 2pi * (y / sigma(y))", "\n", "x_embed", "=", "x_embed", "/", "(", "x_embed", "[", ":", ",", ":", ",", "-", "1", ":", "]", "+", "eps", ")", "*", "self", ".", "scale", "# 2pi * (x / sigma(x))", "\n", "\n", "", "dim_t", "=", "torch", ".", "arange", "(", "self", ".", "num_pos_feats", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "# (0,1,2,...,d/2)", "\n", "dim_t", "=", "self", ".", "temperature", "**", "(", "2", "*", "(", "dim_t", "//", "2", ")", "/", "self", ".", "num_pos_feats", ")", "\n", "\n", "pos_x", "=", "x_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "# (b,h,w,d/2)", "\n", "pos_y", "=", "y_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "# (b,h,w,d/2)", "\n", "pos_x", "=", "torch", ".", "stack", "(", "(", "pos_x", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_x", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", ")", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "# (b,h,w,d/2)", "\n", "pos_y", "=", "torch", ".", "stack", "(", "(", "pos_y", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_y", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", ")", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "# (b,h,w,d/2)", "\n", "pos", "=", "torch", ".", "cat", "(", "(", "pos_y", ",", "pos_x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# (b,h,w,d)", "\n", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.position_encoding.PositionEmbeddingLearned.__init__": [[118, 123], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "position_encoding.PositionEmbeddingLearned.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.position_encoding.PositionEmbeddingLearned.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_pos_feats", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "row_embed", "=", "nn", ".", "Embedding", "(", "50", ",", "num_pos_feats", ")", "\n", "self", ".", "col_embed", "=", "nn", ".", "Embedding", "(", "50", ",", "num_pos_feats", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.position_encoding.PositionEmbeddingLearned.reset_parameters": [[124, 127], ["torch.nn.init.uniform_", "torch.nn.init.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "row_embed", ".", "weight", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "col_embed", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.position_encoding.PositionEmbeddingLearned.forward": [[128, 140], ["torch.arange", "torch.arange", "position_encoding.PositionEmbeddingLearned.col_embed", "position_encoding.PositionEmbeddingLearned.row_embed", "torch.cat().permute().unsqueeze().repeat", "torch.cat().permute().unsqueeze", "torch.cat().permute", "torch.cat", "position_encoding.PositionEmbeddingLearned.unsqueeze().repeat", "position_encoding.PositionEmbeddingLearned.unsqueeze().repeat", "position_encoding.PositionEmbeddingLearned.unsqueeze", "position_encoding.PositionEmbeddingLearned.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensor_list", ":", "NestedTensor", ")", ":", "\n", "        ", "x", "=", "tensor_list", ".", "tensors", "\n", "h", ",", "w", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "i", "=", "torch", ".", "arange", "(", "w", ",", "device", "=", "x", ".", "device", ")", "\n", "j", "=", "torch", ".", "arange", "(", "h", ",", "device", "=", "x", ".", "device", ")", "\n", "x_emb", "=", "self", ".", "col_embed", "(", "i", ")", "\n", "y_emb", "=", "self", ".", "row_embed", "(", "j", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "[", "\n", "x_emb", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "h", ",", "1", ",", "1", ")", ",", "\n", "y_emb", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "w", ",", "1", ")", ",", "\n", "]", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "pos", "# (H,W,C) --> (C,H,W) --> (1,C,H,W) --> (B,C,H,W)", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.position_encoding.PositionEmbeddingNone.__init__": [[147, 150], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["def", "__init__", "(", "self", ",", "num_pos_feats", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_dim", "=", "num_pos_feats", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.position_encoding.PositionEmbeddingNone.forward": [[151, 155], ["x.size", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensor_list", ":", "NestedTensor", ")", ":", "\n", "        ", "x", "=", "tensor_list", ".", "tensors", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "return", "torch", ".", "zeros", "(", "(", "b", ",", "self", ".", "n_dim", ",", "h", ",", "w", ")", ",", "device", "=", "x", ".", "device", ")", "# (B, C, H, W)", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.position_encoding.build_position_encoding": [[157, 171], ["position_encoding.PositionEmbeddingSine", "position_encoding.PositionEmbeddingLearned", "print", "position_encoding.PositionEmbeddingNone", "ValueError"], "function", ["None"], ["", "", "def", "build_position_encoding", "(", "cfg", ")", ":", "\n", "    ", "N_steps", "=", "cfg", ".", "MODEL", ".", "HIDDEN_DIM", "//", "2", "\n", "if", "cfg", ".", "MODEL", ".", "POSITION_EMBEDDING", "in", "(", "'v2'", ",", "'sine'", ")", ":", "\n", "# TODO find a better way of exposing other arguments", "\n", "        ", "position_embedding", "=", "PositionEmbeddingSine", "(", "N_steps", ",", "normalize", "=", "True", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "POSITION_EMBEDDING", "in", "(", "'v3'", ",", "'learned'", ")", ":", "\n", "        ", "position_embedding", "=", "PositionEmbeddingLearned", "(", "N_steps", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "POSITION_EMBEDDING", "in", "(", "'None'", ",", ")", ":", "\n", "        ", "print", "(", "\"Not using positional encoding.\"", ")", "\n", "position_embedding", "=", "PositionEmbeddingNone", "(", "N_steps", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"not supported {cfg.MODEL.POSITION_EMBEDDING}\"", ")", "\n", "\n", "", "return", "position_embedding", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.backbone.FrozenBatchNorm2d.__init__": [[24, 30], ["super().__init__", "backbone.FrozenBatchNorm2d.register_buffer", "backbone.FrozenBatchNorm2d.register_buffer", "backbone.FrozenBatchNorm2d.register_buffer", "backbone.FrozenBatchNorm2d.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "super", "(", "FrozenBatchNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"weight\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.backbone.FrozenBatchNorm2d._load_from_state_dict": [[31, 40], ["super()._load_from_state_dict"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.backbone.FrozenBatchNorm2d._load_from_state_dict"], ["", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "num_batches_tracked_key", "=", "prefix", "+", "'num_batches_tracked'", "\n", "if", "num_batches_tracked_key", "in", "state_dict", ":", "\n", "            ", "del", "state_dict", "[", "num_batches_tracked_key", "]", "\n", "\n", "", "super", "(", "FrozenBatchNorm2d", ",", "self", ")", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.backbone.FrozenBatchNorm2d.forward": [[41, 52], ["backbone.FrozenBatchNorm2d.weight.reshape", "backbone.FrozenBatchNorm2d.bias.reshape", "backbone.FrozenBatchNorm2d.running_var.reshape", "backbone.FrozenBatchNorm2d.running_mean.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# move reshapes to the beginning", "\n", "# to make it fuser-friendly", "\n", "        ", "w", "=", "self", ".", "weight", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "b", "=", "self", ".", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "rv", "=", "self", ".", "running_var", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "rm", "=", "self", ".", "running_mean", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "eps", "=", "1e-5", "\n", "scale", "=", "w", "*", "(", "rv", "+", "eps", ")", ".", "rsqrt", "(", ")", "# rsqrt(x): 1/sqrt(x), r: reciprocal", "\n", "bias", "=", "b", "-", "rm", "*", "scale", "\n", "return", "x", "*", "scale", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.backbone.BackboneBase.__init__": [[56, 68], ["torch.nn.Module.__init__", "backbone.named_parameters", "torchvision.models._utils.IntermediateLayerGetter", "parameter.requires_grad_"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ":", "nn", ".", "Module", ",", "train_backbone", ":", "bool", ",", "num_channels", ":", "int", ",", "return_interm_layers", ":", "bool", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "for", "name", ",", "parameter", "in", "backbone", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "not", "train_backbone", "or", "'layer2'", "not", "in", "name", "and", "'layer3'", "not", "in", "name", ":", "\n", "                ", "parameter", ".", "requires_grad_", "(", "False", ")", "# here should allow users to specify which layers to freeze !", "\n", "# print('freeze %s'%name)", "\n", "", "", "if", "return_interm_layers", ":", "\n", "            ", "return_layers", "=", "{", "\"layer1\"", ":", "\"0\"", ",", "\"layer2\"", ":", "\"1\"", ",", "\"layer3\"", ":", "\"2\"", "}", "# stride = 4, 8, 16", "\n", "", "else", ":", "\n", "            ", "return_layers", "=", "{", "'layer3'", ":", "\"0\"", "}", "# stride = 16", "\n", "", "self", ".", "body", "=", "IntermediateLayerGetter", "(", "backbone", ",", "return_layers", "=", "return_layers", ")", "# method in torchvision", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.backbone.BackboneBase.forward": [[69, 78], ["backbone.BackboneBase.body", "backbone.BackboneBase.items", "lib.utils.misc.NestedTensor", "torch.interpolate().to", "torch.interpolate().to", "torch.interpolate", "torch.interpolate", "m[].float"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.interpolate", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "tensor_list", ":", "NestedTensor", ")", ":", "\n", "        ", "xs", "=", "self", ".", "body", "(", "tensor_list", ".", "tensors", ")", "\n", "out", ":", "Dict", "[", "str", ",", "NestedTensor", "]", "=", "{", "}", "\n", "for", "name", ",", "x", "in", "xs", ".", "items", "(", ")", ":", "\n", "            ", "m", "=", "tensor_list", ".", "mask", "\n", "assert", "m", "is", "not", "None", "\n", "mask", "=", "F", ".", "interpolate", "(", "m", "[", "None", "]", ".", "float", "(", ")", ",", "size", "=", "x", ".", "shape", "[", "-", "2", ":", "]", ")", ".", "to", "(", "torch", ".", "bool", ")", "[", "0", "]", "\n", "out", "[", "name", "]", "=", "NestedTensor", "(", "x", ",", "mask", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.backbone.Backbone.__init__": [[82, 94], ["backbone.BackboneBase.__init__", "getattr", "lib.utils.misc.is_main_process"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.is_main_process"], ["def", "__init__", "(", "self", ",", "name", ":", "str", ",", "\n", "train_backbone", ":", "bool", ",", "\n", "return_interm_layers", ":", "bool", ",", "\n", "dilation", ":", "bool", ",", "\n", "freeze_bn", ":", "bool", ")", ":", "\n", "        ", "norm_layer", "=", "FrozenBatchNorm2d", "if", "freeze_bn", "else", "nn", ".", "BatchNorm2d", "\n", "# here is different from the original DETR because we use feature from block3", "\n", "backbone", "=", "getattr", "(", "resnet_module", ",", "name", ")", "(", "\n", "replace_stride_with_dilation", "=", "[", "False", ",", "dilation", ",", "False", "]", ",", "\n", "pretrained", "=", "is_main_process", "(", ")", ",", "norm_layer", "=", "norm_layer", ",", "last_layer", "=", "'layer3'", ")", "\n", "num_channels", "=", "256", "if", "name", "in", "(", "'resnet18'", ",", "'resnet34'", ")", "else", "1024", "\n", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "train_backbone", ",", "num_channels", ",", "return_interm_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.backbone.Joiner.__init__": [[97, 99], ["torch.nn.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "position_embedding", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "position_embedding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.backbone.Joiner.forward": [[100, 110], ["xs.items", "out.append", "pos.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensor_list", ":", "NestedTensor", ",", "mode", "=", "None", ")", ":", "\n", "        ", "xs", "=", "self", "[", "0", "]", "(", "tensor_list", ")", "\n", "out", ":", "List", "[", "NestedTensor", "]", "=", "[", "]", "\n", "pos", "=", "[", "]", "\n", "for", "name", ",", "x", "in", "xs", ".", "items", "(", ")", ":", "\n", "            ", "out", ".", "append", "(", "x", ")", "\n", "# position encoding", "\n", "pos", ".", "append", "(", "self", "[", "1", "]", "(", "x", ")", ".", "to", "(", "x", ".", "tensors", ".", "dtype", ")", ")", "\n", "\n", "", "return", "out", ",", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.backbone.build_backbone": [[112, 121], ["position_encoding.build_position_encoding", "backbone.Backbone", "backbone.Joiner"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.position_encoding.build_position_encoding"], ["", "", "def", "build_backbone", "(", "cfg", ")", ":", "\n", "    ", "position_embedding", "=", "build_position_encoding", "(", "cfg", ")", "\n", "train_backbone", "=", "cfg", ".", "TRAIN", ".", "BACKBONE_MULTIPLIER", ">", "0", "\n", "return_interm_layers", "=", "cfg", ".", "MODEL", ".", "PREDICT_MASK", "\n", "backbone", "=", "Backbone", "(", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "TYPE", ",", "train_backbone", ",", "return_interm_layers", ",", "\n", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "DILATION", ",", "cfg", ".", "TRAIN", ".", "FREEZE_BACKBONE_BN", ")", "\n", "model", "=", "Joiner", "(", "backbone", ",", "position_embedding", ")", "\n", "model", ".", "num_channels", "=", "backbone", ".", "num_channels", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.train._init_paths.add_path": [[9, 12], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.train.base_functions.update_settings": [[9, 23], ["None"], "function", ["None"], ["def", "update_settings", "(", "settings", ",", "cfg", ")", ":", "\n", "    ", "settings", ".", "print_interval", "=", "cfg", ".", "TRAIN", ".", "PRINT_INTERVAL", "\n", "settings", ".", "search_area_factor", "=", "{", "'template'", ":", "cfg", ".", "DATA", ".", "TEMPLATE", ".", "FACTOR", ",", "\n", "'search'", ":", "cfg", ".", "DATA", ".", "SEARCH", ".", "FACTOR", "}", "\n", "settings", ".", "output_sz", "=", "{", "'template'", ":", "cfg", ".", "DATA", ".", "TEMPLATE", ".", "SIZE", ",", "\n", "'search'", ":", "cfg", ".", "DATA", ".", "SEARCH", ".", "SIZE", "}", "\n", "settings", ".", "center_jitter_factor", "=", "{", "'template'", ":", "cfg", ".", "DATA", ".", "TEMPLATE", ".", "CENTER_JITTER", ",", "\n", "'search'", ":", "cfg", ".", "DATA", ".", "SEARCH", ".", "CENTER_JITTER", "}", "\n", "settings", ".", "scale_jitter_factor", "=", "{", "'template'", ":", "cfg", ".", "DATA", ".", "TEMPLATE", ".", "SCALE_JITTER", ",", "\n", "'search'", ":", "cfg", ".", "DATA", ".", "SEARCH", ".", "SCALE_JITTER", "}", "\n", "settings", ".", "grad_clip_norm", "=", "cfg", ".", "TRAIN", ".", "GRAD_CLIP_NORM", "\n", "settings", ".", "print_stats", "=", "None", "\n", "settings", ".", "batchsize", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "\n", "settings", ".", "scheduler_type", "=", "cfg", ".", "TRAIN", ".", "SCHEDULER", ".", "TYPE", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.train.base_functions.names2datasets": [[25, 75], ["isinstance", "print", "datasets.append", "datasets.append", "print", "datasets.append", "datasets.append", "print", "datasets.append", "datasets.append", "print", "datasets.append", "datasets.append", "print", "datasets.append", "datasets.append", "print", "datasets.append", "datasets.append", "print", "datasets.append", "datasets.append", "lib.train.dataset.Lasot_lmdb", "lib.train.dataset.Lasot", "lib.train.dataset.Got10k_lmdb", "lib.train.dataset.Got10k", "lib.train.dataset.Got10k_lmdb", "lib.train.dataset.Got10k", "lib.train.dataset.Got10k_lmdb", "lib.train.dataset.Got10k", "lib.train.dataset.MSCOCOSeq_lmdb", "lib.train.dataset.MSCOCOSeq", "lib.train.dataset.ImagenetVID_lmdb", "lib.train.dataset.ImagenetVID", "lib.train.dataset.TrackingNet_lmdb", "lib.train.dataset.TrackingNet", "lib.train.data.opencv_loader", "lib.train.data.opencv_loader"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.image_loader.opencv_loader", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.image_loader.opencv_loader"], ["", "def", "names2datasets", "(", "name_list", ":", "list", ",", "settings", ",", "image_loader", ")", ":", "\n", "    ", "assert", "isinstance", "(", "name_list", ",", "list", ")", "\n", "datasets", "=", "[", "]", "\n", "for", "name", "in", "name_list", ":", "\n", "        ", "assert", "name", "in", "[", "\"LASOT\"", ",", "\"GOT10K_vottrain\"", ",", "\"GOT10K_votval\"", ",", "\"GOT10K_train_full\"", ",", "\"COCO17\"", ",", "\"VID\"", ",", "\"TRACKINGNET\"", "]", "\n", "\n", "if", "name", "==", "\"LASOT\"", ":", "\n", "            ", "if", "settings", ".", "use_lmdb", ":", "\n", "                ", "print", "(", "\"Building lasot dataset from lmdb\"", ")", "\n", "datasets", ".", "append", "(", "Lasot_lmdb", "(", "settings", ".", "env", ".", "lasot_lmdb_dir", ",", "split", "=", "'train'", ",", "image_loader", "=", "image_loader", ")", ")", "\n", "", "else", ":", "\n", "                ", "datasets", ".", "append", "(", "Lasot", "(", "settings", ".", "env", ".", "lasot_dir", ",", "split", "=", "'train'", ",", "image_loader", "=", "image_loader", ")", ")", "\n", "", "", "if", "name", "==", "\"GOT10K_vottrain\"", ":", "\n", "            ", "if", "settings", ".", "use_lmdb", ":", "\n", "                ", "print", "(", "\"Building got10k from lmdb\"", ")", "\n", "datasets", ".", "append", "(", "Got10k_lmdb", "(", "settings", ".", "env", ".", "got10k_lmdb_dir", ",", "split", "=", "'vottrain'", ",", "image_loader", "=", "image_loader", ")", ")", "\n", "", "else", ":", "\n", "                ", "datasets", ".", "append", "(", "Got10k", "(", "settings", ".", "env", ".", "got10k_dir", ",", "split", "=", "'vottrain'", ",", "image_loader", "=", "image_loader", ")", ")", "\n", "", "", "if", "name", "==", "\"GOT10K_train_full\"", ":", "\n", "            ", "if", "settings", ".", "use_lmdb", ":", "\n", "                ", "print", "(", "\"Building got10k_train_full from lmdb\"", ")", "\n", "datasets", ".", "append", "(", "Got10k_lmdb", "(", "settings", ".", "env", ".", "got10k_lmdb_dir", ",", "split", "=", "'train_full'", ",", "image_loader", "=", "image_loader", ")", ")", "\n", "", "else", ":", "\n", "                ", "datasets", ".", "append", "(", "Got10k", "(", "settings", ".", "env", ".", "got10k_dir", ",", "split", "=", "'train_full'", ",", "image_loader", "=", "image_loader", ")", ")", "\n", "", "", "if", "name", "==", "\"GOT10K_votval\"", ":", "\n", "            ", "if", "settings", ".", "use_lmdb", ":", "\n", "                ", "print", "(", "\"Building got10k from lmdb\"", ")", "\n", "datasets", ".", "append", "(", "Got10k_lmdb", "(", "settings", ".", "env", ".", "got10k_lmdb_dir", ",", "split", "=", "'votval'", ",", "image_loader", "=", "image_loader", ")", ")", "\n", "", "else", ":", "\n", "                ", "datasets", ".", "append", "(", "Got10k", "(", "settings", ".", "env", ".", "got10k_dir", ",", "split", "=", "'votval'", ",", "image_loader", "=", "image_loader", ")", ")", "\n", "", "", "if", "name", "==", "\"COCO17\"", ":", "\n", "            ", "if", "settings", ".", "use_lmdb", ":", "\n", "                ", "print", "(", "\"Building COCO2017 from lmdb\"", ")", "\n", "datasets", ".", "append", "(", "MSCOCOSeq_lmdb", "(", "settings", ".", "env", ".", "coco_lmdb_dir", ",", "version", "=", "\"2017\"", ",", "image_loader", "=", "image_loader", ")", ")", "\n", "", "else", ":", "\n", "                ", "datasets", ".", "append", "(", "MSCOCOSeq", "(", "settings", ".", "env", ".", "coco_dir", ",", "version", "=", "\"2017\"", ",", "image_loader", "=", "image_loader", ")", ")", "\n", "", "", "if", "name", "==", "\"VID\"", ":", "\n", "            ", "if", "settings", ".", "use_lmdb", ":", "\n", "                ", "print", "(", "\"Building VID from lmdb\"", ")", "\n", "datasets", ".", "append", "(", "ImagenetVID_lmdb", "(", "settings", ".", "env", ".", "imagenet_lmdb_dir", ",", "image_loader", "=", "image_loader", ")", ")", "\n", "", "else", ":", "\n", "                ", "datasets", ".", "append", "(", "ImagenetVID", "(", "settings", ".", "env", ".", "imagenet_dir", ",", "image_loader", "=", "image_loader", ")", ")", "\n", "", "", "if", "name", "==", "\"TRACKINGNET\"", ":", "\n", "            ", "if", "settings", ".", "use_lmdb", ":", "\n", "                ", "print", "(", "\"Building TrackingNet from lmdb\"", ")", "\n", "datasets", ".", "append", "(", "TrackingNet_lmdb", "(", "settings", ".", "env", ".", "trackingnet_lmdb_dir", ",", "image_loader", "=", "image_loader", ")", ")", "\n", "", "else", ":", "\n", "# raise ValueError(\"NOW WE CAN ONLY USE TRACKINGNET FROM LMDB\")", "\n", "                ", "datasets", ".", "append", "(", "TrackingNet", "(", "settings", ".", "env", ".", "trackingnet_dir", ",", "image_loader", "=", "image_loader", ")", ")", "\n", "", "", "", "return", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.train.base_functions.build_dataloaders": [[77, 148], ["lib.Transform", "lib.Transform", "lib.Transform", "lib.train.data.processing.STARKProcessing", "lib.train.data.processing.STARKProcessing", "getattr", "getattr", "getattr", "getattr", "print", "lib.train.data.sampler.TrackingSampler", "lib.train.data.LTRLoader", "lib.train.data.sampler.TrackingSampler", "lib.train.data.LTRLoader", "lib.ToGrayscale", "lib.RandomHorizontalFlip", "lib.ToTensorAndJitter", "lib.RandomHorizontalFlip_Norm", "lib.Normalize", "lib.ToTensor", "lib.Normalize", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "base_functions.names2datasets", "base_functions.names2datasets"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.train.base_functions.names2datasets", "home.repos.pwc.inspect_result.skyesong38_cswintt.train.base_functions.names2datasets"], ["", "def", "build_dataloaders", "(", "cfg", ",", "settings", ")", ":", "\n", "# Data transform", "\n", "    ", "transform_joint", "=", "tfm", ".", "Transform", "(", "tfm", ".", "ToGrayscale", "(", "probability", "=", "0.05", ")", ",", "\n", "tfm", ".", "RandomHorizontalFlip", "(", "probability", "=", "0.5", ")", "\n", ")", "\n", "# transform_joint = tfm.Transform(tfm.ToGrayscale(probability=0))", "\n", "\n", "transform_train", "=", "tfm", ".", "Transform", "(", "tfm", ".", "ToTensorAndJitter", "(", "0.2", ")", ",", "\n", "tfm", ".", "RandomHorizontalFlip_Norm", "(", "probability", "=", "0.5", ")", ",", "\n", "tfm", ".", "Normalize", "(", "mean", "=", "cfg", ".", "DATA", ".", "MEAN", ",", "std", "=", "cfg", ".", "DATA", ".", "STD", ")", ")", "\n", "\n", "# transform_train = tfm.Transform(tfm.ToTensorAndJitter(),", "\n", "#                                 tfm.Normalize(mean=cfg.DATA.MEAN, std=cfg.DATA.STD))", "\n", "\n", "transform_val", "=", "tfm", ".", "Transform", "(", "tfm", ".", "ToTensor", "(", ")", ",", "\n", "tfm", ".", "Normalize", "(", "mean", "=", "cfg", ".", "DATA", ".", "MEAN", ",", "std", "=", "cfg", ".", "DATA", ".", "STD", ")", ")", "\n", "\n", "# The tracking pairs processing module", "\n", "output_sz", "=", "settings", ".", "output_sz", "\n", "search_area_factor", "=", "settings", ".", "search_area_factor", "\n", "\n", "data_processing_train", "=", "processing", ".", "STARKProcessing", "(", "search_area_factor", "=", "search_area_factor", ",", "\n", "output_sz", "=", "output_sz", ",", "\n", "center_jitter_factor", "=", "settings", ".", "center_jitter_factor", ",", "\n", "scale_jitter_factor", "=", "settings", ".", "scale_jitter_factor", ",", "\n", "mode", "=", "'sequence'", ",", "\n", "transform", "=", "transform_train", ",", "\n", "joint_transform", "=", "transform_joint", ",", "\n", "settings", "=", "settings", ")", "\n", "\n", "data_processing_val", "=", "processing", ".", "STARKProcessing", "(", "search_area_factor", "=", "search_area_factor", ",", "\n", "output_sz", "=", "output_sz", ",", "\n", "center_jitter_factor", "=", "settings", ".", "center_jitter_factor", ",", "\n", "scale_jitter_factor", "=", "settings", ".", "scale_jitter_factor", ",", "\n", "mode", "=", "'sequence'", ",", "\n", "transform", "=", "transform_val", ",", "\n", "joint_transform", "=", "transform_joint", ",", "\n", "settings", "=", "settings", ")", "\n", "\n", "# Train sampler and loader", "\n", "settings", ".", "num_template", "=", "getattr", "(", "cfg", ".", "DATA", ".", "TEMPLATE", ",", "\"NUMBER\"", ",", "1", ")", "\n", "settings", ".", "num_search", "=", "getattr", "(", "cfg", ".", "DATA", ".", "SEARCH", ",", "\"NUMBER\"", ",", "1", ")", "\n", "sampler_mode", "=", "getattr", "(", "cfg", ".", "DATA", ",", "\"SAMPLER_MODE\"", ",", "\"causal\"", ")", "\n", "train_cls", "=", "getattr", "(", "cfg", ".", "TRAIN", ",", "\"TRAIN_CLS\"", ",", "False", ")", "\n", "print", "(", "\"sampler_mode\"", ",", "sampler_mode", ")", "\n", "dataset_train", "=", "sampler", ".", "TrackingSampler", "(", "datasets", "=", "names2datasets", "(", "cfg", ".", "DATA", ".", "TRAIN", ".", "DATASETS_NAME", ",", "settings", ",", "opencv_loader", ")", ",", "\n", "p_datasets", "=", "cfg", ".", "DATA", ".", "TRAIN", ".", "DATASETS_RATIO", ",", "\n", "samples_per_epoch", "=", "cfg", ".", "DATA", ".", "TRAIN", ".", "SAMPLE_PER_EPOCH", ",", "\n", "max_gap", "=", "cfg", ".", "DATA", ".", "MAX_SAMPLE_INTERVAL", ",", "num_search_frames", "=", "settings", ".", "num_search", ",", "\n", "num_template_frames", "=", "settings", ".", "num_template", ",", "processing", "=", "data_processing_train", ",", "\n", "frame_sample_mode", "=", "sampler_mode", ",", "train_cls", "=", "train_cls", ")", "\n", "\n", "train_sampler", "=", "DistributedSampler", "(", "dataset_train", ")", "if", "settings", ".", "local_rank", "!=", "-", "1", "else", "None", "\n", "shuffle", "=", "False", "if", "settings", ".", "local_rank", "!=", "-", "1", "else", "True", "\n", "\n", "loader_train", "=", "LTRLoader", "(", "'train'", ",", "dataset_train", ",", "training", "=", "True", ",", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "cfg", ".", "TRAIN", ".", "NUM_WORKER", ",", "drop_last", "=", "True", ",", "stack_dim", "=", "1", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "# Validation samplers and loaders", "\n", "dataset_val", "=", "sampler", ".", "TrackingSampler", "(", "datasets", "=", "names2datasets", "(", "cfg", ".", "DATA", ".", "VAL", ".", "DATASETS_NAME", ",", "settings", ",", "opencv_loader", ")", ",", "\n", "p_datasets", "=", "cfg", ".", "DATA", ".", "VAL", ".", "DATASETS_RATIO", ",", "\n", "samples_per_epoch", "=", "cfg", ".", "DATA", ".", "VAL", ".", "SAMPLE_PER_EPOCH", ",", "\n", "max_gap", "=", "cfg", ".", "DATA", ".", "MAX_SAMPLE_INTERVAL", ",", "num_search_frames", "=", "settings", ".", "num_search", ",", "\n", "num_template_frames", "=", "settings", ".", "num_template", ",", "processing", "=", "data_processing_val", ",", "\n", "frame_sample_mode", "=", "sampler_mode", ",", "train_cls", "=", "train_cls", ")", "\n", "val_sampler", "=", "DistributedSampler", "(", "dataset_val", ")", "if", "settings", ".", "local_rank", "!=", "-", "1", "else", "None", "\n", "loader_val", "=", "LTRLoader", "(", "'val'", ",", "dataset_val", ",", "training", "=", "False", ",", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "\n", "num_workers", "=", "cfg", ".", "TRAIN", ".", "NUM_WORKER", ",", "drop_last", "=", "True", ",", "stack_dim", "=", "1", ",", "sampler", "=", "val_sampler", ",", "\n", "epoch_interval", "=", "cfg", ".", "TRAIN", ".", "VAL_EPOCH_INTERVAL", ")", "\n", "\n", "return", "loader_train", ",", "loader_val", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.train.base_functions.get_optimizer_scheduler": [[150, 186], ["getattr", "print", "net.named_parameters", "torch.optim.AdamW", "ValueError", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.MultiStepLR", "ValueError", "print", "net.named_parameters", "net.named_parameters", "net.named_parameters"], "function", ["None"], ["", "def", "get_optimizer_scheduler", "(", "net", ",", "cfg", ")", ":", "\n", "    ", "train_cls", "=", "getattr", "(", "cfg", ".", "TRAIN", ",", "\"TRAIN_CLS\"", ",", "False", ")", "\n", "if", "train_cls", ":", "\n", "        ", "print", "(", "\"Only training classification head. Learnable parameters are shown below.\"", ")", "\n", "param_dicts", "=", "[", "\n", "{", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "net", ".", "named_parameters", "(", ")", "if", "\"cls_head\"", "in", "n", "and", "p", ".", "requires_grad", "]", "}", "\n", "]", "\n", "\n", "for", "n", ",", "p", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"cls_head\"", "not", "in", "n", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "", "else", ":", "\n", "                ", "print", "(", "n", ")", "\n", "", "", "", "else", ":", "\n", "        ", "param_dicts", "=", "[", "\n", "{", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "net", ".", "named_parameters", "(", ")", "if", "\"backbone\"", "not", "in", "n", "and", "p", ".", "requires_grad", "]", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "net", ".", "named_parameters", "(", ")", "if", "\"backbone\"", "in", "n", "and", "p", ".", "requires_grad", "]", ",", "\n", "\"lr\"", ":", "cfg", ".", "TRAIN", ".", "LR", "*", "cfg", ".", "TRAIN", ".", "BACKBONE_MULTIPLIER", ",", "\n", "}", ",", "\n", "]", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "OPTIMIZER", "==", "\"ADAMW\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "param_dicts", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LR", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported Optimizer\"", ")", "\n", "", "if", "cfg", ".", "TRAIN", ".", "SCHEDULER", ".", "TYPE", "==", "'step'", ":", "\n", "        ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "cfg", ".", "TRAIN", ".", "LR_DROP_EPOCH", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "SCHEDULER", ".", "TYPE", "==", "\"Mstep\"", ":", "\n", "        ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "cfg", ".", "TRAIN", ".", "SCHEDULER", ".", "MILESTONES", ",", "\n", "gamma", "=", "cfg", ".", "TRAIN", ".", "SCHEDULER", ".", "GAMMA", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported scheduler\"", ")", "\n", "", "return", "optimizer", ",", "lr_scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.train.run_training.init_seeds": [[20, 28], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["def", "init_seeds", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "# torch.cuda.manual_seed_all(seed)", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.train.run_training.run_training": [[29, 69], ["cv2.setNumThreads", "print", "lib.Settings", "os.path.abspath", "os.path.abspath", "os.path.join", "importlib.import_module", "getattr", "getattr.", "print", "os.path.join", "run_training.init_seeds", "run_training.init_seeds", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.train.run_training.init_seeds", "home.repos.pwc.inspect_result.skyesong38_cswintt.train.run_training.init_seeds"], ["", "def", "run_training", "(", "script_name", ",", "config_name", ",", "cudnn_benchmark", "=", "True", ",", "local_rank", "=", "-", "1", ",", "save_dir", "=", "None", ",", "base_seed", "=", "None", ",", "\n", "use_lmdb", "=", "False", ",", "script_name_prv", "=", "None", ",", "config_name_prv", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run the train script.\n    args:\n        script_name: Name of emperiment in the \"experiments/\" folder.\n        config_name: Name of the yaml file in the \"experiments/<script_name>\".\n        cudnn_benchmark: Use cudnn benchmark or not (default is True).\n    \"\"\"", "\n", "if", "save_dir", "is", "None", ":", "\n", "        ", "print", "(", "\"save_dir dir is not given. Use the default dir instead.\"", ")", "\n", "# This is needed to avoid strange crashes related to opencv", "\n", "", "cv", ".", "setNumThreads", "(", "0", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "cudnn_benchmark", "\n", "\n", "print", "(", "'script_name: {}.py  config_name: {}.yaml'", ".", "format", "(", "script_name", ",", "config_name", ")", ")", "\n", "\n", "'''2021.1.5 set seed for different process'''", "\n", "if", "base_seed", "is", "not", "None", ":", "\n", "        ", "if", "local_rank", "!=", "-", "1", ":", "\n", "            ", "init_seeds", "(", "base_seed", "+", "local_rank", ")", "\n", "", "else", ":", "\n", "            ", "init_seeds", "(", "base_seed", ")", "\n", "\n", "", "", "settings", "=", "ws_settings", ".", "Settings", "(", ")", "\n", "settings", ".", "script_name", "=", "script_name", "\n", "settings", ".", "config_name", "=", "config_name", "\n", "settings", ".", "project_path", "=", "'train/{}/{}'", ".", "format", "(", "script_name", ",", "config_name", ")", "\n", "if", "script_name_prv", "is", "not", "None", "and", "config_name_prv", "is", "not", "None", ":", "\n", "        ", "settings", ".", "project_path_prv", "=", "'train/{}/{}'", ".", "format", "(", "script_name_prv", ",", "config_name_prv", ")", "\n", "", "settings", ".", "local_rank", "=", "local_rank", "\n", "settings", ".", "save_dir", "=", "os", ".", "path", ".", "abspath", "(", "save_dir", ")", "\n", "settings", ".", "use_lmdb", "=", "use_lmdb", "\n", "prj_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"../..\"", ")", ")", "\n", "settings", ".", "cfg_file", "=", "os", ".", "path", ".", "join", "(", "prj_dir", ",", "'experiments/%s/%s.yaml'", "%", "(", "script_name", ",", "config_name", ")", ")", "\n", "\n", "expr_module", "=", "importlib", ".", "import_module", "(", "'lib.train.train_script'", ")", "\n", "expr_func", "=", "getattr", "(", "expr_module", ",", "'run'", ")", "\n", "\n", "expr_func", "(", "settings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.train.run_training.main": [[71, 95], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "run_training.run_training", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "os.path.abspath", "os.path.join", "os.getcwd"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.main.train.parse_args", "home.repos.pwc.inspect_result.skyesong38_cswintt.train.run_training.run_training"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Run a train scripts in train_settings.'", ")", "\n", "parser", ".", "add_argument", "(", "'--script'", ",", "type", "=", "str", ",", "default", "=", "\"cswintt\"", ",", "help", "=", "'Name of the train script.'", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ",", "default", "=", "\"baseline_cs\"", ",", "help", "=", "\"Name of the config file.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "'node rank for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--cudnn_benchmark'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'Set cudnn benchmark on (1) or off (0) (default is on).'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"../../output\"", ")", ")", ",", "\n", "help", "=", "'the directory to save checkpoints and logs'", ")", "\n", "# parser.add_argument('--seed', type=int, default=42, help='seed for random numbers')", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "18", ",", "help", "=", "'seed for random numbers'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_lmdb'", ",", "type", "=", "int", ",", "choices", "=", "[", "0", ",", "1", "]", ",", "default", "=", "0", ")", "# whether datasets are in lmdb format", "\n", "parser", ".", "add_argument", "(", "'--script_prv'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'Name of the train script of previous model.'", ")", "\n", "parser", ".", "add_argument", "(", "'--config_prv'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"Name of the config file of previous model.\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "        ", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "0", ")", "\n", "", "run_training", "(", "args", ".", "script", ",", "args", ".", "config", ",", "cudnn_benchmark", "=", "args", ".", "cudnn_benchmark", ",", "\n", "local_rank", "=", "args", ".", "local_rank", ",", "save_dir", "=", "args", ".", "save_dir", ",", "base_seed", "=", "args", ".", "seed", ",", "\n", "use_lmdb", "=", "args", ".", "use_lmdb", ",", "script_name_prv", "=", "args", ".", "script_prv", ",", "config_name_prv", "=", "args", ".", "config_prv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.train.train_script.run": [[12, 73], ["importlib.import_module", "importlib.import_module.update_config_from_file", "update_settings", "os.path.join", "os.path.join", "build_dataloaders", "lib.models.build_cswintt", "torch.nn.parallel.DistributedDataParallel.cuda", "get_optimizer_scheduler", "lib.train.trainers.LTRTrainer", "os.path.exists", "ValueError", "print", "cfg.keys", "torch.nn.parallel.DistributedDataParallel", "torch.device", "torch.device", "lib.train.actors.CSWinTTActor", "ValueError", "lib.train.trainers.LTRTrainer.train", "lib.train.trainers.LTRTrainer.train", "print", "print", "os.path.exists", "os.makedirs", "lib.train.actors.CSWinTT_T_Actor", "ValueError", "torch.nn.BCEWithLogitsLoss"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.config.update_config_from_file", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.update_settings", "home.repos.pwc.inspect_result.skyesong38_cswintt.train.base_functions.build_dataloaders", "home.repos.pwc.inspect_result.skyesong38_cswintt.cswintt.cswintt.build_cswintt", "home.repos.pwc.inspect_result.skyesong38_cswintt.train.base_functions.get_optimizer_scheduler", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.train", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.train"], ["def", "run", "(", "settings", ")", ":", "\n", "\n", "# update the default configs with config file", "\n", "\t", "if", "not", "os", ".", "path", ".", "exists", "(", "settings", ".", "cfg_file", ")", ":", "\n", "\t\t", "raise", "ValueError", "(", "\"%s doesn't exist.\"", "%", "settings", ".", "cfg_file", ")", "\n", "", "config_module", "=", "importlib", ".", "import_module", "(", "\"lib.config.%s.config\"", "%", "settings", ".", "script_name", ")", "\n", "cfg", "=", "config_module", ".", "cfg", "\n", "config_module", ".", "update_config_from_file", "(", "settings", ".", "cfg_file", ")", "\n", "if", "settings", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "\t\t", "print", "(", "\"New configuration is shown below.\"", ")", "\n", "for", "key", "in", "cfg", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "print", "(", "\"%s configuration:\"", "%", "key", ",", "cfg", "[", "key", "]", ")", "\n", "print", "(", "'\\n'", ")", "\n", "\n", "# update settings based on cfg", "\n", "", "", "update_settings", "(", "settings", ",", "cfg", ")", "\n", "\n", "# Record the training log", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "settings", ".", "save_dir", ",", "'logs'", ")", "\n", "if", "settings", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "", "settings", ".", "log_file", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"%s-%s.log\"", "%", "(", "settings", ".", "script_name", ",", "settings", ".", "config_name", ")", ")", "\n", "\n", "# Build dataloaders", "\n", "loader_train", ",", "loader_val", "=", "build_dataloaders", "(", "cfg", ",", "settings", ")", "\n", "# Create network", "\n", "net", "=", "build_cswintt", "(", "cfg", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "\n", "# wrap networks to distributed one", "\n", "if", "settings", ".", "local_rank", "!=", "-", "1", ":", "\n", "\t\t", "net", "=", "DDP", "(", "net", ",", "device_ids", "=", "[", "settings", ".", "local_rank", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "settings", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "settings", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "\t\t", "settings", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n", "# Loss functions and Actors", "\n", "", "if", "settings", ".", "script_name", "==", "\"cswintt\"", ":", "\n", "\t\t", "objective", "=", "{", "'giou'", ":", "giou_loss", ",", "'l1'", ":", "l1_loss", "}", "\n", "loss_weight", "=", "{", "'giou'", ":", "cfg", ".", "TRAIN", ".", "GIOU_WEIGHT", ",", "'l1'", ":", "cfg", ".", "TRAIN", ".", "L1_WEIGHT", "}", "\n", "actor", "=", "CSWinTTActor", "(", "net", "=", "net", ",", "objective", "=", "objective", ",", "loss_weight", "=", "loss_weight", ",", "settings", "=", "settings", ")", "\n", "", "elif", "settings", ".", "script_name", "==", "\"cswintt_cls\"", ":", "\n", "\t\t", "objective", "=", "{", "'cls'", ":", "BCEWithLogitsLoss", "(", ")", "}", "\n", "loss_weight", "=", "{", "'cls'", ":", "1.0", "}", "\n", "actor", "=", "CSWinTT_T_Actor", "(", "net", "=", "net", ",", "objective", "=", "objective", ",", "loss_weight", "=", "loss_weight", ",", "settings", "=", "settings", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "ValueError", "(", "\"illegal script name\"", ")", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "DEEP_SUPERVISION", ":", "\n", "\t\t", "raise", "ValueError", "(", "\"Deep supervision is not supported now.\"", ")", "\n", "\n", "# Optimizer, parameters, and learning rates", "\n", "", "optimizer", ",", "lr_scheduler", "=", "get_optimizer_scheduler", "(", "net", ",", "cfg", ")", "\n", "\n", "trainer", "=", "LTRTrainer", "(", "actor", ",", "[", "loader_train", ",", "loader_val", "]", ",", "optimizer", ",", "settings", ",", "lr_scheduler", ")", "\n", "\n", "if", "settings", ".", "script_name", "==", "\"cswintt\"", ":", "\n", "\t\t", "trainer", ".", "train", "(", "cfg", ".", "TRAIN", ".", "EPOCH", ",", "load_latest", "=", "False", ",", "fail_safe", "=", "True", ")", "\n", "", "else", ":", "\n", "\t\t", "trainer", ".", "train", "(", "cfg", ".", "TRAIN", ".", "EPOCH", ",", "load_latest", "=", "True", ",", "fail_safe", "=", "True", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.tensorboard.TensorboardWriter.__init__": [[11, 14], ["collections.OrderedDict", "SummaryWriter", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "directory", ",", "loader_names", ")", ":", "\n", "        ", "self", ".", "directory", "=", "directory", "\n", "self", ".", "writer", "=", "OrderedDict", "(", "{", "name", ":", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "name", ")", ")", "for", "name", "in", "loader_names", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.tensorboard.TensorboardWriter.write_info": [[15, 20], ["SummaryWriter", "SummaryWriter.add_text", "SummaryWriter.add_text", "SummaryWriter.close", "os.path.join"], "methods", ["None"], ["", "def", "write_info", "(", "self", ",", "script_name", ",", "description", ")", ":", "\n", "        ", "tb_info_writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'info'", ")", ")", "\n", "tb_info_writer", ".", "add_text", "(", "'Script_name'", ",", "script_name", ")", "\n", "tb_info_writer", ".", "add_text", "(", "'Description'", ",", "description", ")", "\n", "tb_info_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.tensorboard.TensorboardWriter.write_epoch": [[21, 28], ["stats.items", "loader_stats.items", "hasattr", "getattr", "tensorboard.TensorboardWriter.writer[].add_scalar"], "methods", ["None"], ["", "def", "write_epoch", "(", "self", ",", "stats", ":", "OrderedDict", ",", "epoch", ":", "int", ",", "ind", "=", "-", "1", ")", ":", "\n", "        ", "for", "loader_name", ",", "loader_stats", "in", "stats", ".", "items", "(", ")", ":", "\n", "            ", "if", "loader_stats", "is", "None", ":", "\n", "                ", "continue", "\n", "", "for", "var_name", ",", "val", "in", "loader_stats", ".", "items", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "val", ",", "'history'", ")", "and", "getattr", "(", "val", ",", "'has_new_data'", ",", "True", ")", ":", "\n", "                    ", "self", ".", "writer", "[", "loader_name", "]", ".", "add_scalar", "(", "var_name", ",", "val", ".", "history", "[", "ind", "]", ",", "epoch", ")", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.multigpu.MultiGPU.__getattr__": [[10, 16], ["getattr", "super().__getattr__"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.multigpu.MultiGPU.__getattr__"], ["    ", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "super", "(", ")", ".", "__getattr__", "(", "item", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "return", "getattr", "(", "self", ".", "module", ",", "item", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.multigpu.is_multi_gpu": [[5, 7], ["isinstance"], "function", ["None"], ["def", "is_multi_gpu", "(", "net", ")", ":", "\n", "    ", "return", "isinstance", "(", "net", ",", "(", "MultiGPU", ",", "nn", ".", "parallel", ".", "distributed", ".", "DistributedDataParallel", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.settings.Settings.__init__": [[6, 8], ["settings.Settings.set_default"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.settings.Settings.set_default"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "set_default", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.settings.Settings.set_default": [[9, 12], ["lib.train.admin.environment.env_settings"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings"], ["", "def", "set_default", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", "=", "env_settings", "(", ")", "\n", "self", ".", "use_gpu", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.StatValue.__init__": [[4, 6], ["stats.StatValue.clear"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.clear"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.StatValue.reset": [[7, 9], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.StatValue.clear": [[10, 13], ["stats.StatValue.reset"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.reset"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "self", ".", "history", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.StatValue.update": [[14, 17], ["stats.StatValue.history.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "history", ".", "append", "(", "self", ".", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.__init__": [[21, 24], ["stats.AverageMeter.clear"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.clear"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "clear", "(", ")", "\n", "self", ".", "has_new_data", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.reset": [[25, 30], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "avg", "=", "0", "\n", "self", ".", "val", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.clear": [[31, 34], ["stats.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.reset"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "self", ".", "history", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update": [[35, 40], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.new_epoch": [[41, 48], ["stats.AverageMeter.history.append", "stats.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.reset"], ["", "def", "new_epoch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "count", ">", "0", ":", "\n", "            ", "self", ".", "history", ".", "append", "(", "self", ".", "avg", ")", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "has_new_data", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "has_new_data", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.topk_accuracy": [[50, 72], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "isinstance", "target.view().expand_as", "res.append", "correct[].view().float().sum", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "", "", "def", "topk_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "single_input", "=", "not", "isinstance", "(", "topk", ",", "(", "tuple", ",", "list", ")", ")", "\n", "if", "single_input", ":", "\n", "        ", "topk", "=", "(", "topk", ",", ")", "\n", "\n", "", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "res", ".", "append", "(", "correct_k", "*", "100.0", "/", "batch_size", ")", "\n", "\n", "", "if", "single_input", ":", "\n", "        ", "return", "res", "[", "0", "]", "\n", "\n", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.create_default_local_file": [[6, 43], ["os.path.join", "collections.OrderedDict", "os.path.dirname", "open", "f.write", "f.write", "collections.OrderedDict.items", "f.write", "f.write"], "function", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "test_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'..'", ")", ")", "\n", "\n", "self", ".", "results_path", "=", "'{}/tracking_results/'", ".", "format", "(", "test_path", ")", "\n", "self", ".", "segmentation_path", "=", "'{}/segmentation_results/'", ".", "format", "(", "test_path", ")", "\n", "self", ".", "network_path", "=", "'{}/networks/'", ".", "format", "(", "test_path", ")", "\n", "self", ".", "result_plot_path", "=", "'{}/result_plots/'", ".", "format", "(", "test_path", ")", "\n", "self", ".", "otb_path", "=", "''", "\n", "self", ".", "nfs_path", "=", "''", "\n", "self", ".", "uav_path", "=", "''", "\n", "self", ".", "tpl_path", "=", "''", "\n", "self", ".", "vot_path", "=", "''", "\n", "self", ".", "got10k_path", "=", "''", "\n", "self", ".", "lasot_path", "=", "''", "\n", "self", ".", "trackingnet_path", "=", "''", "\n", "self", ".", "davis_dir", "=", "''", "\n", "self", ".", "youtubevos_dir", "=", "''", "\n", "\n", "self", ".", "got_packed_results_path", "=", "''", "\n", "self", ".", "got_reports_path", "=", "''", "\n", "self", ".", "tn_packed_results_path", "=", "''", "\n", "\n", "\n", "", "", "def", "create_default_local_file", "(", ")", ":", "\n", "    ", "comment", "=", "{", "'results_path'", ":", "'Where to store tracking results'", ",", "\n", "'network_path'", ":", "'Where tracking networks are stored.'", "}", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'local.py'", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "settings", "=", "EnvSettings", "(", ")", "\n", "\n", "f", ".", "write", "(", "'from test.evaluation.environment import EnvSettings\\n\\n'", ")", "\n", "f", ".", "write", "(", "'def local_env_settings():\\n'", ")", "\n", "f", ".", "write", "(", "'    settings = EnvSettings()\\n\\n'", ")", "\n", "f", ".", "write", "(", "'    # Set your local paths here.\\n\\n'", ")", "\n", "\n", "for", "attr", "in", "dir", "(", "settings", ")", ":", "\n", "            ", "comment_str", "=", "None", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.create_default_local_file_ITP_train": [[45, 90], ["os.path.join", "collections.OrderedDict", "os.path.dirname", "open", "f.write", "f.write", "collections.OrderedDict.items", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "f.write", "f.write", "f.write"], "function", ["None"], ["                ", "comment_str", "=", "comment", "[", "attr", "]", "\n", "", "attr_val", "=", "getattr", "(", "settings", ",", "attr", ")", "\n", "if", "not", "attr", ".", "startswith", "(", "'__'", ")", "and", "not", "callable", "(", "attr_val", ")", ":", "\n", "                ", "if", "comment_str", "is", "None", ":", "\n", "                    ", "f", ".", "write", "(", "'    settings.{} = \\'{}\\'\\n'", ".", "format", "(", "attr", ",", "attr_val", ")", ")", "\n", "", "else", ":", "\n", "                    ", "f", ".", "write", "(", "'    settings.{} = \\'{}\\'    # {}\\n'", ".", "format", "(", "attr", ",", "attr_val", ",", "comment_str", ")", ")", "\n", "", "", "", "f", ".", "write", "(", "'\\n    return settings\\n\\n'", ")", "\n", "\n", "\n", "", "", "class", "EnvSettings_ITP", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "workspace_dir", ",", "data_dir", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "prj_dir", "=", "workspace_dir", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "self", ".", "results_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test/tracking_results'", ")", "\n", "self", ".", "segmentation_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test/segmentation_results'", ")", "\n", "self", ".", "network_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test/networks'", ")", "\n", "self", ".", "result_plot_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test/result_plots'", ")", "\n", "self", ".", "otb_path", "=", "''", "\n", "self", ".", "nfs_path", "=", "''", "\n", "self", ".", "uav_path", "=", "''", "\n", "self", ".", "tpl_path", "=", "''", "\n", "self", ".", "vot_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'VOT2019'", ")", "\n", "self", ".", "got10k_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'got10k'", ")", "\n", "self", ".", "got10k_lmdb_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'got10k_lmdb'", ")", "\n", "self", ".", "lasot_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'lasot'", ")", "\n", "self", ".", "lasot_lmdb_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'lasot_lmdb'", ")", "\n", "self", ".", "trackingnet_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'trackingNet'", ")", "\n", "self", ".", "davis_dir", "=", "''", "\n", "self", ".", "youtubevos_dir", "=", "''", "\n", "\n", "self", ".", "got_packed_results_path", "=", "''", "\n", "self", ".", "got_reports_path", "=", "''", "\n", "self", ".", "tn_packed_results_path", "=", "''", "\n", "\n", "\n", "", "", "def", "create_default_local_file_ITP_test", "(", "workspace_dir", ",", "data_dir", ",", "save_dir", ")", ":", "\n", "    ", "comment", "=", "{", "'results_path'", ":", "'Where to store tracking results'", ",", "\n", "'network_path'", ":", "'Where tracking networks are stored.'", "}", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'local.py'", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "settings", "=", "EnvSettings_ITP", "(", "workspace_dir", ",", "data_dir", ",", "save_dir", ")", "\n", "\n", "f", ".", "write", "(", "'from lib.test.evaluation.environment import EnvSettings\\n\\n'", ")", "\n", "f", ".", "write", "(", "'def local_env_settings():\\n'", ")", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings": [[92, 102], ["importlib.import_module", "importlib.import_module.EnvironmentSettings", "os.path.join", "environment.create_default_local_file", "RuntimeError", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.create_default_local_file"], ["f", ".", "write", "(", "'    # Set your local paths here.\\n\\n'", ")", "\n", "\n", "for", "attr", "in", "dir", "(", "settings", ")", ":", "\n", "            ", "comment_str", "=", "None", "\n", "if", "attr", "in", "comment", ":", "\n", "                ", "comment_str", "=", "comment", "[", "attr", "]", "\n", "", "attr_val", "=", "getattr", "(", "settings", ",", "attr", ")", "\n", "if", "not", "attr", ".", "startswith", "(", "'__'", ")", "and", "not", "callable", "(", "attr_val", ")", ":", "\n", "                ", "if", "comment_str", "is", "None", ":", "\n", "                    ", "f", ".", "write", "(", "'    settings.{} = \\'{}\\'\\n'", ".", "format", "(", "attr", ",", "attr_val", ")", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.local.EnvironmentSettings.__init__": [[2, 27], ["None"], "methods", ["None"], ["\n", "def", "local_env_settings", "(", ")", ":", "\n", "    ", "settings", "=", "EnvSettings", "(", ")", "\n", "\n", "# Set your local paths here.", "\n", "workspace_root", "=", "''", "\n", "data_root", "=", "''", "\n", "\n", "settings", ".", "davis_dir", "=", "''", "\n", "settings", ".", "got10k_lmdb_path", "=", "data_root", "+", "'got10k_lmdb'", "\n", "settings", ".", "got10k_path", "=", "data_root", "+", "'got-10k'", "\n", "settings", ".", "got_packed_results_path", "=", "''", "\n", "settings", ".", "got_reports_path", "=", "''", "\n", "settings", ".", "lasot_lmdb_path", "=", "data_root", "+", "'lasot_lmdb'", "\n", "settings", ".", "lasot_path", "=", "data_root", "+", "'LaSOT'", "\n", "settings", ".", "network_path", "=", "workspace_root", "+", "'output/test/networks'", "# Where tracking networks are stored.", "\n", "settings", ".", "nfs_path", "=", "''", "\n", "settings", ".", "otb_path", "=", "data_root", "+", "'OTB'", "\n", "settings", ".", "prj_dir", "=", "workspace_root", "\n", "settings", ".", "result_plot_path", "=", "workspace_root", "+", "'output/test/result_plots'", "\n", "settings", ".", "results_path", "=", "workspace_root", "+", "'output/test/tracking_results'", "# Where to store tracking results", "\n", "settings", ".", "save_dir", "=", "workspace_root", "+", "'output'", "\n", "settings", ".", "segmentation_path", "=", "workspace_root", "+", "'output/test/segmentation_results'", "\n", "settings", ".", "tn_packed_results_path", "=", "''", "\n", "settings", ".", "tpl_path", "=", "''", "\n", "settings", ".", "trackingnet_path", "=", "data_root", "+", "'TrackingNet'", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net_lmdb.TrackingNet_lmdb.__init__": [[41, 71], ["base_video_dataset.BaseVideoDataset.__init__", "tracking_net_lmdb.list_sequences", "tracking_net_lmdb.TrackingNet_lmdb._load_class_info", "list", "tracking_net_lmdb.TrackingNet_lmdb.class_list.sort", "random.sample", "tracking_net_lmdb.TrackingNet_lmdb.seq_per_class.keys", "lib.train.admin.env_settings", "int", "range", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.list_sequences", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.TrackingNet._load_class_info", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "jpeg4py_loader", ",", "set_ids", "=", "None", ",", "data_fraction", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root        - The path to the TrackingNet folder, containing the training sets.\n            image_loader (jpeg4py_loader) -  The function to read the images. jpeg4py (https://github.com/ajkxyz/jpeg4py)\n                                            is used by default.\n            set_ids (None) - List containing the ids of the TrackingNet sets to be used for training. If None, all the\n                            sets (0 - 11) will be used.\n            data_fraction - Fraction of dataset to be used. The complete dataset is used by default\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "trackingnet_lmdb_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "'TrackingNet_lmdb'", ",", "root", ",", "image_loader", ")", "\n", "\n", "if", "set_ids", "is", "None", ":", "\n", "            ", "set_ids", "=", "[", "i", "for", "i", "in", "range", "(", "12", ")", "]", "\n", "\n", "", "self", ".", "set_ids", "=", "set_ids", "\n", "\n", "# Keep a list of all videos. Sequence list is a list of tuples (set_id, video_name) containing the set_id and", "\n", "# video_name for each sequence", "\n", "self", ".", "sequence_list", "=", "list_sequences", "(", "self", ".", "root", ")", "\n", "\n", "if", "data_fraction", "is", "not", "None", ":", "\n", "            ", "self", ".", "sequence_list", "=", "random", ".", "sample", "(", "self", ".", "sequence_list", ",", "int", "(", "len", "(", "self", ".", "sequence_list", ")", "*", "data_fraction", ")", ")", "\n", "\n", "", "self", ".", "seq_to_class_map", ",", "self", ".", "seq_per_class", "=", "self", ".", "_load_class_info", "(", ")", "\n", "\n", "# we do not have the class_lists for the tracking net", "\n", "self", ".", "class_list", "=", "list", "(", "self", ".", "seq_per_class", ".", "keys", "(", ")", ")", "\n", "self", ".", "class_list", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net_lmdb.TrackingNet_lmdb._load_class_info": [[72, 88], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "enumerate", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "open", "seq_to_class_map.get", "os.path.realpath", "os.path.realpath", "os.path.realpath", "os.path.realpath", "seq_per_class[].append", "seq_class.split", "seq_class.rstrip().split", "seq_class.rstrip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get"], ["", "def", "_load_class_info", "(", "self", ")", ":", "\n", "        ", "ltr_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ")", "\n", "class_map_path", "=", "os", ".", "path", ".", "join", "(", "ltr_path", ",", "'data_specs'", ",", "'trackingnet_classmap.txt'", ")", "\n", "\n", "with", "open", "(", "class_map_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "seq_to_class_map", "=", "{", "seq_class", ".", "split", "(", "'\\t'", ")", "[", "0", "]", ":", "seq_class", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "[", "1", "]", "for", "seq_class", "in", "f", "}", "\n", "\n", "", "seq_per_class", "=", "{", "}", "\n", "for", "i", ",", "seq", "in", "enumerate", "(", "self", ".", "sequence_list", ")", ":", "\n", "            ", "class_name", "=", "seq_to_class_map", ".", "get", "(", "seq", "[", "1", "]", ",", "'Unknown'", ")", "\n", "if", "class_name", "not", "in", "seq_per_class", ":", "\n", "                ", "seq_per_class", "[", "class_name", "]", "=", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "seq_per_class", "[", "class_name", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "return", "seq_to_class_map", ",", "seq_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net_lmdb.TrackingNet_lmdb.get_name": [[89, 91], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'trackingnet_lmdb'", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net_lmdb.TrackingNet_lmdb.has_class_info": [[92, 94], ["None"], "methods", ["None"], ["", "def", "has_class_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net_lmdb.TrackingNet_lmdb.get_sequences_in_class": [[95, 97], ["None"], "methods", ["None"], ["", "def", "get_sequences_in_class", "(", "self", ",", "class_name", ")", ":", "\n", "        ", "return", "self", ".", "seq_per_class", "[", "class_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net_lmdb.TrackingNet_lmdb._read_bb_anno": [[98, 106], ["numpy.array().astype", "torch.tensor", "lib.utils.lmdb_utils.decode_str().split", "list", "map", "numpy.array", "lib.utils.lmdb_utils.decode_str", "line.split", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_str"], ["", "def", "_read_bb_anno", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "set_id", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "0", "]", "\n", "vid_name", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "1", "]", "\n", "gt_str_list", "=", "decode_str", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"TRAIN_%d_lmdb\"", "%", "set_id", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "\"anno\"", ",", "vid_name", "+", "\".txt\"", ")", ")", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]", "\n", "gt_list", "=", "[", "list", "(", "map", "(", "float", ",", "line", ".", "split", "(", "','", ")", ")", ")", "for", "line", "in", "gt_str_list", "]", "\n", "gt_arr", "=", "np", ".", "array", "(", "gt_list", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "torch", ".", "tensor", "(", "gt_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net_lmdb.TrackingNet_lmdb.get_sequence_info": [[107, 113], ["tracking_net_lmdb.TrackingNet_lmdb._read_bb_anno", "valid.clone().byte", "valid.clone"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._read_bb_anno"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "bbox", "=", "self", ".", "_read_bb_anno", "(", "seq_id", ")", "\n", "\n", "valid", "=", "(", "bbox", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "bbox", "[", ":", ",", "3", "]", ">", "0", ")", "\n", "visible", "=", "valid", ".", "clone", "(", ")", ".", "byte", "(", ")", "\n", "return", "{", "'bbox'", ":", "bbox", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net_lmdb.TrackingNet_lmdb._get_frame": [[114, 119], ["lib.utils.lmdb_utils.decode_img", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "str"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_img"], ["", "def", "_get_frame", "(", "self", ",", "seq_id", ",", "frame_id", ")", ":", "\n", "        ", "set_id", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "0", "]", "\n", "vid_name", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "1", "]", "\n", "return", "decode_img", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"TRAIN_%d_lmdb\"", "%", "set_id", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "\"frames\"", ",", "vid_name", ",", "str", "(", "frame_id", ")", "+", "\".jpg\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net_lmdb.TrackingNet_lmdb._get_class": [[120, 123], ["None"], "methods", ["None"], ["", "def", "_get_class", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "seq_name", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "1", "]", "\n", "return", "self", ".", "seq_to_class_map", "[", "seq_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net_lmdb.TrackingNet_lmdb.get_class_name": [[124, 128], ["tracking_net_lmdb.TrackingNet_lmdb._get_class"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_class"], ["", "def", "get_class_name", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "obj_class", "=", "self", ".", "_get_class", "(", "seq_id", ")", "\n", "\n", "return", "obj_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net_lmdb.TrackingNet_lmdb.get_frames": [[129, 148], ["tracking_net_lmdb.TrackingNet_lmdb.items", "tracking_net_lmdb.TrackingNet_lmdb._get_class", "collections.OrderedDict", "tracking_net_lmdb.TrackingNet_lmdb._get_frame", "tracking_net_lmdb.TrackingNet_lmdb.get_sequence_info", "value[].clone"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_class", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID._get_frame", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", ",", "frame_ids", ",", "anno", "=", "None", ")", ":", "\n", "        ", "frame_list", "=", "[", "self", ".", "_get_frame", "(", "seq_id", ",", "f", ")", "for", "f", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "f_id", ",", "...", "]", ".", "clone", "(", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "", "obj_class", "=", "self", ".", "_get_class", "(", "seq_id", ")", "\n", "\n", "object_meta", "=", "OrderedDict", "(", "{", "'object_class_name'", ":", "obj_class", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "\n", "return", "frame_list", ",", "anno_frames", ",", "object_meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net_lmdb.list_sequences": [[15, 28], ["os.path.join", "os.path.join", "open", "json.loads", "f.read"], "function", ["None"], ["def", "list_sequences", "(", "root", ")", ":", "\n", "    ", "\"\"\" Lists all the videos in the input set_ids. Returns a list of tuples (set_id, video_name)\n\n    args:\n        root: Root directory to TrackingNet\n\n    returns:\n        list - list of tuples (set_id, video_name) containing the set_id and video_name for each sequence\n    \"\"\"", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"seq_list.json\"", ")", "\n", "with", "open", "(", "fname", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "sequence_list", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "", "return", "sequence_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb.__init__": [[19, 70], ["base_video_dataset.BaseVideoDataset.__init__", "got10k_lmdb.Got10k_lmdb._get_sequence_list", "got10k_lmdb.Got10k_lmdb._load_meta_info", "got10k_lmdb.Got10k_lmdb._build_seq_per_class", "list", "got10k_lmdb.Got10k_lmdb.class_list.sort", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv().values.tolist", "random.sample", "got10k_lmdb.Got10k_lmdb.seq_per_class.keys", "lib.train.admin.env_settings", "ValueError", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "list", "int", "os.path.realpath", "os.path.realpath", "os.path.realpath", "os.path.realpath", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv", "len", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "ValueError"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_sequence_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k._load_meta_info", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._build_seq_per_class", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "jpeg4py_loader", ",", "split", "=", "None", ",", "seq_ids", "=", "None", ",", "data_fraction", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - path to the got-10k training data. Note: This should point to the 'train' folder inside GOT-10k\n            image_loader (jpeg4py_loader) -  The function to read the images. jpeg4py (https://github.com/ajkxyz/jpeg4py)\n                                            is used by default.\n            split - 'train' or 'val'. Note: The validation split here is a subset of the official got-10k train split,\n                    not NOT the official got-10k validation split. To use the official validation split, provide that as\n                    the root folder instead.\n            seq_ids - List containing the ids of the videos to be used for training. Note: Only one of 'split' or 'seq_ids'\n                        options can be used at the same time.\n            data_fraction - Fraction of dataset to be used. The complete dataset is used by default\n            use_lmdb - whether the dataset is stored in lmdb format\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "got10k_lmdb_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "'GOT10k_lmdb'", ",", "root", ",", "image_loader", ")", "\n", "\n", "# all folders inside the root", "\n", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", ")", "\n", "\n", "# seq_id is the index of the folder inside the got10k root path", "\n", "if", "split", "is", "not", "None", ":", "\n", "            ", "if", "seq_ids", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Cannot set both split_name and seq_ids.'", ")", "\n", "", "train_lib_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "train_lib_path", ",", "'data_specs'", ",", "'got10k_train_split.txt'", ")", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "train_lib_path", ",", "'data_specs'", ",", "'got10k_val_split.txt'", ")", "\n", "", "elif", "split", "==", "'train_full'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "train_lib_path", ",", "'data_specs'", ",", "'got10k_train_full_split.txt'", ")", "\n", "", "elif", "split", "==", "'vottrain'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "train_lib_path", ",", "'data_specs'", ",", "'got10k_vot_train_split.txt'", ")", "\n", "", "elif", "split", "==", "'votval'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "train_lib_path", ",", "'data_specs'", ",", "'got10k_vot_val_split.txt'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown split name.'", ")", "\n", "", "seq_ids", "=", "pandas", ".", "read_csv", "(", "file_path", ",", "header", "=", "None", ",", "squeeze", "=", "True", ",", "dtype", "=", "np", ".", "int64", ")", ".", "values", ".", "tolist", "(", ")", "\n", "", "elif", "seq_ids", "is", "None", ":", "\n", "            ", "seq_ids", "=", "list", "(", "range", "(", "0", ",", "len", "(", "self", ".", "sequence_list", ")", ")", ")", "\n", "\n", "", "self", ".", "sequence_list", "=", "[", "self", ".", "sequence_list", "[", "i", "]", "for", "i", "in", "seq_ids", "]", "\n", "\n", "if", "data_fraction", "is", "not", "None", ":", "\n", "            ", "self", ".", "sequence_list", "=", "random", ".", "sample", "(", "self", ".", "sequence_list", ",", "int", "(", "len", "(", "self", ".", "sequence_list", ")", "*", "data_fraction", ")", ")", "\n", "\n", "", "self", ".", "sequence_meta_info", "=", "self", ".", "_load_meta_info", "(", ")", "\n", "self", ".", "seq_per_class", "=", "self", ".", "_build_seq_per_class", "(", ")", "\n", "\n", "self", ".", "class_list", "=", "list", "(", "self", ".", "seq_per_class", ".", "keys", "(", ")", ")", "\n", "self", ".", "class_list", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb.get_name": [[71, 73], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'got10k_lmdb'", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb.has_class_info": [[74, 76], ["None"], "methods", ["None"], ["", "def", "has_class_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb.has_occlusion_info": [[77, 79], ["None"], "methods", ["None"], ["", "def", "has_occlusion_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb._load_meta_info": [[80, 102], ["collections.OrderedDict", "decode_str", "got10k_lmdb.Got10k_lmdb._load_meta_info._read_meta"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_str", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k._read_meta"], ["", "def", "_load_meta_info", "(", "self", ")", ":", "\n", "        ", "def", "_read_meta", "(", "meta_info", ")", ":", "\n", "\n", "            ", "object_meta", "=", "OrderedDict", "(", "{", "'object_class_name'", ":", "meta_info", "[", "5", "]", ".", "split", "(", "': '", ")", "[", "-", "1", "]", ",", "\n", "'motion_class'", ":", "meta_info", "[", "6", "]", ".", "split", "(", "': '", ")", "[", "-", "1", "]", ",", "\n", "'major_class'", ":", "meta_info", "[", "7", "]", ".", "split", "(", "': '", ")", "[", "-", "1", "]", ",", "\n", "'root_class'", ":", "meta_info", "[", "8", "]", ".", "split", "(", "': '", ")", "[", "-", "1", "]", ",", "\n", "'motion_adverb'", ":", "meta_info", "[", "9", "]", ".", "split", "(", "': '", ")", "[", "-", "1", "]", "}", ")", "\n", "\n", "return", "object_meta", "\n", "", "sequence_meta_info", "=", "{", "}", "\n", "for", "s", "in", "self", ".", "sequence_list", ":", "\n", "            ", "try", ":", "\n", "                ", "meta_str", "=", "decode_str", "(", "self", ".", "root", ",", "\"train/%s/meta_info.ini\"", "%", "s", ")", "\n", "sequence_meta_info", "[", "s", "]", "=", "_read_meta", "(", "meta_str", ".", "split", "(", "'\\n'", ")", ")", "\n", "", "except", ":", "\n", "                ", "sequence_meta_info", "[", "s", "]", "=", "OrderedDict", "(", "{", "'object_class_name'", ":", "None", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "", "", "return", "sequence_meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb._build_seq_per_class": [[103, 114], ["enumerate", "seq_per_class[].append"], "methods", ["None"], ["", "def", "_build_seq_per_class", "(", "self", ")", ":", "\n", "        ", "seq_per_class", "=", "{", "}", "\n", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "self", ".", "sequence_list", ")", ":", "\n", "            ", "object_class", "=", "self", ".", "sequence_meta_info", "[", "s", "]", "[", "'object_class_name'", "]", "\n", "if", "object_class", "in", "seq_per_class", ":", "\n", "                ", "seq_per_class", "[", "object_class", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "seq_per_class", "[", "object_class", "]", "=", "[", "i", "]", "\n", "\n", "", "", "return", "seq_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb.get_sequences_in_class": [[115, 117], ["None"], "methods", ["None"], ["", "def", "get_sequences_in_class", "(", "self", ",", "class_name", ")", ":", "\n", "        ", "return", "self", ".", "seq_per_class", "[", "class_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb._get_sequence_list": [[118, 122], ["decode_str", "decode_str.split"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_str"], ["", "def", "_get_sequence_list", "(", "self", ")", ":", "\n", "        ", "dir_str", "=", "decode_str", "(", "self", ".", "root", ",", "'train/list.txt'", ")", "\n", "dir_list", "=", "dir_str", ".", "split", "(", "'\\n'", ")", "\n", "return", "dir_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb._read_bb_anno": [[123, 130], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.array().astype", "torch.tensor", "decode_str().split", "list", "map", "numpy.array", "decode_str", "line.split"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_str"], ["", "def", "_read_bb_anno", "(", "self", ",", "seq_path", ")", ":", "\n", "        ", "bb_anno_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"groundtruth.txt\"", ")", "\n", "gt_str_list", "=", "decode_str", "(", "self", ".", "root", ",", "bb_anno_file", ")", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]", "# the last line in got10k is empty", "\n", "gt_list", "=", "[", "list", "(", "map", "(", "float", ",", "line", ".", "split", "(", "','", ")", ")", ")", "for", "line", "in", "gt_str_list", "]", "\n", "gt_arr", "=", "np", ".", "array", "(", "gt_list", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "torch", ".", "tensor", "(", "gt_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb._read_target_visible": [[131, 145], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "list", "torch.ByteTensor", "list", "torch.ByteTensor", "map", "map", "torch.ByteTensor.float", "decode_str().split", "decode_str().split", "decode_str", "decode_str"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_str", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_str"], ["", "def", "_read_target_visible", "(", "self", ",", "seq_path", ")", ":", "\n", "# full occlusion and out_of_view files", "\n", "        ", "occlusion_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"absence.label\"", ")", "\n", "cover_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"cover.label\"", ")", "\n", "# Read these files", "\n", "occ_list", "=", "list", "(", "map", "(", "int", ",", "decode_str", "(", "self", ".", "root", ",", "occlusion_file", ")", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]", ")", ")", "# the last line in got10k is empty", "\n", "occlusion", "=", "torch", ".", "ByteTensor", "(", "occ_list", ")", "\n", "cover_list", "=", "list", "(", "map", "(", "int", ",", "decode_str", "(", "self", ".", "root", ",", "cover_file", ")", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]", ")", ")", "# the last line in got10k is empty", "\n", "cover", "=", "torch", ".", "ByteTensor", "(", "cover_list", ")", "\n", "\n", "target_visible", "=", "~", "occlusion", "&", "(", "cover", ">", "0", ")", ".", "byte", "(", ")", "\n", "\n", "visible_ratio", "=", "cover", ".", "float", "(", ")", "/", "8", "\n", "return", "target_visible", ",", "visible_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb._get_sequence_path": [[146, 148], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_get_sequence_path", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "\"train\"", ",", "self", ".", "sequence_list", "[", "seq_id", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb.get_sequence_info": [[149, 158], ["got10k_lmdb.Got10k_lmdb._get_sequence_path", "got10k_lmdb.Got10k_lmdb._read_bb_anno", "got10k_lmdb.Got10k_lmdb._read_target_visible", "valid.byte"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_sequence_path", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._read_bb_anno", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._read_target_visible"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "seq_path", "=", "self", ".", "_get_sequence_path", "(", "seq_id", ")", "\n", "bbox", "=", "self", ".", "_read_bb_anno", "(", "seq_path", ")", "\n", "\n", "valid", "=", "(", "bbox", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "bbox", "[", ":", ",", "3", "]", ">", "0", ")", "\n", "visible", ",", "visible_ratio", "=", "self", ".", "_read_target_visible", "(", "seq_path", ")", "\n", "visible", "=", "visible", "&", "valid", ".", "byte", "(", ")", "\n", "\n", "return", "{", "'bbox'", ":", "bbox", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", ",", "'visible_ratio'", ":", "visible_ratio", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb._get_frame_path": [[159, 161], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_get_frame_path", "(", "self", ",", "seq_path", ",", "frame_id", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "seq_path", ",", "'{:08}.jpg'", ".", "format", "(", "frame_id", "+", "1", ")", ")", "# frames start from 1", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb._get_frame": [[162, 164], ["decode_img", "got10k_lmdb.Got10k_lmdb._get_frame_path"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_img", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_frame_path"], ["", "def", "_get_frame", "(", "self", ",", "seq_path", ",", "frame_id", ")", ":", "\n", "        ", "return", "decode_img", "(", "self", ".", "root", ",", "self", ".", "_get_frame_path", "(", "seq_path", ",", "frame_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb.get_class_name": [[165, 169], ["None"], "methods", ["None"], ["", "def", "get_class_name", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "obj_meta", "=", "self", ".", "sequence_meta_info", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "\n", "\n", "return", "obj_meta", "[", "'object_class_name'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k_lmdb.Got10k_lmdb.get_frames": [[170, 184], ["got10k_lmdb.Got10k_lmdb._get_sequence_path", "got10k_lmdb.Got10k_lmdb.items", "got10k_lmdb.Got10k_lmdb._get_frame", "got10k_lmdb.Got10k_lmdb.get_sequence_info", "value[].clone"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_sequence_path", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID._get_frame", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", ",", "frame_ids", ",", "anno", "=", "None", ")", ":", "\n", "        ", "seq_path", "=", "self", ".", "_get_sequence_path", "(", "seq_id", ")", "\n", "obj_meta", "=", "self", ".", "sequence_meta_info", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "\n", "\n", "frame_list", "=", "[", "self", ".", "_get_frame", "(", "seq_path", ",", "f_id", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "f_id", ",", "...", "]", ".", "clone", "(", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "", "return", "frame_list", ",", "anno_frames", ",", "obj_meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO.__init__": [[34, 64], ["base_image_dataset.BaseImageDataset.__init__", "os.path.join", "os.path.join", "pycocotools.coco.COCO", "coco.MSCOCO.get_class_list", "coco.MSCOCO._get_image_list", "coco.MSCOCO._build_im_per_class", "random.sample", "lib.train.admin.env_settings", "int", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_class_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO._get_image_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO._build_im_per_class", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "jpeg4py_loader", ",", "data_fraction", "=", "None", ",", "min_area", "=", "None", ",", "\n", "split", "=", "\"train\"", ",", "version", "=", "\"2014\"", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - path to coco root folder\n            image_loader (jpeg4py_loader) - The function to read the images. jpeg4py (https://github.com/ajkxyz/jpeg4py)\n                                            is used by default.\n            data_fraction - Fraction of dataset to be used. The complete dataset is used by default\n            min_area - Objects with area less than min_area are filtered out. Default is 0.0\n            split - 'train' or 'val'.\n            version - version of coco dataset (2014 or 2017)\n        \"\"\"", "\n", "\n", "root", "=", "env_settings", "(", ")", ".", "coco_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "'COCO'", ",", "root", ",", "image_loader", ")", "\n", "\n", "self", ".", "img_pth", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'images/{}{}/'", ".", "format", "(", "split", ",", "version", ")", ")", "\n", "self", ".", "anno_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'annotations/instances_{}{}.json'", ".", "format", "(", "split", ",", "version", ")", ")", "\n", "\n", "self", ".", "coco_set", "=", "COCO", "(", "self", ".", "anno_path", ")", "\n", "\n", "self", ".", "cats", "=", "self", ".", "coco_set", ".", "cats", "\n", "\n", "self", ".", "class_list", "=", "self", ".", "get_class_list", "(", ")", "# the parent class thing would happen in the sampler", "\n", "\n", "self", ".", "image_list", "=", "self", ".", "_get_image_list", "(", "min_area", "=", "min_area", ")", "\n", "\n", "if", "data_fraction", "is", "not", "None", ":", "\n", "            ", "self", ".", "image_list", "=", "random", ".", "sample", "(", "self", ".", "image_list", ",", "int", "(", "len", "(", "self", ".", "image_list", ")", "*", "data_fraction", ")", ")", "\n", "", "self", ".", "im_per_class", "=", "self", ".", "_build_im_per_class", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO._get_image_list": [[65, 73], ["list", "coco.MSCOCO.coco_set.anns.keys"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "def", "_get_image_list", "(", "self", ",", "min_area", "=", "None", ")", ":", "\n", "        ", "ann_list", "=", "list", "(", "self", ".", "coco_set", ".", "anns", ".", "keys", "(", ")", ")", "\n", "image_list", "=", "[", "a", "for", "a", "in", "ann_list", "if", "self", ".", "coco_set", ".", "anns", "[", "a", "]", "[", "'iscrowd'", "]", "==", "0", "]", "\n", "\n", "if", "min_area", "is", "not", "None", ":", "\n", "            ", "image_list", "=", "[", "a", "for", "a", "in", "image_list", "if", "self", ".", "coco_set", ".", "anns", "[", "a", "]", "[", "'area'", "]", ">", "min_area", "]", "\n", "\n", "", "return", "image_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO.get_num_classes": [[74, 76], ["len"], "methods", ["None"], ["", "def", "get_num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "class_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO.get_name": [[77, 79], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'coco'", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO.has_class_info": [[80, 82], ["None"], "methods", ["None"], ["", "def", "has_class_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO.has_segmentation_info": [[83, 85], ["None"], "methods", ["None"], ["", "def", "has_segmentation_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO.get_class_list": [[86, 91], ["coco.MSCOCO.cats.keys", "class_list.append"], "methods", ["None"], ["", "def", "get_class_list", "(", "self", ")", ":", "\n", "        ", "class_list", "=", "[", "]", "\n", "for", "cat_id", "in", "self", ".", "cats", ".", "keys", "(", ")", ":", "\n", "            ", "class_list", ".", "append", "(", "self", ".", "cats", "[", "cat_id", "]", "[", "'name'", "]", ")", "\n", "", "return", "class_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO._build_im_per_class": [[92, 102], ["enumerate", "im_per_class[].append"], "methods", ["None"], ["", "def", "_build_im_per_class", "(", "self", ")", ":", "\n", "        ", "im_per_class", "=", "{", "}", "\n", "for", "i", ",", "im", "in", "enumerate", "(", "self", ".", "image_list", ")", ":", "\n", "            ", "class_name", "=", "self", ".", "cats", "[", "self", ".", "coco_set", ".", "anns", "[", "im", "]", "[", "'category_id'", "]", "]", "[", "'name'", "]", "\n", "if", "class_name", "not", "in", "im_per_class", ":", "\n", "                ", "im_per_class", "[", "class_name", "]", "=", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "im_per_class", "[", "class_name", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "return", "im_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO.get_images_in_class": [[103, 105], ["None"], "methods", ["None"], ["", "def", "get_images_in_class", "(", "self", ",", "class_name", ")", ":", "\n", "        ", "return", "self", ".", "im_per_class", "[", "class_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO.get_image_info": [[106, 117], ["coco.MSCOCO._get_anno", "torch.Tensor().view", "torch.Tensor", "valid.clone().byte", "coco.MSCOCO.coco_set.annToMask", "torch.Tensor", "valid.clone"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_anno", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.annToMask"], ["", "def", "get_image_info", "(", "self", ",", "im_id", ")", ":", "\n", "        ", "anno", "=", "self", ".", "_get_anno", "(", "im_id", ")", "\n", "\n", "bbox", "=", "torch", ".", "Tensor", "(", "anno", "[", "'bbox'", "]", ")", ".", "view", "(", "4", ",", ")", "\n", "\n", "mask", "=", "torch", ".", "Tensor", "(", "self", ".", "coco_set", ".", "annToMask", "(", "anno", ")", ")", "\n", "\n", "valid", "=", "(", "bbox", "[", "2", "]", ">", "0", ")", "&", "(", "bbox", "[", "3", "]", ">", "0", ")", "\n", "visible", "=", "valid", ".", "clone", "(", ")", ".", "byte", "(", ")", "\n", "\n", "return", "{", "'bbox'", ":", "bbox", ",", "'mask'", ":", "mask", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO._get_anno": [[118, 122], ["None"], "methods", ["None"], ["", "def", "_get_anno", "(", "self", ",", "im_id", ")", ":", "\n", "        ", "anno", "=", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "image_list", "[", "im_id", "]", "]", "\n", "\n", "return", "anno", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO._get_image": [[123, 127], ["coco.MSCOCO.image_loader", "os.path.join", "coco.MSCOCO.coco_set.loadImgs"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.loadImgs"], ["", "def", "_get_image", "(", "self", ",", "im_id", ")", ":", "\n", "        ", "path", "=", "self", ".", "coco_set", ".", "loadImgs", "(", "[", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "image_list", "[", "im_id", "]", "]", "[", "'image_id'", "]", "]", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "img", "=", "self", ".", "image_loader", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_pth", ",", "path", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO.get_meta_info": [[128, 143], ["collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["", "def", "get_meta_info", "(", "self", ",", "im_id", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "cat_dict_current", "=", "self", ".", "cats", "[", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "image_list", "[", "im_id", "]", "]", "[", "'category_id'", "]", "]", "\n", "object_meta", "=", "OrderedDict", "(", "{", "'object_class_name'", ":", "cat_dict_current", "[", "'name'", "]", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "cat_dict_current", "[", "'supercategory'", "]", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "", "except", ":", "\n", "            ", "object_meta", "=", "OrderedDict", "(", "{", "'object_class_name'", ":", "None", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "", "return", "object_meta", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO.get_class_name": [[144, 147], ["None"], "methods", ["None"], ["", "def", "get_class_name", "(", "self", ",", "im_id", ")", ":", "\n", "        ", "cat_dict_current", "=", "self", ".", "cats", "[", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "image_list", "[", "im_id", "]", "]", "[", "'category_id'", "]", "]", "\n", "return", "cat_dict_current", "[", "'name'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO.get_image": [[148, 157], ["coco.MSCOCO._get_image", "coco.MSCOCO.get_meta_info", "coco.MSCOCO.get_image_info"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco.MSCOCO._get_image", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_meta_info", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.get_image_info"], ["", "def", "get_image", "(", "self", ",", "image_id", ",", "anno", "=", "None", ")", ":", "\n", "        ", "frame", "=", "self", ".", "_get_image", "(", "image_id", ")", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_image_info", "(", "image_id", ")", "\n", "\n", "", "object_meta", "=", "self", ".", "get_meta_info", "(", "image_id", ")", "\n", "\n", "return", "frame", ",", "anno", ",", "object_meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid_lmdb.ImagenetVID_lmdb.__init__": [[28, 48], ["base_video_dataset.BaseVideoDataset.__init__", "lib.utils.lmdb_utils.decode_json", "lib.train.admin.env_settings", "len", "imagenetvid_lmdb.get_target_to_image_ratio"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_json", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.get_target_to_image_ratio"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "jpeg4py_loader", ",", "min_length", "=", "0", ",", "max_target_area", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - path to the imagenet vid dataset.\n            image_loader (default_image_loader) -  The function to read the images. If installed,\n                                                   jpeg4py (https://github.com/ajkxyz/jpeg4py) is used by default. Else,\n                                                   opencv's imread is used.\n            min_length - Minimum allowed sequence length.\n            max_target_area - max allowed ratio between target area and image area. Can be used to filter out targets\n                                which cover complete image.\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "imagenet_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "\"imagenetvid_lmdb\"", ",", "root", ",", "image_loader", ")", "\n", "\n", "sequence_list_dict", "=", "decode_json", "(", "root", ",", "\"cache.json\"", ")", "\n", "self", ".", "sequence_list", "=", "sequence_list_dict", "\n", "\n", "# Filter the sequences based on min_length and max_target_area in the first frame", "\n", "self", ".", "sequence_list", "=", "[", "x", "for", "x", "in", "self", ".", "sequence_list", "if", "len", "(", "x", "[", "'anno'", "]", ")", ">=", "min_length", "and", "\n", "get_target_to_image_ratio", "(", "x", ")", "<", "max_target_area", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid_lmdb.ImagenetVID_lmdb.get_name": [[49, 51], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'imagenetvid_lmdb'", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid_lmdb.ImagenetVID_lmdb.get_num_sequences": [[52, 54], ["len"], "methods", ["None"], ["", "def", "get_num_sequences", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid_lmdb.ImagenetVID_lmdb.get_sequence_info": [[55, 60], ["torch.Tensor", "torch.ByteTensor", "valid.byte"], "methods", ["None"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "bb_anno", "=", "torch", ".", "Tensor", "(", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "'anno'", "]", ")", "\n", "valid", "=", "(", "bb_anno", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "bb_anno", "[", ":", ",", "3", "]", ">", "0", ")", "\n", "visible", "=", "torch", ".", "ByteTensor", "(", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "'target_visible'", "]", ")", "&", "valid", ".", "byte", "(", ")", "\n", "return", "{", "'bbox'", ":", "bb_anno", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid_lmdb.ImagenetVID_lmdb._get_frame": [[61, 68], ["os.path.join", "lib.utils.lmdb_utils.decode_img"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_img"], ["", "def", "_get_frame", "(", "self", ",", "sequence", ",", "frame_id", ")", ":", "\n", "        ", "set_name", "=", "'ILSVRC2015_VID_train_{:04d}'", ".", "format", "(", "sequence", "[", "'set_id'", "]", ")", "\n", "vid_name", "=", "'ILSVRC2015_train_{:08d}'", ".", "format", "(", "sequence", "[", "'vid_id'", "]", ")", "\n", "frame_number", "=", "frame_id", "+", "sequence", "[", "'start_frame'", "]", "\n", "frame_path", "=", "os", ".", "path", ".", "join", "(", "'Data'", ",", "'VID'", ",", "'train'", ",", "set_name", ",", "vid_name", ",", "\n", "'{:06d}.JPEG'", ".", "format", "(", "frame_number", ")", ")", "\n", "return", "decode_img", "(", "self", ".", "root", ",", "frame_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid_lmdb.ImagenetVID_lmdb.get_frames": [[69, 90], ["imagenetvid_lmdb.ImagenetVID_lmdb.items", "collections.OrderedDict", "imagenetvid_lmdb.ImagenetVID_lmdb._get_frame", "imagenetvid_lmdb.ImagenetVID_lmdb.get_sequence_info", "value[].clone"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID._get_frame", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", ",", "frame_ids", ",", "anno", "=", "None", ")", ":", "\n", "        ", "sequence", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "\n", "\n", "frame_list", "=", "[", "self", ".", "_get_frame", "(", "sequence", ",", "f", ")", "for", "f", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "# Create anno dict", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "f_id", ",", "...", "]", ".", "clone", "(", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "# added the class info to the meta info", "\n", "", "object_meta", "=", "OrderedDict", "(", "{", "'object_class'", ":", "sequence", "[", "'class_name'", "]", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "\n", "return", "frame_list", ",", "anno_frames", ",", "object_meta", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid_lmdb.get_target_to_image_ratio": [[10, 14], ["torch.Tensor", "torch.Tensor", "anno[].prod", "torch.Tensor.prod"], "function", ["None"], ["def", "get_target_to_image_ratio", "(", "seq", ")", ":", "\n", "    ", "anno", "=", "torch", ".", "Tensor", "(", "seq", "[", "'anno'", "]", ")", "\n", "img_sz", "=", "torch", ".", "Tensor", "(", "seq", "[", "'image_size'", "]", ")", "\n", "return", "(", "anno", "[", "0", ",", "2", ":", "4", "]", ".", "prod", "(", ")", "/", "(", "img_sz", ".", "prod", "(", ")", ")", ")", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot.__init__": [[25, 50], ["base_video_dataset.BaseVideoDataset.__init__", "lasot.Lasot._build_sequence_list", "lasot.Lasot._build_class_list", "random.sample", "lib.train.admin.env_settings", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "enumerate", "int", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._build_sequence_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._build_class_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "jpeg4py_loader", ",", "vid_ids", "=", "None", ",", "split", "=", "None", ",", "data_fraction", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - path to the lasot dataset.\n            image_loader (jpeg4py_loader) -  The function to read the images. jpeg4py (https://github.com/ajkxyz/jpeg4py)\n                                            is used by default.\n            vid_ids - List containing the ids of the videos (1 - 20) used for training. If vid_ids = [1, 3, 5], then the\n                    videos with subscripts -1, -3, and -5 from each class will be used for training.\n            split - If split='train', the official train split (protocol-II) is used for training. Note: Only one of\n                    vid_ids or split option can be used at a time.\n            data_fraction - Fraction of dataset to be used. The complete dataset is used by default\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "lasot_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "'LaSOT'", ",", "root", ",", "image_loader", ")", "\n", "\n", "# Keep a list of all classes", "\n", "self", ".", "class_list", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "root", ")", "]", "\n", "self", ".", "class_to_id", "=", "{", "cls_name", ":", "cls_id", "for", "cls_id", ",", "cls_name", "in", "enumerate", "(", "self", ".", "class_list", ")", "}", "\n", "\n", "self", ".", "sequence_list", "=", "self", ".", "_build_sequence_list", "(", "vid_ids", ",", "split", ")", "\n", "\n", "if", "data_fraction", "is", "not", "None", ":", "\n", "            ", "self", ".", "sequence_list", "=", "random", ".", "sample", "(", "self", ".", "sequence_list", ",", "int", "(", "len", "(", "self", ".", "sequence_list", ")", "*", "data_fraction", ")", ")", "\n", "\n", "", "self", ".", "seq_per_class", "=", "self", ".", "_build_class_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot._build_sequence_list": [[51, 67], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv().values.tolist", "ValueError", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "ValueError", "ValueError", "os.path.realpath", "os.path.realpath", "os.path.realpath", "os.path.realpath", "pandas.read_csv", "str"], "methods", ["None"], ["", "def", "_build_sequence_list", "(", "self", ",", "vid_ids", "=", "None", ",", "split", "=", "None", ")", ":", "\n", "        ", "if", "split", "is", "not", "None", ":", "\n", "            ", "if", "vid_ids", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Cannot set both split_name and vid_ids.'", ")", "\n", "", "ltr_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "ltr_path", ",", "'data_specs'", ",", "'lasot_train_split.txt'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown split name.'", ")", "\n", "", "sequence_list", "=", "pandas", ".", "read_csv", "(", "file_path", ",", "header", "=", "None", ",", "squeeze", "=", "True", ")", ".", "values", ".", "tolist", "(", ")", "\n", "", "elif", "vid_ids", "is", "not", "None", ":", "\n", "            ", "sequence_list", "=", "[", "c", "+", "'-'", "+", "str", "(", "v", ")", "for", "c", "in", "self", ".", "class_list", "for", "v", "in", "vid_ids", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Set either split_name or vid_ids.'", ")", "\n", "\n", "", "return", "sequence_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot._build_class_list": [[68, 78], ["enumerate", "seq_name.split", "seq_per_class[].append"], "methods", ["None"], ["", "def", "_build_class_list", "(", "self", ")", ":", "\n", "        ", "seq_per_class", "=", "{", "}", "\n", "for", "seq_id", ",", "seq_name", "in", "enumerate", "(", "self", ".", "sequence_list", ")", ":", "\n", "            ", "class_name", "=", "seq_name", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "if", "class_name", "in", "seq_per_class", ":", "\n", "                ", "seq_per_class", "[", "class_name", "]", ".", "append", "(", "seq_id", ")", "\n", "", "else", ":", "\n", "                ", "seq_per_class", "[", "class_name", "]", "=", "[", "seq_id", "]", "\n", "\n", "", "", "return", "seq_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot.get_name": [[79, 81], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'lasot'", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot.has_class_info": [[82, 84], ["None"], "methods", ["None"], ["", "def", "has_class_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot.has_occlusion_info": [[85, 87], ["None"], "methods", ["None"], ["", "def", "has_occlusion_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot.get_num_sequences": [[88, 90], ["len"], "methods", ["None"], ["", "def", "get_num_sequences", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot.get_num_classes": [[91, 93], ["len"], "methods", ["None"], ["", "def", "get_num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "class_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot.get_sequences_in_class": [[94, 96], ["None"], "methods", ["None"], ["", "def", "get_sequences_in_class", "(", "self", ",", "class_name", ")", ":", "\n", "        ", "return", "self", ".", "seq_per_class", "[", "class_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot._read_bb_anno": [[97, 101], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.tensor", "pandas.read_csv"], "methods", ["None"], ["", "def", "_read_bb_anno", "(", "self", ",", "seq_path", ")", ":", "\n", "        ", "bb_anno_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"groundtruth.txt\"", ")", "\n", "gt", "=", "pandas", ".", "read_csv", "(", "bb_anno_file", ",", "delimiter", "=", "','", ",", "header", "=", "None", ",", "dtype", "=", "np", ".", "float32", ",", "na_filter", "=", "False", ",", "low_memory", "=", "False", ")", ".", "values", "\n", "return", "torch", ".", "tensor", "(", "gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot._read_target_visible": [[102, 115], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "torch.ByteTensor", "open", "torch.ByteTensor", "int", "int", "list", "list", "csv.reader", "csv.reader"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "def", "_read_target_visible", "(", "self", ",", "seq_path", ")", ":", "\n", "# Read full occlusion and out_of_view", "\n", "        ", "occlusion_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"full_occlusion.txt\"", ")", "\n", "out_of_view_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"out_of_view.txt\"", ")", "\n", "\n", "with", "open", "(", "occlusion_file", ",", "'r'", ",", "newline", "=", "''", ")", "as", "f", ":", "\n", "            ", "occlusion", "=", "torch", ".", "ByteTensor", "(", "[", "int", "(", "v", ")", "for", "v", "in", "list", "(", "csv", ".", "reader", "(", "f", ")", ")", "[", "0", "]", "]", ")", "\n", "", "with", "open", "(", "out_of_view_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "out_of_view", "=", "torch", ".", "ByteTensor", "(", "[", "int", "(", "v", ")", "for", "v", "in", "list", "(", "csv", ".", "reader", "(", "f", ")", ")", "[", "0", "]", "]", ")", "\n", "\n", "", "target_visible", "=", "~", "occlusion", "&", "~", "out_of_view", "\n", "\n", "return", "target_visible", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot._get_sequence_path": [[116, 122], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "seq_name.split", "seq_name.split"], "methods", ["None"], ["", "def", "_get_sequence_path", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "seq_name", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "\n", "class_name", "=", "seq_name", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "vid_id", "=", "seq_name", ".", "split", "(", "'-'", ")", "[", "1", "]", "\n", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "class_name", ",", "class_name", "+", "'-'", "+", "vid_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot.get_sequence_info": [[123, 131], ["lasot.Lasot._get_sequence_path", "lasot.Lasot._read_bb_anno", "lasot.Lasot._read_target_visible", "valid.byte"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_sequence_path", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._read_bb_anno", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._read_target_visible"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "seq_path", "=", "self", ".", "_get_sequence_path", "(", "seq_id", ")", "\n", "bbox", "=", "self", ".", "_read_bb_anno", "(", "seq_path", ")", "\n", "\n", "valid", "=", "(", "bbox", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "bbox", "[", ":", ",", "3", "]", ">", "0", ")", "\n", "visible", "=", "self", ".", "_read_target_visible", "(", "seq_path", ")", "&", "valid", ".", "byte", "(", ")", "\n", "\n", "return", "{", "'bbox'", ":", "bbox", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot._get_frame_path": [[132, 134], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_get_frame_path", "(", "self", ",", "seq_path", ",", "frame_id", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "seq_path", ",", "'img'", ",", "'{:08}.jpg'", ".", "format", "(", "frame_id", "+", "1", ")", ")", "# frames start from 1", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot._get_frame": [[135, 137], ["lasot.Lasot.image_loader", "lasot.Lasot._get_frame_path"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_frame_path"], ["", "def", "_get_frame", "(", "self", ",", "seq_path", ",", "frame_id", ")", ":", "\n", "        ", "return", "self", ".", "image_loader", "(", "self", ".", "_get_frame_path", "(", "seq_path", ",", "frame_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot._get_class": [[138, 141], ["seq_path.split"], "methods", ["None"], ["", "def", "_get_class", "(", "self", ",", "seq_path", ")", ":", "\n", "        ", "raw_class", "=", "seq_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "return", "raw_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot.get_class_name": [[142, 147], ["lasot.Lasot._get_sequence_path", "lasot.Lasot._get_class"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_sequence_path", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_class"], ["", "def", "get_class_name", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "seq_path", "=", "self", ".", "_get_sequence_path", "(", "seq_id", ")", "\n", "obj_class", "=", "self", ".", "_get_class", "(", "seq_path", ")", "\n", "\n", "return", "obj_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot.Lasot.get_frames": [[148, 168], ["lasot.Lasot._get_sequence_path", "lasot.Lasot._get_class", "lasot.Lasot.items", "collections.OrderedDict", "lasot.Lasot._get_frame", "lasot.Lasot.get_sequence_info", "value[].clone"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_sequence_path", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_class", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID._get_frame", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", ",", "frame_ids", ",", "anno", "=", "None", ")", ":", "\n", "        ", "seq_path", "=", "self", ".", "_get_sequence_path", "(", "seq_id", ")", "\n", "\n", "obj_class", "=", "self", ".", "_get_class", "(", "seq_path", ")", "\n", "frame_list", "=", "[", "self", ".", "_get_frame", "(", "seq_path", ",", "f_id", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "f_id", ",", "...", "]", ".", "clone", "(", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "", "object_meta", "=", "OrderedDict", "(", "{", "'object_class_name'", ":", "obj_class", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "\n", "return", "frame_list", ",", "anno_frames", ",", "object_meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.TrackingNet.__init__": [[46, 76], ["base_video_dataset.BaseVideoDataset.__init__", "tracking_net.list_sequences", "tracking_net.TrackingNet._load_class_info", "list", "tracking_net.TrackingNet.class_list.sort", "random.sample", "tracking_net.TrackingNet.seq_per_class.keys", "lib.train.admin.env_settings", "int", "range", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.list_sequences", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.TrackingNet._load_class_info", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "jpeg4py_loader", ",", "set_ids", "=", "None", ",", "data_fraction", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root        - The path to the TrackingNet folder, containing the training sets.\n            image_loader (jpeg4py_loader) -  The function to read the images. jpeg4py (https://github.com/ajkxyz/jpeg4py)\n                                            is used by default.\n            set_ids (None) - List containing the ids of the TrackingNet sets to be used for training. If None, all the\n                            sets (0 - 11) will be used.\n            data_fraction - Fraction of dataset to be used. The complete dataset is used by default\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "trackingnet_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "'TrackingNet'", ",", "root", ",", "image_loader", ")", "\n", "\n", "if", "set_ids", "is", "None", ":", "\n", "            ", "set_ids", "=", "[", "i", "for", "i", "in", "range", "(", "12", ")", "]", "\n", "\n", "", "self", ".", "set_ids", "=", "set_ids", "\n", "\n", "# Keep a list of all videos. Sequence list is a list of tuples (set_id, video_name) containing the set_id and", "\n", "# video_name for each sequence", "\n", "self", ".", "sequence_list", "=", "list_sequences", "(", "self", ".", "root", ",", "self", ".", "set_ids", ")", "\n", "\n", "if", "data_fraction", "is", "not", "None", ":", "\n", "            ", "self", ".", "sequence_list", "=", "random", ".", "sample", "(", "self", ".", "sequence_list", ",", "int", "(", "len", "(", "self", ".", "sequence_list", ")", "*", "data_fraction", ")", ")", "\n", "\n", "", "self", ".", "seq_to_class_map", ",", "self", ".", "seq_per_class", "=", "self", ".", "_load_class_info", "(", ")", "\n", "\n", "# we do not have the class_lists for the tracking net", "\n", "self", ".", "class_list", "=", "list", "(", "self", ".", "seq_per_class", ".", "keys", "(", ")", ")", "\n", "self", ".", "class_list", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.TrackingNet._load_class_info": [[77, 93], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "enumerate", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "open", "seq_to_class_map.get", "os.path.realpath", "os.path.realpath", "os.path.realpath", "os.path.realpath", "seq_per_class[].append", "seq_class.split", "seq_class.rstrip().split", "seq_class.rstrip"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get"], ["", "def", "_load_class_info", "(", "self", ")", ":", "\n", "        ", "ltr_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ")", "\n", "class_map_path", "=", "os", ".", "path", ".", "join", "(", "ltr_path", ",", "'data_specs'", ",", "'trackingnet_classmap.txt'", ")", "\n", "\n", "with", "open", "(", "class_map_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "seq_to_class_map", "=", "{", "seq_class", ".", "split", "(", "'\\t'", ")", "[", "0", "]", ":", "seq_class", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "[", "1", "]", "for", "seq_class", "in", "f", "}", "\n", "\n", "", "seq_per_class", "=", "{", "}", "\n", "for", "i", ",", "seq", "in", "enumerate", "(", "self", ".", "sequence_list", ")", ":", "\n", "            ", "class_name", "=", "seq_to_class_map", ".", "get", "(", "seq", "[", "1", "]", ",", "'Unknown'", ")", "\n", "if", "class_name", "not", "in", "seq_per_class", ":", "\n", "                ", "seq_per_class", "[", "class_name", "]", "=", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "seq_per_class", "[", "class_name", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "return", "seq_to_class_map", ",", "seq_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.TrackingNet.get_name": [[94, 96], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'trackingnet'", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.TrackingNet.has_class_info": [[97, 99], ["None"], "methods", ["None"], ["", "def", "has_class_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.TrackingNet.get_sequences_in_class": [[100, 102], ["None"], "methods", ["None"], ["", "def", "get_sequences_in_class", "(", "self", ",", "class_name", ")", ":", "\n", "        ", "return", "self", ".", "seq_per_class", "[", "class_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.TrackingNet._read_bb_anno": [[103, 110], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.tensor", "pandas.read_csv", "str"], "methods", ["None"], ["", "def", "_read_bb_anno", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "set_id", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "0", "]", "\n", "vid_name", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "1", "]", "\n", "bb_anno_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"TRAIN_\"", "+", "str", "(", "set_id", ")", ",", "\"anno\"", ",", "vid_name", "+", "\".txt\"", ")", "\n", "gt", "=", "pandas", ".", "read_csv", "(", "bb_anno_file", ",", "delimiter", "=", "','", ",", "header", "=", "None", ",", "dtype", "=", "np", ".", "float32", ",", "na_filter", "=", "False", ",", "\n", "low_memory", "=", "False", ")", ".", "values", "\n", "return", "torch", ".", "tensor", "(", "gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.TrackingNet.get_sequence_info": [[111, 117], ["tracking_net.TrackingNet._read_bb_anno", "valid.clone().byte", "valid.clone"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._read_bb_anno"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "bbox", "=", "self", ".", "_read_bb_anno", "(", "seq_id", ")", "\n", "\n", "valid", "=", "(", "bbox", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "bbox", "[", ":", ",", "3", "]", ">", "0", ")", "\n", "visible", "=", "valid", ".", "clone", "(", ")", ".", "byte", "(", ")", "\n", "return", "{", "'bbox'", ":", "bbox", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.TrackingNet._get_frame": [[118, 123], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "tracking_net.TrackingNet.image_loader", "str", "str"], "methods", ["None"], ["", "def", "_get_frame", "(", "self", ",", "seq_id", ",", "frame_id", ")", ":", "\n", "        ", "set_id", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "0", "]", "\n", "vid_name", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "1", "]", "\n", "frame_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"TRAIN_\"", "+", "str", "(", "set_id", ")", ",", "\"zips\"", ",", "vid_name", ",", "str", "(", "frame_id", ")", "+", "\".jpg\"", ")", "\n", "return", "self", ".", "image_loader", "(", "frame_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.TrackingNet._get_class": [[124, 127], ["None"], "methods", ["None"], ["", "def", "_get_class", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "seq_name", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "1", "]", "\n", "return", "self", ".", "seq_to_class_map", "[", "seq_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.TrackingNet.get_class_name": [[128, 132], ["tracking_net.TrackingNet._get_class"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_class"], ["", "def", "get_class_name", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "obj_class", "=", "self", ".", "_get_class", "(", "seq_id", ")", "\n", "\n", "return", "obj_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.TrackingNet.get_frames": [[133, 152], ["tracking_net.TrackingNet.items", "tracking_net.TrackingNet._get_class", "collections.OrderedDict", "tracking_net.TrackingNet._get_frame", "tracking_net.TrackingNet.get_sequence_info", "value[].clone"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_class", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID._get_frame", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", ",", "frame_ids", ",", "anno", "=", "None", ")", ":", "\n", "        ", "frame_list", "=", "[", "self", ".", "_get_frame", "(", "seq_id", ",", "f", ")", "for", "f", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "f_id", ",", "...", "]", ".", "clone", "(", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "", "obj_class", "=", "self", ".", "_get_class", "(", "seq_id", ")", "\n", "\n", "object_meta", "=", "OrderedDict", "(", "{", "'object_class_name'", ":", "obj_class", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "\n", "return", "frame_list", ",", "anno_frames", ",", "object_meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.tracking_net.list_sequences": [[14, 33], ["os.path.join", "os.path.join", "str", "os.listdir", "os.listdir", "f.endswith", "os.path.splitext", "os.path.splitext"], "function", ["None"], ["def", "list_sequences", "(", "root", ",", "set_ids", ")", ":", "\n", "    ", "\"\"\" Lists all the videos in the input set_ids. Returns a list of tuples (set_id, video_name)\n\n    args:\n        root: Root directory to TrackingNet\n        set_ids: Sets (0-11) which are to be used\n\n    returns:\n        list - list of tuples (set_id, video_name) containing the set_id and video_name for each sequence\n    \"\"\"", "\n", "sequence_list", "=", "[", "]", "\n", "\n", "for", "s", "in", "set_ids", ":", "\n", "        ", "anno_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"TRAIN_\"", "+", "str", "(", "s", ")", ",", "\"anno\"", ")", "\n", "\n", "sequences_cur_set", "=", "[", "(", "s", ",", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", ")", "for", "f", "in", "os", ".", "listdir", "(", "anno_dir", ")", "if", "f", ".", "endswith", "(", "'.txt'", ")", "]", "\n", "sequence_list", "+=", "sequences_cur_set", "\n", "\n", "", "return", "sequence_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k.__init__": [[26, 76], ["base_video_dataset.BaseVideoDataset.__init__", "got10k.Got10k._get_sequence_list", "got10k.Got10k._load_meta_info", "got10k.Got10k._build_seq_per_class", "list", "got10k.Got10k.class_list.sort", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv().values.tolist", "random.sample", "got10k.Got10k.seq_per_class.keys", "lib.train.admin.env_settings", "ValueError", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "list", "int", "os.path.realpath", "os.path.realpath", "os.path.realpath", "os.path.realpath", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv", "len", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "ValueError"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_sequence_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k._load_meta_info", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._build_seq_per_class", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "jpeg4py_loader", ",", "split", "=", "None", ",", "seq_ids", "=", "None", ",", "data_fraction", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - path to the got-10k training data. Note: This should point to the 'train' folder inside GOT-10k\n            image_loader (jpeg4py_loader) -  The function to read the images. jpeg4py (https://github.com/ajkxyz/jpeg4py)\n                                            is used by default.\n            split - 'train' or 'val'. Note: The validation split here is a subset of the official got-10k train split,\n                    not NOT the official got-10k validation split. To use the official validation split, provide that as\n                    the root folder instead.\n            seq_ids - List containing the ids of the videos to be used for training. Note: Only one of 'split' or 'seq_ids'\n                        options can be used at the same time.\n            data_fraction - Fraction of dataset to be used. The complete dataset is used by default\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "got10k_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "'GOT10k'", ",", "root", ",", "image_loader", ")", "\n", "\n", "# all folders inside the root", "\n", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", ")", "\n", "\n", "# seq_id is the index of the folder inside the got10k root path", "\n", "if", "split", "is", "not", "None", ":", "\n", "            ", "if", "seq_ids", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Cannot set both split_name and seq_ids.'", ")", "\n", "", "ltr_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "ltr_path", ",", "'data_specs'", ",", "'got10k_train_split.txt'", ")", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "ltr_path", ",", "'data_specs'", ",", "'got10k_val_split.txt'", ")", "\n", "", "elif", "split", "==", "'train_full'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "ltr_path", ",", "'data_specs'", ",", "'got10k_train_full_split.txt'", ")", "\n", "", "elif", "split", "==", "'vottrain'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "ltr_path", ",", "'data_specs'", ",", "'got10k_vot_train_split.txt'", ")", "\n", "", "elif", "split", "==", "'votval'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "ltr_path", ",", "'data_specs'", ",", "'got10k_vot_val_split.txt'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown split name.'", ")", "\n", "", "seq_ids", "=", "pandas", ".", "read_csv", "(", "file_path", ",", "header", "=", "None", ",", "squeeze", "=", "True", ",", "dtype", "=", "np", ".", "int64", ")", ".", "values", ".", "tolist", "(", ")", "\n", "", "elif", "seq_ids", "is", "None", ":", "\n", "            ", "seq_ids", "=", "list", "(", "range", "(", "0", ",", "len", "(", "self", ".", "sequence_list", ")", ")", ")", "\n", "\n", "", "self", ".", "sequence_list", "=", "[", "self", ".", "sequence_list", "[", "i", "]", "for", "i", "in", "seq_ids", "]", "\n", "\n", "if", "data_fraction", "is", "not", "None", ":", "\n", "            ", "self", ".", "sequence_list", "=", "random", ".", "sample", "(", "self", ".", "sequence_list", ",", "int", "(", "len", "(", "self", ".", "sequence_list", ")", "*", "data_fraction", ")", ")", "\n", "\n", "", "self", ".", "sequence_meta_info", "=", "self", ".", "_load_meta_info", "(", ")", "\n", "self", ".", "seq_per_class", "=", "self", ".", "_build_seq_per_class", "(", ")", "\n", "\n", "self", ".", "class_list", "=", "list", "(", "self", ".", "seq_per_class", ".", "keys", "(", ")", ")", "\n", "self", ".", "class_list", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k.get_name": [[77, 79], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'got10k'", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k.has_class_info": [[80, 82], ["None"], "methods", ["None"], ["", "def", "has_class_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k.has_occlusion_info": [[83, 85], ["None"], "methods", ["None"], ["", "def", "has_occlusion_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k._load_meta_info": [[86, 89], ["got10k.Got10k._read_meta", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k._read_meta"], ["", "def", "_load_meta_info", "(", "self", ")", ":", "\n", "        ", "sequence_meta_info", "=", "{", "s", ":", "self", ".", "_read_meta", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "s", ")", ")", "for", "s", "in", "self", ".", "sequence_list", "}", "\n", "return", "sequence_meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k._read_meta": [[90, 97], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "_read_meta", "(", "self", ",", "seq_path", ")", ":", "\n", "        ", "object_meta", "=", "OrderedDict", "(", "{", "'object_class_name'", ":", "None", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "return", "object_meta", "\n", "# try:", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k._build_seq_per_class": [[113, 124], ["enumerate", "seq_per_class[].append"], "methods", ["None"], ["", "def", "_build_seq_per_class", "(", "self", ")", ":", "\n", "        ", "seq_per_class", "=", "{", "}", "\n", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "self", ".", "sequence_list", ")", ":", "\n", "            ", "object_class", "=", "self", ".", "sequence_meta_info", "[", "s", "]", "[", "'object_class_name'", "]", "\n", "if", "object_class", "in", "seq_per_class", ":", "\n", "                ", "seq_per_class", "[", "object_class", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "seq_per_class", "[", "object_class", "]", "=", "[", "i", "]", "\n", "\n", "", "", "return", "seq_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k.get_sequences_in_class": [[125, 127], ["None"], "methods", ["None"], ["", "def", "get_sequences_in_class", "(", "self", ",", "class_name", ")", ":", "\n", "        ", "return", "self", ".", "seq_per_class", "[", "class_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k._get_sequence_list": [[128, 133], ["open", "list", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "csv.reader"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "def", "_get_sequence_list", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'list.txt'", ")", ")", "as", "f", ":", "\n", "            ", "dir_list", "=", "list", "(", "csv", ".", "reader", "(", "f", ")", ")", "\n", "", "dir_list", "=", "[", "dir_name", "[", "0", "]", "for", "dir_name", "in", "dir_list", "]", "\n", "return", "dir_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k._read_bb_anno": [[134, 138], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.tensor", "pandas.read_csv"], "methods", ["None"], ["", "def", "_read_bb_anno", "(", "self", ",", "seq_path", ")", ":", "\n", "        ", "bb_anno_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"groundtruth.txt\"", ")", "\n", "gt", "=", "pandas", ".", "read_csv", "(", "bb_anno_file", ",", "delimiter", "=", "','", ",", "header", "=", "None", ",", "dtype", "=", "np", ".", "float32", ",", "na_filter", "=", "False", ",", "low_memory", "=", "False", ")", ".", "values", "\n", "return", "torch", ".", "tensor", "(", "gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k._read_target_visible": [[139, 153], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "torch.ByteTensor", "open", "torch.ByteTensor", "torch.ByteTensor.float", "int", "int", "csv.reader", "csv.reader"], "methods", ["None"], ["", "def", "_read_target_visible", "(", "self", ",", "seq_path", ")", ":", "\n", "# Read full occlusion and out_of_view", "\n", "        ", "occlusion_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"absence.label\"", ")", "\n", "cover_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"cover.label\"", ")", "\n", "\n", "with", "open", "(", "occlusion_file", ",", "'r'", ",", "newline", "=", "''", ")", "as", "f", ":", "\n", "            ", "occlusion", "=", "torch", ".", "ByteTensor", "(", "[", "int", "(", "v", "[", "0", "]", ")", "for", "v", "in", "csv", ".", "reader", "(", "f", ")", "]", ")", "\n", "", "with", "open", "(", "cover_file", ",", "'r'", ",", "newline", "=", "''", ")", "as", "f", ":", "\n", "            ", "cover", "=", "torch", ".", "ByteTensor", "(", "[", "int", "(", "v", "[", "0", "]", ")", "for", "v", "in", "csv", ".", "reader", "(", "f", ")", "]", ")", "\n", "\n", "", "target_visible", "=", "~", "occlusion", "&", "(", "cover", ">", "0", ")", ".", "byte", "(", ")", "\n", "\n", "visible_ratio", "=", "cover", ".", "float", "(", ")", "/", "8", "\n", "return", "target_visible", ",", "visible_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k._get_sequence_path": [[154, 156], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_get_sequence_path", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "sequence_list", "[", "seq_id", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k.get_sequence_info": [[157, 166], ["got10k.Got10k._get_sequence_path", "got10k.Got10k._read_bb_anno", "got10k.Got10k._read_target_visible", "valid.byte"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_sequence_path", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._read_bb_anno", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._read_target_visible"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "seq_path", "=", "self", ".", "_get_sequence_path", "(", "seq_id", ")", "\n", "bbox", "=", "self", ".", "_read_bb_anno", "(", "seq_path", ")", "\n", "\n", "valid", "=", "(", "bbox", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "bbox", "[", ":", ",", "3", "]", ">", "0", ")", "\n", "visible", ",", "visible_ratio", "=", "self", ".", "_read_target_visible", "(", "seq_path", ")", "\n", "visible", "=", "visible", "&", "valid", ".", "byte", "(", ")", "\n", "\n", "return", "{", "'bbox'", ":", "bbox", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", ",", "'visible_ratio'", ":", "visible_ratio", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k._get_frame_path": [[167, 169], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_get_frame_path", "(", "self", ",", "seq_path", ",", "frame_id", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "seq_path", ",", "'{:08}.jpg'", ".", "format", "(", "frame_id", "+", "1", ")", ")", "# frames start from 1", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k._get_frame": [[170, 172], ["got10k.Got10k.image_loader", "got10k.Got10k._get_frame_path"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_frame_path"], ["", "def", "_get_frame", "(", "self", ",", "seq_path", ",", "frame_id", ")", ":", "\n", "        ", "return", "self", ".", "image_loader", "(", "self", ".", "_get_frame_path", "(", "seq_path", ",", "frame_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k.get_class_name": [[173, 177], ["None"], "methods", ["None"], ["", "def", "get_class_name", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "obj_meta", "=", "self", ".", "sequence_meta_info", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "\n", "\n", "return", "obj_meta", "[", "'object_class_name'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.got10k.Got10k.get_frames": [[178, 192], ["got10k.Got10k._get_sequence_path", "got10k.Got10k.items", "got10k.Got10k._get_frame", "got10k.Got10k.get_sequence_info", "value[].clone"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_sequence_path", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID._get_frame", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", ",", "frame_ids", ",", "anno", "=", "None", ")", ":", "\n", "        ", "seq_path", "=", "self", ".", "_get_sequence_path", "(", "seq_id", ")", "\n", "obj_meta", "=", "self", ".", "sequence_meta_info", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "\n", "\n", "frame_list", "=", "[", "self", ".", "_get_frame", "(", "seq_path", ",", "f_id", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "f_id", ",", "...", "]", ".", "clone", "(", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "", "return", "frame_list", ",", "anno_frames", ",", "obj_meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb.__init__": [[18, 46], ["base_video_dataset.BaseVideoDataset.__init__", "lasot_lmdb.Lasot_lmdb._build_sequence_list", "lasot_lmdb.Lasot_lmdb._build_class_list", "random.sample", "lib.train.admin.env_settings", "seq_name.split", "lasot_lmdb.Lasot_lmdb.class_list.append", "enumerate", "int", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._build_sequence_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._build_class_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "jpeg4py_loader", ",", "vid_ids", "=", "None", ",", "split", "=", "None", ",", "data_fraction", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - path to the lasot dataset.\n            image_loader (jpeg4py_loader) -  The function to read the images. jpeg4py (https://github.com/ajkxyz/jpeg4py)\n                                            is used by default.\n            vid_ids - List containing the ids of the videos (1 - 20) used for training. If vid_ids = [1, 3, 5], then the\n                    videos with subscripts -1, -3, and -5 from each class will be used for training.\n            split - If split='train', the official train split (protocol-II) is used for training. Note: Only one of\n                    vid_ids or split option can be used at a time.\n            data_fraction - Fraction of dataset to be used. The complete dataset is used by default\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "lasot_lmdb_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "'LaSOT_lmdb'", ",", "root", ",", "image_loader", ")", "\n", "\n", "self", ".", "sequence_list", "=", "self", ".", "_build_sequence_list", "(", "vid_ids", ",", "split", ")", "\n", "class_list", "=", "[", "seq_name", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "seq_name", "in", "self", ".", "sequence_list", "]", "\n", "self", ".", "class_list", "=", "[", "]", "\n", "for", "ele", "in", "class_list", ":", "\n", "            ", "if", "ele", "not", "in", "self", ".", "class_list", ":", "\n", "                ", "self", ".", "class_list", ".", "append", "(", "ele", ")", "\n", "# Keep a list of all classes", "\n", "", "", "self", ".", "class_to_id", "=", "{", "cls_name", ":", "cls_id", "for", "cls_id", ",", "cls_name", "in", "enumerate", "(", "self", ".", "class_list", ")", "}", "\n", "\n", "if", "data_fraction", "is", "not", "None", ":", "\n", "            ", "self", ".", "sequence_list", "=", "random", ".", "sample", "(", "self", ".", "sequence_list", ",", "int", "(", "len", "(", "self", ".", "sequence_list", ")", "*", "data_fraction", ")", ")", "\n", "\n", "", "self", ".", "seq_per_class", "=", "self", ".", "_build_class_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._build_sequence_list": [[47, 63], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv().values.tolist", "ValueError", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "ValueError", "ValueError", "os.path.realpath", "os.path.realpath", "os.path.realpath", "os.path.realpath", "pandas.read_csv", "str"], "methods", ["None"], ["", "def", "_build_sequence_list", "(", "self", ",", "vid_ids", "=", "None", ",", "split", "=", "None", ")", ":", "\n", "        ", "if", "split", "is", "not", "None", ":", "\n", "            ", "if", "vid_ids", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Cannot set both split_name and vid_ids.'", ")", "\n", "", "ltr_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "ltr_path", ",", "'data_specs'", ",", "'lasot_train_split.txt'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown split name.'", ")", "\n", "", "sequence_list", "=", "pandas", ".", "read_csv", "(", "file_path", ",", "header", "=", "None", ",", "squeeze", "=", "True", ")", ".", "values", ".", "tolist", "(", ")", "\n", "", "elif", "vid_ids", "is", "not", "None", ":", "\n", "            ", "sequence_list", "=", "[", "c", "+", "'-'", "+", "str", "(", "v", ")", "for", "c", "in", "self", ".", "class_list", "for", "v", "in", "vid_ids", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Set either split_name or vid_ids.'", ")", "\n", "\n", "", "return", "sequence_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._build_class_list": [[64, 74], ["enumerate", "seq_name.split", "seq_per_class[].append"], "methods", ["None"], ["", "def", "_build_class_list", "(", "self", ")", ":", "\n", "        ", "seq_per_class", "=", "{", "}", "\n", "for", "seq_id", ",", "seq_name", "in", "enumerate", "(", "self", ".", "sequence_list", ")", ":", "\n", "            ", "class_name", "=", "seq_name", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "if", "class_name", "in", "seq_per_class", ":", "\n", "                ", "seq_per_class", "[", "class_name", "]", ".", "append", "(", "seq_id", ")", "\n", "", "else", ":", "\n", "                ", "seq_per_class", "[", "class_name", "]", "=", "[", "seq_id", "]", "\n", "\n", "", "", "return", "seq_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb.get_name": [[75, 77], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'lasot_lmdb'", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb.has_class_info": [[78, 80], ["None"], "methods", ["None"], ["", "def", "has_class_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb.has_occlusion_info": [[81, 83], ["None"], "methods", ["None"], ["", "def", "has_occlusion_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb.get_num_sequences": [[84, 86], ["len"], "methods", ["None"], ["", "def", "get_num_sequences", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb.get_num_classes": [[87, 89], ["len"], "methods", ["None"], ["", "def", "get_num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "class_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb.get_sequences_in_class": [[90, 92], ["None"], "methods", ["None"], ["", "def", "get_sequences_in_class", "(", "self", ",", "class_name", ")", ":", "\n", "        ", "return", "self", ".", "seq_per_class", "[", "class_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._read_bb_anno": [[93, 99], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.array().astype", "torch.tensor", "decode_str().split", "list", "map", "numpy.array", "decode_str", "line.split"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_str"], ["", "def", "_read_bb_anno", "(", "self", ",", "seq_path", ")", ":", "\n", "        ", "bb_anno_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"groundtruth.txt\"", ")", "\n", "gt_str_list", "=", "decode_str", "(", "self", ".", "root", ",", "bb_anno_file", ")", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]", "# the last line is empty", "\n", "gt_list", "=", "[", "list", "(", "map", "(", "float", ",", "line", ".", "split", "(", "','", ")", ")", ")", "for", "line", "in", "gt_str_list", "]", "\n", "gt_arr", "=", "np", ".", "array", "(", "gt_list", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "torch", ".", "tensor", "(", "gt_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._read_target_visible": [[100, 113], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "list", "torch.ByteTensor", "list", "torch.ByteTensor", "map", "map", "decode_str().split", "decode_str().split", "decode_str", "decode_str"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_str", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_str"], ["", "def", "_read_target_visible", "(", "self", ",", "seq_path", ")", ":", "\n", "# Read full occlusion and out_of_view", "\n", "        ", "occlusion_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"full_occlusion.txt\"", ")", "\n", "out_of_view_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"out_of_view.txt\"", ")", "\n", "\n", "occ_list", "=", "list", "(", "map", "(", "int", ",", "decode_str", "(", "self", ".", "root", ",", "occlusion_file", ")", ".", "split", "(", "','", ")", ")", ")", "\n", "occlusion", "=", "torch", ".", "ByteTensor", "(", "occ_list", ")", "\n", "out_view_list", "=", "list", "(", "map", "(", "int", ",", "decode_str", "(", "self", ".", "root", ",", "out_of_view_file", ")", ".", "split", "(", "','", ")", ")", ")", "\n", "out_of_view", "=", "torch", ".", "ByteTensor", "(", "out_view_list", ")", "\n", "\n", "target_visible", "=", "~", "occlusion", "&", "~", "out_of_view", "\n", "\n", "return", "target_visible", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_sequence_path": [[114, 120], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "seq_name.split", "seq_name.split"], "methods", ["None"], ["", "def", "_get_sequence_path", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "seq_name", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "\n", "class_name", "=", "seq_name", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "vid_id", "=", "seq_name", ".", "split", "(", "'-'", ")", "[", "1", "]", "\n", "\n", "return", "os", ".", "path", ".", "join", "(", "class_name", ",", "class_name", "+", "'-'", "+", "vid_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb.get_sequence_info": [[121, 129], ["lasot_lmdb.Lasot_lmdb._get_sequence_path", "lasot_lmdb.Lasot_lmdb._read_bb_anno", "lasot_lmdb.Lasot_lmdb._read_target_visible", "valid.byte"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_sequence_path", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._read_bb_anno", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._read_target_visible"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "seq_path", "=", "self", ".", "_get_sequence_path", "(", "seq_id", ")", "\n", "bbox", "=", "self", ".", "_read_bb_anno", "(", "seq_path", ")", "\n", "\n", "valid", "=", "(", "bbox", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "bbox", "[", ":", ",", "3", "]", ">", "0", ")", "\n", "visible", "=", "self", ".", "_read_target_visible", "(", "seq_path", ")", "&", "valid", ".", "byte", "(", ")", "\n", "\n", "return", "{", "'bbox'", ":", "bbox", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_frame_path": [[130, 132], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_get_frame_path", "(", "self", ",", "seq_path", ",", "frame_id", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "seq_path", ",", "'img'", ",", "'{:08}.jpg'", ".", "format", "(", "frame_id", "+", "1", ")", ")", "# frames start from 1", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_frame": [[133, 135], ["decode_img", "lasot_lmdb.Lasot_lmdb._get_frame_path"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_img", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_frame_path"], ["", "def", "_get_frame", "(", "self", ",", "seq_path", ",", "frame_id", ")", ":", "\n", "        ", "return", "decode_img", "(", "self", ".", "root", ",", "self", ".", "_get_frame_path", "(", "seq_path", ",", "frame_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_class": [[136, 139], ["seq_path.split"], "methods", ["None"], ["", "def", "_get_class", "(", "self", ",", "seq_path", ")", ":", "\n", "        ", "raw_class", "=", "seq_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "return", "raw_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb.get_class_name": [[140, 145], ["lasot_lmdb.Lasot_lmdb._get_sequence_path", "lasot_lmdb.Lasot_lmdb._get_class"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_sequence_path", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_class"], ["", "def", "get_class_name", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "seq_path", "=", "self", ".", "_get_sequence_path", "(", "seq_id", ")", "\n", "obj_class", "=", "self", ".", "_get_class", "(", "seq_path", ")", "\n", "\n", "return", "obj_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb.get_frames": [[146, 166], ["lasot_lmdb.Lasot_lmdb._get_sequence_path", "lasot_lmdb.Lasot_lmdb._get_class", "lasot_lmdb.Lasot_lmdb.items", "collections.OrderedDict", "lasot_lmdb.Lasot_lmdb._get_frame", "lasot_lmdb.Lasot_lmdb.get_sequence_info", "value[].clone"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_sequence_path", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.lasot_lmdb.Lasot_lmdb._get_class", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID._get_frame", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", ",", "frame_ids", ",", "anno", "=", "None", ")", ":", "\n", "        ", "seq_path", "=", "self", ".", "_get_sequence_path", "(", "seq_id", ")", "\n", "\n", "obj_class", "=", "self", ".", "_get_class", "(", "seq_path", ")", "\n", "frame_list", "=", "[", "self", ".", "_get_frame", "(", "seq_path", ",", "f_id", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "f_id", ",", "...", "]", ".", "clone", "(", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "", "object_meta", "=", "OrderedDict", "(", "{", "'object_class_name'", ":", "obj_class", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "\n", "return", "frame_list", ",", "anno_frames", ",", "object_meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq.__init__": [[34, 64], ["base_video_dataset.BaseVideoDataset.__init__", "os.path.join", "os.path.join", "pycocotools.coco.COCO", "coco_seq.MSCOCOSeq.get_class_list", "coco_seq.MSCOCOSeq._get_sequence_list", "coco_seq.MSCOCOSeq._build_seq_per_class", "random.sample", "lib.train.admin.env_settings", "int", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_class_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_sequence_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._build_seq_per_class", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "jpeg4py_loader", ",", "data_fraction", "=", "None", ",", "split", "=", "\"train\"", ",", "version", "=", "\"2014\"", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - path to the coco dataset.\n            image_loader (default_image_loader) -  The function to read the images. If installed,\n                                                   jpeg4py (https://github.com/ajkxyz/jpeg4py) is used by default. Else,\n                                                   opencv's imread is used.\n            data_fraction (None) - Fraction of images to be used. The images are selected randomly. If None, all the\n                                  images  will be used\n            split - 'train' or 'val'.\n            version - version of coco dataset (2014 or 2017)\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "coco_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "'COCO'", ",", "root", ",", "image_loader", ")", "\n", "\n", "self", ".", "img_pth", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'images/{}{}/'", ".", "format", "(", "split", ",", "version", ")", ")", "\n", "self", ".", "anno_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'annotations/instances_{}{}.json'", ".", "format", "(", "split", ",", "version", ")", ")", "\n", "\n", "# Load the COCO set.", "\n", "self", ".", "coco_set", "=", "COCO", "(", "self", ".", "anno_path", ")", "\n", "\n", "self", ".", "cats", "=", "self", ".", "coco_set", ".", "cats", "\n", "\n", "self", ".", "class_list", "=", "self", ".", "get_class_list", "(", ")", "\n", "\n", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", ")", "\n", "\n", "if", "data_fraction", "is", "not", "None", ":", "\n", "            ", "self", ".", "sequence_list", "=", "random", ".", "sample", "(", "self", ".", "sequence_list", ",", "int", "(", "len", "(", "self", ".", "sequence_list", ")", "*", "data_fraction", ")", ")", "\n", "", "self", ".", "seq_per_class", "=", "self", ".", "_build_seq_per_class", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq._get_sequence_list": [[65, 70], ["list", "coco_seq.MSCOCOSeq.coco_set.anns.keys"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "def", "_get_sequence_list", "(", "self", ")", ":", "\n", "        ", "ann_list", "=", "list", "(", "self", ".", "coco_set", ".", "anns", ".", "keys", "(", ")", ")", "\n", "seq_list", "=", "[", "a", "for", "a", "in", "ann_list", "if", "self", ".", "coco_set", ".", "anns", "[", "a", "]", "[", "'iscrowd'", "]", "==", "0", "]", "\n", "\n", "return", "seq_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq.is_video_sequence": [[71, 73], ["None"], "methods", ["None"], ["", "def", "is_video_sequence", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq.get_num_classes": [[74, 76], ["len"], "methods", ["None"], ["", "def", "get_num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "class_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq.get_name": [[77, 79], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'coco'", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq.has_class_info": [[80, 82], ["None"], "methods", ["None"], ["", "def", "has_class_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq.get_class_list": [[83, 88], ["coco_seq.MSCOCOSeq.cats.keys", "class_list.append"], "methods", ["None"], ["", "def", "get_class_list", "(", "self", ")", ":", "\n", "        ", "class_list", "=", "[", "]", "\n", "for", "cat_id", "in", "self", ".", "cats", ".", "keys", "(", ")", ":", "\n", "            ", "class_list", ".", "append", "(", "self", ".", "cats", "[", "cat_id", "]", "[", "'name'", "]", ")", "\n", "", "return", "class_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq.has_segmentation_info": [[89, 91], ["None"], "methods", ["None"], ["", "def", "has_segmentation_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq.get_num_sequences": [[92, 94], ["len"], "methods", ["None"], ["", "def", "get_num_sequences", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq._build_seq_per_class": [[95, 105], ["enumerate", "seq_per_class[].append"], "methods", ["None"], ["", "def", "_build_seq_per_class", "(", "self", ")", ":", "\n", "        ", "seq_per_class", "=", "{", "}", "\n", "for", "i", ",", "seq", "in", "enumerate", "(", "self", ".", "sequence_list", ")", ":", "\n", "            ", "class_name", "=", "self", ".", "cats", "[", "self", ".", "coco_set", ".", "anns", "[", "seq", "]", "[", "'category_id'", "]", "]", "[", "'name'", "]", "\n", "if", "class_name", "not", "in", "seq_per_class", ":", "\n", "                ", "seq_per_class", "[", "class_name", "]", "=", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "seq_per_class", "[", "class_name", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "return", "seq_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq.get_sequences_in_class": [[106, 108], ["None"], "methods", ["None"], ["", "def", "get_sequences_in_class", "(", "self", ",", "class_name", ")", ":", "\n", "        ", "return", "self", ".", "seq_per_class", "[", "class_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq.get_sequence_info": [[109, 122], ["coco_seq.MSCOCOSeq._get_anno", "torch.Tensor().view", "torch.Tensor().unsqueeze", "valid.clone().byte", "torch.Tensor", "torch.Tensor", "valid.clone", "coco_seq.MSCOCOSeq.coco_set.annToMask"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_anno", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.annToMask"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "anno", "=", "self", ".", "_get_anno", "(", "seq_id", ")", "\n", "\n", "bbox", "=", "torch", ".", "Tensor", "(", "anno", "[", "'bbox'", "]", ")", ".", "view", "(", "1", ",", "4", ")", "\n", "\n", "mask", "=", "torch", ".", "Tensor", "(", "self", ".", "coco_set", ".", "annToMask", "(", "anno", ")", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "'''2021.1.3 To avoid too small bounding boxes. Here we change the threshold to 50 pixels'''", "\n", "valid", "=", "(", "bbox", "[", ":", ",", "2", "]", ">", "50", ")", "&", "(", "bbox", "[", ":", ",", "3", "]", ">", "50", ")", "\n", "\n", "visible", "=", "valid", ".", "clone", "(", ")", ".", "byte", "(", ")", "\n", "\n", "return", "{", "'bbox'", ":", "bbox", ",", "'mask'", ":", "mask", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq._get_anno": [[123, 127], ["None"], "methods", ["None"], ["", "def", "_get_anno", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "anno", "=", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "\n", "\n", "return", "anno", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq._get_frames": [[128, 132], ["coco_seq.MSCOCOSeq.image_loader", "os.path.join", "coco_seq.MSCOCOSeq.coco_set.loadImgs"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.loadImgs"], ["", "def", "_get_frames", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "path", "=", "self", ".", "coco_set", ".", "loadImgs", "(", "[", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "[", "'image_id'", "]", "]", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "img", "=", "self", ".", "image_loader", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_pth", ",", "path", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq.get_meta_info": [[133, 148], ["collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["", "def", "get_meta_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "cat_dict_current", "=", "self", ".", "cats", "[", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "[", "'category_id'", "]", "]", "\n", "object_meta", "=", "OrderedDict", "(", "{", "'object_class_name'", ":", "cat_dict_current", "[", "'name'", "]", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "cat_dict_current", "[", "'supercategory'", "]", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "", "except", ":", "\n", "            ", "object_meta", "=", "OrderedDict", "(", "{", "'object_class_name'", ":", "None", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "", "return", "object_meta", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq.get_class_name": [[150, 153], ["None"], "methods", ["None"], ["", "def", "get_class_name", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "cat_dict_current", "=", "self", ".", "cats", "[", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "[", "'category_id'", "]", "]", "\n", "return", "cat_dict_current", "[", "'name'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq.MSCOCOSeq.get_frames": [[154, 171], ["coco_seq.MSCOCOSeq._get_frames", "coco_seq.MSCOCOSeq.items", "coco_seq.MSCOCOSeq.get_meta_info", "coco_seq.MSCOCOSeq.copy", "coco_seq.MSCOCOSeq.get_sequence_info"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_frames", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_meta_info", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", "=", "None", ",", "frame_ids", "=", "None", ",", "anno", "=", "None", ")", ":", "\n", "# COCO is an image dataset. Thus we replicate the image denoted by seq_id len(frame_ids) times, and return a", "\n", "# list containing these replicated images.", "\n", "        ", "frame", "=", "self", ".", "_get_frames", "(", "seq_id", ")", "\n", "\n", "frame_list", "=", "[", "frame", ".", "copy", "(", ")", "for", "_", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "0", ",", "...", "]", "for", "_", "in", "frame_ids", "]", "\n", "\n", "", "object_meta", "=", "self", ".", "get_meta_info", "(", "seq_id", ")", "\n", "\n", "return", "frame_list", ",", "anno_frames", ",", "object_meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.__init__": [[71, 84], ["COCO_tool.COCO.createIndex", "dict", "dict", "dict", "dict", "collections.defaultdict", "collections.defaultdict", "type", "type"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.createIndex"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"\n        Constructor of Microsoft COCO helper class for reading and visualizing annotations.\n        :param annotation_file (str): location of annotation file\n        :param image_folder (str): location to the folder that hosts images.\n        :return:\n        \"\"\"", "\n", "# load dataset", "\n", "self", ".", "dataset", ",", "self", ".", "anns", ",", "self", ".", "cats", ",", "self", ".", "imgs", "=", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", "\n", "self", ".", "imgToAnns", ",", "self", ".", "catToImgs", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "assert", "type", "(", "dataset", ")", "==", "dict", ",", "'annotation file format {} not supported'", ".", "format", "(", "type", "(", "dataset", ")", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "createIndex", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.createIndex": [[85, 115], ["print", "print", "collections.defaultdict", "collections.defaultdict", "imgToAnns[].append", "catToImgs[].append"], "methods", ["None"], ["", "def", "createIndex", "(", "self", ")", ":", "\n", "# create index", "\n", "        ", "print", "(", "'creating index...'", ")", "\n", "anns", ",", "cats", ",", "imgs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "imgToAnns", ",", "catToImgs", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "if", "'annotations'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "ann", "in", "self", ".", "dataset", "[", "'annotations'", "]", ":", "\n", "                ", "imgToAnns", "[", "ann", "[", "'image_id'", "]", "]", ".", "append", "(", "ann", ")", "\n", "anns", "[", "ann", "[", "'id'", "]", "]", "=", "ann", "\n", "\n", "", "", "if", "'images'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "img", "in", "self", ".", "dataset", "[", "'images'", "]", ":", "\n", "                ", "imgs", "[", "img", "[", "'id'", "]", "]", "=", "img", "\n", "\n", "", "", "if", "'categories'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "cat", "in", "self", ".", "dataset", "[", "'categories'", "]", ":", "\n", "                ", "cats", "[", "cat", "[", "'id'", "]", "]", "=", "cat", "\n", "\n", "", "", "if", "'annotations'", "in", "self", ".", "dataset", "and", "'categories'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "ann", "in", "self", ".", "dataset", "[", "'annotations'", "]", ":", "\n", "                ", "catToImgs", "[", "ann", "[", "'category_id'", "]", "]", ".", "append", "(", "ann", "[", "'image_id'", "]", ")", "\n", "\n", "", "", "print", "(", "'index created!'", ")", "\n", "\n", "# create class members", "\n", "self", ".", "anns", "=", "anns", "\n", "self", ".", "imgToAnns", "=", "imgToAnns", "\n", "self", ".", "catToImgs", "=", "catToImgs", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "cats", "=", "cats", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.info": [[116, 123], ["COCO_tool.COCO.dataset[].items", "print"], "methods", ["None"], ["", "def", "info", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Print information about the annotation file.\n        :return:\n        \"\"\"", "\n", "for", "key", ",", "value", "in", "self", ".", "dataset", "[", "'info'", "]", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'{}: {}'", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.getAnnIds": [[124, 151], ["COCO_tool._isArrayLike", "COCO_tool._isArrayLike", "len", "len", "len", "list", "len", "itertools.chain.from_iterable", "len", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool._isArrayLike", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool._isArrayLike", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "", "def", "getAnnIds", "(", "self", ",", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "]", ",", "areaRng", "=", "[", "]", ",", "iscrowd", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Get ann ids that satisfy given filter conditions. default skips that filter\n        :param imgIds  (int array)     : get anns for given imgs\n               catIds  (int array)     : get anns for given cats\n               areaRng (float array)   : get anns for given area range (e.g. [0 inf])\n               iscrowd (boolean)       : get anns for given crowd label (False or True)\n        :return: ids (int array)       : integer array of ann ids\n        \"\"\"", "\n", "imgIds", "=", "imgIds", "if", "_isArrayLike", "(", "imgIds", ")", "else", "[", "imgIds", "]", "\n", "catIds", "=", "catIds", "if", "_isArrayLike", "(", "catIds", ")", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "imgIds", ")", "==", "len", "(", "catIds", ")", "==", "len", "(", "areaRng", ")", "==", "0", ":", "\n", "            ", "anns", "=", "self", ".", "dataset", "[", "'annotations'", "]", "\n", "", "else", ":", "\n", "            ", "if", "not", "len", "(", "imgIds", ")", "==", "0", ":", "\n", "                ", "lists", "=", "[", "self", ".", "imgToAnns", "[", "imgId", "]", "for", "imgId", "in", "imgIds", "if", "imgId", "in", "self", ".", "imgToAnns", "]", "\n", "anns", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "lists", ")", ")", "\n", "", "else", ":", "\n", "                ", "anns", "=", "self", ".", "dataset", "[", "'annotations'", "]", "\n", "", "anns", "=", "anns", "if", "len", "(", "catIds", ")", "==", "0", "else", "[", "ann", "for", "ann", "in", "anns", "if", "ann", "[", "'category_id'", "]", "in", "catIds", "]", "\n", "anns", "=", "anns", "if", "len", "(", "areaRng", ")", "==", "0", "else", "[", "ann", "for", "ann", "in", "anns", "if", "ann", "[", "'area'", "]", ">", "areaRng", "[", "0", "]", "and", "ann", "[", "'area'", "]", "<", "areaRng", "[", "1", "]", "]", "\n", "", "if", "not", "iscrowd", "==", "None", ":", "\n", "            ", "ids", "=", "[", "ann", "[", "'id'", "]", "for", "ann", "in", "anns", "if", "ann", "[", "'iscrowd'", "]", "==", "iscrowd", "]", "\n", "", "else", ":", "\n", "            ", "ids", "=", "[", "ann", "[", "'id'", "]", "for", "ann", "in", "anns", "]", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.getCatIds": [[152, 173], ["COCO_tool._isArrayLike", "COCO_tool._isArrayLike", "COCO_tool._isArrayLike", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool._isArrayLike", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool._isArrayLike", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool._isArrayLike"], ["", "def", "getCatIds", "(", "self", ",", "catNms", "=", "[", "]", ",", "supNms", "=", "[", "]", ",", "catIds", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        filtering parameters. default skips that filter.\n        :param catNms (str array)  : get cats for given cat names\n        :param supNms (str array)  : get cats for given supercategory names\n        :param catIds (int array)  : get cats for given cat ids\n        :return: ids (int array)   : integer array of cat ids\n        \"\"\"", "\n", "catNms", "=", "catNms", "if", "_isArrayLike", "(", "catNms", ")", "else", "[", "catNms", "]", "\n", "supNms", "=", "supNms", "if", "_isArrayLike", "(", "supNms", ")", "else", "[", "supNms", "]", "\n", "catIds", "=", "catIds", "if", "_isArrayLike", "(", "catIds", ")", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "catNms", ")", "==", "len", "(", "supNms", ")", "==", "len", "(", "catIds", ")", "==", "0", ":", "\n", "            ", "cats", "=", "self", ".", "dataset", "[", "'categories'", "]", "\n", "", "else", ":", "\n", "            ", "cats", "=", "self", ".", "dataset", "[", "'categories'", "]", "\n", "cats", "=", "cats", "if", "len", "(", "catNms", ")", "==", "0", "else", "[", "cat", "for", "cat", "in", "cats", "if", "cat", "[", "'name'", "]", "in", "catNms", "]", "\n", "cats", "=", "cats", "if", "len", "(", "supNms", ")", "==", "0", "else", "[", "cat", "for", "cat", "in", "cats", "if", "cat", "[", "'supercategory'", "]", "in", "supNms", "]", "\n", "cats", "=", "cats", "if", "len", "(", "catIds", ")", "==", "0", "else", "[", "cat", "for", "cat", "in", "cats", "if", "cat", "[", "'id'", "]", "in", "catIds", "]", "\n", "", "ids", "=", "[", "cat", "[", "'id'", "]", "for", "cat", "in", "cats", "]", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.getImgIds": [[174, 194], ["list", "COCO_tool._isArrayLike", "COCO_tool._isArrayLike", "len", "len", "COCO_tool.COCO.imgs.keys", "set", "enumerate", "set", "set", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool._isArrayLike", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool._isArrayLike"], ["", "def", "getImgIds", "(", "self", ",", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        Get img ids that satisfy given filter conditions.\n        :param imgIds (int array) : get imgs for given ids\n        :param catIds (int array) : get imgs with all given cats\n        :return: ids (int array)  : integer array of img ids\n        '''", "\n", "imgIds", "=", "imgIds", "if", "_isArrayLike", "(", "imgIds", ")", "else", "[", "imgIds", "]", "\n", "catIds", "=", "catIds", "if", "_isArrayLike", "(", "catIds", ")", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "imgIds", ")", "==", "len", "(", "catIds", ")", "==", "0", ":", "\n", "            ", "ids", "=", "self", ".", "imgs", ".", "keys", "(", ")", "\n", "", "else", ":", "\n", "            ", "ids", "=", "set", "(", "imgIds", ")", "\n", "for", "i", ",", "catId", "in", "enumerate", "(", "catIds", ")", ":", "\n", "                ", "if", "i", "==", "0", "and", "len", "(", "ids", ")", "==", "0", ":", "\n", "                    ", "ids", "=", "set", "(", "self", ".", "catToImgs", "[", "catId", "]", ")", "\n", "", "else", ":", "\n", "                    ", "ids", "&=", "set", "(", "self", ".", "catToImgs", "[", "catId", "]", ")", "\n", "", "", "", "return", "list", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.loadAnns": [[195, 205], ["COCO_tool._isArrayLike", "type"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool._isArrayLike"], ["", "def", "loadAnns", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load anns with the specified ids.\n        :param ids (int array)       : integer ids specifying anns\n        :return: anns (object array) : loaded ann objects\n        \"\"\"", "\n", "if", "_isArrayLike", "(", "ids", ")", ":", "\n", "            ", "return", "[", "self", ".", "anns", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "anns", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.loadCats": [[206, 216], ["COCO_tool._isArrayLike", "type"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool._isArrayLike"], ["", "", "def", "loadCats", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load cats with the specified ids.\n        :param ids (int array)       : integer ids specifying cats\n        :return: cats (object array) : loaded cat objects\n        \"\"\"", "\n", "if", "_isArrayLike", "(", "ids", ")", ":", "\n", "            ", "return", "[", "self", ".", "cats", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "cats", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.loadImgs": [[217, 227], ["COCO_tool._isArrayLike", "type"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool._isArrayLike"], ["", "", "def", "loadImgs", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load anns with the specified ids.\n        :param ids (int array)       : integer ids specifying img\n        :return: imgs (object array) : loaded img objects\n        \"\"\"", "\n", "if", "_isArrayLike", "(", "ids", ")", ":", "\n", "            ", "return", "[", "self", ".", "imgs", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "imgs", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.showAnns": [[228, 299], ["len", "matplotlib.gca", "matplotlib.gca.set_autoscale_on", "matplotlib.collections.PatchCollection", "matplotlib.gca.add_collection", "matplotlib.collections.PatchCollection", "matplotlib.gca.add_collection", "Exception", "numpy.array", "matplotlib.plot", "matplotlib.plot", "numpy.array().reshape", "polygons.append", "color.append", "print", "type", "pycocotools.mask.decode", "numpy.ones", "range", "matplotlib.gca.imshow", "type", "numpy.array", "numpy.all", "matplotlib.patches.Polygon", "numpy.array().reshape", "polygons.append", "color.append", "type", "pycocotools.mask.frPyObjects", "numpy.dstack", "matplotlib.plot", "numpy.array", "matplotlib.patches.Polygon", "numpy.array", "numpy.random.random().tolist", "numpy.random.random", "numpy.array", "int", "COCO_tool.COCO.loadCats", "numpy.random.random", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.loadCats"], ["", "", "def", "showAnns", "(", "self", ",", "anns", ",", "draw_bbox", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Display the specified annotations.\n        :param anns (array of object): annotations to display\n        :return: None\n        \"\"\"", "\n", "if", "len", "(", "anns", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "if", "'segmentation'", "in", "anns", "[", "0", "]", "or", "'keypoints'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "datasetType", "=", "'instances'", "\n", "", "elif", "'caption'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "datasetType", "=", "'captions'", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'datasetType not supported'", ")", "\n", "", "if", "datasetType", "==", "'instances'", ":", "\n", "            ", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_autoscale_on", "(", "False", ")", "\n", "polygons", "=", "[", "]", "\n", "color", "=", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "c", "=", "(", "np", ".", "random", ".", "random", "(", "(", "1", ",", "3", ")", ")", "*", "0.6", "+", "0.4", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "if", "'segmentation'", "in", "ann", ":", "\n", "                    ", "if", "type", "(", "ann", "[", "'segmentation'", "]", ")", "==", "list", ":", "\n", "# polygon", "\n", "                        ", "for", "seg", "in", "ann", "[", "'segmentation'", "]", ":", "\n", "                            ", "poly", "=", "np", ".", "array", "(", "seg", ")", ".", "reshape", "(", "(", "int", "(", "len", "(", "seg", ")", "/", "2", ")", ",", "2", ")", ")", "\n", "polygons", ".", "append", "(", "Polygon", "(", "poly", ")", ")", "\n", "color", ".", "append", "(", "c", ")", "\n", "", "", "else", ":", "\n", "# mask", "\n", "                        ", "t", "=", "self", ".", "imgs", "[", "ann", "[", "'image_id'", "]", "]", "\n", "if", "type", "(", "ann", "[", "'segmentation'", "]", "[", "'counts'", "]", ")", "==", "list", ":", "\n", "                            ", "rle", "=", "maskUtils", ".", "frPyObjects", "(", "[", "ann", "[", "'segmentation'", "]", "]", ",", "t", "[", "'height'", "]", ",", "t", "[", "'width'", "]", ")", "\n", "", "else", ":", "\n", "                            ", "rle", "=", "[", "ann", "[", "'segmentation'", "]", "]", "\n", "", "m", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "img", "=", "np", ".", "ones", "(", "(", "m", ".", "shape", "[", "0", "]", ",", "m", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "if", "ann", "[", "'iscrowd'", "]", "==", "1", ":", "\n", "                            ", "color_mask", "=", "np", ".", "array", "(", "[", "2.0", ",", "166.0", ",", "101.0", "]", ")", "/", "255", "\n", "", "if", "ann", "[", "'iscrowd'", "]", "==", "0", ":", "\n", "                            ", "color_mask", "=", "np", ".", "random", ".", "random", "(", "(", "1", ",", "3", ")", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                            ", "img", "[", ":", ",", ":", ",", "i", "]", "=", "color_mask", "[", "i", "]", "\n", "", "ax", ".", "imshow", "(", "np", ".", "dstack", "(", "(", "img", ",", "m", "*", "0.5", ")", ")", ")", "\n", "", "", "if", "'keypoints'", "in", "ann", "and", "type", "(", "ann", "[", "'keypoints'", "]", ")", "==", "list", ":", "\n", "# turn skeleton into zero-based index", "\n", "                    ", "sks", "=", "np", ".", "array", "(", "self", ".", "loadCats", "(", "ann", "[", "'category_id'", "]", ")", "[", "0", "]", "[", "'skeleton'", "]", ")", "-", "1", "\n", "kp", "=", "np", ".", "array", "(", "ann", "[", "'keypoints'", "]", ")", "\n", "x", "=", "kp", "[", "0", ":", ":", "3", "]", "\n", "y", "=", "kp", "[", "1", ":", ":", "3", "]", "\n", "v", "=", "kp", "[", "2", ":", ":", "3", "]", "\n", "for", "sk", "in", "sks", ":", "\n", "                        ", "if", "np", ".", "all", "(", "v", "[", "sk", "]", ">", "0", ")", ":", "\n", "                            ", "plt", ".", "plot", "(", "x", "[", "sk", "]", ",", "y", "[", "sk", "]", ",", "linewidth", "=", "3", ",", "color", "=", "c", ")", "\n", "", "", "plt", ".", "plot", "(", "x", "[", "v", ">", "0", "]", ",", "y", "[", "v", ">", "0", "]", ",", "'o'", ",", "markersize", "=", "8", ",", "markerfacecolor", "=", "c", ",", "markeredgecolor", "=", "'k'", ",", "markeredgewidth", "=", "2", ")", "\n", "plt", ".", "plot", "(", "x", "[", "v", ">", "1", "]", ",", "y", "[", "v", ">", "1", "]", ",", "'o'", ",", "markersize", "=", "8", ",", "markerfacecolor", "=", "c", ",", "markeredgecolor", "=", "c", ",", "markeredgewidth", "=", "2", ")", "\n", "\n", "", "if", "draw_bbox", ":", "\n", "                    ", "[", "bbox_x", ",", "bbox_y", ",", "bbox_w", ",", "bbox_h", "]", "=", "ann", "[", "'bbox'", "]", "\n", "poly", "=", "[", "[", "bbox_x", ",", "bbox_y", "]", ",", "[", "bbox_x", ",", "bbox_y", "+", "bbox_h", "]", ",", "[", "bbox_x", "+", "bbox_w", ",", "bbox_y", "+", "bbox_h", "]", ",", "[", "bbox_x", "+", "bbox_w", ",", "bbox_y", "]", "]", "\n", "np_poly", "=", "np", ".", "array", "(", "poly", ")", ".", "reshape", "(", "(", "4", ",", "2", ")", ")", "\n", "polygons", ".", "append", "(", "Polygon", "(", "np_poly", ")", ")", "\n", "color", ".", "append", "(", "c", ")", "\n", "\n", "", "", "p", "=", "PatchCollection", "(", "polygons", ",", "facecolor", "=", "color", ",", "linewidths", "=", "0", ",", "alpha", "=", "0.4", ")", "\n", "ax", ".", "add_collection", "(", "p", ")", "\n", "p", "=", "PatchCollection", "(", "polygons", ",", "facecolor", "=", "'none'", ",", "edgecolors", "=", "color", ",", "linewidths", "=", "2", ")", "\n", "ax", ".", "add_collection", "(", "p", ")", "\n", "", "elif", "datasetType", "==", "'captions'", ":", "\n", "            ", "for", "ann", "in", "anns", ":", "\n", "                ", "print", "(", "ann", "[", "'caption'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.loadRes": [[300, 361], ["COCO_tool.COCO", "print", "time.time", "print", "COCO_tool.COCO.createIndex", "type", "set", "enumerate", "type", "open", "json.load", "type", "COCO_tool.COCO.loadNumpyAnnotations", "set", "set", "set", "set", "copy.deepcopy", "enumerate", "type", "COCO_tool.COCO.getImgIds", "copy.deepcopy", "enumerate", "time.time", "pycocotools.mask.area", "copy.deepcopy", "enumerate", "pycocotools.mask.toBbox", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.createIndex", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.loadNumpyAnnotations", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.getImgIds", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "", "", "def", "loadRes", "(", "self", ",", "resFile", ")", ":", "\n", "        ", "\"\"\"\n        Load result file and return a result api object.\n        :param   resFile (str)     : file name of result file\n        :return: res (obj)         : result api object\n        \"\"\"", "\n", "res", "=", "COCO", "(", ")", "\n", "res", ".", "dataset", "[", "'images'", "]", "=", "[", "img", "for", "img", "in", "self", ".", "dataset", "[", "'images'", "]", "]", "\n", "\n", "print", "(", "'Loading and preparing results...'", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "if", "type", "(", "resFile", ")", "==", "str", "or", "(", "PYTHON_VERSION", "==", "2", "and", "type", "(", "resFile", ")", "==", "unicode", ")", ":", "\n", "            ", "with", "open", "(", "resFile", ")", "as", "f", ":", "\n", "                ", "anns", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "elif", "type", "(", "resFile", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "anns", "=", "self", ".", "loadNumpyAnnotations", "(", "resFile", ")", "\n", "", "else", ":", "\n", "            ", "anns", "=", "resFile", "\n", "", "assert", "type", "(", "anns", ")", "==", "list", ",", "'results in not an array of objects'", "\n", "annsImgIds", "=", "[", "ann", "[", "'image_id'", "]", "for", "ann", "in", "anns", "]", "\n", "assert", "set", "(", "annsImgIds", ")", "==", "(", "set", "(", "annsImgIds", ")", "&", "set", "(", "self", ".", "getImgIds", "(", ")", ")", ")", ",", "'Results do not correspond to current coco set'", "\n", "if", "'caption'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "imgIds", "=", "set", "(", "[", "img", "[", "'id'", "]", "for", "img", "in", "res", ".", "dataset", "[", "'images'", "]", "]", ")", "&", "set", "(", "[", "ann", "[", "'image_id'", "]", "for", "ann", "in", "anns", "]", ")", "\n", "res", ".", "dataset", "[", "'images'", "]", "=", "[", "img", "for", "img", "in", "res", ".", "dataset", "[", "'images'", "]", "if", "img", "[", "'id'", "]", "in", "imgIds", "]", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "                ", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "", "", "elif", "'bbox'", "in", "anns", "[", "0", "]", "and", "not", "anns", "[", "0", "]", "[", "'bbox'", "]", "==", "[", "]", ":", "\n", "            ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "                ", "bb", "=", "ann", "[", "'bbox'", "]", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "[", "bb", "[", "0", "]", ",", "bb", "[", "0", "]", "+", "bb", "[", "2", "]", ",", "bb", "[", "1", "]", ",", "bb", "[", "1", "]", "+", "bb", "[", "3", "]", "]", "\n", "if", "not", "'segmentation'", "in", "ann", ":", "\n", "                    ", "ann", "[", "'segmentation'", "]", "=", "[", "[", "x1", ",", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "y2", ",", "x2", ",", "y1", "]", "]", "\n", "", "ann", "[", "'area'", "]", "=", "bb", "[", "2", "]", "*", "bb", "[", "3", "]", "\n", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'iscrowd'", "]", "=", "0", "\n", "", "", "elif", "'segmentation'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "# now only support compressed RLE format as segmentation results", "\n", "                ", "ann", "[", "'area'", "]", "=", "maskUtils", ".", "area", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "if", "not", "'bbox'", "in", "ann", ":", "\n", "                    ", "ann", "[", "'bbox'", "]", "=", "maskUtils", ".", "toBbox", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'iscrowd'", "]", "=", "0", "\n", "", "", "elif", "'keypoints'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "                ", "s", "=", "ann", "[", "'keypoints'", "]", "\n", "x", "=", "s", "[", "0", ":", ":", "3", "]", "\n", "y", "=", "s", "[", "1", ":", ":", "3", "]", "\n", "x0", ",", "x1", ",", "y0", ",", "y1", "=", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "min", "(", "y", ")", ",", "np", ".", "max", "(", "y", ")", "\n", "ann", "[", "'area'", "]", "=", "(", "x1", "-", "x0", ")", "*", "(", "y1", "-", "y0", ")", "\n", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'bbox'", "]", "=", "[", "x0", ",", "y0", ",", "x1", "-", "x0", ",", "y1", "-", "y0", "]", "\n", "", "", "print", "(", "'DONE (t={:0.2f}s)'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n", "res", ".", "dataset", "[", "'annotations'", "]", "=", "anns", "\n", "res", ".", "createIndex", "(", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.download": [[362, 385], ["len", "enumerate", "print", "len", "COCO_tool.COCO.imgs.values", "COCO_tool.COCO.loadImgs", "os.path.exists", "os.makedirs", "time.time", "os.path.join", "print", "os.path.exists", "urlretrieve", "time.time"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.loadImgs"], ["", "def", "download", "(", "self", ",", "tarDir", "=", "None", ",", "imgIds", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        Download COCO images from mscoco.org server.\n        :param tarDir (str): COCO results directory name\n               imgIds (list): images to be downloaded\n        :return:\n        '''", "\n", "if", "tarDir", "is", "None", ":", "\n", "            ", "print", "(", "'Please specify target directory'", ")", "\n", "return", "-", "1", "\n", "", "if", "len", "(", "imgIds", ")", "==", "0", ":", "\n", "            ", "imgs", "=", "self", ".", "imgs", ".", "values", "(", ")", "\n", "", "else", ":", "\n", "            ", "imgs", "=", "self", ".", "loadImgs", "(", "imgIds", ")", "\n", "", "N", "=", "len", "(", "imgs", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "tarDir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "tarDir", ")", "\n", "", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "            ", "tic", "=", "time", ".", "time", "(", ")", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "tarDir", ",", "img", "[", "'file_name'", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", ":", "\n", "                ", "urlretrieve", "(", "img", "[", "'coco_url'", "]", ",", "fname", ")", "\n", "", "print", "(", "'downloaded {}/{} images (t={:0.1f}s)'", ".", "format", "(", "i", ",", "N", ",", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.loadNumpyAnnotations": [[386, 408], ["print", "print", "range", "type", "print", "int", "int"], "methods", ["None"], ["", "", "def", "loadNumpyAnnotations", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Convert result data from a numpy array [Nx7] where each row contains {imageID,x1,y1,w,h,score,class}\n        :param  data (numpy.ndarray)\n        :return: annotations (python nested list)\n        \"\"\"", "\n", "print", "(", "'Converting ndarray to lists...'", ")", "\n", "assert", "(", "type", "(", "data", ")", "==", "np", ".", "ndarray", ")", "\n", "print", "(", "data", ".", "shape", ")", "\n", "assert", "(", "data", ".", "shape", "[", "1", "]", "==", "7", ")", "\n", "N", "=", "data", ".", "shape", "[", "0", "]", "\n", "ann", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "if", "i", "%", "1000000", "==", "0", ":", "\n", "                ", "print", "(", "'{}/{}'", ".", "format", "(", "i", ",", "N", ")", ")", "\n", "", "ann", "+=", "[", "{", "\n", "'image_id'", ":", "int", "(", "data", "[", "i", ",", "0", "]", ")", ",", "\n", "'bbox'", ":", "[", "data", "[", "i", ",", "1", "]", ",", "data", "[", "i", ",", "2", "]", ",", "data", "[", "i", ",", "3", "]", ",", "data", "[", "i", ",", "4", "]", "]", ",", "\n", "'score'", ":", "data", "[", "i", ",", "5", "]", ",", "\n", "'category_id'", ":", "int", "(", "data", "[", "i", ",", "6", "]", ")", ",", "\n", "}", "]", "\n", "", "return", "ann", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.annToRLE": [[409, 429], ["type", "pycocotools.mask.frPyObjects", "pycocotools.mask.merge", "type", "pycocotools.mask.frPyObjects"], "methods", ["None"], ["", "def", "annToRLE", "(", "self", ",", "ann", ")", ":", "\n", "        ", "\"\"\"\n        Convert annotation which can be polygons, uncompressed RLE to RLE.\n        :return: binary mask (numpy 2D array)\n        \"\"\"", "\n", "t", "=", "self", ".", "imgs", "[", "ann", "[", "'image_id'", "]", "]", "\n", "h", ",", "w", "=", "t", "[", "'height'", "]", ",", "t", "[", "'width'", "]", "\n", "segm", "=", "ann", "[", "'segmentation'", "]", "\n", "if", "type", "(", "segm", ")", "==", "list", ":", "\n", "# polygon -- a single object might consist of multiple parts", "\n", "# we merge all parts into one mask rle code", "\n", "            ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "segm", ",", "h", ",", "w", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "", "elif", "type", "(", "segm", "[", "'counts'", "]", ")", "==", "list", ":", "\n", "# uncompressed RLE", "\n", "            ", "rle", "=", "maskUtils", ".", "frPyObjects", "(", "segm", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "# rle", "\n", "            ", "rle", "=", "ann", "[", "'segmentation'", "]", "\n", "", "return", "rle", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.annToMask": [[430, 438], ["COCO_tool.COCO.annToRLE", "pycocotools.mask.decode"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.annToRLE"], ["", "def", "annToMask", "(", "self", ",", "ann", ")", ":", "\n", "        ", "\"\"\"\n        Convert annotation which can be polygons, uncompressed RLE, or RLE to binary mask.\n        :return: binary mask (numpy 2D array)\n        \"\"\"", "\n", "rle", "=", "self", ".", "annToRLE", "(", "ann", ")", "\n", "m", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "return", "m", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool._isArrayLike": [[66, 68], ["hasattr", "hasattr"], "function", ["None"], ["", "def", "_isArrayLike", "(", "obj", ")", ":", "\n", "    ", "return", "hasattr", "(", "obj", ",", "'__iter__'", ")", "and", "hasattr", "(", "obj", ",", "'__len__'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.__init__": [[9, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "root", ",", "image_loader", "=", "jpeg4py_loader_w_failsafe", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - The root path to the dataset\n            image_loader (jpeg4py_loader) -  The function to read the images. jpeg4py (https://github.com/ajkxyz/jpeg4py)\n                                            is used by default.\n        \"\"\"", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "image_loader", "=", "image_loader", "\n", "\n", "self", ".", "sequence_list", "=", "[", "]", "# Contains the list of sequences.", "\n", "self", ".", "class_list", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.__len__": [[23, 29], ["base_video_dataset.BaseVideoDataset.get_num_sequences"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_num_sequences"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns size of the dataset\n        returns:\n            int - number of samples in the dataset\n        \"\"\"", "\n", "return", "self", ".", "get_num_sequences", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.__getitem__": [[30, 34], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\" Not to be used! Check get_frames() instead.\n        \"\"\"", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.is_video_sequence": [[35, 42], ["None"], "methods", ["None"], ["", "def", "is_video_sequence", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns whether the dataset is a video dataset or an image dataset\n\n        returns:\n            bool - True if a video dataset\n        \"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.is_synthetic_video_dataset": [[43, 50], ["None"], "methods", ["None"], ["", "def", "is_synthetic_video_dataset", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns whether the dataset contains real videos or synthetic\n\n        returns:\n            bool - True if a video dataset\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.get_name": [[51, 58], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "\"\"\" Name of the dataset\n\n        returns:\n            string - Name of the dataset\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.get_num_sequences": [[59, 65], ["len"], "methods", ["None"], ["", "def", "get_num_sequences", "(", "self", ")", ":", "\n", "        ", "\"\"\" Number of sequences in a dataset\n\n        returns:\n            int - number of sequences in the dataset.\"\"\"", "\n", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.has_class_info": [[66, 68], ["None"], "methods", ["None"], ["", "def", "has_class_info", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.has_occlusion_info": [[69, 71], ["None"], "methods", ["None"], ["", "def", "has_occlusion_info", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.get_num_classes": [[72, 74], ["len"], "methods", ["None"], ["", "def", "get_num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "class_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.get_class_list": [[75, 77], ["None"], "methods", ["None"], ["", "def", "get_class_list", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "class_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.get_sequences_in_class": [[78, 80], ["None"], "methods", ["None"], ["", "def", "get_sequences_in_class", "(", "self", ",", "class_name", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.has_segmentation_info": [[81, 83], ["None"], "methods", ["None"], ["", "def", "has_segmentation_info", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.get_sequence_info": [[84, 94], ["None"], "methods", ["None"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "\"\"\" Returns information about a particular sequences,\n\n        args:\n            seq_id - index of the sequence\n\n        returns:\n            Dict\n            \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_video_dataset.BaseVideoDataset.get_frames": [[95, 110], ["None"], "methods", ["None"], ["", "def", "get_frames", "(", "self", ",", "seq_id", ",", "frame_ids", ",", "anno", "=", "None", ")", ":", "\n", "        ", "\"\"\" Get a set of frames from a particular sequence\n\n        args:\n            seq_id      - index of sequence\n            frame_ids   - a list of frame numbers\n            anno(None)  - The annotation for the sequence (see get_sequence_info). If None, they will be loaded.\n\n        returns:\n            list - List of frames corresponding to frame_ids\n            list - List of dicts for each frame\n            dict - A dict containing meta information about the sequence, e.g. class of the target object.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID.__init__": [[29, 60], ["base_video_dataset.BaseVideoDataset.__init__", "os.path.join", "os.path.isfile", "imagenetvid.ImagenetVID._process_anno", "lib.train.admin.env_settings", "open", "json.load", "open", "json.dump", "len", "imagenetvid.get_target_to_image_ratio"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID._process_anno", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.get_target_to_image_ratio"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "jpeg4py_loader", ",", "min_length", "=", "0", ",", "max_target_area", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - path to the imagenet vid dataset.\n            image_loader (default_image_loader) -  The function to read the images. If installed,\n                                                   jpeg4py (https://github.com/ajkxyz/jpeg4py) is used by default. Else,\n                                                   opencv's imread is used.\n            min_length - Minimum allowed sequence length.\n            max_target_area - max allowed ratio between target area and image area. Can be used to filter out targets\n                                which cover complete image.\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "imagenet_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "\"imagenetvid\"", ",", "root", ",", "image_loader", ")", "\n", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'cache.json'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cache_file", ")", ":", "\n", "# If available, load the pre-processed cache file containing meta-info for each sequence", "\n", "            ", "with", "open", "(", "cache_file", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "sequence_list_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "sequence_list", "=", "sequence_list_dict", "\n", "", "else", ":", "\n", "# Else process the imagenet annotations and generate the cache file", "\n", "            ", "self", ".", "sequence_list", "=", "self", ".", "_process_anno", "(", "root", ")", "\n", "\n", "with", "open", "(", "cache_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "self", ".", "sequence_list", ",", "f", ")", "\n", "\n", "# Filter the sequences based on min_length and max_target_area in the first frame", "\n", "", "", "self", ".", "sequence_list", "=", "[", "x", "for", "x", "in", "self", ".", "sequence_list", "if", "len", "(", "x", "[", "'anno'", "]", ")", ">=", "min_length", "and", "\n", "get_target_to_image_ratio", "(", "x", ")", "<", "max_target_area", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID.get_name": [[61, 63], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'imagenetvid'", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID.get_num_sequences": [[64, 66], ["len"], "methods", ["None"], ["", "def", "get_num_sequences", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID.get_sequence_info": [[67, 72], ["torch.Tensor", "torch.ByteTensor", "valid.byte"], "methods", ["None"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "bb_anno", "=", "torch", ".", "Tensor", "(", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "'anno'", "]", ")", "\n", "valid", "=", "(", "bb_anno", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "bb_anno", "[", ":", ",", "3", "]", ">", "0", ")", "\n", "visible", "=", "torch", ".", "ByteTensor", "(", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "'target_visible'", "]", ")", "&", "valid", ".", "byte", "(", ")", "\n", "return", "{", "'bbox'", ":", "bb_anno", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID._get_frame": [[73, 80], ["os.path.join", "imagenetvid.ImagenetVID.image_loader"], "methods", ["None"], ["", "def", "_get_frame", "(", "self", ",", "sequence", ",", "frame_id", ")", ":", "\n", "        ", "set_name", "=", "'ILSVRC2015_VID_train_{:04d}'", ".", "format", "(", "sequence", "[", "'set_id'", "]", ")", "\n", "vid_name", "=", "'ILSVRC2015_train_{:08d}'", ".", "format", "(", "sequence", "[", "'vid_id'", "]", ")", "\n", "frame_number", "=", "frame_id", "+", "sequence", "[", "'start_frame'", "]", "\n", "frame_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'Data'", ",", "'VID'", ",", "'train'", ",", "set_name", ",", "vid_name", ",", "\n", "'{:06d}.JPEG'", ".", "format", "(", "frame_number", ")", ")", "\n", "return", "self", ".", "image_loader", "(", "frame_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID.get_frames": [[81, 102], ["imagenetvid.ImagenetVID.items", "collections.OrderedDict", "imagenetvid.ImagenetVID._get_frame", "imagenetvid.ImagenetVID.get_sequence_info", "value[].clone"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID._get_frame", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", ",", "frame_ids", ",", "anno", "=", "None", ")", ":", "\n", "        ", "sequence", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "\n", "\n", "frame_list", "=", "[", "self", ".", "_get_frame", "(", "sequence", ",", "f", ")", "for", "f", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "# Create anno dict", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "f_id", ",", "...", "]", ".", "clone", "(", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "# added the class info to the meta info", "\n", "", "object_meta", "=", "OrderedDict", "(", "{", "'object_class'", ":", "sequence", "[", "'class_name'", "]", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "\n", "return", "frame_list", ",", "anno_frames", ",", "object_meta", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.ImagenetVID._process_anno": [[103, 160], ["os.path.join", "sorted", "os.listdir", "int", "sorted", "os.listdir", "int", "sorted", "xml.parse", "enumerate", "tracklets.items", "set.split", "os.path.join", "os.listdir", "os.path.join", "int", "int", "xml.ElementTree().findall", "range", "all_sequences.append", "vid.split", "os.path.join", "len", "xml.parse.find", "xml.parse.find", "xml.ElementTree", "target.find", "int", "int", "int", "int", "tracklet_anno.append", "target_visible.append", "os.path.join", "target.find", "target.find", "target.find", "target.find", "target.find", "target.find", "target.find"], "methods", ["None"], ["", "def", "_process_anno", "(", "self", ",", "root", ")", ":", "\n", "# Builds individual tracklets", "\n", "        ", "base_vid_anno_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Annotations'", ",", "'VID'", ",", "'train'", ")", "\n", "\n", "all_sequences", "=", "[", "]", "\n", "for", "set", "in", "sorted", "(", "os", ".", "listdir", "(", "base_vid_anno_path", ")", ")", ":", "\n", "            ", "set_id", "=", "int", "(", "set", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "for", "vid", "in", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "base_vid_anno_path", ",", "set", ")", ")", ")", ":", "\n", "\n", "                ", "vid_id", "=", "int", "(", "vid", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "anno_files", "=", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "base_vid_anno_path", ",", "set", ",", "vid", ")", ")", ")", "\n", "\n", "frame1_anno", "=", "ET", ".", "parse", "(", "os", ".", "path", ".", "join", "(", "base_vid_anno_path", ",", "set", ",", "vid", ",", "anno_files", "[", "0", "]", ")", ")", "\n", "image_size", "=", "[", "int", "(", "frame1_anno", ".", "find", "(", "'size/width'", ")", ".", "text", ")", ",", "int", "(", "frame1_anno", ".", "find", "(", "'size/height'", ")", ".", "text", ")", "]", "\n", "\n", "objects", "=", "[", "ET", ".", "ElementTree", "(", "file", "=", "os", ".", "path", ".", "join", "(", "base_vid_anno_path", ",", "set", ",", "vid", ",", "f", ")", ")", ".", "findall", "(", "'object'", ")", "\n", "for", "f", "in", "anno_files", "]", "\n", "\n", "tracklets", "=", "{", "}", "\n", "\n", "# Find all tracklets along with start frame", "\n", "for", "f_id", ",", "all_targets", "in", "enumerate", "(", "objects", ")", ":", "\n", "                    ", "for", "target", "in", "all_targets", ":", "\n", "                        ", "tracklet_id", "=", "target", ".", "find", "(", "'trackid'", ")", ".", "text", "\n", "if", "tracklet_id", "not", "in", "tracklets", ":", "\n", "                            ", "tracklets", "[", "tracklet_id", "]", "=", "f_id", "\n", "\n", "", "", "", "for", "tracklet_id", ",", "tracklet_start", "in", "tracklets", ".", "items", "(", ")", ":", "\n", "                    ", "tracklet_anno", "=", "[", "]", "\n", "target_visible", "=", "[", "]", "\n", "class_name_id", "=", "None", "\n", "\n", "for", "f_id", "in", "range", "(", "tracklet_start", ",", "len", "(", "objects", ")", ")", ":", "\n", "                        ", "found", "=", "False", "\n", "for", "target", "in", "objects", "[", "f_id", "]", ":", "\n", "                            ", "if", "target", ".", "find", "(", "'trackid'", ")", ".", "text", "==", "tracklet_id", ":", "\n", "                                ", "if", "not", "class_name_id", ":", "\n", "                                    ", "class_name_id", "=", "target", ".", "find", "(", "'name'", ")", ".", "text", "\n", "", "x1", "=", "int", "(", "target", ".", "find", "(", "'bndbox/xmin'", ")", ".", "text", ")", "\n", "y1", "=", "int", "(", "target", ".", "find", "(", "'bndbox/ymin'", ")", ".", "text", ")", "\n", "x2", "=", "int", "(", "target", ".", "find", "(", "'bndbox/xmax'", ")", ".", "text", ")", "\n", "y2", "=", "int", "(", "target", ".", "find", "(", "'bndbox/ymax'", ")", ".", "text", ")", "\n", "\n", "tracklet_anno", ".", "append", "(", "[", "x1", ",", "y1", ",", "x2", "-", "x1", ",", "y2", "-", "y1", "]", ")", "\n", "target_visible", ".", "append", "(", "target", ".", "find", "(", "'occluded'", ")", ".", "text", "==", "'0'", ")", "\n", "\n", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                            ", "break", "\n", "\n", "", "", "new_sequence", "=", "{", "'set_id'", ":", "set_id", ",", "'vid_id'", ":", "vid_id", ",", "'class_name'", ":", "class_name_id", ",", "\n", "'start_frame'", ":", "tracklet_start", ",", "'anno'", ":", "tracklet_anno", ",", "\n", "'target_visible'", ":", "target_visible", ",", "'image_size'", ":", "image_size", "}", "\n", "all_sequences", ".", "append", "(", "new_sequence", ")", "\n", "\n", "", "", "", "return", "all_sequences", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.imagenetvid.get_target_to_image_ratio": [[11, 15], ["torch.Tensor", "torch.Tensor", "anno[].prod", "torch.Tensor.prod"], "function", ["None"], ["def", "get_target_to_image_ratio", "(", "seq", ")", ":", "\n", "    ", "anno", "=", "torch", ".", "Tensor", "(", "seq", "[", "'anno'", "]", ")", "\n", "img_sz", "=", "torch", ".", "Tensor", "(", "seq", "[", "'image_size'", "]", ")", "\n", "return", "(", "anno", "[", "0", ",", "2", ":", "4", "]", ".", "prod", "(", ")", "/", "(", "img_sz", ".", "prod", "(", ")", ")", ")", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.__init__": [[8, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "root", ",", "image_loader", "=", "jpeg4py_loader", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - The root path to the dataset\n            image_loader (jpeg4py_loader) -  The function to read the images. jpeg4py (https://github.com/ajkxyz/jpeg4py)\n                                            is used by default.\n        \"\"\"", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "image_loader", "=", "image_loader", "\n", "\n", "self", ".", "image_list", "=", "[", "]", "# Contains the list of sequences.", "\n", "self", ".", "class_list", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.__len__": [[22, 28], ["base_image_dataset.BaseImageDataset.get_num_images"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.get_num_images"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns size of the dataset\n        returns:\n            int - number of samples in the dataset\n        \"\"\"", "\n", "return", "self", ".", "get_num_images", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.__getitem__": [[29, 33], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\" Not to be used! Check get_frames() instead.\n        \"\"\"", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.get_name": [[34, 41], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "\"\"\" Name of the dataset\n\n        returns:\n            string - Name of the dataset\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.get_num_images": [[42, 48], ["len"], "methods", ["None"], ["", "def", "get_num_images", "(", "self", ")", ":", "\n", "        ", "\"\"\" Number of sequences in a dataset\n\n        returns:\n            int - number of sequences in the dataset.\"\"\"", "\n", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.has_class_info": [[49, 51], ["None"], "methods", ["None"], ["", "def", "has_class_info", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.get_class_name": [[52, 54], ["None"], "methods", ["None"], ["", "def", "get_class_name", "(", "self", ",", "image_id", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.get_num_classes": [[55, 57], ["len"], "methods", ["None"], ["", "def", "get_num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "class_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.get_class_list": [[58, 60], ["None"], "methods", ["None"], ["", "def", "get_class_list", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "class_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.get_images_in_class": [[61, 63], ["None"], "methods", ["None"], ["", "def", "get_images_in_class", "(", "self", ",", "class_name", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.has_segmentation_info": [[64, 66], ["None"], "methods", ["None"], ["", "def", "has_segmentation_info", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.get_image_info": [[67, 77], ["None"], "methods", ["None"], ["", "def", "get_image_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "\"\"\" Returns information about a particular image,\n\n        args:\n            seq_id - index of the image\n\n        returns:\n            Dict\n            \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.base_image_dataset.BaseImageDataset.get_image": [[78, 92], ["None"], "methods", ["None"], ["", "def", "get_image", "(", "self", ",", "image_id", ",", "anno", "=", "None", ")", ":", "\n", "        ", "\"\"\" Get a image\n\n        args:\n            image_id      - index of image\n            anno(None)  - The annotation for the sequence (see get_sequence_info). If None, they will be loaded.\n\n        returns:\n            image -\n            anno -\n            dict - A dict containing meta information about the sequence, e.g. class of the target object.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.__init__": [[35, 70], ["base_video_dataset.BaseVideoDataset.__init__", "print", "time.time", "lib.utils.lmdb_utils.decode_json", "print", "lib.train.dataset.COCO_tool.COCO", "coco_seq_lmdb.MSCOCOSeq_lmdb.get_class_list", "coco_seq_lmdb.MSCOCOSeq_lmdb._get_sequence_list", "coco_seq_lmdb.MSCOCOSeq_lmdb._build_seq_per_class", "random.sample", "lib.train.admin.env_settings", "int", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_json", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_class_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_sequence_list", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._build_seq_per_class", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.environment.env_settings"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "jpeg4py_loader", ",", "data_fraction", "=", "None", ",", "split", "=", "\"train\"", ",", "version", "=", "\"2014\"", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - path to the coco dataset.\n            image_loader (default_image_loader) -  The function to read the images. If installed,\n                                                   jpeg4py (https://github.com/ajkxyz/jpeg4py) is used by default. Else,\n                                                   opencv's imread is used.\n            data_fraction (None) - Fraction of images to be used. The images are selected randomly. If None, all the\n                                  images  will be used\n            split - 'train' or 'val'.\n            version - version of coco dataset (2014 or 2017)\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "coco_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "'COCO_lmdb'", ",", "root", ",", "image_loader", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "img_pth", "=", "'images/{}{}/'", ".", "format", "(", "split", ",", "version", ")", "\n", "self", ".", "anno_path", "=", "'annotations/instances_{}{}.json'", ".", "format", "(", "split", ",", "version", ")", "\n", "\n", "# Load the COCO set.", "\n", "print", "(", "'loading annotations into memory...'", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "coco_json", "=", "decode_json", "(", "root", ",", "self", ".", "anno_path", ")", "\n", "print", "(", "'Done (t={:0.2f}s)'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n", "self", ".", "coco_set", "=", "COCO", "(", "coco_json", ")", "\n", "\n", "self", ".", "cats", "=", "self", ".", "coco_set", ".", "cats", "\n", "\n", "self", ".", "class_list", "=", "self", ".", "get_class_list", "(", ")", "\n", "\n", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", ")", "\n", "\n", "if", "data_fraction", "is", "not", "None", ":", "\n", "            ", "self", ".", "sequence_list", "=", "random", ".", "sample", "(", "self", ".", "sequence_list", ",", "int", "(", "len", "(", "self", ".", "sequence_list", ")", "*", "data_fraction", ")", ")", "\n", "", "self", ".", "seq_per_class", "=", "self", ".", "_build_seq_per_class", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_sequence_list": [[71, 76], ["list", "coco_seq_lmdb.MSCOCOSeq_lmdb.coco_set.anns.keys"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list"], ["", "def", "_get_sequence_list", "(", "self", ")", ":", "\n", "        ", "ann_list", "=", "list", "(", "self", ".", "coco_set", ".", "anns", ".", "keys", "(", ")", ")", "\n", "seq_list", "=", "[", "a", "for", "a", "in", "ann_list", "if", "self", ".", "coco_set", ".", "anns", "[", "a", "]", "[", "'iscrowd'", "]", "==", "0", "]", "\n", "\n", "return", "seq_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.is_video_sequence": [[77, 79], ["None"], "methods", ["None"], ["", "def", "is_video_sequence", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_num_classes": [[80, 82], ["len"], "methods", ["None"], ["", "def", "get_num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "class_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_name": [[83, 85], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'coco_lmdb'", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.has_class_info": [[86, 88], ["None"], "methods", ["None"], ["", "def", "has_class_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_class_list": [[89, 94], ["coco_seq_lmdb.MSCOCOSeq_lmdb.cats.keys", "class_list.append"], "methods", ["None"], ["", "def", "get_class_list", "(", "self", ")", ":", "\n", "        ", "class_list", "=", "[", "]", "\n", "for", "cat_id", "in", "self", ".", "cats", ".", "keys", "(", ")", ":", "\n", "            ", "class_list", ".", "append", "(", "self", ".", "cats", "[", "cat_id", "]", "[", "'name'", "]", ")", "\n", "", "return", "class_list", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.has_segmentation_info": [[95, 97], ["None"], "methods", ["None"], ["", "def", "has_segmentation_info", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_num_sequences": [[98, 100], ["len"], "methods", ["None"], ["", "def", "get_num_sequences", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._build_seq_per_class": [[101, 111], ["enumerate", "seq_per_class[].append"], "methods", ["None"], ["", "def", "_build_seq_per_class", "(", "self", ")", ":", "\n", "        ", "seq_per_class", "=", "{", "}", "\n", "for", "i", ",", "seq", "in", "enumerate", "(", "self", ".", "sequence_list", ")", ":", "\n", "            ", "class_name", "=", "self", ".", "cats", "[", "self", ".", "coco_set", ".", "anns", "[", "seq", "]", "[", "'category_id'", "]", "]", "[", "'name'", "]", "\n", "if", "class_name", "not", "in", "seq_per_class", ":", "\n", "                ", "seq_per_class", "[", "class_name", "]", "=", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "seq_per_class", "[", "class_name", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "return", "seq_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_sequences_in_class": [[112, 114], ["None"], "methods", ["None"], ["", "def", "get_sequences_in_class", "(", "self", ",", "class_name", ")", ":", "\n", "        ", "return", "self", ".", "seq_per_class", "[", "class_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_sequence_info": [[115, 128], ["coco_seq_lmdb.MSCOCOSeq_lmdb._get_anno", "torch.Tensor().view", "torch.Tensor().unsqueeze", "valid.clone().byte", "torch.Tensor", "torch.Tensor", "valid.clone", "coco_seq_lmdb.MSCOCOSeq_lmdb.coco_set.annToMask"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_anno", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.annToMask"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "anno", "=", "self", ".", "_get_anno", "(", "seq_id", ")", "\n", "\n", "bbox", "=", "torch", ".", "Tensor", "(", "anno", "[", "'bbox'", "]", ")", ".", "view", "(", "1", ",", "4", ")", "\n", "\n", "mask", "=", "torch", ".", "Tensor", "(", "self", ".", "coco_set", ".", "annToMask", "(", "anno", ")", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "'''2021.1.3 To avoid too small bounding boxes. Here we change the threshold to 50 pixels'''", "\n", "valid", "=", "(", "bbox", "[", ":", ",", "2", "]", ">", "50", ")", "&", "(", "bbox", "[", ":", ",", "3", "]", ">", "50", ")", "\n", "\n", "visible", "=", "valid", ".", "clone", "(", ")", ".", "byte", "(", ")", "\n", "\n", "return", "{", "'bbox'", ":", "bbox", ",", "'mask'", ":", "mask", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_anno": [[129, 133], ["None"], "methods", ["None"], ["", "def", "_get_anno", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "anno", "=", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "\n", "\n", "return", "anno", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_frames": [[134, 139], ["lib.utils.lmdb_utils.decode_img", "os.path.join", "coco_seq_lmdb.MSCOCOSeq_lmdb.coco_set.loadImgs"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.lmdb_utils.decode_img", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.COCO_tool.COCO.loadImgs"], ["", "def", "_get_frames", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "path", "=", "self", ".", "coco_set", ".", "loadImgs", "(", "[", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "[", "'image_id'", "]", "]", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "# img = self.image_loader(os.path.join(self.img_pth, path))", "\n", "img", "=", "decode_img", "(", "self", ".", "root", ",", "os", ".", "path", ".", "join", "(", "self", ".", "img_pth", ",", "path", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_meta_info": [[140, 155], ["collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["", "def", "get_meta_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "cat_dict_current", "=", "self", ".", "cats", "[", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "[", "'category_id'", "]", "]", "\n", "object_meta", "=", "OrderedDict", "(", "{", "'object_class_name'", ":", "cat_dict_current", "[", "'name'", "]", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "cat_dict_current", "[", "'supercategory'", "]", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "", "except", ":", "\n", "            ", "object_meta", "=", "OrderedDict", "(", "{", "'object_class_name'", ":", "None", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "", "return", "object_meta", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_class_name": [[157, 160], ["None"], "methods", ["None"], ["", "def", "get_class_name", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "cat_dict_current", "=", "self", ".", "cats", "[", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "[", "'category_id'", "]", "]", "\n", "return", "cat_dict_current", "[", "'name'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_frames": [[161, 178], ["coco_seq_lmdb.MSCOCOSeq_lmdb._get_frames", "coco_seq_lmdb.MSCOCOSeq_lmdb.items", "coco_seq_lmdb.MSCOCOSeq_lmdb.get_meta_info", "coco_seq_lmdb.MSCOCOSeq_lmdb.copy", "coco_seq_lmdb.MSCOCOSeq_lmdb.get_sequence_info"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb._get_frames", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_meta_info", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", "=", "None", ",", "frame_ids", "=", "None", ",", "anno", "=", "None", ")", ":", "\n", "# COCO is an image dataset. Thus we replicate the image denoted by seq_id len(frame_ids) times, and return a", "\n", "# list containing these replicated images.", "\n", "        ", "frame", "=", "self", ".", "_get_frames", "(", "seq_id", ")", "\n", "\n", "frame_list", "=", "[", "frame", ".", "copy", "(", ")", "for", "_", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "0", ",", "...", "]", "for", "_", "in", "frame_ids", "]", "\n", "\n", "", "object_meta", "=", "self", ".", "get_meta_info", "(", "seq_id", ")", "\n", "\n", "return", "frame_list", ",", "anno_frames", ",", "object_meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer.__init__": [[14, 42], ["lib.train.trainers.BaseTrainer.__init__", "ltr_trainer.LTRTrainer._set_default_settings", "collections.OrderedDict", "getattr", "torch.cuda.amp.GradScaler", "os.path.join", "lib.train.admin.TensorboardWriter", "os.path.exists", "os.makedirs", "print"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer._set_default_settings"], ["\t", "def", "__init__", "(", "self", ",", "actor", ",", "loaders", ",", "optimizer", ",", "settings", ",", "lr_scheduler", "=", "None", ")", ":", "\n", "\t\t", "\"\"\"\n\t\targs:\n\t\t\tactor - The actor for training the network\n\t\t\tloaders - list of dataset loaders, e.g. [train_loader, val_loader]. In each epoch, the trainer runs one\n\t\t\t\t\t\tepoch for each loader.\n\t\t\toptimizer - The optimizer used for training, e.g. Adam\n\t\t\tsettings - Training settings\n\t\t\tlr_scheduler - Learning rate scheduler\n\t\t\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "actor", ",", "loaders", ",", "optimizer", ",", "settings", ",", "lr_scheduler", ")", "\n", "\n", "self", ".", "_set_default_settings", "(", ")", "\n", "\n", "# Initialize statistics variables", "\n", "self", ".", "stats", "=", "OrderedDict", "(", "{", "loader", ".", "name", ":", "None", "for", "loader", "in", "self", ".", "loaders", "}", ")", "\n", "\n", "# Initialize tensorboard", "\n", "if", "settings", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "\t\t\t", "tensorboard_writer_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "settings", ".", "env", ".", "tensorboard_dir", ",", "self", ".", "settings", ".", "project_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "tensorboard_writer_dir", ")", ":", "\n", "\t\t\t\t", "os", ".", "makedirs", "(", "tensorboard_writer_dir", ")", "\n", "print", "(", "\"tensorboard dir maked: \"", "+", "tensorboard_writer_dir", ")", "\n", "", "self", ".", "tensorboard_writer", "=", "TensorboardWriter", "(", "tensorboard_writer_dir", ",", "[", "l", ".", "name", "for", "l", "in", "loaders", "]", ")", "\n", "\n", "", "self", ".", "move_data_to_gpu", "=", "getattr", "(", "settings", ",", "'move_data_to_gpu'", ",", "True", ")", "\n", "self", ".", "settings", "=", "settings", "\n", "self", ".", "scaler", "=", "GradScaler", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer._set_default_settings": [[43, 52], ["default.items", "getattr", "setattr"], "methods", ["None"], ["", "def", "_set_default_settings", "(", "self", ")", ":", "\n", "# Dict of all default values", "\n", "\t\t", "default", "=", "{", "'print_interval'", ":", "10", ",", "\n", "'print_stats'", ":", "None", ",", "\n", "'description'", ":", "''", "}", "\n", "\n", "for", "param", ",", "default_value", "in", "default", ".", "items", "(", ")", ":", "\n", "\t\t\t", "if", "getattr", "(", "self", ".", "settings", ",", "param", ",", "None", ")", "is", "None", ":", "\n", "\t\t\t\t", "setattr", "(", "self", ".", "settings", ",", "param", ",", "default_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer.cycle_dataset": [[53, 89], ["ltr_trainer.LTRTrainer.actor.train", "torch.set_grad_enabled", "ltr_trainer.LTRTrainer._init_timing", "enumerate", "ltr_trainer.LTRTrainer._update_stats", "ltr_trainer.LTRTrainer._print_stats", "data.to.to.to", "torch.cuda.amp.autocast", "ltr_trainer.LTRTrainer.actor", "ltr_trainer.LTRTrainer.optimizer.zero_grad", "ltr_trainer.LTRTrainer.scaler.scale().backward", "ltr_trainer.LTRTrainer.scaler.step", "ltr_trainer.LTRTrainer.scaler.update", "torch.nn.utils.clip_grad_norm_", "ltr_trainer.LTRTrainer.scaler.scale", "ltr_trainer.LTRTrainer.actor.net.parameters"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.train", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer._init_timing", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer._update_stats", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer._print_stats", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display.step", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.parameter.cswintt.parameters"], ["", "", "", "def", "cycle_dataset", "(", "self", ",", "loader", ")", ":", "\n", "\t\t", "\"\"\"Do a cycle of training or validation.\"\"\"", "\n", "\n", "self", ".", "actor", ".", "train", "(", "loader", ".", "training", ")", "\n", "torch", ".", "set_grad_enabled", "(", "loader", ".", "training", ")", "\n", "\n", "self", ".", "_init_timing", "(", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "loader", ",", "1", ")", ":", "\n", "# get inputs", "\n", "\t\t\t", "if", "self", ".", "move_data_to_gpu", ":", "\n", "\t\t\t\t", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "data", "[", "'epoch'", "]", "=", "self", ".", "epoch", "\n", "data", "[", "'settings'", "]", "=", "self", ".", "settings", "\n", "# forward pass", "\n", "with", "autocast", "(", ")", ":", "\n", "\t\t\t\t", "loss", ",", "stats", "=", "self", ".", "actor", "(", "data", ")", "\n", "\n", "# backward pass and update weights", "\n", "", "if", "loader", ".", "training", ":", "\n", "\t\t\t\t", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "# loss.backward()", "\n", "self", ".", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "if", "self", ".", "settings", ".", "grad_clip_norm", ">", "0", ":", "\n", "\t\t\t\t\t", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "actor", ".", "net", ".", "parameters", "(", ")", ",", "self", ".", "settings", ".", "grad_clip_norm", ")", "\n", "# self.optimizer.step()", "\n", "", "self", ".", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "\n", "# update statistics", "\n", "", "batch_size", "=", "data", "[", "'template_images'", "]", ".", "shape", "[", "loader", ".", "stack_dim", "]", "\n", "self", ".", "_update_stats", "(", "stats", ",", "batch_size", ",", "loader", ")", "\n", "\n", "# print statistics", "\n", "self", ".", "_print_stats", "(", "i", ",", "loader", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer.train_epoch": [[90, 102], ["ltr_trainer.LTRTrainer._stats_new_epoch", "ltr_trainer.LTRTrainer._write_tensorboard", "isinstance", "ltr_trainer.LTRTrainer.cycle_dataset", "loader.sampler.set_epoch"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer._stats_new_epoch", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer._write_tensorboard", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer.cycle_dataset"], ["", "", "def", "train_epoch", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"Do one epoch for each loader.\"\"\"", "\n", "for", "loader", "in", "self", ".", "loaders", ":", "\n", "\t\t\t", "if", "self", ".", "epoch", "%", "loader", ".", "epoch_interval", "==", "0", ":", "\n", "# 2021.1.10 Set epoch", "\n", "\t\t\t\t", "if", "isinstance", "(", "loader", ".", "sampler", ",", "DistributedSampler", ")", ":", "\n", "\t\t\t\t\t", "loader", ".", "sampler", ".", "set_epoch", "(", "self", ".", "epoch", ")", "\n", "", "self", ".", "cycle_dataset", "(", "loader", ")", "\n", "\n", "", "", "self", ".", "_stats_new_epoch", "(", ")", "\n", "if", "self", ".", "settings", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "\t\t\t", "self", ".", "_write_tensorboard", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer._init_timing": [[103, 107], ["time.time"], "methods", ["None"], ["", "", "def", "_init_timing", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "num_frames", "=", "0", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "prev_time", "=", "self", ".", "start_time", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer._update_stats": [[108, 117], ["new_stats.items", "collections.OrderedDict", "[].update", "ltr_trainer.LTRTrainer.stats.keys", "ltr_trainer.LTRTrainer.stats[].keys", "lib.train.admin.AverageMeter", "lib.train.admin.AverageMeter", "new_stats.keys"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update"], ["", "def", "_update_stats", "(", "self", ",", "new_stats", ":", "OrderedDict", ",", "batch_size", ",", "loader", ")", ":", "\n", "# Initialize stats if not initialized yet", "\n", "\t\t", "if", "loader", ".", "name", "not", "in", "self", ".", "stats", ".", "keys", "(", ")", "or", "self", ".", "stats", "[", "loader", ".", "name", "]", "is", "None", ":", "\n", "\t\t\t", "self", ".", "stats", "[", "loader", ".", "name", "]", "=", "OrderedDict", "(", "{", "name", ":", "AverageMeter", "(", ")", "for", "name", "in", "new_stats", ".", "keys", "(", ")", "}", ")", "\n", "\n", "", "for", "name", ",", "val", "in", "new_stats", ".", "items", "(", ")", ":", "\n", "\t\t\t", "if", "name", "not", "in", "self", ".", "stats", "[", "loader", ".", "name", "]", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "self", ".", "stats", "[", "loader", ".", "name", "]", "[", "name", "]", "=", "AverageMeter", "(", ")", "\n", "", "self", ".", "stats", "[", "loader", ".", "name", "]", "[", "name", "]", ".", "update", "(", "val", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer._print_stats": [[118, 138], ["time.time", "ltr_trainer.LTRTrainer.stats[].items", "print", "loader.__len__", "open", "f.write", "loader.__len__", "hasattr"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.__len__", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.__len__"], ["", "", "def", "_print_stats", "(", "self", ",", "i", ",", "loader", ",", "batch_size", ")", ":", "\n", "\t\t", "self", ".", "num_frames", "+=", "batch_size", "\n", "current_time", "=", "time", ".", "time", "(", ")", "\n", "batch_fps", "=", "batch_size", "/", "(", "current_time", "-", "self", ".", "prev_time", ")", "\n", "average_fps", "=", "self", ".", "num_frames", "/", "(", "current_time", "-", "self", ".", "start_time", ")", "\n", "self", ".", "prev_time", "=", "current_time", "\n", "if", "i", "%", "self", ".", "settings", ".", "print_interval", "==", "0", "or", "i", "==", "loader", ".", "__len__", "(", ")", ":", "\n", "\t\t\t", "print_str", "=", "'[%s: %d, %d / %d] '", "%", "(", "loader", ".", "name", ",", "self", ".", "epoch", ",", "i", ",", "loader", ".", "__len__", "(", ")", ")", "\n", "print_str", "+=", "'FPS: %.1f (%.1f)  ,  '", "%", "(", "average_fps", ",", "batch_fps", ")", "\n", "for", "name", ",", "val", "in", "self", ".", "stats", "[", "loader", ".", "name", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "(", "self", ".", "settings", ".", "print_stats", "is", "None", "or", "name", "in", "self", ".", "settings", ".", "print_stats", ")", ":", "\n", "\t\t\t\t\t", "if", "hasattr", "(", "val", ",", "'avg'", ")", ":", "\n", "\t\t\t\t\t\t", "print_str", "+=", "'%s: %.5f  ,  '", "%", "(", "name", ",", "val", ".", "avg", ")", "\n", "# else:", "\n", "#     print_str += '%s: %r  ,  ' % (name, val)", "\n", "\n", "", "", "", "print", "(", "print_str", "[", ":", "-", "5", "]", ")", "\n", "log_str", "=", "print_str", "[", ":", "-", "5", "]", "+", "'\\n'", "\n", "with", "open", "(", "self", ".", "settings", ".", "log_file", ",", "'a'", ")", "as", "f", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "log_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer._stats_new_epoch": [[139, 159], ["ltr_trainer.LTRTrainer.stats.values", "loader_stats.values", "enumerate", "hasattr", "ltr_trainer.LTRTrainer.lr_scheduler.get_last_lr", "[].update", "stat_value.new_epoch", "ltr_trainer.LTRTrainer.lr_scheduler._get_lr", "ltr_trainer.LTRTrainer.stats[].keys", "lib.train.admin.StatValue"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.stats.AverageMeter.new_epoch"], ["", "", "", "def", "_stats_new_epoch", "(", "self", ")", ":", "\n", "# Record learning rate", "\n", "\t\t", "for", "loader", "in", "self", ".", "loaders", ":", "\n", "\t\t\t", "if", "loader", ".", "training", ":", "\n", "\t\t\t\t", "try", ":", "\n", "\t\t\t\t\t", "lr_list", "=", "self", ".", "lr_scheduler", ".", "get_last_lr", "(", ")", "\n", "", "except", ":", "\n", "\t\t\t\t\t", "lr_list", "=", "self", ".", "lr_scheduler", ".", "_get_lr", "(", "self", ".", "epoch", ")", "\n", "", "for", "i", ",", "lr", "in", "enumerate", "(", "lr_list", ")", ":", "\n", "\t\t\t\t\t", "var_name", "=", "'LearningRate/group{}'", ".", "format", "(", "i", ")", "\n", "if", "var_name", "not", "in", "self", ".", "stats", "[", "loader", ".", "name", "]", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t\t\t", "self", ".", "stats", "[", "loader", ".", "name", "]", "[", "var_name", "]", "=", "StatValue", "(", ")", "\n", "", "self", ".", "stats", "[", "loader", ".", "name", "]", "[", "var_name", "]", ".", "update", "(", "lr", ")", "\n", "\n", "", "", "", "for", "loader_stats", "in", "self", ".", "stats", ".", "values", "(", ")", ":", "\n", "\t\t\t", "if", "loader_stats", "is", "None", ":", "\n", "\t\t\t\t", "continue", "\n", "", "for", "stat_value", "in", "loader_stats", ".", "values", "(", ")", ":", "\n", "\t\t\t\t", "if", "hasattr", "(", "stat_value", ",", "'new_epoch'", ")", ":", "\n", "\t\t\t\t\t", "stat_value", ".", "new_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.ltr_trainer.LTRTrainer._write_tensorboard": [[160, 165], ["ltr_trainer.LTRTrainer.tensorboard_writer.write_epoch", "ltr_trainer.LTRTrainer.tensorboard_writer.write_info"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.tensorboard.TensorboardWriter.write_epoch", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.tensorboard.TensorboardWriter.write_info"], ["", "", "", "", "def", "_write_tensorboard", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "epoch", "==", "1", ":", "\n", "\t\t\t", "self", ".", "tensorboard_writer", ".", "write_info", "(", "self", ".", "settings", ".", "script_name", ",", "self", ".", "settings", ".", "description", ")", "\n", "\n", "", "self", ".", "tensorboard_writer", ".", "write_epoch", "(", "self", ".", "stats", ",", "self", ".", "epoch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.__init__": [[13, 39], ["base_trainer.BaseTrainer.update_settings", "getattr", "base_trainer.BaseTrainer.actor.to", "torch.device", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.update_settings", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to"], ["def", "__init__", "(", "self", ",", "actor", ",", "loaders", ",", "optimizer", ",", "settings", ",", "lr_scheduler", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            actor - The actor for training the network\n            loaders - list of dataset loaders, e.g. [train_loader, val_loader]. In each epoch, the trainer runs one\n                        epoch for each loader.\n            optimizer - The optimizer used for training, e.g. Adam\n            settings - Training settings\n            lr_scheduler - Learning rate scheduler\n        \"\"\"", "\n", "self", ".", "actor", "=", "actor", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", "\n", "self", ".", "loaders", "=", "loaders", "\n", "\n", "self", ".", "update_settings", "(", "settings", ")", "\n", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "stats", "=", "{", "}", "\n", "\n", "self", ".", "device", "=", "getattr", "(", "settings", ",", "'device'", ",", "None", ")", "\n", "if", "self", ".", "device", "is", "None", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "settings", ".", "use_gpu", "else", "\"cpu\"", ")", "\n", "\n", "", "self", ".", "actor", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "settings", "=", "settings", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.update_settings": [[40, 61], ["os.path.expanduser", "print", "os.path.join", "os.path.join", "os.path.exists", "print", "os.makedirs"], "methods", ["None"], ["", "def", "update_settings", "(", "self", ",", "settings", "=", "None", ")", ":", "\n", "        ", "\"\"\"Updates the trainer settings. Must be called to update internal settings.\"\"\"", "\n", "if", "settings", "is", "not", "None", ":", "\n", "            ", "self", ".", "settings", "=", "settings", "\n", "\n", "", "if", "self", ".", "settings", ".", "env", ".", "workspace_dir", "is", "not", "None", ":", "\n", "            ", "self", ".", "settings", ".", "env", ".", "workspace_dir", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "settings", ".", "env", ".", "workspace_dir", ")", "\n", "'''2021.1.4 New function: specify checkpoint dir'''", "\n", "if", "self", ".", "settings", ".", "save_dir", "is", "None", ":", "\n", "                ", "self", ".", "_checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "settings", ".", "env", ".", "workspace_dir", ",", "'checkpoints'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "settings", ".", "save_dir", ",", "'checkpoints'", ")", "\n", "", "print", "(", "\"checkpoints will be saved to %s\"", "%", "self", ".", "_checkpoint_dir", ")", "\n", "\n", "if", "self", ".", "settings", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "_checkpoint_dir", ")", ":", "\n", "                    ", "print", "(", "\"Training with multiple GPUs. checkpoints directory doesn't exist. \"", "\n", "\"Create checkpoints directory\"", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "_checkpoint_dir", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "_checkpoint_dir", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.train": [[62, 108], ["range", "print", "range", "base_trainer.BaseTrainer.load_checkpoint", "base_trainer.BaseTrainer.load_state_dict", "base_trainer.BaseTrainer.train_epoch", "getattr", "print", "print", "print", "print", "base_trainer.BaseTrainer.lr_scheduler.step", "base_trainer.BaseTrainer.lr_scheduler.step", "traceback.format_exc", "base_trainer.BaseTrainer.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_checkpoint", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.train_epoch", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display.step", "home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.playback_results.Display.step", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.save_checkpoint"], ["", "", "def", "train", "(", "self", ",", "max_epochs", ",", "load_latest", "=", "False", ",", "fail_safe", "=", "True", ",", "load_previous_ckpt", "=", "False", ")", ":", "\n", "        ", "\"\"\"Do training for the given number of epochs.\n        args:\n            max_epochs - Max number of training epochs,\n            load_latest - Bool indicating whether to resume from latest epoch.\n            fail_safe - Bool indicating whether the training to automatically restart in case of any crashes.\n        \"\"\"", "\n", "\n", "epoch", "=", "-", "1", "\n", "num_tries", "=", "1", "\n", "for", "i", "in", "range", "(", "num_tries", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "load_latest", ":", "\n", "                    ", "self", ".", "load_checkpoint", "(", ")", "\n", "", "if", "load_previous_ckpt", ":", "\n", "                    ", "directory", "=", "'{}/{}'", ".", "format", "(", "self", ".", "_checkpoint_dir", ",", "self", ".", "settings", ".", "project_path_prv", ")", "\n", "self", ".", "load_state_dict", "(", "directory", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "self", ".", "epoch", "+", "1", ",", "max_epochs", "+", "1", ")", ":", "\n", "                    ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "self", ".", "train_epoch", "(", ")", "\n", "\n", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "                        ", "if", "self", ".", "settings", ".", "scheduler_type", "!=", "'cosine'", ":", "\n", "                            ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "lr_scheduler", ".", "step", "(", "epoch", "-", "1", ")", "\n", "# only save the last 10 checkpoints", "\n", "", "", "save_every_epoch", "=", "getattr", "(", "self", ".", "settings", ",", "\"save_every_epoch\"", ",", "False", ")", "\n", "if", "epoch", ">", "(", "max_epochs", "-", "10", ")", "or", "save_every_epoch", "or", "epoch", "%", "10", "==", "0", ":", "\n", "                        ", "if", "self", ".", "_checkpoint_dir", ":", "\n", "                            ", "if", "self", ".", "settings", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "                                ", "self", ".", "save_checkpoint", "(", ")", "\n", "", "", "", "", "", "except", ":", "\n", "                ", "print", "(", "'Training crashed at epoch {}'", ".", "format", "(", "epoch", ")", ")", "\n", "if", "fail_safe", ":", "\n", "                    ", "self", ".", "epoch", "-=", "1", "\n", "load_latest", "=", "True", "\n", "print", "(", "'Traceback for the error!'", ")", "\n", "print", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "print", "(", "'Restarting training from last epoch ...'", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "\n", "\n", "", "", "", "print", "(", "'Finished training!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.train_epoch": [[109, 111], ["None"], "methods", ["None"], ["", "def", "train_epoch", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.save_checkpoint": [[112, 145], ["print", "torch.save", "os.rename", "lib.train.admin.multigpu.is_multi_gpu", "type", "type", "net.state_dict", "getattr", "getattr", "base_trainer.BaseTrainer.optimizer.state_dict", "os.path.exists", "print", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.multigpu.is_multi_gpu"], ["", "def", "save_checkpoint", "(", "self", ")", ":", "\n", "        ", "\"\"\"Saves a checkpoint of the network and other variables.\"\"\"", "\n", "\n", "net", "=", "self", ".", "actor", ".", "net", ".", "module", "if", "multigpu", ".", "is_multi_gpu", "(", "self", ".", "actor", ".", "net", ")", "else", "self", ".", "actor", ".", "net", "\n", "\n", "actor_type", "=", "type", "(", "self", ".", "actor", ")", ".", "__name__", "\n", "net_type", "=", "type", "(", "net", ")", ".", "__name__", "\n", "state", "=", "{", "\n", "'epoch'", ":", "self", ".", "epoch", ",", "\n", "'actor_type'", ":", "actor_type", ",", "\n", "'net_type'", ":", "net_type", ",", "\n", "'net'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'net_info'", ":", "getattr", "(", "net", ",", "'info'", ",", "None", ")", ",", "\n", "'constructor'", ":", "getattr", "(", "net", ",", "'constructor'", ",", "None", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'stats'", ":", "self", ".", "stats", ",", "\n", "'settings'", ":", "self", ".", "settings", "\n", "}", "\n", "\n", "directory", "=", "'{}/{}'", ".", "format", "(", "self", ".", "_checkpoint_dir", ",", "self", ".", "settings", ".", "project_path", ")", "\n", "print", "(", "directory", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "print", "(", "\"directory doesn't exist. creating...\"", ")", "\n", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "# First save as a tmp file", "\n", "", "tmp_file_path", "=", "'{}/{}_ep{:04d}.tmp'", ".", "format", "(", "directory", ",", "net_type", ",", "self", ".", "epoch", ")", "\n", "torch", ".", "save", "(", "state", ",", "tmp_file_path", ")", "\n", "\n", "file_path", "=", "'{}/{}_ep{:04d}.pth.tar'", ".", "format", "(", "directory", ",", "net_type", ",", "self", ".", "epoch", ")", "\n", "\n", "# Now rename to actual checkpoint. os.rename seems to be atomic if files are on same filesystem. Not 100% sure", "\n", "os", ".", "rename", "(", "tmp_file_path", ",", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_checkpoint": [[146, 227], ["torch.load", "ignore_fields.extend", "lib.train.admin.multigpu.is_multi_gpu", "type", "type", "sorted", "isinstance", "torch.load.keys", "glob.glob", "print", "isinstance", "net.load_state_dict", "isinstance", "os.path.isdir", "base_trainer.BaseTrainer.optimizer.load_state_dict", "setattr", "loader.sampler.set_epoch", "sorted", "os.path.expanduser", "glob.glob", "Exception"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.admin.multigpu.is_multi_gpu", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict"], ["", "def", "load_checkpoint", "(", "self", ",", "checkpoint", "=", "None", ",", "fields", "=", "None", ",", "ignore_fields", "=", "None", ",", "load_constructor", "=", "False", ")", ":", "\n", "        ", "\"\"\"Loads a network checkpoint file.\n\n        Can be called in three different ways:\n            load_checkpoint():\n                Loads the latest epoch from the workspace. Use this to continue training.\n            load_checkpoint(epoch_num):\n                Loads the network at the given epoch number (int).\n            load_checkpoint(path_to_checkpoint):\n                Loads the file from the given absolute path (str).\n        \"\"\"", "\n", "\n", "net", "=", "self", ".", "actor", ".", "net", ".", "module", "if", "multigpu", ".", "is_multi_gpu", "(", "self", ".", "actor", ".", "net", ")", "else", "self", ".", "actor", ".", "net", "\n", "\n", "actor_type", "=", "type", "(", "self", ".", "actor", ")", ".", "__name__", "\n", "net_type", "=", "type", "(", "net", ")", ".", "__name__", "\n", "\n", "if", "checkpoint", "is", "None", ":", "\n", "# Load most recent checkpoint", "\n", "            ", "checkpoint_list", "=", "sorted", "(", "glob", ".", "glob", "(", "'{}/{}/{}_ep*.pth.tar'", ".", "format", "(", "self", ".", "_checkpoint_dir", ",", "\n", "self", ".", "settings", ".", "project_path", ",", "net_type", ")", ")", ")", "\n", "if", "checkpoint_list", ":", "\n", "                ", "checkpoint_path", "=", "checkpoint_list", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "print", "(", "'No matching checkpoint file found'", ")", "\n", "return", "\n", "", "", "elif", "isinstance", "(", "checkpoint", ",", "int", ")", ":", "\n", "# Checkpoint is the epoch number", "\n", "            ", "checkpoint_path", "=", "'{}/{}/{}_ep{:04d}.pth.tar'", ".", "format", "(", "self", ".", "_checkpoint_dir", ",", "self", ".", "settings", ".", "project_path", ",", "\n", "net_type", ",", "checkpoint", ")", "\n", "", "elif", "isinstance", "(", "checkpoint", ",", "str", ")", ":", "\n", "# checkpoint is the path", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "checkpoint", ")", ":", "\n", "                ", "checkpoint_list", "=", "sorted", "(", "glob", ".", "glob", "(", "'{}/*_ep*.pth.tar'", ".", "format", "(", "checkpoint", ")", ")", ")", "\n", "if", "checkpoint_list", ":", "\n", "                    ", "checkpoint_path", "=", "checkpoint_list", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'No checkpoint found'", ")", "\n", "", "", "else", ":", "\n", "                ", "checkpoint_path", "=", "os", ".", "path", ".", "expanduser", "(", "checkpoint", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "\n", "\n", "# Load network", "\n", "", "checkpoint_dict", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "\n", "assert", "net_type", "==", "checkpoint_dict", "[", "'net_type'", "]", ",", "'Network is not of correct type.'", "\n", "\n", "if", "fields", "is", "None", ":", "\n", "            ", "fields", "=", "checkpoint_dict", ".", "keys", "(", ")", "\n", "", "if", "ignore_fields", "is", "None", ":", "\n", "            ", "ignore_fields", "=", "[", "'settings'", "]", "\n", "\n", "# Never load the scheduler. It exists in older checkpoints.", "\n", "", "ignore_fields", ".", "extend", "(", "[", "'lr_scheduler'", ",", "'constructor'", ",", "'net_type'", ",", "'actor_type'", ",", "'net_info'", "]", ")", "\n", "\n", "# Load all fields", "\n", "for", "key", "in", "fields", ":", "\n", "            ", "if", "key", "in", "ignore_fields", ":", "\n", "                ", "continue", "\n", "", "if", "key", "==", "'net'", ":", "\n", "                ", "net", ".", "load_state_dict", "(", "checkpoint_dict", "[", "key", "]", ")", "\n", "", "elif", "key", "==", "'optimizer'", ":", "\n", "                ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint_dict", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "key", ",", "checkpoint_dict", "[", "key", "]", ")", "\n", "\n", "# Set the net info", "\n", "", "", "if", "load_constructor", "and", "'constructor'", "in", "checkpoint_dict", "and", "checkpoint_dict", "[", "'constructor'", "]", "is", "not", "None", ":", "\n", "            ", "net", ".", "constructor", "=", "checkpoint_dict", "[", "'constructor'", "]", "\n", "", "if", "'net_info'", "in", "checkpoint_dict", "and", "checkpoint_dict", "[", "'net_info'", "]", "is", "not", "None", ":", "\n", "            ", "net", ".", "info", "=", "checkpoint_dict", "[", "'net_info'", "]", "\n", "\n", "# Update the epoch in lr scheduler", "\n", "", "if", "'epoch'", "in", "fields", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "last_epoch", "=", "self", ".", "epoch", "\n", "# 2021.1.10 Update the epoch in data_samplers", "\n", "for", "loader", "in", "self", ".", "loaders", ":", "\n", "                ", "if", "isinstance", "(", "loader", ".", "sampler", ",", "DistributedSampler", ")", ":", "\n", "                    ", "loader", ".", "sampler", ".", "set_epoch", "(", "self", ".", "epoch", ")", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict": [[228, 266], ["isinstance", "print", "torch.load", "net.load_state_dict", "lib.train.admin.multigpu.is_multi_gpu", "type", "os.path.isdir", "sorted", "os.path.expanduser", "glob.glob", "Exception"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.trainers.base_trainer.BaseTrainer.load_state_dict", "home.repos.pwc.inspect_result.skyesong38_cswintt.admin.multigpu.is_multi_gpu"], ["", "def", "load_state_dict", "(", "self", ",", "checkpoint", "=", "None", ")", ":", "\n", "        ", "\"\"\"Loads a network checkpoint file.\n\n        Can be called in three different ways:\n            load_checkpoint():\n                Loads the latest epoch from the workspace. Use this to continue training.\n            load_checkpoint(epoch_num):\n                Loads the network at the given epoch number (int).\n            load_checkpoint(path_to_checkpoint):\n                Loads the file from the given absolute path (str).\n        \"\"\"", "\n", "\n", "net", "=", "self", ".", "actor", ".", "net", ".", "module", "if", "multigpu", ".", "is_multi_gpu", "(", "self", ".", "actor", ".", "net", ")", "else", "self", ".", "actor", ".", "net", "\n", "\n", "net_type", "=", "type", "(", "net", ")", ".", "__name__", "\n", "\n", "if", "isinstance", "(", "checkpoint", ",", "str", ")", ":", "\n", "# checkpoint is the path", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "checkpoint", ")", ":", "\n", "                ", "checkpoint_list", "=", "sorted", "(", "glob", ".", "glob", "(", "'{}/*_ep*.pth.tar'", ".", "format", "(", "checkpoint", ")", ")", ")", "\n", "if", "checkpoint_list", ":", "\n", "                    ", "checkpoint_path", "=", "checkpoint_list", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'No checkpoint found'", ")", "\n", "", "", "else", ":", "\n", "                ", "checkpoint_path", "=", "os", ".", "path", ".", "expanduser", "(", "checkpoint", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "\n", "\n", "# Load network", "\n", "", "print", "(", "\"Loading pretrained model from \"", ",", "checkpoint_path", ")", "\n", "checkpoint_dict", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "assert", "net_type", "==", "checkpoint_dict", "[", "'net_type'", "]", ",", "'Network is not of correct type.'", "\n", "\n", "net", ".", "load_state_dict", "(", "checkpoint_dict", "[", "\"net\"", "]", ",", "strict", "=", "True", ")", "\n", "\n", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.cswinttactor.CSWinTTActor.__init__": [[8, 13], ["BaseActor.__init__"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["\t", "def", "__init__", "(", "self", ",", "net", ",", "objective", ",", "loss_weight", ",", "settings", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "net", ",", "objective", ")", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "settings", "=", "settings", "\n", "self", ".", "bs", "=", "self", ".", "settings", ".", "batchsize", "# batch size", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.cswinttactor.CSWinTTActor.__call__": [[14, 34], ["cswinttactor.CSWinTTActor.forward_pass", "cswinttactor.CSWinTTActor.compute_losses"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.cswinttactor.CSWinTTActor.forward_pass", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.cswintt_T_actor.CSWinTT_T_Actor.compute_losses"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "\t\t", "\"\"\"\n\t\targs:\n\t\t\tdata - The input data, should contain the fields 'template', 'search', 'gt_bbox'.\n\t\t\ttemplate_images: (N_t, batch, 3, H, W)\n\t\t\tsearch_images: (N_s, batch, 3, H, W)\n\t\treturns:\n\t\t\tloss    - the training loss\n\t\t\tstatus  -  dict containing detailed losses\n\t\t\"\"\"", "\n", "# forward pass", "\n", "out_dict", "=", "self", ".", "forward_pass", "(", "data", ",", "run_box_head", "=", "True", ",", "run_cls_head", "=", "False", ")", "\n", "\n", "# process the groundtruth", "\n", "gt_bboxes", "=", "data", "[", "'search_anno'", "]", "# (Ns, batch, 4) (x1,y1,w,h)", "\n", "\n", "# compute losses", "\n", "loss", ",", "status", "=", "self", ".", "compute_losses", "(", "out_dict", ",", "gt_bboxes", "[", "0", "]", ")", "\n", "\n", "return", "loss", ",", "status", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.cswinttactor.CSWinTTActor.forward_pass": [[35, 52], ["range", "data[].view", "data[].view", "feat_dict_list.append", "cswinttactor.CSWinTTActor.net", "[].view", "[].view", "feat_dict_list.append", "cswinttactor.CSWinTTActor.net", "cswinttactor.CSWinTTActor.net", "lib.utils.misc.NestedTensor", "lib.utils.misc.NestedTensor"], "methods", ["None"], ["", "def", "forward_pass", "(", "self", ",", "data", ",", "run_box_head", ",", "run_cls_head", ")", ":", "\n", "\t\t", "feat_dict_list", "=", "[", "]", "\n", "# process the templates", "\n", "for", "i", "in", "range", "(", "self", ".", "settings", ".", "num_template", ")", ":", "\n", "\t\t\t", "template_img_i", "=", "data", "[", "'template_images'", "]", "[", "i", "]", ".", "view", "(", "-", "1", ",", "*", "data", "[", "'template_images'", "]", ".", "shape", "[", "2", ":", "]", ")", "# (batch, 3, 128, 128)", "\n", "template_att_i", "=", "data", "[", "'template_att'", "]", "[", "i", "]", ".", "view", "(", "-", "1", ",", "*", "data", "[", "'template_att'", "]", ".", "shape", "[", "2", ":", "]", ")", "# (batch, 128, 128)", "\n", "feat_dict_list", ".", "append", "(", "self", ".", "net", "(", "input", "=", "NestedTensor", "(", "template_img_i", ",", "template_att_i", ")", ",", "mode", "=", "\"backbone\"", ")", ")", "\n", "\n", "# process the search regions (t-th frame)", "\n", "", "search_img", "=", "data", "[", "'search_images'", "]", ".", "view", "(", "-", "1", ",", "*", "data", "[", "'search_images'", "]", ".", "shape", "[", "2", ":", "]", ")", "# (batch, 3, 384, 384)", "\n", "search_att", "=", "data", "[", "'search_att'", "]", ".", "view", "(", "-", "1", ",", "*", "data", "[", "'search_att'", "]", ".", "shape", "[", "2", ":", "]", ")", "# (batch, 384, 384)", "\n", "feat_dict_list", ".", "append", "(", "self", ".", "net", "(", "input", "=", "NestedTensor", "(", "search_img", ",", "search_att", ")", ",", "mode", "=", "\"backbone\"", ")", ")", "\n", "\n", "out_dict", ",", "_", ",", "_", "=", "self", ".", "net", "(", "feat_dict_list", "=", "feat_dict_list", ",", "mode", "=", "\"transformer\"", ",", "run_box_head", "=", "run_box_head", ",", "\n", "run_cls_head", "=", "run_cls_head", ")", "\n", "\n", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.cswinttactor.CSWinTTActor.compute_losses": [[53, 81], ["torch.isnan().any", "pred_boxes.size", "lib.utils.box_ops.box_cxcywh_to_xyxy().view", "[].repeat().view().clamp", "ValueError", "iou.detach().mean", "torch.isnan", "lib.utils.box_ops.box_cxcywh_to_xyxy", "[].repeat().view", "loss.item", "giou_loss.item", "l1_loss.item", "iou.detach().mean.item", "torch.tensor().cuda", "torch.tensor().cuda", "iou.detach", "[].repeat", "torch.tensor", "torch.tensor", "lib.utils.box_ops.box_xywh_to_xyxy"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.analysis.vos_utils.mean", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.box_cxcywh_to_xyxy", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.box_xywh_to_xyxy"], ["", "def", "compute_losses", "(", "self", ",", "pred_dict", ",", "gt_bbox", ",", "return_status", "=", "True", ")", ":", "\n", "# Get boxes", "\n", "\t\t", "pred_boxes", "=", "pred_dict", "[", "'pred_boxes'", "]", "\n", "if", "torch", ".", "isnan", "(", "pred_boxes", ")", ".", "any", "(", ")", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "\"Network outputs is NAN! Stop Training\"", ")", "\n", "", "num_queries", "=", "pred_boxes", ".", "size", "(", "1", ")", "\n", "pred_boxes_vec", "=", "box_cxcywh_to_xyxy", "(", "pred_boxes", ")", ".", "view", "(", "-", "1", ",", "4", ")", "# (B,N,4) --> (BN,4) (x1,y1,x2,y2)", "\n", "gt_boxes_vec", "=", "box_xywh_to_xyxy", "(", "gt_bbox", ")", "[", ":", ",", "None", ",", ":", "]", ".", "repeat", "(", "(", "1", ",", "num_queries", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "4", ")", ".", "clamp", "(", "min", "=", "0.0", ",", "\n", "max", "=", "1.0", ")", "# (B,4) --> (B,1,4) --> (B,N,4)", "\n", "# compute giou and iou", "\n", "try", ":", "\n", "\t\t\t", "giou_loss", ",", "iou", "=", "self", ".", "objective", "[", "'giou'", "]", "(", "pred_boxes_vec", ",", "gt_boxes_vec", ")", "# (BN,4) (BN,4)", "\n", "", "except", ":", "\n", "\t\t\t", "giou_loss", ",", "iou", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "# compute l1 loss", "\n", "", "l1_loss", "=", "self", ".", "objective", "[", "'l1'", "]", "(", "pred_boxes_vec", ",", "gt_boxes_vec", ")", "# (BN,4) (BN,4)", "\n", "# weighted sum", "\n", "loss", "=", "self", ".", "loss_weight", "[", "'giou'", "]", "*", "giou_loss", "+", "self", ".", "loss_weight", "[", "'l1'", "]", "*", "l1_loss", "\n", "if", "return_status", ":", "\n", "# status for log", "\n", "\t\t\t", "mean_iou", "=", "iou", ".", "detach", "(", ")", ".", "mean", "(", ")", "\n", "status", "=", "{", "\"Loss/total\"", ":", "loss", ".", "item", "(", ")", ",", "\n", "\"Loss/giou\"", ":", "giou_loss", ".", "item", "(", ")", ",", "\n", "\"Loss/l1\"", ":", "l1_loss", ".", "item", "(", ")", ",", "\n", "\"IoU\"", ":", "mean_iou", ".", "item", "(", ")", "}", "\n", "return", "loss", ",", "status", "\n", "", "else", ":", "\n", "\t\t\t", "return", "loss", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.cswintt_T_actor.CSWinTT_T_Actor.__init__": [[8, 13], ["CSWinTTActor.__init__"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["def", "__init__", "(", "self", ",", "net", ",", "objective", ",", "loss_weight", ",", "settings", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "net", ",", "objective", ",", "loss_weight", ",", "settings", ")", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "settings", "=", "settings", "\n", "self", ".", "bs", "=", "self", ".", "settings", ".", "batchsize", "# batch size", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.cswintt_T_actor.CSWinTT_T_Actor.__call__": [[14, 36], ["cswintt_T_actor.CSWinTT_T_Actor.forward_pass", "data[].view", "cswintt_T_actor.CSWinTT_T_Actor.compute_losses"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.cswinttactor.CSWinTTActor.forward_pass", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.cswintt_T_actor.CSWinTT_T_Actor.compute_losses"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "\t\t", "\"\"\"\n\t\targs:\n\t\t\tdata - The input data, should contain the fields 'template', 'search', 'gt_bbox'.\n\t\t\ttemplate_images: (N_t, batch, 3, H, W)\n\t\t\tsearch_images: (N_s, batch, 3, H, W)\n\t\treturns:\n\t\t\tloss    - the training loss\n\t\t\tstatus  -  dict containing detailed losses\n\t\t\"\"\"", "\n", "# forward pass", "\n", "out_dict", "=", "self", ".", "forward_pass", "(", "data", ",", "run_box_head", "=", "True", ",", "run_cls_head", "=", "True", ")", "\n", "\n", "# process the groundtruth", "\n", "gt_labels", "=", "data", "[", "'label'", "]", ".", "view", "(", "-", "1", ")", "\n", "gt_bboxes", "=", "data", "[", "'search_anno'", "]", "# (Ns, batch, 4) (x1,y1,w,h)", "\n", "\n", "# draw_image(data['search_images'][0,0,:].permute(1,2,0).detach().cpu().numpy()*255+128, gt_bboxes[0,0,:].detach().cpu().numpy() * 384)", "\n", "# compute losses", "\n", "loss", ",", "status", "=", "self", ".", "compute_losses", "(", "out_dict", ",", "gt_bboxes", ",", "gt_labels", ")", "\n", "\n", "return", "loss", ",", "status", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.cswintt_T_actor.CSWinTT_T_Actor.compute_losses": [[37, 72], ["torch.isnan().any", "lib.utils.box_ops.box_cxcywh_to_xyxy().view", "lib.utils.box_ops.box_xywh_to_xyxy().view().clamp", "enumerate", "torch.zeros().cuda", "torch.zeros().cuda", "ValueError", "gt_labels.view", "enumerate", "torch.isnan", "lib.utils.box_ops.box_cxcywh_to_xyxy", "lib.utils.box_ops.box_xywh_to_xyxy().view", "visiable_index.append", "torch.zeros", "torch.zeros", "lib.utils.box_ops.generalized_box_iou", "pred_dict[].view", "loss.item", "torch.isnan", "remove_index.append", "lib.utils.box_ops.box_xywh_to_xyxy"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.box_cxcywh_to_xyxy", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.generalized_box_iou", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.box_ops.box_xywh_to_xyxy"], ["", "def", "compute_losses", "(", "self", ",", "pred_dict", ",", "gt_bboxes", ",", "gt_labels", ",", "return_status", "=", "True", ")", ":", "\n", "\t\t", "pred_boxes", "=", "pred_dict", "[", "'pred_boxes'", "]", "\n", "if", "torch", ".", "isnan", "(", "pred_boxes", ")", ".", "any", "(", ")", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "\"Network outputs is NAN! Stop Training\"", ")", "\n", "", "pred_boxes_vec", "=", "box_cxcywh_to_xyxy", "(", "pred_boxes", ")", ".", "view", "(", "-", "1", ",", "4", ")", "# (B,N,4) --> (BN,4) (x1,y1,x2,y2)", "\n", "gt_boxes_vec", "=", "box_xywh_to_xyxy", "(", "gt_bboxes", ")", ".", "view", "(", "-", "1", ",", "4", ")", ".", "clamp", "(", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "# (B,4) --> (B,1,4) --> (B,N,4)", "\n", "\n", "visiable_index", "=", "[", "]", "\n", "for", "index", ",", "value", "in", "enumerate", "(", "gt_labels", ".", "view", "(", "-", "1", ")", ")", ":", "\n", "\t\t\t", "if", "value", "==", "0", ":", "\n", "\t\t\t\t", "visiable_index", ".", "append", "(", "index", ")", "\n", "\n", "", "", "pred_boxes_vec", "[", "visiable_index", ",", ":", "]", "=", "torch", ".", "zeros", "(", "4", ")", ".", "cuda", "(", ")", "\n", "gt_boxes_vec", "[", "visiable_index", ",", ":", "]", "=", "torch", ".", "zeros", "(", "4", ")", ".", "cuda", "(", ")", "\n", "try", ":", "\n", "\t\t\t", "ious", "=", "generalized_box_iou", "(", "pred_boxes_vec", ",", "gt_boxes_vec", ")", "[", "1", "]", "\n", "", "except", ":", "\n", "\t\t\t", "ious", "=", "None", "\n", "\n", "", "if", "ious", "is", "not", "None", ":", "\n", "\t\t\t", "remove_index", "=", "[", "]", "\n", "for", "index", ",", "value", "in", "enumerate", "(", "ious", ")", ":", "\n", "\t\t\t\t", "if", "torch", ".", "isnan", "(", "value", ")", "or", "value", "<=", "0.5", ":", "\n", "\t\t\t\t\t", "remove_index", ".", "append", "(", "index", ")", "\n", "", "", "gt_labels", "[", "remove_index", "]", "=", "0.", "\n", "\n", "", "loss", "=", "self", ".", "loss_weight", "[", "\"cls\"", "]", "*", "self", ".", "objective", "[", "'cls'", "]", "(", "pred_dict", "[", "\"pred_logits\"", "]", ".", "view", "(", "-", "1", ")", ",", "gt_labels", ")", "\n", "\n", "if", "return_status", ":", "\n", "# status for log", "\n", "\t\t\t", "status", "=", "{", "\n", "\"cls_loss\"", ":", "loss", ".", "item", "(", ")", "}", "\n", "return", "loss", ",", "status", "\n", "", "else", ":", "\n", "\t\t\t", "return", "loss", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.__init__": [[6, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "net", ",", "objective", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            net - The network to train\n            objective - The loss function\n        \"\"\"", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "objective", "=", "objective", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.__call__": [[15, 26], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ":", "TensorDict", ")", ":", "\n", "        ", "\"\"\" Called in each training iteration. Should pass in input data through the network, calculate the loss, and\n        return the training stats for the input data\n        args:\n            data - A TensorDict containing all the necessary data blocks.\n\n        returns:\n            loss    - loss for the input data\n            stats   - a dict containing detailed losses\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to": [[27, 33], ["base_actor.BaseActor.net.to"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\" Move the network to device\n        args:\n            device - device to use. 'cpu' or 'cuda'\n        \"\"\"", "\n", "self", ".", "net", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.train": [[34, 40], ["base_actor.BaseActor.net.train"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "None", ")", ":", "\n", "        ", "\"\"\" Set whether the network is in train mode.\n        args:\n            mode (True) - Bool specifying whether in training mode.\n        \"\"\"", "\n", "self", ".", "net", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.eval": [[41, 44], ["base_actor.BaseActor.train"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.train"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\" Set network to eval mode\"\"\"", "\n", "self", ".", "train", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.f": [[45, 51], ["base_actor.BaseActor.net.train"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.train"], ["", "def", "f", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\" Set whether the network is in train mode.\n        args:\n            mode (True) - Bool specifying whether in training mode.\n        \"\"\"", "\n", "self", ".", "net", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.Transform.__init__": [[35, 42], ["isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "transforms", ")", ":", "\n", "        ", "if", "len", "(", "transforms", ")", "==", "1", "and", "isinstance", "(", "transforms", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "transforms", "=", "transforms", "[", "0", "]", "\n", "", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "_valid_inputs", "=", "[", "'image'", ",", "'coords'", ",", "'bbox'", ",", "'mask'", ",", "'att'", "]", "\n", "self", ".", "_valid_args", "=", "[", "'joint'", ",", "'new_roll'", "]", "\n", "self", ".", "_valid_all", "=", "self", ".", "_valid_inputs", "+", "self", ".", "_valid_args", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.Transform.__call__": [[43, 64], ["inputs.keys", "inputs.get", "inputs.get", "tuple", "zip", "tuple", "t", "len", "inputs.keys", "ValueError", "inputs.items", "list", "transforms.Transform.", "transforms.Transform._split_inputs"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.Transform._split_inputs"], ["", "def", "__call__", "(", "self", ",", "**", "inputs", ")", ":", "\n", "        ", "var_names", "=", "[", "k", "for", "k", "in", "inputs", ".", "keys", "(", ")", "if", "k", "in", "self", ".", "_valid_inputs", "]", "\n", "for", "v", "in", "inputs", ".", "keys", "(", ")", ":", "\n", "            ", "if", "v", "not", "in", "self", ".", "_valid_all", ":", "\n", "                ", "raise", "ValueError", "(", "'Incorrect input \\\"{}\\\" to transform. Only supports inputs {} and arguments {}.'", ".", "format", "(", "v", ",", "self", ".", "_valid_inputs", ",", "self", ".", "_valid_args", ")", ")", "\n", "\n", "", "", "joint_mode", "=", "inputs", ".", "get", "(", "'joint'", ",", "True", ")", "\n", "new_roll", "=", "inputs", ".", "get", "(", "'new_roll'", ",", "True", ")", "\n", "\n", "if", "not", "joint_mode", ":", "\n", "            ", "out", "=", "zip", "(", "*", "[", "self", "(", "**", "inp", ")", "for", "inp", "in", "self", ".", "_split_inputs", "(", "inputs", ")", "]", ")", "\n", "return", "tuple", "(", "list", "(", "o", ")", "for", "o", "in", "out", ")", "\n", "\n", "", "out", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", "if", "k", "in", "self", ".", "_valid_inputs", "}", "\n", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "out", "=", "t", "(", "**", "out", ",", "joint", "=", "joint_mode", ",", "new_roll", "=", "new_roll", ")", "\n", "", "if", "len", "(", "var_names", ")", "==", "1", ":", "\n", "            ", "return", "out", "[", "var_names", "[", "0", "]", "]", "\n", "# Make sure order is correct", "\n", "", "return", "tuple", "(", "out", "[", "v", "]", "for", "v", "in", "var_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.Transform._split_inputs": [[65, 76], ["filter", "inputs.items", "isinstance", "inputs.keys", "zip", "zip", "zip"], "methods", ["None"], ["", "def", "_split_inputs", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "var_names", "=", "[", "k", "for", "k", "in", "inputs", ".", "keys", "(", ")", "if", "k", "in", "self", ".", "_valid_inputs", "]", "\n", "split_inputs", "=", "[", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "var_names", ",", "vals", ")", "}", "for", "vals", "in", "zip", "(", "*", "[", "inputs", "[", "vn", "]", "for", "vn", "in", "var_names", "]", ")", "]", "\n", "for", "arg_name", ",", "arg_val", "in", "filter", "(", "lambda", "it", ":", "it", "[", "0", "]", "!=", "'joint'", "and", "it", "[", "0", "]", "in", "self", ".", "_valid_args", ",", "inputs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "arg_val", ",", "list", ")", ":", "\n", "                ", "for", "inp", ",", "av", "in", "zip", "(", "split_inputs", ",", "arg_val", ")", ":", "\n", "                    ", "inp", "[", "arg_name", "]", "=", "av", "\n", "", "", "else", ":", "\n", "                ", "for", "inp", "in", "split_inputs", ":", "\n", "                    ", "inp", "[", "arg_name", "]", "=", "arg_val", "\n", "", "", "", "return", "split_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.Transform.__repr__": [[77, 84], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "'\\n'", "\n", "format_string", "+=", "'    {0}'", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "'\\n)'", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.TransformBase.__init__": [[88, 94], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"2020.12.24 Add 'att' to valid inputs\"\"\"", "\n", "self", ".", "_valid_inputs", "=", "[", "'image'", ",", "'coords'", ",", "'bbox'", ",", "'mask'", ",", "'att'", "]", "\n", "self", ".", "_valid_args", "=", "[", "'new_roll'", "]", "\n", "self", ".", "_valid_all", "=", "self", ".", "_valid_inputs", "+", "self", ".", "_valid_args", "\n", "self", ".", "_rand_params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.TransformBase.__call__": [[95, 122], ["input_args.get", "dict", "input_vars.items", "transforms.TransformBase.roll", "inputs.items", "inputs.items", "getattr", "isinstance", "isinstance", "getattr.", "getattr.", "transforms.TransformBase._get_image_size"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.RandomHorizontalFlip.roll", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.TransformBase._get_image_size"], ["", "def", "__call__", "(", "self", ",", "**", "inputs", ")", ":", "\n", "# Split input", "\n", "        ", "input_vars", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", "if", "k", "in", "self", ".", "_valid_inputs", "}", "\n", "input_args", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", "if", "k", "in", "self", ".", "_valid_args", "}", "\n", "\n", "# Roll random parameters for the transform", "\n", "if", "input_args", ".", "get", "(", "'new_roll'", ",", "True", ")", ":", "\n", "            ", "rand_params", "=", "self", ".", "roll", "(", ")", "\n", "if", "rand_params", "is", "None", ":", "\n", "                ", "rand_params", "=", "(", ")", "\n", "", "elif", "not", "isinstance", "(", "rand_params", ",", "tuple", ")", ":", "\n", "                ", "rand_params", "=", "(", "rand_params", ",", ")", "\n", "", "self", ".", "_rand_params", "=", "rand_params", "\n", "\n", "", "outputs", "=", "dict", "(", ")", "\n", "for", "var_name", ",", "var", "in", "input_vars", ".", "items", "(", ")", ":", "\n", "            ", "if", "var", "is", "not", "None", ":", "\n", "                ", "transform_func", "=", "getattr", "(", "self", ",", "'transform_'", "+", "var_name", ")", "\n", "if", "var_name", "in", "[", "'coords'", ",", "'bbox'", "]", ":", "\n", "                    ", "params", "=", "(", "self", ".", "_get_image_size", "(", "input_vars", ")", ",", ")", "+", "self", ".", "_rand_params", "\n", "", "else", ":", "\n", "                    ", "params", "=", "self", ".", "_rand_params", "\n", "", "if", "isinstance", "(", "var", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                    ", "outputs", "[", "var_name", "]", "=", "[", "transform_func", "(", "x", ",", "*", "params", ")", "for", "x", "in", "var", "]", "\n", "", "else", ":", "\n", "                    ", "outputs", "[", "var_name", "]", "=", "transform_func", "(", "var", ",", "*", "params", ")", "\n", "", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.TransformBase._get_image_size": [[123, 138], ["isinstance", "isinstance", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "Exception", "inputs.get"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get"], ["", "def", "_get_image_size", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "im", "=", "None", "\n", "for", "var_name", "in", "[", "'image'", ",", "'mask'", "]", ":", "\n", "            ", "if", "inputs", ".", "get", "(", "var_name", ")", "is", "not", "None", ":", "\n", "                ", "im", "=", "inputs", "[", "var_name", "]", "\n", "break", "\n", "", "", "if", "im", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "isinstance", "(", "im", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "im", "=", "im", "[", "0", "]", "\n", "", "if", "isinstance", "(", "im", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "im", ".", "shape", "[", ":", "2", "]", "\n", "", "if", "torch", ".", "is_tensor", "(", "im", ")", ":", "\n", "            ", "return", "(", "im", ".", "shape", "[", "-", "2", "]", ",", "im", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "raise", "Exception", "(", "'Unknown image type'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.TransformBase.roll": [[139, 141], ["None"], "methods", ["None"], ["", "def", "roll", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.TransformBase.transform_image": [[142, 145], ["None"], "methods", ["None"], ["", "def", "transform_image", "(", "self", ",", "image", ",", "*", "rand_params", ")", ":", "\n", "        ", "\"\"\"Must be deterministic\"\"\"", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.TransformBase.transform_coords": [[146, 149], ["None"], "methods", ["None"], ["", "def", "transform_coords", "(", "self", ",", "coords", ",", "image_shape", ",", "*", "rand_params", ")", ":", "\n", "        ", "\"\"\"Must be deterministic\"\"\"", "\n", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.TransformBase.transform_bbox": [[150, 171], ["bbox.clone().view().t().flip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "transforms.TransformBase.transform_coords().flip", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.min", "torch.min", "torch.min", "torch.min", "bbox.clone().view().t", "transforms.TransformBase.transform_coords", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bbox.clone().view", "bbox.clone"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.RandomHorizontalFlip_Norm.transform_coords", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "def", "transform_bbox", "(", "self", ",", "bbox", ",", "image_shape", ",", "*", "rand_params", ")", ":", "\n", "        ", "\"\"\"Assumes [x, y, w, h]\"\"\"", "\n", "# Check if not overloaded", "\n", "if", "self", ".", "transform_coords", ".", "__code__", "==", "TransformBase", ".", "transform_coords", ".", "__code__", ":", "\n", "            ", "return", "bbox", "\n", "\n", "", "coord", "=", "bbox", ".", "clone", "(", ")", ".", "view", "(", "-", "1", ",", "2", ")", ".", "t", "(", ")", ".", "flip", "(", "0", ")", "\n", "\n", "x1", "=", "coord", "[", "1", ",", "0", "]", "\n", "x2", "=", "coord", "[", "1", ",", "0", "]", "+", "coord", "[", "1", ",", "1", "]", "\n", "\n", "y1", "=", "coord", "[", "0", ",", "0", "]", "\n", "y2", "=", "coord", "[", "0", ",", "0", "]", "+", "coord", "[", "0", ",", "1", "]", "\n", "\n", "coord_all", "=", "torch", ".", "tensor", "(", "[", "[", "y1", ",", "y1", ",", "y2", ",", "y2", "]", ",", "[", "x1", ",", "x2", ",", "x2", ",", "x1", "]", "]", ")", "\n", "\n", "coord_transf", "=", "self", ".", "transform_coords", "(", "coord_all", ",", "image_shape", ",", "*", "rand_params", ")", ".", "flip", "(", "0", ")", "\n", "tl", "=", "torch", ".", "min", "(", "coord_transf", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "sz", "=", "torch", ".", "max", "(", "coord_transf", ",", "dim", "=", "1", ")", "[", "0", "]", "-", "tl", "\n", "bbox_out", "=", "torch", ".", "cat", "(", "(", "tl", ",", "sz", ")", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "bbox", ".", "shape", ")", "\n", "return", "bbox_out", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.TransformBase.transform_mask": [[172, 175], ["None"], "methods", ["None"], ["", "def", "transform_mask", "(", "self", ",", "mask", ",", "*", "rand_params", ")", ":", "\n", "        ", "\"\"\"Must be deterministic\"\"\"", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.TransformBase.transform_att": [[176, 179], ["None"], "methods", ["None"], ["", "def", "transform_att", "(", "self", ",", "att", ",", "*", "rand_params", ")", ":", "\n", "        ", "\"\"\"2020.12.24 Added to deal with attention masks\"\"\"", "\n", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.ToTensor.transform_image": [[184, 195], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "isinstance", "torch.from_numpy.transpose", "torch.from_numpy.transpose", "torch.from_numpy.float().div", "torch.from_numpy.float().div", "torch.from_numpy.float", "torch.from_numpy.float"], "methods", ["None"], ["def", "transform_image", "(", "self", ",", "image", ")", ":", "\n", "# handle numpy array", "\n", "        ", "if", "image", ".", "ndim", "==", "2", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "image", "=", "torch", ".", "from_numpy", "(", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "# backward compatibility", "\n", "if", "isinstance", "(", "image", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "            ", "return", "image", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "", "else", ":", "\n", "            ", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.ToTensor.transfrom_mask": [[196, 199], ["isinstance", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "transfrom_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "if", "isinstance", "(", "mask", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.ToTensor.transform_att": [[200, 207], ["isinstance", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "isinstance", "att.to", "ValueError", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to"], ["", "", "def", "transform_att", "(", "self", ",", "att", ")", ":", "\n", "        ", "if", "isinstance", "(", "att", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "att", ")", ".", "to", "(", "torch", ".", "bool", ")", "\n", "", "elif", "isinstance", "(", "att", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "att", ".", "to", "(", "torch", ".", "bool", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"dtype must be np.ndarray or torch.Tensor\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.ToTensorAndJitter.__init__": [[211, 215], ["transforms.TransformBase.__init__"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["def", "__init__", "(", "self", ",", "brightness_jitter", "=", "0.0", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "brightness_jitter", "=", "brightness_jitter", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.ToTensorAndJitter.roll": [[216, 218], ["numpy.random.uniform", "max"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "def", "roll", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "self", ".", "brightness_jitter", ")", ",", "1", "+", "self", ".", "brightness_jitter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.ToTensorAndJitter.transform_image": [[219, 228], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.transpose", "torch.from_numpy.transpose", "torch.from_numpy.float().mul().clamp", "torch.from_numpy.float().mul().clamp", "torch.from_numpy.float().mul().clamp", "torch.from_numpy.float().mul().clamp", "torch.from_numpy.float().mul", "torch.from_numpy.float().mul", "torch.from_numpy.float().mul", "torch.from_numpy.float().mul", "torch.from_numpy.float", "torch.from_numpy.float", "torch.from_numpy.float", "torch.from_numpy.float"], "methods", ["None"], ["", "def", "transform_image", "(", "self", ",", "image", ",", "brightness_factor", ")", ":", "\n", "# handle numpy array", "\n", "        ", "image", "=", "torch", ".", "from_numpy", "(", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "\n", "# backward compatibility", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "return", "image", ".", "float", "(", ")", ".", "mul", "(", "brightness_factor", "/", "255.0", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "", "else", ":", "\n", "            ", "return", "image", ".", "float", "(", ")", ".", "mul", "(", "brightness_factor", ")", ".", "clamp", "(", "0.0", ",", "255.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.ToTensorAndJitter.transform_mask": [[229, 234], ["isinstance", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "transform_mask", "(", "self", ",", "mask", ",", "brightness_factor", ")", ":", "\n", "        ", "if", "isinstance", "(", "mask", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "return", "mask", "\n", "", "", "def", "transform_att", "(", "self", ",", "att", ",", "brightness_factor", ")", ":", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.ToTensorAndJitter.transform_att": [[234, 241], ["isinstance", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "isinstance", "att.to", "ValueError", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to"], ["", "", "def", "transform_att", "(", "self", ",", "att", ",", "brightness_factor", ")", ":", "\n", "        ", "if", "isinstance", "(", "att", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "att", ")", ".", "to", "(", "torch", ".", "bool", ")", "\n", "", "elif", "isinstance", "(", "att", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "att", ".", "to", "(", "torch", ".", "bool", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"dtype must be np.ndarray or torch.Tensor\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.Normalize.__init__": [[245, 250], ["transforms.TransformBase.__init__"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.Normalize.transform_image": [[251, 253], ["torchvision.normalize"], "methods", ["None"], ["", "def", "transform_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "tvisf", ".", "normalize", "(", "image", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.ToGrayscale.__init__": [[257, 261], ["transforms.TransformBase.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "probability", "=", "probability", "\n", "self", ".", "color_weights", "=", "np", ".", "array", "(", "[", "0.2989", ",", "0.5870", ",", "0.1140", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.ToGrayscale.roll": [[262, 264], ["random.random"], "methods", ["None"], ["", "def", "roll", "(", "self", ")", ":", "\n", "        ", "return", "random", ".", "random", "(", ")", "<", "self", ".", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.ToGrayscale.transform_image": [[265, 273], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "cv2.cvtColor", "numpy.stack", "NotImplementedError"], "methods", ["None"], ["", "def", "transform_image", "(", "self", ",", "image", ",", "do_grayscale", ")", ":", "\n", "        ", "if", "do_grayscale", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "image", ")", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Implement torch variant.'", ")", "\n", "", "img_gray", "=", "cv", ".", "cvtColor", "(", "image", ",", "cv", ".", "COLOR_RGB2GRAY", ")", "\n", "return", "np", ".", "stack", "(", "[", "img_gray", ",", "img_gray", ",", "img_gray", "]", ",", "axis", "=", "2", ")", "\n", "# return np.repeat(np.sum(img * self.color_weights, axis=2, keepdims=True).astype(np.uint8), 3, axis=2)", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.ToBGR.transform_image": [[277, 282], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "cv2.cvtColor", "NotImplementedError"], "methods", ["None"], ["def", "transform_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "image", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Implement torch variant.'", ")", "\n", "", "img_bgr", "=", "cv", ".", "cvtColor", "(", "image", ",", "cv", ".", "COLOR_RGB2BGR", ")", "\n", "return", "img_bgr", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.RandomHorizontalFlip.__init__": [[286, 289], ["transforms.TransformBase.__init__"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "probability", "=", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.RandomHorizontalFlip.roll": [[290, 292], ["random.random"], "methods", ["None"], ["", "def", "roll", "(", "self", ")", ":", "\n", "        ", "return", "random", ".", "random", "(", ")", "<", "self", ".", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.RandomHorizontalFlip.transform_image": [[293, 299], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "numpy.fliplr().copy", "image.flip", "numpy.fliplr"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.copy"], ["", "def", "transform_image", "(", "self", ",", "image", ",", "do_flip", ")", ":", "\n", "        ", "if", "do_flip", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "image", ")", ":", "\n", "                ", "return", "image", ".", "flip", "(", "(", "2", ",", ")", ")", "\n", "", "return", "np", ".", "fliplr", "(", "image", ")", ".", "copy", "(", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.RandomHorizontalFlip.transform_coords": [[300, 306], ["coords.clone"], "methods", ["None"], ["", "def", "transform_coords", "(", "self", ",", "coords", ",", "image_shape", ",", "do_flip", ")", ":", "\n", "        ", "if", "do_flip", ":", "\n", "            ", "coords_flip", "=", "coords", ".", "clone", "(", ")", "\n", "coords_flip", "[", "1", ",", ":", "]", "=", "(", "image_shape", "[", "1", "]", "-", "1", ")", "-", "coords", "[", "1", ",", ":", "]", "\n", "return", "coords_flip", "\n", "", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.RandomHorizontalFlip.transform_mask": [[307, 313], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "numpy.fliplr().copy", "mask.flip", "numpy.fliplr"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.copy"], ["", "def", "transform_mask", "(", "self", ",", "mask", ",", "do_flip", ")", ":", "\n", "        ", "if", "do_flip", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "mask", ")", ":", "\n", "                ", "return", "mask", ".", "flip", "(", "(", "-", "1", ",", ")", ")", "\n", "", "return", "np", ".", "fliplr", "(", "mask", ")", ".", "copy", "(", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.RandomHorizontalFlip.transform_att": [[314, 320], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "numpy.fliplr().copy", "att.flip", "numpy.fliplr"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.SequenceList.copy"], ["", "def", "transform_att", "(", "self", ",", "att", ",", "do_flip", ")", ":", "\n", "        ", "if", "do_flip", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "att", ")", ":", "\n", "                ", "return", "att", ".", "flip", "(", "(", "-", "1", ",", ")", ")", "\n", "", "return", "np", ".", "fliplr", "(", "att", ")", ".", "copy", "(", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.RandomHorizontalFlip_Norm.__init__": [[325, 328], ["transforms.RandomHorizontalFlip.__init__"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "probability", "=", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.transforms.RandomHorizontalFlip_Norm.transform_coords": [[329, 336], ["coords.clone"], "methods", ["None"], ["", "def", "transform_coords", "(", "self", ",", "coords", ",", "image_shape", ",", "do_flip", ")", ":", "\n", "        ", "\"\"\"we should use 1 rather than image_shape\"\"\"", "\n", "if", "do_flip", ":", "\n", "            ", "coords_flip", "=", "coords", ".", "clone", "(", ")", "\n", "coords_flip", "[", "1", ",", ":", "]", "=", "1", "-", "coords", "[", "1", ",", ":", "]", "\n", "return", "coords_flip", "\n", "", "return", "coords", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing.BaseProcessing.__init__": [[19, 34], ["torchvision.ToTensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ",", "template_transform", "=", "None", ",", "search_transform", "=", "None", ",", "joint_transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            transform       - The set of transformations to be applied on the images. Used only if template_transform or\n                                search_transform is None.\n            template_transform - The set of transformations to be applied on the template images. If None, the 'transform'\n                                argument is used instead.\n            search_transform  - The set of transformations to be applied on the search images. If None, the 'transform'\n                                argument is used instead.\n            joint_transform - The set of transformations to be applied 'jointly' on the template and search images.  For\n                                example, it can be used to convert both template and search images to grayscale.\n        \"\"\"", "\n", "self", ".", "transform", "=", "{", "'template'", ":", "transform", "if", "template_transform", "is", "None", "else", "template_transform", ",", "\n", "'search'", ":", "transform", "if", "search_transform", "is", "None", "else", "search_transform", ",", "\n", "'joint'", ":", "joint_transform", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing.BaseProcessing.__call__": [[35, 37], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ":", "TensorDict", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing.STARKProcessing.__init__": [[49, 69], ["processing.BaseProcessing.__init__"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["def", "__init__", "(", "self", ",", "search_area_factor", ",", "output_sz", ",", "center_jitter_factor", ",", "scale_jitter_factor", ",", "\n", "mode", "=", "'pair'", ",", "settings", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            search_area_factor - The size of the search region  relative to the target size.\n            output_sz - An integer, denoting the size to which the search region is resized. The search region is always\n                        square.\n            center_jitter_factor - A dict containing the amount of jittering to be applied to the target center before\n                                    extracting the search region. See _get_jittered_box for how the jittering is done.\n            scale_jitter_factor - A dict containing the amount of jittering to be applied to the target size before\n                                    extracting the search region. See _get_jittered_box for how the jittering is done.\n            mode - Either 'pair' or 'sequence'. If mode='sequence', then output has an extra dimension for frames\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "search_area_factor", "=", "search_area_factor", "\n", "self", ".", "output_sz", "=", "output_sz", "\n", "self", ".", "center_jitter_factor", "=", "center_jitter_factor", "\n", "self", ".", "scale_jitter_factor", "=", "scale_jitter_factor", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "settings", "=", "settings", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing.STARKProcessing._get_jittered_box": [[70, 90], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "jittered_size.prod().sqrt", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "jittered_size.prod", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "_get_jittered_box", "(", "self", ",", "box", ",", "mode", ")", ":", "\n", "        ", "\"\"\" Jitter the input box\n        args:\n            box - input bounding box\n            mode - string 'template' or 'search' indicating template or search data\n\n        returns:\n            torch.Tensor - jittered box\n        \"\"\"", "\n", "\n", "jittered_size", "=", "box", "[", "2", ":", "4", "]", "*", "torch", ".", "exp", "(", "torch", ".", "randn", "(", "2", ")", "*", "self", ".", "scale_jitter_factor", "[", "mode", "]", ")", "\n", "max_offset", "=", "(", "jittered_size", ".", "prod", "(", ")", ".", "sqrt", "(", ")", "*", "torch", ".", "tensor", "(", "self", ".", "center_jitter_factor", "[", "mode", "]", ")", ".", "float", "(", ")", ")", "\n", "jittered_center", "=", "box", "[", "0", ":", "2", "]", "+", "0.5", "*", "box", "[", "2", ":", "4", "]", "+", "max_offset", "*", "(", "torch", ".", "rand", "(", "2", ")", "-", "0.5", ")", "\n", "\n", "# fix_rand = torch.tensor([0.2665, -0.6954], dtype=torch.float32)", "\n", "# jittered_size = box[2:4] * torch.exp(fix_rand * self.scale_jitter_factor[mode])", "\n", "# max_offset = (jittered_size.prod().sqrt() * torch.tensor(self.center_jitter_factor[mode]).float())", "\n", "# jittered_center = box[0:2] + 0.5 * box[2:4] + max_offset * (fix_rand - 0.5)", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "jittered_center", "-", "0.5", "*", "jittered_size", ",", "jittered_size", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing.STARKProcessing.__call__": [[91, 162], ["torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "lib.jittered_center_crop", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "data.apply.apply.apply", "data.apply.apply.apply", "processing.STARKProcessing._get_jittered_box", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "print", "torch.interpolate().to", "torch.interpolate().to", "print", "isinstance", "torch.interpolate", "torch.interpolate", "ele[].float"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing_utils.jittered_center_crop", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.apply", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.apply", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing.STARKProcessing._get_jittered_box", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.interpolate", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.interpolate"], ["", "def", "__call__", "(", "self", ",", "data", ":", "TensorDict", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            data - The input data, should contain the following fields:\n                'template_images', search_images', 'template_anno', 'search_anno'\n        returns:\n            TensorDict - output data block with following fields:\n                'template_images', 'search_images', 'template_anno', 'search_anno', 'test_proposals', 'proposal_iou'\n        \"\"\"", "\n", "# Apply joint transforms", "\n", "# draw_image(data['search_images'][0], data['search_anno'][0].cpu().numpy())", "\n", "if", "self", ".", "transform", "[", "'joint'", "]", "is", "not", "None", ":", "\n", "            ", "data", "[", "'template_images'", "]", ",", "data", "[", "'template_anno'", "]", ",", "data", "[", "'template_masks'", "]", "=", "self", ".", "transform", "[", "'joint'", "]", "(", "\n", "image", "=", "data", "[", "'template_images'", "]", ",", "bbox", "=", "data", "[", "'template_anno'", "]", ",", "mask", "=", "data", "[", "'template_masks'", "]", ")", "\n", "data", "[", "'search_images'", "]", ",", "data", "[", "'search_anno'", "]", ",", "data", "[", "'search_masks'", "]", "=", "self", ".", "transform", "[", "'joint'", "]", "(", "\n", "image", "=", "data", "[", "'search_images'", "]", ",", "bbox", "=", "data", "[", "'search_anno'", "]", ",", "mask", "=", "data", "[", "'search_masks'", "]", ",", "new_roll", "=", "False", ")", "\n", "\n", "", "for", "s", "in", "[", "'template'", ",", "'search'", "]", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'sequence'", "or", "len", "(", "data", "[", "s", "+", "'_images'", "]", ")", "==", "1", ",", "\"In pair mode, num train/test frames must be 1\"", "\n", "\n", "# Add a uniform noise to the center pos", "\n", "jittered_anno", "=", "[", "self", ".", "_get_jittered_box", "(", "a", ",", "s", ")", "for", "a", "in", "data", "[", "s", "+", "'_anno'", "]", "]", "\n", "\n", "# 2021.1.9 Check whether data is valid. Avoid too small bounding boxes", "\n", "w", ",", "h", "=", "torch", ".", "stack", "(", "jittered_anno", ",", "dim", "=", "0", ")", "[", ":", ",", "2", "]", ",", "torch", ".", "stack", "(", "jittered_anno", ",", "dim", "=", "0", ")", "[", ":", ",", "3", "]", "\n", "\n", "crop_sz", "=", "torch", ".", "ceil", "(", "torch", ".", "sqrt", "(", "w", "*", "h", ")", "*", "self", ".", "search_area_factor", "[", "s", "]", ")", "\n", "if", "(", "crop_sz", "<", "1", ")", ".", "any", "(", ")", ":", "\n", "                ", "data", "[", "'valid'", "]", "=", "False", "\n", "# print(\"Too small box is found. Replace it with new data.\")", "\n", "return", "data", "\n", "\n", "# Crop image region centered at jittered_anno box and get the attention mask", "\n", "", "crops", ",", "boxes", ",", "att_mask", ",", "mask_crops", "=", "prutils", ".", "jittered_center_crop", "(", "data", "[", "s", "+", "'_images'", "]", ",", "jittered_anno", ",", "\n", "data", "[", "s", "+", "'_anno'", "]", ",", "self", ".", "search_area_factor", "[", "s", "]", ",", "\n", "self", ".", "output_sz", "[", "s", "]", ",", "masks", "=", "data", "[", "s", "+", "'_masks'", "]", ")", "\n", "# Apply transforms", "\n", "data", "[", "s", "+", "'_images'", "]", ",", "data", "[", "s", "+", "'_anno'", "]", ",", "data", "[", "s", "+", "'_att'", "]", ",", "data", "[", "s", "+", "'_masks'", "]", "=", "self", ".", "transform", "[", "s", "]", "(", "\n", "image", "=", "crops", ",", "bbox", "=", "boxes", ",", "att", "=", "att_mask", ",", "mask", "=", "mask_crops", ",", "joint", "=", "False", ")", "\n", "\n", "# 2021.1.9 Check whether elements in data[s + '_att'] is all 1", "\n", "# Note that type of data[s + '_att'] is tuple, type of ele is torch.tensor", "\n", "for", "ele", "in", "data", "[", "s", "+", "'_att'", "]", ":", "\n", "                ", "if", "(", "ele", "==", "1", ")", ".", "all", "(", ")", ":", "\n", "                    ", "data", "[", "'valid'", "]", "=", "False", "\n", "print", "(", "\"Values of original attention mask are all one. Replace it with new data.\"", ")", "\n", "return", "data", "\n", "# 2021.1.10 more strict conditions: require the donwsampled masks not to be all 1", "\n", "", "", "for", "ele", "in", "data", "[", "s", "+", "'_att'", "]", ":", "\n", "                ", "feat_size", "=", "self", ".", "output_sz", "[", "s", "]", "//", "16", "# 16 is the backbone stride", "\n", "# (1,1,128,128) (1,1,256,256) --> (1,1,8,8) (1,1,16,16)", "\n", "mask_down", "=", "F", ".", "interpolate", "(", "ele", "[", "None", ",", "None", "]", ".", "float", "(", ")", ",", "size", "=", "feat_size", ")", ".", "to", "(", "torch", ".", "bool", ")", "[", "0", "]", "\n", "if", "(", "mask_down", "==", "1", ")", ".", "all", "(", ")", ":", "\n", "                    ", "data", "[", "'valid'", "]", "=", "False", "\n", "print", "(", "\"Values of down-sampled attention mask are all one. \"", "\n", "\"Replace it with new data.\"", ")", "\n", "return", "data", "\n", "\n", "", "", "", "data", "[", "'valid'", "]", "=", "True", "\n", "# if we use copy-and-paste augmentation", "\n", "if", "data", "[", "\"template_masks\"", "]", "is", "None", "or", "data", "[", "\"search_masks\"", "]", "is", "None", ":", "\n", "            ", "data", "[", "\"template_masks\"", "]", "=", "torch", ".", "zeros", "(", "(", "1", ",", "self", ".", "output_sz", "[", "\"template\"", "]", ",", "self", ".", "output_sz", "[", "\"template\"", "]", ")", ")", "\n", "data", "[", "\"search_masks\"", "]", "=", "torch", ".", "zeros", "(", "(", "1", ",", "self", ".", "output_sz", "[", "\"search\"", "]", ",", "self", ".", "output_sz", "[", "\"search\"", "]", ")", ")", "\n", "# Prepare output", "\n", "", "if", "self", ".", "mode", "==", "'sequence'", ":", "\n", "            ", "data", "=", "data", ".", "apply", "(", "stack_tensors", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "data", ".", "apply", "(", "lambda", "x", ":", "x", "[", "0", "]", "if", "isinstance", "(", "x", ",", "list", ")", "else", "x", ")", "\n", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing.stack_tensors": [[9, 13], ["isinstance", "isinstance", "torch.stack", "torch.stack"], "function", ["None"], ["def", "stack_tensors", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", "and", "isinstance", "(", "x", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.image_loader.default_image_loader": [[15, 30], ["image_loader.opencv_loader", "image_loader.jpeg4py_loader", "image_loader.jpeg4py_loader", "print"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.image_loader.opencv_loader", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.image_loader.jpeg4py_loader", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.image_loader.jpeg4py_loader"], ["def", "default_image_loader", "(", "path", ")", ":", "\n", "    ", "\"\"\"The default image loader, reads the image from the given path. It first tries to use the jpeg4py_loader,\n    but reverts to the opencv_loader if the former is not available.\"\"\"", "\n", "if", "default_image_loader", ".", "use_jpeg4py", "is", "None", ":", "\n", "# Try using jpeg4py", "\n", "        ", "im", "=", "jpeg4py_loader", "(", "path", ")", "\n", "if", "im", "is", "None", ":", "\n", "            ", "default_image_loader", ".", "use_jpeg4py", "=", "False", "\n", "print", "(", "'Using opencv_loader instead.'", ")", "\n", "", "else", ":", "\n", "            ", "default_image_loader", ".", "use_jpeg4py", "=", "True", "\n", "return", "im", "\n", "", "", "if", "default_image_loader", ".", "use_jpeg4py", ":", "\n", "        ", "return", "jpeg4py_loader", "(", "path", ")", "\n", "", "return", "opencv_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.image_loader.jpeg4py_loader": [[34, 42], ["jpeg4py.JPEG().decode", "print", "print", "jpeg4py.JPEG"], "function", ["None"], ["def", "jpeg4py_loader", "(", "path", ")", ":", "\n", "    ", "\"\"\" Image reading using jpeg4py https://github.com/ajkxyz/jpeg4py\"\"\"", "\n", "try", ":", "\n", "        ", "return", "jpeg4py", ".", "JPEG", "(", "path", ")", ".", "decode", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'ERROR: Could not read image \"{}\"'", ".", "format", "(", "path", ")", ")", "\n", "print", "(", "e", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.image_loader.opencv_loader": [[44, 55], ["cv2.imread", "cv2.cvtColor", "print", "print"], "function", ["None"], ["", "", "def", "opencv_loader", "(", "path", ")", ":", "\n", "    ", "\"\"\" Read image using opencv's imread function and returns it in rgb format\"\"\"", "\n", "try", ":", "\n", "        ", "im", "=", "cv", ".", "imread", "(", "path", ",", "cv", ".", "IMREAD_COLOR", ")", "\n", "\n", "# convert to rgb and return", "\n", "return", "cv", ".", "cvtColor", "(", "im", ",", "cv", ".", "COLOR_BGR2RGB", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'ERROR: Could not read image \"{}\"'", ".", "format", "(", "path", ")", ")", "\n", "print", "(", "e", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.image_loader.jpeg4py_loader_w_failsafe": [[57, 71], ["jpeg4py.JPEG().decode", "jpeg4py.JPEG", "cv2.imread", "cv2.cvtColor", "print", "print"], "function", ["None"], ["", "", "def", "jpeg4py_loader_w_failsafe", "(", "path", ")", ":", "\n", "    ", "\"\"\" Image reading using jpeg4py https://github.com/ajkxyz/jpeg4py\"\"\"", "\n", "try", ":", "\n", "        ", "return", "jpeg4py", ".", "JPEG", "(", "path", ")", ".", "decode", "(", ")", "\n", "", "except", ":", "\n", "        ", "try", ":", "\n", "            ", "im", "=", "cv", ".", "imread", "(", "path", ",", "cv", ".", "IMREAD_COLOR", ")", "\n", "\n", "# convert to rgb and return", "\n", "return", "cv", ".", "cvtColor", "(", "im", ",", "cv", ".", "COLOR_BGR2RGB", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "'ERROR: Could not read image \"{}\"'", ".", "format", "(", "path", ")", ")", "\n", "print", "(", "e", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.image_loader.opencv_seg_loader": [[73, 81], ["cv2.imread", "print", "print"], "function", ["None"], ["", "", "", "def", "opencv_seg_loader", "(", "path", ")", ":", "\n", "    ", "\"\"\" Read segmentation annotation using opencv's imread function\"\"\"", "\n", "try", ":", "\n", "        ", "return", "cv", ".", "imread", "(", "path", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'ERROR: Could not read image \"{}\"'", ".", "format", "(", "path", ")", ")", "\n", "print", "(", "e", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.image_loader.imread_indexed": [[83, 90], ["PIL.Image.open", "numpy.atleast_3d"], "function", ["None"], ["", "", "def", "imread_indexed", "(", "filename", ")", ":", "\n", "    ", "\"\"\" Load indexed image with given filename. Used to read segmentation annotations.\"\"\"", "\n", "\n", "im", "=", "Image", ".", "open", "(", "filename", ")", "\n", "\n", "annotation", "=", "np", ".", "atleast_3d", "(", "im", ")", "[", "...", ",", "0", "]", "\n", "return", "annotation", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.image_loader.imwrite_indexed": [[92, 104], ["PIL.Image.fromarray", "Image.fromarray.putpalette", "Image.fromarray.save", "Exception", "color_palette.ravel", "numpy.atleast_3d"], "function", ["None"], ["", "def", "imwrite_indexed", "(", "filename", ",", "array", ",", "color_palette", "=", "None", ")", ":", "\n", "    ", "\"\"\" Save indexed image as png. Used to save segmentation annotation.\"\"\"", "\n", "\n", "if", "color_palette", "is", "None", ":", "\n", "        ", "color_palette", "=", "davis_palette", "\n", "\n", "", "if", "np", ".", "atleast_3d", "(", "array", ")", ".", "shape", "[", "2", "]", "!=", "1", ":", "\n", "        ", "raise", "Exception", "(", "\"Saving indexed PNGs requires 2D array.\"", ")", "\n", "\n", "", "im", "=", "Image", ".", "fromarray", "(", "array", ")", "\n", "im", ".", "putpalette", "(", "color_palette", ".", "ravel", "(", ")", ")", "\n", "im", ".", "save", "(", "filename", ",", "format", "=", "'PNG'", ")", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.__init__": [[24, 57], ["sum", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "datasets", ",", "p_datasets", ",", "samples_per_epoch", ",", "max_gap", ",", "\n", "num_search_frames", ",", "num_template_frames", "=", "1", ",", "processing", "=", "no_processing", ",", "frame_sample_mode", "=", "'causal'", ",", "\n", "train_cls", "=", "False", ",", "pos_prob", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            datasets - List of datasets to be used for training\n            p_datasets - List containing the probabilities by which each dataset will be sampled\n            samples_per_epoch - Number of training samples per epoch\n            max_gap - Maximum gap, in frame numbers, between the train frames and the test frames.\n            num_search_frames - Number of search frames to sample.\n            num_template_frames - Number of template frames to sample.\n            processing - An instance of Processing class which performs the necessary processing of the data.\n            frame_sample_mode - Either 'causal' or 'interval'. If 'causal', then the test frames are sampled in a causally,\n                                otherwise randomly within the interval.\n        \"\"\"", "\n", "self", ".", "datasets", "=", "datasets", "\n", "self", ".", "train_cls", "=", "train_cls", "# whether we are training classification", "\n", "self", ".", "pos_prob", "=", "pos_prob", "# probability of sampling positive class when making classification", "\n", "\n", "# If p not provided, sample uniformly from all videos", "\n", "if", "p_datasets", "is", "None", ":", "\n", "            ", "p_datasets", "=", "[", "len", "(", "d", ")", "for", "d", "in", "self", ".", "datasets", "]", "\n", "\n", "# Normalize", "\n", "", "p_total", "=", "sum", "(", "p_datasets", ")", "\n", "self", ".", "p_datasets", "=", "[", "x", "/", "p_total", "for", "x", "in", "p_datasets", "]", "\n", "\n", "self", ".", "samples_per_epoch", "=", "samples_per_epoch", "\n", "self", ".", "max_gap", "=", "max_gap", "\n", "self", ".", "num_search_frames", "=", "num_search_frames", "\n", "self", ".", "num_template_frames", "=", "num_template_frames", "\n", "self", ".", "processing", "=", "processing", "\n", "self", ".", "frame_sample_mode", "=", "frame_sample_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.__len__": [[58, 60], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "samples_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler._sample_visible_ids": [[61, 99], ["random.choices", "len", "min", "list", "len", "len", "filter", "range", "len", "range", "range", "range", "max", "min", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "def", "_sample_visible_ids", "(", "self", ",", "visible", ",", "num_ids", "=", "1", ",", "avoid_id", "=", "None", ",", "min_id", "=", "None", ",", "max_id", "=", "None", ",", "\n", "allow_invisible", "=", "False", ",", "force_invisible", "=", "False", ")", ":", "\n", "        ", "\"\"\" Samples num_ids frames between min_id and max_id for which target is visible\n\n        args:\n            visible - 1d Tensor indicating whether target is visible for each frame\n            num_ids - number of frames to be samples\n            min_id - Minimum allowed frame number\n            max_id - Maximum allowed frame number\n\n        returns:\n            list - List of sampled frame numbers. None if not sufficient visible frames could be found.\n        \"\"\"", "\n", "if", "num_ids", "==", "0", ":", "\n", "            ", "return", "[", "]", "\n", "", "if", "min_id", "is", "None", "or", "min_id", "<", "0", ":", "\n", "            ", "min_id", "=", "0", "\n", "", "if", "max_id", "is", "None", "or", "max_id", ">", "len", "(", "visible", ")", ":", "\n", "            ", "max_id", "=", "len", "(", "visible", ")", "\n", "# get valid ids", "\n", "", "if", "force_invisible", ":", "\n", "            ", "valid_ids", "=", "[", "i", "for", "i", "in", "range", "(", "min_id", ",", "max_id", ")", "if", "not", "visible", "[", "i", "]", "]", "\n", "", "else", ":", "\n", "            ", "if", "allow_invisible", ":", "\n", "                ", "valid_ids", "=", "[", "i", "for", "i", "in", "range", "(", "min_id", ",", "max_id", ")", "]", "\n", "", "else", ":", "\n", "                ", "valid_ids", "=", "[", "i", "for", "i", "in", "range", "(", "min_id", ",", "max_id", ")", "if", "visible", "[", "i", "]", "]", "\n", "\n", "", "", "if", "avoid_id", "is", "not", "None", ":", "\n", "            ", "avoid_len", "=", "min", "(", "100", ",", "len", "(", "valid_ids", ")", "//", "3", ")", "\n", "avoid_ids", "=", "[", "i", "for", "i", "in", "range", "(", "max", "(", "0", ",", "avoid_id", "-", "avoid_len", ")", ",", "min", "(", "len", "(", "valid_ids", ")", ",", "avoid_id", "+", "avoid_len", ")", ")", "]", "\n", "valid_ids", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "not", "in", "avoid_ids", ",", "valid_ids", ")", ")", "\n", "\n", "# No visible ids", "\n", "", "if", "len", "(", "valid_ids", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "random", ".", "choices", "(", "valid_ids", ",", "k", "=", "num_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.__getitem__": [[100, 105], ["sampler.TrackingSampler.getitem_cls", "sampler.TrackingSampler.getitem"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.getitem_cls", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.getitem"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "train_cls", ":", "\n", "            ", "return", "self", ".", "getitem_cls", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "getitem", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.getitem": [[106, 184], ["dataset.is_video_sequence", "sampler.TrackingSampler.sample_seq_from_dataset", "random.choices", "dataset.get_frames", "dataset.get_frames", "lib.utils.TensorDict", "sampler.TrackingSampler.processing", "sampler.TrackingSampler._sample_visible_ids", "sampler.TrackingSampler._sample_visible_ids", "sampler.TrackingSampler._sample_visible_ids", "sampler.TrackingSampler.get_frame_ids_trident", "dataset.get_name", "meta_obj_test.get", "torch.zeros", "torch.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.is_video_sequence", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.sample_seq_from_dataset", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_frames", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_frames", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler._sample_visible_ids", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler._sample_visible_ids", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler._sample_visible_ids", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.get_frame_ids_trident", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_name", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get"], ["", "", "def", "getitem", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns:\n            TensorDict - dict containing all the data blocks\n        \"\"\"", "\n", "valid", "=", "False", "\n", "while", "not", "valid", ":", "\n", "# Select a dataset", "\n", "            ", "dataset", "=", "random", ".", "choices", "(", "self", ".", "datasets", ",", "self", ".", "p_datasets", ")", "[", "0", "]", "\n", "# dataset = self.datasets[1]", "\n", "\n", "is_video_dataset", "=", "dataset", ".", "is_video_sequence", "(", ")", "\n", "\n", "# sample a sequence from the given dataset", "\n", "seq_id", ",", "visible", ",", "seq_info_dict", "=", "self", ".", "sample_seq_from_dataset", "(", "dataset", ",", "is_video_dataset", ")", "\n", "\n", "if", "is_video_dataset", ":", "\n", "                ", "template_frame_ids", "=", "None", "\n", "search_frame_ids", "=", "None", "\n", "gap_increase", "=", "0", "\n", "\n", "if", "self", ".", "frame_sample_mode", "==", "'causal'", ":", "\n", "# Sample test and train frames in a causal manner, i.e. search_frame_ids > template_frame_ids", "\n", "                    ", "while", "search_frame_ids", "is", "None", ":", "\n", "                        ", "base_frame_id", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "num_ids", "=", "1", ",", "\n", "min_id", "=", "self", ".", "num_template_frames", "-", "1", ",", "\n", "max_id", "=", "len", "(", "visible", ")", "-", "self", ".", "num_search_frames", ")", "\n", "prev_frame_ids", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "num_ids", "=", "self", ".", "num_template_frames", "-", "1", ",", "\n", "min_id", "=", "base_frame_id", "[", "0", "]", "-", "self", ".", "max_gap", "-", "gap_increase", ",", "\n", "max_id", "=", "base_frame_id", "[", "0", "]", ")", "\n", "if", "prev_frame_ids", "is", "None", ":", "\n", "                            ", "gap_increase", "+=", "5", "\n", "continue", "\n", "", "template_frame_ids", "=", "base_frame_id", "+", "prev_frame_ids", "\n", "search_frame_ids", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "min_id", "=", "template_frame_ids", "[", "0", "]", "+", "1", ",", "\n", "max_id", "=", "template_frame_ids", "[", "\n", "0", "]", "+", "self", ".", "max_gap", "+", "gap_increase", ",", "\n", "num_ids", "=", "self", ".", "num_search_frames", ")", "\n", "# Increase gap until a frame is found", "\n", "gap_increase", "+=", "5", "\n", "\n", "", "", "elif", "self", ".", "frame_sample_mode", "==", "\"trident\"", "or", "self", ".", "frame_sample_mode", "==", "\"trident_pro\"", ":", "\n", "                    ", "template_frame_ids", ",", "search_frame_ids", "=", "self", ".", "get_frame_ids_trident", "(", "visible", ")", "\n", "", "", "else", ":", "\n", "# In case of image dataset, just repeat the image to generate synthetic video", "\n", "                ", "template_frame_ids", "=", "[", "1", "]", "*", "self", ".", "num_template_frames", "\n", "search_frame_ids", "=", "[", "1", "]", "*", "self", ".", "num_search_frames", "\n", "", "try", ":", "\n", "                ", "template_frames", ",", "template_anno", ",", "meta_obj_train", "=", "dataset", ".", "get_frames", "(", "seq_id", ",", "template_frame_ids", ",", "\n", "seq_info_dict", ")", "\n", "search_frames", ",", "search_anno", ",", "meta_obj_test", "=", "dataset", ".", "get_frames", "(", "seq_id", ",", "search_frame_ids", ",", "seq_info_dict", ")", "\n", "\n", "H", ",", "W", ",", "_", "=", "template_frames", "[", "0", "]", ".", "shape", "\n", "template_masks", "=", "template_anno", "[", "'mask'", "]", "if", "'mask'", "in", "template_anno", "else", "[", "torch", ".", "zeros", "(", "\n", "(", "H", ",", "W", ")", ")", "]", "*", "self", ".", "num_template_frames", "\n", "search_masks", "=", "search_anno", "[", "'mask'", "]", "if", "'mask'", "in", "search_anno", "else", "[", "torch", ".", "zeros", "(", "\n", "(", "H", ",", "W", ")", ")", "]", "*", "self", ".", "num_search_frames", "\n", "\n", "data", "=", "TensorDict", "(", "{", "'template_images'", ":", "template_frames", ",", "\n", "'template_anno'", ":", "template_anno", "[", "'bbox'", "]", ",", "\n", "'template_masks'", ":", "template_masks", ",", "\n", "'search_images'", ":", "search_frames", ",", "\n", "'search_anno'", ":", "search_anno", "[", "'bbox'", "]", ",", "\n", "'search_masks'", ":", "search_masks", ",", "\n", "'dataset'", ":", "dataset", ".", "get_name", "(", ")", ",", "\n", "'test_class'", ":", "meta_obj_test", ".", "get", "(", "'object_class_name'", ")", "}", ")", "\n", "# make data augmentation", "\n", "# draw_image(data['search_images'][0])", "\n", "# draw_image(search_frames[0],search_anno['bbox'][0].cpu().numpy())", "\n", "data", "=", "self", ".", "processing", "(", "data", ")", "\n", "# draw_image(data['search_images'][0, :].permute(1, 2, 0).detach().cpu().numpy() * 255 + 128)", "\n", "\n", "# check whether data is valid", "\n", "valid", "=", "data", "[", "'valid'", "]", "\n", "", "except", ":", "\n", "                ", "valid", "=", "False", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.getitem_cls": [[185, 265], ["dataset.is_video_sequence", "sampler.TrackingSampler.sample_seq_from_dataset", "random.choices", "sampler.TrackingSampler.get_frame_ids_trident", "dataset.get_frames", "lib.utils.TensorDict", "sampler.TrackingSampler.processing", "random.random", "torch.ones", "dataset.get_frames", "torch.zeros", "sampler.TrackingSampler._sample_visible_ids", "sampler.TrackingSampler.get_one_search", "dataset.get_name", "meta_obj_test.get", "torch.zeros", "sampler.TrackingSampler.get_one_search", "dataset.get_frames", "torch.zeros", "sampler.TrackingSampler.get_center_box", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.is_video_sequence", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.sample_seq_from_dataset", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.get_frame_ids_trident", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_frames", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_frames", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler._sample_visible_ids", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.get_one_search", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_name", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.data.Sequence.get", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.get_one_search", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_frames", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.get_center_box"], ["", "def", "getitem_cls", "(", "self", ")", ":", "\n", "# get data for classification", "\n", "        ", "\"\"\"\n        args:\n            index (int): Index (Ignored since we sample randomly)\n            aux (bool): whether the current data is for auxiliary use (e.g. copy-and-paste)\n\n        returns:\n            TensorDict - dict containing all the data blocks\n        \"\"\"", "\n", "valid", "=", "False", "\n", "label", "=", "None", "\n", "while", "not", "valid", ":", "\n", "# Select a dataset", "\n", "            ", "dataset", "=", "random", ".", "choices", "(", "self", ".", "datasets", ",", "self", ".", "p_datasets", ")", "[", "0", "]", "\n", "\n", "is_video_dataset", "=", "dataset", ".", "is_video_sequence", "(", ")", "\n", "\n", "# sample a sequence from the given dataset", "\n", "seq_id", ",", "visible", ",", "seq_info_dict", "=", "self", ".", "sample_seq_from_dataset", "(", "dataset", ",", "is_video_dataset", ")", "\n", "# sample template and search frame ids", "\n", "if", "is_video_dataset", ":", "\n", "                ", "assert", "self", ".", "frame_sample_mode", "==", "\"trident\"", "or", "self", ".", "frame_sample_mode", "==", "\"trident_pro\"", "\n", "template_frame_ids", ",", "search_frame_ids", "=", "self", ".", "get_frame_ids_trident", "(", "visible", ")", "\n", "", "else", ":", "\n", "# In case of image dataset, just repeat the image to generate synthetic video", "\n", "                ", "template_frame_ids", "=", "[", "1", "]", "*", "self", ".", "num_template_frames", "\n", "search_frame_ids", "=", "[", "1", "]", "*", "self", ".", "num_search_frames", "\n", "", "try", ":", "\n", "# \"try\" is used to handle trackingnet data failure", "\n", "# get images and bounding boxes (for templates)", "\n", "                ", "template_frames", ",", "template_anno", ",", "meta_obj_train", "=", "dataset", ".", "get_frames", "(", "seq_id", ",", "template_frame_ids", ",", "\n", "seq_info_dict", ")", "\n", "H", ",", "W", ",", "_", "=", "template_frames", "[", "0", "]", ".", "shape", "\n", "template_masks", "=", "template_anno", "[", "'mask'", "]", "if", "'mask'", "in", "template_anno", "else", "[", "torch", ".", "zeros", "(", "\n", "(", "H", ",", "W", ")", ")", "]", "*", "self", ".", "num_template_frames", "\n", "# get images and bounding boxes (for searches)", "\n", "# positive samples", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "pos_prob", ":", "\n", "                    ", "label", "=", "torch", ".", "ones", "(", "1", ",", ")", "\n", "search_frames", ",", "search_anno", ",", "meta_obj_test", "=", "dataset", ".", "get_frames", "(", "seq_id", ",", "search_frame_ids", ",", "\n", "seq_info_dict", ")", "\n", "search_masks", "=", "search_anno", "[", "'mask'", "]", "if", "'mask'", "in", "search_anno", "else", "[", "torch", ".", "zeros", "(", "\n", "(", "H", ",", "W", ")", ")", "]", "*", "self", ".", "num_search_frames", "\n", "# negative samples", "\n", "", "else", ":", "\n", "                    ", "label", "=", "torch", ".", "zeros", "(", "1", ",", ")", "\n", "if", "is_video_dataset", ":", "\n", "                        ", "search_frame_ids", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "num_ids", "=", "1", ",", "force_invisible", "=", "True", ")", "\n", "if", "search_frame_ids", "is", "None", ":", "\n", "                            ", "search_frames", ",", "search_anno", ",", "meta_obj_test", "=", "self", ".", "get_one_search", "(", ")", "\n", "", "else", ":", "\n", "                            ", "search_frames", ",", "search_anno", ",", "meta_obj_test", "=", "dataset", ".", "get_frames", "(", "seq_id", ",", "search_frame_ids", ",", "\n", "seq_info_dict", ")", "\n", "search_anno", "[", "\"bbox\"", "]", "=", "[", "self", ".", "get_center_box", "(", "H", ",", "W", ")", "]", "\n", "", "", "else", ":", "\n", "                        ", "search_frames", ",", "search_anno", ",", "meta_obj_test", "=", "self", ".", "get_one_search", "(", ")", "\n", "", "H", ",", "W", ",", "_", "=", "search_frames", "[", "0", "]", ".", "shape", "\n", "search_masks", "=", "search_anno", "[", "'mask'", "]", "if", "'mask'", "in", "search_anno", "else", "[", "torch", ".", "zeros", "(", "\n", "(", "H", ",", "W", ")", ")", "]", "*", "self", ".", "num_search_frames", "\n", "\n", "", "data", "=", "TensorDict", "(", "{", "'template_images'", ":", "template_frames", ",", "\n", "'template_anno'", ":", "template_anno", "[", "'bbox'", "]", ",", "\n", "'template_masks'", ":", "template_masks", ",", "\n", "'search_images'", ":", "search_frames", ",", "\n", "'search_anno'", ":", "search_anno", "[", "'bbox'", "]", ",", "\n", "'search_masks'", ":", "search_masks", ",", "\n", "'dataset'", ":", "dataset", ".", "get_name", "(", ")", ",", "\n", "'test_class'", ":", "meta_obj_test", ".", "get", "(", "'object_class_name'", ")", "}", ")", "\n", "\n", "# make data augmentation", "\n", "data", "=", "self", ".", "processing", "(", "data", ")", "\n", "# add classification label", "\n", "data", "[", "\"label\"", "]", "=", "label", "\n", "# check whether data is valid", "\n", "valid", "=", "data", "[", "'valid'", "]", "\n", "", "except", ":", "\n", "                ", "valid", "=", "False", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.get_center_box": [[266, 269], ["torch.tensor", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "get_center_box", "(", "self", ",", "H", ",", "W", ",", "ratio", "=", "1", "/", "8", ")", ":", "\n", "        ", "cx", ",", "cy", ",", "w", ",", "h", "=", "W", "/", "2", ",", "H", "/", "2", ",", "W", "*", "ratio", ",", "H", "*", "ratio", "\n", "return", "torch", ".", "tensor", "(", "[", "int", "(", "cx", "-", "w", "/", "2", ")", ",", "int", "(", "cy", "-", "h", "/", "2", ")", ",", "int", "(", "w", ")", ",", "int", "(", "h", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.sample_seq_from_dataset": [[270, 286], ["random.randint", "dataset.get_sequence_info", "dataset.get_num_sequences", "visible.type().sum().item", "len", "visible.type().sum", "visible.type"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_sequence_info", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_num_sequences"], ["", "def", "sample_seq_from_dataset", "(", "self", ",", "dataset", ",", "is_video_dataset", ")", ":", "\n", "\n", "# Sample a sequence with enough visible frames", "\n", "        ", "enough_visible_frames", "=", "False", "\n", "while", "not", "enough_visible_frames", ":", "\n", "# Sample a sequence", "\n", "            ", "seq_id", "=", "random", ".", "randint", "(", "0", ",", "dataset", ".", "get_num_sequences", "(", ")", "-", "1", ")", "\n", "# Sample frames", "\n", "seq_info_dict", "=", "dataset", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "visible", "=", "seq_info_dict", "[", "'visible'", "]", "\n", "\n", "enough_visible_frames", "=", "visible", ".", "type", "(", "torch", ".", "int64", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ">", "2", "*", "(", "\n", "self", ".", "num_search_frames", "+", "self", ".", "num_template_frames", ")", "and", "len", "(", "visible", ")", ">=", "20", "\n", "\n", "enough_visible_frames", "=", "enough_visible_frames", "or", "not", "is_video_dataset", "\n", "", "return", "seq_id", ",", "visible", ",", "seq_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.get_one_search": [[287, 303], ["dataset.is_video_sequence", "sampler.TrackingSampler.sample_seq_from_dataset", "dataset.get_frames", "random.choices", "sampler.TrackingSampler._sample_visible_ids"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.is_video_sequence", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.sample_seq_from_dataset", "home.repos.pwc.inspect_result.skyesong38_cswintt.dataset.coco_seq_lmdb.MSCOCOSeq_lmdb.get_frames", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler._sample_visible_ids"], ["", "def", "get_one_search", "(", "self", ")", ":", "\n", "# Select a dataset", "\n", "        ", "dataset", "=", "random", ".", "choices", "(", "self", ".", "datasets", ",", "self", ".", "p_datasets", ")", "[", "0", "]", "\n", "\n", "is_video_dataset", "=", "dataset", ".", "is_video_sequence", "(", ")", "\n", "# sample a sequence", "\n", "seq_id", ",", "visible", ",", "seq_info_dict", "=", "self", ".", "sample_seq_from_dataset", "(", "dataset", ",", "is_video_dataset", ")", "\n", "# sample a frame", "\n", "if", "is_video_dataset", ":", "\n", "            ", "search_frame_ids", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "num_ids", "=", "1", ",", "allow_invisible", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "search_frame_ids", "=", "[", "1", "]", "\n", "# get the image, bounding box and other info", "\n", "", "search_frames", ",", "search_anno", ",", "meta_obj_test", "=", "dataset", ".", "get_frames", "(", "seq_id", ",", "search_frame_ids", ",", "seq_info_dict", ")", "\n", "\n", "return", "search_frames", ",", "search_anno", ",", "meta_obj_test", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler.get_frame_ids_trident": [[304, 331], ["sampler.TrackingSampler._sample_visible_ids", "sampler.TrackingSampler._sample_visible_ids", "len", "sampler.TrackingSampler._sample_visible_ids", "sampler.TrackingSampler._sample_visible_ids"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler._sample_visible_ids", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler._sample_visible_ids", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler._sample_visible_ids", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.TrackingSampler._sample_visible_ids"], ["", "def", "get_frame_ids_trident", "(", "self", ",", "visible", ")", ":", "\n", "# get template and search ids in a 'trident' manner", "\n", "        ", "template_frame_ids_extra", "=", "[", "]", "\n", "while", "None", "in", "template_frame_ids_extra", "or", "len", "(", "template_frame_ids_extra", ")", "==", "0", ":", "\n", "            ", "template_frame_ids_extra", "=", "[", "]", "\n", "# first randomly sample two frames from a video", "\n", "search_frame_ids", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "num_ids", "=", "1", ")", "# the search region id", "\n", "template_frame_id1", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "avoid_id", "=", "search_frame_ids", "[", "0", "]", ",", "\n", "num_ids", "=", "1", ")", "# the initial template id", "\n", "# get the dynamic template id", "\n", "for", "max_gap", "in", "self", ".", "max_gap", ":", "\n", "                ", "if", "template_frame_id1", "[", "0", "]", ">=", "search_frame_ids", "[", "0", "]", ":", "\n", "                    ", "min_id", ",", "max_id", "=", "search_frame_ids", "[", "0", "]", ",", "search_frame_ids", "[", "0", "]", "+", "max_gap", "\n", "", "else", ":", "\n", "                    ", "min_id", ",", "max_id", "=", "search_frame_ids", "[", "0", "]", "-", "max_gap", ",", "search_frame_ids", "[", "0", "]", "\n", "", "if", "self", ".", "frame_sample_mode", "==", "\"trident_pro\"", ":", "\n", "                    ", "f_id", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "num_ids", "=", "1", ",", "min_id", "=", "min_id", ",", "max_id", "=", "max_id", ",", "\n", "allow_invisible", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "f_id", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "num_ids", "=", "1", ",", "min_id", "=", "min_id", ",", "max_id", "=", "max_id", ")", "\n", "", "if", "f_id", "is", "None", ":", "\n", "                    ", "template_frame_ids_extra", "+=", "[", "None", "]", "\n", "", "else", ":", "\n", "                    ", "template_frame_ids_extra", "+=", "f_id", "\n", "\n", "", "", "", "template_frame_ids", "=", "template_frame_id1", "+", "template_frame_ids_extra", "\n", "return", "template_frame_ids", ",", "search_frame_ids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.sampler.no_processing": [[8, 10], ["None"], "function", ["None"], ["def", "no_processing", "(", "data", ")", ":", "\n", "    ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing_utils.sample_target": [[12, 80], ["math.ceil", "round", "round", "max", "max", "max", "max", "cv2.copyMakeBorder", "numpy.ones", "isinstance", "target_bb.tolist", "Exception", "torch.pad", "cv2.resize", "cv2.resize().astype", "math.sqrt", "torch.interpolate", "cv.resize().astype.astype", "cv2.resize", "cv.resize().astype.astype"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.interpolate"], ["def", "sample_target", "(", "im", ",", "target_bb", ",", "search_area_factor", ",", "output_sz", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "    ", "\"\"\" Extracts a square crop centered at target_bb box, of area search_area_factor^2 times target_bb area\n\n    args:\n        im - cv image\n        target_bb - target box [x, y, w, h]\n        search_area_factor - Ratio of crop size to target size\n        output_sz - (float) Size to which the extracted crop is resized (always square). If None, no resizing is done.\n\n    returns:\n        cv image - extracted crop\n        float - the factor by which the crop has been resized to make the crop size equal output_size\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "target_bb", ",", "list", ")", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "target_bb", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "target_bb", "\n", "# Crop image", "\n", "", "crop_sz", "=", "math", ".", "ceil", "(", "math", ".", "sqrt", "(", "w", "*", "h", ")", "*", "search_area_factor", ")", "\n", "\n", "if", "crop_sz", "<", "1", ":", "\n", "        ", "raise", "Exception", "(", "'Too small bounding box.'", ")", "\n", "\n", "", "x1", "=", "round", "(", "x", "+", "0.5", "*", "w", "-", "crop_sz", "*", "0.5", ")", "\n", "x2", "=", "x1", "+", "crop_sz", "\n", "\n", "y1", "=", "round", "(", "y", "+", "0.5", "*", "h", "-", "crop_sz", "*", "0.5", ")", "\n", "y2", "=", "y1", "+", "crop_sz", "\n", "\n", "x1_pad", "=", "max", "(", "0", ",", "-", "x1", ")", "\n", "x2_pad", "=", "max", "(", "x2", "-", "im", ".", "shape", "[", "1", "]", "+", "1", ",", "0", ")", "\n", "\n", "y1_pad", "=", "max", "(", "0", ",", "-", "y1", ")", "\n", "y2_pad", "=", "max", "(", "y2", "-", "im", ".", "shape", "[", "0", "]", "+", "1", ",", "0", ")", "\n", "\n", "# Crop target", "\n", "im_crop", "=", "im", "[", "y1", "+", "y1_pad", ":", "y2", "-", "y2_pad", ",", "x1", "+", "x1_pad", ":", "x2", "-", "x2_pad", ",", ":", "]", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask_crop", "=", "mask", "[", "y1", "+", "y1_pad", ":", "y2", "-", "y2_pad", ",", "x1", "+", "x1_pad", ":", "x2", "-", "x2_pad", "]", "\n", "\n", "# Pad", "\n", "", "im_crop_padded", "=", "cv", ".", "copyMakeBorder", "(", "im_crop", ",", "y1_pad", ",", "y2_pad", ",", "x1_pad", ",", "x2_pad", ",", "cv", ".", "BORDER_CONSTANT", ")", "\n", "# deal with attention mask", "\n", "H", ",", "W", ",", "_", "=", "im_crop_padded", ".", "shape", "\n", "att_mask", "=", "np", ".", "ones", "(", "(", "H", ",", "W", ")", ")", "\n", "end_x", ",", "end_y", "=", "-", "x2_pad", ",", "-", "y2_pad", "\n", "if", "y2_pad", "==", "0", ":", "\n", "        ", "end_y", "=", "None", "\n", "", "if", "x2_pad", "==", "0", ":", "\n", "        ", "end_x", "=", "None", "\n", "", "att_mask", "[", "y1_pad", ":", "end_y", ",", "x1_pad", ":", "end_x", "]", "=", "0", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask_crop_padded", "=", "F", ".", "pad", "(", "mask_crop", ",", "pad", "=", "(", "x1_pad", ",", "x2_pad", ",", "y1_pad", ",", "y2_pad", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "\n", "", "if", "output_sz", "is", "not", "None", ":", "\n", "        ", "resize_factor", "=", "output_sz", "/", "crop_sz", "\n", "im_crop_padded", "=", "cv", ".", "resize", "(", "im_crop_padded", ",", "(", "output_sz", ",", "output_sz", ")", ")", "\n", "att_mask", "=", "cv", ".", "resize", "(", "att_mask", ",", "(", "output_sz", ",", "output_sz", ")", ")", ".", "astype", "(", "np", ".", "bool_", ")", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "return", "im_crop_padded", ",", "resize_factor", ",", "att_mask", "\n", "", "mask_crop_padded", "=", "F", ".", "interpolate", "(", "mask_crop_padded", "[", "None", ",", "None", "]", ",", "(", "output_sz", ",", "output_sz", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "0", ",", "0", "]", "\n", "return", "im_crop_padded", ",", "resize_factor", ",", "att_mask", ",", "mask_crop_padded", "\n", "\n", "", "else", ":", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "return", "im_crop_padded", ",", "att_mask", ".", "astype", "(", "np", ".", "bool_", ")", ",", "1.0", "\n", "", "return", "im_crop_padded", ",", "1.0", ",", "att_mask", ".", "astype", "(", "np", ".", "bool_", ")", ",", "mask_crop_padded", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing_utils.transform_image_to_crop": [[82, 106], ["torch.cat", "torch.cat"], "function", ["None"], ["", "", "def", "transform_image_to_crop", "(", "box_in", ":", "torch", ".", "Tensor", ",", "box_extract", ":", "torch", ".", "Tensor", ",", "resize_factor", ":", "float", ",", "\n", "crop_sz", ":", "torch", ".", "Tensor", ",", "normalize", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\" Transform the box co-ordinates from the original image co-ordinates to the co-ordinates of the cropped image\n    args:\n        box_in - the box for which the co-ordinates are to be transformed\n        box_extract - the box about which the image crop has been extracted.\n        resize_factor - the ratio between the original image scale and the scale of the image crop\n        crop_sz - size of the cropped image\n\n    returns:\n        torch.Tensor - transformed co-ordinates of box_in\n    \"\"\"", "\n", "box_extract_center", "=", "box_extract", "[", "0", ":", "2", "]", "+", "0.5", "*", "box_extract", "[", "2", ":", "4", "]", "\n", "\n", "box_in_center", "=", "box_in", "[", "0", ":", "2", "]", "+", "0.5", "*", "box_in", "[", "2", ":", "4", "]", "\n", "\n", "box_out_center", "=", "(", "crop_sz", "-", "1", ")", "/", "2", "+", "(", "box_in_center", "-", "box_extract_center", ")", "*", "resize_factor", "\n", "box_out_wh", "=", "box_in", "[", "2", ":", "4", "]", "*", "resize_factor", "\n", "\n", "box_out", "=", "torch", ".", "cat", "(", "(", "box_out_center", "-", "0.5", "*", "box_out_wh", ",", "box_out_wh", ")", ")", "\n", "if", "normalize", ":", "\n", "        ", "return", "box_out", "/", "crop_sz", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "return", "box_out", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing_utils.jittered_center_crop": [[108, 144], ["torch.Tensor", "torch.Tensor", "zip", "zip", "processing_utils.transform_image_to_crop", "processing_utils.sample_target", "processing_utils.sample_target", "zip", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing_utils.transform_image_to_crop", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing_utils.sample_target", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing_utils.sample_target"], ["", "", "def", "jittered_center_crop", "(", "frames", ",", "box_extract", ",", "box_gt", ",", "search_area_factor", ",", "output_sz", ",", "masks", "=", "None", ")", ":", "\n", "    ", "\"\"\" For each frame in frames, extracts a square crop centered at box_extract, of area search_area_factor^2\n    times box_extract area. The extracted crops are then resized to output_sz. Further, the co-ordinates of the box\n    box_gt are transformed to the image crop co-ordinates\n\n    args:\n        frames - list of frames\n        box_extract - list of boxes of same length as frames. The crops are extracted using anno_extract\n        box_gt - list of boxes of same length as frames. The co-ordinates of these boxes are transformed from\n                    image co-ordinates to the crop co-ordinates\n        search_area_factor - The area of the extracted crop is search_area_factor^2 times box_extract area\n        output_sz - The size to which the extracted crops are resized\n\n    returns:\n        list - list of image crops\n        list - box_gt location in the crop co-ordinates\n        \"\"\"", "\n", "\n", "if", "masks", "is", "None", ":", "\n", "        ", "crops_resize_factors", "=", "[", "sample_target", "(", "f", ",", "a", ",", "search_area_factor", ",", "output_sz", ")", "\n", "for", "f", ",", "a", "in", "zip", "(", "frames", ",", "box_extract", ")", "]", "\n", "frames_crop", ",", "resize_factors", ",", "att_mask", "=", "zip", "(", "*", "crops_resize_factors", ")", "\n", "masks_crop", "=", "None", "\n", "", "else", ":", "\n", "        ", "crops_resize_factors", "=", "[", "sample_target", "(", "f", ",", "a", ",", "search_area_factor", ",", "output_sz", ",", "m", ")", "\n", "for", "f", ",", "a", ",", "m", "in", "zip", "(", "frames", ",", "box_extract", ",", "masks", ")", "]", "\n", "frames_crop", ",", "resize_factors", ",", "att_mask", ",", "masks_crop", "=", "zip", "(", "*", "crops_resize_factors", ")", "\n", "# frames_crop: tuple of ndarray (128,128,3), att_mask: tuple of ndarray (128,128)", "\n", "", "crop_sz", "=", "torch", ".", "Tensor", "(", "[", "output_sz", ",", "output_sz", "]", ")", "\n", "\n", "# find the bb location in the crop", "\n", "'''Note that here we use normalized coord'''", "\n", "box_crop", "=", "[", "transform_image_to_crop", "(", "a_gt", ",", "a_ex", ",", "rf", ",", "crop_sz", ",", "normalize", "=", "True", ")", "\n", "for", "a_gt", ",", "a_ex", ",", "rf", "in", "zip", "(", "box_gt", ",", "box_extract", ",", "resize_factors", ")", "]", "# (x1,y1,w,h) list of tensors", "\n", "\n", "return", "frames_crop", ",", "box_crop", ",", "att_mask", ",", "masks_crop", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.processing_utils.transform_box_to_crop": [[146, 168], ["box.clone"], "function", ["None"], ["", "def", "transform_box_to_crop", "(", "box", ":", "torch", ".", "Tensor", ",", "crop_box", ":", "torch", ".", "Tensor", ",", "crop_sz", ":", "torch", ".", "Tensor", ",", "normalize", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\" Transform the box co-ordinates from the original image co-ordinates to the co-ordinates of the cropped image\n    args:\n        box - the box for which the co-ordinates are to be transformed\n        crop_box - bounding box defining the crop in the original image\n        crop_sz - size of the cropped image\n\n    returns:\n        torch.Tensor - transformed co-ordinates of box_in\n    \"\"\"", "\n", "\n", "box_out", "=", "box", ".", "clone", "(", ")", "\n", "box_out", "[", ":", "2", "]", "-=", "crop_box", "[", ":", "2", "]", "\n", "\n", "scale_factor", "=", "crop_sz", "/", "crop_box", "[", "2", ":", "]", "\n", "\n", "box_out", "[", ":", "2", "]", "*=", "scale_factor", "\n", "box_out", "[", "2", ":", "]", "*=", "scale_factor", "\n", "if", "normalize", ":", "\n", "        ", "return", "box_out", "/", "crop_sz", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "return", "box_out", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.bounding_box_utils.rect_to_rel": [[4, 19], ["torch.log", "torch.cat"], "function", ["None"], ["def", "rect_to_rel", "(", "bb", ",", "sz_norm", "=", "None", ")", ":", "\n", "    ", "\"\"\"Convert standard rectangular parametrization of the bounding box [x, y, w, h]\n    to relative parametrization [cx/sw, cy/sh, log(w), log(h)], where [cx, cy] is the center coordinate.\n    args:\n        bb  -  N x 4 tensor of boxes.\n        sz_norm  -  [N] x 2 tensor of value of [sw, sh] (optional). sw=w and sh=h if not given.\n    \"\"\"", "\n", "\n", "c", "=", "bb", "[", "...", ",", ":", "2", "]", "+", "0.5", "*", "bb", "[", "...", ",", "2", ":", "]", "\n", "if", "sz_norm", "is", "None", ":", "\n", "        ", "c_rel", "=", "c", "/", "bb", "[", "...", ",", "2", ":", "]", "\n", "", "else", ":", "\n", "        ", "c_rel", "=", "c", "/", "sz_norm", "\n", "", "sz_rel", "=", "torch", ".", "log", "(", "bb", "[", "...", ",", "2", ":", "]", ")", "\n", "return", "torch", ".", "cat", "(", "(", "c_rel", ",", "sz_rel", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.bounding_box_utils.rel_to_rect": [[21, 31], ["torch.exp", "torch.cat"], "function", ["None"], ["", "def", "rel_to_rect", "(", "bb", ",", "sz_norm", "=", "None", ")", ":", "\n", "    ", "\"\"\"Inverts the effect of rect_to_rel. See above.\"\"\"", "\n", "\n", "sz", "=", "torch", ".", "exp", "(", "bb", "[", "...", ",", "2", ":", "]", ")", "\n", "if", "sz_norm", "is", "None", ":", "\n", "        ", "c", "=", "bb", "[", "...", ",", ":", "2", "]", "*", "sz", "\n", "", "else", ":", "\n", "        ", "c", "=", "bb", "[", "...", ",", ":", "2", "]", "*", "sz_norm", "\n", "", "tl", "=", "c", "-", "0.5", "*", "sz", "\n", "return", "torch", ".", "cat", "(", "(", "tl", ",", "sz", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.bounding_box_utils.masks_to_bboxes": [[33, 68], ["mask.reshape.reshape", "torch.tensor", "bboxes.reshape.reshape", "ValueError", "m.sum().nonzero", "m.sum().nonzero", "bboxes.reshape.append", "torch.cat", "torch.cat", "m.sum", "m.sum", "m.sum().nonzero.min", "m.sum().nonzero.min", "m.sum().nonzero.max", "m.sum().nonzero.max", "len", "len"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "def", "masks_to_bboxes", "(", "mask", ",", "fmt", "=", "'c'", ")", ":", "\n", "\n", "    ", "\"\"\" Convert a mask tensor to one or more bounding boxes.\n    Note: This function is a bit new, make sure it does what it says.  /Andreas\n    :param mask: Tensor of masks, shape = (..., H, W)\n    :param fmt: bbox layout. 'c' => \"center + size\" or (x_center, y_center, width, height)\n                             't' => \"top left + size\" or (x_left, y_top, width, height)\n                             'v' => \"vertices\" or (x_left, y_top, x_right, y_bottom)\n    :return: tensor containing a batch of bounding boxes, shape = (..., 4)\n    \"\"\"", "\n", "batch_shape", "=", "mask", ".", "shape", "[", ":", "-", "2", "]", "\n", "mask", "=", "mask", ".", "reshape", "(", "(", "-", "1", ",", "*", "mask", ".", "shape", "[", "-", "2", ":", "]", ")", ")", "\n", "bboxes", "=", "[", "]", "\n", "\n", "for", "m", "in", "mask", ":", "\n", "        ", "mx", "=", "m", ".", "sum", "(", "dim", "=", "-", "2", ")", ".", "nonzero", "(", ")", "\n", "my", "=", "m", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "nonzero", "(", ")", "\n", "bb", "=", "[", "mx", ".", "min", "(", ")", ",", "my", ".", "min", "(", ")", ",", "mx", ".", "max", "(", ")", ",", "my", ".", "max", "(", ")", "]", "if", "(", "len", "(", "mx", ")", ">", "0", "and", "len", "(", "my", ")", ">", "0", ")", "else", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "bboxes", ".", "append", "(", "bb", ")", "\n", "\n", "", "bboxes", "=", "torch", ".", "tensor", "(", "bboxes", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "mask", ".", "device", ")", "\n", "bboxes", "=", "bboxes", ".", "reshape", "(", "batch_shape", "+", "(", "4", ",", ")", ")", "\n", "\n", "if", "fmt", "==", "'v'", ":", "\n", "        ", "return", "bboxes", "\n", "\n", "", "x1", "=", "bboxes", "[", "...", ",", ":", "2", "]", "\n", "s", "=", "bboxes", "[", "...", ",", "2", ":", "]", "-", "x1", "+", "1", "\n", "\n", "if", "fmt", "==", "'c'", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "x1", "+", "0.5", "*", "s", ",", "s", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "fmt", "==", "'t'", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "x1", ",", "s", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Undefined bounding box layout '%s'\"", "%", "fmt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.bounding_box_utils.masks_to_bboxes_multi": [[70, 95], ["mask.dim", "torch.tensor", "bboxes.append", "mx.min", "my.min", "mx.max", "my.max", "torch.cat", "len", "len", "torch.cat", "ValueError"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.misc.SmoothedValue.max"], ["", "def", "masks_to_bboxes_multi", "(", "mask", ",", "ids", ",", "fmt", "=", "'c'", ")", ":", "\n", "    ", "assert", "mask", ".", "dim", "(", ")", "==", "2", "\n", "bboxes", "=", "[", "]", "\n", "\n", "for", "id", "in", "ids", ":", "\n", "        ", "mx", "=", "(", "mask", "==", "id", ")", ".", "sum", "(", "dim", "=", "-", "2", ")", ".", "nonzero", "(", ")", "\n", "my", "=", "(", "mask", "==", "id", ")", ".", "float", "(", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "nonzero", "(", ")", "\n", "bb", "=", "[", "mx", ".", "min", "(", ")", ",", "my", ".", "min", "(", ")", ",", "mx", ".", "max", "(", ")", ",", "my", ".", "max", "(", ")", "]", "if", "(", "len", "(", "mx", ")", ">", "0", "and", "len", "(", "my", ")", ">", "0", ")", "else", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "bb", "=", "torch", ".", "tensor", "(", "bb", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "mask", ".", "device", ")", "\n", "\n", "x1", "=", "bb", "[", ":", "2", "]", "\n", "s", "=", "bb", "[", "2", ":", "]", "-", "x1", "+", "1", "\n", "\n", "if", "fmt", "==", "'v'", ":", "\n", "            ", "pass", "\n", "", "elif", "fmt", "==", "'c'", ":", "\n", "            ", "bb", "=", "torch", ".", "cat", "(", "(", "x1", "+", "0.5", "*", "s", ",", "s", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "fmt", "==", "'t'", ":", "\n", "            ", "bb", "=", "torch", ".", "cat", "(", "(", "x1", ",", "s", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Undefined bounding box layout '%s'\"", "%", "fmt", ")", "\n", "", "bboxes", ".", "append", "(", "bb", ")", "\n", "\n", "", "return", "bboxes", "\n", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__": [[172, 191], ["super().__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.LTRLoader.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "dataset", ",", "training", "=", "True", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "sampler", "=", "None", ",", "batch_sampler", "=", "None", ",", "\n", "num_workers", "=", "0", ",", "epoch_interval", "=", "1", ",", "collate_fn", "=", "None", ",", "stack_dim", "=", "0", ",", "pin_memory", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "timeout", "=", "0", ",", "worker_init_fn", "=", "None", ")", ":", "\n", "        ", "if", "collate_fn", "is", "None", ":", "\n", "            ", "if", "stack_dim", "==", "0", ":", "\n", "                ", "collate_fn", "=", "ltr_collate", "\n", "", "elif", "stack_dim", "==", "1", ":", "\n", "                ", "collate_fn", "=", "ltr_collate_stack1", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Stack dim no supported. Must be 0 or 1.'", ")", "\n", "\n", "", "", "super", "(", "LTRLoader", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "batch_size", ",", "shuffle", ",", "sampler", ",", "batch_sampler", ",", "\n", "num_workers", ",", "collate_fn", ",", "pin_memory", ",", "drop_last", ",", "\n", "timeout", ",", "worker_init_fn", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "epoch_interval", "=", "epoch_interval", "\n", "self", ".", "stack_dim", "=", "stack_dim", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader._check_use_shared_memory": [[9, 16], ["hasattr", "importlib.import_module", "hasattr", "getattr", "getattr", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info"], "function", ["None"], ["def", "_check_use_shared_memory", "(", ")", ":", "\n", "    ", "if", "hasattr", "(", "torch", ".", "utils", ".", "data", ".", "dataloader", ",", "'_use_shared_memory'", ")", ":", "\n", "        ", "return", "getattr", "(", "torch", ".", "utils", ".", "data", ".", "dataloader", ",", "'_use_shared_memory'", ")", "\n", "", "collate_lib", "=", "importlib", ".", "import_module", "(", "'torch.utils.data._utils.collate'", ")", "\n", "if", "hasattr", "(", "collate_lib", ",", "'_use_shared_memory'", ")", ":", "\n", "        ", "return", "getattr", "(", "collate_lib", ",", "'_use_shared_memory'", ")", "\n", "", "return", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.ltr_collate": [[18, 67], ["type", "isinstance", "TypeError", "loader._check_use_shared_memory", "torch.stack", "torch.stack", "error_msg.format", "sum", "batch[].storage()._new_shared", "batch[].new", "isinstance", "type", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "isinstance", "x.numel", "batch[].storage", "torch.utils.data.dataloader.re.search", "torch.utils.data.dataloader.re.search", "TypeError", "elem.dtype.name.startswith", "list", "torch.DoubleTensor", "torch.DoubleTensor", "isinstance", "error_msg.format", "torch.from_numpy", "torch.from_numpy", "map", "isinstance", "lib.utils.TensorDict", "isinstance", "isinstance", "loader.ltr_collate", "loader.ltr_collate", "zip", "lib.utils.TensorList", "isinstance", "zip", "loader.ltr_collate", "loader.ltr_collate"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader._check_use_shared_memory", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.ltr_collate", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.ltr_collate", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.ltr_collate", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.ltr_collate"], ["", "def", "ltr_collate", "(", "batch", ")", ":", "\n", "    ", "\"\"\"Puts each data field into a tensor with outer dimension batch size\"\"\"", "\n", "\n", "error_msg", "=", "\"batch must contain tensors, numbers, dicts or lists; found {}\"", "\n", "elem_type", "=", "type", "(", "batch", "[", "0", "]", ")", "\n", "if", "isinstance", "(", "batch", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "out", "=", "None", "\n", "if", "_check_use_shared_memory", "(", ")", ":", "\n", "# If we're in a background process, concatenate directly into a", "\n", "# shared memory tensor to avoid an extra copy", "\n", "            ", "numel", "=", "sum", "(", "[", "x", ".", "numel", "(", ")", "for", "x", "in", "batch", "]", ")", "\n", "storage", "=", "batch", "[", "0", "]", ".", "storage", "(", ")", ".", "_new_shared", "(", "numel", ")", "\n", "out", "=", "batch", "[", "0", "]", ".", "new", "(", "storage", ")", "\n", "", "return", "torch", ".", "stack", "(", "batch", ",", "0", ",", "out", "=", "out", ")", "\n", "# if batch[0].dim() < 4:", "\n", "#     return torch.stack(batch, 0, out=out)", "\n", "# return torch.cat(batch, 0, out=out)", "\n", "", "elif", "elem_type", ".", "__module__", "==", "'numpy'", "and", "elem_type", ".", "__name__", "!=", "'str_'", "and", "elem_type", ".", "__name__", "!=", "'string_'", ":", "\n", "        ", "elem", "=", "batch", "[", "0", "]", "\n", "if", "elem_type", ".", "__name__", "==", "'ndarray'", ":", "\n", "# array of string classes and object", "\n", "            ", "if", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "re", ".", "search", "(", "'[SaUO]'", ",", "elem", ".", "dtype", ".", "str", ")", "is", "not", "None", ":", "\n", "                ", "raise", "TypeError", "(", "error_msg", ".", "format", "(", "elem", ".", "dtype", ")", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "[", "torch", ".", "from_numpy", "(", "b", ")", "for", "b", "in", "batch", "]", ",", "0", ")", "\n", "", "if", "elem", ".", "shape", "==", "(", ")", ":", "# scalars", "\n", "            ", "py_type", "=", "float", "if", "elem", ".", "dtype", ".", "name", ".", "startswith", "(", "'float'", ")", "else", "int", "\n", "return", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "numpy_type_map", "[", "elem", ".", "dtype", ".", "name", "]", "(", "list", "(", "map", "(", "py_type", ",", "batch", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "int_classes", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "DoubleTensor", "(", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "string_classes", ")", ":", "\n", "        ", "return", "batch", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "TensorDict", ")", ":", "\n", "        ", "return", "TensorDict", "(", "{", "key", ":", "ltr_collate", "(", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", ")", "for", "key", "in", "batch", "[", "0", "]", "}", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "ltr_collate", "(", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", ")", "for", "key", "in", "batch", "[", "0", "]", "}", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "TensorList", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "TensorList", "(", "[", "ltr_collate", "(", "samples", ")", "for", "samples", "in", "transposed", "]", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "[", "ltr_collate", "(", "samples", ")", "for", "samples", "in", "transposed", "]", "\n", "", "elif", "batch", "[", "0", "]", "is", "None", ":", "\n", "        ", "return", "batch", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "batch", "[", "0", "]", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.ltr_collate_stack1": [[69, 118], ["type", "isinstance", "TypeError", "loader._check_use_shared_memory", "torch.stack", "torch.stack", "error_msg.format", "sum", "batch[].storage()._new_shared", "batch[].new", "isinstance", "type", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "isinstance", "x.numel", "batch[].storage", "torch.utils.data.dataloader.re.search", "torch.utils.data.dataloader.re.search", "TypeError", "elem.dtype.name.startswith", "list", "torch.DoubleTensor", "torch.DoubleTensor", "isinstance", "error_msg.format", "torch.from_numpy", "torch.from_numpy", "map", "isinstance", "lib.utils.TensorDict", "isinstance", "isinstance", "loader.ltr_collate_stack1", "loader.ltr_collate_stack1", "zip", "lib.utils.TensorList", "isinstance", "zip", "loader.ltr_collate_stack1", "loader.ltr_collate_stack1"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader._check_use_shared_memory", "home.repos.pwc.inspect_result.skyesong38_cswintt.utils.tensor.TensorList.list", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.ltr_collate_stack1", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.ltr_collate_stack1", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.ltr_collate_stack1", "home.repos.pwc.inspect_result.skyesong38_cswintt.data.loader.ltr_collate_stack1"], ["", "def", "ltr_collate_stack1", "(", "batch", ")", ":", "\n", "    ", "\"\"\"Puts each data field into a tensor. The tensors are stacked at dim=1 to form the batch\"\"\"", "\n", "\n", "error_msg", "=", "\"batch must contain tensors, numbers, dicts or lists; found {}\"", "\n", "elem_type", "=", "type", "(", "batch", "[", "0", "]", ")", "\n", "if", "isinstance", "(", "batch", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "out", "=", "None", "\n", "if", "_check_use_shared_memory", "(", ")", ":", "\n", "# If we're in a background process, concatenate directly into a", "\n", "# shared memory tensor to avoid an extra copy", "\n", "            ", "numel", "=", "sum", "(", "[", "x", ".", "numel", "(", ")", "for", "x", "in", "batch", "]", ")", "\n", "storage", "=", "batch", "[", "0", "]", ".", "storage", "(", ")", ".", "_new_shared", "(", "numel", ")", "\n", "out", "=", "batch", "[", "0", "]", ".", "new", "(", "storage", ")", "\n", "", "return", "torch", ".", "stack", "(", "batch", ",", "1", ",", "out", "=", "out", ")", "\n", "# if batch[0].dim() < 4:", "\n", "#     return torch.stack(batch, 0, out=out)", "\n", "# return torch.cat(batch, 0, out=out)", "\n", "", "elif", "elem_type", ".", "__module__", "==", "'numpy'", "and", "elem_type", ".", "__name__", "!=", "'str_'", "and", "elem_type", ".", "__name__", "!=", "'string_'", ":", "\n", "        ", "elem", "=", "batch", "[", "0", "]", "\n", "if", "elem_type", ".", "__name__", "==", "'ndarray'", ":", "\n", "# array of string classes and object", "\n", "            ", "if", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "re", ".", "search", "(", "'[SaUO]'", ",", "elem", ".", "dtype", ".", "str", ")", "is", "not", "None", ":", "\n", "                ", "raise", "TypeError", "(", "error_msg", ".", "format", "(", "elem", ".", "dtype", ")", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "[", "torch", ".", "from_numpy", "(", "b", ")", "for", "b", "in", "batch", "]", ",", "1", ")", "\n", "", "if", "elem", ".", "shape", "==", "(", ")", ":", "# scalars", "\n", "            ", "py_type", "=", "float", "if", "elem", ".", "dtype", ".", "name", ".", "startswith", "(", "'float'", ")", "else", "int", "\n", "return", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "numpy_type_map", "[", "elem", ".", "dtype", ".", "name", "]", "(", "list", "(", "map", "(", "py_type", ",", "batch", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "int_classes", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "DoubleTensor", "(", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "string_classes", ")", ":", "\n", "        ", "return", "batch", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "TensorDict", ")", ":", "\n", "        ", "return", "TensorDict", "(", "{", "key", ":", "ltr_collate_stack1", "(", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", ")", "for", "key", "in", "batch", "[", "0", "]", "}", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "ltr_collate_stack1", "(", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", ")", "for", "key", "in", "batch", "[", "0", "]", "}", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "TensorList", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "TensorList", "(", "[", "ltr_collate_stack1", "(", "samples", ")", "for", "samples", "in", "transposed", "]", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "[", "ltr_collate_stack1", "(", "samples", ")", "for", "samples", "in", "transposed", "]", "\n", "", "elif", "batch", "[", "0", "]", "is", "None", ":", "\n", "        ", "return", "batch", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "batch", "[", "0", "]", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.main.video_demo.run_video": [[12, 21], ["lib.test.evaluation.Tracker", "lib.test.evaluation.Tracker.run_video"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.main.video_demo.run_video"], ["def", "run_video", "(", "tracker_name", ",", "tracker_param", ",", "videofile", ",", "optional_box", "=", "None", ",", "debug", "=", "None", ",", "save_results", "=", "False", ")", ":", "\n", "    ", "\"\"\"Run the tracker on your webcam.\n    args:\n        tracker_name: Name of tracking method.\n        tracker_param: Name of parameter file.\n        debug: Debug level.\n    \"\"\"", "\n", "tracker", "=", "Tracker", "(", "tracker_name", ",", "tracker_param", ",", "\"video\"", ")", "\n", "tracker", ".", "run_video", "(", "videofilepath", "=", "videofile", ",", "optional_box", "=", "optional_box", ",", "debug", "=", "debug", ",", "save_results", "=", "save_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.main.video_demo.main": [[23, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_args", "video_demo.run_video"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.main.train.parse_args", "home.repos.pwc.inspect_result.skyesong38_cswintt.main.video_demo.run_video"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Run the tracker on your webcam.'", ")", "\n", "parser", ".", "add_argument", "(", "'tracker_name'", ",", "type", "=", "str", ",", "help", "=", "'Name of tracking method.'", ")", "\n", "parser", ".", "add_argument", "(", "'tracker_param'", ",", "type", "=", "str", ",", "help", "=", "'Name of parameter file.'", ")", "\n", "parser", ".", "add_argument", "(", "'videofile'", ",", "type", "=", "str", ",", "help", "=", "'path to a video file.'", ")", "\n", "parser", ".", "add_argument", "(", "'--optional_box'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "nargs", "=", "\"+\"", ",", "help", "=", "'optional_box with format x y w h.'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Debug level.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_results'", ",", "dest", "=", "'save_results'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Save bounding boxes'", ")", "\n", "parser", ".", "set_defaults", "(", "save_results", "=", "False", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "run_video", "(", "args", ".", "tracker_name", ",", "args", ".", "tracker_param", ",", "args", ".", "videofile", ",", "args", ".", "optional_box", ",", "args", ".", "debug", ",", "args", ".", "save_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.main.profile_model.parse_args": [[11, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.main.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    args for training.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Parse args for training'", ")", "\n", "# for train", "\n", "parser", ".", "add_argument", "(", "'--script'", ",", "type", "=", "str", ",", "default", "=", "'cswintt_1'", ",", "\n", "help", "=", "'training script name'", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ",", "default", "=", "'baseline_cs'", ",", "help", "=", "'yaml configure file name'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.main.profile_model.evaluate": [[25, 69], ["thop.profile", "thop.utils.clever_format", "print", "print", "thop.profile", "thop.utils.clever_format", "print", "print", "thop.utils.clever_format", "print", "print", "print", "torch.no_grad", "range", "time.time", "range", "time.time", "print", "range", "time.time", "range", "time.time", "print", "model", "model", "model", "model", "model", "model"], "function", ["None"], ["", "def", "evaluate", "(", "model", ",", "search", ",", "seq_dict", ",", "run_box_head", ",", "run_cls_head", ")", ":", "\n", "    ", "\"\"\"Compute FLOPs, Params, and Speed\"\"\"", "\n", "# # backbone", "\n", "macs1", ",", "params1", "=", "profile", "(", "model", ",", "inputs", "=", "(", "search", ",", "None", ",", "\"backbone\"", ",", "False", ",", "False", ")", ",", "\n", "custom_ops", "=", "None", ",", "verbose", "=", "False", ")", "\n", "macs", ",", "params", "=", "clever_format", "(", "[", "macs1", ",", "params1", "]", ",", "\"%.3f\"", ")", "\n", "print", "(", "'backbone (search) macs is '", ",", "macs", ")", "\n", "print", "(", "'backbone params is '", ",", "params", ")", "\n", "# transformer and head", "\n", "macs2", ",", "params2", "=", "profile", "(", "model", ",", "inputs", "=", "(", "None", ",", "seq_dict", ",", "\"transformer\"", ",", "True", ",", "True", ")", ",", "\n", "custom_ops", "=", "None", ",", "verbose", "=", "False", ")", "\n", "macs", ",", "params", "=", "clever_format", "(", "[", "macs2", ",", "params2", "]", ",", "\"%.3f\"", ")", "\n", "print", "(", "'transformer and head macs is '", ",", "macs", ")", "\n", "print", "(", "'transformer and head params is '", ",", "params", ")", "\n", "# the whole model", "\n", "macs", ",", "params", "=", "clever_format", "(", "[", "macs1", "+", "macs2", ",", "params1", "+", "params2", "]", ",", "\"%.3f\"", ")", "\n", "print", "(", "'overall macs is '", ",", "macs", ")", "\n", "print", "(", "'overall params is '", ",", "params", ")", "\n", "\n", "'''Speed Test'''", "\n", "T_w", "=", "10", "\n", "T_t", "=", "100", "\n", "print", "(", "\"testing speed ...\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# overall", "\n", "        ", "for", "i", "in", "range", "(", "T_w", ")", ":", "\n", "            ", "_", "=", "model", "(", "search", ",", "None", ",", "\"backbone\"", ",", "run_box_head", ",", "run_cls_head", ")", "\n", "_", "=", "model", "(", "None", ",", "seq_dict", ",", "\"transformer\"", ",", "run_box_head", ",", "run_cls_head", ")", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "T_t", ")", ":", "\n", "            ", "_", "=", "model", "(", "search", ",", "None", ",", "\"backbone\"", ",", "run_box_head", ",", "run_cls_head", ")", "\n", "_", "=", "model", "(", "None", ",", "seq_dict", ",", "\"transformer\"", ",", "run_box_head", ",", "run_cls_head", ")", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "avg_lat", "=", "(", "end", "-", "start", ")", "/", "T_t", "\n", "print", "(", "\"The average overall latency is %.2f ms\"", "%", "(", "avg_lat", "*", "1000", ")", ")", "\n", "# backbone", "\n", "for", "i", "in", "range", "(", "T_w", ")", ":", "\n", "            ", "_", "=", "model", "(", "search", ",", "None", ",", "\"backbone\"", ",", "run_box_head", ",", "run_cls_head", ")", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "T_t", ")", ":", "\n", "            ", "_", "=", "model", "(", "search", ",", "None", ",", "\"backbone\"", ",", "run_box_head", ",", "run_cls_head", ")", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "avg_lat", "=", "(", "end", "-", "start", ")", "/", "T_t", "\n", "print", "(", "\"The average backbone latency is %.2f ms\"", "%", "(", "avg_lat", "*", "1000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.main.profile_model.get_data": [[71, 75], ["torch.randn", "lib.utils.misc.NestedTensor", "torch.rand"], "function", ["None"], ["", "", "def", "get_data", "(", "bs", ",", "sz", ")", ":", "\n", "    ", "img_patch", "=", "torch", ".", "randn", "(", "bs", ",", "3", ",", "sz", ",", "sz", ")", "\n", "att_mask", "=", "torch", ".", "rand", "(", "bs", ",", "sz", ",", "sz", ")", ">", "0.5", "\n", "return", "NestedTensor", "(", "img_patch", ",", "att_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.main.train.parse_args": [[4, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.main.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    args for training.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Parse args for training'", ")", "\n", "# for train", "\n", "parser", ".", "add_argument", "(", "'--script'", ",", "type", "=", "str", ",", "help", "=", "'training script name'", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ",", "default", "=", "'baseline'", ",", "help", "=", "'yaml configure file name'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "type", "=", "str", ",", "help", "=", "'root directory to save checkpoints, logs, and tensorboard'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "choices", "=", "[", "\"single\"", ",", "\"multiple\"", "]", ",", "default", "=", "\"multiple\"", ",", "\n", "help", "=", "\"train on single gpu or multiple gpus\"", ")", "\n", "parser", ".", "add_argument", "(", "'--nproc_per_node'", ",", "type", "=", "int", ",", "help", "=", "\"number of GPUs per node\"", ")", "# specify when mode is multiple", "\n", "parser", ".", "add_argument", "(", "'--use_lmdb'", ",", "type", "=", "int", ",", "choices", "=", "[", "0", ",", "1", "]", ",", "default", "=", "0", ")", "# whether datasets are in lmdb format", "\n", "parser", ".", "add_argument", "(", "'--script_prv'", ",", "type", "=", "str", ",", "help", "=", "'training script name'", ")", "\n", "parser", ".", "add_argument", "(", "'--config_prv'", ",", "type", "=", "str", ",", "default", "=", "'baseline'", ",", "help", "=", "'yaml configure file name'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.main.train.main": [[25, 38], ["train.parse_args", "os.system", "ValueError"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.main.train.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "if", "args", ".", "mode", "==", "\"single\"", ":", "\n", "        ", "train_cmd", "=", "\"python lib/train/run_training.py --script %s --config %s --save_dir %s --use_lmdb %d \"", "\"--script_prv %s --config_prv %s\"", "%", "(", "args", ".", "script", ",", "args", ".", "config", ",", "args", ".", "save_dir", ",", "args", ".", "use_lmdb", ",", "args", ".", "script_prv", ",", "args", ".", "config_prv", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"multiple\"", ":", "\n", "        ", "train_cmd", "=", "\"python -m torch.distributed.launch --nproc_per_node %d lib/train/run_training.py \"", "\"--script %s --config %s --save_dir %s --use_lmdb %d --script_prv %s --config_prv %s\"", "%", "(", "args", ".", "nproc_per_node", ",", "args", ".", "script", ",", "args", ".", "config", ",", "args", ".", "save_dir", ",", "args", ".", "use_lmdb", ",", "args", ".", "script_prv", ",", "args", ".", "config_prv", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"mode should be 'single' or 'multiple'.\"", ")", "\n", "", "os", ".", "system", "(", "train_cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.main._init_paths.add_path": [[9, 12], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.main.test.run_tracker": [[13, 34], ["lib.test.evaluation.get_dataset", "lib.test.evaluation.running.run_dataset", "lib.test.evaluation.tracker.Tracker"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.datasets.get_dataset", "home.repos.pwc.inspect_result.skyesong38_cswintt.evaluation.running.run_dataset"], ["def", "run_tracker", "(", "tracker_name", ",", "tracker_param", ",", "run_id", "=", "None", ",", "dataset_name", "=", "'otb'", ",", "sequence", "=", "None", ",", "debug", "=", "0", ",", "threads", "=", "0", ",", "\n", "num_gpus", "=", "8", ")", ":", "\n", "    ", "\"\"\"Run tracker on sequence or dataset.\n    args:\n        tracker_name: Name of tracking method.\n        tracker_param: Name of parameter file.\n        run_id: The run id.\n        dataset_name: Name of dataset (otb, nfs, uav, tpl, vot, tn, gott, gotv, lasot).\n        sequence: Sequence number or name.\n        debug: Debug level.\n        threads: Number of threads.\n    \"\"\"", "\n", "\n", "dataset", "=", "get_dataset", "(", "dataset_name", ")", "\n", "\n", "if", "sequence", "is", "not", "None", ":", "\n", "        ", "dataset", "=", "[", "dataset", "[", "sequence", "]", "]", "\n", "\n", "", "trackers", "=", "[", "Tracker", "(", "tracker_name", ",", "tracker_param", ",", "dataset_name", ",", "run_id", ")", "]", "\n", "\n", "run_dataset", "(", "dataset", ",", "trackers", ",", "debug", ",", "threads", ",", "num_gpus", "=", "num_gpus", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skyesong38_cswintt.main.test.main": [[35, 54], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "test.run_tracker", "int"], "function", ["home.repos.pwc.inspect_result.skyesong38_cswintt.main.train.parse_args", "home.repos.pwc.inspect_result.skyesong38_cswintt.main.test.run_tracker"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Run tracker on sequence or dataset.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tracker_name'", ",", "type", "=", "str", ",", "default", "=", "'cswintt'", ",", "help", "=", "'Name of tracking method.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tracker_param'", ",", "type", "=", "str", ",", "default", "=", "'baseline_cs'", ",", "help", "=", "'Name of config file.'", ")", "\n", "parser", ".", "add_argument", "(", "'--runid'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'The run id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_name'", ",", "type", "=", "str", ",", "default", "=", "'uav'", ",", "help", "=", "'Name of dataset (otb, nfs, got10k_test, uav, tpl, vot, tn, gott, gotv, lasot).'", ")", "\n", "parser", ".", "add_argument", "(", "'--sequence'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'Sequence number or name.'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Debug level.'", ")", "\n", "parser", ".", "add_argument", "(", "'--threads'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Number of threads.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_gpus'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "try", ":", "\n", "        ", "seq_name", "=", "int", "(", "args", ".", "sequence", ")", "\n", "", "except", ":", "\n", "        ", "seq_name", "=", "args", ".", "sequence", "\n", "\n", "", "run_tracker", "(", "args", ".", "tracker_name", ",", "args", ".", "tracker_param", ",", "args", ".", "runid", ",", "args", ".", "dataset_name", ",", "seq_name", ",", "args", ".", "debug", ",", "\n", "args", ".", "threads", ",", "num_gpus", "=", "args", ".", "num_gpus", ")", "\n", "\n"]]}