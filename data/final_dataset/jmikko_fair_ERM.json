{"home.repos.pwc.inspect_result.jmikko_fair_ERM.None.load_data.load_adult": [[9, 88], ["pandas.read_csv", "len", "pandas.read_csv", "pandas.concat", "pd.concat.replace", "numpy.array", "numpy.unique", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit", "sklearn.preprocessing.StandardScaler.transform", "print", "print", "collections.namedtuple", "collections.namedtuple", "collections.namedtuple", "collections.namedtuple", "numpy.array"], "function", ["home.repos.pwc.inspect_result.jmikko_fair_ERM.None.linear_ferm.Linear_FERM.fit"], ["def", "load_adult", "(", "smaller", "=", "False", ",", "scaler", "=", "True", ")", ":", "\n", "    ", "'''\n    :param smaller: selecting this flag it is possible to generate a smaller version of the training and test sets.\n    :param scaler: if True it applies a StandardScaler() (from sklearn.preprocessing) to the data.\n    :return: train and test data.\n\n    Features of the Adult dataset:\n    0. age: continuous.\n    1. workclass: Private, Self-emp-not-inc, Self-emp-inc, Federal-gov, Local-gov, State-gov, Without-pay, Never-worked.\n    2. fnlwgt: continuous.\n    3. education: Bachelors, Some-college, 11th, HS-grad, Prof-school, Assoc-acdm, Assoc-voc, 9th, 7th-8th, 12th,\n    Masters, 1st-4th, 10th, Doctorate, 5th-6th, Preschool.\n    4. education-num: continuous.\n    5. marital-status: Married-civ-spouse, Divorced, Never-married, Separated, Widowed,\n    Married-spouse-absent, Married-AF-spouse.\n    6. occupation: Tech-support, Craft-repair, Other-service, Sales, Exec-managerial, Prof-specialty,\n    Handlers-cleaners, Machine-op-inspct, Adm-clerical, Farming-fishing, Transport-moving, Priv-house-serv,\n    Protective-serv, Armed-Forces.\n    7. relationship: Wife, Own-child, Husband, Not-in-family, Other-relative, Unmarried.\n    8. race: White, Asian-Pac-Islander, Amer-Indian-Eskimo, Other, Black.\n    9. sex: Female, Male.\n    10. capital-gain: continuous.\n    11. capital-loss: continuous.\n    12. hours-per-week: continuous.\n    13. native-country: United-States, Cambodia, England, Puerto-Rico, Canada, Germany, Outlying-US(Guam-USVI-etc),\n    India, Japan, Greece, South, China, Cuba, Iran, Honduras, Philippines, Italy, Poland, Jamaica, Vietnam, Mexico,\n    Portugal, Ireland, France, Dominican-Republic, Laos, Ecuador, Taiwan, Haiti, Columbia, Hungary, Guatemala,\n    Nicaragua, Scotland, Thailand, Yugoslavia, El-Salvador, Trinadad&Tobago, Peru, Hong, Holand-Netherlands.\n    (14. label: <=50K, >50K)\n    '''", "\n", "data", "=", "pd", ".", "read_csv", "(", "\n", "\"./datasets/adult/adult.data\"", ",", "\n", "names", "=", "[", "\n", "\"Age\"", ",", "\"workclass\"", ",", "\"fnlwgt\"", ",", "\"education\"", ",", "\"education-num\"", ",", "\"marital-status\"", ",", "\n", "\"occupation\"", ",", "\"relationship\"", ",", "\"race\"", ",", "\"gender\"", ",", "\"capital gain\"", ",", "\"capital loss\"", ",", "\n", "\"hours per week\"", ",", "\"native-country\"", ",", "\"income\"", "]", "\n", ")", "\n", "len_train", "=", "len", "(", "data", ".", "values", "[", ":", ",", "-", "1", "]", ")", "\n", "data_test", "=", "pd", ".", "read_csv", "(", "\n", "\"./datasets/adult/adult.test\"", ",", "\n", "names", "=", "[", "\n", "\"Age\"", ",", "\"workclass\"", ",", "\"fnlwgt\"", ",", "\"education\"", ",", "\"education-num\"", ",", "\"marital-status\"", ",", "\n", "\"occupation\"", ",", "\"relationship\"", ",", "\"race\"", ",", "\"gender\"", ",", "\"capital gain\"", ",", "\"capital loss\"", ",", "\n", "\"hours per week\"", ",", "\"native-country\"", ",", "\"income\"", "]", "\n", ")", "\n", "data", "=", "pd", ".", "concat", "(", "[", "data", ",", "data_test", "]", ")", "\n", "# Considering the relative low portion of missing data, we discard rows with missing data", "\n", "domanda", "=", "data", "[", "\"workclass\"", "]", "[", "4", "]", ".", "values", "[", "1", "]", "\n", "data", "=", "data", "[", "data", "[", "\"workclass\"", "]", "!=", "domanda", "]", "\n", "data", "=", "data", "[", "data", "[", "\"occupation\"", "]", "!=", "domanda", "]", "\n", "data", "=", "data", "[", "data", "[", "\"native-country\"", "]", "!=", "domanda", "]", "\n", "# Here we apply discretisation on column marital_status", "\n", "data", ".", "replace", "(", "[", "'Divorced'", ",", "'Married-AF-spouse'", ",", "\n", "'Married-civ-spouse'", ",", "'Married-spouse-absent'", ",", "\n", "'Never-married'", ",", "'Separated'", ",", "'Widowed'", "]", ",", "\n", "[", "'not married'", ",", "'married'", ",", "'married'", ",", "'married'", ",", "\n", "'not married'", ",", "'not married'", ",", "'not married'", "]", ",", "inplace", "=", "True", ")", "\n", "# categorical fields", "\n", "category_col", "=", "[", "'workclass'", ",", "'race'", ",", "'education'", ",", "'marital-status'", ",", "'occupation'", ",", "\n", "'relationship'", ",", "'gender'", ",", "'native-country'", ",", "'income'", "]", "\n", "for", "col", "in", "category_col", ":", "\n", "        ", "b", ",", "c", "=", "np", ".", "unique", "(", "data", "[", "col", "]", ",", "return_inverse", "=", "True", ")", "\n", "data", "[", "col", "]", "=", "c", "\n", "", "datamat", "=", "data", ".", "values", "\n", "target", "=", "np", ".", "array", "(", "[", "-", "1.0", "if", "val", "==", "0", "else", "1.0", "for", "val", "in", "np", ".", "array", "(", "datamat", ")", "[", ":", ",", "-", "1", "]", "]", ")", "\n", "datamat", "=", "datamat", "[", ":", ",", ":", "-", "1", "]", "\n", "if", "scaler", ":", "\n", "        ", "scaler", "=", "StandardScaler", "(", ")", "\n", "scaler", ".", "fit", "(", "datamat", ")", "\n", "datamat", "=", "scaler", ".", "transform", "(", "datamat", ")", "\n", "", "if", "smaller", ":", "\n", "        ", "print", "(", "'A smaller version of the dataset is loaded...'", ")", "\n", "data", "=", "namedtuple", "(", "'_'", ",", "'data, target'", ")", "(", "datamat", "[", ":", "len_train", "//", "20", ",", ":", "-", "1", "]", ",", "target", "[", ":", "len_train", "//", "20", "]", ")", "\n", "data_test", "=", "namedtuple", "(", "'_'", ",", "'data, target'", ")", "(", "datamat", "[", "len_train", ":", ",", ":", "-", "1", "]", ",", "target", "[", "len_train", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'The dataset is loaded...'", ")", "\n", "data", "=", "namedtuple", "(", "'_'", ",", "'data, target'", ")", "(", "datamat", "[", ":", "len_train", ",", ":", "-", "1", "]", ",", "target", "[", ":", "len_train", "]", ")", "\n", "data_test", "=", "namedtuple", "(", "'_'", ",", "'data, target'", ")", "(", "datamat", "[", "len_train", ":", ",", ":", "-", "1", "]", ",", "target", "[", "len_train", ":", "]", ")", "\n", "", "return", "data", ",", "data_test", "\n", "\n"]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.load_data.load_toy_test": [[90, 100], ["toy_data.generate_toy_data", "collections.namedtuple"], "function", ["home.repos.pwc.inspect_result.jmikko_fair_ERM.None.toy_data.generate_toy_data"], ["", "def", "load_toy_test", "(", ")", ":", "\n", "# Load toy test", "\n", "    ", "n_samples", "=", "100", "*", "2", "\n", "n_samples_low", "=", "20", "*", "2", "\n", "n_dimensions", "=", "10", "\n", "X", ",", "y", ",", "sensible_feature_id", ",", "_", ",", "_", "=", "generate_toy_data", "(", "n_samples", "=", "n_samples", ",", "\n", "n_samples_low", "=", "n_samples_low", ",", "\n", "n_dimensions", "=", "n_dimensions", ")", "\n", "data", "=", "namedtuple", "(", "'_'", ",", "'data, target'", ")", "(", "X", ",", "y", ")", "\n", "return", "data", ",", "data", "", "", ""]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.ferm.FERM.__init__": [[25, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kernel", "=", "'rbf'", ",", "C", "=", "1.0", ",", "sensible_feature", "=", "None", ",", "gamma", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "fairness", "=", "False", "if", "sensible_feature", "is", "None", "else", "True", "\n", "self", ".", "sensible_feature", "=", "sensible_feature", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "w", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.ferm.FERM.fit": [[33, 125], ["ferm.FERM.fkernel", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.solvers.qp", "cvxopt.solvers.qp", "cvxopt.solvers.qp", "cvxopt.solvers.qp", "numpy.ravel", "range", "len", "list", "numpy.min", "numpy.max", "len", "len", "len", "y.astype", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "numpy.diag", "numpy.identity", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "numpy.zeros", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "numpy.arange", "len", "numpy.sum", "numpy.zeros", "range", "sklearn.metrics.pairwise.rbf_kernel", "set", "numpy.outer", "numpy.ones", "numpy.diag", "numpy.zeros", "numpy.vstack", "numpy.ones", "numpy.hstack", "numpy.vstack", "len", "len", "enumerate", "enumerate", "enumerate", "numpy.ones", "range", "numpy.ones", "numpy.sum", "numpy.sum", "len"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "kernel", "==", "'rbf'", ":", "\n", "            ", "self", ".", "fkernel", "=", "lambda", "x", ",", "y", ":", "rbf_kernel", "(", "x", ",", "y", ",", "self", ".", "gamma", ")", "\n", "", "elif", "self", ".", "kernel", "==", "'linear'", ":", "\n", "            ", "self", ".", "fkernel", "=", "linear_kernel", "\n", "", "else", ":", "\n", "            ", "self", ".", "fkernel", "=", "linear_kernel", "\n", "\n", "", "if", "self", ".", "fairness", ":", "\n", "            ", "self", ".", "values_of_sensible_feature", "=", "list", "(", "set", "(", "self", ".", "sensible_feature", ")", ")", "\n", "self", ".", "list_of_sensible_feature_train", "=", "self", ".", "sensible_feature", "\n", "self", ".", "val0", "=", "np", ".", "min", "(", "self", ".", "values_of_sensible_feature", ")", "\n", "self", ".", "val1", "=", "np", ".", "max", "(", "self", ".", "values_of_sensible_feature", ")", "\n", "self", ".", "set_A1", "=", "[", "idx", "for", "idx", ",", "ex", "in", "enumerate", "(", "X", ")", "if", "y", "[", "idx", "]", "==", "1", "\n", "and", "self", ".", "sensible_feature", "[", "idx", "]", "==", "self", ".", "val1", "]", "\n", "self", ".", "set_not_A1", "=", "[", "idx", "for", "idx", ",", "ex", "in", "enumerate", "(", "X", ")", "if", "y", "[", "idx", "]", "==", "1", "\n", "and", "self", ".", "sensible_feature", "[", "idx", "]", "==", "self", ".", "val0", "]", "\n", "# print('self.val0:', self.val0)", "\n", "# print('self.val1:', self.val1)", "\n", "# print('(y, self.sensible_feature):')", "\n", "# for el in zip(y, self.sensible_feature):", "\n", "#     print(el)", "\n", "self", ".", "set_1", "=", "[", "idx", "for", "idx", ",", "ex", "in", "enumerate", "(", "X", ")", "if", "y", "[", "idx", "]", "==", "1", "]", "\n", "self", ".", "n_A1", "=", "len", "(", "self", ".", "set_A1", ")", "\n", "self", ".", "n_not_A1", "=", "len", "(", "self", ".", "set_not_A1", ")", "\n", "self", ".", "n_1", "=", "len", "(", "self", ".", "set_1", ")", "\n", "\n", "", "n_samples", ",", "n_features", "=", "X", ".", "shape", "\n", "\n", "# Gram matrix", "\n", "K", "=", "self", ".", "fkernel", "(", "X", ",", "X", ")", "\n", "\n", "P", "=", "cvxopt", ".", "matrix", "(", "np", ".", "outer", "(", "y", ",", "y", ")", "*", "K", ")", "\n", "q", "=", "cvxopt", ".", "matrix", "(", "np", ".", "ones", "(", "n_samples", ")", "*", "-", "1", ")", "\n", "# print(y)", "\n", "A", "=", "cvxopt", ".", "matrix", "(", "y", ".", "astype", "(", "np", ".", "double", ")", ",", "(", "1", ",", "n_samples", ")", ",", "'d'", ")", "\n", "b", "=", "cvxopt", ".", "matrix", "(", "0.0", ")", "\n", "\n", "if", "self", ".", "C", "is", "None", ":", "\n", "            ", "G", "=", "cvxopt", ".", "matrix", "(", "np", ".", "diag", "(", "np", ".", "ones", "(", "n_samples", ")", "*", "-", "1", ")", ")", "\n", "h", "=", "cvxopt", ".", "matrix", "(", "np", ".", "zeros", "(", "n_samples", ")", ")", "\n", "", "else", ":", "\n", "            ", "tmp1", "=", "np", ".", "diag", "(", "np", ".", "ones", "(", "n_samples", ")", "*", "-", "1", ")", "\n", "tmp2", "=", "np", ".", "identity", "(", "n_samples", ")", "\n", "G", "=", "cvxopt", ".", "matrix", "(", "np", ".", "vstack", "(", "(", "tmp1", ",", "tmp2", ")", ")", ")", "\n", "tmp1", "=", "np", ".", "zeros", "(", "n_samples", ")", "\n", "tmp2", "=", "np", ".", "ones", "(", "n_samples", ")", "*", "self", ".", "C", "\n", "h", "=", "cvxopt", ".", "matrix", "(", "np", ".", "hstack", "(", "(", "tmp1", ",", "tmp2", ")", ")", ")", "\n", "\n", "# Stack the fairness constraint", "\n", "", "if", "self", ".", "fairness", ":", "\n", "            ", "tau", "=", "[", "(", "np", ".", "sum", "(", "K", "[", "self", ".", "set_A1", ",", "idx", "]", ")", "/", "self", ".", "n_A1", ")", "-", "(", "np", ".", "sum", "(", "K", "[", "self", ".", "set_not_A1", ",", "idx", "]", ")", "/", "self", ".", "n_not_A1", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "y", ")", ")", "]", "\n", "# print('self.n_A1:', self.n_A1)", "\n", "# print('self.n_not_A1:', self.n_not_A1)", "\n", "# print('tau:', tau)", "\n", "fairness_line", "=", "matrix", "(", "y", "*", "tau", ",", "(", "1", ",", "n_samples", ")", ",", "'d'", ")", "\n", "A", "=", "cvxopt", ".", "matrix", "(", "np", ".", "vstack", "(", "[", "A", ",", "fairness_line", "]", ")", ")", "\n", "b", "=", "cvxopt", ".", "matrix", "(", "[", "0.0", ",", "0.0", "]", ")", "\n", "\n", "# solve QP problem", "\n", "", "cvxopt", ".", "solvers", ".", "options", "[", "'show_progress'", "]", "=", "False", "\n", "# print('A:', A)", "\n", "# print('Rank(A):', np.linalg.matrix_rank(A))", "\n", "# print('Rank([P; A; G])', np.linalg.matrix_rank(np.vstack([P, A, G])))", "\n", "solution", "=", "cvxopt", ".", "solvers", ".", "qp", "(", "P", ",", "q", ",", "G", ",", "h", ",", "A", ",", "b", ")", "\n", "\n", "# Lagrange multipliers", "\n", "a", "=", "np", ".", "ravel", "(", "solution", "[", "'x'", "]", ")", "\n", "\n", "# Support vectors have non zero lagrange multipliers", "\n", "sv", "=", "a", ">", "1e-7", "\n", "ind", "=", "np", ".", "arange", "(", "len", "(", "a", ")", ")", "[", "sv", "]", "\n", "self", ".", "a", "=", "a", "[", "sv", "]", "\n", "self", ".", "sv", "=", "X", "[", "sv", "]", "\n", "self", ".", "sv_y", "=", "y", "[", "sv", "]", "\n", "# print(\"%d support vectors out of %d points\" % (len(self.a), n_samples))", "\n", "\n", "# Intercept", "\n", "self", ".", "b", "=", "0", "\n", "for", "n", "in", "range", "(", "len", "(", "self", ".", "a", ")", ")", ":", "\n", "            ", "self", ".", "b", "+=", "self", ".", "sv_y", "[", "n", "]", "\n", "self", ".", "b", "-=", "np", ".", "sum", "(", "self", ".", "a", "*", "self", ".", "sv_y", "*", "K", "[", "ind", "[", "n", "]", ",", "sv", "]", ")", "\n", "", "self", ".", "b", "/=", "len", "(", "self", ".", "a", ")", "\n", "\n", "# Weight vector", "\n", "if", "self", ".", "kernel", "==", "linear_kernel", ":", "\n", "            ", "self", ".", "w", "=", "np", ".", "zeros", "(", "n_features", ")", "\n", "for", "n", "in", "range", "(", "len", "(", "self", ".", "a", ")", ")", ":", "\n", "                ", "self", ".", "w", "+=", "self", ".", "a", "[", "n", "]", "*", "self", ".", "sv_y", "[", "n", "]", "*", "self", ".", "sv", "[", "n", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "w", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.ferm.FERM.project": [[126, 135], ["ferm.FERM.fkernel", "numpy.multiply", "numpy.dot", "numpy.sum", "numpy.multiply", "range", "numpy.multiply", "len"], "methods", ["None"], ["", "", "def", "project", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "w", "is", "not", "None", ":", "\n", "            ", "return", "np", ".", "dot", "(", "X", ",", "self", ".", "w", ")", "+", "self", ".", "b", "\n", "", "else", ":", "\n", "            ", "XSV", "=", "self", ".", "fkernel", "(", "X", ",", "self", ".", "sv", ")", "\n", "a_sv_y", "=", "np", ".", "multiply", "(", "self", ".", "a", ",", "self", ".", "sv_y", ")", "\n", "y_predict", "=", "[", "np", ".", "sum", "(", "np", ".", "multiply", "(", "np", ".", "multiply", "(", "self", ".", "a", ",", "self", ".", "sv_y", ")", ",", "XSV", "[", "i", ",", ":", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", "]", "\n", "\n", "return", "y_predict", "+", "self", ".", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.ferm.FERM.decision_function": [[136, 138], ["ferm.FERM.project"], "methods", ["home.repos.pwc.inspect_result.jmikko_fair_ERM.None.ferm.FERM.project"], ["", "", "def", "decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "self", ".", "project", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.ferm.FERM.predict": [[139, 141], ["numpy.sign", "ferm.FERM.project"], "methods", ["home.repos.pwc.inspect_result.jmikko_fair_ERM.None.ferm.FERM.project"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "np", ".", "sign", "(", "self", ".", "project", "(", "X", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.ferm.FERM.score": [[142, 146], ["ferm.FERM.predict", "sklearn.metrics.accuracy_score"], "methods", ["home.repos.pwc.inspect_result.jmikko_fair_ERM.None.linear_ferm.Linear_FERM.predict"], ["", "def", "score", "(", "self", ",", "X_test", ",", "y_test", ")", ":", "\n", "        ", "predict", "=", "self", ".", "predict", "(", "X_test", ")", "\n", "acc", "=", "accuracy_score", "(", "y_test", ",", "predict", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.ferm.linear_kernel": [[16, 18], ["numpy.dot", "numpy.transpose"], "function", ["None"], ["def", "linear_kernel", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "return", "np", ".", "dot", "(", "x1", ",", "np", ".", "transpose", "(", "x2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.ferm.gaussian_kernel": [[19, 21], ["numpy.exp", "numpy.linalg.norm"], "function", ["None"], ["", "def", "gaussian_kernel", "(", "x", ",", "y", ",", "gamma", "=", "0.1", ")", ":", "\n", "    ", "return", "np", ".", "exp", "(", "-", "gamma", "*", "(", "linalg", ".", "norm", "(", "x", "-", "y", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.measures.equalized_odds_measure_TP": [[4, 32], ["model.predict", "list", "set", "numpy.sum", "numpy.sum", "range", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.jmikko_fair_ERM.None.linear_ferm.Linear_FERM.predict"], ["def", "equalized_odds_measure_TP", "(", "data", ",", "model", ",", "sensitive_features", ",", "ylabel", ",", "rev_pred", "=", "1", ")", ":", "\n", "    ", "'''\n    True positive label for the groups defined by the values of the \"sensible_features\",\n    with respect to the \"model\" on the \"data\".\n    :param data: the data where to evaluate the True Positive Rate (Equal Opportunity).\n    :param model:  the model that has to be evaluated.\n    :param sensitive_features: the features used to split the data in groups.\n    :param ylabel: the POSITIVE label (usually +1).\n    :param rev_pred: an option to reverse the outputs of our model.\n    :return: a dictionary with keys the sensitive_features and values dictionaries containing the True Positive Rates\n    of the different subgroups of the specific sensitive feature.\n    '''", "\n", "predictions", "=", "model", ".", "predict", "(", "data", ".", "data", ")", "*", "rev_pred", "\n", "truth", "=", "data", ".", "target", "\n", "eq_dict", "=", "{", "}", "\n", "for", "feature", "in", "sensitive_features", ":", "\n", "        ", "eq_sensible_feature", "=", "{", "}", "\n", "values_of_sensible_feature", "=", "list", "(", "set", "(", "data", ".", "data", "[", ":", ",", "feature", "]", ")", ")", "\n", "for", "val", "in", "values_of_sensible_feature", ":", "\n", "            ", "eq_tmp", "=", "None", "\n", "positive_sensitive", "=", "np", ".", "sum", "(", "[", "1.0", "if", "data", ".", "data", "[", "i", ",", "feature", "]", "==", "val", "and", "truth", "[", "i", "]", "==", "ylabel", "else", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "predictions", ")", ")", "]", ")", "\n", "if", "positive_sensitive", ">", "0", ":", "\n", "                ", "eq_tmp", "=", "np", ".", "sum", "(", "[", "1.0", "if", "predictions", "[", "i", "]", "==", "ylabel", "and", "data", ".", "data", "[", "i", ",", "feature", "]", "==", "val", "and", "truth", "[", "i", "]", "==", "ylabel", "\n", "else", "0.0", "for", "i", "in", "range", "(", "len", "(", "predictions", ")", ")", "]", ")", "/", "positive_sensitive", "\n", "", "eq_sensible_feature", "[", "val", "]", "=", "eq_tmp", "\n", "", "eq_dict", "[", "feature", "]", "=", "eq_sensible_feature", "\n", "", "return", "eq_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.linear_ferm.Linear_FERM.__init__": [[13, 22], ["list", "numpy.min", "numpy.max", "set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "model", ",", "sensible_feature", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "values_of_sensible_feature", "=", "list", "(", "set", "(", "sensible_feature", ")", ")", "\n", "self", ".", "list_of_sensible_feature_train", "=", "sensible_feature", "\n", "self", ".", "val0", "=", "np", ".", "min", "(", "self", ".", "values_of_sensible_feature", ")", "\n", "self", ".", "val1", "=", "np", ".", "max", "(", "self", ".", "values_of_sensible_feature", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "u", "=", "None", "\n", "self", ".", "max_i", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.linear_ferm.Linear_FERM.new_representation": [[23, 31], ["numpy.array", "numpy.delete", "sys.exit"], "methods", ["None"], ["", "def", "new_representation", "(", "self", ",", "examples", ")", ":", "\n", "        ", "if", "self", ".", "u", "is", "None", ":", "\n", "            ", "sys", ".", "exit", "(", "'Model not trained yet!'", ")", "\n", "return", "0", "\n", "\n", "", "new_examples", "=", "np", ".", "array", "(", "[", "ex", "-", "self", ".", "u", "*", "(", "ex", "[", "self", ".", "max_i", "]", "/", "self", ".", "u", "[", "self", ".", "max_i", "]", ")", "for", "ex", "in", "examples", "]", ")", "\n", "new_examples", "=", "np", ".", "delete", "(", "new_examples", ",", "self", ".", "max_i", ",", "1", ")", "\n", "return", "new_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.linear_ferm.Linear_FERM.predict": [[32, 36], ["linear_ferm.Linear_FERM.new_representation", "linear_ferm.Linear_FERM.model.predict"], "methods", ["home.repos.pwc.inspect_result.jmikko_fair_ERM.None.linear_ferm.Linear_FERM.new_representation", "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.linear_ferm.Linear_FERM.predict"], ["", "def", "predict", "(", "self", ",", "examples", ")", ":", "\n", "        ", "new_examples", "=", "self", ".", "new_representation", "(", "examples", ")", "\n", "prediction", "=", "self", ".", "model", ".", "predict", "(", "new_examples", ")", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.linear_ferm.Linear_FERM.fit": [[37, 58], ["numpy.mean", "numpy.mean", "numpy.argmax", "numpy.array", "numpy.delete", "collections.namedtuple", "linear_ferm.Linear_FERM.model.fit", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.jmikko_fair_ERM.None.linear_ferm.Linear_FERM.fit"], ["", "def", "fit", "(", "self", ")", ":", "\n", "# Evaluation of the empirical averages among the groups", "\n", "        ", "tmp", "=", "[", "ex", "for", "idx", ",", "ex", "in", "enumerate", "(", "self", ".", "dataset", ".", "data", ")", "\n", "if", "self", ".", "dataset", ".", "target", "[", "idx", "]", "==", "1", "and", "self", ".", "list_of_sensible_feature_train", "[", "idx", "]", "==", "self", ".", "val1", "]", "\n", "average_A_1", "=", "np", ".", "mean", "(", "tmp", ",", "0", ")", "\n", "tmp", "=", "[", "ex", "for", "idx", ",", "ex", "in", "enumerate", "(", "self", ".", "dataset", ".", "data", ")", "\n", "if", "self", ".", "dataset", ".", "target", "[", "idx", "]", "==", "1", "and", "self", ".", "list_of_sensible_feature_train", "[", "idx", "]", "==", "self", ".", "val0", "]", "\n", "average_not_A_1", "=", "np", ".", "mean", "(", "tmp", ",", "0", ")", "\n", "\n", "# Evaluation of the vector u (difference among the two averages)", "\n", "self", ".", "u", "=", "-", "(", "average_A_1", "-", "average_not_A_1", ")", "\n", "self", ".", "max_i", "=", "np", ".", "argmax", "(", "self", ".", "u", ")", "\n", "\n", "# Application of the new representation", "\n", "newdata", "=", "np", ".", "array", "(", "[", "ex", "-", "self", ".", "u", "*", "(", "ex", "[", "self", ".", "max_i", "]", "/", "self", ".", "u", "[", "self", ".", "max_i", "]", ")", "for", "ex", "in", "self", ".", "dataset", ".", "data", "]", ")", "\n", "newdata", "=", "np", ".", "delete", "(", "newdata", ",", "self", ".", "max_i", ",", "1", ")", "\n", "self", ".", "dataset", "=", "namedtuple", "(", "'_'", ",", "'data, target'", ")", "(", "newdata", ",", "self", ".", "dataset", ".", "target", ")", "\n", "\n", "# Fitting the linear model by using the new data", "\n", "if", "self", ".", "model", ":", "\n", "            ", "self", ".", "model", ".", "fit", "(", "self", ".", "dataset", ".", "data", ",", "self", ".", "dataset", ".", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jmikko_fair_ERM.None.toy_data.generate_toy_data": [[5, 32], ["numpy.random.seed", "numpy.random.multivariate_normal", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.array", "numpy.hstack", "numpy.array", "list", "list", "numpy.diag", "len", "len", "range", "range", "int", "int", "numpy.random.multivariate_normal", "numpy.random.multivariate_normal", "numpy.random.multivariate_normal", "numpy.diag", "numpy.diag", "numpy.diag"], "function", ["None"], ["def", "generate_toy_data", "(", "n_samples", ",", "n_samples_low", ",", "n_dimensions", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "varA", "=", "0.8", "\n", "aveApos", "=", "[", "-", "1.0", "]", "*", "n_dimensions", "\n", "aveAneg", "=", "[", "1.0", "]", "*", "n_dimensions", "\n", "varB", "=", "0.5", "\n", "aveBpos", "=", "[", "0.5", "]", "*", "int", "(", "n_dimensions", "/", "2", ")", "+", "[", "-", "0.5", "]", "*", "int", "(", "n_dimensions", "/", "2", "+", "n_dimensions", "%", "2", ")", "\n", "aveBneg", "=", "[", "0.5", "]", "*", "n_dimensions", "\n", "\n", "X", "=", "np", ".", "random", ".", "multivariate_normal", "(", "aveApos", ",", "np", ".", "diag", "(", "[", "varA", "]", "*", "n_dimensions", ")", ",", "n_samples", ")", "\n", "X", "=", "np", ".", "vstack", "(", "[", "X", ",", "np", ".", "random", ".", "multivariate_normal", "(", "aveAneg", ",", "np", ".", "diag", "(", "[", "varA", "]", "*", "n_dimensions", ")", ",", "n_samples", ")", "]", ")", "\n", "X", "=", "np", ".", "vstack", "(", "[", "X", ",", "np", ".", "random", ".", "multivariate_normal", "(", "aveBpos", ",", "np", ".", "diag", "(", "[", "varB", "]", "*", "n_dimensions", ")", ",", "n_samples_low", ")", "]", ")", "\n", "X", "=", "np", ".", "vstack", "(", "[", "X", ",", "np", ".", "random", ".", "multivariate_normal", "(", "aveBneg", ",", "np", ".", "diag", "(", "[", "varB", "]", "*", "n_dimensions", ")", ",", "n_samples", ")", "]", ")", "\n", "sensible_feature", "=", "[", "1", "]", "*", "(", "n_samples", "*", "2", ")", "+", "[", "-", "1", "]", "*", "(", "n_samples", "+", "n_samples_low", ")", "\n", "sensible_feature", "=", "np", ".", "array", "(", "sensible_feature", ")", "\n", "sensible_feature", ".", "shape", "=", "(", "len", "(", "sensible_feature", ")", ",", "1", ")", "\n", "X", "=", "np", ".", "hstack", "(", "[", "X", ",", "sensible_feature", "]", ")", "\n", "y", "=", "[", "1", "]", "*", "n_samples", "+", "[", "-", "1", "]", "*", "n_samples", "+", "[", "1", "]", "*", "n_samples_low", "+", "[", "-", "1", "]", "*", "n_samples", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "sensible_feature_id", "=", "len", "(", "X", "[", "1", ",", ":", "]", ")", "-", "1", "\n", "idx_A", "=", "list", "(", "range", "(", "0", ",", "n_samples", "*", "2", ")", ")", "\n", "idx_B", "=", "list", "(", "range", "(", "n_samples", "*", "2", ",", "n_samples", "*", "3", "+", "n_samples_low", ")", ")", "\n", "\n", "# print('(y, sensible_feature):')", "\n", "# for el in zip(y, sensible_feature):", "\n", "#     print(el)", "\n", "return", "X", ",", "y", ",", "sensible_feature_id", ",", "idx_A", ",", "idx_B", "\n", "\n"]]}