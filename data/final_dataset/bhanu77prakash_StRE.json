{"home.repos.pwc.inspect_result.bhanu77prakash_StRE.preprocessing.count_data.datapts_counter": [[28, 37], ["open", "open.read", "lines.split.split", "len", "float", "range", "range", "x.strip", "len", "len"], "function", ["None"], ["def", "datapts_counter", "(", "filename", ")", ":", "\n", "\t", "file", "=", "open", "(", "filename", ",", "\"r\"", ")", "\n", "lines", "=", "file", ".", "read", "(", ")", "\n", "lines", "=", "lines", ".", "split", "(", "\"####SCORE###\"", ")", "\n", "train_data", "=", "[", "lines", "[", "x", "]", "for", "x", "in", "range", "(", "len", "(", "lines", ")", ")", "if", "x", "%", "2", "==", "0", "]", "\n", "y_labels", "=", "[", "lines", "[", "x", "]", "for", "x", "in", "range", "(", "len", "(", "lines", ")", ")", "if", "x", "%", "2", "!=", "0", "]", "\n", "y_labels", "=", "[", "float", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "y_labels", "]", "\n", "train_data", "=", "train_data", "[", ":", "-", "1", "]", "\n", "return", "len", "(", "train_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.preprocessing.parser.parenthesis": [[51, 76], ["None"], "function", ["None"], ["", "def", "parenthesis", "(", "text", ")", ":", "\n", "    ", "flag", "=", "0", "\n", "flag1", "=", "0", "\n", "final_text", "=", "\"\"", "\n", "count", "=", "0", "\n", "for", "i", "in", "text", ":", "\n", "        ", "if", "(", "i", "==", "'{'", "and", "flag", "==", "0", ")", ":", "\n", "            ", "final_text", "+=", "i", "\n", "flag", "=", "1", "\n", "pass", "\n", "", "elif", "(", "i", "==", "'{'", "and", "flag", "==", "1", ")", ":", "\n", "            ", "final_text", "=", "final_text", "[", ":", "-", "1", "]", "\n", "count", "+=", "1", "\n", "flag", "=", "0", "\n", "", "elif", "(", "i", "==", "'}'", "and", "flag1", "==", "0", ")", ":", "\n", "            ", "final_text", "+=", "i", "\n", "flag1", "=", "1", "\n", "pass", "\n", "", "elif", "(", "i", "==", "'}'", "and", "flag1", "==", "1", ")", ":", "\n", "            ", "final_text", "=", "final_text", "[", ":", "-", "1", "]", "\n", "count", "-=", "1", "\n", "flag1", "=", "0", "\n", "", "elif", "(", "count", "==", "0", ")", ":", "\n", "            ", "final_text", "+=", "i", "\n", "", "", "return", "final_text", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.preprocessing.parser.parse_wiki": [[83, 90], ["parser.parenthesis", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip"], "function", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.preprocessing.parser.parenthesis"], ["", "def", "parse_wiki", "(", "text", ")", ":", "\n", "    ", "text", "=", "parenthesis", "(", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "\"==References==(.|\\n)*\"", ",", "\"\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "\"==External links==(.|\\n)*\"", ",", "\"\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "\"==.*==|\\[\\[|\\]\\]|<.*?>([^<].|\\n)*<.*?>|'''|\\*|<.*?>\"", ",", "\"\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "\"\\[http://.*?\\]\"", ",", "\"\"", ",", "text", ")", "\n", "return", "text", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.preprocessing.parser.processor": [[227, 249], ["range", "len", "range", "fuzzyset.FuzzySet", "temp_list.append", "temp_list.append", "len", "fuzzyset.FuzzySet.add", "fuzzyset.FuzzySet.get", "Levenshtein.distance", "Levenshtein.distance", "fuzzywuzzy.fuzz.ratio", "fuzzyset.FuzzySet.get"], "function", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.compute_quality.distance", "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.compute_quality.distance"], ["def", "processor", "(", "index", ",", "return_dict", ")", ":", "\n", "    ", "temp_list", "=", "[", "]", "\n", "for", "ja", "in", "range", "(", "len", "(", "indices", "[", "index", "]", ")", ")", ":", "\n", "        ", "if", "(", "indices", "[", "index", "]", "[", "ja", "]", "in", "range", "(", "len", "(", "lines", "[", "index", "+", "1", "]", "[", "0", "]", ")", ")", ")", ":", "\n", "            ", "a", "=", "fuzzyset", ".", "FuzzySet", "(", ")", "\n", "for", "stri", "in", "lines", "[", "index", "]", "[", "0", "]", ":", "\n", "                ", "a", ".", "add", "(", "stri", ")", "\n", "", "if", "(", "a", ".", "get", "(", "lines", "[", "index", "+", "1", "]", "[", "0", "]", "[", "indices", "[", "index", "]", "[", "ja", "]", "]", ")", "!=", "None", ")", ":", "\n", "                ", "prev_version", "=", "a", ".", "get", "(", "lines", "[", "index", "+", "1", "]", "[", "0", "]", "[", "indices", "[", "index", "]", "[", "ja", "]", "]", ")", "[", "0", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "prev_version", "=", "''", "\n", "# prev_version = difflib.get_close_matches(lines[index+1][0][indices[index][ja]], lines[index][0], cutoff = 0.0)[0]", "\n", "", "if", "(", "distance", "(", "lines", "[", "index", "+", "1", "]", "[", "0", "]", "[", "indices", "[", "index", "]", "[", "ja", "]", "]", ",", "prev_version", ")", ">=", "distance", "(", "lines", "[", "index", "+", "1", "]", "[", "0", "]", "[", "indices", "[", "index", "]", "[", "ja", "]", "]", ",", "''", ")", ")", ":", "\n", "# if(len([li for li in list(difflib.ndiff(prev_version,lines[index+1][0][indices[index][ja]])) if li[0] != ' ']) > len([li for li in list(difflib.ndiff('',lines[index+1][0][indices[index][ja]])) if li[0] != ' '])):", "\n", "                ", "prev_version", "=", "''", "\n", "", "if", "(", "fuzz", ".", "ratio", "(", "prev_version", ",", "lines", "[", "index", "+", "1", "]", "[", "0", "]", "[", "indices", "[", "index", "]", "[", "ja", "]", "]", ")", "<", "75", ")", ":", "\n", "                ", "prev_version", "=", "''", "\n", "", "temp_list", ".", "append", "(", "(", "(", "lines", "[", "index", "+", "1", "]", "[", "0", "]", "[", "indices", "[", "index", "]", "[", "ja", "]", "]", "+", "\" #$#$# \"", "+", "prev_version", ",", "lines", "[", "index", "+", "1", "]", "[", "1", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "temp_list", ".", "append", "(", "(", "(", "''", "+", "\" #$#$# \"", "+", "lines", "[", "index", "]", "[", "0", "]", "[", "indices", "[", "index", "]", "[", "ja", "]", "]", ",", "lines", "[", "index", "+", "1", "]", "[", "1", "]", ")", ")", ")", "\n", "\n", "", "", "return_dict", "[", "index", "]", "=", "temp_list", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.preprocessing.java_code_cleaner.cleaner": [[37, 88], ["i.strip.strip", "len", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "min", "min", "min", "min", "min", "min", "min"], "function", ["None"], ["def", "cleaner", "(", "i", ")", ":", "\n", "# for i in line:", "\n", "    ", "i", "=", "i", ".", "strip", "(", ")", "\n", "l", "=", "len", "(", "i", ")", "\n", "final", "=", "\"\"", "\n", "j", "=", "0", "\n", "while", "(", "j", "<", "l", ")", ":", "\n", "        ", "if", "(", "i", "[", "j", ":", "min", "(", "j", "+", "9", ",", "l", ")", "]", "==", "'TEMPLATE['", ")", ":", "\n", "            ", "count", "=", "1", "\n", "j", "=", "j", "+", "9", "\n", "while", "(", "count", ">", "0", "and", "j", "<", "l", ")", ":", "\n", "                ", "if", "(", "i", "[", "j", "]", "==", "'['", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "", "elif", "(", "i", "[", "j", "]", "==", "']'", ")", ":", "\n", "                    ", "count", "-=", "1", "\n", "", "j", "+=", "1", "\n", "", "final", "+=", "' '", "\n", "", "elif", "(", "i", "[", "j", ":", "min", "(", "j", "+", "2", ",", "l", ")", "]", "==", "'[['", ")", ":", "\n", "            ", "count", "=", "1", "\n", "j", "=", "j", "+", "2", "\n", "while", "(", "count", ">", "0", "and", "j", "<", "l", ")", ":", "\n", "                ", "if", "(", "i", "[", "j", ":", "min", "(", "j", "+", "2", ",", "l", ")", "]", "==", "'[['", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "", "elif", "(", "i", "[", "j", ":", "min", "(", "j", "+", "2", ",", "l", ")", "]", "==", "']]'", ")", ":", "\n", "                    ", "j", "+=", "1", "\n", "count", "-=", "1", "\n", "", "j", "+=", "1", "\n", "", "final", "+=", "' '", "\n", "", "elif", "(", "i", "[", "j", ":", "min", "(", "j", "+", "2", ",", "l", ")", "]", "==", "'{|'", ")", ":", "\n", "            ", "count", "=", "1", "\n", "j", "=", "j", "+", "2", "\n", "# print(str(j)+ \" \"+str(l)+\"\\n\")", "\n", "while", "(", "count", ">", "0", "and", "j", "<", "l", ")", ":", "\n", "                ", "if", "(", "i", "[", "j", ":", "min", "(", "j", "+", "2", ",", "l", ")", "]", "==", "'{|'", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "", "elif", "(", "i", "[", "j", ":", "min", "(", "j", "+", "2", ",", "l", ")", "]", "==", "'|}'", ")", ":", "\n", "                    ", "j", "+=", "1", "\n", "count", "-=", "1", "\n", "", "j", "+=", "1", "\n", "", "final", "+=", "' '", "\n", "", "else", ":", "\n", "            ", "final", "+=", "i", "[", "j", "]", "\n", "j", "+=", "1", "\n", "# print(\"Finished File\\n\")", "\n", "", "", "final", "=", "re", ".", "sub", "(", "'==See also==.*'", ",", "'=='", ",", "final", ")", "\n", "final", "=", "re", ".", "sub", "(", "'Links:.*'", ",", "' '", ",", "final", ")", "\n", "\n", "final", "=", "re", ".", "sub", "(", "'====.*?===='", ",", "' '", ",", "final", ")", "\n", "final", "=", "re", ".", "sub", "(", "'===.*?==='", ",", "' '", ",", "final", ")", "\n", "final", "=", "re", ".", "sub", "(", "'==.*?=='", ",", "' '", ",", "final", ")", "\n", "return", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.preprocessing.java_code_cleaner.processor": [[98, 111], ["os.system", "string.strip", "open", "open.write", "open.close", "subprocess.check_output", "java_code_cleaner.cleaner", "subprocess.check_output.decode", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.preprocessing.java_code_cleaner.cleaner"], ["", "def", "processor", "(", "string", ",", "index", ",", "return_dict", ")", ":", "\n", "    ", "if", "(", "string", ".", "strip", "(", ")", "!=", "''", ")", ":", "\n", "        ", "temp_file", "=", "open", "(", "sys", ".", "argv", "[", "2", "]", "+", "\".\"", "+", "str", "(", "index", ")", "+", "\".\"", "+", "\".temp_file\"", ",", "\"w\"", ")", "\n", "temp_file", ".", "write", "(", "string", ")", "\n", "temp_file", ".", "close", "(", ")", "\n", "out", "=", "check_output", "(", "[", "\"java\"", ",", "\"-cp\"", ",", "\"de.tudarmstadt.ukp.wikipedia.jar\"", ",", "\"de.tudarmstadt.ukp.wikipedia.tutorial.parser.T1_SimpleParserDemo\"", ",", "sys", ".", "argv", "[", "2", "]", "+", "\".\"", "+", "str", "(", "index", ")", "+", "\".\"", "+", "\".temp_file\"", "]", ")", "\n", "# print(out.decode('utf-8'))", "\n", "final", "=", "cleaner", "(", "out", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "return_dict", "[", "index", "]", "=", "final", "+", "\"\\n*$*$*$delimiter$*$*$*\\n\"", "\n", "", "else", ":", "\n", "        ", "return_dict", "[", "index", "]", "=", "\" \\n*$*$*$delimiter$*$*$*\\n\"", "\n", "\n", "", "os", ".", "system", "(", "\"rm \"", "+", "sys", ".", "argv", "[", "2", "]", "+", "\".\"", "+", "str", "(", "index", ")", "+", "\".\"", "+", "\".temp_file\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.article_count.is_disambiguation_page": [[44, 67], ["elem.iter", "disambiguation_tags.values"], "function", ["None"], ["def", "is_disambiguation_page", "(", "elem", ",", "lang", "=", "None", ")", ":", "\n", "    ", "\"\"\"Given an xml element, decide if disambiguation page.\"\"\"", "\n", "\n", "# TODO can distiguish these tags better", "\n", "disambiguation_tags", "=", "{", "\"simple\"", ":", "[", "\"{{disambig}}\"", "]", ",", "\n", "\"bar\"", ":", "[", "\"{{Begriffskl\u00e4rung}}\"", "]", ",", "\n", "\"tr\"", ":", "[", "\"{{anlam ayr\u0131m\u0131}}\"", "]", ",", "\n", "\"fr\"", ":", "[", "\"{{Homonymie}}\"", ",", "\"{{homonymie}}\"", "]", ",", "\n", "\"en\"", ":", "[", "\"{{Disambiguation\"", ",", "\"{{disambiguation\"", ",", "\"disambiguation}}\"", "]", "}", "\n", "\n", "tags", "=", "[", "]", "\n", "if", "lang", "is", "None", ":", "\n", "        ", "tags", "=", "[", "item", "for", "sublist", "in", "disambiguation_tags", ".", "values", "(", ")", "for", "item", "in", "sublist", "]", "\n", "", "else", ":", "\n", "        ", "tags", "=", "disambiguation_tags", "[", "lang", "]", "\n", "\n", "", "for", "text_elem", "in", "elem", ".", "iter", "(", "tag", "=", "TEXT_TAG", ")", ":", "\n", "        ", "if", "text_elem", ".", "text", "is", "not", "None", ":", "\n", "            ", "for", "tag", "in", "tags", ":", "\n", "                ", "if", "tag", "in", "text_elem", ".", "text", ":", "\n", "                    ", "return", "True", "\n", "\n", "", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.article_count.get_contributor": [[69, 92], ["rev_elem.find", "rev_elem.find.find", "rev_elem.find.find", "rev_elem.find.find", "rev_elem.find.find", "rev_elem.find.find", "rev_elem.find.find"], "function", ["None"], ["", "def", "get_contributor", "(", "rev_elem", ")", ":", "\n", "    ", "\"\"\"Given revision element return user data.\"\"\"", "\n", "\n", "contributor_elem", "=", "rev_elem", ".", "find", "(", "CONTRIBUTOR_TAG", ")", "\n", "if", "contributor_elem", "is", "not", "None", ":", "\n", "        ", "id_elem", "=", "contributor_elem", ".", "find", "(", "ID_TAG", ")", "\n", "if", "id_elem", "is", "not", "None", ":", "# registered user with id", "\n", "            ", "if", "id_elem", ".", "text", "==", "\"0\"", ":", "\n", "                ", "if", "contributor_elem", ".", "find", "(", "USERNAME_TAG", ")", ".", "text", "is", "not", "None", ":", "\n", "                    ", "return", "(", "\"r\"", "+", "id_elem", ".", "text", "+", "\"|\"", "+", "contributor_elem", ".", "find", "(", "USERNAME_TAG", ")", ".", "text", ",", "\n", "contributor_elem", ".", "find", "(", "USERNAME_TAG", ")", ".", "text", ")", "\n", "", "else", ":", "\n", "                    ", "return", "None", ",", "None", "\n", "", "", "else", ":", "\n", "                ", "return", "(", "\"r\"", "+", "id_elem", ".", "text", ",", "\n", "contributor_elem", ".", "find", "(", "USERNAME_TAG", ")", ".", "text", ")", "\n", "\n", "", "", "ip_elem", "=", "contributor_elem", ".", "find", "(", "IP_TAG", ")", "\n", "if", "ip_elem", "is", "not", "None", ":", "# unregistered user with ip", "\n", "            ", "return", "(", "\"u\"", "+", "ip_elem", ".", "text", ",", "\"-\"", ")", "\n", "\n", "# no id data (probably due to account deletion)", "\n", "", "", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.article_count.process_user_stats": [[94, 120], ["set", "article_elem.iter", "article_count.get_contributor", "calendar.timegm", "datetime.datetime.strptime().timetuple", "min", "max", "set.add", "set.add", "datetime.datetime.strptime", "rev_elem.find"], "function", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.article_count.get_contributor"], ["", "def", "process_user_stats", "(", "article_elem", ")", ":", "\n", "    ", "editors", "=", "set", "(", ")", "\n", "for", "rev_elem", "in", "article_elem", ".", "iter", "(", "REVISION_TAG", ")", ":", "\n", "        ", "contr_id", ",", "contr_name", "=", "get_contributor", "(", "rev_elem", ")", "\n", "\n", "# ignore deleted users", "\n", "if", "contr_id", "is", "not", "None", ":", "\n", "            ", "date_edit_ts", "=", "calendar", ".", "timegm", "(", "datetime", ".", "datetime", ".", "strptime", "(", "rev_elem", ".", "find", "(", "TIMESTAMP_TAG", ")", ".", "text", ",", "\"%Y-%m-%dT%H:%M:%SZ\"", ")", "\n", ".", "timetuple", "(", ")", ")", "\n", "\n", "if", "contr_id", "in", "user_stats", ":", "\n", "                ", "name", ",", "first_edit", ",", "last_edit", ",", "edits", ",", "articles", "=", "user_stats", "[", "contr_id", "]", "\n", "\n", "first_edit", "=", "min", "(", "first_edit", ",", "date_edit_ts", ")", "\n", "last_edit", "=", "max", "(", "last_edit", ",", "date_edit_ts", ")", "\n", "\n", "if", "contr_id", "not", "in", "editors", ":", "\n", "                    ", "editors", ".", "add", "(", "contr_id", ")", "\n", "articles", "+=", "1", "\n", "\n", "", "edits", "+=", "1", "\n", "\n", "user_stats", "[", "contr_id", "]", "=", "(", "contr_name", ",", "first_edit", ",", "last_edit", ",", "edits", ",", "articles", ")", "\n", "", "else", ":", "\n", "                ", "user_stats", "[", "contr_id", "]", "=", "(", "contr_name", ",", "date_edit_ts", ",", "date_edit_ts", ",", "1", ",", "1", ")", "\n", "editors", ".", "add", "(", "contr_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.article_count.process_article_stats": [[122, 138], ["set", "int", "article_elem.iter", "print", "article_elem.find", "article_count.get_contributor", "set.add", "article_elem.find", "len"], "function", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.article_count.get_contributor"], ["", "", "", "", "def", "process_article_stats", "(", "article_elem", ")", ":", "\n", "    ", "editors", "=", "set", "(", ")", "\n", "n_edits", "=", "0", "\n", "\n", "article_name", "=", "article_elem", ".", "find", "(", "TITLE_TAG", ")", ".", "text", "\n", "article_id", "=", "int", "(", "article_elem", ".", "find", "(", "ID_TAG", ")", ".", "text", ")", "\n", "\n", "for", "rev_elem", "in", "article_elem", ".", "iter", "(", "REVISION_TAG", ")", ":", "\n", "        ", "contr_id", ",", "contr_name", "=", "get_contributor", "(", "rev_elem", ")", "\n", "if", "contr_id", "is", "None", ":", "\n", "            ", "contr_id", "=", "\"-\"", "\n", "\n", "", "editors", ".", "add", "(", "contr_id", ")", "\n", "n_edits", "+=", "1", "\n", "\n", "", "print", "(", "\"{}#{}#{}#{}\"", ".", "format", "(", "article_id", ",", "article_name", ",", "n_edits", ",", "len", "(", "editors", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.combine_users.parse_line": [[9, 13], ["line.strip().split", "int", "int", "int", "int", "line.strip"], "function", ["None"], ["def", "parse_line", "(", "line", ")", ":", "\n", "    ", "idx", ",", "name", ",", "first_edit", ",", "last_edit", ",", "n_edits", ",", "n_arts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"#\"", ")", "\n", "return", "(", "idx", ",", "name", ",", "\n", "int", "(", "first_edit", ")", ",", "int", "(", "last_edit", ")", ",", "int", "(", "n_edits", ")", ",", "int", "(", "n_arts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.combine_users.main": [[15, 33], ["dict", "dict.items", "print", "open", "line.strip().split", "map", "min", "max", "line.strip", "str"], "function", ["None"], ["", "def", "main", "(", "files", ")", ":", "\n", "    ", "data", "=", "dict", "(", ")", "\n", "for", "path", "in", "files", ":", "\n", "        ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "(", "idx", ",", "name", ",", "first_edit", ",", "last_edit", ",", "n_edits", ",", "n_arts", ")", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"#\"", ")", "\n", "first_edit", ",", "last_edit", ",", "n_edits", ",", "n_arts", "=", "map", "(", "\n", "int", ",", "(", "first_edit", ",", "last_edit", ",", "n_edits", ",", "n_arts", ")", ")", "\n", "if", "idx", "not", "in", "data", ":", "\n", "                    ", "data", "[", "idx", "]", "=", "[", "name", ",", "first_edit", ",", "last_edit", ",", "n_edits", ",", "n_arts", "]", "\n", "", "else", ":", "\n", "                    ", "data", "[", "idx", "]", "[", "0", "]", "=", "name", "\n", "data", "[", "idx", "]", "[", "1", "]", "=", "min", "(", "data", "[", "idx", "]", "[", "1", "]", ",", "first_edit", ")", "\n", "data", "[", "idx", "]", "[", "2", "]", "=", "max", "(", "data", "[", "idx", "]", "[", "2", "]", ",", "last_edit", ")", "\n", "data", "[", "idx", "]", "[", "3", "]", "+=", "n_edits", "\n", "data", "[", "idx", "]", "[", "4", "]", "+=", "n_arts", "\n", "", "", "", "", "for", "idx", ",", "elems", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "\"{}#{}\"", ".", "format", "(", "idx", ",", "\"#\"", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "elems", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.combine_users._parse_args": [[35, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "_parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"files\"", ",", "nargs", "=", "\"+\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.process_wikidump_json.main": [[14, 19], ["[].items", "open", "json.load", "print", "URL_TEMPLATE.format"], "function", ["None"], ["def", "main", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "for", "name", ",", "obj", "in", "data", "[", "\"jobs\"", "]", "[", "\"metahistorybz2dump\"", "]", "[", "\"files\"", "]", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "URL_TEMPLATE", ".", "format", "(", "obj", "[", "\"url\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.process_wikidump_json._parse_args": [[21, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "_parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"path\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.compute_quality.distance": [[56, 62], ["max", "len", "len", "len", "len", "edlib.align"], "function", ["None"], ["def", "distance", "(", "s1", ",", "s2", ")", ":", "\n", "    ", "\"\"\"Compute the Levenshtein edit distance between two strings.\"\"\"", "\n", "if", "len", "(", "s1", ")", "==", "0", "or", "len", "(", "s2", ")", "==", "0", ":", "\n", "        ", "return", "max", "(", "len", "(", "s1", ")", ",", "len", "(", "s2", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "edlib", ".", "align", "(", "s1", ",", "s2", ")", "[", "\"editDistance\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.compute_quality.process_edit": [[64, 88], ["compute_quality.distance", "q.put", "range", "len", "len", "len", "len", "calendar.timegm", "timestamps_upcoming[].timetuple", "compute_quality.distance", "compute_quality.distance"], "function", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.compute_quality.distance", "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.compute_quality.distance", "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.compute_quality.distance"], ["", "", "def", "process_edit", "(", "q", ",", "editid", ",", "userid", ",", "articleid", ",", "timestamp", ",", "text_prev", ",", "text_final", ",", "\n", "text_upcoming", ",", "timestamps_upcoming", ",", "split_threshold", ")", ":", "\n", "    ", "\"\"\"Produces the entry for a single edit, for multithreaded use.\"\"\"", "\n", "quality", "=", "0", "\n", "delta_edit", "=", "distance", "(", "text_prev", ",", "text_final", ")", "\n", "\n", "restrict_computation", "=", "(", "split_threshold", "is", "not", "None", ")", "and", "(", "timestamp", "<", "split_threshold", ")", "\n", "future_edits", "=", "0", "\n", "\n", "if", "delta_edit", ">", "0", "and", "len", "(", "text_upcoming", ")", ">", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "text_upcoming", ")", ")", ":", "\n", "            ", "if", "(", "not", "restrict_computation", ")", "or", "calendar", ".", "timegm", "(", "timestamps_upcoming", "[", "i", "]", ".", "timetuple", "(", ")", ")", "<", "split_threshold", ":", "\n", "                ", "quality", "+=", "(", "distance", "(", "text_prev", ",", "text_upcoming", "[", "i", "]", ")", "-", "distance", "(", "text_final", ",", "text_upcoming", "[", "i", "]", ")", ")", "/", "delta_edit", "\n", "future_edits", "+=", "1", "\n", "\n", "", "", "if", "future_edits", ">", "0", ":", "\n", "            ", "quality", "/=", "future_edits", "\n", "\n", "", "", "q", ".", "put", "(", "(", "editid", ",", "timestamp", ",", "articleid", ",", "userid", ",", "quality", ",", "delta_edit", ",", "\n", "len", "(", "text_prev", ")", ",", "len", "(", "text_final", ")", ",", "future_edits", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.make_batch.is_disambiguation_page": [[42, 64], ["elem.iter", "disambiguation_tags.values"], "function", ["None"], ["", "def", "is_disambiguation_page", "(", "elem", ",", "lang", "=", "None", ")", ":", "\n", "    ", "\"\"\"Given an xml element, decide if disambiguition page.\"\"\"", "\n", "\n", "# TODO can distiguish these tags better", "\n", "disambiguation_tags", "=", "{", "\"simple\"", ":", "[", "\"{{disambig}}\"", "]", ",", "\n", "\"bar\"", ":", "[", "\"{{Begriffskl\u00e4rung}}\"", "]", ",", "\n", "\"tr\"", ":", "[", "\"{{anlam ayr\u0131m\u0131}}\"", "]", ",", "\n", "\"en\"", ":", "[", "\"{{Disambiguation\"", ",", "\"{{disambiguation\"", ",", "\"disambiguation}}\"", "]", "}", "\n", "\n", "tags", "=", "[", "]", "\n", "if", "lang", "is", "None", ":", "\n", "        ", "tags", "=", "[", "item", "for", "sublist", "in", "disambiguation_tags", ".", "values", "(", ")", "for", "item", "in", "sublist", "]", "\n", "", "else", ":", "\n", "        ", "tags", "=", "disambiguation_tags", "[", "lang", "]", "\n", "\n", "", "for", "text_elem", "in", "elem", ".", "iter", "(", "tag", "=", "TEXT_TAG", ")", ":", "\n", "        ", "if", "text_elem", ".", "text", "is", "not", "None", ":", "\n", "            ", "for", "tag", "in", "tags", ":", "\n", "                ", "if", "tag", "in", "text_elem", ".", "text", ":", "\n", "                    ", "return", "True", "\n", "\n", "", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.collect_ores.get_revids": [[24, 31], ["list", "set", "open", "json.loads", "list.extend", "line.strip", "json.loads.keys"], "function", ["None"], ["def", "get_revids", "(", "path", ")", ":", "\n", "    ", "revids", "=", "list", "(", ")", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "data", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ")", "\n", "revids", ".", "extend", "(", "data", ".", "keys", "(", ")", ")", "\n", "", "", "return", "set", "(", "revids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.collect_ores.main": [[33, 54], ["set", "range", "open", "collect_ores.get_revids", "list", "list", "len", "URL_TEMPLATE.format", "print", "line.strip().split", "list.add", "filter", "urllib.request.urlopen", "json.loads", "json.dumps", "f.read().decode", "line.strip", "f.read"], "function", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.collect_ores.get_revids"], ["", "def", "main", "(", "lang", ",", "testfile", ",", "chunk_size", ",", "model", ",", "ignore_from", ")", ":", "\n", "    ", "if", "model", "is", "None", ":", "\n", "        ", "model", "=", "\"|\"", ".", "join", "(", "MODELS", ")", "\n", "", "revids", "=", "set", "(", ")", "\n", "with", "open", "(", "testfile", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "revid", ",", "_", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"#\"", ",", "1", ")", "\n", "revids", ".", "add", "(", "revid", ")", "\n", "", "", "if", "ignore_from", "is", "not", "None", ":", "\n", "        ", "ignored", "=", "get_revids", "(", "ignore_from", ")", "\n", "revids", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "not", "in", "ignored", ",", "revids", ")", ")", "\n", "", "else", ":", "\n", "        ", "revids", "=", "list", "(", "revids", ")", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "revids", ")", ",", "chunk_size", ")", ":", "\n", "        ", "chunk", "=", "revids", "[", "i", ":", "i", "+", "chunk_size", "]", "\n", "rids", "=", "\"|\"", ".", "join", "(", "r", "for", "r", "in", "chunk", ")", "\n", "url", "=", "URL_TEMPLATE", ".", "format", "(", "lang", "=", "lang", ",", "revids", "=", "rids", ",", "models", "=", "model", ")", "\n", "with", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", "as", "f", ":", "\n", "            ", "res", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ".", "decode", "(", ")", ")", "\n", "", "scores", "=", "res", "[", "lang", "]", "[", "\"scores\"", "]", "\n", "print", "(", "json", ".", "dumps", "(", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.collect_ores._parse_args": [[56, 64], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "_parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"lang\"", ")", "\n", "parser", ".", "add_argument", "(", "\"testfile\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--chunk-size\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "choices", "=", "MODELS", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-from\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.ores.main": [[34, 43], ["URL_TEMPLATE.format", "json.dumps", "print", "urllib.request.urlopen", "json.loads", "str", "f.read().decode", "f.read"], "function", ["None"], ["def", "main", "(", "lang", ",", "revisions", ",", "model", ")", ":", "\n", "    ", "revids", "=", "\"|\"", ".", "join", "(", "str", "(", "r", ")", "for", "r", "in", "revisions", ")", "\n", "if", "model", "is", "None", ":", "\n", "        ", "model", "=", "\"|\"", ".", "join", "(", "MODELS", ")", "\n", "", "url", "=", "URL_TEMPLATE", ".", "format", "(", "lang", "=", "lang", ",", "revids", "=", "revids", ",", "models", "=", "model", ")", "\n", "with", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ".", "decode", "(", ")", ")", "\n", "", "formatted", "=", "json", ".", "dumps", "(", "data", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "print", "(", "formatted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.ores._parse_args": [[45, 51], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "_parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"lang\"", ")", "\n", "parser", ".", "add_argument", "(", "\"revisions\"", ",", "nargs", "=", "\"+\"", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "choices", "=", "MODELS", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.process_raw.process_users": [[4, 12], ["open", "print", "line.startswith"], "function", ["None"], ["def", "process_users", "(", "args", ")", ":", "\n", "    ", "next_id", "=", "0", "\n", "with", "open", "(", "args", ".", "path", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "args", ".", "ignore_unregistered", "and", "line", ".", "startswith", "(", "\"u\"", ")", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"{}#{}\"", ".", "format", "(", "next_id", ",", "line", ")", ",", "end", "=", "\"\"", ")", "\n", "next_id", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.process_raw.process_articles": [[14, 18], ["open", "enumerate", "print"], "function", ["None"], ["", "", "", "def", "process_articles", "(", "args", ")", ":", "\n", "    ", "with", "open", "(", "args", ".", "path", ")", "as", "f", ":", "\n", "        ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "print", "(", "\"{}#{}\"", ".", "format", "(", "i", ",", "line", ")", ",", "end", "=", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.process_raw.process_qualities": [[20, 42], ["dict", "dict", "open", "open", "open", "line.strip().split", "int", "line.strip().split", "int", "line.strip().split", "print", "line.strip", "line.strip", "line.strip", "int", "float"], "function", ["None"], ["", "", "", "def", "process_qualities", "(", "args", ")", ":", "\n", "    ", "wiki2uid", "=", "dict", "(", ")", "\n", "with", "open", "(", "args", ".", "users", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "uid", ",", "wiki_id", ",", "_", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"#\"", ",", "2", ")", "\n", "wiki2uid", "[", "wiki_id", "]", "=", "int", "(", "uid", ")", "\n", "", "", "wiki2aid", "=", "dict", "(", ")", "\n", "with", "open", "(", "args", ".", "articles", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "aid", ",", "wiki_id", ",", "_", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"#\"", ",", "2", ")", "\n", "wiki2aid", "[", "wiki_id", "]", "=", "int", "(", "aid", ")", "\n", "", "", "with", "open", "(", "args", ".", "path", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "_", ",", "ts", ",", "wiki_aid", ",", "wiki_uid", ",", "q", ",", "_", ",", "_", ",", "_", ",", "n_judges", "=", "(", "line", "\n", ".", "strip", "(", ")", ".", "split", "(", "\"#\"", ")", ")", "\n", "if", "(", "(", "wiki_uid", "not", "in", "wiki2uid", ")", "\n", "or", "(", "int", "(", "n_judges", ")", "<", "args", ".", "ignore_less_than", ")", ")", ":", "\n", "                ", "continue", "\n", "", "uid", "=", "wiki2uid", "[", "wiki_uid", "]", "\n", "aid", "=", "wiki2aid", "[", "wiki_aid", "]", "\n", "q", "=", "(", "float", "(", "q", ")", "+", "1", ")", "/", "2", "\n", "print", "(", "\"{}#{}#{}#{}\"", ".", "format", "(", "uid", ",", "aid", ",", "q", ",", "ts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.process_raw._parse_args": [[44, 64], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.set_defaults", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.set_defaults", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.set_defaults", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "", "def", "_parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "subparsers", "=", "parser", ".", "add_subparsers", "(", ")", "\n", "# Subparser for users file.", "\n", "sp_users", "=", "subparsers", ".", "add_parser", "(", "\"users\"", ")", "\n", "sp_users", ".", "add_argument", "(", "\"path\"", ")", "\n", "sp_users", ".", "add_argument", "(", "\"--ignore-unregistered\"", ",", "action", "=", "\"store_true\"", ")", "\n", "sp_users", ".", "set_defaults", "(", "func", "=", "process_users", ")", "\n", "# Subparser for articles file.", "\n", "sp_articles", "=", "subparsers", ".", "add_parser", "(", "\"articles\"", ")", "\n", "sp_articles", ".", "add_argument", "(", "\"path\"", ")", "\n", "sp_articles", ".", "set_defaults", "(", "func", "=", "process_articles", ")", "\n", "# Subparser for qualities file.", "\n", "sp_quals", "=", "subparsers", ".", "add_parser", "(", "\"qualities\"", ")", "\n", "sp_quals", ".", "add_argument", "(", "\"path\"", ")", "\n", "sp_quals", ".", "add_argument", "(", "\"--users\"", ",", "required", "=", "True", ")", "\n", "sp_quals", ".", "add_argument", "(", "\"--articles\"", ",", "required", "=", "True", ")", "\n", "sp_quals", ".", "add_argument", "(", "\"--ignore-less-than\"", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "sp_quals", ".", "set_defaults", "(", "func", "=", "process_qualities", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.wiki_query.read_json": [[24, 28], ["urllib.request.urlopen", "json.loads", "url.read().decode", "url.read"], "function", ["None"], ["def", "read_json", "(", "query_url", ")", ":", "\n", "    ", "with", "urllib", ".", "request", ".", "urlopen", "(", "query_url", ")", "as", "url", ":", "\n", "        ", "data", "=", "json", ".", "loads", "(", "url", ".", "read", "(", ")", ".", "decode", "(", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.wiki_query.get_edit_info": [[30, 40], ["isinstance", "wiki_query.read_json", "str"], "function", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.wiki_query.read_json"], ["", "", "def", "get_edit_info", "(", "edit_ids", ",", "lang", "=", "\"simple\"", ")", ":", "\n", "    ", "\"\"\"Uses Wikipedia API to query json data from the internal id of an edit.\"\"\"", "\n", "if", "isinstance", "(", "edit_ids", ",", "int", ")", ":", "\n", "        ", "query_url", "=", "r\"https://{0}.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&revids={1}\"", ".", "format", "(", "lang", ",", "edit_ids", ")", "\n", "", "else", ":", "\n", "        ", "query_url", "=", "r\"https://{0}.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&revids={1}\"", ".", "format", "(", "lang", ",", "\"|\"", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "edit_ids", ")", ")", "\n", "\n", "", "return", "read_json", "(", "query_url", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.wiki_query.get_article_info": [[42, 52], ["isinstance", "wiki_query.read_json", "str"], "function", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.wiki_query.read_json"], ["", "def", "get_article_info", "(", "article_ids", ",", "lang", "=", "\"simple\"", ")", ":", "\n", "    ", "\"\"\"Uses Wikipedia API to query json data from the internal id of an article page.\"\"\"", "\n", "if", "isinstance", "(", "article_ids", ",", "int", ")", ":", "\n", "        ", "query_url", "=", "r\"https://{0}.wikipedia.org/w/api.php?action=query&format=json&prop=info&pageids={1}&inprop=url\"", ".", "format", "(", "lang", ",", "article_ids", ")", "\n", "", "else", ":", "\n", "        ", "query_url", "=", "r\"https://{0}.wikipedia.org/w/api.php?action=query&format=json&prop=info&pageids={1}&inprop=url\"", ".", "format", "(", "lang", ",", "\"|\"", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "article_ids", ")", ")", "\n", "\n", "", "return", "read_json", "(", "query_url", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.wiki_query.get_user_info": [[54, 66], ["isinstance", "wiki_query.read_json", "str"], "function", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.wiki_query.read_json"], ["", "def", "get_user_info", "(", "user_ids", ",", "lang", "=", "\"simple\"", ")", ":", "\n", "    ", "\"\"\"Uses Wikipedia API to query json data from the internal id of a user.\"\"\"", "\n", "if", "isinstance", "(", "user_ids", ",", "int", ")", ":", "\n", "        ", "query_url", "=", "r\"https://{0}.wikipedia.org/w/api.php?action=query&format=json&list=users&ususers={1}\"", "r\"&usprop=groups|editcount|gender|registration\"", ".", "format", "(", "lang", ",", "user_ids", ")", "\n", "", "else", ":", "\n", "        ", "query_url", "=", "r\"https://{0}.wikipedia.org/w/api.php?action=query&format=json&list=users&ususerids={1}\"", "r\"&usprop=groups|editcount|gender|registration\"", ".", "format", "(", "lang", ",", "\"|\"", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "user_ids", ")", ")", "\n", "\n", "", "return", "read_json", "(", "query_url", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.wiki_query.get_user_info_from_name": [[68, 79], ["isinstance", "wiki_query.read_json"], "function", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.wiki_query.read_json"], ["", "def", "get_user_info_from_name", "(", "names", ",", "lang", "=", "\"simple\"", ")", ":", "\n", "    ", "\"\"\"Uses Wikipedia API to query json data from the name of a user.\"\"\"", "\n", "if", "isinstance", "(", "names", ",", "str", ")", ":", "\n", "        ", "query_url", "=", "r\"https://{0}.wikipedia.org/w/api.php?action=query&format=json&list=users&ususers={1}\"", "r\"&usprop=groups|editcount|gender|registration\"", ".", "format", "(", "lang", ",", "names", ")", "\n", "", "else", ":", "\n", "        ", "names", "=", "\"|\"", ".", "join", "(", "names", ")", "\n", "query_url", "=", "r\"https://{0}.wikipedia.org/w/api.php?action=query&format=json&list=users&ususers={1}\"", "r\"&usprop=groups|editcount|gender|registration\"", ".", "format", "(", "lang", ",", "names", ")", "\n", "\n", "", "return", "read_json", "(", "query_url", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.article_count_condor.main": [[59, 64], ["print", "glob.glob", "HEADER.format", "os.path.join", "os.path.abspath", "print", "JOB_TPL.format"], "function", ["None"], ["def", "main", "(", "what", ",", "input_dir", ")", ":", "\n", "    ", "print", "(", "HEADER", ".", "format", "(", "executable", "=", "PYTHON", ")", ")", "\n", "for", "path", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "\"*xml*\"", ")", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "abspath", "(", "path", ")", "\n", "print", "(", "JOB_TPL", ".", "format", "(", "what", "=", "what", ",", "xml_path", "=", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.article_count_condor._parse_args": [[66, 71], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "_parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"what\"", ",", "choices", "=", "[", "\"articles\"", ",", "\"users\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"input_dir\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.compute_quality_condor.main": [[43, 48], ["print", "glob.glob", "HEADER.format", "os.path.join", "os.path.abspath", "print", "JOB_TPL.format"], "function", ["None"], ["def", "main", "(", "input_dir", ",", "threshold", ")", ":", "\n", "    ", "print", "(", "HEADER", ".", "format", "(", "executable", "=", "PYTHON", ")", ")", "\n", "for", "path", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "\"*xml*\"", ")", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "abspath", "(", "path", ")", "\n", "print", "(", "JOB_TPL", ".", "format", "(", "xml_path", "=", "path", ",", "threshold", "=", "threshold", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.scripts.compute_quality_condor._parse_args": [[50, 55], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "_parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"input_dir\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--threshold\"", ",", "default", "=", "\"\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.word_char_attention.AttLayer.__init__": [[235, 240], ["initializers.get", "Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "attention_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "init", "=", "initializers", ".", "get", "(", "'normal'", ")", "\n", "self", ".", "supports_masking", "=", "True", "\n", "self", ".", "attention_dim", "=", "attention_dim", "\n", "super", "(", "AttLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.word_char_attention.AttLayer.build": [[241, 248], ["K.variable", "K.variable", "K.variable", "super().build", "len", "word_char_attention.AttLayer.init", "word_char_attention.AttLayer.init", "word_char_attention.AttLayer.init"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "len", "(", "input_shape", ")", "==", "3", "\n", "self", ".", "W", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "input_shape", "[", "-", "1", "]", ",", "self", ".", "attention_dim", ")", ")", ")", "\n", "self", ".", "b", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "self", ".", "attention_dim", ",", ")", ")", ")", "\n", "self", ".", "u", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "self", ".", "attention_dim", ",", "1", ")", ")", ")", "\n", "self", ".", "trainable_weights", "=", "[", "self", ".", "W", ",", "self", ".", "b", ",", "self", ".", "u", "]", "\n", "super", "(", "AttLayer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.word_char_attention.AttLayer.compute_mask": [[249, 251], ["None"], "methods", ["None"], ["", "def", "compute_mask", "(", "self", ",", "inputs", ",", "mask", "=", "None", ")", ":", "\n", "        ", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.word_char_attention.AttLayer.call": [[252, 269], ["K.tanh", "K.dot", "K.squeeze", "K.exp", "K.cast", "K.expand_dims", "K.sum", "K.bias_add", "K.cast", "K.floatx", "K.dot", "K.floatx", "K.sum", "K.epsilon"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "# size of x :[batch_size, sel_len, attention_dim]", "\n", "# size of u :[batch_size, attention_dim]", "\n", "# uit = tanh(xW+b)", "\n", "        ", "uit", "=", "K", ".", "tanh", "(", "K", ".", "bias_add", "(", "K", ".", "dot", "(", "x", ",", "self", ".", "W", ")", ",", "self", ".", "b", ")", ")", "\n", "ait", "=", "K", ".", "dot", "(", "uit", ",", "self", ".", "u", ")", "\n", "ait", "=", "K", ".", "squeeze", "(", "ait", ",", "-", "1", ")", "\n", "ait", "=", "K", ".", "exp", "(", "ait", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Cast the mask to floatX to avoid float64 upcasting in theano", "\n", "            ", "ait", "*=", "K", ".", "cast", "(", "mask", ",", "K", ".", "floatx", "(", ")", ")", "\n", "", "ait", "/=", "K", ".", "cast", "(", "K", ".", "sum", "(", "ait", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "K", ".", "epsilon", "(", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "ait", "=", "K", ".", "expand_dims", "(", "ait", ")", "\n", "weighted_input", "=", "x", "*", "ait", "\n", "output", "=", "K", ".", "sum", "(", "weighted_input", ",", "axis", "=", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.word_char_attention.AttLayer.compute_output_shape": [[270, 272], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.data_sorter.datapts_counter": [[20, 29], ["open", "open.read", "lines.split.split", "len", "float", "range", "range", "x.strip", "len", "len"], "function", ["None"], ["def", "datapts_counter", "(", "filename", ")", ":", "\n", "    ", "file", "=", "open", "(", "filename", ",", "\"r\"", ")", "\n", "lines", "=", "file", ".", "read", "(", ")", "\n", "lines", "=", "lines", ".", "split", "(", "\"####SCORE###\"", ")", "\n", "train_data", "=", "[", "lines", "[", "x", "]", "for", "x", "in", "range", "(", "len", "(", "lines", ")", ")", "if", "x", "%", "2", "==", "0", "]", "\n", "y_labels", "=", "[", "lines", "[", "x", "]", "for", "x", "in", "range", "(", "len", "(", "lines", ")", ")", "if", "x", "%", "2", "!=", "0", "]", "\n", "y_labels", "=", "[", "float", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "y_labels", "]", "\n", "train_data", "=", "train_data", "[", ":", "-", "1", "]", "\n", "return", "len", "(", "train_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.bilstm_word.AttLayer.__init__": [[247, 252], ["initializers.get", "Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "attention_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "init", "=", "initializers", ".", "get", "(", "'normal'", ")", "\n", "self", ".", "supports_masking", "=", "True", "\n", "self", ".", "attention_dim", "=", "attention_dim", "\n", "super", "(", "AttLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.bilstm_word.AttLayer.build": [[253, 260], ["K.variable", "K.variable", "K.variable", "super().build", "len", "bilstm_word.AttLayer.init", "bilstm_word.AttLayer.init", "bilstm_word.AttLayer.init"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "len", "(", "input_shape", ")", "==", "3", "\n", "self", ".", "W", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "input_shape", "[", "-", "1", "]", ",", "self", ".", "attention_dim", ")", ")", ")", "\n", "self", ".", "b", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "self", ".", "attention_dim", ",", ")", ")", ")", "\n", "self", ".", "u", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "self", ".", "attention_dim", ",", "1", ")", ")", ")", "\n", "self", ".", "trainable_weights", "=", "[", "self", ".", "W", ",", "self", ".", "b", ",", "self", ".", "u", "]", "\n", "super", "(", "AttLayer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.bilstm_word.AttLayer.compute_mask": [[261, 263], ["None"], "methods", ["None"], ["", "def", "compute_mask", "(", "self", ",", "inputs", ",", "mask", "=", "None", ")", ":", "\n", "        ", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.bilstm_word.AttLayer.call": [[264, 281], ["K.tanh", "K.dot", "K.squeeze", "K.exp", "K.cast", "K.expand_dims", "K.sum", "K.bias_add", "K.cast", "K.floatx", "K.dot", "K.floatx", "K.sum", "K.epsilon"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "# size of x :[batch_size, sel_len, attention_dim]", "\n", "# size of u :[batch_size, attention_dim]", "\n", "# uit = tanh(xW+b)", "\n", "        ", "uit", "=", "K", ".", "tanh", "(", "K", ".", "bias_add", "(", "K", ".", "dot", "(", "x", ",", "self", ".", "W", ")", ",", "self", ".", "b", ")", ")", "\n", "ait", "=", "K", ".", "dot", "(", "uit", ",", "self", ".", "u", ")", "\n", "ait", "=", "K", ".", "squeeze", "(", "ait", ",", "-", "1", ")", "\n", "ait", "=", "K", ".", "exp", "(", "ait", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Cast the mask to floatX to avoid float64 upcasting in theano", "\n", "            ", "ait", "*=", "K", ".", "cast", "(", "mask", ",", "K", ".", "floatx", "(", ")", ")", "\n", "", "ait", "/=", "K", ".", "cast", "(", "K", ".", "sum", "(", "ait", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "K", ".", "epsilon", "(", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "ait", "=", "K", ".", "expand_dims", "(", "ait", ")", "\n", "weighted_input", "=", "x", "*", "ait", "\n", "output", "=", "K", ".", "sum", "(", "weighted_input", ",", "axis", "=", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.bilstm_word.AttLayer.compute_output_shape": [[282, 284], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.bilstm_char.AttLayer.__init__": [[249, 254], ["initializers.get", "Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "attention_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "init", "=", "initializers", ".", "get", "(", "'normal'", ")", "\n", "self", ".", "supports_masking", "=", "True", "\n", "self", ".", "attention_dim", "=", "attention_dim", "\n", "super", "(", "AttLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.bilstm_char.AttLayer.build": [[255, 262], ["K.variable", "K.variable", "K.variable", "super().build", "len", "bilstm_char.AttLayer.init", "bilstm_char.AttLayer.init", "bilstm_char.AttLayer.init"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "len", "(", "input_shape", ")", "==", "3", "\n", "self", ".", "W", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "input_shape", "[", "-", "1", "]", ",", "self", ".", "attention_dim", ")", ")", ")", "\n", "self", ".", "b", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "self", ".", "attention_dim", ",", ")", ")", ")", "\n", "self", ".", "u", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "self", ".", "attention_dim", ",", "1", ")", ")", ")", "\n", "self", ".", "trainable_weights", "=", "[", "self", ".", "W", ",", "self", ".", "b", ",", "self", ".", "u", "]", "\n", "super", "(", "AttLayer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.bilstm_char.AttLayer.compute_mask": [[263, 265], ["None"], "methods", ["None"], ["", "def", "compute_mask", "(", "self", ",", "inputs", ",", "mask", "=", "None", ")", ":", "\n", "        ", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.bilstm_char.AttLayer.call": [[266, 283], ["K.tanh", "K.dot", "K.squeeze", "K.exp", "K.cast", "K.expand_dims", "K.sum", "K.bias_add", "K.cast", "K.floatx", "K.dot", "K.floatx", "K.sum", "K.epsilon"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "# size of x :[batch_size, sel_len, attention_dim]", "\n", "# size of u :[batch_size, attention_dim]", "\n", "# uit = tanh(xW+b)", "\n", "        ", "uit", "=", "K", ".", "tanh", "(", "K", ".", "bias_add", "(", "K", ".", "dot", "(", "x", ",", "self", ".", "W", ")", ",", "self", ".", "b", ")", ")", "\n", "ait", "=", "K", ".", "dot", "(", "uit", ",", "self", ".", "u", ")", "\n", "ait", "=", "K", ".", "squeeze", "(", "ait", ",", "-", "1", ")", "\n", "ait", "=", "K", ".", "exp", "(", "ait", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Cast the mask to floatX to avoid float64 upcasting in theano", "\n", "            ", "ait", "*=", "K", ".", "cast", "(", "mask", ",", "K", ".", "floatx", "(", ")", ")", "\n", "", "ait", "/=", "K", ".", "cast", "(", "K", ".", "sum", "(", "ait", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "K", ".", "epsilon", "(", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "ait", "=", "K", ".", "expand_dims", "(", "ait", ")", "\n", "weighted_input", "=", "x", "*", "ait", "\n", "output", "=", "K", ".", "sum", "(", "weighted_input", ",", "axis", "=", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.bilstm_char.AttLayer.compute_output_shape": [[284, 286], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.test.AttLayer.__init__": [[63, 68], ["initializers.get", "Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "attention_dim", "=", "100", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "init", "=", "initializers", ".", "get", "(", "'normal'", ")", "\n", "self", ".", "supports_masking", "=", "True", "\n", "self", ".", "attention_dim", "=", "attention_dim", "\n", "super", "(", "AttLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.test.AttLayer.build": [[69, 76], ["K.variable", "K.variable", "K.variable", "super().build", "len", "test.AttLayer.init", "test.AttLayer.init", "test.AttLayer.init"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "len", "(", "input_shape", ")", "==", "3", "\n", "self", ".", "W", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "input_shape", "[", "-", "1", "]", ",", "self", ".", "attention_dim", ")", ")", ")", "\n", "self", ".", "b", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "self", ".", "attention_dim", ",", ")", ")", ")", "\n", "self", ".", "u", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "self", ".", "attention_dim", ",", "1", ")", ")", ")", "\n", "self", ".", "trainable_weights", "=", "[", "self", ".", "W", ",", "self", ".", "b", ",", "self", ".", "u", "]", "\n", "super", "(", "AttLayer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.test.AttLayer.compute_mask": [[77, 79], ["None"], "methods", ["None"], ["", "def", "compute_mask", "(", "self", ",", "inputs", ",", "mask", "=", "None", ")", ":", "\n", "        ", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.test.AttLayer.call": [[80, 96], ["K.tanh", "K.dot", "K.squeeze", "K.exp", "K.cast", "K.expand_dims", "K.sum", "K.bias_add", "K.cast", "K.floatx", "K.dot", "K.floatx", "K.sum", "K.epsilon"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "# size of x :[batch_size, sel_len, attention_dim]", "\n", "# size of u :[batch_size, attention_dim]", "\n", "# uit = tanh(xW+b)", "\n", "        ", "uit", "=", "K", ".", "tanh", "(", "K", ".", "bias_add", "(", "K", ".", "dot", "(", "x", ",", "self", ".", "W", ")", ",", "self", ".", "b", ")", ")", "\n", "ait", "=", "K", ".", "dot", "(", "uit", ",", "self", ".", "u", ")", "\n", "ait", "=", "K", ".", "squeeze", "(", "ait", ",", "-", "1", ")", "\n", "ait", "=", "K", ".", "exp", "(", "ait", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Cast the mask to floatX to avoid float64 upcasting in theano", "\n", "            ", "ait", "*=", "K", ".", "cast", "(", "mask", ",", "K", ".", "floatx", "(", ")", ")", "\n", "", "ait", "/=", "K", ".", "cast", "(", "K", ".", "sum", "(", "ait", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "K", ".", "epsilon", "(", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "ait", "=", "K", ".", "expand_dims", "(", "ait", ")", "\n", "weighted_input", "=", "x", "*", "ait", "\n", "output", "=", "K", ".", "sum", "(", "weighted_input", ",", "axis", "=", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.test.AttLayer.compute_output_shape": [[97, 99], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.retrain_wc_att.AttLayer.__init__": [[246, 251], ["initializers.get", "Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "attention_dim", "=", "100", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "init", "=", "initializers", ".", "get", "(", "'normal'", ")", "\n", "self", ".", "supports_masking", "=", "True", "\n", "self", ".", "attention_dim", "=", "attention_dim", "\n", "super", "(", "AttLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.retrain_wc_att.AttLayer.build": [[252, 259], ["K.variable", "K.variable", "K.variable", "super().build", "len", "retrain_wc_att.AttLayer.init", "retrain_wc_att.AttLayer.init", "retrain_wc_att.AttLayer.init"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "len", "(", "input_shape", ")", "==", "3", "\n", "self", ".", "W", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "input_shape", "[", "-", "1", "]", ",", "self", ".", "attention_dim", ")", ")", ")", "\n", "self", ".", "b", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "self", ".", "attention_dim", ",", ")", ")", ")", "\n", "self", ".", "u", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "self", ".", "attention_dim", ",", "1", ")", ")", ")", "\n", "self", ".", "trainable_weights", "=", "[", "self", ".", "W", ",", "self", ".", "b", ",", "self", ".", "u", "]", "\n", "super", "(", "AttLayer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.retrain_wc_att.AttLayer.compute_mask": [[260, 262], ["None"], "methods", ["None"], ["", "def", "compute_mask", "(", "self", ",", "inputs", ",", "mask", "=", "None", ")", ":", "\n", "        ", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.retrain_wc_att.AttLayer.call": [[263, 279], ["K.tanh", "K.dot", "K.squeeze", "K.exp", "K.cast", "K.expand_dims", "K.sum", "K.bias_add", "K.cast", "K.floatx", "K.dot", "K.floatx", "K.sum", "K.epsilon"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "# size of x :[batch_size, sel_len, attention_dim]", "\n", "# size of u :[batch_size, attention_dim]", "\n", "# uit = tanh(xW+b)", "\n", "        ", "uit", "=", "K", ".", "tanh", "(", "K", ".", "bias_add", "(", "K", ".", "dot", "(", "x", ",", "self", ".", "W", ")", ",", "self", ".", "b", ")", ")", "\n", "ait", "=", "K", ".", "dot", "(", "uit", ",", "self", ".", "u", ")", "\n", "ait", "=", "K", ".", "squeeze", "(", "ait", ",", "-", "1", ")", "\n", "ait", "=", "K", ".", "exp", "(", "ait", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Cast the mask to floatX to avoid float64 upcasting in theano", "\n", "            ", "ait", "*=", "K", ".", "cast", "(", "mask", ",", "K", ".", "floatx", "(", ")", ")", "\n", "", "ait", "/=", "K", ".", "cast", "(", "K", ".", "sum", "(", "ait", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "K", ".", "epsilon", "(", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "ait", "=", "K", ".", "expand_dims", "(", "ait", ")", "\n", "weighted_input", "=", "x", "*", "ait", "\n", "output", "=", "K", ".", "sum", "(", "weighted_input", ",", "axis", "=", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.big_dataset.retrain_wc_att.AttLayer.compute_output_shape": [[280, 282], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.baselines.Classifiers.train_MLP": [[66, 91], ["print", "sklearn.neural_network.MLPClassifier", "sklearn.neural_network.MLPClassifier.fit", "sklearn.neural_network.MLPClassifier.predict", "print", "print", "print", "print", "sklearn.metrics.roc_curve", "print", "print", "y_test_1.append", "pred_1.append", "sklearn_crfsuite.metrics.flat_classification_report", "sklearn.metrics.roc_auc_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "str", "str", "sklearn.metrics.log_loss", "numpy.mean"], "function", ["None"], ["def", "train_MLP", "(", ")", ":", "\n", "\t", "print", "(", "\"MPL Starting\"", ")", "\n", "model", "=", "MLPClassifier", "(", "verbose", "=", "True", ",", "max_iter", "=", "1000", ")", "\n", "model", ".", "fit", "(", "new_train", ",", "labels", ")", "\n", "Y", "=", "model", ".", "predict", "(", "new_test", ")", "\n", "print", "(", "\"MLP \\n log_loss: \"", "+", "str", "(", "log_loss", "(", "truth", ",", "Y", ")", ")", ")", "\n", "print", "(", "\"MLP \\n Accuracy: \"", "+", "str", "(", "np", ".", "mean", "(", "truth", "==", "Y", ")", ")", ")", "\n", "\n", "y_test_1", "=", "[", "]", "\n", "for", "i", "in", "truth", ":", "\n", "\t    ", "y_test_1", ".", "append", "(", "[", "i", "]", ")", "\n", "\n", "", "pred_1", "=", "[", "]", "\n", "for", "i", "in", "Y", ":", "\n", "\t    ", "pred_1", ".", "append", "(", "[", "i", "]", ")", "\n", "\n", "", "sorted_labels", "=", "[", "-", "1", ",", "1", "]", "\n", "print", "(", "metrics", ".", "flat_classification_report", "(", "\n", "y_test_1", ",", "pred_1", ",", "labels", "=", "sorted_labels", ",", "digits", "=", "3", "\n", ")", ")", "\n", "\n", "print", "(", "roc_auc_score", "(", "truth", ",", "Y", ")", ")", "\n", "fpr", ",", "tpr", ",", "thresholds", "=", "roc_curve", "(", "truth", ",", "Y", ")", "\n", "print", "(", "precision_score", "(", "truth", ",", "Y", ")", ",", "recall_score", "(", "truth", ",", "Y", ")", ",", "fpr", "[", "0", "]", ",", "tpr", "[", "0", "]", ")", "\n", "print", "(", "\"\\n\\n ============= MLP ENDS ===============\\n\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.baselines.Classifiers.RF": [[93, 114], ["print", "sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.RandomForestClassifier.fit", "sklearn.ensemble.RandomForestClassifier.predict", "sklearn.metrics.f1_score", "print", "print", "y_test_1.append", "round", "round", "round", "pred_1.append", "pred_1.append", "sklearn.metrics.roc_auc_score", "sklearn.metrics.average_precision_score"], "function", ["None"], ["", "def", "RF", "(", ")", ":", "\n", "\t", "print", "(", "\"RF starts\"", ")", "\n", "model1", "=", "RandomForestClassifier", "(", ")", "\n", "model1", ".", "fit", "(", "new_train", ",", "labels", ")", "\n", "Y", "=", "model1", ".", "predict", "(", "new_test", ")", "\n", "\n", "y_test_1", "=", "[", "]", "\n", "for", "i", "in", "truth", ":", "\n", "\t    ", "y_test_1", ".", "append", "(", "[", "i", "]", ")", "\n", "\n", "", "pred_1", "=", "[", "]", "\n", "for", "i", "in", "Y", ":", "\n", "\t\t", "if", "(", "i", "<", "0", ")", ":", "\n", "\t\t\t", "pred_1", ".", "append", "(", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "pred_1", ".", "append", "(", "[", "1", "]", ")", "\n", "\n", "", "", "sorted_labels", "=", "[", "-", "1", ",", "1", "]", "\n", "wt_f1", "=", "f1_score", "(", "y_test_1", ",", "pred_1", ",", "labels", "=", "sorted_labels", ",", "pos_label", "=", "1", ",", "average", "=", "'weighted'", ")", "\n", "print", "(", "round", "(", "wt_f1", ",", "4", ")", ",", "round", "(", "roc_auc_score", "(", "truth", ",", "Y", ")", ",", "4", ")", ",", "round", "(", "average_precision_score", "(", "truth", ",", "Y", ")", ",", "4", ")", ")", "# Print weighted f1 score, AUCROC, AUPRC in order", "\n", "print", "(", "\"\\n\\n=============== RF ENDS==============\\n\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.baselines.Classifiers.DT": [[116, 139], ["print", "sklearn.tree.DecisionTreeClassifier", "clf.fit.fit", "clf.fit.predict", "print", "print", "print", "print", "sklearn.metrics.roc_curve", "print", "print", "y_test_1.append", "pred_1.append", "sklearn_crfsuite.metrics.flat_classification_report", "sklearn.metrics.roc_auc_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "str", "str", "sklearn.metrics.log_loss", "numpy.mean"], "function", ["None"], ["", "def", "DT", "(", ")", ":", "\n", "\t", "print", "(", "\"DT starts\"", ")", "\n", "clf", "=", "tree", ".", "DecisionTreeClassifier", "(", ")", "\n", "clf", "=", "clf", ".", "fit", "(", "new_train", ",", "labels", ")", "\n", "Y", "=", "clf", ".", "predict", "(", "new_test", ")", "\n", "print", "(", "\"\\nDecision \\n log_loss: \"", "+", "str", "(", "log_loss", "(", "truth", ",", "Y", ")", ")", ")", "\n", "print", "(", "\"\\nDecision \\n Accuracy: \"", "+", "str", "(", "np", ".", "mean", "(", "truth", "==", "Y", ")", ")", ")", "\n", "y_test_1", "=", "[", "]", "\n", "for", "i", "in", "truth", ":", "\n", "\t    ", "y_test_1", ".", "append", "(", "[", "i", "]", ")", "\n", "\n", "", "pred_1", "=", "[", "]", "\n", "for", "i", "in", "Y", ":", "\n", "\t    ", "pred_1", ".", "append", "(", "[", "i", "]", ")", "\n", "\n", "", "sorted_labels", "=", "[", "-", "1", ",", "1", "]", "\n", "print", "(", "metrics", ".", "flat_classification_report", "(", "\n", "y_test_1", ",", "pred_1", ",", "labels", "=", "sorted_labels", ",", "digits", "=", "3", "\n", ")", ")", "\n", "print", "(", "roc_auc_score", "(", "truth", ",", "Y", ")", ")", "\n", "fpr", ",", "tpr", ",", "thresholds", "=", "roc_curve", "(", "truth", ",", "Y", ")", "\n", "print", "(", "precision_score", "(", "truth", ",", "Y", ")", ",", "recall_score", "(", "truth", ",", "Y", ")", ",", "fpr", "[", "0", "]", ",", "tpr", "[", "0", "]", ")", "\n", "print", "(", "\"\\n\\n===============DT ends============\\n\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.baselines.Classifiers.Logistic": [[141, 164], ["print", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression.predict", "print", "print", "print", "print", "print", "y_test_1.append", "pred_1.append", "sklearn_crfsuite.metrics.flat_classification_report", "sklearn.metrics.roc_auc_score", "str", "str", "sklearn.metrics.log_loss", "numpy.mean"], "function", ["None"], ["", "def", "Logistic", "(", ")", ":", "\n", "\t", "print", "(", "\"logistic starts\"", ")", "\n", "model1", "=", "LogisticRegression", "(", "class_weight", "=", "None", ")", "\n", "model1", ".", "fit", "(", "new_train", ",", "labels", ")", "\n", "Y", "=", "model1", ".", "predict", "(", "new_test", ")", "\n", "print", "(", "\"\\nLogistic \\n log_loss: \"", "+", "str", "(", "log_loss", "(", "truth", ",", "Y", ")", ")", ")", "\n", "print", "(", "\"\\nLogistic \\n Accuracy: \"", "+", "str", "(", "np", ".", "mean", "(", "truth", "==", "Y", ")", ")", ")", "\n", "\n", "y_test_1", "=", "[", "]", "\n", "for", "i", "in", "truth", ":", "\n", "\t    ", "y_test_1", ".", "append", "(", "[", "i", "]", ")", "\n", "\n", "", "pred_1", "=", "[", "]", "\n", "for", "i", "in", "Y", ":", "\n", "\t    ", "pred_1", ".", "append", "(", "[", "i", "]", ")", "\n", "\n", "", "sorted_labels", "=", "[", "-", "1", ",", "1", "]", "\n", "print", "(", "metrics", ".", "flat_classification_report", "(", "\n", "y_test_1", ",", "pred_1", ",", "labels", "=", "sorted_labels", ",", "digits", "=", "3", "\n", ")", ")", "\n", "\n", "print", "(", "roc_auc_score", "(", "truth", ",", "Y", ")", ")", "\n", "print", "(", "\"\\n\\n===============logistic ends============\\n\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.baselines.Classifiers.bal_logistic": [[166, 189], ["print", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression.predict", "print", "print", "print", "print", "print", "y_test_1.append", "pred_1.append", "sklearn_crfsuite.metrics.flat_classification_report", "sklearn.metrics.roc_auc_score", "str", "str", "sklearn.metrics.log_loss", "numpy.mean"], "function", ["None"], ["", "def", "bal_logistic", "(", ")", ":", "\n", "\t", "print", "(", "\"bal_logisitc starts\"", ")", "\n", "model1", "=", "LogisticRegression", "(", "class_weight", "=", "'balanced'", ")", "\n", "model1", ".", "fit", "(", "new_train", ",", "labels", ")", "\n", "Y", "=", "model1", ".", "predict", "(", "new_test", ")", "\n", "print", "(", "\"\\nLogistic with balanced weights \\n log_loss: \"", "+", "str", "(", "log_loss", "(", "truth", ",", "Y", ")", ")", ")", "\n", "print", "(", "\"\\nLogistic with balanced weights \\n Accuracy: \"", "+", "str", "(", "np", ".", "mean", "(", "truth", "==", "Y", ")", ")", ")", "\n", "\n", "y_test_1", "=", "[", "]", "\n", "for", "i", "in", "truth", ":", "\n", "\t    ", "y_test_1", ".", "append", "(", "[", "i", "]", ")", "\n", "\n", "", "pred_1", "=", "[", "]", "\n", "for", "i", "in", "Y", ":", "\n", "\t    ", "pred_1", ".", "append", "(", "[", "i", "]", ")", "\n", "\n", "", "sorted_labels", "=", "[", "-", "1", ",", "1", "]", "\n", "print", "(", "metrics", ".", "flat_classification_report", "(", "\n", "y_test_1", ",", "pred_1", ",", "labels", "=", "sorted_labels", ",", "digits", "=", "3", "\n", ")", ")", "\n", "\n", "print", "(", "roc_auc_score", "(", "truth", ",", "Y", ")", ")", "\n", "print", "(", "\"\\n\\n===============bal_logistic ends============\\n\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.word_char_attention.AttLayer.__init__": [[265, 270], ["initializers.get", "Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.__init__"], ["ait", "=", "K", ".", "expand_dims", "(", "ait", ")", "\n", "weighted_input", "=", "x", "*", "ait", "\n", "output", "=", "K", ".", "sum", "(", "weighted_input", ",", "axis", "=", "1", ")", "\n", "return", "output", "\n", "\n", "", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.word_char_attention.AttLayer.build": [[271, 278], ["K.variable", "K.variable", "K.variable", "super().build", "len", "word_char_attention.AttLayer.init", "word_char_attention.AttLayer.init", "word_char_attention.AttLayer.init"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.build"], ["        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "# ======  End of attention section  =======", "\n", "\n", "\n", "# =========================================", "\n", "# =           Without Attention           =", "\n", "# =========================================", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.word_char_attention.AttLayer.compute_mask": [[279, 281], ["None"], "methods", ["None"], ["\n", "", "", "e", "=", "Embedding", "(", "len", "(", "char_indices", ".", "keys", "(", ")", ")", ",", "embeddings_dim", ",", "weights", "=", "[", "embedding_matrix", "]", ",", "input_length", "=", "maxlen", ",", "trainable", "=", "False", ")", "\n", "e_word", "=", "Embedding", "(", "vocab_size", ",", "word_embed_dim", ",", "weights", "=", "[", "word_embed_matrix", "]", ",", "input_length", "=", "word_maxlen", ",", "trainable", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.word_char_attention.AttLayer.call": [[282, 299], ["K.tanh", "K.dot", "K.squeeze", "K.exp", "K.cast", "K.expand_dims", "K.sum", "K.bias_add", "K.cast", "K.floatx", "K.dot", "K.floatx", "K.sum", "K.epsilon"], "methods", ["None"], ["\n", "sentence_input", "=", "Input", "(", "shape", "=", "(", "maxlen", ",", ")", ",", "dtype", "=", "'int32'", ")", "\n", "embedded_sequences", "=", "e", "(", "sentence_input", ")", "\n", "\n", "char_lstm", "=", "Bidirectional", "(", "LSTM", "(", "64", ",", "return_sequences", "=", "True", ")", ")", "(", "embedded_sequences", ")", "\n", "char_att", "=", "AttLayer", "(", "embeddings_dim", ")", "(", "char_lstm", ")", "\n", "\n", "word_input", "=", "Input", "(", "shape", "=", "(", "word_maxlen", ",", ")", ",", "dtype", "=", "'int32'", ")", "\n", "word_embed_sequences", "=", "e_word", "(", "word_input", ")", "\n", "\n", "word_lstm", "=", "Bidirectional", "(", "LSTM", "(", "64", ",", "return_sequences", "=", "True", ")", ")", "(", "word_embed_sequences", ")", "\n", "word_att", "=", "AttLayer", "(", "embeddings_dim", ")", "(", "word_lstm", ")", "\n", "merge_one", "=", "concatenate", "(", "[", "char_att", ",", "word_att", "]", ")", "\n", "\n", "# lstm_out = Bidirectional(LSTM(20))", "\n", "out1", "=", "Dense", "(", "256", ",", "activation", "=", "'relu'", ")", "(", "merge_one", ")", "\n", "out8", "=", "Dropout", "(", "0.5", ")", "(", "out1", ")", "\n", "out2", "=", "Dense", "(", "64", ",", "activation", "=", "'relu'", ")", "(", "out8", ")", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.word_char_attention.AttLayer.compute_output_shape": [[300, 302], ["None"], "methods", ["None"], ["out3", "=", "Dropout", "(", "0.5", ")", "(", "out2", ")", "\n", "out4", "=", "Dense", "(", "16", ",", "activation", "=", "'relu'", ")", "(", "out3", ")", "\n", "out5", "=", "Dropout", "(", "0.5", ")", "(", "out4", ")", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.bilstm_word.AttLayer.__init__": [[263, 268], ["initializers.get", "Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.__init__"], ["\n", "", "def", "call", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "# size of x :[batch_size, sel_len, attention_dim]", "\n", "# size of u :[batch_size, attention_dim]", "\n", "# uit = tanh(xW+b)", "\n", "        ", "uit", "=", "K", ".", "tanh", "(", "K", ".", "bias_add", "(", "K", ".", "dot", "(", "x", ",", "self", ".", "W", ")", ",", "self", ".", "b", ")", ")", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.bilstm_word.AttLayer.build": [[269, 276], ["K.variable", "K.variable", "K.variable", "super().build", "len", "bilstm_word.AttLayer.init", "bilstm_word.AttLayer.init", "bilstm_word.AttLayer.init"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.build"], ["ait", "=", "K", ".", "dot", "(", "uit", ",", "self", ".", "u", ")", "\n", "ait", "=", "K", ".", "squeeze", "(", "ait", ",", "-", "1", ")", "\n", "ait", "=", "K", ".", "exp", "(", "ait", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Cast the mask to floatX to avoid float64 upcasting in theano", "\n", "            ", "ait", "*=", "K", ".", "cast", "(", "mask", ",", "K", ".", "floatx", "(", ")", ")", "\n", "", "ait", "/=", "K", ".", "cast", "(", "K", ".", "sum", "(", "ait", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "K", ".", "epsilon", "(", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.bilstm_word.AttLayer.compute_mask": [[277, 279], ["None"], "methods", ["None"], ["ait", "=", "K", ".", "expand_dims", "(", "ait", ")", "\n", "weighted_input", "=", "x", "*", "ait", "\n", "output", "=", "K", ".", "sum", "(", "weighted_input", ",", "axis", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.bilstm_word.AttLayer.call": [[280, 297], ["K.tanh", "K.dot", "K.squeeze", "K.exp", "K.cast", "K.expand_dims", "K.sum", "K.bias_add", "K.cast", "K.floatx", "K.dot", "K.floatx", "K.sum", "K.epsilon"], "methods", ["None"], ["return", "output", "\n", "\n", "", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "# ======  End of attention section  =======", "\n", "\n", "\n", "# =========================================", "\n", "# =           Without Attention           =", "\n", "# =========================================", "\n", "\n", "# e = Embedding(len(char_indices.keys()), embeddings_dim, weights=[embedding_matrix], input_length=maxlen, trainable=False)", "\n", "", "", "e_word", "=", "Embedding", "(", "vocab_size", ",", "word_embed_dim", ",", "weights", "=", "[", "word_embed_matrix", "]", ",", "input_length", "=", "word_maxlen", ",", "trainable", "=", "False", ")", "\n", "\n", "# sentence_input = Input(shape=(maxlen, ), dtype='int32')", "\n", "# embedded_sequences = e(sentence_input)", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.bilstm_word.AttLayer.compute_output_shape": [[298, 300], ["None"], "methods", ["None"], ["# char_lstm = Bidirectional(LSTM(20, return_sequences=True))(embedded_sequences)", "\n", "# char_att = AttLayer(embeddings_dim)(char_lstm)", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.bilstm_char.AttLayer.__init__": [[264, 269], ["initializers.get", "Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.__init__"], ["        ", "return", "mask", "\n", "\n", "", "def", "call", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "# size of x :[batch_size, sel_len, attention_dim]", "\n", "# size of u :[batch_size, attention_dim]", "\n", "# uit = tanh(xW+b)", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.bilstm_char.AttLayer.build": [[270, 277], ["K.variable", "K.variable", "K.variable", "super().build", "len", "bilstm_char.AttLayer.init", "bilstm_char.AttLayer.init", "bilstm_char.AttLayer.init"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.build"], ["        ", "uit", "=", "K", ".", "tanh", "(", "K", ".", "bias_add", "(", "K", ".", "dot", "(", "x", ",", "self", ".", "W", ")", ",", "self", ".", "b", ")", ")", "\n", "ait", "=", "K", ".", "dot", "(", "uit", ",", "self", ".", "u", ")", "\n", "ait", "=", "K", ".", "squeeze", "(", "ait", ",", "-", "1", ")", "\n", "ait", "=", "K", ".", "exp", "(", "ait", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Cast the mask to floatX to avoid float64 upcasting in theano", "\n", "            ", "ait", "*=", "K", ".", "cast", "(", "mask", ",", "K", ".", "floatx", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.bilstm_char.AttLayer.compute_mask": [[278, 280], ["None"], "methods", ["None"], ["", "ait", "/=", "K", ".", "cast", "(", "K", ".", "sum", "(", "ait", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "K", ".", "epsilon", "(", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "ait", "=", "K", ".", "expand_dims", "(", "ait", ")", "\n", "weighted_input", "=", "x", "*", "ait", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.bilstm_char.AttLayer.call": [[281, 298], ["K.tanh", "K.dot", "K.squeeze", "K.exp", "K.cast", "K.expand_dims", "K.sum", "K.bias_add", "K.cast", "K.floatx", "K.dot", "K.floatx", "K.sum", "K.epsilon"], "methods", ["None"], ["output", "=", "K", ".", "sum", "(", "weighted_input", ",", "axis", "=", "1", ")", "\n", "return", "output", "\n", "\n", "", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "# ======  End of attention section  =======", "\n", "\n", "\n", "# =========================================", "\n", "# =           Without Attention           =", "\n", "# =========================================", "\n", "\n", "", "", "e", "=", "Embedding", "(", "len", "(", "char_indices", ".", "keys", "(", ")", ")", ",", "embeddings_dim", ",", "weights", "=", "[", "embedding_matrix", "]", ",", "input_length", "=", "maxlen", ",", "trainable", "=", "False", ")", "\n", "# e_word = Embedding(vocab_size, word_embed_dim, weights=[word_embed_matrix], input_length=word_maxlen, trainable=False)", "\n", "\n", "sentence_input", "=", "Input", "(", "shape", "=", "(", "maxlen", ",", ")", ",", "dtype", "=", "'int32'", ")", "\n", "embedded_sequences", "=", "e", "(", "sentence_input", ")", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.bilstm_char.AttLayer.compute_output_shape": [[299, 301], ["None"], "methods", ["None"], ["\n", "char_lstm", "=", "Bidirectional", "(", "LSTM", "(", "64", ",", "return_sequences", "=", "True", ")", ")", "(", "embedded_sequences", ")", "\n", "char_att", "=", "AttLayer", "(", "embeddings_dim", ")", "(", "char_lstm", ")", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.test.AttLayer.__init__": [[72, 77], ["initializers.get", "Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.__init__"], ["self", ".", "b", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "self", ".", "attention_dim", ",", ")", ")", ")", "\n", "self", ".", "u", "=", "K", ".", "variable", "(", "self", ".", "init", "(", "(", "self", ".", "attention_dim", ",", "1", ")", ")", ")", "\n", "self", ".", "trainable_weights", "=", "[", "self", ".", "W", ",", "self", ".", "b", ",", "self", ".", "u", "]", "\n", "super", "(", "AttLayer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n", "", "def", "compute_mask", "(", "self", ",", "inputs", ",", "mask", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.test.AttLayer.build": [[78, 85], ["K.variable", "K.variable", "K.variable", "super().build", "len", "test.AttLayer.init", "test.AttLayer.init", "test.AttLayer.init"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.build"], ["        ", "return", "mask", "\n", "\n", "", "def", "call", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "# size of x :[batch_size, sel_len, attention_dim]", "\n", "# size of u :[batch_size, attention_dim]", "\n", "# uit = tanh(xW+b)", "\n", "        ", "uit", "=", "K", ".", "tanh", "(", "K", ".", "bias_add", "(", "K", ".", "dot", "(", "x", ",", "self", ".", "W", ")", ",", "self", ".", "b", ")", ")", "\n", "ait", "=", "K", ".", "dot", "(", "uit", ",", "self", ".", "u", ")", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.test.AttLayer.compute_mask": [[86, 88], ["None"], "methods", ["None"], ["ait", "=", "K", ".", "squeeze", "(", "ait", ",", "-", "1", ")", "\n", "ait", "=", "K", ".", "exp", "(", "ait", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.test.AttLayer.call": [[89, 105], ["K.tanh", "K.dot", "K.squeeze", "K.exp", "K.cast", "K.expand_dims", "K.sum", "K.bias_add", "K.cast", "K.floatx", "K.dot", "K.floatx", "K.sum", "K.epsilon"], "methods", ["None"], ["# Cast the mask to floatX to avoid float64 upcasting in theano", "\n", "            ", "ait", "*=", "K", ".", "cast", "(", "mask", ",", "K", ".", "floatx", "(", ")", ")", "\n", "", "ait", "/=", "K", ".", "cast", "(", "K", ".", "sum", "(", "ait", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "K", ".", "epsilon", "(", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "ait", "=", "K", ".", "expand_dims", "(", "ait", ")", "\n", "weighted_input", "=", "x", "*", "ait", "\n", "output", "=", "K", ".", "sum", "(", "weighted_input", ",", "axis", "=", "1", ")", "\n", "return", "output", "\n", "\n", "", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "\n", "\n", "\n", "", "", "model", "=", "load_model", "(", "args", ".", "model", ",", "custom_objects", "=", "{", "'AttLayer'", ":", "AttLayer", "}", ")", "\n", "\n", "dimensions", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.test.AttLayer.compute_output_shape": [[106, 108], ["None"], "methods", ["None"], ["for", "layer", "in", "model", ".", "layers", ":", "\n", "\t", "dimensions", "+=", "layer", ".", "get_output_at", "(", "0", ")", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.__init__": [[259, 264], ["initializers.get", "Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.__init__"], ["\n", "", "def", "compute_mask", "(", "self", ",", "inputs", ",", "mask", "=", "None", ")", ":", "\n", "        ", "return", "mask", "\n", "\n", "", "def", "call", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "# size of x :[batch_size, sel_len, attention_dim]", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.build": [[265, 272], ["K.variable", "K.variable", "K.variable", "super().build", "len", "retrain_wc_att.AttLayer.init", "retrain_wc_att.AttLayer.init", "retrain_wc_att.AttLayer.init"], "methods", ["home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.build"], ["# size of u :[batch_size, attention_dim]", "\n", "# uit = tanh(xW+b)", "\n", "        ", "uit", "=", "K", ".", "tanh", "(", "K", ".", "bias_add", "(", "K", ".", "dot", "(", "x", ",", "self", ".", "W", ")", ",", "self", ".", "b", ")", ")", "\n", "ait", "=", "K", ".", "dot", "(", "uit", ",", "self", ".", "u", ")", "\n", "ait", "=", "K", ".", "squeeze", "(", "ait", ",", "-", "1", ")", "\n", "ait", "=", "K", ".", "exp", "(", "ait", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Cast the mask to floatX to avoid float64 upcasting in theano", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.compute_mask": [[273, 275], ["None"], "methods", ["None"], ["            ", "ait", "*=", "K", ".", "cast", "(", "mask", ",", "K", ".", "floatx", "(", ")", ")", "\n", "", "ait", "/=", "K", ".", "cast", "(", "K", ".", "sum", "(", "ait", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "K", ".", "epsilon", "(", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "ait", "=", "K", ".", "expand_dims", "(", "ait", ")", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.call": [[276, 292], ["K.tanh", "K.dot", "K.squeeze", "K.exp", "K.cast", "K.expand_dims", "K.sum", "K.bias_add", "K.cast", "K.floatx", "K.dot", "K.floatx", "K.sum", "K.epsilon"], "methods", ["None"], ["weighted_input", "=", "x", "*", "ait", "\n", "output", "=", "K", ".", "sum", "(", "weighted_input", ",", "axis", "=", "1", ")", "\n", "return", "output", "\n", "\n", "", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "# ======  End of attention section  =======", "\n", "\n", "\n", "# =========================================", "\n", "# =           Without Attention           =", "\n", "# =========================================", "\n", "\n", "", "", "e", "=", "Embedding", "(", "len", "(", "char_indices", ".", "keys", "(", ")", ")", ",", "embeddings_dim", ",", "weights", "=", "[", "embedding_matrix", "]", ",", "input_length", "=", "maxlen", ",", "trainable", "=", "False", ")", "\n", "e_word", "=", "Embedding", "(", "vocab_size", ",", "word_embed_dim", ",", "weights", "=", "[", "word_embed_matrix", "]", ",", "input_length", "=", "word_maxlen", ",", "trainable", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bhanu77prakash_StRE.category_experiments.retrain_wc_att.AttLayer.compute_output_shape": [[293, 295], ["None"], "methods", ["None"], ["sentence_input", "=", "Input", "(", "shape", "=", "(", "maxlen", ",", ")", ",", "dtype", "=", "'int32'", ")", "\n", "embedded_sequences", "=", "e", "(", "sentence_input", ")", "\n", "\n"]]}