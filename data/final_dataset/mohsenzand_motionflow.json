{"home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.select_device": [[11, 37], ["str().strip().lower().replace", "print", "torch.device", "torch.cuda.is_available", "len", "enumerate", "utils.date_modified", "str().strip().lower", "torch.cuda.is_available", "str().strip().lower().replace.split", "torch.cuda.get_device_properties", "len", "str().strip", "str"], "function", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.date_modified"], ["def", "select_device", "(", "device", "=", "''", ",", "batch_size", "=", "None", ")", ":", "\n", "# device = 'cpu' or '0' or '0,1,2,3'", "\n", "    ", "s", "=", "f'MotionFlow \ud83d\ude80 {date_modified()} torch {torch.__version__} '", "# string", "\n", "device", "=", "str", "(", "device", ")", ".", "strip", "(", ")", ".", "lower", "(", ")", ".", "replace", "(", "'cuda:'", ",", "''", ")", "# to string, 'cuda:0' to '0'", "\n", "cpu", "=", "device", "==", "'cpu'", "\n", "if", "cpu", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "'-1'", "# force torch.cuda.is_available() = False", "\n", "", "elif", "device", ":", "# non-cpu device requested", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "device", "# set environment variable", "\n", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "f'CUDA unavailable, invalid device {device} requested'", "# check availability", "\n", "\n", "", "cuda", "=", "not", "cpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "cuda", ":", "\n", "        ", "devices", "=", "device", ".", "split", "(", "','", ")", "if", "device", "else", "'0'", "# range(torch.cuda.device_count())  # i.e. 0,1,6,7", "\n", "n", "=", "len", "(", "devices", ")", "# device count", "\n", "if", "n", ">", "1", "and", "batch_size", ":", "# check batch_size is divisible by device_count", "\n", "            ", "assert", "batch_size", "%", "n", "==", "0", ",", "f'batch-size {batch_size} not multiple of GPU count {n}'", "\n", "", "space", "=", "' '", "*", "(", "len", "(", "s", ")", "+", "1", ")", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "devices", ")", ":", "\n", "            ", "p", "=", "torch", ".", "cuda", ".", "get_device_properties", "(", "i", ")", "\n", "s", "+=", "f\"{'' if i == 0 else space}CUDA:{d} ({p.name}, {p.total_memory / 1024 ** 2}MB)\\n\"", "# bytes to MB", "\n", "", "", "else", ":", "\n", "        ", "s", "+=", "'CPU\\n'", "\n", "", "print", "(", "s", ")", "\n", "\n", "return", "torch", ".", "device", "(", "'cuda:0'", "if", "cuda", "else", "'cpu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.date_modified": [[39, 43], ["datetime.datetime.fromtimestamp", "pathlib.Path().stat", "pathlib.Path"], "function", ["None"], ["", "def", "date_modified", "(", "path", "=", "__file__", ")", ":", "\n", "# return human-readable file modification date, i.e. '2021-3-26'", "\n", "    ", "t", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "Path", "(", "path", ")", ".", "stat", "(", ")", ".", "st_mtime", ")", "\n", "return", "f'{t.year}-{t.month}-{t.day}'", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.count_parameters": [[45, 47], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.increment_path": [[49, 65], ["pathlib.Path", "pathlib.Path.exists", "pathlib.Path.with_suffix", "glob.glob", "pathlib.Path", "dir.mkdir", "re.search", "int", "dir.exists", "max", "m.groups"], "function", ["None"], ["", "def", "increment_path", "(", "path", ",", "exist_ok", "=", "False", ",", "sep", "=", "''", ",", "mkdir", "=", "False", ")", ":", "\n", "# Increment file or directory path, i.e. runs/exp --> runs/exp{sep}2, runs/exp{sep}3, ... etc.", "\n", "# https://github.com/ultralytics/yolov5", "\n", "    ", "path", "=", "Path", "(", "path", ")", "# os-agnostic", "\n", "if", "path", ".", "exists", "(", ")", "and", "not", "exist_ok", ":", "\n", "        ", "suffix", "=", "path", ".", "suffix", "\n", "path", "=", "path", ".", "with_suffix", "(", "''", ")", "\n", "dirs", "=", "glob", ".", "glob", "(", "f\"{path}{sep}*\"", ")", "# similar paths", "\n", "matches", "=", "[", "re", ".", "search", "(", "rf\"%s{sep}(\\d+)\"", "%", "path", ".", "stem", ",", "d", ")", "for", "d", "in", "dirs", "]", "\n", "i", "=", "[", "int", "(", "m", ".", "groups", "(", ")", "[", "0", "]", ")", "for", "m", "in", "matches", "if", "m", "]", "# indices", "\n", "n", "=", "max", "(", "i", ")", "+", "1", "if", "i", "else", "2", "# increment number", "\n", "path", "=", "Path", "(", "f\"{path}{sep}{n}{suffix}\"", ")", "# update path", "\n", "", "dir", "=", "path", "if", "path", ".", "suffix", "==", "''", "else", "path", ".", "parent", "# directory", "\n", "if", "not", "dir", ".", "exists", "(", ")", "and", "mkdir", ":", "\n", "        ", "dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "# make directory", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.save_model": [[67, 84], ["model.state_dict", "optim.state_dict", "torch.save", "os.path.join", "os.path.join", "scheduler.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "optim", ",", "scheduler", ",", "dir", ",", "iteration", ",", "epoch", ",", "iter_save", "=", "False", ")", ":", "\n", "    ", "if", "iter_save", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "\"checkpoint_{}.pth.tar\"", ".", "format", "(", "iteration", ")", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "\"last.pth.tar\"", ")", "\n", "", "state", "=", "{", "}", "\n", "state", "[", "\"iteration\"", "]", "=", "iteration", "\n", "state", "[", "'epoch'", "]", "=", "epoch", "\n", "state", "[", "\"modelname\"", "]", "=", "model", ".", "__class__", ".", "__name__", "\n", "state", "[", "\"model\"", "]", "=", "model", ".", "state_dict", "(", ")", "\n", "state", "[", "\"optim\"", "]", "=", "optim", ".", "state_dict", "(", ")", "\n", "if", "scheduler", "is", "not", "None", ":", "\n", "        ", "state", "[", "\"scheduler\"", "]", "=", "scheduler", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "        ", "state", "[", "\"scheduler\"", "]", "=", "None", "\n", "\n", "", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.load_state": [[86, 95], ["print", "torch.load", "print", "torch.load"], "function", ["None"], ["", "def", "load_state", "(", "path", ",", "cuda", ")", ":", "\n", "    ", "if", "cuda", ":", "\n", "        ", "print", "(", "\"load to gpu\"", ")", "\n", "state", "=", "torch", ".", "load", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"load to cpu\"", ")", "\n", "state", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils._fast_hist": [[97, 103], ["numpy.bincount().reshape", "numpy.bincount", "label_pred[].astype", "label_true[].astype"], "function", ["None"], ["", "def", "_fast_hist", "(", "label_true", ",", "label_pred", ",", "n_class", ")", ":", "\n", "    ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "n_class", ")", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "n_class", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "\n", "label_pred", "[", "mask", "]", ".", "astype", "(", "int", ")", ",", "minlength", "=", "n_class", "**", "2", ")", ".", "reshape", "(", "n_class", ",", "n_class", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.compute_accuracy": [[105, 117], ["numpy.zeros", "zip", "numpy.nanmean", "numpy.nanmean", "utils._fast_hist", "numpy.diag().sum", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "np.zeros.sum", "lt.flatten", "lp.flatten", "numpy.diag", "numpy.diag", "np.zeros.sum", "np.zeros.sum"], "function", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils._fast_hist"], ["", "def", "compute_accuracy", "(", "label_trues", ",", "label_preds", ",", "n_class", ")", ":", "\n", "    ", "hist", "=", "np", ".", "zeros", "(", "(", "n_class", ",", "n_class", ")", ")", "\n", "for", "lt", ",", "lp", "in", "zip", "(", "label_trues", ",", "label_preds", ")", ":", "\n", "        ", "hist", "+=", "_fast_hist", "(", "lt", ".", "flatten", "(", ")", ",", "lp", ".", "flatten", "(", ")", ",", "n_class", ")", "\n", "", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "mean_iu", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "return", "acc", ",", "acc_cls", ",", "mean_iu", ",", "fwavacc", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.get_closest_rotmat": [[119, 138], ["numpy.linalg.svd", "numpy.matmul", "numpy.linalg.det", "utils.eye", "numpy.sign", "numpy.matmul", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.eye"], ["", "def", "get_closest_rotmat", "(", "rotmats", ")", ":", "\n", "    ", "\"\"\"\n    Finds the rotation matrix that is closest to the inputs in terms of the Frobenius norm. For each input matrix\n    it computes the SVD as R = USV' and sets R_closest = UV'. Additionally, it is made sure that det(R_closest) == 1.\n    Args:\n        rotmats: np array of shape (..., 3, 3).\n\n    Returns:\n        A numpy array of the same shape as the inputs.\n    \"\"\"", "\n", "u", ",", "s", ",", "vh", "=", "np", ".", "linalg", ".", "svd", "(", "rotmats", ")", "\n", "r_closest", "=", "np", ".", "matmul", "(", "u", ",", "vh", ")", "\n", "\n", "# if the determinant of UV' is -1, we must flip the sign of the last column of u", "\n", "det", "=", "np", ".", "linalg", ".", "det", "(", "r_closest", ")", "# (..., )", "\n", "iden", "=", "eye", "(", "3", ",", "det", ".", "shape", ")", "\n", "iden", "[", "...", ",", "2", ",", "2", "]", "=", "np", ".", "sign", "(", "det", ")", "\n", "r_closest", "=", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "u", ",", "iden", ")", ",", "vh", ")", "\n", "return", "r_closest", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.eye": [[140, 146], ["numpy.zeros", "numpy.concatenate"], "function", ["None"], ["", "def", "eye", "(", "n", ",", "batch_shape", ")", ":", "\n", "    ", "iden", "=", "np", ".", "zeros", "(", "np", ".", "concatenate", "(", "[", "batch_shape", ",", "[", "n", ",", "n", "]", "]", ")", ")", "\n", "iden", "[", "...", ",", "0", ",", "0", "]", "=", "1.0", "\n", "iden", "[", "...", ",", "1", ",", "1", "]", "=", "1.0", "\n", "iden", "[", "...", ",", "2", ",", "2", "]", "=", "1.0", "\n", "return", "iden", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.is_valid_rotmat": [[148, 163], ["numpy.transpose", "numpy.all", "numpy.all", "tuple", "numpy.abs", "numpy.abs", "range", "len", "numpy.matmul", "utils.eye", "numpy.linalg.det"], "function", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.eye"], ["", "def", "is_valid_rotmat", "(", "rotmats", ",", "thresh", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"\n    Checks that the rotation matrices are valid, i.e. R*R' == I and det(R) == 1\n    Args:\n        rotmats: A np array of shape (..., 3, 3).\n        thresh: Numerical threshold.\n\n    Returns:\n        True if all rotation matrices are valid, False if at least one is not valid.\n    \"\"\"", "\n", "# check we have a valid rotation matrix", "\n", "rotmats_t", "=", "np", ".", "transpose", "(", "rotmats", ",", "tuple", "(", "range", "(", "len", "(", "rotmats", ".", "shape", "[", ":", "-", "2", "]", ")", ")", ")", "+", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "is_orthogonal", "=", "np", ".", "all", "(", "np", ".", "abs", "(", "np", ".", "matmul", "(", "rotmats", ",", "rotmats_t", ")", "-", "eye", "(", "3", ",", "rotmats", ".", "shape", "[", ":", "-", "2", "]", ")", ")", "<", "thresh", ")", "\n", "det_is_one", "=", "np", ".", "all", "(", "np", ".", "abs", "(", "np", ".", "linalg", ".", "det", "(", "rotmats", ")", "-", "1.0", ")", "<", "thresh", ")", "\n", "return", "is_orthogonal", "and", "det_is_one", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.sparse_to_full": [[165, 199], ["len", "numpy.reshape", "numpy.zeros", "numpy.reshape"], "function", ["None"], ["", "def", "sparse_to_full", "(", "joint_angles_sparse", ",", "sparse_joints_idxs", ",", "tot_nr_joints", ",", "rep", "=", "\"rotmat\"", ")", ":", "\n", "    ", "\"\"\"\n    Pad the given sparse joint angles with identity elements to retrieve a full skeleton with `tot_nr_joints`\n    many joints.\n    Args:\n        joint_angles_sparse: An np array of shape (N, len(sparse_joints_idxs) * dof)\n          or (N, len(sparse_joints_idxs), dof)\n        sparse_joints_idxs: A list of joint indices pointing into the full skeleton given by range(0, tot_nr_joints)\n        tot_nr_jonts: Total number of joints in the full skeleton.\n        rep: Which representation is used, rotmat or quat\n\n    Returns:\n        The padded joint angles as an array of shape (N, tot_nr_joints*dof)\n    \"\"\"", "\n", "joint_idxs", "=", "sparse_joints_idxs", "\n", "assert", "rep", "in", "[", "\"rotmat\"", ",", "\"quat\"", ",", "\"aa\"", "]", "\n", "dof", "=", "9", "if", "rep", "==", "\"rotmat\"", "else", "4", "if", "rep", "==", "\"quat\"", "else", "3", "\n", "n_sparse_joints", "=", "len", "(", "sparse_joints_idxs", ")", "\n", "angles_sparse", "=", "np", ".", "reshape", "(", "joint_angles_sparse", ",", "[", "-", "1", ",", "n_sparse_joints", ",", "dof", "]", ")", "\n", "\n", "# fill in the missing indices with the identity element", "\n", "smpl_full", "=", "np", ".", "zeros", "(", "shape", "=", "[", "angles_sparse", ".", "shape", "[", "0", "]", ",", "tot_nr_joints", ",", "dof", "]", ")", "# (N, tot_nr_joints, dof)", "\n", "if", "rep", "==", "\"quat\"", ":", "\n", "        ", "smpl_full", "[", "...", ",", "0", "]", "=", "1.0", "\n", "", "elif", "rep", "==", "\"rotmat\"", ":", "\n", "        ", "smpl_full", "[", "...", ",", "0", "]", "=", "1.0", "\n", "smpl_full", "[", "...", ",", "4", "]", "=", "1.0", "\n", "smpl_full", "[", "...", ",", "8", "]", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "pass", "# nothing to do for angle-axis", "\n", "\n", "", "smpl_full", "[", ":", ",", "joint_idxs", "]", "=", "angles_sparse", "\n", "smpl_full", "=", "np", ".", "reshape", "(", "smpl_full", ",", "[", "-", "1", ",", "tot_nr_joints", "*", "dof", "]", ")", "\n", "return", "smpl_full", "", "", ""]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.locally_masked_conv2d.__init__": [[13, 45], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "masking.locally_masked_conv2d.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.locally_masked_conv2d.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mask", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "dilation", "=", "1", ",", "bias", "=", "True", ",", "mask_weight", "=", "False", ")", ":", "\n", "        ", "\"\"\"A memory-efficient implementation of Locally Masked Convolution.\n        https://github.com/ajayjain/lmconv\n\n        Args:\n            in_channels (int): Number of channels in the input image\n            out_channels (int): Number of channels produced by the convolution\n            kernel_size (tuple): Size of the convolving kernel as a tuple of two ints.\n                Default: (3, 3). The first int is used for the height dimension, and the second int for the width dimension.\n            dilation (int): Spacing between kernel elements. Default: 1\n            bias (bool): If True, adds a learnable bias to the output. Default: True\n            mask_weight (bool): If True, adds a learnable weight to condition the layer on the mask. Default: False\n        \"\"\"", "\n", "super", "(", "locally_masked_conv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mask", "=", "mask", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "dilation", "=", "dilation", "\n", "\n", "# Pad to maintain spatial dimensions", "\n", "pad0", "=", "(", "dilation", "*", "(", "kernel_size", "[", "0", "]", "-", "1", ")", ")", "//", "2", "\n", "pad1", "=", "(", "dilation", "*", "(", "kernel_size", "[", "1", "]", "-", "1", ")", ")", "//", "2", "\n", "self", ".", "padding", "=", "(", "pad0", ",", "pad1", ")", "\n", "\n", "# Conv parameters", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", ",", "*", "kernel_size", ")", ")", "\n", "self", ".", "mask_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ",", "*", "kernel_size", ")", ")", "if", "mask_weight", "else", "None", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "if", "bias", "else", "None", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.locally_masked_conv2d.reset_parameters": [[46, 55], ["torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# Adapted from PyTorch _ConvNd implementation", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "if", "self", ".", "mask_weight", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "mask_weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.locally_masked_conv2d.forward": [[56, 60], ["_locally_masked_conv2d.apply", "masking.locally_masked_conv2d.mask.cpu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "not", "x", ".", "is_cuda", ":", "\n", "            ", "self", ".", "mask", "=", "self", ".", "mask", ".", "cpu", "(", ")", "\n", "", "return", "_locally_masked_conv2d", ".", "apply", "(", "x", ",", "self", ".", "mask", ",", "self", ".", "weight", ",", "self", ".", "mask_weight", ",", "self", ".", "bias", ",", "self", ".", "dilation", ",", "self", ".", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking._locally_masked_conv2d.forward": [[65, 102], ["ctx.save_for_backward", "torch.unfold", "torch.unfold", "torch.unfold", "weight.view.matmul.view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "weight.view", "weight.view.matmul", "weight.view.matmul.view", "len", "weight.view.matmul.size", "weight.view.matmul.size", "weight.view.matmul.size", "mask.size", "weight.view.matmul.size", "weight.view.matmul.float", "weight.view.matmul.size", "weight.view.matmul.size", "weight.view.matmul.size", "weight.view.matmul.size", "weight.view.matmul.size", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "bias.unsqueeze().unsqueeze", "mask_weight.view().matmul", "bias.unsqueeze", "mask_weight.view"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "mask", ",", "weight", ",", "mask_weight", "=", "None", ",", "bias", "=", "None", ",", "dilation", "=", "1", ",", "padding", "=", "1", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "4", ",", "\"Unfold/fold only support 4D batched image-like tensors\"", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "mask", ",", "weight", ",", "mask_weight", ")", "\n", "ctx", ".", "dilation", "=", "dilation", "\n", "ctx", ".", "padding", "=", "padding", "\n", "ctx", ".", "H", ",", "ctx", ".", "W", "=", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "\n", "# Shapes", "\n", "ctx", ".", "output_shape", "=", "(", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "out_channels", ",", "in_channels", ",", "k1", ",", "k2", "=", "weight", ".", "shape", "\n", "assert", "x", ".", "size", "(", "1", ")", "==", "in_channels", "\n", "assert", "mask", ".", "size", "(", "1", ")", "==", "k1", "*", "k2", "\n", "\n", "# Step 1: Unfold (im2col)", "\n", "x", "=", "F", ".", "unfold", "(", "x", ",", "(", "k1", ",", "k2", ")", ",", "dilation", "=", "dilation", ",", "padding", "=", "padding", ")", "\n", "\n", "# Step 2: Mask x. Avoid repeating mask in_channels times by reshaping x_unf (memory efficient)", "\n", "assert", "x", ".", "size", "(", "1", ")", "%", "in_channels", "==", "0", "\n", "x_unf_channels_batched", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", "*", "in_channels", ",", "x", ".", "size", "(", "1", ")", "//", "in_channels", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "x", "=", "torch", ".", "mul", "(", "x_unf_channels_batched", ",", "mask", ")", ".", "view", "(", "x", ".", "shape", ")", "\n", "\n", "# Step 3: Perform convolution via matrix multiplication and addition", "\n", "weight_matrix", "=", "weight", ".", "view", "(", "out_channels", ",", "-", "1", ")", "\n", "\n", "x", "=", "weight_matrix", ".", "matmul", "(", "x", ".", "float", "(", ")", ")", "\n", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "+", "bias", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Step 4: Apply weight on mask, if provided. Equivalent to concatenating x and mask.", "\n", "", "if", "mask_weight", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "+", "mask_weight", ".", "view", "(", "out_channels", ",", "-", "1", ")", ".", "matmul", "(", "mask", ")", "\n", "\n", "# Step 4: Restore shape", "\n", "", "output", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "*", "ctx", ".", "output_shape", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking._locally_masked_conv2d.backward": [[103, 139], ["grad_output.view", "grad_output.size", "grad_output.size", "weight.view", "weight.view.transpose().matmul", "torch.mul().view.view", "torch.mul().view.view", "torch.mul().view.view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.fold", "torch.fold", "torch.fold", "torch.unfold", "torch.unfold", "torch.unfold", "torch.mul().view.view", "torch.mul().view.view", "torch.mul().view.view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "torch.mul().view", "grad_output.view.matmul", "grad_weight.view.view.view", "grad_output.view.matmul", "grad_mask_weight.view.view.view", "grad_output.sum", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.transpose", "torch.mul().view.transpose", "torch.mul().view.transpose", "grad_weight.view.view.size", "mask.transpose", "grad_mask_weight.view.view.size", "weight.view.transpose", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul().view.size", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "x", ",", "mask", ",", "weight", ",", "mask_weight", "=", "ctx", ".", "saved_tensors", "\n", "out_channels", ",", "in_channels", ",", "k1", ",", "k2", "=", "weight", ".", "shape", "\n", "grad_output_unfolded", "=", "grad_output", ".", "view", "(", "grad_output", ".", "size", "(", "0", ")", ",", "grad_output", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# B x C_out x (H*W)", "\n", "\n", "# Compute gradients", "\n", "grad_x", "=", "grad_weight", "=", "grad_mask_weight", "=", "grad_bias", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "weight_", "=", "weight", ".", "view", "(", "out_channels", ",", "-", "1", ")", "\n", "grad_x_", "=", "weight_", ".", "transpose", "(", "0", ",", "1", ")", ".", "matmul", "(", "grad_output_unfolded", ")", "\n", "grad_x_shape", "=", "grad_x_", ".", "shape", "\n", "# View to allow masking, since mask needs to be broadcast C_in times", "\n", "assert", "grad_x_", ".", "size", "(", "1", ")", "%", "in_channels", "==", "0", "\n", "grad_x_", "=", "grad_x_", ".", "view", "(", "grad_x_", ".", "size", "(", "0", ")", "*", "in_channels", ",", "grad_x_", ".", "size", "(", "1", ")", "//", "in_channels", ",", "grad_x_", ".", "size", "(", "2", ")", ")", "\n", "grad_x_", "=", "torch", ".", "mul", "(", "grad_x_", ",", "mask", ")", ".", "view", "(", "grad_x_shape", ")", "\n", "grad_x", "=", "F", ".", "fold", "(", "grad_x_", ",", "(", "ctx", ".", "H", ",", "ctx", ".", "W", ")", ",", "(", "k1", ",", "k2", ")", ",", "dilation", "=", "ctx", ".", "dilation", ",", "padding", "=", "ctx", ".", "padding", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "# Recompute unfold and masking to avoid storing unfolded x, at the cost of extra compute", "\n", "            ", "x_", "=", "F", ".", "unfold", "(", "x", ",", "(", "k1", ",", "k2", ")", ",", "dilation", "=", "ctx", ".", "dilation", ",", "padding", "=", "ctx", ".", "padding", ")", "# B x 27 x 64", "\n", "x_unf_shape", "=", "x_", ".", "shape", "\n", "assert", "x_", ".", "size", "(", "1", ")", "%", "in_channels", "==", "0", "\n", "x_", "=", "x_", ".", "view", "(", "x_", ".", "size", "(", "0", ")", "*", "in_channels", ",", "x_", ".", "size", "(", "1", ")", "//", "in_channels", ",", "x_", ".", "size", "(", "2", ")", ")", "\n", "x_", "=", "torch", ".", "mul", "(", "x_", ",", "mask", ")", ".", "view", "(", "x_unf_shape", ")", "\n", "\n", "grad_weight", "=", "grad_output_unfolded", ".", "matmul", "(", "x_", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "grad_weight", "=", "grad_weight", ".", "view", "(", "grad_weight", ".", "size", "(", "0", ")", ",", "*", "weight", ".", "shape", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "3", "]", ":", "\n", "            ", "grad_mask_weight", "=", "grad_output_unfolded", ".", "matmul", "(", "mask", ".", "transpose", "(", "2", ",", "1", ")", ")", "# B x C_out x k1*k2", "\n", "grad_mask_weight", "=", "grad_mask_weight", ".", "view", "(", "grad_mask_weight", ".", "size", "(", "0", ")", ",", "*", "mask_weight", ".", "shape", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "4", "]", ":", "\n", "            ", "grad_bias", "=", "grad_output", ".", "sum", "(", "dim", "=", "(", "0", ",", "2", ",", "3", ")", ")", "\n", "\n", "", "assert", "not", "ctx", ".", "needs_input_grad", "[", "1", "]", ",", "\"Can't differentiate wrt mask\"", "\n", "\n", "return", "grad_x", ",", "None", ",", "grad_weight", ",", "grad_mask_weight", ",", "grad_bias", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.PONO.forward": [[143, 146], ["masking.pono"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.pono"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "_", ",", "__", "=", "pono", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.concat_elu.forward": [[151, 155], ["torch.elu", "torch.elu", "torch.elu", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.size"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "# Pytorch ordering", "\n", "        ", "axis", "=", "len", "(", "x", ".", "size", "(", ")", ")", "-", "3", "\n", "return", "F", ".", "elu", "(", "torch", ".", "cat", "(", "[", "x", ",", "-", "x", "]", ",", "dim", "=", "axis", ")", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.mask_param": [[158, 192], ["range", "enumerate", "int", "masking.get_generation_order_idx", "all_generation_idx.append", "masking.get_masks", "all_masks.append", "masking.size2str"], "function", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.get_generation_order_idx", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.get_masks", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.size2str"], ["", "", "def", "mask_param", "(", "seq_size", ",", "args", ")", ":", "\n", "    ", "plot_mask", "=", "args", ".", "plot_mask", "\n", "param", "=", "{", "}", "\n", "param", "[", "'max_dilation'", "]", "=", "args", ".", "max_dilation", "\n", "observed_idx", "=", "args", ".", "observed_idx", "\n", "orders", "=", "[", "args", ".", "order1", ",", "args", ".", "order2", "]", "\n", "param", "[", "'nr_logistic_mix'", "]", "=", "args", ".", "nr_logistic_mix", "\n", "param", "[", "'input_channels'", "]", "=", "args", ".", "input_channels", "\n", "param", "[", "'conv_bias'", "]", "=", "args", ".", "conv_bias", "\n", "param", "[", "'conv_mask_weight'", "]", "=", "args", ".", "conv_mask_weight", "\n", "param", "[", "'nr_filters'", "]", "=", "args", ".", "nr_filters", "\n", "param", "[", "'feature_norm_op'", "]", "=", "args", ".", "feature_norm_op", "\n", "\n", "param", "[", "'num_mix'", "]", "=", "args", ".", "num_mix", "\n", "param", "[", "'kernel_size'", "]", "=", "args", ".", "kernel_size", "\n", "\n", "if", "args", ".", "device", "!=", "'cpu'", ":", "\n", "        ", "device", "=", "int", "(", "args", ".", "device", ")", "\n", "\n", "", "all_generation_idx", "=", "[", "]", "\n", "for", "order", "in", "range", "(", "2", ")", ":", "\n", "        ", "generation_idx", "=", "get_generation_order_idx", "(", "orders", "[", "order", "]", ",", "seq_size", "[", "1", "]", ",", "seq_size", "[", "2", "]", ")", "\n", "all_generation_idx", ".", "append", "(", "generation_idx", ")", "\n", "\n", "", "all_masks", "=", "[", "]", "\n", "for", "_", ",", "generation_idx", "in", "enumerate", "(", "all_generation_idx", ")", ":", "\n", "        ", "masks", "=", "get_masks", "(", "generation_idx", ",", "seq_size", "[", "1", "]", ",", "seq_size", "[", "2", "]", ",", "param", "[", "'kernel_size'", "]", ",", "\n", "param", "[", "'max_dilation'", "]", ",", "observed_idx", "=", "observed_idx", ",", "out_dir", "=", "args", ".", "run_dir", ",", "\n", "plot_suffix", "=", "f\"obs{size2str(seq_size)}\"", ",", "plot", "=", "plot_mask", ")", "\n", "if", "args", ".", "device", "!=", "'cpu'", ":", "\n", "            ", "masks", "=", "[", "mask", "for", "mask", "in", "masks", "]", "\n", "", "all_masks", ".", "append", "(", "masks", ")", "\n", "\n", "", "return", "all_masks", ",", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.pono": [[195, 201], ["x.mean", "x.var().add().sqrt", "x.var().add", "x.var"], "function", ["None"], ["", "def", "pono", "(", "x", ",", "epsilon", "=", "1e-5", ")", ":", "\n", "    ", "\"\"\"Positional normalization\"\"\"", "\n", "mean", "=", "x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "var", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "add", "(", "epsilon", ")", ".", "sqrt", "(", ")", "\n", "output", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "return", "output", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.get_generation_order_idx": [[204, 208], ["eval"], "function", ["None"], ["", "def", "get_generation_order_idx", "(", "order", ",", "rows", ",", "cols", ")", ":", "\n", "    ", "\"\"\"Get (rows*cols) x 2 np array given order that pixels are generated\"\"\"", "\n", "assert", "order", "in", "[", "\"LR\"", ",", "\"TB\"", ",", "\"s_curve\"", "]", "\n", "return", "eval", "(", "f\"{order}_idx\"", ")", "(", "rows", ",", "cols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.TB_idx": [[211, 219], ["range", "numpy.array", "range", "idx.append"], "function", ["None"], ["", "def", "TB_idx", "(", "rows", ",", "cols", ")", ":", "\n", "    ", "\"\"\"Generate top-bottom ordering \"\"\"", "\n", "idx", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "rows", ")", ":", "\n", "        ", "fr_idx", "=", "range", "(", "cols", ")", "\n", "for", "j", "in", "fr_idx", ":", "\n", "            ", "idx", ".", "append", "(", "(", "f", ",", "j", ")", ")", "\n", "", "", "return", "np", ".", "array", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.LR_idx": [[222, 230], ["range", "numpy.array", "range", "idx.append"], "function", ["None"], ["", "def", "LR_idx", "(", "rows", ",", "cols", ")", ":", "\n", "    ", "\"\"\"Generate left-right ordering\"\"\"", "\n", "idx", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "cols", ")", ":", "\n", "        ", "jnt_idx", "=", "range", "(", "rows", ")", "\n", "for", "f", "in", "jnt_idx", ":", "\n", "            ", "idx", ".", "append", "(", "(", "f", ",", "j", ")", ")", "\n", "", "", "return", "np", ".", "array", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.s_curve_idx": [[233, 241], ["range", "numpy.array", "range", "range", "idx.append"], "function", ["None"], ["", "def", "s_curve_idx", "(", "rows", ",", "cols", ")", ":", "\n", "    ", "\"\"\"Generate S shape curve\"\"\"", "\n", "idx", "=", "[", "]", "\n", "for", "r", "in", "range", "(", "rows", ")", ":", "\n", "        ", "col_idx", "=", "range", "(", "cols", ")", "if", "r", "%", "2", "==", "0", "else", "range", "(", "cols", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "for", "c", "in", "col_idx", ":", "\n", "            ", "idx", ".", "append", "(", "(", "r", ",", "c", ")", ")", "\n", "", "", "return", "np", ".", "array", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.size2str": [[244, 246], ["map"], "function", ["None"], ["", "def", "size2str", "(", "obs", ")", ":", "\n", "    ", "return", "'x'", ".", "join", "(", "map", "(", "str", ",", "obs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.get_masks": [[249, 269], ["masking.get_unfolded_masks", "masking.get_unfolded_masks", "mask_init.cuda.cuda", "mask_undilated.cuda.cuda", "masking.plot_unfolded_masks", "masking.plot_unfolded_masks", "masking.get_unfolded_masks", "mask_dilated.cuda.cuda", "masking.plot_unfolded_masks", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.get_unfolded_masks", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.get_unfolded_masks", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.plot_unfolded_masks", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.plot_unfolded_masks", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.get_unfolded_masks", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.plot_unfolded_masks"], ["", "def", "get_masks", "(", "generation_idx", ",", "nrows", ",", "ncols", ",", "k", "=", "3", ",", "max_dilation", "=", "1", ",", "observed_idx", "=", "None", ",", "out_dir", "=", "\"/tmp\"", ",", "plot_suffix", "=", "\"\"", ",", "plot", "=", "True", ")", ":", "\n", "    ", "\"\"\"Get and plot three masks: mask type A for first layer, mask type B for later layers, and mask type B with dilation.\n    Masks are copied to GPU and repeated along the batch dimension torch.cuda.device_count() times for DataParallel support.\"\"\"", "\n", "mask_init", "=", "get_unfolded_masks", "(", "generation_idx", ",", "nrows", ",", "ncols", ",", "k", "=", "k", ",", "dilation", "=", "1", ",", "mask_type", "=", "'A'", ",", "observed_idx", "=", "observed_idx", ")", "\n", "mask_undilated", "=", "get_unfolded_masks", "(", "generation_idx", ",", "nrows", ",", "ncols", ",", "k", "=", "k", ",", "dilation", "=", "1", ",", "mask_type", "=", "'B'", ",", "observed_idx", "=", "observed_idx", ")", "\n", "if", "plot", ":", "\n", "        ", "plot_unfolded_masks", "(", "nrows", ",", "ncols", ",", "generation_idx", ",", "mask_init", ",", "k", "=", "k", ",", "out_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"mask_init_{plot_suffix}.pdf\"", ")", ")", "\n", "plot_unfolded_masks", "(", "nrows", ",", "ncols", ",", "generation_idx", ",", "mask_undilated", ",", "k", "=", "k", ",", "out_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"mask_undilated_{plot_suffix}.pdf\"", ")", ")", "\n", "", "mask_init", "=", "mask_init", ".", "cuda", "(", "non_blocking", "=", "True", ")", "# .repeat(torch.cuda.device_count(), 1, 1)", "\n", "mask_undilated", "=", "mask_undilated", ".", "cuda", "(", "non_blocking", "=", "True", ")", "# .repeat(torch.cuda.device_count(), 1, 1)", "\n", "\n", "if", "max_dilation", "==", "1", ":", "\n", "        ", "mask_dilated", "=", "mask_undilated", "\n", "", "else", ":", "\n", "        ", "mask_dilated", "=", "get_unfolded_masks", "(", "generation_idx", ",", "nrows", ",", "ncols", ",", "k", "=", "k", ",", "dilation", "=", "max_dilation", ",", "mask_type", "=", "'B'", ",", "observed_idx", "=", "observed_idx", ")", "\n", "if", "plot", ":", "\n", "            ", "plot_unfolded_masks", "(", "nrows", ",", "ncols", ",", "generation_idx", ",", "mask_dilated", ",", "k", "=", "k", ",", "out_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"mask_dilated_d{max_dilation}_{plot_suffix}.pdf\"", ")", ")", "\n", "", "mask_dilated", "=", "mask_dilated", ".", "cuda", "(", "non_blocking", "=", "True", ")", "# .repeat(torch.cuda.device_count(), 1, 1)", "\n", "\n", "", "return", "mask_init", ",", "mask_undilated", ",", "mask_dilated", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.get_unfolded_masks": [[272, 278], ["masking.kernel_masks", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.view().transpose", "torch.tensor.view"], "function", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.kernel_masks"], ["", "def", "get_unfolded_masks", "(", "generation_order_idx", ",", "nrows", ",", "ncols", ",", "k", "=", "3", ",", "dilation", "=", "1", ",", "mask_type", "=", "'B'", ",", "observed_idx", "=", "None", ")", ":", "\n", "    ", "assert", "mask_type", "in", "[", "'A'", ",", "'B'", "]", "\n", "masks", "=", "kernel_masks", "(", "generation_order_idx", ",", "nrows", ",", "ncols", ",", "k", ",", "dilation", ",", "mask_type", ",", "set_padding", "=", "0", ",", "observed_idx", "=", "observed_idx", ")", "\n", "masks", "=", "torch", ".", "tensor", "(", "masks", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "masks_unf", "=", "masks", ".", "view", "(", "1", ",", "nrows", "*", "ncols", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "masks_unf", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.kernel_masks": [[281, 330], ["int", "numpy.zeros", "set", "enumerate", "range", "set.add", "numpy.all", "len", "set.add", "range"], "function", ["None"], ["", "def", "kernel_masks", "(", "generation_order_idx", ",", "nrows", ",", "ncols", ",", "k", "=", "3", ",", "dilation", "=", "1", ",", "mask_type", "=", "'B'", ",", "set_padding", "=", "0", ",", "observed_idx", "=", "None", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Generate kernel masks given a pixel generation order.\n    \n    Args:\n        generation_order_idx: N x 2 array, order to generate pixels. \n        nrows\n        ncols\n        k\n        dilation\n        mask_type: A or B\n        set_padding\n        observed_idx: M x 2 array, for coords in this list, will allow all locations to condition.\n            Useful for inpainting tasks, where some context is observed and masking is only needed in the unobserved region.\n    \"\"\"", "\n", "assert", "k", "%", "2", "==", "1", ",", "\"Only odd sized kernels are implemented\"", "\n", "half_k", "=", "int", "(", "k", "/", "2", ")", "\n", "masks", "=", "np", ".", "zeros", "(", "(", "len", "(", "generation_order_idx", ")", ",", "k", ",", "k", ")", ")", "\n", "\n", "locs_generated", "=", "set", "(", ")", "\n", "if", "observed_idx", "is", "not", "None", ":", "\n", "# Can observe some context", "\n", "        ", "for", "r", ",", "c", "in", "observed_idx", ":", "\n", "            ", "locs_generated", ".", "add", "(", "(", "r", ",", "c", ")", ")", "\n", "\n", "# Set masks", "\n", "", "", "for", "i", ",", "(", "r", ",", "c", ")", "in", "enumerate", "(", "generation_order_idx", ")", ":", "\n", "        ", "row_major_index", "=", "r", "*", "ncols", "+", "c", "\n", "for", "dr", "in", "range", "(", "-", "half_k", ",", "half_k", "+", "1", ")", ":", "\n", "            ", "for", "dc", "in", "range", "(", "-", "half_k", ",", "half_k", "+", "1", ")", ":", "\n", "                ", "if", "dr", "==", "0", "and", "dc", "==", "0", ":", "\n", "# skip center pixel of mask", "\n", "                    ", "continue", "\n", "\n", "", "loc", "=", "(", "r", "+", "dr", "*", "dilation", ",", "c", "+", "dc", "*", "dilation", ")", "\n", "if", "loc", "in", "locs_generated", ":", "\n", "# The desired location has been generated,", "\n", "# so we can condition on it", "\n", "                    ", "masks", "[", "row_major_index", ",", "half_k", "+", "dr", ",", "half_k", "+", "dc", "]", "=", "1", "\n", "", "elif", "not", "(", "0", "<=", "loc", "[", "0", "]", "<", "nrows", "and", "0", "<=", "loc", "[", "1", "]", "<", "ncols", ")", ":", "\n", "# Kernel location overlaps with padding", "\n", "                    ", "masks", "[", "row_major_index", ",", "half_k", "+", "dr", ",", "half_k", "+", "dc", "]", "=", "set_padding", "\n", "", "", "", "locs_generated", ".", "add", "(", "(", "r", ",", "c", ")", ")", "\n", "\n", "", "if", "mask_type", "==", "'B'", ":", "\n", "        ", "masks", "[", ":", ",", "half_k", ",", "half_k", "]", "=", "1", "\n", "", "else", ":", "\n", "        ", "assert", "np", ".", "all", "(", "masks", "[", ":", ",", "half_k", ",", "half_k", "]", "==", "0", ")", "\n", "\n", "", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.plot_unfolded_masks": [[333, 337], ["unfolded_masks.view().permute", "print", "masking.plot_masks", "unfolded_masks.view"], "function", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.plot_masks"], ["", "def", "plot_unfolded_masks", "(", "nrows", ",", "ncols", ",", "generation_order", ",", "unfolded_masks", ",", "k", "=", "3", ",", "out_path", "=", "None", ")", ":", "\n", "    ", "masks", "=", "unfolded_masks", ".", "view", "(", "k", ",", "k", ",", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "print", "(", "f\"Plotting kernel masks and saving to {out_path}...\"", ")", "\n", "plot_masks", "(", "nrows", ",", "ncols", ",", "generation_order", ",", "masks", ",", "k", "=", "3", ",", "out_path", "=", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.plot_masks": [[340, 350], ["matplotlib.subplots", "matplotlib.suptitle", "enumerate", "matplotlib.setp", "zip", "axes[].imshow", "matplotlib.savefig", "matplotlib.show"], "function", ["None"], ["", "def", "plot_masks", "(", "nrows", ",", "ncols", ",", "generation_order", ",", "masks", ",", "k", "=", "3", ",", "out_path", "=", "None", ")", ":", "\n", "    ", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "nrows", ",", "ncols", ")", "\n", "plt", ".", "suptitle", "(", "f\"Kernel masks\"", ")", "\n", "for", "row_major_index", ",", "(", "(", "r", ",", "c", ")", ",", "mask", ")", "in", "enumerate", "(", "zip", "(", "generation_order", ",", "masks", ")", ")", ":", "\n", "        ", "axes", "[", "row_major_index", "//", "ncols", ",", "row_major_index", "%", "ncols", "]", ".", "imshow", "(", "mask", ",", "vmin", "=", "0", ",", "vmax", "=", "1", ")", "\n", "", "plt", ".", "setp", "(", "axes", ",", "xticks", "=", "[", "]", ",", "yticks", "=", "[", "]", ")", "\n", "if", "out_path", ":", "\n", "        ", "plt", ".", "savefig", "(", "out_path", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.plot_order": [[353, 374], ["matplotlib.figure", "matplotlib.hlines", "matplotlib.vlines", "zip", "matplotlib.plot", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.xticks", "matplotlib.axis", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.gca().invert_yaxis", "numpy.arange", "matplotlib.savefig", "matplotlib.show", "numpy.arange", "numpy.arange", "matplotlib.gca"], "function", ["None"], ["", "", "def", "plot_order", "(", "generation_idx", ",", "obs", ",", "out_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"Plot generation coordinate list. A star on the curve\n    denotes the pixel generated last. obs is a three-tuple of input image dimensions,\n    (input-channels-unused, num_rows, num_cols)\"\"\"", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "5", ")", ")", "\n", "plt", ".", "hlines", "(", "np", ".", "arange", "(", "-", "1", ",", "obs", "[", "2", "]", ")", "+", "0.5", ",", "xmin", "=", "-", "0.5", ",", "xmax", "=", "obs", "[", "1", "]", "-", "0.5", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "vlines", "(", "np", ".", "arange", "(", "-", "1", ",", "obs", "[", "1", "]", ")", "+", "0.5", ",", "ymin", "=", "-", "0.5", ",", "ymax", "=", "obs", "[", "2", "]", "-", "0.5", ",", "alpha", "=", "0.5", ")", "\n", "cols", ",", "rows", "=", "zip", "(", "*", "generation_idx", ")", "\n", "plt", ".", "plot", "(", "cols", ",", "rows", ",", "color", "=", "\"b\"", ")", "\n", "plt", ".", "scatter", "(", "[", "cols", "[", "0", "]", "]", ",", "[", "rows", "[", "0", "]", "]", ",", "marker", "=", "\"*\"", ",", "s", "=", "500", ",", "c", "=", "\"r\"", ")", "\n", "plt", ".", "scatter", "(", "[", "cols", "[", "-", "1", "]", "]", ",", "[", "rows", "[", "-", "1", "]", "]", ",", "marker", "=", "\"o\"", ",", "s", "=", "500", ",", "c", "=", "\"r\"", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "obs", "[", "1", "]", ")", ")", "\n", "plt", ".", "axis", "(", "\"equal\"", ")", "\n", "plt", ".", "xlabel", "(", "'rows'", ")", "\n", "plt", ".", "ylabel", "(", "'cols'", ")", "\n", "plt", ".", "gca", "(", ")", ".", "invert_yaxis", "(", ")", "\n", "if", "out_path", ":", "\n", "        ", "plt", ".", "savefig", "(", "out_path", "+", "'mask.jpg'", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TimeSeries.__init__": [[15, 19], ["torch.tensor"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "data", ",", "seq_len", ",", "train", "=", "True", ")", ":", "\n", "\t\t", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "frames", "=", "torch", ".", "tensor", "(", "data", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TimeSeries.__getitem__": [[21, 27], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "sample", "=", "self", ".", "frames", "[", "idx", ":", "idx", "+", "self", ".", "seq_len", ",", ":", "]", "\n", "if", "self", ".", "train", ":", "\n", "\t\t\t", "return", "sample", "\n", "", "else", ":", "\n", "\t\t\t", "return", "self", ".", "frames", "[", "-", "self", ".", "seq_len", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TimeSeries.__len__": [[28, 33], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "train", ":", "\n", "\t\t\t", "return", "len", "(", "self", ".", "frames", ")", "-", "self", ".", "seq_len", "\n", "", "else", ":", "\n", "\t\t\t", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.SmallSynthData.__init__": [[36, 54], ["torch.load", "torch.load", "os.path.join", "os.path.join", "datasets.SmallSynthData._normalize_data", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.SmallSynthData._normalize_data"], ["\t", "def", "__init__", "(", "self", ",", "data_path", ",", "mode", ",", "params", ")", ":", "\n", "\t\t", "self", ".", "mode", "=", "mode", "\n", "self", ".", "data_path", "=", "data_path", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'train_feats'", ")", "\n", "edge_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'train_edges'", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'val_feats'", ")", "\n", "edge_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'val_edges'", ")", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "\t\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'test_feats'", ")", "\n", "edge_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'test_edges'", ")", "\n", "", "self", ".", "feats", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "edges", "=", "torch", ".", "load", "(", "edge_path", ")", "\n", "self", ".", "same_norm", "=", "params", "[", "'same_data_norm'", "]", "\n", "self", ".", "no_norm", "=", "params", "[", "'no_data_norm'", "]", "\n", "if", "not", "self", ".", "no_norm", ":", "\n", "\t\t\t", "self", ".", "_normalize_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.SmallSynthData._normalize_data": [[55, 68], ["torch.load", "os.path.join", "torch.load.max", "torch.load.min", "train_data[].max", "train_data[].min", "train_data[].max", "train_data[].min"], "methods", ["None"], ["", "", "def", "_normalize_data", "(", "self", ")", ":", "\n", "\t\t", "train_data", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'train_feats'", ")", ")", "\n", "if", "self", ".", "same_norm", ":", "\n", "\t\t\t", "self", ".", "feat_max", "=", "train_data", ".", "max", "(", ")", "\n", "self", ".", "feat_min", "=", "train_data", ".", "min", "(", ")", "\n", "self", ".", "feats", "=", "(", "self", ".", "feats", "-", "self", ".", "feat_min", ")", "*", "2", "/", "(", "self", ".", "feat_max", "-", "self", ".", "feat_min", ")", "-", "1", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "loc_max", "=", "train_data", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ".", "max", "(", ")", "\n", "self", ".", "loc_min", "=", "train_data", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ".", "min", "(", ")", "\n", "self", ".", "vel_max", "=", "train_data", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", ".", "max", "(", ")", "\n", "self", ".", "vel_min", "=", "train_data", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", ".", "min", "(", ")", "\n", "self", ".", "feats", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", "=", "(", "self", ".", "feats", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", "-", "self", ".", "loc_min", ")", "*", "2", "/", "(", "self", ".", "loc_max", "-", "self", ".", "loc_min", ")", "-", "1", "\n", "self", ".", "feats", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", "=", "(", "self", ".", "feats", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", "-", "self", ".", "vel_min", ")", "*", "2", "/", "(", "self", ".", "vel_max", "-", "self", ".", "vel_min", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.SmallSynthData.unnormalize": [[69, 78], ["numpy.concatenate"], "methods", ["None"], ["", "", "def", "unnormalize", "(", "self", ",", "data", ")", ":", "\n", "\t\t", "if", "self", ".", "no_norm", ":", "\n", "\t\t\t", "return", "data", "\n", "", "elif", "self", ".", "same_norm", ":", "\n", "\t\t\t", "return", "(", "data", "+", "1", ")", "*", "(", "self", ".", "feat_max", "-", "self", ".", "feat_min", ")", "/", "2.", "+", "self", ".", "feat_min", "\n", "", "else", ":", "\n", "\t\t\t", "result1", "=", "(", "data", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", "+", "1", ")", "*", "(", "self", ".", "loc_max", "-", "self", ".", "loc_min", ")", "/", "2.", "+", "self", ".", "loc_min", "\n", "result2", "=", "(", "data", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", "+", "1", ")", "*", "(", "self", ".", "vel_max", "-", "self", ".", "vel_min", ")", "/", "2.", "+", "self", ".", "vel_min", "\n", "return", "np", ".", "concatenate", "(", "[", "result1", ",", "result2", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.SmallSynthData.__getitem__": [[80, 82], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "return", "{", "'inputs'", ":", "self", ".", "feats", "[", "idx", "]", ",", "'edges'", ":", "self", ".", "edges", "[", "idx", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.SmallSynthData.__len__": [[83, 85], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.__init__": [[88, 93], ["datasets.HorseDataset.read_names"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.read_names"], ["\t", "def", "__init__", "(", "self", ",", "dir", ",", "size", ",", "n_c", ",", "portion", "=", "\"train\"", ")", ":", "\n", "\t\t", "self", ".", "dir", "=", "dir", "\n", "self", ".", "names", "=", "self", ".", "read_names", "(", "dir", ",", "portion", ")", "\n", "self", ".", "n_c", "=", "n_c", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.read_names": [[94, 106], ["os.path.join", "list", "open", "line.strip.strip.strip", "os.path.join", "os.path.join", "list.append", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "read_names", "(", "self", ",", "dir", ",", "portion", ")", ":", "\n", "\n", "\t\t", "path", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "\"{}.txt\"", ".", "format", "(", "portion", ")", ")", "\n", "names", "=", "list", "(", ")", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "\t\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "name", "=", "{", "}", "\n", "name", "[", "\"img\"", "]", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "os", ".", "path", ".", "join", "(", "\"images\"", ",", "line", ")", ")", "\n", "name", "[", "\"lbl\"", "]", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "os", ".", "path", ".", "join", "(", "\"labels\"", ",", "line", ")", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "", "", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.__len__": [[107, 109], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.__getitem__": [[111, 131], ["torchvision.Compose", "PIL.open().convert", "torchvision.Compose.", "PIL.open().convert", "torchvision.Compose.", "torch.round", "lbl.repeat.repeat.repeat", "torchvision.Resize", "torchvision.ToTensor", "PIL.open", "PIL.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "# path", "\n", "\t\t", "name", "=", "self", ".", "names", "[", "index", "]", "\n", "img_path", "=", "name", "[", "\"img\"", "]", "\n", "lbl_path", "=", "name", "[", "\"lbl\"", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "self", ".", "size", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "# img", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img", "=", "transform", "(", "img", ")", "\n", "\n", "# lbl", "\n", "lbl", "=", "Image", ".", "open", "(", "lbl_path", ")", ".", "convert", "(", "\"L\"", ")", "\n", "lbl", "=", "transform", "(", "lbl", ")", "\n", "lbl", "=", "torch", ".", "round", "(", "lbl", ")", "\n", "if", "self", ".", "n_c", ">", "1", ":", "\n", "\t\t\t", "lbl", "=", "lbl", ".", "repeat", "(", "self", ".", "n_c", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "{", "\"x\"", ":", "img", ",", "\"y\"", ":", "lbl", ",", "\"path\"", ":", "img_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.preprocess": [[134, 145], ["torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "x", ",", "scale", ",", "bias", ",", "bins", ",", "noise", "=", "False", ")", ":", "\n", "\n", "\t\t", "x", "=", "x", "/", "scale", "\n", "x", "=", "x", "-", "bias", "\n", "\n", "if", "noise", "==", "True", ":", "\n", "\t\t\t", "if", "bins", "==", "2", ":", "\n", "\t\t\t\t", "x", "=", "x", "+", "torch", ".", "zeros_like", "(", "x", ")", ".", "uniform_", "(", "-", "0.5", ",", "0.5", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "x", "=", "x", "+", "torch", ".", "zeros_like", "(", "x", ")", ".", "uniform_", "(", "0", ",", "1", "/", "bins", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.postprocess": [[147, 152], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "x", ",", "scale", ",", "bias", ")", ":", "\n", "\n", "\t\t", "x", "=", "x", "+", "bias", "\n", "x", "=", "x", "*", "scale", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.convert_to_img": [[154, 181], ["y.size", "torchvision.ToTensor", "y.size", "list", "range", "numpy.array", "torch.squeeze().cpu().numpy", "numpy.nan_to_num", "numpy.clip", "torch.mean().cpu().numpy", "numpy.nan_to_num", "numpy.clip", "skimage.color.label2rgb", "skimage.util.img_as_ubyte", "list.append", "numpy.round", "numpy.round", "torchvision.ToTensor.", "torch.squeeze().cpu", "torch.mean().cpu", "torch.squeeze", "torch.mean"], "methods", ["None"], ["", "def", "convert_to_img", "(", "self", ",", "y", ")", ":", "\n", "\t\t", "import", "skimage", ".", "color", "\n", "import", "skimage", ".", "util", "\n", "import", "skimage", ".", "io", "\n", "\n", "C", "=", "y", ".", "size", "(", "1", ")", "\n", "\n", "transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "colors", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "255", ",", "255", ",", "255", "]", "]", ")", "/", "255", "\n", "\n", "if", "C", "==", "1", ":", "\n", "\t\t\t", "seg", "=", "torch", ".", "squeeze", "(", "y", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "seg", "=", "np", ".", "nan_to_num", "(", "seg", ")", "\n", "seg", "=", "np", ".", "clip", "(", "np", ".", "round", "(", "seg", ")", ",", "a_min", "=", "0", ",", "a_max", "=", "1", ")", "\n", "\n", "", "if", "C", ">", "1", ":", "\n", "\t\t\t", "seg", "=", "torch", ".", "mean", "(", "y", ",", "dim", "=", "1", ",", "keepdim", "=", "False", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "seg", "=", "np", ".", "nan_to_num", "(", "seg", ")", "\n", "seg", "=", "np", ".", "clip", "(", "np", ".", "round", "(", "seg", ")", ",", "a_min", "=", "0", ",", "a_max", "=", "1", ")", "\n", "\n", "", "B", ",", "C", ",", "H", ",", "W", "=", "y", ".", "size", "(", ")", "\n", "imgs", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "B", ")", ":", "\n", "\t\t\t", "label_i", "=", "skimage", ".", "color", ".", "label2rgb", "(", "seg", "[", "i", "]", ",", "colors", "=", "colors", ")", "\n", "label_i", "=", "skimage", ".", "util", ".", "img_as_ubyte", "(", "label_i", ")", "\n", "imgs", ".", "append", "(", "transform", "(", "label_i", ")", ")", "\n", "", "return", "imgs", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.__init__": [[188, 217], ["print", "print", "print", "datasets.TFRecordMotionDataset.load_meta_data", "datasets.TFRecordMotionDataset.tf_data_transformations", "datasets.TFRecordMotionDataset.tf_data_normalization", "datasets.TFRecordMotionDataset.tf_data_to_model", "datasets.TFRecordMotionDataset.tf_data.as_numpy_iterator", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.load_meta_data", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.tf_data_transformations", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.tf_data_normalization", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.tf_data_to_model"], ["def", "__init__", "(", "self", ",", "data_path", ",", "meta_data_path", ",", "batch_size", ",", "shuffle", ",", "windows_size", ",", "window_type", ",", "num_parallel_calls", ",", "normalize", ")", ":", "\n", "\t\t", "print", "(", "f'{Fore.YELLOW}'", ")", "\n", "print", "(", "'Loading motion data from {}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "data_path", ")", ")", ")", "\n", "print", "(", "f'{Style.RESET_ALL}'", ")", "\n", "# Extract a window randomly. If the sequence is shorter, ignore it.", "\n", "self", ".", "windows_size", "=", "windows_size", "\n", "# Whether to extract windows randomly, from the beginning or the middle of the sequence.", "\n", "self", ".", "window_type", "=", "window_type", "\n", "self", ".", "num_parallel_calls", "=", "num_parallel_calls", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n", "self", ".", "tf_data", "=", "None", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n", "# Load statistics and other data summary stored in the meta-data file.", "\n", "self", ".", "meta_data", "=", "self", ".", "load_meta_data", "(", "meta_data_path", ")", "\n", "\n", "self", ".", "mean_all", "=", "self", ".", "meta_data", "[", "'mean_all'", "]", "\n", "self", ".", "var_all", "=", "self", ".", "meta_data", "[", "'var_all'", "]", "\n", "self", ".", "mean_channel", "=", "self", ".", "meta_data", "[", "'mean_channel'", "]", "\n", "self", ".", "var_channel", "=", "self", ".", "meta_data", "[", "'var_channel'", "]", "\n", "\n", "self", ".", "tf_data_transformations", "(", ")", "\n", "self", ".", "tf_data_normalization", "(", ")", "\n", "self", ".", "tf_data_to_model", "(", ")", "\n", "\n", "self", ".", "tf_samples", "=", "self", ".", "tf_data", ".", "as_numpy_iterator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.tf_data_transformations": [[219, 244], ["tensorflow.data.Options", "tensorflow.data.TFRecordDataset.list_files", "datasets.TFRecordMotionDataset.tf_data.with_options", "datasets.TFRecordMotionDataset.tf_data.apply", "datasets.TFRecordMotionDataset.tf_data.map", "datasets.TFRecordMotionDataset.tf_data.prefetch", "tensorflow.data.experimental.parallel_interleave", "functools.partial", "datasets.TFRecordMotionDataset.tf_data.shuffle", "datasets.TFRecordMotionDataset.tf_data.filter", "functools.partial", "datasets.TFRecordMotionDataset.tf_data.map", "functools.partial", "datasets.TFRecordMotionDataset.tf_data.map", "functools.partial", "datasets.TFRecordMotionDataset.tf_data.map", "Exception", "functools.partial"], "methods", ["None"], ["", "def", "tf_data_transformations", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tLoads the raw data and apply preprocessing.\n\t\tThis method is also used in calculation of the dataset statistics (i.e., meta-data file).\n\t\t\"\"\"", "\n", "tf_data_opt", "=", "tf", ".", "data", ".", "Options", "(", ")", "\n", "\n", "self", ".", "tf_data", "=", "tf", ".", "data", ".", "TFRecordDataset", ".", "list_files", "(", "self", ".", "data_path", ",", "seed", "=", "1234", ",", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "with_options", "(", "tf_data_opt", ")", "\n", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "apply", "(", "tf", ".", "data", ".", "experimental", ".", "parallel_interleave", "(", "tf", ".", "data", ".", "TFRecordDataset", ",", "cycle_length", "=", "self", ".", "num_parallel_calls", ",", "block_length", "=", "1", ",", "sloppy", "=", "self", ".", "shuffle", ")", ")", "\n", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "map", "(", "functools", ".", "partial", "(", "self", ".", "parse_single_tfexample_fn", ")", ",", "num_parallel_calls", "=", "self", ".", "num_parallel_calls", ")", "\n", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "prefetch", "(", "self", ".", "batch_size", "*", "10", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "\t\t\t", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "shuffle", "(", "self", ".", "batch_size", "*", "10", ")", "\n", "\n", "", "if", "self", ".", "windows_size", ">", "0", ":", "\n", "\t\t\t", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "filter", "(", "functools", ".", "partial", "(", "self", ".", "pp_filter", ")", ")", "\n", "if", "self", ".", "window_type", "==", "'from_beginning'", ":", "\n", "\t\t\t\t", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "map", "(", "functools", ".", "partial", "(", "self", ".", "pp_get_windows_beginning", ")", ",", "num_parallel_calls", "=", "self", ".", "num_parallel_calls", ")", "\n", "", "elif", "self", ".", "window_type", "==", "'from_center'", ":", "\n", "\t\t\t\t", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "map", "(", "functools", ".", "partial", "(", "self", ".", "pp_get_windows_middle", ")", ",", "num_parallel_calls", "=", "self", ".", "num_parallel_calls", ")", "\n", "", "elif", "self", ".", "window_type", "==", "'random'", ":", "\n", "\t\t\t\t", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "map", "(", "functools", ".", "partial", "(", "self", ".", "pp_get_windows_random", ")", ",", "num_parallel_calls", "=", "self", ".", "num_parallel_calls", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "Exception", "(", "\"Unknown window type.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.tf_data_normalization": [[246, 252], ["datasets.TFRecordMotionDataset.tf_data.map", "datasets.TFRecordMotionDataset.tf_data.map", "functools.partial", "functools.partial"], "methods", ["None"], ["", "", "", "def", "tf_data_normalization", "(", "self", ")", ":", "\n", "# Applies normalization.", "\n", "\t\t", "if", "self", ".", "normalize", ":", "\n", "\t\t\t", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "map", "(", "functools", ".", "partial", "(", "self", ".", "normalize_zero_mean_unit_variance_channel", ",", "key", "=", "\"poses\"", ")", ",", "num_parallel_calls", "=", "self", ".", "num_parallel_calls", ")", "\n", "", "else", ":", "# Some models require the feature size.", "\n", "\t\t\t", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "map", "(", "functools", ".", "partial", "(", "self", ".", "pp_set_feature_size", ")", ",", "num_parallel_calls", "=", "self", ".", "num_parallel_calls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.tf_data_to_model": [[254, 261], ["datasets.TFRecordMotionDataset.tf_data.map", "datasets.TFRecordMotionDataset.tf_data.padded_batch", "datasets.TFRecordMotionDataset.tf_data.prefetch", "tensorflow.test.is_gpu_available", "functools.partial", "datasets.TFRecordMotionDataset.tf_data.apply", "tensorflow.compat.v1.data.get_output_shapes", "tensorflow.data.experimental.prefetch_to_device"], "methods", ["None"], ["", "", "def", "tf_data_to_model", "(", "self", ")", ":", "\n", "# Converts the data into the format that a model expects. Creates input, target, sequence_length, etc.", "\n", "\t\t", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "map", "(", "functools", ".", "partial", "(", "self", ".", "to_model_inputs", ")", ",", "num_parallel_calls", "=", "self", ".", "num_parallel_calls", ")", "\n", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "padded_batch", "(", "self", ".", "batch_size", ",", "padded_shapes", "=", "tf", ".", "compat", ".", "v1", ".", "data", ".", "get_output_shapes", "(", "self", ".", "tf_data", ")", ")", "\n", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "prefetch", "(", "2", ")", "\n", "if", "tf", ".", "test", ".", "is_gpu_available", "(", ")", ":", "\n", "\t\t\t", "self", ".", "tf_data", "=", "self", ".", "tf_data", ".", "apply", "(", "tf", ".", "data", ".", "experimental", ".", "prefetch_to_device", "(", "'/device:GPU:0'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.load_meta_data": [[263, 276], ["print", "[].tolist", "os.path.exists", "numpy.load"], "methods", ["None"], ["", "", "def", "load_meta_data", "(", "self", ",", "meta_data_path", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tLoads meta-data file given the path. It is assumed to be in numpy.\n\t\tArgs:\n\t\t\tmeta_data_path:\n\t\tReturns:\n\t\t\tMeta-data dictionary or False if it is not found.\n\t\t\"\"\"", "\n", "if", "not", "meta_data_path", "or", "not", "os", ".", "path", ".", "exists", "(", "meta_data_path", ")", ":", "\n", "\t\t\t", "print", "(", "\"Meta-data not found.\"", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "\t\t\t", "return", "np", ".", "load", "(", "meta_data_path", ",", "allow_pickle", "=", "True", ")", "[", "'stats'", "]", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.pp_set_feature_size": [[278, 282], ["sample[].set_shape", "sample[].get_shape().as_list", "sample[].get_shape"], "methods", ["None"], ["", "", "def", "pp_set_feature_size", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "seq_len", "=", "sample", "[", "\"poses\"", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", "\n", "sample", "[", "\"poses\"", "]", ".", "set_shape", "(", "[", "seq_len", ",", "self", ".", "mean_channel", ".", "shape", "[", "0", "]", "]", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.pp_filter": [[284, 286], ["tensorflow.shape"], "methods", ["None"], ["", "def", "pp_filter", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "return", "tf", ".", "shape", "(", "sample", "[", "\"poses\"", "]", ")", "[", "0", "]", ">=", "self", ".", "windows_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.pp_get_windows_random": [[288, 294], ["tensorflow.minimum", "tensorflow.shape", "tensorflow.random.uniform", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "pp_get_windows_random", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "start", "=", "tf", ".", "random", ".", "uniform", "(", "(", "1", ",", "1", ")", ",", "minval", "=", "0", ",", "maxval", "=", "tf", ".", "shape", "(", "sample", "[", "\"poses\"", "]", ")", "[", "0", "]", "-", "self", ".", "windows_size", "+", "1", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "0", "]", "[", "0", "]", "\n", "end", "=", "tf", ".", "minimum", "(", "start", "+", "self", ".", "windows_size", ",", "tf", ".", "shape", "(", "sample", "[", "\"poses\"", "]", ")", "[", "0", "]", ")", "\n", "sample", "[", "\"poses\"", "]", "=", "sample", "[", "\"poses\"", "]", "[", "start", ":", "end", ",", ":", "]", "\n", "sample", "[", "\"shape\"", "]", "=", "tf", ".", "shape", "(", "sample", "[", "\"poses\"", "]", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.pp_get_windows_beginning": [[296, 301], ["tensorflow.shape"], "methods", ["None"], ["", "def", "pp_get_windows_beginning", "(", "self", ",", "sample", ")", ":", "\n", "# Extract a window from the beginning of the sequence.", "\n", "\t\t", "sample", "[", "\"poses\"", "]", "=", "sample", "[", "\"poses\"", "]", "[", "0", ":", "self", ".", "windows_size", ",", ":", "]", "\n", "sample", "[", "\"shape\"", "]", "=", "tf", ".", "shape", "(", "sample", "[", "\"poses\"", "]", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.pp_get_windows_middle": [[303, 311], ["tensorflow.maximum", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "pp_get_windows_middle", "(", "self", ",", "sample", ")", ":", "\n", "# Window is located at the center of the sequence.", "\n", "\t\t", "seq_len", "=", "tf", ".", "shape", "(", "sample", "[", "\"poses\"", "]", ")", "[", "0", "]", "\n", "start", "=", "tf", ".", "maximum", "(", "(", "seq_len", "//", "2", ")", "-", "(", "self", ".", "windows_size", "//", "2", ")", ",", "0", ")", "\n", "end", "=", "start", "+", "self", ".", "windows_size", "\n", "sample", "[", "\"poses\"", "]", "=", "sample", "[", "\"poses\"", "]", "[", "start", ":", "end", ",", ":", "]", "\n", "sample", "[", "\"shape\"", "]", "=", "tf", ".", "shape", "(", "sample", "[", "\"poses\"", "]", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.to_model_inputs": [[313, 327], ["dict"], "methods", ["None"], ["", "def", "to_model_inputs", "(", "self", ",", "tf_sample_dict", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tTransforms a TFRecord sample into a more general sample representation where we use global keys to represent\n\t\tthe required fields by the models.\n\t\tArgs:\n\t\t\ttf_sample_dict:\n\t\tReturns:\n\t\t\"\"\"", "\n", "model_sample", "=", "dict", "(", ")", "\n", "model_sample", "[", "'seq_len'", "]", "=", "tf_sample_dict", "[", "\"shape\"", "]", "[", "0", "]", "\n", "model_sample", "[", "'inputs'", "]", "=", "tf_sample_dict", "[", "\"poses\"", "]", "\n", "model_sample", "[", "'motion_targets'", "]", "=", "tf_sample_dict", "[", "\"poses\"", "]", "\n", "model_sample", "[", "'id'", "]", "=", "tf_sample_dict", "[", "\"sample_id\"", "]", "\n", "return", "model_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.parse_single_tfexample_fn": [[329, 344], ["tensorflow.io.parse_single_example", "tensorflow.reshape", "tensorflow.strings.substr", "tensorflow.strings.join", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.VarLenFeature", "tensorflow.sparse.to_dense", "tensorflow.strings.length"], "methods", ["None"], ["", "def", "parse_single_tfexample_fn", "(", "self", ",", "proto", ")", ":", "\n", "\t\t", "feature_to_type", "=", "{", "\n", "\"file_id\"", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "string", ")", ",", "\n", "\"db_name\"", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "string", ")", ",", "\n", "\"shape\"", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "2", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "\"poses\"", ":", "tf", ".", "io", ".", "VarLenFeature", "(", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "}", "\n", "\n", "parsed_features", "=", "tf", ".", "io", ".", "parse_single_example", "(", "proto", ",", "feature_to_type", ")", "\n", "parsed_features", "[", "\"poses\"", "]", "=", "tf", ".", "reshape", "(", "tf", ".", "sparse", ".", "to_dense", "(", "parsed_features", "[", "\"poses\"", "]", ")", ",", "parsed_features", "[", "\"shape\"", "]", ")", "\n", "\n", "file_id", "=", "tf", ".", "strings", ".", "substr", "(", "parsed_features", "[", "\"file_id\"", "]", ",", "0", ",", "tf", ".", "strings", ".", "length", "(", "parsed_features", "[", "\"file_id\"", "]", ")", ")", "\n", "parsed_features", "[", "\"sample_id\"", "]", "=", "tf", ".", "strings", ".", "join", "(", "[", "parsed_features", "[", "\"db_name\"", "]", ",", "file_id", "]", ",", "separator", "=", "\"/\"", ")", "\n", "\n", "return", "parsed_features", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.normalize_zero_mean_unit_variance_all": [[346, 349], ["None"], "methods", ["None"], ["", "def", "normalize_zero_mean_unit_variance_all", "(", "self", ",", "sample_dict", ",", "key", ")", ":", "\n", "\t\t", "sample_dict", "[", "key", "]", "=", "(", "sample_dict", "[", "key", "]", "-", "self", ".", "mean_all", ")", "/", "self", ".", "var_all", "\n", "return", "sample_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.normalize_zero_mean_unit_variance_channel": [[351, 354], ["None"], "methods", ["None"], ["", "def", "normalize_zero_mean_unit_variance_channel", "(", "self", ",", "sample_dict", ",", "key", ")", ":", "\n", "\t\t", "sample_dict", "[", "key", "]", "=", "(", "sample_dict", "[", "key", "]", "-", "self", ".", "mean_channel", ")", "/", "self", ".", "var_channel", "\n", "return", "sample_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.unnormalize_zero_mean_unit_variance_all": [[356, 360], ["None"], "methods", ["None"], ["", "def", "unnormalize_zero_mean_unit_variance_all", "(", "self", ",", "sample_dict", ",", "key", ")", ":", "\n", "\t\t", "if", "self", ".", "normalize", ":", "\n", "\t\t\t", "sample_dict", "[", "key", "]", "=", "sample_dict", "[", "key", "]", "*", "self", ".", "var_all", "+", "self", ".", "mean_all", "\n", "", "return", "sample_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.unnormalize_zero_mean_unit_variance_channel": [[362, 366], ["None"], "methods", ["None"], ["", "def", "unnormalize_zero_mean_unit_variance_channel", "(", "self", ",", "sample_dict", ",", "key", ")", ":", "\n", "\t\t", "if", "self", ".", "normalize", ":", "\n", "\t\t\t", "sample_dict", "[", "key", "]", "=", "sample_dict", "[", "key", "]", "*", "self", ".", "var_channel", "+", "self", ".", "mean_channel", "\n", "", "return", "sample_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.get_tf_samples": [[368, 371], ["datasets.TFRecordMotionDataset.tf_data.as_numpy_iterator"], "methods", ["None"], ["", "def", "get_tf_samples", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "tf_samples", "=", "self", ".", "tf_data", ".", "as_numpy_iterator", "(", ")", "\n", "return", "self", ".", "tf_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.__len__": [[373, 375], ["sum"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "sum", "(", "1", "for", "_", "in", "self", ".", "tf_data", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.MotionFlowModel.__init__": [[17, 31], ["torch.Module.__init__", "models.MotionFlow", "models.NNTheta", "models.MotionFlowModel.register_parameter", "models.MotionFlowModel.register_parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "learn_top", "=", "args", ".", "learn_top", "\n", "self", ".", "n_bins", "=", "2", "\n", "self", ".", "seq_size_x", "=", "args", ".", "x_size", "\n", "self", ".", "seq_size_y", "=", "args", ".", "y_size", "\n", "self", ".", "residual", "=", "args", ".", "residual", "\n", "self", ".", "pred_length", "=", "args", ".", "pred_length", "\n", "\n", "self", ".", "flow", "=", "MotionFlow", "(", "args", ")", "\n", "self", ".", "nn_theta", "=", "NNTheta", "(", "encoder_ch_in", "=", "self", ".", "seq_size_y", "[", "0", "]", "*", "2", ",", "encoder_mode", "=", "'conv_net'", ",", "h_ch_in", "=", "self", ".", "seq_size_y", "[", "0", "]", ",", "num_blocks", "=", "5", ")", "\n", "self", ".", "register_parameter", "(", "\"new_mean\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "flow", ".", "output_shapes", "[", "-", "1", "]", "[", "1", "]", ",", "self", ".", "flow", ".", "output_shapes", "[", "-", "1", "]", "[", "2", "]", ",", "self", ".", "flow", ".", "output_shapes", "[", "-", "1", "]", "[", "3", "]", "]", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "\"new_logs\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "flow", ".", "output_shapes", "[", "-", "1", "]", "[", "1", "]", ",", "self", ".", "flow", ".", "output_shapes", "[", "-", "1", "]", "[", "2", "]", ",", "self", ".", "flow", ".", "output_shapes", "[", "-", "1", "]", "[", "3", "]", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.MotionFlowModel.forward": [[32, 128], ["torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "float", "models.MotionFlowModel.prior", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "range", "models.MotionFlowModel.nn_theta", "models.GaussianDiag.logp", "models.MotionFlowModel.nn_theta", "models.GaussianDiag.logp", "models.GaussianDiag.sample", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "len", "yi.permute().contiguous.permute().contiguous.view", "yi.permute().contiguous.permute().contiguous.permute().contiguous", "z.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.GaussianDiag.logp", "float", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.log", "range", "models.MotionFlowModel.flow", "models.MotionFlowModel.flow", "models.GaussianDiag.batchsample", "x[].permute", "x[].permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "z.append", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "y.view.view.permute().contiguous", "y.view.view.view", "yi.permute().contiguous.permute().contiguous.permute", "yi.permute().contiguous.permute().contiguous.permute", "numpy.log", "models.MotionFlowModel.flow", "models.MotionFlowModel.flow", "models.MotionFlowModel.flow", "models.MotionFlowModel.nn_theta", "models.GaussianDiag.sample", "z.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ys.append", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "models.MotionFlowModel.flow", "models.MotionFlowModel.flow", "y.view.view.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "yi.permute().contiguous.permute().contiguous.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlowModel.prior", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.logp", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.logp", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.sample", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.logp", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.batchsample", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.sample"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ",", "eps_std", "=", "1.0", ",", "reverse", "=", "False", ",", "device", "=", "None", ")", ":", "\n", "        ", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "s1", ",", "s2", ",", "s3", "=", "self", ".", "seq_size_x", "\n", "s1y", ",", "s2y", ",", "s3y", "=", "self", ".", "seq_size_y", "\n", "\n", "dimensions", "=", "s1y", "*", "s2y", "*", "s3y", "\n", "logdet", "=", "torch", ".", "zeros", "(", "B", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "logdet", "+=", "float", "(", "-", "np", ".", "log", "(", "self", ".", "n_bins", ")", "*", "dimensions", ")", "\n", "mean", ",", "logs", "=", "self", ".", "prior", "(", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "s2", ",", "s3", ",", "s1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "reverse", "==", "False", ":", "\n", "            ", "y", "=", "[", "y", "[", ":", ",", "i", ":", "i", "+", "1", "]", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "1", "]", ")", "]", "\n", "\n", "nll", "=", "0.0", "\n", "objective", "=", "0.0", "\n", "z", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "                ", "yi", "=", "y", "[", "i", "]", "\n", "\n", "yi", "=", "yi", ".", "view", "(", "B", ",", "s2y", ",", "s1y", ",", "s3y", ")", "\n", "yi", "=", "yi", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "self", ".", "residual", ":", "\n", "                    ", "y_dif", "=", "yi", "-", "x", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "zi", ",", "logdet", "=", "self", ".", "flow", "(", "x", ",", "y_dif", ",", "logdet", "=", "logdet", ",", "reverse", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "zi", ",", "logdet", "=", "self", ".", "flow", "(", "x", ",", "yi", ",", "logdet", "=", "logdet", ",", "reverse", "=", "False", ")", "\n", "\n", "", "z", ".", "append", "(", "zi", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", "[", ":", ",", ":", ",", "1", ":", "]", ",", "yi", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "objective", "+=", "GaussianDiag", ".", "logp", "(", "mean", ",", "logs", ",", "zi", ")", "\n", "\n", "", "mu", ",", "logsigma", "=", "self", ".", "nn_theta", "(", "z", "[", "0", "]", ",", "z", "[", "1", "]", ")", "\n", "objective", "+=", "GaussianDiag", ".", "logp", "(", "mu", ",", "logsigma", ",", "z", "[", "1", "]", ")", "\n", "\n", "mu", ",", "logsigma", "=", "self", ".", "nn_theta", "(", "z", "[", "1", "]", ",", "z", "[", "2", "]", ")", "\n", "objective", "+=", "GaussianDiag", ".", "logp", "(", "mu", ",", "logsigma", ",", "z", "[", "2", "]", ")", "\n", "\n", "objective", "+=", "logdet", "\n", "nll", "=", "-", "objective", "/", "float", "(", "np", ".", "log", "(", "2.", ")", "*", "dimensions", ")", "\n", "\n", "z_out", "=", "zi", ".", "clone", "(", ")", "\n", "\n", "return", "z_out", ",", "nll", "\n", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "reverse", ":", "\n", "                    ", "ys", "=", "[", "]", "\n", "eps_std", "=", "0.006", "\n", "z", "=", "[", "]", "\n", "z_init", "=", "GaussianDiag", ".", "batchsample", "(", "B", ",", "mean", ",", "logs", ",", "eps_std", ")", "\n", "\n", "y0", "=", "x", "[", ":", ",", ":", ",", "-", "2", ":", "-", "1", "]", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "y1", "=", "x", "[", ":", ",", ":", ",", "-", "1", ":", "]", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "x0", "=", "torch", ".", "cat", "(", "(", "x", "[", ":", ",", ":", ",", ":", "2", "]", ",", "x", "[", ":", ",", ":", ",", ":", "-", "2", "]", ")", ",", "dim", "=", "2", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "(", "x", "[", ":", ",", ":", ",", ":", "1", "]", ",", "x", "[", ":", ",", ":", ",", ":", "-", "1", "]", ")", ",", "dim", "=", "2", ")", "\n", "if", "self", ".", "residual", ":", "\n", "                        ", "y_dif", "=", "y0", "-", "x0", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "y_dif", "=", "y1", "-", "x1", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "z1", ",", "logdet_i", "=", "self", ".", "flow", "(", "x1", ",", "y_dif", ",", "logdet", "=", "logdet", ",", "reverse", "=", "False", ")", "\n", "", "else", ":", "\n", "                        ", "z0", ",", "logdet_i", "=", "self", ".", "flow", "(", "x0", ",", "y0", ",", "logdet", "=", "logdet", ",", "reverse", "=", "False", ")", "\n", "z1", ",", "logdet_i", "=", "self", ".", "flow", "(", "x1", ",", "y1", ",", "logdet", "=", "logdet", ",", "reverse", "=", "False", ")", "\n", "\n", "", "z", ".", "append", "(", "z1", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "pred_length", ")", ":", "\n", "                        ", "mu", ",", "logsigma", "=", "self", ".", "nn_theta", "(", "z", "[", "i", "]", ",", "z_init", ")", "\n", "zi", "=", "GaussianDiag", ".", "sample", "(", "mu", ",", "logsigma", ",", "eps_std", ")", "\n", "logdet", "+=", "logdet_i", "\n", "if", "self", ".", "residual", ":", "\n", "                            ", "y_dif", ",", "logdet_i", "=", "self", ".", "flow", "(", "x", ",", "zi", ",", "eps_std", "=", "eps_std", ",", "reverse", "=", "True", ")", "\n", "", "else", ":", "\n", "                            ", "yi", ",", "logdet_i", "=", "self", ".", "flow", "(", "x", ",", "zi", ",", "eps_std", "=", "eps_std", ",", "reverse", "=", "True", ")", "\n", "\n", "", "z", ".", "append", "(", "zi", ")", "\n", "\n", "if", "self", ".", "residual", ":", "\n", "                            ", "yi", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "[", ":", ",", ":", ",", "-", "1", ":", "]", "+", "y_dif", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "(", "x", "[", ":", ",", ":", ",", "1", ":", "]", ",", "yi", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "ys", ".", "append", "(", "yi", ")", "\n", "\n", "", "y", "=", "torch", ".", "cat", "(", "ys", ",", "dim", "=", "2", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "B", ",", "self", ".", "pred_length", ",", "-", "1", ")", "\n", "\n", "", "", "return", "y", ",", "logdet", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.MotionFlowModel.prior": [[129, 134], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "", "def", "prior", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "learn_top", ":", "\n", "            ", "return", "self", ".", "new_mean", ",", "self", ".", "new_logs", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "zeros_like", "(", "self", ".", "new_mean", ")", ",", "torch", ".", "zeros_like", "(", "self", ".", "new_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.MotionFlow.__init__": [[138, 159], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "masking.mask_param", "range", "models.x_convs", "models.MotionFlow.layers.append", "models.MotionFlow.output_shapes.append", "models.structuredGlowStep"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.mask_param"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "output_shapes", "=", "[", "]", "\n", "x_size", "=", "args", ".", "x_size", "\n", "y_size", "=", "args", ".", "y_size", "\n", "x_hidden_channels", "=", "args", ".", "x_hidden_channels", "\n", "x_hidden_size", "=", "args", ".", "x_hidden_size", "\n", "y_hidden_channels", "=", "args", ".", "y_hidden_channels", "\n", "K", "=", "args", ".", "flow_depth", "\n", "\n", "all_masks", ",", "params", "=", "mask_param", "(", "x_size", ",", "args", ")", "\n", "\n", "C", ",", "H", ",", "W", "=", "y_size", "\n", "\n", "# K CGlowStep", "\n", "for", "k", "in", "range", "(", "0", ",", "K", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "structuredGlowStep", "(", "x_size", "=", "x_size", ",", "y_size", "=", "y_size", ",", "x_hidden_channels", "=", "x_hidden_channels", ",", "x_hidden_size", "=", "x_hidden_size", ",", "y_hidden_channels", "=", "y_hidden_channels", ",", "masks", "=", "all_masks", ",", "params", "=", "params", ")", ")", "\n", "self", ".", "output_shapes", ".", "append", "(", "[", "-", "1", ",", "C", ",", "H", ",", "W", "]", ")", "\n", "\n", "", "self", ".", "x_convs", "=", "x_convs", "(", "x_size", "=", "x_size", ",", "y_size", "=", "y_size", ",", "x_hidden_channels", "=", "x_hidden_channels", ",", "x_hidden_size", "=", "x_hidden_size", ",", "y_hidden_channels", "=", "y_hidden_channels", ",", "masks", "=", "all_masks", ",", "params", "=", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.MotionFlow.forward": [[161, 166], ["models.MotionFlow.encode", "models.MotionFlow.decode"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlow.encode", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlow.decode"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "logdet", "=", "0.0", ",", "reverse", "=", "False", ",", "eps_std", "=", "1.0", ")", ":", "\n", "        ", "if", "reverse", "==", "False", ":", "\n", "            ", "return", "self", ".", "encode", "(", "x", ",", "y", ",", "logdet", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "decode", "(", "x", ",", "y", ",", "logdet", ",", "eps_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.MotionFlow.encode": [[167, 172], ["models.MotionFlow.x_convs", "zip", "layer"], "methods", ["None"], ["", "", "def", "encode", "(", "self", ",", "x", ",", "y", ",", "logdet", "=", "0.0", ")", ":", "\n", "        ", "x_actnorm", ",", "x_invconv", "=", "self", ".", "x_convs", "(", "x", ")", "\n", "for", "layer", ",", "shape", "in", "zip", "(", "self", ".", "layers", ",", "self", ".", "output_shapes", ")", ":", "\n", "            ", "y", ",", "logdet", "=", "layer", "(", "x", ",", "y", ",", "logdet", ",", "reverse", "=", "False", ",", "x_actnorm", "=", "x_actnorm", ",", "x_invconv", "=", "x_invconv", ")", "\n", "", "return", "y", ",", "logdet", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.MotionFlow.decode": [[173, 178], ["models.MotionFlow.x_convs", "reversed", "layer"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ",", "y", ",", "logdet", "=", "0.0", ",", "eps_std", "=", "1.0", ")", ":", "\n", "        ", "x_actnorm", ",", "x_invconv", "=", "self", ".", "x_convs", "(", "x", ")", "\n", "for", "layer", "in", "reversed", "(", "self", ".", "layers", ")", ":", "\n", "            ", "y", ",", "logdet", "=", "layer", "(", "x", ",", "y", ",", "logdet", "=", "logdet", ",", "reverse", "=", "True", ",", "x_actnorm", "=", "x_actnorm", ",", "x_invconv", "=", "x_invconv", ")", "\n", "", "return", "y", ",", "logdet", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.x_convs.__init__": [[182, 212], ["torch.Module.__init__", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "models.LinearZeros", "masking.concat_elu", "models.LinearZeros", "masking.concat_elu"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "x_hidden_channels", ",", "x_hidden_size", ",", "y_hidden_channels", ",", "masks", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "C_x", ",", "H_x", ",", "W_x", "=", "x_size", "\n", "\n", "self", ".", "mask_init1", ",", "self", ".", "mask_undilated1", ",", "self", ".", "mask_dilated1", "=", "masks", "[", "0", "]", "\n", "self", ".", "mask_init2", ",", "self", ".", "mask_undilated2", ",", "self", ".", "mask_dilated2", "=", "masks", "[", "1", "]", "\n", "\n", "max_dilation", "=", "params", "[", "'max_dilation'", "]", "\n", "input_channels", "=", "params", "[", "'input_channels'", "]", "\n", "conv_bias", "=", "params", "[", "'conv_bias'", "]", "\n", "conv_mask_weight", "=", "params", "[", "'conv_mask_weight'", "]", "\n", "nr_filters", "=", "params", "[", "'nr_filters'", "]", "\n", "kernel_size", "=", "[", "params", "[", "'kernel_size'", "]", ",", "params", "[", "'kernel_size'", "]", "]", "\n", "dropout", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "\n", "# conditioning networks", "\n", "self", ".", "x_Con_1", "=", "nn", ".", "Sequential", "(", "\n", "locally_masked_conv2d", "(", "input_channels", "+", "1", ",", "nr_filters", ",", "self", ".", "mask_init1", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ",", "dropout", ",", "\n", "locally_masked_conv2d", "(", "2", "*", "nr_filters", ",", "nr_filters", "//", "2", ",", "self", ".", "mask_undilated1", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ",", "\n", "locally_masked_conv2d", "(", "nr_filters", ",", "4", ",", "self", ".", "mask_dilated1", ",", "kernel_size", "=", "kernel_size", ",", "dilation", "=", "max_dilation", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ")", "\n", "\n", "self", ".", "x_Con_2", "=", "nn", ".", "Sequential", "(", "\n", "locally_masked_conv2d", "(", "input_channels", "+", "1", ",", "nr_filters", ",", "self", ".", "mask_init2", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ",", "dropout", ",", "\n", "locally_masked_conv2d", "(", "2", "*", "nr_filters", ",", "nr_filters", "//", "2", ",", "self", ".", "mask_undilated2", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ",", "\n", "locally_masked_conv2d", "(", "nr_filters", ",", "4", ",", "self", ".", "mask_dilated2", ",", "kernel_size", "=", "kernel_size", ",", "dilation", "=", "max_dilation", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ")", "\n", "\n", "self", ".", "x_Linear", "=", "nn", ".", "Sequential", "(", "\n", "LinearZeros", "(", "2", "*", "x_hidden_channels", "*", "H_x", "*", "W_x", "//", "(", "8", "*", "8", ")", ",", "x_hidden_size", "//", "2", ")", ",", "concat_elu", "(", ")", ",", "\n", "LinearZeros", "(", "x_hidden_size", ",", "x_hidden_size", "//", "2", ")", ",", "concat_elu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.x_convs.forward": [[213, 236], ["torch.cat.size", "torch.cat.size", "torch.cat.size", "models.x_convs.x_Con_1", "models.x_convs.x_Con_2", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "masking.pono", "torch.cat.view", "torch.cat.view", "torch.cat.view", "models.x_convs.x_Linear", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "int", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.pono"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "\n", "if", "x", ".", "shape", "[", "1", "]", "!=", "4", ":", "\n", "            ", "xs", "=", "[", "int", "(", "ss", ")", "for", "ss", "in", "x", ".", "size", "(", ")", "]", "\n", "padding", "=", "Variable", "(", "torch", ".", "ones", "(", "xs", "[", "0", "]", ",", "1", ",", "xs", "[", "2", "]", ",", "xs", "[", "3", "]", ")", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "padding", ")", ",", "1", ")", "\n", "\n", "", "x_1", "=", "self", ".", "x_Con_1", "(", "x", ")", "\n", "x_2", "=", "self", ".", "x_Con_2", "(", "x", ")", "\n", "\n", "x_conv", "=", "x_1", "*", "x_2", "\n", "\n", "a", ",", "b", "=", "torch", ".", "chunk", "(", "x_conv", ",", "2", ",", "dim", "=", "1", ")", "\n", "a", ",", "_", ",", "__", "=", "pono", "(", "a", ")", "\n", "c3", "=", "a", "*", "torch", ".", "sigmoid", "(", "b", ")", "\n", "x", "=", "x", "+", "c3", "\n", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ")", "\n", "x_actnorm", "=", "self", ".", "x_Linear", "(", "x", ")", "\n", "x_invconv", "=", "torch", ".", "clone", "(", "x_actnorm", ")", "\n", "\n", "return", "x_actnorm", ",", "x_invconv", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.structuredGlowStep.__init__": [[240, 249], ["torch.Module.__init__", "models.CondActNorm", "models.Cond1x1Conv", "models.CondAffineCoupling"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "x_hidden_channels", ",", "x_hidden_size", ",", "y_hidden_channels", ",", "masks", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# 1. cond-actnorm", "\n", "self", ".", "actnorm", "=", "CondActNorm", "(", "x_size", "=", "x_size", ",", "y_channels", "=", "y_size", "[", "0", "]", ",", "x_hidden_channels", "=", "x_hidden_channels", ",", "x_hidden_size", "=", "x_hidden_size", ",", "masks", "=", "masks", ",", "params", "=", "params", ")", "\n", "# 2. cond-1x1conv", "\n", "self", ".", "invconv", "=", "Cond1x1Conv", "(", "x_size", "=", "x_size", ",", "x_hidden_channels", "=", "x_hidden_channels", ",", "x_hidden_size", "=", "x_hidden_size", ",", "y_channels", "=", "y_size", "[", "0", "]", ",", "masks", "=", "masks", ",", "params", "=", "params", ")", "\n", "# 3. cond-affine", "\n", "self", ".", "affine", "=", "CondAffineCoupling", "(", "x_size", "=", "x_size", ",", "y_size", "=", "[", "y_size", "[", "0", "]", "//", "2", ",", "y_size", "[", "1", "]", ",", "y_size", "[", "2", "]", "]", ",", "hidden_channels", "=", "y_hidden_channels", ",", "masks", "=", "masks", ",", "params", "=", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.structuredGlowStep.forward": [[250, 271], ["models.structuredGlowStep.actnorm", "models.structuredGlowStep.invconv", "models.structuredGlowStep.affine", "models.structuredGlowStep.affine", "models.structuredGlowStep.invconv", "models.structuredGlowStep.actnorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "logdet", "=", "None", ",", "reverse", "=", "False", ",", "x_actnorm", "=", "None", ",", "x_invconv", "=", "None", ")", ":", "\n", "        ", "if", "reverse", "is", "False", ":", "\n", "# 1. cond-actnorm", "\n", "            ", "y", ",", "logdet", "=", "self", ".", "actnorm", "(", "x_actnorm", ",", "y", ",", "logdet", ",", "reverse", "=", "False", ")", "\n", "# 2. cond-1x1conv", "\n", "y", ",", "logdet", "=", "self", ".", "invconv", "(", "x_invconv", ",", "y", ",", "logdet", ",", "reverse", "=", "False", ")", "\n", "# 3. cond-affine", "\n", "y", ",", "logdet", "=", "self", ".", "affine", "(", "x", ",", "y", ",", "logdet", ",", "reverse", "=", "False", ")", "\n", "# Return", "\n", "\n", "return", "y", ",", "logdet", "\n", "", "else", ":", "\n", "# 3. cond-affine", "\n", "            ", "y", ",", "logdet", "=", "self", ".", "affine", "(", "x", ",", "y", ",", "logdet", ",", "reverse", "=", "True", ")", "\n", "# 2. cond-1x1conv", "\n", "y", ",", "logdet", "=", "self", ".", "invconv", "(", "x_invconv", ",", "y", ",", "logdet", ",", "reverse", "=", "True", ")", "\n", "# 1. cond-actnorm", "\n", "y", ",", "logdet", "=", "self", ".", "actnorm", "(", "x_actnorm", ",", "y", ",", "logdet", ",", "reverse", "=", "True", ")", "\n", "# Return", "\n", "\n", "return", "y", ",", "logdet", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.CondActNorm.__init__": [[275, 279], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.LinearZeros", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_size", ",", "y_channels", ",", "x_hidden_channels", ",", "x_hidden_size", ",", "masks", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "x_Linear", "=", "nn", ".", "Sequential", "(", "LinearZeros", "(", "x_hidden_size", ",", "2", "*", "y_channels", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.CondActNorm.forward": [[280, 303], ["x.view.view.size", "models.CondActNorm.x_Linear", "x.view.view.view", "models.split_feature", "y.size", "y.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.split_feature"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "logdet", "=", "0", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "x", "=", "self", ".", "x_Linear", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "logs", ",", "bias", "=", "split_feature", "(", "x", ")", "\n", "dimentions", "=", "y", ".", "size", "(", "2", ")", "*", "y", ".", "size", "(", "3", ")", "\n", "\n", "if", "not", "reverse", ":", "\n", "# center and scale", "\n", "            ", "y", "=", "y", "+", "bias", "\n", "y", "=", "y", "*", "torch", ".", "exp", "(", "logs", ")", "\n", "dlogdet", "=", "dimentions", "*", "torch", ".", "sum", "(", "logs", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "logdet", "=", "logdet", "+", "dlogdet", "\n", "", "else", ":", "\n", "# scale and center", "\n", "            ", "y", "=", "y", "*", "torch", ".", "exp", "(", "-", "logs", ")", "\n", "y", "=", "y", "-", "bias", "\n", "dlogdet", "=", "-", "dimentions", "*", "torch", ".", "sum", "(", "logs", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "logdet", "=", "logdet", "+", "dlogdet", "\n", "\n", "", "return", "y", ",", "logdet", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.Cond1x1Conv.__init__": [[307, 310], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.LinearNorm", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_size", ",", "x_hidden_channels", ",", "x_hidden_size", ",", "y_channels", ",", "masks", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "x_Linear", "=", "nn", ".", "Sequential", "(", "LinearNorm", "(", "x_hidden_size", ",", "y_channels", "*", "y_channels", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.Cond1x1Conv.get_weight": [[311, 329], ["y.size", "x.view.view.size", "models.Cond1x1Conv.x_Linear", "x.view.view.view", "x.view.view.view", "y.size", "y.size", "torch.inverse().float().view.view", "torch.inverse().float().view.view", "torch.inverse().float().view.view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.inverse().float", "torch.inverse().float", "torch.inverse().float", "torch.inverse().float", "torch.inverse().float", "torch.inverse().float", "torch.inverse().float", "torch.inverse().float", "torch.inverse().float", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse().float().view.double", "torch.inverse().float().view.double", "torch.inverse().float().view.double"], "methods", ["None"], ["", "def", "get_weight", "(", "self", ",", "x", ",", "y", ",", "reverse", ")", ":", "\n", "        ", "y_channels", "=", "y", ".", "size", "(", "1", ")", "\n", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "x", "=", "self", ".", "x_Linear", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "weight", "=", "x", ".", "view", "(", "B", ",", "y_channels", ",", "y_channels", ")", "\n", "\n", "dimensions", "=", "y", ".", "size", "(", "2", ")", "*", "y", ".", "size", "(", "3", ")", "\n", "dlogdet", "=", "torch", ".", "slogdet", "(", "weight", ")", "[", "1", "]", "*", "dimensions", "\n", "\n", "if", "reverse", "==", "False", ":", "\n", "            ", "weight", "=", "weight", ".", "view", "(", "B", ",", "y_channels", ",", "y_channels", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "torch", ".", "inverse", "(", "weight", ".", "double", "(", ")", ")", ".", "float", "(", ")", ".", "view", "(", "B", ",", "y_channels", ",", "y_channels", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "weight", ",", "dlogdet", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.Cond1x1Conv.forward": [[330, 353], ["models.Cond1x1Conv.get_weight", "y.contiguous().view.contiguous().view.size", "y.contiguous().view.contiguous().view.contiguous().view", "weight.contiguous().view.contiguous().view.size", "weight.contiguous().view.contiguous().view.contiguous().view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "z.view.view.view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "z.view.view.view", "y.contiguous().view.contiguous().view.contiguous", "weight.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Cond1x1Conv.get_weight"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "logdet", "=", "None", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "weight", ",", "dlogdet", "=", "self", ".", "get_weight", "(", "x", ",", "y", ",", "reverse", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "y", ".", "size", "(", ")", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "B", "*", "C", ",", "H", ",", "W", ")", "\n", "B_k", ",", "C_i_k", ",", "C_o_k", ",", "H_k", ",", "W_k", "=", "weight", ".", "size", "(", ")", "\n", "assert", "B", "==", "B_k", "and", "C", "==", "C_i_k", "and", "C", "==", "C_o_k", ",", "\"The input and kernel dimensions are different\"", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", ".", "view", "(", "B_k", "*", "C_i_k", ",", "C_o_k", ",", "H_k", ",", "W_k", ")", "#.double()", "\n", "\n", "if", "reverse", "==", "False", ":", "\n", "            ", "z", "=", "F", ".", "conv2d", "(", "y", ",", "weight", ",", "groups", "=", "B", ")", "\n", "z", "=", "z", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "if", "logdet", "is", "not", "None", ":", "\n", "                ", "logdet", "=", "logdet", "+", "dlogdet", "\n", "\n", "", "return", "z", ",", "logdet", "\n", "", "else", ":", "\n", "            ", "z", "=", "F", ".", "conv2d", "(", "y", ",", "weight", ",", "groups", "=", "B", ")", "\n", "z", "=", "z", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "\n", "if", "logdet", "is", "not", "None", ":", "\n", "                ", "logdet", "=", "logdet", "-", "dlogdet", "\n", "\n", "", "return", "z", ",", "logdet", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.CondAffineCoupling.__init__": [[357, 389], ["torch.Module.__init__", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "models.Conv2dZeros", "masking.concat_elu", "models.Conv2dResize", "masking.concat_elu", "models.Conv2dZeros", "masking.concat_elu", "models.Conv2dNormy", "masking.concat_elu", "models.Conv2dNormy", "masking.concat_elu", "models.Conv2dZerosy", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "hidden_channels", ",", "masks", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mask_init1", ",", "self", ".", "mask_undilated1", ",", "self", ".", "mask_dilated1", "=", "masks", "[", "0", "]", "\n", "self", ".", "mask_init2", ",", "self", ".", "mask_undilated2", ",", "self", ".", "mask_dilated2", "=", "masks", "[", "1", "]", "\n", "\n", "input_channels", "=", "params", "[", "'input_channels'", "]", "\n", "conv_bias", "=", "params", "[", "'conv_bias'", "]", "\n", "conv_mask_weight", "=", "params", "[", "'conv_mask_weight'", "]", "\n", "nr_filters", "=", "params", "[", "'nr_filters'", "]", "\n", "kernel_size", "=", "[", "params", "[", "'kernel_size'", "]", ",", "params", "[", "'kernel_size'", "]", "]", "\n", "dropout", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "\n", "self", ".", "resize_x_1", "=", "nn", ".", "Sequential", "(", "\n", "locally_masked_conv2d", "(", "input_channels", "+", "1", ",", "nr_filters", ",", "self", ".", "mask_init1", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ",", "dropout", ",", "\n", "locally_masked_conv2d", "(", "2", "*", "nr_filters", ",", "nr_filters", "//", "2", ",", "self", ".", "mask_undilated1", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ",", "\n", "locally_masked_conv2d", "(", "nr_filters", ",", "4", ",", "self", ".", "mask_dilated1", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ")", "\n", "\n", "self", ".", "resize_x_2", "=", "nn", ".", "Sequential", "(", "\n", "locally_masked_conv2d", "(", "input_channels", "+", "1", ",", "nr_filters", ",", "self", ".", "mask_init2", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ",", "dropout", ",", "\n", "locally_masked_conv2d", "(", "2", "*", "nr_filters", ",", "nr_filters", "//", "2", ",", "self", ".", "mask_undilated2", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ",", "\n", "locally_masked_conv2d", "(", "nr_filters", ",", "4", ",", "self", ".", "mask_dilated2", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ")", "\n", "\n", "self", ".", "resize_x", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dZeros", "(", "4", ",", "16", "//", "2", ")", ",", "concat_elu", "(", ")", ",", "\n", "Conv2dResize", "(", "(", "16", ",", "x_size", "[", "1", "]", ",", "x_size", "[", "2", "]", ")", ",", "out_size", "=", "y_size", ")", ",", "concat_elu", "(", ")", ",", "\n", "Conv2dZeros", "(", "y_size", "[", "0", "]", "*", "2", ",", "y_size", "[", "0", "]", "//", "2", ")", ",", "concat_elu", "(", ")", ")", "\n", "\n", "self", ".", "f", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dNormy", "(", "y_size", "[", "0", "]", "*", "2", ",", "hidden_channels", "//", "2", ")", ",", "concat_elu", "(", ")", ",", "\n", "Conv2dNormy", "(", "hidden_channels", ",", "hidden_channels", "//", "2", ",", "kernel_size", "=", "[", "1", ",", "1", "]", ")", ",", "concat_elu", "(", ")", ",", "\n", "Conv2dZerosy", "(", "hidden_channels", ",", "2", "*", "y_size", "[", "0", "]", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.CondAffineCoupling.forward": [[390, 429], ["models.split_feature", "models.CondAffineCoupling.resize_x_1", "models.CondAffineCoupling.resize_x_2", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "masking.pono", "models.CondAffineCoupling.resize_x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.CondAffineCoupling.f", "models.split_feature", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat.float", "torch.cat.float", "torch.cat.float", "int", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.split_feature", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.pono", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.split_feature"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "logdet", "=", "0.0", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "z1", ",", "z2", "=", "split_feature", "(", "y", ",", "\"split\"", ")", "\n", "\n", "if", "x", ".", "shape", "[", "1", "]", "!=", "4", ":", "\n", "            ", "xs", "=", "[", "int", "(", "ss", ")", "for", "ss", "in", "x", ".", "size", "(", ")", "]", "\n", "padding", "=", "Variable", "(", "torch", ".", "ones", "(", "xs", "[", "0", "]", ",", "1", ",", "xs", "[", "2", "]", ",", "xs", "[", "3", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "init_padding", "=", "padding", ".", "cuda", "(", ")", "if", "x", ".", "is_cuda", "else", "padding", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "self", ".", "init_padding", ")", ",", "1", ")", "\n", "\n", "", "x_1", "=", "self", ".", "resize_x_1", "(", "x", ")", "\n", "x_2", "=", "self", ".", "resize_x_2", "(", "x", ")", "\n", "\n", "x_conv", "=", "x_1", "*", "x_2", "\n", "\n", "a", ",", "b", "=", "torch", ".", "chunk", "(", "x_conv", ",", "2", ",", "dim", "=", "1", ")", "\n", "a", ",", "_", ",", "__", "=", "pono", "(", "a", ")", "\n", "c3", "=", "a", "*", "torch", ".", "sigmoid", "(", "b", ")", "\n", "x", "=", "x", "+", "c3", "\n", "\n", "x", "=", "self", ".", "resize_x", "(", "x", ".", "float", "(", ")", ")", "\n", "\n", "h", "=", "torch", ".", "cat", "(", "(", "x", ",", "z1", ")", ",", "dim", "=", "1", ")", "\n", "h", "=", "self", ".", "f", "(", "h", ")", "\n", "\n", "shift", ",", "scale", "=", "split_feature", "(", "h", ",", "\"cross\"", ")", "\n", "scale", "=", "torch", ".", "sigmoid", "(", "scale", "+", "2.", ")", "\n", "if", "reverse", "==", "False", ":", "\n", "            ", "z2", "=", "z2", "+", "shift", "\n", "z2", "=", "z2", "*", "scale", "\n", "logdet", "=", "torch", ".", "sum", "(", "torch", ".", "log", "(", "scale", ")", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "logdet", "\n", "\n", "", "if", "reverse", "==", "True", ":", "\n", "            ", "z2", "=", "z2", "/", "scale", "\n", "z2", "=", "z2", "-", "shift", "\n", "logdet", "=", "-", "torch", ".", "sum", "(", "torch", ".", "log", "(", "scale", ")", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "logdet", "\n", "\n", "", "z", "=", "torch", ".", "cat", "(", "(", "z1", ",", "z2", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "z", ",", "logdet", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.Conv2dZeros.__init__": [[433, 437], ["torch.Conv2d.__init__", "models.Conv2dZeros.weight.data.normal_"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "[", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", "]", ")", ":", "\n", "        ", "padding", "=", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", "\n", "super", "(", ")", ".", "__init__", "(", "in_channels", "=", "in_channel", ",", "out_channels", "=", "out_channel", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "self", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.GaussianDiag.likelihood": [[443, 446], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "likelihood", "(", "mean", ",", "logs", ",", "x", ")", ":", "\n", "        ", "return", "-", "0.5", "*", "(", "logs", "*", "2.", "+", "(", "(", "x", "-", "mean", ")", "**", "2.", ")", "/", "torch", ".", "exp", "(", "logs", "*", "2.", ")", "+", "GaussianDiag", ".", "Log2PI", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.GaussianDiag.logp": [[447, 451], ["models.GaussianDiag.likelihood", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.likelihood"], ["", "@", "staticmethod", "\n", "def", "logp", "(", "mean", ",", "logs", ",", "x", ")", ":", "\n", "        ", "likelihood", "=", "GaussianDiag", ".", "likelihood", "(", "mean", ",", "logs", ",", "x", ")", "\n", "return", "torch", ".", "sum", "(", "likelihood", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.GaussianDiag.sample": [[452, 457], ["torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sample", "(", "mean", ",", "logs", ",", "eps_std", "=", "None", ")", ":", "\n", "        ", "eps_std", "=", "eps_std", "or", "1", "\n", "eps", "=", "torch", ".", "normal", "(", "mean", "=", "torch", ".", "zeros_like", "(", "mean", ")", ",", "std", "=", "torch", ".", "ones_like", "(", "logs", ")", "*", "eps_std", ")", "\n", "return", "mean", "+", "torch", ".", "exp", "(", "logs", ")", "*", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.GaussianDiag.batchsample": [[458, 466], ["models.GaussianDiag.sample", "range", "models.GaussianDiag.sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.sample", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.sample"], ["", "@", "staticmethod", "\n", "def", "batchsample", "(", "batchsize", ",", "mean", ",", "logs", ",", "eps_std", "=", "None", ")", ":", "\n", "        ", "eps_std", "=", "eps_std", "or", "1", "\n", "sample", "=", "GaussianDiag", ".", "sample", "(", "mean", ",", "logs", ",", "eps_std", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "batchsize", ")", ":", "\n", "            ", "s", "=", "GaussianDiag", ".", "sample", "(", "mean", ",", "logs", ",", "eps_std", ")", "\n", "sample", "=", "torch", ".", "cat", "(", "(", "sample", ",", "s", ")", ",", "dim", "=", "0", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.Conv2dResize.__init__": [[470, 476], ["models.Conv2dResize.compute_kernel_size", "torch.Conv2d.__init__", "models.Conv2dResize.weight.data.zero_"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Conv1dResize.compute_kernel_size", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ")", ":", "\n", "\n", "        ", "stride", "=", "[", "in_size", "[", "1", "]", "//", "out_size", "[", "1", "]", ",", "in_size", "[", "2", "]", "//", "out_size", "[", "2", "]", "]", "\n", "kernel_size", "=", "Conv2dResize", ".", "compute_kernel_size", "(", "in_size", ",", "out_size", ",", "stride", ")", "\n", "super", "(", ")", ".", "__init__", "(", "in_channels", "=", "in_size", "[", "0", "]", ",", "out_channels", "=", "out_size", "[", "0", "]", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ")", "\n", "self", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.Conv2dResize.compute_kernel_size": [[477, 482], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_kernel_size", "(", "in_size", ",", "out_size", ",", "stride", ")", ":", "\n", "        ", "k0", "=", "in_size", "[", "1", "]", "-", "(", "out_size", "[", "1", "]", "-", "1", ")", "*", "stride", "[", "0", "]", "\n", "k1", "=", "in_size", "[", "2", "]", "-", "(", "out_size", "[", "2", "]", "-", "1", ")", "*", "stride", "[", "1", "]", "\n", "return", "[", "k0", ",", "k1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.Conv1dResize.__init__": [[486, 490], ["torch.Conv1d.__init__", "models.Conv1dResize.weight.data.zero_"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "kernel_size", ",", "stride", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", "=", "in_size", "[", "0", "]", ",", "out_channels", "=", "out_size", "[", "0", "]", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ")", "\n", "self", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.Conv1dResize.compute_kernel_size": [[491, 496], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_kernel_size", "(", "in_size", ",", "out_size", ",", "stride", ")", ":", "\n", "        ", "k0", "=", "in_size", "[", "1", "]", "-", "(", "out_size", "[", "1", "]", "-", "1", ")", "*", "stride", "[", "0", "]", "\n", "k1", "=", "in_size", "[", "2", "]", "-", "(", "out_size", "[", "2", "]", "-", "1", ")", "*", "stride", "[", "1", "]", "\n", "return", "[", "k0", ",", "k1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.LinearZeros.__init__": [[500, 504], ["torch.Linear.__init__", "models.LinearZeros.weight.data.zero_", "models.LinearZeros.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.LinearZeros.forward": [[505, 508], ["super().forward", "input.float"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GATU2D.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "super", "(", ")", ".", "forward", "(", "input", ".", "float", "(", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.LinearNorm.__init__": [[512, 516], ["torch.Linear.__init__", "models.LinearNorm.weight.data.normal_", "models.LinearNorm.bias.data.normal_"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.1", ")", "\n", "self", ".", "bias", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.Conv2dZerosy.__init__": [[520, 531], ["torch.Conv2d.__init__", "models.Conv2dZerosy.register_parameter", "models.Conv2dZerosy.register_parameter", "models.Conv2dZerosy.weight.data.zero_", "models.Conv2dZerosy.bias.data.zero_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "[", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", "]", ")", ":", "\n", "        ", "padding", "=", "[", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", ",", "(", "kernel_size", "[", "1", "]", "-", "1", ")", "//", "2", "]", "\n", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", "\n", "\n", "self", ".", "logscale_factor", "=", "3.0", "\n", "self", ".", "register_parameter", "(", "\"logs\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ",", "1", ",", "1", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "\"newbias\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ",", "1", ",", "1", ")", ")", ")", "\n", "\n", "# init", "\n", "self", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.Conv2dZerosy.forward": [[532, 537], ["super().forward", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GATU2D.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "output", "=", "output", "+", "self", ".", "newbias", "\n", "output", "=", "output", "*", "torch", ".", "exp", "(", "self", ".", "logs", "*", "self", ".", "logscale_factor", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.Conv2dNormy.__init__": [[541, 548], ["torch.Conv2d.__init__", "models.Conv2dNormy.weight.data.normal_", "models.ActNorm"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "[", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", "]", ")", ":", "\n", "        ", "padding", "=", "[", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", ",", "(", "kernel_size", "[", "1", "]", "-", "1", ")", "//", "2", "]", "\n", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "False", ")", "\n", "\n", "# initialize weight", "\n", "self", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.05", ")", "\n", "self", ".", "actnorm", "=", "ActNorm", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.Conv2dNormy.forward": [[549, 553], ["super().forward", "models.Conv2dNormy.actnorm"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GATU2D.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "x", ",", "_", "=", "self", ".", "actnorm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.ActNorm.__init__": [[557, 566], ["torch.Module.__init__", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "models.ActNorm.register_parameter", "models.ActNorm.register_parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "size", "=", "[", "1", ",", "num_channels", ",", "1", ",", "1", "]", "\n", "\n", "bias", "=", "torch", ".", "normal", "(", "mean", "=", "torch", ".", "zeros", "(", "*", "size", ")", ",", "std", "=", "torch", ".", "ones", "(", "*", "size", ")", "*", "0.05", ")", "\n", "logs", "=", "torch", ".", "normal", "(", "mean", "=", "torch", ".", "zeros", "(", "*", "size", ")", ",", "std", "=", "torch", ".", "ones", "(", "*", "size", ")", "*", "0.05", ")", "\n", "self", ".", "register_parameter", "(", "\"bias\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "bias", ")", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "register_parameter", "(", "\"logs\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "logs", ")", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.ActNorm.forward": [[567, 582], ["input.size", "input.size", "input.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "logdet", "=", "0", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "dimentions", "=", "input", ".", "size", "(", "1", ")", "*", "input", ".", "size", "(", "2", ")", "*", "input", ".", "size", "(", "3", ")", "\n", "if", "reverse", "==", "False", ":", "\n", "            ", "input", "=", "input", "+", "self", ".", "bias", "\n", "input", "=", "input", "*", "torch", ".", "exp", "(", "self", ".", "logs", ")", "\n", "dlogdet", "=", "torch", ".", "sum", "(", "self", ".", "logs", ")", "*", "dimentions", "\n", "logdet", "=", "logdet", "+", "dlogdet", "\n", "\n", "", "if", "reverse", "==", "True", ":", "\n", "            ", "input", "=", "input", "*", "torch", ".", "exp", "(", "-", "self", ".", "logs", ")", "\n", "input", "=", "input", "-", "self", ".", "bias", "\n", "dlogdet", "=", "-", "torch", ".", "sum", "(", "self", ".", "logs", ")", "*", "dimentions", "\n", "logdet", "=", "logdet", "+", "dlogdet", "\n", "\n", "", "return", "input", ",", "logdet", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.NNTheta.__init__": [[586, 606], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.initialize", "models.NNTheta.latent_encoder.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.initialize", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.initialize", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.NNTheta.latent_dist_encoder"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.NNTheta.latent_dist_encoder"], ["    ", "def", "__init__", "(", "self", ",", "encoder_ch_in", ",", "encoder_mode", ",", "num_blocks", ",", "h_ch_in", "=", "None", ")", ":", "\n", "        ", "super", "(", "NNTheta", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder_mode", "=", "encoder_mode", "\n", "\n", "if", "h_ch_in", "is", "not", "None", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "h_ch_in", ",", "out_channels", "=", "h_ch_in", ",", "kernel_size", "=", "1", ")", "\n", "initialize", "(", "self", ".", "conv1", ",", "mode", "=", "'gaussian'", ")", "\n", "\n", "", "dilations", "=", "[", "1", ",", "2", ",", "4", "]", "\n", "self", ".", "latent_encoder", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "self", ".", "latent_encoder", ".", "append", "(", "nn", ".", "ModuleList", "(", "\n", "[", "self", ".", "latent_dist_encoder", "(", "encoder_ch_in", ",", "dilation", "=", "d", ",", "mode", "=", "encoder_mode", ")", "for", "d", "in", "dilations", "]", ")", ")", "\n", "\n", "", "if", "h_ch_in", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "encoder_ch_in", ",", "out_channels", "=", "encoder_ch_in", ",", "kernel_size", "=", "1", ")", "\n", "initialize", "(", "self", ".", "conv2", ",", "mode", "=", "'zeros'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "encoder_ch_in", ",", "out_channels", "=", "2", "*", "encoder_ch_in", ",", "kernel_size", "=", "1", ")", "\n", "initialize", "(", "self", ".", "conv2", ",", "mode", "=", "'zeros'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.NNTheta.forward": [[607, 626], ["models.NNTheta.conv2", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "models.NNTheta.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "z_past.clone", "parallel_outs.append", "sum", "pb"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z_past", ",", "h", ")", ":", "\n", "        ", "if", "h", "is", "not", "None", ":", "\n", "            ", "h", "=", "self", ".", "conv1", "(", "h", ")", "\n", "encoder_input", "=", "torch", ".", "cat", "(", "[", "z_past", ",", "h", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "encoder_input", "=", "z_past", ".", "clone", "(", ")", "\n", "\n", "", "for", "block", "in", "self", ".", "latent_encoder", ":", "\n", "            ", "parallel_outs", "=", "[", "pb", "(", "encoder_input", ")", "for", "pb", "in", "block", "]", "\n", "\n", "parallel_outs", ".", "append", "(", "encoder_input", ")", "\n", "encoder_input", "=", "sum", "(", "parallel_outs", ")", "\n", "\n", "", "last_t", "=", "self", ".", "conv2", "(", "encoder_input", ")", "\n", "deltaz_t", ",", "logsigma_t", "=", "last_t", "[", ":", ",", "0", ":", ":", "2", ",", "...", "]", ",", "last_t", "[", ":", ",", "1", ":", ":", "2", ",", "...", "]", "\n", "\n", "logsigma_t", "=", "torch", ".", "clamp", "(", "logsigma_t", ",", "min", "=", "-", "15.", ",", "max", "=", "15.", ")", "\n", "mu_t", "=", "deltaz_t", "+", "z_past", "\n", "return", "mu_t", ",", "logsigma_t", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.NNTheta.latent_dist_encoder": [[627, 642], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.initialize", "models.GATU2D", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.initialize", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize"], ["", "@", "staticmethod", "\n", "def", "latent_dist_encoder", "(", "ch_in", ",", "dilation", ",", "mode", ")", ":", "\n", "\n", "        ", "if", "mode", "==", "\"conv_net\"", ":", "\n", "            ", "layer1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "ch_in", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "dilation", "=", "(", "dilation", ",", "dilation", ")", ",", "padding", "=", "(", "dilation", ",", "dilation", ")", ")", "\n", "initialize", "(", "layer1", ",", "mode", "=", "'gaussian'", ")", "\n", "layer2", "=", "GATU2D", "(", "channels", "=", "512", ")", "\n", "layer3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "ch_in", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "dilation", "=", "(", "dilation", ",", "dilation", ")", ",", "padding", "=", "(", "dilation", ",", "dilation", ")", ")", "\n", "initialize", "(", "layer3", ",", "mode", "=", "'zeros'", ")", "\n", "\n", "block", "=", "nn", ".", "Sequential", "(", "*", "[", "layer1", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "layer2", ",", "layer3", "]", ")", "\n", "\n", "", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.GATU2D.__init__": [[646, 652], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.initialize", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.initialize"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", "GATU2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "channels", ",", "out_channels", "=", "channels", ",", "kernel_size", "=", "1", ")", "\n", "initialize", "(", "self", ".", "conv1", ",", "mode", "=", "'gaussian'", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "channels", ",", "out_channels", "=", "channels", ",", "kernel_size", "=", "1", ")", "\n", "initialize", "(", "self", ".", "conv2", ",", "mode", "=", "'gaussian'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.GATU2D.forward": [[653, 657], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models.GATU2D.conv1", "models.GATU2D.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out1", "=", "torch", ".", "tanh", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out2", "=", "torch", ".", "sigmoid", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "return", "out1", "*", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.initialize": [[660, 671], ["torch.init.normal_", "torch.init.normal_", "torch.init.zeros_", "torch.init.zeros_", "NotImplementedError"], "function", ["None"], ["", "", "def", "initialize", "(", "layer", ",", "mode", ")", ":", "\n", "    ", "if", "mode", "==", "'gaussian'", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "layer", ".", "weight", ",", "0.", ",", "0.05", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "layer", ".", "bias", ",", "0.", ",", "0.05", ")", "\n", "\n", "", "elif", "mode", "==", "'zeros'", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"To be implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.models.split_feature": [[674, 683], ["tensor.size"], "function", ["None"], ["", "", "def", "split_feature", "(", "tensor", ",", "type", "=", "\"split\"", ")", ":", "\n", "    ", "\"\"\"\n    type = [\"split\", \"cross\"]\n    \"\"\"", "\n", "C", "=", "tensor", ".", "size", "(", "1", ")", "\n", "if", "type", "==", "\"split\"", ":", "\n", "        ", "return", "tensor", "[", ":", ",", ":", "C", "//", "2", ",", "...", "]", ",", "tensor", "[", ":", ",", "C", "//", "2", ":", ",", "...", "]", "\n", "", "elif", "type", "==", "\"cross\"", ":", "\n", "        ", "return", "tensor", "[", ":", ",", "0", ":", ":", "2", ",", "...", "]", ",", "tensor", "[", ":", ",", "1", ":", ":", "2", ",", "...", "]", "# [start:stop:step] ", "", "", "", ""]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.__init__": [[17, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fk_engine", ",", "target_lengths", ",", "force_valid_rot", ",", "rep", ",", "which", "=", "None", ")", ":", "\n", "        ", "'''\n        Initializer.\n        Args:\n            fk_engine: An object of type `ForwardKinematics` used to compute positions.\n            target_lengths: List of target sequence lengths that should be evaluated.\n            force_valid_rot: If True, the input rotation matrices might not be valid rotations and so it will find\n              the closest rotation before computing the metrics.\n            rep: Which representation to use, 'quat' or 'rotmat'.\n            which: Which metrics to compute. Options are [mpjpe], defaults to all.\n        '''", "\n", "self", ".", "which", "=", "which", "if", "which", "is", "not", "None", "else", "[", "'mpjpe'", "]", "\n", "self", ".", "target_lengths", "=", "target_lengths", "\n", "self", ".", "force_valid_rot", "=", "force_valid_rot", "\n", "self", ".", "fk_engine", "=", "fk_engine", "\n", "self", ".", "n_samples", "=", "0", "\n", "self", ".", "_should_call_reset", "=", "False", "# a guard to avoid stupid mistakes", "\n", "self", ".", "rep", "=", "rep", "\n", "assert", "self", ".", "rep", "in", "[", "'rotmat'", ",", "'quat'", ",", "'aa'", "]", "\n", "\n", "self", ".", "metrics_agg", "=", "{", "k", ":", "None", "for", "k", "in", "self", ".", "which", "}", "\n", "self", ".", "summaries", "=", "{", "k", ":", "{", "t", ":", "None", "for", "t", "in", "target_lengths", "}", "for", "k", "in", "self", ".", "which", "}", "\n", "self", ".", "summaries", "[", "'train_loss'", "]", "=", "None", "\n", "self", ".", "summaries", "[", "'val_loss'", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.reset": [[42, 49], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "'''\n        Reset all metrics.\n        '''", "\n", "self", ".", "metrics_agg", "=", "{", "k", ":", "None", "for", "k", "in", "self", ".", "which", "}", "\n", "self", ".", "n_samples", "=", "0", "\n", "self", ".", "_should_call_reset", "=", "False", "# now it's again safe to compute new values", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.compute_rotmat": [[50, 120], ["len", "numpy.reshape().copy", "numpy.reshape().copy", "utils.is_valid_rotmat", "utils.is_valid_rotmat", "utils.sparse_to_full", "utils.sparse_to_full", "numpy.eye().flatten", "numpy.eye().flatten", "dict", "numpy.reshape", "utils.get_closest_rotmat", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.eye", "numpy.eye", "numpy.reshape", "numpy.reshape", "metrics.rotmat2aa", "metrics.rotmat2aa", "torch.mean", "numpy.reshape", "ValueError", "torch.norm", "torch.mean.numpy", "torch.tensor", "torch.tensor", "rotmat2aa.reshape", "rotmat2aa.reshape"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.is_valid_rotmat", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.is_valid_rotmat", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.sparse_to_full", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.sparse_to_full", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.get_closest_rotmat", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.eye", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.eye", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.rotmat2aa", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.rotmat2aa"], ["", "def", "compute_rotmat", "(", "self", ",", "pred_motion", ",", "targets_motion", ",", "reduce_fn", "=", "'mean'", ")", ":", "\n", "        ", "'''\n        Compute the chosen metrics. Predictions and targets are assumed to be in rotation matrix format.\n        Args:\n            predictions: An np array of shape (n, seq_length, n_joints*9)\n            targets: An np array of the same shape as `predictions`\n            reduce_fn: Which reduce function to apply to the joint dimension, if applicable. Choices are [mean, sum].\n\n        Returns:\n            A dictionary {metric_name -> values} where the values are given per batch entry and frame as an np array\n            of shape (n, seq_length). `reduce_fn` is only applied to metrics where it makes sense\n            and euler angle differences.\n        '''", "\n", "assert", "pred_motion", ".", "shape", "[", "-", "1", "]", "%", "9", "==", "0", ",", "'predictions are not rotation matrices'", "\n", "assert", "targets_motion", ".", "shape", "[", "-", "1", "]", "%", "9", "==", "0", ",", "'targets are not rotation matrices'", "\n", "assert", "reduce_fn", "in", "[", "'mean'", ",", "'sum'", "]", "\n", "assert", "not", "self", ".", "_should_call_reset", ",", "'you should reset the state of this class after calling `finalize`'", "\n", "dof", "=", "9", "\n", "n_joints", "=", "len", "(", "self", ".", "fk_engine", ".", "major_joints", ")", "\n", "batch_size", "=", "pred_motion", ".", "shape", "[", "0", "]", "\n", "seq_length", "=", "pred_motion", ".", "shape", "[", "1", "]", "\n", "assert", "n_joints", "*", "dof", "==", "pred_motion", ".", "shape", "[", "-", "1", "]", ",", "'unexpected number of joints'", "\n", "\n", "# first reshape everything to (-1, n_joints * 9)", "\n", "pred", "=", "np", ".", "reshape", "(", "pred_motion", ",", "[", "-", "1", ",", "n_joints", "*", "dof", "]", ")", ".", "copy", "(", ")", "\n", "targ", "=", "np", ".", "reshape", "(", "targets_motion", ",", "[", "-", "1", ",", "n_joints", "*", "dof", "]", ")", ".", "copy", "(", ")", "\n", "\n", "# enforce valid rotations", "\n", "if", "self", ".", "force_valid_rot", ":", "\n", "            ", "pred_val", "=", "np", ".", "reshape", "(", "pred", ",", "[", "-", "1", ",", "n_joints", ",", "3", ",", "3", "]", ")", "\n", "pred", "=", "get_closest_rotmat", "(", "pred_val", ")", "\n", "pred", "=", "np", ".", "reshape", "(", "pred", ",", "[", "-", "1", ",", "n_joints", "*", "dof", "]", ")", "\n", "\n", "# check that the rotations are valid", "\n", "", "pred_are_valid", "=", "is_valid_rotmat", "(", "np", ".", "reshape", "(", "pred", ",", "[", "-", "1", ",", "n_joints", ",", "3", ",", "3", "]", ")", ")", "\n", "assert", "pred_are_valid", ",", "'predicted rotation matrices are not valid'", "\n", "targ_are_valid", "=", "is_valid_rotmat", "(", "np", ".", "reshape", "(", "targ", ",", "[", "-", "1", ",", "n_joints", ",", "3", ",", "3", "]", ")", ")", "\n", "assert", "targ_are_valid", ",", "'target rotation matrices are not valid'", "\n", "\n", "# add potentially missing joints", "\n", "pred", "=", "sparse_to_full", "(", "pred", ",", "self", ".", "fk_engine", ".", "major_joints", ",", "self", ".", "fk_engine", ".", "n_joints", ",", "rep", "=", "'rotmat'", ")", "\n", "targ", "=", "sparse_to_full", "(", "targ", ",", "self", ".", "fk_engine", ".", "major_joints", ",", "self", ".", "fk_engine", ".", "n_joints", ",", "rep", "=", "'rotmat'", ")", "\n", "\n", "# make sure we don't consider the root orientation", "\n", "assert", "pred", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "fk_engine", ".", "n_joints", "*", "dof", "\n", "assert", "targ", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "fk_engine", ".", "n_joints", "*", "dof", "\n", "pred", "[", ":", ",", "0", ":", "9", "]", "=", "np", ".", "eye", "(", "3", ",", "3", ")", ".", "flatten", "(", ")", "\n", "targ", "[", ":", ",", "0", ":", "9", "]", "=", "np", ".", "eye", "(", "3", ",", "3", ")", ".", "flatten", "(", ")", "\n", "\n", "metrics", "=", "dict", "(", ")", "\n", "\n", "pred_pos", "=", "targ_pos", "=", "None", "\n", "\n", "select_joints", "=", "self", ".", "fk_engine", ".", "major_joints", "\n", "reduce_fn_np", "=", "np", ".", "mean", "if", "reduce_fn", "==", "'mean'", "else", "np", ".", "sum", "\n", "\n", "for", "metric", "in", "self", ".", "which", ":", "\n", "            ", "if", "metric", "==", "'mpjpe'", ":", "\n", "# compute the mean per joint position error ", "\n", "                ", "pred_local", "=", "np", ".", "reshape", "(", "pred", ",", "[", "-", "1", ",", "self", ".", "fk_engine", ".", "n_joints", ",", "3", ",", "3", "]", ")", "\n", "targ_local", "=", "np", ".", "reshape", "(", "targ", ",", "[", "-", "1", ",", "self", ".", "fk_engine", ".", "n_joints", ",", "3", ",", "3", "]", ")", "\n", "pred_local", "=", "rotmat2aa", "(", "pred_local", ")", "\n", "targ_local", "=", "rotmat2aa", "(", "targ_local", ")", "\n", "v", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "torch", ".", "tensor", "(", "targ_local", ".", "reshape", "(", "(", "batch_size", ",", "seq_length", ",", "-", "1", ",", "3", ")", ")", ")", "-", "torch", ".", "tensor", "(", "pred_local", ".", "reshape", "(", "(", "batch_size", ",", "seq_length", ",", "-", "1", ",", "3", ")", ")", ")", ",", "dim", "=", "3", ")", ",", "dim", "=", "2", ")", "\n", "#v = torch.sum(torch.mean(torch.norm(torch.tensor(targ_local.reshape((batch_size, seq_length, -1, 3))) - torch.tensor(pred_local.reshape((batch_size, seq_length, -1, 3))), dim=3), dim=2), dim=0)", "\n", "metrics", "[", "metric", "]", "=", "np", ".", "reshape", "(", "v", ".", "numpy", "(", ")", ",", "[", "batch_size", ",", "seq_length", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"metric '{}' unknown\"", ".", "format", "(", "metric", ")", ")", "\n", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.compute_quat": [[121, 151], ["quaternion.from_float_array", "quaternion.from_float_array", "quaternion.as_rotation_matrix", "quaternion.as_rotation_matrix", "numpy.reshape", "numpy.reshape", "metrics.MetricsEngine.compute_rotmat", "numpy.reshape", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.compute_rotmat"], ["", "def", "compute_quat", "(", "self", ",", "predictions", ",", "targets", ",", "reduce_fn", "=", "'mean'", ")", ":", "\n", "        ", "'''\n        Compute the chosen metrics. Predictions and targets are assumed to be quaternions.\n        Args:\n            predictions: An np array of shape (n, seq_length, n_joints*4)\n            targets: An np array of the same shape as `predictions`\n            reduce_fn: Which reduce function to apply to the joint dimension, if applicable. Choices are [mean, sum].\n\n        Returns:\n            A dictionary {metric_name -> values} where the values are given per batch entry and frame as an np array\n            of shape (n, seq_length). `reduce_fn` is only applied to metrics where it makes sense\n            and euler angle differences.\n        '''", "\n", "assert", "predictions", ".", "shape", "[", "-", "1", "]", "%", "4", "==", "0", ",", "'predictions are not quaternions'", "\n", "assert", "targets", ".", "shape", "[", "-", "1", "]", "%", "4", "==", "0", ",", "'targets are not quaternions'", "\n", "assert", "reduce_fn", "in", "[", "'mean'", ",", "'sum'", "]", "\n", "assert", "not", "self", ".", "_should_call_reset", ",", "'you should reset the state of this class after calling `finalize`'", "\n", "dof", "=", "4", "\n", "batch_size", "=", "predictions", ".", "shape", "[", "0", "]", "\n", "seq_length", "=", "predictions", ".", "shape", "[", "1", "]", "\n", "\n", "# for simplicity we just convert quaternions to rotation matrices", "\n", "pred_q", "=", "quaternion", ".", "from_float_array", "(", "np", ".", "reshape", "(", "predictions", ",", "[", "batch_size", ",", "seq_length", ",", "-", "1", ",", "dof", "]", ")", ")", "\n", "targ_q", "=", "quaternion", ".", "from_float_array", "(", "np", ".", "reshape", "(", "targets", ",", "[", "batch_size", ",", "seq_length", ",", "-", "1", ",", "dof", "]", ")", ")", "\n", "pred_rots", "=", "quaternion", ".", "as_rotation_matrix", "(", "pred_q", ")", "\n", "targ_rots", "=", "quaternion", ".", "as_rotation_matrix", "(", "targ_q", ")", "\n", "\n", "preds", "=", "np", ".", "reshape", "(", "pred_rots", ",", "[", "batch_size", ",", "seq_length", ",", "-", "1", "]", ")", "\n", "targs", "=", "np", ".", "reshape", "(", "targ_rots", ",", "[", "batch_size", ",", "seq_length", ",", "-", "1", "]", ")", "\n", "return", "self", ".", "compute_rotmat", "(", "preds", ",", "targs", ",", "reduce_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.compute_aa": [[152, 181], ["numpy.reshape", "numpy.reshape", "metrics.aa2rotmat", "metrics.aa2rotmat", "numpy.reshape", "numpy.reshape", "metrics.MetricsEngine.compute_rotmat"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.aa2rotmat", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.aa2rotmat", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.compute_rotmat"], ["", "def", "compute_aa", "(", "self", ",", "predictions", ",", "targets", ",", "reduce_fn", "=", "'mean'", ")", ":", "\n", "        ", "'''\n        Compute the chosen metrics. Predictions and targets are assumed to be in angle-axis format.\n        Args:\n            predictions: An np array of shape (n, seq_length, n_joints*3)\n            targets: An np array of the same shape as `predictions`\n            reduce_fn: Which reduce function to apply to the joint dimension, if applicable. Choices are [mean, sum].\n\n        Returns:\n            A dictionary {metric_name -> values} where the values are given per batch entry and frame as an np array\n            of shape (n, seq_length). `reduce_fn` is only applied to metrics where it makes sense\n            and euler angle differences.\n        '''", "\n", "assert", "predictions", ".", "shape", "[", "-", "1", "]", "%", "3", "==", "0", ",", "'predictions are not quaternions'", "\n", "assert", "targets", ".", "shape", "[", "-", "1", "]", "%", "3", "==", "0", ",", "'targets are not quaternions'", "\n", "assert", "reduce_fn", "in", "[", "'mean'", ",", "'sum'", "]", "\n", "assert", "not", "self", ".", "_should_call_reset", ",", "'you should reset the state of this class after calling `finalize`'", "\n", "dof", "=", "3", "\n", "batch_size", "=", "predictions", ".", "shape", "[", "0", "]", "\n", "seq_length", "=", "predictions", ".", "shape", "[", "1", "]", "\n", "\n", "# for simplicity we just convert angle-axis to rotation matrices", "\n", "pred_aa", "=", "np", ".", "reshape", "(", "predictions", ",", "[", "batch_size", ",", "seq_length", ",", "-", "1", ",", "dof", "]", ")", "\n", "targ_aa", "=", "np", ".", "reshape", "(", "targets", ",", "[", "batch_size", ",", "seq_length", ",", "-", "1", ",", "dof", "]", ")", "\n", "pred_rots", "=", "aa2rotmat", "(", "pred_aa", ")", "\n", "targ_rots", "=", "aa2rotmat", "(", "targ_aa", ")", "\n", "preds", "=", "np", ".", "reshape", "(", "pred_rots", ",", "[", "batch_size", ",", "seq_length", ",", "-", "1", "]", ")", "\n", "targs", "=", "np", ".", "reshape", "(", "targ_rots", ",", "[", "batch_size", ",", "seq_length", ",", "-", "1", "]", ")", "\n", "return", "self", ".", "compute_rotmat", "(", "preds", ",", "targs", ",", "reduce_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.compute": [[182, 201], ["metrics.MetricsEngine.compute_rotmat", "metrics.MetricsEngine.compute_quat", "metrics.MetricsEngine.compute_aa"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.compute_rotmat", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.compute_quat", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.compute_aa"], ["", "def", "compute", "(", "self", ",", "pred_motion", ",", "targets_motion", ",", "reduce_fn", "=", "'mean'", ")", ":", "\n", "        ", "'''\n        Compute the chosen metrics. Predictions and targets can be in rotation matrix or quaternion format.\n        Args:\n            predictions: An np array of shape (n, seq_length, n_joints*dof)\n            targets: An np array of the same shape as `predictions`\n            reduce_fn: Which reduce function to apply to the joint dimension, if applicable. Choices are [mean, sum].\n\n        Returns:\n            A dictionary {metric_name -> values} where the values are given per batch entry and frame as an np array\n            of shape (n, seq_length). `reduce_fn` is only applied to metrics where it makes sense\n            and euler angle differences.\n        '''", "\n", "if", "self", ".", "rep", "==", "'rotmat'", ":", "\n", "            ", "return", "self", ".", "compute_rotmat", "(", "pred_motion", ",", "targets_motion", ",", "reduce_fn", ")", "\n", "", "elif", "self", ".", "rep", "==", "'quat'", ":", "\n", "            ", "return", "self", ".", "compute_quat", "(", "pred_motion", ",", "targets_motion", ",", "reduce_fn", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "compute_aa", "(", "pred_motion", ",", "targets_motion", ",", "reduce_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.aggregate": [[202, 222], ["isinstance", "list", "list", "new_metrics.keys", "metrics.MetricsEngine.metrics_agg.keys", "numpy.sum", "numpy.sum", "list", "new_metrics.keys"], "methods", ["None"], ["", "", "def", "aggregate", "(", "self", ",", "new_metrics", ")", ":", "\n", "        ", "'''\n        Aggregate the metrics.\n        Args:\n            new_metrics: Dictionary of new metric values to aggregate. Each entry is expected to be a numpy array\n            of shape (batch_size, seq_length).\n        '''", "\n", "assert", "isinstance", "(", "new_metrics", ",", "dict", ")", "\n", "assert", "list", "(", "new_metrics", ".", "keys", "(", ")", ")", "==", "list", "(", "self", ".", "metrics_agg", ".", "keys", "(", ")", ")", "\n", "\n", "# sum over the batch dimension", "\n", "for", "m", "in", "new_metrics", ":", "\n", "            ", "if", "self", ".", "metrics_agg", "[", "m", "]", "is", "None", ":", "\n", "                ", "self", ".", "metrics_agg", "[", "m", "]", "=", "np", ".", "sum", "(", "new_metrics", "[", "m", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "metrics_agg", "[", "m", "]", "+=", "np", ".", "sum", "(", "new_metrics", "[", "m", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# keep track of the total number of samples processed", "\n", "", "", "batch_size", "=", "new_metrics", "[", "list", "(", "new_metrics", ".", "keys", "(", ")", ")", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "\n", "self", ".", "n_samples", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.compute_and_aggregate": [[223, 233], ["metrics.MetricsEngine.compute", "metrics.MetricsEngine.aggregate"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.compute", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.aggregate"], ["", "def", "compute_and_aggregate", "(", "self", ",", "pred_motion", ",", "targets_motion", ",", "reduce_fn", "=", "'mean'", ")", ":", "\n", "        ", "'''\n        Computes the metric values and aggregates them directly.\n        Args:\n            predictions: An np array of shape (n, seq_length, n_joints*dof)\n            targets: An np array of the same shape as `predictions`\n            reduce_fn: Which reduce function to apply to the joint dimension, if applicable. Choices are [mean, sum].\n        '''", "\n", "new_metrics", "=", "self", ".", "compute", "(", "pred_motion", ",", "targets_motion", ",", "reduce_fn", ")", "\n", "self", ".", "aggregate", "(", "new_metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.get_final_metrics": [[234, 248], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_final_metrics", "(", "self", ")", ":", "\n", "        ", "'''\n        Finalize and return the metrics - this should only be called once all the data has been processed.\n        Returns:\n            A dictionary of the final aggregated metrics per time step.\n        '''", "\n", "self", ".", "_should_call_reset", "=", "True", "# make sure to call `reset` before new values are computed", "\n", "assert", "self", ".", "n_samples", ">", "0", "\n", "\n", "for", "m", "in", "self", ".", "metrics_agg", ":", "\n", "            ", "self", ".", "metrics_agg", "[", "m", "]", "=", "self", ".", "metrics_agg", "[", "m", "]", "/", "self", ".", "n_samples", "\n", "\n", "# return a copy of the metrics so that the class can be re-used again immediately", "\n", "", "return", "copy", ".", "deepcopy", "(", "self", ".", "metrics_agg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.get_summary_string": [[249, 267], ["sorted", "numpy.sum", "list", "metric_results.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_summary_string", "(", "cls", ",", "metric_results", ",", "at_mode", "=", "False", ")", ":", "\n", "        ", "'''\n        Create a summary string (e.g. for printing to the console) from the given metrics for the entire sequence.\n        Args:\n            metric_results: Dictionary of metric values, expects them to be in shape (seq_length, ).\n            at_mode: If true will report the numbers at the last frame rather then until the last frame.\n\n        Returns:\n            A summary string.\n        '''", "\n", "seq_length", "=", "metric_results", "[", "list", "(", "metric_results", ".", "keys", "(", ")", ")", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "\n", "s", "=", "'metrics until {}:'", ".", "format", "(", "seq_length", ")", "\n", "for", "m", "in", "sorted", "(", "metric_results", ")", ":", "\n", "            ", "val", "=", "metric_results", "[", "m", "]", "[", "seq_length", "-", "1", "]", "if", "at_mode", "else", "np", ".", "sum", "(", "metric_results", "[", "m", "]", ")", "\n", "s", "+=", "'   {}: {:.3f}'", ".", "format", "(", "m", ",", "val", ")", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.get_summary_string_all": [[268, 304], ["sorted", "sorted", "numpy.sum", "tb_writer.add_scalar", "tb_writer.add_scalar", "tb_writer.add_scalar"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_summary_string_all", "(", "cls", ",", "metric_results", ",", "target_lengths", ",", "at_mode", "=", "False", ",", "tb_writer", "=", "None", ",", "step", "=", "0", ",", "training", "=", "False", ",", "train_loss", "=", "None", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "'''\n        Create a summary string for given lengths. \n        Args:\n            metric_results: Dictionary of metric values, expects them to be in shape (seq_length, ).\n            target_lengths: Metrics at these time-steps are reported.\n            at_mode: If true will report the numbers at the last frame rather then until the last frame.\n            tb_writer: Summary writer for reporting on tensorboard\n            step: Epoch number\n            training: If true, train loss and val loss are reported \n            train_loss: Training loss\n            val_loss: Validation loss \n\n        Returns:\n            A summary string, and results are shown on tensorboard if it is given.\n        '''", "\n", "s", "=", "''", "\n", "for", "seq_length", "in", "sorted", "(", "target_lengths", ")", ":", "\n", "            ", "if", "at_mode", ":", "\n", "                ", "s", "+=", "'\\nat frame {:<2}:'", ".", "format", "(", "seq_length", ")", "\n", "", "else", ":", "\n", "                ", "s", "+=", "'\\nMetrics until {:<2}:'", ".", "format", "(", "seq_length", ")", "\n", "", "tbs", "=", "'until {:<2}/'", ".", "format", "(", "seq_length", ")", "\n", "for", "m", "in", "sorted", "(", "metric_results", ")", ":", "\n", "                ", "val", "=", "metric_results", "[", "m", "]", "[", "seq_length", "-", "1", "]", "if", "at_mode", "else", "np", ".", "sum", "(", "metric_results", "[", "m", "]", "[", ":", "seq_length", "]", ")", "\n", "s", "+=", "'   {}: {:.5f}'", ".", "format", "(", "m", ",", "val", ")", "\n", "\n", "if", "tb_writer", ":", "\n", "                    ", "tb_writer", ".", "add_scalar", "(", "tbs", "+", "m", ",", "val", ",", "step", ")", "\n", "", "", "if", "training", ":", "\n", "                ", "if", "tb_writer", ":", "\n", "                    ", "tb_writer", ".", "add_scalar", "(", "'train_loss'", ",", "train_loss", ",", "step", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'val_loss'", ",", "val_loss", ",", "step", ")", "\n", "\n", "", "", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.aa2rotmat": [[307, 322], ["numpy.reshape", "numpy.zeros", "range", "numpy.reshape", "cv2.Rodrigues"], "function", ["None"], ["", "", "def", "aa2rotmat", "(", "angle_axes", ")", ":", "\n", "    ", "'''\n    Convert angle-axis to rotation matrices using opencv's Rodrigues formula.\n    Args:\n        angle_axes: A np array of shape (..., 3)\n\n    Returns:\n        A np array of shape (..., 3, 3)\n    '''", "\n", "orig_shape", "=", "angle_axes", ".", "shape", "[", ":", "-", "1", "]", "\n", "aas", "=", "np", ".", "reshape", "(", "angle_axes", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "rots", "=", "np", ".", "zeros", "(", "[", "aas", ".", "shape", "[", "0", "]", ",", "3", ",", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "aas", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rots", "[", "i", "]", "=", "cv2", ".", "Rodrigues", "(", "aas", "[", "i", "]", ")", "[", "0", "]", "\n", "", "return", "np", ".", "reshape", "(", "rots", ",", "orig_shape", "+", "(", "3", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.rotmat2aa": [[325, 341], ["numpy.reshape", "numpy.zeros", "range", "numpy.reshape", "numpy.squeeze", "len", "cv2.Rodrigues"], "function", ["None"], ["", "def", "rotmat2aa", "(", "rotmats", ")", ":", "\n", "    ", "\"\"\"\n    Convert rotation matrices to angle-axis using opencv's Rodrigues formula.\n    Args:\n        rotmats: A np array of shape (..., 3, 3)\n\n    Returns:\n        A np array of shape (..., 3)\n    \"\"\"", "\n", "assert", "rotmats", ".", "shape", "[", "-", "1", "]", "==", "3", "and", "rotmats", ".", "shape", "[", "-", "2", "]", "==", "3", "and", "len", "(", "rotmats", ".", "shape", ")", ">=", "3", ",", "'invalid input dimension'", "\n", "orig_shape", "=", "rotmats", ".", "shape", "[", ":", "-", "2", "]", "\n", "rots", "=", "np", ".", "reshape", "(", "rotmats", ",", "[", "-", "1", ",", "3", ",", "3", "]", ")", "\n", "aas", "=", "np", ".", "zeros", "(", "[", "rots", ".", "shape", "[", "0", "]", ",", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "rots", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "aas", "[", "i", "]", "=", "np", ".", "squeeze", "(", "cv2", ".", "Rodrigues", "(", "rots", "[", "i", "]", ")", "[", "0", "]", ")", "\n", "", "return", "np", ".", "reshape", "(", "aas", ",", "orig_shape", "+", "(", "3", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.eye": [[344, 350], ["numpy.zeros", "numpy.concatenate"], "function", ["None"], ["", "def", "eye", "(", "n", ",", "batch_shape", ")", ":", "\n", "    ", "iden", "=", "np", ".", "zeros", "(", "np", ".", "concatenate", "(", "[", "batch_shape", ",", "[", "n", ",", "n", "]", "]", ")", ")", "\n", "iden", "[", "...", ",", "0", ",", "0", "]", "=", "1.0", "\n", "iden", "[", "...", ",", "1", ",", "1", "]", "=", "1.0", "\n", "iden", "[", "...", ",", "2", ",", "2", "]", "=", "1.0", "\n", "return", "iden", "", "", ""]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.ForwardKinematics.__init__": [[31, 42], ["len", "numpy.linalg.norm"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "offsets", ",", "parents", ",", "left_mult", "=", "False", ",", "major_joints", "=", "None", ",", "norm_idx", "=", "None", ",", "no_root", "=", "True", ")", ":", "\n", "        ", "self", ".", "offsets", "=", "offsets", "\n", "if", "norm_idx", "is", "not", "None", ":", "\n", "            ", "self", ".", "offsets", "=", "self", ".", "offsets", "/", "np", ".", "linalg", ".", "norm", "(", "self", ".", "offsets", "[", "norm_idx", "]", ")", "\n", "", "self", ".", "parents", "=", "parents", "\n", "self", ".", "n_joints", "=", "len", "(", "parents", ")", "\n", "self", ".", "major_joints", "=", "major_joints", "\n", "self", ".", "left_mult", "=", "left_mult", "\n", "self", ".", "no_root", "=", "no_root", "\n", "assert", "self", ".", "offsets", ".", "shape", "[", "0", "]", "==", "self", ".", "n_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.ForwardKinematics.fk": [[43, 87], ["numpy.reshape", "numpy.zeros", "numpy.zeros", "range", "numpy.eye", "numpy.matmul", "numpy.matmul", "numpy.squeeze", "numpy.squeeze", "numpy.matmul", "numpy.matmul"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.eye"], ["", "def", "fk", "(", "self", ",", "joint_angles", ")", ":", "\n", "        ", "\"\"\"\n        Perform forward kinematics. This requires joint angles to be in rotation matrix format.\n        Args:\n            joint_angles: np array of shape (N, n_joints*3*3)\n\n        Returns:\n            The 3D joint positions as an array of shape (N, n_joints, 3)\n        \"\"\"", "\n", "assert", "joint_angles", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "n_joints", "*", "9", "\n", "angles", "=", "np", ".", "reshape", "(", "joint_angles", ",", "[", "-", "1", ",", "self", ".", "n_joints", ",", "3", ",", "3", "]", ")", "\n", "n_frames", "=", "angles", ".", "shape", "[", "0", "]", "\n", "positions", "=", "np", ".", "zeros", "(", "[", "n_frames", ",", "self", ".", "n_joints", ",", "3", "]", ")", "\n", "# intermediate storage of global rotation matrices", "\n", "rotations", "=", "np", ".", "zeros", "(", "[", "n_frames", ",", "self", ".", "n_joints", ",", "3", ",", "3", "]", ")", "\n", "if", "self", ".", "left_mult", ":", "\n", "            ", "offsets", "=", "self", ".", "offsets", "[", "np", ".", "newaxis", ",", "\n", "np", ".", "newaxis", ",", "...", "]", "# (1, 1, n_joints, 3)", "\n", "", "else", ":", "\n", "            ", "offsets", "=", "self", ".", "offsets", "[", "np", ".", "newaxis", ",", "...", ",", "\n", "np", ".", "newaxis", "]", "# (1, n_joints, 3, 1)", "\n", "\n", "", "if", "self", ".", "no_root", ":", "\n", "            ", "angles", "[", ":", ",", "0", "]", "=", "np", ".", "eye", "(", "3", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "self", ".", "n_joints", ")", ":", "\n", "            ", "if", "self", ".", "parents", "[", "j", "]", "==", "-", "1", ":", "\n", "# this is the root, we don't consider any root translation", "\n", "                ", "positions", "[", ":", ",", "j", "]", "=", "0.0", "\n", "rotations", "[", ":", ",", "j", "]", "=", "angles", "[", ":", ",", "j", "]", "\n", "", "else", ":", "\n", "# this is a regular joint", "\n", "                ", "if", "self", ".", "left_mult", ":", "\n", "                    ", "positions", "[", ":", ",", "j", "]", "=", "np", ".", "squeeze", "(", "np", ".", "matmul", "(", "\n", "offsets", "[", ":", ",", ":", ",", "j", "]", ",", "rotations", "[", ":", ",", "self", ".", "parents", "[", "j", "]", "]", ")", ")", "+", "positions", "[", ":", ",", "self", ".", "parents", "[", "j", "]", "]", "\n", "rotations", "[", ":", ",", "j", "]", "=", "np", ".", "matmul", "(", "\n", "angles", "[", ":", ",", "j", "]", ",", "rotations", "[", ":", ",", "self", ".", "parents", "[", "j", "]", "]", ")", "\n", "", "else", ":", "\n", "                    ", "positions", "[", ":", ",", "j", "]", "=", "np", ".", "squeeze", "(", "np", ".", "matmul", "(", "\n", "rotations", "[", ":", ",", "self", ".", "parents", "[", "j", "]", "]", ",", "offsets", "[", ":", ",", "j", "]", ")", ")", "+", "positions", "[", ":", ",", "self", ".", "parents", "[", "j", "]", "]", "\n", "rotations", "[", ":", ",", "j", "]", "=", "np", ".", "matmul", "(", "\n", "rotations", "[", ":", ",", "self", ".", "parents", "[", "j", "]", "]", ",", "angles", "[", ":", ",", "j", "]", ")", "\n", "\n", "", "", "", "return", "positions", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.ForwardKinematics.from_aa": [[88, 98], ["numpy.reshape", "numpy.zeros", "range", "visualization.ForwardKinematics.fk", "range", "numpy.reshape", "cv2.Rodrigues"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.ForwardKinematics.fk"], ["", "def", "from_aa", "(", "self", ",", "joint_angles", ")", ":", "\n", "        ", "\"\"\"\n        Get joint positions from angle axis representations in shape (N, n_joints*3).\n        \"\"\"", "\n", "angles", "=", "np", ".", "reshape", "(", "joint_angles", ",", "[", "-", "1", ",", "self", ".", "n_joints", ",", "3", "]", ")", "\n", "angles_rot", "=", "np", ".", "zeros", "(", "angles", ".", "shape", "+", "(", "3", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "angles", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "n_joints", ")", ":", "\n", "                ", "angles_rot", "[", "i", ",", "j", "]", "=", "cv2", ".", "Rodrigues", "(", "angles", "[", "i", ",", "j", "]", ")", "[", "0", "]", "\n", "", "", "return", "self", ".", "fk", "(", "np", ".", "reshape", "(", "angles_rot", ",", "[", "-", "1", ",", "self", ".", "n_joints", "*", "9", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.ForwardKinematics.from_rotmat": [[99, 104], ["visualization.ForwardKinematics.fk"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.ForwardKinematics.fk"], ["", "def", "from_rotmat", "(", "self", ",", "joint_angles", ")", ":", "\n", "        ", "\"\"\"\n        Get joint positions from rotation matrix representations in shape (N, H36M_NR_JOINTS*3*3).\n        \"\"\"", "\n", "return", "self", ".", "fk", "(", "joint_angles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.ForwardKinematics.from_sparse": [[105, 127], ["utils.sparse_to_full", "fk_func"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.sparse_to_full"], ["", "def", "from_sparse", "(", "self", ",", "joint_angles_sparse", ",", "rep", "=", "\"rotmat\"", ",", "return_sparse", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Get joint positions from reduced set of H36M joints.\n        Args:\n            joint_angles_sparse: np array of shape (N, len(sparse_joint_idxs) * dof))\n            sparse_joints_idxs: List of indices into `H36M_JOINTS` pointing out which SMPL joints are used in\n              `pose_sparse`. If None defaults to `H36M_MAJOR_JOINTS`.\n            rep: \"rotmat\" or \"quat\", which representation is used for the angles in `joint_angles_sparse`\n            return_sparse: If True it will return only the positions of the joints given in `sparse_joint_idxs`.\n\n        Returns:\n            The joint positions as an array of shape (N, len(sparse_joint_idxs), 3) if `return_sparse` is True\n            otherwise (N, H36M_NR_JOINTS, 3).\n        \"\"\"", "\n", "assert", "self", ".", "major_joints", "is", "not", "None", "\n", "assert", "rep", "in", "[", "\"rotmat\"", ",", "\"quat\"", ",", "\"aa\"", "]", "\n", "joint_angles_full", "=", "sparse_to_full", "(", "joint_angles_sparse", ",", "self", ".", "major_joints", ",", "self", ".", "n_joints", ",", "rep", ")", "\n", "fk_func", "=", "self", ".", "from_quat", "if", "rep", "==", "\"quat\"", "else", "self", ".", "from_aa", "if", "rep", "==", "\"aa\"", "else", "self", ".", "from_rotmat", "\n", "positions", "=", "fk_func", "(", "joint_angles_full", ")", "\n", "if", "return_sparse", ":", "\n", "            ", "positions", "=", "positions", "[", ":", ",", "self", ".", "major_joints", "]", "\n", "", "return", "positions", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.CMUForwardKinematics.__init__": [[135, 163], ["offset.reshape", "visualization.ForwardKinematics.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "offset", "=", "70", "*", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1.65674000000000", ",", "-", "1.8028200000000000", ",", "\n", "0.624770000000000", ",", "2.59720000000000", ",", "-", "7.135760000000000", ",", "\n", "0", ",", "2.49236000000000", ",", "-", "6.84770000000000", ",", "0", ",", "0.1970400000", ",", "\n", "-", "0.5413600000000000", ",", "2.145810000000000", ",", "0.00000", ",", "0.0000", ",", "\n", "1.11249000000000", ",", "0.000", ",", "0.000", ",", "0.00", ",", "-", "1.61070000000000", ",", "\n", "-", "1.80282000000000", ",", "0.624760000000000", ",", "-", "2.59502000000000", ",", "\n", "-", "7.1297700000000", ",", "0", ",", "-", "2.4678000000000", ",", "-", "6.7802400000000", ",", "\n", "0", ",", "-", "0.230240000000000", ",", "-", "0.63258000000000", ",", "2.13368000000", ",", "\n", "0", ",", "0", ",", "1.11569000000000", ",", "0.0", ",", "0.0", ",", "0", ",", "0.0196100000000000", ",", "\n", "2.05450000000000", ",", "-", "0.141120000000000", ",", "0.010210000000000", ",", "\n", "2.06436000000000", ",", "-", "0.0592100000000000", ",", "0.00", ",", "0.00", ",", "0.00", ",", "\n", "0.00713000000000000", ",", "1.56711000000000", ",", "0.14968000000000", ",", "\n", "0.0342900000000000", ",", "1.56041000000000", ",", "-", "0.10006000000000", ",", "\n", "0.0130500000000000", ",", "1.6256000000000", ",", "-", "0.052650000000000", ",", "\n", "0", ",", "0", ",", "0", ",", "3.54205000000", ",", "0.90436000000", ",", "-", "0.1736400000000", ",", "\n", "4.86513000000000", ",", "0", ",", "0", ",", "3.35554000000000", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "\n", "0.661170000000000", ",", "0", ",", "0", ",", "0.533060000000000", ",", "0.0", ",", "0.0", ",", "0", ",", "\n", "0", ",", "0", ",", "0.541200000000000", ",", "0", ",", "0.5412000000000000", ",", "0", ",", "0", ",", "0", ",", "\n", "-", "3.49802000000000", ",", "0.75994000000000", ",", "-", "0.326160000000000", ",", "\n", "-", "5.02649000000000", ",", "0", ",", "0", ",", "-", "3.364310000000", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "\n", "-", "0.7304100000000", ",", "0", ",", "0", ",", "-", "0.5888700000000", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "\n", "-", "0.597860000000000", ",", "0", ",", "0.597860000000000", "]", ")", "\n", "\n", "offsets", "=", "offset", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "# normalize so that right thigh has length 1", "\n", "super", "(", "CMUForwardKinematics", ",", "self", ")", ".", "__init__", "(", "offsets", ",", "CMU_PARENTS", ",", "norm_idx", "=", "None", ",", "left_mult", "=", "True", ",", "major_joints", "=", "CMU_MAJOR_JOINTS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.Visualizer.__init__": [[172, 205], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "interactive", ",", "rep", "=", "\"rotmat\"", ",", "fk_engine", "=", "None", ",", "\n", "output_dir", "=", "None", ",", "to_video", "=", "False", ",", "save_figs", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Initializer. Determines if visualizations are shown interactively or saved to disk.\n        Args:\n            interactive: Boolean if motion is to be shown in an interactive matplotlib window. If True, requires\n              `fk_engine` and can only display skeletons because animating dense meshes is too slow. If False,\n              `output_dir` must be passed. In this case, frames (and optionally a video) are dumped to disk.\n              This is slow as it uses SMPL to produce meshes and joint positions for every time instance.\n            rep: Representation of the input motions, 'rotmat', 'quat', or 'aa'.\n            fk_engine: The forward-kinematics engine required for interactive mode.\n            output_dir: Where to dump frames/videos in non-interactive mode.\n            skeleton: Boolean if skeleton should be shown in non-interactive mode.\n            dense: Boolean if mesh should be shown in non-interactive mode.\n            to_video: Boolean if a video should be dumped to disk in non-interactive mode.\n        \"\"\"", "\n", "\n", "self", ".", "interactive", "=", "interactive", "\n", "self", ".", "save_figs", "=", "save_figs", "\n", "self", ".", "fk_engine", "=", "fk_engine", "\n", "self", ".", "video_dir", "=", "output_dir", "\n", "self", ".", "rep", "=", "rep", "\n", "self", ".", "to_video", "=", "to_video", "\n", "# what color to use to display ground-truth and seed", "\n", "self", ".", "base_color", "=", "_colors", "[", "2", "]", "\n", "# what color to use for predictions,", "\n", "self", ".", "prediction_color", "=", "_colors", "[", "3", "]", "\n", "self", ".", "expected_n_input_joints", "=", "len", "(", "self", ".", "fk_engine", ".", "major_joints", ")", "\n", "assert", "rep", "in", "[", "\"rotmat\"", ",", "\"quat\"", ",", "\"aa\"", "]", "\n", "if", "self", ".", "interactive", ":", "\n", "            ", "assert", "self", ".", "fk_engine", "\n", "", "else", ":", "\n", "            ", "assert", "output_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.Visualizer.create_clip_skeleton": [[206, 236], ["numpy.reshape", "visualization.Visualizer.fk_engine.from_sparse", "title.replace", "os.path.join", "visualization.animate_matplotlib", "title.replace.split"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.ForwardKinematics.from_sparse", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.animate_matplotlib"], ["", "", "def", "create_clip_skeleton", "(", "self", ",", "joint_angles", ",", "title", ")", ":", "\n", "        ", "\"\"\"Creates clip of a given sequence in rotation matrix format.\n\n        Args:\n            joint_angles: sequence of poses.\n            title: output file name.\n        Returns:\n        \"\"\"", "\n", "assert", "joint_angles", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "expected_n_input_joints", "*", "9", "\n", "n_joints", "=", "self", ".", "expected_n_input_joints", "\n", "\n", "# calculate positions", "\n", "joint_angles", "=", "np", ".", "reshape", "(", "joint_angles", ",", "[", "-", "1", ",", "n_joints", ",", "3", ",", "3", "]", ")", "\n", "\n", "pos", "=", "self", ".", "fk_engine", ".", "from_sparse", "(", "joint_angles", ",", "return_sparse", "=", "False", ")", "# (N, full_n_joints, 3)", "\n", "\n", "pos", "=", "pos", "[", "...", ",", "[", "0", ",", "2", ",", "1", "]", "]", "\n", "\n", "fname", "=", "title", ".", "replace", "(", "'/'", ",", "'.'", ")", "\n", "# reduce name otherwise stupid OSes (i.e., all of them) can't handle it", "\n", "fname", "=", "fname", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "dir_prefix", "=", "'skeleton'", "\n", "out_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "video_dir", ",", "dir_prefix", ",", "fname", ")", "\n", "\n", "fps", "=", "200", "\n", "\n", "animate_matplotlib", "(", "positions", "=", "[", "pos", "]", ",", "colors", "=", "[", "self", ".", "base_color", "]", ",", "titles", "=", "[", "\"\"", "]", ",", "\n", "fig_title", "=", "title", ",", "parents", "=", "self", ".", "fk_engine", ".", "parents", ",", "out_dir", "=", "out_dir", ",", "\n", "fname", "=", "fname", ",", "to_video", "=", "self", ".", "to_video", ",", "fps", "=", "fps", ",", "\n", "save_figs", "=", "self", ".", "save_figs", ",", "interactive", "=", "self", ".", "interactive", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.Visualizer.visualize_results": [[237, 253], ["visualization.Visualizer.visualize_quat", "visualization.Visualizer.visualize_rotmat", "visualization.Visualizer.visualize_aa"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.Visualizer.visualize_quat", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.Visualizer.visualize_rotmat", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.Visualizer.visualize_aa"], ["", "def", "visualize_results", "(", "self", ",", "seed", ",", "prediction", ",", "target", ",", "title", ")", ":", "\n", "        ", "\"\"\"\n        Visualize prediction and ground truth side by side. At the moment only supports sparse pose input in rotation\n        matrix or quaternion format.\n        Args:\n            seed: A np array of shape (seed_seq_length, n_joints*dof)\n            prediction: A np array of shape (target_seq_length, n_joints*dof)\n            target: A np array of shape (target_seq_length, n_joints*dof)\n            title: Title of the plot\n        \"\"\"", "\n", "if", "self", ".", "rep", "==", "\"quat\"", ":", "\n", "            ", "self", ".", "visualize_quat", "(", "seed", ",", "prediction", ",", "target", ",", "title", ")", "\n", "", "elif", "self", ".", "rep", "==", "\"rotmat\"", ":", "\n", "            ", "self", ".", "visualize_rotmat", "(", "seed", ",", "prediction", ",", "target", ",", "title", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "visualize_aa", "(", "seed", ",", "prediction", ",", "target", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.Visualizer.visualize_quat": [[254, 266], ["visualization.Visualizer.visualize_rotmat", "quaternion.from_float_array", "quaternion.as_rotation_matrix", "numpy.reshape", "visualization.Visualizer.visualize_quat._to_rotmat"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.Visualizer.visualize_rotmat"], ["", "", "def", "visualize_quat", "(", "self", ",", "seed", ",", "prediction", ",", "target", ",", "title", ")", ":", "\n", "        ", "assert", "seed", ".", "shape", "[", "-", "1", "]", "==", "prediction", ".", "shape", "[", "-", "1", "]", "==", "target", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "expected_n_input_joints", "*", "4", "\n", "assert", "prediction", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", "\n", "dof", "=", "4", "\n", "\n", "def", "_to_rotmat", "(", "x", ")", ":", "\n", "            ", "b", "=", "x", ".", "shape", "[", "0", "]", "\n", "xq", "=", "quaternion", ".", "from_float_array", "(", "np", ".", "reshape", "(", "x", ",", "[", "b", ",", "-", "1", ",", "dof", "]", ")", ")", "\n", "xr", "=", "quaternion", ".", "as_rotation_matrix", "(", "xq", ")", "\n", "return", "np", ".", "reshape", "(", "xr", ",", "[", "b", ",", "-", "1", "]", ")", "\n", "\n", "", "self", ".", "visualize_rotmat", "(", "_to_rotmat", "(", "seed", ")", ",", "_to_rotmat", "(", "prediction", ")", ",", "_to_rotmat", "(", "target", ")", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.Visualizer.visualize_aa": [[267, 278], ["visualization.Visualizer.visualize_rotmat", "metrics.aa2rotmat", "numpy.reshape", "visualization.Visualizer.visualize_quat._to_rotmat"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.Visualizer.visualize_rotmat", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.aa2rotmat"], ["", "def", "visualize_aa", "(", "self", ",", "seed", ",", "prediction", ",", "target", ",", "title", ")", ":", "\n", "        ", "assert", "seed", ".", "shape", "[", "-", "1", "]", "==", "prediction", ".", "shape", "[", "-", "1", "]", "==", "target", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "expected_n_input_joints", "*", "3", "\n", "assert", "prediction", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", "\n", "dof", "=", "3", "\n", "\n", "def", "_to_rotmat", "(", "x", ")", ":", "\n", "            ", "b", "=", "x", ".", "shape", "[", "0", "]", "\n", "xaa", "=", "aa2rotmat", "(", "np", ".", "reshape", "(", "x", ",", "[", "b", ",", "-", "1", ",", "dof", "]", ")", ")", "\n", "return", "np", ".", "reshape", "(", "xaa", ",", "[", "b", ",", "-", "1", "]", ")", "\n", "\n", "", "self", ".", "visualize_rotmat", "(", "_to_rotmat", "(", "seed", ")", ",", "_to_rotmat", "(", "prediction", ")", ",", "_to_rotmat", "(", "target", ")", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.Visualizer.visualize_rotmat": [[279, 326], ["numpy.concatenate", "numpy.concatenate", "numpy.reshape", "utils.get_closest_rotmat", "numpy.reshape", "utils.is_valid_rotmat", "utils.is_valid_rotmat", "visualization.Visualizer.fk_engine.from_sparse", "visualization.Visualizer.fk_engine.from_sparse", "title.replace", "os.path.join", "visualization.animate_matplotlib", "numpy.reshape", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.get_closest_rotmat", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.is_valid_rotmat", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.is_valid_rotmat", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.ForwardKinematics.from_sparse", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.ForwardKinematics.from_sparse", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.animate_matplotlib"], ["", "def", "visualize_rotmat", "(", "self", ",", "seed", ",", "prediction", ",", "target", ",", "title", ")", ":", "\n", "        ", "assert", "seed", ".", "shape", "[", "-", "1", "]", "==", "prediction", ".", "shape", "[", "-", "1", "]", "==", "target", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "expected_n_input_joints", "*", "9", "\n", "assert", "prediction", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", "\n", "n_joints", "=", "self", ".", "expected_n_input_joints", "\n", "dof", "=", "9", "\n", "\n", "# stitch seed in front of prediction and target", "\n", "pred", "=", "np", ".", "concatenate", "(", "[", "seed", ",", "prediction", "]", ",", "axis", "=", "0", ")", "\n", "targ", "=", "np", ".", "concatenate", "(", "[", "seed", ",", "target", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# make sure the rotations are valid", "\n", "pred_val", "=", "np", ".", "reshape", "(", "pred", ",", "[", "-", "1", ",", "n_joints", ",", "3", ",", "3", "]", ")", "\n", "pred", "=", "get_closest_rotmat", "(", "pred_val", ")", "\n", "pred", "=", "np", ".", "reshape", "(", "pred", ",", "[", "-", "1", ",", "n_joints", "*", "dof", "]", ")", "\n", "\n", "# check that the targets are valid", "\n", "targ_are_valid", "=", "is_valid_rotmat", "(", "np", ".", "reshape", "(", "targ", ",", "[", "-", "1", ",", "n_joints", ",", "3", ",", "3", "]", ")", ")", "\n", "assert", "targ_are_valid", ",", "'target rotation matrices are not valid rotations'", "\n", "\n", "# check that the targets are valid", "\n", "pred_are_valid", "=", "is_valid_rotmat", "(", "np", ".", "reshape", "(", "pred", ",", "[", "-", "1", ",", "n_joints", ",", "3", ",", "3", "]", ")", ")", "\n", "assert", "pred_are_valid", ",", "'predicted rotation matrices are not valid rotations'", "\n", "\n", "change_color_after_frame", "=", "seed", ".", "shape", "[", "0", "]", "\n", "\n", "# compute positions ", "\n", "pred_pos", "=", "self", ".", "fk_engine", ".", "from_sparse", "(", "pred", ",", "return_sparse", "=", "False", ")", "# (N, full_n_joints, 3)", "\n", "targ_pos", "=", "self", ".", "fk_engine", ".", "from_sparse", "(", "targ", ",", "return_sparse", "=", "False", ")", "# (N, full_n_joints, 3)", "\n", "\n", "# swap axes", "\n", "pred_pos", "=", "pred_pos", "[", "...", ",", "[", "0", ",", "2", ",", "1", "]", "]", "\n", "targ_pos", "=", "targ_pos", "[", "...", ",", "[", "0", ",", "2", ",", "1", "]", "]", "\n", "\n", "fname", "=", "title", ".", "replace", "(", "'/'", ",", "'.'", ")", "\n", "dir_prefix", "=", "'skeleton'", "\n", "out_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "video_dir", ",", "dir_prefix", ",", "fname", ")", "\n", "\n", "fps", "=", "50", "\n", "\n", "# Visualize predicted and target joint angles in an interactive matplotlib window, and frames and video on disk", "\n", "animate_matplotlib", "(", "positions", "=", "[", "pred_pos", ",", "targ_pos", "]", ",", "colors", "=", "[", "self", ".", "base_color", ",", "self", ".", "base_color", "]", ",", "\n", "titles", "=", "[", "'prediction'", ",", "'target'", "]", ",", "fig_title", "=", "title", ",", "\n", "parents", "=", "self", ".", "fk_engine", ".", "parents", ",", "\n", "change_color_after_frame", "=", "(", "change_color_after_frame", ",", "None", ")", ",", "\n", "color_after_change", "=", "self", ".", "prediction_color", ",", "out_dir", "=", "out_dir", ",", "\n", "fname", "=", "fname", ",", "to_video", "=", "self", ".", "to_video", ",", "fps", "=", "fps", ",", "\n", "save_figs", "=", "self", ".", "save_figs", ",", "interactive", "=", "self", ".", "interactive", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.animate_matplotlib": [[327, 463], ["numpy.amin", "matplotlib.pyplot.figure", "matplotlib.pyplot.clf", "plt.figure.suptitle", "enumerate", "numpy.amin", "numpy.amax", "plt.figure.canvas.mpl_connect", "plt.figure.text", "matplotlib.animation.FuncAnimation", "matplotlib.pyplot.close", "len", "plt.figure.add_subplot", "all_lines.append", "ax.set_title", "ax.axis", "zip", "ax.view_init", "range", "range", "plt.figure.canvas.draw_idle", "range", "fig.text.set_text", "matplotlib.pyplot.show", "os.path.join", "range", "[].flatten", "[].flatten", "[].flatten", "ax.plot", "len", "len", "len", "range", "range", "print", "os.path.join", "visualization.save_to_movie", "ax.plot", "range", "axes[].view_init", "axes[].set_xlim3d", "axes[].set_ylim3d", "axes[].set_zlim3d", "len", "numpy.vstack", "points_j[].set_data", "points_j[].set_3d_properties", "os.path.exists", "os.makedirs", "visualization.animate_matplotlib.update_frame"], "function", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.save_to_movie"], ["", "", "def", "animate_matplotlib", "(", "positions", ",", "colors", ",", "titles", ",", "fig_title", ",", "parents", ",", "change_color_after_frame", "=", "None", ",", "color_after_change", "=", "None", ",", "overlay", "=", "False", ",", "fps", "=", "60", ",", "out_dir", "=", "None", ",", "to_video", "=", "True", ",", "fname", "=", "None", ",", "save_figs", "=", "False", ",", "interactive", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Visualize motion given 3D positions. Can visualize several motions side by side. If the sequence lengths don't\n    match, all animations are displayed until the shortest sequence length.\n    Args:\n        positions: a list of np arrays in shape (seq_length, n_joints, 3) giving the 3D positions per joint and frame\n        colors: list of color for each entry in `positions`\n        titles: list of titles for each entry in `positions`\n        fig_title: title for the entire figure\n        parents: skeleton structure\n        fps: frames per second\n        change_color_after_frame: after this frame id, the color of the plot is changed (for each entry in `positions`)\n        color_after_change: what color to apply after `change_color_after_frame`\n        overlay: if true, all entries in `positions` are plotted into the same subplot\n        out_dir: output directory where the frames and video is stored. Don't pass for interactive visualization.\n        to_video: whether to convert frames into video clip or not.\n        fname: video file name.\n    \"\"\"", "\n", "seq_length", "=", "np", ".", "amin", "(", "[", "pos", ".", "shape", "[", "0", "]", "for", "pos", "in", "positions", "]", ")", "\n", "n_joints", "=", "positions", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "pos", "=", "positions", "\n", "\n", "# create figure with as many subplots as we have skeletons", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "9", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "n_axes", "=", "1", "if", "overlay", "else", "len", "(", "pos", ")", "\n", "axes", "=", "[", "fig", ".", "add_subplot", "(", "1", ",", "n_axes", ",", "i", "+", "1", ",", "projection", "=", "'3d'", ")", "for", "i", "in", "range", "(", "n_axes", ")", "]", "\n", "fig", ".", "suptitle", "(", "fig_title", ")", "\n", "\n", "# create point object for every bone in every skeleton", "\n", "all_lines", "=", "[", "]", "\n", "# available_colors = ['b', 'r', 'g', 'c', 'm', 'y', 'k', 'w']", "\n", "for", "i", ",", "joints", "in", "enumerate", "(", "pos", ")", ":", "\n", "        ", "idx", "=", "0", "if", "overlay", "else", "i", "\n", "ax", "=", "axes", "[", "idx", "]", "\n", "# markersize=2.0", "\n", "lines_j", "=", "[", "ax", ".", "plot", "(", "joints", "[", "0", ":", "1", ",", "n", ",", "0", "]", ",", "joints", "[", "0", ":", "1", ",", "n", ",", "1", "]", ",", "joints", "[", "0", ":", "1", ",", "n", ",", "2", "]", ",", "'-o'", ",", "\n", "linewidth", "=", "4", ",", "markersize", "=", "4.0", ",", "\n", "color", "=", "colors", "[", "i", "]", ")", "[", "0", "]", "for", "n", "in", "range", "(", "1", ",", "n_joints", ")", "]", "\n", "all_lines", ".", "append", "(", "lines_j", ")", "\n", "\n", "ax", ".", "set_title", "(", "titles", "[", "i", "]", ")", "\n", "\n", "# dirty hack to get equal axes behaviour", "\n", "", "min_val", "=", "np", ".", "amin", "(", "pos", "[", "0", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "max_val", "=", "np", ".", "amax", "(", "pos", "[", "0", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "max_range", "=", "(", "max_val", "-", "min_val", ")", ".", "max", "(", ")", "\n", "Xb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "0", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "max_val", "[", "0", "]", "+", "min_val", "[", "0", "]", ")", "\n", "Yb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "1", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "max_val", "[", "1", "]", "+", "min_val", "[", "1", "]", ")", "\n", "Zb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "2", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "max_val", "[", "2", "]", "+", "min_val", "[", "2", "]", ")", "\n", "\n", "for", "ax", "in", "axes", ":", "\n", "# ax.set_aspect('equal')", "\n", "        ", "ax", ".", "axis", "(", "'off'", ")", "\n", "\n", "for", "xb", ",", "yb", ",", "zb", "in", "zip", "(", "Xb", ",", "Yb", ",", "Zb", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "[", "xb", "]", ",", "[", "yb", "]", ",", "[", "zb", "]", ",", "'w'", ")", "\n", "\n", "", "ax", ".", "view_init", "(", "elev", "=", "0", ",", "azim", "=", "-", "56", ")", "\n", "\n", "", "def", "on_move", "(", "event", ")", ":", "\n", "# find which axis triggered the event", "\n", "        ", "source_ax", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "axes", ")", ")", ":", "\n", "            ", "if", "event", ".", "inaxes", "==", "axes", "[", "i", "]", ":", "\n", "                ", "source_ax", "=", "i", "\n", "break", "\n", "\n", "# transfer rotation and zoom to all other axes", "\n", "", "", "if", "source_ax", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "axes", ")", ")", ":", "\n", "            ", "if", "i", "!=", "source_ax", ":", "\n", "                ", "axes", "[", "i", "]", ".", "view_init", "(", "elev", "=", "axes", "[", "source_ax", "]", ".", "elev", ",", "azim", "=", "axes", "[", "source_ax", "]", ".", "azim", ")", "\n", "axes", "[", "i", "]", ".", "set_xlim3d", "(", "axes", "[", "source_ax", "]", ".", "get_xlim3d", "(", ")", ")", "\n", "axes", "[", "i", "]", ".", "set_ylim3d", "(", "axes", "[", "source_ax", "]", ".", "get_ylim3d", "(", ")", ")", "\n", "axes", "[", "i", "]", ".", "set_zlim3d", "(", "axes", "[", "source_ax", "]", ".", "get_zlim3d", "(", ")", ")", "\n", "", "", "fig", ".", "canvas", ".", "draw_idle", "(", ")", "\n", "\n", "", "c1", "=", "fig", ".", "canvas", ".", "mpl_connect", "(", "'motion_notify_event'", ",", "on_move", ")", "\n", "fig_text", "=", "fig", ".", "text", "(", "0.05", ",", "0.05", ",", "''", ")", "\n", "\n", "def", "update_frame", "(", "num", ",", "positions", ",", "lines", ")", ":", "\n", "        ", "for", "l", "in", "range", "(", "len", "(", "positions", ")", ")", ":", "\n", "            ", "k", "=", "0", "\n", "pos", "=", "positions", "[", "l", "]", "\n", "points_j", "=", "lines", "[", "l", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "parents", ")", ")", ":", "\n", "                ", "a", "=", "pos", "[", "num", ",", "i", "]", "\n", "b", "=", "pos", "[", "num", ",", "parents", "[", "i", "]", "]", "\n", "p", "=", "np", ".", "vstack", "(", "[", "b", ",", "a", "]", ")", "\n", "points_j", "[", "k", "]", ".", "set_data", "(", "p", "[", ":", ",", ":", "2", "]", ".", "T", ")", "\n", "points_j", "[", "k", "]", ".", "set_3d_properties", "(", "p", "[", ":", ",", "2", "]", ".", "T", ")", "\n", "if", "change_color_after_frame", "and", "change_color_after_frame", "[", "l", "]", "and", "num", ">=", "change_color_after_frame", "[", "l", "]", ":", "\n", "                    ", "points_j", "[", "k", "]", ".", "set_color", "(", "color_after_change", ")", "\n", "", "else", ":", "\n", "                    ", "points_j", "[", "k", "]", ".", "set_color", "(", "colors", "[", "l", "]", ")", "\n", "", "k", "+=", "1", "\n", "\n", "", "", "time_passed", "=", "'{:>.2f} seconds passed'", ".", "format", "(", "1", "/", "60.0", "*", "num", ")", "\n", "fig_text", ".", "set_text", "(", "time_passed", ")", "\n", "\n", "# create the animation object, for animation to work reference to this object must be kept", "\n", "", "fargs", "=", "(", "pos", ",", "all_lines", ")", "\n", "line_ani", "=", "animation", ".", "FuncAnimation", "(", "fig", ",", "update_frame", ",", "seq_length", ",", "fargs", "=", "fargs", ",", "interval", "=", "1000", "/", "fps", ")", "\n", "\n", "if", "interactive", ":", "\n", "        ", "plt", ".", "show", "(", ")", "# interactive", "\n", "\n", "", "if", "out_dir", "is", "not", "None", ":", "\n", "        ", "save_to", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"frames\"", ")", "\n", "if", "save_figs", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_to", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "save_to", ")", "\n", "# Save frames to disk.", "\n", "", "for", "j", "in", "range", "(", "0", ",", "seq_length", ")", ":", "\n", "                ", "update_frame", "(", "j", ",", "*", "fargs", ")", "\n", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_to", ",", "'frame_{:0>4}.{}'", ".", "format", "(", "j", ",", "\"png\"", ")", ")", ")", "\n", "\n", "", "print", "(", "f'{Fore.MAGENTA}Saved frames to'", ",", "out_dir", ",", "f'{Style.RESET_ALL}'", ")", "\n", "\n", "# Create a video clip.", "\n", "", "if", "to_video", ":", "\n", "            ", "out_file", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "fname", "+", "\".mp4\"", ")", "\n", "save_to_movie", "(", "out_file", ",", "os", ".", "path", ".", "join", "(", "save_to", ",", "'frame_%04d.png'", ")", ",", "fps", "=", "fps", ")", "\n", "# Delete frames if they are not required to store.", "\n", "# shutil.rmtree(save_to)", "\n", "\n", "", "", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.save_to_movie": [[465, 496], ["open", "subprocess.Popen().wait", "open.close", "print", "str", "str", "str", "subprocess.Popen"], "function", ["None"], ["", "def", "save_to_movie", "(", "out_path", ",", "frame_path_format", ",", "fps", "=", "60", ",", "start_frame", "=", "0", ")", ":", "\n", "    ", "\"\"\"Creates an mp4 video clip by using already stored frames in png format.\n\n    Args:\n        out_path: <output-file-path>.mp4\n        frame_path_format: <path-to-frames>frame_%04d.png\n        fps:\n        start_frame:\n    Returns:\n    \"\"\"", "\n", "# create movie and save it to destination", "\n", "command", "=", "[", "'ffmpeg'", ",", "\n", "'-start_number'", ",", "str", "(", "start_frame", ")", ",", "\n", "# must be this early, otherwise it is not respected", "\n", "'-framerate'", ",", "str", "(", "fps", ")", ",", "\n", "'-r'", ",", "str", "(", "fps", "//", "2", ")", ",", "# output is 30 fps", "\n", "'-loglevel'", ",", "'panic'", ",", "\n", "'-i'", ",", "frame_path_format", ",", "\n", "'-c:v'", ",", "'libx264'", ",", "\n", "'-preset'", ",", "'slow'", ",", "\n", "'-profile:v'", ",", "'high'", ",", "\n", "'-level:v'", ",", "'4.0'", ",", "\n", "'-pix_fmt'", ",", "'yuv420p'", ",", "\n", "'-y'", ",", "\n", "out_path", "]", "\n", "\n", "fnull", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "subprocess", ".", "Popen", "(", "command", ",", "stdout", "=", "fnull", ")", ".", "wait", "(", ")", "\n", "fnull", ".", "close", "(", ")", "\n", "\n", "print", "(", "f'{Fore.MAGENTA}Saved video to'", ",", "out_path", ",", "f'{Style.RESET_ALL}'", ")", "", "", ""]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.train.Trainer.__init__": [[26, 105], ["super().__init__", "print", "utils.select_device", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "models.MotionFlowModel().to", "print", "print", "print", "models.MotionFlowModel().to.parameters", "torch.optim.Adam", "visualization.CMUForwardKinematics", "metrics.MetricsEngine", "metrics.MetricsEngine.reset", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "utils.load_state", "torch.optim.Adam.load_state_dict", "models.MotionFlowModel().to.load_state_dict", "utils.increment_path", "os.path.exists", "os.makedirs", "models.MotionFlowModel", "utils.count_parameters", "scheduler.load_state_dict", "pathlib.Path", "pathlib.Path", "pathlib.Path", "utils.load_state.get", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.select_device", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.reset", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.load_state", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.increment_path", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.count_parameters"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "print", "(", "f'{Fore.YELLOW}'", ")", "\n", "device", "=", "select_device", "(", "FLAGS", ".", "device", ",", "batch_size", "=", "FLAGS", ".", "batch_size", ")", "\n", "print", "(", "f'{Style.RESET_ALL}'", ")", "\n", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "data_dir", ",", "FLAGS", ".", "db", ")", "\n", "self", ".", "input_seq_len", "=", "FLAGS", ".", "input_seq_len", "\n", "self", ".", "target_seq_len", "=", "FLAGS", ".", "target_seq_len", "\n", "\n", "# dataset", "\n", "if", "FLAGS", ".", "dynamic_train_split", ":", "\n", "            ", "train_data_split", "=", "'training_dynamic'", "\n", "", "else", ":", "\n", "            ", "train_data_split", "=", "'training'", "\n", "\n", "", "if", "FLAGS", ".", "dynamic_val_split", ":", "\n", "            ", "val_data_split", "=", "'validation_dynamic'", "\n", "", "else", ":", "\n", "            ", "val_data_split", "=", "'validation'", "\n", "\n", "", "self", ".", "train_data_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'aa'", ",", "train_data_split", ",", "FLAGS", ".", "db", "+", "'-?????-of-?????'", ")", "\n", "self", ".", "meta_data_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'aa'", ",", "'training'", ",", "'stats.npz'", ")", "\n", "self", ".", "val_data_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'aa'", ",", "val_data_split", ",", "FLAGS", ".", "db", "+", "'-?????-of-?????'", ")", "\n", "\n", "model", "=", "MotionFlowModel", "(", "FLAGS", ")", ".", "to", "(", "device", ")", "\n", "\n", "print", "(", "f'{Fore.YELLOW}'", ")", "\n", "print", "(", "'number of param: {}'", ".", "format", "(", "count_parameters", "(", "model", ")", ")", ")", "\n", "print", "(", "f'{Style.RESET_ALL}'", ")", "\n", "\n", "params", "=", "model", ".", "parameters", "(", ")", "\n", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "FLAGS", ".", "lr", ",", "betas", "=", "FLAGS", ".", "betas", ",", "weight_decay", "=", "FLAGS", ".", "regularizer", ")", "\n", "\n", "scheduler", "=", "None", "\n", "\n", "if", "FLAGS", ".", "load_weights", ":", "\n", "            ", "latest_checkpoint", "=", "Path", "(", "FLAGS", ".", "run_dir", ")", "/", "Path", "(", "FLAGS", ".", "exp_name", ")", "/", "'checkpoints/last.pth.tar'", "\n", "cuda", "=", "False", "if", "device", "==", "'cpu'", "else", "True", "\n", "state", "=", "load_state", "(", "latest_checkpoint", ",", "cuda", ")", "\n", "optim", ".", "load_state_dict", "(", "state", "[", "'optim'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "'model'", "]", ")", "\n", "FLAGS", ".", "steps", "=", "state", "[", "'iteration'", "]", "+", "1", "\n", "FLAGS", ".", "init_epoch", "=", "state", "[", "'epoch'", "]", "+", "1", "\n", "if", "scheduler", "is", "not", "None", "and", "state", ".", "get", "(", "'scheduler'", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "scheduler", ".", "load_state_dict", "(", "state", "[", "'scheduler'", "]", ")", "\n", "", "del", "state", "\n", "\n", "# Create metrics engine", "\n", "", "target_seq_len_metric", "=", "self", ".", "input_seq_len", "\n", "fk_engine", "=", "CMUForwardKinematics", "(", ")", "\n", "metric_target_lengths", "=", "FLAGS", ".", "METRIC_TARGET_LENGTHS_CMU_25FPS", "\n", "\n", "target_lengths", "=", "[", "x", "for", "x", "in", "metric_target_lengths", "if", "x", "<=", "target_seq_len_metric", "]", "\n", "\n", "metrics_engine", "=", "MetricsEngine", "(", "fk_engine", ",", "target_lengths", ",", "rep", "=", "'aa'", ",", "which", "=", "[", "'mpjpe'", "]", ",", "force_valid_rot", "=", "True", ")", "\n", "metrics_engine", ".", "reset", "(", ")", "\n", "\n", "if", "not", "FLAGS", ".", "load_weights", ":", "\n", "            ", "log_dir", "=", "increment_path", "(", "Path", "(", "FLAGS", ".", "run_dir", ")", "/", "FLAGS", ".", "exp_name", ",", "exist_ok", "=", "FLAGS", ".", "exist_ok", ")", "\n", "", "else", ":", "\n", "            ", "log_dir", "=", "Path", "(", "FLAGS", ".", "run_dir", ")", "/", "FLAGS", ".", "exp_name", "\n", "\n", "", "checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'checkpoints'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoints_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoints_dir", ")", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "self", ".", "checkpoints_dir", "=", "checkpoints_dir", "\n", "self", ".", "metrics_engine", "=", "metrics_engine", "\n", "self", ".", "optim", "=", "optim", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "tb_writer", "=", "SummaryWriter", "(", "log_dir", "=", "log_dir", ")", "\n", "self", ".", "target_lengths", "=", "target_lengths", "\n", "self", ".", "fk_engine", "=", "fk_engine", "\n", "self", ".", "global_step", "=", "FLAGS", ".", "steps", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.train.Trainer.train": [[106, 201], ["range", "datasets.TFRecordMotionDataset", "datasets.TFRecordMotionDataset", "range", "train.Trainer.model.train", "print", "datasets.TFRecordMotionDataset.get_tf_samples", "len", "enumerate", "tqdm.tqdm.tqdm", "float", "print", "train.Trainer.model.eval", "train.Trainer.validation", "train.Trainer.metrics_engine.get_final_metrics", "train.Trainer.metrics_engine.get_summary_string_all", "print", "train.Trainer.metrics_engine.reset", "print", "utils.save_model", "train.Trainer.optim.zero_grad", "torch.tensor().to", "train.Trainer.model", "torch.mean", "train.Trainer.model.zero_grad", "train.Trainer.optim.zero_grad", "torch.mean.backward", "train.Trainer.optim.step", "torch.mean.item", "tqdm.tqdm.tqdm.set_description", "train.Trainer.scheduler.step", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_norm_", "float", "action.decode().split", "torch.tensor", "train.Trainer.model.parameters", "train.Trainer.model.parameters", "action.decode"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.train", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.get_tf_samples", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.validation", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.get_final_metrics", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.get_summary_string_all", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.reset", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.save_model", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking._locally_masked_conv2d.backward", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlow.decode"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "train_data_path", "=", "self", ".", "train_data_path", "\n", "val_data_path", "=", "self", ".", "val_data_path", "\n", "meta_data_path", "=", "self", ".", "meta_data_path", "\n", "checkpoints_dir", "=", "self", ".", "checkpoints_dir", "\n", "\n", "input_seq_len", "=", "self", ".", "input_seq_len", "\n", "target_seq_len", "=", "self", ".", "target_seq_len", "\n", "windows_size", "=", "(", "input_seq_len", "+", "target_seq_len", ")", "*", "2", "\n", "inds", "=", "range", "(", "0", ",", "(", "input_seq_len", "+", "target_seq_len", ")", "*", "2", ",", "2", ")", "\n", "\n", "train_data", "=", "TFRecordMotionDataset", "(", "data_path", "=", "train_data_path", ",", "meta_data_path", "=", "meta_data_path", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "windows_size", "=", "windows_size", ",", "window_type", "=", "'random'", ",", "\n", "num_parallel_calls", "=", "1", ",", "normalize", "=", "FLAGS", ".", "normalize", ")", "\n", "\n", "val_data", "=", "TFRecordMotionDataset", "(", "data_path", "=", "val_data_path", ",", "meta_data_path", "=", "meta_data_path", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "windows_size", "=", "input_seq_len", "*", "4", ",", "window_type", "=", "'random'", ",", "\n", "num_parallel_calls", "=", "1", ",", "normalize", "=", "FLAGS", ".", "normalize", ")", "\n", "\n", "for", "self", ".", "epoch", "in", "range", "(", "FLAGS", ".", "init_epoch", ",", "FLAGS", ".", "num_epochs", ")", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "print", "(", "f'{Fore.YELLOW}'", ",", "'Training on {}. Epoch/batch_size/device/lr: {}/{}/{}/{}'", ".", "format", "(", "\n", "FLAGS", ".", "db", ",", "self", ".", "epoch", ",", "FLAGS", ".", "batch_size", ",", "device", ",", "FLAGS", ".", "lr", ")", ",", "f'{Style.RESET_ALL}'", ")", "\n", "\n", "train_samples", "=", "train_data", ".", "get_tf_samples", "(", ")", "\n", "nb", "=", "len", "(", "train_data", ")", "\n", "pbar", "=", "enumerate", "(", "train_samples", ")", "\n", "pbar", "=", "tqdm", "(", "pbar", ",", "total", "=", "nb", ",", "bar_format", "=", "'{l_bar}{bar:50}{r_bar}{bar:-10b}'", ")", "# progress bar", "\n", "\n", "epoch_loss", "=", "0.0", "\n", "\n", "for", "_", ",", "batch", "in", "pbar", ":", "\n", "                ", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "act", "=", "batch", "[", "'id'", "]", "\n", "act", "=", "[", "action", ".", "decode", "(", "'utf-8'", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "action", "in", "act", "]", "\n", "inputs", "=", "batch", "[", "'inputs'", "]", "[", ":", ",", "inds", ",", ":", "]", "\n", "ids", "=", "[", "action", "in", "[", "'walking'", ",", "'basketball'", "]", "for", "action", "in", "act", "]", "\n", "inputs", "=", "inputs", "[", "ids", "]", "\n", "\n", "if", "inputs", ".", "shape", "[", "0", "]", "<=", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "y", "=", "torch", ".", "tensor", "(", "inputs", ")", ".", "to", "(", "device", ")", "\n", "x", "=", "y", "[", ":", ",", ":", "input_seq_len", "]", "\n", "y", "=", "y", "[", ":", ",", "input_seq_len", ":", "]", "\n", "\n", "_", ",", "nll", "=", "self", ".", "model", "(", "x", ",", "y", ")", "\n", "\n", "loss", "=", "torch", ".", "mean", "(", "nll", ")", "\n", "\n", "# backward", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# operate grad", "\n", "if", "FLAGS", ".", "max_grad_clip", ">", "0", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_value_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "FLAGS", ".", "max_grad_clip", ")", "\n", "", "if", "FLAGS", ".", "max_grad_norm", ">", "0", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "FLAGS", ".", "max_grad_norm", ")", "\n", "\n", "", "self", ".", "optim", ".", "step", "(", ")", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "pbar", ".", "set_description", "(", "'Iter/Epoch:{}/{}  Loss:{:.5f}'", ".", "format", "(", "self", ".", "global_step", ",", "self", ".", "epoch", ",", "loss", ".", "data", ")", ")", "\n", "self", ".", "global_step", "+=", "1", "\n", "\n", "", "if", "self", ".", "scheduler", "is", "not", "None", ":", "\n", "                ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "epoch_loss", "=", "float", "(", "epoch_loss", "/", "float", "(", "nb", ")", ")", "\n", "\n", "print", "(", "f'{Fore.YELLOW}Validation is starting ... {Style.RESET_ALL}'", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "val_loss", "=", "self", ".", "validation", "(", "val_data", ")", "\n", "\n", "self", ".", "metrics_engine", ".", "train_loss", "=", "epoch_loss", "\n", "self", ".", "metrics_engine", ".", "val_loss", "=", "val_loss", "\n", "final_metrics", "=", "self", ".", "metrics_engine", ".", "get_final_metrics", "(", ")", "\n", "\n", "s", "=", "self", ".", "metrics_engine", ".", "get_summary_string_all", "(", "final_metrics", ",", "self", ".", "target_lengths", ",", "\n", "at_mode", "=", "True", ",", "tb_writer", "=", "self", ".", "tb_writer", ",", "\n", "step", "=", "self", ".", "epoch", ",", "training", "=", "True", ",", "\n", "train_loss", "=", "epoch_loss", ",", "val_loss", "=", "val_loss", ")", "\n", "print", "(", "f'{Fore.GREEN}'", ",", "s", ",", "f'{Style.RESET_ALL}'", ")", "\n", "\n", "self", ".", "metrics_engine", ".", "reset", "(", ")", "\n", "\n", "print", "(", "f'{Fore.YELLOW}Validation finished!{Style.RESET_ALL}'", ")", "\n", "\n", "save_model", "(", "self", ".", "model", ",", "self", ".", "optim", ",", "self", ".", "scheduler", ",", "checkpoints_dir", ",", "self", ".", "global_step", ",", "self", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.train.Trainer.validation": [[203, 244], ["range", "val_data.get_tf_samples", "len", "enumerate", "tqdm.tqdm.tqdm", "float", "torch.no_grad", "torch.tensor().to", "train.Trainer.model", "torch.tensor().to.cpu().numpy", "sample.cpu().numpy", "val_data.unnormalize_zero_mean_unit_variance_channel", "val_data.unnormalize_zero_mean_unit_variance_channel", "train.Trainer.metrics_engine.compute_and_aggregate", "tqdm.tqdm.tqdm.set_description", "float", "torch.mean", "action.decode().split", "torch.tensor", "torch.tensor().to.cpu", "sample.cpu", "action.decode"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.get_tf_samples", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.unnormalize_zero_mean_unit_variance_channel", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.unnormalize_zero_mean_unit_variance_channel", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.compute_and_aggregate", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlow.decode"], ["", "", "def", "validation", "(", "self", ",", "val_data", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "input_seq_len", "=", "self", ".", "input_seq_len", "\n", "target_seq_len", "=", "self", ".", "target_seq_len", "\n", "inds", "=", "range", "(", "0", ",", "input_seq_len", "*", "4", ",", "2", ")", "\n", "val_samples", "=", "val_data", ".", "get_tf_samples", "(", ")", "\n", "val_loss", "=", "0.0", "\n", "\n", "nb", "=", "len", "(", "val_data", ")", "\n", "pbar", "=", "enumerate", "(", "val_samples", ")", "\n", "pbar", "=", "tqdm", "(", "pbar", ",", "total", "=", "nb", ",", "bar_format", "=", "'{l_bar}{bar:50}{r_bar}{bar:-10b}'", ")", "# progress bar", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "bi", ",", "batch", "in", "pbar", ":", "\n", "                ", "act", "=", "batch", "[", "'id'", "]", "\n", "act", "=", "[", "action", ".", "decode", "(", "'utf-8'", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "action", "in", "act", "]", "\n", "inputs", "=", "batch", "[", "'inputs'", "]", "[", ":", ",", "inds", ",", ":", "]", "\n", "ids", "=", "[", "action", "in", "[", "'walking'", ",", "'basketball'", "]", "for", "action", "in", "act", "]", "\n", "inputs", "=", "inputs", "[", "ids", "]", "\n", "\n", "if", "inputs", ".", "shape", "[", "0", "]", "<=", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "y", "=", "torch", ".", "tensor", "(", "inputs", ")", ".", "to", "(", "device", ")", "\n", "x", "=", "y", "[", ":", ",", ":", "input_seq_len", "]", "\n", "y", "=", "y", "[", ":", ",", "input_seq_len", ":", "]", "\n", "\n", "sample", ",", "nll", "=", "self", ".", "model", "(", "x", ",", "y", "=", "None", ",", "reverse", "=", "True", ")", "\n", "val_loss", "+=", "torch", ".", "mean", "(", "nll", ")", ".", "data", "\n", "gt_motion", "=", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_motion", "=", "sample", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred_motion", "=", "val_data", ".", "unnormalize_zero_mean_unit_variance_channel", "(", "{", "'poses'", ":", "pred_motion", "}", ",", "'poses'", ")", "\n", "gt_motion", "=", "val_data", ".", "unnormalize_zero_mean_unit_variance_channel", "(", "{", "'poses'", ":", "gt_motion", "}", ",", "'poses'", ")", "\n", "self", ".", "metrics_engine", ".", "compute_and_aggregate", "(", "pred_motion", "[", "'poses'", "]", ",", "gt_motion", "[", "'poses'", "]", ")", "\n", "\n", "pbar", ".", "set_description", "(", "'Validation/Epoch: {}'", ".", "format", "(", "self", ".", "epoch", ")", ")", "\n", "\n", "", "", "mean_val_loss", "=", "float", "(", "val_loss", "/", "float", "(", "nb", ")", ")", "\n", "\n", "return", "mean_val_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.train.main": [[246, 249], ["train.Trainer", "Trainer.train"], "function", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.train"], ["", "", "def", "main", "(", "_", ")", ":", "\n", "    ", "trainer", "=", "Trainer", "(", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.evaluation.evaluate_model": [[25, 102], ["dict", "metrics_engine.reset", "range", "test_data.get_tf_samples", "len", "enumerate", "tqdm.tqdm", "torch.no_grad", "dict.keys", "enumerate", "torch.tensor().to", "torch.tensor().to.cpu().numpy", "torch.mean.cpu().numpy", "test_data.unnormalize_zero_mean_unit_variance_channel", "test_data.unnormalize_zero_mean_unit_variance_channel", "test_data.unnormalize_zero_mean_unit_variance_channel", "range", "tqdm.tqdm.set_description", "metrics_engine.reset", "range", "metrics_engine.get_final_metrics", "list", "range", "torch.stack", "torch.mean", "model", "eval_result[].append", "len", "numpy.expand_dims", "numpy.expand_dims", "metrics_engine.compute_and_aggregate", "action.decode().split", "torch.tensor", "model", "model", "list.append", "torch.tensor().to.cpu", "torch.mean.cpu", "data_id[].decode().split", "dict.keys", "action.decode", "data_id[].decode"], "function", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.reset", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.get_tf_samples", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.unnormalize_zero_mean_unit_variance_channel", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.unnormalize_zero_mean_unit_variance_channel", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.TFRecordMotionDataset.unnormalize_zero_mean_unit_variance_channel", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.reset", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.get_final_metrics", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.compute_and_aggregate", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlow.decode", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlow.decode"], ["def", "evaluate_model", "(", "test_data", ",", "model", ",", "metrics_engine", ",", "device", ")", ":", "\n", "# make a full pass on the validation or test dataset and compute the metrics", "\n", "    ", "eval_result", "=", "dict", "(", ")", "\n", "metrics_engine", ".", "reset", "(", ")", "\n", "\n", "input_seq_len", "=", "FLAGS", ".", "input_seq_len", "\n", "inds", "=", "range", "(", "0", ",", "input_seq_len", "*", "4", ",", "2", ")", "\n", "\n", "test_samples", "=", "test_data", ".", "get_tf_samples", "(", ")", "\n", "nb", "=", "len", "(", "test_data", ")", "\n", "pbar", "=", "enumerate", "(", "test_samples", ")", "\n", "pbar", "=", "tqdm", "(", "pbar", ",", "total", "=", "nb", ",", "bar_format", "=", "'{l_bar}{bar:50}{r_bar}{bar:-10b}'", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", ",", "batch", "in", "pbar", ":", "\n", "            ", "act", "=", "batch", "[", "'id'", "]", "\n", "act", "=", "[", "action", ".", "decode", "(", "'utf-8'", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "action", "in", "act", "]", "\n", "inputs", "=", "batch", "[", "'inputs'", "]", "[", ":", ",", "inds", ",", ":", "]", "\n", "ids", "=", "[", "action", "in", "[", "'basketball'", ",", "'walking'", "]", "for", "action", "in", "act", "]", "\n", "ids_basketball", "=", "[", "action", "in", "[", "'basketball'", "]", "for", "action", "in", "act", "]", "\n", "ids_walking", "=", "[", "action", "in", "[", "'walking'", "]", "for", "action", "in", "act", "]", "\n", "inputs", "=", "inputs", "[", "ids", "]", "\n", "data_id", "=", "batch", "[", "'id'", "]", "\n", "data_id", "=", "data_id", "[", "ids", "]", "\n", "\n", "if", "inputs", ".", "shape", "[", "0", "]", "<=", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "seed_sequence", "=", "inputs", "[", ":", ",", ":", "input_seq_len", ",", ":", "]", "\n", "\n", "y", "=", "torch", ".", "tensor", "(", "inputs", ")", ".", "to", "(", "device", ")", "\n", "x", "=", "y", "[", ":", ",", ":", "input_seq_len", "]", "\n", "y", "=", "y", "[", ":", ",", "input_seq_len", ":", "]", "\n", "\n", "if", "FLAGS", ".", "num_samples", ">", "1", ":", "\n", "# sampled_based_prediction", "\n", "                ", "sample_list", "=", "list", "(", ")", "\n", "for", "_", "in", "range", "(", "FLAGS", ".", "num_samples", ")", ":", "\n", "                    ", "y_sample", ",", "_", "=", "model", "(", "x", ",", "y", "=", "None", ",", "reverse", "=", "True", ")", "\n", "model", "(", "x", ",", "y_sample", ")", "\n", "sample_list", ".", "append", "(", "y_sample", ")", "\n", "", "sample_i", "=", "torch", ".", "stack", "(", "sample_list", ")", "\n", "sample", "=", "torch", ".", "mean", "(", "sample_i", ",", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "\n", "###", "\n", "", "else", ":", "\n", "                ", "sample", ",", "_", "=", "model", "(", "x", ",", "y", "=", "None", ",", "reverse", "=", "True", ")", "\n", "\n", "", "gt_motion", "=", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_motion", "=", "sample", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred_motion", "=", "test_data", ".", "unnormalize_zero_mean_unit_variance_channel", "(", "{", "\"poses\"", ":", "pred_motion", "}", ",", "\"poses\"", ")", "\n", "gt_motion", "=", "test_data", ".", "unnormalize_zero_mean_unit_variance_channel", "(", "{", "\"poses\"", ":", "gt_motion", "}", ",", "\"poses\"", ")", "\n", "seed", "=", "test_data", ".", "unnormalize_zero_mean_unit_variance_channel", "(", "{", "\"poses\"", ":", "seed_sequence", "}", ",", "\"poses\"", ")", "\n", "# Store each test sample and corresponding predictions with the unique sample IDs.", "\n", "for", "i", "in", "range", "(", "pred_motion", "[", "'poses'", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "seq_name", "=", "data_id", "[", "i", "]", ".", "decode", "(", "'utf-8'", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "seq_name", "not", "in", "eval_result", ".", "keys", "(", ")", ":", "\n", "                    ", "eval_result", "[", "seq_name", "]", "=", "[", "]", "\n", "", "eval_result", "[", "seq_name", "]", ".", "append", "(", "(", "seed", "[", "'poses'", "]", "[", "i", "]", ",", "pred_motion", "[", "'poses'", "]", "[", "i", "]", ",", "gt_motion", "[", "'poses'", "]", "[", "i", "]", ")", ")", "\n", "\n", "", "pbar", ".", "set_description", "(", "'Processing sequence: {}'", ".", "format", "(", "seq_name", ")", ")", "\n", "\n", "# finalize the computation of the metrics", "\n", "", "final_metrics", "=", "{", "}", "\n", "seq_names", "=", "eval_result", ".", "keys", "(", ")", "\n", "for", "_", ",", "k", "in", "enumerate", "(", "seq_names", ")", ":", "\n", "            ", "metrics_engine", ".", "reset", "(", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "eval_result", "[", "k", "]", ")", ")", ":", "\n", "                ", "pred", "=", "eval_result", "[", "k", "]", "[", "idx", "]", "[", "1", "]", "\n", "gt", "=", "eval_result", "[", "k", "]", "[", "idx", "]", "[", "2", "]", "\n", "pred", "=", "np", ".", "expand_dims", "(", "pred", ",", "axis", "=", "0", ")", "\n", "gt", "=", "np", ".", "expand_dims", "(", "gt", ",", "axis", "=", "0", ")", "\n", "\n", "metrics_engine", ".", "compute_and_aggregate", "(", "pred", ",", "gt", ")", "\n", "", "final_metrics", "[", "k", "]", "=", "metrics_engine", ".", "get_final_metrics", "(", ")", "\n", "\n", "", "", "return", "final_metrics", ",", "eval_result", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.evaluation.main": [[106, 178], ["print", "utils.select_device", "print", "os.path.join", "models.MotionFlowModel().to", "utils.load_state", "MotionFlowModel().to.load_state_dict", "os.path.join", "os.path.join", "print", "datasets.TFRecordMotionDataset", "print", "visualization.CMUForwardKinematics", "metrics.MetricsEngine", "metrics.MetricsEngine.reset", "print", "evaluation.evaluate_model", "final_metrics.keys", "enumerate", "os.path.isdir", "os.mkdir", "metrics.MetricsEngine.get_summary_string_all", "print", "print", "visualization.Visualizer", "print", "eval_result.keys", "enumerate", "pathlib.Path", "models.MotionFlowModel", "pathlib.Path", "str", "torch.randint", "len", "visualization.Visualizer.visualize_results", "str"], "function", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.select_device", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.load_state", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.reset", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.evaluation.evaluate_model", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.metrics.MetricsEngine.get_summary_string_all", "home.repos.pwc.inspect_result.mohsenzand_motionflow.motion.visualization.Visualizer.visualize_results"], ["", "def", "main", "(", "_argv", ")", ":", "\n", "    ", "print", "(", "f'{Fore.YELLOW}'", ")", "\n", "device", "=", "select_device", "(", "FLAGS", ".", "device", ",", "batch_size", "=", "FLAGS", ".", "batch_size", ")", "\n", "print", "(", "f'{Style.RESET_ALL}'", ")", "\n", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "data_dir", ",", "FLAGS", ".", "db", ")", "\n", "eval_dir", "=", "Path", "(", "FLAGS", ".", "run_dir", ")", "/", "FLAGS", ".", "exp_name", "/", "'test'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "eval_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "eval_dir", ")", "\n", "\n", "", "model", "=", "MotionFlowModel", "(", "FLAGS", ")", ".", "to", "(", "device", ")", "\n", "\n", "latest_checkpoint", "=", "Path", "(", "FLAGS", ".", "run_dir", ")", "/", "FLAGS", ".", "exp_name", "/", "'checkpoints/last.pth.tar'", "\n", "\n", "state", "=", "load_state", "(", "latest_checkpoint", ",", "cuda", "=", "False", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "\"model\"", "]", ")", "\n", "del", "state", "\n", "\n", "if", "FLAGS", ".", "dynamic_test_split", ":", "\n", "        ", "data_split", "=", "\"test_dynamic\"", "\n", "", "else", ":", "\n", "        ", "data_split", "=", "\"test\"", "\n", "\n", "", "test_data_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'aa'", ",", "data_split", ",", "FLAGS", ".", "db", "+", "'-?????-of-?????'", ")", "\n", "meta_data_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'aa'", ",", "\"training\"", ",", "\"stats.npz\"", ")", "\n", "\n", "print", "(", "\"Loading test data from \"", "+", "test_data_path", ")", "\n", "\n", "# Create dataset.", "\n", "test_data", "=", "TFRecordMotionDataset", "(", "data_path", "=", "test_data_path", ",", "meta_data_path", "=", "meta_data_path", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "windows_size", "=", "FLAGS", ".", "input_seq_len", "*", "4", ",", "window_type", "=", "'from_beginning'", ",", "\n", "num_parallel_calls", "=", "1", ",", "normalize", "=", "FLAGS", ".", "normalize", ")", "\n", "\n", "print", "(", "\"Evaluating Model \"", "+", "str", "(", "latest_checkpoint", ")", ")", "\n", "\n", "# Create metrics engine", "\n", "target_seq_len_metric", "=", "FLAGS", ".", "input_seq_len", "\n", "\n", "fk_engine", "=", "CMUForwardKinematics", "(", ")", "\n", "metric_target_lengths", "=", "FLAGS", ".", "METRIC_TARGET_LENGTHS_CMU_25FPS", "\n", "target_lengths", "=", "[", "x", "for", "x", "in", "metric_target_lengths", "if", "x", "<=", "target_seq_len_metric", "]", "\n", "metrics_engine", "=", "MetricsEngine", "(", "fk_engine", ",", "target_lengths", ",", "rep", "=", "'aa'", ",", "which", "=", "[", "'mpjpe'", "]", ",", "force_valid_rot", "=", "True", ")", "\n", "metrics_engine", ".", "reset", "(", ")", "\n", "\n", "print", "(", "\"Evaluating test set...\"", ")", "\n", "\n", "final_metrics", ",", "eval_result", "=", "evaluate_model", "(", "test_data", ",", "model", ",", "metrics_engine", ",", "device", ")", "\n", "\n", "seq_names", "=", "final_metrics", ".", "keys", "(", ")", "\n", "for", "_", ",", "k", "in", "enumerate", "(", "seq_names", ")", ":", "\n", "        ", "test_metric", "=", "final_metrics", "[", "k", "]", "\n", "s", "=", "metrics_engine", ".", "get_summary_string_all", "(", "test_metric", ",", "target_lengths", ",", "at_mode", "=", "True", ",", "\n", "tb_writer", "=", "None", ",", "step", "=", "0", ",", "training", "=", "False", ",", "\n", "train_loss", "=", "None", ",", "val_loss", "=", "None", ")", "\n", "\n", "print", "(", "'********'", ",", "k", ",", "'********'", ",", "s", ")", "\n", "print", "(", ")", "\n", "\n", "", "if", "FLAGS", ".", "visualize", ":", "\n", "        ", "visualizer", "=", "Visualizer", "(", "interactive", "=", "FLAGS", ".", "interactive", ",", "fk_engine", "=", "fk_engine", ",", "rep", "=", "'aa'", ",", "\n", "output_dir", "=", "eval_dir", ",", "to_video", "=", "FLAGS", ".", "to_video", ",", "save_figs", "=", "FLAGS", ".", "save_figs", ")", "\n", "\n", "print", "(", "f'{Fore.YELLOW}Visualizing some samples...{Style.RESET_ALL}'", ")", "\n", "\n", "seq_names", "=", "eval_result", ".", "keys", "(", ")", "\n", "for", "_", ",", "k", "in", "enumerate", "(", "seq_names", ")", ":", "\n", "            ", "randint", "=", "torch", ".", "randint", "(", "1", ",", "len", "(", "eval_result", "[", "k", "]", ")", ",", "(", "10", ",", ")", ")", "\n", "for", "idx", "in", "randint", ":", "\n", "                ", "visualizer", ".", "visualize_results", "(", "\n", "eval_result", "[", "k", "]", "[", "idx", "]", "[", "0", "]", ",", "eval_result", "[", "k", "]", "[", "idx", "]", "[", "1", "]", ",", "eval_result", "[", "k", "]", "[", "idx", "]", "[", "2", "]", ",", "title", "=", "k", "+", "'_'", "+", "str", "(", "idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlowModel.__init__": [[17, 29], ["torch.Module.__init__", "models.MotionFlow", "models.NNTheta", "models.MotionFlowModel.register_parameter", "models.MotionFlowModel.register_parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "learn_top", "=", "args", ".", "learn_top", "\n", "self", ".", "n_bins", "=", "2", "\n", "self", ".", "seq_size_x", "=", "args", ".", "x_size", "\n", "self", ".", "seq_size_y", "=", "args", ".", "y_size", "\n", "self", ".", "residual", "=", "args", ".", "residual", "\n", "self", ".", "pred_length", "=", "args", ".", "pred_length", "\n", "\n", "self", ".", "flow", "=", "MotionFlow", "(", "args", ")", "\n", "self", ".", "nn_theta", "=", "NNTheta", "(", "encoder_ch_in", "=", "self", ".", "seq_size_y", "[", "0", "]", "*", "2", ",", "encoder_mode", "=", "'conv_net'", ",", "h_ch_in", "=", "self", ".", "seq_size_y", "[", "0", "]", ",", "num_blocks", "=", "5", ")", "\n", "self", ".", "register_parameter", "(", "\"new_mean\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "flow", ".", "output_shapes", "[", "-", "1", "]", "[", "1", "]", ",", "self", ".", "flow", ".", "output_shapes", "[", "-", "1", "]", "[", "2", "]", ",", "self", ".", "flow", ".", "output_shapes", "[", "-", "1", "]", "[", "3", "]", "]", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlowModel.forward": [[30, 61], ["x.size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "float", "models.MotionFlowModel.prior", "y.permute.permute.permute().contiguous", "models.MotionFlowModel.flow", "models.GaussianDiag.logp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "float", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.log", "y.permute.permute.permute", "models.GaussianDiag.batchsample", "models.MotionFlowModel.flow", "y.permute.permute.permute", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlowModel.prior", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.logp", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.batchsample"], ["self", ".", "register_parameter", "(", "\"new_logs\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "flow", ".", "output_shapes", "[", "-", "1", "]", "[", "1", "]", ",", "self", ".", "flow", ".", "output_shapes", "[", "-", "1", "]", "[", "2", "]", ",", "self", ".", "flow", ".", "output_shapes", "[", "-", "1", "]", "[", "3", "]", "]", ")", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ",", "eps_std", "=", "1.0", ",", "reverse", "=", "False", ",", "device", "=", "None", ")", ":", "\n", "        ", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "s1", ",", "s2", ",", "s3", "=", "self", ".", "seq_size_x", "\n", "s1y", ",", "s2y", ",", "s3y", "=", "self", ".", "seq_size_y", "\n", "\n", "dimensions", "=", "s1y", "*", "s2y", "*", "s3y", "\n", "logdet", "=", "torch", ".", "zeros", "(", "B", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "logdet", "+=", "float", "(", "-", "np", ".", "log", "(", "self", ".", "n_bins", ")", "*", "dimensions", ")", "\n", "mean", ",", "logs", "=", "self", ".", "prior", "(", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "s2", ",", "s3", ",", "s1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "reverse", "==", "False", ":", "\n", "            ", "y", "=", "[", "y", "[", ":", ",", "i", ":", "i", "+", "1", "]", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "1", "]", ")", "]", "\n", "\n", "nll", "=", "0.0", "\n", "objective", "=", "0.0", "\n", "z", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "                ", "yi", "=", "y", "[", "i", "]", "\n", "\n", "yi", "=", "yi", ".", "view", "(", "B", ",", "s2y", ",", "s1y", ",", "s3y", ")", "\n", "yi", "=", "yi", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "self", ".", "residual", ":", "\n", "                    ", "y_dif", "=", "yi", "-", "x", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "zi", ",", "logdet", "=", "self", ".", "flow", "(", "x", ",", "y_dif", ",", "logdet", "=", "logdet", ",", "reverse", "=", "False", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlowModel.prior": [[62, 67], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["                    ", "zi", ",", "logdet", "=", "self", ".", "flow", "(", "x", ",", "yi", ",", "logdet", "=", "logdet", ",", "reverse", "=", "False", ")", "\n", "\n", "", "z", ".", "append", "(", "zi", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", "[", ":", ",", ":", ",", "1", ":", "]", ",", "yi", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlow.__init__": [[71, 92], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "masking.mask_param", "range", "models.x_convs", "models.MotionFlow.layers.append", "models.MotionFlow.output_shapes.append", "models.structuredGlowStep"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.mask_param"], ["objective", "+=", "GaussianDiag", ".", "logp", "(", "mu", ",", "logsigma", ",", "z", "[", "1", "]", ")", "\n", "\n", "mu", ",", "logsigma", "=", "self", ".", "nn_theta", "(", "z", "[", "1", "]", ",", "z", "[", "2", "]", ")", "\n", "objective", "+=", "GaussianDiag", ".", "logp", "(", "mu", ",", "logsigma", ",", "z", "[", "2", "]", ")", "\n", "\n", "objective", "+=", "logdet", "\n", "nll", "=", "-", "objective", "/", "float", "(", "np", ".", "log", "(", "2.", ")", "*", "dimensions", ")", "\n", "\n", "z_out", "=", "zi", ".", "clone", "(", ")", "\n", "\n", "return", "z_out", ",", "nll", "\n", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "reverse", ":", "\n", "                    ", "ys", "=", "[", "]", "\n", "eps_std", "=", "0.006", "\n", "z", "=", "[", "]", "\n", "z_init", "=", "GaussianDiag", ".", "batchsample", "(", "B", ",", "mean", ",", "logs", ",", "eps_std", ")", "\n", "\n", "y0", "=", "x", "[", ":", ",", ":", ",", "-", "2", ":", "-", "1", "]", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "y1", "=", "x", "[", ":", ",", ":", ",", "-", "1", ":", "]", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlow.forward": [[94, 99], ["models.MotionFlow.encode", "models.MotionFlow.decode"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlow.encode", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlow.decode"], ["x1", "=", "torch", ".", "cat", "(", "(", "x", "[", ":", ",", ":", ",", ":", "1", "]", ",", "x", "[", ":", ",", ":", ",", ":", "-", "1", "]", ")", ",", "dim", "=", "2", ")", "\n", "if", "self", ".", "residual", ":", "\n", "                        ", "y_dif", "=", "y0", "-", "x0", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "y_dif", "=", "y1", "-", "x1", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "z1", ",", "logdet_i", "=", "self", ".", "flow", "(", "x1", ",", "y_dif", ",", "logdet", "=", "logdet", ",", "reverse", "=", "False", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlow.encode": [[100, 105], ["models.MotionFlow.x_convs", "zip", "layer"], "methods", ["None"], ["                        ", "z0", ",", "logdet_i", "=", "self", ".", "flow", "(", "x0", ",", "y0", ",", "logdet", "=", "logdet", ",", "reverse", "=", "False", ")", "\n", "z1", ",", "logdet_i", "=", "self", ".", "flow", "(", "x1", ",", "y1", ",", "logdet", "=", "logdet", ",", "reverse", "=", "False", ")", "\n", "\n", "", "z", ".", "append", "(", "z1", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "pred_length", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.MotionFlow.decode": [[106, 111], ["models.MotionFlow.x_convs", "reversed", "layer"], "methods", ["None"], ["                        ", "mu", ",", "logsigma", "=", "self", ".", "nn_theta", "(", "z", "[", "i", "]", ",", "z_init", ")", "\n", "zi", "=", "GaussianDiag", ".", "sample", "(", "mu", ",", "logsigma", ",", "eps_std", ")", "\n", "logdet", "+=", "logdet_i", "\n", "if", "self", ".", "residual", ":", "\n", "                            ", "y_dif", ",", "logdet_i", "=", "self", ".", "flow", "(", "x", ",", "zi", ",", "eps_std", "=", "eps_std", ",", "reverse", "=", "True", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.x_convs.__init__": [[115, 145], ["torch.Module.__init__", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "models.LinearZeros", "masking.concat_elu", "models.LinearZeros", "masking.concat_elu"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["\n", "if", "self", ".", "residual", ":", "\n", "                            ", "yi", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "[", ":", ",", ":", ",", "-", "1", ":", "]", "+", "y_dif", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "(", "x", "[", ":", ",", ":", ",", "1", ":", "]", ",", "yi", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "ys", ".", "append", "(", "yi", ")", "\n", "\n", "", "y", "=", "torch", ".", "cat", "(", "ys", ",", "dim", "=", "2", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "B", ",", "self", ".", "pred_length", ",", "-", "1", ")", "\n", "\n", "", "", "return", "y", ",", "logdet", "\n", "\n", "", "", "def", "prior", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "learn_top", ":", "\n", "            ", "return", "self", ".", "new_mean", ",", "self", ".", "new_logs", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "zeros_like", "(", "self", ".", "new_mean", ")", ",", "torch", ".", "zeros_like", "(", "self", ".", "new_mean", ")", "\n", "\n", "\n", "################################", "\n", "", "", "", "class", "MotionFlow", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "output_shapes", "=", "[", "]", "\n", "x_size", "=", "args", ".", "x_size", "\n", "y_size", "=", "args", ".", "y_size", "\n", "x_hidden_channels", "=", "args", ".", "x_hidden_channels", "\n", "x_hidden_size", "=", "args", ".", "x_hidden_size", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.x_convs.forward": [[146, 169], ["torch.cat.size", "torch.cat.size", "torch.cat.size", "models.x_convs.x_Con_1", "models.x_convs.x_Con_2", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "masking.pono", "torch.cat.view", "torch.cat.view", "torch.cat.view", "models.x_convs.x_Linear", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "int", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.pono"], ["y_hidden_channels", "=", "args", ".", "y_hidden_channels", "\n", "K", "=", "args", ".", "flow_depth", "\n", "\n", "all_masks", ",", "params", "=", "mask_param", "(", "x_size", ",", "args", ")", "\n", "\n", "C", ",", "H", ",", "W", "=", "y_size", "\n", "\n", "# K CGlowStep", "\n", "for", "k", "in", "range", "(", "0", ",", "K", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "structuredGlowStep", "(", "x_size", "=", "x_size", ",", "y_size", "=", "y_size", ",", "x_hidden_channels", "=", "x_hidden_channels", ",", "x_hidden_size", "=", "x_hidden_size", ",", "y_hidden_channels", "=", "y_hidden_channels", ",", "masks", "=", "all_masks", ",", "params", "=", "params", ")", ")", "\n", "self", ".", "output_shapes", ".", "append", "(", "[", "-", "1", ",", "C", ",", "H", ",", "W", "]", ")", "\n", "\n", "", "self", ".", "x_convs", "=", "x_convs", "(", "x_size", "=", "x_size", ",", "y_size", "=", "y_size", ",", "x_hidden_channels", "=", "x_hidden_channels", ",", "x_hidden_size", "=", "x_hidden_size", ",", "y_hidden_channels", "=", "y_hidden_channels", ",", "masks", "=", "all_masks", ",", "params", "=", "params", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "logdet", "=", "0.0", ",", "reverse", "=", "False", ",", "eps_std", "=", "1.0", ")", ":", "\n", "        ", "if", "reverse", "==", "False", ":", "\n", "            ", "return", "self", ".", "encode", "(", "x", ",", "y", ",", "logdet", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "decode", "(", "x", ",", "y", ",", "logdet", ",", "eps_std", ")", "\n", "\n", "", "", "def", "encode", "(", "self", ",", "x", ",", "y", ",", "logdet", "=", "0.0", ")", ":", "\n", "        ", "x_actnorm", ",", "x_invconv", "=", "self", ".", "x_convs", "(", "x", ")", "\n", "for", "layer", ",", "shape", "in", "zip", "(", "self", ".", "layers", ",", "self", ".", "output_shapes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.structuredGlowStep.__init__": [[173, 182], ["torch.Module.__init__", "models.CondActNorm", "models.Cond1x1Conv", "models.CondAffineCoupling"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["", "def", "decode", "(", "self", ",", "x", ",", "y", ",", "logdet", "=", "0.0", ",", "eps_std", "=", "1.0", ")", ":", "\n", "        ", "x_actnorm", ",", "x_invconv", "=", "self", ".", "x_convs", "(", "x", ")", "\n", "for", "layer", "in", "reversed", "(", "self", ".", "layers", ")", ":", "\n", "            ", "y", ",", "logdet", "=", "layer", "(", "x", ",", "y", ",", "logdet", "=", "logdet", ",", "reverse", "=", "True", ",", "x_actnorm", "=", "x_actnorm", ",", "x_invconv", "=", "x_invconv", ")", "\n", "", "return", "y", ",", "logdet", "\n", "\n", "\n", "################################", "\n", "", "", "class", "x_convs", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "x_hidden_channels", ",", "x_hidden_size", ",", "y_hidden_channels", ",", "masks", ",", "params", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.structuredGlowStep.forward": [[183, 204], ["models.structuredGlowStep.actnorm", "models.structuredGlowStep.invconv", "models.structuredGlowStep.affine", "models.structuredGlowStep.affine", "models.structuredGlowStep.invconv", "models.structuredGlowStep.actnorm"], "methods", ["None"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "C_x", ",", "H_x", ",", "W_x", "=", "x_size", "\n", "\n", "self", ".", "mask_init1", ",", "self", ".", "mask_undilated1", ",", "self", ".", "mask_dilated1", "=", "masks", "[", "0", "]", "\n", "self", ".", "mask_init2", ",", "self", ".", "mask_undilated2", ",", "self", ".", "mask_dilated2", "=", "masks", "[", "1", "]", "\n", "\n", "max_dilation", "=", "params", "[", "'max_dilation'", "]", "\n", "input_channels", "=", "params", "[", "'input_channels'", "]", "\n", "conv_bias", "=", "params", "[", "'conv_bias'", "]", "\n", "conv_mask_weight", "=", "params", "[", "'conv_mask_weight'", "]", "\n", "nr_filters", "=", "params", "[", "'nr_filters'", "]", "\n", "kernel_size", "=", "[", "params", "[", "'kernel_size'", "]", ",", "params", "[", "'kernel_size'", "]", "]", "\n", "dropout", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "\n", "# conditioning networks", "\n", "self", ".", "x_Con_1", "=", "nn", ".", "Sequential", "(", "\n", "locally_masked_conv2d", "(", "input_channels", "+", "1", ",", "nr_filters", ",", "self", ".", "mask_init1", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ",", "dropout", ",", "\n", "locally_masked_conv2d", "(", "2", "*", "nr_filters", ",", "nr_filters", "//", "2", ",", "self", ".", "mask_undilated1", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ",", "\n", "locally_masked_conv2d", "(", "nr_filters", ",", "4", ",", "self", ".", "mask_dilated1", ",", "kernel_size", "=", "kernel_size", ",", "dilation", "=", "max_dilation", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ")", "\n", "\n", "self", ".", "x_Con_2", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.CondActNorm.__init__": [[208, 212], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.LinearZeros", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["\n", "self", ".", "x_Linear", "=", "nn", ".", "Sequential", "(", "\n", "LinearZeros", "(", "2", "*", "x_hidden_channels", "*", "H_x", "*", "W_x", "//", "(", "8", "*", "8", ")", ",", "x_hidden_size", "//", "2", ")", ",", "concat_elu", "(", ")", ",", "\n", "LinearZeros", "(", "x_hidden_size", ",", "x_hidden_size", "//", "2", ")", ",", "concat_elu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.CondActNorm.forward": [[213, 236], ["x.view.view.size", "models.CondActNorm.x_Linear", "x.view.view.view", "models.split_feature", "y.size", "y.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.split_feature"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "\n", "if", "x", ".", "shape", "[", "1", "]", "!=", "4", ":", "\n", "            ", "xs", "=", "[", "int", "(", "ss", ")", "for", "ss", "in", "x", ".", "size", "(", ")", "]", "\n", "padding", "=", "Variable", "(", "torch", ".", "ones", "(", "xs", "[", "0", "]", ",", "1", ",", "xs", "[", "2", "]", ",", "xs", "[", "3", "]", ")", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "padding", ")", ",", "1", ")", "\n", "\n", "", "x_1", "=", "self", ".", "x_Con_1", "(", "x", ")", "\n", "x_2", "=", "self", ".", "x_Con_2", "(", "x", ")", "\n", "\n", "x_conv", "=", "x_1", "*", "x_2", "\n", "\n", "a", ",", "b", "=", "torch", ".", "chunk", "(", "x_conv", ",", "2", ",", "dim", "=", "1", ")", "\n", "a", ",", "_", ",", "__", "=", "pono", "(", "a", ")", "\n", "c3", "=", "a", "*", "torch", ".", "sigmoid", "(", "b", ")", "\n", "x", "=", "x", "+", "c3", "\n", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ")", "\n", "x_actnorm", "=", "self", ".", "x_Linear", "(", "x", ")", "\n", "x_invconv", "=", "torch", ".", "clone", "(", "x_actnorm", ")", "\n", "\n", "return", "x_actnorm", ",", "x_invconv", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Cond1x1Conv.__init__": [[240, 243], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.LinearNorm", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "x_hidden_channels", ",", "x_hidden_size", ",", "y_hidden_channels", ",", "masks", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# 1. cond-actnorm", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Cond1x1Conv.get_weight": [[244, 262], ["y.size", "x.view.view.size", "models.Cond1x1Conv.x_Linear", "x.view.view.view", "x.view.view.view", "y.size", "y.size", "torch.inverse().float().view.view", "torch.inverse().float().view.view", "torch.inverse().float().view.view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.inverse().float().view", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.inverse().float", "torch.inverse().float", "torch.inverse().float", "torch.inverse().float", "torch.inverse().float", "torch.inverse().float", "torch.inverse().float", "torch.inverse().float", "torch.inverse().float", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse().float().view.double", "torch.inverse().float().view.double", "torch.inverse().float().view.double"], "methods", ["None"], ["self", ".", "actnorm", "=", "CondActNorm", "(", "x_size", "=", "x_size", ",", "y_channels", "=", "y_size", "[", "0", "]", ",", "x_hidden_channels", "=", "x_hidden_channels", ",", "x_hidden_size", "=", "x_hidden_size", ",", "masks", "=", "masks", ",", "params", "=", "params", ")", "\n", "# 2. cond-1x1conv", "\n", "self", ".", "invconv", "=", "Cond1x1Conv", "(", "x_size", "=", "x_size", ",", "x_hidden_channels", "=", "x_hidden_channels", ",", "x_hidden_size", "=", "x_hidden_size", ",", "y_channels", "=", "y_size", "[", "0", "]", ",", "masks", "=", "masks", ",", "params", "=", "params", ")", "\n", "# 3. cond-affine", "\n", "self", ".", "affine", "=", "CondAffineCoupling", "(", "x_size", "=", "x_size", ",", "y_size", "=", "[", "y_size", "[", "0", "]", "//", "2", ",", "y_size", "[", "1", "]", ",", "y_size", "[", "2", "]", "]", ",", "hidden_channels", "=", "y_hidden_channels", ",", "masks", "=", "masks", ",", "params", "=", "params", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "logdet", "=", "None", ",", "reverse", "=", "False", ",", "x_actnorm", "=", "None", ",", "x_invconv", "=", "None", ")", ":", "\n", "        ", "if", "reverse", "is", "False", ":", "\n", "# 1. cond-actnorm", "\n", "            ", "y", ",", "logdet", "=", "self", ".", "actnorm", "(", "x_actnorm", ",", "y", ",", "logdet", ",", "reverse", "=", "False", ")", "\n", "# 2. cond-1x1conv", "\n", "y", ",", "logdet", "=", "self", ".", "invconv", "(", "x_invconv", ",", "y", ",", "logdet", ",", "reverse", "=", "False", ")", "\n", "# 3. cond-affine", "\n", "y", ",", "logdet", "=", "self", ".", "affine", "(", "x", ",", "y", ",", "logdet", ",", "reverse", "=", "False", ")", "\n", "# Return", "\n", "\n", "return", "y", ",", "logdet", "\n", "", "else", ":", "\n", "# 3. cond-affine", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Cond1x1Conv.forward": [[263, 286], ["models.Cond1x1Conv.get_weight", "y.contiguous().view.contiguous().view.size", "y.contiguous().view.contiguous().view.contiguous().view", "weight.contiguous().view.contiguous().view.size", "weight.contiguous().view.contiguous().view.contiguous().view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "z.view.view.view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "z.view.view.view", "y.contiguous().view.contiguous().view.contiguous", "weight.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Cond1x1Conv.get_weight"], ["            ", "y", ",", "logdet", "=", "self", ".", "affine", "(", "x", ",", "y", ",", "logdet", ",", "reverse", "=", "True", ")", "\n", "# 2. cond-1x1conv", "\n", "y", ",", "logdet", "=", "self", ".", "invconv", "(", "x_invconv", ",", "y", ",", "logdet", ",", "reverse", "=", "True", ")", "\n", "# 1. cond-actnorm", "\n", "y", ",", "logdet", "=", "self", ".", "actnorm", "(", "x_actnorm", ",", "y", ",", "logdet", ",", "reverse", "=", "True", ")", "\n", "# Return", "\n", "\n", "return", "y", ",", "logdet", "\n", "\n", "\n", "################################", "\n", "", "", "", "class", "CondActNorm", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "x_size", ",", "y_channels", ",", "x_hidden_channels", ",", "x_hidden_size", ",", "masks", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "x_Linear", "=", "nn", ".", "Sequential", "(", "LinearZeros", "(", "x_hidden_size", ",", "2", "*", "y_channels", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "logdet", "=", "0", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "x", "=", "self", ".", "x_Linear", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "logs", ",", "bias", "=", "split_feature", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.CondAffineCoupling.__init__": [[290, 322], ["torch.Module.__init__", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "masking.locally_masked_conv2d", "masking.PONO", "masking.concat_elu", "models.Conv2dZeros", "masking.concat_elu", "models.Conv2dResize", "masking.concat_elu", "models.Conv2dZeros", "masking.concat_elu", "models.Conv2dNormy", "masking.concat_elu", "models.Conv2dNormy", "masking.concat_elu", "models.Conv2dZerosy", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["# center and scale", "\n", "            ", "y", "=", "y", "+", "bias", "\n", "y", "=", "y", "*", "torch", ".", "exp", "(", "logs", ")", "\n", "dlogdet", "=", "dimentions", "*", "torch", ".", "sum", "(", "logs", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "logdet", "=", "logdet", "+", "dlogdet", "\n", "", "else", ":", "\n", "# scale and center", "\n", "            ", "y", "=", "y", "*", "torch", ".", "exp", "(", "-", "logs", ")", "\n", "y", "=", "y", "-", "bias", "\n", "dlogdet", "=", "-", "dimentions", "*", "torch", ".", "sum", "(", "logs", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "logdet", "=", "logdet", "+", "dlogdet", "\n", "\n", "", "return", "y", ",", "logdet", "\n", "\n", "\n", "################################", "\n", "", "", "class", "Cond1x1Conv", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "x_size", ",", "x_hidden_channels", ",", "x_hidden_size", ",", "y_channels", ",", "masks", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "x_Linear", "=", "nn", ".", "Sequential", "(", "LinearNorm", "(", "x_hidden_size", ",", "y_channels", "*", "y_channels", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "", "def", "get_weight", "(", "self", ",", "x", ",", "y", ",", "reverse", ")", ":", "\n", "        ", "y_channels", "=", "y", ".", "size", "(", "1", ")", "\n", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "x", "=", "self", ".", "x_Linear", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "weight", "=", "x", ".", "view", "(", "B", ",", "y_channels", ",", "y_channels", ")", "\n", "\n", "dimensions", "=", "y", ".", "size", "(", "2", ")", "*", "y", ".", "size", "(", "3", ")", "\n", "dlogdet", "=", "torch", ".", "slogdet", "(", "weight", ")", "[", "1", "]", "*", "dimensions", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.CondAffineCoupling.forward": [[323, 361], ["models.split_feature", "models.CondAffineCoupling.resize_x_1", "models.CondAffineCoupling.resize_x_2", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "masking.pono", "models.CondAffineCoupling.resize_x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.CondAffineCoupling.f", "models.split_feature", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat.float", "torch.cat.float", "torch.cat.float", "int", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.split_feature", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking.pono", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.split_feature"], ["if", "reverse", "==", "False", ":", "\n", "            ", "weight", "=", "weight", ".", "view", "(", "B", ",", "y_channels", ",", "y_channels", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "torch", ".", "inverse", "(", "weight", ".", "double", "(", ")", ")", ".", "float", "(", ")", ".", "view", "(", "B", ",", "y_channels", ",", "y_channels", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "weight", ",", "dlogdet", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "logdet", "=", "None", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "weight", ",", "dlogdet", "=", "self", ".", "get_weight", "(", "x", ",", "y", ",", "reverse", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "y", ".", "size", "(", ")", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "B", "*", "C", ",", "H", ",", "W", ")", "\n", "B_k", ",", "C_i_k", ",", "C_o_k", ",", "H_k", ",", "W_k", "=", "weight", ".", "size", "(", ")", "\n", "assert", "B", "==", "B_k", "and", "C", "==", "C_i_k", "and", "C", "==", "C_o_k", ",", "\"The input and kernel dimensions are different\"", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", ".", "view", "(", "B_k", "*", "C_i_k", ",", "C_o_k", ",", "H_k", ",", "W_k", ")", "#.double()", "\n", "\n", "if", "reverse", "==", "False", ":", "\n", "            ", "z", "=", "F", ".", "conv2d", "(", "y", ",", "weight", ",", "groups", "=", "B", ")", "\n", "z", "=", "z", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "if", "logdet", "is", "not", "None", ":", "\n", "                ", "logdet", "=", "logdet", "+", "dlogdet", "\n", "\n", "", "return", "z", ",", "logdet", "\n", "", "else", ":", "\n", "            ", "z", "=", "F", ".", "conv2d", "(", "y", ",", "weight", ",", "groups", "=", "B", ")", "\n", "z", "=", "z", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "\n", "if", "logdet", "is", "not", "None", ":", "\n", "                ", "logdet", "=", "logdet", "-", "dlogdet", "\n", "\n", "", "return", "z", ",", "logdet", "\n", "\n", "\n", "################################", "\n", "", "", "", "class", "CondAffineCoupling", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "hidden_channels", ",", "masks", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mask_init1", ",", "self", ".", "mask_undilated1", ",", "self", ".", "mask_dilated1", "=", "masks", "[", "0", "]", "\n", "self", ".", "mask_init2", ",", "self", ".", "mask_undilated2", ",", "self", ".", "mask_dilated2", "=", "masks", "[", "1", "]", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Conv2dZeros.__init__": [[365, 369], ["torch.Conv2d.__init__", "models.Conv2dZeros.weight.data.normal_"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["conv_mask_weight", "=", "params", "[", "'conv_mask_weight'", "]", "\n", "nr_filters", "=", "params", "[", "'nr_filters'", "]", "\n", "kernel_size", "=", "[", "params", "[", "'kernel_size'", "]", ",", "params", "[", "'kernel_size'", "]", "]", "\n", "dropout", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.likelihood": [[375, 378], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["self", ".", "resize_x_2", "=", "nn", ".", "Sequential", "(", "\n", "locally_masked_conv2d", "(", "input_channels", "+", "1", ",", "nr_filters", ",", "self", ".", "mask_init2", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ",", "dropout", ",", "\n", "locally_masked_conv2d", "(", "2", "*", "nr_filters", ",", "nr_filters", "//", "2", ",", "self", ".", "mask_undilated2", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ",", "\n", "locally_masked_conv2d", "(", "nr_filters", ",", "4", ",", "self", ".", "mask_dilated2", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "conv_bias", ",", "mask_weight", "=", "conv_mask_weight", ")", ",", "PONO", "(", ")", ",", "concat_elu", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.logp": [[379, 383], ["models.GaussianDiag.likelihood", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.likelihood"], ["\n", "self", ".", "resize_x", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dZeros", "(", "4", ",", "16", "//", "2", ")", ",", "concat_elu", "(", ")", ",", "\n", "Conv2dResize", "(", "(", "16", ",", "x_size", "[", "1", "]", ",", "x_size", "[", "2", "]", ")", ",", "out_size", "=", "y_size", ")", ",", "concat_elu", "(", ")", ",", "\n", "Conv2dZeros", "(", "y_size", "[", "0", "]", "*", "2", ",", "y_size", "[", "0", "]", "//", "2", ")", ",", "concat_elu", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.sample": [[384, 389], ["torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["\n", "self", ".", "f", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dNormy", "(", "y_size", "[", "0", "]", "*", "2", ",", "hidden_channels", "//", "2", ")", ",", "concat_elu", "(", ")", ",", "\n", "Conv2dNormy", "(", "hidden_channels", ",", "hidden_channels", "//", "2", ",", "kernel_size", "=", "[", "1", ",", "1", "]", ")", ",", "concat_elu", "(", ")", ",", "\n", "Conv2dZerosy", "(", "hidden_channels", ",", "2", "*", "y_size", "[", "0", "]", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.batchsample": [[390, 398], ["models.GaussianDiag.sample", "range", "models.GaussianDiag.sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.sample", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GaussianDiag.sample"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "logdet", "=", "0.0", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "z1", ",", "z2", "=", "split_feature", "(", "y", ",", "\"split\"", ")", "\n", "\n", "if", "x", ".", "shape", "[", "1", "]", "!=", "4", ":", "\n", "            ", "xs", "=", "[", "int", "(", "ss", ")", "for", "ss", "in", "x", ".", "size", "(", ")", "]", "\n", "padding", "=", "Variable", "(", "torch", ".", "ones", "(", "xs", "[", "0", "]", ",", "1", ",", "xs", "[", "2", "]", ",", "xs", "[", "3", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "init_padding", "=", "padding", ".", "cuda", "(", ")", "if", "x", ".", "is_cuda", "else", "padding", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "self", ".", "init_padding", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Conv2dResize.__init__": [[402, 408], ["models.Conv2dResize.compute_kernel_size", "torch.Conv2d.__init__", "models.Conv2dResize.weight.data.zero_"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Conv1dResize.compute_kernel_size", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["x_conv", "=", "x_1", "*", "x_2", "\n", "\n", "a", ",", "b", "=", "torch", ".", "chunk", "(", "x_conv", ",", "2", ",", "dim", "=", "1", ")", "\n", "a", ",", "_", ",", "__", "=", "pono", "(", "a", ")", "\n", "c3", "=", "a", "*", "torch", ".", "sigmoid", "(", "b", ")", "\n", "x", "=", "x", "+", "c3", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Conv2dResize.compute_kernel_size": [[409, 414], ["None"], "methods", ["None"], ["x", "=", "self", ".", "resize_x", "(", "x", ".", "float", "(", ")", ")", "\n", "\n", "h", "=", "torch", ".", "cat", "(", "(", "x", ",", "z1", ")", ",", "dim", "=", "1", ")", "\n", "h", "=", "self", ".", "f", "(", "h", ")", "\n", "\n", "shift", ",", "scale", "=", "split_feature", "(", "h", ",", "\"cross\"", ")", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Conv1dResize.__init__": [[418, 421], ["torch.Conv1d.__init__", "models.Conv1dResize.weight.data.zero_"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["z2", "=", "z2", "*", "scale", "\n", "logdet", "=", "torch", ".", "sum", "(", "torch", ".", "log", "(", "scale", ")", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "logdet", "\n", "\n", "", "if", "reverse", "==", "True", ":", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Conv1dResize.compute_kernel_size": [[422, 427], ["None"], "methods", ["None"], ["            ", "z2", "=", "z2", "/", "scale", "\n", "z2", "=", "z2", "-", "shift", "\n", "logdet", "=", "-", "torch", ".", "sum", "(", "torch", ".", "log", "(", "scale", ")", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "logdet", "\n", "\n", "", "z", "=", "torch", ".", "cat", "(", "(", "z1", ",", "z2", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.LinearZeros.__init__": [[431, 435], ["torch.Linear.__init__", "models.LinearZeros.weight.data.zero_", "models.LinearZeros.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["################################", "\n", "", "", "class", "Conv2dZeros", "(", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "[", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", "]", ")", ":", "\n", "        ", "padding", "=", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", "\n", "super", "(", ")", ".", "__init__", "(", "in_channels", "=", "in_channel", ",", "out_channels", "=", "out_channel", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.LinearZeros.forward": [[436, 439], ["super().forward", "input.float"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GATU2D.forward"], ["self", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.1", ")", "\n", "\n", "\n", "################################", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.LinearNorm.__init__": [[443, 447], ["torch.Linear.__init__", "models.LinearNorm.weight.data.normal_", "models.LinearNorm.bias.data.normal_"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["@", "staticmethod", "\n", "def", "likelihood", "(", "mean", ",", "logs", ",", "x", ")", ":", "\n", "        ", "return", "-", "0.5", "*", "(", "logs", "*", "2.", "+", "(", "(", "x", "-", "mean", ")", "**", "2.", ")", "/", "torch", ".", "exp", "(", "logs", "*", "2.", ")", "+", "GaussianDiag", ".", "Log2PI", ")", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Conv2dZerosy.__init__": [[451, 462], ["torch.Conv2d.__init__", "models.Conv2dZerosy.register_parameter", "models.Conv2dZerosy.register_parameter", "models.Conv2dZerosy.weight.data.zero_", "models.Conv2dZerosy.bias.data.zero_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["\n", "", "@", "staticmethod", "\n", "def", "sample", "(", "mean", ",", "logs", ",", "eps_std", "=", "None", ")", ":", "\n", "        ", "eps_std", "=", "eps_std", "or", "1", "\n", "eps", "=", "torch", ".", "normal", "(", "mean", "=", "torch", ".", "zeros_like", "(", "mean", ")", ",", "std", "=", "torch", ".", "ones_like", "(", "logs", ")", "*", "eps_std", ")", "\n", "return", "mean", "+", "torch", ".", "exp", "(", "logs", ")", "*", "eps", "\n", "\n", "", "@", "staticmethod", "\n", "def", "batchsample", "(", "batchsize", ",", "mean", ",", "logs", ",", "eps_std", "=", "None", ")", ":", "\n", "        ", "eps_std", "=", "eps_std", "or", "1", "\n", "sample", "=", "GaussianDiag", ".", "sample", "(", "mean", ",", "logs", ",", "eps_std", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "batchsize", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Conv2dZerosy.forward": [[463, 468], ["super().forward", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GATU2D.forward"], ["            ", "s", "=", "GaussianDiag", ".", "sample", "(", "mean", ",", "logs", ",", "eps_std", ")", "\n", "sample", "=", "torch", ".", "cat", "(", "(", "sample", ",", "s", ")", ",", "dim", "=", "0", ")", "\n", "", "return", "sample", "\n", "\n", "\n", "################################", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Conv2dNormy.__init__": [[472, 479], ["torch.Conv2d.__init__", "models.Conv2dNormy.weight.data.normal_", "models.ActNorm"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["        ", "stride", "=", "[", "in_size", "[", "1", "]", "//", "out_size", "[", "1", "]", ",", "in_size", "[", "2", "]", "//", "out_size", "[", "2", "]", "]", "\n", "kernel_size", "=", "Conv2dResize", ".", "compute_kernel_size", "(", "in_size", ",", "out_size", ",", "stride", ")", "\n", "super", "(", ")", ".", "__init__", "(", "in_channels", "=", "in_size", "[", "0", "]", ",", "out_channels", "=", "out_size", "[", "0", "]", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ")", "\n", "self", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "compute_kernel_size", "(", "in_size", ",", "out_size", ",", "stride", ")", ":", "\n", "        ", "k0", "=", "in_size", "[", "1", "]", "-", "(", "out_size", "[", "1", "]", "-", "1", ")", "*", "stride", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.Conv2dNormy.forward": [[480, 484], ["super().forward", "models.Conv2dNormy.actnorm"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GATU2D.forward"], ["k1", "=", "in_size", "[", "2", "]", "-", "(", "out_size", "[", "2", "]", "-", "1", ")", "*", "stride", "[", "1", "]", "\n", "return", "[", "k0", ",", "k1", "]", "\n", "\n", "\n", "################################", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.ActNorm.__init__": [[488, 497], ["torch.Module.__init__", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "models.ActNorm.register_parameter", "models.ActNorm.register_parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__"], ["        ", "super", "(", ")", ".", "__init__", "(", "in_channels", "=", "in_size", "[", "0", "]", ",", "out_channels", "=", "out_size", "[", "0", "]", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ")", "\n", "self", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "compute_kernel_size", "(", "in_size", ",", "out_size", ",", "stride", ")", ":", "\n", "        ", "k0", "=", "in_size", "[", "1", "]", "-", "(", "out_size", "[", "1", "]", "-", "1", ")", "*", "stride", "[", "0", "]", "\n", "k1", "=", "in_size", "[", "2", "]", "-", "(", "out_size", "[", "2", "]", "-", "1", ")", "*", "stride", "[", "1", "]", "\n", "return", "[", "k0", ",", "k1", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.ActNorm.forward": [[498, 513], ["input.size", "input.size", "input.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["################################", "\n", "", "", "class", "LinearZeros", "(", "nn", ".", "Linear", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "super", "(", ")", ".", "forward", "(", "input", ".", "float", "(", ")", ")", "\n", "return", "output", "\n", "\n", "\n", "################################", "\n", "", "", "class", "LinearNorm", "(", "nn", ".", "Linear", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ")", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.NNTheta.__init__": [[517, 537], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.initialize", "models.NNTheta.latent_encoder.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.initialize", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.initialize", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.NNTheta.latent_dist_encoder"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.NNTheta.latent_dist_encoder"], ["\n", "################################", "\n", "", "", "class", "Conv2dZerosy", "(", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "[", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", "]", ")", ":", "\n", "        ", "padding", "=", "[", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", ",", "(", "kernel_size", "[", "1", "]", "-", "1", ")", "//", "2", "]", "\n", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", "\n", "\n", "self", ".", "logscale_factor", "=", "3.0", "\n", "self", ".", "register_parameter", "(", "\"logs\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ",", "1", ",", "1", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "\"newbias\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ",", "1", ",", "1", ")", ")", ")", "\n", "\n", "# init", "\n", "self", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "output", "=", "output", "+", "self", ".", "newbias", "\n", "output", "=", "output", "*", "torch", ".", "exp", "(", "self", ".", "logs", "*", "self", ".", "logscale_factor", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.NNTheta.forward": [[538, 557], ["models.NNTheta.conv2", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "models.NNTheta.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "z_past.clone", "parallel_outs.append", "sum", "pb"], "methods", ["None"], ["\n", "################################", "\n", "", "", "class", "Conv2dNormy", "(", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "[", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", "]", ")", ":", "\n", "        ", "padding", "=", "[", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", ",", "(", "kernel_size", "[", "1", "]", "-", "1", ")", "//", "2", "]", "\n", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "False", ")", "\n", "\n", "# initialize weight", "\n", "self", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.05", ")", "\n", "self", ".", "actnorm", "=", "ActNorm", "(", "out_channels", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "x", ",", "_", "=", "self", ".", "actnorm", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "################################", "\n", "", "", "class", "ActNorm", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_channels", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.NNTheta.latent_dist_encoder": [[558, 573], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.initialize", "models.GATU2D", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.initialize", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "size", "=", "[", "1", ",", "num_channels", ",", "1", ",", "1", "]", "\n", "\n", "bias", "=", "torch", ".", "normal", "(", "mean", "=", "torch", ".", "zeros", "(", "*", "size", ")", ",", "std", "=", "torch", ".", "ones", "(", "*", "size", ")", "*", "0.05", ")", "\n", "logs", "=", "torch", ".", "normal", "(", "mean", "=", "torch", ".", "zeros", "(", "*", "size", ")", ",", "std", "=", "torch", ".", "ones", "(", "*", "size", ")", "*", "0.05", ")", "\n", "self", ".", "register_parameter", "(", "\"bias\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "bias", ")", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "register_parameter", "(", "\"logs\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "logs", ")", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "logdet", "=", "0", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "dimentions", "=", "input", ".", "size", "(", "1", ")", "*", "input", ".", "size", "(", "2", ")", "*", "input", ".", "size", "(", "3", ")", "\n", "if", "reverse", "==", "False", ":", "\n", "            ", "input", "=", "input", "+", "self", ".", "bias", "\n", "input", "=", "input", "*", "torch", ".", "exp", "(", "self", ".", "logs", ")", "\n", "dlogdet", "=", "torch", ".", "sum", "(", "self", ".", "logs", ")", "*", "dimentions", "\n", "logdet", "=", "logdet", "+", "dlogdet", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GATU2D.__init__": [[577, 583], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.initialize", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.initialize"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize"], ["input", "=", "input", "-", "self", ".", "bias", "\n", "dlogdet", "=", "-", "torch", ".", "sum", "(", "self", ".", "logs", ")", "*", "dimentions", "\n", "logdet", "=", "logdet", "+", "dlogdet", "\n", "\n", "", "return", "input", ",", "logdet", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.GATU2D.forward": [[584, 588], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models.GATU2D.conv1", "models.GATU2D.conv2"], "methods", ["None"], ["################################", "\n", "", "", "class", "NNTheta", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "encoder_ch_in", ",", "encoder_mode", ",", "num_blocks", ",", "h_ch_in", "=", "None", ")", ":", "\n", "        ", "super", "(", "NNTheta", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder_mode", "=", "encoder_mode", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.initialize": [[591, 602], ["torch.init.normal_", "torch.init.normal_", "torch.init.zeros_", "torch.init.zeros_", "NotImplementedError"], "function", ["None"], ["            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "h_ch_in", ",", "out_channels", "=", "h_ch_in", ",", "kernel_size", "=", "1", ")", "\n", "initialize", "(", "self", ".", "conv1", ",", "mode", "=", "'gaussian'", ")", "\n", "\n", "", "dilations", "=", "[", "1", ",", "2", ",", "4", "]", "\n", "self", ".", "latent_encoder", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "self", ".", "latent_encoder", ".", "append", "(", "nn", ".", "ModuleList", "(", "\n", "[", "self", ".", "latent_dist_encoder", "(", "encoder_ch_in", ",", "dilation", "=", "d", ",", "mode", "=", "encoder_mode", ")", "for", "d", "in", "dilations", "]", ")", ")", "\n", "\n", "", "if", "h_ch_in", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "encoder_ch_in", ",", "out_channels", "=", "encoder_ch_in", ",", "kernel_size", "=", "1", ")", "\n", "initialize", "(", "self", ".", "conv2", ",", "mode", "=", "'zeros'", ")", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.models.split_feature": [[605, 614], ["tensor.size"], "function", ["None"], ["initialize", "(", "self", ".", "conv2", ",", "mode", "=", "'zeros'", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "z_past", ",", "h", ")", ":", "\n", "        ", "if", "h", "is", "not", "None", ":", "\n", "            ", "h", "=", "self", ".", "conv1", "(", "h", ")", "\n", "encoder_input", "=", "torch", ".", "cat", "(", "[", "z_past", ",", "h", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "encoder_input", "=", "z_past", ".", "clone", "(", ")", "\n", "\n", "", "for", "block", "in", "self", ".", "latent_encoder", ":", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__": [[27, 77], ["super().__init__", "print", "utils.select_device", "print", "models.MotionFlowModel().to", "print", "print", "print", "models.MotionFlowModel().to.parameters", "torch.optim.Adam", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "utils.load_state", "torch.optim.Adam.load_state_dict", "models.MotionFlowModel().to.load_state_dict", "utils.increment_path", "os.path.exists", "os.makedirs", "models.MotionFlowModel", "utils.count_parameters", "scheduler.load_state_dict", "pathlib.Path", "pathlib.Path", "pathlib.Path", "utils.load_state.get", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.__init__", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.select_device", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.load_state", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.increment_path", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.count_parameters"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "print", "(", "f'{Fore.YELLOW}'", ")", "\n", "device", "=", "select_device", "(", "FLAGS", ".", "device", ",", "batch_size", "=", "FLAGS", ".", "batch_size", ")", "\n", "print", "(", "f'{Style.RESET_ALL}'", ")", "\n", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "data_dir", ",", "FLAGS", ".", "db", ")", "\n", "self", ".", "input_seq_len", "=", "FLAGS", ".", "input_seq_len", "\n", "self", ".", "target_seq_len", "=", "FLAGS", ".", "target_seq_len", "\n", "\n", "# dataset", "\n", "if", "FLAGS", ".", "dynamic_train_split", ":", "\n", "            ", "train_data_split", "=", "'training_dynamic'", "\n", "", "else", ":", "\n", "            ", "train_data_split", "=", "'training'", "\n", "\n", "", "if", "FLAGS", ".", "dynamic_val_split", ":", "\n", "            ", "val_data_split", "=", "'validation_dynamic'", "\n", "", "else", ":", "\n", "            ", "val_data_split", "=", "'validation'", "\n", "\n", "", "self", ".", "train_data_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'aa'", ",", "train_data_split", ",", "FLAGS", ".", "db", "+", "'-?????-of-?????'", ")", "\n", "self", ".", "meta_data_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'aa'", ",", "'training'", ",", "'stats.npz'", ")", "\n", "self", ".", "val_data_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'aa'", ",", "val_data_split", ",", "FLAGS", ".", "db", "+", "'-?????-of-?????'", ")", "\n", "\n", "model", "=", "MotionFlowModel", "(", "FLAGS", ")", ".", "to", "(", "device", ")", "\n", "\n", "print", "(", "f'{Fore.YELLOW}'", ")", "\n", "print", "(", "'number of param: {}'", ".", "format", "(", "count_parameters", "(", "model", ")", ")", ")", "\n", "print", "(", "f'{Style.RESET_ALL}'", ")", "\n", "\n", "params", "=", "model", ".", "parameters", "(", ")", "\n", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "FLAGS", ".", "lr", ",", "betas", "=", "FLAGS", ".", "betas", ",", "weight_decay", "=", "FLAGS", ".", "regularizer", ")", "\n", "\n", "scheduler", "=", "None", "\n", "\n", "if", "FLAGS", ".", "load_weights", ":", "\n", "            ", "latest_checkpoint", "=", "Path", "(", "FLAGS", ".", "run_dir", ")", "/", "Path", "(", "FLAGS", ".", "exp_name", ")", "/", "'checkpoints/last.pth.tar'", "\n", "cuda", "=", "False", "if", "device", "==", "'cpu'", "else", "True", "\n", "state", "=", "load_state", "(", "latest_checkpoint", ",", "cuda", ")", "\n", "optim", ".", "load_state_dict", "(", "state", "[", "'optim'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "'model'", "]", ")", "\n", "FLAGS", ".", "steps", "=", "state", "[", "'iteration'", "]", "+", "1", "\n", "FLAGS", ".", "init_epoch", "=", "state", "[", "'epoch'", "]", "+", "1", "\n", "if", "scheduler", "is", "not", "None", "and", "state", ".", "get", "(", "'scheduler'", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "scheduler", ".", "load_state_dict", "(", "state", "[", "'scheduler'", "]", ")", "\n", "", "del", "state", "\n", "\n", "# Create metrics engine", "\n", "", "target_seq_len_metric", "=", "self", ".", "input_seq_len", "\n", "fk_engine", "=", "CMUForwardKinematics", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.train": [[78, 152], ["datasets.HorseDataset", "datasets.HorseDataset", "torch.utils.data.DataLoader", "range", "train.Trainer.model.train", "print", "len", "enumerate", "tqdm.tqdm.tqdm", "float", "print", "train.Trainer.model.eval", "train.Trainer.validation", "train.Trainer.tb_writer.add_scalar", "train.Trainer.tb_writer.add_scalar", "train.Trainer.tb_writer.add_scalar", "print", "print", "print", "utils.save_model", "train.Trainer.optim.zero_grad", "batch[].to", "batch[].to", "datasets.HorseDataset.preprocess", "datasets.HorseDataset.preprocess", "train.Trainer.model", "torch.mean", "train.Trainer.model.zero_grad", "train.Trainer.optim.zero_grad", "torch.mean.backward", "train.Trainer.optim.step", "torch.mean.item", "tqdm.tqdm.tqdm.set_description", "train.Trainer.scheduler.step", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_norm_", "float", "train.Trainer.model.parameters", "train.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.train", "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.validation", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.save_model", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.preprocess", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.preprocess", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.masking._locally_masked_conv2d.backward"], ["metric_target_lengths", "=", "FLAGS", ".", "METRIC_TARGET_LENGTHS_CMU_25FPS", "\n", "\n", "target_lengths", "=", "[", "x", "for", "x", "in", "metric_target_lengths", "if", "x", "<=", "target_seq_len_metric", "]", "\n", "\n", "metrics_engine", "=", "MetricsEngine", "(", "fk_engine", ",", "target_lengths", ",", "rep", "=", "'aa'", ",", "which", "=", "[", "'mpjpe'", "]", ",", "force_valid_rot", "=", "True", ")", "\n", "metrics_engine", ".", "reset", "(", ")", "\n", "\n", "if", "not", "FLAGS", ".", "load_weights", ":", "\n", "            ", "log_dir", "=", "increment_path", "(", "Path", "(", "FLAGS", ".", "run_dir", ")", "/", "FLAGS", ".", "exp_name", ",", "exist_ok", "=", "FLAGS", ".", "exist_ok", ")", "\n", "", "else", ":", "\n", "            ", "log_dir", "=", "Path", "(", "FLAGS", ".", "run_dir", ")", "/", "FLAGS", ".", "exp_name", "\n", "\n", "", "checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'checkpoints'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoints_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoints_dir", ")", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "self", ".", "checkpoints_dir", "=", "checkpoints_dir", "\n", "self", ".", "metrics_engine", "=", "metrics_engine", "\n", "self", ".", "optim", "=", "optim", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "tb_writer", "=", "SummaryWriter", "(", "log_dir", "=", "log_dir", ")", "\n", "self", ".", "target_lengths", "=", "target_lengths", "\n", "self", ".", "fk_engine", "=", "fk_engine", "\n", "self", ".", "global_step", "=", "FLAGS", ".", "steps", "\n", "\n", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "train_data_path", "=", "self", ".", "train_data_path", "\n", "val_data_path", "=", "self", ".", "val_data_path", "\n", "meta_data_path", "=", "self", ".", "meta_data_path", "\n", "checkpoints_dir", "=", "self", ".", "checkpoints_dir", "\n", "\n", "input_seq_len", "=", "self", ".", "input_seq_len", "\n", "target_seq_len", "=", "self", ".", "target_seq_len", "\n", "windows_size", "=", "(", "input_seq_len", "+", "target_seq_len", ")", "*", "2", "\n", "inds", "=", "range", "(", "0", ",", "(", "input_seq_len", "+", "target_seq_len", ")", "*", "2", ",", "2", ")", "\n", "\n", "train_data", "=", "TFRecordMotionDataset", "(", "data_path", "=", "train_data_path", ",", "meta_data_path", "=", "meta_data_path", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "windows_size", "=", "windows_size", ",", "window_type", "=", "'random'", ",", "\n", "num_parallel_calls", "=", "1", ",", "normalize", "=", "FLAGS", ".", "normalize", ")", "\n", "\n", "val_data", "=", "TFRecordMotionDataset", "(", "data_path", "=", "val_data_path", ",", "meta_data_path", "=", "meta_data_path", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "windows_size", "=", "input_seq_len", "*", "4", ",", "window_type", "=", "'random'", ",", "\n", "num_parallel_calls", "=", "1", ",", "normalize", "=", "FLAGS", ".", "normalize", ")", "\n", "\n", "for", "self", ".", "epoch", "in", "range", "(", "FLAGS", ".", "init_epoch", ",", "FLAGS", ".", "num_epochs", ")", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "print", "(", "f'{Fore.YELLOW}'", ",", "'Training on {}. Epoch/batch_size/device/lr: {}/{}/{}/{}'", ".", "format", "(", "\n", "FLAGS", ".", "db", ",", "self", ".", "epoch", ",", "FLAGS", ".", "batch_size", ",", "device", ",", "FLAGS", ".", "lr", ")", ",", "f'{Style.RESET_ALL}'", ")", "\n", "\n", "train_samples", "=", "train_data", ".", "get_tf_samples", "(", ")", "\n", "nb", "=", "len", "(", "train_data", ")", "\n", "pbar", "=", "enumerate", "(", "train_samples", ")", "\n", "pbar", "=", "tqdm", "(", "pbar", ",", "total", "=", "nb", ",", "bar_format", "=", "'{l_bar}{bar:50}{r_bar}{bar:-10b}'", ")", "# progress bar", "\n", "\n", "epoch_loss", "=", "0.0", "\n", "\n", "for", "_", ",", "batch", "in", "pbar", ":", "\n", "                ", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "act", "=", "batch", "[", "'id'", "]", "\n", "act", "=", "[", "action", ".", "decode", "(", "'utf-8'", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "action", "in", "act", "]", "\n", "inputs", "=", "batch", "[", "'inputs'", "]", "[", ":", ",", "inds", ",", ":", "]", "\n", "ids", "=", "[", "action", "in", "[", "'walking'", ",", "'basketball'", "]", "for", "action", "in", "act", "]", "\n", "inputs", "=", "inputs", "[", "ids", "]", "\n", "\n", "if", "inputs", ".", "shape", "[", "0", "]", "<=", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "y", "=", "torch", ".", "tensor", "(", "inputs", ")", ".", "to", "(", "device", ")", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.validation": [[154, 200], ["torch.utils.data.DataLoader", "len", "enumerate", "tqdm.tqdm.tqdm", "float", "numpy.mean", "torch.no_grad", "batch[].to", "batch[].to", "train.Trainer.model", "torch.mean", "torch.mean.item", "val_data.postprocess", "val_data.convert_to_img", "val_data.convert_to_img", "range", "torchvision.utils.save_image", "utils.compute_accuracy", "metrics.append", "tqdm.tqdm.tqdm.set_description", "float", "len", "torch.cat", "os.path.join", "torch.cat", "x[].cpu"], "methods", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.postprocess", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.convert_to_img", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.convert_to_img", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.compute_accuracy"], ["y", "=", "y", "[", ":", ",", "input_seq_len", ":", "]", "\n", "\n", "_", ",", "nll", "=", "self", ".", "model", "(", "x", ",", "y", ")", "\n", "\n", "loss", "=", "torch", ".", "mean", "(", "nll", ")", "\n", "\n", "# backward", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# operate grad", "\n", "if", "FLAGS", ".", "max_grad_clip", ">", "0", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_value_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "FLAGS", ".", "max_grad_clip", ")", "\n", "", "if", "FLAGS", ".", "max_grad_norm", ">", "0", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "FLAGS", ".", "max_grad_norm", ")", "\n", "\n", "", "self", ".", "optim", ".", "step", "(", ")", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "pbar", ".", "set_description", "(", "'Iter/Epoch:{}/{}  Loss:{:.5f}'", ".", "format", "(", "self", ".", "global_step", ",", "self", ".", "epoch", ",", "loss", ".", "data", ")", ")", "\n", "self", ".", "global_step", "+=", "1", "\n", "\n", "", "if", "self", ".", "scheduler", "is", "not", "None", ":", "\n", "                ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "epoch_loss", "=", "float", "(", "epoch_loss", "/", "float", "(", "nb", ")", ")", "\n", "\n", "print", "(", "f'{Fore.YELLOW}Validation is starting ... {Style.RESET_ALL}'", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "val_loss", "=", "self", ".", "validation", "(", "val_data", ")", "\n", "\n", "self", ".", "metrics_engine", ".", "train_loss", "=", "epoch_loss", "\n", "self", ".", "metrics_engine", ".", "val_loss", "=", "val_loss", "\n", "final_metrics", "=", "self", ".", "metrics_engine", ".", "get_final_metrics", "(", ")", "\n", "\n", "s", "=", "self", ".", "metrics_engine", ".", "get_summary_string_all", "(", "final_metrics", ",", "self", ".", "target_lengths", ",", "\n", "at_mode", "=", "True", ",", "tb_writer", "=", "self", ".", "tb_writer", ",", "\n", "step", "=", "self", ".", "epoch", ",", "training", "=", "True", ",", "\n", "train_loss", "=", "epoch_loss", ",", "val_loss", "=", "val_loss", ")", "\n", "print", "(", "f'{Fore.GREEN}'", ",", "s", ",", "f'{Style.RESET_ALL}'", ")", "\n", "\n", "self", ".", "metrics_engine", ".", "reset", "(", ")", "\n", "\n", "print", "(", "f'{Fore.YELLOW}Validation finished!{Style.RESET_ALL}'", ")", "\n", "\n", "save_model", "(", "self", ".", "model", ",", "self", ".", "optim", ",", "self", ".", "scheduler", ",", "checkpoints_dir", ",", "self", ".", "global_step", ",", "self", ".", "epoch", ")", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.main": [[202, 205], ["train.Trainer", "Trainer.train"], "function", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.train.Trainer.train"], ["\n", "", "", "def", "validation", "(", "self", ",", "val_data", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "input_seq_len", "=", "self", ".", "input_seq_len", "\n"]], "home.repos.pwc.inspect_result.mohsenzand_motionflow.img_seg.test.main": [[25, 104], ["utils.select_device", "models.MotionFlowModel().to", "utils.load_state", "MotionFlowModel().to.load_state_dict", "datasets.HorseDataset", "torch.utils.data.DataLoader", "torchvision.Compose", "MotionFlowModel().to.eval", "len", "enumerate", "tqdm.tqdm", "numpy.mean", "print", "utils.increment_path", "os.path.exists", "os.makedirs", "torch.no_grad", "models.MotionFlowModel", "pathlib.Path", "pathlib.Path", "pathlib.Path", "torchvision.Resize", "torchvision.ToTensor", "batch[].to", "batch[].to", "range", "torch.stack", "torch.mean", "datasets.HorseDataset.postprocess", "datasets.HorseDataset.convert_to_img", "datasets.HorseDataset.convert_to_img", "range", "torchvision.utils.save_image", "torchvision.utils.save_image", "utils.compute_accuracy", "metrics.append", "pathlib.Path", "MotionFlowModel().to.", "MotionFlowModel().to.", "sample_list.append", "len", "utils.compute_accuracy", "os.path.join", "os.path.join", "PIL.open().convert", "transforms.Compose.", "torch.cat", "torch.cat", "torch.cat", "PIL.open"], "function", ["home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.select_device", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.load_state", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.increment_path", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.postprocess", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.convert_to_img", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.datasets.HorseDataset.convert_to_img", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.compute_accuracy", "home.repos.pwc.inspect_result.mohsenzand_motionflow.None.utils.compute_accuracy"], ["def", "main", "(", "_", ")", ":", "\n", "\t", "device", "=", "select_device", "(", "FLAGS", ".", "device", ",", "batch_size", "=", "FLAGS", ".", "batch_size", ")", "\n", "\n", "data_path", "=", "FLAGS", ".", "data_dir", "\n", "\n", "model", "=", "MotionFlowModel", "(", "FLAGS", ")", ".", "to", "(", "device", ")", "\n", "\n", "latest_checkpoint", "=", "Path", "(", "FLAGS", ".", "run_dir", ")", "/", "Path", "(", "FLAGS", ".", "exp_name", ")", "/", "'checkpoints/last.pth.tar'", "\n", "cuda", "=", "False", "if", "device", "==", "'cpu'", "else", "True", "\n", "state", "=", "load_state", "(", "latest_checkpoint", ",", "cuda", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "'model'", "]", ")", "\n", "\n", "del", "state", "\n", "\n", "if", "not", "FLAGS", ".", "load_weights", ":", "\n", "\t\t", "log_dir", "=", "increment_path", "(", "Path", "(", "FLAGS", ".", "run_dir", ")", "/", "FLAGS", ".", "exp_name", ",", "exist_ok", "=", "FLAGS", ".", "exist_ok", ")", "\n", "", "else", ":", "\n", "\t\t", "log_dir", "=", "Path", "(", "FLAGS", ".", "run_dir", ")", "/", "FLAGS", ".", "exp_name", "\n", "\n", "", "test_dir", "=", "log_dir", "/", "'test'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "test_dir", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "test_dir", ")", "\n", "", "test_data", "=", "HorseDataset", "(", "data_path", ",", "(", "FLAGS", ".", "x_size", "[", "1", "]", ",", "FLAGS", ".", "x_size", "[", "2", "]", ")", ",", "FLAGS", ".", "x_size", "[", "0", "]", ",", "\"test\"", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "transform_im", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "[", "128", ",", "128", "]", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "metrics", "=", "[", "]", "\n", "\n", "nb", "=", "len", "(", "test_loader", ")", "\n", "pbar", "=", "enumerate", "(", "test_loader", ")", "\n", "pbar", "=", "tqdm", "(", "pbar", ",", "total", "=", "nb", ",", "bar_format", "=", "'{l_bar}{bar:50}{r_bar}{bar:-10b}'", ")", "# progress bar", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "for", "bi", ",", "batch", "in", "pbar", ":", "\n", "\t\t\t", "x", "=", "batch", "[", "'x'", "]", ".", "to", "(", "device", ")", "\n", "y", "=", "batch", "[", "'y'", "]", ".", "to", "(", "device", ")", "\n", "paths", "=", "batch", "[", "'path'", "]", "\n", "\n", "sample_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "FLAGS", ".", "num_samples", ")", ":", "\n", "\t\t\t\t", "y_sample", ",", "_", "=", "model", "(", "x", ",", "y", "=", "None", ",", "reverse", "=", "True", ")", "\n", "_", ",", "_", "=", "model", "(", "x", ",", "y_sample", ")", "\n", "sample_list", ".", "append", "(", "y_sample", ")", "\n", "\n", "", "sample", "=", "torch", ".", "stack", "(", "sample_list", ")", "\n", "sample", "=", "torch", ".", "mean", "(", "sample", ",", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "\n", "\n", "sample", "=", "test_data", ".", "postprocess", "(", "sample", ",", "1.0", ",", "0.5", ")", "\n", "\n", "y_pred_imgs", ",", "y_pred_seg", "=", "test_data", ".", "convert_to_img", "(", "sample", ")", "\n", "y_true_imgs", ",", "y_true_seg", "=", "test_data", ".", "convert_to_img", "(", "y", ")", "\n", "\n", "output", "=", "None", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "y_true_imgs", ")", ")", ":", "\n", "\t\t\t\t", "true_img", "=", "y_true_imgs", "[", "i", "]", "\n", "pred_img", "=", "y_pred_imgs", "[", "i", "]", "\n", "_", ",", "_", ",", "iou", ",", "_", "=", "compute_accuracy", "(", "y_true_seg", "[", "i", "]", ",", "y_pred_seg", "[", "i", "]", ",", "2", ")", "\n", "if", "iou", ">", "0.5", ":", "\n", "\t\t\t\t\t", "img", "=", "Image", ".", "open", "(", "paths", "[", "i", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "img", "=", "transform_im", "(", "img", ")", "\n", "row", "=", "torch", ".", "cat", "(", "(", "true_img", ",", "pred_img", ")", ",", "dim", "=", "1", ")", "\n", "if", "output", "is", "None", ":", "\n", "\t\t\t\t\t\t", "output", "=", "row", "\n", "images", "=", "img", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "output", "=", "torch", ".", "cat", "(", "(", "output", ",", "row", ")", ",", "dim", "=", "2", ")", "\n", "images", "=", "torch", ".", "cat", "(", "(", "images", ",", "img", ")", ",", "dim", "=", "2", ")", "\n", "", "", "", "save_image", "(", "output", ",", "os", ".", "path", ".", "join", "(", "test_dir", ",", "\"trues-{}.png\"", ".", "format", "(", "bi", ")", ")", ")", "\n", "save_image", "(", "images", ",", "os", ".", "path", ".", "join", "(", "test_dir", ",", "\"img-{}.png\"", ".", "format", "(", "bi", ")", ")", ")", "\n", "\n", "acc", ",", "acc_cls", ",", "mean_iu", ",", "fwavacc", "=", "compute_accuracy", "(", "y_true_seg", ",", "y_pred_seg", ",", "2", ")", "\n", "metrics", ".", "append", "(", "[", "acc", ",", "acc_cls", ",", "mean_iu", ",", "fwavacc", "]", ")", "\n", "\n", "", "", "mean_metrics", "=", "np", ".", "mean", "(", "metrics", ",", "axis", "=", "0", ")", "\n", "\n", "print", "(", "mean_metrics", ")", "\n", "\n"]]}