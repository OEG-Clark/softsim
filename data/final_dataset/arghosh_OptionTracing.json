{"home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_trainer.train_model": [[26, 96], ["model.train", "numpy.concatenate", "numpy.concatenate", "model.eval", "print", "print", "model.train", "optimizer.zero_grad", "model", "batch[].numpy", "loss.backward", "optimizer.step", "all_preds.append", "all_targets.append", "float", "utils.compute_auc", "utils.compute_accuracy", "kt_trainer.test_model", "numpy.mean", "kt_trainer.test_model", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "batch[].numpy", "loss.detach().cpu().numpy", "kt_trainer.test_model", "kt_trainer.test_model", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "batch[].numpy", "gzip.open", "json.dump", "loss.detach().cpu", "loss.detach"], "function", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_auc", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_accuracy", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_trainer.test_model", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_trainer.test_model", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_trainer.test_model", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_trainer.test_model"], ["def", "train_model", "(", ")", ":", "\n", "    ", "global", "best_val_acc", ",", "best_val_auc", ",", "best_epoch", ",", "test_accuracy", ",", "test_auc", "\n", "global", "avg_f1_score", ",", "weighted_f1_score", ",", "avg_cohen_score", ",", "weighted_cohen_score", "\n", "batch_idx", "=", "0", "\n", "model", ".", "train", "(", ")", "\n", "train_loss", ",", "all_preds", ",", "all_targets", "=", "0.", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", "in", "train_loader", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ",", "output", ",", "_", "=", "model", "(", "batch", ")", "\n", "#", "\n", "training_flag", "=", "batch", "[", "'mask'", "]", ".", "numpy", "(", ")", "\n", "if", "params", ".", "task", "==", "'1'", ":", "\n", "            ", "target", "=", "batch", "[", "'labels'", "]", ".", "numpy", "(", ")", "\n", "", "elif", "params", ".", "task", "==", "'2'", ":", "\n", "            ", "target", "=", "batch", "[", "'ans'", "]", ".", "numpy", "(", ")", "\n", "# q_ids = batch['q_ids'].numpy()", "\n", "# u_ids = batch['user_ids']", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "all_preds", ".", "append", "(", "output", "[", "training_flag", "==", "1", "]", ")", "\n", "all_targets", ".", "append", "(", "target", "[", "training_flag", "==", "1", "]", ")", "\n", "train_loss", "+=", "float", "(", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "batch_idx", "+=", "1", "\n", "\n", "", "all_pred", "=", "np", ".", "concatenate", "(", "all_preds", ",", "axis", "=", "0", ")", "\n", "all_target", "=", "np", ".", "concatenate", "(", "all_targets", ",", "axis", "=", "0", ")", "\n", "model", ".", "eval", "(", ")", "\n", "if", "params", ".", "task", "==", "'1'", ":", "\n", "        ", "train_auc", "=", "compute_auc", "(", "all_target", ",", "all_pred", ")", "\n", "train_accuracy", "=", "compute_accuracy", "(", "all_target", ",", "all_pred", ")", "\n", "val_accuracy", ",", "val_auc", "=", "test_model", "(", "'val'", ")", "\n", "", "if", "params", ".", "task", "==", "'2'", ":", "\n", "        ", "train_accuracy", "=", "np", ".", "mean", "(", "all_target", "==", "all_pred", ")", "\n", "val_accuracy", ",", "val_auc", "=", "test_model", "(", "'val'", ")", "\n", "train_auc", "=", "-", "1", "\n", "\n", "", "print", "(", "'Train Epoch {} Loss: {} Train Auc: {} Train acc: {} Val Auc: {} Val acc: {}'", ".", "format", "(", "\n", "epoch", ",", "train_loss", "/", "batch_idx", ",", "train_auc", ",", "train_accuracy", ",", "val_auc", ",", "val_accuracy", ")", ")", "\n", "\n", "if", "best_val_acc", "is", "None", "or", "val_accuracy", ">", "best_val_acc", ":", "\n", "        ", "best_val_acc", "=", "val_accuracy", "\n", "best_val_auc", "=", "val_auc", "\n", "best_epoch", "=", "epoch", "\n", "if", "params", ".", "task", "==", "'2'", ":", "\n", "            ", "test_accuracy", ",", "test_auc", ",", "avg_f1_score", ",", "weighted_f1_score", ",", "avg_cohen_score", ",", "weighted_cohen_score", ",", "info", "=", "test_model", "(", "'test'", ")", "\n", "with", "gzip", ".", "open", "(", "params", ".", "root", "+", "'test_scores.gzip'", ",", "'wt'", ",", "encoding", "=", "\"ascii\"", ")", "as", "zipfile", ":", "\n", "                ", "json", ".", "dump", "(", "info", ",", "zipfile", ")", "\n", "", "", "else", ":", "\n", "            ", "test_accuracy", ",", "test_auc", "=", "test_model", "(", "'test'", ")", "\n", "\n", "\n", "", "", "print", "(", "'Train Epoch {} Best Val Acc: {} Test Acc: {} Test Auc: {}'", ".", "format", "(", "\n", "epoch", ",", "best_val_acc", ",", "test_accuracy", ",", "test_auc", ")", ")", "\n", "if", "params", ".", "neptune", ":", "\n", "        ", "neptune", ".", "log_metric", "(", "'Valid Accuracy'", ",", "val_accuracy", ")", "\n", "neptune", ".", "log_metric", "(", "'Test Accuracy'", ",", "test_accuracy", ")", "\n", "neptune", ".", "log_metric", "(", "'Best Test Accuracy'", ",", "test_accuracy", ")", "\n", "neptune", ".", "log_metric", "(", "'Best Test Auc'", ",", "test_auc", ")", "\n", "neptune", ".", "log_metric", "(", "'Best Valid Accuracy'", ",", "best_val_acc", ")", "\n", "neptune", ".", "log_metric", "(", "'Best Valid Auc'", ",", "best_val_auc", ")", "\n", "neptune", ".", "log_metric", "(", "'Best Epoch'", ",", "best_epoch", ")", "\n", "neptune", ".", "log_metric", "(", "'Epoch'", ",", "epoch", ")", "\n", "if", "params", ".", "task", "==", "'2'", ":", "\n", "            ", "neptune", ".", "log_metric", "(", "'best_avg_f1'", ",", "avg_f1_score", ")", "\n", "neptune", ".", "log_metric", "(", "'best_wt_f1'", ",", "weighted_f1_score", ")", "\n", "neptune", ".", "log_metric", "(", "'best_avg_kappa'", ",", "avg_cohen_score", ")", "\n", "neptune", ".", "log_metric", "(", "'best_wt_kappa'", ",", "weighted_cohen_score", ")", "\n", "\n", "", "", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_trainer.test_model": [[98, 134], ["numpy.concatenate", "numpy.concatenate", "batch[].numpy", "all_preds.append", "all_targets.append", "utils.compute_auc", "utils.compute_accuracy", "numpy.mean", "numpy.concatenate", "numpy.concatenate", "utils.compute_kappa_f1_score", "torch.no_grad", "model", "batch[].numpy", "np.concatenate.append", "np.concatenate.append", "np.concatenate.tolist", "np.concatenate.tolist", "np.concatenate.tolist", "batch[].numpy"], "function", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_auc", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_accuracy", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_kappa_f1_score"], ["", "def", "test_model", "(", "name", "=", "'val'", ")", ":", "\n", "    ", "all_preds", ",", "all_targets", "=", "[", "]", ",", "[", "]", "\n", "test_qids", ",", "test_dist", "=", "[", "]", ",", "[", "]", "\n", "loader", "=", "val_loader", "if", "name", "==", "'val'", "else", "test_loader", "\n", "for", "batch", "in", "loader", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "output", ",", "ans_dist", "=", "model", "(", "batch", ")", "\n", "", "if", "params", ".", "task", "==", "'1'", ":", "\n", "            ", "target", "=", "batch", "[", "'labels'", "]", ".", "numpy", "(", ")", "\n", "", "elif", "params", ".", "task", "==", "'2'", ":", "\n", "            ", "target", "=", "batch", "[", "'ans'", "]", ".", "numpy", "(", ")", "\n", "", "validation_flag", "=", "batch", "[", "'mask'", "]", ".", "numpy", "(", ")", "\n", "all_preds", ".", "append", "(", "output", "[", "validation_flag", "==", "1", "]", ")", "\n", "all_targets", ".", "append", "(", "target", "[", "validation_flag", "==", "1", "]", ")", "\n", "if", "params", ".", "task", "==", "'2'", ":", "\n", "            ", "q_ids", "=", "batch", "[", "'q_ids'", "]", "\n", "test_qids", ".", "append", "(", "q_ids", "[", "validation_flag", "==", "1", "]", ")", "\n", "test_dist", ".", "append", "(", "ans_dist", "[", "validation_flag", "==", "1", "]", ")", "\n", "\n", "", "", "all_pred", "=", "np", ".", "concatenate", "(", "all_preds", ",", "axis", "=", "0", ")", "\n", "all_target", "=", "np", ".", "concatenate", "(", "all_targets", ",", "axis", "=", "0", ")", "\n", "if", "params", ".", "task", "==", "'1'", ":", "\n", "        ", "auc", "=", "compute_auc", "(", "all_target", ",", "all_pred", ")", "\n", "accuracy", "=", "compute_accuracy", "(", "all_target", ",", "all_pred", ")", "\n", "", "else", ":", "\n", "        ", "auc", "=", "-", "1", "\n", "accuracy", "=", "np", ".", "mean", "(", "all_target", "==", "all_pred", ")", "\n", "", "if", "params", ".", "task", "==", "'2'", "and", "name", "==", "'test'", ":", "\n", "        ", "test_dist", "=", "np", ".", "concatenate", "(", "test_dist", ",", "axis", "=", "0", ")", "\n", "test_qids", "=", "np", ".", "concatenate", "(", "test_qids", ",", "axis", "=", "0", ")", "\n", "avg_f1_score", ",", "weighted_f1_score", ",", "avg_cohen_score", ",", "weighted_cohen_score", "=", "compute_kappa_f1_score", "(", "test_qids", ",", "all_target", ",", "all_pred", ")", "\n", "save_info", "=", "{", "'qids'", ":", "test_qids", ".", "tolist", "(", ")", ",", "'dist'", ":", "test_dist", ".", "tolist", "(", ")", ",", "'target'", ":", "all_target", ".", "tolist", "(", ")", "}", "\n", "return", "accuracy", ",", "auc", ",", "avg_f1_score", ",", "weighted_f1_score", ",", "avg_cohen_score", ",", "weighted_cohen_score", ",", "save_info", "\n", "\n", "\n", "", "return", "accuracy", ",", "auc", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_dataset.Dataset.__init__": [[11, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data", ")", ":", "\n", "        ", "'Initialization'", "\n", "#QuestionId,UserId,AnswerId,IsCorrect,CorrectAnswer,AnswerValue", "\n", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_dataset.Dataset.__len__": [[16, 19], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the total number of samples'", "\n", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_dataset.Dataset.__getitem__": [[20, 23], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "'Generates one sample of data'", "\n", "return", "self", ".", "data", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_dataset.my_collate.__init__": [[26, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_dataset.my_collate.__call__": [[29, 62], ["torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "range", "len", "max", "len", "LSub.append", "max", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "len", "max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch_raw", ")", ":", "\n", "#{'subject_ids': subject_ids, 'q_ids': q_ids, 'correct_ans': correct_ans,'ans': ans, 'labels': labels}", "\n", "        ", "batch", "=", "batch_raw", "\n", "L", "=", "[", "len", "(", "d", "[", "'q_ids'", "]", ")", "for", "d", "in", "batch", "]", "\n", "T", ",", "B", "=", "max", "(", "L", ")", ",", "len", "(", "L", ")", "\n", "LSub", "=", "[", "]", "\n", "max_sub_len", "=", "0", "\n", "for", "d", "in", "batch", ":", "\n", "            ", "sub_len", "=", "[", "len", "(", "ds", ")", "for", "ds", "in", "d", "[", "'subject_ids'", "]", "]", "\n", "LSub", ".", "append", "(", "sub_len", ")", "\n", "max_sub_len", "=", "max", "(", "max_sub_len", ",", "max", "(", "sub_len", ")", ")", "\n", "", "q_ids", "=", "torch", ".", "zeros", "(", "T", ",", "B", ")", ".", "long", "(", ")", "\n", "correct_ans", "=", "torch", ".", "zeros", "(", "T", ",", "B", ")", ".", "long", "(", ")", "+", "1", "\n", "ans", "=", "torch", ".", "zeros", "(", "T", ",", "B", ")", ".", "long", "(", ")", "+", "1", "\n", "labels", "=", "torch", ".", "zeros", "(", "T", ",", "B", ")", ".", "float", "(", ")", "\n", "subject_ids", "=", "torch", ".", "zeros", "(", "T", ",", "B", ",", "max_sub_len", ")", ".", "long", "(", ")", "\n", "subject_ids_mask", "=", "torch", ".", "zeros", "(", "T", ",", "B", ",", "max_sub_len", ")", ".", "long", "(", ")", "\n", "mask", "=", "torch", ".", "zeros", "(", "T", ",", "B", ")", ".", "long", "(", ")", "\n", "for", "idx", "in", "range", "(", "B", ")", ":", "\n", "            ", "q_ids", "[", ":", "L", "[", "idx", "]", ",", "idx", "]", "=", "torch", ".", "LongTensor", "(", "batch", "[", "idx", "]", "[", "'q_ids'", "]", ")", "\n", "correct_ans", "[", ":", "L", "[", "idx", "]", ",", "idx", "]", "=", "torch", ".", "LongTensor", "(", "\n", "batch", "[", "idx", "]", "[", "'correct_ans'", "]", ")", "\n", "ans", "[", ":", "L", "[", "idx", "]", ",", "idx", "]", "=", "torch", ".", "LongTensor", "(", "batch", "[", "idx", "]", "[", "'ans'", "]", ")", "\n", "labels", "[", ":", "L", "[", "idx", "]", ",", "idx", "]", "=", "torch", ".", "FloatTensor", "(", "batch", "[", "idx", "]", "[", "'labels'", "]", ")", "\n", "mask", "[", ":", "L", "[", "idx", "]", ",", "idx", "]", "=", "1", "\n", "for", "l_idx", "in", "range", "(", "L", "[", "idx", "]", ")", ":", "\n", "                ", "subject_ids", "[", "l_idx", ",", "idx", ",", ":", "LSub", "[", "idx", "]", "\n", "[", "l_idx", "]", "]", "=", "torch", ".", "LongTensor", "(", "batch", "[", "idx", "]", "[", "'subject_ids'", "]", "[", "l_idx", "]", ")", "\n", "subject_ids_mask", "[", "l_idx", ",", "idx", ",", ":", "LSub", "[", "idx", "]", "\n", "[", "l_idx", "]", "]", "=", "1", "\n", "\n", "", "", "out", "=", "{", "'subject_ids'", ":", "subject_ids", ",", "'q_ids'", ":", "q_ids", ",", "'correct_ans'", ":", "correct_ans", ",", "'ans'", ":", "ans", ",", "'labels'", ":", "labels", ",", "'mask'", ":", "mask", ",", "'subject_mask'", ":", "subject_ids_mask", ",", "'L'", ":", "L", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.LSTMModel.__init__": [[13, 37], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.GCNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_question", ",", "n_subject", ",", "hidden_dim", ",", "q_dim", ",", "task", ",", "dropout", "=", "0.25", ",", "s_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "q_embeddings", "=", "nn", ".", "Embedding", "(", "n_question", ",", "q_dim", ")", "\n", "self", ".", "s_embeddings", "=", "nn", ".", "Embedding", "(", "n_subject", ",", "s_dim", ")", "\n", "self", ".", "answer_embeddings", "=", "nn", ".", "Embedding", "(", "4", ",", "s_dim", ")", "\n", "self", ".", "label_embeddings", "=", "nn", ".", "Embedding", "(", "2", ",", "s_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "# [questions, subjects,  ans_embed, correct_ans_embed, label_embed], dim=-1))", "\n", "self", ".", "in_feature", "=", "s_dim", "*", "4", "+", "q_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "input_size", "=", "self", ".", "in_feature", ",", "hidden_size", "=", "hidden_dim", ",", "\n", "num_layers", "=", "1", ",", "batch_first", "=", "False", ",", "bidirectional", "=", "False", ")", "\n", "self", ".", "task", "=", "task", "\n", "#pred_input = [subjects, questions, forward_ht, correct_ans]", "\n", "self", ".", "pred_in_feature", "=", "hidden_dim", "+", "2", "*", "s_dim", "+", "q_dim", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "\n", "self", ".", "pred_in_feature", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "self", ".", "pred_in_feature", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "if", "self", ".", "task", "==", "'1'", ":", "\n", "            ", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "1", ")", "\n", "", "elif", "self", ".", "task", "==", "'2'", ":", "\n", "            ", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.LSTMModel.forward": [[38, 88], ["batch[].to().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "kt_model.LSTMModel.q_embeddings", "labels.long", "kt_model.LSTMModel.answer_embeddings", "kt_model.LSTMModel.dropout", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "kt_model.LSTMModel.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "output.squeeze.squeeze.view", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "kt_model.LSTMModel.dropout", "kt_model.LSTMModel.output_layer", "batch[].to", "batch[].to", "kt_model.LSTMModel.answer_embeddings", "kt_model.LSTMModel.label_embeddings", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "output.squeeze.squeeze.squeeze", "torch.nn.CrossEntropyLoss.", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "batch[].to", "batch[].to", "batch[].to", "kt_model.LSTMModel.s_embeddings", "batch[].to().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "kt_model.LSTMModel.layers", "batch[].to().unsqueeze.squeeze", "nn.CrossEntropyLoss.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.nn.Sigmoid.detach().cpu().numpy", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "batch[].to", "batch[].to().unsqueeze.float", "output.squeeze.squeeze.view", "ans.view", "nn.CrossEntropyLoss.view", "batch[].to().unsqueeze.squeeze", "nn.CrossEntropyLoss.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "pred.detach().cpu().numpy", "output.squeeze.squeeze.detach().cpu().numpy", "batch[].to", "torch.nn.Sigmoid.detach().cpu", "batch[].to().unsqueeze.float", "torch.max", "torch.max", "torch.max", "torch.max", "pred.detach().cpu", "output.squeeze.squeeze.detach().cpu", "torch.nn.Sigmoid.detach", "pred.detach", "output.squeeze.squeeze.detach", "torch.nn.Sigmoid."], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "ans", ",", "correct_ans", ",", "labels", "=", "batch", "[", "'ans'", "]", ".", "to", "(", "\n", "device", ")", "-", "1", ",", "batch", "[", "'correct_ans'", "]", ".", "to", "(", "device", ")", "-", "1", ",", "batch", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "seq_len", ",", "batch_size", ",", "data_length", "=", "ans", ".", "shape", "[", "0", "]", ",", "ans", ".", "shape", "[", "1", "]", ",", "batch", "[", "'L'", "]", "\n", "mask", "=", "batch", "[", "'mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "2", ")", "\n", "subjects", "=", "torch", ".", "sum", "(", "\n", "self", ".", "s_embeddings", "(", "batch", "[", "'subject_ids'", "]", ".", "to", "(", "device", ")", ")", "*", "batch", "[", "'subject_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "3", ")", ",", "dim", "=", "2", ")", "# T, B, s_dim", "\n", "questions", "=", "(", "self", ".", "q_embeddings", "(", "\n", "batch", "[", "'q_ids'", "]", ".", "to", "(", "device", ")", ")", ")", "# T, B,q_dim", "\n", "\n", "ans_", "=", "ans", "# + qs*4", "\n", "correct_ans_", "=", "correct_ans", "# + qs*4", "\n", "labels_", "=", "labels", ".", "long", "(", ")", "# + qs*2", "\n", "ans_embed", "=", "(", "self", ".", "answer_embeddings", "(", "ans_", ")", ")", "*", "mask", "\n", "correct_ans_embed", "=", "(", "self", ".", "answer_embeddings", "(", "correct_ans_", ")", ")", "\n", "label_embed", "=", "self", ".", "label_embeddings", "(", "labels_", ")", "*", "mask", "\n", "lstm_input", "=", "[", "ans_embed", ",", "correct_ans_embed", ",", "\n", "label_embed", ",", "questions", ",", "subjects", "]", "\n", "lstm_input", "=", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "lstm_input", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "packed_data", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "lstm_input", ",", "lengths", "=", "(", "data_length", ")", ",", "batch_first", "=", "False", ",", "enforce_sorted", "=", "False", ")", "\n", "packed_output", ",", "ht", "=", "self", ".", "rnn", "(", "packed_data", ")", "\n", "output", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "\n", "packed_output", ",", "batch_first", "=", "False", ")", "\n", "output", "=", "output", ".", "view", "(", "seq_len", ",", "batch_size", ",", "self", ".", "hidden_dim", ")", "\n", "init_state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_dim", ")", ".", "to", "(", "device", ")", "\n", "forward_ht", "=", "torch", ".", "cat", "(", "[", "init_state", ",", "output", "[", ":", "-", "1", ",", ":", ",", ":", "]", "]", ",", "dim", "=", "0", ")", "\n", "\n", "pred_input", "=", "[", "questions", ",", "subjects", ",", "forward_ht", ",", "correct_ans_embed", "]", "\n", "pred_input", "=", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "pred_input", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "output", "=", "self", ".", "output_layer", "(", "self", ".", "layers", "(", "pred_input", ")", "+", "pred_input", ")", "\n", "\n", "#", "\n", "if", "self", ".", "task", "==", "'1'", ":", "\n", "            ", "loss_fn", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "output", "=", "output", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss_fn", "(", "output", ",", "labels", ")", "\n", "loss", "=", "loss", "*", "mask", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "/", "torch", ".", "mean", "(", "(", "mask", ")", ".", "float", "(", ")", ")", "\n", "m", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "return", "loss", ",", "m", "(", "output", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "None", "\n", "", "elif", "self", ".", "task", "==", "'2'", ":", "\n", "            ", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "loss", "=", "loss_fn", "(", "output", ".", "view", "(", "-", "1", ",", "4", ")", ",", "ans", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", "=", "loss", ".", "view", "(", "-", "1", ",", "batch_size", ")", "*", "mask", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "/", "torch", ".", "mean", "(", "(", "mask", ")", ".", "float", "(", ")", ")", "\n", "pred", "=", "torch", ".", "max", "(", "output", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "+", "1", "\n", "return", "loss", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.AttentionModel.__init__": [[91, 118], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Sequential", "torch.nn.Sequential", "kt_model.MultiHeadAttention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.GCNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_question", ",", "n_subject", ",", "hidden_dim", ",", "q_dim", ",", "task", ",", "dropout", "=", "0.25", ",", "n_heads", "=", "1", ",", "s_dim", "=", "256", ",", "akt", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "q_embeddings", "=", "nn", ".", "Embedding", "(", "n_question", ",", "q_dim", ")", "\n", "self", ".", "s_embeddings", "=", "nn", ".", "Embedding", "(", "n_subject", ",", "s_dim", ")", "\n", "self", ".", "answer_embeddings", "=", "nn", ".", "Embedding", "(", "4", ",", "s_dim", ")", "\n", "self", ".", "label_embeddings", "=", "nn", ".", "Embedding", "(", "2", ",", "s_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "# [questions, subjects,  ans_embed, correct_ans_embed, label_embed], dim=-1))", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "task", "=", "task", "\n", "#pred_input = [subjects, questions, quizs, groups, forward_ht, user_features, features]", "\n", "self", ".", "pred_in_feature", "=", "hidden_dim", "+", "s_dim", "*", "2", "+", "q_dim", "\n", "####", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "\n", "self", ".", "pred_in_feature", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "self", ".", "pred_in_feature", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "if", "self", ".", "task", "==", "'1'", ":", "\n", "            ", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "1", ")", "\n", "", "elif", "self", ".", "task", "==", "'2'", ":", "\n", "            ", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "4", ")", "\n", "###", "\n", "", "d_key", "=", "q_dim", "+", "2", "*", "s_dim", "\n", "d_val", "=", "4", "*", "s_dim", "+", "q_dim", "\n", "self", ".", "attention_model", "=", "MultiHeadAttention", "(", "\n", "d_key", "=", "d_key", ",", "d_val", "=", "d_val", ",", "n_heads", "=", "n_heads", ",", "dropout", "=", "dropout", ",", "d_model", "=", "hidden_dim", ",", "akt", "=", "akt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.AttentionModel.forward": [[119, 164], ["batch[].to().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "kt_model.AttentionModel.q_embeddings", "labels.long", "kt_model.AttentionModel.answer_embeddings", "batch[].to().unsqueeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "kt_model.AttentionModel.attention_model", "kt_model.AttentionModel.dropout", "kt_model.AttentionModel.output_layer", "batch[].to", "batch[].to", "kt_model.AttentionModel.answer_embeddings", "kt_model.AttentionModel.label_embeddings", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "output.squeeze.squeeze.squeeze", "torch.nn.CrossEntropyLoss.", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "batch[].to", "batch[].to", "batch[].to", "kt_model.AttentionModel.s_embeddings", "batch[].to().unsqueeze", "kt_model.AttentionModel.layers", "batch[].to().unsqueeze.squeeze", "nn.CrossEntropyLoss.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.nn.Sigmoid.detach().cpu().numpy", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "batch[].to", "batch[].to().unsqueeze.float", "output.squeeze.squeeze.view", "ans.view", "nn.CrossEntropyLoss.view", "batch[].to().unsqueeze.squeeze", "nn.CrossEntropyLoss.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "pred.detach().cpu().numpy", "output.squeeze.squeeze.detach().cpu().numpy", "batch[].to", "torch.nn.Sigmoid.detach().cpu", "batch[].to().unsqueeze.float", "torch.max", "torch.max", "torch.max", "torch.max", "pred.detach().cpu", "output.squeeze.squeeze.detach().cpu", "torch.nn.Sigmoid.detach", "pred.detach", "output.squeeze.squeeze.detach", "torch.nn.Sigmoid."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "ans", ",", "correct_ans", ",", "labels", "=", "batch", "[", "'ans'", "]", ".", "to", "(", "\n", "device", ")", "-", "1", ",", "batch", "[", "'correct_ans'", "]", ".", "to", "(", "device", ")", "-", "1", ",", "batch", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "seq_len", ",", "batch_size", ",", "data_length", "=", "ans", ".", "shape", "[", "0", "]", ",", "ans", ".", "shape", "[", "1", "]", ",", "batch", "[", "'L'", "]", "\n", "mask", "=", "batch", "[", "'mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "2", ")", "\n", "subjects", "=", "torch", ".", "sum", "(", "\n", "self", ".", "s_embeddings", "(", "batch", "[", "'subject_ids'", "]", ".", "to", "(", "device", ")", ")", "*", "batch", "[", "'subject_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "3", ")", ",", "dim", "=", "2", ")", "# T, B, s_dim", "\n", "questions", "=", "(", "self", ".", "q_embeddings", "(", "\n", "batch", "[", "'q_ids'", "]", ".", "to", "(", "device", ")", ")", ")", "# T, B,q_dim", "\n", "\n", "ans_", "=", "ans", "# + qs*4", "\n", "correct_ans_", "=", "correct_ans", "# + qs*4", "\n", "labels_", "=", "labels", ".", "long", "(", ")", "# + qs*2", "\n", "ans_embed", "=", "(", "self", ".", "answer_embeddings", "(", "ans_", ")", ")", "*", "mask", "\n", "correct_ans_embed", "=", "(", "self", ".", "answer_embeddings", "(", "correct_ans_", ")", ")", "\n", "label_embed", "=", "self", ".", "label_embeddings", "(", "labels_", ")", "*", "mask", "\n", "\n", "# Add Attention", "\n", "attn_mask", "=", "mask", ".", "squeeze", "(", "2", ")", "# T,B, 1", "\n", "query", "=", "torch", ".", "cat", "(", "[", "questions", ",", "subjects", ",", "correct_ans_embed", "]", ",", "dim", "=", "-", "1", ")", "# T, B, dim", "\n", "value", "=", "torch", ".", "cat", "(", "[", "label_embed", ",", "ans_embed", ",", "correct_ans_embed", ",", "\n", "questions", ",", "subjects", "]", ",", "dim", "=", "-", "1", ")", "# T,B, dim", "\n", "attention_state", "=", "self", ".", "attention_model", "(", "\n", "query", ",", "query", ",", "value", ",", "attn_mask", ")", "# T,B,dim", "\n", "pred_input", "=", "[", "attention_state", ",", "questions", ",", "subjects", ",", "correct_ans_embed", "]", "\n", "# End Attention", "\n", "\n", "pred_input", "=", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "pred_input", ",", "dim", "=", "-", "1", ")", ")", "\n", "output", "=", "self", ".", "output_layer", "(", "self", ".", "layers", "(", "pred_input", ")", "+", "pred_input", ")", "\n", "#", "\n", "if", "self", ".", "task", "==", "'1'", ":", "\n", "            ", "loss_fn", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "output", "=", "output", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss_fn", "(", "output", ",", "labels", ")", "\n", "loss", "=", "loss", "*", "mask", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "/", "torch", ".", "mean", "(", "(", "mask", ")", ".", "float", "(", ")", ")", "\n", "m", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "return", "loss", ",", "m", "(", "output", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "None", "\n", "", "elif", "self", ".", "task", "==", "'2'", ":", "\n", "            ", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "loss", "=", "loss_fn", "(", "output", ".", "view", "(", "-", "1", ",", "4", ")", ",", "ans", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", "=", "loss", ".", "view", "(", "-", "1", ",", "batch_size", ")", "*", "mask", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "/", "torch", ".", "mean", "(", "(", "mask", ")", ".", "float", "(", ")", ")", "\n", "pred", "=", "torch", ".", "max", "(", "output", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "+", "1", "\n", "return", "loss", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.MultiHeadAttention.__init__": [[167, 194], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "kt_model.MultiHeadAttention._reset_parameters", "torch.nn.Parameter", "torch.nn.Parameter", "kt_model.CosinePositionalEmbedding", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.GCNModel.__init__", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.MultiHeadAttention._reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "d_key", ",", "d_val", ",", "d_model", ",", "n_heads", ",", "dropout", ",", "bias", "=", "True", ",", "akt", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        It has projection layer for getting keys, queries and values. Followed by attention and a connected layer.\n        \"\"\"", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "h", "=", "n_heads", "\n", "self", ".", "v_linear", "=", "nn", ".", "Linear", "(", "d_val", ",", "d_model", ",", "bias", "=", "bias", ")", "\n", "self", ".", "k_linear", "=", "nn", ".", "Linear", "(", "d_key", ",", "d_model", ",", "bias", "=", "bias", ")", "\n", "self", ".", "q_linear", "=", "nn", ".", "Linear", "(", "d_key", ",", "d_model", ",", "bias", "=", "bias", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "proj_bias", "=", "bias", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ",", "bias", "=", "bias", ")", "\n", "#", "\n", "# Two layer norm layer and two droput layer", "\n", "self", ".", "layer_norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "layer_norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "self", ".", "akt", "=", "akt", "\n", "if", "self", ".", "akt", ":", "\n", "            ", "self", ".", "gammas", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "n_heads", ",", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gammas", "=", "None", "\n", "self", ".", "position_embedding", "=", "CosinePositionalEmbedding", "(", "d_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.MultiHeadAttention._reset_parameters": [[195, 204], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "xavier_uniform_", "(", "self", ".", "k_linear", ".", "weight", ")", "\n", "xavier_uniform_", "(", "self", ".", "v_linear", ".", "weight", ")", "\n", "xavier_uniform_", "(", "self", ".", "q_linear", ".", "weight", ")", "\n", "if", "self", ".", "proj_bias", ":", "\n", "            ", "constant_", "(", "self", ".", "k_linear", ".", "bias", ",", "0.", ")", "\n", "constant_", "(", "self", ".", "v_linear", ".", "bias", ",", "0.", ")", "\n", "constant_", "(", "self", ".", "q_linear", ".", "bias", ",", "0.", ")", "\n", "constant_", "(", "self", ".", "out_proj", ".", "bias", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.MultiHeadAttention.forward": [[205, 232], ["kt_model.MultiHeadAttention.k_linear().view", "kt_model.MultiHeadAttention.q_linear().view", "kt_model.MultiHeadAttention.v_linear().view", "k.permute.permute.permute", "q.permute.permute.permute", "v.permute.permute.permute", "kt_model.attention", "attention.permute().contiguous().view", "kt_model.MultiHeadAttention.layer_norm1", "kt_model.MultiHeadAttention.linear2", "qq.size", "qq.size", "kt_model.MultiHeadAttention.dropout", "kt_model.MultiHeadAttention.dropout", "kt_model.MultiHeadAttention.layer_norm2", "kt_model.MultiHeadAttention.position_embedding().expand", "math.sqrt", "kt_model.MultiHeadAttention.k_linear", "kt_model.MultiHeadAttention.q_linear", "kt_model.MultiHeadAttention.v_linear", "attention.permute().contiguous", "kt_model.MultiHeadAttention.out_proj", "kt_model.MultiHeadAttention.activation", "kt_model.MultiHeadAttention.linear1", "kt_model.MultiHeadAttention.position_embedding", "attention.permute"], "methods", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.attention"], ["", "", "def", "forward", "(", "self", ",", "qq", ",", "kk", ",", "vv", ",", "mask", ")", ":", "\n", "        ", "T", ",", "B", "=", "qq", ".", "size", "(", "0", ")", ",", "qq", ".", "size", "(", "1", ")", "\n", "if", "not", "self", ".", "akt", ":", "\n", "            ", "position_embed", "=", "self", ".", "position_embedding", "(", "qq", ")", ".", "expand", "(", "-", "1", ",", "B", ",", "-", "1", ")", "/", "math", ".", "sqrt", "(", "self", ".", "d_model", ")", "\n", "qq", "=", "qq", "+", "position_embed", "\n", "kk", "=", "kk", "+", "position_embed", "\n", "# perform linear operation and split into h heads", "\n", "#T,B, h,d_k", "\n", "", "k", "=", "self", ".", "k_linear", "(", "qq", ")", ".", "view", "(", "T", ",", "B", ",", "self", ".", "h", ",", "-", "1", ")", "\n", "q", "=", "self", ".", "q_linear", "(", "kk", ")", ".", "view", "(", "T", ",", "B", ",", "self", ".", "h", ",", "-", "1", ")", "\n", "v", "=", "self", ".", "v_linear", "(", "vv", ")", ".", "view", "(", "T", ",", "B", ",", "self", ".", "h", ",", "-", "1", ")", "\n", "# transpose to get dimensions bs * h * sl * d_model", "\n", "k", "=", "k", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", "\n", "q", "=", "q", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", "\n", "v", "=", "v", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", "\n", "# calculate attention using function we will define next", "\n", "scores", "=", "attention", "(", "q", ",", "k", ",", "v", ",", "mask", ",", "self", ".", "gammas", ")", "# BS,h, T, d_k", "\n", "\n", "# concatenate heads and put through final linear layer", "\n", "concat", "=", "scores", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "T", ",", "B", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "layer_norm1", "(", "self", ".", "dropout", "(", "\n", "self", ".", "out_proj", "(", "concat", ")", ")", ")", "# T,B,d_model", "\n", "#", "\n", "output_1", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "\n", "self", ".", "activation", "(", "self", ".", "linear1", "(", "output", ")", ")", ")", ")", "\n", "output", "=", "output", "+", "self", ".", "layer_norm2", "(", "output_1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.CosinePositionalEmbedding.__init__": [[264, 275], ["torch.nn.Module.__init__", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze.unsqueeze.unsqueeze", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.GCNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "max_len", "=", "512", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Compute the positional encodings once in log space.", "\n", "pe", "=", "0.1", "*", "torch", ".", "randn", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "1", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "pe", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.CosinePositionalEmbedding.forward": [[276, 278], ["x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "weight", "[", ":", "x", ".", "size", "(", "0", ")", ",", ":", ",", ":", "]", "# ( seq, 1,  Feature)", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.DKVMN.__init__": [[281, 316], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "kt_model.MEMORY", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.GCNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_question", ",", "n_subject", ",", "hidden_dim", ",", "q_dim", ",", "task", ",", "dropout", ",", "s_dim", ",", "memory_size", "=", "50", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_question", "=", "n_question", "\n", "self", ".", "memory_size", "=", "memory_size", "\n", "self", ".", "memory_key_state_dim", "=", "q_dim", "+", "s_dim", "\n", "self", ".", "memory_value_state_dim", "=", "hidden_dim", "\n", "self", ".", "q_embeddings", "=", "nn", ".", "Embedding", "(", "n_question", ",", "q_dim", ")", "\n", "self", ".", "s_embeddings", "=", "nn", ".", "Embedding", "(", "n_subject", ",", "s_dim", ")", "\n", "self", ".", "answer_embeddings", "=", "nn", ".", "Embedding", "(", "4", ",", "s_dim", ")", "\n", "self", ".", "label_embeddings", "=", "nn", ".", "Embedding", "(", "2", ",", "s_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "# Initialize Memory", "\n", "# mx.sym.Variable('init_memory_key_weight')", "\n", "self", ".", "init_memory_key", "=", "nn", ".", "Parameter", "(", "\n", "0.01", "*", "torch", ".", "randn", "(", "self", ".", "memory_size", ",", "self", ".", "memory_key_state_dim", ")", ")", "\n", "# (self.memory_size, self.memory_value_state_dim)", "\n", "self", ".", "init_memory_value", "=", "nn", ".", "Parameter", "(", "\n", "0.1", "*", "torch", ".", "randn", "(", "self", ".", "memory_size", ",", "self", ".", "memory_value_state_dim", ")", ")", "\n", "\n", "self", ".", "memory", "=", "MEMORY", "(", "memory_size", "=", "self", ".", "memory_size", ",", "memory_key_state_dim", "=", "self", ".", "memory_key_state_dim", ",", "\n", "memory_value_state_dim", "=", "self", ".", "memory_value_state_dim", ",", "qa_embed_dim", "=", "q_dim", "+", "4", "*", "s_dim", ")", "\n", "\n", "self", ".", "task", "=", "task", "\n", "#pred_input = [subjects, questions, forward_ht, correct_ans]", "\n", "self", ".", "pred_in_feature", "=", "hidden_dim", "+", "2", "*", "s_dim", "+", "q_dim", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "\n", "self", ".", "pred_in_feature", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "self", ".", "pred_in_feature", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "if", "self", ".", "task", "==", "'1'", ":", "\n", "            ", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "1", ")", "\n", "", "elif", "self", ".", "task", "==", "'2'", ":", "\n", "            ", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.DKVMN.forward": [[317, 382], ["batch[].to().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "kt_model.DKVMN.q_embeddings", "labels.long", "kt_model.DKVMN.answer_embeddings", "kt_model.DKVMN.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "kt_model.DKVMN.init_memory_value[].expand", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "kt_model.DKVMN.dropout", "kt_model.DKVMN.output_layer", "batch[].to", "batch[].to", "kt_model.DKVMN.answer_embeddings", "kt_model.DKVMN.label_embeddings", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ans.size", "ans.size", "mem.attention", "mem.read", "value_read_content_l.append", "mem.write", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "output.squeeze.squeeze.squeeze", "torch.nn.CrossEntropyLoss.", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "batch[].to", "batch[].to", "batch[].to", "kt_model.DKVMN.s_embeddings", "batch[].to().unsqueeze", "kt_model.DKVMN.layers", "batch[].to().unsqueeze.squeeze", "nn.CrossEntropyLoss.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.nn.Sigmoid.detach().cpu().numpy", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "batch[].to", "batch[].to().unsqueeze.float", "output.squeeze.squeeze.view", "ans.view", "nn.CrossEntropyLoss.view", "batch[].to().unsqueeze.squeeze", "nn.CrossEntropyLoss.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "pred.detach().cpu().numpy", "output.squeeze.squeeze.detach().cpu().numpy", "batch[].to", "torch.nn.Sigmoid.detach().cpu", "batch[].to().unsqueeze.float", "torch.max", "torch.max", "torch.max", "torch.max", "pred.detach().cpu", "output.squeeze.squeeze.detach().cpu", "torch.nn.Sigmoid.detach", "pred.detach", "output.squeeze.squeeze.detach", "torch.nn.Sigmoid."], "methods", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.attention", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.MEMORY.read", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.MEMORY.write"], ["", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "ans", ",", "correct_ans", ",", "labels", "=", "batch", "[", "'ans'", "]", ".", "to", "(", "\n", "device", ")", "-", "1", ",", "batch", "[", "'correct_ans'", "]", ".", "to", "(", "device", ")", "-", "1", ",", "batch", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "seq_len", ",", "batch_size", ",", "data_length", "=", "ans", ".", "shape", "[", "0", "]", ",", "ans", ".", "shape", "[", "1", "]", ",", "batch", "[", "'L'", "]", "\n", "mask", "=", "batch", "[", "'mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "2", ")", "\n", "subjects", "=", "torch", ".", "sum", "(", "\n", "self", ".", "s_embeddings", "(", "batch", "[", "'subject_ids'", "]", ".", "to", "(", "device", ")", ")", "*", "batch", "[", "'subject_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "3", ")", ",", "dim", "=", "2", ")", "# T, B, s_dim", "\n", "questions", "=", "(", "self", ".", "q_embeddings", "(", "\n", "batch", "[", "'q_ids'", "]", ".", "to", "(", "device", ")", ")", ")", "# T, B,q_dim", "\n", "\n", "ans_", "=", "ans", "# + qs*4", "\n", "correct_ans_", "=", "correct_ans", "# + qs*4", "\n", "labels_", "=", "labels", ".", "long", "(", ")", "# + qs*2", "\n", "ans_embed", "=", "(", "self", ".", "answer_embeddings", "(", "ans_", ")", ")", "*", "mask", "\n", "correct_ans_embed", "=", "(", "self", ".", "answer_embeddings", "(", "correct_ans_", ")", ")", "\n", "label_embed", "=", "self", ".", "label_embeddings", "(", "labels_", ")", "*", "mask", "\n", "\n", "lstm_input", "=", "[", "ans_embed", ",", "correct_ans_embed", ",", "\n", "label_embed", ",", "questions", ",", "subjects", "]", "\n", "lstm_input", "=", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "lstm_input", ",", "dim", "=", "-", "1", ")", ")", "\n", "qs", "=", "torch", ".", "cat", "(", "[", "questions", ",", "subjects", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "batch_size", ",", "seq_len", "=", "ans", ".", "size", "(", "1", ")", ",", "ans", ".", "size", "(", "0", ")", "\n", "memory_value", "=", "self", ".", "init_memory_value", "[", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "\n", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "init_memory_key", "=", "self", ".", "init_memory_key", "\n", "\n", "mem", "=", "self", ".", "memory", "\n", "value_read_content_l", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "seq_len", ")", ":", "\n", "# Attention", "\n", "            ", "q", "=", "qs", "[", "i", "]", "\n", "correlation_weight", "=", "mem", ".", "attention", "(", "q", ",", "init_memory_key", ")", "\n", "# Read Process", "\n", "# Shape (batch_size, memory_state_dim)", "\n", "read_content", "=", "mem", ".", "read", "(", "memory_value", ",", "correlation_weight", ")", "\n", "# save intermedium data", "\n", "value_read_content_l", ".", "append", "(", "read_content", "[", "None", ",", ":", ",", ":", "]", ")", "\n", "# Write Process", "\n", "qa", "=", "lstm_input", "[", "i", "]", "\n", "memory_value", "=", "mem", ".", "write", "(", "qa", ",", "memory_value", ",", "correlation_weight", ")", "\n", "\n", "", "forward_ht", "=", "torch", ".", "cat", "(", "value_read_content_l", ",", "dim", "=", "0", ")", "\n", "\n", "pred_input", "=", "[", "questions", ",", "subjects", ",", "forward_ht", ",", "correct_ans_embed", "]", "\n", "pred_input", "=", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "pred_input", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "output", "=", "self", ".", "output_layer", "(", "self", ".", "layers", "(", "pred_input", ")", "+", "pred_input", ")", "\n", "\n", "#", "\n", "if", "self", ".", "task", "==", "'1'", ":", "\n", "            ", "loss_fn", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "output", "=", "output", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss_fn", "(", "output", ",", "labels", ")", "\n", "loss", "=", "loss", "*", "mask", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "/", "torch", ".", "mean", "(", "(", "mask", ")", ".", "float", "(", ")", ")", "\n", "m", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "return", "loss", ",", "m", "(", "output", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "None", "\n", "", "elif", "self", ".", "task", "==", "'2'", ":", "\n", "            ", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "loss", "=", "loss_fn", "(", "output", ".", "view", "(", "-", "1", ",", "4", ")", ",", "ans", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", "=", "loss", ".", "view", "(", "-", "1", ",", "batch_size", ")", "*", "mask", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "/", "torch", ".", "mean", "(", "(", "mask", ")", ".", "float", "(", ")", ")", "\n", "pred", "=", "torch", ".", "max", "(", "output", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "+", "1", "\n", "return", "loss", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.MEMORY.__init__": [[390, 411], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.GCNModel.__init__"], ["def", "__init__", "(", "self", ",", "memory_size", ",", "memory_key_state_dim", ",", "memory_value_state_dim", ",", "qa_embed_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        :param memory_size:             scalar\n        :param memory_key_state_dim:    scalar\n        :param memory_value_state_dim:  scalar\n        :param init_memory_key:         Shape (memory_size, memory_key_state_dim)\n        :param init_memory_value:       Shape (batch_size, memory_size, memory_value_state_dim)\n        \"\"\"", "\n", "self", ".", "memory_size", "=", "memory_size", "\n", "self", ".", "qa_embed_dim", "=", "qa_embed_dim", "\n", "self", ".", "memory_key_state_dim", "=", "memory_key_state_dim", "\n", "self", ".", "memory_value_state_dim", "=", "memory_value_state_dim", "\n", "\n", "self", ".", "erase_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "qa_embed_dim", ",", "\n", "self", ".", "memory_value_state_dim", ")", ",", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "add_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "qa_embed_dim", ",", "\n", "self", ".", "memory_value_state_dim", ")", ",", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.MEMORY.attention": [[413, 427], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax.", "nn.LogSoftmax.exp", "torch.t", "torch.t", "torch.t", "torch.t"], "methods", ["None"], ["", "def", "attention", "(", "self", ",", "control_input", ",", "memory", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n            control_input:          Shape (batch_size, control_state_dim)\n            memory:                 Shape (memory_size, memory_state_dim)\n        Returns\n            correlation_weight:     Shape (batch_size, memory_size)\n        \"\"\"", "\n", "similarity_score", "=", "torch", ".", "matmul", "(", "\n", "control_input", ",", "torch", ".", "t", "(", "memory", ")", ")", "# BS, MS", "\n", "m", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "# Shape: (batch_size, memory_size)", "\n", "log_correlation_weight", "=", "m", "(", "similarity_score", ")", "\n", "return", "log_correlation_weight", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.MEMORY.read": [[428, 435], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape"], "methods", ["None"], ["", "def", "read", "(", "self", ",", "memory_value", ",", "read_weight", ")", ":", "\n", "        ", "read_weight", "=", "torch", ".", "reshape", "(", "\n", "read_weight", ",", "shape", "=", "(", "-", "1", ",", "1", ",", "self", ".", "memory_size", ")", ")", "\n", "read_content", "=", "torch", ".", "matmul", "(", "read_weight", ",", "memory_value", ")", "\n", "read_content", "=", "torch", ".", "reshape", "(", "read_content", ",", "# Shape (batch_size, 1, memory_state_dim)", "\n", "shape", "=", "(", "-", "1", ",", "self", ".", "memory_value_state_dim", ")", ")", "\n", "return", "read_content", "# (batch_size, memory_state_dim)", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.MEMORY.write": [[436, 459], ["kt_model.MEMORY.erase_net", "kt_model.MEMORY.add_net", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape"], "methods", ["None"], ["", "def", "write", "(", "self", ",", "control_input", ",", "memory", ",", "write_weight", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n            control_input:      Shape (batch_size, control_state_dim)\n            write_weight:       Shape (batch_size, memory_size)\n            memory:             Shape (batch_size, memory_size, memory_state_dim)\n        Returns\n            new_memory:         Shape (batch_size, memory_size, memory_state_dim)\n        \"\"\"", "\n", "\n", "# erase_signal  Shape (batch_size, memory_state_dim)", "\n", "erase_signal", "=", "self", ".", "erase_net", "(", "control_input", ")", "\n", "# add_signal  Shape (batch_size, memory_state_dim)", "\n", "add_signal", "=", "self", ".", "add_net", "(", "control_input", ")", "\n", "# erase_mult  Shape (batch_size, memory_size, memory_state_dim)", "\n", "\n", "erase_mult", "=", "1", "-", "torch", ".", "matmul", "(", "torch", ".", "reshape", "(", "write_weight", ",", "shape", "=", "(", "-", "1", ",", "self", ".", "memory_size", ",", "1", ")", ")", ",", "\n", "torch", ".", "reshape", "(", "erase_signal", ",", "shape", "=", "(", "-", "1", ",", "1", ",", "self", ".", "memory_value_state_dim", ")", ")", ")", "\n", "\n", "aggre_add_signal", "=", "torch", ".", "matmul", "(", "torch", ".", "reshape", "(", "write_weight", ",", "shape", "=", "(", "-", "1", ",", "self", ".", "memory_size", ",", "1", ")", ")", ",", "\n", "torch", ".", "reshape", "(", "add_signal", ",", "shape", "=", "(", "-", "1", ",", "1", ",", "self", ".", "memory_value_state_dim", ")", ")", ")", "\n", "new_memory", "=", "memory", "*", "erase_mult", "+", "aggre_add_signal", "\n", "return", "new_memory", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.attention": [[236, 261], ["torch.cat.masked_fill_", "numpy.triu().astype", "torch.cat.masked_fill_", "torch.softmax", "torch.zeros().to", "torch.zeros().to", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.arange().expand().to", "torch.arange().expand().to", "torch.arange().expand().to.transpose().contiguous", "torch.sqrt().to", "torch.sqrt().to", "torch.nn.Softplus", "torch.clamp", "torch.clamp", "k.transpose", "q.size", "numpy.triu", "nn.Softplus.", "torch.clamp", "torch.clamp", "torch.zeros", "torch.zeros", "mask.transpose", "numpy.ones", "torch.from_numpy", "torch.from_numpy", "torch.arange().expand", "torch.arange().expand", "torch.arange().expand().to.transpose", "torch.sqrt", "torch.sqrt", "[].type", "torch.arange", "torch.arange", "torch.abs", "torch.abs"], "function", ["None"], ["", "", "def", "attention", "(", "q", ",", "k", ",", "v", ",", "mask", ",", "gamma", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This is called by Multi-head atention object to find the values.\n    \"\"\"", "\n", "scores", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "q", ".", "size", "(", "3", ")", ")", "# BS, h, seqlen, seqlen", "\n", "bs", ",", "head", ",", "seqlen", "=", "scores", ".", "size", "(", "0", ")", ",", "scores", ".", "size", "(", "1", ")", ",", "scores", ".", "size", "(", "2", ")", "\n", "scores", ".", "masked_fill_", "(", "mask", ".", "transpose", "(", "1", ",", "0", ")", "[", ":", ",", "None", ",", "None", ",", ":", "]", "==", "0", ",", "-", "1e32", ")", "\n", "nopeek_mask", "=", "np", ".", "triu", "(", "np", ".", "ones", "(", "(", "1", ",", "1", ",", "seqlen", ",", "seqlen", ")", ")", ",", "k", "=", "0", ")", ".", "astype", "(", "'uint8'", ")", "\n", "nopeek_mask", "=", "(", "torch", ".", "from_numpy", "(", "nopeek_mask", ")", "==", "0", ")", ".", "to", "(", "device", ")", "\n", "if", "gamma", "is", "not", "None", ":", "\n", "        ", "x1", "=", "torch", ".", "arange", "(", "seqlen", ")", ".", "expand", "(", "seqlen", ",", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "x2", "=", "x1", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "position_effect", "=", "torch", ".", "sqrt", "(", "torch", ".", "abs", "(", "x1", "-", "x2", ")", "[", "None", ",", ":", ",", ":", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", ".", "to", "(", "device", ")", "# 1, seqlen, seqlen", "\n", "m", "=", "nn", ".", "Softplus", "(", ")", "\n", "gamma", "=", "-", "1.", "*", "m", "(", "gamma", ")", "\n", "# Now after do exp(gamma*distance) and then clamp to 1e-5 to 1e5", "\n", "total_effect", "=", "torch", ".", "clamp", "(", "torch", ".", "clamp", "(", "(", "position_effect", "*", "gamma", ")", ".", "exp", "(", ")", ",", "min", "=", "1e-5", ")", ",", "max", "=", "1e5", ")", "\n", "scores", "=", "scores", "*", "total_effect", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "scores", ".", "masked_fill_", "(", "nopeek_mask", "==", "0", ",", "-", "1e32", ")", "\n", "scores", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "# BS,8,seqlen,seqlen", "\n", "pad_zero", "=", "torch", ".", "zeros", "(", "bs", ",", "head", ",", "1", ",", "seqlen", ")", ".", "to", "(", "device", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "pad_zero", ",", "scores", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "]", ",", "dim", "=", "2", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "scores", ",", "v", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.process_ednet.f": [[15, 53], ["pandas.read_csv().sort_values", "pd.read_csv().sort_values.iterrows", "q_ids.append", "correct_ans.append", "int", "name.split", "pandas.read_csv", "ans.append", "int", "labels.append", "labels.append", "len", "times.append", "times.append", "print", "print", "int", "int"], "function", ["None"], ["def", "f", "(", "name", ")", ":", "\n", "    ", "global", "q_map", ",", "abcd_map", "\n", "path", "=", "RAW_DIR", "+", "name", "\n", "user_id", "=", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "[", "1", ":", "]", "\n", "user_df", "=", "pd", ".", "read_csv", "(", "path", ")", ".", "sort_values", "(", "'timestamp'", ")", "\n", "q_ids", ",", "correct_ans", ",", "ans", ",", "labels", ",", "times", ",", "quiz_ids", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "subject_ids", "=", "[", "]", "\n", "last_timestamp", "=", "None", "\n", "for", "_", ",", "row", "in", "user_df", ".", "iterrows", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "ans", ".", "append", "(", "abcd_map", "[", "row", "[", "'user_answer'", "]", "]", ")", "\n", "\n", "", "except", ":", "\n", "            ", "print", "(", "user_id", ")", "\n", "print", "(", "row", ")", "\n", "continue", "\n", "", "q_ids", ".", "append", "(", "int", "(", "row", "[", "'question_id'", "]", "[", "1", ":", "]", ")", ")", "\n", "correct_ans", ".", "append", "(", "\n", "q_map", "[", "int", "(", "row", "[", "'question_id'", "]", "[", "1", ":", "]", ")", "]", "[", "'correct_ans'", "]", ")", "\n", "\n", "\n", "\n", "if", "correct_ans", "[", "-", "1", "]", "==", "ans", "[", "-", "1", "]", ":", "\n", "            ", "labels", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "labels", ".", "append", "(", "0", ")", "\n", "\n", "", "if", "len", "(", "times", ")", ">", "0", ":", "\n", "            ", "times", ".", "append", "(", "(", "int", "(", "row", "[", "'timestamp'", "]", ")", "-", "last_timestamp", ")", "/", "86400000.", ")", "\n", "", "else", ":", "\n", "            ", "times", ".", "append", "(", "0.", ")", "\n", "", "last_timestamp", "=", "row", "[", "'timestamp'", "]", "\n", "", "subject_ids", "=", "[", "q_map", "[", "d", "]", "[", "'tags'", "]", "for", "d", "in", "q_ids", "]", "\n", "quiz_ids", "=", "[", "q_map", "[", "d", "]", "[", "'bundle_id'", "]", "for", "d", "in", "q_ids", "]", "\n", "\n", "out", "=", "{", "'user_id'", ":", "int", "(", "user_id", ")", ",", "'subject_ids'", ":", "subject_ids", ",", "'q_ids'", ":", "q_ids", ",", "'correct_ans'", ":", "correct_ans", ",", "\n", "'ans'", ":", "ans", ",", "'labels'", ":", "labels", ",", "'times'", ":", "times", ",", "'quiz_ids'", ":", "quiz_ids", "}", "\n", "return", "out", "\n", "", "def", "f2", "(", "d", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.process_ednet.f2": [[53, 67], ["temp_subjects.append"], "function", ["None"], ["", "def", "f2", "(", "d", ")", ":", "\n", "    ", "schema", "=", "[", "'subject_ids'", ",", "'q_ids'", ",", "'correct_ans'", ",", "'ans'", ",", "'labels'", "]", "\n", "global", "convert_mapper", "\n", "temp_subjects", "=", "[", "]", "\n", "for", "ds", "in", "d", "[", "'subject_ids'", "]", ":", "\n", "        ", "temp", "=", "[", "convert_mapper", "[", "'tag_id'", "]", "[", "dss", "]", "for", "dss", "in", "ds", "]", "\n", "temp_subjects", ".", "append", "(", "temp", ")", "\n", "", "d", "[", "'subject_ids'", "]", "=", "temp_subjects", "\n", "d", "[", "'q_ids'", "]", "=", "[", "convert_mapper", "[", "'q_id'", "]", "[", "dss", "]", "for", "dss", "in", "d", "[", "'q_ids'", "]", "]", "\n", "temp_d", "=", "{", "}", "\n", "for", "field", "in", "schema", ":", "\n", "        ", "temp_d", "[", "field", "]", "=", "d", "[", "field", "]", "\n", "", "d", "=", "temp_d", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.process_ednet.main": [[68, 85], ["pandas.read_csv", "pd.read_csv.iterrows", "os.listdir", "utils.dump_json", "utils.dump_json", "utils.dump_json", "int", "row[].split", "int", "multiprocessing.Pool", "p.map", "int"], "function", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.dump_json", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.dump_json", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.dump_json"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "q_map", "\n", "question_df", "=", "pd", ".", "read_csv", "(", "'../data/contents/questions.csv'", ")", "\n", "for", "_", ",", "row", "in", "question_df", ".", "iterrows", "(", ")", ":", "\n", "        ", "q_id", "=", "int", "(", "row", "[", "'question_id'", "]", "[", "1", ":", "]", ")", "\n", "correct_answer", "=", "abcd_map", "[", "row", "[", "'correct_answer'", "]", "]", "\n", "tags", "=", "row", "[", "'tags'", "]", ".", "split", "(", "';'", ")", "\n", "tags", "=", "[", "int", "(", "d", ")", "for", "d", "in", "tags", "]", "\n", "bundle", "=", "int", "(", "row", "[", "'bundle_id'", "]", "[", "1", ":", "]", ")", "\n", "q_map", "[", "q_id", "]", "=", "{", "'correct_ans'", ":", "correct_answer", ",", "'tags'", ":", "tags", ",", "'bundle_id'", ":", "bundle", "}", "\n", "#res = f('u560.csv')", "\n", "", "file_names", "=", "os", ".", "listdir", "(", "RAW_DIR", ")", "\n", "with", "Pool", "(", "30", ")", "as", "p", ":", "\n", "        ", "results", "=", "p", ".", "map", "(", "f", ",", "file_names", ")", "\n", "", "dump_json", "(", "'data/ednet.json'", ",", "results", ")", "\n", "dump_json", "(", "'data/ednet_sample.json'", ",", "results", "[", ":", "100", "]", ")", "\n", "dump_json", "(", "'data/q_map.json'", ",", "q_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.process_ednet.main2": [[86, 104], ["utils.open_json", "utils.open_json.items", "utils.dump_json", "utils.open_json", "utils.dump_json", "utils.dump_json", "len", "multiprocessing.Pool", "p.map", "v[].append", "int", "int", "len"], "function", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.open_json", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.dump_json", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.open_json", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.dump_json", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.dump_json"], ["", "def", "main2", "(", ")", ":", "\n", "    ", "global", "q_map", ",", "convert_mapper", "\n", "q_map", "=", "open_json", "(", "'data/q_map.json'", ")", "\n", "convert_mapper", "=", "{", "'q_id'", ":", "{", "}", ",", "'tag_id'", ":", "{", "}", "}", "\n", "for", "q", ",", "v", "in", "q_map", ".", "items", "(", ")", ":", "\n", "        ", "convert_mapper", "[", "'q_id'", "]", "[", "int", "(", "q", ")", "]", "=", "len", "(", "convert_mapper", "[", "'q_id'", "]", ")", "\n", "v", "[", "'new_q_id'", "]", "=", "convert_mapper", "[", "'q_id'", "]", "[", "int", "(", "q", ")", "]", "\n", "v", "[", "'new_tag_id'", "]", "=", "[", "]", "\n", "for", "t", "in", "v", "[", "'tags'", "]", ":", "\n", "            ", "if", "t", "not", "in", "convert_mapper", "[", "'tag_id'", "]", ":", "\n", "                ", "convert_mapper", "[", "'tag_id'", "]", "[", "t", "]", "=", "len", "(", "convert_mapper", "[", "'tag_id'", "]", ")", "\n", "", "v", "[", "'new_tag_id'", "]", ".", "append", "(", "convert_mapper", "[", "'tag_id'", "]", "[", "t", "]", ")", "\n", "", "", "dump_json", "(", "'data/convert_mapper.json'", ",", "convert_mapper", ")", "\n", "data", "=", "open_json", "(", "'data/ednet.json'", ")", "\n", "with", "Pool", "(", "30", ")", "as", "p", ":", "\n", "        ", "results", "=", "p", ".", "map", "(", "f2", ",", "data", ")", "\n", "", "dump_json", "(", "'data/ednet_converted.json'", ",", "results", ")", "\n", "dump_json", "(", "'data/ednet_converted_sample.json'", ",", "results", "[", ":", "100", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.process_ednet.f3": [[105, 107], ["utils.format_data_as_kt"], "function", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.format_data_as_kt"], ["", "def", "f3", "(", "d", ")", ":", "\n", "    ", "return", "format_data_as_kt", "(", "d", ",", "200", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.process_ednet.main3": [[108, 120], ["utils.open_json", "utils.dump_json", "utils.open_json", "utils.dump_json", "multiprocessing.Pool", "p.map", "multiprocessing.Pool", "p.map"], "function", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.open_json", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.dump_json", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.open_json", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.dump_json"], ["", "def", "main3", "(", ")", ":", "\n", "    ", "data", "=", "open_json", "(", "'data/ednet_converted.json'", ")", "\n", "with", "Pool", "(", "30", ")", "as", "p", ":", "\n", "        ", "results", "=", "p", ".", "map", "(", "f3", ",", "data", ")", "\n", "results", "=", "[", "ds", "for", "d", "in", "results", "for", "ds", "in", "d", "]", "\n", "", "dump_json", "(", "'data/kt_ednet.json'", ",", "results", ")", "\n", "\n", "data", "=", "open_json", "(", "'data/coda.json'", ")", "\n", "with", "Pool", "(", "30", ")", "as", "p", ":", "\n", "        ", "results", "=", "p", ".", "map", "(", "f3", ",", "data", ")", "\n", "results", "=", "[", "ds", "for", "d", "in", "results", "for", "ds", "in", "d", "]", "\n", "", "dump_json", "(", "'data/kt_coda.json'", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.process_ednet.f4": [[121, 126], ["utils.format_data_as_kt", "len"], "function", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.format_data_as_kt"], ["", "def", "f4", "(", "d", ")", ":", "\n", "    ", "output", "=", "format_data_as_kt", "(", "d", ",", "1000", ")", "\n", "for", "out", "in", "output", ":", "\n", "        ", "out", "[", "'test_mask'", "]", "=", "[", "1", "]", "*", "len", "(", "out", "[", "'q_ids'", "]", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.process_ednet.main4": [[127, 138], ["utils.open_json", "enumerate", "print", "utils.dump_json", "multiprocessing.Pool", "p.map", "len", "all_results.append"], "function", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.open_json", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.dump_json"], ["", "def", "main4", "(", ")", ":", "\n", "    ", "data", "=", "open_json", "(", "'data/ednet_converted.json'", ")", "\n", "with", "Pool", "(", "30", ")", "as", "p", ":", "\n", "        ", "results", "=", "p", ".", "map", "(", "f4", ",", "data", ")", "\n", "", "all_results", "=", "[", "]", "\n", "for", "idx", ",", "ds", "in", "enumerate", "(", "results", ")", ":", "\n", "        ", "for", "d", "in", "ds", ":", "\n", "            ", "d", "[", "\"user_id\"", "]", "=", "idx", "\n", "all_results", ".", "append", "(", "d", ")", "\n", "", "", "print", "(", "len", "(", "all_results", ")", ")", "\n", "dump_json", "(", "'data/cf_ednet.json'", ",", "all_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.process_ednet.f5": [[140, 169], ["len", "range", "math.log", "math.log", "math.log", "math.log", "math.log", "math.log", "math.log", "math.log", "ds[].append", "len", "len", "len", "len", "len", "len", "len", "len", "range", "range", "range", "range", "range", "range", "range", "range", "len", "len", "len", "len", "set.intersection", "set.intersection", "set.intersection", "set.intersection", "set", "set", "set", "set", "set", "set", "set", "set"], "function", ["None"], ["", "def", "f5", "(", "ds", ")", ":", "\n", "    ", "N", "=", "len", "(", "ds", "[", "'q_ids'", "]", ")", "\n", "ds", "[", "'dash_features'", "]", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "N", ")", ":", "\n", "        ", "wrong_before", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", ")", "if", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "0", "]", ")", ")", "\n", "correct_before", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", ")", "if", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "1", "]", ")", ")", "\n", "wrong_same_before", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", ")", "if", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "0", "and", "len", "(", "\n", "set", ".", "intersection", "(", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "idx", "]", ")", ",", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "d", "]", ")", ")", ")", "]", ")", ")", "\n", "correct_same_before", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", ")", "if", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "1", "and", "len", "(", "\n", "set", ".", "intersection", "(", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "idx", "]", ")", ",", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "d", "]", ")", ")", ")", "]", ")", ")", "\n", "\n", "wrong_after", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", "+", "1", ",", "N", ")", "if", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "0", "]", ")", ")", "\n", "correct_after", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", "+", "1", ",", "N", ")", "if", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "1", "]", ")", ")", "\n", "wrong_same_after", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", "+", "1", ",", "N", ")", "if", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "0", "and", "len", "(", "\n", "set", ".", "intersection", "(", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "idx", "]", ")", ",", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "d", "]", ")", ")", ")", "]", ")", ")", "\n", "correct_same_after", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", "+", "1", ",", "N", ")", "if", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "1", "and", "len", "(", "\n", "set", ".", "intersection", "(", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "idx", "]", ")", ",", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "d", "]", ")", ")", ")", "]", ")", ")", "\n", "ds", "[", "'dash_features'", "]", ".", "append", "(", "\n", "[", "wrong_before", ",", "correct_before", ",", "wrong_same_before", ",", "correct_same_before", ",", "wrong_after", ",", "correct_after", ",", "wrong_same_after", ",", "correct_same_after", "]", ")", "\n", "\n", "", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.process_ednet.main5": [[170, 175], ["utils.open_json", "utils.dump_json", "multiprocessing.Pool", "p.map"], "function", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.open_json", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.dump_json"], ["", "def", "main5", "(", ")", ":", "\n", "    ", "data", "=", "open_json", "(", "'data/cf_ednet.json'", ")", "\n", "with", "Pool", "(", "30", ")", "as", "p", ":", "\n", "        ", "results", "=", "p", ".", "map", "(", "f5", ",", "data", ")", "\n", "", "dump_json", "(", "'data/cf_ednetdash.json'", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.process_ednet.convert_eedi": [[177, 183], ["utils.open_json", "utils.dump_json", "multiprocessing.Pool", "p.map"], "function", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.open_json", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.dump_json"], ["", "def", "convert_eedi", "(", ")", ":", "\n", "    ", "data", "=", "open_json", "(", "'data/eedi.json'", ")", "\n", "with", "Pool", "(", "3", ")", "as", "p", ":", "\n", "        ", "results", "=", "p", ".", "map", "(", "f3", ",", "data", ")", "\n", "results", "=", "[", "ds", "for", "d", "in", "results", "for", "ds", "in", "d", "]", "\n", "", "dump_json", "(", "'data/kt_eedi.json'", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.process_ednet.create_eedi_map": [[184, 199], ["utils.open_json", "utils.open_json.items", "output[].items", "print", "int", "max", "len", "[].append", "len"], "function", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.open_json"], ["", "def", "create_eedi_map", "(", ")", ":", "\n", "    ", "data", "=", "open_json", "(", "'data/question_metadata_task_3_4.json'", ")", "\n", "output", "=", "{", "'qs'", ":", "{", "}", ",", "'sub'", ":", "{", "}", "}", "\n", "for", "q", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "question", "=", "int", "(", "q", ")", "\n", "subjects", "=", "v", "[", "'child_map'", "]", "\n", "output", "[", "'qs'", "]", "[", "question", "]", "=", "subjects", "\n", "for", "d", "in", "subjects", ":", "\n", "            ", "if", "d", "not", "in", "output", "[", "'sub'", "]", ":", "\n", "                ", "output", "[", "'sub'", "]", "[", "d", "]", "=", "[", "]", "\n", "", "output", "[", "'sub'", "]", "[", "d", "]", ".", "append", "(", "question", ")", "\n", "", "", "max_len", "=", "0", "\n", "for", "k", ",", "v", "in", "output", "[", "'qs'", "]", ".", "items", "(", ")", ":", "\n", "        ", "max_len", "=", "max", "(", "max_len", ",", "len", "(", "v", ")", ")", "\n", "", "print", "(", "max_len", ",", "len", "(", "output", "[", "'qs'", "]", ")", ")", "\n", "#dump_json('data/eedi_subject_to_question_map.json', output)", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_dataset.LSTMDataset.__init__": [[13, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data", ",", "is_dash", ")", ":", "\n", "        ", "'Initialization'", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "is_dash", "=", "is_dash", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_dataset.LSTMDataset.__len__": [[18, 21], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the total number of samples'", "\n", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_dataset.LSTMDataset.__getitem__": [[22, 55], ["len", "range", "math.log", "math.log", "math.log", "math.log", "math.log", "math.log", "math.log", "math.log", "ds[].append", "len", "len", "len", "len", "len", "len", "len", "len", "range", "range", "range", "range", "range", "range", "range", "range", "len", "len", "len", "len", "set.intersection", "set.intersection", "set.intersection", "set.intersection", "set", "set", "set", "set", "set", "set", "set", "set"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "'Generates one sample of data'", "\n", "ds", "=", "self", ".", "data", "[", "index", "]", "\n", "if", "self", ".", "is_dash", ":", "\n", "            ", "N", "=", "len", "(", "ds", "[", "'q_ids'", "]", ")", "\n", "ds", "[", "'dash_features'", "]", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "N", ")", ":", "\n", "                ", "wrong_before", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", ")", "if", "ds", "[", "'test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'valid_mask'", "]", "[", "d", "]", "and", "ds", "[", "'local_test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "0", "]", ")", ")", "\n", "correct_before", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", ")", "if", "ds", "[", "'test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'valid_mask'", "]", "[", "d", "]", "and", "ds", "[", "'local_test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "1", "]", ")", ")", "\n", "wrong_same_before", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", ")", "if", "ds", "[", "'test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'valid_mask'", "]", "[", "d", "]", "and", "ds", "[", "'local_test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "0", "and", "len", "(", "\n", "set", ".", "intersection", "(", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "idx", "]", ")", ",", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "d", "]", ")", ")", ")", "]", ")", ")", "\n", "correct_same_before", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", ")", "if", "ds", "[", "'test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'valid_mask'", "]", "[", "d", "]", "and", "ds", "[", "'local_test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "1", "and", "len", "(", "\n", "set", ".", "intersection", "(", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "idx", "]", ")", ",", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "d", "]", ")", ")", ")", "]", ")", ")", "\n", "\n", "wrong_after", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", "+", "1", ",", "N", ")", "if", "ds", "[", "'test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'valid_mask'", "]", "[", "d", "]", "and", "ds", "[", "'local_test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "0", "]", ")", ")", "\n", "correct_after", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", "+", "1", ",", "N", ")", "if", "ds", "[", "'test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'valid_mask'", "]", "[", "d", "]", "and", "ds", "[", "'local_test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "1", "]", ")", ")", "\n", "wrong_same_after", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", "+", "1", ",", "N", ")", "if", "ds", "[", "'test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'valid_mask'", "]", "[", "d", "]", "and", "ds", "[", "'local_test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "0", "and", "len", "(", "\n", "set", ".", "intersection", "(", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "idx", "]", ")", ",", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "d", "]", ")", ")", ")", "]", ")", ")", "\n", "correct_same_after", "=", "math", ".", "log", "(", "\n", "1", "+", "len", "(", "[", "d", "for", "d", "in", "range", "(", "idx", "+", "1", ",", "N", ")", "if", "ds", "[", "'test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'valid_mask'", "]", "[", "d", "]", "and", "ds", "[", "'local_test_mask'", "]", "[", "d", "]", "and", "ds", "[", "'labels'", "]", "[", "d", "]", "==", "1", "and", "len", "(", "\n", "set", ".", "intersection", "(", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "idx", "]", ")", ",", "set", "(", "ds", "[", "'subject_ids'", "]", "[", "d", "]", ")", ")", ")", "]", ")", ")", "\n", "ds", "[", "'dash_features'", "]", ".", "append", "(", "\n", "[", "wrong_before", ",", "correct_before", ",", "wrong_same_before", ",", "correct_same_before", ",", "wrong_after", ",", "correct_after", ",", "wrong_same_after", ",", "correct_same_after", "]", ")", "\n", "\n", "\n", "", "", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_dataset.lstm_collate.__init__": [[58, 60], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_dataset.lstm_collate.__call__": [[61, 132], ["torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "range", "len", "max", "len", "LSub.append", "max", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "len", "max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "#{'user_id': int(user_id), 'user_feature': user_feature, 'subject_ids': subject_ids, 'q_ids': q_ids, 'a_ids': a_ids, 'correct_ans': correct_ans,'ans': ans, 'labels': labels, 'test_mask': test_mask, 'times': times, 'confidences': confidences, 'group_ids': group_ids, 'quiz_ids': quiz_ids}", "\n", "        ", "L", "=", "[", "len", "(", "d", "[", "'q_ids'", "]", ")", "for", "d", "in", "batch", "]", "\n", "T", ",", "B", "=", "max", "(", "L", ")", ",", "len", "(", "L", ")", "\n", "LSub", "=", "[", "]", "\n", "max_sub_len", "=", "0", "\n", "for", "d", "in", "batch", ":", "\n", "            ", "sub_len", "=", "[", "len", "(", "ds", ")", "for", "ds", "in", "d", "[", "'subject_ids'", "]", "]", "\n", "LSub", ".", "append", "(", "sub_len", ")", "\n", "max_sub_len", "=", "max", "(", "max_sub_len", ",", "max", "(", "sub_len", ")", ")", "\n", "", "q_ids", "=", "torch", ".", "zeros", "(", "T", ",", "B", ")", ".", "long", "(", ")", "\n", "a_ids", "=", "torch", ".", "zeros", "(", "T", ",", "B", ")", ".", "long", "(", ")", "\n", "correct_ans", "=", "torch", ".", "zeros", "(", "T", ",", "B", ")", ".", "long", "(", ")", "+", "1", "\n", "ans", "=", "torch", ".", "zeros", "(", "T", ",", "B", ")", ".", "long", "(", ")", "+", "1", "\n", "labels", "=", "torch", ".", "zeros", "(", "T", ",", "B", ")", ".", "float", "(", ")", "\n", "test_masks", "=", "torch", ".", "zeros", "(", "T", ",", "B", ")", ".", "long", "(", ")", "\n", "valid_masks", "=", "torch", ".", "ones", "(", "T", ",", "B", ")", ".", "long", "(", ")", "\n", "local_test_masks", "=", "torch", ".", "ones", "(", "T", ",", "B", ")", ".", "long", "(", ")", "\n", "#times = torch.zeros(T, B).float()", "\n", "#confidences = torch.zeros(T, B).float()", "\n", "#group_ids = torch.zeros(T, B).long()", "\n", "#quiz_ids = torch.zeros(T, B).long()", "\n", "subject_ids", "=", "torch", ".", "zeros", "(", "T", ",", "B", ",", "max_sub_len", ")", ".", "long", "(", ")", "\n", "subject_ids_mask", "=", "torch", ".", "zeros", "(", "T", ",", "B", ",", "max_sub_len", ")", ".", "long", "(", ")", "\n", "#u_features = torch.cat([torch.FloatTensor(d['user_feature']).unsqueeze(0) for d in batch], dim=0)", "\n", "mask", "=", "torch", ".", "zeros", "(", "T", ",", "B", ")", ".", "long", "(", ")", "\n", "user_ids", "=", "[", "d", "[", "'user_id'", "]", "for", "d", "in", "batch", "]", "\n", "if", "'dash_features'", "in", "batch", "[", "0", "]", ":", "\n", "            ", "dash_features", "=", "torch", ".", "zeros", "(", "T", ",", "B", ",", "8", ")", "\n", "is_dash", "=", "True", "\n", "", "else", ":", "\n", "            ", "is_dash", "=", "False", "\n", "\n", "", "for", "idx", "in", "range", "(", "B", ")", ":", "\n", "            ", "if", "is_dash", ":", "\n", "                ", "dash_features", "[", ":", "L", "[", "idx", "]", ",", "idx", ",", ":", "]", "=", "torch", ".", "FloatTensor", "(", "\n", "batch", "[", "idx", "]", "[", "'dash_features'", "]", ")", "\n", "", "q_ids", "[", ":", "L", "[", "idx", "]", ",", "idx", "]", "=", "torch", ".", "LongTensor", "(", "batch", "[", "idx", "]", "[", "'q_ids'", "]", ")", "\n", "# if 'a_ids' in batch[idx]:", "\n", "#     a_ids[:L[idx], idx] = torch.LongTensor(batch[idx]['a_ids'])", "\n", "correct_ans", "[", ":", "L", "[", "idx", "]", ",", "idx", "]", "=", "torch", ".", "LongTensor", "(", "\n", "batch", "[", "idx", "]", "[", "'correct_ans'", "]", ")", "\n", "ans", "[", ":", "L", "[", "idx", "]", ",", "idx", "]", "=", "torch", ".", "LongTensor", "(", "batch", "[", "idx", "]", "[", "'ans'", "]", ")", "\n", "labels", "[", ":", "L", "[", "idx", "]", ",", "idx", "]", "=", "torch", ".", "FloatTensor", "(", "batch", "[", "idx", "]", "[", "'labels'", "]", ")", "\n", "# 1 means train, 0 means padded or unobserved", "\n", "test_masks", "[", ":", "L", "[", "idx", "]", ",", "idx", "]", "=", "torch", ".", "LongTensor", "(", "\n", "batch", "[", "idx", "]", "[", "'test_mask'", "]", ")", "\n", "# 1 means train or padded, 0 means local test", "\n", "local_test_masks", "[", ":", "L", "[", "idx", "]", ",", "idx", "]", "=", "torch", ".", "LongTensor", "(", "\n", "batch", "[", "idx", "]", "[", "'local_test_mask'", "]", ")", "\n", "# 1 means train or padded, 0 means local valid", "\n", "valid_masks", "[", ":", "L", "[", "idx", "]", ",", "idx", "]", "=", "torch", ".", "LongTensor", "(", "\n", "batch", "[", "idx", "]", "[", "'valid_mask'", "]", ")", "\n", "#times[:L[idx], idx] = torch.FloatTensor(batch[idx]['times'])", "\n", "#confidences[:L[idx], idx] = torch.FloatTensor(batch[idx]['confidences'])", "\n", "#if 'group_ids' in batch[idx]:", "\n", "#    group_ids[:L[idx], idx] = torch.LongTensor(batch[idx]['group_ids'])", "\n", "#if 'quiz_ids' in batch[idx]:", "\n", "#    quiz_ids[:L[idx], idx] = torch.LongTensor(batch[idx]['quiz_ids'])", "\n", "mask", "[", ":", "L", "[", "idx", "]", ",", "idx", "]", "=", "1", "\n", "for", "l_idx", "in", "range", "(", "L", "[", "idx", "]", ")", ":", "\n", "                ", "subject_ids", "[", "l_idx", ",", "idx", ",", ":", "LSub", "[", "idx", "]", "\n", "[", "l_idx", "]", "]", "=", "torch", ".", "LongTensor", "(", "batch", "[", "idx", "]", "[", "'subject_ids'", "]", "[", "l_idx", "]", ")", "\n", "subject_ids_mask", "[", "l_idx", ",", "idx", ",", ":", "LSub", "[", "idx", "]", "\n", "[", "l_idx", "]", "]", "=", "1", "\n", "", "", "out", "=", "{", "'subject_ids'", ":", "subject_ids", ",", "'q_ids'", ":", "q_ids", ",", "'correct_ans'", ":", "correct_ans", ",", "'ans'", ":", "ans", ",", "'labels'", ":", "labels", ",", "'test_mask'", ":", "test_masks", ",", "'local_test_mask'", ":", "local_test_masks", ",", "\n", "'valid_mask'", ":", "valid_masks", ",", "'mask'", ":", "mask", ",", "'subject_mask'", ":", "subject_ids_mask", ",", "'L'", ":", "L", ",", "'user_ids'", ":", "user_ids", "}", "\n", "\n", "if", "is_dash", ":", "\n", "            ", "out", "[", "'dash_features'", "]", "=", "dash_features", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.scheduler.SafeDict.__missing__": [[29, 31], ["None"], "methods", ["None"], ["    ", "def", "__missing__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "'{'", "+", "key", "+", "'}'", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.scheduler.get_memory": [[18, 24], ["None"], "function", ["None"], ["", "", "", "def", "get_memory", "(", "combo", ")", ":", "\n", "    ", "if", "combo", "[", "'setup'", "]", "==", "'cf'", ":", "\n", "        ", "memory_map", "=", "{", "'coda'", ":", "60000", ",", "'ednet'", ":", "75000", ",", "'eedi'", ":", "20000", "}", "\n", "", "else", ":", "\n", "        ", "memory_map", "=", "{", "'coda'", ":", "45000", ",", "'ednet'", ":", "68000", ",", "'eedi'", ":", "20000", "}", "\n", "", "return", "memory_map", "[", "combo", "[", "'dataset'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.scheduler.get_cpu": [[25, 27], ["None"], "function", ["None"], ["", "def", "get_cpu", "(", "combo", ")", ":", "\n", "    ", "return", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.scheduler.get_run_id": [[32, 43], ["os.path.isfile", "len", "open", "f.write", "open", "f.readlines"], "function", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.kt_model.MEMORY.write"], ["", "", "def", "get_run_id", "(", ")", ":", "\n", "    ", "filename", "=", "\"logs/expts.txt\"", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", "is", "False", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "\"\"", ")", "\n", "", "return", "0", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "expts", "=", "f", ".", "readlines", "(", ")", "\n", "", "run_id", "=", "len", "(", "expts", ")", "\n", "", "return", "run_id", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.scheduler.get_gpu": [[71, 78], ["None"], "function", ["None"], ["def", "get_gpu", "(", "combo", ")", ":", "\n", "    ", "if", "combo", "[", "'model'", "]", "==", "'bi-gcn'", ":", "\n", "        ", "return", "\"2080ti\"", "\n", "", "if", "combo", "[", "'model'", "]", "in", "{", "'bi-lstm'", ",", "'dkvmn'", ",", "'attn-akt'", "}", ":", "\n", "        ", "return", "\"1080ti\"", "\n", "", "else", ":", "\n", "        ", "return", "\"titanx\"", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.scheduler.is_valid": [[80, 82], ["None"], "function", ["None"], ["", "", "def", "is_valid", "(", "combo", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.LSTMModel.__init__": [[14, 54], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.GCNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_question", ",", "n_user", ",", "n_subject", ",", "n_quiz", ",", "n_group", ",", "hidden_dim", ",", "q_dim", ",", "task", ",", "dropout", "=", "0.25", ",", "bidirectional", "=", "False", ",", "num_gru_layers", "=", "1", ",", "is_dash", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_dash", "=", "is_dash", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "q_embeddings", "=", "nn", ".", "Embedding", "(", "n_question", ",", "q_dim", ")", "\n", "self", ".", "s_embeddings", "=", "nn", ".", "Embedding", "(", "n_subject", ",", "q_dim", ")", "\n", "# self.feature_layer = nn.Linear(2, q_dim)", "\n", "self", ".", "answer_embeddings", "=", "nn", ".", "Embedding", "(", "4", ",", "q_dim", ")", "\n", "self", ".", "label_embeddings", "=", "nn", ".", "Embedding", "(", "2", ",", "q_dim", ")", "\n", "# self.user_feature_layer = nn.Linear(8, q_dim)", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "# [questions, subjects,  ans_embed, correct_ans_embed, label_embed], dim=-1))", "\n", "self", ".", "in_feature", "=", "5", "*", "q_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "input_size", "=", "self", ".", "in_feature", ",", "hidden_size", "=", "hidden_dim", ",", "\n", "num_layers", "=", "num_gru_layers", ",", "batch_first", "=", "False", ",", "bidirectional", "=", "bidirectional", ")", "\n", "self", ".", "task", "=", "task", "\n", "# pred_input = [subjects, questions, quizs, groups, forward_ht]", "\n", "self", ".", "pred_in_feature", "=", "hidden_dim", "+", "3", "*", "q_dim", "\n", "if", "self", ".", "bidirectional", ":", "\n", "            ", "self", ".", "pred_in_feature", "+=", "hidden_dim", "\n", "", "if", "n_quiz", ":", "\n", "            ", "self", ".", "pred_in_feature", "+=", "q_dim", "\n", "self", ".", "quiz_embeddings", "=", "nn", ".", "Embedding", "(", "n_quiz", ",", "q_dim", ")", "\n", "", "if", "n_group", ":", "\n", "            ", "self", ".", "pred_in_feature", "+=", "q_dim", "\n", "self", ".", "group_embeddings", "=", "nn", ".", "Embedding", "(", "n_group", ",", "q_dim", ")", "\n", "", "if", "self", ".", "is_dash", ":", "\n", "            ", "self", ".", "dash_layer", "=", "nn", ".", "Linear", "(", "8", ",", "q_dim", ")", "\n", "self", ".", "pred_in_feature", "+=", "q_dim", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "\n", "self", ".", "pred_in_feature", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "self", ".", "pred_in_feature", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "if", "self", ".", "task", "==", "'1'", ":", "\n", "            ", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "1", ")", "\n", "", "elif", "self", ".", "task", "==", "'2'", ":", "\n", "            ", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.LSTMModel.forward": [[55, 136], ["batch[].to().unsqueeze", "batch[].to().unsqueeze", "batch[].to().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "cf_model.LSTMModel.q_embeddings", "labels.long", "cf_model.LSTMModel.answer_embeddings", "cf_model.LSTMModel.dropout", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "cf_model.LSTMModel.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "cf_model.LSTMModel.dropout", "cf_model.LSTMModel.output_layer", "batch[].to", "batch[].to", "cf_model.LSTMModel.answer_embeddings", "cf_model.LSTMModel.label_embeddings", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "output.squeeze.squeeze.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "output.squeeze.squeeze.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cf_model.LSTMModel.dropout", "cf_model.LSTMModel.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "output.squeeze.squeeze.squeeze", "torch.nn.CrossEntropyLoss.", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "batch[].to", "batch[].to", "batch[].to", "batch[].to", "batch[].to", "cf_model.LSTMModel.s_embeddings", "batch[].to().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "cf_model.LSTMModel.dash_layer", "cf_model.LSTMModel.layers", "mask.squeeze", "nn.CrossEntropyLoss.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.nn.Sigmoid.detach().cpu().numpy", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "batch[].to", "batch[].to", "mask.float", "output.squeeze.squeeze.view", "ans.view", "nn.CrossEntropyLoss.view", "mask.squeeze", "nn.CrossEntropyLoss.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "pred.detach().cpu().numpy", "output.squeeze.squeeze.detach().cpu().numpy", "batch[].to", "torch.nn.Sigmoid.detach().cpu", "mask.float", "torch.max", "torch.max", "torch.max", "torch.max", "pred.detach().cpu", "output.squeeze.squeeze.detach().cpu", "torch.nn.Sigmoid.detach", "pred.detach", "output.squeeze.squeeze.detach", "torch.nn.Sigmoid."], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "ans", ",", "correct_ans", ",", "labels", "=", "batch", "[", "'ans'", "]", ".", "to", "(", "\n", "device", ")", "-", "1", ",", "batch", "[", "'correct_ans'", "]", ".", "to", "(", "device", ")", "-", "1", ",", "batch", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "seq_len", ",", "batch_size", ",", "data_length", "=", "ans", ".", "shape", "[", "0", "]", ",", "ans", ".", "shape", "[", "1", "]", ",", "batch", "[", "'L'", "]", "\n", "# Mask", "\n", "test_mask", "=", "batch", "[", "'test_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "2", ")", "\n", "valid_mask", "=", "batch", "[", "'valid_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "2", ")", "\n", "local_test_mask", "=", "batch", "[", "'local_test_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "2", ")", "\n", "mask", "=", "test_mask", "*", "valid_mask", "*", "local_test_mask", "\n", "#", "\n", "# user_features = (self.user_feature_layer(", "\n", "#     batch['user_features'].to(device))).unsqueeze(0).expand(seq_len, -1, -1)  # T, B,uf_dim", "\n", "subjects", "=", "torch", ".", "sum", "(", "(", "self", ".", "s_embeddings", "(", "\n", "batch", "[", "'subject_ids'", "]", ".", "to", "(", "device", ")", ")", ")", "*", "batch", "[", "'subject_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "3", ")", ",", "dim", "=", "2", ")", "# T, B, s_dim", "\n", "questions", "=", "(", "self", ".", "q_embeddings", "(", "\n", "batch", "[", "'q_ids'", "]", ".", "to", "(", "device", ")", ")", ")", "# T, B,q_dim", "\n", "# apply test_mask", "\n", "# qs = batch['q_ids'].to(device)", "\n", "ans_", "=", "ans", "# + qs*4", "\n", "correct_ans_", "=", "correct_ans", "# + qs*4", "\n", "labels_", "=", "labels", ".", "long", "(", ")", "# + qs*2", "\n", "ans_embed", "=", "(", "self", ".", "answer_embeddings", "(", "ans_", ")", ")", "*", "mask", "\n", "correct_ans_embed", "=", "(", "self", ".", "answer_embeddings", "(", "correct_ans_", ")", ")", "\n", "label_embed", "=", "self", ".", "label_embeddings", "(", "labels_", ")", "*", "mask", "\n", "\n", "# input_feature = torch.cat([batch['times'].to(device).unsqueeze(", "\n", "#     2), batch['confidences'].to(device).unsqueeze(2)], dim=-1)", "\n", "# features = (self.feature_layer(input_feature))", "\n", "\n", "lstm_input", "=", "[", "ans_embed", ",", "correct_ans_embed", ",", "\n", "label_embed", ",", "questions", ",", "subjects", "]", "\n", "lstm_input", "=", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "lstm_input", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "packed_data", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "lstm_input", ",", "lengths", "=", "(", "data_length", ")", ",", "batch_first", "=", "False", ",", "enforce_sorted", "=", "False", ")", "\n", "packed_output", ",", "ht", "=", "self", ".", "rnn", "(", "packed_data", ")", "\n", "output", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "\n", "packed_output", ",", "batch_first", "=", "False", ")", "\n", "init_state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_dim", ")", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "bidirectional", ":", "\n", "            ", "output", "=", "output", ".", "view", "(", "seq_len", ",", "batch_size", ",", "2", ",", "self", ".", "hidden_dim", ")", "\n", "forward_ht", "=", "torch", ".", "cat", "(", "[", "init_state", ",", "output", "[", ":", "-", "1", ",", ":", ",", "0", ",", ":", "]", "]", ",", "dim", "=", "0", ")", "\n", "reverse_ht", "=", "torch", ".", "cat", "(", "[", "output", "[", "1", ":", ",", ":", ",", "1", ",", ":", "]", ",", "init_state", "]", ",", "dim", "=", "0", ")", "\n", "pred_input", "=", "[", "questions", ",", "reverse_ht", ",", "\n", "subjects", ",", "forward_ht", ",", "correct_ans_embed", "]", "\n", "", "else", ":", "\n", "            ", "output", "=", "output", ".", "view", "(", "seq_len", ",", "batch_size", ",", "1", ",", "self", ".", "hidden_dim", ")", "\n", "forward_ht", "=", "torch", ".", "cat", "(", "[", "init_state", ",", "output", "[", ":", "-", "1", ",", ":", ",", "0", ",", ":", "]", "]", ",", "dim", "=", "0", ")", "\n", "pred_input", "=", "[", "questions", ",", "subjects", ",", "forward_ht", ",", "correct_ans_embed", "]", "\n", "\n", "", "if", "self", ".", "is_dash", ":", "\n", "            ", "dash_features", "=", "self", ".", "dropout", "(", "\n", "self", ".", "dash_layer", "(", "batch", "[", "'dash_features'", "]", ".", "to", "(", "device", ")", ")", ")", "\n", "pred_input", ".", "append", "(", "dash_features", ")", "\n", "# if 'quiz_ids' in batch:", "\n", "#     quizs = (self.quiz_embeddings(", "\n", "#         batch['quiz_ids'].to(device)))  # T, B,q_dim", "\n", "#     pred_input.append(quizs)", "\n", "# if 'group_ids' in batch:", "\n", "#     groups = (self.group_embeddings(", "\n", "#         batch['group_ids'].to(device)))  # T, B,q_dim", "\n", "#     pred_input.append(groups)", "\n", "\n", "", "pred_input", "=", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "pred_input", ",", "dim", "=", "-", "1", ")", ")", "\n", "output", "=", "self", ".", "output_layer", "(", "self", ".", "layers", "(", "pred_input", ")", "+", "pred_input", ")", "\n", "#", "\n", "if", "self", ".", "task", "==", "'1'", ":", "\n", "            ", "loss_fn", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "output", "=", "output", ".", "squeeze", "(", ")", "\n", "loss", "=", "loss_fn", "(", "output", ",", "labels", ")", "\n", "loss", "=", "loss", "*", "mask", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "/", "torch", ".", "mean", "(", "mask", ".", "float", "(", ")", ")", "\n", "m", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "return", "loss", ",", "m", "(", "output", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "None", "\n", "", "elif", "self", ".", "task", "==", "'2'", ":", "\n", "            ", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "loss", "=", "loss_fn", "(", "output", ".", "view", "(", "-", "1", ",", "4", ")", ",", "ans", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", "=", "loss", ".", "view", "(", "-", "1", ",", "batch_size", ")", "*", "mask", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "/", "torch", ".", "mean", "(", "mask", ".", "float", "(", ")", ")", "\n", "pred", "=", "torch", ".", "max", "(", "output", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "+", "1", "\n", "return", "loss", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.NCFModel.__init__": [[139, 168], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.GCNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_question", ",", "n_subject", ",", "n_user", ",", "n_quiz", ",", "n_group", ",", "task", ",", "is_dash", "=", "False", ",", "dropout", "=", "0.2", ",", "q_dim", "=", "256", ",", "u_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "q_embeddings", "=", "nn", ".", "Embedding", "(", "n_question", ",", "q_dim", ")", "\n", "self", ".", "u_embeddings", "=", "nn", ".", "Embedding", "(", "n_user", ",", "u_dim", ")", "\n", "self", ".", "s_embeddings", "=", "nn", ".", "Embedding", "(", "n_subject", ",", "q_dim", ")", "\n", "self", ".", "dash", "=", "is_dash", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "in_feature", "=", "2", "*", "q_dim", "+", "u_dim", "\n", "if", "self", ".", "dash", ":", "\n", "            ", "self", ".", "dash_layer", "=", "nn", ".", "Linear", "(", "8", ",", "q_dim", ")", "\n", "in_feature", "+=", "q_dim", "\n", "", "if", "n_quiz", ":", "\n", "            ", "self", ".", "quiz_embeddings", "=", "nn", ".", "Embedding", "(", "n_quiz", ",", "q_dim", ")", "\n", "in_feature", "+=", "q_dim", "\n", "", "if", "n_group", ":", "\n", "# self.user_feature_layer = nn.Linear(8, q_dim)", "\n", "            ", "self", ".", "group_embeddings", "=", "nn", ".", "Embedding", "(", "n_group", ",", "q_dim", ")", "\n", "in_feature", "+=", "q_dim", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_feature", ",", "in_feature", ")", ",", "nn", ".", "ReLU", "(", "\n", ")", ",", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "in_feature", ",", "in_feature", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "dropout", ")", "\n", ")", "\n", "self", ".", "task", "=", "task", "\n", "if", "self", ".", "task", "==", "'1'", ":", "\n", "            ", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "in_feature", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "in_feature", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.NCFModel.forward": [[169, 223], ["cf_model.NCFModel.dropout", "batch[].to().unsqueeze", "batch[].to().unsqueeze", "batch[].to().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "cf_model.NCFModel.q_embeddings", "u_ids[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cf_model.NCFModel.output_layer", "cf_model.NCFModel.u_embeddings", "batch[].to", "batch[].to", "cf_model.NCFModel.dropout", "torch.cat.append", "torch.cat.append", "cf_model.NCFModel.dropout", "torch.cat.append", "torch.cat.append", "cf_model.NCFModel.dropout", "torch.cat.append", "torch.cat.append", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "output.squeeze.squeeze.squeeze", "torch.nn.CrossEntropyLoss.", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "batch[].to", "batch[].to", "batch[].to", "batch[].to", "batch[].to", "cf_model.NCFModel.s_embeddings", "batch[].to().unsqueeze", "cf_model.NCFModel.quiz_embeddings", "cf_model.NCFModel.group_embeddings", "cf_model.NCFModel.dash_layer", "cf_model.NCFModel.layers", "mask.squeeze", "nn.CrossEntropyLoss.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.nn.Sigmoid.detach().cpu().numpy", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "batch[].to", "batch[].to", "batch[].to", "batch[].to", "mask.float", "output.squeeze.squeeze.view", "ans.view", "nn.CrossEntropyLoss.view", "mask.squeeze", "nn.CrossEntropyLoss.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "pred.detach().cpu().numpy", "output.squeeze.squeeze.detach().cpu().numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "batch[].to", "torch.nn.Sigmoid.detach().cpu", "mask.float", "torch.max", "torch.max", "torch.max", "torch.max", "pred.detach().cpu", "output.squeeze.squeeze.detach().cpu", "torch.nn.Sigmoid.detach", "pred.detach", "output.squeeze.squeeze.detach", "torch.nn.Sigmoid."], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "u_ids", "=", "self", ".", "dropout", "(", "self", ".", "u_embeddings", "(", "\n", "torch", ".", "LongTensor", "(", "batch", "[", "'user_ids'", "]", ")", ".", "to", "(", "device", ")", ")", ")", "# B, u_dim", "\n", "ans", ",", "correct_ans", ",", "labels", "=", "batch", "[", "'ans'", "]", ".", "to", "(", "\n", "device", ")", "-", "1", ",", "batch", "[", "'correct_ans'", "]", ".", "to", "(", "device", ")", "-", "1", ",", "batch", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "seq_len", ",", "batch_size", ",", "data_length", "=", "ans", ".", "shape", "[", "0", "]", ",", "ans", ".", "shape", "[", "1", "]", ",", "batch", "[", "'L'", "]", "\n", "# Mask", "\n", "test_mask", "=", "batch", "[", "'test_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "2", ")", "\n", "valid_mask", "=", "batch", "[", "'valid_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "2", ")", "\n", "local_test_mask", "=", "batch", "[", "'local_test_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "2", ")", "\n", "mask", "=", "test_mask", "*", "valid_mask", "*", "local_test_mask", "\n", "#", "\n", "# user_features = (self.user_feature_layer(", "\n", "#     batch['user_features'].to(device))).unsqueeze(0).expand(seq_len, -1, -1)  # T, B,uf_dim", "\n", "subjects", "=", "torch", ".", "sum", "(", "(", "self", ".", "s_embeddings", "(", "\n", "batch", "[", "'subject_ids'", "]", ".", "to", "(", "device", ")", ")", ")", "*", "batch", "[", "'subject_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "3", ")", ",", "dim", "=", "2", ")", "# T, B, s_dim", "\n", "questions", "=", "(", "self", ".", "q_embeddings", "(", "\n", "batch", "[", "'q_ids'", "]", ".", "to", "(", "device", ")", ")", ")", "# T, B,q_dim", "\n", "users", "=", "u_ids", "[", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "seq_len", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "input_embeddings", "=", "[", "questions", ",", "subjects", ",", "users", "]", "\n", "if", "'quiz_ids'", "in", "batch", ":", "\n", "            ", "quiz_ids", "=", "self", ".", "dropout", "(", "\n", "self", ".", "quiz_embeddings", "(", "batch", "[", "'quiz_ids'", "]", ".", "to", "(", "device", ")", ")", ")", "\n", "input_embeddings", ".", "append", "(", "quiz_ids", ")", "\n", "", "if", "'group_ids'", "in", "batch", ":", "\n", "            ", "group_ids", "=", "self", ".", "dropout", "(", "\n", "self", ".", "group_embeddings", "(", "batch", "[", "'group_ids'", "]", ".", "to", "(", "device", ")", ")", ")", "\n", "input_embeddings", ".", "append", "(", "group_ids", ")", "\n", "\n", "", "if", "self", ".", "dash", ":", "\n", "            ", "dash_features", "=", "self", ".", "dropout", "(", "\n", "self", ".", "dash_layer", "(", "batch", "[", "'dash_features'", "]", ".", "to", "(", "device", ")", ")", ")", "\n", "input_embeddings", ".", "append", "(", "dash_features", ")", "\n", "", "input_embeddings", "=", "torch", ".", "cat", "(", "input_embeddings", ",", "dim", "=", "-", "1", ")", "\n", "\n", "output", "=", "self", ".", "output_layer", "(", "self", ".", "layers", "(", "\n", "input_embeddings", ")", "+", "input_embeddings", ")", "\n", "#", "\n", "if", "self", ".", "task", "==", "'1'", ":", "\n", "            ", "loss_fn", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "output", "=", "output", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss_fn", "(", "output", ",", "labels", ")", "\n", "loss", "=", "loss", "*", "mask", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "/", "torch", ".", "mean", "(", "(", "mask", ")", ".", "float", "(", ")", ")", "\n", "m", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "return", "loss", ",", "m", "(", "output", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "None", "\n", "", "elif", "self", ".", "task", "==", "'2'", ":", "\n", "            ", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "loss", "=", "loss_fn", "(", "output", ".", "view", "(", "-", "1", ",", "4", ")", ",", "ans", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", "=", "loss", ".", "view", "(", "-", "1", ",", "batch_size", ")", "*", "mask", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "/", "torch", ".", "mean", "(", "(", "mask", ")", ".", "float", "(", ")", ")", "\n", "pred", "=", "torch", ".", "max", "(", "output", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "+", "1", "\n", "return", "loss", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.GCNModel.__init__": [[226, 279], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "mapper[].items", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.nn.Linear", "torch.nn.Linear", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "int", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.GCNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_question", ",", "n_user", ",", "n_subject", ",", "n_quiz", ",", "n_group", ",", "hidden_dim", ",", "q_dim", ",", "task", ",", "mapper", ",", "dropout", "=", "0.25", ",", "bidirectional", "=", "False", ",", "num_gru_layers", "=", "1", ",", "is_dash", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_dash", "=", "is_dash", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "n_subject", "=", "n_subject", "\n", "# nn.Embedding(n_question, q_dim)", "\n", "self", ".", "q_embeddings", "=", "nn", ".", "Parameter", "(", "0.1", "*", "torch", ".", "randn", "(", "n_question", ",", "q_dim", ")", ")", "\n", "# nn.Embedding(n_subject, s_dim)", "\n", "self", ".", "s_embeddings", "=", "nn", ".", "Parameter", "(", "0.1", "*", "torch", ".", "randn", "(", "n_subject", ",", "q_dim", ")", ")", "\n", "# self.feature_layer = nn.Linear(2, q_dim)", "\n", "self", ".", "answer_embeddings", "=", "nn", ".", "Embedding", "(", "4", ",", "q_dim", ")", "\n", "self", ".", "label_embeddings", "=", "nn", ".", "Embedding", "(", "2", ",", "q_dim", ")", "\n", "# self.user_feature_layer = nn.Linear(8, q_dim)", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "# [questions, subjects,  ans_embed, correct_ans_embed, label_embed], dim=-1))", "\n", "self", ".", "in_feature", "=", "5", "*", "q_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "input_size", "=", "self", ".", "in_feature", ",", "hidden_size", "=", "hidden_dim", ",", "\n", "num_layers", "=", "num_gru_layers", ",", "batch_first", "=", "False", ",", "bidirectional", "=", "bidirectional", ")", "\n", "self", ".", "task", "=", "task", "\n", "# pred_input = [subjects, questions, quizs, groups, forward_ht]", "\n", "self", ".", "pred_in_feature", "=", "hidden_dim", "+", "3", "*", "q_dim", "\n", "if", "self", ".", "bidirectional", ":", "\n", "            ", "self", ".", "pred_in_feature", "+=", "hidden_dim", "\n", "", "if", "n_quiz", ":", "\n", "            ", "self", ".", "pred_in_feature", "+=", "q_dim", "\n", "self", ".", "quiz_embeddings", "=", "nn", ".", "Embedding", "(", "n_quiz", ",", "q_dim", ")", "\n", "", "if", "n_group", ":", "\n", "            ", "self", ".", "pred_in_feature", "+=", "q_dim", "\n", "self", ".", "group_embeddings", "=", "nn", ".", "Embedding", "(", "n_group", ",", "q_dim", ")", "\n", "", "if", "self", ".", "is_dash", ":", "\n", "            ", "self", ".", "dash_layer", "=", "nn", ".", "Linear", "(", "8", ",", "q_dim", ")", "\n", "self", ".", "pred_in_feature", "+=", "q_dim", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "\n", "self", ".", "pred_in_feature", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "self", ".", "pred_in_feature", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "if", "self", ".", "task", "==", "'1'", ":", "\n", "            ", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "1", ")", "\n", "", "elif", "self", ".", "task", "==", "'2'", ":", "\n", "            ", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "pred_in_feature", ",", "4", ")", "\n", "\n", "", "self", ".", "q_map", "=", "torch", ".", "LongTensor", "(", "mapper", "[", "'q_map'", "]", ")", ".", "to", "(", "device", ")", "# Q,8", "\n", "self", ".", "q_mask", "=", "torch", ".", "FloatTensor", "(", "mapper", "[", "'q_mask'", "]", ")", ".", "to", "(", "device", ")", "# Q,8", "\n", "self", ".", "sub_map", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "mapper", "[", "'sub'", "]", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "sub_map", "[", "int", "(", "k", ")", "]", "=", "torch", ".", "LongTensor", "(", "v", ")", ".", "to", "(", "device", ")", "\n", "", "self", ".", "s2s", "=", "nn", ".", "Linear", "(", "q_dim", ",", "q_dim", ")", "\n", "self", ".", "s2q", "=", "nn", ".", "Linear", "(", "q_dim", ",", "q_dim", ")", "\n", "self", ".", "q2q", "=", "nn", ".", "Linear", "(", "q_dim", ",", "q_dim", ")", "\n", "self", ".", "q2s", "=", "nn", ".", "Linear", "(", "q_dim", ",", "q_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_model.GCNModel.forward": [[280, 378], ["torch.nn.Tanh", "torch.nn.Tanh", "batch[].to().unsqueeze", "batch[].to().unsqueeze", "batch[].to().unsqueeze", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cf_model.GCNModel.s2q", "cf_model.GCNModel.q2q", "torch.nn.Tanh.", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "labels.long", "cf_model.GCNModel.answer_embeddings", "cf_model.GCNModel.dropout", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "cf_model.GCNModel.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "cf_model.GCNModel.dropout", "cf_model.GCNModel.output_layer", "batch[].to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "cf_model.GCNModel.answer_embeddings", "cf_model.GCNModel.label_embeddings", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "output.squeeze.squeeze.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "output.squeeze.squeeze.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cf_model.GCNModel.dropout", "cf_model.GCNModel.append", "cf_model.GCNModel.quiz_embeddings", "cf_model.GCNModel.append", "cf_model.GCNModel.group_embeddings", "cf_model.GCNModel.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "output.squeeze.squeeze.squeeze", "torch.nn.CrossEntropyLoss.", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "batch[].to", "batch[].to", "batch[].to", "batch[].to", "batch[].to", "torch.cat.append", "torch.cat.append", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "cf_model.GCNModel.s2s", "torch.cat.append", "torch.cat.append", "batch[].to().unsqueeze", "batch[].to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "cf_model.GCNModel.dash_layer", "batch[].to", "batch[].to", "cf_model.GCNModel.layers", "mask.squeeze", "nn.CrossEntropyLoss.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.nn.Sigmoid.detach().cpu().numpy", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "cf_model.GCNModel.q2s", "torch.nn.Tanh.unsqueeze", "cf_model.GCNModel.q_mask.unsqueeze", "batch[].to", "mask.float", "output.squeeze.squeeze.view", "ans.view", "nn.CrossEntropyLoss.view", "mask.squeeze", "nn.CrossEntropyLoss.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "pred.detach().cpu().numpy", "output.squeeze.squeeze.detach().cpu().numpy", "batch[].to", "batch[].to", "torch.nn.Sigmoid.detach().cpu", "mask.float", "torch.max", "torch.max", "torch.max", "torch.max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.Tanh.", "pred.detach().cpu", "output.squeeze.squeeze.detach().cpu", "torch.nn.Sigmoid.detach", "pred.detach", "output.squeeze.squeeze.detach", "torch.nn.Sigmoid."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "ans", ",", "correct_ans", ",", "labels", "=", "batch", "[", "'ans'", "]", ".", "to", "(", "\n", "device", ")", "-", "1", ",", "batch", "[", "'correct_ans'", "]", ".", "to", "(", "device", ")", "-", "1", ",", "batch", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "seq_len", ",", "batch_size", ",", "data_length", "=", "ans", ".", "shape", "[", "0", "]", ",", "ans", ".", "shape", "[", "1", "]", ",", "batch", "[", "'L'", "]", "\n", "# Mask", "\n", "test_mask", "=", "batch", "[", "'test_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "2", ")", "\n", "valid_mask", "=", "batch", "[", "'valid_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "2", ")", "\n", "local_test_mask", "=", "batch", "[", "'local_test_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "2", ")", "\n", "mask", "=", "test_mask", "*", "valid_mask", "*", "local_test_mask", "\n", "subjects_0", "=", "self", ".", "s_embeddings", "# S, dim", "\n", "questions_0", "=", "self", ".", "q_embeddings", "# Q, dim", "\n", "s_dim", ",", "q_dim", "=", "subjects_0", ".", "shape", "[", "1", "]", ",", "questions_0", ".", "shape", "[", "1", "]", "\n", "subjects_1", "=", "[", "]", "\n", "for", "sub_idx", "in", "range", "(", "self", ".", "n_subject", ")", ":", "\n", "            ", "if", "sub_idx", "not", "in", "self", ".", "sub_map", ":", "\n", "                ", "subjects_1", ".", "append", "(", "torch", ".", "zeros", "(", "1", ",", "s_dim", ")", ".", "to", "(", "device", ")", ")", "\n", "", "else", ":", "\n", "                ", "nq", "=", "torch", ".", "mean", "(", "\n", "self", ".", "q2s", "(", "questions_0", "[", "self", ".", "sub_map", "[", "sub_idx", "]", ",", ":", "]", ")", ",", "dim", "=", "0", ")", "\n", "sq", "=", "self", ".", "s2s", "(", "subjects_0", "[", "sub_idx", "]", ")", "\n", "subjects_1", ".", "append", "(", "tanh", "(", "nq", "+", "sq", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "", "subjects_1", "=", "torch", ".", "cat", "(", "subjects_1", ",", "dim", "=", "0", ")", "\n", "nq", "=", "torch", ".", "sum", "(", "subjects_1", "[", "self", ".", "q_map", "]", "*", "self", ".", "q_mask", ".", "unsqueeze", "(", "\n", "2", ")", ",", "dim", "=", "1", ")", "/", "torch", ".", "sum", "(", "self", ".", "q_mask", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "# n_question,8 q_dim", "\n", "nq", "=", "self", ".", "s2q", "(", "nq", ")", "# Q,q_dim", "\n", "sq", "=", "self", ".", "q2q", "(", "questions_0", ")", "# Q, q_dim", "\n", "questions_1", "=", "tanh", "(", "nq", "+", "sq", ")", "\n", "subjects", "=", "torch", ".", "sum", "(", "subjects_1", "[", "batch", "[", "'subject_ids'", "]", ".", "to", "(", "\n", "device", ")", "]", "*", "batch", "[", "'subject_mask'", "]", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "3", ")", ",", "dim", "=", "2", ")", "# T, B, s_dim", "\n", "questions", "=", "questions_1", "[", "batch", "[", "'q_ids'", "]", ".", "to", "(", "device", ")", "]", "# T, B,q_dim", "\n", "# subjects = torch.sum((self.s_embeddings(", "\n", "#     batch['subject_ids'].to(device))) * batch['subject_mask'].to(device).unsqueeze(3), dim=2)  # T, B, s_dim", "\n", "# questions = (self.q_embeddings(", "\n", "#     batch['q_ids'].to(device)))  # T, B,q_dim", "\n", "ans_", "=", "ans", "# + qs*4", "\n", "correct_ans_", "=", "correct_ans", "# + qs*4", "\n", "labels_", "=", "labels", ".", "long", "(", ")", "# + qs*2", "\n", "ans_embed", "=", "(", "self", ".", "answer_embeddings", "(", "ans_", ")", ")", "*", "mask", "\n", "correct_ans_embed", "=", "(", "self", ".", "answer_embeddings", "(", "correct_ans_", ")", ")", "\n", "label_embed", "=", "self", ".", "label_embeddings", "(", "labels_", ")", "*", "mask", "\n", "\n", "# input_feature = torch.cat([batch['times'].to(device).unsqueeze(", "\n", "#     2), batch['confidences'].to(device).unsqueeze(2)], dim=-1)", "\n", "# features = (self.feature_layer(input_feature))", "\n", "\n", "lstm_input", "=", "[", "ans_embed", ",", "correct_ans_embed", ",", "\n", "label_embed", ",", "questions", ",", "subjects", "]", "\n", "lstm_input", "=", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "lstm_input", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "packed_data", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "lstm_input", ",", "lengths", "=", "(", "data_length", ")", ",", "batch_first", "=", "False", ",", "enforce_sorted", "=", "False", ")", "\n", "packed_output", ",", "ht", "=", "self", ".", "rnn", "(", "packed_data", ")", "\n", "output", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "\n", "packed_output", ",", "batch_first", "=", "False", ")", "\n", "init_state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_dim", ")", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "bidirectional", ":", "\n", "            ", "output", "=", "output", ".", "view", "(", "seq_len", ",", "batch_size", ",", "2", ",", "self", ".", "hidden_dim", ")", "\n", "forward_ht", "=", "torch", ".", "cat", "(", "[", "init_state", ",", "output", "[", ":", "-", "1", ",", ":", ",", "0", ",", ":", "]", "]", ",", "dim", "=", "0", ")", "\n", "reverse_ht", "=", "torch", ".", "cat", "(", "[", "output", "[", "1", ":", ",", ":", ",", "1", ",", ":", "]", ",", "init_state", "]", ",", "dim", "=", "0", ")", "\n", "pred_input", "=", "[", "questions", ",", "reverse_ht", ",", "\n", "subjects", ",", "forward_ht", ",", "correct_ans_embed", "]", "\n", "", "else", ":", "\n", "            ", "output", "=", "output", ".", "view", "(", "seq_len", ",", "batch_size", ",", "1", ",", "self", ".", "hidden_dim", ")", "\n", "forward_ht", "=", "torch", ".", "cat", "(", "[", "init_state", ",", "output", "[", ":", "-", "1", ",", ":", ",", "0", ",", ":", "]", "]", ",", "dim", "=", "0", ")", "\n", "pred_input", "=", "[", "questions", ",", "subjects", ",", "forward_ht", ",", "correct_ans_embed", "]", "\n", "\n", "", "if", "self", ".", "is_dash", ":", "\n", "            ", "dash_features", "=", "self", ".", "dropout", "(", "\n", "self", ".", "dash_layer", "(", "batch", "[", "'dash_features'", "]", ".", "to", "(", "device", ")", ")", ")", "\n", "pred_input", ".", "append", "(", "dash_features", ")", "\n", "", "if", "'quiz_ids'", "in", "batch", ":", "\n", "            ", "quizs", "=", "(", "self", ".", "quiz_embeddings", "(", "\n", "batch", "[", "'quiz_ids'", "]", ".", "to", "(", "device", ")", ")", ")", "# T, B,q_dim", "\n", "pred_input", ".", "append", "(", "quizs", ")", "\n", "", "if", "'group_ids'", "in", "batch", ":", "\n", "            ", "groups", "=", "(", "self", ".", "group_embeddings", "(", "\n", "batch", "[", "'group_ids'", "]", ".", "to", "(", "device", ")", ")", ")", "# T, B,q_dim", "\n", "pred_input", ".", "append", "(", "groups", ")", "\n", "\n", "", "pred_input", "=", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "pred_input", ",", "dim", "=", "-", "1", ")", ")", "\n", "output", "=", "self", ".", "output_layer", "(", "self", ".", "layers", "(", "pred_input", ")", "+", "pred_input", ")", "\n", "#", "\n", "if", "self", ".", "task", "==", "'1'", ":", "\n", "            ", "loss_fn", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "output", "=", "output", ".", "squeeze", "(", ")", "\n", "loss", "=", "loss_fn", "(", "output", ",", "labels", ")", "\n", "loss", "=", "loss", "*", "mask", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "/", "torch", ".", "mean", "(", "mask", ".", "float", "(", ")", ")", "\n", "m", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "return", "loss", ",", "m", "(", "output", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "None", "\n", "", "elif", "self", ".", "task", "==", "'2'", ":", "\n", "            ", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "loss", "=", "loss_fn", "(", "output", ".", "view", "(", "-", "1", ",", "4", ")", ",", "ans", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", "=", "loss", ".", "view", "(", "-", "1", ",", "batch_size", ")", "*", "mask", ".", "squeeze", "(", "2", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "/", "torch", ".", "mean", "(", "mask", ".", "float", "(", ")", ")", "\n", "pred", "=", "torch", ".", "max", "(", "output", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "+", "1", "\n", "return", "loss", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.open_json": [[9, 13], ["open", "json.load"], "function", ["None"], ["def", "open_json", "(", "path_", ")", ":", "\n", "    ", "with", "open", "(", "path_", ")", "as", "fh", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.dump_json": [[15, 19], ["open", "json.dump"], "function", ["None"], ["", "def", "dump_json", "(", "path_", ",", "data", ")", ":", "\n", "    ", "with", "open", "(", "path_", ",", "'w'", ")", "as", "fh", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "fh", ",", "indent", "=", "2", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_kappa_f1_score": [[20, 38], ["numpy.unique", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.average", "numpy.sum", "numpy.average", "numpy.sum", "len", "len", "len", "sklearn.metrics.f1_score", "sklearn.metrics.cohen_kappa_score", "numpy.sum", "numpy.isnan", "len"], "function", ["None"], ["", "def", "compute_kappa_f1_score", "(", "qids", ",", "target", ",", "pred", ")", ":", "\n", "    ", "unique_qids", "=", "np", ".", "unique", "(", "qids", ")", "\n", "f1_scores", "=", "np", ".", "zeros", "(", "len", "(", "unique_qids", ")", ")", "\n", "cohen_scores", "=", "np", ".", "zeros", "(", "len", "(", "unique_qids", ")", ")", "\n", "weights", "=", "np", ".", "zeros", "(", "len", "(", "unique_qids", ")", ")", "\n", "for", "idx", ",", "qid", "in", "enumerate", "(", "unique_qids", ")", ":", "\n", "        ", "qid_mask", "=", "qids", "==", "qid", "\n", "qid_target", "=", "target", "[", "qid_mask", "]", "\n", "qid_pred", "=", "pred", "[", "qid_mask", "]", "\n", "f1_scores", "[", "idx", "]", "=", "f1_score", "(", "qid_target", ",", "qid_pred", ",", "average", "=", "'macro'", ")", "\n", "cohen_scores", "[", "idx", "]", "=", "cohen_kappa_score", "(", "qid_target", ",", "qid_pred", ")", "\n", "weights", "[", "idx", "]", "=", "np", ".", "sum", "(", "qid_mask", ")", "/", "(", "len", "(", "target", ")", "+", "0.", ")", "\n", "", "cohen_scores", "[", "np", ".", "isnan", "(", "cohen_scores", ")", "]", "=", "1.", "\n", "avg_f1_score", "=", "np", ".", "average", "(", "f1_scores", ")", "\n", "weighted_f1_score", "=", "np", ".", "sum", "(", "f1_scores", "*", "weights", ")", "\n", "avg_cohen_score", "=", "np", ".", "average", "(", "cohen_scores", ")", "\n", "weighted_cohen_score", "=", "np", ".", "sum", "(", "cohen_scores", "*", "weights", ")", "\n", "return", "avg_f1_score", ",", "weighted_f1_score", ",", "avg_cohen_score", ",", "weighted_cohen_score", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_auc": [[39, 42], ["sklearn.metrics.roc_auc_score"], "function", ["None"], ["", "def", "compute_auc", "(", "all_target", ",", "all_pred", ")", ":", "\n", "#fpr, tpr, thresholds = metrics.roc_curve(all_target, all_pred, pos_label=1.0)", "\n", "    ", "return", "metrics", ".", "roc_auc_score", "(", "all_target", ",", "all_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_accuracy": [[44, 49], ["all_pred.copy", "sklearn.metrics.accuracy_score"], "function", ["None"], ["", "def", "compute_accuracy", "(", "all_target", ",", "all_pred", ")", ":", "\n", "    ", "all_pred_new", "=", "all_pred", ".", "copy", "(", ")", "\n", "all_pred_new", "[", "all_pred", ">", "0.5", "]", "=", "1.0", "\n", "all_pred_new", "[", "all_pred", "<=", "0.5", "]", "=", "0.0", "\n", "return", "metrics", ".", "accuracy_score", "(", "all_target", ",", "all_pred_new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.format_data_as_kt": [[50, 72], ["len", "range", "len", "len", "output.append", "enumerate"], "function", ["None"], ["", "def", "format_data_as_kt", "(", "data", ",", "seqlen", ",", "threshold", "=", "0", ")", ":", "\n", "    ", "if", "len", "(", "data", "[", "'q_ids'", "]", ")", "<=", "threshold", ":", "\n", "        ", "return", "[", "]", "\n", "", "schema", "=", "[", "'subject_ids'", ",", "'q_ids'", ",", "'correct_ans'", ",", "'ans'", ",", "'labels'", "]", "\n", "if", "'test_mask'", "in", "data", ":", "\n", "        ", "temp_data", "=", "{", "}", "\n", "for", "field", "in", "schema", ":", "\n", "            ", "temp_data", "[", "field", "]", "=", "[", "d", "for", "idx", ",", "d", "in", "enumerate", "(", "data", "[", "field", "]", ")", "if", "data", "[", "'test_mask'", "]", "[", "idx", "]", "]", "\n", "", "data", "=", "temp_data", "\n", "#Now Split ", "\n", "", "output", "=", "[", "]", "\n", "N", "=", "len", "(", "data", "[", "'q_ids'", "]", ")", "\n", "if", "N", "<=", "seqlen", ":", "\n", "        ", "return", "[", "data", "]", "\n", "", "n_batch", "=", "N", "//", "seqlen", "if", "N", "%", "seqlen", "==", "0", "else", "N", "//", "seqlen", "+", "1", "\n", "for", "b", "in", "range", "(", "n_batch", ")", ":", "\n", "        ", "temp_data", "=", "{", "}", "\n", "for", "field", "in", "schema", ":", "\n", "            ", "temp_data", "[", "field", "]", "=", "data", "[", "field", "]", "[", "b", "*", "seqlen", ":", "(", "b", "+", "1", ")", "*", "seqlen", "]", "\n", "", "if", "len", "(", "temp_data", "[", "'q_ids'", "]", ")", ">", "threshold", ":", "\n", "            ", "output", ".", "append", "(", "temp_data", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.subject_map_ednet": [[74, 94], ["utils.open_json", "utils.open_json", "mapper[].items", "mapper[].items", "open_json.items", "utils.dump_json", "int", "int", "[].append", "str"], "function", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.open_json", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.open_json", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.dump_json"], ["", "def", "subject_map_ednet", "(", ")", ":", "\n", "    ", "q_map", "=", "open_json", "(", "'data/q_map.json'", ")", "\n", "mapper", "=", "open_json", "(", "'data/convert_mapper.json'", ")", "\n", "inverse_q_mapper", "=", "{", "}", "\n", "inverse_s_mapper", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "mapper", "[", "'q_id'", "]", ".", "items", "(", ")", ":", "\n", "        ", "inverse_q_mapper", "[", "v", "]", "=", "int", "(", "k", ")", "\n", "", "for", "k", ",", "v", "in", "mapper", "[", "'tag_id'", "]", ".", "items", "(", ")", ":", "\n", "        ", "inverse_s_mapper", "[", "v", "]", "=", "int", "(", "k", ")", "\n", "", "output", "=", "{", "'qs'", ":", "{", "}", ",", "'sub'", ":", "{", "}", "}", "\n", "for", "k", ",", "v", "in", "q_map", ".", "items", "(", ")", ":", "\n", "        ", "new_q_id", "=", "mapper", "[", "'q_id'", "]", "[", "k", "]", "\n", "new_s_id", "=", "[", "mapper", "[", "'tag_id'", "]", "[", "str", "(", "d", ")", "]", "for", "d", "in", "v", "[", "'tags'", "]", "]", "\n", "output", "[", "'qs'", "]", "[", "new_q_id", "]", "=", "new_s_id", "\n", "for", "s_id", "in", "new_s_id", ":", "\n", "            ", "if", "s_id", "not", "in", "output", "[", "'sub'", "]", ":", "\n", "                ", "output", "[", "'sub'", "]", "[", "s_id", "]", "=", "[", "]", "\n", "", "output", "[", "'sub'", "]", "[", "s_id", "]", ".", "append", "(", "new_q_id", ")", "\n", "\n", "", "", "dump_json", "(", "'data/ednet_subject_to_question_map.json'", ",", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.configuration.initialize_seeds": [[7, 17], ["numpy.random.seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.is_available", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "initialize_seeds", "(", "seedNum", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seedNum", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "manual_seed", "(", "seedNum", ")", "\n", "np", ".", "random", ".", "seed", "(", "seedNum", ")", "\n", "random", ".", "seed", "(", "seedNum", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seedNum", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seedNum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.configuration.create_parser": [[19, 77], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "create_parser", "(", ")", ":", "\n", "# Parse Arguments", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Script to test KT'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "default", "=", "'demo'", ",", "help", "=", "'Name for the experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--nodes'", ",", "default", "=", "''", ",", "help", "=", "'slurm nodes for the experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--slurm_partition'", ",", "default", "=", "''", ",", "\n", "help", "=", "'slurm partitions for the experiment'", ")", "\n", "# Basic Parameters", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "type", "=", "str", ",", "default", "=", "'2'", ",", "help", "=", "'type'", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'type'", ")", "\n", "parser", ".", "add_argument", "(", "'--question_dim'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'type'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'type'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.25", ",", "help", "=", "'type'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'type'", ")", "\n", "parser", ".", "add_argument", "(", "'--fold'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'type'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "\n", "default", "=", "'coda'", ",", "help", "=", "'type'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'lstm'", ",", "help", "=", "'type'", ")", "\n", "parser", ".", "add_argument", "(", "'--setup'", ",", "type", "=", "str", ",", "default", "=", "'kt'", ",", "help", "=", "'type'", ")", "\n", "parser", ".", "add_argument", "(", "'--head'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'type'", ")", "\n", "parser", ".", "add_argument", "(", "'--neptune'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--hardware'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "221", ",", "help", "=", "'type'", ")", "\n", "parser", ".", "add_argument", "(", "'--file_name'", ",", "type", "=", "str", ",", "\n", "default", "=", "''", ",", "help", "=", "'type'", ")", "\n", "parser", ".", "add_argument", "(", "'--hash'", ",", "type", "=", "str", ",", "\n", "default", "=", "''", ",", "help", "=", "'type'", ")", "\n", "\n", "params", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "params", ".", "dataset", "==", "'eedi'", ":", "\n", "        ", "params", ".", "wait", "=", "20", "\n", "params", ".", "epoch", "=", "400", "\n", "", "else", ":", "\n", "        ", "params", ".", "wait", "=", "10", "\n", "params", ".", "epoch", "=", "200", "\n", "\n", "", "params", ".", "n_quiz", "=", "params", ".", "n_group", "=", "0", "\n", "#", "\n", "if", "'ednet'", "in", "params", ".", "dataset", ":", "\n", "        ", "params", ".", "n_question", "=", "13169", "\n", "params", ".", "n_subject", "=", "189", "\n", "params", ".", "n_user", "=", "784310", "\n", "params", ".", "max_len", "=", "7", "\n", "\n", "", "if", "params", ".", "dataset", "==", "'coda'", ":", "\n", "        ", "params", ".", "n_question", "=", "27613", "\n", "params", ".", "n_subject", "=", "389", "\n", "params", ".", "n_user", "=", "118971", "\n", "#n_quiz = 17305", "\n", "#n_group = 11844", "\n", "params", ".", "max_len", "=", "6", "\n", "", "if", "params", ".", "dataset", "==", "'eedi'", ":", "\n", "        ", "params", ".", "n_question", "=", "948", "\n", "params", ".", "n_subject", "=", "389", "\n", "params", ".", "n_user", "=", "6148", "\n", "params", ".", "max_len", "=", "2", "\n", "", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.cf_trainer.train_model": [[25, 118], ["model.train", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "print", "print", "optimizer.zero_grad", "model", "batch[].numpy", "batch[].numpy", "batch[].numpy", "loss.backward", "optimizer.step", "all_preds.append", "all_targets.append", "val_preds.append", "val_targets.append", "test_preds.append", "test_targets.append", "float", "utils.compute_auc", "utils.compute_auc", "utils.compute_auc", "utils.compute_accuracy", "utils.compute_accuracy", "utils.compute_accuracy", "numpy.mean", "numpy.mean", "numpy.concatenate", "numpy.concatenate", "numpy.mean", "utils.compute_kappa_f1_score", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "batch[].numpy", "np.concatenate.append", "np.concatenate.append", "loss.detach().cpu().numpy", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "neptune.log_metric", "batch[].numpy", "loss.detach().cpu", "loss.detach"], "function", ["home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_auc", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_auc", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_auc", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_accuracy", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_accuracy", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_accuracy", "home.repos.pwc.inspect_result.arghosh_OptionTracing.None.utils.compute_kappa_f1_score"], ["def", "train_model", "(", ")", ":", "\n", "    ", "global", "best_val_acc", ",", "best_val_auc", ",", "best_epoch", ",", "best_test_accuracy", ",", "best_test_auc", "\n", "global", "best_avg_f1", ",", "best_wt_f1", ",", "best_avg_kappa", ",", "best_wt_kappa", "\n", "batch_idx", "=", "0", "\n", "model", ".", "train", "(", ")", "\n", "train_loss", ",", "all_preds", ",", "all_targets", "=", "0.", ",", "[", "]", ",", "[", "]", "\n", "val_preds", ",", "val_targets", "=", "[", "]", ",", "[", "]", "\n", "test_preds", ",", "test_targets", "=", "[", "]", ",", "[", "]", "\n", "test_qids", ",", "test_dist", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "batch", "in", "train_loader", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ",", "output", ",", "ans_dist", "=", "model", "(", "batch", ")", "\n", "#", "\n", "valid_mask", "=", "batch", "[", "'valid_mask'", "]", ".", "numpy", "(", ")", "\n", "local_test_mask", "=", "batch", "[", "'local_test_mask'", "]", ".", "numpy", "(", ")", "\n", "test_mask", "=", "batch", "[", "'test_mask'", "]", ".", "numpy", "(", ")", "\n", "validation_flag", "=", "(", "1", "-", "valid_mask", ")", "\n", "local_test_flag", "=", "(", "1", "-", "local_test_mask", ")", "\n", "training_flag", "=", "test_mask", "*", "valid_mask", "*", "local_test_mask", "\n", "if", "params", ".", "task", "==", "'1'", ":", "\n", "            ", "target", "=", "batch", "[", "'labels'", "]", ".", "numpy", "(", ")", "\n", "", "elif", "params", ".", "task", "==", "'2'", ":", "\n", "            ", "target", "=", "batch", "[", "'ans'", "]", ".", "numpy", "(", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "#", "\n", "all_preds", ".", "append", "(", "output", "[", "training_flag", "==", "1", "]", ")", "\n", "all_targets", ".", "append", "(", "target", "[", "training_flag", "==", "1", "]", ")", "\n", "val_preds", ".", "append", "(", "output", "[", "validation_flag", "==", "1", "]", ")", "\n", "val_targets", ".", "append", "(", "target", "[", "validation_flag", "==", "1", "]", ")", "\n", "#", "\n", "if", "params", ".", "task", "==", "'2'", ":", "\n", "            ", "q_ids", "=", "batch", "[", "'q_ids'", "]", "\n", "test_qids", ".", "append", "(", "q_ids", "[", "local_test_flag", "==", "1", "]", ")", "\n", "test_dist", ".", "append", "(", "ans_dist", "[", "local_test_flag", "==", "1", "]", ")", "\n", "", "test_preds", ".", "append", "(", "output", "[", "local_test_flag", "==", "1", "]", ")", "\n", "test_targets", ".", "append", "(", "target", "[", "local_test_flag", "==", "1", "]", ")", "\n", "train_loss", "+=", "float", "(", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "batch_idx", "+=", "1", "\n", "\n", "\n", "", "all_pred", "=", "np", ".", "concatenate", "(", "all_preds", ",", "axis", "=", "0", ")", "\n", "all_target", "=", "np", ".", "concatenate", "(", "all_targets", ",", "axis", "=", "0", ")", "\n", "val_pred", "=", "np", ".", "concatenate", "(", "val_preds", ",", "axis", "=", "0", ")", "\n", "val_target", "=", "np", ".", "concatenate", "(", "val_targets", ",", "axis", "=", "0", ")", "\n", "test_pred", "=", "np", ".", "concatenate", "(", "test_preds", ",", "axis", "=", "0", ")", "\n", "test_target", "=", "np", ".", "concatenate", "(", "test_targets", ",", "axis", "=", "0", ")", "\n", "if", "params", ".", "task", "==", "'1'", ":", "\n", "        ", "train_auc", "=", "compute_auc", "(", "all_target", ",", "all_pred", ")", "\n", "val_auc", "=", "compute_auc", "(", "val_target", ",", "val_pred", ")", "\n", "test_auc", "=", "compute_auc", "(", "test_target", ",", "test_pred", ")", "\n", "train_accuracy", "=", "compute_accuracy", "(", "all_target", ",", "all_pred", ")", "\n", "val_accuracy", "=", "compute_accuracy", "(", "val_target", ",", "val_pred", ")", "\n", "test_accuracy", "=", "compute_accuracy", "(", "test_target", ",", "test_pred", ")", "\n", "", "if", "params", ".", "task", "==", "'2'", ":", "\n", "        ", "train_accuracy", "=", "np", ".", "mean", "(", "all_target", "==", "all_pred", ")", "\n", "val_accuracy", "=", "np", ".", "mean", "(", "val_target", "==", "val_pred", ")", "\n", "#", "\n", "test_dist", "=", "np", ".", "concatenate", "(", "test_dist", ",", "axis", "=", "0", ")", "\n", "test_qids", "=", "np", ".", "concatenate", "(", "test_qids", ",", "axis", "=", "0", ")", "\n", "#", "\n", "test_accuracy", "=", "np", ".", "mean", "(", "test_target", "==", "test_pred", ")", "\n", "test_auc", "=", "val_auc", "=", "train_auc", "=", "-", "1", "\n", "avg_f1_score", ",", "weighted_f1_score", ",", "avg_cohen_score", ",", "weighted_cohen_score", "=", "compute_kappa_f1_score", "(", "test_qids", ",", "test_target", ",", "test_pred", ")", "\n", "", "if", "best_val_acc", "is", "None", "or", "val_accuracy", ">", "best_val_acc", ":", "\n", "        ", "best_val_acc", "=", "val_accuracy", "\n", "best_val_auc", "=", "val_auc", "\n", "best_epoch", "=", "epoch", "\n", "best_test_accuracy", "=", "test_accuracy", "\n", "best_test_auc", "=", "test_auc", "\n", "if", "params", ".", "task", "==", "'2'", ":", "\n", "            ", "best_avg_f1", ",", "best_wt_f1", ",", "best_avg_kappa", ",", "best_wt_kappa", "=", "avg_f1_score", ",", "weighted_f1_score", ",", "avg_cohen_score", ",", "weighted_cohen_score", "\n", "#save_model(model,params)", "\n", "##", "\n", "", "", "print", "(", "'Train Epoch {} Loss: {} train auc: {} train acc: {} val auc: {} val accuracy: {} n_validation : {}'", ".", "format", "(", "\n", "epoch", ",", "train_loss", "/", "batch_idx", ",", "train_auc", ",", "train_accuracy", ",", "val_auc", ",", "val_accuracy", ",", "val_target", ".", "shape", ")", ")", "\n", "print", "(", "'Train Epoch {} test accuracy: {}  test auc: {} best epoch: {}'", ".", "format", "(", "\n", "epoch", ",", "test_accuracy", ",", "test_auc", ",", "best_epoch", ")", ")", "\n", "if", "params", ".", "neptune", ":", "\n", "        ", "neptune", ".", "log_metric", "(", "'Valid Accuracy'", ",", "val_accuracy", ")", "\n", "neptune", ".", "log_metric", "(", "'Test Accuracy'", ",", "test_accuracy", ")", "\n", "neptune", ".", "log_metric", "(", "'Best Test Accuracy'", ",", "best_test_accuracy", ")", "\n", "neptune", ".", "log_metric", "(", "'Best Test Auc'", ",", "best_test_auc", ")", "\n", "neptune", ".", "log_metric", "(", "'Best Valid Accuracy'", ",", "best_val_acc", ")", "\n", "neptune", ".", "log_metric", "(", "'Best Valid Auc'", ",", "best_val_auc", ")", "\n", "neptune", ".", "log_metric", "(", "'Best Epoch'", ",", "best_epoch", ")", "\n", "neptune", ".", "log_metric", "(", "'Epoch'", ",", "epoch", ")", "\n", "if", "params", ".", "task", "==", "'2'", ":", "\n", "            ", "neptune", ".", "log_metric", "(", "'best_avg_f1'", ",", "best_avg_f1", ")", "\n", "neptune", ".", "log_metric", "(", "'best_wt_f1'", ",", "best_wt_f1", ")", "\n", "neptune", ".", "log_metric", "(", "'best_avg_kappa'", ",", "best_avg_kappa", ")", "\n", "neptune", ".", "log_metric", "(", "'best_wt_kappa'", ",", "best_wt_kappa", ")", "\n", "\n"]]}