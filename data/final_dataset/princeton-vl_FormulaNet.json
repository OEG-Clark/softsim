{"home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.__init__": [[27, 69], ["torch.multiprocessing.Queue", "torch.multiprocessing.Queue", "torch.multiprocessing.Process", "torch.multiprocessing.Process", "len", "os.path.exists", "data_loader.DataLoader.build_dictionary", "torch.load", "torch.load", "torch.load", "torch.load", "data_loader.DataLoader.dict.keys", "os.listdir", "utils.split_list.sort", "utils.split_list", "utils.split_list"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.build_dictionary", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.utils.split_list", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.utils.split_list"], ["    ", "def", "__init__", "(", "self", ",", "\n", "formula_path", ",", "\n", "dict_path", ",", "\n", "separate_conj_stmt", "=", "False", ",", "\n", "binary", "=", "False", ",", "\n", "part_no", "=", "-", "1", ",", "\n", "part_total", "=", "0", ",", "\n", "file_list", "=", "None", ",", "\n", "deepmath", "=", "False", ",", "\n", "norename", "=", "False", ",", "\n", "filter_abelian", "=", "False", ",", "\n", "compatible", "=", "False", ")", ":", "# part_no, part_total: will not shuffle.", "\n", "        ", "self", ".", "formula_path", "=", "formula_path", "\n", "self", ".", "dict_path", "=", "dict_path", "\n", "self", ".", "maxsize", "=", "500", "# maxsize for async queue", "\n", "self", ".", "iter_", "=", "0", "# epoch. Legacy reason for its name", "\n", "self", ".", "total_in_epoch", "=", "-", "1", "# conj, stmt pairs supply in current epoch.", "\n", "self", ".", "total_iter", "=", "-", "1", "# total iteration", "\n", "self", ".", "rename", "=", "not", "norename", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dict_path", ")", ":", "\n", "            ", "self", ".", "dict", "=", "self", ".", "build_dictionary", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dict", "=", "torch", ".", "load", "(", "dict_path", ")", "\n", "", "self", ".", "queue", "=", "Queue", "(", "self", ".", "maxsize", ")", "\n", "self", ".", "reader", "=", "Process", "(", "target", "=", "self", ".", "read", ")", "\n", "self", ".", "dict_size", "=", "len", "(", "self", ".", "dict", ".", "keys", "(", ")", ")", "\n", "self", ".", "separate_conj_stmt", "=", "separate_conj_stmt", "\n", "self", ".", "binary", "=", "binary", "\n", "self", ".", "part_no", "=", "part_no", "\n", "self", ".", "part_total", "=", "part_total", "\n", "if", "file_list", "is", "None", ":", "\n", "            ", "file_list", "=", "os", ".", "listdir", "(", "self", ".", "formula_path", ")", "\n", "if", "part_total", "!=", "0", ":", "\n", "                ", "file_list", ".", "sort", "(", ")", "\n", "file_list", "=", "split_list", "(", "file_list", ",", "part_total", ",", "part_no", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "part_total", "!=", "0", ":", "\n", "                ", "file_list", "=", "split_list", "(", "file_list", ",", "part_total", ",", "part_no", ")", "\n", "", "", "self", ".", "file_list", "=", "file_list", "\n", "self", ".", "deepmath", "=", "deepmath", "\n", "self", ".", "filter_abelian", "=", "filter_abelian", "\n", "self", ".", "compatible", "=", "compatible", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.start_reader": [[70, 73], ["data_loader.DataLoader.reader.start"], "methods", ["None"], ["", "def", "start_reader", "(", "self", ")", ":", "\n", "        ", "self", ".", "reader", ".", "daemon", "=", "True", "\n", "self", ".", "reader", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.next_batch": [[74, 84], ["data_loader.DataLoader.queue.get"], "methods", ["None"], ["", "def", "next_batch", "(", "self", ")", ":", "\n", "# [conjecture, statement, label, conj_binary, stmt_binary]", "\n", "        ", "data", "=", "self", ".", "queue", ".", "get", "(", ")", "\n", "if", "data", "is", "None", ":", "\n", "            ", "self", ".", "iter_", "+=", "1", "\n", "self", ".", "total_in_epoch", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "total_in_epoch", "+=", "1", "\n", "self", ".", "total_iter", "+=", "1", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.build_dictionary": [[85, 119], ["os.listdir", "set", "enumerate", "enumerate", "len", "torch.save", "torch.save", "torch.save", "torch.save", "len", "len", "open", "print", "pickle.load", "enumerate", "os.path.join", "print", "len", "set.update", "set.update", "set.update", "set.update", "len", "data_loader.DataLoader.build_dictionary._deter_name"], "methods", ["None"], ["", "def", "build_dictionary", "(", "self", ")", ":", "\n", "        ", "def", "_deter_name", "(", "node", ")", ":", "\n", "            ", "node_name", "=", "node", ".", "name", "\n", "if", "node", ".", "type", "==", "NodeType", ".", "VAR", ":", "\n", "                ", "node_name", "=", "'VAR'", "\n", "", "elif", "node", ".", "type", "==", "NodeType", ".", "VARFUNC", ":", "\n", "                ", "node_name", "==", "'VARFUNC'", "\n", "", "return", "node_name", "\n", "\n", "", "files", "=", "os", ".", "listdir", "(", "self", ".", "formula_path", ")", "\n", "tokens", "=", "set", "(", "{", "}", ")", "\n", "dicts", "=", "{", "}", "\n", "for", "i", ",", "a_file", "in", "enumerate", "(", "files", ")", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "formula_path", ",", "a_file", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "print", "(", "'Loading file {}/{}'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "files", ")", ")", ")", "\n", "dataset", "=", "pickle", ".", "load", "(", "f", ")", "\n", "for", "j", ",", "pair", "in", "enumerate", "(", "dataset", ")", ":", "\n", "                    ", "print", "(", "'Processing pair {}/{}'", ".", "format", "(", "j", "+", "1", ",", "len", "(", "dataset", ")", ")", ")", "\n", "if", "self", ".", "rename", ":", "\n", "                        ", "tokens", ".", "update", "(", "[", "_deter_name", "(", "x", ")", "for", "x", "in", "pair", "[", "1", "]", "]", ")", "\n", "tokens", ".", "update", "(", "[", "_deter_name", "(", "x", ")", "for", "x", "in", "pair", "[", "2", "]", "]", ")", "\n", "", "else", ":", "\n", "                        ", "tokens", ".", "update", "(", "[", "x", ".", "name", "for", "x", "in", "pair", "[", "1", "]", "]", ")", "\n", "tokens", ".", "update", "(", "[", "x", ".", "name", "for", "x", "in", "pair", "[", "2", "]", "]", ")", "\n", "\n", "", "", "", "", "for", "i", ",", "x", "in", "enumerate", "(", "tokens", ")", ":", "\n", "            ", "dicts", "[", "x", "]", "=", "i", "\n", "", "dicts", "[", "'UNKNOWN'", "]", "=", "len", "(", "dicts", ")", "\n", "if", "'VAR'", "not", "in", "dicts", ":", "\n", "            ", "dicts", "[", "'VAR'", "]", "=", "len", "(", "dicts", ")", "\n", "", "if", "'VARFUNC'", "not", "in", "dicts", ":", "\n", "            ", "dicts", "[", "'VARFUNC'", "]", "=", "len", "(", "dicts", ")", "\n", "", "torch", ".", "save", "(", "dicts", ",", "self", ".", "dict_path", ")", "\n", "return", "dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader._decide_name": [[120, 131], ["None"], "methods", ["None"], ["", "def", "_decide_name", "(", "self", ",", "node", ")", ":", "\n", "        ", "node_name", "=", "node", ".", "name", "\n", "if", "self", ".", "rename", ":", "\n", "            ", "if", "node", ".", "type", "==", "NodeType", ".", "VAR", ":", "\n", "                ", "node_name", "=", "'VAR'", "\n", "", "elif", "node", ".", "type", "==", "NodeType", ".", "VARFUNC", ":", "\n", "                ", "node_name", "==", "'VARFUNC'", "\n", "\n", "", "", "if", "node_name", "not", "in", "self", ".", "dict", ":", "\n", "            ", "node_name", "=", "'UNKNOWN'", "\n", "", "return", "node_name", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.generate_one_sentence": [[132, 171], ["enumerate", "numpy.array", "numpy.array", "numpy.zeros", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "data_loader.DataLoader._decide_name", "onehot_collect.append", "numpy.zeros", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "enumerate", "torch.from_numpy.append", "torch.from_numpy.append", "torch.from_numpy.append", "torch.from_numpy.append", "torch.from_numpy.append", "torch.from_numpy.append", "torch.from_numpy.append", "torch.from_numpy.append", "len", "len", "numpy.sum", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader._decide_name"], ["", "def", "generate_one_sentence", "(", "self", ",", "sentence", ")", ":", "\n", "# Undirected graph", "\n", "# index1 starts, index2 ends", "\n", "        ", "index1", "=", "[", "]", "\n", "index2", "=", "[", "]", "\n", "onehot_collect", "=", "[", "]", "\n", "id2pos", "=", "{", "node", ".", "id", ":", "i", "for", "i", ",", "node", "in", "enumerate", "(", "sentence", ")", "}", "\n", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "sentence", ")", ":", "\n", "            ", "for", "x", "in", "node", ".", "incoming", ":", "\n", "                ", "index1", ".", "append", "(", "id2pos", "[", "x", ".", "id", "]", ")", "\n", "index2", ".", "append", "(", "id2pos", "[", "node", ".", "id", "]", ")", "\n", "", "for", "x", "in", "node", ".", "outgoing", ":", "\n", "                ", "index1", ".", "append", "(", "id2pos", "[", "x", ".", "id", "]", ")", "\n", "index2", ".", "append", "(", "id2pos", "[", "node", ".", "id", "]", ")", "\n", "\n", "", "node_name", "=", "self", ".", "_decide_name", "(", "node", ")", "\n", "onehot_collect", ".", "append", "(", "self", ".", "dict", "[", "node_name", "]", ")", "\n", "\n", "", "index1", "=", "np", ".", "array", "(", "index1", ")", "\n", "index2", "=", "np", ".", "array", "(", "index2", ")", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "len", "(", "sentence", ")", ",", "len", "(", "index2", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "x", "in", "sentence", ":", "\n", "            ", "mat", "[", "id2pos", "[", "x", ".", "id", "]", ",", "index2", "==", "id2pos", "[", "x", ".", "id", "]", "]", "=", "1.0", "/", "np", ".", "sum", "(", "\n", "index2", "==", "id2pos", "[", "x", ".", "id", "]", ")", "\n", "\n", "", "if", "self", ".", "compatible", ":", "\n", "            ", "onehot", "=", "np", ".", "zeros", "(", "(", "len", "(", "sentence", ")", ",", "self", ".", "dict_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "range", "(", "len", "(", "sentence", ")", ")", ",", "onehot_collect", "]", "=", "1", "\n", "\n", "", "index1", "=", "torch", ".", "from_numpy", "(", "index1", ")", "\n", "index2", "=", "torch", ".", "from_numpy", "(", "index2", ")", "\n", "if", "self", ".", "compatible", ":", "\n", "            ", "onehot", "=", "torch", ".", "from_numpy", "(", "onehot", ")", "\n", "", "else", ":", "\n", "            ", "onehot", "=", "torch", ".", "LongTensor", "(", "onehot_collect", ")", "\n", "", "mat", "=", "torch", ".", "from_numpy", "(", "mat", ")", "\n", "\n", "return", "(", "onehot", ",", "index1", ",", "index2", ",", "mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.directed_generate_one_sentence": [[172, 226], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "data_loader.DataLoader._decide_name", "onehot_collect.append", "numpy.zeros", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "enumerate", "torch.from_numpy.append", "torch.from_numpy.append", "torch.from_numpy.append", "torch.from_numpy.append", "torch.from_numpy.append", "torch.from_numpy.append", "torch.from_numpy.append", "torch.from_numpy.append", "len", "len", "len", "len", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader._decide_name"], ["", "def", "directed_generate_one_sentence", "(", "self", ",", "sentence", ")", ":", "\n", "# Distinguish in-edges and out-edges", "\n", "# index1 starts, index2 ends", "\n", "        ", "iindex1", "=", "[", "]", "\n", "iindex2", "=", "[", "]", "\n", "oindex1", "=", "[", "]", "\n", "oindex2", "=", "[", "]", "\n", "id2pos", "=", "{", "node", ".", "id", ":", "i", "for", "i", ",", "node", "in", "enumerate", "(", "sentence", ")", "}", "\n", "onehot_collect", "=", "[", "]", "\n", "\n", "for", "node", "in", "sentence", ":", "\n", "            ", "for", "x", "in", "node", ".", "incoming", ":", "\n", "                ", "iindex1", ".", "append", "(", "id2pos", "[", "x", ".", "id", "]", ")", "\n", "iindex2", ".", "append", "(", "id2pos", "[", "node", ".", "id", "]", ")", "\n", "", "for", "x", "in", "node", ".", "outgoing", ":", "\n", "                ", "oindex1", ".", "append", "(", "id2pos", "[", "node", ".", "id", "]", ")", "\n", "oindex2", ".", "append", "(", "id2pos", "[", "x", ".", "id", "]", ")", "\n", "\n", "", "node_name", "=", "self", ".", "_decide_name", "(", "node", ")", "\n", "onehot_collect", ".", "append", "(", "self", ".", "dict", "[", "node_name", "]", ")", "\n", "\n", "# Incoming", "\n", "", "iindex1", "=", "np", ".", "array", "(", "iindex1", ")", "\n", "iindex2", "=", "np", ".", "array", "(", "iindex2", ")", "\n", "oindex1", "=", "np", ".", "array", "(", "oindex1", ")", "\n", "oindex2", "=", "np", ".", "array", "(", "oindex2", ")", "\n", "imat", "=", "np", ".", "zeros", "(", "(", "len", "(", "sentence", ")", ",", "len", "(", "iindex2", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "omat", "=", "np", ".", "zeros", "(", "(", "len", "(", "sentence", ")", ",", "len", "(", "oindex1", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "x", "in", "sentence", ":", "\n", "            ", "imat", "[", "id2pos", "[", "x", ".", "id", "]", ",", "iindex2", "==", "id2pos", "[", "x", ".", "id", "]", "]", "=", "1.0", "/", "(", "\n", "np", ".", "sum", "(", "oindex1", "==", "id2pos", "[", "x", ".", "id", "]", ")", "+", "np", ".", "sum", "(", "iindex2", "==", "id2pos", "[", "x", ".", "id", "]", ")", ")", "\n", "\n", "# Outgoing", "\n", "", "for", "x", "in", "sentence", ":", "\n", "            ", "omat", "[", "id2pos", "[", "x", ".", "id", "]", ",", "oindex1", "==", "id2pos", "[", "x", ".", "id", "]", "]", "=", "1.0", "/", "(", "\n", "np", ".", "sum", "(", "oindex1", "==", "id2pos", "[", "x", ".", "id", "]", ")", "+", "np", ".", "sum", "(", "iindex2", "==", "id2pos", "[", "x", ".", "id", "]", ")", ")", "\n", "\n", "", "if", "self", ".", "compatible", ":", "\n", "            ", "onehot", "=", "np", ".", "zeros", "(", "(", "len", "(", "sentence", ")", ",", "self", ".", "dict_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "range", "(", "len", "(", "sentence", ")", ")", ",", "onehot_collect", "]", "=", "1", "\n", "\n", "", "iindex1", "=", "torch", ".", "from_numpy", "(", "iindex1", ")", "\n", "iindex2", "=", "torch", ".", "from_numpy", "(", "iindex2", ")", "\n", "oindex1", "=", "torch", ".", "from_numpy", "(", "oindex1", ")", "\n", "oindex2", "=", "torch", ".", "from_numpy", "(", "oindex2", ")", "\n", "if", "self", ".", "compatible", ":", "\n", "            ", "onehot", "=", "torch", ".", "from_numpy", "(", "onehot", ")", "\n", "", "else", ":", "\n", "            ", "onehot", "=", "torch", ".", "LongTensor", "(", "onehot_collect", ")", "\n", "", "imat", "=", "torch", ".", "from_numpy", "(", "imat", ")", "\n", "omat", "=", "torch", ".", "from_numpy", "(", "omat", ")", "\n", "\n", "return", "(", "onehot", ",", "iindex1", ",", "iindex2", ",", "imat", ",", "oindex1", ",", "oindex2", ",", "omat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.generate_one_sentence_binary": [[227, 255], ["numpy.array", "numpy.zeros", "enumerate", "enumerate", "len", "len", "numpy.sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "len", "numpy.array.append", "numpy.array.append", "numpy.array.append", "numpy.sum", "numpy.array.append", "numpy.array.append", "numpy.array.append", "numpy.array.reshape"], "methods", ["None"], ["", "def", "generate_one_sentence_binary", "(", "self", ",", "sentence", ")", ":", "\n", "# directed graph", "\n", "        ", "index", "=", "[", "]", "\n", "id2pos", "=", "{", "node", ".", "id", ":", "i", "for", "i", ",", "node", "in", "enumerate", "(", "sentence", ")", "}", "\n", "for", "node", "in", "sentence", ":", "\n", "            ", "if", "len", "(", "node", ".", "outgoing", ")", ">", "1", "and", "not", "(", "self", ".", "filter_abelian", "and", "node", ".", "name", "in", "COMM_OP", ")", ":", "\n", "                ", "for", "i", ",", "n1", "in", "enumerate", "(", "node", ".", "outgoing", ")", ":", "\n", "                    ", "for", "n2", "in", "node", ".", "outgoing", "[", "i", "+", "1", ":", "]", ":", "\n", "                        ", "index", ".", "append", "(", "id2pos", "[", "node", ".", "id", "]", ")", "\n", "index", ".", "append", "(", "id2pos", "[", "n1", ".", "id", "]", ")", "\n", "index", ".", "append", "(", "id2pos", "[", "n2", ".", "id", "]", ")", "\n", "", "", "", "if", "len", "(", "node", ".", "outgoing", ")", ">", "1", "and", "(", "self", ".", "filter_abelian", "and", "node", ".", "name", "==", "'|-:c'", ")", ":", "\n", "                ", "for", "n1", "in", "node", ".", "outgoing", "[", "1", ":", "]", ":", "\n", "                    ", "index", ".", "append", "(", "id2pos", "[", "node", ".", "id", "]", ")", "\n", "index", ".", "append", "(", "id2pos", "[", "node", ".", "outgoing", "[", "0", "]", ".", "id", "]", ")", "\n", "index", ".", "append", "(", "id2pos", "[", "n1", ".", "id", "]", ")", "\n", "", "", "", "index", "=", "np", ".", "array", "(", "index", ")", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "len", "(", "sentence", ")", ",", "len", "(", "index", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "x", "in", "sentence", ":", "\n", "            ", "f", "=", "index", "==", "id2pos", "[", "x", ".", "id", "]", "\n", "if", "np", ".", "sum", "(", "f", ")", ">", "0", ":", "\n", "                ", "mat", "[", "id2pos", "[", "x", ".", "id", "]", ",", "f", "]", "=", "1.0", "/", "np", ".", "sum", "(", "f", ")", "\n", "#print (index.shape, mat.shape)", "\n", "", "", "if", "index", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "return", "(", "torch", ".", "from_numpy", "(", "index", ".", "reshape", "(", "-", "1", ",", "3", ")", ".", "T", ")", ",", "torch", ".", "from_numpy", "(", "mat", ")", ")", "\n", "", "else", ":", "\n", "#print (index.shape, mat.shape)", "\n", "            ", "return", "(", "torch", ".", "Tensor", "(", "1", ")", ",", "torch", ".", "Tensor", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.read": [[256, 280], ["random.shuffle", "data_loader.DataLoader.queue.put", "open", "pickle.load", "random.shuffle", "os.path.join", "data_loader.DataLoader.queue.put", "data_loader.DataLoader.queue.put", "data_loader.DataLoader.queue.put", "data_loader.DataLoader.directed_generate_one_sentence", "data_loader.DataLoader.directed_generate_one_sentence", "data_loader.DataLoader.directed_generate_one_sentence", "data_loader.DataLoader.directed_generate_one_sentence", "data_loader.DataLoader.generate_one_sentence_binary", "data_loader.DataLoader.generate_one_sentence_binary", "data_loader.DataLoader.generate_one_sentence", "data_loader.DataLoader.generate_one_sentence"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.directed_generate_one_sentence", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.directed_generate_one_sentence", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.directed_generate_one_sentence", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.directed_generate_one_sentence", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.generate_one_sentence_binary", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.generate_one_sentence_binary", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.generate_one_sentence", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.generate_one_sentence"], ["", "", "def", "read", "(", "self", ")", ":", "\n", "        ", "files", "=", "self", ".", "file_list", "\n", "while", "True", ":", "\n", "            ", "random", ".", "shuffle", "(", "files", ")", "\n", "for", "a_file", "in", "files", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "formula_path", ",", "a_file", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "content", "=", "pickle", ".", "load", "(", "f", ")", "\n", "random", ".", "shuffle", "(", "content", ")", "\n", "for", "x", "in", "content", ":", "\n", "                        ", "flag", ",", "conj", ",", "stmt", "=", "x", "\n", "if", "self", ".", "separate_conj_stmt", ":", "\n", "                            ", "self", ".", "queue", ".", "put", "(", "\n", "(", "self", ".", "directed_generate_one_sentence", "(", "conj", ")", ",", "\n", "self", ".", "directed_generate_one_sentence", "(", "stmt", ")", ",", "flag", ")", ")", "\n", "", "elif", "self", ".", "binary", ":", "\n", "                            ", "self", ".", "queue", ".", "put", "(", "\n", "(", "self", ".", "directed_generate_one_sentence", "(", "conj", ")", ",", "\n", "self", ".", "directed_generate_one_sentence", "(", "stmt", ")", ",", "flag", ",", "\n", "self", ".", "generate_one_sentence_binary", "(", "conj", ")", ",", "\n", "self", ".", "generate_one_sentence_binary", "(", "stmt", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "generate_one_sentence", "(", "conj", ")", ",", "\n", "self", ".", "generate_one_sentence", "(", "stmt", ")", ",", "flag", ")", ")", "\n", "", "", "", "", "self", ".", "queue", ".", "put", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.destruct": [[281, 283], ["data_loader.DataLoader.reader.terminate"], "methods", ["None"], ["", "", "def", "destruct", "(", "self", ")", ":", "\n", "        ", "self", ".", "reader", ".", "terminate", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeVariable.__init__": [[15, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "data", "=", "var", "#.share_memory_()", "\n", "self", ".", "grad", "=", "None", "\n", "self", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.__init__": [[22, 26], ["model_utils.FakeModule.init_state_dict"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.init_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "module", ")", ":", "\n", "        ", "params", ",", "buffers", "=", "FakeModule", ".", "init_state_dict", "(", "module", ")", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "buffers", "=", "buffers", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.init_state_dict": [[27, 44], ["module._parameters.items", "module._buffers.items", "module._modules.items", "collections.OrderedDict", "collections.OrderedDict", "model_utils.FakeVariable", "model_utils.FakeModule.init_state_dict"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.init_state_dict"], ["", "@", "staticmethod", "\n", "def", "init_state_dict", "(", "module", ",", "params", "=", "None", ",", "buffers", "=", "None", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "OrderedDict", "(", ")", "\n", "", "if", "buffers", "is", "None", ":", "\n", "            ", "buffers", "=", "OrderedDict", "(", ")", "\n", "", "for", "name", ",", "param", "in", "module", ".", "_parameters", ".", "items", "(", ")", ":", "\n", "            ", "if", "param", "is", "not", "None", ":", "\n", "                ", "params", "[", "prefix", "+", "name", "]", "=", "FakeVariable", "(", "param", ".", "data", ")", "\n", "", "", "for", "name", ",", "buf", "in", "module", ".", "_buffers", ".", "items", "(", ")", ":", "\n", "            ", "if", "buf", "is", "not", "None", ":", "\n", "                ", "buffers", "[", "prefix", "+", "name", "]", "=", "buf", "\n", "", "", "for", "name", ",", "smodule", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "if", "smodule", "is", "not", "None", ":", "\n", "                ", "FakeModule", ".", "init_state_dict", "(", "smodule", ",", "params", ",", "buffers", ",", "\n", "prefix", "+", "name", "+", "'.'", ")", "\n", "", "", "return", "params", ",", "buffers", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.state_dict": [[45, 50], ["params.update", "model_utils.FakeModule.params.items", "model_utils.FakeModule.buffers.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "{", "name", ":", "param", ".", "data", "for", "name", ",", "param", "in", "self", ".", "params", ".", "items", "(", ")", "}", "\n", "buffers", "=", "{", "name", ":", "buf", "for", "name", ",", "buf", "in", "self", ".", "buffers", ".", "items", "(", ")", "}", "\n", "params", ".", "update", "(", "buffers", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.load_state_dict": [[51, 63], ["model_utils.FakeModule.state_dict", "state_dict.items", "isinstance", "own_state[].copy_", "set", "set", "len", "KeyError", "KeyError", "model_utils.FakeModule.keys", "state_dict.keys"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "own_state", "=", "self", ".", "state_dict", "(", ")", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "name", "not", "in", "own_state", ":", "\n", "                ", "raise", "KeyError", "(", "'unexpected key \"{}\" in state_dict'", ".", "format", "(", "name", ")", ")", "\n", "", "if", "isinstance", "(", "param", ",", "FakeVariable", ")", ":", "\n", "                ", "param", "=", "param", ".", "data", "\n", "", "own_state", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "\n", "", "missing", "=", "set", "(", "own_state", ".", "keys", "(", ")", ")", "-", "set", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "len", "(", "missing", ")", ">", "0", ":", "\n", "            ", "raise", "KeyError", "(", "'missing keys in state_dict: \"{}\"'", ".", "format", "(", "missing", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.parameters": [[64, 67], ["model_utils.FakeModule.params.values"], "methods", ["None"], ["", "", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "params", ".", "values", "(", ")", ":", "\n", "            ", "yield", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.named_parameters": [[68, 71], ["model_utils.FakeModule.params.items"], "methods", ["None"], ["", "", "def", "named_parameters", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "params", ".", "items", "(", ")", ":", "\n", "            ", "yield", "name", ",", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.named_buffers": [[72, 75], ["model_utils.FakeModule.buffers.items"], "methods", ["None"], ["", "", "def", "named_buffers", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "buf", "in", "self", ".", "buffers", ".", "items", "(", ")", ":", "\n", "            ", "yield", "name", ",", "buf", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.HistoryRecorder.__init__": [[78, 82], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "record_file", ")", ":", "\n", "        ", "self", ".", "file", "=", "record_file", "\n", "self", ".", "test_history", "=", "[", "]", "\n", "self", ".", "train_history", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.HistoryRecorder.train_acc": [[83, 85], ["model_utils.HistoryRecorder.train_history.append"], "methods", ["None"], ["", "def", "train_acc", "(", "self", ",", "training_total", ",", "acc", ")", ":", "\n", "        ", "self", ".", "train_history", ".", "append", "(", "(", "training_total", ",", "acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.HistoryRecorder.test_acc": [[86, 88], ["model_utils.HistoryRecorder.test_history.append"], "methods", ["None"], ["", "def", "test_acc", "(", "self", ",", "training_total", ",", "acc", ")", ":", "\n", "        ", "self", ".", "test_history", ".", "append", "(", "(", "training_total", ",", "acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.HistoryRecorder.save_record": [[89, 94], ["torch.save"], "methods", ["None"], ["", "def", "save_record", "(", "self", ")", ":", "\n", "        ", "dict_file", "=", "{", "}", "\n", "dict_file", "[", "'train'", "]", "=", "self", ".", "train_history", "\n", "dict_file", "[", "'test'", "]", "=", "self", ".", "test_history", "\n", "torch", ".", "save", "(", "dict_file", ",", "self", ".", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.save_model": [[96, 107], ["torch.save", "net.state_dict", "savedata[].append", "mid_net.state_dict", "fn.state_dict"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.state_dict", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.state_dict", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.state_dict"], ["", "", "def", "save_model", "(", "aux", ",", "args", ",", "net", ",", "mid_net", ",", "loss_fn", ",", "out_path", ")", ":", "\n", "    ", "savedata", "=", "{", "}", "\n", "savedata", "[", "'aux'", "]", "=", "aux", "\n", "savedata", "[", "'args'", "]", "=", "args", "\n", "savedata", "[", "'net'", "]", "=", "{", "'state_dict'", ":", "net", ".", "state_dict", "(", ")", "}", "\n", "if", "mid_net", "is", "not", "None", ":", "\n", "        ", "savedata", "[", "'mid_net'", "]", "=", "{", "'state_dict'", ":", "mid_net", ".", "state_dict", "(", ")", "}", "\n", "", "savedata", "[", "'loss_fn'", "]", "=", "[", "]", "\n", "for", "fn", "in", "loss_fn", ":", "\n", "        ", "savedata", "[", "'loss_fn'", "]", ".", "append", "(", "{", "'state_dict'", ":", "fn", ".", "state_dict", "(", ")", "}", ")", "\n", "", "torch", ".", "save", "(", "savedata", ",", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.load_model": [[109, 217], ["torch.load", "model.GraphNet().cuda", "model.GraphNet().cuda.load_state_dict", "model.GraphNet().cuda.train", "range", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "hasattr", "setattr", "data_loader.DataLoader", "model.FullyConnectedNet().cuda", "model.FullyConnectedNet().cuda.load_state_dict", "model.FullyConnectedNet().cuda.train", "loss_fn[].load_state_dict", "loss_fn[].eval", "model.GraphNet", "loss_fn.append", "os.path.join", "os.path.join", "model.FullyConnectedNet", "loss.CondLoss().cuda", "loss_fn.append", "loss_fn.append", "loss_fn.append", "loss.CondLoss", "loss.ClassifyLoss().cuda", "loss.ClassifyLoss().cuda", "loss.UCSimLoss().cuda", "loss_fn.append", "loss.ClassifyLoss().cuda", "loss_fn.append", "loss.ClassifyLoss", "loss.ClassifyLoss", "loss.UCSimLoss", "loss.ClassifyLoss().cuda", "loss.ClassifyLoss", "loss.ClassifyLoss"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.load_state_dict", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.train", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.load_state_dict", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.train", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.load_state_dict"], ["", "def", "load_model", "(", "model_file", ",", "overided_path", "=", "None", ",", "compatible", "=", "False", ",", "subdir", "=", "None", ",", "noloader", "=", "False", ")", ":", "\n", "    ", "data", "=", "torch", ".", "load", "(", "model_file", ")", "\n", "args", "=", "data", "[", "'args'", "]", "\n", "\n", "if", "not", "noloader", ":", "\n", "        ", "if", "overided_path", "is", "not", "None", ":", "\n", "            ", "if", "subdir", "is", "not", "None", ":", "\n", "                ", "data_path", "=", "os", ".", "path", ".", "join", "(", "overided_path", ",", "subdir", ")", "\n", "", "else", ":", "\n", "                ", "data_path", "=", "overided_path", "\n", "", "", "else", ":", "\n", "            ", "if", "subdir", "is", "not", "None", ":", "\n", "                ", "data_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "subdir", ")", "\n", "", "else", ":", "\n", "                ", "data_path", "=", "args", ".", "train_file", "\n", "", "", "", "if", "not", "hasattr", "(", "args", ",", "'direction'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'direction'", ",", "args", ".", "separate_in_out", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'loss'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'loss'", ",", "'concat'", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'step2'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'step2'", ",", "False", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'binary'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'binary'", ",", "False", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'norename'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'norename'", ",", "False", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'fabelian'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'fabelian'", ",", "False", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'dropout'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'dropout'", ",", "0", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'no_step_supervision'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'no_step_supervision'", ",", "False", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'cond_short_cut'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'cond_short_cut'", ",", "False", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'loss_step'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'loss_step'", ",", "args", ".", "nSteps", "+", "1", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'loss_layers'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'loss_layers'", ",", "None", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'tied_weight'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'tied_weight'", ",", "None", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'resume'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'resume'", ",", "False", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'fix_net'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'fix_net'", ",", "False", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'compatible'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'compatible'", ",", "False", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'resume_only_net'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'resume_only_net'", ",", "False", ")", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'unfix_net_after'", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "'unfix_net_after'", ",", "None", ")", "\n", "\n", "", "loader", "=", "None", "\n", "if", "not", "noloader", ":", "\n", "        ", "loader", "=", "data_loader", ".", "DataLoader", "(", "\n", "data_path", ",", "args", ".", "dict_file", ",", "separate_conj_stmt", "=", "args", ".", "direction", ",", "binary", "=", "args", ".", "binary", ")", "\n", "loader", ".", "iter_", "=", "data", "[", "'aux'", "]", "[", "'epoch'", "]", "+", "1", "\n", "loader", ".", "total_iter", "=", "data", "[", "'aux'", "]", "[", "'total_iter'", "]", "\n", "\n", "", "net", "=", "model", ".", "GraphNet", "(", "loader", ".", "dict_size", ",", "args", ".", "nFeats", ",", "args", ".", "nSteps", ",", "args", ".", "block", ",", "\n", "args", ".", "module_depth", ",", "args", ".", "bias", ",", "args", ".", "short_cut", ",", "args", ".", "direction", ",", "\n", "args", ".", "loss", ",", "args", ".", "binary", ",", "\n", "no_step_supervision", "=", "args", ".", "no_step_supervision", ",", "\n", "compatible", "=", "compatible", ")", ".", "cuda", "(", ")", "\n", "\n", "net", ".", "load_state_dict", "(", "data", "[", "'net'", "]", "[", "'state_dict'", "]", ")", "\n", "net", ".", "train", "(", ")", "\n", "mid_net", "=", "None", "\n", "if", "args", ".", "loss", "in", "(", "'mixmax'", ",", "'mixmean'", ")", ":", "\n", "        ", "mid_net", "=", "model", ".", "FullyConnectedNet", "(", "\n", "args", ".", "nFeats", ",", "args", ".", "nFeats", "//", "2", ",", "bias", "=", "args", ".", "bias", ")", ".", "cuda", "(", ")", "\n", "mid_net", ".", "load_state_dict", "(", "data", "[", "'mid_net'", "]", "[", "'state_dict'", "]", ")", "\n", "mid_net", ".", "train", "(", ")", "\n", "\n", "", "loss_fn", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "loss_step", ")", ":", "\n", "        ", "if", "args", ".", "loss", "==", "'condloss'", ":", "\n", "            ", "loss_fn", ".", "append", "(", "loss", ".", "CondLoss", "(", "args", ".", "nFeats", "*", "2", ",", "args", ".", "nFeats", ",", "\n", "layer_list", "=", "args", ".", "loss_layers", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "cond_short_cut", "=", "args", ".", "cond_short_cut", ")", ".", "cuda", "(", ")", ")", "\n", "", "elif", "args", ".", "loss", "in", "(", "'concat'", ",", "'concat_em_uc'", ")", ":", "\n", "            ", "if", "args", ".", "uncondition", "or", "args", ".", "add_conj", ":", "\n", "                ", "loss_fn", ".", "append", "(", "loss", ".", "ClassifyLoss", "(", "args", ".", "nFeats", ",", "args", ".", "nFeats", "//", "2", ",", "\n", "layer_list", "=", "args", ".", "loss_layers", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "bias", "=", "compatible", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fn", ".", "append", "(", "loss", ".", "ClassifyLoss", "(", "args", ".", "nFeats", "*", "2", ",", "args", ".", "nFeats", ",", "\n", "layer_list", "=", "args", ".", "loss_layers", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "bias", "=", "compatible", ")", ".", "cuda", "(", ")", ")", "\n", "", "", "elif", "args", ".", "loss", "in", "(", "'mixmax'", ",", "'mixmean'", ")", ":", "\n", "            ", "loss_fn", ".", "append", "(", "loss", ".", "UCSimLoss", "(", "args", ".", "nFeats", ",", "args", ".", "nFeats", "//", "2", ",", "\n", "layer_list", "=", "args", ".", "loss_layers", ",", "\n", "dropout", "=", "args", ".", "dropout", ")", ".", "cuda", "(", ")", ")", "\n", "", "elif", "args", ".", "loss", "==", "'pair'", ":", "\n", "            ", "loss_fn", ".", "append", "(", "loss", ".", "ClassifyLoss", "(", "args", ".", "nFeats", "//", "2", ",", "args", ".", "nFeats", "//", "4", ",", "\n", "layer_list", "=", "args", ".", "loss_layers", ",", "\n", "dropout", "=", "args", ".", "dropout", ")", ".", "cuda", "(", ")", ")", "\n", "", "elif", "args", ".", "loss", "==", "'em'", ":", "\n", "            ", "loss_fn", ".", "append", "(", "loss", ".", "ClassifyLoss", "(", "args", ".", "nFeats", ",", "args", ".", "nFeats", "//", "2", ",", "\n", "layer_list", "=", "args", ".", "loss_layers", ",", "\n", "dropout", "=", "args", ".", "dropout", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'Wrong --loss option!'", "\n", "", "loss_fn", "[", "-", "1", "]", ".", "load_state_dict", "(", "data", "[", "'loss_fn'", "]", "[", "i", "]", "[", "'state_dict'", "]", ")", "\n", "loss_fn", "[", "-", "1", "]", ".", "eval", "(", ")", "\n", "\n", "", "return", "net", ",", "mid_net", ",", "loss_fn", ",", "loader", ",", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.print_args": [[219, 224], ["args.__dict__.items", "str", "str"], "function", ["None"], ["", "def", "print_args", "(", "args", ")", ":", "\n", "    ", "s", "=", "'\\nParameter setting:\\n'", "\n", "for", "name", ",", "value", "in", "args", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "s", "+=", "str", "(", "name", ")", "+", "': '", "+", "str", "(", "value", ")", "+", "'\\n'", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.get_opt": [[226, 249], ["list", "torch.optim.SGD", "net.parameters", "list", "list", "torch.optim.RMSprop", "mid_net.parameters", "func.parameters", "torch.optim.Adam"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.parameters", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.parameters", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.parameters"], ["", "def", "get_opt", "(", "net", ",", "mid_net", ",", "loss_fn", ",", "args", ",", "mode", "=", "'all'", ")", ":", "\n", "    ", "opt", "=", "None", "\n", "params", "=", "[", "]", "\n", "if", "mode", "in", "(", "'all'", ",", "'net'", ")", ":", "\n", "        ", "params", "+=", "list", "(", "net", ".", "parameters", "(", ")", ")", "\n", "if", "mid_net", "is", "not", "None", ":", "\n", "            ", "params", "+=", "list", "(", "mid_net", ".", "parameters", "(", ")", ")", "\n", "\n", "", "", "if", "mode", "in", "(", "'all'", ",", "'loss'", ")", ":", "\n", "        ", "for", "func", "in", "loss_fn", ":", "\n", "            ", "params", "+=", "list", "(", "func", ".", "parameters", "(", ")", ")", "\n", "\n", "", "", "if", "args", ".", "optim", "==", "'sgd'", ":", "\n", "        ", "opt", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", "=", "params", ",", "lr", "=", "args", ".", "learning_rate", ",", "weight_decay", "=", "1e-04", ",", "momentum", "=", "0.9", ")", "\n", "", "elif", "args", ".", "optim", "==", "'rmsprop'", ":", "\n", "        ", "opt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "\n", "params", "=", "params", ",", "lr", "=", "args", ".", "learning_rate", ",", "weight_decay", "=", "1e-04", ")", "\n", "", "elif", "args", ".", "optim", "==", "'adam'", ":", "\n", "        ", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "params", ",", "lr", "=", "args", ".", "learning_rate", ",", "weight_decay", "=", "1e-04", ")", "\n", "", "else", ":", "\n", "        ", "assert", "opt", "is", "None", ",", "'Wrong optimizer argument.'", "\n", "", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.named_buffers": [[251, 263], ["model_utils.._buffers.items", "model_utils..named_children", "set", "model_utils.named_buffers", "set.add"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.named_buffers"], ["", "def", "named_buffers", "(", "self", ",", "memo", "=", "None", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "'''Get named buffer in given module'''", "\n", "if", "memo", "is", "None", ":", "\n", "        ", "memo", "=", "set", "(", ")", "\n", "", "for", "name", ",", "p", "in", "self", ".", "_buffers", ".", "items", "(", ")", ":", "\n", "        ", "if", "p", "is", "not", "None", "and", "p", "not", "in", "memo", ":", "\n", "            ", "memo", ".", "add", "(", "p", ")", "\n", "yield", "prefix", "+", "(", "'.'", "if", "prefix", "else", "''", ")", "+", "name", ",", "p", "\n", "", "", "for", "mname", ",", "module", "in", "self", ".", "named_children", "(", ")", ":", "\n", "        ", "submodule_prefix", "=", "prefix", "+", "(", "'.'", "if", "prefix", "else", "''", ")", "+", "mname", "\n", "for", "name", ",", "p", "in", "named_buffers", "(", "module", ",", "memo", ",", "submodule_prefix", ")", ":", "\n", "            ", "yield", "name", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.split_list": [[265, 272], ["len", "len"], "function", ["None"], ["", "", "", "def", "split_list", "(", "l", ",", "total", ",", "i", ")", ":", "\n", "    ", "persplit", "=", "len", "(", "l", ")", "//", "total", "\n", "offset", "=", "len", "(", "l", ")", "%", "total", "\n", "if", "i", "<", "offset", ":", "\n", "        ", "return", "l", "[", "persplit", "*", "i", "+", "i", ":", "persplit", "*", "(", "i", "+", "1", ")", "+", "i", "+", "1", "]", "\n", "", "else", ":", "\n", "        ", "return", "l", "[", "persplit", "*", "i", "+", "offset", ":", "persplit", "*", "(", "i", "+", "1", ")", "+", "offset", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.loss.ClassifyLoss.__init__": [[16, 44], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "loss.ClassifyLoss.hids.append", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "loss.ClassifyLoss.bns.append", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nFeats_in", "=", "None", ",", "nFeats_out", "=", "None", ",", "layer_list", "=", "None", ",", "\n", "dropout", "=", "0", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "ClassifyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "if", "layer_list", "is", "None", ":", "\n", "            ", "self", ".", "list", "=", "False", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "nFeats_in", ",", "nFeats_out", ",", "bias", "=", "bias", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "                ", "self", ".", "l1dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ",", "inplace", "=", "True", ")", "\n", "", "init", ".", "kaiming_normal", "(", "self", ".", "l1", ".", "weight", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "nFeats_out", ",", "2", ")", "\n", "init", ".", "kaiming_normal", "(", "self", ".", "l2", ".", "weight", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "nFeats_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "list", "=", "True", "\n", "self", ".", "hids", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "                ", "self", ".", "dropout_l", "=", "nn", ".", "Dropout", "(", "inplace", "=", "True", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "layer_list", ")", "-", "1", ")", ":", "\n", "                ", "self", ".", "hids", ".", "append", "(", "nn", ".", "Linear", "(", "layer_list", "[", "i", "]", ",", "layer_list", "[", "i", "+", "1", "]", ",", "bias", "=", "False", ")", ")", "\n", "init", ".", "kaiming_normal", "(", "self", ".", "hids", "[", "-", "1", "]", ".", "weight", ")", "\n", "self", ".", "bns", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "layer_list", "[", "i", "+", "1", "]", ")", ")", "\n", "", "self", ".", "lout", "=", "nn", ".", "Linear", "(", "layer_list", "[", "-", "1", "]", ",", "2", ")", "\n", "init", ".", "kaiming_normal", "(", "self", ".", "lout", ".", "weight", ")", "\n", "", "self", ".", "crossentropy", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "score", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.loss.ClassifyLoss.check_result": [[45, 49], ["loss.ClassifyLoss.score.eq().cpu().sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "loss.ClassifyLoss.score.eq().cpu", "loss.ClassifyLoss.score.eq"], "methods", ["None"], ["", "def", "check_result", "(", "self", ",", "y", ")", ":", "\n", "        ", "y", "=", "torch", ".", "cat", "(", "y", ")", ".", "data", "\n", "correct", "=", "self", ".", "score", ".", "eq", "(", "y", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "return", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.loss.ClassifyLoss.forward": [[50, 72], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "loss.ClassifyLoss.ClassifyLoss.crossentropy", "loss.ClassifyLoss.ClassifyLoss.l1", "loss.ClassifyLoss.ClassifyLoss.bn1", "loss.ClassifyLoss.ClassifyLoss.relu", "loss.ClassifyLoss.ClassifyLoss.l2", "range", "loss.ClassifyLoss.ClassifyLoss.lout", "loss.ClassifyLoss.ClassifyLoss.data.max", "loss.ClassifyLoss.ClassifyLoss.l1dropout", "len", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "loss.ClassifyLoss.ClassifyLoss.dropout_l"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "y_", "=", "torch", ".", "cat", "(", "y", ")", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "0", ")", "\n", "if", "not", "self", ".", "list", ":", "\n", "            ", "x", "=", "self", ".", "l1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "                ", "x", "=", "self", ".", "l1dropout", "(", "x", ")", "\n", "", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "hids", ")", ")", ":", "\n", "                ", "x", "=", "self", ".", "hids", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "bns", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "                    ", "x", "=", "self", ".", "dropout_l", "(", "x", ")", "\n", "", "", "x", "=", "self", ".", "lout", "(", "x", ")", "\n", "\n", "", "self", ".", "score", "=", "x", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "loss", "=", "self", ".", "crossentropy", "(", "x", ",", "y_", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.loss.l2norm2d": [[9, 13], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "norm.expand_as", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "l2norm2d", "(", "inputs", ",", "k", ")", ":", "\n", "# k dimension to normalize", "\n", "    ", "norm", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "inputs", "*", "inputs", ",", "k", ")", ")", "+", "1e-12", "\n", "return", "inputs", "/", "norm", ".", "expand_as", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_test.main": [[13, 95], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.set_start_method", "log.get_logger", "log.get_logger.info", "log.get_logger.info", "os.path.join", "model_utils.load_model", "range", "log.get_logger.info", "log.get_logger.info", "time.time", "net.state_dict", "range", "log.get_logger.warning", "range", "log.get_logger.warning", "time.sleep", "model_utils.print_args", "torch.multiprocessing.Pipe", "torch.multiprocessing.Pipe", "inqueues.append", "outqueues.append", "plist.append", "plist[].start", "model_utils.print_args", "mid_net.state_dict", "data[].append", "inqueues[].send", "outqueues[].recv", "p.terminate", "torch.multiprocessing.Process", "loss.state_dict", "time.time"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.parse_args", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.log.get_logger", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.load_model", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.state_dict", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.print_args", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.print_args", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.state_dict", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.state_dict"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'The ultimate tester'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--model'", ",", "type", "=", "str", ",", "help", "=", "'The model file name used for testing'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--model_path'", ",", "type", "=", "str", ",", "help", "=", "'The path to model folder'", ",", "default", "=", "'../models'", ")", "\n", "parser", ".", "add_argument", "(", "'--log'", ",", "type", "=", "str", ",", "help", "=", "'Path to log file'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--data'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Path to testing set folder'", ",", "\n", "default", "=", "'../data/hol_data/test'", ")", "\n", "parser", ".", "add_argument", "(", "'--worker'", ",", "type", "=", "int", ",", "help", "=", "'Number of workers'", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--max_pair'", ",", "type", "=", "int", ",", "help", "=", "'Change max_pair settings'", ")", "\n", "parser", ".", "add_argument", "(", "'--compatible'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use compatible mode to run.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dict_file'", ",", "type", "=", "str", ",", "help", "=", "'Replace dict'", ")", "\n", "\n", "settings", "=", "parser", ".", "parse_args", "(", ")", "\n", "mp", ".", "set_start_method", "(", "'spawn'", ")", "# Using spawn is decided.", "\n", "\n", "_logger", "=", "log", ".", "get_logger", "(", "__name__", ",", "settings", ")", "\n", "_logger", ".", "info", "(", "'Test program parameters'", ")", "\n", "_logger", ".", "info", "(", "print_args", "(", "settings", ")", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "settings", ".", "model_path", ",", "settings", ".", "model", ")", "\n", "net", ",", "mid_net", ",", "loss_fn", ",", "test_loader", ",", "args", "=", "load_model", "(", "model_path", ",", "settings", ".", "data", ",", "settings", ".", "compatible", ")", "\n", "args", ".", "test_file", "=", "settings", ".", "data", "\n", "if", "settings", ".", "dict_file", "is", "not", "None", ":", "\n", "        ", "args", ".", "dict_file", "=", "settings", ".", "dict_file", "\n", "", "if", "settings", ".", "max_pair", "is", "not", "None", ":", "\n", "        ", "args", ".", "max_pair", "=", "settings", ".", "max_pair", "\n", "", "args", ".", "compatible", "=", "settings", ".", "compatible", "\n", "inqueues", "=", "[", "]", "\n", "outqueues", "=", "[", "]", "\n", "\n", "if", "settings", ".", "worker", "is", "not", "None", ":", "\n", "        ", "args", ".", "worker", "=", "settings", ".", "worker", "\n", "\n", "", "plist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "worker", ")", ":", "\n", "        ", "recv_p", ",", "send_p", "=", "Pipe", "(", "False", ")", "\n", "recv_p2", ",", "send_p2", "=", "Pipe", "(", "False", ")", "\n", "inqueues", ".", "append", "(", "send_p", ")", "\n", "outqueues", ".", "append", "(", "recv_p2", ")", "\n", "plist", ".", "append", "(", "\n", "Process", "(", "target", "=", "worker", ",", "args", "=", "(", "recv_p", ",", "send_p2", ",", "test_loader", ",", "args", ",", "i", ")", ")", ")", "\n", "plist", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "\n", "", "test_loader", "=", "None", "\n", "\n", "_logger", ".", "info", "(", "'Model parameters'", ")", "\n", "_logger", ".", "info", "(", "print_args", "(", "args", ")", ")", "\n", "\n", "valid_start", "=", "time", ".", "time", "(", ")", "\n", "data", "=", "{", "}", "\n", "data", "[", "'args'", "]", "=", "args", "\n", "data", "[", "'net'", "]", "=", "net", ".", "state_dict", "(", ")", "\n", "data", "[", "'fix_net'", "]", "=", "False", "\n", "if", "mid_net", "is", "not", "None", ":", "\n", "        ", "data", "[", "'mid_net'", "]", "=", "mid_net", ".", "state_dict", "(", ")", "\n", "", "data", "[", "'loss_fn'", "]", "=", "[", "]", "\n", "for", "loss", "in", "loss_fn", ":", "\n", "        ", "data", "[", "'loss_fn'", "]", ".", "append", "(", "loss", ".", "state_dict", "(", ")", ")", "\n", "", "data", "[", "'test'", "]", "=", "True", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "worker", ")", ":", "\n", "        ", "inqueues", "[", "i", "]", ".", "send", "(", "data", ")", "\n", "\n", "", "result_correct", "=", "0", "\n", "result_total", "=", "0", "\n", "\n", "_logger", ".", "warning", "(", "'Test start!'", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "worker", ")", ":", "\n", "        ", "data", "=", "outqueues", "[", "i", "]", ".", "recv", "(", ")", "\n", "result_correct", "+=", "data", "[", "'correct'", "]", "\n", "result_total", "+=", "data", "[", "'total'", "]", "\n", "", "result_", "=", "result_correct", "/", "result_total", "\n", "_logger", ".", "warning", "(", "'Validation complete! Time lapse: %.3f, Test acc: %.5f'", "%", "\n", "(", "time", ".", "time", "(", ")", "-", "valid_start", ",", "result_", ")", ")", "\n", "\n", "for", "p", "in", "plist", ":", "\n", "        ", "p", ".", "terminate", "(", ")", "\n", "", "time", ".", "sleep", "(", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.input_data.__init__": [[12, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "G", ")", ":", "\n", "        ", "self", ".", "onehot", "# Tensor (num_nodes*input_dim) one hot from dict", "\n", "self", ".", "index1", "# Long Tensor (num_pairs) (source) self.index2  # Long Tensor (num_pairs) (target)", "\n", "self", ".", "mat", "#  Tensor for index add (num_nodes * num_pairs)", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.ForwardBlock.__init__": [[19, 32], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "model.ForwardBlock.linear.append", "model.ForwardBlock.bn.append", "model.ForwardBlock.relu.append", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "nLayers", "=", "2", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "ForwardBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "nLayers", "=", "nLayers", "\n", "for", "i", "in", "range", "(", "nLayers", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "l", "=", "input_dim", "\n", "else", ":", "l", "=", "output_dim", "\n", "self", ".", "linear", ".", "append", "(", "nn", ".", "Linear", "(", "l", ",", "output_dim", ",", "bias", ")", ")", "\n", "self", ".", "bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "output_dim", ")", ")", "\n", "self", ".", "relu", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "init", ".", "kaiming_normal", "(", "self", ".", "linear", "[", "-", "1", "]", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.ForwardBlock.forward": [[33, 39], ["range"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "nLayers", ")", ":", "\n", "            ", "x", "=", "self", ".", "linear", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "[", "i", "]", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.FullyConnectedNet.__init__": [[42, 60], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model.FullyConnectedNet.linear.append", "model.FullyConnectedNet.bn.append", "model.FullyConnectedNet.relu.append", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "layers", ")", ":", "\n", "        ", "'''\n        layers : list of int\n            There are dimensions in the sequence\n        '''", "\n", "super", "(", "FullyConnectedNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ModuleList", "(", ")", "\n", "pre_dim", "=", "layers", "[", "0", "]", "\n", "self", ".", "nLayers", "=", "0", "\n", "for", "dim", "in", "layers", "[", "1", ":", "]", ":", "\n", "            ", "self", ".", "linear", ".", "append", "(", "nn", ".", "Linear", "(", "pre_dim", ",", "dim", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "self", ".", "relu", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "init", ".", "kaiming_normal", "(", "self", ".", "linear", "[", "-", "1", "]", ".", "weight", ")", "\n", "self", ".", "nLayers", "+=", "1", "\n", "pre_dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.FullyConnectedNet.forward": [[61, 67], ["range"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "nLayers", ")", ":", "\n", "            ", "x", "=", "self", ".", "linear", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "[", "i", "]", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.GraphNet.__init__": [[111, 168], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "model.PairForward", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "model.GraphNet.step.append", "model.GraphNet.step_out.append", "model.GraphNet.step_binary.append", "model.GraphNet.l2.append"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_dim", ",", "\n", "nFeats", ",", "\n", "nLayers", ",", "\n", "block", "=", "'normal'", ",", "\n", "depth", "=", "2", ",", "\n", "bias", "=", "False", ",", "\n", "short_cut", "=", "False", ",", "\n", "direction", "=", "False", ",", "\n", "loss", "=", "None", ",", "\n", "binary", "=", "False", ",", "\n", "no_step_supervision", "=", "False", ",", "\n", "tied_weight", "=", "False", ",", "\n", "compatible", "=", "False", ")", ":", "# compatible is used to run old model", "\n", "        ", "super", "(", "GraphNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "no_step_supervision", "=", "no_step_supervision", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "nFeats", "=", "nFeats", "\n", "self", ".", "nLayers", "=", "nLayers", "\n", "self", ".", "step", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "compatible", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "input_dim", ",", "nFeats", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Embedding", "(", "input_dim", ",", "nFeats", ",", "sparse", "=", "False", ")", "\n", "", "init", ".", "kaiming_normal", "(", "self", ".", "l1", ".", "weight", ")", "\n", "self", ".", "l2", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "nFeats", ")", "\n", "self", ".", "short_cut", "=", "short_cut", "\n", "self", ".", "direction", "=", "direction", "\n", "self", ".", "binary", "=", "binary", "\n", "if", "loss", "==", "'pair'", ":", "\n", "            ", "self", ".", "pair_forward", "=", "PairForward", "(", "2", "*", "nFeats", ",", "nFeats", ",", "nFeats", "//", "2", ",", "\n", "nFeats", "//", "2", ")", "\n", "", "if", "self", ".", "direction", "or", "self", ".", "binary", ":", "\n", "            ", "self", ".", "step_out", "=", "nn", ".", "ModuleList", "(", ")", "\n", "", "if", "self", ".", "binary", ":", "\n", "            ", "self", ".", "step_binary", "=", "nn", ".", "ModuleList", "(", ")", "\n", "", "self", ".", "tied_weight", "=", "tied_weight", "\n", "if", "tied_weight", ":", "\n", "            ", "self", ".", "step", "=", "block_dict", "[", "block", "]", "(", "nFeats", "*", "2", ",", "nFeats", ",", "depth", ",", "bias", ")", "\n", "if", "self", ".", "direction", "or", "self", ".", "binary", ":", "\n", "                ", "self", ".", "step_out", "=", "block_dict", "[", "block", "]", "(", "nFeats", "*", "2", ",", "nFeats", ",", "depth", ",", "bias", ")", "\n", "", "if", "self", ".", "binary", ":", "\n", "                ", "self", ".", "step_binary", "=", "block_dict", "[", "block", "]", "(", "nFeats", "*", "3", ",", "nFeats", "*", "3", ",", "depth", ",", "bias", ")", "\n", "", "if", "short_cut", ":", "\n", "                ", "self", ".", "l2", "=", "block_dict", "[", "block", "]", "(", "nFeats", ",", "nFeats", ",", "1", ",", "bias", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "nLayers", ")", ":", "\n", "                ", "self", ".", "step", ".", "append", "(", "block_dict", "[", "block", "]", "(", "nFeats", "*", "2", ",", "nFeats", ",", "depth", ",", "bias", ")", ")", "\n", "if", "self", ".", "direction", "or", "self", ".", "binary", ":", "\n", "                    ", "self", ".", "step_out", ".", "append", "(", "\n", "block_dict", "[", "block", "]", "(", "nFeats", "*", "2", ",", "nFeats", ",", "depth", ",", "bias", ")", ")", "\n", "", "if", "self", ".", "binary", ":", "\n", "                    ", "self", ".", "step_binary", ".", "append", "(", "block_dict", "[", "block", "]", "(", "nFeats", "*", "3", ",", "nFeats", "*", "3", ",", "depth", ",", "bias", ")", ")", "\n", "", "if", "short_cut", "and", "i", "<", "nLayers", "-", "1", ":", "\n", "                    ", "self", ".", "l2", ".", "append", "(", "block_dict", "[", "block", "]", "(", "nFeats", ",", "nFeats", ",", "1", ",", "bias", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.GraphNet.forward": [[169, 232], ["model.GraphNet.l1", "model.GraphNet.bn", "model.GraphNet.relu", "range", "range", "model.GraphNet.step", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.GraphNet.step_out", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "model.GraphNet.step_binary", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "out.append", "model.GraphNet.l2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "out.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.GraphNet.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.GraphNet.view", "data[].size", "data[].size"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "data", ",", "conj", "=", "None", ")", ":", "\n", "# [onehot , index1 , index2 , mat]", "\n", "# if self.direction == true:", "\n", "# [onehot, iindex1, iindex2, imat, oindex1, oindex2, omat]", "\n", "#print (len(data))", "\n", "        ", "x", "=", "self", ".", "l1", "(", "data", "[", "0", "]", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "self", ".", "no_step_supervision", ":", "\n", "            ", "out", "=", "None", "\n", "", "else", ":", "\n", "            ", "out", "=", "[", "x", "]", "\n", "", "if", "self", ".", "tied_weight", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "nLayers", ")", ":", "\n", "                ", "if", "conj", "is", "not", "None", ":", "\n", "                    ", "z", "=", "torch", ".", "cat", "(", "(", "x", ",", "conj", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                    ", "z", "=", "x", "\n", "", "y", "=", "self", ".", "step", "(", "torch", ".", "cat", "(", "(", "z", "[", "data", "[", "1", "]", "]", ",", "z", "[", "data", "[", "2", "]", "]", ")", ",", "1", ")", ")", "\n", "z", "=", "torch", ".", "mm", "(", "data", "[", "3", "]", ",", "y", ")", "\n", "if", "self", ".", "direction", "or", "self", ".", "binary", ":", "\n", "                    ", "y_out", "=", "self", ".", "step_out", "(", "torch", ".", "cat", "(", "(", "x", "[", "data", "[", "4", "]", "]", ",", "x", "[", "data", "[", "5", "]", "]", ")", ",", "1", ")", ")", "\n", "z_out", "=", "torch", ".", "mm", "(", "data", "[", "6", "]", ",", "y_out", ")", "\n", "z", "=", "z", "+", "z_out", "\n", "", "if", "self", ".", "binary", "and", "data", "[", "7", "]", ".", "size", "(", ")", "[", "0", "]", ">", "1", ":", "\n", "                    ", "y_bi", "=", "self", ".", "step_binary", "(", "torch", ".", "cat", "(", "(", "x", "[", "data", "[", "7", "]", "[", "0", "]", "]", ",", "x", "[", "data", "[", "7", "]", "[", "1", "]", "]", ",", "x", "[", "data", "[", "7", "]", "[", "2", "]", "]", ")", ",", "1", ")", ")", "\n", "z_bi", "=", "torch", ".", "mm", "(", "data", "[", "8", "]", ",", "y_bi", ".", "view", "(", "-", "1", ",", "self", ".", "nFeats", ")", ")", "\n", "z", "=", "z", "+", "z_bi", "\n", "", "if", "self", ".", "no_step_supervision", ":", "\n", "                    ", "out", "=", "[", "z", "]", "\n", "", "else", ":", "\n", "                    ", "out", ".", "append", "(", "z", ")", "\n", "", "if", "self", ".", "short_cut", "and", "i", "<", "self", ".", "nLayers", "-", "1", ":", "\n", "                    ", "x", "=", "x", "+", "z", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "z", "\n", "", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "nLayers", ")", ":", "\n", "                ", "if", "conj", "is", "not", "None", ":", "\n", "                    ", "z", "=", "torch", ".", "cat", "(", "(", "x", ",", "conj", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                    ", "z", "=", "x", "\n", "", "y", "=", "self", ".", "step", "[", "i", "]", "(", "torch", ".", "cat", "(", "(", "z", "[", "data", "[", "1", "]", "]", ",", "z", "[", "data", "[", "2", "]", "]", ")", ",", "1", ")", ")", "\n", "z", "=", "torch", ".", "mm", "(", "data", "[", "3", "]", ",", "y", ")", "\n", "if", "self", ".", "direction", "or", "self", ".", "binary", ":", "\n", "                    ", "y_out", "=", "self", ".", "step_out", "[", "i", "]", "(", "torch", ".", "cat", "(", "(", "x", "[", "data", "[", "4", "]", "]", ",", "x", "[", "data", "[", "5", "]", "]", ")", ",", "1", ")", ")", "\n", "z_out", "=", "torch", ".", "mm", "(", "data", "[", "6", "]", ",", "y_out", ")", "\n", "z", "=", "z", "+", "z_out", "\n", "", "if", "self", ".", "binary", "and", "data", "[", "7", "]", ".", "size", "(", ")", "[", "0", "]", ">", "1", ":", "\n", "                    ", "y_bi", "=", "self", ".", "step_binary", "[", "i", "]", "(", "torch", ".", "cat", "(", "(", "x", "[", "data", "[", "7", "]", "[", "0", "]", "]", ",", "x", "[", "data", "[", "7", "]", "[", "1", "]", "]", ",", "x", "[", "data", "[", "7", "]", "[", "2", "]", "]", ")", ",", "1", ")", ")", "\n", "z_bi", "=", "torch", ".", "mm", "(", "data", "[", "8", "]", ",", "y_bi", ".", "view", "(", "-", "1", ",", "self", ".", "nFeats", ")", ")", "\n", "z", "=", "z", "+", "z_bi", "\n", "", "if", "self", ".", "no_step_supervision", ":", "\n", "                    ", "out", "=", "[", "z", "]", "\n", "", "else", ":", "\n", "                    ", "out", ".", "append", "(", "z", ")", "\n", "", "if", "self", ".", "short_cut", "and", "i", "<", "self", ".", "nLayers", "-", "1", ":", "\n", "                    ", "x", "=", "x", "+", "z", "\n", "x", "=", "self", ".", "l2", "[", "i", "]", "(", "x", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "z", "\n", "", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.PairForward.__init__": [[235, 251], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.kaiming_normal", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nFeats_in", ",", "nFeats1", ",", "nFeats2", ",", "nFeats_out", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "PairForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "nFeats_in", ",", "nFeats1", ",", "bias", "=", "bias", ")", "\n", "init", ".", "kaiming_normal", "(", "self", ".", "l1", ".", "weight", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "nFeats1", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "nFeats1", ",", "nFeats2", ",", "bias", "=", "bias", ")", "\n", "init", ".", "kaiming_normal", "(", "self", ".", "l2", ".", "weight", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "nFeats2", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "l3", "=", "nn", ".", "Linear", "(", "nFeats2", ",", "nFeats_out", ",", "bias", "=", "bias", ")", "\n", "init", ".", "kaiming_normal", "(", "self", ".", "l3", ".", "weight", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "nFeats_out", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.PairForward.forward": [[252, 264], ["model.PairForward.l1", "model.PairForward.bn1", "model.PairForward.relu1", "model.PairForward.l2", "model.PairForward.bn2", "model.PairForward.relu2", "model.PairForward.l3", "model.PairForward.bn3", "model.PairForward.relu3", "model.PairForward.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", "=", "self", ".", "l1", "(", "data", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "l3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu3", "(", "x", ")", "\n", "\n", "return", "x", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.maxpoolcat": [[69, 74], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x1.max", "x2.max"], "function", ["None"], ["", "", "def", "maxpoolcat", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "x1", "=", "x1", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "x2", "=", "x2", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.concat_em_uc": [[76, 82], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "stmt.max", "conj.max"], "function", ["None"], ["", "def", "concat_em_uc", "(", "stmt", ",", "conj", ")", ":", "\n", "    ", "stmt", "=", "stmt", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "conj", "=", "conj", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "cov", "=", "stmt", "*", "conj", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cov", ",", "conj", ")", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.em": [[84, 89], ["stmt.max", "conj.max"], "function", ["None"], ["", "def", "em", "(", "stmt", ",", "conj", ")", ":", "\n", "    ", "stmt", "=", "stmt", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "conj", "=", "conj", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "cov", "=", "stmt", "*", "conj", "\n", "return", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.dot_max": [[91, 93], ["torch.mm().max", "torch.mm().max", "torch.mm().max", "torch.mm().max", "torch.mm().max", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "x2.t"], "function", ["None"], ["", "def", "dot_max", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "return", "torch", ".", "mm", "(", "x1", ",", "x2", ".", "t", "(", ")", ")", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.dot_mean": [[94, 96], ["torch.mm().mean", "torch.mm().mean", "torch.mm().mean", "torch.mm().mean", "torch.mm().mean", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "x2.t"], "function", ["None"], ["", "def", "dot_mean", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "return", "torch", ".", "mm", "(", "x1", ",", "x2", ".", "t", "(", ")", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.meanpoolcat": [[97, 102], ["x1.mean.mean", "x2.mean.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "meanpoolcat", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "x1", "=", "x1", ".", "mean", "(", "0", ")", "\n", "x2", "=", "x2", ".", "mean", "(", "0", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.maxpoolpair": [[104, 108], ["conj.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conj.repeat.max", "stmt.size"], "function", ["None"], ["", "def", "maxpoolpair", "(", "conj", ",", "stmt", ")", ":", "\n", "    ", "conj", "=", "conj", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "conj", "=", "conj", ".", "repeat", "(", "stmt", ".", "size", "(", ")", "[", "0", "]", ",", "1", ")", "\n", "return", "torch", ".", "cat", "(", "(", "conj", ",", "stmt", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.log._Formatter.__init__": [[16, 19], ["logging.Formatter.__init__"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "datefmt", "=", "'%m%d %H:%M:%S'", "\n", "super", "(", "_Formatter", ",", "self", ")", ".", "__init__", "(", "datefmt", "=", "datefmt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.log._Formatter._get_color": [[20, 27], ["None"], "methods", ["None"], ["", "def", "_get_color", "(", "self", ",", "level", ")", ":", "\n", "        ", "if", "logging", ".", "WARNING", "<=", "level", ":", "\n", "            ", "return", "'\\x1b[31m'", "\n", "", "elif", "logging", ".", "INFO", "<=", "level", ":", "\n", "            ", "return", "'\\x1b[32m'", "\n", "", "else", ":", "\n", "            ", "return", "'\\x1b[34m'", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.log._Formatter._get_label": [[28, 41], ["None"], "methods", ["None"], ["", "", "def", "_get_label", "(", "self", ",", "level", ")", ":", "\n", "        ", "if", "level", "==", "logging", ".", "CRITICAL", ":", "\n", "            ", "return", "'C'", "\n", "", "elif", "level", "==", "logging", ".", "ERROR", ":", "\n", "            ", "return", "'E'", "\n", "", "elif", "level", "==", "logging", ".", "WARNING", ":", "\n", "            ", "return", "'W'", "\n", "", "elif", "level", "==", "logging", ".", "INFO", ":", "\n", "            ", "return", "'I'", "\n", "", "elif", "level", "==", "logging", ".", "DEBUG", ":", "\n", "            ", "return", "'D'", "\n", "", "else", ":", "\n", "            ", "return", "'U'", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.log._Formatter.format": [[42, 54], ["log._Formatter._get_color", "log._Formatter._get_label", "logging.Formatter.format"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.log._Formatter._get_color", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.log._Formatter._get_label", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.log._Formatter.format"], ["", "", "def", "format", "(", "self", ",", "record", ")", ":", "\n", "        ", "fmt", "=", "self", ".", "_get_color", "(", "record", ".", "levelno", ")", "\n", "fmt", "+=", "'['", "\n", "fmt", "+=", "self", ".", "_get_label", "(", "record", ".", "levelno", ")", "\n", "fmt", "+=", "'%(asctime)s %(process)d %(name)s:%(funcName)s:%(lineno)d'", "\n", "fmt", "+=", "']\\x1b[0m'", "\n", "fmt", "+=", "' %(message)s'", "\n", "if", "PY3", ":", "\n", "            ", "self", ".", "_style", ".", "_fmt", "=", "fmt", "# pylint: disable= no-member", "\n", "", "else", ":", "\n", "            ", "self", ".", "_fmt", "=", "fmt", "\n", "", "return", "super", "(", "_Formatter", ",", "self", ")", ".", "format", "(", "record", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.log.get_logger": [[60, 84], ["logging.getLogger", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "getattr", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler", "log._Formatter"], "function", ["None"], ["def", "get_logger", "(", "name", "=", "None", ",", "args", "=", "None", ",", "level", "=", "INFO", ",", "append", "=", "False", ")", ":", "\n", "    ", "\"\"\"Get customized logger.\n\n    Args:\n        name: Name of the logger.\n        level: Level to log.\n\n    Returns:\n        A logger.\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "if", "name", "and", "not", "getattr", "(", "logger", ",", "'_init_done'", ",", "None", ")", ":", "\n", "        ", "logger", ".", "_init_done", "=", "True", "\n", "logger", ".", "addHandler", "(", "_handler", ")", "\n", "if", "args", "is", "not", "None", ":", "\n", "            ", "fileHandler", "=", "None", "\n", "if", "append", ":", "\n", "                ", "fileHandler", "=", "logging", ".", "FileHandler", "(", "args", ".", "log", ",", "mode", "=", "'a'", ")", "\n", "", "else", ":", "\n", "                ", "fileHandler", "=", "logging", ".", "FileHandler", "(", "args", ".", "log", ",", "mode", "=", "'w'", ")", "\n", "", "fileHandler", ".", "setFormatter", "(", "_Formatter", "(", ")", ")", "\n", "logger", ".", "addHandler", "(", "fileHandler", ")", "\n", "", "logger", ".", "setLevel", "(", "level", ")", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.parse_args": [[43, 164], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "setattr", "setattr", "setattr", "os.path.join", "os.path.join", "setattr"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "# Implicit assumption:", "\n", "# Training data in train, validation data in valid", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'The ultimate optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--nFeats'", ",", "type", "=", "int", ",", "help", "=", "'Number of features'", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--nSteps'", ",", "type", "=", "int", ",", "help", "=", "'Number of step graphnet updates'", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--learning_rate'", ",", "'-l'", ",", "type", "=", "float", ",", "help", "=", "'Learning rate'", ",", "default", "=", "0.001", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--min_lr'", ",", "type", "=", "float", ",", "help", "=", "'minimum learning rate'", ",", "default", "=", "0.00002", ")", "\n", "parser", ".", "add_argument", "(", "'--log'", ",", "type", "=", "str", ",", "help", "=", "'Path to log file'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output'", ",", "type", "=", "str", ",", "help", "=", "'Path to model output'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--data_path'", ",", "type", "=", "str", ",", "help", "=", "'Path to data set'", ",", "default", "=", "'../data/hol_data/'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dict_file'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Path to dict cache'", ",", "\n", "default", "=", "'../data/dicts/new_hol_train_dict'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--observe'", ",", "type", "=", "int", ",", "help", "=", "'Output info of training status'", ",", "default", "=", "20000", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--max_pair'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Max pair cut-off line for batching'", ",", "\n", "default", "=", "200000", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "'-e'", ",", "type", "=", "int", ",", "help", "=", "'Number of epoch'", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--optim'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Choose optimizer from sgd, rmsprop and adam'", ",", "\n", "default", "=", "'rmsprop'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--voting'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Voting or use the last step to predict'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--check_num'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Number of samples for validation'", ",", "\n", "default", "=", "950000", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--module_depth'", ",", "type", "=", "int", ",", "help", "=", "'number of layers in a block'", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--bias'", ",", "type", "=", "bool", ",", "help", "=", "'bias in linear layers'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--uncondition'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Flag to enable uncondition learning'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--block'", ",", "type", "=", "str", ",", "help", "=", "'Block used in graph net'", ",", "default", "=", "'normal'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--add_conj'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Add conj in stmt graph'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--short_cut'", ",", "action", "=", "'store_false'", ",", "help", "=", "'Disable short Cut between steps'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--direction'", ",", "\n", "action", "=", "'store_false'", ",", "\n", "help", "=", "'Disable using different weights for in-edge and out-edge'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--record'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\n", "'Save training/validation history by torch.save. Save only when this option is provided'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--loss'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Choose the type of the loss used in the network'", ",", "\n", "default", "=", "'concat'", ")", "\n", "parser", ".", "add_argument", "(", "'--worker'", ",", "type", "=", "int", ",", "help", "=", "'Number of workers'", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--binary'", ",", "\n", "action", "=", "'store_false'", ",", "\n", "help", "=", "'Disable updating with each pair of outgoing edges with common sourse node.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--epoch_len'", ",", "type", "=", "int", ",", "help", "=", "'Specify 1 epoch = ? iteration.'", ",", "default", "=", "1900000", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--norename'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Not rename for variables\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--fabelian'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Filter commutative ops in binary mode'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--loss_layers'", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "help", "=", "'Decide layers in the loss'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dropout'", ",", "type", "=", "float", ",", "help", "=", "'Dropout layer in the loss.'", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no_step_supervision'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Do not use step supervision.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cond_short_cut'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Add residual links in condloss'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--tied_weight'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use tied_weight for each step'", ")", "\n", "parser", ".", "add_argument", "(", "'--compatible'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use compatible mode to run.'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'resume training to given model'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_only_net'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Resume only GraphNet'", ")", "\n", "parser", ".", "add_argument", "(", "'--fix_net'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Fix GraphNet'", ")", "\n", "parser", ".", "add_argument", "(", "'--unfix_net_after'", ",", "type", "=", "int", ",", "help", "=", "'Unfix Graph after certain iteration'", ")", "\n", "\n", "# options:", "\n", "# 1. concat: basic model. Concatenate maxpooled conj and maxpooled stmt", "\n", "# 2. concat_em_uc: Concatenate elem prod of maxpooled conj and maxpooled stmt and", "\n", "#       maxpooled stmt", "\n", "# 3. em: Elem prod of maxpooled conj and maxpooled stmt", "\n", "# 4. mixmax: ucloss + max of all pairs of dot products", "\n", "# 5. mixmean: ucloss + mean of all pairs of dot products", "\n", "# 6. condloss: Stronger condition", "\n", "# 7. mulloss: stronger similarity", "\n", "\n", "# Global argmuments", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "setattr", "(", "args", ",", "'train_file'", ",", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'train'", ")", ")", "\n", "setattr", "(", "args", ",", "'test_file'", ",", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'valid'", ")", ")", "\n", "if", "args", ".", "no_step_supervision", ":", "\n", "        ", "loss_step", "=", "1", "\n", "", "else", ":", "\n", "        ", "loss_step", "=", "args", ".", "nSteps", "+", "1", "\n", "", "setattr", "(", "args", ",", "'loss_step'", ",", "loss_step", ")", "\n", "# unset directed if binary is set.", "\n", "if", "args", ".", "direction", "and", "args", ".", "binary", ":", "\n", "        ", "setattr", "(", "args", ",", "'direction'", ",", "False", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.main": [[166, 222], ["batch_train.parse_args", "torch.set_start_method", "log.get_logger", "log.get_logger.info", "os.listdir", "random.shuffle", "range", "batch_train.create_models", "model_utils.FakeModule", "range", "model_utils.get_opt", "range", "log.get_logger.warning", "batch_train.train", "data_loader.DataLoader.destruct", "log.get_logger.warning", "model_utils.print_args", "data_loader.DataLoader", "loaders.append", "data_loader.DataLoader.start_reader", "model_utils.FakeModule", "len", "model_utils.FakeModule", "torch.multiprocessing.Pipe", "torch.multiprocessing.Pipe", "inqueues.append", "outqueues.append", "plist.append", "plist[].start", "p.terminate", "data_loader.DataLoader.destruct", "torch.multiprocessing.Process"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.parse_args", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.log.get_logger", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.create_models", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.get_opt", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.train", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.destruct", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.print_args", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.start_reader", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.destruct"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "mp", ".", "set_start_method", "(", "'spawn'", ")", "# Using spawn is decided.", "\n", "_logger", "=", "log", ".", "get_logger", "(", "__name__", ",", "args", ")", "\n", "_logger", ".", "info", "(", "print_args", "(", "args", ")", ")", "\n", "\n", "loaders", "=", "[", "]", "\n", "file_list", "=", "os", ".", "listdir", "(", "args", ".", "train_file", ")", "\n", "random", ".", "shuffle", "(", "file_list", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "worker", ")", ":", "\n", "        ", "loader", "=", "data_loader", ".", "DataLoader", "(", "\n", "args", ".", "train_file", ",", "\n", "args", ".", "dict_file", ",", "\n", "separate_conj_stmt", "=", "args", ".", "direction", ",", "\n", "binary", "=", "args", ".", "binary", ",", "\n", "part_no", "=", "i", ",", "\n", "part_total", "=", "args", ".", "worker", ",", "\n", "file_list", "=", "file_list", ",", "\n", "norename", "=", "args", ".", "norename", ",", "\n", "filter_abelian", "=", "args", ".", "fabelian", ",", "\n", "compatible", "=", "args", ".", "compatible", ")", "\n", "loaders", ".", "append", "(", "loader", ")", "\n", "loader", ".", "start_reader", "(", ")", "\n", "\n", "", "net", ",", "mid_net", ",", "loss_fn", "=", "create_models", "(", "args", ",", "loaders", "[", "0", "]", ",", "allow_resume", "=", "True", ")", "\n", "# Use fake modules to replace the real ones", "\n", "net", "=", "FakeModule", "(", "net", ")", "\n", "if", "mid_net", "is", "not", "None", ":", "\n", "        ", "mid_net", "=", "FakeModule", "(", "mid_net", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "loss_fn", ")", ")", ":", "\n", "        ", "loss_fn", "[", "i", "]", "=", "FakeModule", "(", "loss_fn", "[", "i", "]", ")", "\n", "\n", "", "opt", "=", "get_opt", "(", "net", ",", "mid_net", ",", "loss_fn", ",", "args", ")", "\n", "\n", "inqueues", "=", "[", "]", "\n", "outqueues", "=", "[", "]", "\n", "\n", "plist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "worker", ")", ":", "\n", "        ", "recv_p", ",", "send_p", "=", "Pipe", "(", "False", ")", "\n", "recv_p2", ",", "send_p2", "=", "Pipe", "(", "False", ")", "\n", "inqueues", ".", "append", "(", "send_p", ")", "\n", "outqueues", ".", "append", "(", "recv_p2", ")", "\n", "plist", ".", "append", "(", "\n", "Process", "(", "target", "=", "worker", ",", "args", "=", "(", "recv_p", ",", "send_p2", ",", "loaders", "[", "i", "]", ",", "args", ",", "i", ")", ")", ")", "\n", "plist", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "\n", "", "_logger", ".", "warning", "(", "'Training begins'", ")", "\n", "train", "(", "inqueues", ",", "outqueues", ",", "net", ",", "mid_net", ",", "loss_fn", ",", "opt", ",", "loaders", ",", "args", ",", "_logger", ")", "\n", "loader", ".", "destruct", "(", ")", "\n", "for", "p", "in", "plist", ":", "\n", "        ", "p", ".", "terminate", "(", ")", "\n", "", "for", "loader", "in", "loaders", ":", "\n", "        ", "loader", ".", "destruct", "(", ")", "\n", "", "_logger", ".", "warning", "(", "'Training ends'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.create_models": [[224, 290], ["model.GraphNet().cuda", "range", "model.FullyConnectedNet().cuda", "torch.load", "torch.load", "torch.load", "torch.load", "log.get_logger", "log.get_logger.warning", "log.get_logger.info", "log.get_logger.info", "log.get_logger.warning", "log.get_logger.info", "model.GraphNet().cuda.load_state_dict", "model.GraphNet", "loss_fn.append", "model_utils.print_args", "model.FullyConnectedNet().cuda.load_state_dict", "range", "model.FullyConnectedNet", "loss.MultiplyLoss().cuda", "loss_fn.append", "len", "loss_fn[].load_state_dict", "loss.CondLoss().cuda", "loss.MultiplyLoss", "loss_fn.append", "loss_fn.append", "loss_fn.append", "loss.CondLoss", "loss.ClassifyLoss().cuda", "loss.ClassifyLoss().cuda", "loss.UCSimLoss().cuda", "loss_fn.append", "loss.ClassifyLoss().cuda", "loss_fn.append", "loss.ClassifyLoss", "loss.ClassifyLoss", "loss.UCSimLoss", "loss.ClassifyLoss().cuda", "loss.ClassifyLoss", "loss.ClassifyLoss"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.log.get_logger", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.load_state_dict", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.print_args", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.load_state_dict", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.load_state_dict"], ["", "def", "create_models", "(", "args", ",", "loader", ",", "allow_resume", "=", "False", ")", ":", "\n", "    ", "net", "=", "model", ".", "GraphNet", "(", "loader", ".", "dict_size", ",", "args", ".", "nFeats", ",", "args", ".", "nSteps", ",", "args", ".", "block", ",", "\n", "args", ".", "module_depth", ",", "args", ".", "bias", ",", "args", ".", "short_cut", ",", "args", ".", "direction", ",", "\n", "args", ".", "loss", ",", "args", ".", "binary", ",", "\n", "no_step_supervision", "=", "args", ".", "no_step_supervision", ",", "\n", "tied_weight", "=", "args", ".", "tied_weight", ",", "\n", "compatible", "=", "args", ".", "compatible", ")", ".", "cuda", "(", ")", "\n", "\n", "mid_net", "=", "None", "\n", "if", "args", ".", "loss", "in", "(", "'mixmax'", ",", "'mixmean'", ")", ":", "\n", "        ", "mid_net", "=", "model", ".", "FullyConnectedNet", "(", "\n", "args", ".", "nFeats", ",", "args", ".", "nFeats", "//", "2", ",", "bias", "=", "args", ".", "bias", ")", ".", "cuda", "(", ")", "\n", "\n", "", "loss_fn", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "loss_step", ")", ":", "\n", "        ", "if", "args", ".", "loss", "==", "'mulloss'", ":", "\n", "            ", "loss_fn", ".", "append", "(", "loss", ".", "MultiplyLoss", "(", "args", ".", "nFeats", ",", "\n", "cond_short_cut", "=", "args", ".", "cond_short_cut", ")", ".", "cuda", "(", ")", ")", "\n", "", "elif", "args", ".", "loss", "==", "'condloss'", ":", "\n", "            ", "loss_fn", ".", "append", "(", "loss", ".", "CondLoss", "(", "args", ".", "nFeats", "*", "2", ",", "args", ".", "nFeats", ",", "\n", "layer_list", "=", "args", ".", "loss_layers", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "cond_short_cut", "=", "args", ".", "cond_short_cut", ")", ".", "cuda", "(", ")", ")", "\n", "", "elif", "args", ".", "loss", "in", "(", "'concat'", ",", "'concat_em_uc'", ")", ":", "\n", "            ", "if", "args", ".", "uncondition", "or", "args", ".", "add_conj", ":", "\n", "                ", "loss_fn", ".", "append", "(", "loss", ".", "ClassifyLoss", "(", "args", ".", "nFeats", ",", "args", ".", "nFeats", "//", "2", ",", "\n", "layer_list", "=", "args", ".", "loss_layers", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "bias", "=", "args", ".", "compatible", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fn", ".", "append", "(", "loss", ".", "ClassifyLoss", "(", "args", ".", "nFeats", "*", "2", ",", "args", ".", "nFeats", ",", "\n", "layer_list", "=", "args", ".", "loss_layers", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "bias", "=", "args", ".", "compatible", ")", ".", "cuda", "(", ")", ")", "\n", "", "", "elif", "args", ".", "loss", "in", "(", "'mixmax'", ",", "'mixmean'", ")", ":", "\n", "            ", "loss_fn", ".", "append", "(", "loss", ".", "UCSimLoss", "(", "args", ".", "nFeats", ",", "args", ".", "nFeats", "//", "2", ",", "\n", "layer_list", "=", "args", ".", "loss_layers", ",", "\n", "dropout", "=", "args", ".", "dropout", ")", ".", "cuda", "(", ")", ")", "\n", "", "elif", "args", ".", "loss", "==", "'pair'", ":", "\n", "            ", "loss_fn", ".", "append", "(", "loss", ".", "ClassifyLoss", "(", "args", ".", "nFeats", "//", "2", ",", "args", ".", "nFeats", "//", "4", ",", "\n", "layer_list", "=", "args", ".", "loss_layers", ",", "\n", "dropout", "=", "args", ".", "dropout", ")", ".", "cuda", "(", ")", ")", "\n", "", "elif", "args", ".", "loss", "==", "'em'", ":", "\n", "            ", "loss_fn", ".", "append", "(", "loss", ".", "ClassifyLoss", "(", "args", ".", "nFeats", ",", "args", ".", "nFeats", "//", "2", ",", "\n", "layer_list", "=", "args", ".", "loss_layers", ",", "\n", "dropout", "=", "args", ".", "dropout", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'Wrong --loss option!'", "\n", "\n", "", "", "if", "args", ".", "resume", "is", "not", "None", "and", "allow_resume", ":", "\n", "        ", "data", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "_logger", "=", "log", ".", "get_logger", "(", "'Create Model'", ",", "args", ")", "\n", "_logger", ".", "warning", "(", "'Load Model!'", ")", "\n", "_logger", ".", "info", "(", "'Previous training info:'", ")", "\n", "_logger", ".", "info", "(", "'Epoch: %d  Current iter: %d  Total iter: %d'", ",", "data", "[", "'aux'", "]", "[", "'epoch'", "]", ",", "data", "[", "'aux'", "]", "[", "'cur_iter'", "]", ",", "data", "[", "'aux'", "]", "[", "'total_iter'", "]", ")", "\n", "_logger", ".", "warning", "(", "'Previous training args:'", ")", "\n", "_logger", ".", "info", "(", "print_args", "(", "data", "[", "'args'", "]", ")", ")", "\n", "net", ".", "load_state_dict", "(", "data", "[", "'net'", "]", "[", "'state_dict'", "]", ")", "\n", "if", "mid_net", "is", "not", "None", ":", "\n", "            ", "mid_net", ".", "load_state_dict", "(", "data", "[", "'mid_net'", "]", "[", "'state_dict'", "]", ")", "\n", "", "if", "not", "args", ".", "resume_only_net", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "loss_fn", ")", ")", ":", "\n", "                ", "loss_fn", "[", "i", "]", ".", "load_state_dict", "(", "data", "[", "'loss_fn'", "]", "[", "i", "]", "[", "'state_dict'", "]", ")", "\n", "\n", "", "", "", "return", "net", ",", "mid_net", ",", "loss_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.add_conj": [[292, 302], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "fact[].size", "fact[].size", "torch.range().long", "torch.range().long", "torch.range().long", "torch.range().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "[].resize_", "torch.range", "torch.range", "torch.range", "torch.range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "a.min"], "function", ["None"], ["", "def", "add_conj", "(", "fact", ")", ":", "\n", "    ", "l1", "=", "fact", "[", "3", "]", ".", "size", "(", ")", "[", "0", "]", "\n", "l2", "=", "fact", "[", "3", "]", ".", "size", "(", ")", "[", "1", "]", "\n", "index1_", "=", "torch", ".", "cat", "(", "(", "fact", "[", "2", "]", ",", "torch", ".", "range", "(", "0", ",", "l1", "-", "1", ")", ".", "long", "(", ")", ")", ",", "0", ")", "\n", "index2_", "=", "torch", ".", "cat", "(", "(", "fact", "[", "1", "]", ",", "torch", ".", "zeros", "(", "l1", ")", ".", "long", "(", ")", "+", "l1", ")", ",", "0", ")", "\n", "mat_", "=", "torch", ".", "Tensor", "(", "l1", ",", "l1", "+", "l2", ")", "\n", "a", "=", "1", "/", "(", "fact", "[", "3", "]", "+", "1e-10", ")", "+", "1", "\n", "mat_", "[", ":", ",", "l2", ":", "]", "=", "(", "1", "/", "a", ".", "min", "(", "1", ")", "[", "0", "]", ".", "resize_", "(", "l1", ")", ")", ".", "diag", "(", ")", "\n", "mat_", "[", ":", ",", ":", "l2", "]", "=", "1", "/", "a", "-", "1e-10", "\n", "return", "[", "fact", "[", "0", "]", ",", "index1_", ",", "index2_", ",", "mat_", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.embed_step": [[304, 419], ["loader_.next_batch", "torch.autograd.Variable", "range", "label.append", "batch_train.add_conj", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "x1[].size", "net", "net", "net", "len", "torch.autograd.Variable", "fact[].cuda", "fact[].cuda", "torch.autograd.Variable", "fact[].cuda", "fact[].cuda", "torch.autograd.Variable", "x2[].size", "catfeat[].append", "fact[].cuda", "fact[].cuda", "fact[].cuda", "torch.autograd.Variable", "fact[].cuda", "fact[].cuda", "torch.autograd.Variable", "fact[].cuda", "fact[].cuda", "torch.autograd.Variable", "fact_bi[].cuda", "torch.autograd.Variable", "torch.autograd.Variable", "fact[].cuda", "fact[].cuda", "torch.autograd.Variable", "torch.autograd.Variable", "conjecture[].cuda", "conjecture[].cuda", "torch.autograd.Variable", "conjecture[].cuda", "conjecture[].cuda", "torch.autograd.Variable", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "feat2[].max", "catfeat[].append", "fact[].cuda", "fact[].cuda", "fact[].cuda", "fact_bi[].cuda", "fact[].cuda", "fact[].cuda", "conjecture[].cuda", "conjecture[].cuda", "conjecture[].cuda", "torch.autograd.Variable", "conjecture[].cuda", "conjecture[].cuda", "torch.autograd.Variable", "conjecture[].cuda", "conjecture[].cuda", "torch.autograd.Variable", "conj_bi[].cuda", "torch.autograd.Variable", "torch.autograd.Variable", "conjecture[].cuda", "conjecture[].cuda", "torch.autograd.Variable", "catfeat[].append", "conjecture[].cuda", "conjecture[].cuda", "conjecture[].cuda", "conj_bi[].cuda", "conjecture[].cuda", "conjecture[].cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "feat2[].max", "feat1[].max", "catfeat[].append", "feat2[].max", "feat1[].max", "feat1[].max", "model.maxpoolcat", "catfeat[].append", "model.concat_em_uc", "catfeat[].append", "model.em", "catfeat[].append", "model.dot_max", "catfeat[].append", "feat1[].max", "mid_net", "mid_net", "model.dot_mean", "model.maxpoolcat", "catfeat[].append", "feat1[].max", "mid_net", "mid_net", "net.pair_forward"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.next_batch", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.add_conj", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.maxpoolcat", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.concat_em_uc", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.em", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.dot_max", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.dot_mean", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model.maxpoolcat"], ["", "def", "embed_step", "(", "pair_total", ",", "\n", "net", ",", "\n", "mid_net", ",", "\n", "loss_fn", ",", "\n", "catfeat", ",", "\n", "label", ",", "\n", "loader_", ",", "\n", "args", ",", "\n", "volatile", "=", "False", ")", ":", "\n", "    ", "data", "=", "loader_", ".", "next_batch", "(", ")", "\n", "if", "data", "is", "None", ":", "\n", "        ", "epoch_end", "=", "True", "\n", "return", "pair_total", ",", "epoch_end", "\n", "", "if", "args", ".", "binary", "==", "False", ":", "\n", "        ", "conjecture", ",", "fact", ",", "y", "=", "data", "\n", "", "else", ":", "\n", "        ", "conjecture", ",", "fact", ",", "y", ",", "conj_bi", ",", "fact_bi", "=", "data", "\n", "", "x1", "=", "None", "\n", "x2", "=", "None", "\n", "if", "args", ".", "add_conj", ":", "\n", "        ", "fact", "=", "add_conj", "(", "fact", ")", "\n", "", "if", "args", ".", "direction", ":", "\n", "        ", "x1", "=", "[", "\n", "Variable", "(", "fact", "[", "0", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", ",", "\n", "fact", "[", "1", "]", ".", "cuda", "(", ")", ",", "\n", "fact", "[", "2", "]", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "fact", "[", "3", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", ",", "\n", "fact", "[", "4", "]", ".", "cuda", "(", ")", ",", "\n", "fact", "[", "5", "]", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "fact", "[", "6", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", "\n", "]", "# yapf: disable", "\n", "", "elif", "args", ".", "binary", ":", "\n", "        ", "x1", "=", "[", "\n", "Variable", "(", "fact", "[", "0", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", ",", "fact", "[", "1", "]", ".", "cuda", "(", ")", ",", "fact", "[", "2", "]", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "fact", "[", "3", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", ",", "fact", "[", "4", "]", ".", "cuda", "(", ")", ",", "fact", "[", "5", "]", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "fact", "[", "6", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", ",", "fact_bi", "[", "0", "]", ".", "cuda", "(", ")", ",", "Variable", "(", "\n", "fact_bi", "[", "1", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", "\n", "]", "\n", "", "else", ":", "\n", "        ", "x1", "=", "[", "\n", "Variable", "(", "fact", "[", "0", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", ",", "\n", "fact", "[", "1", "]", ".", "cuda", "(", ")", ",", "\n", "fact", "[", "2", "]", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "fact", "[", "3", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", "\n", "]", "# yapf: disable", "\n", "", "if", "not", "args", ".", "uncondition", ":", "\n", "        ", "if", "args", ".", "direction", ":", "\n", "            ", "x2", "=", "[", "\n", "Variable", "(", "conjecture", "[", "0", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", ",", "\n", "conjecture", "[", "1", "]", ".", "cuda", "(", ")", ",", "\n", "conjecture", "[", "2", "]", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "conjecture", "[", "3", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", ",", "\n", "conjecture", "[", "4", "]", ".", "cuda", "(", ")", ",", "\n", "conjecture", "[", "5", "]", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "conjecture", "[", "6", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", "\n", "]", "# yapf: disable", "\n", "", "elif", "args", ".", "binary", ":", "\n", "            ", "x2", "=", "[", "\n", "Variable", "(", "conjecture", "[", "0", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", ",", "conjecture", "[", "1", "]", ".", "cuda", "(", ")", ",", "\n", "conjecture", "[", "2", "]", ".", "cuda", "(", ")", ",", "Variable", "(", "conjecture", "[", "3", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", ",", "\n", "conjecture", "[", "4", "]", ".", "cuda", "(", ")", ",", "conjecture", "[", "5", "]", ".", "cuda", "(", ")", ",", "Variable", "(", "\n", "conjecture", "[", "6", "]", ".", "cuda", "(", ")", ",", "\n", "volatile", "=", "volatile", ")", ",", "conj_bi", "[", "0", "]", ".", "cuda", "(", ")", ",", "Variable", "(", "\n", "conj_bi", "[", "1", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", "\n", "]", "\n", "", "else", ":", "\n", "            ", "x2", "=", "[", "\n", "Variable", "(", "conjecture", "[", "0", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", ",", "\n", "conjecture", "[", "1", "]", ".", "cuda", "(", ")", ",", "\n", "conjecture", "[", "2", "]", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "conjecture", "[", "3", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "volatile", ")", "\n", "]", "# yapf: disable", "\n", "", "", "y", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "y", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "pair_total", "+=", "x1", "[", "1", "]", ".", "size", "(", ")", "[", "0", "]", "\n", "if", "not", "args", ".", "uncondition", ":", "\n", "        ", "pair_total", "+=", "x2", "[", "1", "]", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "", "if", "not", "args", ".", "uncondition", ":", "\n", "        ", "feat2", "=", "net", "(", "x2", ")", "\n", "\n", "", "if", "args", ".", "add_conj", ":", "\n", "        ", "feat1", "=", "net", "(", "x1", ",", "feat2", "[", "-", "1", "]", ".", "max", "(", "0", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "feat1", "=", "net", "(", "x1", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "len", "(", "feat1", ")", ")", ":", "\n", "        ", "if", "args", ".", "loss", "==", "'mulloss'", ":", "\n", "            ", "catfeat", "[", "k", "]", ".", "append", "(", "(", "feat2", "[", "k", "]", ".", "max", "(", "0", ")", "[", "0", "]", ",", "feat1", "[", "k", "]", ".", "max", "(", "0", ")", "[", "0", "]", ")", ")", "\n", "", "elif", "args", ".", "loss", "==", "'condloss'", ":", "\n", "            ", "catfeat", "[", "k", "]", ".", "append", "(", "(", "feat2", "[", "k", "]", ".", "max", "(", "0", ")", "[", "0", "]", ",", "feat1", "[", "k", "]", ".", "max", "(", "0", ")", "[", "0", "]", ")", ")", "\n", "", "elif", "args", ".", "uncondition", "or", "args", ".", "add_conj", ":", "\n", "            ", "catfeat", "[", "k", "]", ".", "append", "(", "feat1", "[", "k", "]", ".", "max", "(", "0", ")", "[", "0", "]", ")", "\n", "", "elif", "args", ".", "loss", "==", "'concat'", ":", "\n", "            ", "catfeat", "[", "k", "]", ".", "append", "(", "model", ".", "maxpoolcat", "(", "feat1", "[", "k", "]", ",", "feat2", "[", "k", "]", ")", ")", "\n", "", "elif", "args", ".", "loss", "==", "'concat_em_uc'", ":", "\n", "            ", "catfeat", "[", "k", "]", ".", "append", "(", "model", ".", "concat_em_uc", "(", "feat1", "[", "k", "]", ",", "feat2", "[", "k", "]", ")", ")", "\n", "", "elif", "args", ".", "loss", "==", "'em'", ":", "\n", "            ", "catfeat", "[", "k", "]", ".", "append", "(", "model", ".", "em", "(", "feat1", "[", "k", "]", ",", "feat2", "[", "k", "]", ")", ")", "\n", "", "elif", "args", ".", "loss", "==", "'mixmax'", ":", "\n", "            ", "pair", "=", "(", "feat1", "[", "k", "]", ".", "max", "(", "0", ")", "[", "0", "]", ",", "model", ".", "dot_max", "(", "\n", "mid_net", "(", "feat1", "[", "k", "]", ")", ",", "mid_net", "(", "feat2", "[", "k", "]", ")", ")", ")", "\n", "catfeat", "[", "k", "]", ".", "append", "(", "pair", ")", "\n", "", "elif", "args", ".", "loss", "==", "'mixmean'", ":", "\n", "            ", "pair", "=", "(", "feat1", "[", "k", "]", ".", "max", "(", "0", ")", "[", "0", "]", ",", "model", ".", "dot_mean", "(", "\n", "mid_net", "(", "feat1", "[", "k", "]", ")", ",", "mid_net", "(", "feat2", "[", "k", "]", ")", ")", ")", "\n", "catfeat", "[", "k", "]", ".", "append", "(", "pair", ")", "\n", "", "elif", "args", ".", "loss", "==", "'pair'", ":", "\n", "            ", "cated", "=", "model", ".", "maxpoolcat", "(", "feat2", "[", "k", "]", ",", "feat1", "[", "k", "]", ")", "\n", "catfeat", "[", "k", "]", ".", "append", "(", "net", ".", "pair_forward", "(", "cated", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'Wrong --loss option.'", "\n", "", "", "label", ".", "append", "(", "y", ")", "\n", "epoch_end", "=", "False", "\n", "return", "pair_total", ",", "epoch_end", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.forward_step": [[421, 457], ["range", "range", "sum", "range", "len", "net.zero_grad", "sum.backward", "catfeat.append", "batch_train.embed_step", "len", "losses.append", "len", "correct.append", "mid_net.zero_grad", "l.zero_grad", "loss_fn[].check_result", "isinstance"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.embed_step", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.loss.ClassifyLoss.check_result"], ["", "def", "forward_step", "(", "net", ",", "mid_net", ",", "loss_fn", ",", "loader", ",", "args", ")", ":", "\n", "    ", "pair_total", "=", "0", "\n", "catfeat", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "loss_step", ")", ":", "\n", "        ", "catfeat", ".", "append", "(", "[", "]", ")", "\n", "", "label", "=", "[", "]", "\n", "epoch_end", "=", "False", "\n", "while", "pair_total", "<", "args", ".", "max_pair", "/", "args", ".", "worker", ":", "\n", "        ", "pair_total", ",", "epoch_end", "=", "embed_step", "(", "pair_total", ",", "net", ",", "mid_net", ",", "loss_fn", ",", "catfeat", ",", "\n", "label", ",", "loader", ",", "args", ",", "volatile", "=", "args", ".", "fix_net", ")", "\n", "", "losses", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "catfeat", ")", ")", ":", "\n", "        ", "if", "args", ".", "fix_net", ":", "\n", "            ", "for", "feat", "in", "catfeat", "[", "k", "]", ":", "\n", "                ", "if", "isinstance", "(", "feat", ",", "tuple", ")", ":", "\n", "                    ", "feat", "[", "0", "]", ".", "volatile", "=", "False", "\n", "feat", "[", "0", "]", ".", "requires_grad", "=", "False", "\n", "feat", "[", "1", "]", ".", "volatile", "=", "False", "\n", "feat", "[", "1", "]", ".", "requires_grad", "=", "False", "\n", "", "else", ":", "\n", "                    ", "feat", ".", "volatile", "=", "False", "\n", "feat", ".", "requires_grad", "=", "False", "\n", "", "", "", "losses", ".", "append", "(", "loss_fn", "[", "k", "]", "(", "catfeat", "[", "k", "]", ",", "label", ")", ")", "\n", "", "loss", "=", "sum", "(", "losses", ")", "\n", "loss_total", "=", "loss", ".", "data", "[", "0", "]", "\n", "correct", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "loss_fn", ")", ")", ":", "\n", "        ", "correct", ".", "append", "(", "loss_fn", "[", "k", "]", ".", "check_result", "(", "label", ")", ")", "\n", "", "total", "=", "len", "(", "label", ")", "\n", "net", ".", "zero_grad", "(", ")", "\n", "if", "mid_net", "!=", "None", ":", "\n", "        ", "mid_net", ".", "zero_grad", "(", ")", "\n", "", "for", "l", "in", "loss_fn", ":", "\n", "        ", "l", ".", "zero_grad", "(", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "return", "loss_total", ",", "correct", ",", "total", ",", "epoch_end", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.test_forward": [[459, 502], ["range", "catfeat.append", "batch_train.embed_step", "range", "len", "range", "len", "losses.append", "loss_fn[].check_result", "score.eq().cpu().sum", "len", "sum", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "score.eq().cpu", "score.eq"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.embed_step", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.loss.ClassifyLoss.check_result"], ["", "def", "test_forward", "(", "net", ",", "mid_net", ",", "loss_fn", ",", "loader", ",", "args", ")", ":", "\n", "#for func in loss_fn:", "\n", "#    func.eval()", "\n", "# Variables for testing", "\n", "    ", "pair_total", "=", "0", "\n", "catfeat", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "loss_step", ")", ":", "\n", "        ", "catfeat", ".", "append", "(", "[", "]", ")", "\n", "", "correct", "=", "0", "\n", "total", "=", "0", "\n", "epoch_end", "=", "False", "\n", "while", "not", "epoch_end", ":", "\n", "        ", "pair_total", ",", "epoch_end", "=", "embed_step", "(", "\n", "pair_total", ",", "\n", "net", ",", "\n", "mid_net", ",", "\n", "loss_fn", ",", "\n", "catfeat", ",", "\n", "label", ",", "\n", "loader", ",", "\n", "args", ",", "\n", "volatile", "=", "True", ")", "\n", "\n", "if", "pair_total", ">", "args", ".", "max_pair", "/", "args", ".", "worker", "or", "(", "pair_total", "!=", "0", "and", "epoch_end", ")", ":", "\n", "            ", "losses", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "loss_fn", ")", ")", ":", "\n", "                ", "losses", ".", "append", "(", "loss_fn", "[", "k", "]", "(", "catfeat", "[", "k", "]", ",", "label", ")", ")", "\n", "", "if", "not", "args", ".", "voting", ":", "\n", "                ", "correct", "+=", "loss_fn", "[", "-", "1", "]", ".", "check_result", "(", "label", ")", "\n", "", "else", ":", "\n", "                ", "scores", "=", "[", "loss", ".", "score", "for", "loss", "in", "loss_fn", "]", "\n", "score", "=", "sum", "(", "scores", ")", "/", "len", "(", "scores", ")", "\n", "score", "=", "(", "score", "-", "0.5", ")", ".", "sign", "(", ")", "/", "2", "+", "0.5", "\n", "y", "=", "torch", ".", "cat", "(", "label", ")", ".", "data", "\n", "correct", "+=", "score", ".", "eq", "(", "y", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "", "total", "+=", "len", "(", "label", ")", "\n", "# print(correct / total)", "\n", "pair_total", "=", "0", "\n", "for", "k", "in", "range", "(", "len", "(", "catfeat", ")", ")", ":", "\n", "                ", "catfeat", "[", "k", "]", "=", "[", "]", "\n", "", "label", "=", "[", "]", "\n", "", "", "return", "correct", ",", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.train": [[504, 671], ["time.time", "range", "range", "sum", "sum", "model_utils.HistoryRecorder", "range", "range", "batch_train.train._update_grad"], "function", ["None"], ["", "def", "train", "(", "inqueues", ",", "outqueues", ",", "net", ",", "mid_net", ",", "loss_fn", ",", "opt", ",", "loaders", ",", "args", ",", "_logger", ")", ":", "\n", "    ", "def", "_update_grad", "(", "net", ",", "mid_net", ",", "loss_fn", ",", "grad_list", ")", ":", "\n", "        ", "if", "not", "args", ".", "fix_net", ":", "\n", "            ", "for", "name", ",", "param", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "                ", "grad_step", "=", "sum", "(", "[", "data", "[", "'total'", "]", "*", "data", "[", "'net'", "]", "[", "name", "]", "for", "data", "in", "grad_list", "\n", "]", ")", "/", "sum", "(", "[", "data", "[", "'total'", "]", "for", "data", "in", "grad_list", "]", ")", "\n", "param", ".", "grad", "=", "Variable", "(", "grad_step", ")", "\n", "\n", "", "if", "mid_net", "is", "not", "None", ":", "\n", "                ", "for", "name", ",", "param", "in", "mid_net", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "grad_step", "=", "sum", "(", "[", "\n", "data", "[", "'total'", "]", "*", "data", "[", "'mid_net'", "]", "[", "name", "]", "for", "data", "in", "grad_list", "\n", "]", ")", "/", "sum", "(", "[", "data", "[", "'total'", "]", "for", "data", "in", "grad_list", "]", ")", "\n", "param", ".", "grad", "=", "Variable", "(", "grad_step", ")", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "args", ".", "loss_step", ")", ":", "\n", "            ", "for", "name", ",", "param", "in", "loss_fn", "[", "i", "]", ".", "named_parameters", "(", ")", ":", "\n", "                ", "grad_step", "=", "sum", "(", "[", "\n", "data", "[", "'total'", "]", "*", "data", "[", "'loss_fn'", "]", "[", "i", "]", "[", "name", "]", "for", "data", "in", "grad_list", "\n", "]", ")", "/", "sum", "(", "[", "data", "[", "'total'", "]", "for", "data", "in", "grad_list", "]", ")", "\n", "param", ".", "grad", "=", "Variable", "(", "grad_step", ")", "\n", "\n", "", "for", "name", "in", "loss_fn", "[", "i", "]", ".", "buffers", ".", "keys", "(", ")", ":", "\n", "                ", "loss_fn", "[", "i", "]", ".", "buffers", "[", "name", "]", ".", "copy_", "(", "grad_list", "[", "0", "]", "[", "'buffer'", "]", "[", "'loss_fn'", "]", "[", "i", "]", "[", "name", "]", ")", "\n", "\n", "", "", "", "def", "_update_correct", "(", "grad_list", ",", "corrects", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "corrects", ")", ")", ":", "\n", "            ", "corrects", "[", "i", "]", "+=", "sum", "(", "[", "data", "[", "'correct'", "]", "[", "i", "]", "for", "data", "in", "grad_list", "]", ")", "\n", "\n", "", "", "def", "_step_stat", "(", "grad_list", ")", ":", "\n", "        ", "step_sample_total", "=", "sum", "(", "[", "data", "[", "'total'", "]", "for", "data", "in", "grad_list", "]", ")", "\n", "step_loss_total", "=", "sum", "(", "[", "data", "[", "'loss_total'", "]", "for", "data", "in", "grad_list", "]", ")", "\n", "return", "step_sample_total", ",", "step_loss_total", "\n", "\n", "# Variables for training", "\n", "", "t", "=", "time", ".", "time", "(", ")", "\n", "cur_epoch_training_total", "=", "0", "\n", "training_total", "=", "0", "\n", "valid_total", "=", "0", "\n", "sample_total", "=", "0", "\n", "loss_total", "=", "0", "\n", "correct_total", "=", "[", "0", "]", "*", "(", "args", ".", "loss_step", ")", "\n", "\n", "recorder", "=", "None", "\n", "if", "args", ".", "record", "is", "not", "None", ":", "\n", "        ", "recorder", "=", "HistoryRecorder", "(", "args", ".", "record", ")", "\n", "\n", "", "epoch", "=", "0", "\n", "epoch_end", "=", "False", "\n", "while", "epoch", "<", "args", ".", "epoch", ":", "\n", "        ", "data", "=", "{", "}", "\n", "\n", "if", "not", "args", ".", "fix_net", "or", "training_total", "==", "0", ":", "\n", "            ", "data", "[", "'fix_net'", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "data", "[", "'fix_net'", "]", "=", "True", "\n", "\n", "", "data", "[", "'args'", "]", "=", "args", "\n", "if", "not", "data", "[", "'fix_net'", "]", ":", "\n", "            ", "data", "[", "'net'", "]", "=", "net", ".", "state_dict", "(", ")", "\n", "if", "mid_net", "is", "not", "None", ":", "\n", "                ", "data", "[", "'mid_net'", "]", "=", "mid_net", ".", "state_dict", "(", ")", "\n", "\n", "", "", "data", "[", "'loss_fn'", "]", "=", "[", "]", "\n", "for", "loss", "in", "loss_fn", ":", "\n", "            ", "data", "[", "'loss_fn'", "]", ".", "append", "(", "loss", ".", "state_dict", "(", ")", ")", "\n", "", "data", "[", "'test'", "]", "=", "False", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "worker", ")", ":", "\n", "            ", "inqueues", "[", "i", "]", ".", "send", "(", "data", ")", "\n", "\n", "", "grad_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "worker", ")", ":", "\n", "            ", "data", "=", "outqueues", "[", "i", "]", ".", "recv", "(", ")", "\n", "grad_list", ".", "append", "(", "data", ")", "\n", "\n", "", "_update_grad", "(", "net", ",", "mid_net", ",", "loss_fn", ",", "grad_list", ")", "\n", "_update_correct", "(", "grad_list", ",", "correct_total", ")", "\n", "\n", "step_sample_total", ",", "step_loss_total", "=", "_step_stat", "(", "grad_list", ")", "\n", "\n", "cur_epoch_training_total", "+=", "step_sample_total", "\n", "training_total", "+=", "step_sample_total", "\n", "valid_total", "+=", "step_sample_total", "\n", "sample_total", "+=", "step_sample_total", "\n", "loss_total", "+=", "step_loss_total", "\n", "opt", ".", "step", "(", ")", "\n", "if", "(", "epoch", "+", "1", ")", "*", "args", ".", "epoch_len", "<=", "training_total", ":", "\n", "            ", "_logger", ".", "info", "(", "'Epoch END!!!'", ")", "\n", "epoch_end", "=", "True", "\n", "\n", "", "if", "sample_total", ">", "args", ".", "observe", "or", "epoch_end", ":", "\n", "            ", "end_str", "=", "' END!'", "if", "epoch_end", "else", "''", "\n", "_logger", ".", "info", "(", "'Epoch: %d%s Iteration: %d Loss: %.5f perTime: %.3f'", ",", "epoch", ",", "\n", "end_str", ",", "cur_epoch_training_total", ",", "loss_total", "/", "sample_total", ",", "\n", "(", "time", ".", "time", "(", ")", "-", "t", ")", "/", "sample_total", ")", "\n", "accs", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "loss_fn", ")", ")", ":", "\n", "                ", "accs", ".", "append", "(", "'acc %d: %.5f'", "%", "(", "k", ",", "correct_total", "[", "k", "]", "/", "sample_total", ")", ")", "\n", "", "if", "recorder", "is", "not", "None", ":", "\n", "                ", "recorder", ".", "train_acc", "(", "training_total", ",", "correct_total", "[", "-", "1", "]", "/", "sample_total", ")", "\n", "recorder", ".", "save_record", "(", ")", "\n", "", "_logger", ".", "info", "(", "' '", ".", "join", "(", "accs", ")", ")", "\n", "sample_total", "=", "0", "\n", "loss_total", "=", "0", "\n", "correct_total", "=", "[", "0", "]", "*", "(", "args", ".", "loss_step", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "valid_total", ">", "args", ".", "check_num", "or", "(", "epoch_end", "and", "epoch", "==", "args", ".", "epoch", "-", "1", ")", ":", "\n", "            ", "aux", "=", "{", "}", "\n", "aux", "[", "'epoch'", "]", "=", "epoch", "\n", "aux", "[", "'cur_iter'", "]", "=", "cur_epoch_training_total", "\n", "aux", "[", "'total_iter'", "]", "=", "training_total", "\n", "save_model", "(", "aux", ",", "args", ",", "net", ",", "mid_net", ",", "loss_fn", ",", "\n", "args", ".", "output", "+", "'_%d_%d'", "%", "(", "epoch", ",", "cur_epoch_training_total", ")", ")", "\n", "_logger", ".", "warning", "(", "'Model saved to %s'", ",", "\n", "args", ".", "output", "+", "'_%d_%d'", "%", "(", "epoch", ",", "cur_epoch_training_total", ")", ")", "\n", "_logger", ".", "warning", "(", "'Start validation!'", ")", "\n", "valid_start", "=", "time", ".", "time", "(", ")", "\n", "data", "=", "{", "}", "\n", "data", "[", "'fix_net'", "]", "=", "False", "\n", "data", "[", "'args'", "]", "=", "args", "\n", "data", "[", "'net'", "]", "=", "net", ".", "state_dict", "(", ")", "\n", "if", "mid_net", "is", "not", "None", ":", "\n", "                ", "data", "[", "'mid_net'", "]", "=", "mid_net", ".", "state_dict", "(", ")", "\n", "", "data", "[", "'loss_fn'", "]", "=", "[", "]", "\n", "for", "loss", "in", "loss_fn", ":", "\n", "                ", "data", "[", "'loss_fn'", "]", ".", "append", "(", "loss", ".", "state_dict", "(", ")", ")", "\n", "", "data", "[", "'test'", "]", "=", "True", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "worker", ")", ":", "\n", "                ", "inqueues", "[", "i", "]", ".", "send", "(", "data", ")", "\n", "\n", "", "result_correct", "=", "0", "\n", "result_total", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "worker", ")", ":", "\n", "                ", "data", "=", "outqueues", "[", "i", "]", ".", "recv", "(", ")", "\n", "result_correct", "+=", "data", "[", "'correct'", "]", "\n", "result_total", "+=", "data", "[", "'total'", "]", "\n", "", "result_", "=", "result_correct", "/", "result_total", "\n", "_logger", ".", "warning", "(", "'Validation complete! Time lapse: %.3f, Test acc: %.5f'", "%", "\n", "(", "time", ".", "time", "(", ")", "-", "valid_start", ",", "result_", ")", ")", "\n", "\n", "if", "recorder", "is", "not", "None", ":", "\n", "                ", "recorder", ".", "test_acc", "(", "training_total", ",", "result_", ")", "\n", "recorder", ".", "save_record", "(", ")", "\n", "", "valid_total", "=", "0", "\n", "if", "args", ".", "fix_net", ":", "\n", "                ", "_logger", ".", "warning", "(", "'learning rate decreases from %.6f to %.6f'", ",", "\n", "args", ".", "learning_rate", ",", "args", ".", "learning_rate", "/", "3", ")", "\n", "args", ".", "learning_rate", "/=", "2", "\n", "opt", "=", "get_opt", "(", "net", ",", "mid_net", ",", "loss_fn", ",", "args", ")", "\n", "\n", "", "", "if", "args", ".", "unfix_net_after", "is", "not", "None", "and", "training_total", ">", "args", ".", "unfix_net_after", ":", "\n", "            ", "args", ".", "fix_net", "=", "False", "\n", "\n", "", "if", "epoch_end", "and", "args", ".", "learning_rate", ">", "args", ".", "min_lr", ":", "\n", "            ", "_logger", ".", "warning", "(", "'learning rate decreases from %.6f to %.6f'", ",", "\n", "args", ".", "learning_rate", ",", "args", ".", "learning_rate", "/", "3", ")", "\n", "args", ".", "learning_rate", "/=", "3", "\n", "opt", "=", "get_opt", "(", "net", ",", "mid_net", ",", "loss_fn", ",", "args", ")", "\n", "\n", "", "if", "epoch_end", ":", "\n", "            ", "cur_epoch_training_total", "=", "0", "\n", "epoch_end", "=", "False", "\n", "epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.worker": [[673, 738], ["log.get_logger", "batch_train.create_models", "log.get_logger.info", "inqueue.recv", "range", "outqueue.send", "net.load_state_dict", "len", "loss_fn[].load_state_dict", "data_loader.DataLoader", "data_loader.DataLoader.start_reader", "batch_train.test_forward", "data_loader.DataLoader.destruct", "batch_train.forward_step", "range", "mid_net.load_state_dict", "loss.eval", "loss.train", "log.get_logger.warning", "batch_train.worker._grad_dict"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.log.get_logger", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.create_models", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.load_state_dict", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.load_state_dict", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.start_reader", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.test_forward", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.data_loader.DataLoader.destruct", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.forward_step", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.model_utils.FakeModule.load_state_dict", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.batch_train.train"], ["", "", "", "def", "worker", "(", "inqueue", ",", "outqueue", ",", "loader", ",", "args", ",", "worker_no", ")", ":", "\n", "    ", "def", "_grad_dict", "(", "net", ")", ":", "\n", "        ", "if", "net", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "{", "name", ":", "param", ".", "grad", ".", "data", "for", "name", ",", "param", "in", "net", ".", "named_parameters", "(", ")", "}", "\n", "\n", "", "", "_logger", "=", "log", ".", "get_logger", "(", "'worker%d'", "%", "worker_no", ",", "args", ",", "append", "=", "True", ")", "\n", "\n", "net", ",", "mid_net", ",", "loss_fn", "=", "create_models", "(", "args", ",", "loader", ")", "\n", "_logger", ".", "info", "(", "'Here I am'", ")", "\n", "while", "True", ":", "\n", "        ", "data", "=", "inqueue", ".", "recv", "(", ")", "\n", "args", "=", "data", "[", "'args'", "]", "\n", "fix_net", "=", "data", "[", "'fix_net'", "]", "\n", "if", "not", "fix_net", ":", "\n", "            ", "net", ".", "load_state_dict", "(", "data", "[", "'net'", "]", ")", "\n", "if", "mid_net", "is", "not", "None", ":", "\n", "                ", "mid_net", ".", "load_state_dict", "(", "data", "[", "'mid_net'", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "loss_fn", ")", ")", ":", "\n", "            ", "loss_fn", "[", "i", "]", ".", "load_state_dict", "(", "data", "[", "'loss_fn'", "]", "[", "i", "]", ")", "\n", "", "test", "=", "data", "[", "'test'", "]", "\n", "if", "test", "is", "True", ":", "\n", "            ", "for", "loss", "in", "loss_fn", ":", "\n", "                ", "loss", ".", "eval", "(", ")", "\n", "", "test_loader", "=", "data_loader", ".", "DataLoader", "(", "\n", "args", ".", "test_file", ",", "\n", "args", ".", "dict_file", ",", "\n", "separate_conj_stmt", "=", "args", ".", "direction", ",", "\n", "binary", "=", "args", ".", "binary", ",", "\n", "part_no", "=", "worker_no", ",", "\n", "part_total", "=", "args", ".", "worker", ",", "\n", "norename", "=", "args", ".", "norename", ",", "\n", "filter_abelian", "=", "args", ".", "fabelian", ",", "\n", "compatible", "=", "args", ".", "compatible", ")", "\n", "test_loader", ".", "start_reader", "(", ")", "\n", "correct", ",", "total", "=", "test_forward", "(", "net", ",", "mid_net", ",", "loss_fn", ",", "test_loader", ",", "args", ")", "\n", "test_loader", ".", "destruct", "(", ")", "\n", "data", "=", "{", "}", "\n", "data", "[", "'correct'", "]", "=", "correct", "\n", "data", "[", "'total'", "]", "=", "total", "\n", "for", "loss", "in", "loss_fn", ":", "\n", "                ", "loss", ".", "train", "(", ")", "\n", "", "", "else", ":", "# train", "\n", "            ", "loss_total", ",", "correct", ",", "total", ",", "epoch_end", "=", "forward_step", "(", "\n", "net", ",", "mid_net", ",", "loss_fn", ",", "loader", ",", "args", ")", "\n", "if", "epoch_end", ":", "\n", "                ", "_logger", ".", "warning", "(", "'My current epoch ends!'", ")", "\n", "", "data", "=", "{", "}", "\n", "if", "not", "args", ".", "fix_net", ":", "\n", "                ", "data", "[", "'net'", "]", "=", "_grad_dict", "(", "net", ")", "\n", "data", "[", "'mid_net'", "]", "=", "_grad_dict", "(", "mid_net", ")", "\n", "", "data", "[", "'loss_fn'", "]", "=", "[", "]", "\n", "for", "loss", "in", "loss_fn", ":", "\n", "                ", "data", "[", "'loss_fn'", "]", ".", "append", "(", "_grad_dict", "(", "loss", ")", ")", "\n", "", "data", "[", "'total'", "]", "=", "total", "\n", "data", "[", "'loss_total'", "]", "=", "loss_total", "\n", "data", "[", "'correct'", "]", "=", "correct", "\n", "data", "[", "'buffer'", "]", "=", "{", "}", "\n", "data", "[", "'buffer'", "]", "[", "'loss_fn'", "]", "=", "[", "{", "}", "for", "_", "in", "loss_fn", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "loss_fn", ")", ")", ":", "\n", "                ", "for", "name", ",", "b", "in", "named_buffers", "(", "loss_fn", "[", "i", "]", ")", ":", "\n", "                    ", "data", "[", "'buffer'", "]", "[", "'loss_fn'", "]", "[", "i", "]", "[", "name", "]", "=", "b", "\n", "# Send data!", "\n", "", "", "", "outqueue", ".", "send", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.utils.split_list": [[1, 8], ["len", "len"], "function", ["None"], ["def", "split_list", "(", "l", ",", "total", ",", "i", ")", ":", "\n", "    ", "persplit", "=", "len", "(", "l", ")", "//", "total", "\n", "offset", "=", "len", "(", "l", ")", "%", "total", "\n", "if", "i", "<", "offset", ":", "\n", "        ", "return", "l", "[", "persplit", "*", "i", "+", "i", ":", "persplit", "*", "(", "i", "+", "1", ")", "+", "i", "+", "1", "]", "\n", "", "else", ":", "\n", "        ", "return", "l", "[", "persplit", "*", "i", "+", "offset", ":", "persplit", "*", "(", "i", "+", "1", ")", "+", "offset", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.formula.Node.__init__": [[44, 56], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ntype", ",", "name", ")", ":", "\n", "        ", "self", ".", "id", "=", "self", ".", "__class__", ".", "id", "\n", "self", ".", "__class__", ".", "id", "+=", "1", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "type", "=", "ntype", "\n", "self", ".", "incoming", "=", "[", "]", "\n", "self", ".", "outgoing", "=", "[", "]", "\n", "# The following is included in incoming / outgoing", "\n", "# To have them just for convenience", "\n", "self", ".", "quant", "=", "None", "# For var/varfuncs", "\n", "self", ".", "vfunc", "=", "[", "]", "# For var functions", "\n", "self", ".", "vvalue", "=", "None", "# For var value", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.formula.Node.reset_id": [[57, 61], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "reset_id", "(", "cls", ")", ":", "\n", "        ", "\"\"\"Reset id count to 0\"\"\"", "\n", "cls", ".", "id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.formula.Node.__str__": [[62, 83], ["formula.type_printer", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.formula.type_printer"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "for", "x", "in", "self", ".", "incoming", ":", "\n", "            ", "if", "x", "is", "None", ":", "\n", "                ", "assert", "False", "\n", "", "", "for", "x", "in", "self", ".", "outgoing", ":", "\n", "            ", "if", "x", "is", "None", ":", "\n", "                ", "assert", "False", "\n", "", "", "extra", "=", "''", "\n", "if", "self", ".", "type", "==", "NodeType", ".", "VAR", "or", "self", ".", "type", "==", "NodeType", ".", "VARFUNC", ":", "\n", "            ", "extra", "=", "' | quant: %s'", "%", "self", ".", "quant", ".", "id", "if", "self", ".", "quant", "is", "not", "None", "else", "''", "\n", "", "elif", "self", ".", "type", "==", "NodeType", ".", "QUANT", ":", "\n", "            ", "extra", "=", "' | var: value: {} | functions: [{}]'", ".", "format", "(", "\n", "self", ".", "vvalue", ".", "id", "if", "self", ".", "vvalue", "is", "not", "None", "else", "' '", ",", "\n", "' '", ".", "join", "(", "[", "str", "(", "x", ".", "id", ")", "for", "x", "in", "self", ".", "vfunc", "]", ")", ")", "\n", "", "return", "'<{}> {} {}: i: {} | o: {} | {}'", ".", "format", "(", "\n", "self", ".", "id", ",", "\n", "type_printer", "(", "self", ".", "type", ")", ",", "\n", "self", ".", "name", ",", "\n", "' '", ".", "join", "(", "[", "str", "(", "x", ".", "id", ")", "for", "x", "in", "self", ".", "incoming", "]", ")", ",", "\n", "' '", ".", "join", "(", "[", "str", "(", "x", ".", "id", ")", "for", "x", "in", "self", ".", "outgoing", "]", ")", ",", "\n", "extra", ")", "# yapf: disable", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.formula.Node.__repr__": [[84, 86], ["formula.Node.__str__"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.formula.Node.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.formula.Node.latex_name": [[87, 103], ["str"], "methods", ["None"], ["", "@", "property", "\n", "def", "latex_name", "(", "self", ")", ":", "\n", "        ", "'''Name used in latex node'''", "\n", "if", "self", ".", "type", "==", "NodeType", ".", "VARFUNC", ":", "\n", "            ", "extra", "=", "'#F'", "\n", "", "else", ":", "\n", "            ", "extra", "=", "''", "\n", "", "node_name", "=", "self", ".", "name", "\n", "if", "node_name", "==", "'==>:c'", ":", "\n", "            ", "node_name", "=", "'==$>$'", "\n", "", "node_name", "=", "'\"'", "+", "node_name", "+", "str", "(", "self", ".", "id", ")", "+", "extra", "+", "'\"'", "\n", "if", "self", ".", "type", "==", "NodeType", ".", "QUANT", ":", "\n", "            ", "node_name", "+=", "'[diamond]'", "\n", "", "elif", "self", ".", "type", "==", "NodeType", ".", "VARFUNC", "or", "self", ".", "type", "==", "NodeType", ".", "VAR", ":", "\n", "            ", "node_name", "+=", "'[rectangle]'", "\n", "", "return", "node_name", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.formula.Node.to_latex": [[104, 122], ["latex.translate", "str.maketrans"], "methods", ["None"], ["", "def", "to_latex", "(", "self", ")", ":", "\n", "        ", "'''Generate latex code'''", "\n", "edges", "=", "self", ".", "outgoing", "+", "self", ".", "vfunc", "\n", "if", "self", ".", "vvalue", ":", "\n", "            ", "edges", "+=", "[", "self", ".", "vvalue", "]", "\n", "", "latex", "=", "self", ".", "latex_name", "+", "' -> {'", "+", "','", ".", "join", "(", "[", "x", ".", "latex_name", "\n", "for", "x", "in", "edges", "]", ")", "+", "'},'", "\n", "escaped", "=", "latex", ".", "translate", "(", "\n", "str", ".", "maketrans", "(", "{", "\n", "\"%\"", ":", "r\"\\%\"", ",", "\n", "\"#\"", ":", "r\"\\#\"", ",", "\n", "\"|\"", ":", "r\"$\\mid$\"", ",", "\n", "\"~\"", ":", "r\"$\\sim$\"", ",", "\n", "\"\\\\\"", ":", "r\"\\textbackslash\"", ",", "\n", "\"<\"", ":", "r\"$<$\"", ",", "\n", "\"_\"", ":", "r\"\\_\"", ",", "\n", "}", ")", ")", "\n", "return", "escaped", "\n", "", "", ""]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.formula.type_printer": [[18, 29], ["None"], "function", ["None"], ["", "def", "type_printer", "(", "node_type", ")", ":", "\n", "    ", "'Print type string'", "\n", "d", "=", "{", "\n", "NodeType", ".", "VAR", ":", "'VAR'", ",", "\n", "NodeType", ".", "VARFUNC", ":", "'VFUNC'", ",", "\n", "NodeType", ".", "CONST", ":", "'CONST'", ",", "\n", "NodeType", ".", "CONSTFUNC", ":", "'CFUNC'", ",", "\n", "NodeType", ".", "QUANT", ":", "'QUANT'", ",", "\n", "NodeType", ".", "NULL", ":", "'NODE'", "\n", "}", "\n", "return", "d", "[", "node_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.data_statistics.StatRecorder.__init__": [[14, 22], ["float", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_edge", "=", "0", "\n", "self", ".", "longest", "=", "0", "\n", "self", ".", "shortest", "=", "float", "(", "'inf'", ")", "\n", "self", ".", "item_count", "=", "0", "\n", "self", ".", "total_node", "=", "0", "\n", "self", ".", "max_node", "=", "0", "\n", "self", ".", "min_node", "=", "float", "(", "'inf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.data_statistics.StatRecorder.count_edges": [[23, 31], ["max", "min", "len"], "methods", ["None"], ["", "def", "count_edges", "(", "self", ",", "graph", ")", ":", "\n", "        ", "total", "=", "0", "\n", "for", "node", "in", "graph", ":", "\n", "            ", "total", "+=", "len", "(", "node", ".", "outgoing", ")", "\n", "", "self", ".", "item_count", "+=", "1", "\n", "self", ".", "longest", "=", "max", "(", "self", ".", "longest", ",", "total", ")", "\n", "self", ".", "shortest", "=", "min", "(", "self", ".", "shortest", ",", "total", ")", "\n", "self", ".", "total_edge", "+=", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.data_statistics.StatRecorder.count_node": [[32, 36], ["len", "max", "min", "len", "len"], "methods", ["None"], ["", "def", "count_node", "(", "self", ",", "graph", ")", ":", "\n", "        ", "self", ".", "total_node", "+=", "len", "(", "graph", ")", "\n", "self", ".", "max_node", "=", "max", "(", "self", ".", "max_node", ",", "len", "(", "graph", ")", ")", "\n", "self", ".", "min_node", "=", "min", "(", "self", ".", "min_node", ",", "len", "(", "graph", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Tokenization.__init__": [[44, 47], ["tokenization.split"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tokenization", ")", ":", "\n", "        ", "self", ".", "i", "=", "-", "1", "# index", "\n", "self", ".", "tokens", "=", "tokenization", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Tokenization.next": [[48, 52], ["None"], "methods", ["None"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "'''Read next token in tokenization'''", "\n", "self", ".", "i", "+=", "1", "\n", "return", "self", ".", "tokens", "[", "self", ".", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.__init__": [[60, 64], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "dict", "=", "{", "}", "\n", "self", ".", "bounded_no", "=", "0", "# key in the dict for next bounded var.", "\n", "self", ".", "bounded_stack", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.__enter__": [[65, 67], ["holstep_parser.Scope.bounded_stack.append"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "bounded_stack", ".", "append", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.__exit__": [[68, 71], ["holstep_parser.Scope.bounded_stack.pop"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "self", ".", "bounded_no", "-=", "self", ".", "bounded_stack", "[", "-", "1", "]", "\n", "self", ".", "bounded_stack", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.query": [[72, 91], ["isinstance"], "methods", ["None"], ["", "def", "query", "(", "self", ",", "name", ")", ":", "\n", "        ", "'''Query if value of name is in current scope.\n\n        Parameters\n        ----------\n        name : str\n            Name being queried.\n\n        Returns\n        -------\n        The corresponding object saved by the name in the scope. Return None if\n        not found.\n        '''", "\n", "if", "isinstance", "(", "name", ",", "int", ")", "and", "name", ">=", "self", ".", "bounded_no", ":", "\n", "            ", "return", "None", "\n", "", "elif", "name", "in", "self", ".", "dict", ":", "\n", "            ", "return", "self", ".", "dict", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.declare_var": [[92, 104], ["None"], "methods", ["None"], ["", "", "def", "declare_var", "(", "self", ",", "quant", ")", ":", "\n", "        ", "'''Declare a name assoicated with a given quant\n\n        Parameters\n        ----------\n        quant : Quant\n            Quantifier that a name is linked with\n        '''", "\n", "# No other constant has just digit name", "\n", "self", ".", "dict", "[", "self", ".", "bounded_no", "]", "=", "quant", "\n", "self", ".", "bounded_stack", "[", "-", "1", "]", "+=", "1", "\n", "self", ".", "bounded_no", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.declare_const": [[105, 117], ["None"], "methods", ["None"], ["", "def", "declare_const", "(", "self", ",", "name", ",", "node", ")", ":", "\n", "        ", "'''Declare a value constant in current scope with given name.\n\n        Parameters\n        ----------\n        name : str\n            Name of the new value variable\n        node\n            Variable the name associated with.\n        '''", "\n", "assert", "name", "not", "in", "self", ".", "dict", ",", "\"Replicated name: {}\"", ".", "format", "(", "name", ")", "\n", "self", ".", "dict", "[", "name", "]", "=", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.depth": [[118, 122], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "depth", "(", "self", ")", ":", "\n", "        ", "'''Length of the program stack'''", "\n", "return", "len", "(", "self", ".", "stack", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph.__init__": [[127, 134], ["holstep_parser.Scope"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "scope", "=", "Scope", "(", ")", "\n", "self", ".", "graph", "=", "[", "]", "\n", "self", ".", "root", "=", "None", "\n", "self", ".", "tail", "=", "None", "# Tail for newly added forall quantifiers", "\n", "self", ".", "debug", "=", "False", "# Switch for debug output", "\n", "self", ".", "rename", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_var": [[135, 159], ["formula.Node", "holstep_parser.FormulaToGraph.graph.append", "name.split"], "methods", ["None"], ["", "def", "_create_var", "(", "self", ",", "quant", ",", "name", ")", ":", "\n", "        ", "'''Create and return a Var node\n        This function won't declare the variable!\n\n        Parameters\n        ----------\n        quant : Quant\n            Quantifier that quantifies this variable.\n\n        Returns\n        -------\n        Node\n            A newly created variable node\n        '''", "\n", "assert", "quant", "!=", "None", "\n", "if", "not", "self", ".", "debug", "and", "self", ".", "rename", ":", "\n", "            ", "name", "=", "'VAR'", "\n", "", "else", ":", "\n", "            ", "name", "=", "name", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "", "node", "=", "Node", "(", "NodeType", ".", "VAR", ",", "name", ")", "\n", "node", ".", "quant", "=", "quant", "\n", "quant", ".", "vvalue", "=", "node", "\n", "self", ".", "graph", ".", "append", "(", "node", ")", "\n", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_varfunc": [[160, 171], ["formula.Node", "quant.vfunc.append", "holstep_parser.FormulaToGraph.graph.append", "name.split"], "methods", ["None"], ["", "def", "_create_varfunc", "(", "self", ",", "quant", ",", "name", ")", ":", "\n", "        ", "assert", "quant", "!=", "None", "\n", "if", "not", "self", ".", "debug", "and", "self", ".", "rename", ":", "\n", "            ", "name", "=", "'VARFUNC'", "\n", "", "else", ":", "\n", "            ", "name", "=", "name", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "", "node", "=", "Node", "(", "NodeType", ".", "VARFUNC", ",", "name", ")", "\n", "node", ".", "quant", "=", "quant", "\n", "quant", ".", "vfunc", ".", "append", "(", "node", ")", "\n", "self", ".", "graph", ".", "append", "(", "node", ")", "\n", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_const": [[172, 189], ["formula.Node", "holstep_parser.FormulaToGraph.graph.append", "holstep_parser.FormulaToGraph.scope.declare_const"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.declare_const"], ["", "def", "_create_const", "(", "self", ",", "name", ")", ":", "\n", "        ", "'''Create and return a Const node\n\n        Parameters\n        ----------\n        name : str\n            Name of the constant.\n\n        Returns\n        -------\n        Node\n            A newly created constant node\n        '''", "\n", "node", "=", "Node", "(", "NodeType", ".", "CONST", ",", "name", ")", "\n", "self", ".", "graph", ".", "append", "(", "node", ")", "\n", "self", ".", "scope", ".", "declare_const", "(", "name", ",", "node", ")", "\n", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_constfunc": [[190, 194], ["formula.Node", "holstep_parser.FormulaToGraph.graph.append"], "methods", ["None"], ["", "def", "_create_constfunc", "(", "self", ",", "name", ")", ":", "\n", "        ", "node", "=", "Node", "(", "NodeType", ".", "CONSTFUNC", ",", "name", ")", "\n", "self", ".", "graph", ".", "append", "(", "node", ")", "\n", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_quant": [[195, 215], ["formula.Node", "holstep_parser.FormulaToGraph.graph.append", "holstep_parser.FormulaToGraph.scope.declare_var"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.declare_var"], ["", "def", "_create_quant", "(", "self", ",", "name", ",", "free_var", "=", "False", ")", ":", "\n", "        ", "'''Create and return a Quant node\n\n        Parameters\n        ----------\n        name : str\n            Name of the quantifier.\n        free_var : bool\n            True if quant is associated with a free variable\n\n        Returns\n        -------\n        Node\n            A newly created quantifier node\n        '''", "\n", "node", "=", "Node", "(", "NodeType", ".", "QUANT", ",", "name", ")", "\n", "self", ".", "graph", ".", "append", "(", "node", ")", "\n", "if", "not", "free_var", ":", "\n", "            ", "self", ".", "scope", ".", "declare_var", "(", "node", ")", "\n", "", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_global_free": [[216, 247], ["holstep_parser.FormulaToGraph.scope.query", "holstep_parser.FormulaToGraph.scope.query", "holstep_parser.FormulaToGraph.root.incoming.append", "holstep_parser.FormulaToGraph.outgoing.append", "holstep_parser.FormulaToGraph._create_quant", "holstep_parser.FormulaToGraph._create_var", "holstep_parser.FormulaToGraph.scope.declare_const", "holstep_parser.FormulaToGraph._create_varfunc", "holstep_parser.FormulaToGraph._create_quant", "holstep_parser.FormulaToGraph._create_varfunc", "holstep_parser.FormulaToGraph.scope.declare_const", "holstep_parser.FormulaToGraph._create_var"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.query", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.query", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_quant", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_var", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.declare_const", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_varfunc", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_quant", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_varfunc", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.declare_const", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_var"], ["", "def", "_create_global_free", "(", "self", ",", "name", ",", "real_name", ",", "is_func", "=", "False", ")", ":", "\n", "        ", "'''Create global free variable by name'''", "\n", "assert", "name", "[", "0", "]", "==", "'f'", ",", "name", "\n", "name", "=", "name", "+", "':f'", "\n", "if", "not", "is_func", ":", "\n", "            ", "quant", "=", "self", ".", "scope", ".", "query", "(", "name", ")", "\n", "if", "quant", "is", "not", "None", ":", "\n", "                ", "if", "quant", ".", "vvalue", "is", "not", "None", ":", "\n", "                    ", "return", "quant", ".", "vvalue", "\n", "", "else", ":", "\n", "                    ", "return", "self", ".", "_create_var", "(", "quant", ",", "real_name", ")", "\n", "", "", "else", ":", "\n", "                ", "quant", "=", "self", ".", "_create_quant", "(", "'!!'", ",", "free_var", "=", "True", ")", "\n", "var", "=", "self", ".", "_create_var", "(", "quant", ",", "real_name", ")", "\n", "self", ".", "scope", ".", "declare_const", "(", "name", ",", "quant", ")", "\n", "", "", "else", ":", "\n", "            ", "quant", "=", "self", ".", "scope", ".", "query", "(", "name", ")", "\n", "if", "quant", "is", "not", "None", ":", "\n", "                ", "return", "self", ".", "_create_varfunc", "(", "quant", ",", "real_name", ")", "\n", "", "else", ":", "\n", "                ", "quant", "=", "self", ".", "_create_quant", "(", "'!!'", ",", "free_var", "=", "True", ")", "\n", "var", "=", "self", ".", "_create_varfunc", "(", "quant", ",", "real_name", ")", "\n", "self", ".", "scope", ".", "declare_const", "(", "name", ",", "quant", ")", "\n", "\n", "", "", "if", "self", ".", "tail", "is", "None", ":", "\n", "            ", "self", ".", "tail", "=", "quant", "\n", "", "else", ":", "\n", "            ", "self", ".", "root", ".", "incoming", ".", "append", "(", "quant", ")", "\n", "quant", ".", "outgoing", ".", "append", "(", "self", ".", "root", ")", "\n", "", "self", ".", "root", "=", "quant", "\n", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_var_const_by_name": [[248, 298], ["name.split", "name.split", "holstep_parser.FormulaToGraph.scope.query", "holstep_parser.FormulaToGraph._create_constfunc", "holstep_parser.FormulaToGraph._create_const", "holstep_parser.FormulaToGraph.scope.query", "holstep_parser.FormulaToGraph.scope.query", "int", "holstep_parser.FormulaToGraph._create_global_free", "int", "holstep_parser.FormulaToGraph._create_varfunc", "holstep_parser.FormulaToGraph._create_global_free", "holstep_parser.FormulaToGraph._create_var"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.query", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_constfunc", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_const", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.query", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Scope.query", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_global_free", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_varfunc", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_global_free", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_var"], ["", "def", "_create_var_const_by_name", "(", "self", ",", "name", ",", "is_func", "=", "False", ")", ":", "\n", "        ", "'''Create a const or node by name.\n\n        Parameters\n        ----------\n        name : str\n            Name of the new node.\n        is_func : bool\n            A flag indicates whether this node is a function.\n\n        Returns\n        -------\n        Node\n            A node created or retrieved\n        '''", "\n", "if", "not", "is_func", ":", "\n", "            ", "r_name", ",", "type_info", "=", "name", ".", "split", "(", "':'", ")", "\n", "if", "type_info", "[", "0", "]", "==", "'c'", ":", "\n", "                ", "node", "=", "self", ".", "scope", ".", "query", "(", "name", ")", "\n", "if", "node", "is", "None", ":", "\n", "                    ", "node", "=", "self", ".", "_create_const", "(", "name", ")", "\n", "", "return", "node", "\n", "", "elif", "type_info", "[", "0", "]", "==", "'b'", ":", "\n", "                ", "quant", "=", "self", ".", "scope", ".", "query", "(", "int", "(", "type_info", "[", "1", ":", "]", ")", ")", "\n", "if", "quant", "is", "not", "None", ":", "\n", "                    ", "if", "quant", ".", "vvalue", "is", "not", "None", ":", "\n", "                        ", "return", "quant", ".", "vvalue", "\n", "", "else", ":", "\n", "                        ", "return", "self", ".", "_create_var", "(", "quant", ",", "name", ")", "\n", "", "", "else", ":", "\n", "                    ", "assert", "quant", "is", "None", "\n", "", "", "elif", "type_info", "[", "0", "]", "==", "'f'", ":", "\n", "                ", "return", "self", ".", "_create_global_free", "(", "type_info", ",", "r_name", ",", "is_func", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", ",", "\"Invalid type: %s\"", "%", "type_info", "\n", "", "", "else", ":", "\n", "            ", "r_name", ",", "type_info", "=", "name", ".", "split", "(", "':'", ")", "\n", "if", "type_info", "[", "0", "]", "==", "'c'", ":", "\n", "                ", "node", "=", "self", ".", "_create_constfunc", "(", "name", ")", "\n", "return", "node", "\n", "", "elif", "type_info", "[", "0", "]", "==", "'b'", ":", "\n", "                ", "quant", "=", "self", ".", "scope", ".", "query", "(", "int", "(", "type_info", "[", "1", ":", "]", ")", ")", "\n", "if", "quant", "is", "not", "None", ":", "\n", "                    ", "return", "self", ".", "_create_varfunc", "(", "quant", ",", "name", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "quant", "is", "None", "\n", "", "", "elif", "type_info", "[", "0", "]", "==", "'f'", ":", "\n", "                ", "return", "self", ".", "_create_global_free", "(", "type_info", ",", "r_name", ",", "is_func", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", ",", "'Invalid type: %s'", "%", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._formula_to_graph": [[299, 341], ["isinstance", "holstep_parser.FormulaToGraph._create_var_const_by_name", "holstep_parser.FormulaToGraph.incoming.append", "isinstance", "holstep_parser.FormulaToGraph._create_quant", "holstep_parser.FormulaToGraph._formula_to_graph", "holstep_parser.FormulaToGraph.outgoing.append", "holstep_parser.FormulaToGraph._formula_to_graph", "holstep_parser.FormulaToGraph.incoming.append", "holstep_parser.FormulaToGraph._formula_to_graph", "holstep_parser.FormulaToGraph.outgoing.append"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_var_const_by_name", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._create_quant", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._formula_to_graph", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._formula_to_graph", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._formula_to_graph"], ["", "", "", "def", "_formula_to_graph", "(", "self", ",", "formula", ",", "parent", "=", "None", ",", "is_func", "=", "False", ")", ":", "\n", "        ", "'''Helper func that converts tupled formula parse tree into graph\n\n        Parameters\n        ----------\n        formula : tuple\n            Tupled tree representation of a formula\n        parent : list of Vertex or None\n            The vertex current formula tuple is connected with\n        is_func : bool\n            If this formula acts like a function.\n\n        Returns\n        -------\n        Node\n            Root node of the converted graph from the given formula.\n        '''", "\n", "if", "isinstance", "(", "formula", ",", "str", ")", ":", "\n", "            ", "node", "=", "self", ".", "_create_var_const_by_name", "(", "formula", ",", "is_func", ")", "\n", "if", "parent", "is", "not", "None", ":", "\n", "                ", "node", ".", "incoming", ".", "append", "(", "parent", ")", "\n", "", "return", "node", "\n", "# Now formula is a tuple", "\n", "", "with", "self", ".", "scope", ":", "\n", "            ", "if", "formula", "[", "0", "]", "in", "QUANTIFIER", ":", "\n", "                ", "assert", "isinstance", "(", "formula", "[", "1", "]", ",", "str", ")", ",", "formula", "[", "1", "]", "\n", "quant_name", "=", "formula", "[", "0", "]", "\n", "if", "quant_name", "==", "'!lambda'", ":", "\n", "                    ", "quant_name", "=", "'!\\\\'", "\n", "", "quant", "=", "self", ".", "_create_quant", "(", "quant_name", ")", "\n", "if", "parent", "is", "not", "None", ":", "\n", "                    ", "quant", ".", "incoming", ".", "append", "(", "parent", ")", "\n", "", "node", "=", "self", ".", "_formula_to_graph", "(", "formula", "[", "2", "]", ",", "quant", ",", "is_func", "=", "False", ")", "\n", "quant", ".", "outgoing", ".", "append", "(", "node", ")", "\n", "return", "quant", "\n", "", "else", ":", "\n", "# assert isinstance(formula[0], str) or formula[0][0] in HOL_QUANT", "\n", "                ", "node", "=", "self", ".", "_formula_to_graph", "(", "formula", "[", "0", "]", ",", "parent", ",", "is_func", "=", "True", ")", "\n", "for", "arg", "in", "formula", "[", "1", ":", "]", ":", "\n", "                    ", "arg_node", "=", "self", ".", "_formula_to_graph", "(", "arg", ",", "node", ")", "\n", "node", ".", "outgoing", ".", "append", "(", "arg_node", ")", "\n", "", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._finalize_graph": [[342, 355], ["node.incoming.append", "node.outgoing.append", "node.outgoing.append"], "methods", ["None"], ["", "", "", "def", "_finalize_graph", "(", "self", ")", ":", "\n", "        ", "'''Finalize nodes in the graph by adding nodes in\n        self.vfunc/self.vvalue/self.quant to corresponding self.incoming and\n        self.outgoing\n        '''", "\n", "for", "node", "in", "self", ".", "graph", ":", "\n", "            ", "if", "node", ".", "type", "in", "(", "NodeType", ".", "VAR", ",", "NodeType", ".", "VARFUNC", ")", ":", "\n", "                ", "node", ".", "incoming", ".", "append", "(", "node", ".", "quant", ")", "\n", "", "elif", "node", ".", "type", "==", "NodeType", ".", "QUANT", ":", "\n", "                ", "for", "x", "in", "node", ".", "vfunc", ":", "\n", "                    ", "node", ".", "outgoing", ".", "append", "(", "x", ")", "\n", "", "if", "node", ".", "vvalue", "is", "not", "None", ":", "\n", "                    ", "node", ".", "outgoing", ".", "append", "(", "node", ".", "vvalue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph.convert": [[356, 400], ["holstep_parser.Scope", "formula.Node.reset_id", "holstep_parser.FormulaToGraph._formula_to_graph", "isinstance", "holstep_parser.FormulaToGraph.tail.outgoing.append", "formula.Node.incoming.append", "formula.Node", "holstep_parser.FormulaToGraph.graph.append", "formula.Node.outgoing.append", "holstep_parser.FormulaToGraph.root.incoming.append", "holstep_parser.FormulaToGraph._finalize_graph", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.formula.Node.reset_id", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._formula_to_graph", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToGraph._finalize_graph"], ["", "", "", "", "def", "convert", "(", "self", ",", "formula", ")", ":", "\n", "        ", "'''Convert tupled formula parse tree into graph\n\n        Parameters\n        ----------\n        formula : tuple\n            Tupled tree representation of a formula\n\n        Returns\n        -------\n        Graph\n            DAG representation of a formula\n        '''", "\n", "self", ".", "scope", "=", "Scope", "(", ")", "\n", "self", ".", "graph", "=", "[", "]", "\n", "self", ".", "root", "=", "None", "\n", "self", ".", "tail", "=", "None", "\n", "Node", ".", "reset_id", "(", ")", "\n", "append_infer_node", "=", "False", "\n", "\n", "if", "isinstance", "(", "formula", ",", "tuple", ")", "and", "len", "(", "formula", ")", "==", "2", "and", "formula", "[", "0", "]", "==", "'|-:c'", ":", "\n", "            ", "formula", "=", "formula", "[", "1", "]", "\n", "append_infer_node", "=", "True", "\n", "while", "isinstance", "(", "formula", ",", "tuple", ")", "and", "formula", "[", "0", "]", "==", "'!!'", ":", "\n", "                ", "formula", "=", "formula", "[", "2", "]", "\n", "\n", "", "", "node", "=", "self", ".", "_formula_to_graph", "(", "formula", ")", "\n", "if", "self", ".", "tail", "is", "not", "None", ":", "\n", "            ", "self", ".", "tail", ".", "outgoing", ".", "append", "(", "node", ")", "\n", "node", ".", "incoming", ".", "append", "(", "self", ".", "tail", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "root", "=", "node", "\n", "\n", "", "if", "append_infer_node", ":", "\n", "            ", "node", "=", "Node", "(", "NodeType", ".", "CONSTFUNC", ",", "'|-:c'", ")", "\n", "self", ".", "graph", ".", "append", "(", "node", ")", "\n", "node", ".", "outgoing", ".", "append", "(", "self", ".", "root", ")", "\n", "self", ".", "root", ".", "incoming", ".", "append", "(", "node", ")", "\n", "self", ".", "root", "=", "node", "\n", "\n", "", "if", "not", "self", ".", "debug", ":", "\n", "            ", "self", ".", "_finalize_graph", "(", ")", "\n", "\n", "", "return", "self", ".", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree.__init__": [[405, 408], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "graph", "=", "[", "]", "\n", "self", ".", "debug", "=", "False", "# Switch for debug output", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree._name_type": [[409, 432], ["typed_name.find", "typed_name.split"], "methods", ["None"], ["", "def", "_name_type", "(", "self", ",", "typed_name", ")", ":", "\n", "        ", "'''Get name, type tuple based on typed name\n\n        Parameters\n        ----------\n        typed_name : str\n            Name with type info followed by :\n\n        Returns\n        -------\n        str, int\n            Name, type\n        '''", "\n", "if", "typed_name", ".", "find", "(", "':'", ")", "==", "-", "1", ":", "\n", "            ", "return", "typed_name", ",", "NodeType", ".", "QUANT", "\n", "", "else", ":", "\n", "            ", "r_name", ",", "type_info", "=", "typed_name", ".", "split", "(", "':'", ")", "\n", "if", "type_info", "[", "0", "]", "==", "'c'", ":", "\n", "                ", "return", "r_name", ",", "NodeType", ".", "CONST", "\n", "", "elif", "type_info", "[", "0", "]", "in", "(", "'b'", ",", "'f'", ")", ":", "\n", "                ", "return", "r_name", ",", "NodeType", ".", "VAR", "\n", "", "else", ":", "\n", "                ", "assert", "False", ",", "'Wrong typed name.'", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree._create_node": [[433, 450], ["holstep_parser.FormulaToTree._name_type", "formula.Node", "holstep_parser.FormulaToTree.graph.append"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree._name_type"], ["", "", "", "def", "_create_node", "(", "self", ",", "name", ")", ":", "\n", "        ", "'''Create and return a node\n\n        Parameters\n        ----------\n        name : str\n            Name of the node\n\n        Returns\n        -------\n        Node\n            A newly created node\n        '''", "\n", "nname", ",", "nodetype", "=", "self", ".", "_name_type", "(", "name", ")", "\n", "node", "=", "Node", "(", "nodetype", ",", "nname", ")", "\n", "self", ".", "graph", ".", "append", "(", "node", ")", "\n", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree._formula_to_tree": [[451, 479], ["isinstance", "holstep_parser.FormulaToTree._create_node", "holstep_parser.FormulaToTree._formula_to_tree", "holstep_parser.FormulaToTree.incoming.append", "holstep_parser.FormulaToTree._formula_to_tree", "holstep_parser.FormulaToTree.outgoing.append"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree._create_node", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree._formula_to_tree", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree._formula_to_tree"], ["", "def", "_formula_to_tree", "(", "self", ",", "formula", ",", "parent", "=", "None", ")", ":", "\n", "        ", "'''Helper func that converts tupled formula parse tree into tree\n\n        Parameters\n        ----------\n        formula : tuple\n            Tupled tree representation of a formula\n        parent : list of Vertex or None\n            The vertex current formula tuple is connected with\n\n        Returns\n        -------\n        Node\n            Root node of the converted tree from the given formula.\n        '''", "\n", "if", "isinstance", "(", "formula", ",", "str", ")", ":", "\n", "            ", "if", "formula", "==", "'!lambda'", ":", "\n", "                ", "formula", "=", "'!\\\\'", "\n", "", "node", "=", "self", ".", "_create_node", "(", "formula", ")", "\n", "if", "parent", "is", "not", "None", ":", "\n", "                ", "node", ".", "incoming", ".", "append", "(", "parent", ")", "\n", "", "return", "node", "\n", "", "else", ":", "# Now formula is a tuple", "\n", "            ", "node", "=", "self", ".", "_formula_to_tree", "(", "formula", "[", "0", "]", ",", "parent", ")", "\n", "for", "arg", "in", "formula", "[", "1", ":", "]", ":", "\n", "                ", "arg_node", "=", "self", ".", "_formula_to_tree", "(", "arg", ",", "node", ")", "\n", "node", ".", "outgoing", ".", "append", "(", "arg_node", ")", "\n", "", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree.convert": [[480, 499], ["formula.Node.reset_id", "holstep_parser.FormulaToTree._formula_to_tree"], "methods", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.formula.Node.reset_id", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree._formula_to_tree"], ["", "", "def", "convert", "(", "self", ",", "formula", ")", ":", "\n", "        ", "'''Convert tupled formula parse tree into tree\n\n        Parameters\n        ----------\n        formula : tuple\n            Tupled tree representation of a formula\n\n        Returns\n        -------\n        Graph\n            tree representation of a formula\n        '''", "\n", "self", ".", "graph", "=", "[", "]", "\n", "Node", ".", "reset_id", "(", ")", "\n", "\n", "node", "=", "self", ".", "_formula_to_tree", "(", "formula", ")", "\n", "\n", "return", "self", ".", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._pack_term": [[501, 528], ["len", "isinstance", "QUANTIFIER_RE.match", "isinstance", "len", "QUANTIFIER_RE.match.groups", "tuple", "tuple", "tuple", "ValueError", "tuple", "len", "range", "len"], "function", ["None"], ["", "", "def", "_pack_term", "(", "l", ")", ":", "\n", "    ", "'''Pack a list of tokens into a term'''", "\n", "if", "len", "(", "l", ")", "==", "2", ":", "\n", "        ", "if", "isinstance", "(", "l", "[", "0", "]", ",", "str", ")", ":", "\n", "            ", "match", "=", "QUANTIFIER_RE", ".", "match", "(", "l", "[", "0", "]", ")", "\n", "if", "match", ":", "# if has quantifier", "\n", "                ", "quantifier", ",", "var", "=", "match", ".", "groups", "(", ")", "\n", "quantifier", "=", "'!'", "+", "quantifier", "\n", "term", "=", "(", "quantifier", ",", "var", ",", "l", "[", "1", "]", ")", "\n", "", "else", ":", "# if is unary operator, or curried function application", "\n", "                ", "term", "=", "tuple", "(", "l", ")", "\n", "", "", "else", ":", "# if is curried function.", "\n", "            ", "assert", "isinstance", "(", "l", "[", "0", "]", ",", "tuple", ")", "\n", "# If the first is not quantifier \\ or @ or infix op, merge curried", "\n", "if", "l", "[", "0", "]", "[", "0", "]", "not", "in", "OPS", ":", "\n", "                ", "term", "=", "l", "[", "0", "]", "+", "tuple", "(", "l", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "term", "=", "tuple", "(", "l", ")", "\n", "", "", "", "elif", "len", "(", "l", ")", "==", "3", ":", "# Handle infix operation", "\n", "        ", "assert", "l", "[", "1", "]", "in", "INFIX_OP", "\n", "term", "=", "(", "l", "[", "1", "]", ",", "l", "[", "0", "]", ",", "l", "[", "2", "]", ")", "\n", "", "elif", "len", "(", "l", ")", ">", "3", "and", "l", "[", "-", "2", "]", "==", "'|-'", ":", "\n", "        ", "assert", "l", "[", "1", ":", "-", "2", ":", "2", "]", "==", "[", "','", "for", "_", "in", "range", "(", "(", "len", "(", "l", ")", "-", "3", ")", "//", "2", ")", "]", "\n", "term", "=", "tuple", "(", "[", "l", "[", "-", "2", "]", "]", "+", "l", "[", ":", ":", "2", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unexpected syntax: {}'", ".", "format", "(", "l", ")", ")", "\n", "", "return", "term", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._get_typed_name": [[530, 548], ["isinstance", "ValueError"], "function", ["None"], ["", "def", "_get_typed_name", "(", "term", ",", "token", ")", ":", "\n", "    ", "'''Mark type info based on the corresponding single token\n\n    Parameters\n    ----------\n    token : str\n        Token extracted from tokenization.\n    '''", "\n", "assert", "isinstance", "(", "term", ",", "str", ")", "\n", "if", "token", "[", "0", "]", "==", "'c'", ":", "\n", "        ", "assert", "term", "==", "token", "[", "1", ":", "]", ",", "'Term: {} ||| token: {}'", ".", "format", "(", "term", ",", "token", ")", "\n", "return", "term", "+", "':c'", "\n", "", "elif", "token", "[", "0", "]", "==", "'f'", ":", "\n", "        ", "return", "term", "+", "':'", "+", "token", "\n", "", "elif", "token", "[", "0", "]", "==", "'b'", ":", "\n", "        ", "return", "term", "+", "':'", "+", "token", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown token! Term: {} ||| token: {}'", ".", "format", "(", "term", ",", "token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._check_quant": [[550, 558], ["None"], "function", ["None"], ["", "", "def", "_check_quant", "(", "term", ",", "token", ")", ":", "\n", "    ", "'''Check if quantifier is consistant in term and token'''", "\n", "if", "term", "==", "'!!'", ":", "\n", "        ", "return", "term", "[", "1", "]", "==", "token", "\n", "", "elif", "term", "in", "QUANTIFIER", ":", "\n", "        ", "return", "term", "[", "1", ":", "]", "==", "token", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "        ", "return", "'c'", "+", "term", "==", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._repack": [[560, 590], ["isinstance", "holstep_parser._get_typed_name", "len", "tuple", "token.next", "len", "token.next", "holstep_parser._check_quant", "holstep_parser._repack", "isinstance", "result.append", "result.append", "holstep_parser._repack", "holstep_parser._get_typed_name", "token.next"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._get_typed_name", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Tokenization.next", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Tokenization.next", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._check_quant", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._repack", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._repack", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._get_typed_name", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Tokenization.next"], ["", "", "def", "_repack", "(", "formula", ",", "token", ")", ":", "\n", "    ", "'''Use token to add type info and repack the Formulas\n\n    Parameters\n    ----------\n    token : Tokenization\n        The tokenization object\n    '''", "\n", "if", "isinstance", "(", "formula", ",", "tuple", ")", ":", "\n", "# Ensure every tupled formula has more than one elements.", "\n", "        ", "assert", "len", "(", "formula", ")", ">", "1", ",", "formula", "\n", "if", "formula", "[", "0", "]", "in", "QUANTIFIER", ":", "\n", "            ", "assert", "len", "(", "formula", ")", "==", "3", ",", "formula", "\n", "# Corresponding token is deleted in clean due to ambiguity", "\n", "if", "formula", "[", "0", "]", "!=", "'!\\\\'", ":", "\n", "                ", "t_quant", "=", "token", ".", "next", "(", ")", "\n", "assert", "_check_quant", "(", "formula", "[", "0", "]", ",", "\n", "t_quant", ")", ",", "'Term: {} ||| token: {}'", ".", "format", "(", "\n", "formula", "[", "0", "]", ",", "t_quant", ")", "\n", "", "return", "(", "formula", "[", "0", "]", ",", "formula", "[", "1", "]", "+", "':b'", ",", "_repack", "(", "formula", "[", "2", "]", ",", "token", ")", ")", "\n", "", "else", ":", "# Function", "\n", "            ", "result", "=", "[", "]", "\n", "for", "x", "in", "formula", ":", "\n", "                ", "if", "isinstance", "(", "x", ",", "tuple", ")", ":", "\n", "                    ", "result", ".", "append", "(", "_repack", "(", "x", ",", "token", ")", ")", "\n", "", "else", ":", "\n", "                    ", "result", ".", "append", "(", "_get_typed_name", "(", "x", ",", "token", ".", "next", "(", ")", ")", ")", "\n", "", "", "return", "tuple", "(", "result", ")", "\n", "", "", "else", ":", "# single token", "\n", "        ", "return", "_get_typed_name", "(", "formula", ",", "token", ".", "next", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._fix_omitted_forall": [[592, 599], ["holstep_parser._repack", "len", "holstep_parser._fix_omitted_forall"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._repack", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._fix_omitted_forall"], ["", "", "def", "_fix_omitted_forall", "(", "formula", ",", "token", ")", ":", "\n", "    ", "'''Handle omitted forall in token'''", "\n", "if", "formula", "[", "0", "]", "==", "'!!'", ":", "\n", "        ", "assert", "len", "(", "formula", ")", "==", "3", "\n", "return", "(", "formula", "[", "0", "]", ",", "formula", "[", "1", "]", "+", "':b'", ",", "_fix_omitted_forall", "(", "formula", "[", "2", "]", ",", "token", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "_repack", "(", "formula", ",", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._add_type": [[601, 617], ["holstep_parser.Tokenization", "len", "enumerate", "tuple", "holstep_parser._fix_omitted_forall", "formula.append", "holstep_parser.Tokenization.next", "holstep_parser._repack", "len"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._fix_omitted_forall", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Tokenization.next", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._repack"], ["", "", "def", "_add_type", "(", "processed_formula", ",", "tokenization", ")", ":", "\n", "    ", "'''Add type information right after every constant & variable, separated by #.'''", "\n", "tokenization", "=", "Tokenization", "(", "tokenization", ")", "\n", "if", "len", "(", "processed_formula", ")", "==", "2", ":", "\n", "        ", "assert", "processed_formula", "[", "0", "]", "==", "'|-'", "\n", "return", "(", "'|-:c'", ",", "_fix_omitted_forall", "(", "processed_formula", "[", "1", "]", ",", "tokenization", ")", ")", "\n", "", "else", ":", "\n", "# Case: A, B, C |- D", "\n", "# Note in tokenization, it's ==> A ==> B ==> C D", "\n", "        ", "formula", "=", "[", "'|-:c'", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "processed_formula", "[", "1", ":", "]", ")", ":", "\n", "            ", "if", "i", "<", "len", "(", "processed_formula", ")", "-", "2", ":", "\n", "                ", "token", "=", "tokenization", ".", "next", "(", ")", "\n", "", "assert", "token", "==", "'c==>'", ",", "'Token is {}'", ".", "format", "(", "token", ")", "\n", "formula", ".", "append", "(", "_repack", "(", "t", ",", "tokenization", ")", ")", "\n", "", "return", "tuple", "(", "formula", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.parse_formula": [[619, 651], ["TOKEN_RE.findall", "holstep_parser._pack_term", "STRIP_TOKEN_RE.sub", "holstep_parser._add_type", "len", "print", "stack.append", "stack[].append", "holstep_parser._pack_term", "stack.pop"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._pack_term", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._add_type", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser._pack_term"], ["", "", "def", "parse_formula", "(", "formula", ",", "tokenization", ")", ":", "\n", "    ", "'''Parse HolStep formula to a tupled representation\n\n    Parameters\n    ----------\n    formula : str\n        A single HolStep formula\n    tokenization : str\n        A corresponding tokenization.\n\n    Returns\n    -------\n    tuple\n        Tupled tree representation of a formula\n    '''", "\n", "tokens", "=", "TOKEN_RE", ".", "findall", "(", "formula", ")", "\n", "stack", "=", "[", "[", "]", "]", "\n", "for", "t", "in", "tokens", ":", "\n", "        ", "if", "t", "==", "'('", ":", "\n", "            ", "stack", ".", "append", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "t", "==", "')'", ":", "\n", "                ", "t", "=", "_pack_term", "(", "stack", ".", "pop", "(", ")", ")", "\n", "", "stack", "[", "-", "1", "]", ".", "append", "(", "t", ")", "\n", "", "", "assert", "len", "(", "stack", ")", "==", "1", "\n", "processed_formula", "=", "_pack_term", "(", "stack", "[", "0", "]", ")", "\n", "if", "__name__", "==", "'__main__'", ":", "\n", "        ", "print", "(", "processed_formula", ")", "\n", "\n", "", "tokenization", "=", "STRIP_TOKEN_RE", ".", "sub", "(", "''", ",", "' '", "+", "tokenization", ")", "# Pad a space", "\n", "typed_formula", "=", "_add_type", "(", "processed_formula", ",", "tokenization", ")", "\n", "return", "typed_formula", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.graph_from_hol_stmt": [[653, 675], ["holstep_parser.FormulaToGraph", "holstep_parser.FormulaToGraph.convert", "holstep_parser.parse_formula"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree.convert", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.parse_formula"], ["", "def", "graph_from_hol_stmt", "(", "formula", ",", "tokenization", ")", ":", "\n", "    ", "'''Parse HolStep formula to a graph.\n\n    Formulas in HolStep are using a dialects of HOL Light. The formula\n    provides all necessary parentheses, so that the knowledge of precedence\n    is no more needed. Besides formulas, a tokenization is also provided\n    for crucial type information.\n\n    Parameters\n    ----------\n    formula : str\n        A single HolStep formula\n    tokenization : str\n        A corresponding tokenization.\n\n    Returns\n    -------\n    list of Node\n        Graph representation of a formula\n    '''", "\n", "converter", "=", "FormulaToGraph", "(", ")", "\n", "return", "converter", ".", "convert", "(", "parse_formula", "(", "formula", ",", "tokenization", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.tree_from_hol_stmt": [[677, 708], ["holstep_parser.FormulaToGraph", "holstep_parser.FormulaToTree.convert", "shuffle_tree_name.convert", "holstep_parser.FormulaToTree", "holstep_parser.FormulaToTree.convert", "holstep_parser.parse_formula", "holstep_parser.parse_formula"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree.convert", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree.convert", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.FormulaToTree.convert", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.parse_formula", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.parse_formula"], ["", "def", "tree_from_hol_stmt", "(", "formula", ",", "tokenization", ",", "rename", "=", "False", ",", "charpool", "=", "None", ",", "unseen", "=", "False", ")", ":", "\n", "    ", "'''Parse HolStep formula to a tree\n\n    Formulas in HolStep are using a dialects of HOL Light. The formula\n    provides all necessary parentheses, so that the knowledge of precedence\n    is no more needed. Besides formulas, a tokenization is also provided\n    for crucial type information.\n\n    Parameters\n    ----------\n    formula : str\n        A single HolStep formula\n    tokenization : str\n        A corresponding tokenization.\n    rename : bool\n        Randomly shuffle name among all available names is True\n    charpool : list\n        Set used for picking up random names\n\n    Returns\n    -------\n    list of Node\n        Tree representation of a formula\n    '''", "\n", "if", "rename", ":", "\n", "        ", "converter", "=", "FormulaToGraph", "(", ")", "\n", "stmt", "=", "converter", ".", "convert", "(", "parse_formula", "(", "formula", ",", "tokenization", ")", ")", "\n", "return", "shuffle_tree_name", ".", "convert", "(", "stmt", ",", "charpool", ",", "unseen", ")", "\n", "", "else", ":", "\n", "        ", "converter", "=", "FormulaToTree", "(", ")", "\n", "return", "converter", ".", "convert", "(", "parse_formula", "(", "formula", ",", "tokenization", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.visualize.draw": [[20, 29], ["graphviz.Digraph", "graphviz.Digraph.render", "graphviz.Digraph.node", "str", "graphviz.Digraph.edge", "str", "str"], "function", ["None"], ["def", "draw", "(", "node_list", ",", "graph_name", ")", ":", "\n", "    ", "dot", "=", "Digraph", "(", "comment", "=", "graph_name", ")", "\n", "for", "node", "in", "node_list", ":", "\n", "        ", "dot", ".", "node", "(", "str", "(", "node", ".", "id", ")", ",", "node", ".", "name", ")", "\n", "", "for", "node", "in", "node_list", ":", "\n", "        ", "for", "out", "in", "node", ".", "outgoing", ":", "\n", "            ", "dot", ".", "edge", "(", "str", "(", "node", ".", "id", ")", ",", "str", "(", "out", ".", "id", ")", ")", "\n", "\n", "", "", "dot", ".", "render", "(", "graph_name", ",", "view", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.test_holstep_parser.check_incoming_outgoing": [[10, 25], ["None"], "function", ["None"], ["def", "check_incoming_outgoing", "(", "graph", ")", ":", "\n", "    ", "'''This function checks if incoming is consistent with outgoing'''", "\n", "incoming_dict", "=", "{", "}", "\n", "outgoing_dict", "=", "{", "}", "\n", "for", "node", "in", "graph", ":", "\n", "        ", "if", "node", ".", "id", "in", "incoming_dict", ":", "\n", "            ", "assert", "False", ",", "'Replicated id!'", "\n", "", "incoming_dict", "[", "node", ".", "id", "]", "=", "{", "x", ".", "id", "for", "x", "in", "node", ".", "incoming", "}", "\n", "outgoing_dict", "[", "node", ".", "id", "]", "=", "{", "x", ".", "id", "for", "x", "in", "node", ".", "outgoing", "}", "\n", "\n", "", "for", "node", "in", "graph", ":", "\n", "        ", "for", "x", "in", "node", ".", "incoming", ":", "\n", "            ", "assert", "node", ".", "id", "in", "outgoing_dict", "[", "x", ".", "id", "]", "\n", "", "for", "x", "in", "node", ".", "outgoing", ":", "\n", "            ", "assert", "node", ".", "id", "in", "incoming_dict", "[", "x", ".", "id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.test_holstep_parser.check_special_field": [[27, 34], ["len"], "function", ["None"], ["", "", "", "def", "check_special_field", "(", "graph", ")", ":", "\n", "    ", "'''Check special fields'''", "\n", "for", "node", "in", "graph", ":", "\n", "        ", "if", "node", ".", "type", "not", "in", "(", "NodeType", ".", "VAR", ",", "NodeType", ".", "VARFUNC", ")", ":", "\n", "            ", "assert", "node", ".", "quant", "==", "None", "\n", "", "if", "node", ".", "type", "!=", "NodeType", ".", "QUANT", ":", "\n", "            ", "assert", "len", "(", "node", ".", "vfunc", ")", "==", "0", "and", "node", ".", "vvalue", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.generate_hol_dataset.count_stmt": [[13, 34], ["os.listdir", "enumerate", "os.path.join", "print", "open", "sum", "len"], "function", ["None"], ["def", "count_stmt", "(", "path", ")", ":", "\n", "    ", "'''Count the number of the statements in the files of the given folder\n\n    Parameters\n    ----------\n    path : str\n        Path to the directory\n\n    Returns\n    -------\n    int\n        The number of total conjectures and statements\n    '''", "\n", "total", "=", "0", "\n", "files", "=", "os", ".", "listdir", "(", "path", ")", "\n", "for", "i", ",", "fname", "in", "enumerate", "(", "files", ")", ":", "\n", "        ", "fpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "fname", ")", "\n", "print", "(", "'Counting file {}/{} at {}.'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "files", ")", ",", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "total", "+=", "sum", "(", "[", "1", "if", "line", "and", "line", "[", "0", "]", "in", "'+-C'", "else", "0", "for", "line", "in", "f", "]", ")", "\n", "", "", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.generate_hol_dataset.generate_dataset": [[36, 75], ["len", "enumerate", "enumerate", "str", "os.listdir", "os.path.join", "print", "range", "open", "next", "next", "next", "converter", "open", "print", "pickle.dump", "len", "os.path.join", "converter", "outputs[].append", "format", "next", "random.randint"], "function", ["home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Tokenization.next", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Tokenization.next", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Tokenization.next", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.src.log._Formatter.format", "home.repos.pwc.inspect_result.princeton-vl_FormulaNet.data_util.holstep_parser.Tokenization.next"], ["", "def", "generate_dataset", "(", "path", ",", "output", ",", "partition", ",", "converter", ",", "files", "=", "None", ")", ":", "\n", "    ", "'''Generate dataset at given path\n\n    Parameters\n    ----------\n    path : str\n        Path to the source\n    output : str\n        Path to the destination\n    partition : int\n        Number of the partition for this dataset (i.e. # of files)\n    '''", "\n", "digits", "=", "len", "(", "str", "(", "partition", ")", ")", "\n", "outputs", "=", "[", "[", "]", "for", "_", "in", "range", "(", "partition", ")", "]", "\n", "if", "files", "is", "None", ":", "\n", "        ", "files", "=", "os", ".", "listdir", "(", "path", ")", "\n", "", "for", "i", ",", "fname", "in", "enumerate", "(", "files", ")", ":", "\n", "        ", "fpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "fname", ")", "\n", "print", "(", "'Processing file {}/{} at {}.'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "files", ")", ",", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "next", "(", "f", ")", "\n", "conj_symbol", "=", "next", "(", "f", ")", "\n", "conj_token", "=", "next", "(", "f", ")", "\n", "assert", "conj_symbol", "[", "0", "]", "==", "'C'", "\n", "conjecture", "=", "converter", "(", "conj_symbol", "[", "2", ":", "]", ",", "conj_token", "[", "2", ":", "]", ")", "\n", "for", "line", "in", "f", ":", "\n", "                ", "if", "line", "and", "line", "[", "0", "]", "in", "'+-'", ":", "\n", "                    ", "statement", "=", "converter", "(", "line", "[", "2", ":", "]", ",", "next", "(", "f", ")", "[", "2", ":", "]", ")", "\n", "flag", "=", "1", "if", "line", "[", "0", "]", "==", "'+'", "else", "0", "\n", "record", "=", "flag", ",", "conjecture", ",", "statement", "\n", "outputs", "[", "random", ".", "randint", "(", "0", ",", "partition", "-", "1", ")", "]", ".", "append", "(", "record", ")", "\n", "\n", "# Save dataset", "\n", "", "", "", "", "for", "i", ",", "data", "in", "enumerate", "(", "outputs", ")", ":", "\n", "        ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "output", ",", "'holstep'", "+", "format", "(", "i", ",", "\"0{}d\"", ".", "format", "(", "digits", ")", ")", ")", ",", "\n", "'wb'", ")", "as", "f", ":", "\n", "            ", "print", "(", "'Saving to file {}/{}'", ".", "format", "(", "i", "+", "1", ",", "partition", ")", ")", "\n", "pickle", ".", "dump", "(", "data", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]]}