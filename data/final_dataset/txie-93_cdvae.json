{"home.repos.pwc.inspect_result.txie-93_cdvae.scripts.evaluate.reconstructon": [[14, 84], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_geometric.data.Batch.from_data_list", "torch.cuda.is_available", "print", "model.encode", "range", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "batch.cuda", "model.langevin_dynamics", "batch_frac_coords.append", "batch_num_atoms.append", "batch_atom_types.append", "batch_lengths.append", "batch_angles.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat.append", "torch.cat.append", "batch.to_data_list", "outputs[].detach().cpu", "outputs[].detach().cpu", "outputs[].detach().cpu", "outputs[].detach().cpu", "outputs[].detach().cpu", "batch_all_frac_coords.append", "batch_all_atom_types.append", "torch.stack", "torch.stack", "len", "[].detach().cpu", "[].detach().cpu", "outputs[].detach", "outputs[].detach", "outputs[].detach", "outputs[].detach", "outputs[].detach", "[].detach", "[].detach"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.encode", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.langevin_dynamics"], ["def", "reconstructon", "(", "loader", ",", "model", ",", "ld_kwargs", ",", "num_evals", ",", "\n", "force_num_atoms", "=", "False", ",", "force_atom_types", "=", "False", ",", "down_sample_traj_step", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    reconstruct the crystals in <loader>.\n    \"\"\"", "\n", "all_frac_coords_stack", "=", "[", "]", "\n", "all_atom_types_stack", "=", "[", "]", "\n", "frac_coords", "=", "[", "]", "\n", "num_atoms", "=", "[", "]", "\n", "atom_types", "=", "[", "]", "\n", "lengths", "=", "[", "]", "\n", "angles", "=", "[", "]", "\n", "input_data_list", "=", "[", "]", "\n", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "batch", ".", "cuda", "(", ")", "\n", "", "print", "(", "f'batch {idx} in {len(loader)}'", ")", "\n", "batch_all_frac_coords", "=", "[", "]", "\n", "batch_all_atom_types", "=", "[", "]", "\n", "batch_frac_coords", ",", "batch_num_atoms", ",", "batch_atom_types", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "batch_lengths", ",", "batch_angles", "=", "[", "]", ",", "[", "]", "\n", "\n", "# only sample one z, multiple evals for stoichaticity in langevin dynamics", "\n", "_", ",", "_", ",", "z", "=", "model", ".", "encode", "(", "batch", ")", "\n", "\n", "for", "eval_idx", "in", "range", "(", "num_evals", ")", ":", "\n", "            ", "gt_num_atoms", "=", "batch", ".", "num_atoms", "if", "force_num_atoms", "else", "None", "\n", "gt_atom_types", "=", "batch", ".", "atom_types", "if", "force_atom_types", "else", "None", "\n", "outputs", "=", "model", ".", "langevin_dynamics", "(", "\n", "z", ",", "ld_kwargs", ",", "gt_num_atoms", ",", "gt_atom_types", ")", "\n", "\n", "# collect sampled crystals in this batch.", "\n", "batch_frac_coords", ".", "append", "(", "outputs", "[", "'frac_coords'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "batch_num_atoms", ".", "append", "(", "outputs", "[", "'num_atoms'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "batch_atom_types", ".", "append", "(", "outputs", "[", "'atom_types'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "batch_lengths", ".", "append", "(", "outputs", "[", "'lengths'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "batch_angles", ".", "append", "(", "outputs", "[", "'angles'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "if", "ld_kwargs", ".", "save_traj", ":", "\n", "                ", "batch_all_frac_coords", ".", "append", "(", "\n", "outputs", "[", "'all_frac_coords'", "]", "[", ":", ":", "down_sample_traj_step", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "batch_all_atom_types", ".", "append", "(", "\n", "outputs", "[", "'all_atom_types'", "]", "[", ":", ":", "down_sample_traj_step", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "# collect sampled crystals for this z.", "\n", "", "", "frac_coords", ".", "append", "(", "torch", ".", "stack", "(", "batch_frac_coords", ",", "dim", "=", "0", ")", ")", "\n", "num_atoms", ".", "append", "(", "torch", ".", "stack", "(", "batch_num_atoms", ",", "dim", "=", "0", ")", ")", "\n", "atom_types", ".", "append", "(", "torch", ".", "stack", "(", "batch_atom_types", ",", "dim", "=", "0", ")", ")", "\n", "lengths", ".", "append", "(", "torch", ".", "stack", "(", "batch_lengths", ",", "dim", "=", "0", ")", ")", "\n", "angles", ".", "append", "(", "torch", ".", "stack", "(", "batch_angles", ",", "dim", "=", "0", ")", ")", "\n", "if", "ld_kwargs", ".", "save_traj", ":", "\n", "            ", "all_frac_coords_stack", ".", "append", "(", "\n", "torch", ".", "stack", "(", "batch_all_frac_coords", ",", "dim", "=", "0", ")", ")", "\n", "all_atom_types_stack", ".", "append", "(", "\n", "torch", ".", "stack", "(", "batch_all_atom_types", ",", "dim", "=", "0", ")", ")", "\n", "# Save the ground truth structure", "\n", "", "input_data_list", "=", "input_data_list", "+", "batch", ".", "to_data_list", "(", ")", "\n", "\n", "", "frac_coords", "=", "torch", ".", "cat", "(", "frac_coords", ",", "dim", "=", "1", ")", "\n", "num_atoms", "=", "torch", ".", "cat", "(", "num_atoms", ",", "dim", "=", "1", ")", "\n", "atom_types", "=", "torch", ".", "cat", "(", "atom_types", ",", "dim", "=", "1", ")", "\n", "lengths", "=", "torch", ".", "cat", "(", "lengths", ",", "dim", "=", "1", ")", "\n", "angles", "=", "torch", ".", "cat", "(", "angles", ",", "dim", "=", "1", ")", "\n", "if", "ld_kwargs", ".", "save_traj", ":", "\n", "        ", "all_frac_coords_stack", "=", "torch", ".", "cat", "(", "all_frac_coords_stack", ",", "dim", "=", "2", ")", "\n", "all_atom_types_stack", "=", "torch", ".", "cat", "(", "all_atom_types_stack", ",", "dim", "=", "2", ")", "\n", "", "input_data_batch", "=", "Batch", ".", "from_data_list", "(", "input_data_list", ")", "\n", "\n", "return", "(", "\n", "frac_coords", ",", "num_atoms", ",", "atom_types", ",", "lengths", ",", "angles", ",", "\n", "all_frac_coords_stack", ",", "all_atom_types_stack", ",", "input_data_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.evaluate.generation": [[86, 142], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.randn", "range", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "model.langevin_dynamics", "batch_frac_coords.append", "batch_num_atoms.append", "batch_atom_types.append", "batch_lengths.append", "batch_angles.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat.append", "torch.cat.append", "samples[].detach().cpu", "samples[].detach().cpu", "samples[].detach().cpu", "samples[].detach().cpu", "samples[].detach().cpu", "batch_all_frac_coords.append", "batch_all_atom_types.append", "torch.stack", "torch.stack", "[].detach().cpu", "[].detach().cpu", "samples[].detach", "samples[].detach", "samples[].detach", "samples[].detach", "samples[].detach", "[].detach", "[].detach"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.langevin_dynamics"], ["", "def", "generation", "(", "model", ",", "ld_kwargs", ",", "num_batches_to_sample", ",", "num_samples_per_z", ",", "\n", "batch_size", "=", "512", ",", "down_sample_traj_step", "=", "1", ")", ":", "\n", "    ", "all_frac_coords_stack", "=", "[", "]", "\n", "all_atom_types_stack", "=", "[", "]", "\n", "frac_coords", "=", "[", "]", "\n", "num_atoms", "=", "[", "]", "\n", "atom_types", "=", "[", "]", "\n", "lengths", "=", "[", "]", "\n", "angles", "=", "[", "]", "\n", "\n", "for", "z_idx", "in", "range", "(", "num_batches_to_sample", ")", ":", "\n", "        ", "batch_all_frac_coords", "=", "[", "]", "\n", "batch_all_atom_types", "=", "[", "]", "\n", "batch_frac_coords", ",", "batch_num_atoms", ",", "batch_atom_types", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "batch_lengths", ",", "batch_angles", "=", "[", "]", ",", "[", "]", "\n", "\n", "z", "=", "torch", ".", "randn", "(", "batch_size", ",", "model", ".", "hparams", ".", "hidden_dim", ",", "\n", "device", "=", "model", ".", "device", ")", "\n", "\n", "for", "sample_idx", "in", "range", "(", "num_samples_per_z", ")", ":", "\n", "            ", "samples", "=", "model", ".", "langevin_dynamics", "(", "z", ",", "ld_kwargs", ")", "\n", "\n", "# collect sampled crystals in this batch.", "\n", "batch_frac_coords", ".", "append", "(", "samples", "[", "'frac_coords'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "batch_num_atoms", ".", "append", "(", "samples", "[", "'num_atoms'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "batch_atom_types", ".", "append", "(", "samples", "[", "'atom_types'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "batch_lengths", ".", "append", "(", "samples", "[", "'lengths'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "batch_angles", ".", "append", "(", "samples", "[", "'angles'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "if", "ld_kwargs", ".", "save_traj", ":", "\n", "                ", "batch_all_frac_coords", ".", "append", "(", "\n", "samples", "[", "'all_frac_coords'", "]", "[", ":", ":", "down_sample_traj_step", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "batch_all_atom_types", ".", "append", "(", "\n", "samples", "[", "'all_atom_types'", "]", "[", ":", ":", "down_sample_traj_step", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "# collect sampled crystals for this z.", "\n", "", "", "frac_coords", ".", "append", "(", "torch", ".", "stack", "(", "batch_frac_coords", ",", "dim", "=", "0", ")", ")", "\n", "num_atoms", ".", "append", "(", "torch", ".", "stack", "(", "batch_num_atoms", ",", "dim", "=", "0", ")", ")", "\n", "atom_types", ".", "append", "(", "torch", ".", "stack", "(", "batch_atom_types", ",", "dim", "=", "0", ")", ")", "\n", "lengths", ".", "append", "(", "torch", ".", "stack", "(", "batch_lengths", ",", "dim", "=", "0", ")", ")", "\n", "angles", ".", "append", "(", "torch", ".", "stack", "(", "batch_angles", ",", "dim", "=", "0", ")", ")", "\n", "if", "ld_kwargs", ".", "save_traj", ":", "\n", "            ", "all_frac_coords_stack", ".", "append", "(", "\n", "torch", ".", "stack", "(", "batch_all_frac_coords", ",", "dim", "=", "0", ")", ")", "\n", "all_atom_types_stack", ".", "append", "(", "\n", "torch", ".", "stack", "(", "batch_all_atom_types", ",", "dim", "=", "0", ")", ")", "\n", "\n", "", "", "frac_coords", "=", "torch", ".", "cat", "(", "frac_coords", ",", "dim", "=", "1", ")", "\n", "num_atoms", "=", "torch", ".", "cat", "(", "num_atoms", ",", "dim", "=", "1", ")", "\n", "atom_types", "=", "torch", ".", "cat", "(", "atom_types", ",", "dim", "=", "1", ")", "\n", "lengths", "=", "torch", ".", "cat", "(", "lengths", ",", "dim", "=", "1", ")", "\n", "angles", "=", "torch", ".", "cat", "(", "angles", ",", "dim", "=", "1", ")", "\n", "if", "ld_kwargs", ".", "save_traj", ":", "\n", "        ", "all_frac_coords_stack", "=", "torch", ".", "cat", "(", "all_frac_coords_stack", ",", "dim", "=", "2", ")", "\n", "all_atom_types_stack", "=", "torch", ".", "cat", "(", "all_atom_types_stack", ",", "dim", "=", "2", ")", "\n", "", "return", "(", "frac_coords", ",", "num_atoms", ",", "atom_types", ",", "lengths", ",", "angles", ",", "\n", "all_frac_coords_stack", ",", "all_atom_types_stack", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.evaluate.optimization": [[144, 173], ["torch.optim.Adam", "model.freeze", "tqdm.tqdm", "next().to", "model.encode", "z[].detach().clone", "torch.randn", "range", "torch.optim.Adam.zero_grad", "model.fc_property().mean", "model.fc_property().mean.backward", "torch.optim.Adam.step", "torch.cat().unsqueeze", "model.langevin_dynamics", "all_crystals.append", "next", "z[].detach", "model.fc_property", "torch.cat", "iter"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.encode", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.langevin_dynamics"], ["", "def", "optimization", "(", "model", ",", "ld_kwargs", ",", "data_loader", ",", "\n", "num_starting_points", "=", "100", ",", "num_gradient_steps", "=", "5000", ",", "\n", "lr", "=", "1e-3", ",", "num_saved_crys", "=", "10", ")", ":", "\n", "    ", "if", "data_loader", "is", "not", "None", ":", "\n", "        ", "batch", "=", "next", "(", "iter", "(", "data_loader", ")", ")", ".", "to", "(", "model", ".", "device", ")", "\n", "_", ",", "_", ",", "z", "=", "model", ".", "encode", "(", "batch", ")", "\n", "z", "=", "z", "[", ":", "num_starting_points", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "z", ".", "requires_grad", "=", "True", "\n", "", "else", ":", "\n", "        ", "z", "=", "torch", ".", "randn", "(", "num_starting_points", ",", "model", ".", "hparams", ".", "hidden_dim", ",", "\n", "device", "=", "model", ".", "device", ")", "\n", "z", ".", "requires_grad", "=", "True", "\n", "\n", "", "opt", "=", "Adam", "(", "[", "z", "]", ",", "lr", "=", "lr", ")", "\n", "model", ".", "freeze", "(", ")", "\n", "\n", "all_crystals", "=", "[", "]", "\n", "interval", "=", "num_gradient_steps", "//", "(", "num_saved_crys", "-", "1", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "num_gradient_steps", ")", ")", ":", "\n", "        ", "opt", ".", "zero_grad", "(", ")", "\n", "loss", "=", "model", ".", "fc_property", "(", "z", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "if", "i", "%", "interval", "==", "0", "or", "i", "==", "(", "num_gradient_steps", "-", "1", ")", ":", "\n", "            ", "crystals", "=", "model", ".", "langevin_dynamics", "(", "z", ",", "ld_kwargs", ")", "\n", "all_crystals", ".", "append", "(", "crystals", ")", "\n", "", "", "return", "{", "k", ":", "torch", ".", "cat", "(", "[", "d", "[", "k", "]", "for", "d", "in", "all_crystals", "]", ")", ".", "unsqueeze", "(", "0", ")", "for", "k", "in", "\n", "[", "'frac_coords'", ",", "'atom_types'", ",", "'num_atoms'", ",", "'lengths'", ",", "'angles'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.evaluate.main": [[175, 258], ["pathlib.Path", "eval_utils.load_model", "types.SimpleNamespace", "torch.cuda.is_available", "model.to", "print", "time.time", "evaluate.reconstructon", "torch.save", "print", "time.time", "evaluate.generation", "torch.save", "print", "time.time", "evaluate.optimization", "optimization.update", "torch.save", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.load_model", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.evaluate.reconstructon", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.evaluate.generation", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.evaluate.optimization"], ["", "def", "main", "(", "args", ")", ":", "\n", "# load_data if do reconstruction.", "\n", "    ", "model_path", "=", "Path", "(", "args", ".", "model_path", ")", "\n", "model", ",", "test_loader", ",", "cfg", "=", "load_model", "(", "\n", "model_path", ",", "load_data", "=", "(", "'recon'", "in", "args", ".", "tasks", ")", "or", "\n", "(", "'opt'", "in", "args", ".", "tasks", "and", "args", ".", "start_from", "==", "'data'", ")", ")", "\n", "ld_kwargs", "=", "SimpleNamespace", "(", "n_step_each", "=", "args", ".", "n_step_each", ",", "\n", "step_lr", "=", "args", ".", "step_lr", ",", "\n", "min_sigma", "=", "args", ".", "min_sigma", ",", "\n", "save_traj", "=", "args", ".", "save_traj", ",", "\n", "disable_bar", "=", "args", ".", "disable_bar", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "to", "(", "'cuda'", ")", "\n", "\n", "", "if", "'recon'", "in", "args", ".", "tasks", ":", "\n", "        ", "print", "(", "'Evaluate model on the reconstruction task.'", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "(", "frac_coords", ",", "num_atoms", ",", "atom_types", ",", "lengths", ",", "angles", ",", "\n", "all_frac_coords_stack", ",", "all_atom_types_stack", ",", "input_data_batch", ")", "=", "reconstructon", "(", "\n", "test_loader", ",", "model", ",", "ld_kwargs", ",", "args", ".", "num_evals", ",", "\n", "args", ".", "force_num_atoms", ",", "args", ".", "force_atom_types", ",", "args", ".", "down_sample_traj_step", ")", "\n", "\n", "if", "args", ".", "label", "==", "''", ":", "\n", "            ", "recon_out_name", "=", "'eval_recon.pt'", "\n", "", "else", ":", "\n", "            ", "recon_out_name", "=", "f'eval_recon_{args.label}.pt'", "\n", "\n", "", "torch", ".", "save", "(", "{", "\n", "'eval_setting'", ":", "args", ",", "\n", "'input_data_batch'", ":", "input_data_batch", ",", "\n", "'frac_coords'", ":", "frac_coords", ",", "\n", "'num_atoms'", ":", "num_atoms", ",", "\n", "'atom_types'", ":", "atom_types", ",", "\n", "'lengths'", ":", "lengths", ",", "\n", "'angles'", ":", "angles", ",", "\n", "'all_frac_coords_stack'", ":", "all_frac_coords_stack", ",", "\n", "'all_atom_types_stack'", ":", "all_atom_types_stack", ",", "\n", "'time'", ":", "time", ".", "time", "(", ")", "-", "start_time", "\n", "}", ",", "model_path", "/", "recon_out_name", ")", "\n", "\n", "", "if", "'gen'", "in", "args", ".", "tasks", ":", "\n", "        ", "print", "(", "'Evaluate model on the generation task.'", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "(", "frac_coords", ",", "num_atoms", ",", "atom_types", ",", "lengths", ",", "angles", ",", "\n", "all_frac_coords_stack", ",", "all_atom_types_stack", ")", "=", "generation", "(", "\n", "model", ",", "ld_kwargs", ",", "args", ".", "num_batches_to_samples", ",", "args", ".", "num_evals", ",", "\n", "args", ".", "batch_size", ",", "args", ".", "down_sample_traj_step", ")", "\n", "\n", "if", "args", ".", "label", "==", "''", ":", "\n", "            ", "gen_out_name", "=", "'eval_gen.pt'", "\n", "", "else", ":", "\n", "            ", "gen_out_name", "=", "f'eval_gen_{args.label}.pt'", "\n", "\n", "", "torch", ".", "save", "(", "{", "\n", "'eval_setting'", ":", "args", ",", "\n", "'frac_coords'", ":", "frac_coords", ",", "\n", "'num_atoms'", ":", "num_atoms", ",", "\n", "'atom_types'", ":", "atom_types", ",", "\n", "'lengths'", ":", "lengths", ",", "\n", "'angles'", ":", "angles", ",", "\n", "'all_frac_coords_stack'", ":", "all_frac_coords_stack", ",", "\n", "'all_atom_types_stack'", ":", "all_atom_types_stack", ",", "\n", "'time'", ":", "time", ".", "time", "(", ")", "-", "start_time", "\n", "}", ",", "model_path", "/", "gen_out_name", ")", "\n", "\n", "", "if", "'opt'", "in", "args", ".", "tasks", ":", "\n", "        ", "print", "(", "'Evaluate model on the property optimization task.'", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "args", ".", "start_from", "==", "'data'", ":", "\n", "            ", "loader", "=", "test_loader", "\n", "", "else", ":", "\n", "            ", "loader", "=", "None", "\n", "", "optimized_crystals", "=", "optimization", "(", "model", ",", "ld_kwargs", ",", "loader", ")", "\n", "optimized_crystals", ".", "update", "(", "{", "'eval_setting'", ":", "args", ",", "\n", "'time'", ":", "time", ".", "time", "(", ")", "-", "start_time", "}", ")", "\n", "\n", "if", "args", ".", "label", "==", "''", ":", "\n", "            ", "gen_out_name", "=", "'eval_opt.pt'", "\n", "", "else", ":", "\n", "            ", "gen_out_name", "=", "f'eval_opt_{args.label}.pt'", "\n", "", "torch", ".", "save", "(", "optimized_crystals", ",", "model_path", "/", "gen_out_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.load_data": [[28, 40], ["numpy.load().item", "torch.load.items", "torch.load", "numpy.load", "data[].items", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "load_data", "(", "file_path", ")", ":", "\n", "    ", "if", "file_path", "[", "-", "3", ":", "]", "==", "'npy'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "file_path", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "==", "'input_data_batch'", ":", "\n", "                ", "for", "k1", ",", "v1", "in", "data", "[", "k", "]", ".", "items", "(", ")", ":", "\n", "                    ", "data", "[", "k", "]", "[", "k1", "]", "=", "torch", ".", "from_numpy", "(", "v1", ")", "\n", "", "", "else", ":", "\n", "                ", "data", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "v", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "", "", "else", ":", "\n", "        ", "data", "=", "torch", ".", "load", "(", "file_path", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.get_model_path": [[42, 47], ["pathlib.Path"], "function", ["None"], ["", "def", "get_model_path", "(", "eval_model_name", ")", ":", "\n", "    ", "import", "cdvae", "\n", "model_path", "=", "(", "\n", "Path", "(", "cdvae", ".", "__file__", ")", ".", "parent", "/", "'prop_models'", "/", "eval_model_name", ")", "\n", "return", "model_path", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.load_config": [[49, 53], ["hydra.initialize_config_dir", "hydra.experimental.compose", "str"], "function", ["None"], ["", "def", "load_config", "(", "model_path", ")", ":", "\n", "    ", "with", "initialize_config_dir", "(", "str", "(", "model_path", ")", ")", ":", "\n", "        ", "cfg", "=", "compose", "(", "config_name", "=", "'hparams'", ")", "\n", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.load_model": [[55, 88], ["hydra.initialize_config_dir", "hydra.experimental.compose", "hydra.utils.instantiate", "list", "model.load_from_checkpoint.load_from_checkpoint", "torch.load", "torch.load", "str", "model_path.glob", "len", "numpy.array", "str", "hydra.utils.instantiate", "hydra.utils.instantiate.setup", "hydra.utils.instantiate.setup", "int", "hydra.utils.instantiate.test_dataloader", "hydra.utils.instantiate.val_dataloader", "[].split", "np.array.argsort", "str.parts[].split"], "function", ["None"], ["", "def", "load_model", "(", "model_path", ",", "load_data", "=", "False", ",", "testing", "=", "True", ")", ":", "\n", "    ", "with", "initialize_config_dir", "(", "str", "(", "model_path", ")", ")", ":", "\n", "        ", "cfg", "=", "compose", "(", "config_name", "=", "'hparams'", ")", "\n", "model", "=", "hydra", ".", "utils", ".", "instantiate", "(", "\n", "cfg", ".", "model", ",", "\n", "optim", "=", "cfg", ".", "optim", ",", "\n", "data", "=", "cfg", ".", "data", ",", "\n", "logging", "=", "cfg", ".", "logging", ",", "\n", "_recursive_", "=", "False", ",", "\n", ")", "\n", "ckpts", "=", "list", "(", "model_path", ".", "glob", "(", "'*.ckpt'", ")", ")", "\n", "if", "len", "(", "ckpts", ")", ">", "0", ":", "\n", "            ", "ckpt_epochs", "=", "np", ".", "array", "(", "\n", "[", "int", "(", "ckpt", ".", "parts", "[", "-", "1", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", ".", "split", "(", "'='", ")", "[", "1", "]", ")", "for", "ckpt", "in", "ckpts", "]", ")", "\n", "ckpt", "=", "str", "(", "ckpts", "[", "ckpt_epochs", ".", "argsort", "(", ")", "[", "-", "1", "]", "]", ")", "\n", "", "model", "=", "model", ".", "load_from_checkpoint", "(", "ckpt", ")", "\n", "model", ".", "lattice_scaler", "=", "torch", ".", "load", "(", "model_path", "/", "'lattice_scaler.pt'", ")", "\n", "model", ".", "scaler", "=", "torch", ".", "load", "(", "model_path", "/", "'prop_scaler.pt'", ")", "\n", "\n", "if", "load_data", ":", "\n", "            ", "datamodule", "=", "hydra", ".", "utils", ".", "instantiate", "(", "\n", "cfg", ".", "data", ".", "datamodule", ",", "_recursive_", "=", "False", ",", "scaler_path", "=", "model_path", "\n", ")", "\n", "if", "testing", ":", "\n", "                ", "datamodule", ".", "setup", "(", "'test'", ")", "\n", "test_loader", "=", "datamodule", ".", "test_dataloader", "(", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "datamodule", ".", "setup", "(", ")", "\n", "test_loader", "=", "datamodule", ".", "val_dataloader", "(", ")", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "test_loader", "=", "None", "\n", "\n", "", "", "return", "model", ",", "test_loader", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.get_crystals_list": [[90, 119], ["enumerate", "frac_coords.size", "atom_types.size", "num_atoms.sum", "lengths.size", "angles.size", "num_atoms.size", "num_atoms.tolist", "frac_coords.narrow", "atom_types.narrow", "crystal_array_list.append", "frac_coords.narrow.detach().cpu().numpy", "atom_types.narrow.detach().cpu().numpy", "cur_lengths.detach().cpu().numpy", "cur_angles.detach().cpu().numpy", "frac_coords.narrow.detach().cpu", "atom_types.narrow.detach().cpu", "cur_lengths.detach().cpu", "cur_angles.detach().cpu", "frac_coords.narrow.detach", "atom_types.narrow.detach", "cur_lengths.detach", "cur_angles.detach"], "function", ["None"], ["", "def", "get_crystals_list", "(", "\n", "frac_coords", ",", "atom_types", ",", "lengths", ",", "angles", ",", "num_atoms", ")", ":", "\n", "    ", "\"\"\"\n    args:\n        frac_coords: (num_atoms, 3)\n        atom_types: (num_atoms)\n        lengths: (num_crystals)\n        angles: (num_crystals)\n        num_atoms: (num_crystals)\n    \"\"\"", "\n", "assert", "frac_coords", ".", "size", "(", "0", ")", "==", "atom_types", ".", "size", "(", "0", ")", "==", "num_atoms", ".", "sum", "(", ")", "\n", "assert", "lengths", ".", "size", "(", "0", ")", "==", "angles", ".", "size", "(", "0", ")", "==", "num_atoms", ".", "size", "(", "0", ")", "\n", "\n", "start_idx", "=", "0", "\n", "crystal_array_list", "=", "[", "]", "\n", "for", "batch_idx", ",", "num_atom", "in", "enumerate", "(", "num_atoms", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "cur_frac_coords", "=", "frac_coords", ".", "narrow", "(", "0", ",", "start_idx", ",", "num_atom", ")", "\n", "cur_atom_types", "=", "atom_types", ".", "narrow", "(", "0", ",", "start_idx", ",", "num_atom", ")", "\n", "cur_lengths", "=", "lengths", "[", "batch_idx", "]", "\n", "cur_angles", "=", "angles", "[", "batch_idx", "]", "\n", "\n", "crystal_array_list", ".", "append", "(", "{", "\n", "'frac_coords'", ":", "cur_frac_coords", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'atom_types'", ":", "cur_atom_types", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'lengths'", ":", "cur_lengths", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'angles'", ":", "cur_angles", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "}", ")", "\n", "start_idx", "=", "start_idx", "+", "num_atom", "\n", "", "return", "crystal_array_list", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.smact_validity": [[121, 163], ["tuple", "smact.element_dictionary", "numpy.max", "itertools.product", "list", "len", "all", "smact.neutral_ratios", "set", "len", "smact.element_dictionary.items", "set", "smact.screening.pauling_test", "list.append", "tuple"], "function", ["None"], ["", "def", "smact_validity", "(", "comp", ",", "count", ",", "\n", "use_pauling_test", "=", "True", ",", "\n", "include_alloys", "=", "True", ")", ":", "\n", "    ", "elem_symbols", "=", "tuple", "(", "[", "chemical_symbols", "[", "elem", "]", "for", "elem", "in", "comp", "]", ")", "\n", "space", "=", "smact", ".", "element_dictionary", "(", "elem_symbols", ")", "\n", "smact_elems", "=", "[", "e", "[", "1", "]", "for", "e", "in", "space", ".", "items", "(", ")", "]", "\n", "electronegs", "=", "[", "e", ".", "pauling_eneg", "for", "e", "in", "smact_elems", "]", "\n", "ox_combos", "=", "[", "e", ".", "oxidation_states", "for", "e", "in", "smact_elems", "]", "\n", "if", "len", "(", "set", "(", "elem_symbols", ")", ")", "==", "1", ":", "\n", "        ", "return", "True", "\n", "", "if", "include_alloys", ":", "\n", "        ", "is_metal_list", "=", "[", "elem_s", "in", "smact", ".", "metals", "for", "elem_s", "in", "elem_symbols", "]", "\n", "if", "all", "(", "is_metal_list", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "", "threshold", "=", "np", ".", "max", "(", "count", ")", "\n", "compositions", "=", "[", "]", "\n", "for", "ox_states", "in", "itertools", ".", "product", "(", "*", "ox_combos", ")", ":", "\n", "        ", "stoichs", "=", "[", "(", "c", ",", ")", "for", "c", "in", "count", "]", "\n", "# Test for charge balance", "\n", "cn_e", ",", "cn_r", "=", "smact", ".", "neutral_ratios", "(", "\n", "ox_states", ",", "stoichs", "=", "stoichs", ",", "threshold", "=", "threshold", ")", "\n", "# Electronegativity test", "\n", "if", "cn_e", ":", "\n", "            ", "if", "use_pauling_test", ":", "\n", "                ", "try", ":", "\n", "                    ", "electroneg_OK", "=", "pauling_test", "(", "ox_states", ",", "electronegs", ")", "\n", "", "except", "TypeError", ":", "\n", "# if no electronegativity data, assume it is okay", "\n", "                    ", "electroneg_OK", "=", "True", "\n", "", "", "else", ":", "\n", "                ", "electroneg_OK", "=", "True", "\n", "", "if", "electroneg_OK", ":", "\n", "                ", "for", "ratio", "in", "cn_r", ":", "\n", "                    ", "compositions", ".", "append", "(", "\n", "tuple", "(", "[", "elem_symbols", ",", "ox_states", ",", "ratio", "]", ")", ")", "\n", "", "", "", "", "compositions", "=", "[", "(", "i", "[", "0", "]", ",", "i", "[", "2", "]", ")", "for", "i", "in", "compositions", "]", "\n", "compositions", "=", "list", "(", "set", "(", "compositions", ")", ")", "\n", "if", "len", "(", "compositions", ")", ">", "0", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.structure_validity": [[165, 174], ["numpy.diag", "dist_mat.min", "numpy.ones"], "function", ["None"], ["", "", "def", "structure_validity", "(", "crystal", ",", "cutoff", "=", "0.5", ")", ":", "\n", "    ", "dist_mat", "=", "crystal", ".", "distance_matrix", "\n", "# Pad diagonal with a large number", "\n", "dist_mat", "=", "dist_mat", "+", "np", ".", "diag", "(", "\n", "np", ".", "ones", "(", "dist_mat", ".", "shape", "[", "0", "]", ")", "*", "(", "cutoff", "+", "10.", ")", ")", "\n", "if", "dist_mat", ".", "min", "(", ")", "<", "cutoff", "or", "crystal", ".", "volume", "<", "0.1", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.get_fp_pdist": [[176, 181], ["isinstance", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist.mean", "numpy.array"], "function", ["None"], ["", "", "def", "get_fp_pdist", "(", "fp_array", ")", ":", "\n", "    ", "if", "isinstance", "(", "fp_array", ",", "list", ")", ":", "\n", "        ", "fp_array", "=", "np", ".", "array", "(", "fp_array", ")", "\n", "", "fp_pdists", "=", "pdist", "(", "fp_array", ")", "\n", "return", "fp_pdists", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.prop_model_eval": [[183, 216], ["eval_utils.get_model_path", "eval_utils.load_model", "eval_utils.load_config", "cdvae.pl_data.dataset.TensorCrystDataset", "model.scaler.copy", "torch_geometric.data.DataLoader", "model.eval", "numpy.concatenate().squeeze", "np.concatenate().squeeze.tolist", "model", "model.scaler.match_device", "model.scaler.inverse_transform", "np.concatenate().squeeze.append", "model.scaler.inverse_transform.detach().cpu().numpy", "numpy.concatenate", "model.scaler.inverse_transform.detach().cpu", "model.scaler.inverse_transform.detach"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.get_model_path", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.load_model", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.load_config", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.copy", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.match_device", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.inverse_transform"], ["", "def", "prop_model_eval", "(", "eval_model_name", ",", "crystal_array_list", ")", ":", "\n", "\n", "    ", "model_path", "=", "get_model_path", "(", "eval_model_name", ")", "\n", "\n", "model", ",", "_", ",", "_", "=", "load_model", "(", "model_path", ")", "\n", "cfg", "=", "load_config", "(", "model_path", ")", "\n", "\n", "dataset", "=", "TensorCrystDataset", "(", "\n", "crystal_array_list", ",", "cfg", ".", "data", ".", "niggli", ",", "cfg", ".", "data", ".", "primitive", ",", "\n", "cfg", ".", "data", ".", "graph_method", ",", "cfg", ".", "data", ".", "preprocess_workers", ",", "\n", "cfg", ".", "data", ".", "lattice_scale_method", ")", "\n", "\n", "dataset", ".", "scaler", "=", "model", ".", "scaler", ".", "copy", "(", ")", "\n", "\n", "loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "shuffle", "=", "False", ",", "\n", "batch_size", "=", "256", ",", "\n", "num_workers", "=", "0", ",", "\n", "worker_init_fn", "=", "worker_init_fn", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "all_preds", "=", "[", "]", "\n", "\n", "for", "batch", "in", "loader", ":", "\n", "        ", "preds", "=", "model", "(", "batch", ")", "\n", "model", ".", "scaler", ".", "match_device", "(", "preds", ")", "\n", "scaled_preds", "=", "model", ".", "scaler", ".", "inverse_transform", "(", "preds", ")", "\n", "all_preds", ".", "append", "(", "scaled_preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "all_preds", "=", "np", ".", "concatenate", "(", "all_preds", ",", "axis", "=", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "return", "all_preds", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.filter_fps": [[218, 228], ["zip", "len", "len", "filtered_struc_fps.append", "filtered_comp_fps.append"], "function", ["None"], ["", "def", "filter_fps", "(", "struc_fps", ",", "comp_fps", ")", ":", "\n", "    ", "assert", "len", "(", "struc_fps", ")", "==", "len", "(", "comp_fps", ")", "\n", "\n", "filtered_struc_fps", ",", "filtered_comp_fps", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "struc_fp", ",", "comp_fp", "in", "zip", "(", "struc_fps", ",", "comp_fps", ")", ":", "\n", "        ", "if", "struc_fp", "is", "not", "None", "and", "comp_fp", "is", "not", "None", ":", "\n", "            ", "filtered_struc_fps", ".", "append", "(", "struc_fp", ")", "\n", "filtered_comp_fps", ".", "append", "(", "comp_fp", ")", "\n", "", "", "return", "filtered_struc_fps", ",", "filtered_comp_fps", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.compute_cov": [[230, 286], ["eval_utils.filter_fps", "CompScaler.transform", "CompScaler.transform", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist.min", "scipy.spatial.distance.cdist.min", "scipy.spatial.distance.cdist.min", "scipy.spatial.distance.cdist.min", "numpy.mean", "len", "len", "len", "len", "len", "numpy.logical_and", "numpy.sum", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "struc_pdist.min.tolist", "struc_pdist.min.tolist", "comp_pdist.min.tolist", "comp_pdist.min.tolist", "numpy.logical_and"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.filter_fps", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.transform", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.transform"], ["", "def", "compute_cov", "(", "crys", ",", "gt_crys", ",", "\n", "struc_cutoff", ",", "comp_cutoff", ",", "num_gen_crystals", "=", "None", ")", ":", "\n", "    ", "struc_fps", "=", "[", "c", ".", "struct_fp", "for", "c", "in", "crys", "]", "\n", "comp_fps", "=", "[", "c", ".", "comp_fp", "for", "c", "in", "crys", "]", "\n", "gt_struc_fps", "=", "[", "c", ".", "struct_fp", "for", "c", "in", "gt_crys", "]", "\n", "gt_comp_fps", "=", "[", "c", ".", "comp_fp", "for", "c", "in", "gt_crys", "]", "\n", "\n", "assert", "len", "(", "struc_fps", ")", "==", "len", "(", "comp_fps", ")", "\n", "assert", "len", "(", "gt_struc_fps", ")", "==", "len", "(", "gt_comp_fps", ")", "\n", "\n", "# Use number of crystal before filtering to compute COV", "\n", "if", "num_gen_crystals", "is", "None", ":", "\n", "        ", "num_gen_crystals", "=", "len", "(", "struc_fps", ")", "\n", "\n", "", "struc_fps", ",", "comp_fps", "=", "filter_fps", "(", "struc_fps", ",", "comp_fps", ")", "\n", "\n", "comp_fps", "=", "CompScaler", ".", "transform", "(", "comp_fps", ")", "\n", "gt_comp_fps", "=", "CompScaler", ".", "transform", "(", "gt_comp_fps", ")", "\n", "\n", "struc_fps", "=", "np", ".", "array", "(", "struc_fps", ")", "\n", "gt_struc_fps", "=", "np", ".", "array", "(", "gt_struc_fps", ")", "\n", "comp_fps", "=", "np", ".", "array", "(", "comp_fps", ")", "\n", "gt_comp_fps", "=", "np", ".", "array", "(", "gt_comp_fps", ")", "\n", "\n", "struc_pdist", "=", "cdist", "(", "struc_fps", ",", "gt_struc_fps", ")", "\n", "comp_pdist", "=", "cdist", "(", "comp_fps", ",", "gt_comp_fps", ")", "\n", "\n", "struc_recall_dist", "=", "struc_pdist", ".", "min", "(", "axis", "=", "0", ")", "\n", "struc_precision_dist", "=", "struc_pdist", ".", "min", "(", "axis", "=", "1", ")", "\n", "comp_recall_dist", "=", "comp_pdist", ".", "min", "(", "axis", "=", "0", ")", "\n", "comp_precision_dist", "=", "comp_pdist", ".", "min", "(", "axis", "=", "1", ")", "\n", "\n", "cov_recall", "=", "np", ".", "mean", "(", "np", ".", "logical_and", "(", "\n", "struc_recall_dist", "<=", "struc_cutoff", ",", "\n", "comp_recall_dist", "<=", "comp_cutoff", ")", ")", "\n", "cov_precision", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "\n", "struc_precision_dist", "<=", "struc_cutoff", ",", "\n", "comp_precision_dist", "<=", "comp_cutoff", ")", ")", "/", "num_gen_crystals", "\n", "\n", "metrics_dict", "=", "{", "\n", "'cov_recall'", ":", "cov_recall", ",", "\n", "'cov_precision'", ":", "cov_precision", ",", "\n", "'amsd_recall'", ":", "np", ".", "mean", "(", "struc_recall_dist", ")", ",", "\n", "'amsd_precision'", ":", "np", ".", "mean", "(", "struc_precision_dist", ")", ",", "\n", "'amcd_recall'", ":", "np", ".", "mean", "(", "comp_recall_dist", ")", ",", "\n", "'amcd_precision'", ":", "np", ".", "mean", "(", "comp_precision_dist", ")", ",", "\n", "}", "\n", "\n", "combined_dist_dict", "=", "{", "\n", "'struc_recall_dist'", ":", "struc_recall_dist", ".", "tolist", "(", ")", ",", "\n", "'struc_precision_dist'", ":", "struc_precision_dist", ".", "tolist", "(", ")", ",", "\n", "'comp_recall_dist'", ":", "comp_recall_dist", ".", "tolist", "(", ")", ",", "\n", "'comp_precision_dist'", ":", "comp_precision_dist", ".", "tolist", "(", ")", ",", "\n", "}", "\n", "\n", "return", "metrics_dict", ",", "combined_dist_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.Crystal.__init__": [[41, 52], ["compute_metrics.Crystal.get_structure", "compute_metrics.Crystal.get_composition", "compute_metrics.Crystal.get_validity", "compute_metrics.Crystal.get_fingerprints"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.Crystal.get_structure", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.Crystal.get_composition", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_validity", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.Crystal.get_fingerprints"], ["    ", "def", "__init__", "(", "self", ",", "crys_array_dict", ")", ":", "\n", "        ", "self", ".", "frac_coords", "=", "crys_array_dict", "[", "'frac_coords'", "]", "\n", "self", ".", "atom_types", "=", "crys_array_dict", "[", "'atom_types'", "]", "\n", "self", ".", "lengths", "=", "crys_array_dict", "[", "'lengths'", "]", "\n", "self", ".", "angles", "=", "crys_array_dict", "[", "'angles'", "]", "\n", "self", ".", "dict", "=", "crys_array_dict", "\n", "\n", "self", ".", "get_structure", "(", ")", "\n", "self", ".", "get_composition", "(", ")", "\n", "self", ".", "get_validity", "(", ")", "\n", "self", ".", "get_fingerprints", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.Crystal.get_structure": [[53, 70], ["min", "compute_metrics.Crystal.lengths.tolist", "pymatgen.core.structure.Structure", "pymatgen.core.lattice.Lattice.from_parameters", "compute_metrics.Crystal.lengths.tolist", "compute_metrics.Crystal.angles.tolist"], "methods", ["None"], ["", "def", "get_structure", "(", "self", ")", ":", "\n", "        ", "if", "min", "(", "self", ".", "lengths", ".", "tolist", "(", ")", ")", "<", "0", ":", "\n", "            ", "self", ".", "constructed", "=", "False", "\n", "self", ".", "invalid_reason", "=", "'non_positive_lattice'", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "structure", "=", "Structure", "(", "\n", "lattice", "=", "Lattice", ".", "from_parameters", "(", "\n", "*", "(", "self", ".", "lengths", ".", "tolist", "(", ")", "+", "self", ".", "angles", ".", "tolist", "(", ")", ")", ")", ",", "\n", "species", "=", "self", ".", "atom_types", ",", "coords", "=", "self", ".", "frac_coords", ",", "coords_are_cartesian", "=", "False", ")", "\n", "self", ".", "constructed", "=", "True", "\n", "", "except", "Exception", ":", "\n", "                ", "self", ".", "constructed", "=", "False", "\n", "self", ".", "invalid_reason", "=", "'construction_raises_exception'", "\n", "", "if", "self", ".", "structure", ".", "volume", "<", "0.1", ":", "\n", "                ", "self", ".", "constructed", "=", "False", "\n", "self", ".", "invalid_reason", "=", "'unrealistically_small_lattice'", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.Crystal.get_composition": [[71, 80], ["collections.Counter", "list", "numpy.array", "tuple", "zip", "numpy.gcd.reduce", "numpy.array.astype().tolist", "sorted", "collections.Counter.keys", "numpy.array.astype"], "methods", ["None"], ["", "", "", "def", "get_composition", "(", "self", ")", ":", "\n", "        ", "elem_counter", "=", "Counter", "(", "self", ".", "atom_types", ")", "\n", "composition", "=", "[", "(", "elem", ",", "elem_counter", "[", "elem", "]", ")", "\n", "for", "elem", "in", "sorted", "(", "elem_counter", ".", "keys", "(", ")", ")", "]", "\n", "elems", ",", "counts", "=", "list", "(", "zip", "(", "*", "composition", ")", ")", "\n", "counts", "=", "np", ".", "array", "(", "counts", ")", "\n", "counts", "=", "counts", "/", "np", ".", "gcd", ".", "reduce", "(", "counts", ")", "\n", "self", ".", "elems", "=", "elems", "\n", "self", ".", "comps", "=", "tuple", "(", "counts", ".", "astype", "(", "'int'", ")", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.Crystal.get_validity": [[81, 88], ["eval_utils.smact_validity", "eval_utils.structure_validity"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.smact_validity", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.structure_validity"], ["", "def", "get_validity", "(", "self", ")", ":", "\n", "        ", "self", ".", "comp_valid", "=", "smact_validity", "(", "self", ".", "elems", ",", "self", ".", "comps", ")", "\n", "if", "self", ".", "constructed", ":", "\n", "            ", "self", ".", "struct_valid", "=", "structure_validity", "(", "self", ".", "structure", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "struct_valid", "=", "False", "\n", "", "self", ".", "valid", "=", "self", ".", "comp_valid", "and", "self", ".", "struct_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.Crystal.get_fingerprints": [[89, 103], ["collections.Counter", "pymatgen.core.composition.Composition", "CompFP.featurize", "numpy.array().mean", "CrystalNNFP.featurize", "numpy.array", "range", "len"], "methods", ["None"], ["", "def", "get_fingerprints", "(", "self", ")", ":", "\n", "        ", "elem_counter", "=", "Counter", "(", "self", ".", "atom_types", ")", "\n", "comp", "=", "Composition", "(", "elem_counter", ")", "\n", "self", ".", "comp_fp", "=", "CompFP", ".", "featurize", "(", "comp", ")", "\n", "try", ":", "\n", "            ", "site_fps", "=", "[", "CrystalNNFP", ".", "featurize", "(", "\n", "self", ".", "structure", ",", "i", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "structure", ")", ")", "]", "\n", "", "except", "Exception", ":", "\n", "# counts crystal as invalid if fingerprint cannot be constructed.", "\n", "            ", "self", ".", "valid", "=", "False", "\n", "self", ".", "comp_fp", "=", "None", "\n", "self", ".", "struct_fp", "=", "None", "\n", "return", "\n", "", "self", ".", "struct_fp", "=", "np", ".", "array", "(", "site_fps", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.RecEval.__init__": [[107, 113], ["pymatgen.analysis.structure_matcher.StructureMatcher", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pred_crys", ",", "gt_crys", ",", "stol", "=", "0.5", ",", "angle_tol", "=", "10", ",", "ltol", "=", "0.3", ")", ":", "\n", "        ", "assert", "len", "(", "pred_crys", ")", "==", "len", "(", "gt_crys", ")", "\n", "self", ".", "matcher", "=", "StructureMatcher", "(", "\n", "stol", "=", "stol", ",", "angle_tol", "=", "angle_tol", ",", "ltol", "=", "ltol", ")", "\n", "self", ".", "preds", "=", "pred_crys", "\n", "self", ".", "gts", "=", "gt_crys", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.RecEval.get_match_rate_and_rms": [[114, 136], ["tqdm.tqdm.tqdm", "numpy.array", "rms_dists[].mean", "range", "numpy.array.append", "sum", "len", "compute_metrics.RecEval.matcher.get_rms_dist", "len", "compute_metrics.RecEval.get_match_rate_and_rms.process_one"], "methods", ["None"], ["", "def", "get_match_rate_and_rms", "(", "self", ")", ":", "\n", "        ", "def", "process_one", "(", "pred", ",", "gt", ",", "is_valid", ")", ":", "\n", "            ", "if", "not", "is_valid", ":", "\n", "                ", "return", "None", "\n", "", "try", ":", "\n", "                ", "rms_dist", "=", "self", ".", "matcher", ".", "get_rms_dist", "(", "\n", "pred", ".", "structure", ",", "gt", ".", "structure", ")", "\n", "rms_dist", "=", "None", "if", "rms_dist", "is", "None", "else", "rms_dist", "[", "0", "]", "\n", "return", "rms_dist", "\n", "", "except", "Exception", ":", "\n", "                ", "return", "None", "\n", "", "", "validity", "=", "[", "c", ".", "valid", "for", "c", "in", "self", ".", "preds", "]", "\n", "\n", "rms_dists", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "self", ".", "preds", ")", ")", ")", ":", "\n", "            ", "rms_dists", ".", "append", "(", "process_one", "(", "\n", "self", ".", "preds", "[", "i", "]", ",", "self", ".", "gts", "[", "i", "]", ",", "validity", "[", "i", "]", ")", ")", "\n", "", "rms_dists", "=", "np", ".", "array", "(", "rms_dists", ")", "\n", "match_rate", "=", "sum", "(", "rms_dists", "!=", "None", ")", "/", "len", "(", "self", ".", "preds", ")", "\n", "mean_rms_dist", "=", "rms_dists", "[", "rms_dists", "!=", "None", "]", ".", "mean", "(", ")", "\n", "return", "{", "'match_rate'", ":", "match_rate", ",", "\n", "'rms_dist'", ":", "mean_rms_dist", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.RecEval.get_metrics": [[137, 139], ["compute_metrics.RecEval.get_match_rate_and_rms"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.RecEval.get_match_rate_and_rms"], ["", "def", "get_metrics", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_match_rate_and_rms", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.__init__": [[143, 157], ["len", "numpy.random.choice", "Exception", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pred_crys", ",", "gt_crys", ",", "n_samples", "=", "1000", ",", "eval_model_name", "=", "None", ")", ":", "\n", "        ", "self", ".", "crys", "=", "pred_crys", "\n", "self", ".", "gt_crys", "=", "gt_crys", "\n", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "eval_model_name", "=", "eval_model_name", "\n", "\n", "valid_crys", "=", "[", "c", "for", "c", "in", "pred_crys", "if", "c", ".", "valid", "]", "\n", "if", "len", "(", "valid_crys", ")", ">=", "n_samples", ":", "\n", "            ", "sampled_indices", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "valid_crys", ")", ",", "n_samples", ",", "replace", "=", "False", ")", "\n", "self", ".", "valid_samples", "=", "[", "valid_crys", "[", "i", "]", "for", "i", "in", "sampled_indices", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "f'not enough valid crystals in the predicted set: {len(valid_crys)}/{n_samples}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_validity": [[158, 165], ["numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "", "def", "get_validity", "(", "self", ")", ":", "\n", "        ", "comp_valid", "=", "np", ".", "array", "(", "[", "c", ".", "comp_valid", "for", "c", "in", "self", ".", "crys", "]", ")", ".", "mean", "(", ")", "\n", "struct_valid", "=", "np", ".", "array", "(", "[", "c", ".", "struct_valid", "for", "c", "in", "self", ".", "crys", "]", ")", ".", "mean", "(", ")", "\n", "valid", "=", "np", ".", "array", "(", "[", "c", ".", "valid", "for", "c", "in", "self", ".", "crys", "]", ")", ".", "mean", "(", ")", "\n", "return", "{", "'comp_valid'", ":", "comp_valid", ",", "\n", "'struct_valid'", ":", "struct_valid", ",", "\n", "'valid'", ":", "valid", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_comp_diversity": [[166, 171], ["eval_utils.CompScaler.transform", "eval_utils.get_fp_pdist"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.transform", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.get_fp_pdist"], ["", "def", "get_comp_diversity", "(", "self", ")", ":", "\n", "        ", "comp_fps", "=", "[", "c", ".", "comp_fp", "for", "c", "in", "self", ".", "valid_samples", "]", "\n", "comp_fps", "=", "CompScaler", ".", "transform", "(", "comp_fps", ")", "\n", "comp_div", "=", "get_fp_pdist", "(", "comp_fps", ")", "\n", "return", "{", "'comp_div'", ":", "comp_div", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_struct_diversity": [[172, 174], ["eval_utils.get_fp_pdist"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.get_fp_pdist"], ["", "def", "get_struct_diversity", "(", "self", ")", ":", "\n", "        ", "return", "{", "'struct_div'", ":", "get_fp_pdist", "(", "[", "c", ".", "struct_fp", "for", "c", "in", "self", ".", "valid_samples", "]", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_density_wdist": [[175, 180], ["scipy.stats.wasserstein_distance"], "methods", ["None"], ["", "def", "get_density_wdist", "(", "self", ")", ":", "\n", "        ", "pred_densities", "=", "[", "c", ".", "structure", ".", "density", "for", "c", "in", "self", ".", "valid_samples", "]", "\n", "gt_densities", "=", "[", "c", ".", "structure", ".", "density", "for", "c", "in", "self", ".", "gt_crys", "]", "\n", "wdist_density", "=", "wasserstein_distance", "(", "pred_densities", ",", "gt_densities", ")", "\n", "return", "{", "'wdist_density'", ":", "wdist_density", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_num_elem_wdist": [[181, 187], ["scipy.stats.wasserstein_distance", "len", "len", "set", "set"], "methods", ["None"], ["", "def", "get_num_elem_wdist", "(", "self", ")", ":", "\n", "        ", "pred_nelems", "=", "[", "len", "(", "set", "(", "c", ".", "structure", ".", "species", ")", ")", "\n", "for", "c", "in", "self", ".", "valid_samples", "]", "\n", "gt_nelems", "=", "[", "len", "(", "set", "(", "c", ".", "structure", ".", "species", ")", ")", "for", "c", "in", "self", ".", "gt_crys", "]", "\n", "wdist_num_elems", "=", "wasserstein_distance", "(", "pred_nelems", ",", "gt_nelems", ")", "\n", "return", "{", "'wdist_num_elems'", ":", "wdist_num_elems", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_prop_wdist": [[188, 198], ["eval_utils.prop_model_eval", "eval_utils.prop_model_eval", "scipy.stats.wasserstein_distance"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.prop_model_eval", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.prop_model_eval"], ["", "def", "get_prop_wdist", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "eval_model_name", "is", "not", "None", ":", "\n", "            ", "pred_props", "=", "prop_model_eval", "(", "self", ".", "eval_model_name", ",", "[", "\n", "c", ".", "dict", "for", "c", "in", "self", ".", "valid_samples", "]", ")", "\n", "gt_props", "=", "prop_model_eval", "(", "self", ".", "eval_model_name", ",", "[", "\n", "c", ".", "dict", "for", "c", "in", "self", ".", "gt_crys", "]", ")", "\n", "wdist_prop", "=", "wasserstein_distance", "(", "pred_props", ",", "gt_props", ")", "\n", "return", "{", "'wdist_prop'", ":", "wdist_prop", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "'wdist_prop'", ":", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_coverage": [[199, 206], ["eval_utils.compute_cov"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.compute_cov"], ["", "", "def", "get_coverage", "(", "self", ")", ":", "\n", "        ", "cutoff_dict", "=", "COV_Cutoffs", "[", "self", ".", "eval_model_name", "]", "\n", "(", "cov_metrics_dict", ",", "combined_dist_dict", ")", "=", "compute_cov", "(", "\n", "self", ".", "crys", ",", "self", ".", "gt_crys", ",", "\n", "struc_cutoff", "=", "cutoff_dict", "[", "'struc'", "]", ",", "\n", "comp_cutoff", "=", "cutoff_dict", "[", "'comp'", "]", ")", "\n", "return", "cov_metrics_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_metrics": [[207, 218], ["metrics.update", "metrics.update", "metrics.update", "metrics.update", "metrics.update", "metrics.update", "print", "metrics.update", "compute_metrics.GenEval.get_validity", "compute_metrics.GenEval.get_comp_diversity", "compute_metrics.GenEval.get_struct_diversity", "compute_metrics.GenEval.get_density_wdist", "compute_metrics.GenEval.get_num_elem_wdist", "compute_metrics.GenEval.get_prop_wdist", "compute_metrics.GenEval.get_coverage"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_validity", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_comp_diversity", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_struct_diversity", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_density_wdist", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_num_elem_wdist", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_prop_wdist", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.GenEval.get_coverage"], ["", "def", "get_metrics", "(", "self", ")", ":", "\n", "        ", "metrics", "=", "{", "}", "\n", "metrics", ".", "update", "(", "self", ".", "get_validity", "(", ")", ")", "\n", "metrics", ".", "update", "(", "self", ".", "get_comp_diversity", "(", ")", ")", "\n", "metrics", ".", "update", "(", "self", ".", "get_struct_diversity", "(", ")", ")", "\n", "metrics", ".", "update", "(", "self", ".", "get_density_wdist", "(", ")", ")", "\n", "metrics", ".", "update", "(", "self", ".", "get_num_elem_wdist", "(", ")", ")", "\n", "metrics", ".", "update", "(", "self", ".", "get_prop_wdist", "(", ")", ")", "\n", "print", "(", "metrics", ")", "\n", "metrics", ".", "update", "(", "self", ".", "get_coverage", "(", ")", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.OptEval.__init__": [[222, 234], ["int", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crys", ",", "num_opt", "=", "100", ",", "eval_model_name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        crys is a list of length (<step_opt> * <num_opt>),\n        where <num_opt> is the number of different initialization for optimizing crystals,\n        and <step_opt> is the number of saved crystals for each intialzation.\n        default to minimize the property.\n        \"\"\"", "\n", "step_opt", "=", "int", "(", "len", "(", "crys", ")", "/", "num_opt", ")", "\n", "self", ".", "crys", "=", "crys", "\n", "self", ".", "step_opt", "=", "step_opt", "\n", "self", ".", "num_opt", "=", "num_opt", "\n", "self", ".", "eval_model_name", "=", "eval_model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.OptEval.get_success_rate": [[235, 253], ["numpy.array", "valid_indices.reshape.reshape.reshape", "valid_indices.reshape.reshape.nonzero", "numpy.ones", "len", "eval_utils.prop_model_eval", "props.min"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.prop_model_eval"], ["", "def", "get_success_rate", "(", "self", ")", ":", "\n", "        ", "valid_indices", "=", "np", ".", "array", "(", "[", "c", ".", "valid", "for", "c", "in", "self", ".", "crys", "]", ")", "\n", "valid_indices", "=", "valid_indices", ".", "reshape", "(", "self", ".", "step_opt", ",", "self", ".", "num_opt", ")", "\n", "valid_x", ",", "valid_y", "=", "valid_indices", ".", "nonzero", "(", ")", "\n", "props", "=", "np", ".", "ones", "(", "[", "self", ".", "step_opt", ",", "self", ".", "num_opt", "]", ")", "*", "np", ".", "inf", "\n", "valid_crys", "=", "[", "c", "for", "c", "in", "self", ".", "crys", "if", "c", ".", "valid", "]", "\n", "if", "len", "(", "valid_crys", ")", "==", "0", ":", "\n", "            ", "sr_5", ",", "sr_10", ",", "sr_15", "=", "0", ",", "0", ",", "0", "\n", "", "else", ":", "\n", "            ", "pred_props", "=", "prop_model_eval", "(", "self", ".", "eval_model_name", ",", "[", "\n", "c", ".", "dict", "for", "c", "in", "valid_crys", "]", ")", "\n", "percentiles", "=", "Percentiles", "[", "self", ".", "eval_model_name", "]", "\n", "props", "[", "valid_x", ",", "valid_y", "]", "=", "pred_props", "\n", "best_props", "=", "props", ".", "min", "(", "axis", "=", "0", ")", "\n", "sr_5", "=", "(", "best_props", "<=", "percentiles", "[", "0", "]", ")", ".", "mean", "(", ")", "\n", "sr_10", "=", "(", "best_props", "<=", "percentiles", "[", "1", "]", ")", ".", "mean", "(", ")", "\n", "sr_15", "=", "(", "best_props", "<=", "percentiles", "[", "2", "]", ")", ".", "mean", "(", ")", "\n", "", "return", "{", "'SR5'", ":", "sr_5", ",", "'SR10'", ":", "sr_10", ",", "'SR15'", ":", "sr_15", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.OptEval.get_metrics": [[254, 256], ["compute_metrics.OptEval.get_success_rate"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.OptEval.get_success_rate"], ["", "def", "get_metrics", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_success_rate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.get_file_paths": [[258, 265], ["os.path.join"], "function", ["None"], ["", "", "def", "get_file_paths", "(", "root_path", ",", "task", ",", "label", "=", "''", ",", "suffix", "=", "'pt'", ")", ":", "\n", "    ", "if", "args", ".", "label", "==", "''", ":", "\n", "        ", "out_name", "=", "f'eval_{task}.{suffix}'", "\n", "", "else", ":", "\n", "        ", "out_name", "=", "f'eval_{task}_{label}.{suffix}'", "\n", "", "out_name", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "out_name", ")", "\n", "return", "out_name", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.get_crystal_array_list": [[267, 290], ["eval_utils.load_data", "eval_utils.get_crystals_list", "isinstance", "eval_utils.get_crystals_list", "eval_utils.get_crystals_list"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.load_data", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.get_crystals_list", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.get_crystals_list", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.get_crystals_list"], ["", "def", "get_crystal_array_list", "(", "file_path", ",", "batch_idx", "=", "0", ")", ":", "\n", "    ", "data", "=", "load_data", "(", "file_path", ")", "\n", "crys_array_list", "=", "get_crystals_list", "(", "\n", "data", "[", "'frac_coords'", "]", "[", "batch_idx", "]", ",", "\n", "data", "[", "'atom_types'", "]", "[", "batch_idx", "]", ",", "\n", "data", "[", "'lengths'", "]", "[", "batch_idx", "]", ",", "\n", "data", "[", "'angles'", "]", "[", "batch_idx", "]", ",", "\n", "data", "[", "'num_atoms'", "]", "[", "batch_idx", "]", ")", "\n", "\n", "if", "'input_data_batch'", "in", "data", ":", "\n", "        ", "batch", "=", "data", "[", "'input_data_batch'", "]", "\n", "if", "isinstance", "(", "batch", ",", "dict", ")", ":", "\n", "            ", "true_crystal_array_list", "=", "get_crystals_list", "(", "\n", "batch", "[", "'frac_coords'", "]", ",", "batch", "[", "'atom_types'", "]", ",", "batch", "[", "'lengths'", "]", ",", "\n", "batch", "[", "'angles'", "]", ",", "batch", "[", "'num_atoms'", "]", ")", "\n", "", "else", ":", "\n", "            ", "true_crystal_array_list", "=", "get_crystals_list", "(", "\n", "batch", ".", "frac_coords", ",", "batch", ".", "atom_types", ",", "batch", ".", "lengths", ",", "\n", "batch", ".", "angles", ",", "batch", ".", "num_atoms", ")", "\n", "", "", "else", ":", "\n", "        ", "true_crystal_array_list", "=", "None", "\n", "\n", "", "return", "crys_array_list", ",", "true_crystal_array_list", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.main": [[292, 356], ["eval_utils.load_config", "print", "os.path.join", "pathlib.Path().exists", "compute_metrics.get_file_paths", "compute_metrics.get_crystal_array_list", "p_tqdm.p_map", "p_tqdm.p_map", "compute_metrics.RecEval", "compute_metrics.RecEval.get_metrics", "all_metrics.update", "compute_metrics.get_file_paths", "compute_metrics.get_file_paths", "compute_metrics.get_crystal_array_list", "p_tqdm.p_map", "compute_metrics.GenEval", "compute_metrics.GenEval.get_metrics", "all_metrics.update", "compute_metrics.get_file_paths", "compute_metrics.get_crystal_array_list", "p_tqdm.p_map", "compute_metrics.OptEval", "compute_metrics.OptEval.get_metrics", "all_metrics.update", "isinstance", "compute_metrics.get_crystal_array_list", "p_tqdm.p_map", "pathlib.Path", "open", "json.load", "isinstance", "open", "json.dump", "compute_metrics.Crystal", "compute_metrics.Crystal", "compute_metrics.Crystal", "compute_metrics.Crystal", "json.load.update", "open", "json.dump", "compute_metrics.Crystal", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.scripts.eval_utils.load_config", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.get_file_paths", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.get_crystal_array_list", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.OptEval.get_metrics", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.get_file_paths", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.get_file_paths", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.get_crystal_array_list", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.OptEval.get_metrics", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.get_file_paths", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.get_crystal_array_list", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.OptEval.get_metrics", "home.repos.pwc.inspect_result.txie-93_cdvae.scripts.compute_metrics.get_crystal_array_list"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "all_metrics", "=", "{", "}", "\n", "\n", "cfg", "=", "load_config", "(", "args", ".", "root_path", ")", "\n", "eval_model_name", "=", "cfg", ".", "data", ".", "eval_model_name", "\n", "\n", "if", "'recon'", "in", "args", ".", "tasks", ":", "\n", "        ", "recon_file_path", "=", "get_file_paths", "(", "args", ".", "root_path", ",", "'recon'", ",", "args", ".", "label", ")", "\n", "crys_array_list", ",", "true_crystal_array_list", "=", "get_crystal_array_list", "(", "\n", "recon_file_path", ")", "\n", "pred_crys", "=", "p_map", "(", "lambda", "x", ":", "Crystal", "(", "x", ")", ",", "crys_array_list", ")", "\n", "gt_crys", "=", "p_map", "(", "lambda", "x", ":", "Crystal", "(", "x", ")", ",", "true_crystal_array_list", ")", "\n", "\n", "rec_evaluator", "=", "RecEval", "(", "pred_crys", ",", "gt_crys", ")", "\n", "recon_metrics", "=", "rec_evaluator", ".", "get_metrics", "(", ")", "\n", "all_metrics", ".", "update", "(", "recon_metrics", ")", "\n", "\n", "", "if", "'gen'", "in", "args", ".", "tasks", ":", "\n", "        ", "gen_file_path", "=", "get_file_paths", "(", "args", ".", "root_path", ",", "'gen'", ",", "args", ".", "label", ")", "\n", "recon_file_path", "=", "get_file_paths", "(", "args", ".", "root_path", ",", "'recon'", ",", "args", ".", "label", ")", "\n", "crys_array_list", ",", "_", "=", "get_crystal_array_list", "(", "gen_file_path", ")", "\n", "gen_crys", "=", "p_map", "(", "lambda", "x", ":", "Crystal", "(", "x", ")", ",", "crys_array_list", ")", "\n", "if", "'recon'", "not", "in", "args", ".", "tasks", ":", "\n", "            ", "_", ",", "true_crystal_array_list", "=", "get_crystal_array_list", "(", "\n", "recon_file_path", ")", "\n", "gt_crys", "=", "p_map", "(", "lambda", "x", ":", "Crystal", "(", "x", ")", ",", "true_crystal_array_list", ")", "\n", "\n", "", "gen_evaluator", "=", "GenEval", "(", "\n", "gen_crys", ",", "gt_crys", ",", "eval_model_name", "=", "eval_model_name", ")", "\n", "gen_metrics", "=", "gen_evaluator", ".", "get_metrics", "(", ")", "\n", "all_metrics", ".", "update", "(", "gen_metrics", ")", "\n", "\n", "", "if", "'opt'", "in", "args", ".", "tasks", ":", "\n", "        ", "opt_file_path", "=", "get_file_paths", "(", "args", ".", "root_path", ",", "'opt'", ",", "args", ".", "label", ")", "\n", "crys_array_list", ",", "_", "=", "get_crystal_array_list", "(", "opt_file_path", ")", "\n", "opt_crys", "=", "p_map", "(", "lambda", "x", ":", "Crystal", "(", "x", ")", ",", "crys_array_list", ")", "\n", "\n", "opt_evaluator", "=", "OptEval", "(", "opt_crys", ",", "eval_model_name", "=", "eval_model_name", ")", "\n", "opt_metrics", "=", "opt_evaluator", ".", "get_metrics", "(", ")", "\n", "all_metrics", ".", "update", "(", "opt_metrics", ")", "\n", "\n", "", "print", "(", "all_metrics", ")", "\n", "\n", "if", "args", ".", "label", "==", "''", ":", "\n", "        ", "metrics_out_file", "=", "'eval_metrics.json'", "\n", "", "else", ":", "\n", "        ", "metrics_out_file", "=", "f'eval_metrics_{args.label}.json'", "\n", "", "metrics_out_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root_path", ",", "metrics_out_file", ")", "\n", "\n", "# only overwrite metrics computed in the new run.", "\n", "if", "Path", "(", "metrics_out_file", ")", ".", "exists", "(", ")", ":", "\n", "        ", "with", "open", "(", "metrics_out_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "written_metrics", "=", "json", ".", "load", "(", "f", ")", "\n", "if", "isinstance", "(", "written_metrics", ",", "dict", ")", ":", "\n", "                ", "written_metrics", ".", "update", "(", "all_metrics", ")", "\n", "", "else", ":", "\n", "                ", "with", "open", "(", "metrics_out_file", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "json", ".", "dump", "(", "all_metrics", ",", "f", ")", "\n", "", "", "", "if", "isinstance", "(", "written_metrics", ",", "dict", ")", ":", "\n", "            ", "with", "open", "(", "metrics_out_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "written_metrics", ",", "f", ")", "\n", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "metrics_out_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "all_metrics", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.decoder.GemNetTDecoder.__init__": [[20, 44], ["torch.Module.__init__", "cdvae.pl_modules.gemnet.gemnet.GemNetT", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "hidden_dim", "=", "128", ",", "\n", "latent_dim", "=", "256", ",", "\n", "max_neighbors", "=", "20", ",", "\n", "radius", "=", "6.", ",", "\n", "scale_file", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GemNetTDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cutoff", "=", "radius", "\n", "self", ".", "max_num_neighbors", "=", "max_neighbors", "\n", "\n", "self", ".", "gemnet", "=", "GemNetT", "(", "\n", "num_targets", "=", "1", ",", "\n", "latent_dim", "=", "latent_dim", ",", "\n", "emb_size_atom", "=", "hidden_dim", ",", "\n", "emb_size_edge", "=", "hidden_dim", ",", "\n", "regress_forces", "=", "True", ",", "\n", "cutoff", "=", "self", ".", "cutoff", ",", "\n", "max_neighbors", "=", "self", ".", "max_num_neighbors", ",", "\n", "otf_graph", "=", "True", ",", "\n", "scale_file", "=", "scale_file", ",", "\n", ")", "\n", "self", ".", "fc_atom", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "MAX_ATOMIC_NUM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.decoder.GemNetTDecoder.forward": [[45, 73], ["decoder.GemNetTDecoder.gemnet", "decoder.GemNetTDecoder.fc_atom"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "pred_frac_coords", ",", "pred_atom_types", ",", "num_atoms", ",", "\n", "lengths", ",", "angles", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            z: (N_cryst, num_latent)\n            pred_frac_coords: (N_atoms, 3)\n            pred_atom_types: (N_atoms, ), need to use atomic number e.g. H = 1\n            num_atoms: (N_cryst,)\n            lengths: (N_cryst, 3)\n            angles: (N_cryst, 3)\n        returns:\n            atom_frac_coords: (N_atoms, 3)\n            atom_types: (N_atoms, MAX_ATOMIC_NUM)\n        \"\"\"", "\n", "# (num_atoms, hidden_dim) (num_crysts, 3)", "\n", "h", ",", "pred_cart_coord_diff", "=", "self", ".", "gemnet", "(", "\n", "z", "=", "z", ",", "\n", "frac_coords", "=", "pred_frac_coords", ",", "\n", "atom_types", "=", "pred_atom_types", ",", "\n", "num_atoms", "=", "num_atoms", ",", "\n", "lengths", "=", "lengths", ",", "\n", "angles", "=", "angles", ",", "\n", "edge_index", "=", "None", ",", "\n", "to_jimages", "=", "None", ",", "\n", "num_bonds", "=", "None", ",", "\n", ")", "\n", "pred_atom_types", "=", "self", ".", "fc_atom", "(", "h", ")", "\n", "return", "pred_cart_coord_diff", ",", "pred_atom_types", "\n", "", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.decoder.build_mlp": [[9, 15], ["range", "torch.Sequential", "torch.Linear", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU"], "function", ["None"], ["def", "build_mlp", "(", "in_dim", ",", "hidden_dim", ",", "fc_num_layers", ",", "out_dim", ")", ":", "\n", "    ", "mods", "=", "[", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "for", "i", "in", "range", "(", "fc_num_layers", "-", "1", ")", ":", "\n", "        ", "mods", "+=", "[", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "", "mods", "+=", "[", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "mods", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.BaseModule.__init__": [[30, 34], ["pytorch_lightning.LightningModule.__init__", "model.BaseModule.save_hyperparameters"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# populate self.hparams with args and kwargs automagically!", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.BaseModule.configure_optimizers": [[35, 45], ["hydra.utils.instantiate", "hydra.utils.instantiate", "model.BaseModule.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "opt", "=", "hydra", ".", "utils", ".", "instantiate", "(", "\n", "self", ".", "hparams", ".", "optim", ".", "optimizer", ",", "params", "=", "self", ".", "parameters", "(", ")", ",", "_convert_", "=", "\"partial\"", "\n", ")", "\n", "if", "not", "self", ".", "hparams", ".", "optim", ".", "use_lr_scheduler", ":", "\n", "            ", "return", "[", "opt", "]", "\n", "", "scheduler", "=", "hydra", ".", "utils", ".", "instantiate", "(", "\n", "self", ".", "hparams", ".", "optim", ".", "lr_scheduler", ",", "optimizer", "=", "opt", "\n", ")", "\n", "return", "{", "\"optimizer\"", ":", "opt", ",", "\"lr_scheduler\"", ":", "scheduler", ",", "\"monitor\"", ":", "\"val_loss\"", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CrystGNN_Supervise.__init__": [[52, 56], ["model.BaseModule.__init__", "hydra.utils.instantiate"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "encoder", "=", "hydra", ".", "utils", ".", "instantiate", "(", "self", ".", "hparams", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CrystGNN_Supervise.forward": [[57, 60], ["model.CrystGNN_Supervise.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "preds", "=", "self", ".", "encoder", "(", "batch", ")", "# shape (N, 1)", "\n", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CrystGNN_Supervise.training_step": [[61, 73], ["model.CrystGNN_Supervise.", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "model.CrystGNN_Supervise.log_dict"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "batch", ":", "Any", ",", "batch_idx", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "preds", "=", "self", "(", "batch", ")", "\n", "\n", "loss", "=", "F", ".", "mse_loss", "(", "preds", ",", "batch", ".", "y", ")", "\n", "self", ".", "log_dict", "(", "\n", "{", "'train_loss'", ":", "loss", "}", ",", "\n", "on_step", "=", "True", ",", "\n", "on_epoch", "=", "True", ",", "\n", "prog_bar", "=", "True", ",", "\n", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CrystGNN_Supervise.validation_step": [[74, 87], ["model.CrystGNN_Supervise.", "model.CrystGNN_Supervise.compute_stats", "model.CrystGNN_Supervise.log_dict"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.compute_stats"], ["", "def", "validation_step", "(", "self", ",", "batch", ":", "Any", ",", "batch_idx", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "preds", "=", "self", "(", "batch", ")", "\n", "\n", "log_dict", ",", "loss", "=", "self", ".", "compute_stats", "(", "batch", ",", "preds", ",", "prefix", "=", "'val'", ")", "\n", "\n", "self", ".", "log_dict", "(", "\n", "log_dict", ",", "\n", "on_step", "=", "False", ",", "\n", "on_epoch", "=", "True", ",", "\n", "prog_bar", "=", "True", ",", "\n", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CrystGNN_Supervise.test_step": [[88, 98], ["model.CrystGNN_Supervise.", "model.CrystGNN_Supervise.compute_stats", "model.CrystGNN_Supervise.log_dict"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.compute_stats"], ["", "def", "test_step", "(", "self", ",", "batch", ":", "Any", ",", "batch_idx", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "preds", "=", "self", "(", "batch", ")", "\n", "\n", "log_dict", ",", "loss", "=", "self", ".", "compute_stats", "(", "batch", ",", "preds", ",", "prefix", "=", "'test'", ")", "\n", "\n", "self", ".", "log_dict", "(", "\n", "log_dict", ",", "\n", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CrystGNN_Supervise.compute_stats": [[99, 134], ["torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "model.CrystGNN_Supervise.scaler.match_device", "model.CrystGNN_Supervise.scaler.inverse_transform", "model.CrystGNN_Supervise.scaler.inverse_transform", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "cdvae.common.data_utils.mard", "cdvae.common.data_utils.mard", "cdvae.common.data_utils.lengths_angles_to_volume", "cdvae.common.data_utils.lengths_angles_to_volume", "cdvae.common.data_utils.mard", "log_dict.update", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "batch.num_atoms.view().float", "batch.num_atoms.view"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.match_device", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.mard", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.mard", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lengths_angles_to_volume", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lengths_angles_to_volume", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.mard"], ["", "def", "compute_stats", "(", "self", ",", "batch", ",", "preds", ",", "prefix", ")", ":", "\n", "        ", "loss", "=", "F", ".", "mse_loss", "(", "preds", ",", "batch", ".", "y", ")", "\n", "self", ".", "scaler", ".", "match_device", "(", "preds", ")", "\n", "scaled_preds", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "preds", ")", "\n", "scaled_y", "=", "self", ".", "scaler", ".", "inverse_transform", "(", "batch", ".", "y", ")", "\n", "mae", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "scaled_preds", "-", "scaled_y", ")", ")", "\n", "\n", "log_dict", "=", "{", "\n", "f'{prefix}_loss'", ":", "loss", ",", "\n", "f'{prefix}_mae'", ":", "mae", ",", "\n", "}", "\n", "\n", "if", "self", ".", "hparams", ".", "data", ".", "prop", "==", "'scaled_lattice'", ":", "\n", "            ", "pred_lengths", "=", "scaled_preds", "[", ":", ",", ":", "3", "]", "\n", "pred_angles", "=", "scaled_preds", "[", ":", ",", "3", ":", "]", "\n", "if", "self", ".", "hparams", ".", "data", ".", "lattice_scale_method", "==", "'scale_length'", ":", "\n", "                ", "pred_lengths", "=", "pred_lengths", "*", "batch", ".", "num_atoms", ".", "view", "(", "-", "1", ",", "1", ")", ".", "float", "(", ")", "**", "(", "1", "/", "3", ")", "\n", "", "lengths_mae", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "pred_lengths", "-", "batch", ".", "lengths", ")", ")", "\n", "angles_mae", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "pred_angles", "-", "batch", ".", "angles", ")", ")", "\n", "lengths_mard", "=", "mard", "(", "batch", ".", "lengths", ",", "pred_lengths", ")", "\n", "angles_mard", "=", "mard", "(", "batch", ".", "angles", ",", "pred_angles", ")", "\n", "\n", "pred_volumes", "=", "lengths_angles_to_volume", "(", "pred_lengths", ",", "pred_angles", ")", "\n", "true_volumes", "=", "lengths_angles_to_volume", "(", "\n", "batch", ".", "lengths", ",", "batch", ".", "angles", ")", "\n", "volumes_mard", "=", "mard", "(", "true_volumes", ",", "pred_volumes", ")", "\n", "log_dict", ".", "update", "(", "{", "\n", "f'{prefix}_lengths_mae'", ":", "lengths_mae", ",", "\n", "f'{prefix}_angles_mae'", ":", "angles_mae", ",", "\n", "f'{prefix}_lengths_mard'", ":", "lengths_mard", ",", "\n", "f'{prefix}_angles_mard'", ":", "angles_mard", ",", "\n", "f'{prefix}_volumes_mard'", ":", "volumes_mard", ",", "\n", "}", ")", "\n", "", "return", "log_dict", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.__init__": [[137, 181], ["model.BaseModule.__init__", "hydra.utils.instantiate", "hydra.utils.instantiate", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.build_mlp", "model.build_mlp", "model.build_mlp", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "model.build_mlp", "numpy.exp", "numpy.exp", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.linspace", "numpy.linspace", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.build_mlp", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.build_mlp", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.build_mlp", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.build_mlp"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "encoder", "=", "hydra", ".", "utils", ".", "instantiate", "(", "\n", "self", ".", "hparams", ".", "encoder", ",", "num_targets", "=", "self", ".", "hparams", ".", "latent_dim", ")", "\n", "self", ".", "decoder", "=", "hydra", ".", "utils", ".", "instantiate", "(", "self", ".", "hparams", ".", "decoder", ")", "\n", "\n", "self", ".", "fc_mu", "=", "nn", ".", "Linear", "(", "self", ".", "hparams", ".", "latent_dim", ",", "\n", "self", ".", "hparams", ".", "latent_dim", ")", "\n", "self", ".", "fc_var", "=", "nn", ".", "Linear", "(", "self", ".", "hparams", ".", "latent_dim", ",", "\n", "self", ".", "hparams", ".", "latent_dim", ")", "\n", "\n", "self", ".", "fc_num_atoms", "=", "build_mlp", "(", "self", ".", "hparams", ".", "latent_dim", ",", "self", ".", "hparams", ".", "hidden_dim", ",", "\n", "self", ".", "hparams", ".", "fc_num_layers", ",", "self", ".", "hparams", ".", "max_atoms", "+", "1", ")", "\n", "self", ".", "fc_lattice", "=", "build_mlp", "(", "self", ".", "hparams", ".", "latent_dim", ",", "self", ".", "hparams", ".", "hidden_dim", ",", "\n", "self", ".", "hparams", ".", "fc_num_layers", ",", "6", ")", "\n", "self", ".", "fc_composition", "=", "build_mlp", "(", "self", ".", "hparams", ".", "latent_dim", ",", "self", ".", "hparams", ".", "hidden_dim", ",", "\n", "self", ".", "hparams", ".", "fc_num_layers", ",", "MAX_ATOMIC_NUM", ")", "\n", "# for property prediction.", "\n", "if", "self", ".", "hparams", ".", "predict_property", ":", "\n", "            ", "self", ".", "fc_property", "=", "build_mlp", "(", "self", ".", "hparams", ".", "latent_dim", ",", "self", ".", "hparams", ".", "hidden_dim", ",", "\n", "self", ".", "hparams", ".", "fc_num_layers", ",", "1", ")", "\n", "\n", "", "sigmas", "=", "torch", ".", "tensor", "(", "np", ".", "exp", "(", "np", ".", "linspace", "(", "\n", "np", ".", "log", "(", "self", ".", "hparams", ".", "sigma_begin", ")", ",", "\n", "np", ".", "log", "(", "self", ".", "hparams", ".", "sigma_end", ")", ",", "\n", "self", ".", "hparams", ".", "num_noise_level", ")", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "self", ".", "sigmas", "=", "nn", ".", "Parameter", "(", "sigmas", ",", "requires_grad", "=", "False", ")", "\n", "\n", "type_sigmas", "=", "torch", ".", "tensor", "(", "np", ".", "exp", "(", "np", ".", "linspace", "(", "\n", "np", ".", "log", "(", "self", ".", "hparams", ".", "type_sigma_begin", ")", ",", "\n", "np", ".", "log", "(", "self", ".", "hparams", ".", "type_sigma_end", ")", ",", "\n", "self", ".", "hparams", ".", "num_noise_level", ")", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "self", ".", "type_sigmas", "=", "nn", ".", "Parameter", "(", "type_sigmas", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "embedding", "=", "torch", ".", "zeros", "(", "100", ",", "92", ")", "\n", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "            ", "self", ".", "embedding", "[", "i", "]", "=", "torch", ".", "tensor", "(", "KHOT_EMBEDDINGS", "[", "i", "+", "1", "]", ")", "\n", "\n", "# obtain from datamodule.", "\n", "", "self", ".", "lattice_scaler", "=", "None", "\n", "self", ".", "scaler", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.reparameterize": [[182, 193], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "\"\"\"\n        Reparameterization trick to sample from N(mu, var) from\n        N(0,1).\n        :param mu: (Tensor) Mean of the latent Gaussian [B x D]\n        :param logvar: (Tensor) Standard deviation of the latent Gaussian [B x D]\n        :return: (Tensor) [B x D]\n        \"\"\"", "\n", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "return", "eps", "*", "std", "+", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.encode": [[194, 203], ["model.CDVAE.encoder", "model.CDVAE.fc_mu", "model.CDVAE.fc_var", "model.CDVAE.reparameterize"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.reparameterize"], ["", "def", "encode", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        encode crystal structures to latents.\n        \"\"\"", "\n", "hidden", "=", "self", ".", "encoder", "(", "batch", ")", "\n", "mu", "=", "self", ".", "fc_mu", "(", "hidden", ")", "\n", "log_var", "=", "self", ".", "fc_var", "(", "hidden", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "log_var", ")", "\n", "return", "mu", ",", "log_var", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.decode_stats": [[204, 224], ["model.CDVAE.predict_num_atoms", "model.CDVAE.predict_lattice", "model.CDVAE.predict_composition", "model.CDVAE.predict_num_atoms().argmax", "model.CDVAE.predict_lattice", "model.CDVAE.predict_composition", "model.CDVAE.predict_num_atoms"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.predict_num_atoms", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.predict_lattice", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.predict_composition", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.predict_lattice", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.predict_composition", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.predict_num_atoms"], ["", "def", "decode_stats", "(", "self", ",", "z", ",", "gt_num_atoms", "=", "None", ",", "gt_lengths", "=", "None", ",", "gt_angles", "=", "None", ",", "\n", "teacher_forcing", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        decode key stats from latent embeddings.\n        batch is input during training for teach-forcing.\n        \"\"\"", "\n", "if", "gt_num_atoms", "is", "not", "None", ":", "\n", "            ", "num_atoms", "=", "self", ".", "predict_num_atoms", "(", "z", ")", "\n", "lengths_and_angles", ",", "lengths", ",", "angles", "=", "(", "\n", "self", ".", "predict_lattice", "(", "z", ",", "gt_num_atoms", ")", ")", "\n", "composition_per_atom", "=", "self", ".", "predict_composition", "(", "z", ",", "gt_num_atoms", ")", "\n", "if", "self", ".", "hparams", ".", "teacher_forcing_lattice", "and", "teacher_forcing", ":", "\n", "                ", "lengths", "=", "gt_lengths", "\n", "angles", "=", "gt_angles", "\n", "", "", "else", ":", "\n", "            ", "num_atoms", "=", "self", ".", "predict_num_atoms", "(", "z", ")", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "lengths_and_angles", ",", "lengths", ",", "angles", "=", "(", "\n", "self", ".", "predict_lattice", "(", "z", ",", "num_atoms", ")", ")", "\n", "composition_per_atom", "=", "self", ".", "predict_composition", "(", "z", ",", "num_atoms", ")", "\n", "", "return", "num_atoms", ",", "lengths_and_angles", ",", "lengths", ",", "angles", ",", "composition_per_atom", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.langevin_dynamics": [[225, 303], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.CDVAE.decode_stats", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "tqdm.tqdm.tqdm", "model.CDVAE.sample_composition", "range", "output_dict.update", "num_atoms.sum", "model.CDVAE.sigmas.size", "model.CDVAE.decoder", "cdvae.common.data_utils.frac_to_cart_coords", "cdvae.common.data_utils.cart_to_frac_coords", "dict", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "all_frac_coords.append", "all_pred_cart_coord_diff.append", "all_noise_cart.append", "all_atom_types.append", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.decode_stats", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.sample_composition", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.frac_to_cart_coords", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.cart_to_frac_coords"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "langevin_dynamics", "(", "self", ",", "z", ",", "ld_kwargs", ",", "gt_num_atoms", "=", "None", ",", "gt_atom_types", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        decode crystral structure from latent embeddings.\n        ld_kwargs: args for doing annealed langevin dynamics sampling:\n            n_step_each:  number of steps for each sigma level.\n            step_lr:      step size param.\n            min_sigma:    minimum sigma to use in annealed langevin dynamics.\n            save_traj:    if <True>, save the entire LD trajectory.\n            disable_bar:  disable the progress bar of langevin dynamics.\n        gt_num_atoms: if not <None>, use the ground truth number of atoms.\n        gt_atom_types: if not <None>, use the ground truth atom types.\n        \"\"\"", "\n", "if", "ld_kwargs", ".", "save_traj", ":", "\n", "            ", "all_frac_coords", "=", "[", "]", "\n", "all_pred_cart_coord_diff", "=", "[", "]", "\n", "all_noise_cart", "=", "[", "]", "\n", "all_atom_types", "=", "[", "]", "\n", "\n", "# obtain key stats.", "\n", "", "num_atoms", ",", "_", ",", "lengths", ",", "angles", ",", "composition_per_atom", "=", "self", ".", "decode_stats", "(", "\n", "z", ",", "gt_num_atoms", ")", "\n", "if", "gt_num_atoms", "is", "not", "None", ":", "\n", "            ", "num_atoms", "=", "gt_num_atoms", "\n", "\n", "# obtain atom types.", "\n", "", "composition_per_atom", "=", "F", ".", "softmax", "(", "composition_per_atom", ",", "dim", "=", "-", "1", ")", "\n", "if", "gt_atom_types", "is", "None", ":", "\n", "            ", "cur_atom_types", "=", "self", ".", "sample_composition", "(", "\n", "composition_per_atom", ",", "num_atoms", ")", "\n", "", "else", ":", "\n", "            ", "cur_atom_types", "=", "gt_atom_types", "\n", "\n", "# init coords.", "\n", "", "cur_frac_coords", "=", "torch", ".", "rand", "(", "(", "num_atoms", ".", "sum", "(", ")", ",", "3", ")", ",", "device", "=", "z", ".", "device", ")", "\n", "\n", "# annealed langevin dynamics.", "\n", "for", "sigma", "in", "tqdm", "(", "self", ".", "sigmas", ",", "total", "=", "self", ".", "sigmas", ".", "size", "(", "0", ")", ",", "disable", "=", "ld_kwargs", ".", "disable_bar", ")", ":", "\n", "            ", "if", "sigma", "<", "ld_kwargs", ".", "min_sigma", ":", "\n", "                ", "break", "\n", "", "step_size", "=", "ld_kwargs", ".", "step_lr", "*", "(", "sigma", "/", "self", ".", "sigmas", "[", "-", "1", "]", ")", "**", "2", "\n", "\n", "for", "step", "in", "range", "(", "ld_kwargs", ".", "n_step_each", ")", ":", "\n", "                ", "noise_cart", "=", "torch", ".", "randn_like", "(", "\n", "cur_frac_coords", ")", "*", "torch", ".", "sqrt", "(", "step_size", "*", "2", ")", "\n", "pred_cart_coord_diff", ",", "pred_atom_types", "=", "self", ".", "decoder", "(", "\n", "z", ",", "cur_frac_coords", ",", "cur_atom_types", ",", "num_atoms", ",", "lengths", ",", "angles", ")", "\n", "cur_cart_coords", "=", "frac_to_cart_coords", "(", "\n", "cur_frac_coords", ",", "lengths", ",", "angles", ",", "num_atoms", ")", "\n", "pred_cart_coord_diff", "=", "pred_cart_coord_diff", "/", "sigma", "\n", "cur_cart_coords", "=", "cur_cart_coords", "+", "step_size", "*", "pred_cart_coord_diff", "+", "noise_cart", "\n", "cur_frac_coords", "=", "cart_to_frac_coords", "(", "\n", "cur_cart_coords", ",", "lengths", ",", "angles", ",", "num_atoms", ")", "\n", "\n", "if", "gt_atom_types", "is", "None", ":", "\n", "                    ", "cur_atom_types", "=", "torch", ".", "argmax", "(", "pred_atom_types", ",", "dim", "=", "1", ")", "+", "1", "\n", "\n", "", "if", "ld_kwargs", ".", "save_traj", ":", "\n", "                    ", "all_frac_coords", ".", "append", "(", "cur_frac_coords", ")", "\n", "all_pred_cart_coord_diff", ".", "append", "(", "\n", "step_size", "*", "pred_cart_coord_diff", ")", "\n", "all_noise_cart", ".", "append", "(", "noise_cart", ")", "\n", "all_atom_types", ".", "append", "(", "cur_atom_types", ")", "\n", "\n", "", "", "", "output_dict", "=", "{", "'num_atoms'", ":", "num_atoms", ",", "'lengths'", ":", "lengths", ",", "'angles'", ":", "angles", ",", "\n", "'frac_coords'", ":", "cur_frac_coords", ",", "'atom_types'", ":", "cur_atom_types", ",", "\n", "'is_traj'", ":", "False", "}", "\n", "\n", "if", "ld_kwargs", ".", "save_traj", ":", "\n", "            ", "output_dict", ".", "update", "(", "dict", "(", "\n", "all_frac_coords", "=", "torch", ".", "stack", "(", "all_frac_coords", ",", "dim", "=", "0", ")", ",", "\n", "all_atom_types", "=", "torch", ".", "stack", "(", "all_atom_types", ",", "dim", "=", "0", ")", ",", "\n", "all_pred_cart_coord_diff", "=", "torch", ".", "stack", "(", "\n", "all_pred_cart_coord_diff", ",", "dim", "=", "0", ")", ",", "\n", "all_noise_cart", "=", "torch", ".", "stack", "(", "all_noise_cart", ",", "dim", "=", "0", ")", ",", "\n", "is_traj", "=", "True", ")", ")", "\n", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.sample": [[304, 309], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "model.CDVAE.langevin_dynamics"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.langevin_dynamics"], ["", "def", "sample", "(", "self", ",", "num_samples", ",", "ld_kwargs", ")", ":", "\n", "        ", "z", "=", "torch", ".", "randn", "(", "num_samples", ",", "self", ".", "hparams", ".", "hidden_dim", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "samples", "=", "self", ".", "langevin_dynamics", "(", "z", ",", "ld_kwargs", ")", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.forward": [[310, 391], ["model.CDVAE.encode", "model.CDVAE.decode_stats", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "model.CDVAE.sigmas[].repeat_interleave", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "model.CDVAE.type_sigmas[].repeat_interleave", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "cdvae.common.data_utils.frac_to_cart_coords", "cdvae.common.data_utils.cart_to_frac_coords", "model.CDVAE.decoder", "model.CDVAE.num_atom_loss", "model.CDVAE.lattice_loss", "model.CDVAE.composition_loss", "model.CDVAE.coord_loss", "model.CDVAE.type_loss", "model.CDVAE.kld_loss", "model.CDVAE.sigmas.size", "model.CDVAE.type_sigmas.size", "pred_composition_per_atom.detach", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "model.CDVAE.property_loss", "batch.num_atoms.size", "batch.num_atoms.size", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.encode", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.decode_stats", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.frac_to_cart_coords", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.cart_to_frac_coords", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.num_atom_loss", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.lattice_loss", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.composition_loss", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.coord_loss", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.type_loss", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.kld_loss", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.property_loss"], ["", "def", "forward", "(", "self", ",", "batch", ",", "teacher_forcing", ",", "training", ")", ":", "\n", "# hacky way to resolve the NaN issue. Will need more careful debugging later.", "\n", "        ", "mu", ",", "log_var", ",", "z", "=", "self", ".", "encode", "(", "batch", ")", "\n", "\n", "(", "pred_num_atoms", ",", "pred_lengths_and_angles", ",", "pred_lengths", ",", "pred_angles", ",", "\n", "pred_composition_per_atom", ")", "=", "self", ".", "decode_stats", "(", "\n", "z", ",", "batch", ".", "num_atoms", ",", "batch", ".", "lengths", ",", "batch", ".", "angles", ",", "teacher_forcing", ")", "\n", "\n", "# sample noise levels.", "\n", "noise_level", "=", "torch", ".", "randint", "(", "0", ",", "self", ".", "sigmas", ".", "size", "(", "0", ")", ",", "\n", "(", "batch", ".", "num_atoms", ".", "size", "(", "0", ")", ",", ")", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "used_sigmas_per_atom", "=", "self", ".", "sigmas", "[", "noise_level", "]", ".", "repeat_interleave", "(", "\n", "batch", ".", "num_atoms", ",", "dim", "=", "0", ")", "\n", "\n", "type_noise_level", "=", "torch", ".", "randint", "(", "0", ",", "self", ".", "type_sigmas", ".", "size", "(", "0", ")", ",", "\n", "(", "batch", ".", "num_atoms", ".", "size", "(", "0", ")", ",", ")", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "used_type_sigmas_per_atom", "=", "(", "\n", "self", ".", "type_sigmas", "[", "type_noise_level", "]", ".", "repeat_interleave", "(", "\n", "batch", ".", "num_atoms", ",", "dim", "=", "0", ")", ")", "\n", "\n", "# add noise to atom types and sample atom types.", "\n", "pred_composition_probs", "=", "F", ".", "softmax", "(", "\n", "pred_composition_per_atom", ".", "detach", "(", ")", ",", "dim", "=", "-", "1", ")", "\n", "atom_type_probs", "=", "(", "\n", "F", ".", "one_hot", "(", "batch", ".", "atom_types", "-", "1", ",", "num_classes", "=", "MAX_ATOMIC_NUM", ")", "+", "\n", "pred_composition_probs", "*", "used_type_sigmas_per_atom", "[", ":", ",", "None", "]", ")", "\n", "rand_atom_types", "=", "torch", ".", "multinomial", "(", "\n", "atom_type_probs", ",", "num_samples", "=", "1", ")", ".", "squeeze", "(", "1", ")", "+", "1", "\n", "\n", "# add noise to the cart coords", "\n", "cart_noises_per_atom", "=", "(", "\n", "torch", ".", "randn_like", "(", "batch", ".", "frac_coords", ")", "*", "\n", "used_sigmas_per_atom", "[", ":", ",", "None", "]", ")", "\n", "cart_coords", "=", "frac_to_cart_coords", "(", "\n", "batch", ".", "frac_coords", ",", "pred_lengths", ",", "pred_angles", ",", "batch", ".", "num_atoms", ")", "\n", "cart_coords", "=", "cart_coords", "+", "cart_noises_per_atom", "\n", "noisy_frac_coords", "=", "cart_to_frac_coords", "(", "\n", "cart_coords", ",", "pred_lengths", ",", "pred_angles", ",", "batch", ".", "num_atoms", ")", "\n", "\n", "pred_cart_coord_diff", ",", "pred_atom_types", "=", "self", ".", "decoder", "(", "\n", "z", ",", "noisy_frac_coords", ",", "rand_atom_types", ",", "batch", ".", "num_atoms", ",", "pred_lengths", ",", "pred_angles", ")", "\n", "\n", "# compute loss.", "\n", "num_atom_loss", "=", "self", ".", "num_atom_loss", "(", "pred_num_atoms", ",", "batch", ")", "\n", "lattice_loss", "=", "self", ".", "lattice_loss", "(", "pred_lengths_and_angles", ",", "batch", ")", "\n", "composition_loss", "=", "self", ".", "composition_loss", "(", "\n", "pred_composition_per_atom", ",", "batch", ".", "atom_types", ",", "batch", ")", "\n", "coord_loss", "=", "self", ".", "coord_loss", "(", "\n", "pred_cart_coord_diff", ",", "noisy_frac_coords", ",", "used_sigmas_per_atom", ",", "batch", ")", "\n", "type_loss", "=", "self", ".", "type_loss", "(", "pred_atom_types", ",", "batch", ".", "atom_types", ",", "\n", "used_type_sigmas_per_atom", ",", "batch", ")", "\n", "\n", "kld_loss", "=", "self", ".", "kld_loss", "(", "mu", ",", "log_var", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "predict_property", ":", "\n", "            ", "property_loss", "=", "self", ".", "property_loss", "(", "z", ",", "batch", ")", "\n", "", "else", ":", "\n", "            ", "property_loss", "=", "0.", "\n", "\n", "", "return", "{", "\n", "'num_atom_loss'", ":", "num_atom_loss", ",", "\n", "'lattice_loss'", ":", "lattice_loss", ",", "\n", "'composition_loss'", ":", "composition_loss", ",", "\n", "'coord_loss'", ":", "coord_loss", ",", "\n", "'type_loss'", ":", "type_loss", ",", "\n", "'kld_loss'", ":", "kld_loss", ",", "\n", "'property_loss'", ":", "property_loss", ",", "\n", "'pred_num_atoms'", ":", "pred_num_atoms", ",", "\n", "'pred_lengths_and_angles'", ":", "pred_lengths_and_angles", ",", "\n", "'pred_lengths'", ":", "pred_lengths", ",", "\n", "'pred_angles'", ":", "pred_angles", ",", "\n", "'pred_cart_coord_diff'", ":", "pred_cart_coord_diff", ",", "\n", "'pred_atom_types'", ":", "pred_atom_types", ",", "\n", "'pred_composition_per_atom'", ":", "pred_composition_per_atom", ",", "\n", "'target_frac_coords'", ":", "batch", ".", "frac_coords", ",", "\n", "'target_atom_types'", ":", "batch", ".", "atom_types", ",", "\n", "'rand_frac_coords'", ":", "noisy_frac_coords", ",", "\n", "'rand_atom_types'", ":", "rand_atom_types", ",", "\n", "'z'", ":", "z", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.generate_rand_init": [[393, 402], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "model.CDVAE.sample_composition", "num_atoms.sum"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.sample_composition"], ["", "def", "generate_rand_init", "(", "self", ",", "pred_composition_per_atom", ",", "pred_lengths", ",", "\n", "pred_angles", ",", "num_atoms", ",", "batch", ")", ":", "\n", "        ", "rand_frac_coords", "=", "torch", ".", "rand", "(", "num_atoms", ".", "sum", "(", ")", ",", "3", ",", "\n", "device", "=", "num_atoms", ".", "device", ")", "\n", "pred_composition_per_atom", "=", "F", ".", "softmax", "(", "pred_composition_per_atom", ",", "\n", "dim", "=", "-", "1", ")", "\n", "rand_atom_types", "=", "self", ".", "sample_composition", "(", "\n", "pred_composition_per_atom", ",", "num_atoms", ")", "\n", "return", "rand_frac_coords", ",", "rand_atom_types", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.sample_composition": [[403, 442], ["torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch_scatter.scatter", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_scatter.scatter.size", "num_atoms.sum", "torch.arange().repeat_interleave.size", "torch.arange().repeat_interleave.size", "list", "list", "torch.round", "torch.round", "torch.round", "torch.round", "comp_num[].long", "atom_type.repeat_interleave", "torch.cat.append", "torch.cat.append", "torch.cat.size", "torch.cat.size", "num_atoms.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat.size", "torch.cat.size", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.cat.size", "torch.cat.size", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.round.float", "torch.round.float", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "def", "sample_composition", "(", "self", ",", "composition_prob", ",", "num_atoms", ")", ":", "\n", "        ", "\"\"\"\n        Samples composition such that it exactly satisfies composition_prob\n        \"\"\"", "\n", "batch", "=", "torch", ".", "arange", "(", "\n", "len", "(", "num_atoms", ")", ",", "device", "=", "num_atoms", ".", "device", ")", ".", "repeat_interleave", "(", "num_atoms", ")", "\n", "assert", "composition_prob", ".", "size", "(", "0", ")", "==", "num_atoms", ".", "sum", "(", ")", "==", "batch", ".", "size", "(", "0", ")", "\n", "composition_prob", "=", "scatter", "(", "\n", "composition_prob", ",", "index", "=", "batch", ",", "dim", "=", "0", ",", "reduce", "=", "'mean'", ")", "\n", "\n", "all_sampled_comp", "=", "[", "]", "\n", "\n", "for", "comp_prob", ",", "num_atom", "in", "zip", "(", "list", "(", "composition_prob", ")", ",", "list", "(", "num_atoms", ")", ")", ":", "\n", "            ", "comp_num", "=", "torch", ".", "round", "(", "comp_prob", "*", "num_atom", ")", "\n", "atom_type", "=", "torch", ".", "nonzero", "(", "comp_num", ",", "as_tuple", "=", "True", ")", "[", "0", "]", "+", "1", "\n", "atom_num", "=", "comp_num", "[", "atom_type", "-", "1", "]", ".", "long", "(", ")", "\n", "\n", "sampled_comp", "=", "atom_type", ".", "repeat_interleave", "(", "atom_num", ",", "dim", "=", "0", ")", "\n", "\n", "# if the rounded composition gives less atoms, sample the rest", "\n", "if", "sampled_comp", ".", "size", "(", "0", ")", "<", "num_atom", ":", "\n", "                ", "left_atom_num", "=", "num_atom", "-", "sampled_comp", ".", "size", "(", "0", ")", "\n", "\n", "left_comp_prob", "=", "comp_prob", "-", "comp_num", ".", "float", "(", ")", "/", "num_atom", "\n", "\n", "left_comp_prob", "[", "left_comp_prob", "<", "0.", "]", "=", "0.", "\n", "left_comp", "=", "torch", ".", "multinomial", "(", "\n", "left_comp_prob", ",", "num_samples", "=", "left_atom_num", ",", "replacement", "=", "True", ")", "\n", "# convert to atomic number", "\n", "left_comp", "=", "left_comp", "+", "1", "\n", "sampled_comp", "=", "torch", ".", "cat", "(", "[", "sampled_comp", ",", "left_comp", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "sampled_comp", "=", "sampled_comp", "[", "torch", ".", "randperm", "(", "sampled_comp", ".", "size", "(", "0", ")", ")", "]", "\n", "sampled_comp", "=", "sampled_comp", "[", ":", "num_atom", "]", "\n", "all_sampled_comp", ".", "append", "(", "sampled_comp", ")", "\n", "\n", "", "all_sampled_comp", "=", "torch", ".", "cat", "(", "all_sampled_comp", ",", "dim", "=", "0", ")", "\n", "assert", "all_sampled_comp", ".", "size", "(", "0", ")", "==", "num_atoms", ".", "sum", "(", ")", "\n", "return", "all_sampled_comp", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.predict_num_atoms": [[443, 445], ["model.CDVAE.fc_num_atoms"], "methods", ["None"], ["", "def", "predict_num_atoms", "(", "self", ",", "z", ")", ":", "\n", "        ", "return", "self", ".", "fc_num_atoms", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.predict_property": [[446, 449], ["model.CDVAE.scaler.match_device", "model.CDVAE.scaler.inverse_transform", "model.CDVAE.fc_property"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.match_device", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.inverse_transform"], ["", "def", "predict_property", "(", "self", ",", "z", ")", ":", "\n", "        ", "self", ".", "scaler", ".", "match_device", "(", "z", ")", "\n", "return", "self", ".", "scaler", ".", "inverse_transform", "(", "self", ".", "fc_property", "(", "z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.predict_lattice": [[450, 461], ["model.CDVAE.lattice_scaler.match_device", "model.CDVAE.fc_lattice", "model.CDVAE.lattice_scaler.inverse_transform", "num_atoms.view().float", "num_atoms.view"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.match_device", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.inverse_transform"], ["", "def", "predict_lattice", "(", "self", ",", "z", ",", "num_atoms", ")", ":", "\n", "        ", "self", ".", "lattice_scaler", ".", "match_device", "(", "z", ")", "\n", "pred_lengths_and_angles", "=", "self", ".", "fc_lattice", "(", "z", ")", "# (N, 6)", "\n", "scaled_preds", "=", "self", ".", "lattice_scaler", ".", "inverse_transform", "(", "\n", "pred_lengths_and_angles", ")", "\n", "pred_lengths", "=", "scaled_preds", "[", ":", ",", ":", "3", "]", "\n", "pred_angles", "=", "scaled_preds", "[", ":", ",", "3", ":", "]", "\n", "if", "self", ".", "hparams", ".", "data", ".", "lattice_scale_method", "==", "'scale_length'", ":", "\n", "            ", "pred_lengths", "=", "pred_lengths", "*", "num_atoms", ".", "view", "(", "-", "1", ",", "1", ")", ".", "float", "(", ")", "**", "(", "1", "/", "3", ")", "\n", "# <pred_lengths_and_angles> is scaled.", "\n", "", "return", "pred_lengths_and_angles", ",", "pred_lengths", ",", "pred_angles", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.predict_composition": [[462, 466], ["z.repeat_interleave", "model.CDVAE.fc_composition"], "methods", ["None"], ["", "def", "predict_composition", "(", "self", ",", "z", ",", "num_atoms", ")", ":", "\n", "        ", "z_per_atom", "=", "z", ".", "repeat_interleave", "(", "num_atoms", ",", "dim", "=", "0", ")", "\n", "pred_composition_per_atom", "=", "self", ".", "fc_composition", "(", "z_per_atom", ")", "\n", "return", "pred_composition_per_atom", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.num_atom_loss": [[467, 469], ["torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy"], "methods", ["None"], ["", "def", "num_atom_loss", "(", "self", ",", "pred_num_atoms", ",", "batch", ")", ":", "\n", "        ", "return", "F", ".", "cross_entropy", "(", "pred_num_atoms", ",", "batch", ".", "num_atoms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.property_loss": [[470, 472], ["torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "model.CDVAE.fc_property"], "methods", ["None"], ["", "def", "property_loss", "(", "self", ",", "z", ",", "batch", ")", ":", "\n", "        ", "return", "F", ".", "mse_loss", "(", "self", ".", "fc_property", "(", "z", ")", ",", "batch", ".", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.lattice_loss": [[473, 483], ["model.CDVAE.lattice_scaler.match_device", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.CDVAE.lattice_scaler.transform", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "batch.num_atoms.view().float", "batch.num_atoms.view"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.match_device", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.transform"], ["", "def", "lattice_loss", "(", "self", ",", "pred_lengths_and_angles", ",", "batch", ")", ":", "\n", "        ", "self", ".", "lattice_scaler", ".", "match_device", "(", "pred_lengths_and_angles", ")", "\n", "if", "self", ".", "hparams", ".", "data", ".", "lattice_scale_method", "==", "'scale_length'", ":", "\n", "            ", "target_lengths", "=", "batch", ".", "lengths", "/", "batch", ".", "num_atoms", ".", "view", "(", "-", "1", ",", "1", ")", ".", "float", "(", ")", "**", "(", "1", "/", "3", ")", "\n", "", "target_lengths_and_angles", "=", "torch", ".", "cat", "(", "\n", "[", "target_lengths", ",", "batch", ".", "angles", "]", ",", "dim", "=", "-", "1", ")", "\n", "target_lengths_and_angles", "=", "self", ".", "lattice_scaler", ".", "transform", "(", "\n", "target_lengths_and_angles", ")", "\n", "return", "F", ".", "mse_loss", "(", "pred_lengths_and_angles", ",", "target_lengths_and_angles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.composition_loss": [[484, 489], ["torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch_scatter.scatter().mean", "torch_scatter.scatter"], "methods", ["None"], ["", "def", "composition_loss", "(", "self", ",", "pred_composition_per_atom", ",", "target_atom_types", ",", "batch", ")", ":", "\n", "        ", "target_atom_types", "=", "target_atom_types", "-", "1", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "pred_composition_per_atom", ",", "\n", "target_atom_types", ",", "reduction", "=", "'none'", ")", "\n", "return", "scatter", "(", "loss", ",", "batch", ".", "batch", ",", "reduce", "=", "'mean'", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.coord_loss": [[490, 510], ["cdvae.common.data_utils.frac_to_cart_coords", "cdvae.common.data_utils.frac_to_cart_coords", "cdvae.common.data_utils.min_distance_sqr_pbc", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch_scatter.scatter().mean", "torch_scatter.scatter"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.frac_to_cart_coords", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.frac_to_cart_coords", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.min_distance_sqr_pbc"], ["", "def", "coord_loss", "(", "self", ",", "pred_cart_coord_diff", ",", "noisy_frac_coords", ",", "\n", "used_sigmas_per_atom", ",", "batch", ")", ":", "\n", "        ", "noisy_cart_coords", "=", "frac_to_cart_coords", "(", "\n", "noisy_frac_coords", ",", "batch", ".", "lengths", ",", "batch", ".", "angles", ",", "batch", ".", "num_atoms", ")", "\n", "target_cart_coords", "=", "frac_to_cart_coords", "(", "\n", "batch", ".", "frac_coords", ",", "batch", ".", "lengths", ",", "batch", ".", "angles", ",", "batch", ".", "num_atoms", ")", "\n", "_", ",", "target_cart_coord_diff", "=", "min_distance_sqr_pbc", "(", "\n", "target_cart_coords", ",", "noisy_cart_coords", ",", "batch", ".", "lengths", ",", "batch", ".", "angles", ",", "\n", "batch", ".", "num_atoms", ",", "self", ".", "device", ",", "return_vector", "=", "True", ")", "\n", "\n", "target_cart_coord_diff", "=", "target_cart_coord_diff", "/", "used_sigmas_per_atom", "[", ":", ",", "None", "]", "**", "2", "\n", "pred_cart_coord_diff", "=", "pred_cart_coord_diff", "/", "used_sigmas_per_atom", "[", ":", ",", "None", "]", "\n", "\n", "loss_per_atom", "=", "torch", ".", "sum", "(", "\n", "(", "target_cart_coord_diff", "-", "pred_cart_coord_diff", ")", "**", "2", ",", "dim", "=", "1", ")", "\n", "\n", "loss_per_atom", "=", "0.5", "*", "loss_per_atom", "*", "used_sigmas_per_atom", "**", "2", "\n", "return", "scatter", "(", "loss_per_atom", ",", "batch", ".", "batch", ",", "reduce", "=", "'mean'", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.type_loss": [[511, 519], ["torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch_scatter.scatter().mean", "torch_scatter.scatter"], "methods", ["None"], ["", "def", "type_loss", "(", "self", ",", "pred_atom_types", ",", "target_atom_types", ",", "\n", "used_type_sigmas_per_atom", ",", "batch", ")", ":", "\n", "        ", "target_atom_types", "=", "target_atom_types", "-", "1", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "\n", "pred_atom_types", ",", "target_atom_types", ",", "reduction", "=", "'none'", ")", "\n", "# rescale loss according to noise", "\n", "loss", "=", "loss", "/", "used_type_sigmas_per_atom", "\n", "return", "scatter", "(", "loss", ",", "batch", ".", "batch", ",", "reduce", "=", "'mean'", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.kld_loss": [[520, 524], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "log_var.exp"], "methods", ["None"], ["", "def", "kld_loss", "(", "self", ",", "mu", ",", "log_var", ")", ":", "\n", "        ", "kld_loss", "=", "torch", ".", "mean", "(", "\n", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "log_var", "-", "mu", "**", "2", "-", "log_var", ".", "exp", "(", ")", ",", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", "\n", "return", "kld_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.training_step": [[525, 537], ["model.CDVAE.", "model.CDVAE.compute_stats", "model.CDVAE.log_dict"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.compute_stats"], ["", "def", "training_step", "(", "self", ",", "batch", ":", "Any", ",", "batch_idx", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "teacher_forcing", "=", "(", "\n", "self", ".", "current_epoch", "<=", "self", ".", "hparams", ".", "teacher_forcing_max_epoch", ")", "\n", "outputs", "=", "self", "(", "batch", ",", "teacher_forcing", ",", "training", "=", "True", ")", "\n", "log_dict", ",", "loss", "=", "self", ".", "compute_stats", "(", "batch", ",", "outputs", ",", "prefix", "=", "'train'", ")", "\n", "self", ".", "log_dict", "(", "\n", "log_dict", ",", "\n", "on_step", "=", "True", ",", "\n", "on_epoch", "=", "True", ",", "\n", "prog_bar", "=", "True", ",", "\n", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.validation_step": [[538, 548], ["model.CDVAE.", "model.CDVAE.compute_stats", "model.CDVAE.log_dict"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.compute_stats"], ["", "def", "validation_step", "(", "self", ",", "batch", ":", "Any", ",", "batch_idx", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "outputs", "=", "self", "(", "batch", ",", "teacher_forcing", "=", "False", ",", "training", "=", "False", ")", "\n", "log_dict", ",", "loss", "=", "self", ".", "compute_stats", "(", "batch", ",", "outputs", ",", "prefix", "=", "'val'", ")", "\n", "self", ".", "log_dict", "(", "\n", "log_dict", ",", "\n", "on_step", "=", "False", ",", "\n", "on_epoch", "=", "True", ",", "\n", "prog_bar", "=", "True", ",", "\n", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.test_step": [[549, 556], ["model.CDVAE.", "model.CDVAE.compute_stats", "model.CDVAE.log_dict"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.compute_stats"], ["", "def", "test_step", "(", "self", ",", "batch", ":", "Any", ",", "batch_idx", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "outputs", "=", "self", "(", "batch", ",", "teacher_forcing", "=", "False", ",", "training", "=", "False", ")", "\n", "log_dict", ",", "loss", "=", "self", ".", "compute_stats", "(", "batch", ",", "outputs", ",", "prefix", "=", "'test'", ")", "\n", "self", ".", "log_dict", "(", "\n", "log_dict", ",", "\n", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.CDVAE.compute_stats": [[557, 633], ["outputs[].argmax", "model.CDVAE.lattice_scaler.inverse_transform", "cdvae.common.data_utils.mard", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "cdvae.common.data_utils.lengths_angles_to_volume", "cdvae.common.data_utils.lengths_angles_to_volume", "cdvae.common.data_utils.mard", "torch_scatter.scatter().mean", "log_dict.update", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "pred_atom_types.argmax", "torch_scatter.scatter", "batch.num_atoms.view().float", "torch_scatter.scatter().mean.float", "batch.num_atoms.view"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.mard", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lengths_angles_to_volume", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lengths_angles_to_volume", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.mard"], ["", "def", "compute_stats", "(", "self", ",", "batch", ",", "outputs", ",", "prefix", ")", ":", "\n", "        ", "num_atom_loss", "=", "outputs", "[", "'num_atom_loss'", "]", "\n", "lattice_loss", "=", "outputs", "[", "'lattice_loss'", "]", "\n", "coord_loss", "=", "outputs", "[", "'coord_loss'", "]", "\n", "type_loss", "=", "outputs", "[", "'type_loss'", "]", "\n", "kld_loss", "=", "outputs", "[", "'kld_loss'", "]", "\n", "composition_loss", "=", "outputs", "[", "'composition_loss'", "]", "\n", "property_loss", "=", "outputs", "[", "'property_loss'", "]", "\n", "\n", "loss", "=", "(", "\n", "self", ".", "hparams", ".", "cost_natom", "*", "num_atom_loss", "+", "\n", "self", ".", "hparams", ".", "cost_lattice", "*", "lattice_loss", "+", "\n", "self", ".", "hparams", ".", "cost_coord", "*", "coord_loss", "+", "\n", "self", ".", "hparams", ".", "cost_type", "*", "type_loss", "+", "\n", "self", ".", "hparams", ".", "beta", "*", "kld_loss", "+", "\n", "self", ".", "hparams", ".", "cost_composition", "*", "composition_loss", "+", "\n", "self", ".", "hparams", ".", "cost_property", "*", "property_loss", ")", "\n", "\n", "log_dict", "=", "{", "\n", "f'{prefix}_loss'", ":", "loss", ",", "\n", "f'{prefix}_natom_loss'", ":", "num_atom_loss", ",", "\n", "f'{prefix}_lattice_loss'", ":", "lattice_loss", ",", "\n", "f'{prefix}_coord_loss'", ":", "coord_loss", ",", "\n", "f'{prefix}_type_loss'", ":", "type_loss", ",", "\n", "f'{prefix}_kld_loss'", ":", "kld_loss", ",", "\n", "f'{prefix}_composition_loss'", ":", "composition_loss", ",", "\n", "}", "\n", "\n", "if", "prefix", "!=", "'train'", ":", "\n", "# validation/test loss only has coord and type", "\n", "            ", "loss", "=", "(", "\n", "self", ".", "hparams", ".", "cost_coord", "*", "coord_loss", "+", "\n", "self", ".", "hparams", ".", "cost_type", "*", "type_loss", ")", "\n", "\n", "# evaluate num_atom prediction.", "\n", "pred_num_atoms", "=", "outputs", "[", "'pred_num_atoms'", "]", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "num_atom_accuracy", "=", "(", "\n", "pred_num_atoms", "==", "batch", ".", "num_atoms", ")", ".", "sum", "(", ")", "/", "batch", ".", "num_graphs", "\n", "\n", "# evalute lattice prediction.", "\n", "pred_lengths_and_angles", "=", "outputs", "[", "'pred_lengths_and_angles'", "]", "\n", "scaled_preds", "=", "self", ".", "lattice_scaler", ".", "inverse_transform", "(", "\n", "pred_lengths_and_angles", ")", "\n", "pred_lengths", "=", "scaled_preds", "[", ":", ",", ":", "3", "]", "\n", "pred_angles", "=", "scaled_preds", "[", ":", ",", "3", ":", "]", "\n", "\n", "if", "self", ".", "hparams", ".", "data", ".", "lattice_scale_method", "==", "'scale_length'", ":", "\n", "                ", "pred_lengths", "=", "pred_lengths", "*", "batch", ".", "num_atoms", ".", "view", "(", "-", "1", ",", "1", ")", ".", "float", "(", ")", "**", "(", "1", "/", "3", ")", "\n", "", "lengths_mard", "=", "mard", "(", "batch", ".", "lengths", ",", "pred_lengths", ")", "\n", "angles_mae", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "pred_angles", "-", "batch", ".", "angles", ")", ")", "\n", "\n", "pred_volumes", "=", "lengths_angles_to_volume", "(", "pred_lengths", ",", "pred_angles", ")", "\n", "true_volumes", "=", "lengths_angles_to_volume", "(", "\n", "batch", ".", "lengths", ",", "batch", ".", "angles", ")", "\n", "volumes_mard", "=", "mard", "(", "true_volumes", ",", "pred_volumes", ")", "\n", "\n", "# evaluate atom type prediction.", "\n", "pred_atom_types", "=", "outputs", "[", "'pred_atom_types'", "]", "\n", "target_atom_types", "=", "outputs", "[", "'target_atom_types'", "]", "\n", "type_accuracy", "=", "pred_atom_types", ".", "argmax", "(", "\n", "dim", "=", "-", "1", ")", "==", "(", "target_atom_types", "-", "1", ")", "\n", "type_accuracy", "=", "scatter", "(", "type_accuracy", ".", "float", "(", "\n", ")", ",", "batch", ".", "batch", ",", "dim", "=", "0", ",", "reduce", "=", "'mean'", ")", ".", "mean", "(", ")", "\n", "\n", "log_dict", ".", "update", "(", "{", "\n", "f'{prefix}_loss'", ":", "loss", ",", "\n", "f'{prefix}_property_loss'", ":", "property_loss", ",", "\n", "f'{prefix}_natom_accuracy'", ":", "num_atom_accuracy", ",", "\n", "f'{prefix}_lengths_mard'", ":", "lengths_mard", ",", "\n", "f'{prefix}_angles_mae'", ":", "angles_mae", ",", "\n", "f'{prefix}_volumes_mard'", ":", "volumes_mard", ",", "\n", "f'{prefix}_type_accuracy'", ":", "type_accuracy", ",", "\n", "}", ")", "\n", "\n", "", "return", "log_dict", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.build_mlp": [[21, 27], ["range", "torch.Sequential", "torch.Linear", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "cdvae.pl_modules.embeddings.MAX_ATOMIC_NUM"], "function", ["None"], ["def", "build_mlp", "(", "in_dim", ",", "hidden_dim", ",", "fc_num_layers", ",", "out_dim", ")", ":", "\n", "    ", "mods", "=", "[", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "for", "i", "in", "range", "(", "fc_num_layers", "-", "1", ")", ":", "\n", "        ", "mods", "+=", "[", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "", "mods", "+=", "[", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "mods", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.main": [[635, 645], ["hydra.main", "hydra.utils.instantiate", "str"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.model.main"], ["", "", "@", "hydra", ".", "main", "(", "config_path", "=", "str", "(", "PROJECT_ROOT", "/", "\"conf\"", ")", ",", "config_name", "=", "\"default\"", ")", "\n", "def", "main", "(", "cfg", ":", "omegaconf", ".", "DictConfig", ")", ":", "\n", "    ", "model", ":", "pl", ".", "LightningModule", "=", "hydra", ".", "utils", ".", "instantiate", "(", "\n", "cfg", ".", "model", ",", "\n", "optim", "=", "cfg", ".", "optim", ",", "\n", "data", "=", "cfg", ".", "data", ",", "\n", "logging", "=", "cfg", ".", "logging", ",", "\n", "_recursive_", "=", "False", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.InteractionPPBlock.__init__": [[31, 77], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "gnn.InteractionPPBlock.reset_parameters", "torch_geometric.nn.models.dimenet.ResidualLayer", "torch_geometric.nn.models.dimenet.ResidualLayer", "range", "range"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "hidden_channels", ",", "\n", "int_emb_size", ",", "\n", "basis_emb_size", ",", "\n", "num_spherical", ",", "\n", "num_radial", ",", "\n", "num_before_skip", ",", "\n", "num_after_skip", ",", "\n", "act", "=", "swish", ",", "\n", ")", ":", "\n", "        ", "super", "(", "InteractionPPBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "act", "\n", "\n", "# Transformations of Bessel and spherical basis representations.", "\n", "self", ".", "lin_rbf1", "=", "nn", ".", "Linear", "(", "num_radial", ",", "basis_emb_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "lin_rbf2", "=", "nn", ".", "Linear", "(", "basis_emb_size", ",", "hidden_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "lin_sbf1", "=", "nn", ".", "Linear", "(", "\n", "num_spherical", "*", "num_radial", ",", "basis_emb_size", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "lin_sbf2", "=", "nn", ".", "Linear", "(", "basis_emb_size", ",", "int_emb_size", ",", "bias", "=", "False", ")", "\n", "\n", "# Dense transformations of input messages.", "\n", "self", ".", "lin_kj", "=", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", "\n", "self", ".", "lin_ji", "=", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", "\n", "\n", "# Embedding projections for interaction triplets.", "\n", "self", ".", "lin_down", "=", "nn", ".", "Linear", "(", "hidden_channels", ",", "int_emb_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "lin_up", "=", "nn", ".", "Linear", "(", "int_emb_size", ",", "hidden_channels", ",", "bias", "=", "False", ")", "\n", "\n", "# Residual layers before and after skip connection.", "\n", "self", ".", "layers_before_skip", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ResidualLayer", "(", "hidden_channels", ",", "act", ")", "\n", "for", "_", "in", "range", "(", "num_before_skip", ")", "\n", "]", "\n", ")", "\n", "self", ".", "lin", "=", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", "\n", "self", ".", "layers_after_skip", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ResidualLayer", "(", "hidden_channels", ",", "act", ")", "\n", "for", "_", "in", "range", "(", "num_after_skip", ")", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.InteractionPPBlock.reset_parameters": [[78, 98], ["torch_geometric.nn.inits.glorot_orthogonal", "torch_geometric.nn.inits.glorot_orthogonal", "torch_geometric.nn.inits.glorot_orthogonal", "torch_geometric.nn.inits.glorot_orthogonal", "torch_geometric.nn.inits.glorot_orthogonal", "gnn.InteractionPPBlock.lin_kj.bias.data.fill_", "torch_geometric.nn.inits.glorot_orthogonal", "gnn.InteractionPPBlock.lin_ji.bias.data.fill_", "torch_geometric.nn.inits.glorot_orthogonal", "torch_geometric.nn.inits.glorot_orthogonal", "torch_geometric.nn.inits.glorot_orthogonal", "gnn.InteractionPPBlock.lin.bias.data.fill_", "res_layer.reset_parameters", "res_layer.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "glorot_orthogonal", "(", "self", ".", "lin_rbf1", ".", "weight", ",", "scale", "=", "2.0", ")", "\n", "glorot_orthogonal", "(", "self", ".", "lin_rbf2", ".", "weight", ",", "scale", "=", "2.0", ")", "\n", "glorot_orthogonal", "(", "self", ".", "lin_sbf1", ".", "weight", ",", "scale", "=", "2.0", ")", "\n", "glorot_orthogonal", "(", "self", ".", "lin_sbf2", ".", "weight", ",", "scale", "=", "2.0", ")", "\n", "\n", "glorot_orthogonal", "(", "self", ".", "lin_kj", ".", "weight", ",", "scale", "=", "2.0", ")", "\n", "self", ".", "lin_kj", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "glorot_orthogonal", "(", "self", ".", "lin_ji", ".", "weight", ",", "scale", "=", "2.0", ")", "\n", "self", ".", "lin_ji", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "glorot_orthogonal", "(", "self", ".", "lin_down", ".", "weight", ",", "scale", "=", "2.0", ")", "\n", "glorot_orthogonal", "(", "self", ".", "lin_up", ".", "weight", ",", "scale", "=", "2.0", ")", "\n", "\n", "for", "res_layer", "in", "self", ".", "layers_before_skip", ":", "\n", "            ", "res_layer", ".", "reset_parameters", "(", ")", "\n", "", "glorot_orthogonal", "(", "self", ".", "lin", ".", "weight", ",", "scale", "=", "2.0", ")", "\n", "self", ".", "lin", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "for", "res_layer", "in", "self", ".", "layers_after_skip", ":", "\n", "            ", "res_layer", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.InteractionPPBlock.forward": [[99, 129], ["gnn.InteractionPPBlock.act", "gnn.InteractionPPBlock.act", "gnn.InteractionPPBlock.lin_rbf1", "gnn.InteractionPPBlock.lin_rbf2", "gnn.InteractionPPBlock.act", "gnn.InteractionPPBlock.lin_sbf1", "gnn.InteractionPPBlock.lin_sbf2", "torch_scatter.scatter", "gnn.InteractionPPBlock.act", "gnn.InteractionPPBlock.lin_ji", "gnn.InteractionPPBlock.lin_kj", "gnn.InteractionPPBlock.lin_down", "gnn.InteractionPPBlock.lin_up", "layer", "gnn.InteractionPPBlock.act", "layer", "x.size", "gnn.InteractionPPBlock.lin"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "rbf", ",", "sbf", ",", "idx_kj", ",", "idx_ji", ")", ":", "\n", "# Initial transformations.", "\n", "        ", "x_ji", "=", "self", ".", "act", "(", "self", ".", "lin_ji", "(", "x", ")", ")", "\n", "x_kj", "=", "self", ".", "act", "(", "self", ".", "lin_kj", "(", "x", ")", ")", "\n", "\n", "# Transformation via Bessel basis.", "\n", "rbf", "=", "self", ".", "lin_rbf1", "(", "rbf", ")", "\n", "rbf", "=", "self", ".", "lin_rbf2", "(", "rbf", ")", "\n", "x_kj", "=", "x_kj", "*", "rbf", "\n", "\n", "# Down-project embeddings and generate interaction triplet embeddings.", "\n", "x_kj", "=", "self", ".", "act", "(", "self", ".", "lin_down", "(", "x_kj", ")", ")", "\n", "\n", "# Transform via 2D spherical basis.", "\n", "sbf", "=", "self", ".", "lin_sbf1", "(", "sbf", ")", "\n", "sbf", "=", "self", ".", "lin_sbf2", "(", "sbf", ")", "\n", "x_kj", "=", "x_kj", "[", "idx_kj", "]", "*", "sbf", "\n", "\n", "# Aggregate interactions and up-project embeddings.", "\n", "x_kj", "=", "scatter", "(", "x_kj", ",", "idx_ji", ",", "dim", "=", "0", ",", "dim_size", "=", "x", ".", "size", "(", "0", ")", ")", "\n", "x_kj", "=", "self", ".", "act", "(", "self", ".", "lin_up", "(", "x_kj", ")", ")", "\n", "\n", "h", "=", "x_ji", "+", "x_kj", "\n", "for", "layer", "in", "self", ".", "layers_before_skip", ":", "\n", "            ", "h", "=", "layer", "(", "h", ")", "\n", "", "h", "=", "self", ".", "act", "(", "self", ".", "lin", "(", "h", ")", ")", "+", "x", "\n", "for", "layer", "in", "self", ".", "layers_after_skip", ":", "\n", "            ", "h", "=", "layer", "(", "h", ")", "\n", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.OutputPPBlock.__init__": [[132, 152], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.Linear", "torch.Linear", "gnn.OutputPPBlock.reset_parameters", "gnn.OutputPPBlock.lins.append", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_radial", ",", "\n", "hidden_channels", ",", "\n", "out_emb_channels", ",", "\n", "out_channels", ",", "\n", "num_layers", ",", "\n", "act", "=", "swish", ",", "\n", ")", ":", "\n", "        ", "super", "(", "OutputPPBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "act", "\n", "\n", "self", ".", "lin_rbf", "=", "nn", ".", "Linear", "(", "num_radial", ",", "hidden_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "lin_up", "=", "nn", ".", "Linear", "(", "hidden_channels", ",", "out_emb_channels", ",", "bias", "=", "True", ")", "\n", "self", ".", "lins", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "self", ".", "lins", ".", "append", "(", "nn", ".", "Linear", "(", "out_emb_channels", ",", "out_emb_channels", ")", ")", "\n", "", "self", ".", "lin", "=", "nn", ".", "Linear", "(", "out_emb_channels", ",", "out_channels", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.OutputPPBlock.reset_parameters": [[153, 160], ["torch_geometric.nn.inits.glorot_orthogonal", "torch_geometric.nn.inits.glorot_orthogonal", "gnn.OutputPPBlock.lin.weight.data.fill_", "torch_geometric.nn.inits.glorot_orthogonal", "lin.bias.data.fill_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "glorot_orthogonal", "(", "self", ".", "lin_rbf", ".", "weight", ",", "scale", "=", "2.0", ")", "\n", "glorot_orthogonal", "(", "self", ".", "lin_up", ".", "weight", ",", "scale", "=", "2.0", ")", "\n", "for", "lin", "in", "self", ".", "lins", ":", "\n", "            ", "glorot_orthogonal", "(", "lin", ".", "weight", ",", "scale", "=", "2.0", ")", "\n", "lin", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "self", ".", "lin", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.OutputPPBlock.forward": [[161, 168], ["torch_scatter.scatter", "gnn.OutputPPBlock.lin_up", "gnn.OutputPPBlock.lin", "gnn.OutputPPBlock.lin_rbf", "gnn.OutputPPBlock.act", "lin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "rbf", ",", "i", ",", "num_nodes", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "lin_rbf", "(", "rbf", ")", "*", "x", "\n", "x", "=", "scatter", "(", "x", ",", "i", ",", "dim", "=", "0", ",", "dim_size", "=", "num_nodes", ")", "\n", "x", "=", "self", ".", "lin_up", "(", "x", ")", "\n", "for", "lin", "in", "self", ".", "lins", ":", "\n", "            ", "x", "=", "self", ".", "act", "(", "lin", "(", "x", ")", ")", "\n", "", "return", "self", ".", "lin", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.DimeNetPlusPlus.__init__": [[197, 261], ["super().__init__", "torch_geometric.nn.models.dimenet.BesselBasisLayer", "torch_geometric.nn.models.dimenet.SphericalBasisLayer", "torch_geometric.nn.models.dimenet.EmbeddingBlock", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "gnn.DimeNetPlusPlus.reset_parameters", "ImportError", "gnn.OutputPPBlock", "gnn.InteractionPPBlock", "range", "range"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "hidden_channels", ",", "\n", "out_channels", ",", "\n", "num_blocks", ",", "\n", "int_emb_size", ",", "\n", "basis_emb_size", ",", "\n", "out_emb_channels", ",", "\n", "num_spherical", ",", "\n", "num_radial", ",", "\n", "cutoff", "=", "5.0", ",", "\n", "envelope_exponent", "=", "5", ",", "\n", "num_before_skip", "=", "1", ",", "\n", "num_after_skip", "=", "2", ",", "\n", "num_output_layers", "=", "3", ",", "\n", "act", "=", "swish", ",", "\n", ")", ":", "\n", "        ", "super", "(", "DimeNetPlusPlus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cutoff", "=", "cutoff", "\n", "\n", "if", "sym", "is", "None", ":", "\n", "            ", "raise", "ImportError", "(", "\"Package `sympy` could not be found.\"", ")", "\n", "\n", "", "self", ".", "num_blocks", "=", "num_blocks", "\n", "\n", "self", ".", "rbf", "=", "BesselBasisLayer", "(", "num_radial", ",", "cutoff", ",", "envelope_exponent", ")", "\n", "self", ".", "sbf", "=", "SphericalBasisLayer", "(", "\n", "num_spherical", ",", "num_radial", ",", "cutoff", ",", "envelope_exponent", "\n", ")", "\n", "\n", "self", ".", "emb", "=", "EmbeddingBlock", "(", "num_radial", ",", "hidden_channels", ",", "act", ")", "\n", "\n", "self", ".", "output_blocks", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "OutputPPBlock", "(", "\n", "num_radial", ",", "\n", "hidden_channels", ",", "\n", "out_emb_channels", ",", "\n", "out_channels", ",", "\n", "num_output_layers", ",", "\n", "act", ",", "\n", ")", "\n", "for", "_", "in", "range", "(", "num_blocks", "+", "1", ")", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "interaction_blocks", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "InteractionPPBlock", "(", "\n", "hidden_channels", ",", "\n", "int_emb_size", ",", "\n", "basis_emb_size", ",", "\n", "num_spherical", ",", "\n", "num_radial", ",", "\n", "num_before_skip", ",", "\n", "num_after_skip", ",", "\n", "act", ",", "\n", ")", "\n", "for", "_", "in", "range", "(", "num_blocks", ")", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.DimeNetPlusPlus.reset_parameters": [[262, 269], ["gnn.DimeNetPlusPlus.rbf.reset_parameters", "gnn.DimeNetPlusPlus.emb.reset_parameters", "out.reset_parameters", "interaction.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "rbf", ".", "reset_parameters", "(", ")", "\n", "self", ".", "emb", ".", "reset_parameters", "(", ")", "\n", "for", "out", "in", "self", ".", "output_blocks", ":", "\n", "            ", "out", ".", "reset_parameters", "(", ")", "\n", "", "for", "interaction", "in", "self", ".", "interaction_blocks", ":", "\n", "            ", "interaction", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.DimeNetPlusPlus.triplets": [[270, 294], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch_sparse.SparseTensor", "adj_t_row.set_value().sum().to", "col.repeat_interleave", "row.repeat_interleave", "adj_t_row.storage.col", "row.size", "adj_t_row.storage.value", "adj_t_row.storage.row", "adj_t_row.set_value().sum", "adj_t_row.set_value"], "methods", ["None"], ["", "", "def", "triplets", "(", "self", ",", "edge_index", ",", "num_nodes", ")", ":", "\n", "        ", "row", ",", "col", "=", "edge_index", "# j->i", "\n", "\n", "# row, col = col, row  # Swap because my definition of edge_index is i->j", "\n", "\n", "value", "=", "torch", ".", "arange", "(", "row", ".", "size", "(", "0", ")", ",", "device", "=", "row", ".", "device", ")", "\n", "adj_t", "=", "SparseTensor", "(", "\n", "row", "=", "col", ",", "col", "=", "row", ",", "value", "=", "value", ",", "sparse_sizes", "=", "(", "num_nodes", ",", "num_nodes", ")", "\n", ")", "\n", "adj_t_row", "=", "adj_t", "[", "row", "]", "\n", "num_triplets", "=", "adj_t_row", ".", "set_value", "(", "None", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "long", ")", "\n", "\n", "# Node indices (k->j->i) for triplets.", "\n", "idx_i", "=", "col", ".", "repeat_interleave", "(", "num_triplets", ")", "\n", "idx_j", "=", "row", ".", "repeat_interleave", "(", "num_triplets", ")", "\n", "idx_k", "=", "adj_t_row", ".", "storage", ".", "col", "(", ")", "\n", "mask", "=", "idx_i", "!=", "idx_k", "# Remove i == k triplets.", "\n", "idx_i", ",", "idx_j", ",", "idx_k", "=", "idx_i", "[", "mask", "]", ",", "idx_j", "[", "mask", "]", ",", "idx_k", "[", "mask", "]", "\n", "\n", "# Edge indices (k-j, j->i) for triplets.", "\n", "idx_kj", "=", "adj_t_row", ".", "storage", ".", "value", "(", ")", "[", "mask", "]", "\n", "idx_ji", "=", "adj_t_row", ".", "storage", ".", "row", "(", ")", "[", "mask", "]", "\n", "\n", "return", "col", ",", "row", ",", "idx_i", ",", "idx_j", ",", "idx_k", ",", "idx_kj", ",", "idx_ji", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.DimeNetPlusPlus.forward": [[295, 298], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "pos", ",", "batch", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.DimeNetPlusPlusWrap.__init__": [[301, 341], ["gnn.DimeNetPlusPlus.__init__"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_targets", ",", "\n", "hidden_channels", "=", "128", ",", "\n", "num_blocks", "=", "4", ",", "\n", "int_emb_size", "=", "64", ",", "\n", "basis_emb_size", "=", "8", ",", "\n", "out_emb_channels", "=", "256", ",", "\n", "num_spherical", "=", "7", ",", "\n", "num_radial", "=", "6", ",", "\n", "otf_graph", "=", "False", ",", "\n", "cutoff", "=", "10.0", ",", "\n", "max_num_neighbors", "=", "20", ",", "\n", "envelope_exponent", "=", "5", ",", "\n", "num_before_skip", "=", "1", ",", "\n", "num_after_skip", "=", "2", ",", "\n", "num_output_layers", "=", "3", ",", "\n", "readout", "=", "'mean'", ",", "\n", ")", ":", "\n", "        ", "self", ".", "num_targets", "=", "num_targets", "\n", "self", ".", "cutoff", "=", "cutoff", "\n", "self", ".", "max_num_neighbors", "=", "max_num_neighbors", "\n", "self", ".", "otf_graph", "=", "otf_graph", "\n", "\n", "self", ".", "readout", "=", "readout", "\n", "\n", "super", "(", "DimeNetPlusPlusWrap", ",", "self", ")", ".", "__init__", "(", "\n", "hidden_channels", "=", "hidden_channels", ",", "\n", "out_channels", "=", "num_targets", ",", "\n", "num_blocks", "=", "num_blocks", ",", "\n", "int_emb_size", "=", "int_emb_size", ",", "\n", "basis_emb_size", "=", "basis_emb_size", ",", "\n", "out_emb_channels", "=", "out_emb_channels", ",", "\n", "num_spherical", "=", "num_spherical", ",", "\n", "num_radial", "=", "num_radial", ",", "\n", "cutoff", "=", "cutoff", ",", "\n", "envelope_exponent", "=", "envelope_exponent", ",", "\n", "num_before_skip", "=", "num_before_skip", ",", "\n", "num_after_skip", "=", "num_after_skip", ",", "\n", "num_output_layers", "=", "num_output_layers", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.DimeNetPlusPlusWrap.forward": [[343, 424], ["cdvae.common.data_utils.frac_to_cart_coords", "cdvae.common.data_utils.get_pbc_distances", "gnn.DimeNetPlusPlusWrap.triplets", "pos[].detach", "pos[].detach", "torch.cross().norm", "torch.cross().norm", "torch.cross().norm", "torch.cross().norm", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "gnn.DimeNetPlusPlusWrap.rbf", "gnn.DimeNetPlusPlusWrap.sbf", "gnn.DimeNetPlusPlusWrap.emb", "zip", "cdvae.common.data_utils.radius_graph_pbc_wrapper", "data.atom_types.long", "interaction_block", "output_block", "torch_scatter.scatter", "data.atom_types.size", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "cdvae.common.data_utils.frac_to_cart_coords.size", "P.mean", "pos[].detach", "pos[].detach", "cdvae.common.data_utils.frac_to_cart_coords.size", "P.sum", "pdb.set_trace", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "P.sum", "P.mean"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.frac_to_cart_coords", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.get_pbc_distances", "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.DimeNetPlusPlus.triplets", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.radius_graph_pbc_wrapper"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "batch", "=", "data", ".", "batch", "\n", "\n", "if", "self", ".", "otf_graph", ":", "\n", "            ", "edge_index", ",", "cell_offsets", ",", "neighbors", "=", "radius_graph_pbc_wrapper", "(", "\n", "data", ",", "self", ".", "cutoff", ",", "self", ".", "max_num_neighbors", ",", "data", ".", "num_atoms", ".", "device", "\n", ")", "\n", "data", ".", "edge_index", "=", "edge_index", "\n", "data", ".", "to_jimages", "=", "cell_offsets", "\n", "data", ".", "num_bonds", "=", "neighbors", "\n", "\n", "", "pos", "=", "frac_to_cart_coords", "(", "\n", "data", ".", "frac_coords", ",", "\n", "data", ".", "lengths", ",", "\n", "data", ".", "angles", ",", "\n", "data", ".", "num_atoms", ")", "\n", "\n", "out", "=", "get_pbc_distances", "(", "\n", "data", ".", "frac_coords", ",", "\n", "data", ".", "edge_index", ",", "\n", "data", ".", "lengths", ",", "\n", "data", ".", "angles", ",", "\n", "data", ".", "to_jimages", ",", "\n", "data", ".", "num_atoms", ",", "\n", "data", ".", "num_bonds", ",", "\n", "return_offsets", "=", "True", "\n", ")", "\n", "\n", "edge_index", "=", "out", "[", "\"edge_index\"", "]", "\n", "dist", "=", "out", "[", "\"distances\"", "]", "\n", "offsets", "=", "out", "[", "\"offsets\"", "]", "\n", "\n", "j", ",", "i", "=", "edge_index", "\n", "\n", "_", ",", "_", ",", "idx_i", ",", "idx_j", ",", "idx_k", ",", "idx_kj", ",", "idx_ji", "=", "self", ".", "triplets", "(", "\n", "edge_index", ",", "num_nodes", "=", "data", ".", "atom_types", ".", "size", "(", "0", ")", "\n", ")", "\n", "\n", "# Calculate angles.", "\n", "pos_i", "=", "pos", "[", "idx_i", "]", ".", "detach", "(", ")", "\n", "pos_j", "=", "pos", "[", "idx_j", "]", ".", "detach", "(", ")", "\n", "pos_ji", ",", "pos_kj", "=", "(", "\n", "pos", "[", "idx_j", "]", ".", "detach", "(", ")", "-", "pos_i", "+", "offsets", "[", "idx_ji", "]", ",", "\n", "pos", "[", "idx_k", "]", ".", "detach", "(", ")", "-", "pos_j", "+", "offsets", "[", "idx_kj", "]", ",", "\n", ")", "\n", "\n", "a", "=", "(", "pos_ji", "*", "pos_kj", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "b", "=", "torch", ".", "cross", "(", "pos_ji", ",", "pos_kj", ")", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "angle", "=", "torch", ".", "atan2", "(", "b", ",", "a", ")", "\n", "\n", "rbf", "=", "self", ".", "rbf", "(", "dist", ")", "\n", "sbf", "=", "self", ".", "sbf", "(", "dist", ",", "angle", ",", "idx_kj", ")", "\n", "\n", "# Embedding block.", "\n", "x", "=", "self", ".", "emb", "(", "data", ".", "atom_types", ".", "long", "(", ")", ",", "rbf", ",", "i", ",", "j", ")", "\n", "P", "=", "self", ".", "output_blocks", "[", "0", "]", "(", "x", ",", "rbf", ",", "i", ",", "num_nodes", "=", "pos", ".", "size", "(", "0", ")", ")", "\n", "\n", "# Interaction blocks.", "\n", "for", "interaction_block", ",", "output_block", "in", "zip", "(", "\n", "self", ".", "interaction_blocks", ",", "self", ".", "output_blocks", "[", "1", ":", "]", "\n", ")", ":", "\n", "            ", "x", "=", "interaction_block", "(", "x", ",", "rbf", ",", "sbf", ",", "idx_kj", ",", "idx_ji", ")", "\n", "P", "+=", "output_block", "(", "x", ",", "rbf", ",", "i", ",", "num_nodes", "=", "pos", ".", "size", "(", "0", ")", ")", "\n", "\n", "# Use mean", "\n", "", "if", "batch", "is", "None", ":", "\n", "            ", "if", "self", ".", "readout", "==", "'mean'", ":", "\n", "                ", "energy", "=", "P", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "elif", "self", ".", "readout", "==", "'sum'", ":", "\n", "                ", "energy", "=", "P", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "elif", "self", ".", "readout", "==", "'cat'", ":", "\n", "                ", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "energy", "=", "torch", ".", "cat", "(", "[", "P", ".", "sum", "(", "dim", "=", "0", ")", ",", "P", ".", "mean", "(", "dim", "=", "0", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "# TODO: if want to use cat, need two lines here", "\n", "            ", "energy", "=", "scatter", "(", "P", ",", "batch", ",", "dim", "=", "0", ",", "reduce", "=", "self", ".", "readout", ")", "\n", "\n", "", "return", "energy", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.DimeNetPlusPlusWrap.num_params": [[425, 428], ["sum", "p.numel", "gnn.DimeNetPlusPlusWrap.parameters"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_params", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.GemNetTEncoder.__init__": [[433, 458], ["torch.Module.__init__", "cdvae.pl_modules.gemnet.gemnet.GemNetT"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_targets", ",", "\n", "hidden_size", ",", "\n", "otf_graph", "=", "False", ",", "\n", "cutoff", "=", "6.0", ",", "\n", "max_num_neighbors", "=", "20", ",", "\n", "scale_file", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GemNetTEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_targets", "=", "num_targets", "\n", "self", ".", "cutoff", "=", "cutoff", "\n", "self", ".", "max_num_neighbors", "=", "max_num_neighbors", "\n", "self", ".", "otf_graph", "=", "otf_graph", "\n", "\n", "self", ".", "gemnet", "=", "GemNetT", "(", "\n", "num_targets", "=", "num_targets", ",", "\n", "latent_dim", "=", "0", ",", "\n", "emb_size_atom", "=", "hidden_size", ",", "\n", "emb_size_edge", "=", "hidden_size", ",", "\n", "regress_forces", "=", "False", ",", "\n", "cutoff", "=", "self", ".", "cutoff", ",", "\n", "max_neighbors", "=", "self", ".", "max_num_neighbors", ",", "\n", "otf_graph", "=", "self", ".", "otf_graph", ",", "\n", "scale_file", "=", "scale_file", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.pl_modules.gnn.GemNetTEncoder.forward": [[460, 474], ["gnn.GemNetTEncoder.gemnet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "# (num_crysts, num_targets)", "\n", "        ", "output", "=", "self", ".", "gemnet", "(", "\n", "z", "=", "None", ",", "\n", "frac_coords", "=", "data", ".", "frac_coords", ",", "\n", "atom_types", "=", "data", ".", "atom_types", ",", "\n", "num_atoms", "=", "data", ".", "num_atoms", ",", "\n", "lengths", "=", "data", ".", "lengths", ",", "\n", "angles", "=", "data", ".", "angles", ",", "\n", "edge_index", "=", "data", ".", "edge_index", ",", "\n", "to_jimages", "=", "data", ".", "to_jimages", ",", "\n", "num_bonds", "=", "data", ".", "num_bonds", "\n", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.gemnet.GemNetT.__init__": [[99, 247], ["super().__init__", "layers.scaling.AutomaticFit.reset", "layers.radial_basis.RadialBasis", "layers.radial_basis.RadialBasis", "layers.spherical_basis.CircularBasisLayer", "layers.base_layers.Dense", "layers.efficient.EfficientInteractionDownProjection", "layers.base_layers.Dense", "layers.base_layers.Dense", "layers.embedding_block.AtomEmbedding", "torch.Linear", "torch.Linear", "layers.embedding_block.EdgeEmbedding", "range", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "int_blocks.append", "out_blocks.append", "interaction_block", "layers.atom_update_block.OutputBlock"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutomaticFit.reset"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_targets", ":", "int", ",", "\n", "latent_dim", ":", "int", ",", "\n", "num_spherical", ":", "int", "=", "7", ",", "\n", "num_radial", ":", "int", "=", "128", ",", "\n", "num_blocks", ":", "int", "=", "3", ",", "\n", "emb_size_atom", ":", "int", "=", "512", ",", "\n", "emb_size_edge", ":", "int", "=", "512", ",", "\n", "emb_size_trip", ":", "int", "=", "64", ",", "\n", "emb_size_rbf", ":", "int", "=", "16", ",", "\n", "emb_size_cbf", ":", "int", "=", "16", ",", "\n", "emb_size_bil_trip", ":", "int", "=", "64", ",", "\n", "num_before_skip", ":", "int", "=", "1", ",", "\n", "num_after_skip", ":", "int", "=", "2", ",", "\n", "num_concat", ":", "int", "=", "1", ",", "\n", "num_atom", ":", "int", "=", "3", ",", "\n", "regress_forces", ":", "bool", "=", "True", ",", "\n", "cutoff", ":", "float", "=", "6.0", ",", "\n", "max_neighbors", ":", "int", "=", "50", ",", "\n", "rbf", ":", "dict", "=", "{", "\"name\"", ":", "\"gaussian\"", "}", ",", "\n", "envelope", ":", "dict", "=", "{", "\"name\"", ":", "\"polynomial\"", ",", "\"exponent\"", ":", "5", "}", ",", "\n", "cbf", ":", "dict", "=", "{", "\"name\"", ":", "\"spherical_harmonics\"", "}", ",", "\n", "otf_graph", ":", "bool", "=", "False", ",", "\n", "output_init", ":", "str", "=", "\"HeOrthogonal\"", ",", "\n", "activation", ":", "str", "=", "\"swish\"", ",", "\n", "scale_file", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_targets", "=", "num_targets", "\n", "assert", "num_blocks", ">", "0", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "\n", "self", ".", "cutoff", "=", "cutoff", "\n", "# assert self.cutoff <= 6 or otf_graph", "\n", "\n", "self", ".", "max_neighbors", "=", "max_neighbors", "\n", "# assert self.max_neighbors == 50 or otf_graph", "\n", "\n", "self", ".", "regress_forces", "=", "regress_forces", "\n", "self", ".", "otf_graph", "=", "otf_graph", "\n", "\n", "AutomaticFit", ".", "reset", "(", ")", "# make sure that queue is empty (avoid potential error)", "\n", "\n", "### ---------------------------------- Basis Functions ---------------------------------- ###", "\n", "self", ".", "radial_basis", "=", "RadialBasis", "(", "\n", "num_radial", "=", "num_radial", ",", "\n", "cutoff", "=", "cutoff", ",", "\n", "rbf", "=", "rbf", ",", "\n", "envelope", "=", "envelope", ",", "\n", ")", "\n", "\n", "radial_basis_cbf3", "=", "RadialBasis", "(", "\n", "num_radial", "=", "num_radial", ",", "\n", "cutoff", "=", "cutoff", ",", "\n", "rbf", "=", "rbf", ",", "\n", "envelope", "=", "envelope", ",", "\n", ")", "\n", "self", ".", "cbf_basis3", "=", "CircularBasisLayer", "(", "\n", "num_spherical", ",", "\n", "radial_basis", "=", "radial_basis_cbf3", ",", "\n", "cbf", "=", "cbf", ",", "\n", "efficient", "=", "True", ",", "\n", ")", "\n", "### ------------------------------------------------------------------------------------- ###", "\n", "\n", "### ------------------------------- Share Down Projections ------------------------------ ###", "\n", "# Share down projection across all interaction blocks", "\n", "self", ".", "mlp_rbf3", "=", "Dense", "(", "\n", "num_radial", ",", "\n", "emb_size_rbf", ",", "\n", "activation", "=", "None", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "mlp_cbf3", "=", "EfficientInteractionDownProjection", "(", "\n", "num_spherical", ",", "num_radial", ",", "emb_size_cbf", "\n", ")", "\n", "\n", "# Share the dense Layer of the atom embedding block accross the interaction blocks", "\n", "self", ".", "mlp_rbf_h", "=", "Dense", "(", "\n", "num_radial", ",", "\n", "emb_size_rbf", ",", "\n", "activation", "=", "None", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "mlp_rbf_out", "=", "Dense", "(", "\n", "num_radial", ",", "\n", "emb_size_rbf", ",", "\n", "activation", "=", "None", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "### ------------------------------------------------------------------------------------- ###", "\n", "\n", "# Embedding block", "\n", "self", ".", "atom_emb", "=", "AtomEmbedding", "(", "emb_size_atom", ")", "\n", "self", ".", "atom_latent_emb", "=", "nn", ".", "Linear", "(", "emb_size_atom", "+", "latent_dim", ",", "emb_size_atom", ")", "\n", "self", ".", "edge_emb", "=", "EdgeEmbedding", "(", "\n", "emb_size_atom", ",", "num_radial", ",", "emb_size_edge", ",", "activation", "=", "activation", "\n", ")", "\n", "\n", "out_blocks", "=", "[", "]", "\n", "int_blocks", "=", "[", "]", "\n", "\n", "# Interaction Blocks", "\n", "interaction_block", "=", "InteractionBlockTripletsOnly", "# GemNet-(d)T", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "int_blocks", ".", "append", "(", "\n", "interaction_block", "(", "\n", "emb_size_atom", "=", "emb_size_atom", ",", "\n", "emb_size_edge", "=", "emb_size_edge", ",", "\n", "emb_size_trip", "=", "emb_size_trip", ",", "\n", "emb_size_rbf", "=", "emb_size_rbf", ",", "\n", "emb_size_cbf", "=", "emb_size_cbf", ",", "\n", "emb_size_bil_trip", "=", "emb_size_bil_trip", ",", "\n", "num_before_skip", "=", "num_before_skip", ",", "\n", "num_after_skip", "=", "num_after_skip", ",", "\n", "num_concat", "=", "num_concat", ",", "\n", "num_atom", "=", "num_atom", ",", "\n", "activation", "=", "activation", ",", "\n", "scale_file", "=", "scale_file", ",", "\n", "name", "=", "f\"IntBlock_{i+1}\"", ",", "\n", ")", "\n", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_blocks", "+", "1", ")", ":", "\n", "            ", "out_blocks", ".", "append", "(", "\n", "OutputBlock", "(", "\n", "emb_size_atom", "=", "emb_size_atom", ",", "\n", "emb_size_edge", "=", "emb_size_edge", ",", "\n", "emb_size_rbf", "=", "emb_size_rbf", ",", "\n", "nHidden", "=", "num_atom", ",", "\n", "num_targets", "=", "num_targets", ",", "\n", "activation", "=", "activation", ",", "\n", "output_init", "=", "output_init", ",", "\n", "direct_forces", "=", "True", ",", "\n", "scale_file", "=", "scale_file", ",", "\n", "name", "=", "f\"OutBlock_{i}\"", ",", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "out_blocks", "=", "torch", ".", "nn", ".", "ModuleList", "(", "out_blocks", ")", "\n", "self", ".", "int_blocks", "=", "torch", ".", "nn", ".", "ModuleList", "(", "int_blocks", ")", "\n", "\n", "self", ".", "shared_parameters", "=", "[", "\n", "(", "self", ".", "mlp_rbf3", ",", "self", ".", "num_blocks", ")", ",", "\n", "(", "self", ".", "mlp_cbf3", ",", "self", ".", "num_blocks", ")", ",", "\n", "(", "self", ".", "mlp_rbf_h", ",", "self", ".", "num_blocks", ")", ",", "\n", "(", "self", ".", "mlp_rbf_out", ",", "self", ".", "num_blocks", "+", "1", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.gemnet.GemNetT.get_triplets": [[249, 293], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch_sparse.SparseTensor", "adj_edges.storage.value", "adj_edges.storage.row", "torch.bincount", "torch.bincount", "torch.bincount", "torch.bincount", "utils.ragged_range", "idx_s.size", "idx_s.size"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.ragged_range"], ["", "def", "get_triplets", "(", "self", ",", "edge_index", ",", "num_atoms", ")", ":", "\n", "        ", "\"\"\"\n        Get all b->a for each edge c->a.\n        It is possible that b=c, as long as the edges are distinct.\n\n        Returns\n        -------\n        id3_ba: torch.Tensor, shape (num_triplets,)\n            Indices of input edge b->a of each triplet b->a<-c\n        id3_ca: torch.Tensor, shape (num_triplets,)\n            Indices of output edge c->a of each triplet b->a<-c\n        id3_ragged_idx: torch.Tensor, shape (num_triplets,)\n            Indices enumerating the copies of id3_ca for creating a padded matrix\n        \"\"\"", "\n", "idx_s", ",", "idx_t", "=", "edge_index", "# c->a (source=c, target=a)", "\n", "\n", "value", "=", "torch", ".", "arange", "(", "\n", "idx_s", ".", "size", "(", "0", ")", ",", "device", "=", "idx_s", ".", "device", ",", "dtype", "=", "idx_s", ".", "dtype", "\n", ")", "\n", "# Possibly contains multiple copies of the same edge (for periodic interactions)", "\n", "adj", "=", "SparseTensor", "(", "\n", "row", "=", "idx_t", ",", "\n", "col", "=", "idx_s", ",", "\n", "value", "=", "value", ",", "\n", "sparse_sizes", "=", "(", "num_atoms", ",", "num_atoms", ")", ",", "\n", ")", "\n", "adj_edges", "=", "adj", "[", "idx_t", "]", "\n", "\n", "# Edge indices (b->a, c->a) for triplets.", "\n", "id3_ba", "=", "adj_edges", ".", "storage", ".", "value", "(", ")", "\n", "id3_ca", "=", "adj_edges", ".", "storage", ".", "row", "(", ")", "\n", "\n", "# Remove self-loop triplets", "\n", "# Compare edge indices, not atom indices to correctly handle periodic interactions", "\n", "mask", "=", "id3_ba", "!=", "id3_ca", "\n", "id3_ba", "=", "id3_ba", "[", "mask", "]", "\n", "id3_ca", "=", "id3_ca", "[", "mask", "]", "\n", "\n", "# Get indices to reshape the neighbor indices b->a into a dense matrix.", "\n", "# id3_ca has to be sorted for this to work.", "\n", "num_triplets", "=", "torch", ".", "bincount", "(", "id3_ca", ",", "minlength", "=", "idx_s", ".", "size", "(", "0", ")", ")", "\n", "id3_ragged_idx", "=", "ragged_range", "(", "num_triplets", ")", "\n", "\n", "return", "id3_ba", ",", "id3_ca", ",", "id3_ragged_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.gemnet.GemNetT.select_symmetric_edges": [[294, 303], ["torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "select_symmetric_edges", "(", "self", ",", "tensor", ",", "mask", ",", "reorder_idx", ",", "inverse_neg", ")", ":", "\n", "# Mask out counter-edges", "\n", "        ", "tensor_directed", "=", "tensor", "[", "mask", "]", "\n", "# Concatenate counter-edges after normal edges", "\n", "sign", "=", "1", "-", "2", "*", "inverse_neg", "\n", "tensor_cat", "=", "torch", ".", "cat", "(", "[", "tensor_directed", ",", "sign", "*", "tensor_directed", "]", ")", "\n", "# Reorder everything so the edges of every image are consecutive", "\n", "tensor_ordered", "=", "tensor_cat", "[", "reorder_idx", "]", "\n", "return", "tensor_ordered", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.gemnet.GemNetT.reorder_symmetric_edges": [[304, 383], ["edge_index[].view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "utils.repeat_blocks", "gemnet.GemNetT.select_symmetric_edges", "gemnet.GemNetT.select_symmetric_edges", "gemnet.GemNetT.select_symmetric_edges", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.bincount", "torch.bincount", "torch.bincount", "torch.bincount", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "neighbors.size", "edge_index[].view.size", "neighbors.size", "mask[].expand"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.repeat_blocks", "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.gemnet.GemNetT.select_symmetric_edges", "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.gemnet.GemNetT.select_symmetric_edges", "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.gemnet.GemNetT.select_symmetric_edges"], ["", "def", "reorder_symmetric_edges", "(", "\n", "self", ",", "edge_index", ",", "cell_offsets", ",", "neighbors", ",", "edge_dist", ",", "edge_vector", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Reorder edges to make finding counter-directional edges easier.\n\n        Some edges are only present in one direction in the data,\n        since every atom has a maximum number of neighbors. Since we only use i->j\n        edges here, we lose some j->i edges and add others by\n        making it symmetric.\n        We could fix this by merging edge_index with its counter-edges,\n        including the cell_offsets, and then running torch.unique.\n        But this does not seem worth it.\n        \"\"\"", "\n", "\n", "# Generate mask", "\n", "mask_sep_atoms", "=", "edge_index", "[", "0", "]", "<", "edge_index", "[", "1", "]", "\n", "# Distinguish edges between the same (periodic) atom by ordering the cells", "\n", "cell_earlier", "=", "(", "\n", "(", "cell_offsets", "[", ":", ",", "0", "]", "<", "0", ")", "\n", "|", "(", "(", "cell_offsets", "[", ":", ",", "0", "]", "==", "0", ")", "&", "(", "cell_offsets", "[", ":", ",", "1", "]", "<", "0", ")", ")", "\n", "|", "(", "\n", "(", "cell_offsets", "[", ":", ",", "0", "]", "==", "0", ")", "\n", "&", "(", "cell_offsets", "[", ":", ",", "1", "]", "==", "0", ")", "\n", "&", "(", "cell_offsets", "[", ":", ",", "2", "]", "<", "0", ")", "\n", ")", "\n", ")", "\n", "mask_same_atoms", "=", "edge_index", "[", "0", "]", "==", "edge_index", "[", "1", "]", "\n", "mask_same_atoms", "&=", "cell_earlier", "\n", "mask", "=", "mask_sep_atoms", "|", "mask_same_atoms", "\n", "\n", "# Mask out counter-edges", "\n", "edge_index_new", "=", "edge_index", "[", "mask", "[", "None", ",", ":", "]", ".", "expand", "(", "2", ",", "-", "1", ")", "]", ".", "view", "(", "2", ",", "-", "1", ")", "\n", "\n", "# Concatenate counter-edges after normal edges", "\n", "edge_index_cat", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "edge_index_new", ",", "\n", "torch", ".", "stack", "(", "[", "edge_index_new", "[", "1", "]", ",", "edge_index_new", "[", "0", "]", "]", ",", "dim", "=", "0", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "\n", "# Count remaining edges per image", "\n", "batch_edge", "=", "torch", ".", "repeat_interleave", "(", "\n", "torch", ".", "arange", "(", "neighbors", ".", "size", "(", "0", ")", ",", "device", "=", "edge_index", ".", "device", ")", ",", "\n", "neighbors", ",", "\n", ")", "\n", "batch_edge", "=", "batch_edge", "[", "mask", "]", "\n", "neighbors_new", "=", "2", "*", "torch", ".", "bincount", "(", "\n", "batch_edge", ",", "minlength", "=", "neighbors", ".", "size", "(", "0", ")", "\n", ")", "\n", "\n", "# Create indexing array", "\n", "edge_reorder_idx", "=", "repeat_blocks", "(", "\n", "neighbors_new", "//", "2", ",", "\n", "repeats", "=", "2", ",", "\n", "continuous_indexing", "=", "True", ",", "\n", "repeat_inc", "=", "edge_index_new", ".", "size", "(", "1", ")", ",", "\n", ")", "\n", "\n", "# Reorder everything so the edges of every image are consecutive", "\n", "edge_index_new", "=", "edge_index_cat", "[", ":", ",", "edge_reorder_idx", "]", "\n", "cell_offsets_new", "=", "self", ".", "select_symmetric_edges", "(", "\n", "cell_offsets", ",", "mask", ",", "edge_reorder_idx", ",", "True", "\n", ")", "\n", "edge_dist_new", "=", "self", ".", "select_symmetric_edges", "(", "\n", "edge_dist", ",", "mask", ",", "edge_reorder_idx", ",", "False", "\n", ")", "\n", "edge_vector_new", "=", "self", ".", "select_symmetric_edges", "(", "\n", "edge_vector", ",", "mask", ",", "edge_reorder_idx", ",", "True", "\n", ")", "\n", "\n", "return", "(", "\n", "edge_index_new", ",", "\n", "cell_offsets_new", ",", "\n", "neighbors_new", ",", "\n", "edge_dist_new", ",", "\n", "edge_vector_new", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.gemnet.GemNetT.select_edges": [[385, 412], ["torch.any", "torch.any", "torch.any", "torch.any", "utils.mask_neighbors", "pdb.set_trace"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.mask_neighbors"], ["", "def", "select_edges", "(", "\n", "self", ",", "\n", "edge_index", ",", "\n", "cell_offsets", ",", "\n", "neighbors", ",", "\n", "edge_dist", ",", "\n", "edge_vector", ",", "\n", "cutoff", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "cutoff", "is", "not", "None", ":", "\n", "            ", "edge_mask", "=", "edge_dist", "<=", "cutoff", "\n", "\n", "edge_index", "=", "edge_index", "[", ":", ",", "edge_mask", "]", "\n", "cell_offsets", "=", "cell_offsets", "[", "edge_mask", "]", "\n", "neighbors", "=", "mask_neighbors", "(", "neighbors", ",", "edge_mask", ")", "\n", "edge_dist", "=", "edge_dist", "[", "edge_mask", "]", "\n", "edge_vector", "=", "edge_vector", "[", "edge_mask", "]", "\n", "\n", "", "empty_image", "=", "neighbors", "==", "0", "\n", "if", "torch", ".", "any", "(", "empty_image", ")", ":", "\n", "            ", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "# raise ValueError(", "\n", "#     f\"An image has no neighbors: id={data.id[empty_image]}, \"", "\n", "#     f\"sid={data.sid[empty_image]}, fid={data.fid[empty_image]}\"", "\n", "# )", "\n", "", "return", "edge_index", ",", "cell_offsets", ",", "neighbors", ",", "edge_dist", ",", "edge_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.gemnet.GemNetT.generate_interaction_graph": [[413, 496], ["cdvae.common.data_utils.get_pbc_distances", "gemnet.GemNetT.reorder_symmetric_edges", "utils.repeat_blocks", "gemnet.GemNetT.get_triplets", "cdvae.common.data_utils.radius_graph_pbc", "num_atoms.sum"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.get_pbc_distances", "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.gemnet.GemNetT.reorder_symmetric_edges", "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.repeat_blocks", "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.gemnet.GemNetT.get_triplets", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.radius_graph_pbc"], ["", "def", "generate_interaction_graph", "(", "self", ",", "cart_coords", ",", "lengths", ",", "angles", ",", "\n", "num_atoms", ",", "edge_index", ",", "to_jimages", ",", "\n", "num_bonds", ")", ":", "\n", "\n", "        ", "if", "self", ".", "otf_graph", ":", "\n", "            ", "edge_index", ",", "to_jimages", ",", "num_bonds", "=", "radius_graph_pbc", "(", "\n", "cart_coords", ",", "lengths", ",", "angles", ",", "num_atoms", ",", "self", ".", "cutoff", ",", "self", ".", "max_neighbors", ",", "\n", "device", "=", "num_atoms", ".", "device", ")", "\n", "\n", "# Switch the indices, so the second one becomes the target index,", "\n", "# over which we can efficiently aggregate.", "\n", "", "out", "=", "get_pbc_distances", "(", "\n", "cart_coords", ",", "\n", "edge_index", ",", "\n", "lengths", ",", "\n", "angles", ",", "\n", "to_jimages", ",", "\n", "num_atoms", ",", "\n", "num_bonds", ",", "\n", "coord_is_cart", "=", "True", ",", "\n", "return_offsets", "=", "True", ",", "\n", "return_distance_vec", "=", "True", ",", "\n", ")", "\n", "\n", "edge_index", "=", "out", "[", "\"edge_index\"", "]", "\n", "D_st", "=", "out", "[", "\"distances\"", "]", "\n", "# These vectors actually point in the opposite direction.", "\n", "# But we want to use col as idx_t for efficient aggregation.", "\n", "V_st", "=", "-", "out", "[", "\"distance_vec\"", "]", "/", "D_st", "[", ":", ",", "None", "]", "\n", "# offsets_ca = -out[\"offsets\"]  # a - c + offset", "\n", "\n", "# # Mask interaction edges if required", "\n", "# if self.otf_graph or np.isclose(self.cutoff, 6):", "\n", "#     select_cutoff = None", "\n", "# else:", "\n", "#     select_cutoff = self.cutoff", "\n", "\n", "\n", "## Tian: Ignore these select edges for now", "\n", "\n", "# (edge_index, cell_offsets, neighbors, D_st, V_st,) = self.select_edges(", "\n", "#     edge_index=edge_index,", "\n", "#     cell_offsets=to_jimages,", "\n", "#     neighbors=num_bonds,", "\n", "#     edge_dist=D_st,", "\n", "#     edge_vector=V_st,", "\n", "#     cutoff=select_cutoff,", "\n", "# )", "\n", "\n", "(", "\n", "edge_index", ",", "\n", "cell_offsets", ",", "\n", "neighbors", ",", "\n", "D_st", ",", "\n", "V_st", ",", "\n", ")", "=", "self", ".", "reorder_symmetric_edges", "(", "\n", "edge_index", ",", "to_jimages", ",", "num_bonds", ",", "D_st", ",", "V_st", "\n", ")", "\n", "\n", "# Indices for swapping c->a and a->c (for symmetric MP)", "\n", "block_sizes", "=", "neighbors", "//", "2", "\n", "id_swap", "=", "repeat_blocks", "(", "\n", "block_sizes", ",", "\n", "repeats", "=", "2", ",", "\n", "continuous_indexing", "=", "False", ",", "\n", "start_idx", "=", "block_sizes", "[", "0", "]", ",", "\n", "block_inc", "=", "block_sizes", "[", ":", "-", "1", "]", "+", "block_sizes", "[", "1", ":", "]", ",", "\n", "repeat_inc", "=", "-", "block_sizes", ",", "\n", ")", "\n", "\n", "id3_ba", ",", "id3_ca", ",", "id3_ragged_idx", "=", "self", ".", "get_triplets", "(", "\n", "edge_index", ",", "num_atoms", "=", "num_atoms", ".", "sum", "(", ")", ",", "\n", ")", "\n", "\n", "return", "(", "\n", "edge_index", ",", "\n", "neighbors", ",", "\n", "D_st", ",", "\n", "V_st", ",", "\n", "id_swap", ",", "\n", "id3_ba", ",", "\n", "id3_ca", ",", "\n", "id3_ragged_idx", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.gemnet.GemNetT.forward": [[498, 604], ["cdvae.common.data_utils.frac_to_cart_coords", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "gemnet.GemNetT.generate_interaction_graph", "utils.inner_product_normalized", "gemnet.GemNetT.cbf_basis3", "gemnet.GemNetT.radial_basis", "gemnet.GemNetT.atom_emb", "gemnet.GemNetT.edge_emb", "gemnet.GemNetT.mlp_rbf3", "gemnet.GemNetT.mlp_cbf3", "gemnet.GemNetT.mlp_rbf_h", "gemnet.GemNetT.mlp_rbf_out", "range", "torch_scatter.scatter", "z.repeat_interleave", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gemnet.GemNetT.atom_latent_emb", "torch.max", "torch.max", "torch.max", "torch.max", "torch_scatter.scatter", "F_t.squeeze.squeeze.squeeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch_scatter.scatter.size", "num_atoms.size", "num_atoms.sum"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.frac_to_cart_coords", "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.gemnet.GemNetT.generate_interaction_graph", "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.inner_product_normalized"], ["", "def", "forward", "(", "self", ",", "z", ",", "frac_coords", ",", "atom_types", ",", "num_atoms", ",", "lengths", ",", "angles", ",", "\n", "edge_index", ",", "to_jimages", ",", "num_bonds", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            z: (N_cryst, num_latent)\n            frac_coords: (N_atoms, 3)\n            atom_types: (N_atoms, ), need to use atomic number e.g. H = 1\n            num_atoms: (N_cryst,)\n            lengths: (N_cryst, 3)\n            angles: (N_cryst, 3)\n        returns:\n            atom_frac_coords: (N_atoms, 3)\n            atom_types: (N_atoms, MAX_ATOMIC_NUM)\n        \"\"\"", "\n", "pos", "=", "frac_to_cart_coords", "(", "frac_coords", ",", "lengths", ",", "angles", ",", "num_atoms", ")", "\n", "batch", "=", "torch", ".", "arange", "(", "num_atoms", ".", "size", "(", "0", ")", ",", "\n", "device", "=", "num_atoms", ".", "device", ")", ".", "repeat_interleave", "(", "\n", "num_atoms", ",", "dim", "=", "0", ")", "\n", "atomic_numbers", "=", "atom_types", "\n", "\n", "(", "\n", "edge_index", ",", "\n", "neighbors", ",", "\n", "D_st", ",", "\n", "V_st", ",", "\n", "id_swap", ",", "\n", "id3_ba", ",", "\n", "id3_ca", ",", "\n", "id3_ragged_idx", ",", "\n", ")", "=", "self", ".", "generate_interaction_graph", "(", "\n", "pos", ",", "lengths", ",", "angles", ",", "num_atoms", ",", "edge_index", ",", "to_jimages", ",", "\n", "num_bonds", ")", "\n", "idx_s", ",", "idx_t", "=", "edge_index", "\n", "\n", "# Calculate triplet angles", "\n", "cos\u03c6_cab", "=", "inner_product_normalized", "(", "V_st", "[", "id3_ca", "]", ",", "V_st", "[", "id3_ba", "]", ")", "\n", "rad_cbf3", ",", "cbf3", "=", "self", ".", "cbf_basis3", "(", "D_st", ",", "cos\u03c6_cab", ",", "id3_ca", ")", "\n", "\n", "rbf", "=", "self", ".", "radial_basis", "(", "D_st", ")", "\n", "\n", "# Embedding block", "\n", "h", "=", "self", ".", "atom_emb", "(", "atomic_numbers", ")", "\n", "# Merge z and atom embedding", "\n", "if", "z", "is", "not", "None", ":", "\n", "            ", "z_per_atom", "=", "z", ".", "repeat_interleave", "(", "num_atoms", ",", "dim", "=", "0", ")", "\n", "h", "=", "torch", ".", "cat", "(", "[", "h", ",", "z_per_atom", "]", ",", "dim", "=", "1", ")", "\n", "h", "=", "self", ".", "atom_latent_emb", "(", "h", ")", "\n", "# (nAtoms, emb_size_atom)", "\n", "", "m", "=", "self", ".", "edge_emb", "(", "h", ",", "rbf", ",", "idx_s", ",", "idx_t", ")", "# (nEdges, emb_size_edge)", "\n", "\n", "rbf3", "=", "self", ".", "mlp_rbf3", "(", "rbf", ")", "\n", "cbf3", "=", "self", ".", "mlp_cbf3", "(", "rad_cbf3", ",", "cbf3", ",", "id3_ca", ",", "id3_ragged_idx", ")", "\n", "\n", "rbf_h", "=", "self", ".", "mlp_rbf_h", "(", "rbf", ")", "\n", "rbf_out", "=", "self", ".", "mlp_rbf_out", "(", "rbf", ")", "\n", "\n", "E_t", ",", "F_st", "=", "self", ".", "out_blocks", "[", "0", "]", "(", "h", ",", "m", ",", "rbf_out", ",", "idx_t", ")", "\n", "# (nAtoms, num_targets), (nEdges, num_targets)", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "# Interaction block", "\n", "            ", "h", ",", "m", "=", "self", ".", "int_blocks", "[", "i", "]", "(", "\n", "h", "=", "h", ",", "\n", "m", "=", "m", ",", "\n", "rbf3", "=", "rbf3", ",", "\n", "cbf3", "=", "cbf3", ",", "\n", "id3_ragged_idx", "=", "id3_ragged_idx", ",", "\n", "id_swap", "=", "id_swap", ",", "\n", "id3_ba", "=", "id3_ba", ",", "\n", "id3_ca", "=", "id3_ca", ",", "\n", "rbf_h", "=", "rbf_h", ",", "\n", "idx_s", "=", "idx_s", ",", "\n", "idx_t", "=", "idx_t", ",", "\n", ")", "# (nAtoms, emb_size_atom), (nEdges, emb_size_edge)", "\n", "\n", "E", ",", "F", "=", "self", ".", "out_blocks", "[", "i", "+", "1", "]", "(", "h", ",", "m", ",", "rbf_out", ",", "idx_t", ")", "\n", "# (nAtoms, num_targets), (nEdges, num_targets)", "\n", "F_st", "+=", "F", "\n", "E_t", "+=", "E", "\n", "\n", "", "nMolecules", "=", "torch", ".", "max", "(", "batch", ")", "+", "1", "\n", "\n", "# always use mean aggregation", "\n", "E_t", "=", "scatter", "(", "\n", "E_t", ",", "batch", ",", "dim", "=", "0", ",", "dim_size", "=", "nMolecules", ",", "reduce", "=", "\"mean\"", "\n", ")", "# (nMolecules, num_targets)", "\n", "\n", "if", "self", ".", "regress_forces", ":", "\n", "# if predict forces, there should be only 1 energy", "\n", "            ", "assert", "E_t", ".", "size", "(", "1", ")", "==", "1", "\n", "# map forces in edge directions", "\n", "F_st_vec", "=", "F_st", "[", ":", ",", ":", ",", "None", "]", "*", "V_st", "[", ":", ",", "None", ",", ":", "]", "\n", "# (nEdges, num_targets, 3)", "\n", "F_t", "=", "scatter", "(", "\n", "F_st_vec", ",", "\n", "idx_t", ",", "\n", "dim", "=", "0", ",", "\n", "dim_size", "=", "num_atoms", ".", "sum", "(", ")", ",", "\n", "reduce", "=", "\"add\"", ",", "\n", ")", "# (nAtoms, num_targets, 3)", "\n", "F_t", "=", "F_t", ".", "squeeze", "(", "1", ")", "# (nAtoms, 3)", "\n", "\n", "# return h for predicting atom types", "\n", "return", "h", ",", "F_t", "# (nMolecules, num_targets), (nAtoms, 3)", "\n", "", "else", ":", "\n", "            ", "return", "E_t", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.gemnet.GemNetT.num_params": [[605, 608], ["sum", "p.numel", "gemnet.GemNetT.parameters"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "num_params", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.initializers._standardize": [[11, 25], ["torch.var_mean", "len"], "function", ["None"], ["def", "_standardize", "(", "kernel", ")", ":", "\n", "    ", "\"\"\"\n    Makes sure that N*Var(W) = 1 and E[W] = 0\n    \"\"\"", "\n", "eps", "=", "1e-6", "\n", "\n", "if", "len", "(", "kernel", ".", "shape", ")", "==", "3", ":", "\n", "        ", "axis", "=", "[", "0", ",", "1", "]", "# last dimension is output dimension", "\n", "", "else", ":", "\n", "        ", "axis", "=", "1", "\n", "\n", "", "var", ",", "mean", "=", "torch", ".", "var_mean", "(", "kernel", ",", "dim", "=", "axis", ",", "unbiased", "=", "True", ",", "keepdim", "=", "True", ")", "\n", "kernel", "=", "(", "kernel", "-", "mean", ")", "/", "(", "var", "+", "eps", ")", "**", "0.5", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.initializers.he_orthogonal_init": [[27, 48], ["torch.nn.init.orthogonal_", "len", "torch.nn.init.orthogonal_.shape[].numel", "torch.no_grad", "initializers._standardize"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.initializers._standardize"], ["", "def", "he_orthogonal_init", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Generate a weight matrix with variance according to He (Kaiming) initialization.\n    Based on a random (semi-)orthogonal matrix neural networks\n    are expected to learn better when features are decorrelated\n    (stated by eg. \"Reducing overfitting in deep networks by decorrelating representations\",\n    \"Dropout: a simple way to prevent neural networks from overfitting\",\n    \"Exact solutions to the nonlinear dynamics of learning in deep linear neural networks\")\n    \"\"\"", "\n", "tensor", "=", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "tensor", ")", "\n", "\n", "if", "len", "(", "tensor", ".", "shape", ")", "==", "3", ":", "\n", "        ", "fan_in", "=", "tensor", ".", "shape", "[", ":", "-", "1", "]", ".", "numel", "(", ")", "\n", "", "else", ":", "\n", "        ", "fan_in", "=", "tensor", ".", "shape", "[", "1", "]", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "tensor", ".", "data", "=", "_standardize", "(", "tensor", ".", "data", ")", "\n", "tensor", ".", "data", "*=", "(", "1", "/", "fan_in", ")", "**", "0.5", "\n", "\n", "", "return", "tensor", "\n", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.read_json": [[14, 22], ["path.endswith", "UserWarning", "open", "json.load"], "function", ["None"], ["def", "read_json", "(", "path", ")", ":", "\n", "    ", "\"\"\"\"\"\"", "\n", "if", "not", "path", ".", "endswith", "(", "\".json\"", ")", ":", "\n", "        ", "raise", "UserWarning", "(", "f\"Path {path} is not a json-path.\"", ")", "\n", "\n", "", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "content", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.update_json": [[24, 32], ["utils.read_json", "read_json.update", "utils.write_json", "path.endswith", "UserWarning"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.read_json", "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.write_json"], ["", "def", "update_json", "(", "path", ",", "data", ")", ":", "\n", "    ", "\"\"\"\"\"\"", "\n", "if", "not", "path", ".", "endswith", "(", "\".json\"", ")", ":", "\n", "        ", "raise", "UserWarning", "(", "f\"Path {path} is not a json-path.\"", ")", "\n", "\n", "", "content", "=", "read_json", "(", "path", ")", "\n", "content", ".", "update", "(", "data", ")", "\n", "write_json", "(", "path", ",", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.write_json": [[34, 41], ["path.endswith", "UserWarning", "open", "json.dump"], "function", ["None"], ["", "def", "write_json", "(", "path", ",", "data", ")", ":", "\n", "    ", "\"\"\"\"\"\"", "\n", "if", "not", "path", ".", "endswith", "(", "\".json\"", ")", ":", "\n", "        ", "raise", "UserWarning", "(", "f\"Path {path} is not a json-path.\"", ")", "\n", "\n", "", "with", "open", "(", "path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "f", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.read_value_json": [[43, 51], ["utils.read_json", "read_json.keys"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.read_json"], ["", "", "def", "read_value_json", "(", "path", ",", "key", ")", ":", "\n", "    ", "\"\"\"\"\"\"", "\n", "content", "=", "read_json", "(", "path", ")", "\n", "\n", "if", "key", "in", "content", ".", "keys", "(", ")", ":", "\n", "        ", "return", "content", "[", "key", "]", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.ragged_range": [[53, 83], ["torch.ones", "sizes[].cumsum", "torch.ones.cumsum", "torch.masked_select.dim", "torch.masked_select.sum", "torch.masked_select.new_empty", "torch.all", "torch.masked_select", "torch.masked_select.sum"], "function", ["None"], ["", "", "def", "ragged_range", "(", "sizes", ")", ":", "\n", "    ", "\"\"\"Multiple concatenated ranges.\n\n    Examples\n    --------\n        sizes = [1 4 2 3]\n        Return: [0  0 1 2 3  0 1  0 1 2]\n    \"\"\"", "\n", "assert", "sizes", ".", "dim", "(", ")", "==", "1", "\n", "if", "sizes", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "return", "sizes", ".", "new_empty", "(", "0", ")", "\n", "\n", "# Remove 0 sizes", "\n", "", "sizes_nonzero", "=", "sizes", ">", "0", "\n", "if", "not", "torch", ".", "all", "(", "sizes_nonzero", ")", ":", "\n", "        ", "sizes", "=", "torch", ".", "masked_select", "(", "sizes", ",", "sizes_nonzero", ")", "\n", "\n", "# Initialize indexing array with ones as we need to setup incremental indexing", "\n", "# within each group when cumulatively summed at the final stage.", "\n", "", "id_steps", "=", "torch", ".", "ones", "(", "sizes", ".", "sum", "(", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "sizes", ".", "device", ")", "\n", "id_steps", "[", "0", "]", "=", "0", "\n", "insert_index", "=", "sizes", "[", ":", "-", "1", "]", ".", "cumsum", "(", "0", ")", "\n", "insert_val", "=", "(", "1", "-", "sizes", ")", "[", ":", "-", "1", "]", "\n", "\n", "# Assign index-offsetting values", "\n", "id_steps", "[", "insert_index", "]", "=", "insert_val", "\n", "\n", "# Finally index into input array for the group repeated o/p", "\n", "res", "=", "id_steps", ".", "cumsum", "(", "0", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.repeat_blocks": [[85, 228], ["all", "isinstance", "torch.repeat_interleave", "torch.ones", "sizes[].cumsum", "isinstance", "isinstance", "torch.ones.cumsum", "torch.cat.dim", "torch.all", "torch.masked_select", "isinstance", "isinstance", "all", "torch.arange", "isinstance", "torch.any", "torch.cat", "isinstance", "isinstance", "torch.masked_select", "torch.masked_select", "torch.cat.new_ones", "torch.cat.new_zeros", "torch.cat", "torch.cat", "isinstance", "isinstance", "len", "torch_scatter.segment_csr", "torch_scatter.segment_csr", "torch.cat", "torch.cat", "torch.cat.new_zeros", "diffs.cumsum"], "function", ["None"], ["", "def", "repeat_blocks", "(", "\n", "sizes", ",", "\n", "repeats", ",", "\n", "continuous_indexing", "=", "True", ",", "\n", "start_idx", "=", "0", ",", "\n", "block_inc", "=", "0", ",", "\n", "repeat_inc", "=", "0", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Repeat blocks of indices.\n    Adapted from https://stackoverflow.com/questions/51154989/numpy-vectorized-function-to-repeat-blocks-of-consecutive-elements\n\n    continuous_indexing: Whether to keep increasing the index after each block\n    start_idx: Starting index\n    block_inc: Number to increment by after each block,\n               either global or per block. Shape: len(sizes) - 1\n    repeat_inc: Number to increment by after each repetition,\n                either global or per block\n\n    Examples\n    --------\n        sizes = [1,3,2] ; repeats = [3,2,3] ; continuous_indexing = False\n        Return: [0 0 0  0 1 2 0 1 2  0 1 0 1 0 1]\n        sizes = [1,3,2] ; repeats = [3,2,3] ; continuous_indexing = True\n        Return: [0 0 0  1 2 3 1 2 3  4 5 4 5 4 5]\n        sizes = [1,3,2] ; repeats = [3,2,3] ; continuous_indexing = True ;\n        repeat_inc = 4\n        Return: [0 4 8  1 2 3 5 6 7  4 5 8 9 12 13]\n        sizes = [1,3,2] ; repeats = [3,2,3] ; continuous_indexing = True ;\n        start_idx = 5\n        Return: [5 5 5  6 7 8 6 7 8  9 10 9 10 9 10]\n        sizes = [1,3,2] ; repeats = [3,2,3] ; continuous_indexing = True ;\n        block_inc = 1\n        Return: [0 0 0  2 3 4 2 3 4  6 7 6 7 6 7]\n        sizes = [0,3,2] ; repeats = [3,2,3] ; continuous_indexing = True\n        Return: [0 1 2 0 1 2  3 4 3 4 3 4]\n        sizes = [2,3,2] ; repeats = [2,0,2] ; continuous_indexing = True\n        Return: [0 1 0 1  5 6 5 6]\n    \"\"\"", "\n", "assert", "sizes", ".", "dim", "(", ")", "==", "1", "\n", "assert", "all", "(", "sizes", ">=", "0", ")", "\n", "\n", "# Remove 0 sizes", "\n", "sizes_nonzero", "=", "sizes", ">", "0", "\n", "if", "not", "torch", ".", "all", "(", "sizes_nonzero", ")", ":", "\n", "        ", "assert", "block_inc", "==", "0", "# Implementing this is not worth the effort", "\n", "sizes", "=", "torch", ".", "masked_select", "(", "sizes", ",", "sizes_nonzero", ")", "\n", "if", "isinstance", "(", "repeats", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "repeats", "=", "torch", ".", "masked_select", "(", "repeats", ",", "sizes_nonzero", ")", "\n", "", "if", "isinstance", "(", "repeat_inc", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "repeat_inc", "=", "torch", ".", "masked_select", "(", "repeat_inc", ",", "sizes_nonzero", ")", "\n", "\n", "", "", "if", "isinstance", "(", "repeats", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "assert", "all", "(", "repeats", ">=", "0", ")", "\n", "insert_dummy", "=", "repeats", "[", "0", "]", "==", "0", "\n", "if", "insert_dummy", ":", "\n", "            ", "one", "=", "sizes", ".", "new_ones", "(", "1", ")", "\n", "zero", "=", "sizes", ".", "new_zeros", "(", "1", ")", "\n", "sizes", "=", "torch", ".", "cat", "(", "(", "one", ",", "sizes", ")", ")", "\n", "repeats", "=", "torch", ".", "cat", "(", "(", "one", ",", "repeats", ")", ")", "\n", "if", "isinstance", "(", "block_inc", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "block_inc", "=", "torch", ".", "cat", "(", "(", "zero", ",", "block_inc", ")", ")", "\n", "", "if", "isinstance", "(", "repeat_inc", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "repeat_inc", "=", "torch", ".", "cat", "(", "(", "zero", ",", "repeat_inc", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "assert", "repeats", ">=", "0", "\n", "insert_dummy", "=", "False", "\n", "\n", "# Get repeats for each group using group lengths/sizes", "\n", "", "r1", "=", "torch", ".", "repeat_interleave", "(", "\n", "torch", ".", "arange", "(", "len", "(", "sizes", ")", ",", "device", "=", "sizes", ".", "device", ")", ",", "repeats", "\n", ")", "\n", "\n", "# Get total size of output array, as needed to initialize output indexing array", "\n", "N", "=", "(", "sizes", "*", "repeats", ")", ".", "sum", "(", ")", "\n", "\n", "# Initialize indexing array with ones as we need to setup incremental indexing", "\n", "# within each group when cumulatively summed at the final stage.", "\n", "# Two steps here:", "\n", "# 1. Within each group, we have multiple sequences, so setup the offsetting", "\n", "# at each sequence lengths by the seq. lengths preceding those.", "\n", "id_ar", "=", "torch", ".", "ones", "(", "N", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "sizes", ".", "device", ")", "\n", "id_ar", "[", "0", "]", "=", "0", "\n", "insert_index", "=", "sizes", "[", "r1", "[", ":", "-", "1", "]", "]", ".", "cumsum", "(", "0", ")", "\n", "insert_val", "=", "(", "1", "-", "sizes", ")", "[", "r1", "[", ":", "-", "1", "]", "]", "\n", "\n", "if", "isinstance", "(", "repeats", ",", "torch", ".", "Tensor", ")", "and", "torch", ".", "any", "(", "repeats", "==", "0", ")", ":", "\n", "        ", "diffs", "=", "r1", "[", "1", ":", "]", "-", "r1", "[", ":", "-", "1", "]", "\n", "indptr", "=", "torch", ".", "cat", "(", "(", "sizes", ".", "new_zeros", "(", "1", ")", ",", "diffs", ".", "cumsum", "(", "0", ")", ")", ")", "\n", "if", "continuous_indexing", ":", "\n", "# If a group was skipped (repeats=0) we need to add its size", "\n", "            ", "insert_val", "+=", "segment_csr", "(", "sizes", "[", ":", "r1", "[", "-", "1", "]", "]", ",", "indptr", ",", "reduce", "=", "\"sum\"", ")", "\n", "\n", "# Add block increments", "\n", "", "if", "isinstance", "(", "block_inc", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "insert_val", "+=", "segment_csr", "(", "\n", "block_inc", "[", ":", "r1", "[", "-", "1", "]", "]", ",", "indptr", ",", "reduce", "=", "\"sum\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "insert_val", "+=", "block_inc", "*", "(", "indptr", "[", "1", ":", "]", "-", "indptr", "[", ":", "-", "1", "]", ")", "\n", "if", "insert_dummy", ":", "\n", "                ", "insert_val", "[", "0", "]", "-=", "block_inc", "\n", "", "", "", "else", ":", "\n", "        ", "idx", "=", "r1", "[", "1", ":", "]", "!=", "r1", "[", ":", "-", "1", "]", "\n", "if", "continuous_indexing", ":", "\n", "# 2. For each group, make sure the indexing starts from the next group's", "\n", "# first element. So, simply assign 1s there.", "\n", "            ", "insert_val", "[", "idx", "]", "=", "1", "\n", "\n", "# Add block increments", "\n", "", "insert_val", "[", "idx", "]", "+=", "block_inc", "\n", "\n", "# Add repeat_inc within each group", "\n", "", "if", "isinstance", "(", "repeat_inc", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "insert_val", "+=", "repeat_inc", "[", "r1", "[", ":", "-", "1", "]", "]", "\n", "if", "isinstance", "(", "repeats", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "repeat_inc_inner", "=", "repeat_inc", "[", "repeats", ">", "0", "]", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "repeat_inc_inner", "=", "repeat_inc", "[", ":", "-", "1", "]", "\n", "", "", "else", ":", "\n", "        ", "insert_val", "+=", "repeat_inc", "\n", "repeat_inc_inner", "=", "repeat_inc", "\n", "\n", "# Subtract the increments between groups", "\n", "", "if", "isinstance", "(", "repeats", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "repeats_inner", "=", "repeats", "[", "repeats", ">", "0", "]", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "repeats_inner", "=", "repeats", "\n", "", "insert_val", "[", "r1", "[", "1", ":", "]", "!=", "r1", "[", ":", "-", "1", "]", "]", "-=", "repeat_inc_inner", "*", "repeats_inner", "\n", "\n", "# Assign index-offsetting values", "\n", "id_ar", "[", "insert_index", "]", "=", "insert_val", "\n", "\n", "if", "insert_dummy", ":", "\n", "        ", "id_ar", "=", "id_ar", "[", "1", ":", "]", "\n", "if", "continuous_indexing", ":", "\n", "            ", "id_ar", "[", "0", "]", "-=", "1", "\n", "\n", "# Set start index now, in case of insertion due to leading repeats=0", "\n", "", "", "id_ar", "[", "0", "]", "+=", "start_idx", "\n", "\n", "# Finally index into input array for the group repeated o/p", "\n", "res", "=", "id_ar", ".", "cumsum", "(", "0", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.calculate_interatomic_vectors": [[230, 265], ["torch.sqrt", "torch.sum"], "function", ["None"], ["", "def", "calculate_interatomic_vectors", "(", "R", ",", "id_s", ",", "id_t", ",", "offsets_st", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the vectors connecting the given atom pairs,\n    considering offsets from periodic boundary conditions (PBC).\n\n    Parameters\n    ----------\n        R: Tensor, shape = (nAtoms, 3)\n            Atom positions.\n        id_s: Tensor, shape = (nEdges,)\n            Indices of the source atom of the edges.\n        id_t: Tensor, shape = (nEdges,)\n            Indices of the target atom of the edges.\n        offsets_st: Tensor, shape = (nEdges,)\n            PBC offsets of the edges.\n            Subtract this from the correct direction.\n\n    Returns\n    -------\n        (D_st, V_st): tuple\n            D_st: Tensor, shape = (nEdges,)\n                Distance from atom t to s.\n            V_st: Tensor, shape = (nEdges,)\n                Unit direction from atom t to s.\n    \"\"\"", "\n", "Rs", "=", "R", "[", "id_s", "]", "\n", "Rt", "=", "R", "[", "id_t", "]", "\n", "# ReLU prevents negative numbers in sqrt", "\n", "if", "offsets_st", "is", "None", ":", "\n", "        ", "V_st", "=", "Rt", "-", "Rs", "# s -> t", "\n", "", "else", ":", "\n", "        ", "V_st", "=", "Rt", "-", "Rs", "+", "offsets_st", "# s -> t", "\n", "", "D_st", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "V_st", "**", "2", ",", "dim", "=", "1", ")", ")", "\n", "V_st", "=", "V_st", "/", "D_st", "[", "...", ",", "None", "]", "\n", "return", "D_st", ",", "V_st", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.inner_product_normalized": [[267, 273], ["torch.sum().clamp", "torch.sum"], "function", ["None"], ["", "def", "inner_product_normalized", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the inner product between the given normalized vectors,\n    giving a result between -1 and 1.\n    \"\"\"", "\n", "return", "torch", ".", "sum", "(", "x", "*", "y", ",", "dim", "=", "-", "1", ")", ".", "clamp", "(", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.mask_neighbors": [[275, 280], ["torch.cat", "torch.cumsum", "torch_scatter.segment_csr", "edge_mask.long", "torch_scatter.segment_csr.new_zeros"], "function", ["None"], ["", "def", "mask_neighbors", "(", "neighbors", ",", "edge_mask", ")", ":", "\n", "    ", "neighbors_old_indptr", "=", "torch", ".", "cat", "(", "[", "neighbors", ".", "new_zeros", "(", "1", ")", ",", "neighbors", "]", ")", "\n", "neighbors_old_indptr", "=", "torch", ".", "cumsum", "(", "neighbors_old_indptr", ",", "dim", "=", "0", ")", "\n", "neighbors", "=", "segment_csr", "(", "edge_mask", ".", "long", "(", ")", ",", "neighbors_old_indptr", ")", "\n", "return", "neighbors", "\n", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.spherical_basis.CircularBasisLayer.__init__": [[32, 81], ["super().__init__", "cbf[].lower", "cbf.copy", "torch_geometric.nn.models.schnet.GaussianSmearing", "basis_utils.real_sph_harm", "sympy.symbols", "range", "ValueError", "len", "torch.stack", "sympy.lambdify", "sph_funcs.append", "sph_funcs.append", "sympy.lambdify", "f", "torch.zeros_like", "sympy.lambdify."], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.copy", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.real_sph_harm"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_spherical", ":", "int", ",", "\n", "radial_basis", ":", "RadialBasis", ",", "\n", "cbf", ":", "str", ",", "\n", "efficient", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "radial_basis", "=", "radial_basis", "\n", "self", ".", "efficient", "=", "efficient", "\n", "\n", "cbf_name", "=", "cbf", "[", "\"name\"", "]", ".", "lower", "(", ")", "\n", "cbf_hparams", "=", "cbf", ".", "copy", "(", ")", "\n", "del", "cbf_hparams", "[", "\"name\"", "]", "\n", "\n", "if", "cbf_name", "==", "\"gaussian\"", ":", "\n", "            ", "self", ".", "cos\u03c6_basis", "=", "GaussianSmearing", "(", "\n", "start", "=", "-", "1", ",", "stop", "=", "1", ",", "num_gaussians", "=", "num_spherical", ",", "**", "cbf_hparams", "\n", ")", "\n", "", "elif", "cbf_name", "==", "\"spherical_harmonics\"", ":", "\n", "            ", "Y_lm", "=", "real_sph_harm", "(", "\n", "num_spherical", ",", "use_theta", "=", "False", ",", "zero_m_only", "=", "True", "\n", ")", "\n", "sph_funcs", "=", "[", "]", "# (num_spherical,)", "\n", "\n", "# convert to tensorflow functions", "\n", "z", "=", "sym", ".", "symbols", "(", "\"z\"", ")", "\n", "modules", "=", "{", "\"sin\"", ":", "torch", ".", "sin", ",", "\"cos\"", ":", "torch", ".", "cos", ",", "\"sqrt\"", ":", "torch", ".", "sqrt", "}", "\n", "m_order", "=", "0", "# only single angle", "\n", "for", "l_degree", "in", "range", "(", "len", "(", "Y_lm", ")", ")", ":", "# num_spherical", "\n", "                ", "if", "(", "\n", "l_degree", "==", "0", "\n", ")", ":", "# Y_00 is only a constant -> function returns value and not tensor", "\n", "                    ", "first_sph", "=", "sym", ".", "lambdify", "(", "\n", "[", "z", "]", ",", "Y_lm", "[", "l_degree", "]", "[", "m_order", "]", ",", "modules", "\n", ")", "\n", "sph_funcs", ".", "append", "(", "\n", "lambda", "z", ":", "torch", ".", "zeros_like", "(", "z", ")", "+", "first_sph", "(", "z", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "sph_funcs", ".", "append", "(", "\n", "sym", ".", "lambdify", "(", "[", "z", "]", ",", "Y_lm", "[", "l_degree", "]", "[", "m_order", "]", ",", "modules", ")", "\n", ")", "\n", "", "", "self", ".", "cos\u03c6_basis", "=", "lambda", "cos\u03c6", ":", "torch", ".", "stack", "(", "\n", "[", "f", "(", "cos\u03c6", ")", "for", "f", "in", "sph_funcs", "]", ",", "dim", "=", "1", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Unknown cosine basis function '{cbf_name}'.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.spherical_basis.CircularBasisLayer.forward": [[82, 95], ["spherical_basis.CircularBasisLayer.radial_basis", "spherical_basis.CircularBasisLayer.cos\u03c6_basis"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "D_ca", ",", "cos\u03c6_cab", ",", "id3_ca", ")", ":", "\n", "        ", "rbf", "=", "self", ".", "radial_basis", "(", "D_ca", ")", "# (num_edges, num_radial)", "\n", "cbf", "=", "self", ".", "cos\u03c6_basis", "(", "cos\u03c6_cab", ")", "# (num_triplets, num_spherical)", "\n", "\n", "if", "not", "self", ".", "efficient", ":", "\n", "            ", "rbf", "=", "rbf", "[", "id3_ca", "]", "# (num_triplets, num_radial)", "\n", "out", "=", "(", "rbf", "[", ":", ",", "None", ",", ":", "]", "*", "cbf", "[", ":", ",", ":", ",", "None", "]", ")", ".", "view", "(", "\n", "-", "1", ",", "rbf", ".", "shape", "[", "-", "1", "]", "*", "cbf", ".", "shape", "[", "-", "1", "]", "\n", ")", "\n", "return", "(", "out", ",", ")", "\n", "# (num_triplets, num_radial * num_spherical)", "\n", "", "else", ":", "\n", "            ", "return", "(", "rbf", "[", "None", ",", ":", ",", ":", "]", ",", "cbf", ")", "\n", "# (1, num_edges, num_radial), (num_edges, num_spherical)", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.radial_basis.PolynomialEnvelope.__init__": [[26, 33], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["def", "__init__", "(", "self", ",", "exponent", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "exponent", ">", "0", "\n", "self", ".", "p", "=", "exponent", "\n", "self", ".", "a", "=", "-", "(", "self", ".", "p", "+", "1", ")", "*", "(", "self", ".", "p", "+", "2", ")", "/", "2", "\n", "self", ".", "b", "=", "self", ".", "p", "*", "(", "self", ".", "p", "+", "2", ")", "\n", "self", ".", "c", "=", "-", "self", ".", "p", "*", "(", "self", ".", "p", "+", "1", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.radial_basis.PolynomialEnvelope.forward": [[34, 42], ["torch.where", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "d_scaled", ")", ":", "\n", "        ", "env_val", "=", "(", "\n", "1", "\n", "+", "self", ".", "a", "*", "d_scaled", "**", "self", ".", "p", "\n", "+", "self", ".", "b", "*", "d_scaled", "**", "(", "self", ".", "p", "+", "1", ")", "\n", "+", "self", ".", "c", "*", "d_scaled", "**", "(", "self", ".", "p", "+", "2", ")", "\n", ")", "\n", "return", "torch", ".", "where", "(", "d_scaled", "<", "1", ",", "env_val", ",", "torch", ".", "zeros_like", "(", "d_scaled", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.radial_basis.ExponentialEnvelope.__init__": [[52, 54], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.radial_basis.ExponentialEnvelope.forward": [[55, 60], ["torch.exp", "torch.where", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "d_scaled", ")", ":", "\n", "        ", "env_val", "=", "torch", ".", "exp", "(", "\n", "-", "(", "d_scaled", "**", "2", ")", "/", "(", "(", "1", "-", "d_scaled", ")", "*", "(", "1", "+", "d_scaled", ")", ")", "\n", ")", "\n", "return", "torch", ".", "where", "(", "d_scaled", "<", "1", ",", "env_val", ",", "torch", ".", "zeros_like", "(", "d_scaled", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.radial_basis.SphericalBesselBasis.__init__": [[74, 89], ["super().__init__", "math.sqrt", "torch.nn.Parameter", "torch.tensor", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_radial", ":", "int", ",", "\n", "cutoff", ":", "float", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_const", "=", "math", ".", "sqrt", "(", "2", "/", "(", "cutoff", "**", "3", ")", ")", "\n", "# cutoff ** 3 to counteract dividing by d_scaled = d / cutoff", "\n", "\n", "# Initialize frequencies at canonical positions", "\n", "self", ".", "frequencies", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "data", "=", "torch", ".", "tensor", "(", "\n", "np", ".", "pi", "*", "np", ".", "arange", "(", "1", ",", "num_radial", "+", "1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", ")", ",", "\n", "requires_grad", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.radial_basis.SphericalBesselBasis.forward": [[91, 96], ["torch.sin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "d_scaled", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "norm_const", "\n", "/", "d_scaled", "[", ":", ",", "None", "]", "\n", "*", "torch", ".", "sin", "(", "self", ".", "frequencies", "*", "d_scaled", "[", ":", ",", "None", "]", ")", "\n", ")", "# (num_edges, num_radial)", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.radial_basis.BernsteinBasis.__init__": [[116, 139], ["super().__init__", "scipy.special.binom", "radial_basis.BernsteinBasis.register_buffer", "torch.nn.Parameter", "torch.nn.Softplus", "torch.arange", "radial_basis.BernsteinBasis.register_buffer", "radial_basis.BernsteinBasis.register_buffer", "numpy.arange", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_radial", ":", "int", ",", "\n", "pregamma_initial", ":", "float", "=", "0.45264", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "prefactor", "=", "binom", "(", "num_radial", "-", "1", ",", "np", ".", "arange", "(", "num_radial", ")", ")", "\n", "self", ".", "register_buffer", "(", "\n", "\"prefactor\"", ",", "\n", "torch", ".", "tensor", "(", "prefactor", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "persistent", "=", "False", ",", "\n", ")", "\n", "\n", "self", ".", "pregamma", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "data", "=", "torch", ".", "tensor", "(", "pregamma_initial", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "requires_grad", "=", "True", ",", "\n", ")", "\n", "self", ".", "softplus", "=", "torch", ".", "nn", ".", "Softplus", "(", ")", "\n", "\n", "exp1", "=", "torch", ".", "arange", "(", "num_radial", ")", "\n", "self", ".", "register_buffer", "(", "\"exp1\"", ",", "exp1", "[", "None", ",", ":", "]", ",", "persistent", "=", "False", ")", "\n", "exp2", "=", "num_radial", "-", "1", "-", "exp1", "\n", "self", ".", "register_buffer", "(", "\"exp2\"", ",", "exp2", "[", "None", ",", ":", "]", ",", "persistent", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.radial_basis.BernsteinBasis.forward": [[140, 145], ["radial_basis.BernsteinBasis.softplus", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "d_scaled", ")", ":", "\n", "        ", "gamma", "=", "self", ".", "softplus", "(", "self", ".", "pregamma", ")", "# constrain to positive", "\n", "exp_d", "=", "torch", ".", "exp", "(", "-", "gamma", "*", "d_scaled", ")", "[", ":", ",", "None", "]", "\n", "return", "(", "\n", "self", ".", "prefactor", "*", "(", "exp_d", "**", "self", ".", "exp1", ")", "*", "(", "(", "1", "-", "exp_d", ")", "**", "self", ".", "exp2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.radial_basis.RadialBasis.__init__": [[163, 201], ["super().__init__", "envelope[].lower", "envelope.copy", "rbf[].lower", "rbf.copy", "radial_basis.PolynomialEnvelope", "torch_geometric.nn.models.schnet.GaussianSmearing", "radial_basis.ExponentialEnvelope", "ValueError", "radial_basis.SphericalBesselBasis", "radial_basis.BernsteinBasis", "ValueError"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.copy", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.copy"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_radial", ":", "int", ",", "\n", "cutoff", ":", "float", ",", "\n", "rbf", ":", "dict", "=", "{", "\"name\"", ":", "\"gaussian\"", "}", ",", "\n", "envelope", ":", "dict", "=", "{", "\"name\"", ":", "\"polynomial\"", ",", "\"exponent\"", ":", "5", "}", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inv_cutoff", "=", "1", "/", "cutoff", "\n", "\n", "env_name", "=", "envelope", "[", "\"name\"", "]", ".", "lower", "(", ")", "\n", "env_hparams", "=", "envelope", ".", "copy", "(", ")", "\n", "del", "env_hparams", "[", "\"name\"", "]", "\n", "\n", "if", "env_name", "==", "\"polynomial\"", ":", "\n", "            ", "self", ".", "envelope", "=", "PolynomialEnvelope", "(", "**", "env_hparams", ")", "\n", "", "elif", "env_name", "==", "\"exponential\"", ":", "\n", "            ", "self", ".", "envelope", "=", "ExponentialEnvelope", "(", "**", "env_hparams", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Unknown envelope function '{env_name}'.\"", ")", "\n", "\n", "", "rbf_name", "=", "rbf", "[", "\"name\"", "]", ".", "lower", "(", ")", "\n", "rbf_hparams", "=", "rbf", ".", "copy", "(", ")", "\n", "del", "rbf_hparams", "[", "\"name\"", "]", "\n", "\n", "# RBFs get distances scaled to be in [0, 1]", "\n", "if", "rbf_name", "==", "\"gaussian\"", ":", "\n", "            ", "self", ".", "rbf", "=", "GaussianSmearing", "(", "\n", "start", "=", "0", ",", "stop", "=", "1", ",", "num_gaussians", "=", "num_radial", ",", "**", "rbf_hparams", "\n", ")", "\n", "", "elif", "rbf_name", "==", "\"spherical_bessel\"", ":", "\n", "            ", "self", ".", "rbf", "=", "SphericalBesselBasis", "(", "\n", "num_radial", "=", "num_radial", ",", "cutoff", "=", "cutoff", ",", "**", "rbf_hparams", "\n", ")", "\n", "", "elif", "rbf_name", "==", "\"bernstein\"", ":", "\n", "            ", "self", ".", "rbf", "=", "BernsteinBasis", "(", "num_radial", "=", "num_radial", ",", "**", "rbf_hparams", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Unknown radial basis function '{rbf_name}'.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.radial_basis.RadialBasis.forward": [[202, 207], ["radial_basis.RadialBasis.envelope", "radial_basis.RadialBasis.rbf"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "d", ")", ":", "\n", "        ", "d_scaled", "=", "d", "*", "self", ".", "inv_cutoff", "\n", "\n", "env", "=", "self", ".", "envelope", "(", "d_scaled", ")", "\n", "return", "env", "[", ":", ",", "None", "]", "*", "self", ".", "rbf", "(", "d_scaled", ")", "# (nEdges, num_radial)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.interaction_block.InteractionBlockTripletsOnly.__init__": [[55, 146], ["super().__init__", "base_layers.Dense", "interaction_block.TripletInteraction", "torch.nn.ModuleList", "torch.nn.ModuleList", "atom_update_block.AtomUpdateBlock", "embedding_block.EdgeEmbedding", "torch.nn.ModuleList", "name.split", "math.sqrt", "base_layers.ResidualLayer", "base_layers.ResidualLayer", "base_layers.ResidualLayer", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "emb_size_atom", ",", "\n", "emb_size_edge", ",", "\n", "emb_size_trip", ",", "\n", "emb_size_rbf", ",", "\n", "emb_size_cbf", ",", "\n", "emb_size_bil_trip", ",", "\n", "num_before_skip", ",", "\n", "num_after_skip", ",", "\n", "num_concat", ",", "\n", "num_atom", ",", "\n", "activation", "=", "None", ",", "\n", "scale_file", "=", "None", ",", "\n", "name", "=", "\"Interaction\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "\n", "block_nr", "=", "name", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "\n", "\n", "## -------------------------------------------- Message Passing ------------------------------------------- ##", "\n", "# Dense transformation of skip connection", "\n", "self", ".", "dense_ca", "=", "Dense", "(", "\n", "emb_size_edge", ",", "\n", "emb_size_edge", ",", "\n", "activation", "=", "activation", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "\n", "# Triplet Interaction", "\n", "self", ".", "trip_interaction", "=", "TripletInteraction", "(", "\n", "emb_size_edge", "=", "emb_size_edge", ",", "\n", "emb_size_trip", "=", "emb_size_trip", ",", "\n", "emb_size_bilinear", "=", "emb_size_bil_trip", ",", "\n", "emb_size_rbf", "=", "emb_size_rbf", ",", "\n", "emb_size_cbf", "=", "emb_size_cbf", ",", "\n", "activation", "=", "activation", ",", "\n", "scale_file", "=", "scale_file", ",", "\n", "name", "=", "f\"TripInteraction_{block_nr}\"", ",", "\n", ")", "\n", "\n", "## ---------------------------------------- Update Edge Embeddings ---------------------------------------- ##", "\n", "# Residual layers before skip connection", "\n", "self", ".", "layers_before_skip", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ResidualLayer", "(", "\n", "emb_size_edge", ",", "\n", "activation", "=", "activation", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "num_before_skip", ")", "\n", "]", "\n", ")", "\n", "\n", "# Residual layers after skip connection", "\n", "self", ".", "layers_after_skip", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ResidualLayer", "(", "\n", "emb_size_edge", ",", "\n", "activation", "=", "activation", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "num_after_skip", ")", "\n", "]", "\n", ")", "\n", "\n", "## ---------------------------------------- Update Atom Embeddings ---------------------------------------- ##", "\n", "self", ".", "atom_update", "=", "AtomUpdateBlock", "(", "\n", "emb_size_atom", "=", "emb_size_atom", ",", "\n", "emb_size_edge", "=", "emb_size_edge", ",", "\n", "emb_size_rbf", "=", "emb_size_rbf", ",", "\n", "nHidden", "=", "num_atom", ",", "\n", "activation", "=", "activation", ",", "\n", "scale_file", "=", "scale_file", ",", "\n", "name", "=", "f\"AtomUpdate_{block_nr}\"", ",", "\n", ")", "\n", "\n", "## ------------------------------ Update Edge Embeddings with Atom Embeddings ----------------------------- ##", "\n", "self", ".", "concat_layer", "=", "EdgeEmbedding", "(", "\n", "emb_size_atom", ",", "\n", "emb_size_edge", ",", "\n", "emb_size_edge", ",", "\n", "activation", "=", "activation", ",", "\n", ")", "\n", "self", ".", "residual_m", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ResidualLayer", "(", "emb_size_edge", ",", "activation", "=", "activation", ")", "\n", "for", "_", "in", "range", "(", "num_concat", ")", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "inv_sqrt_2", "=", "1", "/", "math", ".", "sqrt", "(", "2.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.interaction_block.InteractionBlockTripletsOnly.forward": [[147, 217], ["interaction_block.InteractionBlockTripletsOnly.dense_ca", "interaction_block.InteractionBlockTripletsOnly.trip_interaction", "enumerate", "enumerate", "interaction_block.InteractionBlockTripletsOnly.atom_update", "interaction_block.InteractionBlockTripletsOnly.concat_layer", "enumerate", "layer", "layer", "layer"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "h", ",", "\n", "m", ",", "\n", "rbf3", ",", "\n", "cbf3", ",", "\n", "id3_ragged_idx", ",", "\n", "id_swap", ",", "\n", "id3_ba", ",", "\n", "id3_ca", ",", "\n", "rbf_h", ",", "\n", "idx_s", ",", "\n", "idx_t", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Returns\n        -------\n            h: torch.Tensor, shape=(nEdges, emb_size_atom)\n                Atom embeddings.\n            m: torch.Tensor, shape=(nEdges, emb_size_edge)\n                Edge embeddings (c->a).\n        \"\"\"", "\n", "\n", "# Initial transformation", "\n", "x_ca_skip", "=", "self", ".", "dense_ca", "(", "m", ")", "# (nEdges, emb_size_edge)", "\n", "\n", "x3", "=", "self", ".", "trip_interaction", "(", "\n", "m", ",", "\n", "rbf3", ",", "\n", "cbf3", ",", "\n", "id3_ragged_idx", ",", "\n", "id_swap", ",", "\n", "id3_ba", ",", "\n", "id3_ca", ",", "\n", ")", "\n", "\n", "## ----------------------------- Merge Embeddings after Triplet Interaction ------------------------------ ##", "\n", "x", "=", "x_ca_skip", "+", "x3", "# (nEdges, emb_size_edge)", "\n", "x", "=", "x", "*", "self", ".", "inv_sqrt_2", "\n", "\n", "## ---------------------------------------- Update Edge Embeddings --------------------------------------- ##", "\n", "# Transformations before skip connection", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers_before_skip", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "# (nEdges, emb_size_edge)", "\n", "\n", "# Skip connection", "\n", "", "m", "=", "m", "+", "x", "# (nEdges, emb_size_edge)", "\n", "m", "=", "m", "*", "self", ".", "inv_sqrt_2", "\n", "\n", "# Transformations after skip connection", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers_after_skip", ")", ":", "\n", "            ", "m", "=", "layer", "(", "m", ")", "# (nEdges, emb_size_edge)", "\n", "\n", "## ---------------------------------------- Update Atom Embeddings --------------------------------------- ##", "\n", "", "h2", "=", "self", ".", "atom_update", "(", "h", ",", "m", ",", "rbf_h", ",", "idx_t", ")", "\n", "\n", "# Skip connection", "\n", "h", "=", "h", "+", "h2", "# (nAtoms, emb_size_atom)", "\n", "h", "=", "h", "*", "self", ".", "inv_sqrt_2", "\n", "\n", "## ----------------------------- Update Edge Embeddings with Atom Embeddings ----------------------------- ##", "\n", "m2", "=", "self", ".", "concat_layer", "(", "h", ",", "m", ",", "idx_s", ",", "idx_t", ")", "# (nEdges, emb_size_edge)", "\n", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "residual_m", ")", ":", "\n", "            ", "m2", "=", "layer", "(", "m2", ")", "# (nEdges, emb_size_edge)", "\n", "\n", "# Skip connection", "\n", "", "m", "=", "m", "+", "m2", "# (nEdges, emb_size_edge)", "\n", "m", "=", "m", "*", "self", ".", "inv_sqrt_2", "\n", "return", "h", ",", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.interaction_block.TripletInteraction.__init__": [[242, 304], ["super().__init__", "base_layers.Dense", "base_layers.Dense", "scaling.ScalingFactor", "efficient.EfficientInteractionBilinear", "scaling.ScalingFactor", "base_layers.Dense", "base_layers.Dense", "base_layers.Dense", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "emb_size_edge", ",", "\n", "emb_size_trip", ",", "\n", "emb_size_bilinear", ",", "\n", "emb_size_rbf", ",", "\n", "emb_size_cbf", ",", "\n", "activation", "=", "None", ",", "\n", "scale_file", "=", "None", ",", "\n", "name", "=", "\"TripletInteraction\"", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "\n", "# Dense transformation", "\n", "self", ".", "dense_ba", "=", "Dense", "(", "\n", "emb_size_edge", ",", "\n", "emb_size_edge", ",", "\n", "activation", "=", "activation", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "\n", "# Up projections of basis representations, bilinear layer and scaling factors", "\n", "self", ".", "mlp_rbf", "=", "Dense", "(", "\n", "emb_size_rbf", ",", "\n", "emb_size_edge", ",", "\n", "activation", "=", "None", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "scale_rbf", "=", "ScalingFactor", "(", "\n", "scale_file", "=", "scale_file", ",", "name", "=", "name", "+", "\"_had_rbf\"", "\n", ")", "\n", "\n", "self", ".", "mlp_cbf", "=", "EfficientInteractionBilinear", "(", "\n", "emb_size_trip", ",", "emb_size_cbf", ",", "emb_size_bilinear", "\n", ")", "\n", "self", ".", "scale_cbf_sum", "=", "ScalingFactor", "(", "\n", "scale_file", "=", "scale_file", ",", "name", "=", "name", "+", "\"_sum_cbf\"", "\n", ")", "# combines scaling for bilinear layer and summation", "\n", "\n", "# Down and up projections", "\n", "self", ".", "down_projection", "=", "Dense", "(", "\n", "emb_size_edge", ",", "\n", "emb_size_trip", ",", "\n", "activation", "=", "activation", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "up_projection_ca", "=", "Dense", "(", "\n", "emb_size_bilinear", ",", "\n", "emb_size_edge", ",", "\n", "activation", "=", "activation", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "up_projection_ac", "=", "Dense", "(", "\n", "emb_size_bilinear", ",", "\n", "emb_size_edge", ",", "\n", "activation", "=", "activation", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "\n", "self", ".", "inv_sqrt_2", "=", "1", "/", "math", ".", "sqrt", "(", "2.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.interaction_block.TripletInteraction.forward": [[305, 353], ["interaction_block.TripletInteraction.dense_ba", "interaction_block.TripletInteraction.mlp_rbf", "interaction_block.TripletInteraction.scale_rbf", "interaction_block.TripletInteraction.down_projection", "interaction_block.TripletInteraction.mlp_cbf", "interaction_block.TripletInteraction.scale_cbf_sum", "interaction_block.TripletInteraction.up_projection_ca", "interaction_block.TripletInteraction.up_projection_ac"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "m", ",", "\n", "rbf3", ",", "\n", "cbf3", ",", "\n", "id3_ragged_idx", ",", "\n", "id_swap", ",", "\n", "id3_ba", ",", "\n", "id3_ca", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Returns\n        -------\n            m: torch.Tensor, shape=(nEdges, emb_size_edge)\n                Edge embeddings (c->a).\n        \"\"\"", "\n", "\n", "# Dense transformation", "\n", "x_ba", "=", "self", ".", "dense_ba", "(", "m", ")", "# (nEdges, emb_size_edge)", "\n", "\n", "# Transform via radial bessel basis", "\n", "rbf_emb", "=", "self", ".", "mlp_rbf", "(", "rbf3", ")", "# (nEdges, emb_size_edge)", "\n", "x_ba2", "=", "x_ba", "*", "rbf_emb", "\n", "x_ba", "=", "self", ".", "scale_rbf", "(", "x_ba", ",", "x_ba2", ")", "\n", "\n", "x_ba", "=", "self", ".", "down_projection", "(", "x_ba", ")", "# (nEdges, emb_size_trip)", "\n", "\n", "# Transform via circular spherical basis", "\n", "x_ba", "=", "x_ba", "[", "id3_ba", "]", "\n", "\n", "# Efficient bilinear layer", "\n", "x", "=", "self", ".", "mlp_cbf", "(", "cbf3", ",", "x_ba", ",", "id3_ca", ",", "id3_ragged_idx", ")", "\n", "# (nEdges, emb_size_quad)", "\n", "x", "=", "self", ".", "scale_cbf_sum", "(", "x_ba", ",", "x", ")", "\n", "\n", "# =>", "\n", "# rbf(d_ba)", "\n", "# cbf(d_ca, angle_cab)", "\n", "\n", "# Up project embeddings", "\n", "x_ca", "=", "self", ".", "up_projection_ca", "(", "x", ")", "# (nEdges, emb_size_edge)", "\n", "x_ac", "=", "self", ".", "up_projection_ac", "(", "x", ")", "# (nEdges, emb_size_edge)", "\n", "\n", "# Merge interaction of c->a and a->c", "\n", "x_ac", "=", "x_ac", "[", "id_swap", "]", "# swap to add to edge a->c and not c->a", "\n", "x3", "=", "x_ca", "+", "x_ac", "\n", "x3", "=", "x3", "*", "self", ".", "inv_sqrt_2", "\n", "return", "x3", "\n", "", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutomaticFit.__init__": [[24, 42], ["scaling.AutomaticFit.load_maybe", "scaling.AutomaticFit._add2queue"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutomaticFit.load_maybe", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutomaticFit._add2queue"], ["def", "__init__", "(", "self", ",", "variable", ",", "scale_file", ",", "name", ")", ":", "\n", "        ", "self", ".", "variable", "=", "variable", "# variable to find value for", "\n", "self", ".", "scale_file", "=", "scale_file", "\n", "self", ".", "_name", "=", "name", "\n", "\n", "self", ".", "_fitted", "=", "False", "\n", "self", ".", "load_maybe", "(", ")", "\n", "\n", "# first instance created", "\n", "if", "AutomaticFit", ".", "fitting_mode", "and", "not", "self", ".", "_fitted", ":", "\n", "\n", "# if first layer set to active", "\n", "            ", "if", "AutomaticFit", ".", "activeVar", "is", "None", ":", "\n", "                ", "AutomaticFit", ".", "activeVar", "=", "self", "\n", "AutomaticFit", ".", "queue", "=", "[", "]", "# initialize", "\n", "# else add to queue", "\n", "", "else", ":", "\n", "                ", "self", ".", "_add2queue", "(", ")", "# adding variables to list fill fail in graph mode", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutomaticFit.reset": [[43, 46], ["None"], "methods", ["None"], ["", "", "", "def", "reset", "(", ")", ":", "\n", "        ", "AutomaticFit", ".", "activeVar", "=", "None", "\n", "AutomaticFit", ".", "all_processed", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutomaticFit.fitting_completed": [[47, 49], ["None"], "methods", ["None"], ["", "def", "fitting_completed", "(", ")", ":", "\n", "        ", "return", "AutomaticFit", ".", "queue", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutomaticFit.set2fitmode": [[50, 53], ["scaling.AutomaticFit.reset"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutomaticFit.reset"], ["", "def", "set2fitmode", "(", ")", ":", "\n", "        ", "AutomaticFit", ".", "reset", "(", ")", "\n", "AutomaticFit", ".", "fitting_mode", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutomaticFit._add2queue": [[54, 63], ["logging.debug", "ValueError"], "methods", ["None"], ["", "def", "_add2queue", "(", "self", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "f\"Add {self._name} to queue.\"", ")", "\n", "# check that same variable is not added twice", "\n", "for", "var", "in", "AutomaticFit", ".", "queue", ":", "\n", "            ", "if", "self", ".", "_name", "==", "var", ".", "_name", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"Variable with the same name ({self._name}) was already added to queue!\"", "\n", ")", "\n", "", "", "AutomaticFit", ".", "queue", "+=", "[", "self", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutomaticFit.set_next_active": [[64, 75], ["queue.pop", "len", "logging.debug"], "methods", ["None"], ["", "def", "set_next_active", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Set the next variable in the queue that should be fitted.\n        \"\"\"", "\n", "queue", "=", "AutomaticFit", ".", "queue", "\n", "if", "len", "(", "queue", ")", "==", "0", ":", "\n", "            ", "logging", ".", "debug", "(", "\"Processed all variables.\"", ")", "\n", "AutomaticFit", ".", "queue", "=", "None", "\n", "AutomaticFit", ".", "activeVar", "=", "None", "# reset to None", "\n", "return", "\n", "", "AutomaticFit", ".", "activeVar", "=", "queue", ".", "pop", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutomaticFit.load_maybe": [[76, 90], ["utils.read_value_json", "logging.debug", "logging.debug", "torch.no_grad", "scaling.AutomaticFit.variable.copy_", "torch.tensor", "scaling.AutomaticFit.variable.numpy"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.read_value_json"], ["", "def", "load_maybe", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load variable from file or set to initial value of the variable.\n        \"\"\"", "\n", "value", "=", "read_value_json", "(", "self", ".", "scale_file", ",", "self", ".", "_name", ")", "\n", "if", "value", "is", "None", ":", "\n", "            ", "logging", ".", "debug", "(", "\n", "f\"Initialize variable {self._name}' to {self.variable.numpy():.3f}\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_fitted", "=", "True", "\n", "logging", ".", "debug", "(", "f\"Set scale factor {self._name} : {value}\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "variable", ".", "copy_", "(", "torch", ".", "tensor", "(", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutoScaleFit.__init__": [[104, 109], ["scaling.AutomaticFit.__init__", "scaling.AutoScaleFit._init_stats"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutoScaleFit._init_stats"], ["def", "__init__", "(", "self", ",", "variable", ",", "scale_file", ",", "name", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "variable", ",", "scale_file", ",", "name", ")", "\n", "\n", "if", "not", "self", ".", "_fitted", ":", "\n", "            ", "self", ".", "_init_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutoScaleFit._init_stats": [[110, 114], ["None"], "methods", ["None"], ["", "", "def", "_init_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "variance_in", "=", "0", "\n", "self", ".", "variance_out", "=", "0", "\n", "self", ".", "nSamples", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutoScaleFit.observe": [[115, 136], ["torch.no_grad", "torch.mean().to", "torch.mean().to", "torch.mean", "torch.mean", "torch.var", "torch.var"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "observe", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Observe variances for input x and output y.\n        The scaling factor alpha is calculated s.t. Var(alpha * y) ~ Var(x)\n        \"\"\"", "\n", "if", "self", ".", "_fitted", ":", "\n", "            ", "return", "\n", "\n", "# only track stats for current variable", "\n", "", "if", "AutomaticFit", ".", "activeVar", "==", "self", ":", "\n", "            ", "nSamples", "=", "y", ".", "shape", "[", "0", "]", "\n", "self", ".", "variance_in", "+=", "(", "\n", "torch", ".", "mean", "(", "torch", ".", "var", "(", "x", ",", "dim", "=", "0", ")", ")", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "*", "nSamples", "\n", ")", "\n", "self", ".", "variance_out", "+=", "(", "\n", "torch", ".", "mean", "(", "torch", ".", "var", "(", "y", ",", "dim", "=", "0", ")", ")", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "*", "nSamples", "\n", ")", "\n", "self", ".", "nSamples", "+=", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutoScaleFit.fit": [[137, 167], ["torch.no_grad", "torch.sqrt", "logging.info", "scaling.AutoScaleFit.variable.copy_", "utils.update_json", "scaling.AutoScaleFit.set_next_active", "ValueError", "float", "scaling.AutoScaleFit.variance_in.item", "scaling.AutoScaleFit.variance_out.item", "scaling.AutoScaleFit.variable.item"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.utils.update_json", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutomaticFit.set_next_active"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "fit", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Fit the scaling factor based on the observed variances.\n        \"\"\"", "\n", "if", "AutomaticFit", ".", "activeVar", "==", "self", ":", "\n", "            ", "if", "self", ".", "variance_in", "==", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"Did not track the variable {self._name}. Add observe calls to track the variance before and after.\"", "\n", ")", "\n", "\n", "# calculate variance preserving scaling factor", "\n", "", "self", ".", "variance_in", "=", "self", ".", "variance_in", "/", "self", ".", "nSamples", "\n", "self", ".", "variance_out", "=", "self", ".", "variance_out", "/", "self", ".", "nSamples", "\n", "\n", "ratio", "=", "self", ".", "variance_out", "/", "self", ".", "variance_in", "\n", "value", "=", "torch", ".", "sqrt", "(", "1", "/", "ratio", ")", "\n", "logging", ".", "info", "(", "\n", "f\"Variable: {self._name}, \"", "\n", "f\"Var_in: {self.variance_in.item():.3f}, \"", "\n", "f\"Var_out: {self.variance_out.item():.3f}, \"", "\n", "f\"Ratio: {ratio:.3f} => Scaling factor: {value:.3f}\"", "\n", ")", "\n", "\n", "# set variable to calculated value", "\n", "self", ".", "variable", ".", "copy_", "(", "self", ".", "variable", "*", "value", ")", "\n", "update_json", "(", "\n", "self", ".", "scale_file", ",", "{", "self", ".", "_name", ":", "float", "(", "self", ".", "variable", ".", "item", "(", ")", ")", "}", "\n", ")", "\n", "self", ".", "set_next_active", "(", ")", "# set next variable in queue to active", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.ScalingFactor.__init__": [[181, 188], ["super().__init__", "torch.nn.Parameter", "scaling.AutoScaleFit", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["def", "__init__", "(", "self", ",", "scale_file", ",", "name", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "scale_factor", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "tensor", "(", "1.0", ",", "device", "=", "device", ")", ",", "requires_grad", "=", "False", "\n", ")", "\n", "self", ".", "autofit", "=", "AutoScaleFit", "(", "self", ".", "scale_factor", ",", "scale_file", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.ScalingFactor.forward": [[189, 194], ["scaling.ScalingFactor.autofit.observe"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.layers.scaling.AutoScaleFit.observe"], ["", "def", "forward", "(", "self", ",", "x_ref", ",", "y", ")", ":", "\n", "        ", "y", "=", "y", "*", "self", ".", "scale_factor", "\n", "self", ".", "autofit", ".", "observe", "(", "x_ref", ",", "y", ")", "\n", "\n", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.base_layers.Dense.__init__": [[29, 46], ["super().__init__", "torch.nn.Linear", "base_layers.Dense.reset_parameters", "isinstance", "activation.lower.lower.lower", "base_layers.ScaledSiLU", "base_layers.SiQU", "torch.nn.Identity", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "False", ",", "activation", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "if", "isinstance", "(", "activation", ",", "str", ")", ":", "\n", "            ", "activation", "=", "activation", ".", "lower", "(", ")", "\n", "", "if", "activation", "in", "[", "\"swish\"", ",", "\"silu\"", "]", ":", "\n", "            ", "self", ".", "_activation", "=", "ScaledSiLU", "(", ")", "\n", "", "elif", "activation", "==", "\"siqu\"", ":", "\n", "            ", "self", ".", "_activation", "=", "SiQU", "(", ")", "\n", "", "elif", "activation", "is", "None", ":", "\n", "            ", "self", ".", "_activation", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Activation function not implemented for GemNet (yet).\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.base_layers.Dense.reset_parameters": [[48, 52], ["initializer", "base_layers.Dense.linear.bias.data.fill_"], "methods", ["None"], ["", "", "def", "reset_parameters", "(", "self", ",", "initializer", "=", "he_orthogonal_init", ")", ":", "\n", "        ", "initializer", "(", "self", ".", "linear", ".", "weight", ")", "\n", "if", "self", ".", "linear", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.base_layers.Dense.forward": [[53, 57], ["base_layers.Dense.linear", "base_layers.Dense._activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "x", "=", "self", ".", "_activation", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.base_layers.ScaledSiLU.__init__": [[60, 64], ["super().__init__", "torch.nn.SiLU"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "1", "/", "0.6", "\n", "self", ".", "_activation", "=", "torch", ".", "nn", ".", "SiLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.base_layers.ScaledSiLU.forward": [[65, 67], ["base_layers.ScaledSiLU._activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_activation", "(", "x", ")", "*", "self", ".", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.base_layers.SiQU.__init__": [[70, 73], ["super().__init__", "torch.nn.SiLU"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_activation", "=", "torch", ".", "nn", ".", "SiLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.base_layers.SiQU.forward": [[74, 76], ["base_layers.SiQU._activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "_activation", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.base_layers.ResidualLayer.__init__": [[92, 108], ["super().__init__", "torch.nn.Sequential", "math.sqrt", "layer", "range"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "units", ":", "int", ",", "nLayers", ":", "int", "=", "2", ",", "layer", "=", "Dense", ",", "**", "layer_kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense_mlp", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "*", "[", "\n", "layer", "(", "\n", "in_features", "=", "units", ",", "\n", "out_features", "=", "units", ",", "\n", "bias", "=", "False", ",", "\n", "**", "layer_kwargs", "\n", ")", "\n", "for", "_", "in", "range", "(", "nLayers", ")", "\n", "]", "\n", ")", "\n", "self", ".", "inv_sqrt_2", "=", "1", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.base_layers.ResidualLayer.forward": [[109, 114], ["base_layers.ResidualLayer.dense_mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "dense_mlp", "(", "input", ")", "\n", "x", "=", "input", "+", "x", "\n", "x", "=", "x", "*", "self", ".", "inv_sqrt_2", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.embedding_block.AtomEmbedding.__init__": [[26, 35], ["super().__init__", "torch.nn.Embedding", "torch.nn.init.uniform_", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["def", "__init__", "(", "self", ",", "emb_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_size", "=", "emb_size", "\n", "\n", "# Atom embeddings: We go up to Bi (83).", "\n", "self", ".", "embeddings", "=", "torch", ".", "nn", ".", "Embedding", "(", "MAX_ATOMIC_NUM", ",", "emb_size", ")", "\n", "# init by uniform distribution", "\n", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "\n", "self", ".", "embeddings", ".", "weight", ",", "a", "=", "-", "np", ".", "sqrt", "(", "3", ")", ",", "b", "=", "np", ".", "sqrt", "(", "3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.embedding_block.AtomEmbedding.forward": [[37, 46], ["embedding_block.AtomEmbedding.embeddings"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "Z", ")", ":", "\n", "        ", "\"\"\"\n        Returns\n        -------\n            h: torch.Tensor, shape=(nAtoms, emb_size)\n                Atom embeddings.\n        \"\"\"", "\n", "h", "=", "self", ".", "embeddings", "(", "Z", "-", "1", ")", "# -1 because Z.min()=1 (==Hydrogen)", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.embedding_block.EdgeEmbedding.__init__": [[60, 71], ["super().__init__", "base_layers.Dense"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "atom_features", ",", "\n", "edge_features", ",", "\n", "out_features", ",", "\n", "activation", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "in_features", "=", "2", "*", "atom_features", "+", "edge_features", "\n", "self", ".", "dense", "=", "Dense", "(", "\n", "in_features", ",", "out_features", ",", "activation", "=", "activation", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.embedding_block.EdgeEmbedding.forward": [[73, 103], ["torch.cat", "embedding_block.EdgeEmbedding.dense"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "h", ",", "\n", "m_rbf", ",", "\n", "idx_s", ",", "\n", "idx_t", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        Arguments\n        ---------\n        h\n        m_rbf: shape (nEdges, nFeatures)\n            in embedding block: m_rbf = rbf ; In interaction block: m_rbf = m_st\n        idx_s\n        idx_t\n\n        Returns\n        -------\n            m_st: torch.Tensor, shape=(nEdges, emb_size)\n                Edge embeddings.\n        \"\"\"", "\n", "h_s", "=", "h", "[", "idx_s", "]", "# shape=(nEdges, emb_size)", "\n", "h_t", "=", "h", "[", "idx_t", "]", "# shape=(nEdges, emb_size)", "\n", "\n", "m_st", "=", "torch", ".", "cat", "(", "\n", "[", "h_s", ",", "h_t", ",", "m_rbf", "]", ",", "dim", "=", "-", "1", "\n", ")", "# (nEdges, 2*emb_size+nFeatures)", "\n", "m_st", "=", "self", ".", "dense", "(", "m_st", ")", "# (nEdges, emb_size)", "\n", "return", "m_st", "\n", "", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.efficient.EfficientInteractionDownProjection.__init__": [[25, 38], ["super().__init__", "efficient.EfficientInteractionDownProjection.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_spherical", ":", "int", ",", "\n", "num_radial", ":", "int", ",", "\n", "emb_size_interm", ":", "int", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_spherical", "=", "num_spherical", "\n", "self", ".", "num_radial", "=", "num_radial", "\n", "self", ".", "emb_size_interm", "=", "emb_size_interm", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.efficient.EfficientInteractionDownProjection.reset_parameters": [[39, 47], ["torch.nn.Parameter", "initializers.he_orthogonal_init", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.initializers.he_orthogonal_init"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "empty", "(", "\n", "(", "self", ".", "num_spherical", ",", "self", ".", "num_radial", ",", "self", ".", "emb_size_interm", ")", "\n", ")", ",", "\n", "requires_grad", "=", "True", ",", "\n", ")", "\n", "he_orthogonal_init", "(", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.efficient.EfficientInteractionDownProjection.forward": [[48, 89], ["torch.matmul", "rbf_W1.permute.permute.permute", "sph.new_zeros", "torch.transpose", "torch.max", "torch.max", "torch.tensor().to", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "rbf", ",", "sph", ",", "id_ca", ",", "id_ragged_idx", ")", ":", "\n", "        ", "\"\"\"\n\n        Arguments\n        ---------\n        rbf: torch.Tensor, shape=(1, nEdges, num_radial)\n        sph: torch.Tensor, shape=(nEdges, Kmax, num_spherical)\n        id_ca\n        id_ragged_idx\n\n        Returns\n        -------\n        rbf_W1: torch.Tensor, shape=(nEdges, emb_size_interm, num_spherical)\n        sph: torch.Tensor, shape=(nEdges, Kmax, num_spherical)\n            Kmax = maximum number of neighbors of the edges\n        \"\"\"", "\n", "num_edges", "=", "rbf", ".", "shape", "[", "1", "]", "\n", "\n", "# MatMul: mul + sum over num_radial", "\n", "rbf_W1", "=", "torch", ".", "matmul", "(", "rbf", ",", "self", ".", "weight", ")", "\n", "# (num_spherical, nEdges , emb_size_interm)", "\n", "rbf_W1", "=", "rbf_W1", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "# (nEdges, emb_size_interm, num_spherical)", "\n", "\n", "# Zero padded dense matrix", "\n", "# maximum number of neighbors, catch empty id_ca with maximum", "\n", "if", "sph", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "Kmax", "=", "0", "\n", "", "else", ":", "\n", "            ", "Kmax", "=", "torch", ".", "max", "(", "\n", "torch", ".", "max", "(", "id_ragged_idx", "+", "1", ")", ",", "\n", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "id_ragged_idx", ".", "device", ")", ",", "\n", ")", "\n", "\n", "", "sph2", "=", "sph", ".", "new_zeros", "(", "num_edges", ",", "Kmax", ",", "self", ".", "num_spherical", ")", "\n", "sph2", "[", "id_ca", ",", "id_ragged_idx", "]", "=", "sph", "\n", "\n", "sph2", "=", "torch", ".", "transpose", "(", "sph2", ",", "1", ",", "2", ")", "\n", "# (nEdges, num_spherical/emb_size_interm, Kmax)", "\n", "\n", "return", "rbf_W1", ",", "sph2", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.efficient.EfficientInteractionBilinear.__init__": [[103, 115], ["super().__init__", "efficient.EfficientInteractionBilinear.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "emb_size", ":", "int", ",", "\n", "emb_size_interm", ":", "int", ",", "\n", "units_out", ":", "int", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_size", "=", "emb_size", "\n", "self", ".", "emb_size_interm", "=", "emb_size_interm", "\n", "self", ".", "units_out", "=", "units_out", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.efficient.EfficientInteractionBilinear.reset_parameters": [[116, 124], ["torch.nn.Parameter", "initializers.he_orthogonal_init", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.gemnet.initializers.he_orthogonal_init"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "empty", "(", "\n", "(", "self", ".", "emb_size", ",", "self", ".", "emb_size_interm", ",", "self", ".", "units_out", ")", ",", "\n", "requires_grad", "=", "True", ",", "\n", ")", "\n", ")", "\n", "he_orthogonal_init", "(", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.efficient.EfficientInteractionBilinear.forward": [[125, 174], ["torch.max", "m.new_zeros", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.tensor().to", "torch.matmul.permute", "torch.max", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "basis", ",", "\n", "m", ",", "\n", "id_reduce", ",", "\n", "id_ragged_idx", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        Arguments\n        ---------\n        basis\n        m: quadruplets: m = m_db , triplets: m = m_ba\n        id_reduce\n        id_ragged_idx\n\n        Returns\n        -------\n            m_ca: torch.Tensor, shape=(nEdges, units_out)\n                Edge embeddings.\n        \"\"\"", "\n", "# num_spherical is actually num_spherical**2 for quadruplets", "\n", "(", "rbf_W1", ",", "sph", ")", "=", "basis", "\n", "# (nEdges, emb_size_interm, num_spherical), (nEdges, num_spherical, Kmax)", "\n", "nEdges", "=", "rbf_W1", ".", "shape", "[", "0", "]", "\n", "\n", "# Create (zero-padded) dense matrix of the neighboring edge embeddings.", "\n", "Kmax", "=", "torch", ".", "max", "(", "\n", "torch", ".", "max", "(", "id_ragged_idx", ")", "+", "1", ",", "\n", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "id_ragged_idx", ".", "device", ")", ",", "\n", ")", "\n", "# maximum number of neighbors, catch empty id_reduce_ji with maximum", "\n", "m2", "=", "m", ".", "new_zeros", "(", "nEdges", ",", "Kmax", ",", "self", ".", "emb_size", ")", "\n", "m2", "[", "id_reduce", ",", "id_ragged_idx", "]", "=", "m", "\n", "# (num_quadruplets or num_triplets, emb_size) -> (nEdges, Kmax, emb_size)", "\n", "\n", "sum_k", "=", "torch", ".", "matmul", "(", "sph", ",", "m2", ")", "# (nEdges, num_spherical, emb_size)", "\n", "\n", "# MatMul: mul + sum over num_spherical", "\n", "rbf_W1_sum_k", "=", "torch", ".", "matmul", "(", "rbf_W1", ",", "sum_k", ")", "\n", "# (nEdges, emb_size_interm, emb_size)", "\n", "\n", "# Bilinear: Sum over emb_size_interm and emb_size", "\n", "m_ca", "=", "torch", ".", "matmul", "(", "rbf_W1_sum_k", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "self", ".", "weight", ")", "\n", "# (emb_size, nEdges, units_out)", "\n", "m_ca", "=", "torch", ".", "sum", "(", "m_ca", ",", "dim", "=", "0", ")", "\n", "# (nEdges, units_out)", "\n", "\n", "return", "m_ca", "\n", "", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.AtomUpdateBlock.__init__": [[34, 56], ["super().__init__", "base_layers.Dense", "scaling.ScalingFactor", "atom_update_block.AtomUpdateBlock.get_mlp"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.AtomUpdateBlock.get_mlp"], ["def", "__init__", "(", "\n", "self", ",", "\n", "emb_size_atom", ":", "int", ",", "\n", "emb_size_edge", ":", "int", ",", "\n", "emb_size_rbf", ":", "int", ",", "\n", "nHidden", ":", "int", ",", "\n", "activation", "=", "None", ",", "\n", "scale_file", "=", "None", ",", "\n", "name", ":", "str", "=", "\"atom_update\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "\n", "self", ".", "dense_rbf", "=", "Dense", "(", "\n", "emb_size_rbf", ",", "emb_size_edge", ",", "activation", "=", "None", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "scale_sum", "=", "ScalingFactor", "(", "\n", "scale_file", "=", "scale_file", ",", "name", "=", "name", "+", "\"_sum\"", "\n", ")", "\n", "\n", "self", ".", "layers", "=", "self", ".", "get_mlp", "(", "\n", "emb_size_edge", ",", "emb_size_atom", ",", "nHidden", ",", "activation", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.AtomUpdateBlock.get_mlp": [[58, 67], ["base_layers.Dense", "torch.nn.ModuleList", "base_layers.ResidualLayer", "range"], "methods", ["None"], ["", "def", "get_mlp", "(", "self", ",", "units_in", ",", "units", ",", "nHidden", ",", "activation", ")", ":", "\n", "        ", "dense1", "=", "Dense", "(", "units_in", ",", "units", ",", "activation", "=", "activation", ",", "bias", "=", "False", ")", "\n", "mlp", "=", "[", "dense1", "]", "\n", "res", "=", "[", "\n", "ResidualLayer", "(", "units", ",", "nLayers", "=", "2", ",", "activation", "=", "activation", ")", "\n", "for", "i", "in", "range", "(", "nHidden", ")", "\n", "]", "\n", "mlp", "+=", "res", "\n", "return", "torch", ".", "nn", ".", "ModuleList", "(", "mlp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.AtomUpdateBlock.forward": [[68, 88], ["atom_update_block.AtomUpdateBlock.dense_rbf", "torch_scatter.scatter", "atom_update_block.AtomUpdateBlock.scale_sum", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "m", ",", "rbf", ",", "id_j", ")", ":", "\n", "        ", "\"\"\"\n        Returns\n        -------\n            h: torch.Tensor, shape=(nAtoms, emb_size_atom)\n                Atom embedding.\n        \"\"\"", "\n", "nAtoms", "=", "h", ".", "shape", "[", "0", "]", "\n", "\n", "mlp_rbf", "=", "self", ".", "dense_rbf", "(", "rbf", ")", "# (nEdges, emb_size_edge)", "\n", "x", "=", "m", "*", "mlp_rbf", "\n", "\n", "x2", "=", "scatter", "(", "x", ",", "id_j", ",", "dim", "=", "0", ",", "dim_size", "=", "nAtoms", ",", "reduce", "=", "\"sum\"", ")", "\n", "# (nAtoms, emb_size_edge)", "\n", "x", "=", "self", ".", "scale_sum", "(", "m", ",", "x2", ")", "\n", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "# (nAtoms, emb_size_atom)", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.__init__": [[114, 164], ["atom_update_block.AtomUpdateBlock.__init__", "isinstance", "output_init.lower", "base_layers.Dense", "atom_update_block.OutputBlock.reset_parameters", "scaling.ScalingFactor", "atom_update_block.OutputBlock.get_mlp", "base_layers.Dense", "base_layers.Dense"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.AtomUpdateBlock.get_mlp"], ["def", "__init__", "(", "\n", "self", ",", "\n", "emb_size_atom", ":", "int", ",", "\n", "emb_size_edge", ":", "int", ",", "\n", "emb_size_rbf", ":", "int", ",", "\n", "nHidden", ":", "int", ",", "\n", "num_targets", ":", "int", ",", "\n", "activation", "=", "None", ",", "\n", "direct_forces", "=", "True", ",", "\n", "output_init", "=", "\"HeOrthogonal\"", ",", "\n", "scale_file", "=", "None", ",", "\n", "name", ":", "str", "=", "\"output\"", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "name", "=", "name", ",", "\n", "emb_size_atom", "=", "emb_size_atom", ",", "\n", "emb_size_edge", "=", "emb_size_edge", ",", "\n", "emb_size_rbf", "=", "emb_size_rbf", ",", "\n", "nHidden", "=", "nHidden", ",", "\n", "activation", "=", "activation", ",", "\n", "scale_file", "=", "scale_file", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "\n", "assert", "isinstance", "(", "output_init", ",", "str", ")", "\n", "self", ".", "output_init", "=", "output_init", ".", "lower", "(", ")", "\n", "self", ".", "direct_forces", "=", "direct_forces", "\n", "\n", "self", ".", "seq_energy", "=", "self", ".", "layers", "# inherited from parent class", "\n", "self", ".", "out_energy", "=", "Dense", "(", "\n", "emb_size_atom", ",", "num_targets", ",", "bias", "=", "False", ",", "activation", "=", "None", "\n", ")", "\n", "\n", "if", "self", ".", "direct_forces", ":", "\n", "            ", "self", ".", "scale_rbf_F", "=", "ScalingFactor", "(", "\n", "scale_file", "=", "scale_file", ",", "name", "=", "name", "+", "\"_had\"", "\n", ")", "\n", "self", ".", "seq_forces", "=", "self", ".", "get_mlp", "(", "\n", "emb_size_edge", ",", "emb_size_edge", ",", "nHidden", ",", "activation", "\n", ")", "\n", "self", ".", "out_forces", "=", "Dense", "(", "\n", "emb_size_edge", ",", "num_targets", ",", "bias", "=", "False", ",", "activation", "=", "None", "\n", ")", "\n", "self", ".", "dense_rbf_F", "=", "Dense", "(", "\n", "emb_size_rbf", ",", "emb_size_edge", ",", "activation", "=", "None", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters": [[165, 176], ["atom_update_block.OutputBlock.out_energy.reset_parameters", "atom_update_block.OutputBlock.out_forces.reset_parameters", "atom_update_block.OutputBlock.out_energy.reset_parameters", "UserWarning", "atom_update_block.OutputBlock.out_forces.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "output_init", "==", "\"heorthogonal\"", ":", "\n", "            ", "self", ".", "out_energy", ".", "reset_parameters", "(", "he_orthogonal_init", ")", "\n", "if", "self", ".", "direct_forces", ":", "\n", "                ", "self", ".", "out_forces", ".", "reset_parameters", "(", "he_orthogonal_init", ")", "\n", "", "", "elif", "self", ".", "output_init", "==", "\"zeros\"", ":", "\n", "            ", "self", ".", "out_energy", ".", "reset_parameters", "(", "torch", ".", "nn", ".", "init", ".", "zeros_", ")", "\n", "if", "self", ".", "direct_forces", ":", "\n", "                ", "self", ".", "out_forces", ".", "reset_parameters", "(", "torch", ".", "nn", ".", "init", ".", "zeros_", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "UserWarning", "(", "f\"Unknown output_init: {self.output_init}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.atom_update_block.OutputBlock.forward": [[177, 217], ["atom_update_block.OutputBlock.dense_rbf", "torch_scatter.scatter", "atom_update_block.OutputBlock.scale_sum", "atom_update_block.OutputBlock.out_energy", "layer", "enumerate", "atom_update_block.OutputBlock.dense_rbf_F", "atom_update_block.OutputBlock.scale_rbf_F", "atom_update_block.OutputBlock.out_forces", "layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "h", ",", "m", ",", "rbf", ",", "id_j", ")", ":", "\n", "        ", "\"\"\"\n        Returns\n        -------\n            (E, F): tuple\n            - E: torch.Tensor, shape=(nAtoms, num_targets)\n            - F: torch.Tensor, shape=(nEdges, num_targets)\n            Energy and force prediction\n        \"\"\"", "\n", "nAtoms", "=", "h", ".", "shape", "[", "0", "]", "\n", "\n", "# -------------------------------------- Energy Prediction -------------------------------------- #", "\n", "rbf_emb_E", "=", "self", ".", "dense_rbf", "(", "rbf", ")", "# (nEdges, emb_size_edge)", "\n", "x", "=", "m", "*", "rbf_emb_E", "\n", "\n", "x_E", "=", "scatter", "(", "x", ",", "id_j", ",", "dim", "=", "0", ",", "dim_size", "=", "nAtoms", ",", "reduce", "=", "\"sum\"", ")", "\n", "# (nAtoms, emb_size_edge)", "\n", "x_E", "=", "self", ".", "scale_sum", "(", "m", ",", "x_E", ")", "\n", "\n", "for", "layer", "in", "self", ".", "seq_energy", ":", "\n", "            ", "x_E", "=", "layer", "(", "x_E", ")", "# (nAtoms, emb_size_atom)", "\n", "\n", "", "x_E", "=", "self", ".", "out_energy", "(", "x_E", ")", "# (nAtoms, num_targets)", "\n", "\n", "# --------------------------------------- Force Prediction -------------------------------------- #", "\n", "if", "self", ".", "direct_forces", ":", "\n", "            ", "x_F", "=", "m", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "seq_forces", ")", ":", "\n", "                ", "x_F", "=", "layer", "(", "x_F", ")", "# (nEdges, emb_size_edge)", "\n", "\n", "", "rbf_emb_F", "=", "self", ".", "dense_rbf_F", "(", "rbf", ")", "# (nEdges, emb_size_edge)", "\n", "x_F_rbf", "=", "x_F", "*", "rbf_emb_F", "\n", "x_F", "=", "self", ".", "scale_rbf_F", "(", "x_F", ",", "x_F_rbf", ")", "\n", "\n", "x_F", "=", "self", ".", "out_forces", "(", "x_F", ")", "# (nEdges, num_targets)", "\n", "", "else", ":", "\n", "            ", "x_F", "=", "0", "\n", "# ----------------------------------------------------------------------------------------------- #", "\n", "\n", "", "return", "x_E", ",", "x_F", "\n", "", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.Jn": [[14, 19], ["scipy.special.spherical_jn"], "function", ["None"], ["def", "Jn", "(", "r", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n    numerical spherical bessel functions of order n\n    \"\"\"", "\n", "return", "sp", ".", "spherical_jn", "(", "n", ",", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.Jn_zeros": [[21, 37], ["numpy.zeros", "numpy.zeros", "range", "numpy.arange", "numpy.arange", "range", "scipy.optimize.brentq"], "function", ["None"], ["", "def", "Jn_zeros", "(", "n", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    Compute the first k zeros of the spherical bessel functions up to order n (excluded)\n    \"\"\"", "\n", "zerosj", "=", "np", ".", "zeros", "(", "(", "n", ",", "k", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "zerosj", "[", "0", "]", "=", "np", ".", "arange", "(", "1", ",", "k", "+", "1", ")", "*", "np", ".", "pi", "\n", "points", "=", "np", ".", "arange", "(", "1", ",", "k", "+", "n", ")", "*", "np", ".", "pi", "\n", "racines", "=", "np", ".", "zeros", "(", "k", "+", "n", "-", "1", ",", "dtype", "=", "\"float32\"", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "k", "+", "n", "-", "1", "-", "i", ")", ":", "\n", "            ", "foo", "=", "brentq", "(", "Jn", ",", "points", "[", "j", "]", ",", "points", "[", "j", "+", "1", "]", ",", "(", "i", ",", ")", ")", "\n", "racines", "[", "j", "]", "=", "foo", "\n", "", "points", "=", "racines", "\n", "zerosj", "[", "i", "]", "[", ":", "k", "]", "=", "racines", "[", ":", "k", "]", "\n", "\n", "", "return", "zerosj", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.spherical_bessel_formulas": [[39, 52], ["sympy.symbols", "range", "sympy.sin", "sympy.simplify", "sympy.sin", "sympy.diff", "sympy.simplify"], "function", ["None"], ["", "def", "spherical_bessel_formulas", "(", "n", ")", ":", "\n", "    ", "\"\"\"\n    Computes the sympy formulas for the spherical bessel functions up to order n (excluded)\n    \"\"\"", "\n", "x", "=", "sym", ".", "symbols", "(", "\"x\"", ")", "\n", "# j_i = (-x)^i * (1/x * d/dx)^\u00ee * sin(x)/x", "\n", "j", "=", "[", "sym", ".", "sin", "(", "x", ")", "/", "x", "]", "# j_0", "\n", "a", "=", "sym", ".", "sin", "(", "x", ")", "/", "x", "\n", "for", "i", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "        ", "b", "=", "sym", ".", "diff", "(", "a", ",", "x", ")", "/", "x", "\n", "j", "+=", "[", "sym", ".", "simplify", "(", "b", "*", "(", "-", "x", ")", "**", "i", ")", "]", "\n", "a", "=", "sym", ".", "simplify", "(", "b", ")", "\n", "", "return", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.bessel_basis": [[54, 89], ["basis_utils.Jn_zeros", "range", "basis_utils.spherical_bessel_formulas", "sympy.symbols", "range", "range", "range", "numpy.array", "sympy.simplify", "basis_utils.Jn", "f[].subs"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.Jn_zeros", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.spherical_bessel_formulas", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.Jn"], ["", "def", "bessel_basis", "(", "n", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    Compute the sympy formulas for the normalized and rescaled spherical bessel functions up to\n    order n (excluded) and maximum frequency k (excluded).\n\n    Returns:\n        bess_basis: list\n            Bessel basis formulas taking in a single argument x.\n            Has length n where each element has length k. -> In total n*k many.\n    \"\"\"", "\n", "zeros", "=", "Jn_zeros", "(", "n", ",", "k", ")", "\n", "normalizer", "=", "[", "]", "\n", "for", "order", "in", "range", "(", "n", ")", ":", "\n", "        ", "normalizer_tmp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "normalizer_tmp", "+=", "[", "0.5", "*", "Jn", "(", "zeros", "[", "order", ",", "i", "]", ",", "order", "+", "1", ")", "**", "2", "]", "\n", "", "normalizer_tmp", "=", "(", "\n", "1", "/", "np", ".", "array", "(", "normalizer_tmp", ")", "**", "0.5", "\n", ")", "# sqrt(2/(j_l+1)**2) , sqrt(1/c**3) not taken into account yet", "\n", "normalizer", "+=", "[", "normalizer_tmp", "]", "\n", "\n", "", "f", "=", "spherical_bessel_formulas", "(", "n", ")", "\n", "x", "=", "sym", ".", "symbols", "(", "\"x\"", ")", "\n", "bess_basis", "=", "[", "]", "\n", "for", "order", "in", "range", "(", "n", ")", ":", "\n", "        ", "bess_basis_tmp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "bess_basis_tmp", "+=", "[", "\n", "sym", ".", "simplify", "(", "\n", "normalizer", "[", "order", "]", "[", "i", "]", "\n", "*", "f", "[", "order", "]", ".", "subs", "(", "x", ",", "zeros", "[", "order", ",", "i", "]", "*", "x", ")", "\n", ")", "\n", "]", "\n", "", "bess_basis", "+=", "[", "bess_basis_tmp", "]", "\n", "", "return", "bess_basis", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.sph_harm_prefactor": [[91, 113], ["numpy.math.factorial", "numpy.math.factorial", "abs", "abs"], "function", ["None"], ["", "def", "sph_harm_prefactor", "(", "l_degree", ",", "m_order", ")", ":", "\n", "    ", "\"\"\"Computes the constant pre-factor for the spherical harmonic of degree l and order m.\n\n    Parameters\n    ----------\n        l_degree: int\n            Degree of the spherical harmonic. l >= 0\n        m_order: int\n            Order of the spherical harmonic. -l <= m <= l\n\n    Returns\n    -------\n        factor: float\n\n    \"\"\"", "\n", "# sqrt((2*l+1)/4*pi * (l-m)!/(l+m)! )", "\n", "return", "(", "\n", "(", "2", "*", "l_degree", "+", "1", ")", "\n", "/", "(", "4", "*", "np", ".", "pi", ")", "\n", "*", "np", ".", "math", ".", "factorial", "(", "l_degree", "-", "abs", "(", "m_order", ")", ")", "\n", "/", "np", ".", "math", ".", "factorial", "(", "l_degree", "+", "abs", "(", "m_order", ")", ")", "\n", ")", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.associated_legendre_polynomials": [[115, 195], ["sympy.symbols", "range", "range", "range", "range", "range", "sympy.simplify", "sympy.simplify", "sympy.simplify", "range", "range", "sympy.simplify", "range", "sympy.simplify", "numpy.math.factorial", "numpy.math.factorial"], "function", ["None"], ["", "def", "associated_legendre_polynomials", "(", "\n", "L_maxdegree", ",", "zero_m_only", "=", "True", ",", "pos_m_only", "=", "True", "\n", ")", ":", "\n", "    ", "\"\"\"Computes string formulas of the associated legendre polynomials up to degree L (excluded).\n\n    Parameters\n    ----------\n        L_maxdegree: int\n            Degree up to which to calculate the associated legendre polynomials (degree L is excluded).\n        zero_m_only: bool\n            If True only calculate the polynomials for the polynomials where m=0.\n        pos_m_only: bool\n            If True only calculate the polynomials for the polynomials where m>=0. Overwritten by zero_m_only.\n\n    Returns\n    -------\n        polynomials: list\n            Contains the sympy functions of the polynomials (in total L many if zero_m_only is True else L^2 many).\n    \"\"\"", "\n", "# calculations from http://web.cmb.usc.edu/people/alber/Software/tomominer/docs/cpp/group__legendre__polynomials.html", "\n", "z", "=", "sym", ".", "symbols", "(", "\"z\"", ")", "\n", "P_l_m", "=", "[", "\n", "[", "0", "]", "*", "(", "2", "*", "l_degree", "+", "1", ")", "for", "l_degree", "in", "range", "(", "L_maxdegree", ")", "\n", "]", "# for order l: -l <= m <= l", "\n", "\n", "P_l_m", "[", "0", "]", "[", "0", "]", "=", "1", "\n", "if", "L_maxdegree", ">", "0", ":", "\n", "        ", "if", "zero_m_only", ":", "\n", "# m = 0", "\n", "            ", "P_l_m", "[", "1", "]", "[", "0", "]", "=", "z", "\n", "for", "l_degree", "in", "range", "(", "2", ",", "L_maxdegree", ")", ":", "\n", "                ", "P_l_m", "[", "l_degree", "]", "[", "0", "]", "=", "sym", ".", "simplify", "(", "\n", "(", "\n", "(", "2", "*", "l_degree", "-", "1", ")", "*", "z", "*", "P_l_m", "[", "l_degree", "-", "1", "]", "[", "0", "]", "\n", "-", "(", "l_degree", "-", "1", ")", "*", "P_l_m", "[", "l_degree", "-", "2", "]", "[", "0", "]", "\n", ")", "\n", "/", "l_degree", "\n", ")", "\n", "", "return", "P_l_m", "\n", "", "else", ":", "\n", "# for m >= 0", "\n", "            ", "for", "l_degree", "in", "range", "(", "1", ",", "L_maxdegree", ")", ":", "\n", "                ", "P_l_m", "[", "l_degree", "]", "[", "l_degree", "]", "=", "sym", ".", "simplify", "(", "\n", "(", "1", "-", "2", "*", "l_degree", ")", "\n", "*", "(", "1", "-", "z", "**", "2", ")", "**", "0.5", "\n", "*", "P_l_m", "[", "l_degree", "-", "1", "]", "[", "l_degree", "-", "1", "]", "\n", ")", "# P_00, P_11, P_22, P_33", "\n", "\n", "", "for", "m_order", "in", "range", "(", "0", ",", "L_maxdegree", "-", "1", ")", ":", "\n", "                ", "P_l_m", "[", "m_order", "+", "1", "]", "[", "m_order", "]", "=", "sym", ".", "simplify", "(", "\n", "(", "2", "*", "m_order", "+", "1", ")", "*", "z", "*", "P_l_m", "[", "m_order", "]", "[", "m_order", "]", "\n", ")", "# P_10, P_21, P_32, P_43", "\n", "\n", "", "for", "l_degree", "in", "range", "(", "2", ",", "L_maxdegree", ")", ":", "\n", "                ", "for", "m_order", "in", "range", "(", "l_degree", "-", "1", ")", ":", "# P_20, P_30, P_31", "\n", "                    ", "P_l_m", "[", "l_degree", "]", "[", "m_order", "]", "=", "sym", ".", "simplify", "(", "\n", "(", "\n", "(", "2", "*", "l_degree", "-", "1", ")", "\n", "*", "z", "\n", "*", "P_l_m", "[", "l_degree", "-", "1", "]", "[", "m_order", "]", "\n", "-", "(", "l_degree", "+", "m_order", "-", "1", ")", "\n", "*", "P_l_m", "[", "l_degree", "-", "2", "]", "[", "m_order", "]", "\n", ")", "\n", "/", "(", "l_degree", "-", "m_order", ")", "\n", ")", "\n", "\n", "", "", "if", "not", "pos_m_only", ":", "\n", "# for m < 0: P_l(-m) = (-1)^m * (l-m)!/(l+m)! * P_lm", "\n", "                ", "for", "l_degree", "in", "range", "(", "1", ",", "L_maxdegree", ")", ":", "\n", "                    ", "for", "m_order", "in", "range", "(", "\n", "1", ",", "l_degree", "+", "1", "\n", ")", ":", "# P_1(-1), P_2(-1) P_2(-2)", "\n", "                        ", "P_l_m", "[", "l_degree", "]", "[", "-", "m_order", "]", "=", "sym", ".", "simplify", "(", "\n", "(", "-", "1", ")", "**", "m_order", "\n", "*", "np", ".", "math", ".", "factorial", "(", "l_degree", "-", "m_order", ")", "\n", "/", "np", ".", "math", ".", "factorial", "(", "l_degree", "+", "m_order", ")", "\n", "*", "P_l_m", "[", "l_degree", "]", "[", "m_order", "]", "\n", ")", "\n", "\n", "", "", "", "return", "P_l_m", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.real_sph_harm": [[197, 289], ["sympy.symbols", "basis_utils.associated_legendre_polynomials", "range", "sympy.symbols", "range", "sympy.simplify", "sympy.symbols", "range", "range", "range", "range", "sympy.symbols", "sympy.symbols", "range", "range", "range", "len", "basis_utils.sph_harm_prefactor", "sympy.simplify", "sympy.simplify", "range", "isinstance", "[].subs", "len", "sympy.simplify", "sympy.cos", "sympy.cos", "sympy.sin", "[].subs", "sympy.atan2", "basis_utils.sph_harm_prefactor", "basis_utils.sph_harm_prefactor"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.associated_legendre_polynomials", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.sph_harm_prefactor", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.sph_harm_prefactor", "home.repos.pwc.inspect_result.txie-93_cdvae.layers.basis_utils.sph_harm_prefactor"], ["", "", "", "def", "real_sph_harm", "(", "L_maxdegree", ",", "use_theta", ",", "use_phi", "=", "True", ",", "zero_m_only", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).\n    Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.\n\n    Parameters\n    ----------\n        L_maxdegree: int\n            Degree up to which to calculate the spherical harmonics (degree L is excluded).\n        use_theta: bool\n            - True: Expects the input of the formula strings to contain theta.\n            - False: Expects the input of the formula strings to contain z.\n        use_phi: bool\n            - True: Expects the input of the formula strings to contain phi.\n            - False: Expects the input of the formula strings to contain x and y.\n            Does nothing if zero_m_only is True\n        zero_m_only: bool\n            If True only calculate the harmonics where m=0.\n\n    Returns\n    -------\n        Y_lm_real: list\n            Computes formula strings of the the real part of the spherical harmonics up\n            to degree L (where degree L is not excluded).\n            In total L^2 many sph harm exist up to degree L (excluded). However, if zero_m_only only is True then\n            the total count is reduced to be only L many.\n    \"\"\"", "\n", "z", "=", "sym", ".", "symbols", "(", "\"z\"", ")", "\n", "P_l_m", "=", "associated_legendre_polynomials", "(", "L_maxdegree", ",", "zero_m_only", ")", "\n", "if", "zero_m_only", ":", "\n", "# for all m != 0: Y_lm = 0", "\n", "        ", "Y_l_m", "=", "[", "[", "0", "]", "for", "l_degree", "in", "range", "(", "L_maxdegree", ")", "]", "\n", "", "else", ":", "\n", "        ", "Y_l_m", "=", "[", "\n", "[", "0", "]", "*", "(", "2", "*", "l_degree", "+", "1", ")", "for", "l_degree", "in", "range", "(", "L_maxdegree", ")", "\n", "]", "# for order l: -l <= m <= l", "\n", "\n", "# convert expressions to spherical coordiantes", "\n", "", "if", "use_theta", ":", "\n", "# replace z by cos(theta)", "\n", "        ", "theta", "=", "sym", ".", "symbols", "(", "\"theta\"", ")", "\n", "for", "l_degree", "in", "range", "(", "L_maxdegree", ")", ":", "\n", "            ", "for", "m_order", "in", "range", "(", "len", "(", "P_l_m", "[", "l_degree", "]", ")", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "P_l_m", "[", "l_degree", "]", "[", "m_order", "]", ",", "int", ")", ":", "\n", "                    ", "P_l_m", "[", "l_degree", "]", "[", "m_order", "]", "=", "P_l_m", "[", "l_degree", "]", "[", "m_order", "]", ".", "subs", "(", "\n", "z", ",", "sym", ".", "cos", "(", "theta", ")", "\n", ")", "\n", "\n", "## calculate Y_lm", "\n", "# Y_lm = N * P_lm(cos(theta)) * exp(i*m*phi)", "\n", "#             { sqrt(2) * (-1)^m * N * P_l|m| * sin(|m|*phi)   if m < 0", "\n", "# Y_lm_real = { Y_lm                                           if m = 0", "\n", "#             { sqrt(2) * (-1)^m * N * P_lm * cos(m*phi)       if m > 0", "\n", "\n", "", "", "", "", "for", "l_degree", "in", "range", "(", "L_maxdegree", ")", ":", "\n", "        ", "Y_l_m", "[", "l_degree", "]", "[", "0", "]", "=", "sym", ".", "simplify", "(", "\n", "sph_harm_prefactor", "(", "l_degree", ",", "0", ")", "*", "P_l_m", "[", "l_degree", "]", "[", "0", "]", "\n", ")", "# Y_l0", "\n", "\n", "", "if", "not", "zero_m_only", ":", "\n", "        ", "phi", "=", "sym", ".", "symbols", "(", "\"phi\"", ")", "\n", "for", "l_degree", "in", "range", "(", "1", ",", "L_maxdegree", ")", ":", "\n", "# m > 0", "\n", "            ", "for", "m_order", "in", "range", "(", "1", ",", "l_degree", "+", "1", ")", ":", "\n", "                ", "Y_l_m", "[", "l_degree", "]", "[", "m_order", "]", "=", "sym", ".", "simplify", "(", "\n", "2", "**", "0.5", "\n", "*", "(", "-", "1", ")", "**", "m_order", "\n", "*", "sph_harm_prefactor", "(", "l_degree", ",", "m_order", ")", "\n", "*", "P_l_m", "[", "l_degree", "]", "[", "m_order", "]", "\n", "*", "sym", ".", "cos", "(", "m_order", "*", "phi", ")", "\n", ")", "\n", "# m < 0", "\n", "", "for", "m_order", "in", "range", "(", "1", ",", "l_degree", "+", "1", ")", ":", "\n", "                ", "Y_l_m", "[", "l_degree", "]", "[", "-", "m_order", "]", "=", "sym", ".", "simplify", "(", "\n", "2", "**", "0.5", "\n", "*", "(", "-", "1", ")", "**", "m_order", "\n", "*", "sph_harm_prefactor", "(", "l_degree", ",", "-", "m_order", ")", "\n", "*", "P_l_m", "[", "l_degree", "]", "[", "m_order", "]", "\n", "*", "sym", ".", "sin", "(", "m_order", "*", "phi", ")", "\n", ")", "\n", "\n", "# convert expressions to cartesian coordinates", "\n", "", "", "if", "not", "use_phi", ":", "\n", "# replace phi by atan2(y,x)", "\n", "            ", "x", "=", "sym", ".", "symbols", "(", "\"x\"", ")", "\n", "y", "=", "sym", ".", "symbols", "(", "\"y\"", ")", "\n", "for", "l_degree", "in", "range", "(", "L_maxdegree", ")", ":", "\n", "                ", "for", "m_order", "in", "range", "(", "len", "(", "Y_l_m", "[", "l_degree", "]", ")", ")", ":", "\n", "                    ", "Y_l_m", "[", "l_degree", "]", "[", "m_order", "]", "=", "sym", ".", "simplify", "(", "\n", "Y_l_m", "[", "l_degree", "]", "[", "m_order", "]", ".", "subs", "(", "phi", ",", "sym", ".", "atan2", "(", "y", ",", "x", ")", ")", "\n", ")", "\n", "", "", "", "", "return", "Y_l_m", "\n", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.__init__": [[607, 610], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "means", "=", "None", ",", "stds", "=", "None", ")", ":", "\n", "        ", "self", ".", "means", "=", "means", "\n", "self", ".", "stds", "=", "stds", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.fit": [[611, 616], ["torch.tensor", "torch.mean", "torch.std"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "torch", ".", "tensor", "(", "X", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "means", "=", "torch", ".", "mean", "(", "X", ",", "dim", "=", "0", ")", "\n", "# https://github.com/pytorch/pytorch/issues/29372", "\n", "self", ".", "stds", "=", "torch", ".", "std", "(", "X", ",", "dim", "=", "0", ",", "unbiased", "=", "False", ")", "+", "EPSILON", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.transform": [[617, 620], ["torch.tensor"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "torch", ".", "tensor", "(", "X", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "return", "(", "X", "-", "self", ".", "means", ")", "/", "self", ".", "stds", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.inverse_transform": [[621, 624], ["torch.tensor"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "torch", ".", "tensor", "(", "X", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "return", "X", "*", "self", ".", "stds", "+", "self", ".", "means", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.match_device": [[625, 629], ["data_utils.StandardScalerTorch.means.to", "data_utils.StandardScalerTorch.stds.to"], "methods", ["None"], ["", "def", "match_device", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "self", ".", "means", ".", "device", "!=", "tensor", ".", "device", ":", "\n", "            ", "self", ".", "means", "=", "self", ".", "means", ".", "to", "(", "tensor", ".", "device", ")", "\n", "self", ".", "stds", "=", "self", ".", "stds", ".", "to", "(", "tensor", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.copy": [[630, 634], ["data_utils.StandardScalerTorch", "data_utils.StandardScalerTorch.means.clone().detach", "data_utils.StandardScalerTorch.stds.clone().detach", "data_utils.StandardScalerTorch.means.clone", "data_utils.StandardScalerTorch.stds.clone"], "methods", ["None"], ["", "", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "StandardScalerTorch", "(", "\n", "means", "=", "self", ".", "means", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "\n", "stds", "=", "self", ".", "stds", ".", "clone", "(", ")", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScalerTorch.__repr__": [[635, 638], ["data_utils.StandardScalerTorch.means.tolist", "data_utils.StandardScalerTorch.stds.tolist"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "(", "\n", "f\"{self.__class__.__name__}(\"", "\n", "f\"means: {self.means.tolist()}, \"", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.__init__": [[776, 785], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "means", "=", "None", ",", "stds", "=", "None", ",", "replace_nan_token", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param means: An optional 1D numpy array of precomputed means.\n        :param stds: An optional 1D numpy array of precomputed standard deviations.\n        :param replace_nan_token: A token to use to replace NaN entries in the features.\n        \"\"\"", "\n", "self", ".", "means", "=", "means", "\n", "self", ".", "stds", "=", "stds", "\n", "self", ".", "replace_nan_token", "=", "replace_nan_token", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.fit": [[786, 803], ["numpy.array().astype", "numpy.nanmean", "numpy.nanstd", "numpy.where", "numpy.where", "numpy.where", "numpy.isnan", "numpy.zeros", "numpy.isnan", "numpy.ones", "numpy.ones", "numpy.array"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Learns means and standard deviations across the 0th axis of the data :code:`X`.\n        :param X: A list of lists of floats (or None).\n        :return: The fitted :class:`StandardScaler` (self).\n        \"\"\"", "\n", "X", "=", "np", ".", "array", "(", "X", ")", ".", "astype", "(", "float", ")", "\n", "self", ".", "means", "=", "np", ".", "nanmean", "(", "X", ",", "axis", "=", "0", ")", "\n", "self", ".", "stds", "=", "np", ".", "nanstd", "(", "X", ",", "axis", "=", "0", ")", "\n", "self", ".", "means", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "self", ".", "means", ")", ",", "\n", "np", ".", "zeros", "(", "self", ".", "means", ".", "shape", ")", ",", "self", ".", "means", ")", "\n", "self", ".", "stds", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "self", ".", "stds", ")", ",", "\n", "np", ".", "ones", "(", "self", ".", "stds", ".", "shape", ")", ",", "self", ".", "stds", ")", "\n", "self", ".", "stds", "=", "np", ".", "where", "(", "self", ".", "stds", "==", "0", ",", "np", ".", "ones", "(", "\n", "self", ".", "stds", ".", "shape", ")", ",", "self", ".", "stds", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.transform": [[804, 816], ["numpy.array().astype", "numpy.where", "numpy.isnan", "numpy.array"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Transforms the data by subtracting the means and dividing by the standard deviations.\n        :param X: A list of lists of floats (or None).\n        :return: The transformed data with NaNs replaced by :code:`self.replace_nan_token`.\n        \"\"\"", "\n", "X", "=", "np", ".", "array", "(", "X", ")", ".", "astype", "(", "float", ")", "\n", "transformed_with_nan", "=", "(", "X", "-", "self", ".", "means", ")", "/", "self", ".", "stds", "\n", "transformed_with_none", "=", "np", ".", "where", "(", "\n", "np", ".", "isnan", "(", "transformed_with_nan", ")", ",", "self", ".", "replace_nan_token", ",", "transformed_with_nan", ")", "\n", "\n", "return", "transformed_with_none", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.inverse_transform": [[817, 829], ["numpy.array().astype", "numpy.where", "numpy.isnan", "numpy.array"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Performs the inverse transformation by multiplying by the standard deviations and adding the means.\n        :param X: A list of lists of floats.\n        :return: The inverse transformed data with NaNs replaced by :code:`self.replace_nan_token`.\n        \"\"\"", "\n", "X", "=", "np", ".", "array", "(", "X", ")", ".", "astype", "(", "float", ")", "\n", "transformed_with_nan", "=", "X", "*", "self", ".", "stds", "+", "self", ".", "means", "\n", "transformed_with_none", "=", "np", ".", "where", "(", "\n", "np", ".", "isnan", "(", "transformed_with_nan", ")", ",", "self", ".", "replace_nan_token", ",", "transformed_with_nan", ")", "\n", "\n", "return", "transformed_with_none", "\n", "", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.build_crystal": [[87, 106], ["pymatgen.core.structure.Structure.from_str", "pymatgen.core.structure.Structure", "crystal.get_reduced_structure.get_primitive_structure", "crystal.get_reduced_structure.get_reduced_structure", "pymatgen.core.lattice.Lattice.from_parameters"], "function", ["None"], ["def", "build_crystal", "(", "crystal_str", ",", "niggli", "=", "True", ",", "primitive", "=", "False", ")", ":", "\n", "    ", "\"\"\"Build crystal from cif string.\"\"\"", "\n", "crystal", "=", "Structure", ".", "from_str", "(", "crystal_str", ",", "fmt", "=", "'cif'", ")", "\n", "\n", "if", "primitive", ":", "\n", "        ", "crystal", "=", "crystal", ".", "get_primitive_structure", "(", ")", "\n", "\n", "", "if", "niggli", ":", "\n", "        ", "crystal", "=", "crystal", ".", "get_reduced_structure", "(", ")", "\n", "\n", "", "canonical_crystal", "=", "Structure", "(", "\n", "lattice", "=", "Lattice", ".", "from_parameters", "(", "*", "crystal", ".", "lattice", ".", "parameters", ")", ",", "\n", "species", "=", "crystal", ".", "species", ",", "\n", "coords", "=", "crystal", ".", "frac_coords", ",", "\n", "coords_are_cartesian", "=", "False", ",", "\n", ")", "\n", "# match is gaurantteed because cif only uses lattice params & frac_coords", "\n", "# assert canonical_crystal.matches(crystal)", "\n", "return", "canonical_crystal", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.build_crystal_graph": [[108, 144], ["numpy.allclose", "numpy.array", "numpy.array", "numpy.array", "pymatgen.analysis.graphs.StructureGraph.with_local_env_strategy", "data_utils.lattice_params_to_matrix", "StructureGraph.with_local_env_strategy.graph.edges", "numpy.array", "numpy.array", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "tuple"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_params_to_matrix"], ["", "def", "build_crystal_graph", "(", "crystal", ",", "graph_method", "=", "'crystalnn'", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "\n", "if", "graph_method", "==", "'crystalnn'", ":", "\n", "        ", "crystal_graph", "=", "StructureGraph", ".", "with_local_env_strategy", "(", "\n", "crystal", ",", "CrystalNN", ")", "\n", "", "elif", "graph_method", "==", "'none'", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "frac_coords", "=", "crystal", ".", "frac_coords", "\n", "atom_types", "=", "crystal", ".", "atomic_numbers", "\n", "lattice_parameters", "=", "crystal", ".", "lattice", ".", "parameters", "\n", "lengths", "=", "lattice_parameters", "[", ":", "3", "]", "\n", "angles", "=", "lattice_parameters", "[", "3", ":", "]", "\n", "\n", "assert", "np", ".", "allclose", "(", "crystal", ".", "lattice", ".", "matrix", ",", "\n", "lattice_params_to_matrix", "(", "*", "lengths", ",", "*", "angles", ")", ")", "\n", "\n", "edge_indices", ",", "to_jimages", "=", "[", "]", ",", "[", "]", "\n", "if", "graph_method", "!=", "'none'", ":", "\n", "        ", "for", "i", ",", "j", ",", "to_jimage", "in", "crystal_graph", ".", "graph", ".", "edges", "(", "data", "=", "'to_jimage'", ")", ":", "\n", "            ", "edge_indices", ".", "append", "(", "[", "j", ",", "i", "]", ")", "\n", "to_jimages", ".", "append", "(", "to_jimage", ")", "\n", "edge_indices", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "to_jimages", ".", "append", "(", "tuple", "(", "-", "tj", "for", "tj", "in", "to_jimage", ")", ")", "\n", "\n", "", "", "atom_types", "=", "np", ".", "array", "(", "atom_types", ")", "\n", "lengths", ",", "angles", "=", "np", ".", "array", "(", "lengths", ")", ",", "np", ".", "array", "(", "angles", ")", "\n", "edge_indices", "=", "np", ".", "array", "(", "edge_indices", ")", "\n", "to_jimages", "=", "np", ".", "array", "(", "to_jimages", ")", "\n", "num_atoms", "=", "atom_types", ".", "shape", "[", "0", "]", "\n", "\n", "return", "frac_coords", ",", "atom_types", ",", "lengths", ",", "angles", ",", "edge_indices", ",", "to_jimages", ",", "num_atoms", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.abs_cap": [[146, 159], ["max", "min"], "function", ["None"], ["", "def", "abs_cap", "(", "val", ",", "max_abs_val", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Returns the value with its absolute value capped at max_abs_val.\n    Particularly useful in passing values to trignometric functions where\n    numerical errors may result in an argument > 1 being passed in.\n    https://github.com/materialsproject/pymatgen/blob/b789d74639aa851d7e5ee427a765d9fd5a8d1079/pymatgen/util/num.py#L15\n    Args:\n        val (float): Input value.\n        max_abs_val (float): The maximum absolute value for val. Defaults to 1.\n    Returns:\n        val if abs(val) < 1 else sign of val * max_abs_val.\n    \"\"\"", "\n", "return", "max", "(", "min", "(", "val", ",", "max_abs_val", ")", ",", "-", "max_abs_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_params_to_matrix": [[161, 182], ["numpy.radians", "numpy.cos", "numpy.sin", "data_utils.abs_cap", "numpy.arccos", "numpy.array", "float", "numpy.cos", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.abs_cap"], ["", "def", "lattice_params_to_matrix", "(", "a", ",", "b", ",", "c", ",", "alpha", ",", "beta", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"Converts lattice from abc, angles to matrix.\n    https://github.com/materialsproject/pymatgen/blob/b789d74639aa851d7e5ee427a765d9fd5a8d1079/pymatgen/core/lattice.py#L311\n    \"\"\"", "\n", "angles_r", "=", "np", ".", "radians", "(", "[", "alpha", ",", "beta", ",", "gamma", "]", ")", "\n", "cos_alpha", ",", "cos_beta", ",", "cos_gamma", "=", "np", ".", "cos", "(", "angles_r", ")", "\n", "sin_alpha", ",", "sin_beta", ",", "sin_gamma", "=", "np", ".", "sin", "(", "angles_r", ")", "\n", "\n", "val", "=", "(", "cos_alpha", "*", "cos_beta", "-", "cos_gamma", ")", "/", "(", "sin_alpha", "*", "sin_beta", ")", "\n", "# Sometimes rounding errors result in values slightly > 1.", "\n", "val", "=", "abs_cap", "(", "val", ")", "\n", "gamma_star", "=", "np", ".", "arccos", "(", "val", ")", "\n", "\n", "vector_a", "=", "[", "a", "*", "sin_beta", ",", "0.0", ",", "a", "*", "cos_beta", "]", "\n", "vector_b", "=", "[", "\n", "-", "b", "*", "sin_alpha", "*", "np", ".", "cos", "(", "gamma_star", ")", ",", "\n", "b", "*", "sin_alpha", "*", "np", ".", "sin", "(", "gamma_star", ")", ",", "\n", "b", "*", "cos_alpha", ",", "\n", "]", "\n", "vector_c", "=", "[", "0.0", ",", "0.0", ",", "float", "(", "c", ")", "]", "\n", "return", "np", ".", "array", "(", "[", "vector_a", ",", "vector_b", ",", "vector_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_params_to_matrix_torch": [[184, 213], ["torch.deg2rad", "torch.cos", "torch.sin", "torch.clamp", "torch.arccos", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros", "torch.zeros", "torch.zeros", "lengths.size", "torch.cos", "torch.sin", "lengths.size", "lengths.size"], "function", ["None"], ["", "def", "lattice_params_to_matrix_torch", "(", "lengths", ",", "angles", ")", ":", "\n", "    ", "\"\"\"Batched torch version to compute lattice matrix from params.\n\n    lengths: torch.Tensor of shape (N, 3), unit A\n    angles: torch.Tensor of shape (N, 3), unit degree\n    \"\"\"", "\n", "angles_r", "=", "torch", ".", "deg2rad", "(", "angles", ")", "\n", "coses", "=", "torch", ".", "cos", "(", "angles_r", ")", "\n", "sins", "=", "torch", ".", "sin", "(", "angles_r", ")", "\n", "\n", "val", "=", "(", "coses", "[", ":", ",", "0", "]", "*", "coses", "[", ":", ",", "1", "]", "-", "coses", "[", ":", ",", "2", "]", ")", "/", "(", "sins", "[", ":", ",", "0", "]", "*", "sins", "[", ":", ",", "1", "]", ")", "\n", "# Sometimes rounding errors result in values slightly > 1.", "\n", "val", "=", "torch", ".", "clamp", "(", "val", ",", "-", "1.", ",", "1.", ")", "\n", "gamma_star", "=", "torch", ".", "arccos", "(", "val", ")", "\n", "\n", "vector_a", "=", "torch", ".", "stack", "(", "[", "\n", "lengths", "[", ":", ",", "0", "]", "*", "sins", "[", ":", ",", "1", "]", ",", "\n", "torch", ".", "zeros", "(", "lengths", ".", "size", "(", "0", ")", ",", "device", "=", "lengths", ".", "device", ")", ",", "\n", "lengths", "[", ":", ",", "0", "]", "*", "coses", "[", ":", ",", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "vector_b", "=", "torch", ".", "stack", "(", "[", "\n", "-", "lengths", "[", ":", ",", "1", "]", "*", "sins", "[", ":", ",", "0", "]", "*", "torch", ".", "cos", "(", "gamma_star", ")", ",", "\n", "lengths", "[", ":", ",", "1", "]", "*", "sins", "[", ":", ",", "0", "]", "*", "torch", ".", "sin", "(", "gamma_star", ")", ",", "\n", "lengths", "[", ":", ",", "1", "]", "*", "coses", "[", ":", ",", "0", "]", "]", ",", "dim", "=", "1", ")", "\n", "vector_c", "=", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "zeros", "(", "lengths", ".", "size", "(", "0", ")", ",", "device", "=", "lengths", ".", "device", ")", ",", "\n", "torch", ".", "zeros", "(", "lengths", ".", "size", "(", "0", ")", ",", "device", "=", "lengths", ".", "device", ")", ",", "\n", "lengths", "[", ":", ",", "2", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "torch", ".", "stack", "(", "[", "vector_a", ",", "vector_b", ",", "vector_c", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.compute_volume": [[215, 223], ["torch.unbind", "torch.abs", "torch.einsum", "torch.cross"], "function", ["None"], ["", "def", "compute_volume", "(", "batch_lattice", ")", ":", "\n", "    ", "\"\"\"Compute volume from batched lattice matrix\n\n    batch_lattice: (N, 3, 3)\n    \"\"\"", "\n", "vector_a", ",", "vector_b", ",", "vector_c", "=", "torch", ".", "unbind", "(", "batch_lattice", ",", "dim", "=", "1", ")", "\n", "return", "torch", ".", "abs", "(", "torch", ".", "einsum", "(", "'bi,bi->b'", ",", "vector_a", ",", "\n", "torch", ".", "cross", "(", "vector_b", ",", "vector_c", ",", "dim", "=", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lengths_angles_to_volume": [[225, 228], ["data_utils.lattice_params_to_matrix_torch", "data_utils.compute_volume"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_params_to_matrix_torch", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.compute_volume"], ["", "def", "lengths_angles_to_volume", "(", "lengths", ",", "angles", ")", ":", "\n", "    ", "lattice", "=", "lattice_params_to_matrix_torch", "(", "lengths", ",", "angles", ")", "\n", "return", "compute_volume", "(", "lattice", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_matrix_to_params": [[230, 243], ["numpy.sqrt().tolist", "numpy.zeros", "range", "data_utils.abs_cap", "numpy.sqrt", "numpy.arccos", "numpy.sum", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.abs_cap"], ["", "def", "lattice_matrix_to_params", "(", "matrix", ")", ":", "\n", "    ", "lengths", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "matrix", "**", "2", ",", "axis", "=", "1", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "angles", "=", "np", ".", "zeros", "(", "3", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "j", "=", "(", "i", "+", "1", ")", "%", "3", "\n", "k", "=", "(", "i", "+", "2", ")", "%", "3", "\n", "angles", "[", "i", "]", "=", "abs_cap", "(", "np", ".", "dot", "(", "matrix", "[", "j", "]", ",", "matrix", "[", "k", "]", ")", "/", "\n", "(", "lengths", "[", "j", "]", "*", "lengths", "[", "k", "]", ")", ")", "\n", "", "angles", "=", "np", ".", "arccos", "(", "angles", ")", "*", "180.0", "/", "np", ".", "pi", "\n", "a", ",", "b", ",", "c", "=", "lengths", "\n", "alpha", ",", "beta", ",", "gamma", "=", "angles", "\n", "return", "a", ",", "b", ",", "c", ",", "alpha", ",", "beta", ",", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.frac_to_cart_coords": [[245, 256], ["data_utils.lattice_params_to_matrix_torch", "torch.repeat_interleave", "torch.einsum"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_params_to_matrix_torch"], ["", "def", "frac_to_cart_coords", "(", "\n", "frac_coords", ",", "\n", "lengths", ",", "\n", "angles", ",", "\n", "num_atoms", ",", "\n", ")", ":", "\n", "    ", "lattice", "=", "lattice_params_to_matrix_torch", "(", "lengths", ",", "angles", ")", "\n", "lattice_nodes", "=", "torch", ".", "repeat_interleave", "(", "lattice", ",", "num_atoms", ",", "dim", "=", "0", ")", "\n", "pos", "=", "torch", ".", "einsum", "(", "'bi,bij->bj'", ",", "frac_coords", ",", "lattice_nodes", ")", "# cart coords", "\n", "\n", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.cart_to_frac_coords": [[258, 270], ["data_utils.lattice_params_to_matrix_torch", "torch.linalg.pinv", "torch.repeat_interleave", "torch.einsum"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_params_to_matrix_torch"], ["", "def", "cart_to_frac_coords", "(", "\n", "cart_coords", ",", "\n", "lengths", ",", "\n", "angles", ",", "\n", "num_atoms", ",", "\n", ")", ":", "\n", "    ", "lattice", "=", "lattice_params_to_matrix_torch", "(", "lengths", ",", "angles", ")", "\n", "# use pinv in case the predicted lattice is not rank 3", "\n", "inv_lattice", "=", "torch", ".", "linalg", ".", "pinv", "(", "lattice", ")", "\n", "inv_lattice_nodes", "=", "torch", ".", "repeat_interleave", "(", "inv_lattice", ",", "num_atoms", ",", "dim", "=", "0", ")", "\n", "frac_coords", "=", "torch", ".", "einsum", "(", "'bi,bij->bj'", ",", "cart_coords", ",", "inv_lattice_nodes", ")", "\n", "return", "(", "frac_coords", "%", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.get_pbc_distances": [[272, 316], ["data_utils.lattice_params_to_matrix_torch", "torch.repeat_interleave", "torch.einsum", "distance_vectors.norm", "torch.repeat_interleave", "torch.einsum", "to_jimages.float"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_params_to_matrix_torch"], ["", "def", "get_pbc_distances", "(", "\n", "coords", ",", "\n", "edge_index", ",", "\n", "lengths", ",", "\n", "angles", ",", "\n", "to_jimages", ",", "\n", "num_atoms", ",", "\n", "num_bonds", ",", "\n", "coord_is_cart", "=", "False", ",", "\n", "return_offsets", "=", "False", ",", "\n", "return_distance_vec", "=", "False", ",", "\n", ")", ":", "\n", "    ", "lattice", "=", "lattice_params_to_matrix_torch", "(", "lengths", ",", "angles", ")", "\n", "\n", "if", "coord_is_cart", ":", "\n", "        ", "pos", "=", "coords", "\n", "", "else", ":", "\n", "        ", "lattice_nodes", "=", "torch", ".", "repeat_interleave", "(", "lattice", ",", "num_atoms", ",", "dim", "=", "0", ")", "\n", "pos", "=", "torch", ".", "einsum", "(", "'bi,bij->bj'", ",", "coords", ",", "lattice_nodes", ")", "# cart coords", "\n", "\n", "", "j_index", ",", "i_index", "=", "edge_index", "\n", "\n", "distance_vectors", "=", "pos", "[", "j_index", "]", "-", "pos", "[", "i_index", "]", "\n", "\n", "# correct for pbc", "\n", "lattice_edges", "=", "torch", ".", "repeat_interleave", "(", "lattice", ",", "num_bonds", ",", "dim", "=", "0", ")", "\n", "offsets", "=", "torch", ".", "einsum", "(", "'bi,bij->bj'", ",", "to_jimages", ".", "float", "(", ")", ",", "lattice_edges", ")", "\n", "distance_vectors", "+=", "offsets", "\n", "\n", "# compute distances", "\n", "distances", "=", "distance_vectors", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "\n", "out", "=", "{", "\n", "\"edge_index\"", ":", "edge_index", ",", "\n", "\"distances\"", ":", "distances", ",", "\n", "}", "\n", "\n", "if", "return_distance_vec", ":", "\n", "        ", "out", "[", "\"distance_vec\"", "]", "=", "distance_vectors", "\n", "\n", "", "if", "return_offsets", ":", "\n", "        ", "out", "[", "\"offsets\"", "]", "=", "offsets", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.radius_graph_pbc_wrapper": [[318, 324], ["data_utils.frac_to_cart_coords", "data_utils.radius_graph_pbc"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.frac_to_cart_coords", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.radius_graph_pbc"], ["", "def", "radius_graph_pbc_wrapper", "(", "data", ",", "radius", ",", "max_num_neighbors_threshold", ",", "device", ")", ":", "\n", "    ", "cart_coords", "=", "frac_to_cart_coords", "(", "\n", "data", ".", "frac_coords", ",", "data", ".", "lengths", ",", "data", ".", "angles", ",", "data", ".", "num_atoms", ")", "\n", "return", "radius_graph_pbc", "(", "\n", "cart_coords", ",", "data", ".", "lengths", ",", "data", ".", "angles", ",", "data", ".", "num_atoms", ",", "radius", ",", "\n", "max_num_neighbors_threshold", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.radius_graph_pbc": [[326, 532], ["len", "torch.repeat_interleave", "torch.repeat_interleave", "torch.sum", "torch.repeat_interleave", "torch.index_select", "torch.index_select", "torch.tensor().float", "len", "unit_cell.view.view().repeat", "torch.transpose", "unit_cell.view.view().expand", "data_utils.lattice_params_to_matrix_torch", "torch.transpose", "torch.bmm", "torch.repeat_interleave", "pos1.view().expand.view().expand", "pos2.view().expand.view().expand", "torch.masked_select.view().repeat().view", "torch.masked_select.view().repeat().view", "torch.sum", "torch.masked_select.view", "torch.le", "torch.gt", "torch.logical_and", "torch.masked_select", "torch.masked_select", "torch.masked_select", "unit_cell.view.view", "torch.zeros", "num_neighbors.long.index_add_", "num_neighbors.long.long", "torch.max().long", "copy.deepcopy", "torch.zeros().long", "torch.zeros().long", "torch.cumsum", "torch.cumsum", "torch.masked_select", "torch.zeros().fill_", "torch.repeat_interleave", "distance_sort.view.index_copy_", "distance_sort.view.view", "torch.sort", "torch.le", "torch.masked_select", "torch.zeros().bool", "torch.zeros().bool.index_fill_", "torch.masked_select", "torch.masked_select", "torch.masked_select", "unit_cell.view.view", "torch.stack", "torch.cumsum", "torch.cumsum", "torch.arange", "len", "torch.argsort", "torch.masked_select.view", "torch.argsort.masked_select", "torch.zeros", "torch.masked_select.scatter_", "torch.masked_select.bool", "unit_cell.view().repeat.view", "torch.logical_and.view().expand", "torch.masked_select", "len", "torch.ones", "torch.cumsum", "len", "index_neighbor_offset.view().expand", "unit_cell.view.view", "torch.zeros().bool.view().expand", "torch.masked_select", "torch.tensor", "unit_cell.view.view", "unit_cell.view.view", "pos1.view().expand.view", "pos2.view().expand.view", "torch.masked_select.view().repeat", "torch.masked_select.view().repeat", "topk_per_pair.size", "torch.argsort.size", "len", "torch.max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.zeros", "torch.arange", "torch.logical_and.view", "torch.stack", "torch.stack", "len", "index_neighbor_offset.view", "len", "torch.zeros().bool.view", "torch.masked_select.view", "torch.masked_select.view", "len", "len", "torch.arange"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_params_to_matrix_torch"], ["", "def", "radius_graph_pbc", "(", "cart_coords", ",", "lengths", ",", "angles", ",", "num_atoms", ",", "\n", "radius", ",", "max_num_neighbors_threshold", ",", "device", ",", "\n", "topk_per_pair", "=", "None", ")", ":", "\n", "    ", "\"\"\"Computes pbc graph edges under pbc.\n\n    topk_per_pair: (num_atom_pairs,), select topk edges per atom pair\n\n    Note: topk should take into account self-self edge for (i, i)\n    \"\"\"", "\n", "batch_size", "=", "len", "(", "num_atoms", ")", "\n", "\n", "# position of the atoms", "\n", "atom_pos", "=", "cart_coords", "\n", "\n", "# Before computing the pairwise distances between atoms, first create a list of atom indices to compare for the entire batch", "\n", "num_atoms_per_image", "=", "num_atoms", "\n", "num_atoms_per_image_sqr", "=", "(", "num_atoms_per_image", "**", "2", ")", ".", "long", "(", ")", "\n", "\n", "# index offset between images", "\n", "index_offset", "=", "(", "\n", "torch", ".", "cumsum", "(", "num_atoms_per_image", ",", "dim", "=", "0", ")", "-", "num_atoms_per_image", "\n", ")", "\n", "\n", "index_offset_expand", "=", "torch", ".", "repeat_interleave", "(", "\n", "index_offset", ",", "num_atoms_per_image_sqr", "\n", ")", "\n", "num_atoms_per_image_expand", "=", "torch", ".", "repeat_interleave", "(", "\n", "num_atoms_per_image", ",", "num_atoms_per_image_sqr", "\n", ")", "\n", "\n", "# Compute a tensor containing sequences of numbers that range from 0 to num_atoms_per_image_sqr for each image", "\n", "# that is used to compute indices for the pairs of atoms. This is a very convoluted way to implement", "\n", "# the following (but 10x faster since it removes the for loop)", "\n", "# for batch_idx in range(batch_size):", "\n", "#    batch_count = torch.cat([batch_count, torch.arange(num_atoms_per_image_sqr[batch_idx], device=device)], dim=0)", "\n", "num_atom_pairs", "=", "torch", ".", "sum", "(", "num_atoms_per_image_sqr", ")", "\n", "index_sqr_offset", "=", "(", "\n", "torch", ".", "cumsum", "(", "num_atoms_per_image_sqr", ",", "dim", "=", "0", ")", "-", "num_atoms_per_image_sqr", "\n", ")", "\n", "index_sqr_offset", "=", "torch", ".", "repeat_interleave", "(", "\n", "index_sqr_offset", ",", "num_atoms_per_image_sqr", "\n", ")", "\n", "atom_count_sqr", "=", "(", "\n", "torch", ".", "arange", "(", "num_atom_pairs", ",", "device", "=", "device", ")", "-", "index_sqr_offset", "\n", ")", "\n", "\n", "# Compute the indices for the pairs of atoms (using division and mod)", "\n", "# If the systems get too large this apporach could run into numerical precision issues", "\n", "index1", "=", "(", "\n", "(", "atom_count_sqr", "//", "num_atoms_per_image_expand", ")", "\n", ")", ".", "long", "(", ")", "+", "index_offset_expand", "\n", "index2", "=", "(", "\n", "atom_count_sqr", "%", "num_atoms_per_image_expand", "\n", ")", ".", "long", "(", ")", "+", "index_offset_expand", "\n", "# Get the positions for each atom", "\n", "pos1", "=", "torch", ".", "index_select", "(", "atom_pos", ",", "0", ",", "index1", ")", "\n", "pos2", "=", "torch", ".", "index_select", "(", "atom_pos", ",", "0", ",", "index2", ")", "\n", "\n", "unit_cell", "=", "torch", ".", "tensor", "(", "OFFSET_LIST", ",", "device", "=", "device", ")", ".", "float", "(", ")", "\n", "num_cells", "=", "len", "(", "unit_cell", ")", "\n", "unit_cell_per_atom", "=", "unit_cell", ".", "view", "(", "1", ",", "num_cells", ",", "3", ")", ".", "repeat", "(", "\n", "len", "(", "index2", ")", ",", "1", ",", "1", "\n", ")", "\n", "unit_cell", "=", "torch", ".", "transpose", "(", "unit_cell", ",", "0", ",", "1", ")", "\n", "unit_cell_batch", "=", "unit_cell", ".", "view", "(", "1", ",", "3", ",", "num_cells", ")", ".", "expand", "(", "\n", "batch_size", ",", "-", "1", ",", "-", "1", "\n", ")", "\n", "\n", "# lattice matrix", "\n", "lattice", "=", "lattice_params_to_matrix_torch", "(", "lengths", ",", "angles", ")", "\n", "\n", "# Compute the x, y, z positional offsets for each cell in each image", "\n", "data_cell", "=", "torch", ".", "transpose", "(", "lattice", ",", "1", ",", "2", ")", "\n", "pbc_offsets", "=", "torch", ".", "bmm", "(", "data_cell", ",", "unit_cell_batch", ")", "\n", "pbc_offsets_per_atom", "=", "torch", ".", "repeat_interleave", "(", "\n", "pbc_offsets", ",", "num_atoms_per_image_sqr", ",", "dim", "=", "0", "\n", ")", "\n", "\n", "# Expand the positions and indices for the 9 cells", "\n", "pos1", "=", "pos1", ".", "view", "(", "-", "1", ",", "3", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_cells", ")", "\n", "pos2", "=", "pos2", ".", "view", "(", "-", "1", ",", "3", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_cells", ")", "\n", "index1", "=", "index1", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "num_cells", ")", ".", "view", "(", "-", "1", ")", "\n", "index2", "=", "index2", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "num_cells", ")", ".", "view", "(", "-", "1", ")", "\n", "# Add the PBC offsets for the second atom", "\n", "pos2", "=", "pos2", "+", "pbc_offsets_per_atom", "\n", "\n", "# Compute the squared distance between atoms", "\n", "atom_distance_sqr", "=", "torch", ".", "sum", "(", "(", "pos1", "-", "pos2", ")", "**", "2", ",", "dim", "=", "1", ")", "\n", "\n", "if", "topk_per_pair", "is", "not", "None", ":", "\n", "        ", "assert", "topk_per_pair", ".", "size", "(", "0", ")", "==", "num_atom_pairs", "\n", "atom_distance_sqr_sort_index", "=", "torch", ".", "argsort", "(", "atom_distance_sqr", ",", "dim", "=", "1", ")", "\n", "assert", "atom_distance_sqr_sort_index", ".", "size", "(", ")", "==", "(", "num_atom_pairs", ",", "num_cells", ")", "\n", "atom_distance_sqr_sort_index", "=", "(", "\n", "atom_distance_sqr_sort_index", "+", "\n", "torch", ".", "arange", "(", "num_atom_pairs", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "*", "num_cells", ")", ".", "view", "(", "-", "1", ")", "\n", "topk_mask", "=", "(", "torch", ".", "arange", "(", "num_cells", ",", "device", "=", "device", ")", "[", "None", ",", ":", "]", "<", "\n", "topk_per_pair", "[", ":", ",", "None", "]", ")", "\n", "topk_mask", "=", "topk_mask", ".", "view", "(", "-", "1", ")", "\n", "topk_indices", "=", "atom_distance_sqr_sort_index", ".", "masked_select", "(", "topk_mask", ")", "\n", "\n", "topk_mask", "=", "torch", ".", "zeros", "(", "num_atom_pairs", "*", "num_cells", ",", "device", "=", "device", ")", "\n", "topk_mask", ".", "scatter_", "(", "0", ",", "topk_indices", ",", "1.", ")", "\n", "topk_mask", "=", "topk_mask", ".", "bool", "(", ")", "\n", "\n", "", "atom_distance_sqr", "=", "atom_distance_sqr", ".", "view", "(", "-", "1", ")", "\n", "\n", "# Remove pairs that are too far apart", "\n", "mask_within_radius", "=", "torch", ".", "le", "(", "atom_distance_sqr", ",", "radius", "*", "radius", ")", "\n", "# Remove pairs with the same atoms (distance = 0.0)", "\n", "mask_not_same", "=", "torch", ".", "gt", "(", "atom_distance_sqr", ",", "0.0001", ")", "\n", "mask", "=", "torch", ".", "logical_and", "(", "mask_within_radius", ",", "mask_not_same", ")", "\n", "index1", "=", "torch", ".", "masked_select", "(", "index1", ",", "mask", ")", "\n", "index2", "=", "torch", ".", "masked_select", "(", "index2", ",", "mask", ")", "\n", "unit_cell", "=", "torch", ".", "masked_select", "(", "\n", "unit_cell_per_atom", ".", "view", "(", "-", "1", ",", "3", ")", ",", "mask", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "3", ")", "\n", ")", "\n", "unit_cell", "=", "unit_cell", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "if", "topk_per_pair", "is", "not", "None", ":", "\n", "        ", "topk_mask", "=", "torch", ".", "masked_select", "(", "topk_mask", ",", "mask", ")", "\n", "\n", "", "num_neighbors", "=", "torch", ".", "zeros", "(", "len", "(", "cart_coords", ")", ",", "device", "=", "device", ")", "\n", "num_neighbors", ".", "index_add_", "(", "0", ",", "index1", ",", "torch", ".", "ones", "(", "len", "(", "index1", ")", ",", "device", "=", "device", ")", ")", "\n", "num_neighbors", "=", "num_neighbors", ".", "long", "(", ")", "\n", "max_num_neighbors", "=", "torch", ".", "max", "(", "num_neighbors", ")", ".", "long", "(", ")", "\n", "\n", "# Compute neighbors per image", "\n", "_max_neighbors", "=", "copy", ".", "deepcopy", "(", "num_neighbors", ")", "\n", "_max_neighbors", "[", "\n", "_max_neighbors", ">", "max_num_neighbors_threshold", "\n", "]", "=", "max_num_neighbors_threshold", "\n", "_num_neighbors", "=", "torch", ".", "zeros", "(", "len", "(", "cart_coords", ")", "+", "1", ",", "device", "=", "device", ")", ".", "long", "(", ")", "\n", "_natoms", "=", "torch", ".", "zeros", "(", "num_atoms", ".", "shape", "[", "0", "]", "+", "1", ",", "device", "=", "device", ")", ".", "long", "(", ")", "\n", "_num_neighbors", "[", "1", ":", "]", "=", "torch", ".", "cumsum", "(", "_max_neighbors", ",", "dim", "=", "0", ")", "\n", "_natoms", "[", "1", ":", "]", "=", "torch", ".", "cumsum", "(", "num_atoms", ",", "dim", "=", "0", ")", "\n", "num_neighbors_image", "=", "(", "\n", "_num_neighbors", "[", "_natoms", "[", "1", ":", "]", "]", "-", "_num_neighbors", "[", "_natoms", "[", ":", "-", "1", "]", "]", "\n", ")", "\n", "\n", "# If max_num_neighbors is below the threshold, return early", "\n", "if", "(", "\n", "max_num_neighbors", "<=", "max_num_neighbors_threshold", "\n", "or", "max_num_neighbors_threshold", "<=", "0", "\n", ")", ":", "\n", "        ", "if", "topk_per_pair", "is", "None", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "(", "index2", ",", "index1", ")", ")", ",", "unit_cell", ",", "num_neighbors_image", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "(", "index2", ",", "index1", ")", ")", ",", "unit_cell", ",", "num_neighbors_image", ",", "topk_mask", "\n", "\n", "", "", "atom_distance_sqr", "=", "torch", ".", "masked_select", "(", "atom_distance_sqr", ",", "mask", ")", "\n", "\n", "# Create a tensor of size [num_atoms, max_num_neighbors] to sort the distances of the neighbors.", "\n", "# Fill with values greater than radius*radius so we can easily remove unused distances later.", "\n", "distance_sort", "=", "torch", ".", "zeros", "(", "\n", "len", "(", "cart_coords", ")", "*", "max_num_neighbors", ",", "device", "=", "device", "\n", ")", ".", "fill_", "(", "radius", "*", "radius", "+", "1.0", ")", "\n", "\n", "# Create an index map to map distances from atom_distance_sqr to distance_sort", "\n", "index_neighbor_offset", "=", "torch", ".", "cumsum", "(", "num_neighbors", ",", "dim", "=", "0", ")", "-", "num_neighbors", "\n", "index_neighbor_offset_expand", "=", "torch", ".", "repeat_interleave", "(", "\n", "index_neighbor_offset", ",", "num_neighbors", "\n", ")", "\n", "index_sort_map", "=", "(", "\n", "index1", "*", "max_num_neighbors", "\n", "+", "torch", ".", "arange", "(", "len", "(", "index1", ")", ",", "device", "=", "device", ")", "\n", "-", "index_neighbor_offset_expand", "\n", ")", "\n", "distance_sort", ".", "index_copy_", "(", "0", ",", "index_sort_map", ",", "atom_distance_sqr", ")", "\n", "distance_sort", "=", "distance_sort", ".", "view", "(", "len", "(", "cart_coords", ")", ",", "max_num_neighbors", ")", "\n", "\n", "# Sort neighboring atoms based on distance", "\n", "distance_sort", ",", "index_sort", "=", "torch", ".", "sort", "(", "distance_sort", ",", "dim", "=", "1", ")", "\n", "# Select the max_num_neighbors_threshold neighbors that are closest", "\n", "distance_sort", "=", "distance_sort", "[", ":", ",", ":", "max_num_neighbors_threshold", "]", "\n", "index_sort", "=", "index_sort", "[", ":", ",", ":", "max_num_neighbors_threshold", "]", "\n", "\n", "# Offset index_sort so that it indexes into index1", "\n", "index_sort", "=", "index_sort", "+", "index_neighbor_offset", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "\n", "-", "1", ",", "max_num_neighbors_threshold", "\n", ")", "\n", "# Remove \"unused pairs\" with distances greater than the radius", "\n", "mask_within_radius", "=", "torch", ".", "le", "(", "distance_sort", ",", "radius", "*", "radius", ")", "\n", "index_sort", "=", "torch", ".", "masked_select", "(", "index_sort", ",", "mask_within_radius", ")", "\n", "\n", "# At this point index_sort contains the index into index1 of the closest max_num_neighbors_threshold neighbors per atom", "\n", "# Create a mask to remove all pairs not in index_sort", "\n", "mask_num_neighbors", "=", "torch", ".", "zeros", "(", "len", "(", "index1", ")", ",", "device", "=", "device", ")", ".", "bool", "(", ")", "\n", "mask_num_neighbors", ".", "index_fill_", "(", "0", ",", "index_sort", ",", "True", ")", "\n", "\n", "# Finally mask out the atoms to ensure each atom has at most max_num_neighbors_threshold neighbors", "\n", "index1", "=", "torch", ".", "masked_select", "(", "index1", ",", "mask_num_neighbors", ")", "\n", "index2", "=", "torch", ".", "masked_select", "(", "index2", ",", "mask_num_neighbors", ")", "\n", "unit_cell", "=", "torch", ".", "masked_select", "(", "\n", "unit_cell", ".", "view", "(", "-", "1", ",", "3", ")", ",", "mask_num_neighbors", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "3", ")", "\n", ")", "\n", "unit_cell", "=", "unit_cell", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "\n", "if", "topk_per_pair", "is", "not", "None", ":", "\n", "        ", "topk_mask", "=", "torch", ".", "masked_select", "(", "topk_mask", ",", "mask_num_neighbors", ")", "\n", "\n", "", "edge_index", "=", "torch", ".", "stack", "(", "(", "index2", ",", "index1", ")", ")", "\n", "\n", "if", "topk_per_pair", "is", "None", ":", "\n", "        ", "return", "edge_index", ",", "unit_cell", ",", "num_neighbors_image", "\n", "", "else", ":", "\n", "        ", "return", "edge_index", ",", "unit_cell", ",", "num_neighbors_image", ",", "topk_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.min_distance_sqr_pbc": [[534, 602], ["len", "torch.tensor().float", "len", "torch.transpose.view().repeat", "torch.transpose", "torch.transpose.view().expand", "data_utils.lattice_params_to_matrix_torch", "torch.transpose", "torch.bmm", "torch.repeat_interleave", "pos1.view().expand.view().expand", "pos2.view().expand.view().expand", "torch.sum", "torch.sum.min", "len", "min_indices[].repeat", "torch.gather().squeeze", "return_list.append", "torch.transpose.T[].long", "return_list.append", "torch.tensor", "torch.transpose.view", "torch.transpose.view", "pos1.view().expand.view", "pos2.view().expand.view", "len", "torch.gather"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_params_to_matrix_torch"], ["", "", "def", "min_distance_sqr_pbc", "(", "cart_coords1", ",", "cart_coords2", ",", "lengths", ",", "angles", ",", "\n", "num_atoms", ",", "device", ",", "return_vector", "=", "False", ",", "\n", "return_to_jimages", "=", "False", ")", ":", "\n", "    ", "\"\"\"Compute the pbc distance between atoms in cart_coords1 and cart_coords2.\n    This function assumes that cart_coords1 and cart_coords2 have the same number of atoms\n    in each data point.\n    returns:\n        basic return:\n            min_atom_distance_sqr: (N_atoms, )\n        return_vector == True:\n            min_atom_distance_vector: vector pointing from cart_coords1 to cart_coords2, (N_atoms, 3)\n        return_to_jimages == True:\n            to_jimages: (N_atoms, 3), position of cart_coord2 relative to cart_coord1 in pbc\n    \"\"\"", "\n", "batch_size", "=", "len", "(", "num_atoms", ")", "\n", "\n", "# Get the positions for each atom", "\n", "pos1", "=", "cart_coords1", "\n", "pos2", "=", "cart_coords2", "\n", "\n", "unit_cell", "=", "torch", ".", "tensor", "(", "OFFSET_LIST", ",", "device", "=", "device", ")", ".", "float", "(", ")", "\n", "num_cells", "=", "len", "(", "unit_cell", ")", "\n", "unit_cell_per_atom", "=", "unit_cell", ".", "view", "(", "1", ",", "num_cells", ",", "3", ")", ".", "repeat", "(", "\n", "len", "(", "cart_coords2", ")", ",", "1", ",", "1", "\n", ")", "\n", "unit_cell", "=", "torch", ".", "transpose", "(", "unit_cell", ",", "0", ",", "1", ")", "\n", "unit_cell_batch", "=", "unit_cell", ".", "view", "(", "1", ",", "3", ",", "num_cells", ")", ".", "expand", "(", "\n", "batch_size", ",", "-", "1", ",", "-", "1", "\n", ")", "\n", "\n", "# lattice matrix", "\n", "lattice", "=", "lattice_params_to_matrix_torch", "(", "lengths", ",", "angles", ")", "\n", "\n", "# Compute the x, y, z positional offsets for each cell in each image", "\n", "data_cell", "=", "torch", ".", "transpose", "(", "lattice", ",", "1", ",", "2", ")", "\n", "pbc_offsets", "=", "torch", ".", "bmm", "(", "data_cell", ",", "unit_cell_batch", ")", "\n", "pbc_offsets_per_atom", "=", "torch", ".", "repeat_interleave", "(", "\n", "pbc_offsets", ",", "num_atoms", ",", "dim", "=", "0", "\n", ")", "\n", "\n", "# Expand the positions and indices for the 9 cells", "\n", "pos1", "=", "pos1", ".", "view", "(", "-", "1", ",", "3", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_cells", ")", "\n", "pos2", "=", "pos2", ".", "view", "(", "-", "1", ",", "3", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "num_cells", ")", "\n", "# Add the PBC offsets for the second atom", "\n", "pos2", "=", "pos2", "+", "pbc_offsets_per_atom", "\n", "\n", "# Compute the vector between atoms", "\n", "# shape (num_atom_squared_sum, 3, 27)", "\n", "atom_distance_vector", "=", "pos1", "-", "pos2", "\n", "atom_distance_sqr", "=", "torch", ".", "sum", "(", "atom_distance_vector", "**", "2", ",", "dim", "=", "1", ")", "\n", "\n", "min_atom_distance_sqr", ",", "min_indices", "=", "atom_distance_sqr", ".", "min", "(", "dim", "=", "-", "1", ")", "\n", "\n", "return_list", "=", "[", "min_atom_distance_sqr", "]", "\n", "\n", "if", "return_vector", ":", "\n", "        ", "min_indices", "=", "min_indices", "[", ":", ",", "None", ",", "None", "]", ".", "repeat", "(", "[", "1", ",", "3", ",", "1", "]", ")", "\n", "\n", "min_atom_distance_vector", "=", "torch", ".", "gather", "(", "\n", "atom_distance_vector", ",", "2", ",", "min_indices", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "return_list", ".", "append", "(", "min_atom_distance_vector", ")", "\n", "\n", "", "if", "return_to_jimages", ":", "\n", "        ", "to_jimages", "=", "unit_cell", ".", "T", "[", "min_indices", "]", ".", "long", "(", ")", "\n", "return_list", ".", "append", "(", "to_jimages", ")", "\n", "\n", "", "return", "return_list", "[", "0", "]", "if", "len", "(", "return_list", ")", "==", "1", "else", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.get_scaler_from_data_list": [[643, 648], ["torch.tensor", "data_utils.StandardScalerTorch", "data_utils.StandardScalerTorch.fit"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.StandardScaler.fit"], ["", "", "def", "get_scaler_from_data_list", "(", "data_list", ",", "key", ")", ":", "\n", "    ", "targets", "=", "torch", ".", "tensor", "(", "[", "d", "[", "key", "]", "for", "d", "in", "data_list", "]", ")", "\n", "scaler", "=", "StandardScalerTorch", "(", ")", "\n", "scaler", ".", "fit", "(", "targets", ")", "\n", "return", "scaler", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.preprocess": [[650, 682], ["pandas.read_csv", "p_tqdm.p_umap", "data_utils.build_crystal", "data_utils.build_crystal_graph", "result_dict.update", "len", "len", "len", "len", "range", "range", "len", "row.keys", "len"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.build_crystal", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.build_crystal_graph"], ["", "def", "preprocess", "(", "input_file", ",", "num_workers", ",", "niggli", ",", "primitive", ",", "graph_method", ",", "\n", "prop_list", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "input_file", ")", "\n", "\n", "def", "process_one", "(", "row", ",", "niggli", ",", "primitive", ",", "graph_method", ",", "prop_list", ")", ":", "\n", "        ", "crystal_str", "=", "row", "[", "'cif'", "]", "\n", "crystal", "=", "build_crystal", "(", "\n", "crystal_str", ",", "niggli", "=", "niggli", ",", "primitive", "=", "primitive", ")", "\n", "graph_arrays", "=", "build_crystal_graph", "(", "crystal", ",", "graph_method", ")", "\n", "properties", "=", "{", "k", ":", "row", "[", "k", "]", "for", "k", "in", "prop_list", "if", "k", "in", "row", ".", "keys", "(", ")", "}", "\n", "result_dict", "=", "{", "\n", "'mp_id'", ":", "row", "[", "'material_id'", "]", ",", "\n", "'cif'", ":", "crystal_str", ",", "\n", "'graph_arrays'", ":", "graph_arrays", ",", "\n", "}", "\n", "result_dict", ".", "update", "(", "properties", ")", "\n", "return", "result_dict", "\n", "\n", "", "unordered_results", "=", "p_umap", "(", "\n", "process_one", ",", "\n", "[", "df", ".", "iloc", "[", "idx", "]", "for", "idx", "in", "range", "(", "len", "(", "df", ")", ")", "]", ",", "\n", "[", "niggli", "]", "*", "len", "(", "df", ")", ",", "\n", "[", "primitive", "]", "*", "len", "(", "df", ")", ",", "\n", "[", "graph_method", "]", "*", "len", "(", "df", ")", ",", "\n", "[", "prop_list", "]", "*", "len", "(", "df", ")", ",", "\n", "num_cpus", "=", "num_workers", ")", "\n", "\n", "mpid_to_results", "=", "{", "result", "[", "'mp_id'", "]", ":", "result", "for", "result", "in", "unordered_results", "}", "\n", "ordered_results", "=", "[", "mpid_to_results", "[", "df", ".", "iloc", "[", "idx", "]", "[", "'material_id'", "]", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "df", ")", ")", "]", "\n", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.preprocess_tensors": [[684, 715], ["p_tqdm.p_umap", "list", "pymatgen.core.structure.Structure", "data_utils.build_crystal_graph", "list", "sorted", "range", "len", "len", "len", "pymatgen.core.lattice.Lattice.from_parameters", "len", "lengths.tolist", "angles.tolist"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.build_crystal_graph"], ["", "def", "preprocess_tensors", "(", "crystal_array_list", ",", "niggli", ",", "primitive", ",", "graph_method", ")", ":", "\n", "    ", "def", "process_one", "(", "batch_idx", ",", "crystal_array", ",", "niggli", ",", "primitive", ",", "graph_method", ")", ":", "\n", "        ", "frac_coords", "=", "crystal_array", "[", "'frac_coords'", "]", "\n", "atom_types", "=", "crystal_array", "[", "'atom_types'", "]", "\n", "lengths", "=", "crystal_array", "[", "'lengths'", "]", "\n", "angles", "=", "crystal_array", "[", "'angles'", "]", "\n", "crystal", "=", "Structure", "(", "\n", "lattice", "=", "Lattice", ".", "from_parameters", "(", "\n", "*", "(", "lengths", ".", "tolist", "(", ")", "+", "angles", ".", "tolist", "(", ")", ")", ")", ",", "\n", "species", "=", "atom_types", ",", "\n", "coords", "=", "frac_coords", ",", "\n", "coords_are_cartesian", "=", "False", ")", "\n", "graph_arrays", "=", "build_crystal_graph", "(", "crystal", ",", "graph_method", ")", "\n", "result_dict", "=", "{", "\n", "'batch_idx'", ":", "batch_idx", ",", "\n", "'graph_arrays'", ":", "graph_arrays", ",", "\n", "}", "\n", "return", "result_dict", "\n", "\n", "", "unordered_results", "=", "p_umap", "(", "\n", "process_one", ",", "\n", "list", "(", "range", "(", "len", "(", "crystal_array_list", ")", ")", ")", ",", "\n", "crystal_array_list", ",", "\n", "[", "niggli", "]", "*", "len", "(", "crystal_array_list", ")", ",", "\n", "[", "primitive", "]", "*", "len", "(", "crystal_array_list", ")", ",", "\n", "[", "graph_method", "]", "*", "len", "(", "crystal_array_list", ")", ",", "\n", "num_cpus", "=", "30", ",", "\n", ")", "\n", "ordered_results", "=", "list", "(", "\n", "sorted", "(", "unordered_results", ",", "key", "=", "lambda", "x", ":", "x", "[", "'batch_idx'", "]", ")", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.add_scaled_lattice_prop": [[717, 731], ["isinstance", "numpy.concatenate", "float"], "function", ["None"], ["", "def", "add_scaled_lattice_prop", "(", "data_list", ",", "lattice_scale_method", ")", ":", "\n", "    ", "for", "dict", "in", "data_list", ":", "\n", "        ", "graph_arrays", "=", "dict", "[", "'graph_arrays'", "]", "\n", "# the indexes are brittle if more objects are returned", "\n", "lengths", "=", "graph_arrays", "[", "2", "]", "\n", "angles", "=", "graph_arrays", "[", "3", "]", "\n", "num_atoms", "=", "graph_arrays", "[", "-", "1", "]", "\n", "assert", "lengths", ".", "shape", "[", "0", "]", "==", "angles", ".", "shape", "[", "0", "]", "==", "3", "\n", "assert", "isinstance", "(", "num_atoms", ",", "int", ")", "\n", "\n", "if", "lattice_scale_method", "==", "'scale_length'", ":", "\n", "            ", "lengths", "=", "lengths", "/", "float", "(", "num_atoms", ")", "**", "(", "1", "/", "3", ")", "\n", "\n", "", "dict", "[", "'scaled_lattice'", "]", "=", "np", ".", "concatenate", "(", "[", "lengths", ",", "angles", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.mard": [[733, 737], ["torch.all", "torch.mean", "torch.abs"], "function", ["None"], ["", "", "def", "mard", "(", "targets", ",", "preds", ")", ":", "\n", "    ", "\"\"\"Mean absolute relative difference.\"\"\"", "\n", "assert", "torch", ".", "all", "(", "targets", ">", "0.", ")", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "targets", "-", "preds", ")", "/", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.batch_accuracy_precision_recall": [[739, 766], ["[].float", "edge_overlap_mask.float", "num_bonds.tolist", "[].float.narrow().detach().cpu().numpy", "edge_overlap_mask.float.narrow().detach().cpu().numpy", "accuracies.append", "precisions.append", "recalls.append", "numpy.mean", "numpy.mean", "numpy.mean", "sklearn.metrics.accuracy_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "pred_edge_probs.max", "[].float.narrow().detach().cpu", "edge_overlap_mask.float.narrow().detach().cpu", "[].float.narrow().detach", "edge_overlap_mask.float.narrow().detach", "[].float.narrow", "edge_overlap_mask.float.narrow"], "function", ["None"], ["", "def", "batch_accuracy_precision_recall", "(", "\n", "pred_edge_probs", ",", "\n", "edge_overlap_mask", ",", "\n", "num_bonds", "\n", ")", ":", "\n", "    ", "if", "(", "pred_edge_probs", "is", "None", "and", "edge_overlap_mask", "is", "None", "and", "\n", "num_bonds", "is", "None", ")", ":", "\n", "        ", "return", "0.", ",", "0.", ",", "0.", "\n", "", "pred_edges", "=", "pred_edge_probs", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", ".", "float", "(", ")", "\n", "target_edges", "=", "edge_overlap_mask", ".", "float", "(", ")", "\n", "\n", "start_idx", "=", "0", "\n", "accuracies", ",", "precisions", ",", "recalls", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "num_bond", "in", "num_bonds", ".", "tolist", "(", ")", ":", "\n", "        ", "pred_edge", "=", "pred_edges", ".", "narrow", "(", "\n", "0", ",", "start_idx", ",", "num_bond", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target_edge", "=", "target_edges", ".", "narrow", "(", "\n", "0", ",", "start_idx", ",", "num_bond", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "accuracies", ".", "append", "(", "accuracy_score", "(", "target_edge", ",", "pred_edge", ")", ")", "\n", "precisions", ".", "append", "(", "precision_score", "(", "\n", "target_edge", ",", "pred_edge", ",", "average", "=", "'binary'", ")", ")", "\n", "recalls", ".", "append", "(", "recall_score", "(", "target_edge", ",", "pred_edge", ",", "average", "=", "'binary'", ")", ")", "\n", "\n", "start_idx", "=", "start_idx", "+", "num_bond", "\n", "\n", "", "return", "np", ".", "mean", "(", "accuracies", ")", ",", "np", ".", "mean", "(", "precisions", ")", ",", "np", ".", "mean", "(", "recalls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils_test.test_lattice_params_matrix": [[9, 17], ["cdvae.common.data_utils.lattice_params_to_matrix", "cdvae.common.data_utils.lattice_matrix_to_params", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_params_to_matrix", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_matrix_to_params"], ["def", "test_lattice_params_matrix", "(", ")", ":", "\n", "    ", "a", ",", "b", ",", "c", "=", "4.", ",", "3.", ",", "2.", "\n", "alpha", ",", "beta", ",", "gamma", "=", "120.", ",", "90.", ",", "90.", "\n", "\n", "matrix", "=", "data_utils", ".", "lattice_params_to_matrix", "(", "a", ",", "b", ",", "c", ",", "alpha", ",", "beta", ",", "gamma", ")", "\n", "result", "=", "data_utils", ".", "lattice_matrix_to_params", "(", "matrix", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "[", "a", ",", "b", ",", "c", ",", "alpha", ",", "beta", ",", "gamma", "]", ",", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils_test.test_lattice_params_matrix2": [[19, 28], ["numpy.array", "cdvae.common.data_utils.lattice_matrix_to_params", "cdvae.common.data_utils.lattice_params_to_matrix", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_matrix_to_params", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_params_to_matrix"], ["", "def", "test_lattice_params_matrix2", "(", ")", ":", "\n", "    ", "matrix", "=", "[", "[", "3.96686600e+00", ",", "0.00000000e+00", ",", "2.42900487e-16", "]", ",", "\n", "[", "-", "2.42900487e-16", ",", "3.96686600e+00", ",", "2.42900487e-16", "]", ",", "\n", "[", "0.00000000e+00", ",", "0.00000000e+00", ",", "5.73442000e+00", "]", "]", "\n", "matrix", "=", "np", ".", "array", "(", "matrix", ")", "\n", "params", "=", "data_utils", ".", "lattice_matrix_to_params", "(", "matrix", ")", "\n", "result", "=", "data_utils", ".", "lattice_params_to_matrix", "(", "*", "params", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "matrix", ",", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils_test.test_lattice_params_to_matrix_torch": [[30, 47], ["numpy.array", "numpy.array", "numpy.concatenate", "cdvae.common.data_utils.lattice_params_to_matrix", "cdvae.common.data_utils.lattice_params_to_matrix", "numpy.stack", "cdvae.common.data_utils.lattice_params_to_matrix_torch", "numpy.allclose", "torch.Tensor", "torch.Tensor", "data_utils.lattice_params_to_matrix_torch.numpy", "lengths_and_angles[].tolist", "lengths_and_angles[].tolist"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_params_to_matrix", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_params_to_matrix", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.lattice_params_to_matrix_torch"], ["", "def", "test_lattice_params_to_matrix_torch", "(", ")", ":", "\n", "    ", "lengths", "=", "np", ".", "array", "(", "[", "[", "4.", ",", "3.", ",", "2.", "]", ",", "[", "1", ",", "3", ",", "2", "]", "]", ")", "\n", "angles", "=", "np", ".", "array", "(", "[", "[", "120.", ",", "90.", ",", "90.", "]", ",", "[", "57.", ",", "130.", ",", "85.", "]", "]", ")", "\n", "\n", "lengths_and_angles", "=", "np", ".", "concatenate", "(", "[", "lengths", ",", "angles", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "matrix0", "=", "data_utils", ".", "lattice_params_to_matrix", "(", "\n", "*", "lengths_and_angles", "[", "0", "]", ".", "tolist", "(", ")", ")", "\n", "matrix1", "=", "data_utils", ".", "lattice_params_to_matrix", "(", "\n", "*", "lengths_and_angles", "[", "1", "]", ".", "tolist", "(", ")", ")", "\n", "\n", "true_matrix", "=", "np", ".", "stack", "(", "[", "matrix0", ",", "matrix1", "]", ",", "axis", "=", "0", ")", "\n", "\n", "torch_matrix", "=", "data_utils", ".", "lattice_params_to_matrix_torch", "(", "\n", "torch", ".", "Tensor", "(", "lengths", ")", ",", "torch", ".", "Tensor", "(", "angles", ")", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "true_matrix", ",", "torch_matrix", ".", "numpy", "(", ")", ",", "atol", "=", "1e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils_test.test_frac_cart_conversion": [[49, 62], ["torch.LongTensor", "torch.rand", "cdvae.common.data_utils.frac_to_cart_coords", "cdvae.common.data_utils.cart_to_frac_coords", "torch.allclose", "torch.rand", "torch.LongTensor.sum", "torch.LongTensor.size", "torch.rand", "torch.LongTensor.size"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.frac_to_cart_coords", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.cart_to_frac_coords"], ["", "def", "test_frac_cart_conversion", "(", ")", ":", "\n", "    ", "num_atoms", "=", "torch", ".", "LongTensor", "(", "[", "4", ",", "3", ",", "2", ",", "5", "]", ")", "\n", "lengths", "=", "torch", ".", "rand", "(", "num_atoms", ".", "size", "(", "0", ")", ",", "3", ")", "*", "4", "\n", "angles", "=", "torch", ".", "rand", "(", "num_atoms", ".", "size", "(", "0", ")", ",", "3", ")", "*", "60", "+", "60", "\n", "frac_coords", "=", "torch", ".", "rand", "(", "num_atoms", ".", "sum", "(", ")", ",", "3", ")", "\n", "\n", "cart_coords", "=", "data_utils", ".", "frac_to_cart_coords", "(", "\n", "frac_coords", ",", "lengths", ",", "angles", ",", "num_atoms", ")", "\n", "\n", "inverted_frac_coords", "=", "data_utils", ".", "cart_to_frac_coords", "(", "\n", "cart_coords", ",", "lengths", ",", "angles", ",", "num_atoms", ")", "\n", "\n", "assert", "torch", ".", "allclose", "(", "frac_coords", ",", "inverted_frac_coords", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils_test.test_get_pbc_distances": [[64, 80], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "cdvae.common.data_utils.get_pbc_distances", "torch.Tensor", "torch.allclose", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.get_pbc_distances"], ["", "def", "test_get_pbc_distances", "(", ")", ":", "\n", "    ", "frac_coords", "=", "torch", ".", "Tensor", "(", "[", "[", "0.2", ",", "0.2", ",", "0.", "]", ",", "[", "0.6", ",", "0.8", ",", "0.8", "]", ",", "\n", "[", "0.2", ",", "0.2", ",", "0.", "]", ",", "[", "0.6", ",", "0.8", ",", "0.8", "]", "]", ")", "\n", "edge_index", "=", "torch", ".", "LongTensor", "(", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "2", ",", "3", "]", "]", ")", ".", "T", "\n", "lengths", "=", "torch", ".", "Tensor", "(", "[", "[", "1.", ",", "1.", ",", "2.", "]", ",", "[", "1.", ",", "2.", ",", "1.", "]", "]", ")", "\n", "angles", "=", "torch", ".", "Tensor", "(", "[", "[", "90.", ",", "90.", ",", "90.", "]", ",", "[", "90.", ",", "90.", ",", "90.", "]", "]", ")", "\n", "to_jimages", "=", "torch", ".", "LongTensor", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ")", "\n", "num_nodes", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "2", "]", ")", "\n", "num_edges", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "1", "]", ")", "\n", "\n", "out", "=", "data_utils", ".", "get_pbc_distances", "(", "\n", "frac_coords", ",", "edge_index", ",", "lengths", ",", "angles", ",", "to_jimages", ",", "num_nodes", ",", "num_edges", ")", "\n", "\n", "true_distances", "=", "torch", ".", "Tensor", "(", "[", "1.7549928774784245", ",", "1.", ",", "1.2", "]", ")", "\n", "\n", "assert", "torch", ".", "allclose", "(", "true_distances", ",", "out", "[", "'distances'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils_test.test_get_pbc_distances_cart": [[82, 102], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "cdvae.common.data_utils.frac_to_cart_coords", "cdvae.common.data_utils.get_pbc_distances", "torch.Tensor", "torch.allclose", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.frac_to_cart_coords", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.get_pbc_distances"], ["", "def", "test_get_pbc_distances_cart", "(", ")", ":", "\n", "    ", "frac_coords", "=", "torch", ".", "Tensor", "(", "[", "[", "0.2", ",", "0.2", ",", "0.", "]", ",", "[", "0.6", ",", "0.8", ",", "0.8", "]", ",", "\n", "[", "0.2", ",", "0.2", ",", "0.", "]", ",", "[", "0.6", ",", "0.8", ",", "0.8", "]", "]", ")", "\n", "edge_index", "=", "torch", ".", "LongTensor", "(", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "2", ",", "3", "]", "]", ")", ".", "T", "\n", "lengths", "=", "torch", ".", "Tensor", "(", "[", "[", "1.", ",", "1.", ",", "2.", "]", ",", "[", "1.", ",", "2.", ",", "1.", "]", "]", ")", "\n", "angles", "=", "torch", ".", "Tensor", "(", "[", "[", "90.", ",", "90.", ",", "90.", "]", ",", "[", "90.", ",", "90.", ",", "90.", "]", "]", ")", "\n", "to_jimages", "=", "torch", ".", "LongTensor", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ")", "\n", "num_nodes", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "2", "]", ")", "\n", "num_edges", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "1", "]", ")", "\n", "\n", "cart_coords", "=", "data_utils", ".", "frac_to_cart_coords", "(", "\n", "frac_coords", ",", "lengths", ",", "angles", ",", "num_nodes", ")", "\n", "\n", "out", "=", "data_utils", ".", "get_pbc_distances", "(", "\n", "cart_coords", ",", "edge_index", ",", "lengths", ",", "angles", ",", "to_jimages", ",", "num_nodes", ",", "num_edges", ",", "\n", "coord_is_cart", "=", "True", ")", "\n", "\n", "true_distances", "=", "torch", ".", "Tensor", "(", "[", "1.7549928774784245", ",", "1.", ",", "1.2", "]", ")", "\n", "\n", "assert", "torch", ".", "allclose", "(", "true_distances", ",", "out", "[", "'distances'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils_test.test_radius_graph_pbc": [[104, 160], ["pytest.mark.parametrize", "os.path.dirname", "os.path.join", "CrystDataset", "get_scaler_from_data_list", "Batch.from_data_list", "cdvae.common.data_utils.radius_graph_pbc_wrapper", "cdvae.common.data_utils.get_pbc_distances", "range", "os.path.realpath", "outputs[].max", "range", "len", "torch.nonzero"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.get_scaler_from_data_list", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.radius_graph_pbc_wrapper", "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.get_pbc_distances"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'max_radius,max_neighbors'", ",", "[", "\n", "(", "3", ",", "20", ")", ",", "# test small cutoff radius", "\n", "(", "6", ",", "12", ")", ",", "# test if max_neighbors is satisfied", "\n", "]", ")", "\n", "def", "test_radius_graph_pbc", "(", "max_radius", ",", "max_neighbors", ")", ":", "\n", "    ", "from", "cdvae", ".", "pl_data", ".", "dataset", "import", "CrystDataset", "\n", "from", "torch_geometric", ".", "data", "import", "Batch", "\n", "from", "cdvae", ".", "common", ".", "data_utils", "import", "get_scaler_from_data_list", "\n", "\n", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "test_file_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'test_data.csv'", ")", "\n", "dataset", "=", "CrystDataset", "(", "\n", "name", "=", "'test'", ",", "\n", "path", "=", "test_file_path", ",", "\n", "prop", "=", "'formation_energy_per_atom'", ",", "\n", "niggli", "=", "True", ",", "\n", "primitive", "=", "False", ",", "\n", "graph_method", "=", "'crystalnn'", ",", "\n", "lattice_scale_method", "=", "'scale_length'", ",", "\n", "preprocess_workers", "=", "2", ",", "\n", ")", "\n", "\n", "scaler", "=", "get_scaler_from_data_list", "(", "\n", "dataset", ".", "cached_data", ",", "\n", "key", "=", "dataset", ".", "prop", ")", "\n", "\n", "dataset", ".", "scaler", "=", "scaler", "\n", "data_list", "=", "[", "dataset", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "\n", "edge_index", ",", "unit_cell", ",", "num_neighbors_image", "=", "data_utils", ".", "radius_graph_pbc_wrapper", "(", "\n", "batch", ",", "radius", "=", "max_radius", ",", "max_num_neighbors_threshold", "=", "max_neighbors", ",", "\n", "device", "=", "batch", ".", "num_atoms", ".", "device", ")", "\n", "\n", "batch", ".", "edge_index", "=", "edge_index", "\n", "batch", ".", "to_jimages", "=", "unit_cell", "\n", "batch", ".", "num_bonds", "=", "num_neighbors_image", "\n", "\n", "outputs", "=", "data_utils", ".", "get_pbc_distances", "(", "\n", "batch", ".", "frac_coords", ",", "\n", "batch", ".", "edge_index", ",", "\n", "batch", ".", "lengths", ",", "\n", "batch", ".", "angles", ",", "\n", "batch", ".", "to_jimages", ",", "\n", "batch", ".", "num_atoms", ",", "\n", "batch", ".", "num_bonds", ",", "\n", ")", "\n", "\n", "assert", "outputs", "[", "'distances'", "]", ".", "shape", "[", "0", "]", ">", "0", "\n", "assert", "outputs", "[", "'distances'", "]", ".", "max", "(", ")", "<=", "max_radius", "\n", "row", ",", "col", "=", "outputs", "[", "'edge_index'", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch", ".", "num_nodes", ")", ":", "\n", "# can only assert col (index_i) satisfy the max_neighbor requirement", "\n", "        ", "assert", "torch", ".", "nonzero", "(", "col", "==", "i", ",", "as_tuple", "=", "True", ")", "[", "\n", "0", "]", ".", "shape", "[", "0", "]", "<=", "max_neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils_test.test_compute_volume": [[162, 172], ["torch.Tensor", "torch.Tensor", "cdvae.common.data_utils.compute_volume", "torch.allclose"], "function", ["home.repos.pwc.inspect_result.txie-93_cdvae.common.data_utils.compute_volume"], ["", "", "def", "test_compute_volume", "(", ")", ":", "\n", "    ", "batched_lattice", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "[", "1.", ",", "0.", ",", "0.", "]", ",", "[", "0.", ",", "2.", ",", "0.", "]", ",", "[", "0.", ",", "0.", ",", "3.", "]", "]", ",", "\n", "[", "[", "1.", ",", "1.", ",", "0.", "]", ",", "[", "1.", ",", "-", "1.", ",", "0.", "]", ",", "[", "0.", ",", "0.", ",", "1.", "]", "]", ",", "\n", "]", ")", "\n", "true_volumes", "=", "torch", ".", "Tensor", "(", "[", "6.", ",", "2.", "]", ")", "\n", "\n", "results", "=", "data_utils", ".", "compute_volume", "(", "batched_lattice", ")", "\n", "\n", "assert", "torch", ".", "allclose", "(", "true_volumes", ",", "results", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.utils.get_env": [[10, 35], ["KeyError", "ValueError"], "function", ["None"], ["import", "torch", "\n", "from", "torch_scatter", "import", "segment_csr", "\n", "\n", "\n", "def", "read_json", "(", "path", ")", ":", "\n", "    ", "\"\"\"\"\"\"", "\n", "if", "not", "path", ".", "endswith", "(", "\".json\"", ")", ":", "\n", "        ", "raise", "UserWarning", "(", "f\"Path {path} is not a json-path.\"", ")", "\n", "\n", "", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "content", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "content", "\n", "\n", "\n", "", "def", "update_json", "(", "path", ",", "data", ")", ":", "\n", "    ", "\"\"\"\"\"\"", "\n", "if", "not", "path", ".", "endswith", "(", "\".json\"", ")", ":", "\n", "        ", "raise", "UserWarning", "(", "f\"Path {path} is not a json-path.\"", ")", "\n", "\n", "", "content", "=", "read_json", "(", "path", ")", "\n", "content", ".", "update", "(", "data", ")", "\n", "write_json", "(", "path", ",", "content", ")", "\n", "\n", "\n", "", "def", "write_json", "(", "path", ",", "data", ")", ":", "\n", "    ", "\"\"\"\"\"\"", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.utils.load_envs": [[37, 48], ["dotenv.load_dotenv"], "function", ["None"], ["        ", "raise", "UserWarning", "(", "f\"Path {path} is not a json-path.\"", ")", "\n", "\n", "", "with", "open", "(", "path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "f", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "\n", "\n", "", "", "def", "read_value_json", "(", "path", ",", "key", ")", ":", "\n", "    ", "\"\"\"\"\"\"", "\n", "content", "=", "read_json", "(", "path", ")", "\n", "\n", "if", "key", "in", "content", ".", "keys", "(", ")", ":", "\n", "        ", "return", "content", "[", "key", "]", "\n"]], "home.repos.pwc.inspect_result.txie-93_cdvae.common.utils.log_hyperparameters": [[54, 86], ["omegaconf.OmegaConf.to_container", "sum", "sum", "sum", "trainer.logger.log_hyperparams", "p.numel", "p.numel", "p.numel", "model.parameters", "model.parameters", "model.parameters"], "function", ["None"], ["    ", "\"\"\"Multiple concatenated ranges.\n\n    Examples\n    --------\n        sizes = [1 4 2 3]\n        Return: [0  0 1 2 3  0 1  0 1 2]\n    \"\"\"", "\n", "assert", "sizes", ".", "dim", "(", ")", "==", "1", "\n", "if", "sizes", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "return", "sizes", ".", "new_empty", "(", "0", ")", "\n", "\n", "# Remove 0 sizes", "\n", "", "sizes_nonzero", "=", "sizes", ">", "0", "\n", "if", "not", "torch", ".", "all", "(", "sizes_nonzero", ")", ":", "\n", "        ", "sizes", "=", "torch", ".", "masked_select", "(", "sizes", ",", "sizes_nonzero", ")", "\n", "\n", "# Initialize indexing array with ones as we need to setup incremental indexing", "\n", "# within each group when cumulatively summed at the final stage.", "\n", "", "id_steps", "=", "torch", ".", "ones", "(", "sizes", ".", "sum", "(", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "sizes", ".", "device", ")", "\n", "id_steps", "[", "0", "]", "=", "0", "\n", "insert_index", "=", "sizes", "[", ":", "-", "1", "]", ".", "cumsum", "(", "0", ")", "\n", "insert_val", "=", "(", "1", "-", "sizes", ")", "[", ":", "-", "1", "]", "\n", "\n", "# Assign index-offsetting values", "\n", "id_steps", "[", "insert_index", "]", "=", "insert_val", "\n", "\n", "# Finally index into input array for the group repeated o/p", "\n", "res", "=", "id_steps", ".", "cumsum", "(", "0", ")", "\n", "return", "res", "\n", "\n", "\n", "", "def", "repeat_blocks", "(", "\n", "sizes", ",", "\n"]]}