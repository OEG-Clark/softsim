{"home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.attention_3d_block": [[15, 30], ["int", "tensorflow.keras.layers.multiply", "tensorflow.keras.layers.Permute", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Permute", "tensorflow.int_shape", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.RepeatVector", "tensorflow.mean"], "function", ["None"], ["def", "attention_3d_block", "(", "inputs", ",", "seq_length", ",", "single_attention_vector", ")", ":", "\n", "# inputs.shape = (batch_size, seq_length, input_dim)", "\n", "    ", "input_dim", "=", "int", "(", "K", ".", "int_shape", "(", "inputs", ")", "[", "2", "]", ")", "\n", "a", "=", "Permute", "(", "(", "2", ",", "1", ")", ")", "(", "inputs", ")", "\n", "# Reshape has no purpose except making the code more explicit and clear:", "\n", "a", "=", "Reshape", "(", "(", "input_dim", ",", "seq_length", ")", ")", "(", "a", ")", "\n", "a", "=", "Dense", "(", "seq_length", ",", "activation", "=", "'softmax'", ")", "(", "a", ")", "\n", "if", "single_attention_vector", ":", "\n", "        ", "a", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "mean", "(", "x", ",", "axis", "=", "1", ")", ",", "name", "=", "'dim_reduction'", ")", "(", "a", ")", "\n", "a", "=", "RepeatVector", "(", "input_dim", ")", "(", "a", ")", "\n", "# when you apply a Dense layer, it applies to the last dimension of your tensor.", "\n", "# Permute is used to apply a Dense layer along the time axis (by default it's axis=1 in Keras)", "\n", "", "a_probs", "=", "Permute", "(", "(", "2", ",", "1", ")", ",", "name", "=", "'attention_vec'", ")", "(", "a", ")", "\n", "output_attention_mul", "=", "multiply", "(", "[", "inputs", ",", "a_probs", "]", ",", "name", "=", "'attention_mul'", ")", "\n", "return", "output_attention_mul", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.context_model": [[32, 57], ["tensorflow.keras.layers.Input", "tensorflow.python.keras.engine.training.Model", "tensorflow.python.keras.engine.training.Model.summary", "tensorflow.keras.layers.Input", "models.attention_3d_block", "tensorflow.python.keras.engine.training.Model", "tensorflow.python.keras.engine.training.Model.compile", "print", "tensorflow.keras.layers.LSTM", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.LSTM", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.python.keras.engine.training.Model.summary"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.attention_3d_block"], ["", "def", "context_model", "(", "seq_len", ",", "max_seq_length", ",", "emb_dim", ",", "classes", ",", "nodes", "=", "128", ",", "dropout", "=", "0.2", ",", "\n", "single_attention_vector", "=", "False", ")", ":", "\n", "# Encode each time step  # dummyModel(3, 20, 1024, 42)", "\n", "    ", "in_sentence", "=", "Input", "(", "shape", "=", "(", "max_seq_length", ",", "emb_dim", ",", ")", ")", "# , dtype='int64')", "\n", "# embedded_sentence = Embedding(len(word_index) + 1, emb_dim, trainable=True)(in_sentence)", "\n", "lstm_sentence", "=", "LSTM", "(", "nodes", ")", "(", "in_sentence", ")", "\n", "encoded_model", "=", "Model", "(", "in_sentence", ",", "lstm_sentence", ")", "\n", "encoded_model", ".", "summary", "(", ")", "\n", "\n", "# Model contextual time steps", "\n", "sequence_input", "=", "Input", "(", "shape", "=", "(", "seq_len", ",", "max_seq_length", ",", "emb_dim", ")", ")", "\n", "seq_encoded", "=", "TimeDistributed", "(", "encoded_model", ")", "(", "sequence_input", ")", "\n", "seq_encoded", "=", "Dropout", "(", "dropout", ")", "(", "seq_encoded", ")", "\n", "# Encode entire sentence", "\n", "seq_encoded", "=", "LSTM", "(", "nodes", ",", "return_sequences", "=", "True", ")", "(", "seq_encoded", ")", "\n", "# Apply attention layer", "\n", "attention_mul", "=", "attention_3d_block", "(", "seq_encoded", ",", "seq_len", ",", "single_attention_vector", ")", "\n", "attention_mul", "=", "Flatten", "(", ")", "(", "attention_mul", ")", "\n", "# Prediction", "\n", "prediction", "=", "Dense", "(", "classes", ",", "activation", "=", "'softmax'", ")", "(", "attention_mul", ")", "\n", "\n", "model", "=", "Model", "(", "sequence_input", ",", "prediction", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'rmsprop'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.context_model_att": [[59, 94], ["tensorflow.keras.layers.Input", "models.attention_3d_block", "tensorflow.python.keras.engine.training.Model.summary", "tensorflow.keras.layers.Input", "models.attention_3d_block", "tensorflow.python.keras.engine.training.Model", "tensorflow.python.keras.engine.training.Model.compile", "print", "tensorflow.keras.layers.LSTM", "tensorflow.python.keras.engine.training.Model", "tensorflow.python.keras.engine.training.Model", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.LSTM", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.python.keras.engine.training.Model.summary", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.Flatten", "tensorflow.mean", "tensorflow.mean"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.attention_3d_block", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.attention_3d_block"], ["", "def", "context_model_att", "(", "seq_len", ",", "max_seq_length", ",", "emb_dim", ",", "classes", ",", "nodes", "=", "128", ",", "dropout", "=", "0.2", ",", "\n", "single_attention_vector", "=", "False", ",", "train_with_mean", "=", "False", ")", ":", "\n", "# Encode each time step  # dummyModel(3, 20, 1024, 42)", "\n", "    ", "in_sentence", "=", "Input", "(", "shape", "=", "(", "max_seq_length", ",", "emb_dim", ",", ")", ")", "# , dtype='int64')", "\n", "# embedded_sentence = Embedding(len(word_index) + 1, emb_dim, trainable=True)(in_sentence)", "\n", "lstm_sentence", "=", "LSTM", "(", "nodes", ",", "return_sequences", "=", "True", ")", "(", "in_sentence", ")", "\n", "# Apply attention layer", "\n", "attention_mul", "=", "attention_3d_block", "(", "lstm_sentence", ",", "max_seq_length", ",", "single_attention_vector", ")", "\n", "# encoded_sentence = Flatten()(attention_mul)", "\n", "if", "train_with_mean", ":", "\n", "        ", "mean_vectors_norms", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "mean", "(", "x", ",", "axis", "=", "1", ")", ",", "name", "=", "'dim_reduction1'", ")", "(", "attention_mul", ")", "\n", "mean_vectors", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "mean", "(", "x", ",", "axis", "=", "1", ")", ",", "name", "=", "'dim_reduction2'", ")", "(", "in_sentence", ")", "\n", "concatenate_sentence", "=", "Concatenate", "(", ")", "(", "[", "mean_vectors_norms", ",", "mean_vectors", "]", ")", "\n", "encoded_model", "=", "Model", "(", "in_sentence", ",", "concatenate_sentence", ")", "\n", "", "else", ":", "\n", "        ", "encoded_sentence", "=", "Flatten", "(", ")", "(", "attention_mul", ")", "\n", "encoded_model", "=", "Model", "(", "in_sentence", ",", "encoded_sentence", ")", "\n", "", "encoded_model", ".", "summary", "(", ")", "\n", "\n", "# Model contextual time steps", "\n", "sequence_input", "=", "Input", "(", "shape", "=", "(", "seq_len", ",", "max_seq_length", ",", "emb_dim", ")", ")", "\n", "seq_encoded", "=", "TimeDistributed", "(", "encoded_model", ")", "(", "sequence_input", ")", "\n", "seq_encoded", "=", "Dropout", "(", "dropout", ")", "(", "seq_encoded", ")", "\n", "# Encode entire sentence", "\n", "seq_encoded", "=", "LSTM", "(", "nodes", ",", "return_sequences", "=", "True", ")", "(", "seq_encoded", ")", "\n", "# Apply attention layer", "\n", "attention_mul", "=", "attention_3d_block", "(", "seq_encoded", ",", "seq_len", ",", "single_attention_vector", ")", "\n", "attention_mul", "=", "Flatten", "(", "name", "=", "'flatten_attention'", ")", "(", "attention_mul", ")", "\n", "# Prediction", "\n", "prediction", "=", "Dense", "(", "classes", ",", "activation", "=", "'softmax'", ")", "(", "attention_mul", ")", "\n", "\n", "model", "=", "Model", "(", "sequence_input", ",", "prediction", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'rmsprop'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.model_attention_applied_after_lstm": [[98, 111], ["tensorflow.keras.layers.Input", "models.attention_3d_block", "tensorflow.python.keras.engine.training.Model", "tensorflow.python.keras.engine.training.Model.compile", "print", "tensorflow.keras.layers.LSTM", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.python.keras.engine.training.Model.summary"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.attention_3d_block"], ["", "def", "model_attention_applied_after_lstm", "(", "seq_length", ",", "emb_dim", ",", "num_classes", ",", "single_attention_vector", "=", "False", ")", ":", "\n", "    ", "inputs", "=", "Input", "(", "shape", "=", "(", "seq_length", ",", "emb_dim", ",", ")", ")", "\n", "lstm_units", "=", "64", "\n", "# lstm_out      = (SimpleRNN(lstm_units, return_sequences=True))(inputs)", "\n", "lstm_out", "=", "LSTM", "(", "lstm_units", ",", "return_sequences", "=", "True", ")", "(", "inputs", ")", "\n", "attention_mul", "=", "attention_3d_block", "(", "lstm_out", ",", "seq_length", ",", "single_attention_vector", ")", "\n", "attention_mul", "=", "Flatten", "(", ")", "(", "attention_mul", ")", "\n", "# inter_rep     = Dense(100)(attention_mul)", "\n", "output", "=", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", "(", "attention_mul", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "inputs", "]", ",", "outputs", "=", "output", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.model_attention_applied_after_bilstm": [[115, 128], ["tensorflow.keras.layers.Input", "models.attention_3d_block", "tensorflow.python.keras.engine.training.Model", "tensorflow.python.keras.engine.training.Model.compile", "print", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.python.keras.engine.training.Model.summary", "tensorflow.keras.layers.LSTM"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.attention_3d_block"], ["", "def", "model_attention_applied_after_bilstm", "(", "seq_length", ",", "emb_dim", ",", "num_classes", ",", "single_attention_vector", "=", "False", ")", ":", "\n", "    ", "inputs", "=", "Input", "(", "shape", "=", "(", "seq_length", ",", "emb_dim", ",", ")", ")", "\n", "lstm_units", "=", "64", "\n", "# lstm_out      = (SimpleRNN(lstm_units, return_sequences=True))(inputs)", "\n", "lstm_out", "=", "Bidirectional", "(", "LSTM", "(", "lstm_units", ",", "return_sequences", "=", "True", ")", ")", "(", "inputs", ")", "\n", "attention_mul", "=", "attention_3d_block", "(", "lstm_out", ",", "seq_length", ",", "single_attention_vector", ")", "\n", "attention_mul", "=", "Flatten", "(", "name", "=", "'flatten_attention'", ")", "(", "attention_mul", ")", "\n", "# inter_rep     = Dense(100)(attention_mul)", "\n", "output", "=", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", "(", "attention_mul", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "inputs", "]", ",", "outputs", "=", "output", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.model_attention_applied_after_bisrnn": [[130, 143], ["tensorflow.keras.layers.Input", "models.attention_3d_block", "tensorflow.python.keras.engine.training.Model", "tensorflow.python.keras.engine.training.Model.compile", "print", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.python.keras.engine.training.Model.summary", "tensorflow.keras.layers.SimpleRNN"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.attention_3d_block"], ["", "def", "model_attention_applied_after_bisrnn", "(", "seq_length", ",", "emb_dim", ",", "num_classes", ",", "single_attention_vector", "=", "False", ")", ":", "\n", "    ", "inputs", "=", "Input", "(", "shape", "=", "(", "seq_length", ",", "emb_dim", ",", ")", ")", "\n", "lstm_units", "=", "64", "\n", "# lstm_out      = (SimpleRNN(lstm_units, return_sequences=True))(inputs)", "\n", "lstm_out", "=", "Bidirectional", "(", "SimpleRNN", "(", "lstm_units", ",", "return_sequences", "=", "True", ")", ")", "(", "inputs", ")", "\n", "attention_mul", "=", "attention_3d_block", "(", "lstm_out", ",", "seq_length", ",", "single_attention_vector", ")", "\n", "attention_mul", "=", "Flatten", "(", ")", "(", "attention_mul", ")", "\n", "# inter_rep     = Dense(100)(attention_mul)", "\n", "output", "=", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", "(", "attention_mul", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "inputs", "]", ",", "outputs", "=", "output", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.model_for_utterance_level": [[145, 158], ["tensorflow.keras.layers.Input", "models.attention_3d_block", "tensorflow.python.keras.engine.training.Model", "tensorflow.python.keras.engine.training.Model.compile", "print", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.python.keras.engine.training.Model.summary", "tensorflow.keras.layers.SimpleRNN"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.attention_3d_block"], ["", "def", "model_for_utterance_level", "(", "seq_length", ",", "emb_dim", ",", "num_classes", ",", "single_attention_vector", "=", "False", ")", ":", "\n", "    ", "inputs", "=", "Input", "(", "shape", "=", "(", "seq_length", ",", "emb_dim", ",", ")", ")", "\n", "lstm_units", "=", "64", "\n", "# lstm_out      = (SimpleRNN(lstm_units, return_sequences=True))(inputs)", "\n", "lstm_out", "=", "Bidirectional", "(", "SimpleRNN", "(", "lstm_units", ",", "return_sequences", "=", "True", ")", ")", "(", "inputs", ")", "\n", "attention_mul", "=", "attention_3d_block", "(", "lstm_out", ",", "seq_length", ",", "single_attention_vector", ")", "\n", "attention_mul", "=", "Flatten", "(", ")", "(", "attention_mul", ")", "\n", "# inter_rep     = Dense(100)(attention_mul)", "\n", "output", "=", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", "(", "attention_mul", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "inputs", "]", ",", "outputs", "=", "output", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.non_context_model_for_utterance_level": [[160, 174], ["tensorflow.keras.layers.Input", "tensorflow.python.keras.engine.training.Model", "tensorflow.python.keras.engine.training.Model.compile", "print", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.MaxPooling1D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.python.keras.engine.training.Model.summary"], "function", ["None"], ["", "def", "non_context_model_for_utterance_level", "(", "emb_dim", ",", "num_classes", ")", ":", "\n", "    ", "inputs", "=", "Input", "(", "shape", "=", "(", "emb_dim", ",", ")", ")", "\n", "units", "=", "128", "\n", "reshape_features", "=", "Reshape", "(", "(", "32", ",", "32", ")", ")", "(", "inputs", ")", "\n", "hidden_out", "=", "Conv1D", "(", "units", ",", "kernel_size", "=", "3", ",", "activation", "=", "'relu'", ")", "(", "reshape_features", ")", "\n", "hidden_out", "=", "Conv1D", "(", "units", ",", "kernel_size", "=", "3", ",", "activation", "=", "'relu'", ")", "(", "hidden_out", ")", "\n", "hidden_out_pooling", "=", "MaxPooling1D", "(", "pool_size", "=", "2", ")", "(", "hidden_out", ")", "\n", "inter_rep", "=", "Flatten", "(", ")", "(", "hidden_out_pooling", ")", "\n", "inter_rep", "=", "Dense", "(", "100", ")", "(", "inter_rep", ")", "\n", "output", "=", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", "(", "inter_rep", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "inputs", "]", ",", "outputs", "=", "output", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.context_model_att_with_pt_encoder": [[176, 195], ["tensorflow.keras.layers.Input", "models.attention_3d_block", "tensorflow.python.keras.engine.training.Model", "tensorflow.python.keras.engine.training.Model.compile", "print", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.LSTM", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.python.keras.engine.training.Model.summary"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.attention_3d_block"], ["", "def", "context_model_att_with_pt_encoder", "(", "seq_len", ",", "max_seq_length", ",", "emb_dim", ",", "classes", ",", "encoded_model", ",", "\n", "nodes", "=", "128", ",", "dropout", "=", "0.2", ",", "single_attention_vector", "=", "False", ")", ":", "\n", "\n", "# Model contextual time steps", "\n", "    ", "sequence_input", "=", "Input", "(", "shape", "=", "(", "seq_len", ",", "max_seq_length", ",", "emb_dim", ")", ")", "\n", "seq_encoded", "=", "TimeDistributed", "(", "encoded_model", ")", "(", "sequence_input", ")", "\n", "seq_encoded", "=", "Dropout", "(", "dropout", ")", "(", "seq_encoded", ")", "\n", "# Encode entire sentence", "\n", "seq_encoded", "=", "LSTM", "(", "nodes", ",", "return_sequences", "=", "True", ")", "(", "seq_encoded", ")", "\n", "# Apply attention layer", "\n", "attention_mul", "=", "attention_3d_block", "(", "seq_encoded", ",", "seq_len", ",", "single_attention_vector", ")", "\n", "attention_mul", "=", "Flatten", "(", "name", "=", "'flatten_attention'", ")", "(", "attention_mul", ")", "\n", "# Prediction", "\n", "prediction", "=", "Dense", "(", "classes", ",", "activation", "=", "'softmax'", ")", "(", "attention_mul", ")", "\n", "\n", "model", "=", "Model", "(", "sequence_input", ",", "prediction", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'rmsprop'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.dia_act_annotator.index": [[19, 118], ["app.route", "src.utils_float_string.str_utils", "os.path.exists", "src.utils_float_string.string_to_floats", "predict_classes_for_elmo", "numpy.array", "predict_classes_for_elmo_mean", "print", "print", "print", "print", "src.final_annotator_utils.convert_predictions_to_indices", "krippendorff.alpha", "print", "print", "time.time", "src.final_annotator_utils.ensemble_eda_annotation", "print", "result_text.append", "result_text.append", "result_text.append", "range", "flask.jsonify", "numpy.load", "sklearn.metrics.classification.classification_report", "round", "fleiss_kappa", "print", "len", "result_text.append", "requests.post().json", "item.mean", "sklearn.metrics.classification.accuracy_score", "sklearn.metrics.classification.cohen_kappa_score", "scipy.stats.stats.spearmanr", "print", "sklearn.metrics.classification.accuracy_score", "sklearn.metrics.classification.accuracy_score", "sklearn.metrics.classification.accuracy_score", "sklearn.metrics.classification.accuracy_score", "len", "str", "str", "requests.post", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils_float_string.str_utils", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils_float_string.string_to_floats", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.main_swda_elmo_predictor.predict_classes_for_elmo", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.main_swda_elmo_mean.predict_classes_for_elmo_mean", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.ensemble_annotator.convert_predictions_to_indices", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.ensemble_annotator.ensemble_eda_annotation", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.relieability_kappa.fleiss_kappa"], ["@", "app", ".", "route", "(", "\"/predict_das\"", ",", "methods", "=", "[", "'GET'", ",", "'POST'", "]", ")", "\n", "def", "index", "(", ")", ":", "\n", "    ", "\"\"\" Predicting from text takes 'x' as a list of utterances and\n    will require to have ELMo emb server running at port 4004 or online hosting service. \"\"\"", "\n", "value", "=", "request", ".", "json", "[", "'text'", "]", "\n", "speaker_id", ",", "utterances", ",", "utt_id", ",", "emotion", "=", "str_utils", "(", "text", "=", "value", ",", "mode", "=", "'decode'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "'results/tags.npy'", ")", ":", "\n", "        ", "tags", "=", "np", ".", "load", "(", "'results/tags.npy'", ")", "\n", "\n", "# ElMO Embedding server link ran using elmo_emb_sever.py", "\n", "", "link_online", "=", "False", "\n", "if", "link_online", ":", "\n", "        ", "link", "=", "\"https://custom.your.forwarded-link-or-tunnel.domain/\"", "\n", "", "else", ":", "\n", "        ", "link", "=", "\"http://0.0.0.0:4005/\"", "\n", "", "utterances_post", "=", "'\\r\\n'", ".", "join", "(", "utterances", ")", "\n", "x_features", "=", "string_to_floats", "(", "requests", ".", "post", "(", "link", "+", "\"elmo_embed_words\"", ",", "\n", "json", "=", "{", "\"text\"", ":", "utterances_post", "}", ")", ".", "json", "(", ")", "[", "\"result\"", "]", ")", "\n", "\n", "# Predict with normal elmo features", "\n", "from", "main_swda_elmo_predictor", "import", "predict_classes_for_elmo", "\n", "swda_elmo_non_con_out", ",", "swda_elmo_con_out", ",", "swda_elmo_non_con_out_confs", ",", "swda_elmo_con_out_confs", ",", "swda_elmo_top_con_out", ",", "swda_elmo_top_con_out_confs", "=", "predict_classes_for_elmo", "(", "x_features", ")", "\n", "\n", "# Predict with normal elmo mean features", "\n", "from", "main_swda_elmo_mean", "import", "predict_classes_for_elmo_mean", "\n", "swda_elmo_features_mean", "=", "np", ".", "array", "(", "[", "item", ".", "mean", "(", "axis", "=", "0", ")", "for", "item", "in", "x_features", "]", ")", "\n", "swda_elmo_mean_non_con_out", ",", "swda_elmo_mean_con_out", ",", "swda_elmo_mean_non_con_out_confs", ",", "swda_elmo_mean_con_out_confs", "=", "predict_classes_for_elmo_mean", "(", "swda_elmo_features_mean", ")", "\n", "\n", "# Evaluation of context model predictions", "\n", "print", "(", "'Accuracy comparision between context-based predictions: {}'", ".", "format", "(", "\n", "classification", ".", "accuracy_score", "(", "swda_elmo_con_out", ",", "swda_elmo_mean_con_out", ")", ")", ")", "\n", "print", "(", "'Kappa (Cohen) score between context-based predictions: {}'", ".", "format", "(", "\n", "classification", ".", "cohen_kappa_score", "(", "swda_elmo_con_out", ",", "swda_elmo_mean_con_out", ")", ")", ")", "\n", "print", "(", "classification", ".", "classification_report", "(", "swda_elmo_con_out", ",", "swda_elmo_mean_con_out", ")", ")", "\n", "print", "(", "'Spearman Correlation between context-based predictions: {}'", ".", "format", "(", "\n", "stats", ".", "spearmanr", "(", "swda_elmo_con_out", ",", "swda_elmo_mean_con_out", ")", ")", ")", "\n", "reliability_data", "=", "convert_predictions_to_indices", "(", "swda_elmo_con_out", ",", "swda_elmo_non_con_out", ",", "swda_elmo_mean_con_out", ",", "\n", "swda_elmo_mean_non_con_out", ",", "swda_elmo_top_con_out", ",", "tags", ")", "\n", "k_alpha", "=", "alpha", "(", "reliability_data", ",", "level_of_measurement", "=", "'nominal'", ")", "\n", "k_alpha_score_text", "=", "\"Krippendorff's alpha: {}\"", ".", "format", "(", "round", "(", "k_alpha", ",", "6", ")", ")", "\n", "print", "(", "k_alpha_score_text", ")", "\n", "\n", "try", ":", "\n", "        ", "from", "src", ".", "relieability_kappa", "import", "fleiss_kappa", "\n", "fleiss_kappa_score", "=", "fleiss_kappa", "(", "reliability_data", ",", "5", ")", "\n", "f_kappa_score_text", "=", "\"Fleiss' Kappa: {}\"", ".", "format", "(", "fleiss_kappa_score", ")", "\n", "print", "(", "f_kappa_score_text", ")", "\n", "", "except", "IndexError", ":", "\n", "        ", "print", "(", "\"Could not compute Fleiss' Kappa score, due to insufficient categories in the final annotations!\"", ")", "\n", "fleiss_kappa_score", "=", "None", "\n", "f_kappa_score_text", "=", "\"Could not compute Fleiss' Kappa score, due to insufficient categories\"", "\n", "\n", "", "print", "(", "'Accuracy comparision between context and non-context predictions elmo: {}% elmo_mean: {}% '", "\n", "'context-context: {}% non-non-context: {}%'", ".", "format", "(", "\n", "classification", ".", "accuracy_score", "(", "swda_elmo_con_out", ",", "swda_elmo_non_con_out", ")", ",", "\n", "classification", ".", "accuracy_score", "(", "swda_elmo_mean_con_out", ",", "swda_elmo_mean_non_con_out", ")", ",", "\n", "classification", ".", "accuracy_score", "(", "swda_elmo_mean_con_out", ",", "swda_elmo_con_out", ")", ",", "\n", "classification", ".", "accuracy_score", "(", "swda_elmo_mean_non_con_out", ",", "swda_elmo_non_con_out", ")", ")", ")", "\n", "\n", "timestamp", "=", "time", ".", "time", "(", ")", "\n", "# Generate final file of annotations; contains \"xx\" label for unknown/corrections of EDAs", "\n", "rows", ",", "assessment", "=", "ensemble_eda_annotation", "(", "swda_elmo_non_con_out", ",", "swda_elmo_mean_non_con_out", ",", "\n", "swda_elmo_con_out", ",", "swda_elmo_mean_con_out", ",", "swda_elmo_top_con_out", ",", "\n", "swda_elmo_non_con_out_confs", ",", "swda_elmo_mean_non_con_out_confs", ",", "\n", "swda_elmo_con_out_confs", ",", "swda_elmo_mean_con_out_confs", ",", "\n", "swda_elmo_top_con_out_confs", ",", "\n", "speaker_id", ",", "utterances", ",", "utt_id", ",", "emotion", ",", "\n", "sentiment_labels", "=", "[", "]", ",", "meld_data", "=", "False", ",", "\n", "file_name", "=", "'annotations_'", "+", "str", "(", "timestamp", ")", ",", "\n", "write_final_csv", "=", "True", ",", "write_utterances", "=", "True", ",", "return_assessment", "=", "True", ")", "\n", "\n", "print", "(", "'ran swda_dia_act_annotate.py, with total {} number of utterances'", ".", "format", "(", "len", "(", "rows", ")", ")", ")", "\n", "\n", "result_text", "=", "[", "]", "\n", "result_text", ".", "append", "(", "f_kappa_score_text", ")", "# 0th element f_kappa_score_text", "\n", "result_text", ".", "append", "(", "k_alpha_score_text", ")", "# 1st element k_alpha_score_text", "\n", "result_text", ".", "append", "(", "assessment", ")", "# 3rd element overall_data_assessment", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "utterances", ")", ")", ":", "\n", "        ", "text", "=", "str", "(", "speaker_id", "[", "i", "]", ")", "+", "'$$$$'", "+", "str", "(", "utt_id", "[", "i", "]", ")", "+", "'$$$$'", "+", "str", "(", "utterances", "[", "i", "]", ")", "+", "'$$$$'", "+", "str", "(", "emotion", "[", "i", "]", ")", "+", "'$$$$'", "+", "str", "(", "swda_elmo_non_con_out", "[", "i", "]", ")", "+", "'$$$$'", "+", "str", "(", "swda_elmo_non_con_out_confs", "[", "i", "]", ")", "+", "'$$$$'", "+", "str", "(", "swda_elmo_mean_non_con_out", "[", "i", "]", ")", "+", "'$$$$'", "+", "str", "(", "swda_elmo_mean_non_con_out_confs", "[", "i", "]", ")", "+", "'$$$$'", "+", "str", "(", "swda_elmo_con_out", "[", "i", "]", ")", "+", "'$$$$'", "+", "str", "(", "swda_elmo_con_out_confs", "[", "i", "]", ")", "+", "'$$$$'", "+", "str", "(", "swda_elmo_mean_con_out", "[", "i", "]", ")", "+", "'$$$$'", "+", "str", "(", "swda_elmo_mean_con_out_confs", "[", "i", "]", ")", "+", "'$$$$'", "+", "str", "(", "swda_elmo_top_con_out", "[", "i", "]", ")", "+", "'$$$$'", "+", "str", "(", "swda_elmo_top_con_out_confs", "[", "i", "]", ")", "\n", "result_text", ".", "append", "(", "text", ")", "\n", "\n", "# for item in rows:", "\n", "#     result_text.append(item['speaker'].decode(\"utf-8\") + '$$$$' + item['utt_id'] + '$$$$' + \\", "\n", "#                        item['utterance'].decode(\"utf-8\") + '$$$$' + item['emotion'] + '$$$$' + \\", "\n", "#                        item['eda1'] + '$$$$' + item['eda2'] + '$$$$' + item['eda3'] + '$$$$' + \\", "\n", "#                        item['eda4'] + '$$$$' + item['eda5'] + '$$$$' + item['EDA'] + '$$$$' + \\", "\n", "#                        item['all_match'] + '$$$$' + item['con_match'] + '$$$$' + item['match'])", "\n", "\n", "", "result_text", "=", "'?????'", ".", "join", "(", "result_text", ")", "\n", "return", "jsonify", "(", "{", "'result'", ":", "result_text", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.main_swda_elmo_mean.predict_classes_elmo_mean_features": [[86, 103], ["non_context_model_elmo_mean.predict", "non_con_out.append", "len", "src.utils.prepare_data", "context_model_elmo_mean.predict", "con_out.append", "np.argmax", "np.argmax"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils.prepare_data"], ["", "", "def", "predict_classes_elmo_mean_features", "(", "x", ")", ":", "\n", "    ", "non_con_predictions", "=", "non_context_model_elmo_mean", ".", "predict", "(", "x", ")", "\n", "non_con_out", "=", "[", "]", "\n", "for", "item", "in", "non_con_predictions", ":", "\n", "        ", "non_con_out", ".", "append", "(", "tags", "[", "np", ".", "argmax", "(", "item", ")", "]", ")", "\n", "\n", "", "if", "len", "(", "x", ")", ">", "con_seq_length", ":", "\n", "        ", "x", "=", "prepare_data", "(", "x", ",", "[", "]", ",", "con_seq_length", ",", "with_y", "=", "False", ")", "\n", "con_predictions", "=", "context_model_elmo_mean", ".", "predict", "(", "x", ")", "\n", "# take first two DAs from non-context model as we skip in context model", "\n", "# (two since \"con_seq_length-1\")", "\n", "con_out", "=", "[", "non_con_out", "[", "0", "]", ",", "non_con_out", "[", "1", "]", "]", "\n", "for", "item", "in", "con_predictions", ":", "\n", "            ", "con_out", ".", "append", "(", "tags", "[", "np", ".", "argmax", "(", "item", ")", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "con_out", "=", "[", "non_con_out", "[", "0", "]", ",", "non_con_out", "[", "1", "]", "]", "\n", "", "return", "non_con_out", ",", "con_out", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.main_swda_elmo_mean.predict_classes_for_elmo_mean": [[105, 142], ["non_context_model_elmo_mean.predict", "src.utils_float_string.string_to_floats", "src.utils.prepare_data.mean", "non_con_out.append", "non_con_out_confs.append", "len", "src.utils.prepare_data", "context_model_elmo_mean.predict", "con_out.append", "con_out_confs.append", "requests.post().json", "item.argmax", "item.argmax", "requests.post", "np.argmax", "item.argmax"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils_float_string.string_to_floats", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils.prepare_data"], ["", "def", "predict_classes_for_elmo_mean", "(", "x", ",", "predict_from_text", "=", "False", ",", "link_online", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Predicting from text takes 'x' as a list of utterances (text) and\n    will require to have ELMo emb server running at port 4004 or online hosting service.\n    \"\"\"", "\n", "if", "predict_from_text", ":", "\n", "        ", "if", "link_online", ":", "\n", "            ", "link", "=", "\"https://d55da20d.eu.ngrok.io/\"", "\n", "", "else", ":", "\n", "            ", "link", "=", "\"http://0.0.0.0:4004/\"", "\n", "", "x", "=", "string_to_floats", "(", "\n", "requests", ".", "post", "(", "link", "+", "'elmo_embed_words'", ",", "\n", "json", "=", "{", "\"text\"", ":", "x", "}", ")", ".", "json", "(", ")", "[", "'result'", "]", ")", "\n", "x", "=", "x", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "", "non_con_predictions", "=", "non_context_model_elmo_mean", ".", "predict", "(", "x", ")", "\n", "non_con_out", "=", "[", "]", "\n", "non_con_out_confs", "=", "[", "]", "\n", "for", "item", "in", "non_con_predictions", ":", "\n", "        ", "non_con_out", ".", "append", "(", "tags", "[", "item", ".", "argmax", "(", ")", "]", ")", "\n", "non_con_out_confs", ".", "append", "(", "item", "[", "item", ".", "argmax", "(", ")", "]", ")", "\n", "\n", "", "if", "len", "(", "x", ")", ">", "con_seq_length", ":", "\n", "        ", "x", "=", "prepare_data", "(", "x", ",", "[", "]", ",", "con_seq_length", ",", "with_y", "=", "False", ")", "\n", "con_predictions", "=", "context_model_elmo_mean", ".", "predict", "(", "x", ")", "\n", "# as context based model starts from third utterance", "\n", "# we are taking first two DAs from non-context model", "\n", "# in the end, it will be checked with their conf values", "\n", "con_out", "=", "[", "non_con_out", "[", "0", "]", ",", "non_con_out", "[", "1", "]", "]", "\n", "con_out_confs", "=", "[", "non_con_out_confs", "[", "0", "]", ",", "non_con_out_confs", "[", "1", "]", "]", "\n", "for", "item", "in", "con_predictions", ":", "\n", "            ", "con_out", ".", "append", "(", "tags", "[", "np", ".", "argmax", "(", "item", ")", "]", ")", "\n", "con_out_confs", ".", "append", "(", "item", "[", "item", ".", "argmax", "(", ")", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "con_out", "=", "[", "'None'", ",", "'None'", "]", "\n", "con_out_confs", "=", "[", "0.0", ",", "0.0", "]", "\n", "", "return", "non_con_out", ",", "con_out", ",", "non_con_out_confs", ",", "con_out_confs", "\n", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_features.get_elmo_embs": [[10, 32], ["len", "allennlp.data.tokenizers.word_tokenizer.WordTokenizer", "word_tokenizer.WordTokenizer.batch_tokenize", "pyprind.ProgBar", "range", "pyprind.ProgBar", "len", "idx.append", "pyprind.ProgBar.update", "elmo.embed_sentence", "pyprind.ProgBar.update", "vectors.append", "vectors.append", "print", "numpy.mean", "len"], "function", ["None"], ["def", "get_elmo_embs", "(", "data", ",", "mean", "=", "True", ",", "print_length", "=", "False", ")", ":", "\n", "    ", "n", "=", "len", "(", "data", ")", "\n", "tk", "=", "word_tokenizer", ".", "WordTokenizer", "(", ")", "\n", "tokens", "=", "tk", ".", "batch_tokenize", "(", "data", ")", "\n", "idx", "=", "[", "]", "\n", "bar", "=", "pyprind", ".", "ProgBar", "(", "n", ",", "stream", "=", "sys", ".", "stdout", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "tokens", ")", ")", ":", "\n", "        ", "idx", ".", "append", "(", "[", "x", ".", "idx", "for", "x", "in", "tokens", "[", "i", "]", "]", ")", "\n", "tokens", "[", "i", "]", "=", "[", "x", ".", "text", "for", "x", "in", "tokens", "[", "i", "]", "]", "\n", "bar", ".", "update", "(", ")", "\n", "", "bar", "=", "pyprind", ".", "ProgBar", "(", "n", ",", "stream", "=", "sys", ".", "stdout", ")", "\n", "vectors", "=", "[", "]", "\n", "for", "seq", "in", "tokens", ":", "\n", "        ", "vector", "=", "elmo", ".", "embed_sentence", "(", "seq", "[", "0", ":", "21", "]", ")", "\n", "if", "mean", ":", "\n", "            ", "vectors", ".", "append", "(", "np", ".", "mean", "(", "vector", "[", "2", "]", ",", "axis", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "vectors", ".", "append", "(", "vector", "[", "2", "]", ")", "\n", "", "if", "print_length", ":", "\n", "            ", "print", "(", "'Length of a sequence: {} with final emb vector shape: {}'", ".", "format", "(", "len", "(", "seq", ")", ",", "vector", ".", "shape", ")", ")", "\n", "", "bar", ".", "update", "(", ")", "\n", "", "return", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_features.get_elmo_tokens": [[34, 46], ["len", "allennlp.data.tokenizers.word_tokenizer.WordTokenizer", "word_tokenizer.WordTokenizer.batch_tokenize", "pyprind.ProgBar", "range", "len", "idx.append", "pyprind.ProgBar.update"], "function", ["None"], ["", "def", "get_elmo_tokens", "(", "data", ")", ":", "\n", "    ", "n", "=", "len", "(", "data", ")", "\n", "# elmo = ElmoEmbedder()", "\n", "tk", "=", "word_tokenizer", ".", "WordTokenizer", "(", ")", "\n", "tokens", "=", "tk", ".", "batch_tokenize", "(", "data", ")", "\n", "idx", "=", "[", "]", "\n", "bar", "=", "pyprind", ".", "ProgBar", "(", "n", ",", "stream", "=", "sys", ".", "stdout", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "tokens", ")", ")", ":", "\n", "        ", "idx", ".", "append", "(", "[", "x", ".", "idx", "for", "x", "in", "tokens", "[", "i", "]", "]", ")", "\n", "tokens", "[", "i", "]", "=", "[", "x", ".", "text", "for", "x", "in", "tokens", "[", "i", "]", "]", "\n", "bar", ".", "update", "(", ")", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_features.get_elmo_features": [[48, 95], ["allennlp.data.tokenizers.word_tokenizer.WordTokenizer", "word_tokenizer.WordTokenizer.batch_tokenize", "range", "elmo.embed_sentences", "enumerate", "numpy.concatenate", "range", "len", "idx.append", "data.iloc[].A.split", "data.iloc[].B.split", "numpy.mean", "numpy.mean", "numpy.squeeze", "numpy.mean", "numpy.squeeze", "ans.append", "elmo_features.get_elmo_features.get_nearest"], "function", ["None"], ["", "def", "get_elmo_features", "(", "data", ")", ":", "\n", "    ", "def", "get_nearest", "(", "slot", ",", "target", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "target", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "i", "in", "slot", ":", "\n", "                ", "return", "i", "\n", "\n", "", "", "", "tk", "=", "word_tokenizer", ".", "WordTokenizer", "(", ")", "\n", "tokens", "=", "tk", ".", "batch_tokenize", "(", "data", ")", "\n", "idx", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "tokens", ")", ")", ":", "\n", "        ", "idx", ".", "append", "(", "[", "x", ".", "idx", "for", "x", "in", "tokens", "[", "i", "]", "]", ")", "\n", "tokens", "[", "i", "]", "=", "[", "x", ".", "text", "for", "x", "in", "tokens", "[", "i", "]", "]", "\n", "\n", "", "vectors", "=", "elmo", ".", "embed_sentences", "(", "tokens", ")", "\n", "\n", "ans", "=", "[", "]", "\n", "for", "i", ",", "vector", "in", "enumerate", "(", "[", "v", "for", "v", "in", "vectors", "]", ")", ":", "\n", "        ", "P_l", "=", "data", ".", "iloc", "[", "i", "]", ".", "Pronoun", "\n", "A_l", "=", "data", ".", "iloc", "[", "i", "]", ".", "A", ".", "split", "(", ")", "\n", "B_l", "=", "data", ".", "iloc", "[", "i", "]", ".", "B", ".", "split", "(", ")", "\n", "\n", "P_offset", "=", "data", ".", "iloc", "[", "i", "]", "[", "'Pronoun-offset'", "]", "\n", "A_offset", "=", "data", ".", "iloc", "[", "i", "]", "[", "'A-offset'", "]", "\n", "B_offset", "=", "data", ".", "iloc", "[", "i", "]", "[", "'B-offset'", "]", "\n", "\n", "if", "P_offset", "not", "in", "idx", "[", "i", "]", ":", "\n", "            ", "P_offset", "=", "get_nearest", "(", "idx", "[", "i", "]", ",", "P_offset", ")", "\n", "", "if", "A_offset", "not", "in", "idx", "[", "i", "]", ":", "\n", "            ", "A_offset", "=", "get_nearest", "(", "idx", "[", "i", "]", ",", "A_offset", ")", "\n", "", "if", "B_offset", "not", "in", "idx", "[", "i", "]", ":", "\n", "            ", "B_offset", "=", "get_nearest", "(", "idx", "[", "i", "]", ",", "B_offset", ")", "\n", "\n", "", "emb_P", "=", "np", ".", "mean", "(", "vector", "[", "1", ":", "3", ",", "idx", "[", "i", "]", ".", "index", "(", "P_offset", ")", ",", ":", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "emb_A", "=", "np", ".", "mean", "(", "vector", "[", "1", ":", "3", ",", "idx", "[", "i", "]", ".", "index", "(", "A_offset", ")", ":", "idx", "[", "i", "]", ".", "index", "(", "A_offset", ")", "+", "len", "(", "A_l", ")", ",", ":", "]", ",", "axis", "=", "(", "1", ",", "0", ")", ",", "\n", "keepdims", "=", "True", ")", "\n", "emb_A", "=", "np", ".", "squeeze", "(", "emb_A", ",", "axis", "=", "0", ")", "\n", "\n", "emb_B", "=", "np", ".", "mean", "(", "vector", "[", "1", ":", "3", ",", "idx", "[", "i", "]", ".", "index", "(", "B_offset", ")", ":", "idx", "[", "i", "]", ".", "index", "(", "B_offset", ")", "+", "len", "(", "B_l", ")", ",", ":", "]", ",", "axis", "=", "(", "1", ",", "0", ")", ",", "\n", "keepdims", "=", "True", ")", "\n", "emb_B", "=", "np", ".", "squeeze", "(", "emb_B", ",", "axis", "=", "0", ")", "\n", "\n", "ans", ".", "append", "(", "np", ".", "concatenate", "(", "[", "emb_A", ",", "emb_B", ",", "emb_P", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "emb", "=", "np", ".", "concatenate", "(", "ans", ",", "axis", "=", "0", ")", "\n", "return", "emb", "\n", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.main_predictor.main": [[10, 41], ["src.utils.read_files", "src.utils.read_files", "print", "pickle.load", "pickle.load", "np.load", "np.load", "src.utils.padSequencesKeras", "src.utils.categorize_raw_data", "keras.utils.to_categorical", "models.model_attention_applied_after_bilstm", "models.model_attention_applied_after_bilstm.load_weights", "models.model_attention_applied_after_bilstm.evaluate", "print", "src.utils.prepare_data", "models.context_model_att", "models.context_model_att.load_weights", "models.context_model_att.evaluate", "print", "len", "len", "open", "open", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.read_files", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.read_files", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils.padSequencesKeras", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils.categorize_raw_data", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.model_attention_applied_after_bilstm", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils.prepare_data", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.models.context_model_att"], ["def", "main", "(", ")", ":", "\n", "    ", "max_seq_len", "=", "20", "\n", "trainFile", "=", "'data/swda-actags_train_speaker.csv'", "\n", "testFile", "=", "'data/swda-actags_test_speaker.csv'", "\n", "SidTr", ",", "Xtrain", ",", "Ytrain", ",", "Ztrain", "=", "read_files", "(", "trainFile", ")", "\n", "SidTest", ",", "Xtest", ",", "Ytest", ",", "Ztest", "=", "read_files", "(", "testFile", ")", "\n", "print", "(", "len", "(", "Xtest", ")", ",", "len", "(", "Xtrain", ")", ")", "\n", "x_test", "=", "pickle", ".", "load", "(", "open", "(", "\"features/x_test_tokens.p\"", ",", "\"rb\"", ")", ")", "\n", "x_train", "=", "pickle", ".", "load", "(", "open", "(", "\"features/x_train_tokens.p\"", ",", "\"rb\"", ")", ")", "\n", "toPadding", "=", "np", ".", "load", "(", "'features/pad_a_token.npy'", ")", "\n", "\n", "X_Test", "=", "np", ".", "load", "(", "'features/X_test_elmo_features.npy'", ")", "\n", "X_Test", "=", "padSequencesKeras", "(", "X_Test", ",", "max_seq_len", ",", "toPadding", ")", "\n", "tags", ",", "num", ",", "Y_train", ",", "Y_test", "=", "categorize_raw_data", "(", "Ztrain", ",", "Ztest", ")", "\n", "target_category_test", "=", "to_categorical", "(", "Y_test", ",", "len", "(", "tags", ")", ")", "\n", "\n", "# NON-CONTEXT MODEL", "\n", "model", "=", "model_attention_applied_after_bilstm", "(", "max_seq_len", ",", "X_Test", ".", "shape", "[", "2", "]", ",", "len", "(", "tags", ")", ")", "\n", "model", ".", "load_weights", "(", "'params/weight_parameters'", ")", "\n", "evaluation", "=", "model", ".", "evaluate", "(", "X_Test", ",", "target_category_test", ",", "verbose", "=", "2", ")", "\n", "print", "(", "\"Test results for non-context model - accuracy: {}\"", ".", "format", "(", "evaluation", "[", "1", "]", ")", ")", "\n", "\n", "seq_length", "=", "3", "# Preparing data for contextual training with Seq_length", "\n", "X_test_con", ",", "Y_test_con", "=", "prepare_data", "(", "X_Test", ",", "target_category_test", ",", "seq_length", ")", "\n", "\n", "# CONTEXT MODEL", "\n", "context_model", "=", "context_model_att", "(", "seq_length", ",", "max_seq_len", ",", "X_test_con", ".", "shape", "[", "3", "]", ",", "len", "(", "tags", ")", ")", "\n", "con_model_name", "=", "'params/context_model_att_{}'", ".", "format", "(", "seq_length", ")", "\n", "context_model", ".", "load_weights", "(", "con_model_name", ")", "\n", "loss", ",", "old_acc", "=", "context_model", ".", "evaluate", "(", "X_test_con", ",", "Y_test_con", ",", "verbose", "=", "2", ",", "batch_size", "=", "32", ")", "\n", "print", "(", "'Context Score results:'", ",", "old_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.main_swda_elmo_predictor.predict_classes_for_elmo": [[52, 97], ["src.utils.padSequencesKeras", "model.predict", "src.utils_float_string.string_to_floats", "non_con_out.append", "non_con_out_confs.append", "len", "src.utils.prepare_data", "context_model_elmo.predict", "top_context_model.predict", "con_out.append", "con_out_confs.append", "top_con_out.append", "top_con_out_confs.append", "requests.post().json", "item.argmax", "item.argmax", "requests.post", "np.argmax", "item.argmax", "np.argmax", "item.argmax"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils.padSequencesKeras", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils_float_string.string_to_floats", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils.prepare_data"], ["", "def", "predict_classes_for_elmo", "(", "x", ",", "predict_from_text", "=", "False", ",", "link_online", "=", "False", ")", ":", "\n", "    ", "\"\"\" Predicting from text takes 'x' as a list of utterances and\n    will require to have ELMo emb server running at port 4004 or online hosting service. \"\"\"", "\n", "if", "predict_from_text", ":", "\n", "        ", "if", "link_online", ":", "\n", "            ", "link", "=", "\"https://d55da20d.eu.ngrok.io/\"", "\n", "", "else", ":", "\n", "            ", "link", "=", "\"http://0.0.0.0:4004/\"", "\n", "", "x", "=", "string_to_floats", "(", "\n", "requests", ".", "post", "(", "link", "+", "'elmo_embed_words'", ",", "\n", "json", "=", "{", "\"text\"", ":", "x", "}", ")", ".", "json", "(", ")", "[", "'result'", "]", ")", "\n", "\n", "", "x", "=", "padSequencesKeras", "(", "x", ",", "max_seq_len", ",", "toPadding", ")", "\n", "\n", "non_con_predictions", "=", "model", ".", "predict", "(", "x", ")", "\n", "non_con_out", "=", "[", "]", "\n", "non_con_out_confs", "=", "[", "]", "\n", "for", "item", "in", "non_con_predictions", ":", "\n", "        ", "non_con_out", ".", "append", "(", "tags", "[", "item", ".", "argmax", "(", ")", "]", ")", "\n", "non_con_out_confs", ".", "append", "(", "item", "[", "item", ".", "argmax", "(", ")", "]", ")", "\n", "\n", "", "if", "len", "(", "x", ")", ">", "seq_length", ":", "\n", "        ", "x", "=", "prepare_data", "(", "x", ",", "[", "]", ",", "seq_length", ",", "with_y", "=", "False", ")", "\n", "con_predictions", "=", "context_model_elmo", ".", "predict", "(", "x", ")", "\n", "top_con_predictions", "=", "top_context_model", ".", "predict", "(", "x", ")", "\n", "\n", "# as context based model starts from third utterance", "\n", "# we are taking first two DAs from non-context model", "\n", "# in the end, it will be checked with their conf values", "\n", "con_out", "=", "[", "non_con_out", "[", "0", "]", ",", "non_con_out", "[", "1", "]", "]", "\n", "con_out_confs", "=", "[", "non_con_out_confs", "[", "0", "]", ",", "non_con_out_confs", "[", "1", "]", "]", "\n", "top_con_out", "=", "[", "non_con_out", "[", "0", "]", ",", "non_con_out", "[", "1", "]", "]", "\n", "top_con_out_confs", "=", "[", "non_con_out_confs", "[", "0", "]", ",", "non_con_out_confs", "[", "1", "]", "]", "\n", "for", "item", "in", "con_predictions", ":", "\n", "            ", "con_out", ".", "append", "(", "tags", "[", "np", ".", "argmax", "(", "item", ")", "]", ")", "\n", "con_out_confs", ".", "append", "(", "item", "[", "item", ".", "argmax", "(", ")", "]", ")", "\n", "", "for", "item", "in", "top_con_predictions", ":", "\n", "            ", "top_con_out", ".", "append", "(", "tags", "[", "np", ".", "argmax", "(", "item", ")", "]", ")", "\n", "top_con_out_confs", ".", "append", "(", "item", "[", "item", ".", "argmax", "(", ")", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "con_out", "=", "[", "'None'", ",", "'None'", "]", "\n", "con_out_confs", "=", "[", "0.0", ",", "0.0", "]", "\n", "top_con_out", "=", "[", "'None'", ",", "'None'", "]", "\n", "top_con_out_confs", "=", "[", "0.0", ",", "0.0", "]", "\n", "", "return", "non_con_out", ",", "con_out", ",", "non_con_out_confs", ",", "con_out_confs", ",", "top_con_out", ",", "top_con_out_confs", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.swda_dia_act_annotate.acc_corr": [[82, 86], ["sklearn.metrics.classification.accuracy_score", "scipy.stats.stats.spearmanr"], "function", ["None"], ["", "def", "acc_corr", "(", "predicted", ",", "real", ")", ":", "\n", "    ", "acc", "=", "classification", ".", "accuracy_score", "(", "predicted", ",", "real", ")", "\n", "corr", "=", "stats", ".", "spearmanr", "(", "predicted", ",", "real", ")", "\n", "return", "acc", ",", "corr", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.data_generator.DataGenerator.__init__": [[8, 19], ["data_generator.DataGenerator.on_epoch_end"], "methods", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.data_generator.DataGenerator.on_epoch_end"], ["def", "__init__", "(", "self", ",", "list_IDs", ",", "labels", ",", "batch_size", "=", "32", ",", "dim", "=", "(", "32", ",", "32", ",", "32", ")", ",", "n_channels", "=", "1", ",", "\n", "n_classes", "=", "10", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "'Initialization'", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "list_IDs", "=", "list_IDs", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "on_epoch_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.data_generator.DataGenerator.__len__": [[20, 23], ["int", "numpy.floor", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the number of batches per epoch'", "\n", "return", "int", "(", "np", ".", "floor", "(", "len", "(", "self", ".", "list_IDs", ")", "/", "self", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.data_generator.DataGenerator.__getitem__": [[24, 36], ["data_generator.DataGenerator.__data_generation"], "methods", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.data_generator.DataGenerator.__data_generation"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "'Generate one batch of data'", "\n", "# Generate indexes of the batch", "\n", "indexes", "=", "self", ".", "indexes", "[", "index", "*", "self", ".", "batch_size", ":", "(", "index", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "\n", "# Find list of IDs", "\n", "list_IDs_temp", "=", "[", "self", ".", "list_IDs", "[", "k", "]", "for", "k", "in", "indexes", "]", "\n", "\n", "# Generate data", "\n", "X", ",", "y", "=", "self", ".", "__data_generation", "(", "list_IDs_temp", ")", "\n", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.data_generator.DataGenerator.on_epoch_end": [[37, 42], ["numpy.arange", "len", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "'Updates indexes after each epoch'", "\n", "self", ".", "indexes", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "list_IDs", ")", ")", "\n", "if", "self", ".", "shuffle", "==", "True", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.data_generator.DataGenerator.__data_generation": [[43, 58], ["numpy.empty", "numpy.empty", "enumerate", "numpy.load", "keras.utils.to_categorical"], "methods", ["None"], ["", "", "def", "__data_generation", "(", "self", ",", "list_IDs_temp", ")", ":", "\n", "        ", "'Generates data containing batch_size samples'", "# X : (n_samples, *dim, n_channels)", "\n", "# Initialization", "\n", "X", "=", "np", ".", "empty", "(", "(", "self", ".", "batch_size", ",", "*", "self", ".", "dim", ",", "self", ".", "n_channels", ")", ")", "\n", "y", "=", "np", ".", "empty", "(", "(", "self", ".", "batch_size", ")", ",", "dtype", "=", "int", ")", "\n", "\n", "# Generate data", "\n", "for", "i", ",", "ID", "in", "enumerate", "(", "list_IDs_temp", ")", ":", "\n", "# Store sample", "\n", "            ", "X", "[", "i", ",", "]", "=", "np", ".", "load", "(", "'features/X_train_elmo_features_'", "+", "ID", "+", "'.npy'", ")", "\n", "\n", "# Store class", "\n", "y", "[", "i", "]", "=", "self", ".", "labels", "[", "ID", "]", "\n", "\n", "", "return", "X", ",", "keras", ".", "utils", ".", "to_categorical", "(", "y", ",", "num_classes", "=", "self", ".", "n_classes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_emb_server.index": [[9, 19], ["app.route", "value.split.split", "elmo_features.get_elmo_embs", "src.utils_float_string.float_to_string", "flask.jsonify"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_features.get_elmo_embs", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils_float_string.float_to_string"], ["@", "app", ".", "route", "(", "\"/elmo_embed_words\"", ",", "methods", "=", "[", "'GET'", ",", "'POST'", "]", ")", "\n", "def", "index", "(", ")", ":", "\n", "    ", "value", "=", "request", ".", "json", "[", "'text'", "]", "\n", "# print(value)", "\n", "value", "=", "value", ".", "split", "(", "'\\r\\n'", ")", "\n", "# print(value)", "\n", "res", "=", "get_elmo_embs", "(", "value", ",", "mean", "=", "False", ")", "\n", "\n", "vectors", "=", "float_to_string", "(", "res", ")", "\n", "return", "jsonify", "(", "{", "'result'", ":", "vectors", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_utils.plot_eda_usage": [[8, 39], ["print", "print", "matplotlib.savefig", "matplotlib.close", "len", "len", "matplotlib.pie", "range", "matplotlib.Circle", "matplotlib.gcf", "plt.gcf.gca().add_artist", "matplotlib.text", "range", "matplotlib.show", "len", "[].set_alpha", "matplotlib.pie", "len", "matplotlib.bar", "plt.gcf.gca", "title.split", "len"], "function", ["None"], ["def", "plot_eda_usage", "(", "labels", ",", "label_values", ",", "title", ",", "colors_emo", ",", "\n", "sentiments", ",", "sentiments_values", ",", "colors_sent", ",", "\n", "test_show_plot", "=", "False", ",", "data_name", "=", "'meld'", ",", "plot_pie", "=", "True", ")", ":", "\n", "    ", "print", "(", "len", "(", "labels", ")", ",", "labels", ")", "\n", "data", "=", "label_values", "[", "0", ":", "len", "(", "labels", ")", "-", "1", "]", "+", "[", "label_values", "[", "-", "1", "]", "]", "\n", "print", "(", "len", "(", "data", ")", ",", "data", ")", "\n", "\n", "# Create a pieplot", "\n", "if", "plot_pie", ":", "\n", "        ", "n_emo", "=", "plt", ".", "pie", "(", "data", ",", "colors", "=", "colors_emo", ",", "counterclock", "=", "False", ",", "startangle", "=", "180", ",", "radius", "=", "1.2", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "n_emo", "[", "0", "]", ")", ")", ":", "\n", "            ", "n_emo", "[", "0", "]", "[", "i", "]", ".", "set_alpha", "(", "0.8", ")", "\n", "\n", "", "if", "data_name", "==", "'meld'", ":", "\n", "            ", "data_sent", "=", "sentiments_values", "[", "0", ":", "3", "]", "+", "[", "sentiments_values", "[", "-", "1", "]", "]", "\n", "plt", ".", "pie", "(", "data_sent", ",", "colors", "=", "colors_sent", ",", "counterclock", "=", "False", ",", "startangle", "=", "180", ",", "radius", "=", "0.8", ")", "\n", "# add a circle at the center", "\n", "", "my_circle", "=", "plt", ".", "Circle", "(", "(", "0", ",", "0", ")", ",", "0.5", ",", "color", "=", "'white'", ")", "\n", "p", "=", "plt", ".", "gcf", "(", ")", "\n", "p", ".", "gca", "(", ")", ".", "add_artist", "(", "my_circle", ")", "\n", "# plt.title(title, y=1)", "\n", "plt", ".", "text", "(", "0", ",", "-", "0.15", ",", "title", ",", "fontdict", "=", "{", "'size'", ":", "15.0", ",", "'horizontalalignment'", ":", "'center'", "}", ")", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "            ", "plt", ".", "bar", "(", "labels", "[", "i", "]", "+", "labels", "[", "i", "+", "1", "]", ",", "data", "[", "i", "]", ")", "# , colors=colors_emo)", "\n", "\n", "", "", "if", "test_show_plot", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "return", "\n", "", "plt", ".", "savefig", "(", "'figures/'", "+", "data_name", "+", "'/fig_'", "+", "title", ".", "split", "(", "'\\n'", ")", "[", "0", "]", ",", "bbox_inches", "=", "'tight'", ",", "transparent", "=", "True", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_utils.plot_normal_bars": [[41, 56], ["matplotlib.rcParams.update", "matplotlib.bar", "matplotlib.title", "matplotlib.xticks", "matplotlib.savefig", "matplotlib.close", "matplotlib.show", "title.split", "title.split", "title.split"], "function", ["None"], ["", "def", "plot_normal_bars", "(", "labels", ",", "label_values", ",", "title", ",", "test_show_plot", "=", "False", ")", ":", "\n", "    ", "plt", ".", "rcParams", ".", "update", "(", "{", "'font.size'", ":", "16", "}", ")", "\n", "plt", ".", "bar", "(", "labels", ",", "label_values", ")", "\n", "plt", ".", "title", "(", "title", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "+", "' - '", "+", "title", ".", "split", "(", "'\\n'", ")", "[", "1", "]", ")", "\n", "plt", ".", "xticks", "(", "rotation", "=", "15", ")", "\n", "# plt.yaxis.set_major_locator(MaxNLocator(integer=True))", "\n", "# plt.ylim(.5, 5.5)", "\n", "# plt.xlim(.5, 5.5)", "\n", "# plt.xlabel('Emotions')", "\n", "# plt.ylabel('Number of Utterances')", "\n", "if", "test_show_plot", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "return", "\n", "", "plt", ".", "savefig", "(", "'figures/meld/fig_'", "+", "title", ".", "split", "(", "'\\n'", ")", "[", "0", "]", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_utils.plot_bars_plot": [[58, 117], ["print", "matplotlib.close", "numpy.array().transpose", "range", "np.array().transpose.sum", "stack_emo_names.keys", "numpy.array().transpose", "matplotlib.figure", "plt.figure.add_subplot", "StackedBarGrapher", "StackedBarGrapher.stackedBarPlot", "numpy.array().transpose", "range", "np.array().transpose.sum", "matplotlib.figure", "plt.figure.add_subplot", "StackedBarGrapher", "StackedBarGrapher.stackedBarPlot", "matplotlib.show", "matplotlib.savefig", "len", "stack_emo_bars.append", "len", "stack_emo_lists.append", "selected_bars_normalized.append", "selected_bars.append", "plot_utils.plotting_sankeys", "matplotlib.savefig", "matplotlib.savefig", "tags.index", "numpy.array", "numpy.array", "numpy.array", "round", "len", "np.array().transpose.transpose", "len", "zip", "tags.index", "tags.index"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_bars.StackedBarGrapher.stackedBarPlot", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_bars.StackedBarGrapher.stackedBarPlot", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_utils.plotting_sankeys", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_emb_server.index", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_emb_server.index", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_emb_server.index"], ["", "def", "plot_bars_plot", "(", "stack_emotions_values", ",", "emotions", ",", "colors_emo", ",", "tags", ",", "\n", "test_show_plot", "=", "False", ",", "data", "=", "'meld'", ",", "type_of", "=", "'emotion'", ",", "\n", "save_eps", "=", "False", ",", "save_svg", "=", "False", ",", "plot_selected_das", "=", "True", ",", "plot_sankeys", "=", "False", ")", ":", "\n", "    ", "from", "src", ".", "plot_bars", "import", "StackedBarGrapher", "\n", "gap", ",", "width", "=", "8.0", ",", "10.0", "\n", "if", "'fo_o_fw_\"_by_bc'", "in", "tags", ":", "\n", "        ", "tags", "[", "tags", ".", "index", "(", "'fo_o_fw_\"_by_bc'", ")", "]", "=", "'fo'", "\n", "", "if", "not", "plot_selected_das", ":", "\n", "        ", "stack_emo_names", "=", "{", "}", "\n", "das_stacked", "=", "np", ".", "array", "(", "stack_emotions_values", ")", ".", "transpose", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "emotions", ")", ")", ":", "\n", "            ", "stack_emo_names", "[", "emotions", "[", "i", "]", "]", "=", "das_stacked", "[", "i", "]", "\n", "", "totals", "=", "das_stacked", ".", "sum", "(", "axis", "=", "0", ")", "\n", "stack_emo_bars", "=", "[", "]", "\n", "for", "key", "in", "stack_emo_names", ".", "keys", "(", ")", ":", "\n", "            ", "stack_emo_bars", ".", "append", "(", "[", "round", "(", "i", "/", "j", "*", "100", ",", "3", ")", "for", "i", ",", "j", "in", "zip", "(", "stack_emo_names", "[", "key", "]", ",", "totals", ")", "]", ")", "\n", "", "bars", "=", "np", ".", "array", "(", "stack_emo_bars", ")", ".", "transpose", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "SBG", "=", "StackedBarGrapher", "(", ")", "\n", "SBG", ".", "stackedBarPlot", "(", "ax", ",", "bars", ",", "colors_emo", ",", "xLabels", "=", "tags", ",", "\n", "gap", "=", "gap", ",", "widths", "=", "[", "width", "]", "*", "len", "(", "tags", ")", ")", "\n", "", "else", ":", "\n", "        ", "stack_emo_lists", "=", "[", "]", "\n", "das_stacked", "=", "np", ".", "array", "(", "stack_emotions_values", ")", ".", "transpose", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "emotions", ")", ")", ":", "\n", "            ", "stack_emo_lists", ".", "append", "(", "das_stacked", "[", "i", "]", ")", "\n", "", "totals", "=", "das_stacked", ".", "sum", "(", "axis", "=", "0", ")", "\n", "bars", "=", "(", "(", "stack_emo_lists", "/", "totals", ")", "*", "100", ")", ".", "transpose", "(", ")", "\n", "selected_bars_normalized", ",", "selected_bars", "=", "[", "]", ",", "[", "]", "\n", "for", "tag", "in", "tags_to_plot", ":", "\n", "            ", "selected_bars_normalized", ".", "append", "(", "bars", "[", "tags", ".", "index", "(", "tag", ")", "]", ")", "\n", "selected_bars", ".", "append", "(", "das_stacked", ".", "transpose", "(", ")", "[", "tags", ".", "index", "(", "tag", ")", "]", ")", "\n", "\n", "", "if", "plot_sankeys", ":", "\n", "# This will open in browser", "\n", "            ", "plotting_sankeys", "(", "colors_emo", ",", "emotions", ",", "selected_bars", ",", "selected_bars_normalized", ",", "data", ")", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "SBG", "=", "StackedBarGrapher", "(", ")", "\n", "SBG", ".", "stackedBarPlot", "(", "ax", ",", "selected_bars_normalized", ",", "colors_emo", ",", "xLabels", "=", "tags_to_plot", ",", "\n", "gap", "=", "gap", ",", "widths", "=", "[", "width", "]", "*", "len", "(", "tags_to_plot", ")", ")", "\n", "\n", "", "if", "test_show_plot", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "return", "\n", "", "dpi", "=", "500", "\n", "if", "save_eps", ":", "\n", "        ", "file_name", "=", "'figures/'", "+", "data", "+", "'_bars_'", "+", "type_of", "+", "'.eps'", "\n", "plt", ".", "savefig", "(", "file_name", ",", "format", "=", "'eps'", ",", "bbox_inches", "=", "'tight'", ",", "transparent", "=", "True", ",", "dpi", "=", "dpi", ")", "\n", "", "elif", "save_svg", ":", "\n", "        ", "file_name", "=", "'figures/'", "+", "data", "+", "'_bars_'", "+", "type_of", "+", "'.svg'", "\n", "plt", ".", "savefig", "(", "file_name", ",", "format", "=", "'svg'", ",", "bbox_inches", "=", "'tight'", ",", "transparent", "=", "True", ",", "dpi", "=", "dpi", ")", "\n", "", "else", ":", "\n", "        ", "file_name", "=", "'figures/'", "+", "data", "+", "'_bars_'", "+", "type_of", "+", "'.png'", "\n", "plt", ".", "savefig", "(", "file_name", ",", "bbox_inches", "=", "'tight'", ",", "transparent", "=", "True", ",", "dpi", "=", "dpi", ")", "\n", "", "print", "(", "'Figure saved as: {}'", ".", "format", "(", "file_name", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_utils.plotting_sankeys": [[119, 132], ["range", "plot_utils.plotter_sankey", "plot_utils.plotter_sankey", "len", "range", "len", "len", "source.append", "target.append", "value.append", "value_norms.append", "color_links.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_utils.plotter_sankey", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_utils.plotter_sankey"], ["", "def", "plotting_sankeys", "(", "colors_emo", ",", "emotions", ",", "selected_bars", ",", "selected_bars_normalized", ",", "data", ")", ":", "\n", "    ", "label", ",", "color", ",", "source", ",", "target", ",", "value", ",", "value_norms", ",", "color_links", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "label", "=", "emotions", "+", "tags_to_plot", "\n", "color", "=", "colors_emo", "[", "0", ":", "len", "(", "emotions", ")", "]", "+", "[", "colors_emo", "[", "-", "1", "]", "]", "*", "len", "(", "tags_to_plot", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "tags_to_plot", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "emotions", ")", ")", ":", "\n", "            ", "source", ".", "append", "(", "j", ")", "\n", "target", ".", "append", "(", "i", "+", "len", "(", "emotions", ")", ")", "\n", "value", ".", "append", "(", "selected_bars", "[", "i", "]", "[", "j", "]", ")", "\n", "value_norms", ".", "append", "(", "selected_bars_normalized", "[", "i", "]", "[", "j", "]", ")", "\n", "color_links", ".", "append", "(", "colors_emo", "[", "j", "]", ")", "\n", "", "", "plotter_sankey", "(", "label", ",", "color", ",", "source", ",", "target", ",", "value", ",", "color_links", ",", "data", "+", "\" - With real values\"", ")", "\n", "plotter_sankey", "(", "label", ",", "color", ",", "source", ",", "target", ",", "value_norms", ",", "color_links", ",", "data", "+", "\" - With normalized values\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_utils.plotter_sankey": [[134, 141], ["go.Figure", "go.Figure.update_layout", "go.Figure.show", "go.Sankey", "dict", "dict", "dict"], "function", ["None"], ["", "def", "plotter_sankey", "(", "label", ",", "color", ",", "source", ",", "target", ",", "value", ",", "color_links", ",", "title", ")", ":", "\n", "    ", "import", "plotly", ".", "graph_objects", "as", "go", "\n", "fig", "=", "go", ".", "Figure", "(", "data", "=", "[", "go", ".", "Sankey", "(", "\n", "node", "=", "dict", "(", "pad", "=", "15", ",", "thickness", "=", "20", ",", "line", "=", "dict", "(", "color", "=", "\"green\"", ",", "width", "=", "0.", ")", ",", "label", "=", "label", ",", "color", "=", "color", ")", ",", "\n", "link", "=", "dict", "(", "source", "=", "source", ",", "target", "=", "target", ",", "value", "=", "value", ",", "color", "=", "color_links", ")", ")", "]", ")", "\n", "fig", ".", "update_layout", "(", "title_text", "=", "title", ",", "font_size", "=", "10", ")", "\n", "fig", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.eda_tl_utils.merge_emotion_classes": [[1, 20], ["range", "len", "utt_Emotion_merger_ids.append", "emotion_classes.index"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_emb_server.index"], ["def", "merge_emotion_classes", "(", "utt_Emotion", ")", ":", "\n", "    ", "emotion_classes", "=", "[", "'hap'", ",", "'neu'", ",", "'sad'", ",", "'fru'", ",", "'ang'", ",", "'xxx'", "]", "\n", "utt_Emotion_merger_ids", "=", "[", "]", "\n", "utt_Emotion_merged", "=", "utt_Emotion", "\n", "for", "i", "in", "range", "(", "len", "(", "utt_Emotion", ")", ")", ":", "\n", "        ", "utt_Emotion_merged", "[", "i", "]", "=", "utt_Emotion", "[", "i", "]", "\n", "if", "utt_Emotion_merged", "[", "i", "]", "==", "\"fea\"", ":", "\n", "            ", "utt_Emotion_merged", "[", "i", "]", "=", "\"sad\"", "\n", "", "if", "utt_Emotion_merged", "[", "i", "]", "==", "\"sur\"", ":", "\n", "            ", "utt_Emotion_merged", "[", "i", "]", "=", "\"hap\"", "\n", "", "if", "utt_Emotion_merged", "[", "i", "]", "==", "\"exc\"", ":", "\n", "            ", "utt_Emotion_merged", "[", "i", "]", "=", "\"hap\"", "\n", "", "if", "utt_Emotion_merged", "[", "i", "]", "==", "\"dis\"", ":", "\n", "            ", "utt_Emotion_merged", "[", "i", "]", "=", "\"sad\"", "\n", "", "if", "utt_Emotion_merged", "[", "i", "]", "==", "\"oth\"", ":", "\n", "            ", "utt_Emotion_merged", "[", "i", "]", "=", "\"xxx\"", "\n", "", "utt_Emotion_merger_ids", ".", "append", "(", "emotion_classes", ".", "index", "(", "utt_Emotion_merged", "[", "i", "]", ")", ")", "\n", "\n", "", "return", "emotion_classes", ",", "utt_Emotion_merged", ",", "utt_Emotion_merger_ids", "\n", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_chords.plot_sankey": [[9, 16], ["go.Figure", "go.Figure.update_layout", "go.Figure.show", "go.Sankey", "dict", "dict", "dict"], "function", ["None"], ["def", "plot_sankey", "(", "label", ",", "color", ",", "source", ",", "target", ",", "value", ",", "color_links", ")", ":", "\n", "    ", "import", "plotly", ".", "graph_objects", "as", "go", "\n", "fig", "=", "go", ".", "Figure", "(", "data", "=", "[", "go", ".", "Sankey", "(", "\n", "node", "=", "dict", "(", "pad", "=", "25", ",", "thickness", "=", "20", ",", "line", "=", "dict", "(", "color", "=", "\"green\"", ",", "width", "=", "0.", ")", ",", "label", "=", "label", ",", "color", "=", "color", ")", ",", "\n", "link", "=", "dict", "(", "source", "=", "source", ",", "target", "=", "target", ",", "value", "=", "value", ",", "color", "=", "color_links", ")", ")", "]", ")", "\n", "fig", ".", "update_layout", "(", "title_text", "=", "\"Basic Sankey Diagram\"", ",", "font_size", "=", "10", ")", "\n", "fig", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.mocap_data_reader.get_mocap_data": [[6, 71], ["get_directory_structure", "mocap_data_reader.get_ids_from_keys", "pandas.read_csv", "df[].tolist", "df[].tolist", "df[].tolist", "mocap_data_reader.get_ids_from_keys", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "df[].tolist", "df[].tolist", "df[].tolist", "get_transcriptions", "get_emotions", "list", "file_paths.append", "get_transcriptions.keys", "df[].tolist.append", "emo_evo.append", "v.append", "a.append", "d.append", "df[].tolist.append", "df[].tolist.append", "csv.DictWriter.writerow", "str"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.mocap_utils.get_directory_structure", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.mocap_data_reader.get_ids_from_keys", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.mocap_data_reader.get_ids_from_keys", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.mocap_utils.get_transcriptions", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.mocap_utils.get_emotions"], ["def", "get_mocap_data", "(", "write", "=", "False", ",", "read_from_csv", "=", "False", ",", "csv_file_name", "=", "\"IEMOCAP/mocap_dataset.csv\"", ")", ":", "\n", "\n", "    ", "\"\"\"\n    get_directory_structure(\"IEMOCAP\") - Sorts differently on Windows and Ubuntu,\n    hence better to save csv after we read all data, and use that one latter\n    :param write: write the csv file\n    :param csv_file_name: provide correct path\n    :param read_from_csv: read from the written file\n    :return: lists of utterances, emo_dialogues, emo_evo, v, a, d, utt_keys\n    \"\"\"", "\n", "\n", "utterances", "=", "[", "]", "\n", "emo_dialogues", "=", "[", "]", "\n", "emo_evo", "=", "[", "]", "\n", "v", ",", "a", ",", "d", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "utt_keys", "=", "[", "]", "\n", "file_paths", "=", "[", "]", "\n", "transcriptions", "=", "{", "}", "\n", "emotions", "=", "{", "}", "\n", "fieldnames", "=", "[", "'utt_keys'", ",", "'utterance'", ",", "'emotion'", ",", "'v'", ",", "'a'", ",", "'d'", ",", "'emo_evo'", ",", "'start'", ",", "'end'", "]", "\n", "\n", "if", "not", "read_from_csv", ":", "\n", "        ", "if", "write", ":", "\n", "            ", "store_mocap_in_csv", "=", "open", "(", "csv_file_name", ",", "mode", "=", "'w'", ",", "newline", "=", "''", ")", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "store_mocap_in_csv", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "\n", "", "path_tree", "=", "get_directory_structure", "(", "\"IEMOCAP\"", ")", "\n", "sessions", "=", "[", "'S1'", ",", "'S2'", ",", "'S3'", ",", "'S4'", ",", "'S5'", "]", "\n", "for", "session", "in", "sessions", ":", "\n", "            ", "for", "text", "in", "path_tree", "[", "'IEMOCAP'", "]", "[", "session", "]", "[", "\"transcriptions\"", "]", ":", "\n", "                ", "file_path_utt", "=", "\"IEMOCAP/\"", "+", "session", "+", "\"/transcriptions/\"", "+", "text", "\n", "file_path_emo", "=", "\"IEMOCAP/\"", "+", "session", "+", "\"/EmoEvaluation/\"", "+", "text", "\n", "utts", "=", "get_transcriptions", "(", "file_path_utt", ")", "\n", "emots", "=", "get_emotions", "(", "file_path_emo", ")", "\n", "transcriptions", "[", "session", "+", "'_'", "+", "text", "]", "=", "utts", "\n", "emotions", "[", "session", "+", "'_'", "+", "text", "]", "=", "emots", "\n", "for", "key", "in", "list", "(", "utts", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "emo_dialogues", ".", "append", "(", "emots", "[", "key", "]", "[", "'emotion'", "]", ")", "\n", "emo_evo", ".", "append", "(", "emots", "[", "key", "]", "[", "'emo_evo'", "]", ")", "\n", "v", ".", "append", "(", "emots", "[", "key", "]", "[", "'v'", "]", ")", "\n", "a", ".", "append", "(", "emots", "[", "key", "]", "[", "'a'", "]", ")", "\n", "d", ".", "append", "(", "emots", "[", "key", "]", "[", "'d'", "]", ")", "\n", "utterances", ".", "append", "(", "utts", "[", "key", "]", ")", "\n", "utt_keys", ".", "append", "(", "key", ")", "\n", "if", "write", ":", "\n", "                            ", "writer", ".", "writerow", "(", "\n", "{", "'utt_keys'", ":", "key", ",", "'utterance'", ":", "str", "(", "utts", "[", "key", "]", ")", ",", "'emotion'", ":", "emots", "[", "key", "]", "[", "'emotion'", "]", ",", "\n", "'v'", ":", "emots", "[", "key", "]", "[", "'v'", "]", ",", "'a'", ":", "emots", "[", "key", "]", "[", "'a'", "]", ",", "'d'", ":", "emots", "[", "key", "]", "[", "'d'", "]", ",", "\n", "'emo_evo'", ":", "emots", "[", "key", "]", "[", "'emo_evo'", "]", ",", "'start'", ":", "emots", "[", "key", "]", "[", "'start'", "]", ",", "'end'", ":", "emots", "[", "key", "]", "[", "'end'", "]", "}", ")", "\n", "\n", "", "", "except", "KeyError", ":", "\n", "                        ", "pass", "\n", "", "", "file_paths", ".", "append", "(", "file_path_utt", ")", "\n", "", "", "utt_id", ",", "speaker_id", "=", "get_ids_from_keys", "(", "utt_keys", ")", "\n", "", "else", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "csv_file_name", ")", "\n", "utterances", "=", "df", "[", "'utterance'", "]", ".", "tolist", "(", ")", "\n", "emo_dialogues", "=", "df", "[", "'emotion'", "]", ".", "tolist", "(", ")", "\n", "v", ",", "a", ",", "d", "=", "df", "[", "'v'", "]", ".", "tolist", "(", ")", ",", "df", "[", "'a'", "]", ".", "tolist", "(", ")", ",", "df", "[", "'d'", "]", ".", "tolist", "(", ")", "\n", "utt_keys", "=", "df", "[", "'utt_keys'", "]", ".", "tolist", "(", ")", "\n", "utt_id", ",", "speaker_id", "=", "get_ids_from_keys", "(", "utt_keys", ")", "\n", "\n", "", "return", "utterances", ",", "emo_dialogues", ",", "emo_evo", ",", "v", ",", "a", ",", "d", ",", "speaker_id", ",", "utt_id", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.mocap_data_reader.get_ids_from_keys": [[73, 85], ["list", "list.reverse", "yy.reverse", "speaker_id.append", "utt_id.append", "item.split"], "function", ["None"], ["", "def", "get_ids_from_keys", "(", "utt_keys", ")", ":", "\n", "    ", "utt_id", ",", "speaker_id", "=", "[", "]", ",", "[", "]", "\n", "for", "item", "in", "utt_keys", ":", "\n", "        ", "temp_id", "=", "item", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "xx", "=", "list", "(", "item", ")", "\n", "xx", ".", "reverse", "(", ")", "\n", "yy", "=", "xx", "[", "4", ":", "]", "\n", "yy", ".", "reverse", "(", ")", "\n", "temp_ses_id", "=", "''", ".", "join", "(", "yy", "+", "[", "temp_id", "[", "0", "]", "]", ")", "\n", "speaker_id", ".", "append", "(", "temp_id", "[", "1", ":", "]", ")", "\n", "utt_id", ".", "append", "(", "temp_ses_id", ")", "\n", "", "return", "utt_id", ",", "speaker_id", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.final_annotator_utils.convert_predictions_to_indices": [[6, 25], ["final_annotator_utils.convert_predictions_to_indices.return_indices"], "function", ["None"], ["def", "convert_predictions_to_indices", "(", "eda1", ",", "eda2", ",", "eda3", ",", "eda4", ",", "eda5", ",", "tags", ")", ":", "\n", "    ", "def", "return_indices", "(", "con_out_strs", ")", ":", "\n", "        ", "con_out_nums", "=", "[", "]", "\n", "for", "item", "in", "con_out_strs", ":", "\n", "            ", "if", "item", "==", "'fo_o'", ":", "\n", "                ", "item", "=", "'fo_o_fw_\"_by_bc'", "\n", "", "con_out_nums", ".", "append", "(", "list", "(", "tags", ")", ".", "index", "(", "item", ")", ")", "\n", "", "return", "np", ".", "array", "(", "con_out_nums", ")", "\n", "\n", "", "eda1", "=", "return_indices", "(", "eda1", ")", "\n", "eda3", "=", "return_indices", "(", "eda3", ")", "\n", "eda2", "=", "return_indices", "(", "eda2", ")", "\n", "eda4", "=", "return_indices", "(", "eda4", ")", "\n", "eda5", "=", "return_indices", "(", "eda5", ")", "\n", "nominal", "=", "False", "\n", "if", "nominal", ":", "\n", "        ", "return", "np", ".", "reshape", "(", "np", ".", "concatenate", "(", "(", "eda1", ",", "eda3", ",", "eda2", ",", "eda4", ",", "eda5", ")", ")", ",", "(", "5", ",", "len", "(", "eda1", ")", ")", ")", ".", "transpose", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "eda1", ",", "eda3", ",", "eda2", ",", "eda4", ",", "eda5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.final_annotator_utils.ensemble_eda_annotation": [[27, 146], ["range", "print", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "len", "utt_info_rows.append", "round", "round", "round", "round", "utt_speaker[].encode", "utterance.encode", "str", "str", "str", "str", "str", "csv.DictWriter.writerow", "len", "len", "len", "len", "numpy.array", "numpy.flip", "numpy.argsort"], "function", ["None"], ["", "", "def", "ensemble_eda_annotation", "(", "eda1", ",", "eda2", ",", "eda3", ",", "eda4", ",", "eda5", ",", "\n", "eda1_conf", ",", "eda2_conf", ",", "eda3_conf", ",", "eda4_conf", ",", "eda5_conf", ",", "\n", "utt_speaker", ",", "utterances", ",", "utt_id", ",", "utt_emotion", ",", "\n", "sentiment_labels", "=", "[", "]", ",", "meld_data", "=", "True", ",", "\n", "file_name", "=", "'meld_emotion'", ",", "write_final_csv", "=", "True", ",", "write_utterances", "=", "True", ",", "\n", "return_assessment", "=", "False", ")", ":", "\n", "    ", "if", "write_final_csv", ":", "\n", "        ", "fieldnames", "=", "[", "'speaker'", ",", "'utt_id'", ",", "'utterance'", ",", "'emotion'", ",", "'sentiment'", ",", "\n", "'eda1'", ",", "'eda2'", ",", "'eda3'", ",", "'eda4'", ",", "'eda5'", ",", "'EDA'", ",", "\n", "'all_match'", ",", "'con_match'", ",", "'match'", "]", "\n", "\n", "store_meld_in_csv", "=", "open", "(", "'annotated_data/others/'", "+", "file_name", "+", "'_dataset.csv'", ",", "mode", "=", "'w'", ",", "newline", "=", "''", ")", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "store_meld_in_csv", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "\n", "", "none_matches", "=", "0", "\n", "total_match", "=", "0", "\n", "con_matches", "=", "0", "\n", "based_on_confs", "=", "0", "\n", "utt_info_rows", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "eda1", ")", ")", ":", "\n", "        ", "match", "=", "\"NotMatch\"", "\n", "con_match", "=", "\"NotConMatch\"", "\n", "all_match", "=", "\"AllNotMatch\"", "\n", "matched_element", "=", "'xx'", "\n", "# All labels", "\n", "if", "eda5", "[", "i", "]", "==", "eda4", "[", "i", "]", "==", "eda3", "[", "i", "]", "==", "eda2", "[", "i", "]", "==", "eda1", "[", "i", "]", ":", "\n", "            ", "all_match", "=", "\"AllMatch\"", "\n", "matched_element", "=", "eda5", "[", "i", "]", "\n", "total_match", "+=", "1", "\n", "# Context labels", "\n", "", "elif", "eda5", "[", "i", "]", "==", "eda4", "[", "i", "]", "==", "eda3", "[", "i", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch\"", "\n", "matched_element", "=", "eda5", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "", "elif", "eda5", "[", "i", "]", "==", "eda3", "[", "i", "]", "and", "eda5", "[", "i", "]", "in", "[", "eda1", "[", "i", "]", ",", "eda2", "[", "i", "]", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch_eda5_eda3_strong\"", "\n", "matched_element", "=", "eda5", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "", "elif", "eda5", "[", "i", "]", "==", "eda4", "[", "i", "]", "and", "eda5", "[", "i", "]", "in", "[", "eda1", "[", "i", "]", ",", "eda2", "[", "i", "]", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch_eda5_eda4_strong\"", "\n", "matched_element", "=", "eda4", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "", "elif", "eda4", "[", "i", "]", "==", "eda3", "[", "i", "]", "and", "eda4", "[", "i", "]", "in", "[", "eda1", "[", "i", "]", ",", "eda2", "[", "i", "]", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch_eda4_eda3_strong\"", "\n", "matched_element", "=", "eda4", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "", "elif", "eda5", "[", "i", "]", "==", "eda3", "[", "i", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch_eda5_eda3_con\"", "\n", "matched_element", "=", "eda5", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "", "elif", "eda5", "[", "i", "]", "==", "eda4", "[", "i", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch_eda5_eda4_con\"", "\n", "matched_element", "=", "eda4", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "", "elif", "eda4", "[", "i", "]", "==", "eda3", "[", "i", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch_eda4_eda3_con\"", "\n", "matched_element", "=", "eda4", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "", "elif", "eda1", "[", "i", "]", "==", "eda2", "[", "i", "]", "and", "eda1", "[", "i", "]", "in", "[", "eda5", "[", "i", "]", ",", "eda4", "[", "i", "]", ",", "eda3", "[", "i", "]", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch_eda1_eda2_1con\"", "\n", "matched_element", "=", "eda1", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "\n", "# None of above resulted any label, rank the confidence values", "\n", "", "else", ":", "\n", "            ", "temp_edas", "=", "[", "eda1", "[", "i", "]", ",", "eda2", "[", "i", "]", ",", "eda3", "[", "i", "]", ",", "eda4", "[", "i", "]", ",", "eda5", "[", "i", "]", "]", "\n", "temp_edas_conf", "=", "np", ".", "array", "(", "[", "eda1_conf", "[", "i", "]", ",", "eda2_conf", "[", "i", "]", ",", "eda3_conf", "[", "i", "]", ",", "eda4_conf", "[", "i", "]", ",", "eda5_conf", "[", "i", "]", "]", ")", "\n", "sorted_temp_edas_conf", "=", "np", ".", "flip", "(", "np", ".", "argsort", "(", "temp_edas_conf", ")", ")", "\n", "opt_eda1", "=", "temp_edas", "[", "sorted_temp_edas_conf", "[", "0", "]", "]", "\n", "opt_eda2", "=", "temp_edas", "[", "sorted_temp_edas_conf", "[", "1", "]", "]", "\n", "opt_eda3", "=", "temp_edas", "[", "sorted_temp_edas_conf", "[", "2", "]", "]", "\n", "opt_eda4", "=", "temp_edas", "[", "sorted_temp_edas_conf", "[", "3", "]", "]", "\n", "if", "opt_eda1", "==", "opt_eda2", "==", "opt_eda3", ":", "\n", "                ", "matched_element", "=", "opt_eda1", "# first order", "\n", "match", "=", "\"ConfMatch\"", "+", "'First123'", "\n", "based_on_confs", "+=", "1", "\n", "", "elif", "opt_eda1", "==", "opt_eda2", "==", "opt_eda4", ":", "\n", "                ", "matched_element", "=", "opt_eda1", "# second order", "\n", "match", "=", "\"ConfMatch\"", "+", "'Second124'", "\n", "based_on_confs", "+=", "1", "\n", "", "elif", "opt_eda1", "==", "opt_eda2", ":", "\n", "                ", "matched_element", "=", "opt_eda1", "# second order", "\n", "match", "=", "\"ConfMatch\"", "+", "'OnlyTwo12'", "\n", "based_on_confs", "+=", "1", "\n", "\n", "", "", "if", "meld_data", ":", "\n", "            ", "sentiment", "=", "sentiment_labels", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "sentiment", "=", "''", "\n", "\n", "# We would do this for IEMOCAP", "\n", "", "if", "write_utterances", ":", "\n", "            ", "utterance", "=", "utterances", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "utterance", "=", "''", "\n", "\n", "", "utt_info_row", "=", "{", "'speaker'", ":", "utt_speaker", "[", "i", "]", ".", "encode", "(", "\"utf-8\"", ")", ",", "'utt_id'", ":", "utt_id", "[", "i", "]", ",", "\n", "'utterance'", ":", "utterance", ".", "encode", "(", "\"utf-8\"", ")", ",", "\n", "'emotion'", ":", "utt_emotion", "[", "i", "]", ",", "'sentiment'", ":", "sentiment", ",", "\n", "\n", "'eda1'", ":", "str", "(", "eda1", "[", "i", "]", ")", ",", "'eda2'", ":", "str", "(", "eda2", "[", "i", "]", ")", ",", "'eda3'", ":", "str", "(", "eda3", "[", "i", "]", ")", ",", "\n", "'eda4'", ":", "str", "(", "eda4", "[", "i", "]", ")", ",", "'eda5'", ":", "str", "(", "eda5", "[", "i", "]", ")", ",", "'EDA'", ":", "matched_element", ",", "\n", "'all_match'", ":", "all_match", ",", "'con_match'", ":", "con_match", ",", "'match'", ":", "match", "}", "\n", "\n", "if", "write_final_csv", ":", "\n", "            ", "writer", ".", "writerow", "(", "utt_info_row", ")", "\n", "", "if", "matched_element", "==", "'xx'", ":", "\n", "            ", "none_matches", "+=", "1", "\n", "", "utt_info_rows", ".", "append", "(", "utt_info_row", ")", "\n", "\n", "", "assessment", "=", "\"Matches in all: {}%, in context: {}%, based on confidence rank: {}%, and none matched: {}%\"", ".", "format", "(", "\n", "round", "(", "(", "total_match", "/", "len", "(", "eda1", ")", ")", "*", "100", ",", "2", ")", ",", "round", "(", "(", "con_matches", "/", "len", "(", "eda1", ")", ")", "*", "100", ",", "2", ")", ",", "\n", "round", "(", "(", "based_on_confs", "/", "len", "(", "eda1", ")", ")", "*", "100", ",", "2", ")", ",", "round", "(", "(", "none_matches", "/", "len", "(", "eda1", ")", ")", "*", "100", ",", "2", ")", ")", "\n", "print", "(", "assessment", ")", "\n", "if", "return_assessment", ":", "\n", "        ", "return", "utt_info_rows", ",", "assessment", "\n", "", "else", ":", "\n", "        ", "return", "utt_info_rows", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.ensemble_annotator.convert_predictions_to_indices": [[6, 25], ["ensemble_annotator.convert_predictions_to_indices.return_indices"], "function", ["None"], ["def", "convert_predictions_to_indices", "(", "eda1", ",", "eda2", ",", "eda3", ",", "eda4", ",", "eda5", ",", "tags", ")", ":", "\n", "    ", "def", "return_indices", "(", "con_out_strs", ")", ":", "\n", "        ", "con_out_nums", "=", "[", "]", "\n", "for", "item", "in", "con_out_strs", ":", "\n", "            ", "if", "item", "==", "'fo_o'", ":", "\n", "                ", "item", "=", "'fo_o_fw_\"_by_bc'", "\n", "", "con_out_nums", ".", "append", "(", "list", "(", "tags", ")", ".", "index", "(", "item", ")", ")", "\n", "", "return", "np", ".", "array", "(", "con_out_nums", ")", "\n", "\n", "", "eda1", "=", "return_indices", "(", "eda1", ")", "\n", "eda3", "=", "return_indices", "(", "eda3", ")", "\n", "eda2", "=", "return_indices", "(", "eda2", ")", "\n", "eda4", "=", "return_indices", "(", "eda4", ")", "\n", "eda5", "=", "return_indices", "(", "eda5", ")", "\n", "nominal", "=", "False", "\n", "if", "nominal", ":", "\n", "        ", "return", "np", ".", "reshape", "(", "np", ".", "concatenate", "(", "(", "eda1", ",", "eda3", ",", "eda2", ",", "eda4", ",", "eda5", ")", ")", ",", "(", "5", ",", "len", "(", "eda1", ")", ")", ")", ".", "transpose", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "eda1", ",", "eda3", ",", "eda2", ",", "eda4", ",", "eda5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.ensemble_annotator.ensemble_eda_annotation": [[27, 147], ["range", "print", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "len", "utt_info_rows.append", "utt_speaker[].encode", "utterance.encode", "str", "str", "str", "str", "str", "csv.DictWriter.writerow", "round", "round", "round", "round", "len", "len", "len", "len", "numpy.array", "numpy.flip", "numpy.argsort"], "function", ["None"], ["", "", "def", "ensemble_eda_annotation", "(", "eda1", ",", "eda2", ",", "eda3", ",", "eda4", ",", "eda5", ",", "\n", "eda1_conf", ",", "eda2_conf", ",", "eda3_conf", ",", "eda4_conf", ",", "eda5_conf", ",", "\n", "utt_speaker", ",", "utterances", ",", "utt_id", ",", "utt_emotion", ",", "\n", "sentiment_labels", "=", "[", "]", ",", "meld_data", "=", "True", ",", "is_emotion", "=", "True", ",", "\n", "file_name", "=", "'meld_emotion'", ",", "write_final_csv", "=", "True", ",", "write_utterances", "=", "True", ")", ":", "\n", "    ", "if", "write_final_csv", ":", "\n", "        ", "fieldnames", "=", "[", "'speaker'", ",", "'utt_id'", ",", "'utterance'", ",", "'emotion'", ",", "'sentiment'", ",", "\n", "'eda1'", ",", "'eda2'", ",", "'eda3'", ",", "'eda4'", ",", "'eda5'", ",", "'EDA'", ",", "\n", "'all_match'", ",", "'con_match'", ",", "'match'", "]", "\n", "\n", "store_meld_in_csv", "=", "open", "(", "'Annotated_EDA_data/eda_'", "+", "file_name", "+", "'_dataset.csv'", ",", "mode", "=", "'w'", ",", "newline", "=", "''", ")", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "store_meld_in_csv", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "\n", "", "none_matches", "=", "0", "\n", "total_match", "=", "0", "\n", "con_matches", "=", "0", "\n", "based_on_confs", "=", "0", "\n", "utt_info_rows", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "eda1", ")", ")", ":", "\n", "        ", "match", "=", "\"NotMatch\"", "\n", "con_match", "=", "\"NotConMatch\"", "\n", "all_match", "=", "\"AllNotMatch\"", "\n", "matched_element", "=", "'xx'", "\n", "# All labels", "\n", "if", "eda5", "[", "i", "]", "==", "eda4", "[", "i", "]", "==", "eda3", "[", "i", "]", "==", "eda2", "[", "i", "]", "==", "eda1", "[", "i", "]", ":", "\n", "            ", "all_match", "=", "\"AllMatch\"", "\n", "matched_element", "=", "eda5", "[", "i", "]", "\n", "total_match", "+=", "1", "\n", "# Context labels", "\n", "", "elif", "eda5", "[", "i", "]", "==", "eda4", "[", "i", "]", "==", "eda3", "[", "i", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch\"", "\n", "matched_element", "=", "eda5", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "", "elif", "eda5", "[", "i", "]", "==", "eda3", "[", "i", "]", "and", "eda5", "[", "i", "]", "in", "[", "eda1", "[", "i", "]", ",", "eda2", "[", "i", "]", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch_eda5_eda3_strong\"", "\n", "matched_element", "=", "eda5", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "", "elif", "eda5", "[", "i", "]", "==", "eda4", "[", "i", "]", "and", "eda5", "[", "i", "]", "in", "[", "eda1", "[", "i", "]", ",", "eda2", "[", "i", "]", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch_eda5_eda4_strong\"", "\n", "matched_element", "=", "eda4", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "", "elif", "eda4", "[", "i", "]", "==", "eda3", "[", "i", "]", "and", "eda4", "[", "i", "]", "in", "[", "eda1", "[", "i", "]", ",", "eda2", "[", "i", "]", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch_eda4_eda3_strong\"", "\n", "matched_element", "=", "eda4", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "", "elif", "eda5", "[", "i", "]", "==", "eda3", "[", "i", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch_eda5_eda3_con\"", "\n", "matched_element", "=", "eda5", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "", "elif", "eda5", "[", "i", "]", "==", "eda4", "[", "i", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch_eda5_eda4_con\"", "\n", "matched_element", "=", "eda4", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "", "elif", "eda4", "[", "i", "]", "==", "eda3", "[", "i", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch_eda4_eda3_con\"", "\n", "matched_element", "=", "eda4", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "", "elif", "eda1", "[", "i", "]", "==", "eda2", "[", "i", "]", "and", "eda1", "[", "i", "]", "in", "[", "eda5", "[", "i", "]", ",", "eda4", "[", "i", "]", ",", "eda3", "[", "i", "]", "]", ":", "\n", "            ", "con_match", "=", "\"ConMatch_eda1_eda2_1con\"", "\n", "matched_element", "=", "eda1", "[", "i", "]", "\n", "con_matches", "+=", "1", "\n", "\n", "# None of above resulted any label, rank the confidence values", "\n", "", "else", ":", "\n", "            ", "temp_edas", "=", "[", "eda1", "[", "i", "]", ",", "eda2", "[", "i", "]", ",", "eda3", "[", "i", "]", ",", "eda4", "[", "i", "]", ",", "eda5", "[", "i", "]", "]", "\n", "temp_edas_conf", "=", "np", ".", "array", "(", "[", "eda1_conf", "[", "i", "]", ",", "eda2_conf", "[", "i", "]", ",", "eda3_conf", "[", "i", "]", ",", "eda4_conf", "[", "i", "]", ",", "eda5_conf", "[", "i", "]", "]", ")", "\n", "sorted_temp_edas_conf", "=", "np", ".", "flip", "(", "np", ".", "argsort", "(", "temp_edas_conf", ")", ")", "\n", "opt_eda1", "=", "temp_edas", "[", "sorted_temp_edas_conf", "[", "0", "]", "]", "\n", "opt_eda2", "=", "temp_edas", "[", "sorted_temp_edas_conf", "[", "1", "]", "]", "\n", "opt_eda3", "=", "temp_edas", "[", "sorted_temp_edas_conf", "[", "2", "]", "]", "\n", "opt_eda4", "=", "temp_edas", "[", "sorted_temp_edas_conf", "[", "3", "]", "]", "\n", "if", "opt_eda1", "==", "opt_eda2", "==", "opt_eda3", ":", "\n", "                ", "matched_element", "=", "opt_eda1", "# first order", "\n", "match", "=", "\"ConfMatch\"", "+", "'First123'", "\n", "based_on_confs", "+=", "1", "\n", "", "elif", "opt_eda1", "==", "opt_eda2", "==", "opt_eda4", ":", "\n", "                ", "matched_element", "=", "opt_eda1", "# second order", "\n", "match", "=", "\"ConfMatch\"", "+", "'Second124'", "\n", "based_on_confs", "+=", "1", "\n", "", "elif", "opt_eda1", "==", "opt_eda2", ":", "\n", "                ", "matched_element", "=", "opt_eda1", "# second order", "\n", "match", "=", "\"ConfMatch\"", "+", "'OnlyTwo12'", "\n", "based_on_confs", "+=", "1", "\n", "\n", "", "", "if", "meld_data", ":", "\n", "            ", "sentiment", "=", "sentiment_labels", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "sentiment", "=", "''", "\n", "\n", "", "if", "is_emotion", ":", "\n", "            ", "emotion", "=", "utt_emotion", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "emotion", "=", "''", "\n", "\n", "# We would do this for IEMOCAP", "\n", "", "if", "write_utterances", ":", "\n", "            ", "utterance", "=", "utterances", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "utterance", "=", "''", "\n", "\n", "", "utt_info_row", "=", "{", "'speaker'", ":", "utt_speaker", "[", "i", "]", ".", "encode", "(", "\"utf-8\"", ")", ",", "'utt_id'", ":", "utt_id", "[", "i", "]", ",", "\n", "'utterance'", ":", "utterance", ".", "encode", "(", "\"utf-8\"", ")", ",", "\n", "'emotion'", ":", "emotion", ",", "'sentiment'", ":", "sentiment", ",", "\n", "\n", "'eda1'", ":", "str", "(", "eda1", "[", "i", "]", ")", ",", "'eda2'", ":", "str", "(", "eda2", "[", "i", "]", ")", ",", "'eda3'", ":", "str", "(", "eda3", "[", "i", "]", ")", ",", "\n", "'eda4'", ":", "str", "(", "eda4", "[", "i", "]", ")", ",", "'eda5'", ":", "str", "(", "eda5", "[", "i", "]", ")", ",", "'EDA'", ":", "matched_element", ",", "\n", "'all_match'", ":", "all_match", ",", "'con_match'", ":", "con_match", ",", "'match'", ":", "match", "}", "\n", "\n", "if", "write_final_csv", ":", "\n", "            ", "writer", ".", "writerow", "(", "utt_info_row", ")", "\n", "", "if", "matched_element", "==", "'xx'", ":", "\n", "            ", "none_matches", "+=", "1", "\n", "", "utt_info_rows", ".", "append", "(", "utt_info_row", ")", "\n", "\n", "", "print", "(", "\n", "\"Matches in all: {}%, in context: {}%, based on confidence rank: {}%, and none matched: {}%\"", ".", "format", "(", "\n", "round", "(", "(", "total_match", "/", "len", "(", "eda1", ")", ")", "*", "100", ",", "2", ")", ",", "round", "(", "(", "con_matches", "/", "len", "(", "eda1", ")", ")", "*", "100", ",", "2", ")", ",", "\n", "round", "(", "(", "based_on_confs", "/", "len", "(", "eda1", ")", ")", "*", "100", ",", "2", ")", ",", "round", "(", "(", "none_matches", "/", "len", "(", "eda1", ")", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "return", "utt_info_rows", "\n", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.relieability_kappa.checkInput": [[1, 7], ["len", "len", "all", "all", "all", "isinstance", "len", "range", "int", "range", "range", "sum"], "function", ["None"], ["def", "checkInput", "(", "rate", ",", "n", ")", ":", "\n", "    ", "N", "=", "len", "(", "rate", ")", "\n", "k", "=", "len", "(", "rate", "[", "0", "]", ")", "\n", "assert", "all", "(", "len", "(", "rate", "[", "i", "]", ")", "==", "k", "for", "i", "in", "range", "(", "k", ")", ")", ",", "\"Row length != #categories)\"", "\n", "assert", "all", "(", "isinstance", "(", "int", "(", "rate", "[", "i", "]", "[", "j", "]", ")", ",", "int", ")", "for", "i", "in", "range", "(", "N", ")", "for", "j", "in", "range", "(", "k", ")", ")", ",", "\"Element not integer\"", "\n", "assert", "all", "(", "sum", "(", "row", ")", "==", "n", "for", "row", "in", "rate", ")", ",", "\"Sum of ratings != #raters)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.relieability_kappa.kappa_data": [[9, 23], ["reliability_data.transpose", "range", "sum", "final_list.append", "reliability_data.max", "len"], "function", ["None"], ["", "def", "kappa_data", "(", "reliability_data", ")", ":", "\n", "    ", "global", "final_list", ",", "noted_samples", "\n", "final_list", "=", "[", "]", "\n", "noted_samples", "=", "0", "\n", "for", "item", "in", "reliability_data", ".", "transpose", "(", ")", ":", "\n", "        ", "temp_list", "=", "[", "0", "]", "*", "(", "reliability_data", ".", "max", "(", ")", "+", "1", ")", "\n", "for", "i", "in", "item", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "temp_list", ")", ")", ":", "\n", "                ", "if", "i", "==", "j", "+", "1", ":", "\n", "                    ", "temp_list", "[", "j", "]", "=", "temp_list", "[", "j", "]", "+", "1", "\n", "", "", "", "if", "sum", "(", "temp_list", ")", "==", "5", ":", "# only a few (around 200 out of 10000) are excluded", "\n", "            ", "final_list", ".", "append", "(", "temp_list", ")", "\n", "noted_samples", "+=", "1", "\n", "", "", "return", "final_list", ",", "noted_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.relieability_kappa.fleiss_kappa": [[25, 47], ["relieability_kappa.kappa_data", "print", "len", "len", "print", "relieability_kappa.checkInput", "print", "sum", "print", "print", "sum", "float", "float", "round", "print", "sum", "sum", "range"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.relieability_kappa.kappa_data", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.relieability_kappa.checkInput"], ["", "def", "fleiss_kappa", "(", "reliability_data", ",", "n", ")", ":", "\n", "    ", "rate", ",", "noted_samples", "=", "kappa_data", "(", "reliability_data", ")", "\n", "print", "(", "\"Skipped subjects: {}%\"", ".", "format", "(", "\n", "round", "(", "(", "(", "reliability_data", ".", "shape", "[", "1", "]", "-", "noted_samples", ")", "/", "reliability_data", ".", "shape", "[", "1", "]", ")", "*", "100", ",", "4", ")", ")", ")", "\n", "N", "=", "len", "(", "rate", ")", "\n", "k", "=", "len", "(", "rate", "[", "0", "]", ")", "\n", "print", "(", "\"#raters = \"", ",", "n", ",", "\", #subjects = \"", ",", "N", ",", "\", #categories = \"", ",", "k", ")", "\n", "checkInput", "(", "rate", ",", "n", ")", "\n", "# mean of the extent to which raters agree for the ith subject", "\n", "PA", "=", "sum", "(", "[", "(", "sum", "(", "[", "i", "**", "2", "for", "i", "in", "row", "]", ")", "-", "n", ")", "/", "(", "n", "*", "(", "n", "-", "1", ")", ")", "for", "row", "in", "rate", "]", ")", "/", "N", "\n", "print", "(", "\"PA = \"", ",", "PA", ")", "\n", "# mean of squares of proportion of all assignments which were to jth category", "\n", "PE", "=", "sum", "(", "[", "j", "**", "2", "for", "j", "in", "[", "sum", "(", "[", "rows", "[", "i", "]", "for", "rows", "in", "rate", "]", ")", "/", "(", "N", "*", "n", ")", "for", "i", "in", "range", "(", "k", ")", "]", "]", ")", "\n", "print", "(", "\"PE =\"", ",", "PE", ")", "\n", "kappa", "=", "-", "float", "(", "\"inf\"", ")", "\n", "try", ":", "\n", "        ", "kappa", "=", "(", "PA", "-", "PE", ")", "/", "(", "1", "-", "PE", ")", "\n", "kappa", "=", "float", "(", "\"{:.3f}\"", ".", "format", "(", "kappa", ")", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "print", "(", "\"Expected agreement = 1\"", ")", "\n", "", "print", "(", "\"Fleiss' Kappa =\"", ",", "kappa", ")", "\n", "return", "kappa", "", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.read_annotated_data_utils.read_data": [[5, 18], ["pandas.read_csv", "df_train[].tolist", "df_train[].tolist", "df_train[].tolist", "df_train[].tolist", "df_train[].tolist"], "function", ["None"], ["def", "read_data", "(", "data", ",", "meld_data", "=", "False", ")", ":", "\n", "    ", "df_train", "=", "pd", ".", "read_csv", "(", "data", ")", "# load the .csv file, specify the appropriate path", "\n", "utt", "=", "df_train", "[", "'utterance'", "]", ".", "tolist", "(", ")", "# load the list of utterances", "\n", "utt_Emotion", "=", "df_train", "[", "'emotion'", "]", ".", "tolist", "(", ")", "\n", "utt_EDAs", "=", "df_train", "[", "'EDA'", "]", ".", "tolist", "(", ")", "\n", "# utt_Sentiment = df_train['Sentiment'].tolist()", "\n", "utt_Speaker", "=", "df_train", "[", "'speaker'", "]", ".", "tolist", "(", ")", "\n", "\n", "if", "meld_data", ":", "\n", "        ", "utt_Sentiment", "=", "df_train", "[", "'sentiment'", "]", ".", "tolist", "(", ")", "\n", "return", "utt_Speaker", ",", "utt", ",", "utt_Emotion", ",", "utt_EDAs", ",", "utt_Sentiment", "\n", "", "else", ":", "\n", "        ", "return", "utt_Speaker", ",", "utt", ",", "utt_Emotion", ",", "utt_EDAs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_bars.StackedBarGrapher.__init__": [[8, 9], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_bars.StackedBarGrapher.demo": [[10, 96], ["numpy.array", "matplotlib.pyplot.figure", "matplotlib.pyplot.figure.add_subplot", "plot_bars.StackedBarGrapher.stackedBarPlot", "matplotlib.pyplot.title", "matplotlib.pyplot.figure.add_subplot", "plot_bars.StackedBarGrapher.stackedBarPlot", "matplotlib.pyplot.title", "matplotlib.pyplot.figure.add_subplot", "plot_bars.StackedBarGrapher.stackedBarPlot", "matplotlib.pyplot.title", "matplotlib.pyplot.figure.add_subplot", "plot_bars.StackedBarGrapher.stackedBarPlot", "matplotlib.pyplot.title", "matplotlib.pyplot.figure.add_subplot", "plot_bars.StackedBarGrapher.stackedBarPlot", "matplotlib.pyplot.title", "matplotlib.pyplot.figure.add_subplot", "plot_bars.StackedBarGrapher.stackedBarPlot", "matplotlib.pyplot.title", "matplotlib.pyplot.figure.subplots_adjust", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.show", "matplotlib.pyplot.close"], "methods", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_bars.StackedBarGrapher.stackedBarPlot", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_bars.StackedBarGrapher.stackedBarPlot", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_bars.StackedBarGrapher.stackedBarPlot", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_bars.StackedBarGrapher.stackedBarPlot", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_bars.StackedBarGrapher.stackedBarPlot", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_bars.StackedBarGrapher.stackedBarPlot"], ["def", "demo", "(", "self", ")", ":", "\n", "        ", "d", "=", "np", ".", "array", "(", "[", "[", "101.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "92.", ",", "3.", ",", "0.", ",", "4.", ",", "5.", ",", "6.", ",", "0.", "]", ",", "\n", "[", "56.", ",", "7.", ",", "8.", ",", "9.", ",", "23.", ",", "4.", ",", "5.", "]", ",", "\n", "[", "81.", ",", "2.", ",", "4.", ",", "5.", ",", "32.", ",", "33.", ",", "4.", "]", ",", "\n", "[", "0.", ",", "45.", ",", "2.", ",", "3.", ",", "45.", ",", "67.", ",", "8.", "]", ",", "\n", "[", "99.", ",", "5.", ",", "0.", ",", "0.", ",", "0.", ",", "43.", ",", "56.", "]", "]", ")", "\n", "\n", "d_heights", "=", "[", "1.", ",", "2.", ",", "3.", ",", "4.", ",", "5.", ",", "6.", "]", "\n", "d_widths", "=", "[", ".5", ",", "1.", ",", "3.", ",", "2.", ",", "1.", ",", "2.", "]", "\n", "d_labels", "=", "[", "\"fred\"", ",", "\"julie\"", ",", "\"sam\"", ",", "\"peter\"", ",", "\"rob\"", ",", "\"baz\"", "]", "\n", "d_colors", "=", "[", "'#2166ac'", ",", "'#fee090'", ",", "'#fdbb84'", ",", "'#fc8d59'", ",", "'#e34a33'", ",", "'#b30000'", ",", "'#777777'", "]", "\n", "gap", "=", "0.05", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "321", ")", "\n", "self", ".", "stackedBarPlot", "(", "ax1", ",", "\n", "d", ",", "\n", "d_colors", ",", "\n", "edgeCols", "=", "[", "'#000000'", "]", "*", "7", ",", "\n", "xLabels", "=", "d_labels", ",", "\n", ")", "\n", "plt", ".", "title", "(", "\"Straight up stacked bars\"", ")", "\n", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "322", ")", "\n", "self", ".", "stackedBarPlot", "(", "ax2", ",", "\n", "d", ",", "\n", "d_colors", ",", "\n", "edgeCols", "=", "[", "'#000000'", "]", "*", "7", ",", "\n", "xLabels", "=", "d_labels", ",", "\n", "scale", "=", "True", "\n", ")", "\n", "plt", ".", "title", "(", "\"Scaled bars\"", ")", "\n", "\n", "ax3", "=", "fig", ".", "add_subplot", "(", "323", ")", "\n", "self", ".", "stackedBarPlot", "(", "ax3", ",", "\n", "d", ",", "\n", "d_colors", ",", "\n", "edgeCols", "=", "[", "'#000000'", "]", "*", "7", ",", "\n", "xLabels", "=", "d_labels", ",", "\n", "heights", "=", "d_heights", ",", "\n", "yTicks", "=", "7", ",", "\n", ")", "\n", "plt", ".", "title", "(", "\"Bars with set heights\"", ")", "\n", "\n", "ax4", "=", "fig", ".", "add_subplot", "(", "324", ")", "\n", "self", ".", "stackedBarPlot", "(", "ax4", ",", "\n", "d", ",", "\n", "d_colors", ",", "\n", "edgeCols", "=", "[", "'#000000'", "]", "*", "7", ",", "\n", "xLabels", "=", "d_labels", ",", "\n", "yTicks", "=", "7", ",", "\n", "widths", "=", "d_widths", ",", "\n", "scale", "=", "True", "\n", ")", "\n", "plt", ".", "title", "(", "\"Scaled bars with set widths\"", ")", "\n", "\n", "ax5", "=", "fig", ".", "add_subplot", "(", "325", ")", "\n", "self", ".", "stackedBarPlot", "(", "ax5", ",", "\n", "d", ",", "\n", "d_colors", ",", "\n", "edgeCols", "=", "[", "'#000000'", "]", "*", "7", ",", "\n", "xLabels", "=", "d_labels", ",", "\n", "gap", "=", "gap", "\n", ")", "\n", "plt", ".", "title", "(", "\"Straight up stacked bars + gaps\"", ")", "\n", "\n", "ax6", "=", "fig", ".", "add_subplot", "(", "326", ")", "\n", "self", ".", "stackedBarPlot", "(", "ax6", ",", "\n", "d", ",", "\n", "d_colors", ",", "\n", "edgeCols", "=", "[", "'#000000'", "]", "*", "7", ",", "\n", "xLabels", "=", "d_labels", ",", "\n", "scale", "=", "True", ",", "\n", "gap", "=", "gap", ",", "\n", "endGaps", "=", "True", "\n", ")", "\n", "plt", ".", "title", "(", "\"Scaled bars + gaps + end gaps\"", ")", "\n", "\n", "# We change the fontsize of minor ticks label", "\n", "fig", ".", "subplots_adjust", "(", "bottom", "=", "0.4", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "del", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.plot_bars.StackedBarGrapher.stackedBarPlot": [[97, 247], ["numpy.shape", "numpy.reshape", "ax.bar", "numpy.arange", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.set_ylim", "numpy.min", "numpy.copy().transpose().astype", "numpy.shape", "numpy.copy().transpose", "numpy.array", "numpy.arange", "range", "ax.bar", "ax.tick_params", "ax.yaxis.tick_left", "matplotlib.pyplot.yticks", "matplotlib.pyplot.yticks", "ax.tick_params", "ax.xaxis.tick_bottom", "matplotlib.pyplot.xticks", "matplotlib.pyplot.xticks", "ax.set_xlim", "ax.set_xlim", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "len", "numpy.arange.append", "float", "print", "numpy.arange", "len", "round", "len", "numpy.copy().transpose", "numpy.copy", "numpy.ravel", "float", "numpy.array", "numpy.array", "numpy.shape", "numpy.cumsum", "numpy.arange", "numpy.max", "numpy.sum", "numpy.sum", "numpy.copy", "round", "numpy.arange", "str"], "methods", ["None"], ["", "def", "stackedBarPlot", "(", "self", ",", "\n", "ax", ",", "# axes to plot onto", "\n", "data", ",", "# data to plot", "\n", "cols", ",", "# colors for each level", "\n", "xLabels", "=", "None", ",", "# bar specific labels", "\n", "yTicks", "=", "6.", ",", "# information used for making y ticks [\"none\", <int> or [[tick_pos1, tick_pos2, ... ],[tick_label_1, tick_label2, ...]]", "\n", "edgeCols", "=", "None", ",", "# colors for edges", "\n", "showFirst", "=", "-", "1", ",", "# only plot the first <showFirst> bars", "\n", "scale", "=", "False", ",", "# scale bars to same height", "\n", "widths", "=", "None", ",", "# set widths for each bar", "\n", "heights", "=", "None", ",", "# set heights for each bar", "\n", "ylabel", "=", "''", ",", "# label for x axis", "\n", "xlabel", "=", "''", ",", "# label for y axis", "\n", "gap", "=", "0.2", ",", "# gap between bars", "\n", "endGaps", "=", "False", "# allow gaps at end of bar chart (only used if gaps != 0.)", "\n", ")", ":", "\n", "\n", "#------------------------------------------------------------------------------", "\n", "# data fixeratering", "\n", "\n", "# make sure this makes sense", "\n", "        ", "if", "showFirst", "!=", "-", "1", ":", "\n", "            ", "showFirst", "=", "np", ".", "min", "(", "[", "showFirst", ",", "np", ".", "shape", "(", "data", ")", "[", "0", "]", "]", ")", "\n", "data_copy", "=", "np", ".", "copy", "(", "data", "[", ":", "showFirst", "]", ")", ".", "transpose", "(", ")", ".", "astype", "(", "'float'", ")", "\n", "data_shape", "=", "np", ".", "shape", "(", "data_copy", ")", "\n", "if", "heights", "is", "not", "None", ":", "\n", "                ", "heights", "=", "heights", "[", ":", "showFirst", "]", "\n", "", "if", "widths", "is", "not", "None", ":", "\n", "                ", "widths", "=", "widths", "[", ":", "showFirst", "]", "\n", "", "showFirst", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "data_copy", "=", "np", ".", "copy", "(", "data", ")", ".", "transpose", "(", ")", "\n", "", "data_shape", "=", "np", ".", "shape", "(", "data_copy", ")", "\n", "\n", "# determine the number of bars and corresponding levels from the shape of the data", "\n", "num_bars", "=", "data_shape", "[", "1", "]", "\n", "levels", "=", "data_shape", "[", "0", "]", "\n", "\n", "if", "widths", "is", "None", ":", "\n", "            ", "widths", "=", "np", ".", "array", "(", "[", "1", "]", "*", "num_bars", ")", "\n", "x", "=", "np", ".", "arange", "(", "num_bars", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "widths", ")", ")", ":", "\n", "                ", "x", ".", "append", "(", "x", "[", "i", "-", "1", "]", "+", "(", "widths", "[", "i", "-", "1", "]", "+", "widths", "[", "i", "]", ")", "/", "2", ")", "\n", "\n", "# stack the data --", "\n", "# replace the value in each level by the cumulative sum of all preceding levels", "\n", "", "", "data_stack", "=", "np", ".", "reshape", "(", "[", "float", "(", "i", ")", "for", "i", "in", "np", ".", "ravel", "(", "np", ".", "cumsum", "(", "data_copy", ",", "axis", "=", "0", ")", ")", "]", ",", "data_shape", ")", "\n", "\n", "# scale the data is needed", "\n", "if", "scale", ":", "\n", "            ", "data_copy", "/=", "data_stack", "[", "levels", "-", "1", "]", "\n", "data_stack", "/=", "data_stack", "[", "levels", "-", "1", "]", "\n", "if", "heights", "is", "not", "None", ":", "\n", "                ", "print", "(", "\"WARNING: setting scale and heights does not make sense.\"", ")", "\n", "heights", "=", "None", "\n", "", "", "elif", "heights", "is", "not", "None", ":", "\n", "            ", "data_copy", "/=", "data_stack", "[", "levels", "-", "1", "]", "\n", "data_stack", "/=", "data_stack", "[", "levels", "-", "1", "]", "\n", "for", "i", "in", "np", ".", "arange", "(", "num_bars", ")", ":", "\n", "                ", "data_copy", "[", ":", ",", "i", "]", "*=", "heights", "[", "i", "]", "\n", "data_stack", "[", ":", ",", "i", "]", "*=", "heights", "[", "i", "]", "\n", "\n", "#------------------------------------------------------------------------------", "\n", "# ticks", "\n", "\n", "", "", "if", "yTicks", "is", "not", "\"none\"", ":", "\n", "# it is either a set of ticks or the number of auto ticks to make", "\n", "            ", "real_ticks", "=", "True", "\n", "try", ":", "\n", "                ", "k", "=", "len", "(", "yTicks", "[", "1", "]", ")", "\n", "", "except", ":", "\n", "                ", "real_ticks", "=", "False", "\n", "\n", "", "if", "not", "real_ticks", ":", "\n", "                ", "yTicks", "=", "round", "(", "float", "(", "yTicks", ")", ",", "2", ")", "\n", "if", "scale", ":", "\n", "# make the ticks line up to 100 %", "\n", "                    ", "y_ticks_at", "=", "np", ".", "arange", "(", "yTicks", ")", "/", "(", "yTicks", "-", "1", ")", "\n", "y_tick_labels", "=", "np", ".", "array", "(", "[", "round", "(", "\"%0.2f\"", "%", "(", "i", "*", "100", ")", ",", "2", ")", "for", "i", "in", "y_ticks_at", "]", ")", "\n", "", "else", ":", "\n", "# space the ticks along the y axis", "\n", "                    ", "y_ticks_at", "=", "np", ".", "arange", "(", "yTicks", ")", "/", "(", "yTicks", "-", "1", ")", "*", "np", ".", "max", "(", "data_stack", ")", "\n", "y_tick_labels", "=", "np", ".", "array", "(", "[", "str", "(", "i", ")", "[", "0", ":", "5", "]", "for", "i", "in", "y_ticks_at", "]", ")", "\n", "", "yTicks", "=", "(", "y_ticks_at", ",", "y_tick_labels", ")", "\n", "\n", "#------------------------------------------------------------------------------", "\n", "# plot", "\n", "\n", "", "", "if", "edgeCols", "is", "None", ":", "\n", "            ", "edgeCols", "=", "[", "\"none\"", "]", "*", "len", "(", "cols", ")", "\n", "\n", "# take cae of gaps", "\n", "", "gapd_widths", "=", "[", "i", "-", "gap", "for", "i", "in", "widths", "]", "\n", "\n", "# bars", "\n", "ax", ".", "bar", "(", "x", ",", "\n", "data_stack", "[", "0", "]", ",", "\n", "color", "=", "cols", "[", "0", "]", ",", "\n", "edgecolor", "=", "edgeCols", "[", "0", "]", ",", "\n", "width", "=", "gapd_widths", ",", "\n", "linewidth", "=", "0.5", ",", "\n", "align", "=", "'center'", "\n", ")", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "1", ",", "levels", ")", ":", "\n", "            ", "ax", ".", "bar", "(", "x", ",", "\n", "data_copy", "[", "i", "]", ",", "\n", "bottom", "=", "data_stack", "[", "i", "-", "1", "]", ",", "\n", "color", "=", "cols", "[", "i", "]", ",", "\n", "edgecolor", "=", "edgeCols", "[", "i", "]", ",", "\n", "width", "=", "gapd_widths", ",", "\n", "linewidth", "=", "0.5", ",", "\n", "align", "=", "'center'", "\n", ")", "\n", "\n", "# borders", "\n", "", "ax", ".", "spines", "[", "\"top\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "\"right\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "\"bottom\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "\"left\"", "]", ".", "set_visible", "(", "False", ")", "\n", "\n", "# make ticks if necessary", "\n", "if", "yTicks", "is", "not", "\"none\"", ":", "\n", "            ", "ax", ".", "tick_params", "(", "axis", "=", "'y'", ",", "which", "=", "'both'", ",", "labelsize", "=", "8", ",", "direction", "=", "\"out\"", ")", "\n", "ax", ".", "yaxis", ".", "tick_left", "(", ")", "\n", "plt", ".", "yticks", "(", "yTicks", "[", "0", "]", ",", "yTicks", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "\n", "", "if", "xLabels", "is", "not", "None", ":", "\n", "            ", "ax", ".", "tick_params", "(", "axis", "=", "'x'", ",", "which", "=", "'both'", ",", "labelsize", "=", "8", ",", "direction", "=", "\"out\"", ")", "\n", "ax", ".", "xaxis", ".", "tick_bottom", "(", ")", "\n", "plt", ".", "xticks", "(", "x", ",", "xLabels", ",", "rotation", "=", "'vertical'", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "\n", "# limits", "\n", "", "if", "endGaps", ":", "\n", "            ", "ax", ".", "set_xlim", "(", "-", "1.", "*", "widths", "[", "0", "]", "/", "2.", "-", "gap", "/", "2.", ",", "np", ".", "sum", "(", "widths", ")", "-", "widths", "[", "0", "]", "/", "2.", "+", "gap", "/", "2.", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "set_xlim", "(", "-", "1.", "*", "widths", "[", "0", "]", "/", "2.", "+", "gap", "/", "2.", ",", "np", ".", "sum", "(", "widths", ")", "-", "widths", "[", "0", "]", "/", "2.", "-", "gap", "/", "2.", ")", "\n", "", "ax", ".", "set_ylim", "(", "0", ",", "yTicks", "[", "0", "]", "[", "-", "1", "]", ")", "#np.max(data_stack))", "\n", "\n", "# labels", "\n", "if", "xlabel", "!=", "''", ":", "\n", "            ", "plt", ".", "xlabel", "(", "xlabel", ")", "\n", "", "if", "ylabel", "!=", "''", ":", "\n", "            ", "plt", ".", "ylabel", "(", "ylabel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.da_annotator_helper.lists_to_text": [[3, 7], ["None"], "function", ["None"], ["def", "lists_to_text", "(", "speaker_ids", ",", "utterances", ",", "utt_ids", ",", "emotions", ")", ":", "\n", "    ", "text", "=", "\"$$$$\"", ".", "join", "(", "speaker_ids", ")", "+", "\"?????\"", "+", "\"$$$$\"", ".", "join", "(", "utterances", ")", "+", "\"?????\"", "+", "\"$$$$\"", ".", "join", "(", "\n", "utt_ids", ")", "+", "\"?????\"", "+", "\"$$$$\"", ".", "join", "(", "emotions", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.da_annotator_helper.results_from_text_to_lists": [[9, 33], ["results.split", "item.split", "speaker_id.append", "utt_id.append", "utterance.append", "emotion.append", "swda_elmo_non_con_out.append", "swda_elmo_non_con_out_confs.append", "swda_elmo_mean_non_con_out.append", "swda_elmo_mean_non_con_out_confs.append", "swda_elmo_con_out.append", "swda_elmo_con_out_confs.append", "swda_elmo_mean_con_out.append", "swda_elmo_mean_con_out_confs.append", "swda_elmo_top_con_out.append", "swda_elmo_top_con_out_confs.append", "float", "float", "float", "float", "float"], "function", ["None"], ["", "def", "results_from_text_to_lists", "(", "results", ")", ":", "\n", "    ", "result_items", "=", "results", ".", "split", "(", "'?????'", ")", "\n", "f_kappa_score_text", "=", "result_items", "[", "0", "]", "\n", "k_alpha_score_text", "=", "result_items", "[", "1", "]", "\n", "overall_data_assessment", "=", "result_items", "[", "2", "]", "\n", "speaker_id", ",", "utt_id", ",", "utterance", ",", "emotion", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "swda_elmo_non_con_out", ",", "swda_elmo_non_con_out_confs", "=", "[", "]", ",", "[", "]", "\n", "swda_elmo_mean_non_con_out", ",", "swda_elmo_mean_non_con_out_confs", "=", "[", "]", ",", "[", "]", "\n", "swda_elmo_con_out", ",", "swda_elmo_con_out_confs", "=", "[", "]", ",", "[", "]", "\n", "swda_elmo_mean_con_out", ",", "swda_elmo_mean_con_out_confs", "=", "[", "]", ",", "[", "]", "\n", "swda_elmo_top_con_out", ",", "swda_elmo_top_con_out_confs", "=", "[", "]", ",", "[", "]", "\n", "for", "item", "in", "result_items", "[", "3", ":", "]", ":", "\n", "        ", "elements", "=", "item", ".", "split", "(", "'$$$$'", ")", "\n", "speaker_id", ".", "append", "(", "elements", "[", "0", "]", ")", ",", "utt_id", ".", "append", "(", "elements", "[", "1", "]", ")", ",", "utterance", ".", "append", "(", "elements", "[", "2", "]", ")", ",", "emotion", ".", "append", "(", "\n", "elements", "[", "3", "]", ")", "\n", "swda_elmo_non_con_out", ".", "append", "(", "elements", "[", "4", "]", ")", ",", "swda_elmo_non_con_out_confs", ".", "append", "(", "float", "(", "elements", "[", "5", "]", ")", ")", "\n", "swda_elmo_mean_non_con_out", ".", "append", "(", "elements", "[", "6", "]", ")", ",", "swda_elmo_mean_non_con_out_confs", ".", "append", "(", "float", "(", "elements", "[", "7", "]", ")", ")", "\n", "swda_elmo_con_out", ".", "append", "(", "elements", "[", "8", "]", ")", ",", "swda_elmo_con_out_confs", ".", "append", "(", "float", "(", "elements", "[", "9", "]", ")", ")", "\n", "swda_elmo_mean_con_out", ".", "append", "(", "elements", "[", "10", "]", ")", ",", "swda_elmo_mean_con_out_confs", ".", "append", "(", "float", "(", "elements", "[", "11", "]", ")", ")", "\n", "swda_elmo_top_con_out", ".", "append", "(", "elements", "[", "12", "]", ")", ",", "swda_elmo_top_con_out_confs", ".", "append", "(", "float", "(", "elements", "[", "13", "]", ")", ")", "\n", "", "return", "f_kappa_score_text", ",", "k_alpha_score_text", ",", "overall_data_assessment", ",", "speaker_id", ",", "emotion", ",", "swda_elmo_non_con_out", ",", "swda_elmo_non_con_out_confs", ",", "swda_elmo_mean_non_con_out", ",", "swda_elmo_mean_non_con_out_confs", ",", "swda_elmo_con_out", ",", "swda_elmo_con_out_confs", ",", "swda_elmo_mean_con_out", ",", "swda_elmo_mean_con_out_confs", ",", "swda_elmo_top_con_out", ",", "swda_elmo_top_con_out_confs", "\n", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.mrda_data_reader.get_mrda_data": [[6, 51], ["get_directory_structure", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "open().read", "np.array", "np.array.split", "line.split", "open"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.mocap_utils.get_directory_structure"], ["def", "get_mrda_data", "(", "write", "=", "False", ",", "read_from_csv", "=", "False", ",", "csv_file_name", "=", "\"data/MRDA/mrda_dataset.csv\"", ")", ":", "\n", "\n", "    ", "\"\"\"\n    get_directory_structure(\"IEMOCAP\") - Sorts differently on Windows and Ubuntu,\n    hence better to save csv after we read all data, and use that one latter\n    :param write: write the csv file\n    :param csv_file_name: provide correct path\n    :param read_from_csv: read from the written file\n    :return: lists of utterances, emo_dialogues, emo_evo, v, a, d, utt_keys\n    \"\"\"", "\n", "\n", "utterances", "=", "[", "]", "\n", "da", "=", "[", "]", "\n", "utt_keys", "=", "[", "]", "\n", "fieldnames", "=", "[", "'utt_keys'", ",", "'utterance'", ",", "'da'", "]", "\n", "\n", "if", "not", "read_from_csv", ":", "\n", "        ", "if", "write", ":", "\n", "            ", "store_mocap_in_csv", "=", "open", "(", "csv_file_name", ",", "mode", "=", "'w'", ",", "newline", "=", "''", ")", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "store_mocap_in_csv", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "\n", "", "path", "=", "\"data/MRDA/\"", "\n", "path_tree", "=", "get_directory_structure", "(", "path", ")", "\n", "\n", "# data_split", "\n", "train_set_idx", "=", "[", "'Bdb001'", ",", "'Bed002'", ",", "'Bed004'", ",", "'Bed005'", ",", "'Bed008'", ",", "'Bed009'", ",", "'Bed011'", ",", "'Bed013'", ",", "'Bed014'", ",", "\n", "'Bed015'", ",", "'Bed017'", ",", "'Bmr002'", ",", "'Bmr003'", ",", "'Bmr006'", ",", "'Bmr007'", ",", "'Bmr008'", ",", "'Bmr009'", ",", "'Bmr011'", ",", "\n", "'Bmr012'", ",", "'Bmr015'", ",", "'Bmr016'", ",", "'Bmr020'", ",", "'Bmr021'", ",", "'Bmr023'", ",", "'Bmr025'", ",", "'Bmr026'", ",", "'Bmr027'", ",", "\n", "'Bmr029'", ",", "'Bmr031'", ",", "'Bns001'", ",", "'Bns002'", ",", "'Bns003'", ",", "'Bro003'", ",", "'Bro005'", ",", "'Bro007'", ",", "'Bro010'", ",", "\n", "'Bro012'", ",", "'Bro013'", ",", "'Bro015'", ",", "'Bro016'", ",", "'Bro017'", ",", "'Bro019'", ",", "'Bro022'", ",", "'Bro023'", ",", "'Bro025'", ",", "\n", "'Bro026'", ",", "'Bro028'", ",", "'Bsr001'", ",", "'Btr001'", ",", "'Btr002'", ",", "'Buw001'", "]", "\n", "valid_set_idx", "=", "[", "'Bed003'", ",", "'Bed010'", ",", "'Bmr005'", ",", "'Bmr014'", ",", "'Bmr019'", ",", "'Bmr024'", ",", "'Bmr030'", ",", "'Bro004'", ",", "'Bro011'", ",", "\n", "'Bro018'", ",", "'Bro024'", "]", "\n", "test_set_idx", "=", "[", "'Bed006'", ",", "'Bed012'", ",", "'Bed016'", ",", "'Bmr001'", ",", "'Bmr010'", ",", "'Bmr022'", ",", "'Bmr028'", ",", "'Bro008'", ",", "'Bro014'", ",", "\n", "'Bro021'", ",", "'Bro027'", "]", "\n", "\n", "for", "set", "in", "test_set_idx", ":", "\n", "            ", "filename", "=", "path", "+", "set", "+", "\".out\"", "\n", "f", "=", "open", "(", "filename", ",", "'r'", ")", ".", "read", "(", ")", "\n", "f", "=", "np", ".", "array", "(", "f", ".", "split", "(", "'\\n'", ")", ")", "\n", "for", "line", "in", "f", ":", "\n", "                ", "line", ".", "split", "(", "\",\"", ")", "\n", "\n", "", "", "", "return", "utterances", ",", "da", ",", "utt_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.mocap_utils.get_transcriptions": [[6, 18], ["open().read", "numpy.array", "range", "np.array.split", "g.find", "g.find", "open", "len"], "function", ["None"], ["def", "get_transcriptions", "(", "filename", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "'r'", ")", ".", "read", "(", ")", "\n", "f", "=", "np", ".", "array", "(", "f", ".", "split", "(", "'\\n'", ")", ")", "\n", "transcription", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "f", ")", "-", "1", ")", ":", "\n", "        ", "g", "=", "f", "[", "i", "]", "\n", "i1", "=", "g", ".", "find", "(", "': '", ")", "\n", "i0", "=", "g", ".", "find", "(", "' ['", ")", "\n", "ind_id", "=", "g", "[", ":", "i0", "]", "\n", "ind_ts", "=", "g", "[", "i1", "+", "2", ":", "]", "\n", "transcription", "[", "ind_id", "]", "=", "ind_ts", "\n", "", "return", "transcription", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.mocap_utils.get_emotions": [[20, 74], ["open().read", "numpy.array", "range", "np.array.split", "numpy.arange", "head.find", "float", "float", "float", "float", "float", "emotion.append", "open", "len", "len", "g[].split", "head.find", "emos.append", "head.find", "head.find", "evoluator_emo.append", "head.find", "head.find", "head.find", "head.find", "head.find", "head.find", "head.find", "head.find", "len", "head.find", "len", "head[].strip().lower", "head[].strip"], "function", ["None"], ["", "def", "get_emotions", "(", "filename", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "'r'", ")", ".", "read", "(", ")", "\n", "f", "=", "np", ".", "array", "(", "f", ".", "split", "(", "'\\n'", ")", ")", "\n", "idx", "=", "f", "==", "''", "\n", "idx_n", "=", "np", ".", "arange", "(", "len", "(", "f", ")", ")", "[", "idx", "]", "\n", "emotion", "=", "[", "]", "\n", "emotion_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "idx_n", ")", "-", "2", ")", ":", "\n", "        ", "g", "=", "f", "[", "idx_n", "[", "i", "]", "+", "1", ":", "idx_n", "[", "i", "+", "1", "]", "]", "\n", "speaker_id", "=", "g", "[", "0", "]", ".", "split", "(", "'\\t'", ")", "[", "1", "]", "\n", "head", "=", "g", "[", "0", "]", "\n", "i0", "=", "head", ".", "find", "(", "' - '", ")", "\n", "start_time", "=", "float", "(", "head", "[", "head", ".", "find", "(", "'['", ")", "+", "1", ":", "head", ".", "find", "(", "' - '", ")", "]", ")", "\n", "end_time", "=", "float", "(", "head", "[", "head", ".", "find", "(", "' - '", ")", "+", "3", ":", "head", ".", "find", "(", "']'", ")", "]", ")", "\n", "actor_id", "=", "head", "[", "head", ".", "find", "(", "filename", "[", ":", "-", "4", "]", ")", "+", "len", "(", "filename", "[", ":", "-", "4", "]", ")", "+", "1", ":", "\n", "head", ".", "find", "(", "filename", "[", ":", "-", "4", "]", ")", "+", "len", "(", "filename", "[", ":", "-", "4", "]", ")", "+", "5", "]", "\n", "emo", "=", "head", "[", "head", ".", "find", "(", "'\\t['", ")", "-", "3", ":", "head", ".", "find", "(", "'\\t['", ")", "]", "\n", "vad", "=", "head", "[", "head", ".", "find", "(", "'\\t['", ")", "+", "1", ":", "]", "\n", "\n", "v", "=", "float", "(", "vad", "[", "1", ":", "7", "]", ")", "\n", "a", "=", "float", "(", "vad", "[", "9", ":", "15", "]", ")", "\n", "d", "=", "float", "(", "vad", "[", "17", ":", "23", "]", ")", "\n", "\n", "j", "=", "1", "\n", "emos", "=", "[", "]", "\n", "while", "g", "[", "j", "]", "[", "0", "]", "==", "\"C\"", ":", "\n", "            ", "head", "=", "g", "[", "j", "]", "\n", "start_idx", "=", "head", ".", "find", "(", "\"\\t\"", ")", "+", "1", "\n", "evoluator_emo", "=", "[", "]", "\n", "idx", "=", "head", ".", "find", "(", "\";\"", ",", "start_idx", ")", "\n", "while", "idx", "!=", "-", "1", ":", "\n", "                ", "evoluator_emo", ".", "append", "(", "head", "[", "start_idx", ":", "idx", "]", ".", "strip", "(", ")", ".", "lower", "(", ")", "[", ":", "3", "]", ")", "\n", "start_idx", "=", "idx", "+", "1", "\n", "idx", "=", "head", ".", "find", "(", "\";\"", ",", "start_idx", ")", "\n", "", "emos", ".", "append", "(", "evoluator_emo", ")", "\n", "j", "+=", "1", "\n", "\n", "", "emotion", ".", "append", "(", "{", "'start'", ":", "start_time", ",", "\n", "'end'", ":", "end_time", ",", "\n", "'id'", ":", "filename", "[", ":", "-", "4", "]", "+", "'_'", "+", "actor_id", ",", "\n", "'v'", ":", "v", ",", "\n", "'a'", ":", "a", ",", "\n", "'d'", ":", "d", ",", "\n", "'emotion'", ":", "emo", ",", "\n", "'emo_evo'", ":", "emos", "}", ")", "\n", "emotion_dict", "[", "speaker_id", "]", "=", "{", "'start'", ":", "start_time", ",", "\n", "'end'", ":", "end_time", ",", "\n", "'id'", ":", "filename", "[", ":", "-", "4", "]", "+", "'_'", "+", "actor_id", ",", "\n", "'v'", ":", "v", ",", "\n", "'a'", ":", "a", ",", "\n", "'d'", ":", "d", ",", "\n", "'emotion'", ":", "emo", ",", "\n", "'emo_evo'", ":", "emos", "}", "\n", "", "return", "emotion_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.mocap_utils.get_directory_structure": [[76, 91], ["rootdir.rstrip.rstrip", "os.walk", "rootdir.rstrip.rfind", "path[].split", "dict.fromkeys", "functools.reduce"], "function", ["None"], ["", "def", "get_directory_structure", "(", "rootdir", ")", ":", "\n", "    ", "\"\"\"\n    Creates a nested dictionary that represents the folder structure of rootdir\n    Sorts differently on Windows and Ubuntu,\n    hence better to save csv after we read all data, and use that one latter\n    \"\"\"", "\n", "dir", "=", "{", "}", "\n", "rootdir", "=", "rootdir", ".", "rstrip", "(", "os", ".", "sep", ")", "\n", "start", "=", "rootdir", ".", "rfind", "(", "os", ".", "sep", ")", "+", "1", "\n", "for", "path", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "rootdir", ")", ":", "\n", "        ", "folders", "=", "path", "[", "start", ":", "]", ".", "split", "(", "os", ".", "sep", ")", "\n", "subdir", "=", "dict", ".", "fromkeys", "(", "files", ")", "\n", "parent", "=", "reduce", "(", "dict", ".", "get", ",", "folders", "[", ":", "-", "1", "]", ",", "dir", ")", "\n", "parent", "[", "folders", "[", "-", "1", "]", "]", "=", "subdir", "\n", "", "return", "dir", "\n", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils_float_string.float_to_string": [[4, 12], ["vectors.append", "vector.append", "str", "element.tolist"], "function", ["None"], ["def", "float_to_string", "(", "res", ")", ":", "\n", "    ", "vectors", "=", "[", "]", "\n", "for", "item", "in", "res", ":", "\n", "        ", "vector", "=", "[", "]", "\n", "for", "element", "in", "item", ":", "\n", "            ", "vector", ".", "append", "(", "''", ".", "join", "(", "str", "(", "element", ".", "tolist", "(", ")", ")", ")", ".", "replace", "(", "'['", ",", "''", ")", ".", "replace", "(", "']'", ",", "''", ")", ")", "\n", "", "vectors", ".", "append", "(", "' $$ '", ".", "join", "(", "vector", ")", ")", "\n", "", "return", "' $$$$ '", ".", "join", "(", "vectors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils_float_string.string_to_floats": [[14, 30], ["instrings.split", "numpy.array", "item.split", "numpy.array", "vectors.append", "elements.split", "numpy.array", "np.array.append", "np.array.append", "float"], "function", ["None"], ["", "def", "string_to_floats", "(", "instrings", ")", ":", "\n", "    ", "vectors", "=", "[", "]", "\n", "substrings", "=", "instrings", ".", "split", "(", "'$$$$'", ")", "\n", "for", "item", "in", "substrings", ":", "\n", "        ", "vector", "=", "[", "]", "\n", "substrings1", "=", "item", ".", "split", "(", "'$$'", ")", "\n", "for", "elements", "in", "substrings1", ":", "\n", "            ", "embs", "=", "[", "]", "\n", "str_elements", "=", "elements", ".", "split", "(", "','", ")", "\n", "for", "str_element", "in", "str_elements", ":", "\n", "                ", "embs", ".", "append", "(", "float", "(", "str_element", ")", ")", "\n", "", "embs", "=", "np", ".", "array", "(", "embs", ")", "\n", "vector", ".", "append", "(", "embs", ")", "\n", "", "vector", "=", "np", ".", "array", "(", "vector", ")", "\n", "vectors", ".", "append", "(", "vector", ")", "\n", "", "return", "np", ".", "array", "(", "vectors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils_float_string.str_utils": [[32, 52], ["text.split", "encoded_text[].split", "encoded_text[].split", "encoded_text[].split", "encoded_text[].split"], "function", ["None"], ["", "def", "str_utils", "(", "text", "=", "\"\"", ",", "speaker_id", "=", "None", ",", "utterances", "=", "None", ",", "utt_id", "=", "None", ",", "emotion", "=", "None", ",", "mode", "=", "'encode'", ")", ":", "\n", "    ", "if", "emotion", "is", "None", ":", "\n", "        ", "emotion", "=", "[", "]", "\n", "", "if", "utt_id", "is", "None", ":", "\n", "        ", "utt_id", "=", "[", "]", "\n", "", "if", "utterances", "is", "None", ":", "\n", "        ", "utterances", "=", "[", "]", "\n", "", "if", "speaker_id", "is", "None", ":", "\n", "        ", "speaker_id", "=", "[", "]", "\n", "", "if", "mode", "==", "'encode'", ":", "\n", "        ", "text", "=", "\"$$$$\"", ".", "join", "(", "speaker_id", ")", "+", "\"?????\"", "+", "\"$$$$\"", ".", "join", "(", "utterances", ")", "+", "\"?????\"", "+", "\"$$$$\"", ".", "join", "(", "utt_id", ")", "+", "\"?????\"", "+", "\"$$$$\"", ".", "join", "(", "emotion", ")", "\n", "return", "text", "\n", "", "else", ":", "\n", "        ", "encoded_text", "=", "text", ".", "split", "(", "\"?????\"", ")", "\n", "speaker_id", "=", "encoded_text", "[", "0", "]", ".", "split", "(", "\"$$$$\"", ")", "\n", "utterances", "=", "encoded_text", "[", "1", "]", ".", "split", "(", "\"$$$$\"", ")", "\n", "utt_id", "=", "encoded_text", "[", "2", "]", ".", "split", "(", "\"$$$$\"", ")", "\n", "emotion", "=", "encoded_text", "[", "3", "]", ".", "split", "(", "\"$$$$\"", ")", "\n", "return", "speaker_id", ",", "utterances", ",", "utt_id", ",", "emotion", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.training_utils.keras_callbacks": [[4, 12], ["tensorflow.keras.callbacks.TensorBoard", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.callbacks.ReduceLROnPlateau", "tensorflow.keras.callbacks.EarlyStopping"], "function", ["None"], ["def", "keras_callbacks", "(", "con_model_name", ",", "logdir", ")", ":", "\n", "    ", "tb_logging", "=", "TensorBoard", "(", "log_dir", "=", "logdir", ")", "\n", "ck_pts", "=", "ModelCheckpoint", "(", "con_model_name", ",", "monitor", "=", "'val_loss'", ",", "save_best_only", "=", "True", ")", "\n", "rdc_lr", "=", "ReduceLROnPlateau", "(", "monitor", "=", "'val_loss'", ",", "factor", "=", "0.1", ",", "patience", "=", "3", ",", "verbose", "=", "0", ",", "\n", "mode", "=", "'auto'", ",", "min_delta", "=", "0.0001", ",", "cooldown", "=", "0", ",", "min_lr", "=", "0", ")", "\n", "early_stopper", "=", "EarlyStopping", "(", "patience", "=", "10", ")", "\n", "cbs", "=", "[", "ck_pts", ",", "rdc_lr", ",", "tb_logging", ",", "early_stopper", "]", "\n", "return", "cbs", "\n", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils.categorize_raw_data": [[7, 20], ["enumerate", "collections.Counter().keys", "tag.append", "num.append", "y_train.append", "y_test.append", "tag.index", "tag.index", "collections.Counter"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_emb_server.index", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_emb_server.index"], ["def", "categorize_raw_data", "(", "Ztrain", ",", "Ztest", ")", ":", "\n", "# global i, Y_train, Y_test", "\n", "    ", "tag", ",", "num", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "(", "Counter", "(", "Ztrain", ")", ")", ".", "keys", "(", ")", ")", ":", "\n", "        ", "tag", ".", "append", "(", "j", ")", "\n", "num", ".", "append", "(", "i", ")", "\n", "", "y_train", "=", "[", "]", "\n", "for", "i", "in", "Ztrain", ":", "\n", "        ", "y_train", ".", "append", "(", "tag", ".", "index", "(", "i", ")", ")", "\n", "", "y_test", "=", "[", "]", "\n", "for", "i", "in", "Ztest", ":", "\n", "        ", "y_test", ".", "append", "(", "tag", ".", "index", "(", "i", ")", ")", "\n", "", "return", "tag", ",", "num", ",", "y_train", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils.read_files": [[22, 35], ["open", "csv.DictReader", "S.append", "X.append", "Y.append", "Z.append"], "function", ["None"], ["", "def", "read_files", "(", "filePath", ")", ":", "\n", "# READ FILE", "\n", "    ", "X", ",", "Y", ",", "Z", ",", "S", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "with", "open", "(", "filePath", ")", "as", "csvfile", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "csvfile", ")", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "if", "row", "[", "'DamslActTag'", "]", "!=", "'+'", ":", "\n", "                ", "S", ".", "append", "(", "row", "[", "'CallerID'", "]", ")", "\n", "X", ".", "append", "(", "row", "[", "'Text'", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "'ActTag'", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "'DamslActTag'", "]", ")", "\n", "", "", "", "return", "S", ",", "X", ",", "Y", ",", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils.prepare_data": [[37, 50], ["range", "dataX.append", "numpy.array().squeeze", "dataY.append", "numpy.array().squeeze", "numpy.array", "len", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "prepare_data", "(", "x", ",", "y", ",", "seq_length", ",", "with_y", "=", "True", ")", ":", "\n", "    ", "dataX", "=", "[", "]", "\n", "dataY", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "x", ")", "-", "seq_length", "+", "1", ",", "1", ")", ":", "\n", "        ", "seq_in", "=", "x", "[", "i", ":", "i", "+", "seq_length", "]", "\n", "dataX", ".", "append", "(", "[", "seq_in", "]", ")", "\n", "if", "with_y", ":", "\n", "            ", "seq_out", "=", "y", "[", "i", "+", "seq_length", "-", "1", "]", "\n", "dataY", ".", "append", "(", "seq_out", ")", "\n", "", "", "if", "with_y", ":", "\n", "        ", "return", "np", ".", "array", "(", "dataX", ")", ".", "squeeze", "(", "axis", "=", "1", ")", ",", "np", ".", "array", "(", "dataY", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array", "(", "dataX", ")", ".", "squeeze", "(", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils.cat_3classes": [[52, 63], ["y_train.append", "y_train.append", "y_train.append"], "function", ["None"], ["", "", "def", "cat_3classes", "(", "y_avg", ")", ":", "\n", "    ", "y_train", "=", "[", "]", "\n", "threshold", "=", "0.05", "\n", "for", "item", "in", "y_avg", ":", "\n", "        ", "if", "item", ">=", "threshold", ":", "\n", "            ", "y_train", ".", "append", "(", "0", ")", "\n", "", "elif", "-", "threshold", "<", "item", "<", "threshold", ":", "\n", "            ", "y_train", ".", "append", "(", "1", ")", "\n", "", "elif", "item", "<=", "-", "threshold", ":", "\n", "            ", "y_train", ".", "append", "(", "2", ")", "\n", "", "", "return", "y_train", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils.returnlist": [[65, 70], ["open", "open.readlines", "open.close"], "function", ["None"], ["", "def", "returnlist", "(", "filename", ")", ":", "\n", "    ", "fo", "=", "open", "(", "filename", ",", "\"r\"", ")", "\n", "lines", "=", "fo", ".", "readlines", "(", ")", "\n", "fo", ".", "close", "(", ")", "\n", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils.padSequences": [[72, 87], ["numpy.array", "len", "new_x.append", "len", "range", "numpy.append().reshape", "len", "new_x.append", "len", "new_x.append", "numpy.append", "len"], "function", ["None"], ["", "def", "padSequences", "(", "x", ",", "toPadding", ")", ":", "\n", "    ", "new_x", "=", "[", "]", "\n", "for", "item", "in", "x", ":", "\n", "        ", "if", "len", "(", "item", ")", ">", "20", ":", "\n", "            ", "new_x", ".", "append", "(", "item", "[", "0", ":", "20", "]", ")", "\n", "", "elif", "len", "(", "item", ")", "<", "20", ":", "\n", "# print(item.shape)", "\n", "            ", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "                ", "item", "=", "np", ".", "append", "(", "[", "item", "]", ",", "toPadding", ")", ".", "reshape", "(", "len", "(", "item", ")", "+", "1", ",", "1024", ")", "\n", "if", "len", "(", "item", ")", "==", "20", ":", "\n", "                    ", "new_x", ".", "append", "(", "item", ")", "\n", "", "", "", "elif", "len", "(", "item", ")", "==", "20", ":", "\n", "            ", "new_x", ".", "append", "(", "item", "[", "0", ":", "20", "]", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "new_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.src.utils.padSequencesKeras": [[89, 91], ["keras_preprocessing.sequence.pad_sequences"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.pad_sequences"], ["", "def", "padSequencesKeras", "(", "x", ",", "max_len", ",", "toPadding", ")", ":", "\n", "    ", "return", "sequence", ".", "pad_sequences", "(", "x", ",", "max_len", ",", "'float32'", ",", "value", "=", "toPadding", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.results.read_predictions_utils.labels_to_indices": [[4, 9], ["numpy.array", "indices.append", "classes.index"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_emb_server.index"], ["def", "labels_to_indices", "(", "labels", ",", "classes", ")", ":", "\n", "    ", "indices", "=", "[", "]", "\n", "for", "item", "in", "labels", ":", "\n", "        ", "indices", ".", "append", "(", "classes", ".", "index", "(", "item", ")", ")", "\n", "", "return", "np", ".", "array", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.results.read_predictions_utils.read_all_predictions": [[11, 21], ["numpy.load", "numpy.load", "numpy.load", "numpy.load"], "function", ["None"], ["", "def", "read_all_predictions", "(", ")", ":", "\n", "    ", "con_elmo_embs", "=", "np", ".", "load", "(", "'results/con_out.npy'", ")", "\n", "con_diswiz", "=", "np", ".", "load", "(", "'results/con_out_diswiz.npy'", ")", "\n", "non_con_elmo_embs", "=", "np", ".", "load", "(", "'results/non_con_out.npy'", ")", "\n", "non_con_diswiz", "=", "np", ".", "load", "(", "'results/non_con_out_diswiz.npy'", ")", "\n", "con_elmo_embs", "[", "0", "]", "=", "non_con_elmo_embs", "[", "0", "]", "\n", "con_elmo_embs", "[", "1", "]", "=", "non_con_elmo_embs", "[", "1", "]", "\n", "con_diswiz", "[", "0", "]", "=", "non_con_diswiz", "[", "0", "]", "\n", "con_diswiz", "[", "1", "]", "=", "non_con_diswiz", "[", "1", "]", "\n", "return", "con_elmo_embs", ",", "con_diswiz", ",", "non_con_elmo_embs", ",", "non_con_diswiz", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.models.get_activations": [[10, 36], ["isinstance", "keras.backend.function", "list_inputs.extend", "list_inputs.append", "activations.append", "func", "keras.backend.learning_phase"], "function", ["None"], ["from", "tensorflow", ".", "python", ".", "keras", ".", "engine", ".", "training", "import", "Model", "\n", "from", "tensorflow", ".", "keras", ".", "layers", "import", "SimpleRNN", ",", "LSTM", ",", "Input", ",", "Bidirectional", ",", "TimeDistributed", ",", "Conv1D", ",", "MaxPooling1D", ",", "Concatenate", ",", "Permute", ",", "Reshape", ",", "Dense", ",", "Lambda", ",", "RepeatVector", ",", "multiply", ",", "Flatten", ",", "Dropout", "\n", "\n", "\n", "def", "attention_3d_block", "(", "inputs", ",", "seq_length", ",", "single_attention_vector", ")", ":", "\n", "# inputs.shape = (batch_size, seq_length, input_dim)", "\n", "    ", "input_dim", "=", "int", "(", "K", ".", "int_shape", "(", "inputs", ")", "[", "2", "]", ")", "\n", "a", "=", "Permute", "(", "(", "2", ",", "1", ")", ")", "(", "inputs", ")", "\n", "# Reshape has no purpose except making the code more explicit and clear:", "\n", "a", "=", "Reshape", "(", "(", "input_dim", ",", "seq_length", ")", ")", "(", "a", ")", "\n", "a", "=", "Dense", "(", "seq_length", ",", "activation", "=", "'softmax'", ")", "(", "a", ")", "\n", "if", "single_attention_vector", ":", "\n", "        ", "a", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "mean", "(", "x", ",", "axis", "=", "1", ")", ",", "name", "=", "'dim_reduction'", ")", "(", "a", ")", "\n", "a", "=", "RepeatVector", "(", "input_dim", ")", "(", "a", ")", "\n", "# when you apply a Dense layer, it applies to the last dimension of your tensor.", "\n", "# Permute is used to apply a Dense layer along the time axis (by default it's axis=1 in Keras)", "\n", "", "a_probs", "=", "Permute", "(", "(", "2", ",", "1", ")", ",", "name", "=", "'attention_vec'", ")", "(", "a", ")", "\n", "output_attention_mul", "=", "multiply", "(", "[", "inputs", ",", "a_probs", "]", ",", "name", "=", "'attention_mul'", ")", "\n", "return", "output_attention_mul", "\n", "\n", "\n", "", "def", "context_model", "(", "seq_len", ",", "max_seq_length", ",", "emb_dim", ",", "classes", ",", "nodes", "=", "128", ",", "dropout", "=", "0.2", ",", "\n", "single_attention_vector", "=", "False", ")", ":", "\n", "# Encode each time step  # dummyModel(3, 20, 1024, 42)", "\n", "    ", "in_sentence", "=", "Input", "(", "shape", "=", "(", "max_seq_length", ",", "emb_dim", ",", ")", ")", "# , dtype='int64')", "\n", "# embedded_sentence = Embedding(len(word_index) + 1, emb_dim, trainable=True)(in_sentence)", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.models.utt_model": [[38, 54], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.compile", "keras.layers.Embedding", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.layers.Dense", "keras.layers.LSTM", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.GRU", "len"], "function", ["None"], ["encoded_model", "=", "Model", "(", "in_sentence", ",", "lstm_sentence", ")", "\n", "encoded_model", ".", "summary", "(", ")", "\n", "\n", "# Model contextual time steps", "\n", "sequence_input", "=", "Input", "(", "shape", "=", "(", "seq_len", ",", "max_seq_length", ",", "emb_dim", ")", ")", "\n", "seq_encoded", "=", "TimeDistributed", "(", "encoded_model", ")", "(", "sequence_input", ")", "\n", "seq_encoded", "=", "Dropout", "(", "dropout", ")", "(", "seq_encoded", ")", "\n", "# Encode entire sentence", "\n", "seq_encoded", "=", "LSTM", "(", "nodes", ",", "return_sequences", "=", "True", ")", "(", "seq_encoded", ")", "\n", "# Apply attention layer", "\n", "attention_mul", "=", "attention_3d_block", "(", "seq_encoded", ",", "seq_len", ",", "single_attention_vector", ")", "\n", "attention_mul", "=", "Flatten", "(", ")", "(", "attention_mul", ")", "\n", "# Prediction", "\n", "prediction", "=", "Dense", "(", "classes", ",", "activation", "=", "'softmax'", ")", "(", "attention_mul", ")", "\n", "\n", "model", "=", "Model", "(", "sequence_input", ",", "prediction", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'rmsprop'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.models.utt_context_model": [[56, 71], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.compile", "keras.layers.Embedding", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.layers.Dense", "keras.layers.LSTM", "keras.layers.GRU", "len"], "function", ["None"], ["return", "model", "\n", "\n", "\n", "", "def", "context_model_att", "(", "seq_len", ",", "max_seq_length", ",", "emb_dim", ",", "classes", ",", "nodes", "=", "128", ",", "dropout", "=", "0.2", ",", "\n", "single_attention_vector", "=", "False", ",", "train_with_mean", "=", "False", ")", ":", "\n", "# Encode each time step  # dummyModel(3, 20, 1024, 42)", "\n", "    ", "in_sentence", "=", "Input", "(", "shape", "=", "(", "max_seq_length", ",", "emb_dim", ",", ")", ")", "# , dtype='int64')", "\n", "# embedded_sentence = Embedding(len(word_index) + 1, emb_dim, trainable=True)(in_sentence)", "\n", "lstm_sentence", "=", "LSTM", "(", "nodes", ",", "return_sequences", "=", "True", ")", "(", "in_sentence", ")", "\n", "# Apply attention layer", "\n", "attention_mul", "=", "attention_3d_block", "(", "lstm_sentence", ",", "max_seq_length", ",", "single_attention_vector", ")", "\n", "# encoded_sentence = Flatten()(attention_mul)", "\n", "if", "train_with_mean", ":", "\n", "        ", "mean_vectors_norms", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "mean", "(", "x", ",", "axis", "=", "1", ")", ",", "name", "=", "'dim_reduction1'", ")", "(", "attention_mul", ")", "\n", "mean_vectors", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "mean", "(", "x", ",", "axis", "=", "1", ")", ",", "name", "=", "'dim_reduction2'", ")", "(", "in_sentence", ")", "\n", "concatenate_sentence", "=", "Concatenate", "(", ")", "(", "[", "mean_vectors_norms", ",", "mean_vectors", "]", ")", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.models.att_model": [[73, 99], ["keras.layers.Input", "keras.layers.merge", "keras.models.Model", "keras.optimizers.Adam", "keras.models.Model.compile", "print", "keras.layers.Embedding", "keras.layers.Bidirectional", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Flatten", "keras.layers.Activation", "keras.layers.RepeatVector", "keras.layers.Permute", "keras.layers.Lambda", "keras.layers.Dense", "keras.models.Model.summary", "keras.layers.GRU", "len", "keras.backend.sum", "keras.regularizers.l2"], "function", ["None"], ["", "else", ":", "\n", "        ", "encoded_sentence", "=", "Flatten", "(", ")", "(", "attention_mul", ")", "\n", "encoded_model", "=", "Model", "(", "in_sentence", ",", "encoded_sentence", ")", "\n", "", "encoded_model", ".", "summary", "(", ")", "\n", "\n", "# Model contextual time steps", "\n", "sequence_input", "=", "Input", "(", "shape", "=", "(", "seq_len", ",", "max_seq_length", ",", "emb_dim", ")", ")", "\n", "seq_encoded", "=", "TimeDistributed", "(", "encoded_model", ")", "(", "sequence_input", ")", "\n", "seq_encoded", "=", "Dropout", "(", "dropout", ")", "(", "seq_encoded", ")", "\n", "# Encode entire sentence", "\n", "seq_encoded", "=", "LSTM", "(", "nodes", ",", "return_sequences", "=", "True", ")", "(", "seq_encoded", ")", "\n", "# Apply attention layer", "\n", "attention_mul", "=", "attention_3d_block", "(", "seq_encoded", ",", "seq_len", ",", "single_attention_vector", ")", "\n", "attention_mul", "=", "Flatten", "(", "name", "=", "'flatten_attention'", ")", "(", "attention_mul", ")", "\n", "# Prediction", "\n", "prediction", "=", "Dense", "(", "classes", ",", "activation", "=", "'softmax'", ")", "(", "attention_mul", ")", "\n", "\n", "model", "=", "Model", "(", "sequence_input", ",", "prediction", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'rmsprop'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "return", "model", "\n", "\n", "\n", "# context_model(3, 20, 1024, 42)", "\n", "\n", "", "def", "model_attention_applied_after_lstm", "(", "seq_length", ",", "emb_dim", ",", "num_classes", ",", "single_attention_vector", "=", "False", ")", ":", "\n", "    ", "inputs", "=", "Input", "(", "shape", "=", "(", "seq_length", ",", "emb_dim", ",", ")", ")", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.models.dummyModel": [[101, 124], ["keras.layers.Input", "keras.models.Model", "keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.layers.Embedding", "keras.layers.LSTM", "keras.layers.TimeDistributed", "keras.layers.Dropout", "keras.layers.LSTM", "keras.layers.Dense", "len"], "function", ["None"], ["# lstm_out      = (SimpleRNN(lstm_units, return_sequences=True))(inputs)", "\n", "lstm_out", "=", "LSTM", "(", "lstm_units", ",", "return_sequences", "=", "True", ")", "(", "inputs", ")", "\n", "attention_mul", "=", "attention_3d_block", "(", "lstm_out", ",", "seq_length", ",", "single_attention_vector", ")", "\n", "attention_mul", "=", "Flatten", "(", ")", "(", "attention_mul", ")", "\n", "# inter_rep     = Dense(100)(attention_mul)", "\n", "output", "=", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", "(", "attention_mul", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "inputs", "]", ",", "outputs", "=", "output", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "return", "model", "\n", "\n", "\n", "# model_attention_applied_after_lstm(3, 1024, 42, True)", "\n", "\n", "", "def", "model_attention_applied_after_bilstm", "(", "seq_length", ",", "emb_dim", ",", "num_classes", ",", "single_attention_vector", "=", "False", ")", ":", "\n", "    ", "inputs", "=", "Input", "(", "shape", "=", "(", "seq_length", ",", "emb_dim", ",", ")", ")", "\n", "lstm_units", "=", "64", "\n", "# lstm_out      = (SimpleRNN(lstm_units, return_sequences=True))(inputs)", "\n", "lstm_out", "=", "Bidirectional", "(", "LSTM", "(", "lstm_units", ",", "return_sequences", "=", "True", ")", ")", "(", "inputs", ")", "\n", "attention_mul", "=", "attention_3d_block", "(", "lstm_out", ",", "seq_length", ",", "single_attention_vector", ")", "\n", "attention_mul", "=", "Flatten", "(", "name", "=", "'flatten_attention'", ")", "(", "attention_mul", ")", "\n", "# inter_rep     = Dense(100)(attention_mul)", "\n", "output", "=", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", "(", "attention_mul", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "inputs", "]", ",", "outputs", "=", "output", ")", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.models.contex_gru": [[126, 149], ["keras.layers.Input", "keras.models.Model", "keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.layers.Embedding", "keras.layers.Bidirectional", "keras.layers.TimeDistributed", "keras.layers.Dropout", "keras.layers.Bidirectional", "keras.layers.Dense", "keras.layers.GRU", "keras.layers.GRU", "len"], "function", ["None"], ["print", "(", "model", ".", "summary", "(", ")", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "model_attention_applied_after_bisrnn", "(", "seq_length", ",", "emb_dim", ",", "num_classes", ",", "single_attention_vector", "=", "False", ")", ":", "\n", "    ", "inputs", "=", "Input", "(", "shape", "=", "(", "seq_length", ",", "emb_dim", ",", ")", ")", "\n", "lstm_units", "=", "64", "\n", "# lstm_out      = (SimpleRNN(lstm_units, return_sequences=True))(inputs)", "\n", "lstm_out", "=", "Bidirectional", "(", "SimpleRNN", "(", "lstm_units", ",", "return_sequences", "=", "True", ")", ")", "(", "inputs", ")", "\n", "attention_mul", "=", "attention_3d_block", "(", "lstm_out", ",", "seq_length", ",", "single_attention_vector", ")", "\n", "attention_mul", "=", "Flatten", "(", ")", "(", "attention_mul", ")", "\n", "# inter_rep     = Dense(100)(attention_mul)", "\n", "output", "=", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", "(", "attention_mul", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "inputs", "]", ",", "outputs", "=", "output", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "model_for_utterance_level", "(", "seq_length", ",", "emb_dim", ",", "num_classes", ",", "single_attention_vector", "=", "False", ")", ":", "\n", "    ", "inputs", "=", "Input", "(", "shape", "=", "(", "seq_length", ",", "emb_dim", ",", ")", ")", "\n", "lstm_units", "=", "64", "\n", "# lstm_out      = (SimpleRNN(lstm_units, return_sequences=True))(inputs)", "\n", "lstm_out", "=", "Bidirectional", "(", "SimpleRNN", "(", "lstm_units", ",", "return_sequences", "=", "True", ")", ")", "(", "inputs", ")", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.models.contex_guru": [[151, 179], ["keras.layers.Input", "keras.models.Model", "keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.layers.TimeDistributed", "keras.layers.Dropout", "keras.layers.LSTM", "keras.layers.Dense", "encoded_model.get_layer"], "function", ["None"], ["attention_mul", "=", "Flatten", "(", ")", "(", "attention_mul", ")", "\n", "# inter_rep     = Dense(100)(attention_mul)", "\n", "output", "=", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", "(", "attention_mul", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "inputs", "]", ",", "outputs", "=", "output", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "non_context_model_for_utterance_level", "(", "emb_dim", ",", "num_classes", ")", ":", "\n", "    ", "inputs", "=", "Input", "(", "shape", "=", "(", "emb_dim", ",", ")", ")", "\n", "units", "=", "128", "\n", "reshape_features", "=", "Reshape", "(", "(", "32", ",", "32", ")", ")", "(", "inputs", ")", "\n", "hidden_out", "=", "Conv1D", "(", "units", ",", "kernel_size", "=", "3", ",", "activation", "=", "'relu'", ")", "(", "reshape_features", ")", "\n", "hidden_out", "=", "Conv1D", "(", "units", ",", "kernel_size", "=", "3", ",", "activation", "=", "'relu'", ")", "(", "hidden_out", ")", "\n", "hidden_out_pooling", "=", "MaxPooling1D", "(", "pool_size", "=", "2", ")", "(", "hidden_out", ")", "\n", "inter_rep", "=", "Flatten", "(", ")", "(", "hidden_out_pooling", ")", "\n", "inter_rep", "=", "Dense", "(", "100", ")", "(", "inter_rep", ")", "\n", "output", "=", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", "(", "inter_rep", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "inputs", "]", ",", "outputs", "=", "output", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "context_model_att_with_pt_encoder", "(", "seq_len", ",", "max_seq_length", ",", "emb_dim", ",", "classes", ",", "encoded_model", ",", "\n", "nodes", "=", "128", ",", "dropout", "=", "0.2", ",", "single_attention_vector", "=", "False", ")", ":", "\n", "\n", "# Model contextual time steps", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.main_context_predictor.diswiz_model_functions": [[14, 80], ["diswiz.utils.read_files", "diswiz.utils.read_files", "diswiz.utils.prepare_targets", "keras.utils.to_categorical", "keras.utils.to_categorical", "keras.preprocessing.text.Tokenizer", "keras.preprocessing.text.Tokenizer.fit_on_texts", "print", "keras.preprocessing.text.Tokenizer.texts_to_sequences", "keras.preprocessing.sequence.pad_sequences", "print", "print", "diswiz.models.utt_model", "diswiz.models.utt_model.summary", "diswiz.models.utt_model.load_weights", "diswiz.utils.preparedata", "diswiz.models.dummyModel", "diswiz.models.dummyModel.summary", "diswiz.models.dummyModel.load_weights", "diswiz.models.utt_model.evaluate", "print", "diswiz.models.dummyModel.evaluate", "print", "keras.preprocessing.text.Tokenizer.texts_to_sequences", "keras.preprocessing.sequence.pad_sequences", "print", "print", "keras.callbacks.ModelCheckpoint", "diswiz.models.utt_model.fit", "diswiz.models.utt_model.load_weights", "print", "diswiz.utils.preparedata", "print", "print", "keras.callbacks.ModelCheckpoint", "diswiz.models.dummyModel.fit", "diswiz.models.dummyModel.load_weights", "print", "len", "diswiz.models.utt_model.evaluate", "diswiz.models.dummyModel.evaluate"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.read_files", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.read_files", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.prepare_targets", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.pad_sequences", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.models.utt_model", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.preparedata", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.models.dummyModel", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.pad_sequences", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.preparedata"], ["def", "diswiz_model_functions", "(", "train_data", ",", "test_data", ",", "\n", "param_file_nc", ",", "param_file_con", ",", "\n", "param_file_nc_new", ",", "param_file_con_new", ",", "\n", "train", "=", "False", ",", "epochs", "=", "5", ")", ":", "\n", "    ", "sid_train", ",", "x_train_txt", ",", "y_train_txt", ",", "z_train_txt", "=", "read_files", "(", "train_data", ")", "\n", "sid_test", ",", "x_test_txt", ",", "y_test_txt", ",", "z_test_txt", "=", "read_files", "(", "test_data", ")", "\n", "tag", ",", "num", ",", "y_test", ",", "y_train", "=", "prepare_targets", "(", "z_train_txt", ",", "z_test_txt", ")", "\n", "y_test", "=", "to_categorical", "(", "y_test", ",", "42", ")", "\n", "y_train", "=", "to_categorical", "(", "y_train", ",", "42", ")", "\n", "texts", "=", "x_train_txt", "+", "x_test_txt", "\n", "tokenizer", "=", "Tokenizer", "(", "nb_words", "=", "MAX_NB_WORDS", ")", "# , filters='\"#$%&()*+-/<=>@[\\\\]^_`{|}~\\t\\n',split='')", "\n", "tokenizer", ".", "fit_on_texts", "(", "texts", ")", "\n", "word_index", "=", "tokenizer", ".", "word_index", "\n", "print", "(", "'Found %s unique tokens.'", "%", "len", "(", "word_index", ")", ")", "\n", "\n", "# Non-context test data", "\n", "x_test", "=", "tokenizer", ".", "texts_to_sequences", "(", "x_test_txt", ")", "\n", "x_test", "=", "pad_sequences", "(", "x_test", ",", "maxlen", "=", "MAX_SEQUENCE_LENGTH", ")", "\n", "print", "(", "'Shape of input tensor:'", ",", "x_test", ".", "shape", ")", "\n", "print", "(", "'Shape of label tensor:'", ",", "y_test", ".", "shape", ")", "\n", "\n", "# Non-context model with params", "\n", "non_con_model", "=", "utt_model", "(", "word_index", ",", "EMBEDDING_DIM", ",", "y_test", ".", "shape", "[", "1", "]", ",", "MAX_SEQUENCE_LENGTH", ",", "\n", "nodes", "=", "128", ",", "dropout", "=", "0.2", ",", "W_reg", "=", "0.01", ",", "lstm", "=", "True", ")", "\n", "non_con_model", ".", "summary", "(", ")", "\n", "non_con_model", ".", "load_weights", "(", "param_file_nc", ")", "\n", "\n", "# Context test data", "\n", "seq_len", "=", "3", "\n", "x_test_con", ",", "y_test_con", "=", "preparedata", "(", "x_test", ",", "y_test", ",", "seq_len", ")", "\n", "\n", "# Context model", "\n", "context_model", "=", "dummyModel", "(", "seq_len", ",", "word_index", ",", "EMBEDDING_DIM", ",", "y_test_con", ".", "shape", "[", "1", "]", ",", "MAX_SEQUENCE_LENGTH", ",", "\n", "nodes", "=", "128", ",", "dropout", "=", "0.2", ",", "W_reg", "=", "0.01", ")", "\n", "context_model", ".", "summary", "(", ")", "\n", "context_model", ".", "load_weights", "(", "param_file_con", ")", "\n", "if", "not", "train", ":", "\n", "# Non-context model evaluation", "\n", "        ", "non_con_model_acc", "=", "non_con_model", ".", "evaluate", "(", "x_test", ",", "y_test", ",", "verbose", "=", "2", ")", "\n", "print", "(", "'Non-con-model accuracy'", ",", "non_con_model_acc", ")", "\n", "\n", "# Context model evaluation", "\n", "con_model_acc", "=", "context_model", ".", "evaluate", "(", "x_test_con", ",", "y_test_con", ",", "verbose", "=", "2", ")", "\n", "print", "(", "'Non-con-model accuracy'", ",", "con_model_acc", ")", "\n", "", "else", ":", "\n", "        ", "x_train", "=", "tokenizer", ".", "texts_to_sequences", "(", "x_train_txt", ")", "\n", "x_train", "=", "pad_sequences", "(", "x_train", ",", "maxlen", "=", "MAX_SEQUENCE_LENGTH", ")", "\n", "print", "(", "'Shape of input tensor:'", ",", "x_train", ".", "shape", ")", "\n", "print", "(", "'Shape of label tensor:'", ",", "y_train", ".", "shape", ")", "\n", "\n", "# Train non-context model", "\n", "check_pointer", "=", "ModelCheckpoint", "(", "param_file_nc_new", ",", "save_best_only", "=", "True", ")", "\n", "non_con_model", ".", "fit", "(", "x_train", ",", "y_train", ",", "validation_split", "=", "0.15", ",", "epochs", "=", "epochs", ",", "\n", "callbacks", "=", "[", "check_pointer", "]", ",", "verbose", "=", "2", ")", "\n", "non_con_model", ".", "load_weights", "(", "param_file_nc_new", ")", "\n", "print", "(", "non_con_model", ".", "evaluate", "(", "x_test", ",", "y_test", ")", ")", "\n", "\n", "x_train_con", ",", "y_train_con", "=", "preparedata", "(", "x_train", ",", "y_train", ",", "seq_len", ")", "\n", "print", "(", "'Shape of input tensor:'", ",", "x_train_con", ".", "shape", ")", "\n", "print", "(", "'Shape of label tensor:'", ",", "y_train_con", ".", "shape", ")", "\n", "# Train context model", "\n", "check_pointer", "=", "ModelCheckpoint", "(", "param_file_con_new", ",", "save_best_only", "=", "True", ")", "\n", "context_model", ".", "fit", "(", "x_train_con", ",", "y_train_con", ",", "validation_split", "=", "0.15", ",", "epochs", "=", "epochs", ",", "\n", "callbacks", "=", "[", "check_pointer", "]", ",", "verbose", "=", "2", ")", "\n", "context_model", ".", "load_weights", "(", "param_file_con_new", ")", "\n", "print", "(", "context_model", ".", "evaluate", "(", "x_test_con", ",", "y_test_con", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.main.predict_das_diswiz": [[9, 49], ["pad_sequences", "non_con_model.predict", "prepare_output", "non_con_das.append", "non_con_da_confs.append", "utts_s.append", "DAname_s.append", "confs_s.append", "higher_DA_class_s.append", "len", "pad_sequences", "diswiz.utils.prepare_input_data", "tokenizer.texts_to_sequences", "str", "tokenizer.texts_to_sequences", "context_model.predict", "prepare_output", "con_das.append", "con_da_confs.append", "Con_DANames.append", "Con_confs_s.append", "Con_higher_DA_class_s.append", "np.array", "predictions[].argmax", "predictions[].argmax", "predictions[].argmax", "predictions[].argmax"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.pad_sequences", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils_server.prepare_output", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.pad_sequences", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.prepare_input_data", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils_server.prepare_output"], ["max_seq_len", "=", "20", "\n", "\n", "trainFile", "=", "'data/swda-actags_train_speaker.csv'", "\n", "testFile", "=", "'data/swda-actags_test_speaker.csv'", "\n", "SidTr", ",", "Xtrain", ",", "Ytrain", ",", "Ztrain", "=", "read_files", "(", "trainFile", ")", "\n", "SidTest", ",", "Xtest", ",", "Ytest", ",", "Ztest", "=", "read_files", "(", "testFile", ")", "\n", "print", "(", "len", "(", "Xtest", ")", ",", "len", "(", "Xtrain", ")", ")", "\n", "\n", "x_test", "=", "pickle", ".", "load", "(", "open", "(", "\"features/x_test_tokens.p\"", ",", "\"rb\"", ")", ")", "\n", "x_train", "=", "pickle", ".", "load", "(", "open", "(", "\"features/x_train_tokens.p\"", ",", "\"rb\"", ")", ")", "\n", "\n", "toPadding", "=", "np", ".", "load", "(", "'features/pad_a_token.npy'", ")", "\n", "X_Test", "=", "np", ".", "load", "(", "'features/X_test_elmo_features.npy'", ")", "\n", "X_Test", "=", "padSequencesKeras", "(", "X_Test", ",", "max_seq_len", ",", "toPadding", ")", "\n", "\n", "tags", ",", "num", ",", "Y_train", ",", "Y_test", "=", "categorize_raw_data", "(", "Ztrain", ",", "Ztest", ")", "\n", "target_category_test", "=", "to_categorical", "(", "Y_test", ",", "len", "(", "tags", ")", ")", "\n", "\n", "partition", "=", "{", "'train'", ":", "[", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", ",", "'5'", ",", "'6'", ",", "'7'", ",", "'8'", "]", "}", "\n", "# Parameters", "\n", "params", "=", "{", "'dim'", ":", "(", "32", ",", "32", ",", "32", ")", ",", "'batch_size'", ":", "64", ",", "'n_classes'", ":", "len", "(", "tags", ")", ",", "'n_channels'", ":", "1", ",", "'shuffle'", ":", "False", "}", "\n", "training_generator", "=", "DataGenerator", "(", "partition", "[", "'train'", "]", ",", "Y_train", ",", "**", "params", ")", "\n", "\n", "SINGLE_ATTENTION_VECTOR", "=", "False", "\n", "model", "=", "model_attention_applied_after_bilstm", "(", "20", ",", "1024", ",", "42", ",", "SINGLE_ATTENTION_VECTOR", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "callbacks", "=", "[", "ModelCheckpoint", "(", "filepath", "=", "'weight_parameters'", ",", "save_best_only", "=", "True", ")", "]", "# EarlyStopping(patience=5),", "\n", "model", ".", "load_weights", "(", "'params/weight_parameters'", ")", "\n", "evaluation", "=", "model", ".", "evaluate", "(", "X_Test", ",", "target_category_test", ",", "verbose", "=", "2", ")", "\n", "print", "(", "\"Test results for non-context model - accuracy: {}\"", ".", "format", "(", "evaluation", "[", "1", "]", ")", ")", "\n", "\n", "# Preparing for contextual training", "\n", "seq_length", "=", "3", "\n", "X_test_con", ",", "Y_test_con", "=", "prepare_data", "(", "X_Test", ",", "target_category_test", ",", "seq_length", ")", "\n", "\n", "EMBEDDING_DIM", "=", "X_test_con", ".", "shape", "[", "3", "]", "\n", "INPUT_DIM", "=", "X_test_con", ".", "shape", "[", "2", "]", "\n", "TIME_STEPS", "=", "X_test_con", ".", "shape", "[", "1", "]", "\n", "NUM_CLASSES", "=", "Y_test_con", ".", "shape", "[", "1", "]", "\n", "# if True, the attention vector is shared across the input_dimensions where the attention is applied.", "\n", "SINGLE_ATTENTION_VECTOR", "=", "False", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils_server.highDAClass": [[4, 23], ["None"], "function", ["None"], ["def", "highDAClass", "(", "da", ",", "DAs", ")", ":", "\n", "    ", "if", "da", "in", "DAs", "[", "'Statement'", "]", ":", "\n", "        ", "return", "'Statement'", "\n", "", "elif", "da", "in", "DAs", "[", "'Questions'", "]", ":", "\n", "        ", "return", "'Questions'", "\n", "", "elif", "da", "in", "DAs", "[", "'Answers'", "]", ":", "\n", "        ", "return", "'Answers'", "\n", "", "elif", "da", "in", "DAs", "[", "'Agreement'", "]", ":", "\n", "        ", "return", "'Agreement'", "\n", "", "elif", "da", "in", "DAs", "[", "'BackwardFunction'", "]", ":", "\n", "        ", "return", "'Backward Function'", "\n", "", "elif", "da", "in", "DAs", "[", "'ForwardFunction'", "]", ":", "\n", "        ", "return", "'Forward Function'", "\n", "", "elif", "da", "in", "DAs", "[", "'CommInfoStatus'", "]", ":", "\n", "        ", "return", "'CommInfoStatus'", "\n", "", "elif", "da", "in", "DAs", "[", "'Other'", "]", ":", "\n", "        ", "return", "'Other'", "\n", "", "elif", "da", "in", "DAs", "[", "'NonSpeechVerbal'", "]", ":", "\n", "        ", "return", "'NonSpeechVerbal'", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils_server.returnDAname": [[37, 39], ["tag.index"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_emb_server.index"], ["def", "returnDAname", "(", "da", ",", "tag", ",", "DA_names", ")", ":", "\n", "    ", "return", "DA_names", "[", "tag", ".", "index", "(", "da", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils_server.prepare_output": [[99, 119], ["sorted", "range", "utils_server.highDAClass", "str_preds.append", "list", "tags.append", "numpy.array", "len", "str", "numpy.argsort", "sorted", "das.append", "DAnames.append", "confs.append", "utils_server.returnDAname", "numpy.argmax", "str", "sorted"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils_server.highDAClass", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils_server.returnDAname"], ["def", "prepare_output", "(", "predictions", ",", "tag", ",", "it_value", ")", ":", "\n", "    ", "str_preds", "=", "[", "]", "\n", "for", "item", "in", "sorted", "(", "predictions", "[", "0", "]", ",", "reverse", "=", "1", ")", ":", "\n", "        ", "str_preds", ".", "append", "(", "str", "(", "item", ")", ")", "\n", "", "tags", "=", "[", "]", "\n", "for", "item", "in", "list", "(", "np", ".", "argsort", "(", "predictions", "[", "0", "]", ")", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "tags", ".", "append", "(", "tag", "[", "item", "]", ")", "\n", "\n", "", "i", "=", "0", "\n", "booln", "=", "np", ".", "array", "(", "sorted", "(", "predictions", "[", "0", "]", ",", "reverse", "=", "1", ")", ")", ">", "0.07", "\n", "das", ",", "confs", ",", "DAnames", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "booln", ")", ")", ":", "\n", "        ", "if", "booln", "[", "i", "]", "==", "True", ":", "\n", "            ", "das", ".", "append", "(", "tags", "[", "i", "]", ")", "\n", "DAnames", ".", "append", "(", "returnDAname", "(", "tags", "[", "i", "]", ",", "tag", ",", "DA_names", ")", ")", "\n", "confs", ".", "append", "(", "str", "(", "sorted", "(", "predictions", "[", "0", "]", ",", "reverse", "=", "1", ")", "[", "i", "]", ")", "[", "0", ":", "4", "]", ")", "\n", "", "i", "+=", "1", "\n", "", "classes", "=", "highDAClass", "(", "tag", "[", "np", ".", "argmax", "(", "predictions", ")", "]", ",", "DAs", ")", "\n", "#    print(confs[0][0:5])", "\n", "return", "it_value", ",", "classes", ",", "DAnames", ",", "confs", "\n", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.read_files": [[6, 19], ["open", "csv.DictReader", "S.append", "X.append", "Y.append", "Z.append"], "function", ["None"], ["\n", "def", "categorize_raw_data", "(", "Ztrain", ",", "Ztest", ")", ":", "\n", "# global i, Y_train, Y_test", "\n", "    ", "tag", ",", "num", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "(", "Counter", "(", "Ztrain", ")", ")", ".", "keys", "(", ")", ")", ":", "\n", "        ", "tag", ".", "append", "(", "j", ")", "\n", "num", ".", "append", "(", "i", ")", "\n", "", "y_train", "=", "[", "]", "\n", "for", "i", "in", "Ztrain", ":", "\n", "        ", "y_train", ".", "append", "(", "tag", ".", "index", "(", "i", ")", ")", "\n", "", "y_test", "=", "[", "]", "\n", "for", "i", "in", "Ztest", ":", "\n", "        ", "y_test", ".", "append", "(", "tag", ".", "index", "(", "i", ")", ")", "\n", "", "return", "tag", ",", "num", ",", "y_train", ",", "y_test", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.preparedata": [[21, 30], ["range", "dataX.append", "dataY.append", "numpy.array().squeeze", "numpy.array", "len", "numpy.array"], "function", ["None"], ["\n", "", "def", "read_files", "(", "filePath", ")", ":", "\n", "# READ FILE", "\n", "    ", "X", ",", "Y", ",", "Z", ",", "S", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "with", "open", "(", "filePath", ")", "as", "csvfile", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "csvfile", ")", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "if", "row", "[", "'DamslActTag'", "]", "!=", "'+'", ":", "\n", "                ", "S", ".", "append", "(", "row", "[", "'CallerID'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.prepare_input_data": [[32, 40], ["print", "range", "print", "numpy.array().squeeze", "len", "dataX.append", "len", "numpy.array", "len"], "function", ["None"], ["Y", ".", "append", "(", "row", "[", "'ActTag'", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "'DamslActTag'", "]", ")", "\n", "", "", "", "return", "S", ",", "X", ",", "Y", ",", "Z", "\n", "\n", "\n", "", "def", "prepare_data", "(", "x", ",", "y", ",", "seq_length", ",", "with_y", "=", "True", ")", ":", "\n", "    ", "dataX", "=", "[", "]", "\n", "dataY", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "x", ")", "-", "seq_length", "+", "1", ",", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.cat_3classes": [[42, 53], ["y_train.append", "y_train.append", "y_train.append"], "function", ["None"], ["dataX", ".", "append", "(", "[", "seq_in", "]", ")", "\n", "if", "with_y", ":", "\n", "            ", "seq_out", "=", "y", "[", "i", "+", "seq_length", "-", "1", "]", "\n", "dataY", ".", "append", "(", "seq_out", ")", "\n", "", "", "if", "with_y", ":", "\n", "        ", "return", "np", ".", "array", "(", "dataX", ")", ".", "squeeze", "(", "axis", "=", "1", ")", ",", "np", ".", "array", "(", "dataY", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array", "(", "dataX", ")", ".", "squeeze", "(", "axis", "=", "1", ")", "\n", "\n", "\n", "", "", "def", "cat_3classes", "(", "y_avg", ")", ":", "\n", "    ", "y_train", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.prepare_targets": [[55, 69], ["enumerate", "collections.Counter().keys", "tag.append", "num.append", "Y_train.append", "Y_test.append", "tag.index", "tag.index", "collections.Counter"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_emb_server.index", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.None.elmo_emb_server.index"], ["for", "item", "in", "y_avg", ":", "\n", "        ", "if", "item", ">=", "threshold", ":", "\n", "            ", "y_train", ".", "append", "(", "0", ")", "\n", "", "elif", "-", "threshold", "<", "item", "<", "threshold", ":", "\n", "            ", "y_train", ".", "append", "(", "1", ")", "\n", "", "elif", "item", "<=", "-", "threshold", ":", "\n", "            ", "y_train", ".", "append", "(", "2", ")", "\n", "", "", "return", "y_train", "\n", "\n", "\n", "", "def", "returnlist", "(", "filename", ")", ":", "\n", "    ", "fo", "=", "open", "(", "filename", ",", "\"r\"", ")", "\n", "lines", "=", "fo", ".", "readlines", "(", ")", "\n", "fo", ".", "close", "(", ")", "\n", "return", "lines", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.returnlist": [[71, 76], ["open", "open.readlines", "open.close"], "function", ["None"], ["\n", "", "def", "padSequences", "(", "x", ",", "toPadding", ")", ":", "\n", "    ", "new_x", "=", "[", "]", "\n", "for", "item", "in", "x", ":", "\n", "        ", "if", "len", "(", "item", ")", ">", "20", ":", "\n", "            ", "new_x", ".", "append", "(", "item", "[", "0", ":", "20", "]", ")", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.diswiz.utils.readMRDA": [[78, 91], ["open", "file.readlines", "X.append", "Y.append", "Y1.append", "line.split", "[].replace().replace", "line.split", "line.split", "[].replace", "re.split", "line.split"], "function", ["None"], ["# print(item.shape)", "\n", "            ", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "                ", "item", "=", "np", ".", "append", "(", "[", "item", "]", ",", "toPadding", ")", ".", "reshape", "(", "len", "(", "item", ")", "+", "1", ",", "1024", ")", "\n", "if", "len", "(", "item", ")", "==", "20", ":", "\n", "                    ", "new_x", ".", "append", "(", "item", ")", "\n", "", "", "", "elif", "len", "(", "item", ")", "==", "20", ":", "\n", "            ", "new_x", ".", "append", "(", "item", "[", "0", ":", "20", "]", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "new_x", ")", "\n", "\n", "\n", "", "def", "padSequencesKeras", "(", "x", ",", "max_len", ",", "toPadding", ")", ":", "\n", "    ", "return", "sequence", ".", "pad_sequences", "(", "x", ",", "max_len", ",", "'float32'", ",", "value", "=", "toPadding", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.da_model.DAModel.__init__": [[8, 134], ["tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.dropout", "tensorflow.variable_scope", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "HBLSTM_CRF.local_utils.select", "tensorflow.reshape", "tensorflow.nn.dropout", "tensorflow.variable_scope", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.nn.dropout", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.relu", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.relu", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.contrib.crf.crf_log_likelihood", "tensorflow.variable_scope", "tensorflow.contrib.crf.crf_decode", "tensorflow.TensorArray", "tensorflow.while_loop", "output_ta.stack.stack.stack", "tensorflow.reduce_sum", "tensorflow.variable_scope", "tensorflow.train.AdagradOptimizer", "zip", "tensorflow.clip_by_global_norm", "tensorflow.train.AdagradOptimizer.apply_gradients", "tensorflow.shape", "tensorflow.matmul", "tensorflow.nn.l2_loss", "tensorflow.shape", "tensorflow.reduce_sum", "output_ta_1.write.write.write", "tensorflow.reduce_sum", "zip", "tensorflow.random_uniform_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.zeros_initializer", "tensorflow.matmul", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.zeros_initializer", "tensorflow.matmul", "tensorflow.random_uniform_initializer", "tensorflow.zeros_initializer", "tensorflow.reduce_mean", "tensorflow.nn.l2_loss", "tensorflow.cast", "tensorflow.cast", "tensorflow.train.AdagradOptimizer.compute_gradients", "tensorflow.equal"], "methods", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.select"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"placeholder\"", ")", ":", "\n", "            ", "self", ".", "dialogue_lengths", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "\"dialogue_lengths\"", ")", "\n", "self", ".", "word_ids", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", ",", "None", "]", ",", "name", "=", "\"word_ids\"", ")", "\n", "self", ".", "utterance_lengths", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "name", "=", "\"utterance_lengths\"", ")", "\n", "self", ".", "labels", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "name", "=", "\"labels\"", ")", "\n", "self", ".", "clip", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'clip'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"embeddings\"", ")", ":", "\n", "            ", "_word_embeddings", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"_word_embeddings\"", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "words", ",", "word_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", ")", "\n", ")", "\n", "word_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "_word_embeddings", ",", "self", ".", "word_ids", ",", "name", "=", "\"word_embeddings\"", ")", "\n", "self", ".", "word_embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "word_embeddings", ",", "0.8", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"utterance_encoder\"", ")", ":", "\n", "            ", "s", "=", "tf", ".", "shape", "(", "self", ".", "word_embeddings", ")", "\n", "batch_size", "=", "s", "[", "0", "]", "*", "s", "[", "1", "]", "\n", "\n", "time_step", "=", "s", "[", "-", "2", "]", "\n", "word_embeddings", "=", "tf", ".", "reshape", "(", "self", ".", "word_embeddings", ",", "[", "batch_size", ",", "time_step", ",", "word_dim", "]", ")", "\n", "length", "=", "tf", ".", "reshape", "(", "self", ".", "utterance_lengths", ",", "[", "batch_size", "]", ")", "\n", "\n", "fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "hidden_size_lstm_1", ",", "forget_bias", "=", "0.8", ",", "state_is_tuple", "=", "True", ")", "\n", "bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "hidden_size_lstm_1", ",", "forget_bias", "=", "0.8", ",", "state_is_tuple", "=", "True", ")", "\n", "\n", "output", ",", "_", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "fw", ",", "bw", ",", "word_embeddings", ",", "sequence_length", "=", "length", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "output", "=", "tf", ".", "concat", "(", "output", ",", "axis", "=", "-", "1", ")", "# [batch_size, time_step, dim]", "\n", "\n", "# Select the last valid time step output as the utterance embedding,", "\n", "# this method is more concise than TensorArray with while_loop", "\n", "output", "=", "select", "(", "output", ",", "self", ".", "utterance_lengths", ")", "# [batch_size, dim]", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "s", "[", "0", "]", ",", "s", "[", "1", "]", ",", "2", "*", "hidden_size_lstm_1", ")", "\n", "output", "=", "tf", ".", "nn", ".", "dropout", "(", "output", ",", "0.8", ")", "\n", "\n", "# output_ta = tf.TensorArray(dtype = tf.float32, size = 1, dynamic_size = True)", "\n", "\n", "# def body(time, output_ta_1):", "\n", "#     if length[time] == 0:", "\n", "#         output_ta_1 = output_ta_1.write(time, output[time][0])", "\n", "#     else:", "\n", "#         output_ta_1 = output_ta_1.write(time, output[time][length[time] - 1])", "\n", "#     return time + 1, output_ta_1", "\n", "\n", "# def condition(time, output_ta_1):", "\n", "#     return time < batch_size", "\n", "\n", "# i = 0", "\n", "# [time, output_ta] = tf.while_loop(condition, body, loop_vars = [i, output_ta])", "\n", "# output = output_ta.stack()", "\n", "# output = tf.reshape(output, [s[0], s[1], 2*hidden_size_lstm_1])", "\n", "# output = tf.nn.dropout(output, 0.8)", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"bi-lstm\"", ")", ":", "\n", "            ", "cell_fw", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "hidden_size_lstm_2", ",", "state_is_tuple", "=", "True", ")", "\n", "cell_bw", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "hidden_size_lstm_2", ",", "state_is_tuple", "=", "True", ")", "\n", "\n", "(", "output_fw", ",", "output_bw", ")", ",", "_", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "cell_fw", ",", "cell_bw", ",", "output", ",", "\n", "sequence_length", "=", "self", ".", "dialogue_lengths", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "outputs", "=", "tf", ".", "concat", "(", "[", "output_fw", ",", "output_bw", "]", ",", "axis", "=", "-", "1", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "dropout", "(", "outputs", ",", "0.8", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"proj1\"", ")", ":", "\n", "            ", "output", "=", "tf", ".", "reshape", "(", "outputs", ",", "[", "-", "1", ",", "2", "*", "hidden_size_lstm_2", "]", ")", "\n", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "2", "*", "hidden_size_lstm_2", ",", "proj1", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "proj1", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "output", ",", "W", ")", "+", "b", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"proj2\"", ")", ":", "\n", "            ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "proj1", ",", "proj2", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "proj2", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "output", ",", "W", ")", "+", "b", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"logits\"", ")", ":", "\n", "            ", "nstep", "=", "tf", ".", "shape", "(", "outputs", ")", "[", "1", "]", "\n", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "proj2", ",", "tags", "]", ",", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "tags", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "\n", "pred", "=", "tf", ".", "matmul", "(", "output", ",", "W", ")", "+", "b", "\n", "self", ".", "logits", "=", "tf", ".", "reshape", "(", "pred", ",", "[", "-", "1", ",", "nstep", ",", "tags", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "log_likelihood", ",", "self", ".", "trans_params", "=", "tf", ".", "contrib", ".", "crf", ".", "crf_log_likelihood", "(", "\n", "self", ".", "logits", ",", "self", ".", "labels", ",", "self", ".", "dialogue_lengths", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "-", "log_likelihood", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "# tf.summary.scalar(\"loss\", self.loss)", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"viterbi_decode\"", ")", ":", "\n", "            ", "viterbi_sequence", ",", "_", "=", "tf", ".", "contrib", ".", "crf", ".", "crf_decode", "(", "self", ".", "logits", ",", "self", ".", "trans_params", ",", "self", ".", "dialogue_lengths", ")", "\n", "\n", "batch_size", "=", "tf", ".", "shape", "(", "self", ".", "dialogue_lengths", ")", "[", "0", "]", "\n", "\n", "output_ta", "=", "tf", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "1", ",", "dynamic_size", "=", "True", ")", "\n", "\n", "def", "body", "(", "time", ",", "output_ta_1", ")", ":", "\n", "                ", "length", "=", "self", ".", "dialogue_lengths", "[", "time", "]", "\n", "vcode", "=", "viterbi_sequence", "[", "time", "]", "[", ":", "length", "]", "\n", "true_labs", "=", "self", ".", "labels", "[", "time", "]", "[", ":", "length", "]", "\n", "accurate", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "vcode", ",", "true_labs", ")", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "output_ta_1", "=", "output_ta_1", ".", "write", "(", "time", ",", "accurate", ")", "\n", "return", "time", "+", "1", ",", "output_ta_1", "\n", "\n", "", "def", "condition", "(", "time", ",", "output_ta_1", ")", ":", "\n", "                ", "return", "time", "<", "batch_size", "\n", "\n", "", "i", "=", "0", "\n", "[", "time", ",", "output_ta", "]", "=", "tf", ".", "while_loop", "(", "condition", ",", "body", ",", "loop_vars", "=", "[", "i", ",", "output_ta", "]", ")", "\n", "output_ta", "=", "output_ta", ".", "stack", "(", ")", "\n", "accuracy", "=", "tf", ".", "reduce_sum", "(", "output_ta", ")", "\n", "self", ".", "accuracy", "=", "accuracy", "/", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "self", ".", "dialogue_lengths", ",", "tf", ".", "float32", ")", ")", "\n", "# tf.summary.scalar(\"accuracy\", self.accuracy)", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"train_op\"", ")", ":", "\n", "            ", "optimizer", "=", "tf", ".", "train", ".", "AdagradOptimizer", "(", "0.1", ")", "\n", "# if tf.greater(self.clip , 0):", "\n", "grads", ",", "vs", "=", "zip", "(", "*", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", ")", ")", "\n", "grads", ",", "gnorm", "=", "tf", ".", "clip_by_global_norm", "(", "grads", ",", "self", ".", "clip", ")", "\n", "self", ".", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "zip", "(", "grads", ",", "vs", ")", ")", "\n", "# else:", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils._pad_sequences": [[4, 22], ["list", "min", "max", "len", "len"], "function", ["None"], ["def", "_pad_sequences", "(", "sequences", ",", "pad_tok", ",", "max_length", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        sequences: a generator of list or tuple\n        pad_tok: the char to pad with\n\n    Returns:\n        a list of list where each sublist has same length\n    \"\"\"", "\n", "sequence_padded", ",", "sequence_length", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "seq", "in", "sequences", ":", "\n", "        ", "seq", "=", "list", "(", "seq", ")", "\n", "seq_", "=", "seq", "[", ":", "max_length", "]", "+", "[", "pad_tok", "]", "*", "max", "(", "max_length", "-", "len", "(", "seq", ")", ",", "0", ")", "\n", "sequence_padded", "+=", "[", "seq_", "]", "\n", "sequence_length", "+=", "[", "min", "(", "len", "(", "seq", ")", ",", "max_length", ")", "]", "\n", "\n", "", "return", "sequence_padded", ",", "sequence_length", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.pad_sequences": [[24, 58], ["max", "local_utils._pad_sequences", "map", "max", "max", "local_utils._pad_sequences", "local_utils._pad_sequences", "local_utils._pad_sequences", "map", "len", "max", "map", "len", "len"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils._pad_sequences", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils._pad_sequences", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils._pad_sequences", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils._pad_sequences"], ["", "def", "pad_sequences", "(", "sequences", ",", "pad_tok", ",", "nlevels", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        sequences: a generator of list or tuple\n        pad_tok: the char to pad with\n        nlevels: \"depth\" of padding, for the case where we have characters ids\n\n    Returns:\n        a list of list where each sublist has same length\n\n    \"\"\"", "\n", "if", "nlevels", "==", "1", ":", "\n", "        ", "max_length", "=", "max", "(", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "sequences", ")", ")", "\n", "sequence_padded", ",", "sequence_length", "=", "_pad_sequences", "(", "sequences", ",", "\n", "pad_tok", ",", "max_length", ")", "\n", "\n", "", "elif", "nlevels", "==", "2", ":", "\n", "        ", "max_length_word", "=", "max", "(", "[", "max", "(", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "seq", ")", ")", "\n", "for", "seq", "in", "sequences", "]", ")", "\n", "sequence_padded", ",", "sequence_length", "=", "[", "]", ",", "[", "]", "\n", "for", "seq", "in", "sequences", ":", "\n", "# all words are same length now", "\n", "            ", "sp", ",", "sl", "=", "_pad_sequences", "(", "seq", ",", "pad_tok", ",", "max_length_word", ")", "\n", "sequence_padded", "+=", "[", "sp", "]", "\n", "sequence_length", "+=", "[", "sl", "]", "\n", "\n", "", "max_length_sentence", "=", "max", "(", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "sequences", ")", ")", "\n", "\n", "sequence_padded", ",", "_", "=", "_pad_sequences", "(", "sequence_padded", ",", "\n", "[", "pad_tok", "]", "*", "max_length_word", ",", "max_length_sentence", ")", "\n", "sequence_length", ",", "_", "=", "_pad_sequences", "(", "sequence_length", ",", "0", ",", "\n", "max_length_sentence", ")", "\n", "\n", "", "return", "sequence_padded", ",", "sequence_length", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.minibatches": [[60, 69], ["len", "int", "range", "min", "len"], "function", ["None"], ["", "def", "minibatches", "(", "data", ",", "labels", ",", "batch_size", ")", ":", "\n", "    ", "data_size", "=", "len", "(", "data", ")", "\n", "start_index", "=", "0", "\n", "\n", "num_batches_per_epoch", "=", "int", "(", "(", "len", "(", "data", ")", "+", "batch_size", "-", "1", ")", "/", "batch_size", ")", "\n", "for", "batch_num", "in", "range", "(", "num_batches_per_epoch", ")", ":", "\n", "        ", "start_index", "=", "batch_num", "*", "batch_size", "\n", "end_index", "=", "min", "(", "(", "batch_num", "+", "1", ")", "*", "batch_size", ",", "data_size", ")", "\n", "yield", "data", "[", "start_index", ":", "end_index", "]", ",", "labels", "[", "start_index", ":", "end_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.select": [[71, 81], ["tensorflow.shape", "tensorflow.range", "tensorflow.stack", "tensorflow.gather_nd"], "function", ["None"], ["", "", "def", "select", "(", "parameters", ",", "length", ")", ":", "\n", "    ", "\"\"\"Select the last valid time step output as the sentence embedding\n    :params parameters: [batch, seq_len, hidden_dims]\n    :params length: [batch]\n    :Returns : [batch, hidden_dims]\n    \"\"\"", "\n", "shape", "=", "tf", ".", "shape", "(", "parameters", ")", "\n", "idx", "=", "tf", ".", "range", "(", "shape", "[", "0", "]", ")", "\n", "idx", "=", "tf", ".", "stack", "(", "[", "idx", ",", "length", "-", "1", "]", ",", "axis", "=", "1", ")", "\n", "return", "tf", ".", "gather_nd", "(", "parameters", ",", "idx", ")", "", "", ""]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.HBLSTM_CRF.main": [[12, 96], ["tensorflow.ConfigProto", "tensorflow.Session", "HBLSTM_CRF.da_model.DAModel", "sess.run", "tensorflow.train.Saver", "tensorflow.summary.FileWriter", "range", "tensorflow.global_variables_initializer", "HBLSTM_CRF.local_utils.minibatches", "HBLSTM_CRF.local_utils.pad_sequences", "HBLSTM_CRF.local_utils.pad_sequences", "HBLSTM_CRF.local_utils.pad_sequences", "sess.run", "print", "tensorflow.Summary", "tf.Summary.value.add", "tf.summary.FileWriter.add_summary", "tensorflow.Summary", "tf.Summary.value.add", "tf.summary.FileWriter.add_summary", "HBLSTM_CRF.local_utils.minibatches", "tensorflow.Summary", "tf.Summary.value.add", "tf.summary.FileWriter.add_summary", "tensorflow.Summary", "tf.Summary.value.add", "tf.summary.FileWriter.add_summary", "print", "HBLSTM_CRF.local_utils.pad_sequences", "HBLSTM_CRF.local_utils.pad_sequences", "HBLSTM_CRF.local_utils.pad_sequences", "sess.run", "loss_dev.append", "acc_dev.append", "sum", "len", "sum", "len"], "function", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.minibatches", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.pad_sequences", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.pad_sequences", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.pad_sequences", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.minibatches", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.pad_sequences", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.pad_sequences", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.HBLSTM_CRF.local_utils.pad_sequences"], ["def", "main", "(", ")", ":", "\n", "# data, labels = load_file()", "\n", "\n", "    ", "data", "=", "[", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "1", ",", "2", ",", "3", "]", ",", "[", "2", ",", "3", ",", "5", "]", "]", ",", "[", "[", "1", ",", "0", "]", ",", "[", "4", "]", "]", ",", "[", "[", "1", ",", "2", ",", "8", ",", "4", "]", ",", "[", "1", ",", "1", ",", "3", "]", ",", "[", "2", ",", "3", ",", "9", ",", "1", ",", "3", ",", "1", ",", "9", "]", "]", ",", "\n", "[", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "7", ",", "8", ",", "9", "]", ",", "[", "9", ",", "1", ",", "2", ",", "4", "]", ",", "[", "8", ",", "9", ",", "0", ",", "1", ",", "2", "]", "]", ",", "\n", "[", "[", "1", ",", "2", ",", "4", ",", "3", ",", "2", ",", "3", "]", ",", "[", "9", ",", "8", ",", "7", ",", "5", ",", "5", ",", "5", ",", "5", ",", "5", ",", "5", ",", "5", ",", "5", "]", "]", ",", "\n", "[", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", "]", ",", "[", "9", ",", "1", ",", "0", ",", "0", ",", "2", ",", "4", ",", "6", ",", "5", ",", "4", "]", "]", ",", "\n", "[", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", "]", ",", "[", "9", ",", "1", ",", "2", ",", "4", "]", ",", "[", "8", ",", "9", ",", "0", ",", "1", ",", "2", "]", "]", ",", "[", "[", "1", "]", "]", ",", "\n", "[", "[", "1", ",", "2", ",", "11", ",", "2", ",", "3", ",", "2", ",", "1", ",", "1", ",", "3", ",", "4", ",", "4", "]", ",", "[", "6", ",", "5", ",", "3", ",", "2", ",", "1", ",", "1", ",", "4", ",", "5", ",", "6", ",", "7", "]", ",", "[", "9", ",", "8", ",", "1", "]", ",", "[", "1", ",", "6", ",", "4", ",", "3", ",", "5", ",", "7", ",", "8", "]", ",", "\n", "[", "0", ",", "9", ",", "2", ",", "4", ",", "6", ",", "2", ",", "4", ",", "6", "]", ",", "[", "5", ",", "2", ",", "2", ",", "5", ",", "6", ",", "7", ",", "3", ",", "7", ",", "2", ",", "2", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", ",", "1", ",", "2", ",", "7", ",", "5", ",", "3", ",", "7", ",", "5", ",", "3", ",", "6", "]", ",", "\n", "[", "1", ",", "3", ",", "6", ",", "6", ",", "3", ",", "3", ",", "3", ",", "5", ",", "6", ",", "7", ",", "2", ",", "4", ",", "2", ",", "1", "]", ",", "[", "1", ",", "2", ",", "4", ",", "5", ",", "2", ",", "3", ",", "1", ",", "5", ",", "1", ",", "1", ",", "2", "]", ",", "\n", "[", "9", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "3", ",", "3", ",", "5", ",", "3", ",", "2", "]", ",", "[", "0", ",", "9", ",", "2", ",", "3", ",", "0", ",", "2", ",", "1", ",", "5", ",", "5", ",", "6", "]", ",", "[", "9", ",", "0", ",", "0", ",", "1", ",", "4", ",", "2", ",", "4", ",", "10", ",", "13", ",", "11", ",", "12", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "2", ",", "3", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "2", "]", ",", "[", "0", ",", "0", ",", "1", ",", "3", ",", "1", ",", "12", ",", "13", ",", "3", ",", "12", ",", "3", "]", ",", "[", "0", ",", "9", ",", "1", ",", "2", ",", "3", ",", "4", ",", "1", ",", "3", ",", "2", "]", "]", "]", "\n", "labels", "=", "[", "[", "1", ",", "2", ",", "1", "]", ",", "[", "0", ",", "3", "]", ",", "[", "1", ",", "2", ",", "1", "]", ",", "[", "1", ",", "0", ",", "2", "]", ",", "[", "2", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "2", ",", "1", ",", "2", "]", ",", "[", "4", "]", ",", "\n", "[", "0", ",", "1", ",", "2", ",", "0", ",", "2", ",", "4", ",", "2", ",", "1", ",", "0", ",", "1", ",", "0", ",", "2", ",", "1", ",", "2", ",", "0", "]", "]", "\n", "train_data", "=", "data", "[", ":", "6", "]", "\n", "train_labels", "=", "labels", "[", ":", "6", "]", "\n", "dev_data", "=", "data", "[", "6", ":", "]", "\n", "dev_labels", "=", "data", "[", "6", ":", "]", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "per_process_gpu_memory_fraction", "=", "0.4", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "model", "=", "DAModel", "(", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "clip", "=", "2", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "# writer = tf.summary.FileWriter(\"D:\\\\Experimemts\\\\tensorflow\\\\DA\\\\train\", sess.graph)", "\n", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "\"train\"", ",", "sess", ".", "graph", ")", "\n", "counter", "=", "0", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "\n", "\n", "            ", "for", "dialogues", ",", "labels", "in", "minibatches", "(", "train_data", ",", "train_labels", ",", "batchSize", ")", ":", "\n", "                ", "_", ",", "dialogue_lengthss", "=", "pad_sequences", "(", "dialogues", ",", "0", ")", "\n", "word_idss", ",", "utterance_lengthss", "=", "pad_sequences", "(", "dialogues", ",", "0", ",", "nlevels", "=", "2", ")", "\n", "true_labs", "=", "labels", "\n", "labs_t", ",", "_", "=", "pad_sequences", "(", "true_labs", ",", "0", ")", "\n", "counter", "+=", "1", "\n", "train_loss", ",", "train_accuracy", ",", "_", "=", "sess", ".", "run", "(", "[", "model", ".", "loss", ",", "model", ".", "accuracy", ",", "model", ".", "train_op", "]", ",", "\n", "feed_dict", "=", "{", "model", ".", "word_ids", ":", "word_idss", ",", "\n", "model", ".", "utterance_lengths", ":", "utterance_lengthss", ",", "\n", "model", ".", "dialogue_lengths", ":", "dialogue_lengthss", ",", "\n", "model", ".", "labels", ":", "labs_t", ",", "model", ".", "clip", ":", "clip", "}", ")", "\n", "# writer.add_summary(summary, global_step = counter)", "\n", "print", "(", "\"step = {}, train_loss = {}, train_accuracy = {}\"", ".", "format", "(", "counter", ",", "train_loss", ",", "train_accuracy", ")", ")", "\n", "\n", "train_precision_summ", "=", "tf", ".", "Summary", "(", ")", "\n", "train_precision_summ", ".", "value", ".", "add", "(", "\n", "tag", "=", "'train_accuracy'", ",", "simple_value", "=", "train_accuracy", ")", "\n", "writer", ".", "add_summary", "(", "train_precision_summ", ",", "counter", ")", "\n", "\n", "train_loss_summ", "=", "tf", ".", "Summary", "(", ")", "\n", "train_loss_summ", ".", "value", ".", "add", "(", "\n", "tag", "=", "'train_loss'", ",", "simple_value", "=", "train_loss", ")", "\n", "writer", ".", "add_summary", "(", "train_loss_summ", ",", "counter", ")", "\n", "\n", "if", "counter", "%", "1000", "==", "0", ":", "\n", "                    ", "loss_dev", "=", "[", "]", "\n", "acc_dev", "=", "[", "]", "\n", "for", "dialogues", ",", "labels", "in", "minibatches", "(", "dev_data", ",", "dev_labels", ",", "batchSize", ")", ":", "\n", "                        ", "_", ",", "dialogue_lengthss", "=", "pad_sequences", "(", "dev_data", ",", "0", ")", "\n", "word_idss", ",", "utterance_lengthss", "=", "pad_sequences", "(", "dev_data", ",", "0", ",", "nlevels", "=", "2", ")", "\n", "true_labs", "=", "dev_labels", "\n", "labs_t", ",", "_", "=", "pad_sequences", "(", "true_labs", ",", "0", ")", "\n", "dev_loss", ",", "dev_accuacy", "=", "sess", ".", "run", "(", "[", "model", ".", "loss", ",", "model", ".", "accuracy", "]", ",", "\n", "feed_dict", "=", "{", "model", ".", "word_ids", ":", "word_idss", ",", "\n", "model", ".", "utterance_lengths", ":", "utterance_lengthss", ",", "\n", "model", ".", "dialogue_lengths", ":", "dialogue_lengthss", ",", "\n", "model", ".", "labels", ":", "labs_t", "}", ")", "\n", "loss_dev", ".", "append", "(", "dev_loss", ")", "\n", "acc_dev", ".", "append", "(", "dev_accuacy", ")", "\n", "", "valid_loss", "=", "sum", "(", "loss_dev", ")", "/", "len", "(", "loss_dev", ")", "\n", "valid_accuracy", "=", "sum", "(", "acc_dev", ")", "/", "len", "(", "acc_dev", ")", "\n", "\n", "dev_precision_summ", "=", "tf", ".", "Summary", "(", ")", "\n", "dev_precision_summ", ".", "value", ".", "add", "(", "\n", "tag", "=", "'dev_accuracy'", ",", "simple_value", "=", "valid_accuracy", ")", "\n", "writer", ".", "add_summary", "(", "dev_precision_summ", ",", "counter", ")", "\n", "\n", "dev_loss_summ", "=", "tf", ".", "Summary", "(", ")", "\n", "dev_loss_summ", ".", "value", ".", "add", "(", "\n", "tag", "=", "'dev_loss'", ",", "simple_value", "=", "valid_loss", ")", "\n", "writer", ".", "add_summary", "(", "dev_loss_summ", ",", "counter", ")", "\n", "print", "(", "\"counter = {}, dev_loss = {}, dev_accuacy = {}\"", ".", "format", "(", "counter", ",", "valid_loss", ",", "valid_accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.utils.read_meld.read_data_file": [[8, 17], ["pandas.read_csv", "df_train[].tolist", "df_train[].tolist", "df_train[].tolist", "df_train[].tolist", "df_train[].tolist", "df_train[].tolist"], "function", ["None"], ["def", "read_data_file", "(", "data", ",", "annotated_meld", "=", "False", ")", ":", "\n", "    ", "df_train", "=", "pd", ".", "read_csv", "(", "data", ")", "# load the .csv file, specify the appropriate path", "\n", "utt", "=", "df_train", "[", "'Utterance'", "]", ".", "tolist", "(", ")", "# load the list of utterances", "\n", "dia_id", "=", "df_train", "[", "'Dialogue_ID'", "]", ".", "tolist", "(", ")", "# load the list of dialogue id's", "\n", "utt_id", "=", "df_train", "[", "'Utterance_ID'", "]", ".", "tolist", "(", ")", "# load the list of utterance id's", "\n", "utt_emotion", "=", "df_train", "[", "'Emotion'", "]", ".", "tolist", "(", ")", "\n", "utt_sentiment", "=", "df_train", "[", "'Sentiment'", "]", ".", "tolist", "(", ")", "\n", "utt_speaker", "=", "df_train", "[", "'Speaker'", "]", ".", "tolist", "(", ")", "\n", "return", "utt", ",", "dia_id", ",", "utt_id", ",", "utt_emotion", ",", "utt_sentiment", ",", "utt_speaker", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.__init__": [[14, 68], ["pickle.load", "len", "print", "range", "data_helpers.Dataloader.get_dialogue_ids", "data_helpers.Dataloader.get_dialogue_ids", "data_helpers.Dataloader.get_dialogue_ids", "data_helpers.Dataloader.get_max_utts", "open", "len", "data_helpers.Dataloader.get_word_indices", "data_helpers.Dataloader.train_data.keys", "data_helpers.Dataloader.val_data.keys", "data_helpers.Dataloader.test_data.keys", "print", "exit", "data_helpers.Dataloader.MODE.lower"], "methods", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_dialogue_ids", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_dialogue_ids", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_dialogue_ids", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_max_utts", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_word_indices"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "None", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "assert", "(", "mode", "is", "not", "None", ")", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "print", "(", "\"Set mode as 'Sentiment' or 'Emotion'\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "self", ".", "MODE", "=", "mode", "# Sentiment or Emotion classification mode", "\n", "self", ".", "max_l", "=", "max_length", "\n", "\n", "\"\"\"\n            Loading the dataset: \n                - revs is a dictionary with keys/value: \n                    - text: original sentence\n                    - split: train/val/test :: denotes the which split the tuple belongs to\n                    - y: label of the sentence\n                    - dialog: ID of the dialog the utterance belongs to\n                    - utterance: utterance number of the dialog ID\n                    - num_words: number of words in the utterance\n                - W: glove embedding matrix\n                - vocab: the vocabulary of the dataset\n                - word_idx_map: mapping of each word from vocab to its index in W\n                - label_index: mapping of each label (emotion or sentiment) to its assigned index, eg. label_index['neutral']=0\n        \"\"\"", "\n", "x", "=", "pickle", ".", "load", "(", "open", "(", "\"./data/pickles/data_{}.p\"", ".", "format", "(", "self", ".", "MODE", ".", "lower", "(", ")", ")", ",", "\"rb\"", ")", ")", "\n", "revs", ",", "self", ".", "W", ",", "self", ".", "word_idx_map", ",", "self", ".", "vocab", ",", "_", ",", "label_index", "=", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "x", "[", "2", "]", ",", "x", "[", "3", "]", ",", "x", "[", "4", "]", ",", "x", "[", "5", "]", "\n", "self", ".", "num_classes", "=", "len", "(", "label_index", ")", "\n", "print", "(", "\"Labels used for this classification: \"", ",", "label_index", ")", "\n", "\n", "\n", "# Preparing data", "\n", "self", ".", "train_data", ",", "self", ".", "val_data", ",", "self", ".", "test_data", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "revs", ")", ")", ":", "\n", "\n", "            ", "utterance_id", "=", "revs", "[", "i", "]", "[", "'dialog'", "]", "+", "\"_\"", "+", "revs", "[", "i", "]", "[", "'utterance'", "]", "\n", "sentence_word_indices", "=", "self", ".", "get_word_indices", "(", "revs", "[", "i", "]", "[", "'text'", "]", ")", "\n", "label", "=", "label_index", "[", "revs", "[", "i", "]", "[", "'y'", "]", "]", "\n", "\n", "if", "revs", "[", "i", "]", "[", "'split'", "]", "==", "\"train\"", ":", "\n", "                ", "self", ".", "train_data", "[", "utterance_id", "]", "=", "(", "sentence_word_indices", ",", "label", ")", "\n", "", "elif", "revs", "[", "i", "]", "[", "'split'", "]", "==", "\"val\"", ":", "\n", "                ", "self", ".", "val_data", "[", "utterance_id", "]", "=", "(", "sentence_word_indices", ",", "label", ")", "\n", "", "elif", "revs", "[", "i", "]", "[", "'split'", "]", "==", "\"test\"", ":", "\n", "                ", "self", ".", "test_data", "[", "utterance_id", "]", "=", "(", "sentence_word_indices", ",", "label", ")", "\n", "\n", "\n", "# Creating dialogue:[utterance_1, utterance_2, ...] ids", "\n", "", "", "self", ".", "train_dialogue_ids", "=", "self", ".", "get_dialogue_ids", "(", "self", ".", "train_data", ".", "keys", "(", ")", ")", "\n", "self", ".", "val_dialogue_ids", "=", "self", ".", "get_dialogue_ids", "(", "self", ".", "val_data", ".", "keys", "(", ")", ")", "\n", "self", ".", "test_dialogue_ids", "=", "self", ".", "get_dialogue_ids", "(", "self", ".", "test_data", ".", "keys", "(", ")", ")", "\n", "\n", "# Max utternance in a dialog in the dataset", "\n", "self", ".", "max_utts", "=", "self", ".", "get_max_utts", "(", "self", ".", "train_dialogue_ids", ",", "self", ".", "val_dialogue_ids", ",", "self", ".", "test_dialogue_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_word_indices": [[70, 73], ["len", "data_x.split", "numpy.array", "data_x.split"], "methods", ["None"], ["", "def", "get_word_indices", "(", "self", ",", "data_x", ")", ":", "\n", "        ", "length", "=", "len", "(", "data_x", ".", "split", "(", ")", ")", "\n", "return", "np", ".", "array", "(", "[", "self", ".", "word_idx_map", "[", "word", "]", "for", "word", "in", "data_x", ".", "split", "(", ")", "]", "+", "[", "0", "]", "*", "(", "self", ".", "max_l", "-", "length", ")", ")", "[", ":", "self", ".", "max_l", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_dialogue_ids": [[74, 81], ["collections.defaultdict", "collections.defaultdict.items", "ids[].append", "int", "str", "sorted", "key.split", "key.split"], "methods", ["None"], ["", "def", "get_dialogue_ids", "(", "self", ",", "keys", ")", ":", "\n", "        ", "ids", "=", "defaultdict", "(", "list", ")", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "ids", "[", "key", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "]", ".", "append", "(", "int", "(", "key", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", ")", "\n", "", "for", "ID", ",", "utts", "in", "ids", ".", "items", "(", ")", ":", "\n", "            ", "ids", "[", "ID", "]", "=", "[", "str", "(", "utt", ")", "for", "utt", "in", "sorted", "(", "utts", ")", "]", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_max_utts": [[82, 87], ["max", "max", "max", "numpy.max", "len", "len", "len", "train_ids.keys", "val_ids.keys", "test_ids.keys"], "methods", ["None"], ["", "def", "get_max_utts", "(", "self", ",", "train_ids", ",", "val_ids", ",", "test_ids", ")", ":", "\n", "        ", "max_utts_train", "=", "max", "(", "[", "len", "(", "train_ids", "[", "vid", "]", ")", "for", "vid", "in", "train_ids", ".", "keys", "(", ")", "]", ")", "\n", "max_utts_val", "=", "max", "(", "[", "len", "(", "val_ids", "[", "vid", "]", ")", "for", "vid", "in", "val_ids", ".", "keys", "(", ")", "]", ")", "\n", "max_utts_test", "=", "max", "(", "[", "len", "(", "test_ids", "[", "vid", "]", ")", "for", "vid", "in", "test_ids", ".", "keys", "(", ")", "]", ")", "\n", "return", "np", ".", "max", "(", "[", "max_utts_train", ",", "max_utts_val", ",", "max_utts_test", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_one_hot": [[88, 92], ["None"], "methods", ["None"], ["", "def", "get_one_hot", "(", "self", ",", "label", ")", ":", "\n", "        ", "label_arr", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "label_arr", "[", "label", "]", "=", "1", "\n", "return", "label_arr", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_dialogue_audio_embs": [[94, 116], ["data_helpers.Dataloader.get_dialogue_audio_embs.get_emb"], "methods", ["None"], ["", "def", "get_dialogue_audio_embs", "(", "self", ")", ":", "\n", "        ", "key", "=", "list", "(", "self", ".", "train_audio_emb", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "pad", "=", "[", "0", "]", "*", "len", "(", "self", ".", "train_audio_emb", "[", "key", "]", ")", "\n", "\n", "def", "get_emb", "(", "dialogue_id", ",", "audio_emb", ")", ":", "\n", "            ", "dialogue_audio", "=", "[", "]", "\n", "for", "vid", "in", "dialogue_id", ".", "keys", "(", ")", ":", "\n", "                ", "local_audio", "=", "[", "]", "\n", "for", "utt", "in", "dialogue_id", "[", "vid", "]", ":", "\n", "                    ", "try", ":", "\n", "                        ", "local_audio", ".", "append", "(", "audio_emb", "[", "vid", "+", "\"_\"", "+", "str", "(", "utt", ")", "]", "[", ":", "]", ")", "\n", "", "except", ":", "\n", "                        ", "print", "(", "vid", "+", "\"_\"", "+", "str", "(", "utt", ")", ")", "\n", "local_audio", ".", "append", "(", "pad", "[", ":", "]", ")", "\n", "", "", "for", "_", "in", "range", "(", "self", ".", "max_utts", "-", "len", "(", "local_audio", ")", ")", ":", "\n", "                    ", "local_audio", ".", "append", "(", "pad", "[", ":", "]", ")", "\n", "", "dialogue_audio", ".", "append", "(", "local_audio", "[", ":", "self", ".", "max_utts", "]", ")", "\n", "", "return", "np", ".", "array", "(", "dialogue_audio", ")", "\n", "\n", "", "self", ".", "train_dialogue_features", "=", "get_emb", "(", "self", ".", "train_dialogue_ids", ",", "self", ".", "train_audio_emb", ")", "\n", "self", ".", "val_dialogue_features", "=", "get_emb", "(", "self", ".", "val_dialogue_ids", ",", "self", ".", "val_audio_emb", ")", "\n", "self", ".", "test_dialogue_features", "=", "get_emb", "(", "self", ".", "test_dialogue_ids", ",", "self", ".", "test_audio_emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_dialogue_text_embs": [[117, 135], ["data_helpers.Dataloader.get_dialogue_audio_embs.get_emb"], "methods", ["None"], ["", "def", "get_dialogue_text_embs", "(", "self", ")", ":", "\n", "        ", "key", "=", "list", "(", "self", ".", "train_data", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "pad", "=", "[", "0", "]", "*", "len", "(", "self", ".", "train_data", "[", "key", "]", "[", "0", "]", ")", "\n", "\n", "def", "get_emb", "(", "dialogue_id", ",", "local_data", ")", ":", "\n", "            ", "dialogue_text", "=", "[", "]", "\n", "for", "vid", "in", "dialogue_id", ".", "keys", "(", ")", ":", "\n", "                ", "local_text", "=", "[", "]", "\n", "for", "utt", "in", "dialogue_id", "[", "vid", "]", ":", "\n", "                    ", "local_text", ".", "append", "(", "local_data", "[", "vid", "+", "\"_\"", "+", "str", "(", "utt", ")", "]", "[", "0", "]", "[", ":", "]", ")", "\n", "", "for", "_", "in", "range", "(", "self", ".", "max_utts", "-", "len", "(", "local_text", ")", ")", ":", "\n", "                    ", "local_text", ".", "append", "(", "pad", "[", ":", "]", ")", "\n", "", "dialogue_text", ".", "append", "(", "local_text", "[", ":", "self", ".", "max_utts", "]", ")", "\n", "", "return", "np", ".", "array", "(", "dialogue_text", ")", "\n", "\n", "", "self", ".", "train_dialogue_features", "=", "get_emb", "(", "self", ".", "train_dialogue_ids", ",", "self", ".", "train_data", ")", "\n", "self", ".", "val_dialogue_features", "=", "get_emb", "(", "self", ".", "val_dialogue_ids", ",", "self", ".", "val_data", ")", "\n", "self", ".", "test_dialogue_features", "=", "get_emb", "(", "self", ".", "test_dialogue_ids", ",", "self", ".", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_dialogue_labels": [[137, 154], ["data_helpers.Dataloader.get_dialogue_labels.get_labels"], "methods", ["None"], ["", "def", "get_dialogue_labels", "(", "self", ")", ":", "\n", "\n", "        ", "def", "get_labels", "(", "ids", ",", "data", ")", ":", "\n", "            ", "dialogue_label", "=", "[", "]", "\n", "\n", "for", "vid", ",", "utts", "in", "ids", ".", "items", "(", ")", ":", "\n", "                ", "local_labels", "=", "[", "]", "\n", "for", "utt", "in", "utts", ":", "\n", "                    ", "local_labels", ".", "append", "(", "self", ".", "get_one_hot", "(", "data", "[", "vid", "+", "\"_\"", "+", "str", "(", "utt", ")", "]", "[", "1", "]", ")", ")", "\n", "", "for", "_", "in", "range", "(", "self", ".", "max_utts", "-", "len", "(", "local_labels", ")", ")", ":", "\n", "                    ", "local_labels", ".", "append", "(", "self", ".", "get_one_hot", "(", "1", ")", ")", "# Dummy label", "\n", "", "dialogue_label", ".", "append", "(", "local_labels", "[", ":", "self", ".", "max_utts", "]", ")", "\n", "", "return", "np", ".", "array", "(", "dialogue_label", ")", "\n", "\n", "", "self", ".", "train_dialogue_label", "=", "get_labels", "(", "self", ".", "train_dialogue_ids", ",", "self", ".", "train_data", ")", "\n", "self", ".", "val_dialogue_label", "=", "get_labels", "(", "self", ".", "val_dialogue_ids", ",", "self", ".", "val_data", ")", "\n", "self", ".", "test_dialogue_label", "=", "get_labels", "(", "self", ".", "test_dialogue_ids", ",", "self", ".", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_dialogue_lengths": [[155, 164], ["data_helpers.Dataloader.train_dialogue_ids.items", "data_helpers.Dataloader.val_dialogue_ids.items", "data_helpers.Dataloader.test_dialogue_ids.items", "data_helpers.Dataloader.train_dialogue_length.append", "data_helpers.Dataloader.val_dialogue_length.append", "data_helpers.Dataloader.test_dialogue_length.append", "len", "len", "len"], "methods", ["None"], ["", "def", "get_dialogue_lengths", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "train_dialogue_length", ",", "self", ".", "val_dialogue_length", ",", "self", ".", "test_dialogue_length", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "vid", ",", "utts", "in", "self", ".", "train_dialogue_ids", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "train_dialogue_length", ".", "append", "(", "len", "(", "utts", ")", ")", "\n", "", "for", "vid", ",", "utts", "in", "self", ".", "val_dialogue_ids", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "val_dialogue_length", ".", "append", "(", "len", "(", "utts", ")", ")", "\n", "", "for", "vid", ",", "utts", "in", "self", ".", "test_dialogue_ids", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "test_dialogue_length", ".", "append", "(", "len", "(", "utts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_masks": [[165, 176], ["numpy.zeros", "range", "numpy.zeros", "range", "numpy.zeros", "range", "len", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "", "def", "get_masks", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "train_mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "train_dialogue_length", ")", ",", "self", ".", "max_utts", ")", ",", "dtype", "=", "'float'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "train_dialogue_length", ")", ")", ":", "\n", "            ", "self", ".", "train_mask", "[", "i", ",", ":", "self", ".", "train_dialogue_length", "[", "i", "]", "]", "=", "1.0", "\n", "", "self", ".", "val_mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "val_dialogue_length", ")", ",", "self", ".", "max_utts", ")", ",", "dtype", "=", "'float'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "val_dialogue_length", ")", ")", ":", "\n", "            ", "self", ".", "val_mask", "[", "i", ",", ":", "self", ".", "val_dialogue_length", "[", "i", "]", "]", "=", "1.0", "\n", "", "self", ".", "test_mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "test_dialogue_length", ")", ",", "self", ".", "max_utts", ")", ",", "dtype", "=", "'float'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "test_dialogue_length", ")", ")", ":", "\n", "            ", "self", ".", "test_mask", "[", "i", ",", ":", "self", ".", "test_dialogue_length", "[", "i", "]", "]", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.load_audio_data": [[178, 187], ["pickle.load", "data_helpers.Dataloader.get_dialogue_audio_embs", "data_helpers.Dataloader.get_dialogue_lengths", "data_helpers.Dataloader.get_dialogue_labels", "data_helpers.Dataloader.get_masks", "data_helpers.Dataloader.MODE.lower", "open"], "methods", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_dialogue_audio_embs", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_dialogue_lengths", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_dialogue_labels", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_masks"], ["", "", "def", "load_audio_data", "(", "self", ",", ")", ":", "\n", "\n", "        ", "AUDIO_PATH", "=", "\"./data/pickles/audio_embeddings_feature_selection_{}.pkl\"", ".", "format", "(", "self", ".", "MODE", ".", "lower", "(", ")", ")", "\n", "self", ".", "train_audio_emb", ",", "self", ".", "val_audio_emb", ",", "self", ".", "test_audio_emb", "=", "pickle", ".", "load", "(", "open", "(", "AUDIO_PATH", ",", "\"rb\"", ")", ")", "\n", "\n", "self", ".", "get_dialogue_audio_embs", "(", ")", "\n", "self", ".", "get_dialogue_lengths", "(", ")", "\n", "self", ".", "get_dialogue_labels", "(", ")", "\n", "self", ".", "get_masks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.load_text_data": [[188, 194], ["data_helpers.Dataloader.get_dialogue_text_embs", "data_helpers.Dataloader.get_dialogue_lengths", "data_helpers.Dataloader.get_dialogue_labels", "data_helpers.Dataloader.get_masks"], "methods", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_dialogue_text_embs", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_dialogue_lengths", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_dialogue_labels", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.get_masks"], ["", "def", "load_text_data", "(", "self", ",", ")", ":", "\n", "\n", "        ", "self", ".", "get_dialogue_text_embs", "(", ")", "\n", "self", ".", "get_dialogue_lengths", "(", ")", "\n", "self", ".", "get_dialogue_labels", "(", ")", "\n", "self", ".", "get_masks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.load_bimodal_data": [[196, 218], ["pickle.load", "pickle.load", "data_helpers.Dataloader.load_bimodal_data.concatenate_fusion"], "methods", ["None"], ["", "def", "load_bimodal_data", "(", "self", ",", ")", ":", "\n", "\n", "        ", "TEXT_UNIMODAL", "=", "\"./data/pickles/text_{}.pkl\"", ".", "format", "(", "self", ".", "MODE", ".", "lower", "(", ")", ")", "\n", "AUDIO_UNIMODAL", "=", "\"./data/pickles/audio_{}.pkl\"", ".", "format", "(", "self", ".", "MODE", ".", "lower", "(", ")", ")", "\n", "\n", "#Load features", "\n", "train_text_x", ",", "val_text_x", ",", "test_text_x", "=", "pickle", ".", "load", "(", "open", "(", "TEXT_UNIMODAL", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "train_audio_x", ",", "val_audio_x", ",", "test_audio_x", "=", "pickle", ".", "load", "(", "open", "(", "AUDIO_UNIMODAL", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "def", "concatenate_fusion", "(", "ID", ",", "text", ",", "audio", ")", ":", "\n", "            ", "bimodal", "=", "[", "]", "\n", "for", "vid", ",", "utts", "in", "ID", ".", "items", "(", ")", ":", "\n", "                ", "bimodal", ".", "append", "(", "np", ".", "concatenate", "(", "(", "text", "[", "vid", "]", ",", "audio", "[", "vid", "]", ")", ",", "axis", "=", "1", ")", ")", "\n", "", "return", "np", ".", "array", "(", "bimodal", ")", "\n", "\n", "", "self", ".", "train_dialogue_features", "=", "concatenate_fusion", "(", "self", ".", "train_dialogue_ids", ",", "train_text_x", ",", "train_audio_x", ")", "\n", "self", ".", "val_dialogue_features", "=", "concatenate_fusion", "(", "self", ".", "val_dialogue_ids", ",", "val_text_x", ",", "val_audio_x", ")", "\n", "self", ".", "test_dialogue_features", "=", "concatenate_fusion", "(", "self", ".", "test_dialogue_ids", ",", "test_text_x", ",", "test_audio_x", ")", "\n", "\n", "self", ".", "get_dialogue_lengths", "(", ")", "\n", "self", ".", "get_dialogue_labels", "(", ")", "\n", "self", ".", "get_masks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.baseline.bc_LSTM.__init__": [[22, 28], ["print", "baseline.bc_LSTM.classification_mode.lower", "baseline.bc_LSTM.classification_mode.lower"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\t\t", "self", ".", "classification_mode", "=", "args", ".", "classify", "\n", "self", ".", "modality", "=", "args", ".", "modality", "\n", "self", ".", "PATH", "=", "\"./data/models/{}_weights_{}.hdf5\"", ".", "format", "(", "args", ".", "modality", ",", "self", ".", "classification_mode", ".", "lower", "(", ")", ")", "\n", "self", ".", "OUTPUT_PATH", "=", "\"./data/pickles/{}_{}.pkl\"", ".", "format", "(", "args", ".", "modality", ",", "self", ".", "classification_mode", ".", "lower", "(", ")", ")", "\n", "print", "(", "\"Model initiated for {} classification\"", ".", "format", "(", "self", ".", "classification_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.baseline.bc_LSTM.load_data": [[30, 63], ["print", "MELD.baseline.data_helpers.Dataloader", "baseline.bc_LSTM.data.train_dialogue_ids.keys", "baseline.bc_LSTM.data.val_dialogue_ids.keys", "baseline.bc_LSTM.data.test_dialogue_ids.keys", "baseline.bc_LSTM.data.load_text_data", "baseline.bc_LSTM.data.load_audio_data", "baseline.bc_LSTM.data.load_bimodal_data", "exit"], "methods", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.load_text_data", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.load_audio_data", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.data_helpers.Dataloader.load_bimodal_data"], ["", "def", "load_data", "(", "self", ",", ")", ":", "\n", "\n", "\t\t", "print", "(", "'Loading data'", ")", "\n", "self", ".", "data", "=", "Dataloader", "(", "mode", "=", "self", ".", "classification_mode", ")", "\n", "\n", "if", "self", ".", "modality", "==", "\"text\"", ":", "\n", "\t\t\t", "self", ".", "data", ".", "load_text_data", "(", ")", "\n", "", "elif", "self", ".", "modality", "==", "\"audio\"", ":", "\n", "\t\t\t", "self", ".", "data", ".", "load_audio_data", "(", ")", "\n", "", "elif", "self", ".", "modality", "==", "\"bimodal\"", ":", "\n", "\t\t\t", "self", ".", "data", ".", "load_bimodal_data", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "exit", "(", ")", "\n", "\n", "", "self", ".", "train_x", "=", "self", ".", "data", ".", "train_dialogue_features", "\n", "self", ".", "val_x", "=", "self", ".", "data", ".", "val_dialogue_features", "\n", "self", ".", "test_x", "=", "self", ".", "data", ".", "test_dialogue_features", "\n", "\n", "self", ".", "train_y", "=", "self", ".", "data", ".", "train_dialogue_label", "\n", "self", ".", "val_y", "=", "self", ".", "data", ".", "val_dialogue_label", "\n", "self", ".", "test_y", "=", "self", ".", "data", ".", "test_dialogue_label", "\n", "\n", "self", ".", "train_mask", "=", "self", ".", "data", ".", "train_mask", "\n", "self", ".", "val_mask", "=", "self", ".", "data", ".", "val_mask", "\n", "self", ".", "test_mask", "=", "self", ".", "data", ".", "test_mask", "\n", "\n", "self", ".", "train_id", "=", "self", ".", "data", ".", "train_dialogue_ids", ".", "keys", "(", ")", "\n", "self", ".", "val_id", "=", "self", ".", "data", ".", "val_dialogue_ids", ".", "keys", "(", ")", "\n", "self", ".", "test_id", "=", "self", ".", "data", ".", "test_dialogue_ids", ".", "keys", "(", ")", "\n", "\n", "self", ".", "sequence_length", "=", "self", ".", "train_x", ".", "shape", "[", "1", "]", "\n", "\n", "self", ".", "classes", "=", "self", ".", "train_y", ".", "shape", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.baseline.bc_LSTM.calc_test_result": [[66, 81], ["range", "print", "print", "print", "print", "print", "range", "sklearn.metrics.confusion_matrix", "sklearn.metrics.classification_report", "sklearn.metrics.precision_recall_fscore_support", "true_label.append", "predicted_label.append", "numpy.argmax", "numpy.argmax"], "methods", ["None"], ["", "def", "calc_test_result", "(", "self", ",", "pred_label", ",", "test_label", ",", "test_mask", ")", ":", "\n", "\n", "\t\t", "true_label", "=", "[", "]", "\n", "predicted_label", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "pred_label", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t", "for", "j", "in", "range", "(", "pred_label", ".", "shape", "[", "1", "]", ")", ":", "\n", "\t\t\t\t", "if", "test_mask", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "\t\t\t\t\t", "true_label", ".", "append", "(", "np", ".", "argmax", "(", "test_label", "[", "i", ",", "j", "]", ")", ")", "\n", "predicted_label", ".", "append", "(", "np", ".", "argmax", "(", "pred_label", "[", "i", ",", "j", "]", ")", ")", "\n", "", "", "", "print", "(", "\"Confusion Matrix :\"", ")", "\n", "print", "(", "confusion_matrix", "(", "true_label", ",", "predicted_label", ")", ")", "\n", "print", "(", "\"Classification Report :\"", ")", "\n", "print", "(", "classification_report", "(", "true_label", ",", "predicted_label", ",", "digits", "=", "4", ")", ")", "\n", "print", "(", "'Weighted FScore: \\n '", ",", "precision_recall_fscore_support", "(", "true_label", ",", "predicted_label", ",", "average", "=", "'weighted'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.baseline.bc_LSTM.get_audio_model": [[83, 102], ["print", "keras.layers.Input", "keras.models.Model", "keras.layers.Masking", "keras.layers.Bidirectional", "keras.layers.Bidirectional", "keras.layers.TimeDistributed", "keras.layers.LSTM", "keras.layers.LSTM", "keras.layers.Dense"], "methods", ["None"], ["", "def", "get_audio_model", "(", "self", ")", ":", "\n", "\n", "# Modality specific hyperparameters", "\n", "\t\t", "self", ".", "epochs", "=", "100", "\n", "self", ".", "batch_size", "=", "50", "\n", "\n", "# Modality specific parameters", "\n", "self", ".", "embedding_dim", "=", "self", ".", "train_x", ".", "shape", "[", "2", "]", "\n", "\n", "print", "(", "\"Creating Model...\"", ")", "\n", "\n", "inputs", "=", "Input", "(", "shape", "=", "(", "self", ".", "sequence_length", ",", "self", ".", "embedding_dim", ")", ",", "dtype", "=", "'float32'", ")", "\n", "masked", "=", "Masking", "(", "mask_value", "=", "0", ")", "(", "inputs", ")", "\n", "lstm", "=", "Bidirectional", "(", "LSTM", "(", "300", ",", "activation", "=", "'tanh'", ",", "return_sequences", "=", "True", ",", "dropout", "=", "0.4", ")", ")", "(", "masked", ")", "\n", "lstm", "=", "Bidirectional", "(", "LSTM", "(", "300", ",", "activation", "=", "'tanh'", ",", "return_sequences", "=", "True", ",", "dropout", "=", "0.4", ")", ",", "name", "=", "\"utter\"", ")", "(", "lstm", ")", "\n", "output", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "classes", ",", "activation", "=", "'softmax'", ")", ")", "(", "lstm", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", ",", "output", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.baseline.bc_LSTM.get_text_model": [[104, 182], ["print", "keras.layers.Embedding", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.MaxPool2D", "keras.layers.MaxPool2D", "keras.layers.MaxPool2D", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Reshape", "keras.layers.Input", "range", "keras.models.Model", "list", "keras.expand_dims", "keras.reshape", "list", "keras.layers.Embedding.", "keras.layers.Dense.", "cnn_output.append", "keras.stack", "keras.layers.Lambda", "keras.layers.Masking", "keras.layers.Bidirectional", "keras.layers.Bidirectional", "keras.layers.TimeDistributed", "len", "keras.layers.Lambda", "keras.layers.Lambda", "keras.layers.Concatenate", "keras.layers.Lambda", "keras.layers.Dropout", "keras.layers.LSTM", "keras.layers.LSTM", "keras.layers.Dense", "keras.layers.MaxPool2D.", "keras.layers.MaxPool2D.", "keras.layers.MaxPool2D.", "keras.constant", "keras.layers.Conv2D.", "keras.layers.Conv2D.", "keras.layers.Conv2D."], "methods", ["None"], ["", "def", "get_text_model", "(", "self", ")", ":", "\n", "\n", "# Modality specific hyperparameters", "\n", "\t\t", "self", ".", "epochs", "=", "100", "\n", "self", ".", "batch_size", "=", "50", "\n", "\n", "# Modality specific parameters", "\n", "self", ".", "embedding_dim", "=", "self", ".", "data", ".", "W", ".", "shape", "[", "1", "]", "\n", "\n", "# For text model", "\n", "self", ".", "vocabulary_size", "=", "self", ".", "data", ".", "W", ".", "shape", "[", "0", "]", "\n", "self", ".", "filter_sizes", "=", "[", "3", ",", "4", ",", "5", "]", "\n", "self", ".", "num_filters", "=", "512", "\n", "\n", "\n", "print", "(", "\"Creating Model...\"", ")", "\n", "\n", "sentence_length", "=", "self", ".", "train_x", ".", "shape", "[", "2", "]", "\n", "\n", "# Initializing sentence representation layers", "\n", "embedding", "=", "Embedding", "(", "input_dim", "=", "self", ".", "vocabulary_size", ",", "output_dim", "=", "self", ".", "embedding_dim", ",", "weights", "=", "[", "self", ".", "data", ".", "W", "]", ",", "input_length", "=", "sentence_length", ",", "trainable", "=", "False", ")", "\n", "conv_0", "=", "Conv2D", "(", "self", ".", "num_filters", ",", "kernel_size", "=", "(", "self", ".", "filter_sizes", "[", "0", "]", ",", "self", ".", "embedding_dim", ")", ",", "padding", "=", "'valid'", ",", "kernel_initializer", "=", "'normal'", ",", "activation", "=", "'relu'", ")", "\n", "conv_1", "=", "Conv2D", "(", "self", ".", "num_filters", ",", "kernel_size", "=", "(", "self", ".", "filter_sizes", "[", "1", "]", ",", "self", ".", "embedding_dim", ")", ",", "padding", "=", "'valid'", ",", "kernel_initializer", "=", "'normal'", ",", "activation", "=", "'relu'", ")", "\n", "conv_2", "=", "Conv2D", "(", "self", ".", "num_filters", ",", "kernel_size", "=", "(", "self", ".", "filter_sizes", "[", "2", "]", ",", "self", ".", "embedding_dim", ")", ",", "padding", "=", "'valid'", ",", "kernel_initializer", "=", "'normal'", ",", "activation", "=", "'relu'", ")", "\n", "maxpool_0", "=", "MaxPool2D", "(", "pool_size", "=", "(", "sentence_length", "-", "self", ".", "filter_sizes", "[", "0", "]", "+", "1", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'valid'", ")", "\n", "maxpool_1", "=", "MaxPool2D", "(", "pool_size", "=", "(", "sentence_length", "-", "self", ".", "filter_sizes", "[", "1", "]", "+", "1", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'valid'", ")", "\n", "maxpool_2", "=", "MaxPool2D", "(", "pool_size", "=", "(", "sentence_length", "-", "self", ".", "filter_sizes", "[", "2", "]", "+", "1", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'valid'", ")", "\n", "dense_func", "=", "Dense", "(", "100", ",", "activation", "=", "'tanh'", ",", "name", "=", "\"dense\"", ")", "\n", "dense_final", "=", "Dense", "(", "units", "=", "self", ".", "classes", ",", "activation", "=", "'softmax'", ")", "\n", "reshape_func", "=", "Reshape", "(", "(", "sentence_length", ",", "self", ".", "embedding_dim", ",", "1", ")", ")", "\n", "\n", "def", "slicer", "(", "x", ",", "index", ")", ":", "\n", "\t\t\t", "return", "x", "[", ":", ",", "K", ".", "constant", "(", "index", ",", "dtype", "=", "'int32'", ")", ",", ":", "]", "\n", "\n", "", "def", "slicer_output_shape", "(", "input_shape", ")", ":", "\n", "\t\t    ", "shape", "=", "list", "(", "input_shape", ")", "\n", "assert", "len", "(", "shape", ")", "==", "3", "# batch, seq_len, sent_len", "\n", "new_shape", "=", "(", "shape", "[", "0", "]", ",", "shape", "[", "2", "]", ")", "\n", "return", "new_shape", "\n", "\n", "", "def", "reshaper", "(", "x", ")", ":", "\n", "\t\t\t", "return", "K", ".", "expand_dims", "(", "x", ",", "axis", "=", "3", ")", "\n", "\n", "", "def", "flattener", "(", "x", ")", ":", "\n", "\t\t\t", "x", "=", "K", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "3", "]", "]", ")", "\n", "return", "x", "\n", "\n", "", "def", "flattener_output_shape", "(", "input_shape", ")", ":", "\n", "\t\t    ", "shape", "=", "list", "(", "input_shape", ")", "\n", "new_shape", "=", "(", "shape", "[", "0", "]", ",", "3", "*", "shape", "[", "3", "]", ")", "\n", "return", "new_shape", "\n", "\n", "", "inputs", "=", "Input", "(", "shape", "=", "(", "self", ".", "sequence_length", ",", "sentence_length", ")", ",", "dtype", "=", "'int32'", ")", "\n", "cnn_output", "=", "[", "]", "\n", "for", "ind", "in", "range", "(", "self", ".", "sequence_length", ")", ":", "\n", "\n", "\t\t\t", "local_input", "=", "Lambda", "(", "slicer", ",", "output_shape", "=", "slicer_output_shape", ",", "arguments", "=", "{", "\"index\"", ":", "ind", "}", ")", "(", "inputs", ")", "# Batch, word_indices", "\n", "\n", "#cnn-sent", "\n", "emb_output", "=", "embedding", "(", "local_input", ")", "\n", "reshape", "=", "Lambda", "(", "reshaper", ")", "(", "emb_output", ")", "\n", "concatenated_tensor", "=", "Concatenate", "(", "axis", "=", "1", ")", "(", "[", "maxpool_0", "(", "conv_0", "(", "reshape", ")", ")", ",", "maxpool_1", "(", "conv_1", "(", "reshape", ")", ")", ",", "maxpool_2", "(", "conv_2", "(", "reshape", ")", ")", "]", ")", "\n", "flatten", "=", "Lambda", "(", "flattener", ",", "output_shape", "=", "flattener_output_shape", ",", ")", "(", "concatenated_tensor", ")", "\n", "dense_output", "=", "dense_func", "(", "flatten", ")", "\n", "dropout", "=", "Dropout", "(", "0.5", ")", "(", "dense_output", ")", "\n", "cnn_output", ".", "append", "(", "dropout", ")", "\n", "\n", "", "def", "stack", "(", "x", ")", ":", "\n", "\t\t\t", "return", "K", ".", "stack", "(", "x", ",", "axis", "=", "1", ")", "\n", "", "cnn_outputs", "=", "Lambda", "(", "stack", ")", "(", "cnn_output", ")", "\n", "\n", "masked", "=", "Masking", "(", "mask_value", "=", "0", ")", "(", "cnn_outputs", ")", "\n", "lstm", "=", "Bidirectional", "(", "LSTM", "(", "300", ",", "activation", "=", "'relu'", ",", "return_sequences", "=", "True", ",", "dropout", "=", "0.3", ")", ")", "(", "masked", ")", "\n", "lstm", "=", "Bidirectional", "(", "LSTM", "(", "300", ",", "activation", "=", "'relu'", ",", "return_sequences", "=", "True", ",", "dropout", "=", "0.3", ")", ",", "name", "=", "\"utter\"", ")", "(", "lstm", ")", "\n", "output", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "classes", ",", "activation", "=", "'softmax'", ")", ")", "(", "lstm", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", ",", "output", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.baseline.bc_LSTM.get_bimodal_model": [[183, 201], ["print", "keras.layers.Input", "keras.models.Model", "keras.layers.Masking", "keras.layers.Bidirectional", "keras.layers.TimeDistributed", "keras.layers.LSTM", "keras.layers.Dense"], "methods", ["None"], ["", "def", "get_bimodal_model", "(", "self", ")", ":", "\n", "\n", "# Modality specific hyperparameters", "\n", "\t\t", "self", ".", "epochs", "=", "100", "\n", "self", ".", "batch_size", "=", "10", "\n", "\n", "# Modality specific parameters", "\n", "self", ".", "embedding_dim", "=", "self", ".", "train_x", ".", "shape", "[", "2", "]", "\n", "\n", "print", "(", "\"Creating Model...\"", ")", "\n", "\n", "inputs", "=", "Input", "(", "shape", "=", "(", "self", ".", "sequence_length", ",", "self", ".", "embedding_dim", ")", ",", "dtype", "=", "'float32'", ")", "\n", "masked", "=", "Masking", "(", "mask_value", "=", "0", ")", "(", "inputs", ")", "\n", "lstm", "=", "Bidirectional", "(", "LSTM", "(", "300", ",", "activation", "=", "'tanh'", ",", "return_sequences", "=", "True", ",", "dropout", "=", "0.4", ")", ",", "name", "=", "\"utter\"", ")", "(", "masked", ")", "\n", "output", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "classes", ",", "activation", "=", "'softmax'", ")", ")", "(", "lstm", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", ",", "output", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.baseline.bc_LSTM.train_model": [[205, 229], ["keras.callbacks.ModelCheckpoint", "keras.callbacks.EarlyStopping", "baseline.bc_LSTM.fit", "baseline.bc_LSTM.test_model", "baseline.bc_LSTM.get_audio_model", "baseline.bc_LSTM.compile", "baseline.bc_LSTM.get_text_model", "baseline.bc_LSTM.compile", "baseline.bc_LSTM.get_bimodal_model", "baseline.bc_LSTM.compile"], "methods", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.baseline.bc_LSTM.test_model", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.baseline.bc_LSTM.get_audio_model", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.baseline.bc_LSTM.get_text_model", "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.baseline.bc_LSTM.get_bimodal_model"], ["", "def", "train_model", "(", "self", ")", ":", "\n", "\n", "\t\t", "checkpoint", "=", "ModelCheckpoint", "(", "self", ".", "PATH", ",", "monitor", "=", "'val_loss'", ",", "verbose", "=", "1", ",", "save_best_only", "=", "True", ",", "mode", "=", "'auto'", ")", "\n", "\n", "if", "self", ".", "modality", "==", "\"audio\"", ":", "\n", "\t\t\t", "model", "=", "self", ".", "get_audio_model", "(", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "'adadelta'", ",", "loss", "=", "'categorical_crossentropy'", ",", "sample_weight_mode", "=", "'temporal'", ")", "\n", "", "elif", "self", ".", "modality", "==", "\"text\"", ":", "\n", "\t\t\t", "model", "=", "self", ".", "get_text_model", "(", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "'adadelta'", ",", "loss", "=", "'categorical_crossentropy'", ",", "sample_weight_mode", "=", "'temporal'", ")", "\n", "", "elif", "self", ".", "modality", "==", "\"bimodal\"", ":", "\n", "\t\t\t", "model", "=", "self", ".", "get_bimodal_model", "(", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "'adam'", ",", "loss", "=", "'categorical_crossentropy'", ",", "sample_weight_mode", "=", "'temporal'", ")", "\n", "\n", "", "early_stopping", "=", "EarlyStopping", "(", "monitor", "=", "'val_loss'", ",", "patience", "=", "10", ")", "\n", "model", ".", "fit", "(", "self", ".", "train_x", ",", "self", ".", "train_y", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "sample_weight", "=", "self", ".", "train_mask", ",", "\n", "shuffle", "=", "True", ",", "\n", "callbacks", "=", "[", "early_stopping", ",", "checkpoint", "]", ",", "\n", "validation_data", "=", "(", "self", ".", "val_x", ",", "self", ".", "val_y", ",", "self", ".", "val_mask", ")", ")", "\n", "\n", "self", ".", "test_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.baseline.bc_LSTM.test_model": [[232, 251], ["keras.models.load_model", "keras.models.Model", "keras.models.Model.predict", "keras.models.Model.predict", "keras.models.Model.predict", "enumerate", "enumerate", "enumerate", "pickle.dump", "baseline.bc_LSTM.calc_test_result", "open", "keras.models.load_model.predict", "keras.models.load_model.get_layer"], "methods", ["home.repos.pwc.inspect_result.bothe_dialogue-act-recognition.baseline.baseline.bc_LSTM.calc_test_result"], ["", "def", "test_model", "(", "self", ")", ":", "\n", "\n", "\t\t", "model", "=", "load_model", "(", "self", ".", "PATH", ")", "\n", "intermediate_layer_model", "=", "Model", "(", "input", "=", "model", ".", "input", ",", "output", "=", "model", ".", "get_layer", "(", "\"utter\"", ")", ".", "output", ")", "\n", "\n", "intermediate_output_train", "=", "intermediate_layer_model", ".", "predict", "(", "self", ".", "train_x", ")", "\n", "intermediate_output_val", "=", "intermediate_layer_model", ".", "predict", "(", "self", ".", "val_x", ")", "\n", "intermediate_output_test", "=", "intermediate_layer_model", ".", "predict", "(", "self", ".", "test_x", ")", "\n", "\n", "train_emb", ",", "val_emb", ",", "test_emb", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "for", "idx", ",", "ID", "in", "enumerate", "(", "self", ".", "train_id", ")", ":", "\n", "\t\t    ", "train_emb", "[", "ID", "]", "=", "intermediate_output_train", "[", "idx", "]", "\n", "", "for", "idx", ",", "ID", "in", "enumerate", "(", "self", ".", "val_id", ")", ":", "\n", "\t\t    ", "val_emb", "[", "ID", "]", "=", "intermediate_output_val", "[", "idx", "]", "\n", "", "for", "idx", ",", "ID", "in", "enumerate", "(", "self", ".", "test_id", ")", ":", "\n", "\t\t    ", "test_emb", "[", "ID", "]", "=", "intermediate_output_test", "[", "idx", "]", "\n", "", "pickle", ".", "dump", "(", "[", "train_emb", ",", "val_emb", ",", "test_emb", "]", ",", "open", "(", "self", ".", "OUTPUT_PATH", ",", "\"wb\"", ")", ")", "\n", "\n", "self", ".", "calc_test_result", "(", "model", ".", "predict", "(", "self", ".", "test_x", ")", ",", "self", ".", "test_y", ",", "self", ".", "test_mask", ")", "\n", "\n"]]}