{"home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.mms_dataloader_re_aug.ImageFolder.__init__": [[93, 127], ["sorted", "sorted", "range", "range", "mms_dataloader_re_aug.make_dataset", "mms_dataloader_re_aug.make_dataset", "len", "range", "range", "len", "imgs.append", "len", "RuntimeError", "len", "len", "temp_re.append", "temp_re.append", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.un_dataloader.make_dataset", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.un_dataloader.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "labels_root", ",", "new_size", ",", "num_data", "=", "None", ",", "return_paths", "=", "False", ",", "loader", "=", "default_loader", ")", ":", "\n", "        ", "temp_imgs", "=", "sorted", "(", "make_dataset", "(", "root", ")", ")", "# make_dataset(root): a list", "\n", "temp_masks", "=", "sorted", "(", "make_dataset", "(", "labels_root", ")", ")", "# make_dataset(root): a list", "\n", "temp_re", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "temp_imgs", ")", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "vendor_A", ")", ")", ":", "\n", "                ", "if", "temp_imgs", "[", "j", "]", "[", "24", ":", "27", "]", "==", "(", "'00'", "+", "str", "(", "vendor_A", "[", "i", "]", ")", ")", "or", "temp_imgs", "[", "j", "]", "[", "24", ":", "27", "]", "==", "(", "\n", "'0'", "+", "str", "(", "vendor_A", "[", "i", "]", ")", ")", "or", "temp_imgs", "[", "j", "]", "[", "24", ":", "27", "]", "==", "str", "(", "vendor_A", "[", "i", "]", ")", ":", "\n", "                    ", "temp_re", ".", "append", "(", "scan_re_A", "[", "i", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "vendor_B", ")", ")", ":", "\n", "                ", "if", "temp_imgs", "[", "j", "]", "[", "24", ":", "27", "]", "==", "(", "'00'", "+", "str", "(", "vendor_B", "[", "i", "]", ")", ")", "or", "temp_imgs", "[", "j", "]", "[", "24", ":", "27", "]", "==", "(", "\n", "'0'", "+", "str", "(", "vendor_B", "[", "i", "]", ")", ")", "or", "temp_imgs", "[", "j", "]", "[", "24", ":", "27", "]", "==", "str", "(", "vendor_B", "[", "i", "]", ")", ":", "\n", "                    ", "temp_re", ".", "append", "(", "scan_re_B", "[", "i", "]", ")", "\n", "\n", "", "", "", "imgs", "=", "[", "]", "\n", "\n", "if", "num_data", ":", "\n", "            ", "itr", "=", "num_data", "\n", "", "else", ":", "\n", "            ", "itr", "=", "len", "(", "temp_imgs", ")", "\n", "", "for", "i", "in", "range", "(", "itr", ")", ":", "\n", "            ", "imgs", ".", "append", "(", "(", "temp_imgs", "[", "i", "]", ",", "temp_masks", "[", "i", "]", ")", ")", "\n", "", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\n", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "new_size", "=", "new_size", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "re", "=", "temp_re", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.mms_dataloader_re_aug.ImageFolder.__getitem__": [[128, 178], ["mms_dataloader_re_aug.ImageFolder.loader", "PIL.Image.open", "transforms.Compose.min", "transforms.Compose.max", "transforms.Compose.astype", "torchvision.to_tensor", "torchvision.to_tensor", "torchvision.to_tensor.size", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "int", "int", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.Compose.", "mask_bg.reshape.reshape.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.CenterCrop", "torchvision.transforms.CenterCrop", "torchvision.transforms.Pad", "torchvision.transforms.Pad", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.ToPILImage", "torchvision.transforms.ToPILImage", "torchvision.transforms.CenterCrop", "torchvision.transforms.CenterCrop", "torchvision.transforms.Pad", "torchvision.transforms.Pad", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "mask_bg.reshape.reshape.size", "mask_bg.reshape.reshape.size", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path_img", "=", "self", ".", "imgs", "[", "index", "]", "[", "0", "]", "\n", "path_mask", "=", "self", ".", "imgs", "[", "index", "]", "[", "1", "]", "\n", "img_re", "=", "self", ".", "re", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path_img", ")", "# numpy, HxW, numpy.Float64", "\n", "mask", "=", "Image", ".", "open", "(", "path_mask", ")", "# numpy, HxWx3", "\n", "img", "-=", "img", ".", "min", "(", ")", "\n", "img", "/=", "img", ".", "max", "(", ")", "\n", "img", "=", "img", ".", "astype", "(", "'float32'", ")", "\n", "\n", "img_tensor", "=", "F", ".", "to_tensor", "(", "img", ")", "\n", "img_size", "=", "img_tensor", ".", "size", "(", ")", "\n", "rand_re", "=", "numpy", ".", "random", ".", "choice", "(", "scan_re_np", ")", "\n", "resize_order", "=", "img_re", "/", "rand_re", "\n", "resize_size_h", "=", "int", "(", "img_size", "[", "-", "2", "]", "*", "resize_order", ")", "\n", "resize_size_w", "=", "int", "(", "img_size", "[", "-", "1", "]", "*", "resize_order", ")", "\n", "\n", "left_size", "=", "0", "\n", "top_size", "=", "0", "\n", "right_size", "=", "0", "\n", "bot_size", "=", "0", "\n", "if", "resize_size_h", "<", "self", ".", "new_size", ":", "\n", "            ", "top_size", "=", "(", "self", ".", "new_size", "-", "resize_size_h", ")", "//", "2", "\n", "bot_size", "=", "(", "self", ".", "new_size", "-", "resize_size_h", ")", "-", "top_size", "\n", "", "if", "resize_size_w", "<", "self", ".", "new_size", ":", "\n", "            ", "left_size", "=", "(", "self", ".", "new_size", "-", "resize_size_w", ")", "//", "2", "\n", "right_size", "=", "(", "self", ".", "new_size", "-", "resize_size_w", ")", "-", "left_size", "\n", "\n", "", "transform_list", "=", "[", "transforms", ".", "Normalize", "(", "[", "0.5", "]", ",", "[", "0.5", "]", ")", "]", "\n", "transform_list", "=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "+", "transform_list", "\n", "transform_list", "=", "[", "transforms", ".", "CenterCrop", "(", "(", "self", ".", "new_size", ",", "self", ".", "new_size", ")", ")", "]", "+", "transform_list", "\n", "transform_list", "=", "[", "transforms", ".", "Pad", "(", "(", "left_size", ",", "top_size", ",", "right_size", ",", "bot_size", ")", ")", "]", "+", "transform_list", "\n", "transform_list", "=", "[", "transforms", ".", "Resize", "(", "(", "resize_size_h", ",", "resize_size_w", ")", ")", "]", "+", "transform_list", "\n", "transform_list", "=", "[", "transforms", ".", "ToPILImage", "(", ")", "]", "+", "transform_list", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "transform_mask_list", "=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "transform_mask_list", "=", "[", "transforms", ".", "CenterCrop", "(", "(", "self", ".", "new_size", ",", "self", ".", "new_size", ")", ")", "]", "+", "transform_mask_list", "\n", "transform_mask_list", "=", "[", "transforms", ".", "Pad", "(", "(", "left_size", ",", "top_size", ",", "right_size", ",", "bot_size", ")", ")", "]", "+", "transform_mask_list", "\n", "transform_mask_list", "=", "[", "transforms", ".", "Resize", "(", "(", "resize_size_h", ",", "resize_size_w", ")", ",", "\n", "interpolation", "=", "Image", ".", "NEAREST", ")", "]", "+", "transform_mask_list", "\n", "transform_mask", "=", "transforms", ".", "Compose", "(", "transform_mask_list", ")", "\n", "\n", "img", "=", "transform", "(", "img", ")", "\n", "mask", "=", "transform_mask", "(", "mask", ")", "# C,H,W", "\n", "mask_bg", "=", "(", "mask", ".", "sum", "(", "0", ")", "==", "0", ")", ".", "type_as", "(", "mask", ")", "# H,W", "\n", "mask_bg", "=", "mask_bg", ".", "reshape", "(", "(", "1", ",", "mask_bg", ".", "size", "(", "0", ")", ",", "mask_bg", ".", "size", "(", "1", ")", ")", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "(", "mask", ",", "mask_bg", ")", ",", "dim", "=", "0", ")", "\n", "\n", "return", "img", ",", "mask", "# pytorch: C,H,W", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.mms_dataloader_re_aug.ImageFolder.__len__": [[179, 181], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.mms_dataloader_re_aug.get_all_data_loaders": [[62, 69], ["random.seed", "mms_dataloader_re_aug.get_data_loader_folder"], "function", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.un_dataloader.get_data_loader_folder"], ["", "def", "get_all_data_loaders", "(", "batch_size", ",", "train_num_data", "=", "None", ")", ":", "\n", "    ", "random", ".", "seed", "(", "14", ")", "\n", "train_size", "=", "224", "\n", "\n", "train_loader", ",", "train_data", "=", "get_data_loader_folder", "(", "'../labeled_mask_data_nn'", ",", "batch_size", ",", "True", ",", "'../mask_3_nn'", ",", "train_size", ",", "train_num_data", ")", "\n", "\n", "return", "train_loader", ",", "train_data", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.mms_dataloader_re_aug.get_data_loader_folder": [[70, 77], ["torch.utils.data.DataLoader", "mms_dataloader_re_aug.ImageFolder", "mms_dataloader_re_aug.ImageFolder"], "function", ["None"], ["", "def", "get_data_loader_folder", "(", "input_folder", ",", "batch_size", ",", "train", ",", "labels_root", ",", "new_size", "=", "None", ",", "num_data", "=", "None", ",", "num_workers", "=", "4", ")", ":", "\n", "    ", "if", "num_data", ":", "\n", "        ", "dataset", "=", "ImageFolder", "(", "input_folder", ",", "labels_root", ",", "new_size", ",", "num_data", "=", "num_data", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "ImageFolder", "(", "input_folder", ",", "labels_root", ",", "new_size", ")", "\n", "", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "train", ",", "drop_last", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "loader", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.mms_dataloader_re_aug.default_loader": [[78, 80], ["numpy.load"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "np", ".", "load", "(", "path", ")", "[", "'arr_0'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.mms_dataloader_re_aug.make_dataset": [[81, 91], ["os.path.isdir", "sorted", "os.walk", "os.path.join", "images.append"], "function", ["None"], ["", "def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.un_dataloader.ImageFolder.__init__": [[62, 93], ["print", "print", "sorted", "sorted", "range", "range", "un_dataloader.make_dataset", "un_dataloader.make_dataset", "len", "imgs.append", "len", "imgs.append", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.un_dataloader.make_dataset", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.un_dataloader.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root1", ",", "root2", ",", "transform", "=", "None", ",", "num_data", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "\n", "        ", "print", "(", "root1", ")", "\n", "print", "(", "root2", ")", "\n", "\n", "temp_imgs1", "=", "sorted", "(", "make_dataset", "(", "root1", ")", ")", "# make_dataset(root): a list", "\n", "temp_imgs2", "=", "sorted", "(", "make_dataset", "(", "root2", ")", ")", "# make_dataset(root): a list", "\n", "\n", "\n", "imgs", "=", "[", "]", "\n", "\n", "# add something here to index, such that can split the data", "\n", "# index = random.sample(range(len(temp_img)), len(temp_mask))", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "temp_imgs1", ")", ")", ":", "\n", "            ", "imgs", ".", "append", "(", "temp_imgs1", "[", "i", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "temp_imgs2", ")", ")", ":", "\n", "            ", "imgs", ".", "append", "(", "temp_imgs2", "[", "i", "]", ")", "\n", "\n", "", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root1", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\n", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "new_size", "=", "224", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.un_dataloader.ImageFolder.__getitem__": [[94, 126], ["un_dataloader.ImageFolder.loader", "transforms.Compose.min", "transforms.Compose.max", "transforms.Compose.astype", "torchvision.to_tensor", "torchvision.to_tensor", "torchvision.to_tensor.size", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.CenterCrop", "torchvision.transforms.CenterCrop", "torchvision.transforms.Pad", "torchvision.transforms.Pad", "torchvision.transforms.ToPILImage", "torchvision.transforms.ToPILImage"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path_img", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path_img", ")", "\n", "\n", "img", "-=", "img", ".", "min", "(", ")", "\n", "img", "/=", "img", ".", "max", "(", ")", "\n", "img", "=", "img", ".", "astype", "(", "'float32'", ")", "\n", "\n", "img_tensor", "=", "F", ".", "to_tensor", "(", "img", ")", "\n", "\n", "img_size", "=", "img_tensor", ".", "size", "(", ")", "\n", "left_size", "=", "0", "\n", "top_size", "=", "0", "\n", "right_size", "=", "0", "\n", "bot_size", "=", "0", "\n", "if", "img_size", "[", "-", "2", "]", "<", "self", ".", "new_size", ":", "\n", "            ", "top_size", "=", "(", "self", ".", "new_size", "-", "img_size", "[", "-", "2", "]", ")", "//", "2", "\n", "bot_size", "=", "(", "self", ".", "new_size", "-", "img_size", "[", "-", "2", "]", ")", "-", "top_size", "\n", "", "if", "img_size", "[", "-", "1", "]", "<", "self", ".", "new_size", ":", "\n", "            ", "left_size", "=", "(", "self", ".", "new_size", "-", "img_size", "[", "-", "1", "]", ")", "//", "2", "\n", "right_size", "=", "(", "self", ".", "new_size", "-", "img_size", "[", "-", "1", "]", ")", "-", "left_size", "\n", "\n", "", "transform_list", "=", "[", "transforms", ".", "Normalize", "(", "[", "0.5", "]", ",", "[", "0.5", "]", ")", "]", "\n", "transform_list", "=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "+", "transform_list", "\n", "transform_list", "=", "[", "transforms", ".", "CenterCrop", "(", "(", "self", ".", "new_size", ",", "self", ".", "new_size", ")", ")", "]", "+", "transform_list", "\n", "transform_list", "=", "[", "transforms", ".", "Pad", "(", "(", "left_size", ",", "top_size", ",", "right_size", ",", "bot_size", ")", ")", "]", "+", "transform_list", "\n", "transform_list", "=", "[", "transforms", ".", "ToPILImage", "(", ")", "]", "+", "transform_list", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "img", "=", "transform", "(", "img", ")", "\n", "\n", "return", "img", "# pytorch: N,C,H,W", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.un_dataloader.ImageFolder.__len__": [[127, 129], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.un_dataloader.get_un_data_loaders": [[18, 26], ["random.seed", "un_dataloader.get_data_loader_folder"], "function", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.un_dataloader.get_data_loader_folder"], ["def", "get_un_data_loaders", "(", "batch_size", ")", ":", "\n", "    ", "random", ".", "seed", "(", "14", ")", "\n", "train_size", "=", "200", "\n", "\n", "\n", "train_loader", ",", "train_data", "=", "get_data_loader_folder", "(", "'../labeled_data_nn'", ",", "'../unlabeled_data_nn'", ",", "batch_size", ",", "True", ",", "train_size", ")", "\n", "\n", "return", "train_loader", ",", "train_data", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.un_dataloader.get_data_loader_folder": [[27, 43], ["torchvision.transforms.Compose", "torch.utils.data.DataLoader", "torchvision.transforms.ToTensor", "un_dataloader.ImageFolder", "un_dataloader.ImageFolder", "torchvision.transforms.Resize"], "function", ["None"], ["", "def", "get_data_loader_folder", "(", "input_folder1", ",", "input_folder2", ",", "batch_size", ",", "train", ",", "new_size", "=", "None", ",", "num_data", "=", "None", ",", "num_workers", "=", "4", ",", "mode", "=", "True", ")", ":", "\n", "# transform_list = [transforms.ToTensor(),", "\n", "#                   transforms.Normalize([0.5],", "\n", "#                                        [0.5])]", "\n", "    ", "transform_list", "=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "# transform_list = [transforms.RandomCrop((new_size, new_size))] + transform_list", "\n", "transform_list", "=", "[", "transforms", ".", "Resize", "(", "(", "new_size", ",", "new_size", ")", ")", "]", "+", "transform_list", "\n", "# transform_list = [transforms.RandomHorizontalFlip()] + transform_list if train else transform_list", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "if", "num_data", ":", "\n", "        ", "dataset", "=", "ImageFolder", "(", "input_folder1", ",", "input_folder2", ",", "transform", "=", "transform", ",", "num_data", "=", "num_data", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "ImageFolder", "(", "input_folder1", ",", "input_folder2", ",", "transform", "=", "transform", ")", "\n", "", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "train", ",", "drop_last", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "loader", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.un_dataloader.default_loader": [[47, 49], ["numpy.load"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "np", ".", "load", "(", "path", ")", "[", "'arr_0'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.un_dataloader.make_dataset": [[50, 60], ["os.path.isdir", "sorted", "os.walk", "os.path.join", "images.append"], "function", ["None"], ["", "def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.unet_parts.DoubleConv.__init__": [[12, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "mid_channels", ":", "\n", "            ", "mid_channels", "=", "out_channels", "\n", "", "self", ".", "double_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.unet_parts.DoubleConv.forward": [[25, 27], ["unet_parts.DoubleConv.double_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "double_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.unet_parts.Down.__init__": [[32, 37], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "unet_parts.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxpool_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.unet_parts.Down.forward": [[39, 41], ["unet_parts.Down.maxpool_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "maxpool_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.unet_parts.Up.__init__": [[46, 56], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "unet_parts.DoubleConv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "unet_parts.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# if bilinear, use the normal convolutions to reduce the number of channels", "\n", "if", "bilinear", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ",", "in_channels", "//", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.unet_parts.Up.forward": [[58, 71], ["unet_parts.Up.up", "torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_parts.Up.conv", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "# input is CHW", "\n", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "[", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "\n", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", "]", ")", "\n", "# if you have padding issues, see", "\n", "# https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a", "\n", "# https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.unet_parts.OutConv.__init__": [[74, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "OutConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.unet_parts.OutConv.forward": [[78, 80], ["unet_parts.OutConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.eval.eval_net": [[8, 35], ["net.eval", "len", "net.train", "tqdm.tqdm", "imgs.to.to", "true_masks.to.to", "dice_loss.dice_coeff().item", "dice_loss.dice_coeff().item", "dice_loss.dice_coeff().item", "dice_loss.dice_coeff().item", "pbar.update", "torch.no_grad", "torch.no_grad", "net", "dice_loss.dice_coeff", "dice_loss.dice_coeff", "dice_loss.dice_coeff", "dice_loss.dice_coeff"], "function", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.dice_loss.dice_coeff", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.dice_loss.dice_coeff", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.dice_loss.dice_coeff", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.dice_loss.dice_coeff"], ["def", "eval_net", "(", "net", ",", "loader", ",", "device", ")", ":", "\n", "    ", "\"\"\"Evaluation without the densecrf with the dice coefficient\"\"\"", "\n", "net", ".", "eval", "(", ")", "\n", "mask_type", "=", "torch", ".", "float32", "\n", "n_val", "=", "len", "(", "loader", ")", "# the number of batch", "\n", "tot", "=", "0", "\n", "tot_lv", "=", "0", "\n", "tot_myo", "=", "0", "\n", "tot_rv", "=", "0", "\n", "with", "tqdm", "(", "total", "=", "n_val", ",", "desc", "=", "'Validation round'", ",", "unit", "=", "'batch'", ",", "leave", "=", "False", ")", "as", "pbar", ":", "\n", "        ", "for", "imgs", ",", "true_masks", "in", "loader", ":", "\n", "            ", "imgs", "=", "imgs", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "true_masks", "=", "true_masks", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "mask_type", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "reco", ",", "z_out", ",", "mu_tilde", ",", "a_out", ",", "mask_pred", ",", "mu", ",", "logvar", "=", "net", "(", "imgs", ",", "true_masks", ",", "'test'", ")", "\n", "\n", "", "pred", "=", "mask_pred", "\n", "pred", "=", "(", "pred", ">", "0.5", ")", ".", "float", "(", ")", "\n", "tot", "+=", "dice_coeff", "(", "pred", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "true_masks", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "device", ")", ".", "item", "(", ")", "\n", "tot_lv", "+=", "dice_coeff", "(", "pred", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "true_masks", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "device", ")", ".", "item", "(", ")", "\n", "tot_myo", "+=", "dice_coeff", "(", "pred", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "true_masks", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "device", ")", ".", "item", "(", ")", "\n", "tot_rv", "+=", "dice_coeff", "(", "pred", "[", ":", ",", "2", ",", ":", ",", ":", "]", ",", "true_masks", "[", ":", ",", "2", ",", ":", ",", ":", "]", ",", "device", ")", ".", "item", "(", ")", "\n", "pbar", ".", "update", "(", ")", "\n", "\n", "", "", "net", ".", "train", "(", ")", "\n", "return", "tot", "/", "n_val", ",", "tot_lv", "/", "n_val", ",", "tot_myo", "/", "n_val", ",", "tot_rv", "/", "n_val", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.train.get_args": [[22, 43], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "usage_text", "=", "(", "\n", "\"SNet Pytorch Implementation\"", "\n", "\"Usage:  python train.py [options],\"", "\n", "\"   with [options]:\"", "\n", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "usage_text", ")", "\n", "#training details", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'Number of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'-bs'", ",", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Number of inputs per batch'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'default_name'", ",", "help", "=", "'The name of this train/test. Used when storing information.'", ")", "\n", "parser", ".", "add_argument", "(", "'-mn'", ",", "'--model_name'", ",", "type", "=", "str", ",", "default", "=", "'sdnet'", ",", "help", "=", "'Name of the model architecture to be used for training/testing.'", ")", "\n", "parser", ".", "add_argument", "(", "'-lr'", ",", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "'0.0001'", ",", "help", "=", "'The learning rate for model training'", ")", "\n", "parser", ".", "add_argument", "(", "'-wi'", ",", "'--weight_init'", ",", "type", "=", "str", ",", "default", "=", "\"xavier\"", ",", "help", "=", "'Weight initialization method, or path to weights file (for fine-tuning or continuing training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_path'", ",", "type", "=", "str", ",", "default", "=", "'checkpoints'", ",", "help", "=", "'Path to save model checkpoints'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder_type'", ",", "type", "=", "str", ",", "default", "=", "'film'", ",", "help", "=", "'Choose decoder type between FiLM and SPADE'", ")", "\n", "#hardware", "\n", "parser", ".", "add_argument", "(", "'-g'", ",", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'The ids of the GPU(s) that will be utilized. (e.g. 0 or 0,1, or 0,2). Use -1 for CPU.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Number of workers to use for dataload'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.train.train_net": [[44, 249], ["models.get_model", "models.initialize_weights", "models.get_model.to", "models.get_model", "models.get_model.load_state_dict", "models.get_model.to", "mms_dataloader_re_aug.get_all_data_loaders", "un_dataloader.get_un_data_loaders", "int", "len", "torch.utils.data.DataLoader", "len", "torch.L1Loss().to", "torch.utils.tensorboard.SummaryWriter", "logging.info", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "focal_loss.FocalLoss", "range", "torch.utils.tensorboard.SummaryWriter.close", "torch.load", "torch.load", "torch.load", "len", "models.get_model.parameters", "models.get_model.train", "models.get_model.eval", "eval.eval_net", "optim.lr_scheduler.ReduceLROnPlateau.step", "torch.utils.tensorboard.SummaryWriter.add_scalar", "logging.info", "logging.info", "logging.info", "logging.info", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_images", "torch.utils.tensorboard.SummaryWriter.add_images", "torch.utils.tensorboard.SummaryWriter.add_images", "torch.L1Loss", "tqdm.tqdm", "iter", "torch.save", "torch.save", "torch.save", "logging.info", "imgs.to.to", "true_masks.to.to", "models.get_model.", "supervision.dice_loss", "supervision.dice_loss", "supervision.dice_loss", "supervision.dice_loss", "focal_loss.FocalLoss.", "nn.L1Loss().to.", "nn.L1Loss().to.", "loss.item", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "pbar.set_postfix", "optim.Adam.zero_grad", "loss.backward", "torch.utils.clip_grad_value_", "optim.Adam.step", "range", "pbar.update", "os.mkdir", "logging.info", "models.get_model.state_dict", "loss.item", "loss_dice.item", "supervision.dice_loss.item", "supervision.dice_loss.item", "supervision.dice_loss.item", "supervision.dice_loss.item", "focal.item", "l1_distance.item", "l1_distance.item", "models.get_model.parameters", "next", "un_imgs.to.to", "models.get_model.", "nn.L1Loss().to.", "nn.L1Loss().to.", "optim.Adam.zero_grad", "un_batch_loss.backward", "torch.utils.clip_grad_value_", "optim.Adam.step", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "models.get_model.", "supervision.dice_loss", "supervision.dice_loss", "supervision.dice_loss", "supervision.dice_loss", "focal_loss.FocalLoss.", "nn.L1Loss().to.", "nn.L1Loss().to.", "optim.Adam.zero_grad", "IA_batch_loss.backward", "torch.utils.clip_grad_value_", "optim.Adam.step", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "models.get_model.parameters", "l1_distance.item", "l1_distance.item", "un_batch_loss.item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.get_model.", "models.get_model.", "models.get_model.", "models.get_model.parameters", "IA_loss_dice.item", "supervision.dice_loss.item", "supervision.dice_loss.item", "supervision.dice_loss.item", "supervision.dice_loss.item", "focal.item", "l1_distance.item", "l1_distance.item", "torch.utils.tensorboard.SummaryWriter.add_images", "torch.utils.tensorboard.SummaryWriter.add_images", "torch.utils.tensorboard.SummaryWriter.add_images", "torch.utils.tensorboard.SummaryWriter.add_images", "torch.utils.tensorboard.SummaryWriter.add_images", "torch.utils.tensorboard.SummaryWriter.add_images", "torch.utils.tensorboard.SummaryWriter.add_images", "loss.item", "len"], "function", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.__init__.get_model", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.weight_init.initialize_weights", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.__init__.get_model", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.mms_dataloader_re_aug.get_all_data_loaders", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.un_dataloader.get_un_data_loaders", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.eval.eval_net", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.rounding.RoundingFunction.backward", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.rounding.RoundingFunction.backward", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.rounding.RoundingFunction.backward"], ["", "def", "train_net", "(", "device", ",", "\n", "epochs", "=", "5", ",", "\n", "batch_size", "=", "1", ",", "\n", "lr", "=", "0.001", ",", "\n", "val_percent", "=", "0.1", ",", "\n", "save_cp", "=", "True", ")", ":", "\n", "\n", "#Model selection and initialization", "\n", "    ", "model_params", "=", "{", "\n", "'width'", ":", "224", ",", "\n", "'height'", ":", "224", ",", "\n", "'ndf'", ":", "64", ",", "\n", "'norm'", ":", "\"batchnorm\"", ",", "\n", "'upsample'", ":", "\"nearest\"", ",", "\n", "'num_classes'", ":", "3", ",", "\n", "'decoder_type'", ":", "args", ".", "decoder_type", ",", "\n", "'anatomy_out_channels'", ":", "8", ",", "\n", "'z_length'", ":", "8", ",", "\n", "'num_mask_channels'", ":", "8", ",", "\n", "\n", "}", "\n", "model", "=", "models", ".", "get_model", "(", "args", ".", "model_name", ",", "model_params", ")", "\n", "models", ".", "initialize_weights", "(", "model", ",", "args", ".", "weight_init", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "pre_trained_model", "=", "models", ".", "get_model", "(", "args", ".", "model_name", ",", "model_params", ")", "\n", "pre_trained_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'pre_trained_model/CP_epoch50.pth'", ",", "map_location", "=", "device", ")", ")", "\n", "pre_trained_model", ".", "to", "(", "device", ")", "\n", "\n", "train_loader", ",", "train_data", "=", "get_all_data_loaders", "(", "batch_size", ")", "\n", "un_loader", ",", "un_data", "=", "get_un_data_loaders", "(", "batch_size", ")", "\n", "\n", "# n_val = int(len(train_data) * val_percent)", "\n", "n_val", "=", "int", "(", "len", "(", "train_data", ")", ")", "\n", "n_train", "=", "len", "(", "train_data", ")", "\n", "# train, val = random_split(train_data, [n_train-n_val, n_val])", "\n", "val_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ",", "pin_memory", "=", "False", ",", "drop_last", "=", "True", ")", "\n", "\n", "n_un_train", "=", "len", "(", "un_data", ")", "\n", "# k_itr = n_un_train // n_train", "\n", "k_itr", "=", "1", "\n", "\n", "l1_distance", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "device", ")", "\n", "writer", "=", "SummaryWriter", "(", "comment", "=", "f'LR_{lr}_BS_{batch_size}'", ")", "\n", "global_step", "=", "0", "\n", "un_step", "=", "0", "\n", "\n", "logging", ".", "info", "(", "f'''Starting training:\n        Epochs:          {epochs}\n        Batch size:      {batch_size}\n        Learning rate:   {lr}\n        Training size:   {n_train}\n        Validation size: {n_val}\n        Checkpoints:     {save_cp}\n        Device:          {device.type}\n        Reversed:  {reversed}\n    '''", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "# need to use a more useful lr_scheduler", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "'max'", ",", "patience", "=", "2", ")", "\n", "\n", "focal", "=", "FocalLoss", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "pre_trained_model", ".", "eval", "(", ")", "\n", "\n", "epoch_loss", "=", "0", "\n", "with", "tqdm", "(", "total", "=", "n_train", ",", "desc", "=", "f'Epoch {epoch + 1}/{epochs}'", ",", "unit", "=", "'img'", ")", "as", "pbar", ":", "\n", "            ", "un_itr", "=", "iter", "(", "un_loader", ")", "\n", "for", "imgs", ",", "true_masks", "in", "train_loader", ":", "\n", "\n", "                ", "imgs", "=", "imgs", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "mask_type", "=", "torch", ".", "float32", "\n", "true_masks", "=", "true_masks", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "mask_type", ")", "\n", "\n", "reco", ",", "z_out", ",", "mu_tilde", ",", "a_out", ",", "masks_pred", ",", "mu", ",", "logvar", "=", "model", "(", "imgs", ",", "true_masks", ",", "'training'", ")", "\n", "\n", "dice_loss_lv", "=", "supervision", ".", "dice_loss", "(", "masks_pred", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "true_masks", "[", ":", ",", "0", ",", ":", ",", ":", "]", ")", "\n", "dice_loss_myo", "=", "supervision", ".", "dice_loss", "(", "masks_pred", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "true_masks", "[", ":", ",", "1", ",", ":", ",", ":", "]", ")", "\n", "dice_loss_rv", "=", "supervision", ".", "dice_loss", "(", "masks_pred", "[", ":", ",", "2", ",", ":", ",", ":", "]", ",", "true_masks", "[", ":", ",", "2", ",", ":", ",", ":", "]", ")", "\n", "dice_loss_bg", "=", "supervision", ".", "dice_loss", "(", "masks_pred", "[", ":", ",", "3", ",", ":", ",", ":", "]", ",", "true_masks", "[", ":", ",", "3", ",", ":", ",", ":", "]", ")", "\n", "loss_dice", "=", "dice_loss_lv", "+", "dice_loss_myo", "+", "dice_loss_rv", "+", "dice_loss_bg", "\n", "loss_focal", "=", "focal", "(", "masks_pred", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "true_masks", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "regression_loss", "=", "l1_distance", "(", "mu_tilde", ",", "z_out", ")", "\n", "reco_loss", "=", "l1_distance", "(", "reco", ",", "imgs", ")", "\n", "\n", "loss", "=", "loss_focal", "+", "loss_dice", "+", "regression_loss", "+", "reco_loss", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/loss_dice'", ",", "loss_dice", ".", "item", "(", ")", ",", "global_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/dice_loss_lv'", ",", "dice_loss_lv", ".", "item", "(", ")", ",", "global_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/dice_loss_myo'", ",", "dice_loss_myo", ".", "item", "(", ")", ",", "global_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/dice_loss_rv'", ",", "dice_loss_rv", ".", "item", "(", ")", ",", "global_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/dice_loss_bg'", ",", "dice_loss_bg", ".", "item", "(", ")", ",", "global_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/loss_focal'", ",", "loss_focal", ".", "item", "(", ")", ",", "global_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/loss_regression_loss'", ",", "regression_loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/loss_reco'", ",", "reco_loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "\n", "pbar", ".", "set_postfix", "(", "**", "{", "'loss (batch)'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_value_", "(", "model", ".", "parameters", "(", ")", ",", "0.1", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "\n", "for", "i", "in", "range", "(", "k_itr", "//", "10", ")", ":", "\n", "                    ", "un_imgs", "=", "next", "(", "un_itr", ")", "\n", "un_imgs", "=", "un_imgs", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "un_reco", ",", "un_z_out", ",", "un_mu_tilde", ",", "un_a_out", ",", "un_masks_pred", ",", "un_mu", ",", "un_logvar", "=", "model", "(", "un_imgs", ",", "true_masks", ",", "'training'", ")", "\n", "\n", "un_reco_loss", "=", "l1_distance", "(", "un_reco", ",", "un_imgs", ")", "\n", "un_regression_loss", "=", "l1_distance", "(", "un_mu_tilde", ",", "un_z_out", ")", "\n", "\n", "un_batch_loss", "=", "un_reco_loss", "+", "un_regression_loss", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "un_batch_loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_value_", "(", "model", ".", "parameters", "(", ")", ",", "0.1", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'Loss_un/un_reco_loss'", ",", "un_reco_loss", ".", "item", "(", ")", ",", "un_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss_un/un_regression_loss'", ",", "un_regression_loss", ".", "item", "(", ")", ",", "un_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss_un/un_batch_loss'", ",", "un_batch_loss", ".", "item", "(", ")", ",", "un_step", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "_", ",", "_", ",", "_", ",", "pre_a_out", ",", "_", ",", "_", ",", "_", "=", "pre_trained_model", "(", "imgs", ",", "true_masks", ",", "'test'", ")", "\n", "_", ",", "pre_z_out", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "pre_trained_model", "(", "un_imgs", ",", "true_masks", ",", "'test'", ")", "\n", "pre_imgs", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "pre_trained_model", "(", "imgs", ",", "true_masks", ",", "'test'", ",", "a_in", "=", "pre_a_out", ",", "z_in", "=", "pre_z_out", ")", "\n", "\n", "", "IA_reco", ",", "IA_z_out", ",", "IA_mu_tilde", ",", "IA_a_out", ",", "IA_masks_pred", ",", "IA_mu", ",", "IA_logvar", "=", "model", "(", "pre_imgs", ",", "true_masks", ",", "'training'", ")", "\n", "\n", "IA_dice_loss_lv", "=", "supervision", ".", "dice_loss", "(", "IA_masks_pred", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "true_masks", "[", ":", ",", "0", ",", ":", ",", ":", "]", ")", "\n", "IA_dice_loss_myo", "=", "supervision", ".", "dice_loss", "(", "IA_masks_pred", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "true_masks", "[", ":", ",", "1", ",", ":", ",", ":", "]", ")", "\n", "IA_dice_loss_rv", "=", "supervision", ".", "dice_loss", "(", "IA_masks_pred", "[", ":", ",", "2", ",", ":", ",", ":", "]", ",", "true_masks", "[", ":", ",", "2", ",", ":", ",", ":", "]", ")", "\n", "IA_dice_loss_bg", "=", "supervision", ".", "dice_loss", "(", "IA_masks_pred", "[", ":", ",", "3", ",", ":", ",", ":", "]", ",", "true_masks", "[", ":", ",", "3", ",", ":", ",", ":", "]", ")", "\n", "IA_loss_dice", "=", "IA_dice_loss_lv", "+", "IA_dice_loss_myo", "+", "IA_dice_loss_rv", "+", "IA_dice_loss_bg", "\n", "IA_loss_focal", "=", "focal", "(", "IA_masks_pred", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "true_masks", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "\n", "IA_reco_loss", "=", "l1_distance", "(", "IA_reco", ",", "pre_imgs", ")", "\n", "IA_regression_loss", "=", "l1_distance", "(", "IA_mu_tilde", ",", "IA_z_out", ")", "\n", "\n", "IA_batch_loss", "=", "IA_reco_loss", "+", "IA_regression_loss", "+", "IA_loss_dice", "+", "IA_loss_focal", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "IA_batch_loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_value_", "(", "model", ".", "parameters", "(", ")", ",", "0.1", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'Loss_IA/IA_loss_dice'", ",", "IA_loss_dice", ".", "item", "(", ")", ",", "un_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss_IA/IA_dice_loss_lv'", ",", "IA_dice_loss_lv", ".", "item", "(", ")", ",", "un_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss_IA/IA_dice_loss_myo'", ",", "IA_dice_loss_myo", ".", "item", "(", ")", ",", "un_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss_IA/IA_dice_loss_rv'", ",", "IA_dice_loss_rv", ".", "item", "(", ")", ",", "un_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss_IA/IA_dice_loss_bg'", ",", "IA_dice_loss_bg", ".", "item", "(", ")", ",", "un_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss_IA/IA_loss_focal'", ",", "IA_loss_focal", ".", "item", "(", ")", ",", "un_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss_IA/IA_regression_loss'", ",", "IA_regression_loss", ".", "item", "(", ")", ",", "un_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss_IA/IA_reco_loss'", ",", "IA_reco_loss", ".", "item", "(", ")", ",", "un_step", ")", "\n", "\n", "\n", "if", "global_step", "%", "(", "len", "(", "train_data", ")", "//", "(", "2", "*", "batch_size", ")", ")", "==", "0", ":", "\n", "                        ", "writer", ".", "add_images", "(", "'unlabelled/train_un_img'", ",", "un_imgs", ",", "global_step", ")", "\n", "writer", ".", "add_images", "(", "'unlabelled/train_un_mask'", ",", "un_masks_pred", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ">", "0.5", ",", "global_step", ")", "\n", "writer", ".", "add_images", "(", "'IA/train_IA_ana_img'", ",", "imgs", "*", "0.5", "+", "0.5", ",", "global_step", ")", "\n", "writer", ".", "add_images", "(", "'IA/train_IA_mod_img'", ",", "un_imgs", "*", "0.5", "+", "0.5", ",", "global_step", ")", "\n", "writer", ".", "add_images", "(", "'IA/train_IA_img'", ",", "pre_imgs", "*", "0.5", "+", "0.5", ",", "global_step", ")", "\n", "writer", ".", "add_images", "(", "'IA/train_IA_mask_true'", ",", "true_masks", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "global_step", ")", "\n", "writer", ".", "add_images", "(", "'IA/train_IA_mask_pred'", ",", "IA_masks_pred", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ">", "0.5", ",", "global_step", ")", "\n", "", "un_step", "+=", "1", "\n", "\n", "", "pbar", ".", "update", "(", "imgs", ".", "shape", "[", "0", "]", ")", "\n", "global_step", "+=", "1", "\n", "\n", "\n", "", "", "val_score", ",", "val_lv", ",", "val_myo", ",", "val_rv", "=", "eval_net", "(", "model", ",", "val_loader", ",", "device", ")", "\n", "scheduler", ".", "step", "(", "val_score", ")", "\n", "writer", ".", "add_scalar", "(", "'learning_rate'", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "\n", "logging", ".", "info", "(", "'Validation Dice Coeff: {}'", ".", "format", "(", "val_score", ")", ")", "\n", "logging", ".", "info", "(", "'Validation LV Dice Coeff: {}'", ".", "format", "(", "val_lv", ")", ")", "\n", "logging", ".", "info", "(", "'Validation MYO Dice Coeff: {}'", ".", "format", "(", "val_myo", ")", ")", "\n", "logging", ".", "info", "(", "'Validation RV Dice Coeff: {}'", ".", "format", "(", "val_rv", ")", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'Dice/val'", ",", "val_score", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Dice/val_lv'", ",", "val_lv", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Dice/val_myo'", ",", "val_myo", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Dice/val_rv'", ",", "val_rv", ",", "epoch", ")", "\n", "\n", "writer", ".", "add_images", "(", "'images/val'", ",", "imgs", ",", "epoch", ")", "\n", "writer", ".", "add_images", "(", "'masks/val_true'", ",", "true_masks", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "epoch", ")", "\n", "writer", ".", "add_images", "(", "'masks/val_pred'", ",", "masks_pred", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ">", "0.5", ",", "epoch", ")", "\n", "\n", "if", "save_cp", "and", "(", "epoch", "+", "1", ")", ">", "(", "4", "*", "(", "epochs", "//", "5", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "os", ".", "mkdir", "(", "dir_checkpoint", ")", "\n", "logging", ".", "info", "(", "'Created checkpoint directory'", ")", "\n", "", "except", "OSError", ":", "\n", "                    ", "pass", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "dir_checkpoint", "+", "f'CP_epoch{epoch + 1}.pth'", ")", "\n", "logging", ".", "info", "(", "f'Checkpoint {epoch + 1} saved !'", ")", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.unet_model.UNet.__init__": [[9, 26], ["nn.Module.__init__", "unet_parts.DoubleConv", "unet_parts.Down", "unet_parts.Down", "unet_parts.Down", "unet_parts.Down", "unet_parts.Up", "unet_parts.Up", "unet_parts.Up", "unet_parts.Up", "unet_parts.OutConv"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "n_classes", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "bilinear", "=", "bilinear", "\n", "\n", "self", ".", "inc", "=", "DoubleConv", "(", "n_channels", ",", "64", ")", "\n", "self", ".", "down1", "=", "Down", "(", "64", ",", "128", ")", "\n", "self", ".", "down2", "=", "Down", "(", "128", ",", "256", ")", "\n", "self", ".", "down3", "=", "Down", "(", "256", ",", "512", ")", "\n", "factor", "=", "2", "if", "bilinear", "else", "1", "\n", "self", ".", "down4", "=", "Down", "(", "512", ",", "1024", "//", "factor", ")", "\n", "self", ".", "up1", "=", "Up", "(", "1024", ",", "512", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up2", "=", "Up", "(", "512", ",", "256", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up3", "=", "Up", "(", "256", ",", "128", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up4", "=", "Up", "(", "128", ",", "64", ",", "bilinear", ")", "\n", "self", ".", "outc", "=", "OutConv", "(", "64", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.unet_model.UNet.forward": [[27, 40], ["unet_model.UNet.inc", "unet_model.UNet.down1", "unet_model.UNet.down2", "unet_model.UNet.down3", "unet_model.UNet.down4", "unet_model.UNet.up1", "unet_model.UNet.up2", "unet_model.UNet.up3", "unet_model.UNet.up4", "unet_model.UNet.outc", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "inc", "(", "x", ")", "\n", "x2", "=", "self", ".", "down1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "down2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "down3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "down4", "(", "x4", ")", "\n", "x", "=", "self", ".", "up1", "(", "x5", ",", "x4", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "x3", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "x2", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "x1", ")", "\n", "out", "=", "self", ".", "outc", "(", "x", ")", "\n", "out", "=", "F", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.focal_loss.FocalLoss.__init__": [[8, 15], ["torch.Module.__init__", "isinstance", "isinstance", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "0", ",", "alpha", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "if", "isinstance", "(", "alpha", ",", "(", "float", ",", "int", ")", ")", ":", "self", ".", "alpha", "=", "torch", ".", "Tensor", "(", "[", "alpha", ",", "1", "-", "alpha", "]", ")", "\n", "if", "isinstance", "(", "alpha", ",", "list", ")", ":", "self", ".", "alpha", "=", "torch", ".", "Tensor", "(", "alpha", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.focal_loss.FocalLoss.forward": [[16, 51], ["target_binary_back.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "target_index.view().long.view().long.view().long", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "logpt.view.view.gather", "logpt.view.view.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.view", "input.contiguous().view.contiguous().view.transpose", "input.contiguous().view.contiguous().view.contiguous().view", "logpt.view.view.data.exp", "focal_loss.FocalLoss.alpha.gather", "loss.sum", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "target_index.view().long.view().long.view", "focal_loss.FocalLoss.alpha.type", "input.contiguous().view.contiguous().view.data.type", "focal_loss.FocalLoss.alpha.type_as", "target.data.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "loss.sum", "input.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# N,C,H,W => N,C,H*W", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", "# N,C,H*W => N,H*W,C", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "# N,H*W,C => N*H*W,C", "\n", "\n", "# Ignore background pixels", "\n", "\n", "", "target_lv", "=", "target", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "target_myo", "=", "target", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "target_rv", "=", "target", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "target_index", "=", "target_myo", "*", "1", "+", "target_rv", "*", "2", "\n", "target_binary_back", "=", "target_lv", "+", "target_myo", "+", "target_rv", "\n", "target_binary_back", "=", "target_binary_back", ".", "view", "(", "-", "1", ")", "\n", "num_objects", "=", "torch", ".", "sum", "(", "target_binary_back", ")", "\n", "\n", "\n", "target_index", "=", "target_index", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", "# N*H*W*C", "\n", "\n", "logpt", "=", "F", ".", "log_softmax", "(", "input", ")", "\n", "logpt", "=", "logpt", ".", "gather", "(", "1", ",", "target_index", ")", "\n", "logpt", "=", "logpt", ".", "view", "(", "-", "1", ")", "\n", "logpt", "=", "logpt", "*", "target_binary_back", "\n", "pt", "=", "Variable", "(", "logpt", ".", "data", ".", "exp", "(", ")", ")", "\n", "\n", "if", "self", ".", "alpha", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "alpha", ".", "type", "(", ")", "!=", "input", ".", "data", ".", "type", "(", ")", ":", "\n", "                ", "self", ".", "alpha", "=", "self", ".", "alpha", ".", "type_as", "(", "input", ".", "data", ")", "\n", "", "at", "=", "self", ".", "alpha", ".", "gather", "(", "0", ",", "target", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "logpt", "=", "logpt", "*", "Variable", "(", "at", ")", "\n", "\n", "", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "logpt", "\n", "\n", "if", "self", ".", "size_average", ":", "return", "loss", ".", "sum", "(", ")", "/", "(", "num_objects", ".", "data", "+", "1", ")", "\n", "else", ":", "return", "loss", ".", "sum", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.dice_loss.DiceCoeff.forward": [[8, 16], ["dice_loss.DiceCoeff.save_for_backward", "torch.dot", "input.view", "target.view", "dice_loss.DiceCoeff.union.float", "torch.sum", "torch.sum", "dice_loss.DiceCoeff.inter.float"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "self", ".", "save_for_backward", "(", "input", ",", "target", ")", "\n", "eps", "=", "0.0001", "\n", "self", ".", "inter", "=", "torch", ".", "dot", "(", "input", ".", "view", "(", "-", "1", ")", ",", "target", ".", "view", "(", "-", "1", ")", ")", "\n", "self", ".", "union", "=", "torch", ".", "sum", "(", "input", ")", "+", "torch", ".", "sum", "(", "target", ")", "+", "eps", "\n", "\n", "t", "=", "(", "2", "*", "self", ".", "inter", ".", "float", "(", ")", "+", "eps", ")", "/", "self", ".", "union", ".", "float", "(", ")", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.dice_loss.DiceCoeff.backward": [[18, 30], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "\n", "        ", "input", ",", "target", "=", "self", ".", "saved_variables", "\n", "grad_input", "=", "grad_target", "=", "None", "\n", "\n", "if", "self", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "grad_output", "*", "2", "*", "(", "target", "*", "self", ".", "union", "-", "self", ".", "inter", ")", "/", "(", "self", ".", "union", "*", "self", ".", "union", ")", "\n", "", "if", "self", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "grad_target", "=", "None", "\n", "\n", "", "return", "grad_input", ",", "grad_target", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.dice_loss.dice_coeff": [[32, 44], ["enumerate", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_.to", "torch.FloatTensor().zero_", "zip", "dice_loss.DiceCoeff.forward", "torch.FloatTensor", "torch.FloatTensor", "dice_loss.DiceCoeff"], "function", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.forward"], ["", "", "def", "dice_coeff", "(", "input", ",", "target", ",", "device", ")", ":", "\n", "    ", "\"\"\"Dice coeff for batches\"\"\"", "\n", "if", "input", ".", "is_cuda", ":", "\n", "        ", "s", "=", "torch", ".", "FloatTensor", "(", "1", ")", ".", "zero_", "(", ")", "\n", "s", "=", "s", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "s", "=", "torch", ".", "FloatTensor", "(", "1", ")", ".", "zero_", "(", ")", "\n", "\n", "", "for", "i", ",", "c", "in", "enumerate", "(", "zip", "(", "input", ",", "target", ")", ")", ":", "\n", "        ", "s", "=", "s", "+", "DiceCoeff", "(", ")", ".", "forward", "(", "c", "[", "0", "]", ",", "c", "[", "1", "]", ")", "\n", "\n", "", "return", "s", "/", "(", "i", "+", "1", ")", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.walk_path": [[10, 20], ["os.path.isdir", "sorted", "os.walk", "paths.append", "print", "os.path.join"], "function", ["None"], ["def", "walk_path", "(", "dir", ")", ":", "\n", "    ", "dir", "=", "dir", "+", "'mnms'", "\n", "paths", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "dirs", ",", "_", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "name", "in", "dirs", ":", "\n", "            ", "paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "name", ")", ")", "\n", "print", "(", "paths", ")", "\n", "", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.load_path": [[21, 23], ["utils.walk_path"], "function", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.walk_path"], ["", "def", "load_path", "(", "input_data_directory", ")", ":", "\n", "    ", "return", "walk_path", "(", "input_data_directory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.load_phase": [[24, 35], ["os.path.join", "os.path.join", "nibabel.load", "nib.load.get_fdata", "nibabel.load", "nib.load.get_fdata"], "function", ["None"], ["", "def", "load_phase", "(", "path", ")", ":", "\n", "    ", "ED_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "path", "[", "-", "6", ":", "-", "1", "]", "+", "path", "[", "-", "1", "]", "+", "'_sa_ED.nii.gz'", ")", "\n", "ES_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "path", "[", "-", "6", ":", "-", "1", "]", "+", "path", "[", "-", "1", "]", "+", "'_sa_ES.nii.gz'", ")", "\n", "\n", "img_ED", "=", "nib", ".", "load", "(", "ED_path", ")", "\n", "img_np_ED", "=", "img_ED", ".", "get_fdata", "(", ")", "\n", "\n", "img_ES", "=", "nib", ".", "load", "(", "ES_path", ")", "\n", "img_np_ES", "=", "img_ES", ".", "get_fdata", "(", ")", "\n", "\n", "return", "img_np_ED", ",", "img_np_ES", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.pre_transform": [[36, 64], ["numpy.array", "transform.min", "transform.max", "transform.astype", "torchvision.transforms.Compose", "transforms.Compose.", "torchvision.transforms.Normalize", "numpy.array", "torchvision.transforms.ToTensor", "torchvision.transforms.CenterCrop", "torchvision.transforms.Pad", "torchvision.transforms.ToPILImage"], "function", ["None"], ["", "def", "pre_transform", "(", "img_in", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "img_in", ")", "\n", "img", "-=", "img", ".", "min", "(", ")", "\n", "img", "/=", "img", ".", "max", "(", ")", "\n", "img", "=", "img", ".", "astype", "(", "'float32'", ")", "\n", "\n", "new_size", "=", "224", "\n", "img_size", "=", "img", ".", "shape", "\n", "\n", "left_size", "=", "0", "\n", "top_size", "=", "0", "\n", "right_size", "=", "0", "\n", "bot_size", "=", "0", "\n", "if", "img_size", "[", "-", "2", "]", "<", "new_size", ":", "\n", "        ", "top_size", "=", "(", "new_size", "-", "img_size", "[", "-", "2", "]", ")", "//", "2", "\n", "bot_size", "=", "(", "new_size", "-", "img_size", "[", "-", "2", "]", ")", "-", "top_size", "\n", "", "if", "img_size", "[", "-", "1", "]", "<", "new_size", ":", "\n", "        ", "left_size", "=", "(", "new_size", "-", "img_size", "[", "-", "1", "]", ")", "//", "2", "\n", "right_size", "=", "(", "new_size", "-", "img_size", "[", "-", "1", "]", ")", "-", "left_size", "\n", "\n", "", "transform_list", "=", "[", "transforms", ".", "Normalize", "(", "[", "0.5", "]", ",", "[", "0.5", "]", ")", "]", "\n", "transform_list", "=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "+", "transform_list", "\n", "transform_list", "=", "[", "transforms", ".", "CenterCrop", "(", "(", "new_size", ",", "new_size", ")", ")", "]", "+", "transform_list", "\n", "transform_list", "=", "[", "transforms", ".", "Pad", "(", "(", "left_size", ",", "top_size", ",", "right_size", ",", "bot_size", ")", ")", "]", "+", "transform_list", "\n", "transform_list", "=", "[", "transforms", ".", "ToPILImage", "(", ")", "]", "+", "transform_list", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "img", "=", "transform", "(", "np", ".", "array", "(", "img", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.predict_img": [[65, 81], ["net.eval", "full_img.unsqueeze", "torch.no_grad", "net", "net.squeeze", "output.squeeze.squeeze"], "function", ["None"], ["", "def", "predict_img", "(", "net", ",", "\n", "full_img", ",", "\n", "out_threshold", "=", "0.5", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "\n", "img", "=", "full_img", ".", "unsqueeze", "(", "0", ")", "\n", "img", "=", "img", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", "=", "net", "(", "img", ")", "\n", "\n", "probs", "=", "output", ".", "squeeze", "(", "0", ")", "\n", "\n", "full_mask", "=", "probs", ".", "squeeze", "(", ")", "\n", "\n", "", "return", "full_mask", ">", "out_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.post_transform": [[83, 131], ["numpy.array", "torchvision.transforms.Compose", "numpy.array", "np.transpose.astype", "PIL.Image.fromarray", "transforms.Compose.", "np.transpose.cpu().numpy", "numpy.transpose", "torchvision.transforms.CenterCrop", "np.transpose.cpu().numpy", "torchvision.transforms.Pad", "torchvision.transforms.ToTensor", "np.transpose.cpu", "np.transpose.cpu"], "function", ["None"], ["", "def", "post_transform", "(", "img", ",", "mask", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "img_size", "=", "img", ".", "shape", "\n", "\n", "new_size", "=", "224", "\n", "height", "=", "new_size", "\n", "weight", "=", "new_size", "\n", "\n", "# H", "\n", "if", "img_size", "[", "-", "2", "]", "<", "new_size", ":", "\n", "        ", "height", "=", "img_size", "[", "-", "2", "]", "\n", "# W", "\n", "", "if", "img_size", "[", "-", "1", "]", "<", "new_size", ":", "\n", "        ", "weight", "=", "img_size", "[", "-", "1", "]", "\n", "\n", "", "left_size", "=", "0", "\n", "top_size", "=", "0", "\n", "right_size", "=", "0", "\n", "bot_size", "=", "0", "\n", "if", "height", "<", "img_size", "[", "-", "2", "]", ":", "\n", "        ", "top_size", "=", "(", "img_size", "[", "-", "2", "]", "-", "height", ")", "//", "2", "\n", "bot_size", "=", "(", "img_size", "[", "-", "2", "]", "-", "height", ")", "-", "top_size", "\n", "", "if", "weight", "<", "img_size", "[", "-", "1", "]", ":", "\n", "        ", "left_size", "=", "(", "img_size", "[", "-", "1", "]", "-", "weight", ")", "//", "2", "\n", "right_size", "=", "(", "img_size", "[", "-", "1", "]", "-", "weight", ")", "-", "left_size", "\n", "\n", "\n", "### Here: do the anti-transformation for the mask.", "\n", "### if img size is smaller -> crop to that size", "\n", "### if img size is larger -> zero padding", "\n", "\n", "", "transform_list", "=", "[", "transforms", ".", "CenterCrop", "(", "(", "height", ",", "weight", ")", ")", "]", "\n", "transform_list", "=", "transform_list", "+", "[", "transforms", ".", "Pad", "(", "(", "left_size", ",", "top_size", ",", "right_size", ",", "bot_size", ")", ")", "]", "\n", "transform_list", "=", "transform_list", "+", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "mask", "=", "np", ".", "array", "(", "mask", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "mask", "=", "mask", "[", "0", ",", ":", ",", ":", "]", "*", "1", "+", "mask", "[", "1", ",", ":", ",", ":", "]", "*", "2", "+", "mask", "[", "2", ",", ":", ",", ":", "]", "*", "3", "\n", "mask", "=", "mask", ".", "astype", "(", "'float32'", ")", "\n", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ",", "'F'", ")", "\n", "\n", "mask", "=", "transform", "(", "mask", ")", "\n", "### tensor to np array.", "\n", "mask", "=", "mask", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mask", "=", "np", ".", "transpose", "(", "mask", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "return", "mask", "# one channel numpy array", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.safe_mkdir": [[132, 137], ["os.makedirs"], "function", ["None"], ["", "def", "safe_mkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.save_phase": [[138, 155], ["utils.safe_mkdir", "os.path.join", "os.path.join", "nibabel.load", "nibabel.load", "os.path.join", "os.path.join", "nibabel.Nifti1Image", "nibabel.Nifti1Image", "nibabel.save", "nibabel.save"], "function", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.safe_mkdir"], ["", "", "def", "save_phase", "(", "ED_np", ",", "ES_np", ",", "output_data_directory", ",", "path", ")", ":", "\n", "\n", "    ", "safe_mkdir", "(", "output_data_directory", ")", "\n", "\n", "ED_img_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "path", "[", "-", "6", ":", "-", "1", "]", "+", "path", "[", "-", "1", "]", "+", "'_sa_ED.nii.gz'", ")", "\n", "ES_img_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "path", "[", "-", "6", ":", "-", "1", "]", "+", "path", "[", "-", "1", "]", "+", "'_sa_ES.nii.gz'", ")", "\n", "\n", "img_ED", "=", "nib", ".", "load", "(", "ED_img_path", ")", "\n", "img_ES", "=", "nib", ".", "load", "(", "ES_img_path", ")", "\n", "\n", "ED_out_path", "=", "os", ".", "path", ".", "join", "(", "output_data_directory", ",", "path", "[", "-", "6", ":", "-", "1", "]", "+", "path", "[", "-", "1", "]", "+", "'_sa_ED.nii.gz'", ")", "\n", "ES_out_path", "=", "os", ".", "path", ".", "join", "(", "output_data_directory", ",", "path", "[", "-", "6", ":", "-", "1", "]", "+", "path", "[", "-", "1", "]", "+", "'_sa_ES.nii.gz'", ")", "\n", "mask_ED", "=", "nib", ".", "Nifti1Image", "(", "ED_np", ",", "img_ED", ".", "affine", ",", "img_ED", ".", "header", ")", "\n", "mask_ES", "=", "nib", ".", "Nifti1Image", "(", "ES_np", ",", "img_ES", ".", "affine", ",", "img_ES", ".", "header", ")", "\n", "\n", "nib", ".", "save", "(", "mask_ED", ",", "ED_out_path", ")", "\n", "nib", ".", "save", "(", "mask_ES", ",", "ES_out_path", ")", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.submit.get_args": [[11, 19], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test the mnms dataset.'", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'-inp'", ",", "'--input_data_directory'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'input_data_directory'", ",", "dest", "=", "'inp'", ")", "\n", "parser", ".", "add_argument", "(", "'-out'", ",", "'--output_data_directory'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'output_data_directory'", ",", "dest", "=", "'out'", ")", "\n", "parser", ".", "add_argument", "(", "'-g'", ",", "'--gpu'", ",", "dest", "=", "'gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'GPU'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.submit.submit_mnms": [[21, 56], ["utils.load_path", "unet_model.UNet", "unet_model.UNet.load_state_dict", "unet_model.UNet.to", "torch.load", "utils.load_phase", "range", "range", "numpy.concatenate", "numpy.concatenate", "utils.save_phase", "utils.pre_transform", "img_tensor.to.to", "utils.predict_img", "utils.post_transform", "np.concatenate.append", "utils.pre_transform", "img_tensor.to.to", "utils.predict_img", "utils.post_transform", "np.concatenate.append"], "function", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.load_path", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.load_phase", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.save_phase", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.pre_transform", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.predict_img", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.post_transform", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.pre_transform", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.predict_img", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.None.utils.post_transform"], ["", "def", "submit_mnms", "(", "model_path", ",", "input_data_directory", ",", "output_data_directory", ",", "device", ")", ":", "\n", "\n", "    ", "data_paths", "=", "load_path", "(", "input_data_directory", ")", "\n", "\n", "net", "=", "UNet", "(", "n_channels", "=", "1", ",", "n_classes", "=", "4", ",", "bilinear", "=", "True", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "device", ")", ")", "\n", "net", ".", "to", "(", "device", ")", "\n", "\n", "for", "path", "in", "data_paths", ":", "\n", "        ", "ED_np", ",", "ES_np", "=", "load_phase", "(", "path", ")", "# HxWxF", "\n", "ED_masks", "=", "[", "]", "\n", "ES_masks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ED_np", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "img_np", "=", "ED_np", "[", ":", ",", ":", ",", "i", "]", "\n", "img_tensor", "=", "pre_transform", "(", "img_np", ")", "\n", "img_tensor", "=", "img_tensor", ".", "to", "(", "device", ")", "\n", "\n", "mask", "=", "predict_img", "(", "net", ",", "img_tensor", ")", "\n", "\n", "mask", "=", "post_transform", "(", "img_np", ",", "mask", "[", "0", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "ED_masks", ".", "append", "(", "mask", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "ES_np", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "img_np", "=", "ES_np", "[", ":", ",", ":", ",", "i", "]", "\n", "img_tensor", "=", "pre_transform", "(", "img_np", ")", "\n", "img_tensor", "=", "img_tensor", ".", "to", "(", "device", ")", "\n", "\n", "mask", "=", "predict_img", "(", "net", ",", "img_tensor", ")", "\n", "\n", "mask", "=", "post_transform", "(", "img_np", ",", "mask", "[", "0", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "ES_masks", ".", "append", "(", "mask", ")", "\n", "\n", "", "ED_masks", "=", "np", ".", "concatenate", "(", "ED_masks", ",", "axis", "=", "2", ")", "\n", "ES_masks", "=", "np", ".", "concatenate", "(", "ES_masks", ",", "axis", "=", "2", ")", "\n", "save_phase", "(", "ED_masks", ",", "ES_masks", ",", "output_data_directory", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Segmentor.__init__": [[19, 29], ["torch.Module.__init__", "conv_bn_relu", "conv_bn_relu", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_bn_relu", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_bn_relu"], ["    ", "def", "__init__", "(", "self", ",", "num_output_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Segmentor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        \"\"\"", "\n", "self", ".", "num_output_channels", "=", "num_output_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "+", "1", "# check again", "\n", "\n", "self", ".", "conv1", "=", "conv_bn_relu", "(", "self", ".", "num_output_channels", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv2", "=", "conv_bn_relu", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "pred", "=", "nn", ".", "Conv2d", "(", "64", ",", "self", ".", "num_classes", ",", "1", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Segmentor.forward": [[30, 37], ["sdnet_ada.Segmentor.conv1", "sdnet_ada.Segmentor.conv2", "sdnet_ada.Segmentor.pred", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "pred", "(", "out", ")", "\n", "out", "=", "F", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.AEncoder.__init__": [[39, 53], ["torch.Module.__init__", "sdnet_ada.UNet", "RoundLayer"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "height", ",", "ndf", ",", "num_output_channels", ",", "norm", ",", "upsample", ")", ":", "\n", "        ", "super", "(", "AEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        Build an encoder to extract anatomical information from the image.\n        \"\"\"", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "ndf", "=", "ndf", "\n", "self", ".", "num_output_channels", "=", "num_output_channels", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "upsample", "=", "upsample", "\n", "\n", "self", ".", "unet", "=", "UNet", "(", "n_channels", "=", "1", ",", "n_classes", "=", "self", ".", "num_output_channels", ",", "bilinear", "=", "True", ")", "\n", "self", ".", "rounding", "=", "RoundLayer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.AEncoder.forward": [[54, 60], ["sdnet_ada.AEncoder.unet", "torch.softmax", "torch.softmax", "torch.softmax", "sdnet_ada.AEncoder.rounding"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "unet", "(", "x", ")", "\n", "out", "=", "F", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "rounding", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.UNet.__init__": [[62, 79], ["torch.Module.__init__", "DoubleConv", "Down", "Down", "Down", "Down", "Up", "Up", "Up", "Up", "OutConv"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "n_classes", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "bilinear", "=", "bilinear", "\n", "\n", "self", ".", "inc", "=", "DoubleConv", "(", "n_channels", ",", "64", ")", "\n", "self", ".", "down1", "=", "Down", "(", "64", ",", "128", ")", "\n", "self", ".", "down2", "=", "Down", "(", "128", ",", "256", ")", "\n", "self", ".", "down3", "=", "Down", "(", "256", ",", "512", ")", "\n", "factor", "=", "2", "if", "bilinear", "else", "1", "\n", "self", ".", "down4", "=", "Down", "(", "512", ",", "1024", "//", "factor", ")", "\n", "self", ".", "up1", "=", "Up", "(", "1024", ",", "512", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up2", "=", "Up", "(", "512", ",", "256", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up3", "=", "Up", "(", "256", ",", "128", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up4", "=", "Up", "(", "128", ",", "64", ",", "bilinear", ")", "\n", "self", ".", "outc", "=", "OutConv", "(", "64", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.UNet.forward": [[80, 92], ["sdnet_ada.UNet.inc", "sdnet_ada.UNet.down1", "sdnet_ada.UNet.down2", "sdnet_ada.UNet.down3", "sdnet_ada.UNet.down4", "sdnet_ada.UNet.up1", "sdnet_ada.UNet.up2", "sdnet_ada.UNet.up3", "sdnet_ada.UNet.up4", "sdnet_ada.UNet.outc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "inc", "(", "x", ")", "\n", "x2", "=", "self", ".", "down1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "down2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "down3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "down4", "(", "x4", ")", "\n", "x", "=", "self", ".", "up1", "(", "x5", ",", "x4", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "x3", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "x2", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "x1", ")", "\n", "logits", "=", "self", ".", "outc", "(", "x", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.AdaptiveInstanceNorm2d.__init__": [[96, 107], ["torch.Module.__init__", "sdnet_ada.AdaptiveInstanceNorm2d.register_buffer", "sdnet_ada.AdaptiveInstanceNorm2d.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "AdaptiveInstanceNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "# weight and bias are dynamically assigned", "\n", "self", ".", "weight", "=", "None", "\n", "self", ".", "bias", "=", "None", "\n", "# just dummy buffers, not used", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.AdaptiveInstanceNorm2d.forward": [[108, 122], ["sdnet_ada.AdaptiveInstanceNorm2d.running_mean.repeat", "sdnet_ada.AdaptiveInstanceNorm2d.running_var.repeat", "x.contiguous().view", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm.view", "x.size", "x.size", "x.contiguous", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "self", ".", "weight", "is", "not", "None", "and", "self", ".", "bias", "is", "not", "None", ",", "\"Please assign weight and bias before calling AdaIN!\"", "\n", "b", ",", "c", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "running_mean", "=", "self", ".", "running_mean", ".", "repeat", "(", "b", ")", "\n", "running_var", "=", "self", ".", "running_var", ".", "repeat", "(", "b", ")", "\n", "\n", "# Apply instance norm", "\n", "x_reshaped", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "b", "*", "c", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "out", "=", "F", ".", "batch_norm", "(", "\n", "x_reshaped", ",", "running_mean", ",", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "True", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "return", "out", ".", "view", "(", "b", ",", "c", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.AdaptiveInstanceNorm2d.__repr__": [[123, 125], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "str", "(", "self", ".", "num_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.LayerNorm.__init__": [[127, 136], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ".", "uniform_", "(", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.LayerNorm.forward": [[137, 154], ["x.size", "x.view().mean().view", "x.view().std().view", "x.view().mean().view", "x.view().std().view", "sdnet_ada.LayerNorm.beta.view", "x.dim", "x.view().mean", "x.view().std", "x.view().mean", "x.view().std", "sdnet_ada.LayerNorm.gamma.view", "x.dim", "x.view", "x.view", "x.view", "x.view", "x.size", "x.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shape", "=", "[", "-", "1", "]", "+", "[", "1", "]", "*", "(", "x", ".", "dim", "(", ")", "-", "1", ")", "\n", "# print(x.size())", "\n", "if", "x", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "# These two lines run much faster in pytorch 0.4 than the two lines listed below.", "\n", "            ", "mean", "=", "x", ".", "view", "(", "-", "1", ")", ".", "mean", "(", ")", ".", "view", "(", "*", "shape", ")", "\n", "std", "=", "x", ".", "view", "(", "-", "1", ")", ".", "std", "(", ")", ".", "view", "(", "*", "shape", ")", "\n", "", "else", ":", "\n", "            ", "mean", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "mean", "(", "1", ")", ".", "view", "(", "*", "shape", ")", "\n", "std", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "std", "(", "1", ")", ".", "view", "(", "*", "shape", ")", "\n", "\n", "", "x", "=", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "\n", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "shape", "=", "[", "1", ",", "-", "1", "]", "+", "[", "1", "]", "*", "(", "x", ".", "dim", "(", ")", "-", "2", ")", "\n", "x", "=", "x", "*", "self", ".", "gamma", ".", "view", "(", "*", "shape", ")", "+", "self", ".", "beta", ".", "view", "(", "*", "shape", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.LinearBlock.__init__": [[159, 196], ["torch.Module.__init__", "SpectralNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "sdnet_ada.LayerNorm", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.SELU", "torch.SELU", "torch.SELU", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "norm", "=", "'none'", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "LinearBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "use_bias", "=", "True", "\n", "# initialize fully connected layer", "\n", "if", "norm", "==", "'sn'", ":", "\n", "            ", "self", ".", "fc", "=", "SpectralNorm", "(", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "use_bias", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "use_bias", ")", "\n", "\n", "# initialize normalization", "\n", "", "norm_dim", "=", "output_dim", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'ln'", ":", "\n", "            ", "self", ".", "norm", "=", "LayerNorm", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'none'", "or", "norm", "==", "'sn'", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported normalization: {}\"", ".", "format", "(", "norm", ")", "\n", "\n", "# initialize activation", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'lrelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'selu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'none'", ":", "\n", "            ", "self", ".", "activation", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported activation: {}\"", ".", "format", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.LinearBlock.forward": [[197, 204], ["sdnet_ada.LinearBlock.fc", "sdnet_ada.LinearBlock.norm", "sdnet_ada.LinearBlock.activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "out", "=", "self", ".", "norm", "(", "out", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "out", "=", "self", ".", "activation", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Conv2dBlock.__init__": [[206, 257], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "SpectralNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "sdnet_ada.LayerNorm", "torch.PReLU", "torch.PReLU", "torch.PReLU", "sdnet_ada.AdaptiveInstanceNorm2d", "torch.SELU", "torch.SELU", "torch.SELU", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "0", ",", "norm", "=", "'none'", ",", "activation", "=", "'relu'", ",", "pad_type", "=", "'zero'", ")", ":", "\n", "        ", "super", "(", "Conv2dBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_bias", "=", "True", "\n", "# initialize padding", "\n", "if", "pad_type", "==", "'reflect'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "padding", ")", "\n", "", "elif", "pad_type", "==", "'replicate'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReplicationPad2d", "(", "padding", ")", "\n", "", "elif", "pad_type", "==", "'zero'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "padding", ")", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported padding type: {}\"", ".", "format", "(", "pad_type", ")", "\n", "\n", "# initialize normalization", "\n", "", "norm_dim", "=", "output_dim", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "#self.norm = nn.InstanceNorm2d(norm_dim, track_running_stats=True)", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'ln'", ":", "\n", "            ", "self", ".", "norm", "=", "LayerNorm", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'adain'", ":", "\n", "            ", "self", ".", "norm", "=", "AdaptiveInstanceNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'none'", "or", "norm", "==", "'sn'", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported normalization: {}\"", ".", "format", "(", "norm", ")", "\n", "\n", "# initialize activation", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'lrelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'selu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'none'", ":", "\n", "            ", "self", ".", "activation", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported activation: {}\"", ".", "format", "(", "activation", ")", "\n", "\n", "# initialize convolution", "\n", "", "if", "norm", "==", "'sn'", ":", "\n", "            ", "self", ".", "conv", "=", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "bias", "=", "self", ".", "use_bias", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "bias", "=", "self", ".", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Conv2dBlock.forward": [[258, 265], ["sdnet_ada.Conv2dBlock.conv", "sdnet_ada.Conv2dBlock.pad", "sdnet_ada.Conv2dBlock.norm", "sdnet_ada.Conv2dBlock.activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "self", ".", "pad", "(", "x", ")", ")", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.StyleEncoder.__init__": [[267, 281], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sdnet_ada.Conv2dBlock", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "sdnet_ada.Conv2dBlock"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "style_dim", ",", "norm", ",", "activ", ",", "pad_type", ")", ":", "\n", "        ", "super", "(", "StyleEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dim", "=", "64", "\n", "self", ".", "model", "=", "[", "]", "\n", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "1", ",", "dim", ",", "7", ",", "1", ",", "3", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "2", "*", "dim", ",", "4", ",", "2", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "dim", "*=", "2", "\n", "# for i in range(n_downsample - 2):", "\n", "#     self.model += [Conv2dBlock(dim, dim, 4, 2, 1, norm=norm, activation=activ, pad_type=pad_type)]", "\n", "", "self", ".", "model", "+=", "[", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "]", "# global average pooling", "\n", "self", ".", "model", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "style_dim", ",", "1", ",", "1", ",", "0", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ")", "\n", "self", ".", "output_dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.StyleEncoder.forward": [[282, 284], ["sdnet_ada.StyleEncoder.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Ada_Decoder.__init__": [[288, 295], ["torch.Module.__init__", "sdnet_ada.Decoder", "sdnet_ada.MLP", "sdnet_ada.Ada_Decoder.get_num_adain_params"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Ada_Decoder.get_num_adain_params"], ["    ", "def", "__init__", "(", "self", ",", "decoder_type", ",", "anatomy_out_channels", ",", "z_length", ",", "num_mask_channels", ")", ":", "\n", "        ", "super", "(", "Ada_Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        \"\"\"", "\n", "self", ".", "dec", "=", "Decoder", "(", "anatomy_out_channels", ",", "res_norm", "=", "'adain'", ",", "activ", "=", "'relu'", ",", "pad_type", "=", "'reflect'", ")", "\n", "# MLP to generate AdaIN parameters", "\n", "self", ".", "mlp", "=", "MLP", "(", "z_length", ",", "self", ".", "get_num_adain_params", "(", "self", ".", "dec", ")", ",", "256", ",", "3", ",", "norm", "=", "'none'", ",", "activ", "=", "'relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Ada_Decoder.forward": [[296, 300], ["sdnet_ada.Ada_Decoder.decode"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Ada_Decoder.decode"], ["", "def", "forward", "(", "self", ",", "a", ",", "z", ",", "type", ")", ":", "\n", "# reconstruct an image", "\n", "        ", "images_recon", "=", "self", ".", "decode", "(", "a", ",", "z", ")", "\n", "return", "images_recon", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Ada_Decoder.decode": [[301, 307], ["sdnet_ada.Ada_Decoder.mlp", "sdnet_ada.Ada_Decoder.assign_adain_params", "sdnet_ada.Ada_Decoder.dec"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Ada_Decoder.assign_adain_params"], ["", "def", "decode", "(", "self", ",", "content", ",", "style", ")", ":", "\n", "# decode content and style codes to an image", "\n", "        ", "adain_params", "=", "self", ".", "mlp", "(", "style", ")", "\n", "self", ".", "assign_adain_params", "(", "adain_params", ",", "self", ".", "dec", ")", "\n", "images", "=", "self", ".", "dec", "(", "content", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Ada_Decoder.assign_adain_params": [[308, 318], ["model.modules", "mean.contiguous().view", "std.contiguous().view", "adain_params.size", "mean.contiguous", "std.contiguous"], "methods", ["None"], ["", "def", "assign_adain_params", "(", "self", ",", "adain_params", ",", "model", ")", ":", "\n", "# assign the adain_params to the AdaIN layers in model", "\n", "        ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "m", ".", "__class__", ".", "__name__", "==", "\"AdaptiveInstanceNorm2d\"", ":", "\n", "                ", "mean", "=", "adain_params", "[", ":", ",", ":", "m", ".", "num_features", "]", "\n", "std", "=", "adain_params", "[", ":", ",", "m", ".", "num_features", ":", "2", "*", "m", ".", "num_features", "]", "\n", "m", ".", "bias", "=", "mean", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "m", ".", "weight", "=", "std", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "adain_params", ".", "size", "(", "1", ")", ">", "2", "*", "m", ".", "num_features", ":", "\n", "                    ", "adain_params", "=", "adain_params", "[", ":", ",", "2", "*", "m", ".", "num_features", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Ada_Decoder.get_num_adain_params": [[319, 326], ["model.modules"], "methods", ["None"], ["", "", "", "", "def", "get_num_adain_params", "(", "self", ",", "model", ")", ":", "\n", "# return the number of AdaIN parameters needed by the model", "\n", "        ", "num_adain_params", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "m", ".", "__class__", ".", "__name__", "==", "\"AdaptiveInstanceNorm2d\"", ":", "\n", "                ", "num_adain_params", "+=", "2", "*", "m", ".", "num_features", "\n", "", "", "return", "num_adain_params", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Decoder.__init__": [[328, 339], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sdnet_ada.Conv2dBlock", "sdnet_ada.Conv2dBlock"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "output_dim", "=", "1", ",", "res_norm", "=", "'adain'", ",", "activ", "=", "'relu'", ",", "pad_type", "=", "'zero'", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "[", "]", "\n", "# upsampling blocks", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", "//", "2", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "'ln'", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "dim", "//=", "2", "\n", "# use reflection padding in the last conv layer", "\n", "", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "output_dim", ",", "7", ",", "1", ",", "3", ",", "norm", "=", "'none'", ",", "activation", "=", "'tanh'", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Decoder.forward": [[340, 342], ["sdnet_ada.Decoder.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.MLP.__init__": [[344, 353], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sdnet_ada.LinearBlock", "sdnet_ada.LinearBlock", "sdnet_ada.LinearBlock"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "dim", ",", "n_blk", ",", "norm", "=", "'none'", ",", "activ", "=", "'relu'", ")", ":", "\n", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "[", "]", "\n", "self", ".", "model", "+=", "[", "LinearBlock", "(", "input_dim", ",", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ")", "]", "\n", "for", "i", "in", "range", "(", "n_blk", "-", "2", ")", ":", "\n", "            ", "self", ".", "model", "+=", "[", "LinearBlock", "(", "dim", ",", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ")", "]", "\n", "", "self", ".", "model", "+=", "[", "LinearBlock", "(", "dim", ",", "output_dim", ",", "norm", "=", "'none'", ",", "activation", "=", "'none'", ")", "]", "# no output activations", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.MLP.forward": [[354, 356], ["sdnet_ada.MLP.model", "x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Discriminator.__init__": [[359, 375], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "SpectralNorm", "SpectralNorm", "SpectralNorm", "SpectralNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ndf", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ndf", "=", "ndf", "\n", "self", ".", "num_classes", "=", "num_classes", "+", "1", "\n", "self", ".", "main", "=", "[", "]", "\n", "# input is (nc) x 224 x 224", "\n", "self", ".", "main", "+=", "[", "nn", ".", "Conv2d", "(", "self", ".", "num_classes", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "]", "#64x112x112", "\n", "self", ".", "main", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "self", ".", "main", "+=", "[", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "]", "#128x56x56", "\n", "self", ".", "main", "+=", "[", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "]", "#256x28x28", "\n", "self", ".", "main", "+=", "[", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "]", "#512x14x14", "\n", "self", ".", "main", "+=", "[", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "]", "#1024x7x7", "\n", "# state size. (ndf*16) x 14 x 14", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "ndf", "*", "8", "*", "7", "*", "7", ",", "1", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "main", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.Discriminator.forward": [[376, 382], ["x.size", "sdnet_ada.Discriminator.main", "down_out.view.view.view", "sdnet_ada.Discriminator.out", "sdnet_ada.Discriminator.view().squeeze", "sdnet_ada.Discriminator.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b_size", "=", "x", ".", "size", "(", "0", ")", "\n", "down_out", "=", "self", ".", "main", "(", "x", ")", "\n", "down_out", "=", "down_out", ".", "view", "(", "b_size", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "out", "(", "down_out", ")", "\n", "return", "output", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.SDNet.__init__": [[385, 409], ["torch.Module.__init__", "sdnet_ada.StyleEncoder", "sdnet_ada.AEncoder", "sdnet_ada.Segmentor", "sdnet_ada.Ada_Decoder"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "height", ",", "num_classes", ",", "ndf", ",", "z_length", ",", "norm", ",", "upsample", ",", "decoder_type", ",", "anatomy_out_channels", ",", "num_mask_channels", ")", ":", "\n", "        ", "super", "(", "SDNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        Args:\n            width: input width\n            height: input height\n            upsample: upsampling type (nearest | bilateral)\n            nclasses: number of semantice segmentation classes\n        \"\"\"", "\n", "self", ".", "h", "=", "height", "\n", "self", ".", "w", "=", "width", "\n", "self", ".", "ndf", "=", "ndf", "\n", "self", ".", "z_length", "=", "z_length", "\n", "self", ".", "anatomy_out_channels", "=", "anatomy_out_channels", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "decoder_type", "=", "decoder_type", "\n", "self", ".", "num_mask_channels", "=", "num_mask_channels", "\n", "\n", "self", ".", "m_encoder", "=", "StyleEncoder", "(", "z_length", ",", "norm", "=", "'none'", ",", "activ", "=", "'relu'", ",", "pad_type", "=", "'reflect'", ")", "\n", "self", ".", "a_encoder", "=", "AEncoder", "(", "self", ".", "h", ",", "self", ".", "w", ",", "self", ".", "ndf", ",", "self", ".", "anatomy_out_channels", ",", "self", ".", "norm", ",", "self", ".", "upsample", ")", "\n", "self", ".", "segmentor", "=", "Segmentor", "(", "self", ".", "anatomy_out_channels", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "decoder", "=", "Ada_Decoder", "(", "self", ".", "decoder_type", ",", "self", ".", "anatomy_out_channels", ",", "self", ".", "z_length", ",", "self", ".", "num_mask_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.SDNet.forward": [[410, 429], ["sdnet_ada.SDNet.m_encoder", "sdnet_ada.SDNet.a_encoder", "sdnet_ada.SDNet.segmentor", "sdnet_ada.SDNet.decoder", "sdnet_ada.SDNet.m_encoder", "sdnet_ada.SDNet.m_encoder", "sdnet_ada.SDNet.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ",", "script_type", ")", ":", "\n", "# z_out = torch.randn(x.shape[0], self.z_length, 1, 1).to(device)", "\n", "        ", "z_out", "=", "self", ".", "m_encoder", "(", "x", ")", "\n", "a_out", "=", "self", ".", "a_encoder", "(", "x", ")", "\n", "seg_pred", "=", "self", ".", "segmentor", "(", "a_out", ")", "\n", "\n", "\n", "logvar_out", "=", "None", "\n", "mu_out", "=", "None", "\n", "#t0 = time.time()", "\n", "if", "script_type", "==", "'training'", ":", "\n", "            ", "reco", "=", "self", ".", "decoder", "(", "a_out", ",", "z_out", ",", "self", ".", "decoder_type", ")", "\n", "mu_out_tilde", "=", "self", ".", "m_encoder", "(", "reco", ")", "\n", "", "elif", "script_type", "==", "'val'", "or", "script_type", "==", "'test'", ":", "\n", "            ", "z_out", "=", "self", ".", "m_encoder", "(", "x", ")", "\n", "reco", "=", "self", ".", "decoder", "(", "a_out", ",", "z_out", ",", "self", ".", "decoder_type", ")", "\n", "mu_out_tilde", "=", "None", "\n", "\n", "", "return", "reco", ",", "z_out", ",", "mu_out_tilde", ",", "a_out", ",", "seg_pred", ",", "mu_out", ",", "logvar_out", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.SDNet.reconstruct": [[430, 434], ["sdnet_ada.SDNet.decoder"], "methods", ["None"], ["", "def", "reconstruct", "(", "self", ",", "a_out", ",", "z_out", ")", ":", "\n", "        ", "reco", "=", "self", ".", "decoder", "(", "a_out", ",", "z_out", ",", "self", ".", "decoder_type", ")", "\n", "\n", "return", "reco", "", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.sdnet_ada.l2normalize": [[155, 157], ["v.norm"], "function", ["None"], ["", "", "def", "l2normalize", "(", "v", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "return", "v", "/", "(", "v", ".", "norm", "(", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spectral_norm.SpectralNorm.__init__": [[15, 22], ["torch.nn.Module.__init__", "spectral_norm.SpectralNorm._made_params", "spectral_norm.SpectralNorm._make_params"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spectral_norm.SpectralNorm._made_params", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spectral_norm.SpectralNorm._make_params"], ["    ", "def", "__init__", "(", "self", ",", "module", ",", "name", "=", "'weight'", ",", "power_iterations", "=", "1", ")", ":", "\n", "        ", "super", "(", "SpectralNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "power_iterations", "=", "power_iterations", "\n", "if", "not", "self", ".", "_made_params", "(", ")", ":", "\n", "            ", "self", ".", "_make_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spectral_norm.SpectralNorm._update_u_v": [[23, 36], ["getattr", "getattr", "getattr", "range", "getattr.dot", "setattr", "spectral_norm.l2normalize", "spectral_norm.l2normalize", "getattr.view().mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "getattr.dot.expand_as", "torch.t", "torch.t", "torch.t", "torch.t", "getattr.view", "getattr.view", "getattr.view"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spectral_norm.l2normalize", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spectral_norm.l2normalize"], ["", "", "def", "_update_u_v", "(", "self", ")", ":", "\n", "        ", "u", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_u\"", ")", "\n", "v", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_v\"", ")", "\n", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_bar\"", ")", "\n", "\n", "height", "=", "w", ".", "data", ".", "shape", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "power_iterations", ")", ":", "\n", "            ", "v", ".", "data", "=", "l2normalize", "(", "torch", ".", "mv", "(", "torch", ".", "t", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ")", ",", "u", ".", "data", ")", ")", "\n", "u", ".", "data", "=", "l2normalize", "(", "torch", ".", "mv", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ",", "v", ".", "data", ")", ")", "\n", "\n", "# sigma = torch.dot(u.data, torch.mv(w.view(height,-1).data, v.data))", "\n", "", "sigma", "=", "u", ".", "dot", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "mv", "(", "v", ")", ")", "\n", "setattr", "(", "self", ".", "module", ",", "self", ".", "name", ",", "w", "/", "sigma", ".", "expand_as", "(", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spectral_norm.SpectralNorm._made_params": [[37, 45], ["getattr", "getattr", "getattr"], "methods", ["None"], ["", "def", "_made_params", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "u", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_u\"", ")", "\n", "v", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_v\"", ")", "\n", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_bar\"", ")", "\n", "return", "True", "\n", "", "except", "AttributeError", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spectral_norm.SpectralNorm._make_params": [[47, 64], ["getattr", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "spectral_norm.l2normalize", "spectral_norm.l2normalize", "torch.nn.Parameter", "torch.nn.Parameter", "spectral_norm.SpectralNorm.module.register_parameter", "spectral_norm.SpectralNorm.module.register_parameter", "spectral_norm.SpectralNorm.module.register_parameter", "getattr.data.new().normal_", "getattr.data.new().normal_", "getattr.view", "getattr.data.new", "getattr.data.new"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spectral_norm.l2normalize", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spectral_norm.l2normalize"], ["", "", "def", "_make_params", "(", "self", ")", ":", "\n", "        ", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", ")", "\n", "\n", "height", "=", "w", ".", "data", ".", "shape", "[", "0", "]", "\n", "width", "=", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ".", "shape", "[", "1", "]", "\n", "\n", "u", "=", "Parameter", "(", "w", ".", "data", ".", "new", "(", "height", ")", ".", "normal_", "(", "0", ",", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "v", "=", "Parameter", "(", "w", ".", "data", ".", "new", "(", "width", ")", ".", "normal_", "(", "0", ",", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "u", ".", "data", "=", "l2normalize", "(", "u", ".", "data", ")", "\n", "v", ".", "data", "=", "l2normalize", "(", "v", ".", "data", ")", "\n", "w_bar", "=", "Parameter", "(", "w", ".", "data", ")", "\n", "\n", "del", "self", ".", "module", ".", "_parameters", "[", "self", ".", "name", "]", "\n", "\n", "self", ".", "module", ".", "register_parameter", "(", "self", ".", "name", "+", "\"_u\"", ",", "u", ")", "\n", "self", ".", "module", ".", "register_parameter", "(", "self", ".", "name", "+", "\"_v\"", ",", "v", ")", "\n", "self", ".", "module", ".", "register_parameter", "(", "self", ".", "name", "+", "\"_bar\"", ",", "w_bar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spectral_norm.SpectralNorm.forward": [[66, 69], ["spectral_norm.SpectralNorm._update_u_v", "spectral_norm.SpectralNorm.module.forward"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spectral_norm.SpectralNorm._update_u_v", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.forward"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "_update_u_v", "(", ")", "\n", "return", "self", ".", "module", ".", "forward", "(", "*", "args", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spectral_norm.l2normalize": [[10, 12], ["v.norm"], "function", ["None"], ["def", "l2normalize", "(", "v", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "return", "v", "/", "(", "v", ".", "norm", "(", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spade_resblk.SPADEResBlk.__init__": [[8, 22], ["torch.nn.Module.__init__", "torch.nn.LeakyReLU", "spade.SPADE", "torch.nn.Conv2d", "spade.SPADE", "torch.nn.Conv2d", "spade.SPADE", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "spade_resblk_kernel", ",", "k", ",", "k_out", ",", "skip", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "spade_resblk_kernel", "\n", "self", ".", "skip", "=", "skip", "\n", "self", ".", "lrelu", "=", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "spade1", "=", "SPADE", "(", "128", ",", "3", ",", "k", ")", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "k", ",", "k_out", ",", "kernel_size", "=", "(", "kernel_size", ",", "kernel_size", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "spade2", "=", "SPADE", "(", "128", ",", "3", ",", "k_out", ")", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "k_out", ",", "k_out", ",", "kernel_size", "=", "(", "kernel_size", ",", "kernel_size", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "spade_skip", "=", "SPADE", "(", "128", ",", "3", ",", "k", ")", "\n", "self", ".", "conv_skip", "=", "Conv2d", "(", "k", ",", "k_out", ",", "kernel_size", "=", "(", "kernel_size", ",", "kernel_size", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spade_resblk.SPADEResBlk.forward": [[23, 37], ["spade_resblk.SPADEResBlk.spade1", "spade_resblk.SPADEResBlk.lrelu", "spade_resblk.SPADEResBlk.conv1", "spade_resblk.SPADEResBlk.spade2", "spade_resblk.SPADEResBlk.lrelu", "spade_resblk.SPADEResBlk.conv2", "spade_resblk.SPADEResBlk.spade_skip", "spade_resblk.SPADEResBlk.conv_skip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "seg", ")", ":", "\n", "        ", "x_skip", "=", "x", "\n", "x", "=", "self", ".", "spade1", "(", "x", ",", "seg", ")", "\n", "x", "=", "self", ".", "lrelu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "spade2", "(", "x", ",", "seg", ")", "\n", "x", "=", "self", ".", "lrelu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "if", "x_skip", ".", "shape", "[", "1", "]", "!=", "x", ".", "shape", "[", "1", "]", ":", "\n", "            ", "x_skip", "=", "self", ".", "spade_skip", "(", "x_skip", ",", "seg", ")", "\n", "x_skip", "=", "self", ".", "conv_skip", "(", "x_skip", ")", "\n", "\n", "", "return", "x_skip", "+", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.unet_parts.DoubleConv.__init__": [[12, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "mid_channels", ":", "\n", "            ", "mid_channels", "=", "out_channels", "\n", "", "self", ".", "double_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.unet_parts.DoubleConv.forward": [[25, 27], ["unet_parts.DoubleConv.double_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "double_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.unet_parts.Down.__init__": [[32, 37], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "unet_parts.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxpool_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.unet_parts.Down.forward": [[39, 41], ["unet_parts.Down.maxpool_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "maxpool_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.unet_parts.Up.__init__": [[46, 56], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "unet_parts.DoubleConv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "unet_parts.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# if bilinear, use the normal convolutions to reduce the number of channels", "\n", "if", "bilinear", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ",", "in_channels", "//", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.unet_parts.Up.forward": [[58, 71], ["unet_parts.Up.up", "torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_parts.Up.conv", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "# input is CHW", "\n", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "[", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "\n", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", "]", ")", "\n", "# if you have padding issues, see", "\n", "# https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a", "\n", "# https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.unet_parts.OutConv.__init__": [[74, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "OutConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.unet_parts.OutConv.forward": [[78, 80], ["unet_parts.OutConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spade.SPADE.__init__": [[10, 17], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "spade_filter", ",", "spade_kernel", ",", "k", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "num_filters", "=", "spade_filter", "\n", "kernel_size", "=", "spade_kernel", "\n", "self", ".", "conv", "=", "Conv2d", "(", "8", ",", "num_filters", ",", "kernel_size", ",", "1", ",", "1", ",", "1", ")", "#spectral_norm(Conv2d(8, num_filters, kernel_size=(kernel_size, kernel_size), padding=1))", "\n", "self", ".", "conv_gamma", "=", "Conv2d", "(", "num_filters", ",", "k", ",", "kernel_size", ",", "1", ",", "1", ",", "1", ")", "#spectral_norm(Conv2d(num_filters, k, kernel_size=(kernel_size, kernel_size), padding=1))", "\n", "self", ".", "conv_beta", "=", "Conv2d", "(", "num_filters", ",", "k", ",", "kernel_size", ",", "1", ",", "1", ",", "1", ")", "#spectral_norm(Conv2d(num_filters, k, kernel_size=(kernel_size, kernel_size), padding=1))", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.spade.SPADE.forward": [[18, 37], ["x.size", "torch.sum", "torch.sqrt", "torch.unsqueeze", "torch.unsqueeze", "torch.nn.functional.interpolate", "torch.nn.functional.relu", "spade.SPADE.conv_gamma", "spade.SPADE.conv_beta", "x.reshape", "torch.unsqueeze", "torch.unsqueeze", "spade.SPADE.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "seg", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "\n", "sum_channel", "=", "torch", ".", "sum", "(", "x", ".", "reshape", "(", "N", ",", "C", ",", "H", "*", "W", ")", ",", "dim", "=", "-", "1", ")", "\n", "mean", "=", "sum_channel", "/", "(", "H", "*", "W", ")", "\n", "std", "=", "torch", ".", "sqrt", "(", "(", "sum_channel", "**", "2", "-", "mean", "**", "2", ")", "/", "(", "H", "*", "W", ")", ")", "\n", "\n", "mean", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "mean", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "std", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "std", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "x", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "\n", "seg", "=", "interpolate", "(", "seg", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'nearest'", ")", "\n", "seg", "=", "relu", "(", "self", ".", "conv", "(", "seg", ")", ")", "\n", "seg_gamma", "=", "self", ".", "conv_gamma", "(", "seg", ")", "\n", "seg_beta", "=", "self", ".", "conv_beta", "(", "seg", ")", "\n", "\n", "x", "=", "x", "*", "(", "1", "+", "seg_gamma", ")", "+", "seg_beta", "#torch.matmul(seg_gamma, x) + seg_beta", "\n", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.ResConv.__init__": [[87, 98], ["torch.Module.__init__", "blocks.conv_preactivation_relu", "blocks.conv_preactivation_relu", "blocks.conv_preactivation_relu"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_preactivation_relu", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_preactivation_relu", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_preactivation_relu"], ["    ", "def", "__init__", "(", "self", ",", "ndf", ",", "norm", ")", ":", "\n", "        ", "super", "(", "ResConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        Args:\n            ndf: constant number from channels\n        \"\"\"", "\n", "self", ".", "ndf", "=", "ndf", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "conv1", "=", "conv_preactivation_relu", "(", "self", ".", "ndf", ",", "self", ".", "ndf", "*", "2", ",", "3", ",", "1", ",", "1", ",", "self", ".", "norm", ")", "\n", "self", ".", "conv2", "=", "conv_preactivation_relu", "(", "self", ".", "ndf", "*", "2", ",", "self", ".", "ndf", "*", "2", ",", "3", ",", "1", ",", "1", ",", "self", ".", "norm", ")", "\n", "self", ".", "resconv", "=", "conv_preactivation_relu", "(", "self", ".", "ndf", ",", "self", ".", "ndf", "*", "2", ",", "1", ",", "1", ",", "0", ",", "self", ".", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.ResConv.forward": [[99, 106], ["blocks.ResConv.conv1", "blocks.ResConv.conv2", "blocks.ResConv.resconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "residual", "=", "self", ".", "resconv", "(", "residual", ")", "\n", "\n", "return", "out", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.Interpolate.__init__": [[109, 119], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "mode", ")", ":", "\n", "        ", "super", "(", "Interpolate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        Args:\n            size: expected size after interpolation\n            mode: interpolation type (e.g. bilinear, nearest)\n        \"\"\"", "\n", "self", ".", "interp", "=", "nn", ".", "functional", ".", "interpolate", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.Interpolate.forward": [[120, 124], ["blocks.Interpolate.interp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "interp", "(", "x", ",", "size", "=", "self", ".", "size", ",", "mode", "=", "self", ".", "mode", ")", "#, align_corners=False", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.normalize": [[3, 8], ["torch.BatchNorm2d", "torch.BatchNorm2d"], "function", ["None"], ["def", "normalize", "(", "x", ",", "norm_type", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batchnorm'", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "x", ")", "#temp", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.deconv_bn_relu": [[9, 14], ["torch.Sequential", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.ReLU"], "function", ["None"], ["", "", "def", "deconv_bn_relu", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.deconv": [[16, 19], ["torch.Sequential", "torch.ConvTranspose2d"], "function", ["None"], ["", "def", "deconv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_lrelu": [[21, 25], ["torch.Sequential", "torch.Conv2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "conv_lrelu", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_bn_lrelu": [[27, 32], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "conv_bn_lrelu", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_bn_relu": [[34, 39], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "function", ["None"], ["", "def", "conv_bn_relu", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_no_activ": [[41, 43], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv_no_activ", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_id_unet": [[44, 49], ["torch.Sequential", "torch.Conv2d", "blocks.normalize", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.normalize"], ["", "def", "conv_id_unet", "(", "in_channels", ",", "out_channels", ",", "norm", "=", "'batchnorm'", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ")", ",", "\n", "normalize", "(", "out_channels", ",", "norm", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.upconv": [[51, 55], ["torch.Sequential", "torch.Conv2d", "blocks.normalize"], "function", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.normalize"], ["", "def", "upconv", "(", "in_channels", ",", "out_channels", ",", "norm", "=", "'batchnorm'", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "normalize", "(", "out_channels", ",", "norm", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_block_unet": [[57, 65], ["torch.Sequential", "torch.Conv2d", "blocks.normalize", "torch.ReLU", "torch.Conv2d", "blocks.normalize", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.normalize", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.normalize"], ["", "def", "conv_block_unet", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "norm", "=", "'batchnorm'", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "normalize", "(", "out_channels", ",", "norm", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "normalize", "(", "out_channels", ",", "norm", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_block_unet_last": [[67, 76], ["torch.Sequential", "torch.Conv2d", "blocks.normalize", "torch.ReLU", "torch.Conv2d", "blocks.normalize", "torch.ReLU", "torch.Conv2d"], "function", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.normalize", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.normalize"], ["", "def", "conv_block_unet_last", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "norm", "=", "'batchnorm'", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "normalize", "(", "out_channels", ",", "norm", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "normalize", "(", "out_channels", ",", "norm", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_preactivation_relu": [[78, 83], ["torch.Sequential", "torch.ReLU", "torch.Conv2d", "blocks.normalize"], "function", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.normalize"], ["", "def", "conv_preactivation_relu", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "norm", "=", "'batchnorm'", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "normalize", "(", "out_channels", ",", "norm", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.vae.VAE_encoder.__init__": [[7, 18], ["torch.Module.__init__", "conv_bn_relu", "conv_bn_relu", "conv_bn_relu", "conv_bn_relu", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_bn_relu", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_bn_relu", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_bn_relu", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_bn_relu"], ["    ", "def", "__init__", "(", "self", ",", "z_len", ")", ":", "\n", "        ", "super", "(", "VAE_encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_len", "=", "z_len", "\n", "\n", "self", ".", "block1", "=", "conv_bn_relu", "(", "1", ",", "32", ",", "3", ",", "2", ",", "1", ")", "#1 x 28 x 28", "\n", "self", ".", "block2", "=", "conv_bn_relu", "(", "32", ",", "32", ",", "3", ",", "2", ",", "1", ")", "#32 x 14 x 14", "\n", "self", ".", "block3", "=", "conv_bn_relu", "(", "32", ",", "64", ",", "3", ",", "2", ",", "1", ")", "#32 x 7 x 7", "\n", "self", ".", "block4", "=", "conv_bn_relu", "(", "64", ",", "256", ",", "3", ",", "2", ",", "1", ")", "#64 x 4 x 4", "\n", "#256 x 2 x 2", "\n", "self", ".", "mu", "=", "nn", ".", "Linear", "(", "1024", ",", "self", ".", "z_len", ")", "\n", "self", ".", "logvar", "=", "nn", ".", "Linear", "(", "1024", ",", "self", ".", "z_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.vae.VAE_encoder.reparameterize": [[19, 24], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "\n", "return", "mu", "+", "eps", "*", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.vae.VAE_encoder.encode": [[25, 27], ["vae.VAE_encoder.mu", "vae.VAE_encoder.logvar"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "mu", "(", "x", ")", ",", "self", ".", "logvar", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.vae.VAE_encoder.forward": [[28, 37], ["vae.VAE_encoder.block1", "vae.VAE_encoder.block2", "vae.VAE_encoder.block3", "vae.VAE_encoder.block4", "vae.VAE_encoder.encode", "vae.VAE_encoder.reparameterize", "vae.VAE_encoder.view"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.vae.VAE_encoder.encode", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.vae.VAE_encoder.reparameterize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "mu", ",", "logvar", "=", "self", ".", "encode", "(", "x", ".", "view", "(", "-", "1", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "\n", "return", "z", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.vae.VAE_decoder.__init__": [[40, 66], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "Interpolate", "conv_bn_relu", "Interpolate", "conv_bn_relu", "Interpolate", "conv_bn_relu", "Interpolate", "conv_no_activ", "deconv_bn_relu", "deconv_bn_relu", "deconv_bn_relu", "deconv", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_bn_relu", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_bn_relu", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_bn_relu", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.conv_no_activ", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.deconv_bn_relu", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.deconv_bn_relu", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.deconv_bn_relu", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.blocks.deconv"], ["    ", "def", "__init__", "(", "self", ",", "z_len", ",", "dim", ",", "upsample_method", ")", ":", "\n", "        ", "super", "(", "VAE_decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_len", "=", "z_len", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "upsample_method", "=", "upsample_method", "\n", "\n", "#bottleneck", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "z_len", ",", "1024", ")", "\n", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "activ", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "#upsample decoder", "\n", "self", ".", "upsample4", "=", "Interpolate", "(", "(", "self", ".", "dim", "//", "8", ",", "self", ".", "dim", "//", "8", ")", ",", "mode", "=", "self", ".", "upsample_method", ")", "\n", "self", ".", "block4", "=", "conv_bn_relu", "(", "256", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "upsample3", "=", "Interpolate", "(", "(", "self", ".", "dim", "//", "4", ",", "self", ".", "dim", "//", "4", ")", ",", "mode", "=", "self", ".", "upsample_method", ")", "\n", "self", ".", "block3", "=", "conv_bn_relu", "(", "64", ",", "32", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "upsample2", "=", "Interpolate", "(", "(", "self", ".", "dim", "//", "2", ",", "self", ".", "dim", "//", "2", ")", ",", "mode", "=", "self", ".", "upsample_method", ")", "\n", "self", ".", "block2", "=", "conv_bn_relu", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "upsample1", "=", "Interpolate", "(", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", ",", "mode", "=", "self", ".", "upsample_method", ")", "\n", "self", ".", "block1", "=", "conv_no_activ", "(", "32", ",", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "#deconv decoder", "\n", "self", ".", "deconv4", "=", "deconv_bn_relu", "(", "256", ",", "64", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "deconv3", "=", "deconv_bn_relu", "(", "64", ",", "32", ",", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "deconv2", "=", "deconv_bn_relu", "(", "32", ",", "32", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "deconv1", "=", "deconv", "(", "32", ",", "1", ",", "4", ",", "2", ",", "1", ")", "\n", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.vae.VAE_decoder.forward": [[67, 88], ["vae.VAE_decoder.fc", "vae.VAE_decoder.upsample4", "vae.VAE_decoder.block4", "vae.VAE_decoder.upsample3", "vae.VAE_decoder.block3", "vae.VAE_decoder.upsample2", "vae.VAE_decoder.block2", "vae.VAE_decoder.upsample1", "vae.VAE_decoder.block1", "vae.VAE_decoder.sigmoid", "vae.VAE_decoder.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "z", ")", "\n", "#upsample decoder", "\n", "x", "=", "self", ".", "upsample4", "(", "x", ".", "view", "(", "-", "1", ",", "256", ",", "2", ",", "2", ")", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample3", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample2", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample1", "(", "x", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "#deconv decoder", "\n", "# x = self.deconv4(x.view(-1, 256, 2, 2))", "\n", "# x = self.deconv3(x)", "\n", "# x = self.deconv2(x)", "\n", "# x = self.deconv1(x)", "\n", "#final output normalization", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.vae.VAE.__init__": [[91, 99], ["torch.Module.__init__", "vae.VAE_encoder", "vae.VAE_decoder"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "z_len", ",", "upsample_method", ")", ":", "\n", "        ", "super", "(", "VAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "z_len", "=", "z_len", "\n", "self", ".", "upsample_method", "=", "upsample_method", "\n", "self", ".", "encoder", "=", "VAE_encoder", "(", "self", ".", "z_len", ")", "\n", "self", ".", "decoder", "=", "VAE_decoder", "(", "self", ".", "z_len", ",", "self", ".", "dim", ",", "self", ".", "upsample_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.vae.VAE.forward": [[100, 108], ["vae.VAE.encoder", "vae.VAE.decoder", "vae.VAE.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "test_z", ",", "name", ")", ":", "\n", "        ", "z", ",", "mu", ",", "logvar", "=", "self", ".", "encoder", "(", "x", ")", "\n", "if", "name", "==", "'train'", ":", "\n", "            ", "x", "=", "self", ".", "decoder", "(", "z", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "decoder", "(", "test_z", ")", "\n", "\n", "", "return", "z", ",", "mu", ",", "logvar", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.rounding.RoundingFunction.forward": [[5, 11], ["ctx.save_for_backward", "x.round"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "x", ")", "\n", "output", "=", "x", ".", "round", "(", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.rounding.RoundingFunction.backward": [[12, 17], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "x", "=", "ctx", ".", "saved_tensors", "\n", "\n", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.rounding.RoundLayer.__init__": [[20, 22], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RoundLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.rounding.RoundLayer.forward": [[24, 26], ["RoundingFunction.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "RoundingFunction", ".", "apply", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.weight_init.init_dcgan_weights": [[6, 12], ["model.modules", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "function", ["None"], ["def", "init_dcgan_weights", "(", "model", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.weight_init.initialize_weights": [[13, 34], ["model.modules", "print", "isinstance", "isinstance", "init_func", "isinstance", "module.bias.data.zero_", "module.weight.data.fill_", "module.bias.data.zero_"], "function", ["None"], ["", "", "", "", "def", "initialize_weights", "(", "model", ",", "init", "=", "\"xavier\"", ")", ":", "\n", "    ", "init_func", "=", "None", "\n", "if", "init", "==", "\"xavier\"", ":", "\n", "        ", "init_func", "=", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "\n", "", "elif", "init", "==", "\"kaiming\"", ":", "\n", "        ", "init_func", "=", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "\n", "", "elif", "init", "==", "\"gaussian\"", "or", "init", "==", "\"normal\"", ":", "\n", "        ", "init_func", "=", "torch", ".", "nn", ".", "init", ".", "normal_", "\n", "\n", "", "if", "init_func", "is", "not", "None", ":", "\n", "        ", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                ", "init_func", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "else", ":", "\n", "        ", "print", "(", "\"Error when initializing model's weights, {} either doesn't exist or is not a valid initialization function.\"", ".", "format", "(", "init", ")", ",", "file", "=", "sys", ".", "stderr", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.unet_model.UNet.__init__": [[9, 26], ["nn.Module.__init__", "unet_parts.DoubleConv", "unet_parts.Down", "unet_parts.Down", "unet_parts.Down", "unet_parts.Down", "unet_parts.Up", "unet_parts.Up", "unet_parts.Up", "unet_parts.Up", "unet_parts.OutConv"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "n_classes", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "bilinear", "=", "bilinear", "\n", "\n", "self", ".", "inc", "=", "DoubleConv", "(", "n_channels", ",", "64", ")", "\n", "self", ".", "down1", "=", "Down", "(", "64", ",", "128", ")", "\n", "self", ".", "down2", "=", "Down", "(", "128", ",", "256", ")", "\n", "self", ".", "down3", "=", "Down", "(", "256", ",", "512", ")", "\n", "factor", "=", "2", "if", "bilinear", "else", "1", "\n", "self", ".", "down4", "=", "Down", "(", "512", ",", "1024", "//", "factor", ")", "\n", "self", ".", "up1", "=", "Up", "(", "1024", ",", "512", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up2", "=", "Up", "(", "512", ",", "256", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up3", "=", "Up", "(", "256", ",", "128", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up4", "=", "Up", "(", "128", ",", "64", ",", "bilinear", ")", "\n", "self", ".", "outc", "=", "OutConv", "(", "64", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.unet_model.UNet.forward": [[27, 39], ["unet_model.UNet.inc", "unet_model.UNet.down1", "unet_model.UNet.down2", "unet_model.UNet.down3", "unet_model.UNet.down4", "unet_model.UNet.up1", "unet_model.UNet.up2", "unet_model.UNet.up3", "unet_model.UNet.up4", "unet_model.UNet.outc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "inc", "(", "x", ")", "\n", "x2", "=", "self", ".", "down1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "down2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "down3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "down4", "(", "x4", ")", "\n", "x", "=", "self", ".", "up1", "(", "x5", ",", "x4", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "x3", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "x2", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "x1", ")", "\n", "out", "=", "self", ".", "outc", "(", "x", ")", "\n", "out", "=", "F", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", "\n", "return", "out", ""]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__": [[46, 48], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DistanceCorrelation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation.forward": [[49, 65], ["distance_corr.DistanceCorrelation._distance_matrix", "distance_corr.DistanceCorrelation._distance_matrix", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation._distance_matrix", "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation._distance_matrix"], ["", "def", "forward", "(", "self", ",", "A", ",", "B", ")", ":", "\n", "        ", "'''\n        Calculate the Distance Correlation between the two vectors. https://en.wikipedia.org/wiki/Distance_correlation\n        Value of 0 implies independence. A and B can be vectors of different length.\n        :param A:    vector A of shape (num_samples, sizeA)\n        :param B:    vector B of shape (num_samples, sizeB)\n        :return:     the distance correlation between A and B\n        '''", "\n", "a", "=", "self", ".", "_distance_matrix", "(", "A", ")", "\n", "b", "=", "self", ".", "_distance_matrix", "(", "B", ")", "\n", "dist_cov2_ab", "=", "torch", ".", "clamp", "(", "torch", ".", "div", "(", "torch", ".", "sum", "(", "a", "*", "b", ")", ",", "A", ".", "shape", "[", "0", "]", "*", "A", ".", "shape", "[", "0", "]", ")", ",", "1e-10", ",", "1e10", ")", "\n", "dist_cov2_aa", "=", "torch", ".", "clamp", "(", "torch", ".", "div", "(", "torch", ".", "sum", "(", "a", "*", "a", ")", ",", "A", ".", "shape", "[", "0", "]", "*", "A", ".", "shape", "[", "0", "]", ")", ",", "1e-10", ",", "1e10", ")", "\n", "dist_cov2_bb", "=", "torch", ".", "clamp", "(", "torch", ".", "div", "(", "torch", ".", "sum", "(", "b", "*", "b", ")", ",", "A", ".", "shape", "[", "0", "]", "*", "A", ".", "shape", "[", "0", "]", ")", ",", "1e-10", ",", "1e10", ")", "\n", "dist_var_prod", "=", "torch", ".", "clamp", "(", "torch", ".", "sqrt", "(", "dist_cov2_aa", ")", "*", "torch", ".", "sqrt", "(", "dist_cov2_bb", ")", ",", "1e-10", ",", "1e10", ")", "\n", "dist_cor", "=", "torch", ".", "div", "(", "torch", ".", "sqrt", "(", "dist_cov2_ab", ")", ",", "torch", ".", "sqrt", "(", "dist_var_prod", ")", ")", "\n", "return", "dist_cor", "\n", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.distance_corr.DistanceCorrelation._distance_matrix": [[66, 88], ["torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "x_norm.view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "def", "_distance_matrix", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        Input: x is a Nxd matrix\n            y is an optional Mxd matirx\n        Output: dist is a NxM matrix where dist[i,j] is the square norm between x[i,:] and y[j,:]\n                if y is not given then use 'y=x'.\n        i.e. dist[i,j] = ||x[i,:]-y[j,:]||^2\n        '''", "\n", "x_norm", "=", "(", "x", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "y_t", "=", "torch", ".", "transpose", "(", "x", ",", "0", ",", "1", ")", "\n", "y_norm", "=", "x_norm", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "dist", "=", "x_norm", "+", "y_norm", "-", "2.0", "*", "torch", ".", "mm", "(", "x", ",", "y_t", ")", "\n", "# Ensure diagonal is zero if x=y", "\n", "# if y is None:", "\n", "#     dist = dist - torch.diag(dist.diag)", "\n", "dist", "=", "torch", ".", "clamp", "(", "dist", ",", "0.0", ",", "np", ".", "inf", ")", "\n", "dist", "=", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "dist", ",", "1e-10", ",", "1e10", ")", ")", "\n", "rows_mean", "=", "torch", ".", "mean", "(", "dist", ",", "0", ",", "True", ")", "\n", "columns_mean", "=", "torch", ".", "mean", "(", "dist", ",", "1", ",", "True", ")", "\n", "distance", "=", "dist", "-", "rows_mean", "-", "columns_mean", "+", "torch", ".", "mean", "(", "dist", ")", "\n", "return", "distance", "\n", "# z = torch.sum(x * x, 1)", "\n"]], "home.repos.pwc.inspect_result.xxxliu95_RA_FA_Cardiac.models.__init__.get_model": [[6, 11], ["sdnet_ada.SDNet", "print"], "function", ["None"], ["def", "get_model", "(", "name", ",", "params", ")", ":", "\n", "    ", "if", "name", "==", "'sdnet'", ":", "\n", "        ", "return", "SDNet", "(", "params", "[", "'width'", "]", ",", "params", "[", "'height'", "]", ",", "params", "[", "'num_classes'", "]", ",", "params", "[", "'ndf'", "]", ",", "params", "[", "'z_length'", "]", ",", "params", "[", "'norm'", "]", ",", "params", "[", "'upsample'", "]", ",", "params", "[", "'decoder_type'", "]", ",", "params", "[", "'anatomy_out_channels'", "]", ",", "params", "[", "'num_mask_channels'", "]", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Could not find the requested model ({})\"", ".", "format", "(", "name", ")", ",", "file", "=", "sys", ".", "stderr", ")", "", "", "", ""]]}