{"home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.None.IOtools.txt_write": [[14, 20], ["os.path.exists", "open", "f.write"], "function", ["None"], ["def", "txt_write", "(", "file_name", ",", "str", ",", "mode", "=", "'a'", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "file_name", ")", ":", "\n", "        ", "mode", "=", "'w'", "\n", "\n", "", "with", "open", "(", "file_name", ",", "mode", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.None.main_process.main": [[22, 80], ["load_data_V2.ToTensor", "os.path.join", "os.path.join", "os.path.join", "load_data_V2.myDataset", "torch.utils.data.DataLoader", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "Network.SDCNet.SDCNet_VGG16_classify().cuda", "os.path.join", "os.path.exists", "numpy.arange", "numpy.array", "numpy.concatenate", "len", "torch.load", "torch.load", "torch.load", "torch.load", "SDCNet_VGG16_classify().cuda.load_state_dict", "os.path.join", "Val.test_phase", "print", "numpy.arange", "numpy.array", "numpy.concatenate", "Network.SDCNet.SDCNet_VGG16_classify"], "function", ["home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.None.Val.test_phase"], ["def", "main", "(", "opt", ")", ":", "\n", "# =============================================================================", "\n", "# inital setting", "\n", "# =============================================================================", "\n", "# 1.Initial setting", "\n", "# --1.1 dataset setting", "\n", "    ", "dataset", "=", "opt", "[", "'dataset'", "]", "\n", "root_dir", "=", "opt", "[", "'root_dir'", "]", "\n", "num_workers", "=", "opt", "[", "'num_workers'", "]", "\n", "\n", "img_subsubdir", "=", "'images'", ";", "tar_subsubdir", "=", "'gtdens'", "\n", "dataset_transform", "=", "ToTensor", "(", ")", "\n", "\n", "# --1.2 use initial setting to generate", "\n", "# set label_indice", "\n", "if", "opt", "[", "'partition'", "]", "==", "'one_linear'", ":", "\n", "        ", "label_indice", "=", "np", ".", "arange", "(", "opt", "[", "'step'", "]", ",", "opt", "[", "'max_num'", "]", "+", "opt", "[", "'step'", "]", "/", "2", ",", "opt", "[", "'step'", "]", ")", "\n", "add", "=", "np", ".", "array", "(", "[", "1e-6", "]", ")", "\n", "label_indice", "=", "np", ".", "concatenate", "(", "(", "add", ",", "label_indice", ")", ")", "\n", "", "elif", "opt", "[", "'partition'", "]", "==", "'two_linear'", ":", "\n", "        ", "label_indice", "=", "np", ".", "arange", "(", "opt", "[", "'step'", "]", ",", "opt", "[", "'max_num'", "]", "+", "opt", "[", "'step'", "]", "/", "2", ",", "opt", "[", "'step'", "]", ")", "\n", "add", "=", "np", ".", "array", "(", "[", "1e-6", ",", "0.05", ",", "0.10", ",", "0.15", ",", "0.20", ",", "0.25", ",", "0.30", ",", "0.35", ",", "0.40", ",", "0.45", "]", ")", "\n", "label_indice", "=", "np", ".", "concatenate", "(", "(", "add", ",", "label_indice", ")", ")", "\n", "# print(label_indice)", "\n", "\n", "", "opt", "[", "'label_indice'", "]", "=", "label_indice", "\n", "opt", "[", "'class_num'", "]", "=", "label_indice", ".", "size", "+", "1", "\n", "\n", "#test settings", "\n", "img_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'test'", ",", "img_subsubdir", ")", "\n", "tar_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'test'", ",", "tar_subsubdir", ")", "\n", "rgb_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'rgbstate.mat'", ")", "\n", "testset", "=", "myDataset", "(", "img_dir", ",", "tar_dir", ",", "rgb_dir", ",", "transform", "=", "dataset_transform", ",", "if_test", "=", "True", ",", "IF_loadmem", "=", "opt", "[", "'IF_savemem_test'", "]", ")", "\n", "testloader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "opt", "[", "'test_batch_size'", "]", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "# init networks", "\n", "label_indice", "=", "torch", ".", "Tensor", "(", "label_indice", ")", "\n", "class_num", "=", "len", "(", "label_indice", ")", "+", "1", "\n", "div_times", "=", "2", "\n", "net", "=", "SDCNet_VGG16_classify", "(", "class_num", ",", "label_indice", ",", "psize", "=", "opt", "[", "'psize'", "]", ",", "pstride", "=", "opt", "[", "'pstride'", "]", ",", "div_times", "=", "div_times", ",", "load_weights", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "# test the exist trained model", "\n", "mod_path", "=", "'best_epoch.pth'", "\n", "mod_path", "=", "os", ".", "path", ".", "join", "(", "opt", "[", "'trained_model_path'", "]", ",", "mod_path", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "mod_path", ")", ":", "\n", "        ", "all_state_dict", "=", "torch", ".", "load", "(", "mod_path", ")", "\n", "net", ".", "load_state_dict", "(", "all_state_dict", "[", "'net_state_dict'", "]", ")", "\n", "log_save_path", "=", "os", ".", "path", ".", "join", "(", "opt", "[", "'trained_model_path'", "]", ",", "'log-trained-model.txt'", ")", "\n", "# test", "\n", "mae", ",", "rmse", ",", "me", "=", "test_phase", "(", "opt", ",", "net", ",", "testloader", ",", "log_save_path", "=", "log_save_path", ")", "\n", "\n", "log_str", "=", "'%10s\\t %8s\\t &%8s\\t &%8s\\t\\\\\\\\'", "%", "(", "' '", ",", "'mae'", ",", "'rmse'", ",", "'me'", ")", "+", "'\\n'", "\n", "log_str", "+=", "'%-10s\\t %8.3f\\t %8.3f\\t %8.3f\\t'", "%", "(", "'test'", ",", "mae", ",", "rmse", ",", "me", ")", "+", "'\\n'", "\n", "print", "(", "log_str", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.None.load_data_V2.myDataset.__init__": [[36, 64], ["scipy.loadmat", "mat[].reshape", "os.path.join", "glob.glob", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "img_dir", ",", "tar_dir", ",", "rgb_dir", ",", "transform", "=", "None", ",", "if_test", "=", "False", ",", "IF_loadmem", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img_dir (string ): Directory with all the images.\n            tar_dir (string ): Path to the annotations.\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n        \"\"\"", "\n", "self", ".", "IF_loadmem", "=", "IF_loadmem", "#whether to load data in memory", "\n", "self", ".", "IF_loadFinished", "=", "False", "\n", "self", ".", "image_mem", "=", "[", "]", "\n", "self", ".", "target_mem", "=", "[", "]", "\n", "\n", "self", ".", "img_dir", "=", "img_dir", "\n", "self", ".", "tar_dir", "=", "tar_dir", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "mat", "=", "sio", ".", "loadmat", "(", "rgb_dir", ")", "\n", "self", ".", "rgb", "=", "mat", "[", "'rgbMean'", "]", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "#rgbMean is computed after norm to [0-1]", "\n", "\n", "\n", "img_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'*.jpg'", ")", "\n", "self", ".", "filelist", "=", "glob", ".", "glob", "(", "img_name", ")", "\n", "self", ".", "dataset_len", "=", "len", "(", "self", ".", "filelist", ")", "\n", "\n", "# for test process, load data is different", "\n", "self", ".", "if_test", "=", "if_test", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.None.load_data_V2.myDataset.__len__": [[65, 67], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset_len", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.None.load_data_V2.myDataset.__getitem__": [[68, 117], ["skimage.io.imread", "os.path.split", "os.path.splitext", "os.path.join", "scipy.loadmat", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "load_data_V2.myDataset.image_mem.append", "load_data_V2.myDataset.target_mem.append", "load_data_V2.myDataset.transform", "load_data_V2.get_pad", "load_data_V2.get_pad", "load_data_V2.myDataset.transform", "load_data_V2.get_pad", "load_data_V2.get_pad", "len"], "methods", ["home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.None.load_data_V2.get_pad", "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.None.load_data_V2.get_pad", "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.None.load_data_V2.get_pad", "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.None.load_data_V2.get_pad"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "# ------------------------------------", "\n", "# 1. see if load from disk or memory", "\n", "# ------------------------------------", "\n", "        ", "if", "(", "not", "self", ".", "IF_loadmem", ")", "or", "(", "not", "self", ".", "IF_loadFinished", ")", ":", "\n", "            ", "img_name", "=", "self", ".", "filelist", "[", "idx", "]", "\n", "image", "=", "io", ".", "imread", "(", "img_name", ")", "#load as numpy ndarray", "\n", "image", "=", "image", "/", "255.", "-", "self", ".", "rgb", "#to normalization,auto to change dtype", "\n", "\n", "(", "filepath", ",", "tempfilename", ")", "=", "os", ".", "path", ".", "split", "(", "img_name", ")", "\n", "(", "name", ",", "extension", ")", "=", "os", ".", "path", ".", "splitext", "(", "tempfilename", ")", "\n", "\n", "mat_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tar_dir", ",", "'%s.mat'", "%", "(", "name", ")", ")", "\n", "mat", "=", "sio", ".", "loadmat", "(", "mat_dir", ")", "\n", "\n", "# if need to save in memory", "\n", "if", "self", ".", "IF_loadmem", ":", "\n", "                ", "self", ".", "image_mem", ".", "append", "(", "image", ")", "\n", "self", ".", "target_mem", ".", "append", "(", "mat", ")", "\n", "# updata if load finished", "\n", "if", "len", "(", "self", ".", "image_mem", ")", "==", "self", ".", "dataset_len", ":", "\n", "                    ", "self", ".", "IF_loadFinished", "=", "True", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "image", "=", "self", ".", "image_mem", "[", "idx", "]", "\n", "mat", "=", "self", ".", "target_mem", "[", "idx", "]", "\n", "#target = mat['target']", "\n", "\n", "# for train may need pre load", "\n", "", "if", "not", "self", ".", "if_test", ":", "\n", "            ", "target", "=", "mat", "[", "'crop_gtdens'", "]", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'target'", ":", "target", "}", "\n", "if", "self", ".", "transform", ":", "\n", "                ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "# pad the image", "\n", "", "sample", "[", "'image'", "]", ",", "sample", "[", "'target'", "]", "=", "get_pad", "(", "sample", "[", "'image'", "]", ",", "DIV", "=", "64", ")", ",", "get_pad", "(", "sample", "[", "'target'", "]", ",", "DIV", "=", "64", ")", "\n", "", "else", ":", "\n", "            ", "target", "=", "mat", "[", "'all_num'", "]", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'target'", ":", "target", "}", "\n", "if", "self", ".", "transform", ":", "\n", "                ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "sample", "[", "'density_map'", "]", "=", "torch", ".", "from_numpy", "(", "mat", "[", "'density_map'", "]", ")", "\n", "\n", "# pad the image", "\n", "sample", "[", "'image'", "]", ",", "sample", "[", "'density_map'", "]", "=", "get_pad", "(", "sample", "[", "'image'", "]", ",", "DIV", "=", "64", ")", ",", "get_pad", "(", "sample", "[", "'density_map'", "]", ",", "DIV", "=", "64", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.None.load_data_V2.ToTensor.__call__": [[123, 132], ["image.transpose.transpose.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "target", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'target'", "]", "\n", "\n", "# swap color axis because", "\n", "# numpy image: H x W x C", "\n", "# torch image: C X H X W", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "{", "'image'", ":", "torch", ".", "from_numpy", "(", "image", ")", ",", "\n", "'target'", ":", "torch", ".", "from_numpy", "(", "target", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.None.load_data_V2.get_pad": [[135, 146], ["F.pad.size", "torch.pad"], "function", ["None"], ["", "", "def", "get_pad", "(", "inputs", ",", "DIV", "=", "64", ")", ":", "\n", "    ", "h", ",", "w", "=", "inputs", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "ph", ",", "pw", "=", "(", "DIV", "-", "h", "%", "DIV", ")", ",", "(", "DIV", "-", "w", "%", "DIV", ")", "\n", "# print(ph,pw)", "\n", "\n", "if", "(", "ph", "!=", "DIV", ")", "or", "(", "pw", "!=", "DIV", ")", ":", "\n", "        ", "tmp_pad", "=", "[", "pw", "//", "2", ",", "pw", "-", "pw", "//", "2", ",", "ph", "//", "2", ",", "ph", "-", "ph", "//", "2", "]", "\n", "# print(tmp_pad)", "\n", "inputs", "=", "F", ".", "pad", "(", "inputs", ",", "tmp_pad", ")", "\n", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.None.Val.test_phase": [[27, 72], ["len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net.eval", "time.time", "enumerate", "math.sqrt", "net", "net.resample", "net.parse_merge", "outputs.sum", "labels.sum", "abs", "time.time", "IOtools.txt_write", "inputs.type", "labels.unsqueeze().type", "inputs.cuda", "labels.cuda", "float", "print", "time.time", "math.sqrt", "labels.unsqueeze", "str", "len"], "function", ["home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.SDCNet_VGG16_classify.resample", "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.SDCNet_VGG16_classify.parse_merge", "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.None.IOtools.txt_write"], ["def", "test_phase", "(", "opt", ",", "net", ",", "testloader", ",", "log_save_path", "=", "None", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "start", "=", "time", "(", ")", "\n", "avg_frame_rate", "=", "0", "\n", "mae", "=", "0.0", "\n", "rmse", "=", "0.0", "\n", "me", "=", "0.0", "\n", "\n", "for", "j", ",", "data", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "labels", "=", "data", "[", "'image'", "]", ",", "data", "[", "'target'", "]", "\n", "inputs", ",", "labels", "=", "inputs", ".", "type", "(", "torch", ".", "float32", ")", ",", "labels", ".", "unsqueeze", "(", "1", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "\n", "features", "=", "net", "(", "inputs", ")", "\n", "div_res", "=", "net", ".", "resample", "(", "features", ")", "\n", "merge_res", "=", "net", ".", "parse_merge", "(", "div_res", ")", "\n", "outputs", "=", "merge_res", "[", "'div'", "+", "str", "(", "net", ".", "args", "[", "'div_times'", "]", ")", "]", "\n", "del", "merge_res", "\n", "\n", "pre", "=", "(", "outputs", ")", ".", "sum", "(", ")", "\n", "gt", "=", "labels", ".", "sum", "(", ")", "\n", "\n", "mae", "+=", "abs", "(", "pre", "-", "gt", ")", "\n", "rmse", "+=", "(", "pre", "-", "gt", ")", "*", "(", "pre", "-", "gt", ")", "\n", "me", "+=", "(", "pre", "-", "gt", ")", "\n", "end", "=", "time", "(", ")", "\n", "running_frame_rate", "=", "opt", "[", "'test_batch_size'", "]", "*", "float", "(", "1", "/", "(", "end", "-", "start", ")", ")", "\n", "avg_frame_rate", "=", "(", "avg_frame_rate", "*", "j", "+", "running_frame_rate", ")", "/", "(", "j", "+", "1", ")", "\n", "if", "j", "%", "1", "==", "0", ":", "# print every 2000 mini-batches", "\n", "                ", "print", "(", "'Test:[%5d/%5d] pre: %.3f gt:%.3f err:%.3f frame: %.2fHz/%.2fHz'", "%", "\n", "(", "j", "+", "1", ",", "len", "(", "testloader", ")", ",", "pre", ",", "gt", ",", "pre", "-", "gt", ",", "\n", "running_frame_rate", ",", "avg_frame_rate", ")", ")", "\n", "start", "=", "time", "(", ")", "\n", "\n", "", "", "log_str", "=", "'%10s\\t %8s\\t &%8s\\t &%8s\\t\\\\\\\\'", "%", "(", "' '", ",", "'mae'", ",", "'rmse'", ",", "'me'", ")", "+", "'\\n'", "\n", "log_str", "+=", "'%-10s\\t %8.3f\\t %8.3f\\t %8.3f\\t'", "%", "(", "'test'", ",", "mae", "/", "(", "j", "+", "1", ")", ",", "math", ".", "sqrt", "(", "rmse", "/", "(", "j", "+", "1", ")", ")", ",", "me", "/", "(", "j", "+", "1", ")", ")", "+", "'\\n'", "\n", "\n", "if", "log_save_path", ":", "\n", "            ", "txt_write", "(", "log_save_path", ",", "log_str", ",", "mode", "=", "'w'", ")", "\n", "\n", "", "", "im_num", "=", "len", "(", "testloader", ")", "\n", "\n", "return", "mae", "/", "(", "im_num", ")", ",", "math", ".", "sqrt", "(", "rmse", "/", "(", "im_num", ")", ")", ",", "me", "/", "(", "im_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.class_func.get_local_count": [[10, 24], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "density_map.cpu().type.cpu().type", "torch.ones", "torch.ones", "torch.ones", "torch.conv2d", "int", "int", "count_map.cpu.cpu", "density_map.cpu().type.cpu", "density_map.cpu().type.cuda", "torch.ones.cuda"], "function", ["None"], ["def", "get_local_count", "(", "density_map", ",", "psize", ",", "pstride", ")", ":", "\n", "    ", "IF_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "# if gpu, return gpu", "\n", "IF_ret_gpu", "=", "(", "density_map", ".", "device", ".", "type", "==", "'cuda'", ")", "\n", "psize", ",", "pstride", "=", "int", "(", "psize", ")", ",", "int", "(", "pstride", ")", "\n", "density_map", "=", "density_map", ".", "cpu", "(", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "conv_kernel", "=", "torch", ".", "ones", "(", "1", ",", "1", ",", "psize", ",", "psize", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "IF_gpu", ":", "\n", "        ", "density_map", ",", "conv_kernel", "=", "density_map", ".", "cuda", "(", ")", ",", "conv_kernel", ".", "cuda", "(", ")", "\n", "\n", "", "count_map", "=", "F", ".", "conv2d", "(", "density_map", ",", "conv_kernel", ",", "stride", "=", "pstride", ")", "\n", "if", "not", "IF_ret_gpu", ":", "\n", "        ", "count_map", "=", "count_map", ".", "cpu", "(", ")", "\n", "\n", "", "return", "count_map", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.class_func.Count2Class": [[27, 46], ["isinstance", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.from_numpy.cpu().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "cls_map.cpu.cpu", "torch.from_numpy.cpu", "torch.zeros", "torch.zeros", "torch.zeros", "count_map.cuda", "torch.from_numpy.cuda", "cls_map.cpu.cuda", "count_map.size"], "function", ["None"], ["", "def", "Count2Class", "(", "count_map", ",", "label_indice", ")", ":", "\n", "    ", "if", "isinstance", "(", "label_indice", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "label_indice", "=", "torch", ".", "from_numpy", "(", "label_indice", ")", "\n", "", "IF_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "IF_ret_gpu", "=", "(", "count_map", ".", "device", ".", "type", "==", "'cuda'", ")", "\n", "label_indice", "=", "label_indice", ".", "cpu", "(", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "cls_num", "=", "len", "(", "label_indice", ")", "+", "1", "\n", "cls_map", "=", "torch", ".", "zeros", "(", "count_map", ".", "size", "(", ")", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "if", "IF_gpu", ":", "\n", "        ", "count_map", ",", "label_indice", ",", "cls_map", "=", "count_map", ".", "cuda", "(", ")", ",", "label_indice", ".", "cuda", "(", ")", ",", "cls_map", ".", "cuda", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "cls_num", "-", "1", ")", ":", "\n", "        ", "if", "IF_gpu", ":", "\n", "            ", "cls_map", "=", "cls_map", "+", "(", "count_map", ">=", "label_indice", "[", "i", "]", ")", ".", "cpu", "(", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "cls_map", "=", "cls_map", "+", "(", "count_map", ">=", "label_indice", "[", "i", "]", ")", ".", "cpu", "(", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "", "", "if", "not", "IF_ret_gpu", ":", "\n", "        ", "cls_map", "=", "cls_map", ".", "cpu", "(", ")", "\n", "", "return", "cls_map", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.class_func.Class2Count": [[49, 84], ["isinstance", "torch.from_numpy.squeeze", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "enumerate", "torch.tensor", "torch.tensor", "torch.tensor", "label2count.type.type", "pre_cls.reshape().cpu.size", "pre_cls.reshape().cpu.reshape().cpu", "torch.index_select", "torch.index_select", "torch.index_select", "pre_counts.cuda.reshape", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "label2count.type.append", "pre_cls.reshape().cpu.cpu().type", "pre_counts.cuda.cuda", "pre_cls.reshape().cpu.reshape", "pre_cls.reshape().cpu.cpu", "torch.from_numpy.size"], "function", ["None"], ["", "def", "Class2Count", "(", "pre_cls", ",", "label_indice", ")", ":", "\n", "    ", "'''\n    # --Input:\n    # 1.pre_cls is class label range in [0,1,2,...,C-1]\n    # 2.label_indice not include 0 but the other points\n    # --Output:\n    # 1.count value, the same size as pre_cls\n    '''", "\n", "if", "isinstance", "(", "label_indice", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "label_indice", "=", "torch", ".", "from_numpy", "(", "label_indice", ")", "\n", "", "label_indice", "=", "label_indice", ".", "squeeze", "(", ")", "\n", "IF_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "IF_ret_gpu", "=", "(", "pre_cls", ".", "device", ".", "type", "==", "'cuda'", ")", "\n", "\n", "# tranform interval to count value map", "\n", "label2count", "=", "[", "0.0", "]", "\n", "for", "(", "i", ",", "item", ")", "in", "enumerate", "(", "label_indice", ")", ":", "\n", "        ", "if", "i", "<", "label_indice", ".", "size", "(", ")", "[", "0", "]", "-", "1", ":", "\n", "            ", "tmp_count", "=", "(", "label_indice", "[", "i", "]", "+", "label_indice", "[", "i", "+", "1", "]", ")", "/", "2", "\n", "", "else", ":", "\n", "            ", "tmp_count", "=", "label_indice", "[", "i", "]", "\n", "", "label2count", ".", "append", "(", "tmp_count", ")", "\n", "", "label2count", "=", "torch", ".", "tensor", "(", "label2count", ")", "\n", "label2count", "=", "label2count", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "#outputs = outputs.max(dim=1)[1].cpu().data", "\n", "ORI_SIZE", "=", "pre_cls", ".", "size", "(", ")", "\n", "pre_cls", "=", "pre_cls", ".", "reshape", "(", "-", "1", ")", ".", "cpu", "(", ")", "\n", "pre_counts", "=", "torch", ".", "index_select", "(", "label2count", ",", "0", ",", "pre_cls", ".", "cpu", "(", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", ")", "\n", "pre_counts", "=", "pre_counts", ".", "reshape", "(", "ORI_SIZE", ")", "\n", "\n", "if", "IF_ret_gpu", ":", "\n", "        ", "pre_counts", "=", "pre_counts", ".", "cuda", "(", ")", "\n", "\n", "", "return", "pre_counts", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.one_conv.__init__": [[39, 50], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.SDCNet_VGG16_classify.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "normaliz", "=", "False", ")", ":", "\n", "        ", "super", "(", "one_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "ops", "=", "[", "]", "\n", "ops", "+=", "[", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ")", "]", "\n", "# ops += [nn.Dropout(p=0.1)]", "\n", "if", "normaliz", ":", "\n", "            ", "ops", "+=", "[", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", "]", "\n", "", "ops", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.one_conv.forward": [[51, 54], ["SDCNet.one_conv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.double_conv.__init__": [[57, 73], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.SDCNet_VGG16_classify.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "normaliz", "=", "False", ")", ":", "\n", "        ", "super", "(", "double_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "ops", "=", "[", "]", "\n", "ops", "+=", "[", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ")", "]", "\n", "# ops += [nn.Dropout(p=0.1)]", "\n", "if", "normaliz", ":", "\n", "            ", "ops", "+=", "[", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", "]", "\n", "", "ops", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "ops", "+=", "[", "nn", ".", "Conv2d", "(", "out_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ")", "]", "\n", "# ops += [nn.Dropout(p=0.1)]", "\n", "if", "normaliz", ":", "\n", "            ", "ops", "+=", "[", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", "]", "\n", "", "ops", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.double_conv.forward": [[74, 77], ["SDCNet.double_conv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.three_conv.__init__": [[80, 103], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.SDCNet_VGG16_classify.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "normaliz", "=", "False", ")", ":", "\n", "        ", "super", "(", "three_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "ops", "=", "[", "]", "\n", "ops", "+=", "[", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ")", "]", "\n", "# ops += [nn.Dropout(p=0.1)]", "\n", "if", "normaliz", ":", "\n", "            ", "ops", "+=", "[", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", "]", "\n", "", "ops", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "ops", "+=", "[", "nn", ".", "Conv2d", "(", "out_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ")", "]", "\n", "# ops += [nn.Dropout(p=0.1)]", "\n", "if", "normaliz", ":", "\n", "            ", "ops", "+=", "[", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", "]", "\n", "", "ops", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "ops", "+=", "[", "nn", ".", "Conv2d", "(", "out_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ")", "]", "\n", "# ops += [nn.Dropout(p=0.1)]", "\n", "if", "normaliz", ":", "\n", "            ", "ops", "+=", "[", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", "]", "\n", "", "ops", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.three_conv.forward": [[104, 107], ["SDCNet.three_conv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.up.__init__": [[110, 122], ["torch.Module.__init__", "SDCNet.double_conv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "SDCNet.one_conv"], "methods", ["home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.SDCNet_VGG16_classify.__init__"], ["    ", "def", "__init__", "(", "self", ",", "up_in_ch", ",", "up_out_ch", ",", "cat_in_ch", ",", "cat_out_ch", ",", "if_convt", "=", "False", ")", ":", "\n", "        ", "super", "(", "up", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "if_convt", "=", "if_convt", "\n", "if", "self", ".", "if_convt", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "up_in_ch", ",", "up_out_ch", ",", "2", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "self", ".", "conv1", "=", "one_conv", "(", "up_in_ch", ",", "up_out_ch", ")", "\n", "\n", "", "self", ".", "conv2", "=", "double_conv", "(", "cat_in_ch", ",", "cat_out_ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.up.forward": [[123, 140], ["torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SDCNet.up.conv2", "SDCNet.up.up", "SDCNet.up.up", "SDCNet.up.conv1", "x2.size", "SDCNet.up.size", "x2.size", "SDCNet.up.size", "int", "int", "math.ceil", "math.ceil"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "\n", "        ", "if", "self", ".", "if_convt", ":", "\n", "            ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "", "else", ":", "\n", "            ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "x1", "=", "self", ".", "conv1", "(", "x1", ")", "\n", "\n", "", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "#pad to make up for the loss when downsampling", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "(", "diffX", "//", "2", ",", "int", "(", "math", ".", "ceil", "(", "diffX", "/", "2.0", ")", ")", ",", "\n", "diffY", "//", "2", ",", "int", "(", "math", ".", "ceil", "(", "diffY", "/", "2.0", ")", ")", ")", ")", "#3//2=1,3/2=1.5", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "del", "x2", ",", "x1", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.upcat.__init__": [[143, 153], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "SDCNet.one_conv"], "methods", ["home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.SDCNet_VGG16_classify.__init__"], ["    ", "def", "__init__", "(", "self", ",", "up_in_ch", ",", "up_out_ch", ",", "if_convt", "=", "False", ")", ":", "\n", "        ", "super", "(", "upcat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "if_convt", "=", "if_convt", "\n", "if", "self", ".", "if_convt", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "up_in_ch", ",", "up_out_ch", ",", "2", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "self", ".", "conv1", "=", "one_conv", "(", "up_in_ch", ",", "up_out_ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.upcat.forward": [[154, 171], ["torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SDCNet.upcat.up", "SDCNet.upcat.up", "SDCNet.upcat.conv1", "x2.size", "SDCNet.upcat.size", "x2.size", "SDCNet.upcat.size", "int", "int", "math.ceil", "math.ceil"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "\n", "        ", "if", "self", ".", "if_convt", ":", "\n", "            ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "", "else", ":", "\n", "            ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "x1", "=", "self", ".", "conv1", "(", "x1", ")", "\n", "\n", "", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "#pad to make up for the loss when downsampling", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "(", "diffX", "//", "2", ",", "int", "(", "math", ".", "ceil", "(", "diffX", "/", "2.0", ")", ")", ",", "\n", "diffY", "//", "2", ",", "int", "(", "math", ".", "ceil", "(", "diffY", "/", "2.0", ")", ")", ")", ")", "#3//2=1,3/2=1.5", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "del", "x2", ",", "x1", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.SDCNet_VGG16_classify.__init__": [[199, 266], ["torch.Module.__init__", "dict", "SDCNet.make_layers", "SDCNet.make_layers", "SDCNet.make_layers", "SDCNet.make_layers", "SDCNet.make_layers", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "SDCNet.up", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "SDCNet.up", "SDCNet.SDCNet_VGG16_classify._initialize_weights", "len", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torchvision.models.vgg16", "torchvision.models.vgg16.state_dict", "SDCNet.SDCNet_VGG16_classify.state_dict", "SDCNet.SDCNet_VGG16_classify.state_dict().keys", "list", "SDCNet.SDCNet_VGG16_classify.load_state_dict", "models.vgg16.state_dict.items", "SDCNet.SDCNet_VGG16_classify.state_dict", "list", "list"], "methods", ["home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.SDCNet_VGG16_classify.__init__", "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.make_layers", "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.make_layers", "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.make_layers", "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.make_layers", "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.make_layers", "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.SDCNet_VGG16_classify._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "class_num", ",", "label_indice", ",", "div_times", "=", "2", ",", "load_weights", "=", "False", ",", "freeze_bn", "=", "False", ",", "psize", "=", "64", ",", "pstride", "=", "64", ",", "IF_pre_bn", "=", "True", ",", "parse_method", "=", "'maxp'", ",", "merge_reso", "=", "'low'", ")", ":", "\n", "        ", "super", "(", "SDCNet_VGG16_classify", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "label_indice", "=", "label_indice", "# this should be tensor", "\n", "self", ".", "class_num", "=", "len", "(", "self", ".", "label_indice", ")", "+", "1", "\n", "self", ".", "div_times", "=", "div_times", "\n", "self", ".", "frontend_feat", "=", "[", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", "]", "\n", "\n", "# self.args to save all args", "\n", "self", ".", "args", "=", "dict", "(", ")", "\n", "self", ".", "args", "[", "'label_indice'", "]", "=", "self", ".", "label_indice", "\n", "self", ".", "args", "[", "'class_num'", "]", "=", "self", ".", "class_num", "\n", "self", ".", "args", "[", "'psize'", "]", ",", "self", ".", "args", "[", "'pstride'", "]", "=", "psize", ",", "pstride", "\n", "self", ".", "args", "[", "'div_times'", "]", "=", "self", ".", "div_times", "\n", "self", ".", "args", "[", "'frontend'", "]", "=", "self", ".", "frontend_feat", "\n", "\n", "\n", "self", ".", "conv1_features", "=", "make_layers", "(", "[", "64", ",", "64", ",", "'M'", "]", ",", "in_channels", "=", "3", ")", "\n", "self", ".", "conv2_features", "=", "make_layers", "(", "[", "128", ",", "128", ",", "'M'", "]", ",", "in_channels", "=", "64", ")", "\n", "self", ".", "conv3_features", "=", "make_layers", "(", "[", "256", ",", "256", ",", "256", ",", "'M'", "]", ",", "in_channels", "=", "128", ")", "\n", "self", ".", "conv4_features", "=", "make_layers", "(", "[", "512", ",", "512", ",", "512", ",", "'M'", "]", ",", "in_channels", "=", "256", ")", "\n", "self", ".", "conv5_features", "=", "make_layers", "(", "[", "512", ",", "512", ",", "512", ",", "'M'", "]", ",", "in_channels", "=", "512", ")", "\n", "\n", "self", ".", "fc", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "#torch.nn.Conv2d(512, 512, (1, 1),stride=1 ),", "\n", "torch", ".", "nn", ".", "AvgPool2d", "(", "(", "2", ",", "2", ")", ",", "stride", "=", "2", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "(", "1", ",", "1", ")", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "class_num", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "\n", "# Convert conv ", "\n", "self", ".", "up45", "=", "up", "(", "up_in_ch", "=", "512", ",", "up_out_ch", "=", "256", ",", "cat_in_ch", "=", "(", "256", "+", "512", ")", ",", "cat_out_ch", "=", "512", ")", "\n", "self", ".", "lw_fc", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "AvgPool2d", "(", "(", "2", ",", "2", ")", ",", "stride", "=", "2", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "\n", "self", ".", "up34", "=", "up", "(", "up_in_ch", "=", "512", ",", "up_out_ch", "=", "256", ",", "cat_in_ch", "=", "(", "256", "+", "256", ")", ",", "cat_out_ch", "=", "512", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "if", "load_weights", ":", "\n", "            ", "mod", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "\n", "#use pretrained model to initialize", "\n", "pretrained_dict", "=", "mod", ".", "state_dict", "(", ")", "\n", "\n", "net_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "net_dict_name", "=", "self", ".", "state_dict", "(", ")", ".", "keys", "(", ")", "\n", "# print(net_dict_name)", "\n", "\n", "# 1. only load conv params            ", "\n", "lay_num", "=", "0", "\n", "for", "name", ",", "params", "in", "list", "(", "pretrained_dict", ".", "items", "(", ")", ")", ":", "\n", "                ", "if", "'conv'", "in", "list", "(", "net_dict_name", ")", "[", "lay_num", "]", ":", "\n", "                    ", "net_dict", "[", "list", "(", "net_dict_name", ")", "[", "lay_num", "]", "]", "=", "pretrained_dict", "[", "name", "]", "\n", "lay_num", "=", "lay_num", "+", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "# 2. load the new state dict", "\n", "", "", "self", ".", "load_state_dict", "(", "net_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.SDCNet_VGG16_classify.forward": [[267, 281], ["SDCNet.SDCNet_VGG16_classify.conv1_features", "SDCNet.SDCNet_VGG16_classify.conv2_features", "SDCNet.SDCNet_VGG16_classify.conv3_features", "SDCNet.SDCNet_VGG16_classify.conv4_features", "SDCNet.SDCNet_VGG16_classify.conv5_features", "SDCNet.SDCNet_VGG16_classify.fc"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1_features", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2_features", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3_features", "(", "x", ")", "\n", "conv3_feat", "=", "x", "if", "self", ".", "div_times", ">", "1", "else", "[", "]", "\n", "x", "=", "self", ".", "conv4_features", "(", "x", ")", "\n", "conv4_feat", "=", "x", "if", "self", ".", "div_times", ">", "0", "else", "[", "]", "\n", "x", "=", "self", ".", "conv5_features", "(", "x", ")", "\n", "conv5_feat", "=", "x", "if", "self", ".", "div_times", ">", "0", "else", "[", "]", "\n", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "feature_map", "=", "{", "'conv3'", ":", "conv3_feat", ",", "'conv4'", ":", "conv4_feat", ",", "'conv5'", ":", "conv5_feat", ",", "'cls0'", ":", "x", "}", "\n", "return", "feature_map", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.SDCNet_VGG16_classify._initialize_weights": [[282, 291], ["SDCNet.SDCNet_VGG16_classify.modules", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.SDCNet_VGG16_classify.resample": [[293, 328], ["dict", "SDCNet.SDCNet_VGG16_classify.up45", "SDCNet.SDCNet_VGG16_classify.lw_fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "SDCNet.SDCNet_VGG16_classify.fc", "SDCNet.SDCNet_VGG16_classify.up34", "SDCNet.SDCNet_VGG16_classify.lw_fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "SDCNet.SDCNet_VGG16_classify.fc"], "methods", ["None"], ["", "", "", "def", "resample", "(", "self", ",", "feature_map", ")", ":", "\n", "\n", "        ", "div_res", "=", "dict", "(", ")", "\n", "div_res", "[", "'cls0'", "]", "=", "feature_map", "[", "'cls0'", "]", "\n", "if", "self", ".", "div_times", ">", "0", ":", "\n", "# div45: Upsample and get weight  ", "\n", "            ", "new_conv4", "=", "self", ".", "up45", "(", "feature_map", "[", "'conv5'", "]", ",", "feature_map", "[", "'conv4'", "]", ")", "\n", "new_conv4_w", "=", "self", ".", "lw_fc", "(", "new_conv4", ")", "\n", "# new_conv4_w = F.sigmoid(new_conv4_w)", "\n", "new_conv4_w", "=", "torch", ".", "sigmoid", "(", "new_conv4_w", ")", "\n", "new_conv4_reg", "=", "self", ".", "fc", "(", "new_conv4", ")", "\n", "\n", "del", "feature_map", "[", "'conv5'", "]", ",", "feature_map", "[", "'conv4'", "]", "\n", "\n", "div_res", "[", "'cls1'", "]", "=", "new_conv4_reg", "\n", "div_res", "[", "'w1'", "]", "=", "1", "-", "new_conv4_w", "\n", "\n", "", "if", "self", ".", "div_times", ">", "1", ":", "\n", "# div34: Upsample and get weight  ", "\n", "            ", "new_conv3", "=", "self", ".", "up34", "(", "new_conv4", ",", "feature_map", "[", "'conv3'", "]", ")", "\n", "new_conv3_w", "=", "self", ".", "lw_fc", "(", "new_conv3", ")", "\n", "# new_conv3_w = F.sigmoid(new_conv3_w)", "\n", "new_conv3_w", "=", "torch", ".", "sigmoid", "(", "new_conv3_w", ")", "\n", "new_conv3_reg", "=", "self", ".", "fc", "(", "new_conv3", ")", "\n", "del", "feature_map", "[", "'conv3'", "]", "\n", "del", "new_conv3", ",", "new_conv4", "\n", "\n", "div_res", "[", "'cls2'", "]", "=", "new_conv3_reg", "\n", "div_res", "[", "'w2'", "]", "=", "1", "-", "new_conv3_w", "\n", "\n", "\n", "", "feature_map", "[", "'cls0'", "]", "=", "[", "]", "\n", "del", "feature_map", "\n", "\n", "return", "div_res", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.SDCNet_VGG16_classify.parse_merge": [[329, 351], ["dict", "range", "range", "Network.class_func.Class2Count", "Network.merge_func.count_merge_low2high_batch", "str", "div_res[].max", "str", "str", "str", "str", "str", "str", "int", "str"], "methods", ["home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.class_func.Class2Count", "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.merge_func.count_merge_low2high_batch"], ["", "def", "parse_merge", "(", "self", ",", "div_res", ")", ":", "\n", "        ", "res", "=", "dict", "(", ")", "\n", "# class2count", "\n", "for", "cidx", "in", "range", "(", "self", ".", "div_times", "+", "1", ")", ":", "\n", "            ", "tname", "=", "'c'", "+", "str", "(", "cidx", ")", "\n", "\n", "div_res", "[", "'cls'", "+", "str", "(", "cidx", ")", "]", "=", "div_res", "[", "'cls'", "+", "str", "(", "cidx", ")", "]", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "res", "[", "tname", "]", "=", "Class2Count", "(", "div_res", "[", "'cls'", "+", "str", "(", "cidx", ")", "]", ",", "self", ".", "label_indice", ")", "\n", "\n", "# merge_div_res", "\n", "# res['c0'] is the parse result", "\n", "", "res", "[", "'div0'", "]", "=", "res", "[", "'c0'", "]", "\n", "for", "divt", "in", "range", "(", "1", ",", "self", ".", "div_times", "+", "1", ")", ":", "\n", "            ", "tname", "=", "'div'", "+", "str", "(", "divt", ")", "\n", "tchigh", "=", "res", "[", "'c'", "+", "str", "(", "divt", ")", "]", "\n", "tclow", "=", "res", "[", "'div'", "+", "str", "(", "int", "(", "divt", "-", "1", ")", ")", "]", "\n", "tclow", "=", "count_merge_low2high_batch", "(", "tclow", ",", "tchigh", ")", "\n", "tw", "=", "div_res", "[", "'w'", "+", "str", "(", "divt", ")", "]", "\n", "res", "[", "tname", "]", "=", "(", "1", "-", "tw", ")", "*", "tclow", "+", "tw", "*", "tchigh", "\n", "\n", "", "del", "div_res", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.make_layers": [[19, 36], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["def", "make_layers", "(", "cfg", ",", "in_channels", "=", "3", ",", "batch_norm", "=", "False", ",", "dilation", "=", "False", ")", ":", "\n", "    ", "if", "dilation", ":", "\n", "        ", "d_rate", "=", "2", "\n", "", "else", ":", "\n", "        ", "d_rate", "=", "1", "\n", "", "layers", "=", "[", "]", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "d_rate", ",", "dilation", "=", "d_rate", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.change_padding": [[173, 179], ["net.modules", "isinstance"], "function", ["None"], ["", "", "def", "change_padding", "(", "net", ",", "del_or_add", "=", "'del'", ",", "pad_size", "=", "(", "1", ",", "1", ")", ")", ":", "\n", "    ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "m", ".", "padding", "=", "(", "0", ",", "0", ")", "if", "del_or_add", "==", "'del'", "else", "pad_size", "\n", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.SDCNet.compute_rf": [[181, 196], ["net.modules", "isinstance", "isinstance", "isinstance", "isinstance"], "function", ["None"], ["", "def", "compute_rf", "(", "net", ")", ":", "\n", "    ", "rf_size", ",", "rf_pad", ",", "rf_stride", "=", "1", ",", "0", ",", "1", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "MaxPool2d", ")", ")", ":", "\n", "            ", "tmp_kernel_size", "=", "m", ".", "kernel_size", "[", "0", "]", "if", "isinstance", "(", "m", ".", "kernel_size", ",", "(", "tuple", ",", "list", ")", ")", "else", "m", ".", "kernel_size", "\n", "tmp_padding", "=", "m", ".", "padding", "[", "0", "]", "if", "isinstance", "(", "m", ".", "padding", ",", "(", "tuple", ",", "list", ")", ")", "else", "m", ".", "padding", "\n", "tmp_stride", "=", "m", ".", "stride", "[", "0", "]", "if", "isinstance", "(", "m", ".", "stride", ",", "(", "tuple", ",", "list", ")", ")", "else", "m", ".", "stride", "\n", "\n", "# rf_pad relates with the last layer's rf_stride", "\n", "rf_pad", "+=", "tmp_padding", "*", "rf_stride", "\n", "# rf_size relates with the last layers's rf_stride", "\n", "rf_size", "+=", "(", "tmp_kernel_size", "-", "1", ")", "*", "rf_stride", "\n", "rf_stride", "*=", "tmp_stride", "\n", "\n", "", "", "return", "{", "'rf_size'", ":", "rf_size", ",", "'rf_pad'", ":", "rf_pad", ",", "'rf_stride'", ":", "rf_stride", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xhp-hust-2018-2011_S-DCNet.Network.merge_func.count_merge_low2high_batch": [[7, 28], ["torch.cuda.is_available", "torch.cuda.is_available", "int", "torch.zeros", "torch.zeros", "range", "chigh.size", "range", "cl2h.cpu.cpu", "float", "clow.cuda", "chigh.cuda", "cl2h.cpu.cuda", "chigh.size", "clow.size"], "function", ["None"], ["def", "count_merge_low2high_batch", "(", "clow", ",", "chigh", ")", ":", "\n", "    ", "'''\n    Inputs must have 4 dim, b*1*h*w\n    '''", "\n", "IF_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "IF_ret_gpu", "=", "(", "clow", ".", "device", ".", "type", "==", "'cuda'", ")", "\n", "rate", "=", "int", "(", "chigh", ".", "size", "(", ")", "[", "-", "1", "]", "/", "clow", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n", "norm", "=", "1", "/", "(", "float", "(", "rate", ")", "**", "2", ")", "\n", "cl2h", "=", "torch", ".", "zeros", "(", "chigh", ".", "size", "(", ")", ")", "\n", "if", "IF_gpu", ":", "\n", "        ", "clow", ",", "chigh", ",", "cl2h", "=", "clow", ".", "cuda", "(", ")", ",", "chigh", ".", "cuda", "(", ")", ",", "cl2h", ".", "cuda", "(", ")", "\n", "\n", "# b,c,h,w = clow.size()", "\n", "", "for", "rx", "in", "range", "(", "rate", ")", ":", "\n", "        ", "for", "ry", "in", "range", "(", "rate", ")", ":", "\n", "            ", "cl2h", "[", ":", ",", ":", ",", "rx", ":", ":", "rate", ",", "ry", ":", ":", "rate", "]", "=", "clow", "*", "norm", "\n", "\n", "", "", "if", "not", "IF_ret_gpu", ":", "# return as the input device", "\n", "        ", "cl2h", "=", "cl2h", ".", "cpu", "(", ")", "\n", "\n", "", "return", "cl2h", "\n", "\n"]]}