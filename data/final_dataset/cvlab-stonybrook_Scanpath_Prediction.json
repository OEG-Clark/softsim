{"home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.None.plot_scanpath.convert_coordinate": [[10, 38], ["float", "float", "int", "int", "float"], "function", ["None"], ["def", "convert_coordinate", "(", "X", ",", "Y", ",", "im_w", ",", "im_h", ")", ":", "\n", "    ", "\"\"\"\n    convert from display coordinate to pixel coordinate\n\n    X - x coordinate of the fixations\n    Y - y coordinate of the fixations\n    im_w - image width\n    im_h - image height\n    \"\"\"", "\n", "display_w", ",", "display_h", "=", "1680", ",", "1050", "\n", "target_ratio", "=", "display_w", "/", "float", "(", "display_h", ")", "\n", "ratio", "=", "im_w", "/", "float", "(", "im_h", ")", "\n", "\n", "delta_w", ",", "delta_h", "=", "0", ",", "0", "\n", "if", "ratio", ">", "target_ratio", ":", "\n", "        ", "new_w", "=", "display_w", "\n", "new_h", "=", "int", "(", "new_w", "/", "ratio", ")", "\n", "delta_h", "=", "display_h", "-", "new_h", "\n", "", "else", ":", "\n", "        ", "new_h", "=", "display_h", "\n", "new_w", "=", "int", "(", "new_h", "*", "ratio", ")", "\n", "delta_w", "=", "display_w", "-", "new_w", "\n", "", "dif_ux", "=", "delta_w", "//", "2", "\n", "dif_uy", "=", "delta_h", "//", "2", "\n", "scale", "=", "im_w", "/", "float", "(", "new_w", ")", "\n", "X", "=", "(", "X", "-", "dif_ux", ")", "*", "scale", "\n", "Y", "=", "(", "Y", "-", "dif_uy", ")", "*", "scale", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.None.plot_scanpath.plot_scanpath": [[40, 72], ["matplotlib.subplots", "ax.imshow", "range", "range", "ax.axis", "matplotlib.show", "numpy.min", "numpy.max", "float", "len", "len", "int", "matplotlib.Circle", "ax.add_patch", "matplotlib.annotate", "matplotlib.patches.Rectangle", "ax.add_patch", "ax.set_title", "matplotlib.arrow"], "function", ["None"], ["", "def", "plot_scanpath", "(", "img", ",", "xs", ",", "ys", ",", "ts", ",", "bbox", "=", "None", ",", "title", "=", "None", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "imshow", "(", "img", ")", "\n", "cir_rad_min", ",", "cir_rad_max", "=", "30", ",", "60", "\n", "min_T", ",", "max_T", "=", "np", ".", "min", "(", "ts", ")", ",", "np", ".", "max", "(", "ts", ")", "\n", "rad_per_T", "=", "(", "cir_rad_max", "-", "cir_rad_min", ")", "/", "float", "(", "max_T", "-", "min_T", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "xs", ")", ")", ":", "\n", "        ", "if", "i", ">", "0", ":", "\n", "            ", "plt", ".", "arrow", "(", "xs", "[", "i", "-", "1", "]", ",", "ys", "[", "i", "-", "1", "]", ",", "xs", "[", "i", "]", "-", "xs", "[", "i", "-", "1", "]", ",", "\n", "ys", "[", "i", "]", "-", "ys", "[", "i", "-", "1", "]", ",", "width", "=", "3", ",", "color", "=", "'yellow'", ",", "alpha", "=", "0.5", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "xs", ")", ")", ":", "\n", "        ", "cir_rad", "=", "int", "(", "25", "+", "rad_per_T", "*", "(", "ts", "[", "i", "]", "-", "min_T", ")", ")", "\n", "circle", "=", "plt", ".", "Circle", "(", "(", "xs", "[", "i", "]", ",", "ys", "[", "i", "]", ")", ",", "\n", "radius", "=", "cir_rad", ",", "\n", "edgecolor", "=", "'red'", ",", "\n", "facecolor", "=", "'yellow'", ",", "\n", "alpha", "=", "0.5", ")", "\n", "ax", ".", "add_patch", "(", "circle", ")", "\n", "plt", ".", "annotate", "(", "\"{}\"", ".", "format", "(", "\n", "i", "+", "1", ")", ",", "xy", "=", "(", "xs", "[", "i", "]", ",", "ys", "[", "i", "]", "+", "3", ")", ",", "fontsize", "=", "10", ",", "ha", "=", "\"center\"", ",", "va", "=", "\"center\"", ")", "\n", "\n", "", "if", "bbox", "is", "not", "None", ":", "\n", "        ", "rect", "=", "Rectangle", "(", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'yellow'", ",", "facecolor", "=", "'none'", ",", "linewidth", "=", "2", ")", "\n", "ax", ".", "add_patch", "(", "rect", ")", "\n", "\n", "", "ax", ".", "axis", "(", "'off'", ")", "\n", "if", "title", "is", "not", "None", ":", "\n", "        ", "ax", ".", "set_title", "(", "title", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.None.plot_scanpath.parse_args": [[74, 92], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.None.plot_scanpath.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--random_trial'", ",", "choices", "=", "[", "0", ",", "1", "]", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'randomly drawn from data (default=1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--trial_id'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'trial id (default=1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--subj_id'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'subject id (default=2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "\n", "choices", "=", "[", "'bot'", ",", "'chair'", ",", "'cup'", ",", "'fork'", ",", "'bowl'", ",", "'mouse'", ",", "\n", "'mic'", ",", "'lap'", ",", "'key'", ",", "'sink'", ",", "'toi'", ",", "'clock'", ",", "'tv'", ",", "'stop'", "]", ",", "\n", "default", "=", "'bot'", ",", "\n", "help", "=", "'searching target'", ")", "\n", "parser", ".", "add_argument", "(", "'--condition'", ",", "choices", "=", "[", "-", "1", ",", "0", ",", "1", "]", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'target present (1) or absent (-1) or randomly select (0) (default=0)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.None.extract_DCBs_demo.pred2feat": [[14, 24], ["seg.cpu.cpu", "torch.zeros", "torch.zeros", "torch.interpolate().squeeze", "torch.interpolate", "torch.zeros.unsqueeze"], "function", ["None"], ["def", "pred2feat", "(", "seg", ",", "info", ")", ":", "\n", "    ", "seg", "=", "seg", ".", "cpu", "(", ")", "\n", "feat", "=", "torch", ".", "zeros", "(", "[", "80", "+", "54", ",", "320", ",", "512", "]", ")", "\n", "for", "pred", "in", "info", ":", "\n", "        ", "mask", "=", "(", "seg", "==", "pred", "[", "'id'", "]", ")", ".", "float", "(", ")", "\n", "if", "pred", "[", "'isthing'", "]", ":", "\n", "            ", "feat", "[", "pred", "[", "'category_id'", "]", ",", ":", ",", ":", "]", "=", "mask", "*", "pred", "[", "'score'", "]", "\n", "", "else", ":", "\n", "            ", "feat", "[", "pred", "[", "'category_id'", "]", "+", "80", ",", ":", ",", ":", "]", "=", "mask", "\n", "", "", "return", "F", ".", "interpolate", "(", "feat", ".", "unsqueeze", "(", "0", ")", ",", "size", "=", "[", "20", ",", "32", "]", ")", ".", "squeeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.None.extract_DCBs_demo.get_DCBs": [[26, 36], ["PIL.Image.open().convert().resize", "Image.open().convert().resize.filter", "extract_DCBs_demo.pred2feat", "extract_DCBs_demo.pred2feat", "PIL.ImageFilter.GaussianBlur", "predictor", "predictor", "PIL.Image.open().convert", "numpy.array", "numpy.array", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.None.extract_DCBs_demo.pred2feat", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.None.extract_DCBs_demo.pred2feat"], ["", "def", "get_DCBs", "(", "img_path", ",", "predictor", ",", "radius", "=", "1", ")", ":", "\n", "    ", "high", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ".", "resize", "(", "(", "512", ",", "320", ")", ")", "\n", "low", "=", "high", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "radius", ")", ")", "\n", "high_panoptic_seg", ",", "high_segments_info", "=", "predictor", "(", "\n", "np", ".", "array", "(", "high", ")", ")", "[", "\"panoptic_seg\"", "]", "\n", "low_panoptic_seg", ",", "low_segments_info", "=", "predictor", "(", "\n", "np", ".", "array", "(", "low", ")", ")", "[", "\"panoptic_seg\"", "]", "\n", "high_feat", "=", "pred2feat", "(", "high_panoptic_seg", ",", "high_segments_info", ")", "\n", "low_feat", "=", "pred2feat", "(", "low_panoptic_seg", ",", "low_segments_info", ")", "\n", "return", "high_feat", ",", "low_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.None.dataset.process_data": [[6, 73], ["list", "dict", "numpy.unique", "irl_dcb.utils.preprocess_fixations", "numpy.unique", "irl_dcb.utils.compute_search_cdf", "print", "irl_dcb.utils.preprocess_fixations", "irl_dcb.data.LHF_IRL", "irl_dcb.data.LHF_IRL", "irl_dcb.data.LHF_Human_Gaze", "irl_dcb.data.LHF_Human_Gaze", "numpy.unique", "zip", "list", "range", "len"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.preprocess_fixations", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.compute_search_cdf", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.preprocess_fixations"], ["def", "process_data", "(", "trajs_train", ",", "\n", "trajs_valid", ",", "\n", "DCB_HR_dir", ",", "\n", "DCB_LR_dir", ",", "\n", "target_annos", ",", "\n", "hparams", ",", "\n", "is_testing", "=", "False", ")", ":", "\n", "    ", "target_init_fixs", "=", "{", "}", "\n", "for", "traj", "in", "trajs_train", "+", "trajs_valid", ":", "\n", "        ", "key", "=", "traj", "[", "'task'", "]", "+", "'_'", "+", "traj", "[", "'name'", "]", "\n", "target_init_fixs", "[", "key", "]", "=", "(", "traj", "[", "'X'", "]", "[", "0", "]", "/", "hparams", ".", "Data", ".", "im_w", ",", "\n", "traj", "[", "'Y'", "]", "[", "0", "]", "/", "hparams", ".", "Data", ".", "im_h", ")", "\n", "", "cat_names", "=", "list", "(", "np", ".", "unique", "(", "[", "x", "[", "'task'", "]", "for", "x", "in", "trajs_train", "]", ")", ")", "\n", "catIds", "=", "dict", "(", "zip", "(", "cat_names", ",", "list", "(", "range", "(", "len", "(", "cat_names", ")", ")", ")", ")", ")", "\n", "\n", "# training fixation data", "\n", "train_task_img_pair", "=", "np", ".", "unique", "(", "\n", "[", "traj", "[", "'task'", "]", "+", "'_'", "+", "traj", "[", "'name'", "]", "for", "traj", "in", "trajs_train", "]", ")", "\n", "train_fix_labels", "=", "preprocess_fixations", "(", "\n", "trajs_train", ",", "\n", "hparams", ".", "Data", ".", "patch_size", ",", "\n", "hparams", ".", "Data", ".", "patch_num", ",", "\n", "hparams", ".", "Data", ".", "im_h", ",", "\n", "hparams", ".", "Data", ".", "im_w", ",", "\n", "truncate_num", "=", "hparams", ".", "Data", ".", "max_traj_length", ")", "\n", "\n", "# validation fixation data", "\n", "valid_task_img_pair", "=", "np", ".", "unique", "(", "\n", "[", "traj", "[", "'task'", "]", "+", "'_'", "+", "traj", "[", "'name'", "]", "for", "traj", "in", "trajs_valid", "]", ")", "\n", "human_mean_cdf", ",", "_", "=", "compute_search_cdf", "(", "trajs_valid", ",", "target_annos", ",", "\n", "hparams", ".", "Data", ".", "max_traj_length", ")", "\n", "print", "(", "'target fixation prob (valid).:'", ",", "human_mean_cdf", ")", "\n", "valid_fix_labels", "=", "preprocess_fixations", "(", "\n", "trajs_valid", ",", "\n", "hparams", ".", "Data", ".", "patch_size", ",", "\n", "hparams", ".", "Data", ".", "patch_num", ",", "\n", "hparams", ".", "Data", ".", "im_h", ",", "\n", "hparams", ".", "Data", ".", "im_w", ",", "\n", "truncate_num", "=", "hparams", ".", "Data", ".", "max_traj_length", ")", "\n", "\n", "# load image data", "\n", "train_img_dataset", "=", "LHF_IRL", "(", "DCB_HR_dir", ",", "DCB_LR_dir", ",", "target_init_fixs", ",", "\n", "train_task_img_pair", ",", "target_annos", ",", "\n", "hparams", ".", "Data", ",", "catIds", ")", "\n", "valid_img_dataset", "=", "LHF_IRL", "(", "DCB_HR_dir", ",", "DCB_LR_dir", ",", "target_init_fixs", ",", "\n", "valid_task_img_pair", ",", "target_annos", ",", "\n", "hparams", ".", "Data", ",", "catIds", ")", "\n", "\n", "# load human gaze data", "\n", "train_HG_dataset", "=", "LHF_Human_Gaze", "(", "DCB_HR_dir", ",", "DCB_LR_dir", ",", "train_fix_labels", ",", "\n", "target_annos", ",", "hparams", ".", "Data", ",", "catIds", ")", "\n", "valid_HG_dataset", "=", "LHF_Human_Gaze", "(", "DCB_HR_dir", ",", "\n", "DCB_LR_dir", ",", "\n", "valid_fix_labels", ",", "\n", "target_annos", ",", "\n", "hparams", ".", "Data", ",", "\n", "catIds", ",", "\n", "blur_action", "=", "True", ")", "\n", "\n", "return", "{", "\n", "'catIds'", ":", "catIds", ",", "\n", "'img_train'", ":", "train_img_dataset", ",", "\n", "'img_valid'", ":", "valid_img_dataset", ",", "\n", "'gaze_train'", ":", "train_HG_dataset", ",", "\n", "'gaze_valid'", ":", "valid_HG_dataset", ",", "\n", "'human_mean_cdf'", ":", "human_mean_cdf", ",", "\n", "'bbox_annos'", ":", "target_annos", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Discriminator_Cond.__init__": [[8, 17], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.__init__"], ["    ", "def", "__init__", "(", "self", ",", "action_num", ",", "target_size", ",", "task_eye", ",", "ch", ")", ":", "\n", "        ", "super", "(", "LHF_Discriminator_Cond", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "ch", "+", "target_size", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "128", "+", "target_size", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", "+", "target_size", ",", "32", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "32", "+", "target_size", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "task_eye", "=", "task_eye", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Discriminator_Cond.get_one_hot": [[18, 21], ["None"], "methods", ["None"], ["", "def", "get_one_hot", "(", "self", ",", "tid", ")", ":", "\n", "        ", "task_onehot", "=", "self", ".", "task_eye", "[", "tid", "]", "\n", "return", "task_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Discriminator_Cond.modulate_features": [[22, 27], ["feat_maps.size", "tid_onehot.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tid_onehot.size"], "methods", ["None"], ["", "def", "modulate_features", "(", "self", ",", "feat_maps", ",", "tid_onehot", ")", ":", "\n", "        ", "\"\"\"modulat feature maps using task vector\"\"\"", "\n", "bs", ",", "_", ",", "h", ",", "w", "=", "feat_maps", ".", "size", "(", ")", "\n", "task_maps", "=", "tid_onehot", ".", "expand", "(", "bs", ",", "tid_onehot", ".", "size", "(", "1", ")", ",", "h", ",", "w", ")", "\n", "return", "torch", ".", "cat", "(", "[", "feat_maps", ",", "task_maps", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Discriminator_Cond.forward": [[28, 50], ["models.LHF_Discriminator_Cond.size", "models.LHF_Discriminator_Cond.get_one_hot", "tid_onehot.view.view.view", "models.LHF_Discriminator_Cond.modulate_features", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.LHF_Discriminator_Cond.modulate_features", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.LHF_Discriminator_Cond.modulate_features", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.LHF_Discriminator_Cond.modulate_features", "models.LHF_Discriminator_Cond.conv4().view", "tid_onehot.view.view.size", "models.LHF_Discriminator_Cond.conv1", "models.LHF_Discriminator_Cond.max_pool", "models.LHF_Discriminator_Cond.conv2", "models.LHF_Discriminator_Cond.max_pool", "models.LHF_Discriminator_Cond.conv3", "models.LHF_Discriminator_Cond.conv4", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "action.squeeze"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.get_one_hot", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.modulate_features", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.modulate_features", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.modulate_features", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.modulate_features"], ["", "def", "forward", "(", "self", ",", "x", ",", "action", ",", "tid", ")", ":", "\n", "        ", "\"\"\" output probability of x being true data\"\"\"", "\n", "bs", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "tid_onehot", "=", "self", ".", "get_one_hot", "(", "tid", ")", "\n", "tid_onehot", "=", "tid_onehot", ".", "view", "(", "bs", ",", "tid_onehot", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "modulate_features", "(", "x", ",", "tid_onehot", ")", "\n", "x", "=", "torch", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "if", "h", "==", "80", ":", "\n", "            ", "x", "=", "self", ".", "max_pool", "(", "x", ")", "\n", "", "x", "=", "self", ".", "modulate_features", "(", "x", ",", "tid_onehot", ")", "\n", "x", "=", "torch", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "if", "h", "==", "80", ":", "\n", "            ", "x", "=", "self", ".", "max_pool", "(", "x", ")", "\n", "", "x", "=", "self", ".", "modulate_features", "(", "x", ",", "tid_onehot", ")", "\n", "x", "=", "torch", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "modulate_features", "(", "x", ",", "tid_onehot", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", ".", "view", "(", "bs", ",", "-", "1", ")", "\n", "if", "action", "is", "None", ":", "# return whole reward map", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", "[", "torch", ".", "arange", "(", "bs", ")", ",", "action", ".", "squeeze", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.__init__": [[54, 71], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.__init__"], ["    ", "def", "__init__", "(", "self", ",", "action_num", ",", "target_size", ",", "task_eye", ",", "ch", ")", ":", "\n", "        ", "super", "(", "LHF_Policy_Cond_Small", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "feat_enc", "=", "nn", ".", "Conv2d", "(", "ch", "+", "target_size", ",", "128", ",", "5", ",", "padding", "=", "2", ")", "\n", "\n", "# actor", "\n", "self", ".", "actor1", "=", "nn", ".", "Conv2d", "(", "128", "+", "target_size", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "actor2", "=", "nn", ".", "Conv2d", "(", "64", "+", "target_size", ",", "32", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "actor3", "=", "nn", ".", "Conv2d", "(", "32", "+", "target_size", ",", "1", ",", "1", ")", "\n", "\n", "# critic", "\n", "self", ".", "critic0", "=", "nn", ".", "Conv2d", "(", "128", "+", "target_size", ",", "128", ",", "3", ")", "\n", "self", ".", "critic1", "=", "nn", ".", "Conv2d", "(", "128", "+", "target_size", ",", "256", ",", "3", ")", "\n", "self", ".", "critic2", "=", "nn", ".", "Linear", "(", "256", "+", "target_size", ",", "64", ")", "\n", "self", ".", "critic3", "=", "nn", ".", "Linear", "(", "64", ",", "1", ")", "\n", "\n", "self", ".", "task_eye", "=", "task_eye", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.get_one_hot": [[72, 75], ["None"], "methods", ["None"], ["", "def", "get_one_hot", "(", "self", ",", "tid", ")", ":", "\n", "        ", "task_onehot", "=", "self", ".", "task_eye", "[", "tid", "]", "\n", "return", "task_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.modulate_features": [[76, 81], ["feat_maps.size", "tid_onehot.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tid_onehot.size"], "methods", ["None"], ["", "def", "modulate_features", "(", "self", ",", "feat_maps", ",", "tid_onehot", ")", ":", "\n", "        ", "\"\"\"modulat feature maps using task vector\"\"\"", "\n", "bs", ",", "_", ",", "h", ",", "w", "=", "feat_maps", ".", "size", "(", ")", "\n", "task_maps", "=", "tid_onehot", ".", "expand", "(", "bs", ",", "tid_onehot", ".", "size", "(", "1", ")", ",", "h", ",", "w", ")", "\n", "return", "torch", ".", "cat", "(", "[", "feat_maps", ",", "task_maps", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.forward": [[82, 109], ["torch.relu.size", "torch.relu.size", "torch.relu.size", "models.LHF_Policy_Cond_Small.get_one_hot", "tid_onehot.view.view.view", "models.LHF_Policy_Cond_Small.modulate_features", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.LHF_Policy_Cond_Small.modulate_features", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.LHF_Policy_Cond_Small.modulate_features", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.LHF_Policy_Cond_Small.modulate_features", "models.LHF_Policy_Cond_Small.actor3().view", "torch.softmax", "torch.softmax", "torch.softmax", "models.LHF_Policy_Cond_Small.max_pool", "models.LHF_Policy_Cond_Small.modulate_features", "models.LHF_Policy_Cond_Small.max_pool", "torch.relu.view().mean", "torch.relu.view().mean", "torch.relu.view().mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.LHF_Policy_Cond_Small.critic3", "tid_onehot.view.view.size", "models.LHF_Policy_Cond_Small.feat_enc", "models.LHF_Policy_Cond_Small.actor1", "models.LHF_Policy_Cond_Small.actor2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.LHF_Policy_Cond_Small.critic2", "models.LHF_Policy_Cond_Small.actor3", "models.LHF_Policy_Cond_Small.critic0", "models.LHF_Policy_Cond_Small.critic1", "torch.relu.view", "torch.relu.view", "torch.relu.view", "tid_onehot.view.view.squeeze", "torch.relu.size", "torch.relu.size", "torch.relu.size"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.get_one_hot", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.modulate_features", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.modulate_features", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.modulate_features", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.modulate_features", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.modulate_features"], ["", "def", "forward", "(", "self", ",", "x", ",", "tid", ",", "act_only", "=", "False", ")", ":", "\n", "        ", "\"\"\" output the action probability\"\"\"", "\n", "bs", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "tid_onehot", "=", "self", ".", "get_one_hot", "(", "tid", ")", "\n", "tid_onehot", "=", "tid_onehot", ".", "view", "(", "bs", ",", "tid_onehot", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "modulate_features", "(", "x", ",", "tid_onehot", ")", "\n", "x", "=", "torch", ".", "relu", "(", "self", ".", "feat_enc", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "modulate_features", "(", "x", ",", "tid_onehot", ")", "\n", "act_logits", "=", "torch", ".", "relu", "(", "self", ".", "actor1", "(", "x", ")", ")", "\n", "act_logits", "=", "self", ".", "modulate_features", "(", "act_logits", ",", "tid_onehot", ")", "\n", "act_logits", "=", "torch", ".", "relu", "(", "self", ".", "actor2", "(", "act_logits", ")", ")", "\n", "act_logits", "=", "self", ".", "modulate_features", "(", "act_logits", ",", "tid_onehot", ")", "\n", "act_logits", "=", "self", ".", "actor3", "(", "act_logits", ")", ".", "view", "(", "bs", ",", "-", "1", ")", "\n", "\n", "act_probs", "=", "F", ".", "softmax", "(", "act_logits", ",", "dim", "=", "-", "1", ")", "\n", "if", "act_only", ":", "\n", "            ", "return", "act_probs", ",", "None", "\n", "\n", "", "x", "=", "self", ".", "max_pool", "(", "torch", ".", "relu", "(", "self", ".", "critic0", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "modulate_features", "(", "x", ",", "tid_onehot", ")", "\n", "x", "=", "self", ".", "max_pool", "(", "torch", ".", "relu", "(", "self", ".", "critic1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "bs", ",", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "tid_onehot", ".", "squeeze", "(", ")", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "torch", ".", "relu", "(", "self", ".", "critic2", "(", "x", ")", ")", "\n", "state_values", "=", "self", ".", "critic3", "(", "x", ")", "\n", "return", "act_probs", ",", "state_values", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__init__": [[14, 45], ["dict.__init__", "super().__setitem__", "isinstance", "isinstance", "len", "super().__setitem__", "TypeError", "len", "len", "len", "open", "json.load", "isinstance", "super().__setitem__", "os.path.splitext", "config.JsonConfig", "type", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.__init__", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__setitem__", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__setitem__", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.load", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__setitem__"], ["def", "__init__", "(", "self", ",", "*", "argv", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "super", "(", ")", ".", "__setitem__", "(", "\"__name\"", ",", "\"default\"", ")", "\n", "# check input", "\n", "assert", "len", "(", "argv", ")", "==", "0", "or", "len", "(", "kwargs", ")", "==", "0", ",", "(", "\n", "\"[JsonConfig]: Cannot initialize with\"", "\n", "\" position parameters (json file or a dict)\"", "\n", "\" and named parameters (key and values) at the same time.\"", ")", "\n", "if", "len", "(", "argv", ")", ">", "0", ":", "\n", "# init from a json or dict", "\n", "            ", "assert", "len", "(", "argv", ")", "==", "1", ",", "(", "\n", "\"[JsonConfig]: Need one positional parameters, found two.\"", ")", "\n", "arg", "=", "argv", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "arg", "=", "kwargs", "\n", "# begin initialization", "\n", "", "if", "isinstance", "(", "arg", ",", "str", ")", ":", "\n", "            ", "super", "(", ")", ".", "__setitem__", "(", "\"__name\"", ",", "\n", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "arg", ")", ")", "[", "0", "]", ")", "\n", "with", "open", "(", "arg", ",", "\"r\"", ")", "as", "load_f", ":", "\n", "                ", "arg", "=", "json", ".", "load", "(", "load_f", ")", "\n", "", "", "if", "isinstance", "(", "arg", ",", "dict", ")", ":", "\n", "# case 1: init from dict", "\n", "            ", "for", "key", "in", "arg", ":", "\n", "                ", "value", "=", "arg", "[", "key", "]", "\n", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                    ", "value", "=", "JsonConfig", "(", "value", ")", "\n", "", "super", "(", ")", ".", "__setitem__", "(", "key", ",", "value", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "(", "\"[JsonConfig]: Do not support given input\"", "\n", "\" with type {}\"", ")", ".", "format", "(", "type", "(", "arg", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__setattr__": [[46, 48], ["Exception"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "attr", ",", "value", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"[JsonConfig]: Can't set constant key {}\"", ".", "format", "(", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__setitem__": [[49, 51], ["Exception"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "item", ",", "value", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"[JsonConfig]: Can't set constant key {}\"", ".", "format", "(", "item", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__getattr__": [[52, 54], ["dict.__getitem__"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.LHF_Human_Gaze.__getitem__"], ["", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "__getitem__", "(", "attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__str__": [[55, 57], ["config.JsonConfig.__to_string"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__to_string"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__to_string", "(", "\"\"", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__to_string": [[58, 72], ["isinstance", "key.find", "value.__to_string", "str"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__to_string"], ["", "def", "__to_string", "(", "self", ",", "name", ",", "intent", ")", ":", "\n", "        ", "ret", "=", "\" \"", "*", "intent", "+", "name", "+", "\" {\\n\"", "\n", "for", "key", "in", "self", ":", "\n", "            ", "if", "key", ".", "find", "(", "\"__\"", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "value", "=", "self", "[", "key", "]", "\n", "line", "=", "\" \"", "*", "intent", "\n", "if", "isinstance", "(", "value", ",", "JsonConfig", ")", ":", "\n", "                ", "line", "+=", "value", ".", "__to_string", "(", "key", ",", "intent", "+", "JsonConfig", ".", "Indent", ")", "\n", "", "else", ":", "\n", "                ", "line", "+=", "\" \"", "*", "JsonConfig", ".", "Indent", "+", "key", "+", "\": \"", "+", "str", "(", "value", ")", "\n", "", "ret", "+=", "line", "+", "\"\\n\"", "\n", "", "ret", "+=", "\" \"", "*", "intent", "+", "\"}\"", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__add__": [[73, 91], ["isinstance", "isinstance", "super().__setitem__", "super().__setitem__", "super().__setitem__"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__setitem__", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__setitem__", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.__setitem__"], ["", "def", "__add__", "(", "self", ",", "b", ")", ":", "\n", "        ", "assert", "isinstance", "(", "b", ",", "JsonConfig", ")", "\n", "for", "k", "in", "b", ":", "\n", "            ", "v", "=", "b", "[", "k", "]", "\n", "if", "k", "in", "self", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "JsonConfig", ")", ":", "\n", "                    ", "super", "(", ")", ".", "__setitem__", "(", "k", ",", "self", "[", "k", "]", "+", "v", ")", "\n", "", "else", ":", "\n", "                    ", "if", "k", "==", "\"__name\"", ":", "\n", "                        ", "super", "(", ")", ".", "__setitem__", "(", "k", ",", "self", "[", "k", "]", "+", "\"&\"", "+", "v", ")", "\n", "", "else", ":", "\n", "                        ", "assert", "v", "==", "self", "[", "k", "]", ",", "(", "\n", "\"[JsonConfig]: Two config conflicts at\"", "\n", "\"`{}`, {} != {}\"", ".", "format", "(", "k", ",", "self", "[", "k", "]", ",", "v", ")", ")", "\n", "", "", "", "else", ":", "\n", "# new key, directly add", "\n", "                ", "super", "(", ")", ".", "__setitem__", "(", "k", ",", "v", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.date_name": [[92, 98], ["str", "date[].replace().replace().replace", "datetime.datetime.now", "date[].replace().replace", "dict.__getitem__", "date[].replace", "date[].replace().replace().replace.rfind"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.LHF_Human_Gaze.__getitem__"], ["", "def", "date_name", "(", "self", ")", ":", "\n", "        ", "date", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "date", "=", "date", "[", ":", "date", ".", "rfind", "(", "\":\"", ")", "]", ".", "replace", "(", "\"-\"", ",", "\"\"", ")", ".", "replace", "(", "\":\"", ",", "\"\"", ")", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "return", "date", "+", "\"_\"", "+", "super", "(", ")", ".", "__getitem__", "(", "\"__name\"", ")", "+", "\".json\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.dump": [[99, 106], ["os.path.join", "config.JsonConfig.date_name", "open", "print", "json.dump", "str", "config.JsonConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.date_name", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.dump", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.to_dict"], ["", "def", "dump", "(", "self", ",", "dir_path", ",", "json_name", "=", "None", ")", ":", "\n", "        ", "if", "json_name", "is", "None", ":", "\n", "            ", "json_name", "=", "self", ".", "date_name", "(", ")", "\n", "", "json_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "json_name", ")", "\n", "with", "open", "(", "json_path", ",", "\"w\"", ")", "as", "fout", ":", "\n", "            ", "print", "(", "str", "(", "self", ")", ")", "\n", "json", ".", "dump", "(", "self", ".", "to_dict", "(", ")", ",", "fout", ",", "indent", "=", "JsonConfig", ".", "Indent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.to_dict": [[107, 118], ["isinstance", "k.find", "v.to_dict"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.to_dict"], ["", "", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "ret", "=", "{", "}", "\n", "for", "k", "in", "self", ":", "\n", "            ", "if", "k", ".", "find", "(", "\"__\"", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "v", "=", "self", "[", "k", "]", "\n", "if", "isinstance", "(", "v", ",", "JsonConfig", ")", ":", "\n", "                ", "ret", "[", "k", "]", "=", "v", ".", "to_dict", "(", ")", "\n", "", "else", ":", "\n", "                ", "ret", "[", "k", "]", "=", "v", "\n", "", "", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.multimatch": [[6, 31], ["len", "len", "multimatch.docomparison", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.docomparison"], ["def", "multimatch", "(", "s1", ",", "s2", ",", "im_size", ")", ":", "\n", "    ", "s1x", "=", "s1", "[", "'X'", "]", "\n", "s1y", "=", "s1", "[", "'Y'", "]", "\n", "l1", "=", "len", "(", "s1x", ")", "\n", "if", "l1", "<", "3", ":", "\n", "        ", "scanpath1", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "scanpath1", "[", ":", "l1", ",", "0", "]", "=", "s1x", "\n", "scanpath1", "[", ":", "l1", ",", "1", "]", "=", "s1y", "\n", "", "else", ":", "\n", "        ", "scanpath1", "=", "np", ".", "ones", "(", "(", "l1", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "scanpath1", "[", ":", ",", "0", "]", "=", "s1x", "\n", "scanpath1", "[", ":", ",", "1", "]", "=", "s1y", "\n", "", "s2x", "=", "s2", "[", "'X'", "]", "\n", "s2y", "=", "s2", "[", "'Y'", "]", "\n", "l2", "=", "len", "(", "s2x", ")", "\n", "if", "l2", "<", "3", ":", "\n", "        ", "scanpath2", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "scanpath2", "[", ":", "l2", ",", "0", "]", "=", "s2x", "\n", "scanpath2", "[", ":", "l2", ",", "1", "]", "=", "s2y", "\n", "", "else", ":", "\n", "        ", "scanpath2", "=", "np", ".", "ones", "(", "(", "l2", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "scanpath2", "[", ":", ",", "0", "]", "=", "s2x", "\n", "scanpath2", "[", ":", ",", "1", "]", "=", "s2y", "\n", "", "mm", "=", "docomparison", "(", "scanpath1", ",", "scanpath2", ",", "sz", "=", "im_size", ")", "\n", "return", "mm", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.compute_mm": [[33, 59], ["list", "all_mm_scores.append", "numpy.mean", "filter", "numpy.array", "numpy.mean", "numpy.mean", "metrics.multimatch"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.multimatch"], ["", "def", "compute_mm", "(", "human_trajs", ",", "model_trajs", ",", "im_w", ",", "im_h", ",", "tasks", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    compute scanpath similarity using multimatch\n    \"\"\"", "\n", "all_mm_scores", "=", "[", "]", "\n", "for", "traj", "in", "model_trajs", ":", "\n", "        ", "img_name", "=", "traj", "[", "'name'", "]", "\n", "task", "=", "traj", "[", "'task'", "]", "\n", "gt_trajs", "=", "list", "(", "\n", "filter", "(", "lambda", "x", ":", "x", "[", "'name'", "]", "==", "img_name", "and", "x", "[", "'task'", "]", "==", "task", ",", "\n", "human_trajs", ")", ")", "\n", "all_mm_scores", ".", "append", "(", "(", "task", ",", "\n", "np", ".", "mean", "(", "[", "\n", "multimatch", "(", "traj", ",", "gt_traj", ",", "(", "im_w", ",", "im_h", ")", ")", "[", ":", "4", "]", "\n", "for", "gt_traj", "in", "gt_trajs", "\n", "]", ",", "\n", "axis", "=", "0", ")", ")", ")", "\n", "\n", "", "if", "tasks", "is", "not", "None", ":", "\n", "        ", "mm_tasks", "=", "{", "}", "\n", "for", "task", "in", "tasks", ":", "\n", "            ", "mm", "=", "np", ".", "array", "(", "[", "x", "[", "1", "]", "for", "x", "in", "all_mm_scores", "if", "x", "[", "0", "]", "==", "task", "]", ")", "\n", "mm_tasks", "[", "task", "]", "=", "np", ".", "mean", "(", "mm", ",", "axis", "=", "0", ")", "\n", "", "return", "mm_tasks", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "[", "x", "[", "1", "]", "for", "x", "in", "all_mm_scores", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.scanpath2clusters": [[61, 69], ["range", "len", "string.append", "meanshift.predict"], "function", ["None"], ["", "", "def", "scanpath2clusters", "(", "meanshift", ",", "scanpath", ")", ":", "\n", "    ", "string", "=", "[", "]", "\n", "xs", "=", "scanpath", "[", "'X'", "]", "\n", "ys", "=", "scanpath", "[", "'Y'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "xs", ")", ")", ":", "\n", "        ", "symbol", "=", "meanshift", ".", "predict", "(", "[", "[", "xs", "[", "i", "]", ",", "ys", "[", "i", "]", "]", "]", ")", "[", "0", "]", "\n", "string", ".", "append", "(", "symbol", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.zero_one_similarity": [[71, 76], ["None"], "function", ["None"], ["", "def", "zero_one_similarity", "(", "a", ",", "b", ")", ":", "\n", "    ", "if", "a", "==", "b", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.nw_matching": [[78, 95], ["numpy.zeros", "range", "range", "range", "range", "max", "len", "len", "len", "numpy.max", "len", "len", "len", "len", "len", "metrics.zero_one_similarity", "len", "len"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.zero_one_similarity"], ["", "", "def", "nw_matching", "(", "pred_string", ",", "gt_string", ",", "gap", "=", "0.0", ")", ":", "\n", "# NW string matching with zero_one_similarity", "\n", "    ", "F", "=", "np", ".", "zeros", "(", "(", "len", "(", "pred_string", ")", "+", "1", ",", "len", "(", "gt_string", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "1", "+", "len", "(", "pred_string", ")", ")", ":", "\n", "        ", "F", "[", "i", ",", "0", "]", "=", "gap", "*", "i", "\n", "", "for", "j", "in", "range", "(", "1", "+", "len", "(", "gt_string", ")", ")", ":", "\n", "        ", "F", "[", "0", ",", "j", "]", "=", "gap", "*", "j", "\n", "", "for", "i", "in", "range", "(", "1", ",", "1", "+", "len", "(", "pred_string", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "1", "+", "len", "(", "gt_string", ")", ")", ":", "\n", "            ", "a", "=", "pred_string", "[", "i", "-", "1", "]", "\n", "b", "=", "gt_string", "[", "j", "-", "1", "]", "\n", "match", "=", "F", "[", "i", "-", "1", ",", "j", "-", "1", "]", "+", "zero_one_similarity", "(", "a", ",", "b", ")", "\n", "delete", "=", "F", "[", "i", "-", "1", ",", "j", "]", "+", "gap", "\n", "insert", "=", "F", "[", "i", ",", "j", "-", "1", "]", "+", "gap", "\n", "F", "[", "i", ",", "j", "]", "=", "np", ".", "max", "(", "[", "match", ",", "delete", ",", "insert", "]", ")", "\n", "", "", "score", "=", "F", "[", "len", "(", "pred_string", ")", ",", "len", "(", "gt_string", ")", "]", "\n", "return", "score", "/", "max", "(", "len", "(", "pred_string", ")", ",", "len", "(", "gt_string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.compute_SS": [[98, 127], ["metrics.scanpath2clusters", "results.append", "numpy.array().mean", "len", "metrics.nw_matching", "scores.append", "max", "numpy.array", "len", "len"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.scanpath2clusters", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.nw_matching"], ["", "def", "compute_SS", "(", "preds", ",", "clusters", ",", "truncate", ",", "reduce", "=", "'mean'", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "for", "scanpath", "in", "preds", ":", "\n", "        ", "key", "=", "'test-{}-{}-{}'", ".", "format", "(", "scanpath", "[", "'condition'", "]", ",", "scanpath", "[", "'task'", "]", ",", "\n", "scanpath", "[", "'name'", "]", "[", ":", "-", "4", "]", ")", "\n", "ms", "=", "clusters", "[", "key", "]", "\n", "strings", "=", "ms", "[", "'strings'", "]", "\n", "cluster", "=", "ms", "[", "'cluster'", "]", "\n", "\n", "pred", "=", "scanpath2clusters", "(", "cluster", ",", "scanpath", ")", "\n", "scores", "=", "[", "]", "\n", "for", "gt", "in", "strings", ":", "\n", "            ", "if", "len", "(", "gt", ")", ">", "0", ":", "\n", "                ", "pred", "=", "pred", "[", ":", "truncate", "]", "if", "len", "(", "pred", ")", ">", "truncate", "else", "pred", "\n", "gt", "=", "gt", "[", ":", "truncate", "]", "if", "len", "(", "gt", ")", ">", "truncate", "else", "gt", "\n", "score", "=", "nw_matching", "(", "pred", ",", "gt", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "", "", "result", "=", "{", "}", "\n", "result", "[", "'condition'", "]", "=", "scanpath", "[", "'condition'", "]", "\n", "result", "[", "'task'", "]", "=", "scanpath", "[", "'task'", "]", "\n", "result", "[", "'name'", "]", "=", "scanpath", "[", "'name'", "]", "\n", "if", "reduce", "==", "'mean'", ":", "\n", "            ", "result", "[", "'score'", "]", "=", "np", ".", "array", "(", "scores", ")", ".", "mean", "(", ")", "\n", "", "elif", "reduce", "==", "'max'", ":", "\n", "            ", "result", "[", "'score'", "]", "=", "max", "(", "scores", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.get_seq_score": [[129, 139], ["metrics.compute_SS", "numpy.mean", "dict", "scores.append", "zip", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.compute_SS"], ["", "def", "get_seq_score", "(", "preds", ",", "clusters", ",", "max_step", ",", "tasks", "=", "None", ")", ":", "\n", "    ", "results", "=", "compute_SS", "(", "preds", ",", "clusters", ",", "truncate", "=", "max_step", ")", "\n", "if", "tasks", "is", "None", ":", "\n", "        ", "return", "np", ".", "mean", "(", "[", "r", "[", "'score'", "]", "for", "r", "in", "results", "]", ")", "\n", "", "else", ":", "\n", "        ", "scores", "=", "[", "]", "\n", "for", "task", "in", "tasks", ":", "\n", "            ", "scores", ".", "append", "(", "\n", "np", ".", "mean", "(", "[", "r", "[", "'score'", "]", "for", "r", "in", "results", "if", "r", "[", "'task'", "]", "==", "task", "]", ")", ")", "\n", "", "return", "dict", "(", "zip", "(", "tasks", ",", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.scanpath_ratio": [[141, 151], ["numpy.sum", "numpy.sqrt", "min", "numpy.sqrt", "print"], "function", ["None"], ["", "", "def", "scanpath_ratio", "(", "traj", ",", "bbox", ")", ":", "\n", "    ", "X1", ",", "Y1", "=", "traj", "[", "'X'", "]", "[", ":", "-", "1", "]", ",", "traj", "[", "'Y'", "]", "[", ":", "-", "1", "]", "\n", "X2", ",", "Y2", "=", "traj", "[", "'X'", "]", "[", "1", ":", "]", ",", "traj", "[", "'Y'", "]", "[", "1", ":", "]", "\n", "traj_dist", "=", "np", ".", "sum", "(", "np", ".", "sqrt", "(", "(", "X1", "-", "X2", ")", "**", "2", "+", "(", "Y1", "-", "Y2", ")", "**", "2", ")", ")", "\n", "cx", ",", "cy", "=", "traj", "[", "'X'", "]", "[", "0", "]", ",", "traj", "[", "'Y'", "]", "[", "0", "]", "\n", "tx", ",", "ty", "=", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", "/", "2.0", ",", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", "/", "2.0", "\n", "target_dist", "=", "np", ".", "sqrt", "(", "(", "tx", "-", "cx", ")", "**", "2", "+", "(", "ty", "-", "cy", ")", "**", "2", ")", "\n", "if", "traj_dist", "==", "0", ":", "\n", "        ", "print", "(", "\"error traj\"", ",", "traj", ")", "\n", "", "return", "min", "(", "target_dist", "/", "traj_dist", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.compute_avgSPRatio": [[153, 175], ["utils.get_num_step2target", "all_sp_ratios.append", "numpy.mean", "len", "numpy.mean", "metrics.scanpath_ratio"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.get_num_step2target", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.scanpath_ratio"], ["", "def", "compute_avgSPRatio", "(", "trajs", ",", "target_annos", ",", "max_step", ",", "tasks", "=", "None", ")", ":", "\n", "\n", "    ", "all_sp_ratios", "=", "[", "]", "\n", "for", "traj", "in", "trajs", ":", "\n", "        ", "key", "=", "traj", "[", "'task'", "]", "+", "'_'", "+", "traj", "[", "'name'", "]", "\n", "bbox", "=", "target_annos", "[", "key", "]", "\n", "num_step", "=", "utils", ".", "get_num_step2target", "(", "traj", "[", "'X'", "]", ",", "traj", "[", "'Y'", "]", ",", "bbox", ")", "\n", "if", "num_step", ">", "max_step", "+", "1", ":", "# skip failed scanpaths", "\n", "            ", "continue", "\n", "", "sp", "=", "{", "'X'", ":", "traj", "[", "'X'", "]", "[", ":", "num_step", "]", ",", "'Y'", ":", "traj", "[", "'Y'", "]", "[", ":", "num_step", "]", "}", "\n", "if", "len", "(", "sp", "[", "'X'", "]", ")", "==", "1", ":", "# skip single-step scanpaths", "\n", "            ", "continue", "\n", "", "all_sp_ratios", ".", "append", "(", "(", "traj", "[", "'task'", "]", ",", "scanpath_ratio", "(", "sp", ",", "bbox", ")", ")", ")", "\n", "\n", "", "if", "tasks", "is", "not", "None", ":", "\n", "        ", "avg_sp_ratios", "=", "{", "}", "\n", "for", "task", "in", "tasks", ":", "\n", "            ", "sp_ratios", "=", "[", "x", "[", "1", "]", "for", "x", "in", "all_sp_ratios", "if", "x", "[", "0", "]", "==", "task", "]", "\n", "avg_sp_ratios", "[", "task", "]", "=", "np", ".", "mean", "(", "sp_ratios", ")", "\n", "", "return", "avg_sp_ratios", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "[", "x", "[", "1", "]", "for", "x", "in", "all_sp_ratios", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.compute_cdf_auc": [[177, 185], ["isinstance", "cdf.items", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "", "def", "compute_cdf_auc", "(", "cdf", ")", ":", "\n", "    ", "if", "isinstance", "(", "cdf", ",", "dict", ")", ":", "\n", "        ", "auc", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "cdf", ".", "items", "(", ")", ":", "\n", "            ", "auc", "[", "k", "]", "=", "v", "[", "0", "]", "+", "v", "[", "-", "1", "]", "+", "np", ".", "sum", "(", "v", "[", "1", ":", "-", "1", "]", ")", "\n", "", "return", "auc", "\n", "", "else", ":", "\n", "        ", "return", "cdf", "[", "0", "]", "+", "cdf", "[", "-", "1", "]", "+", "np", ".", "sum", "(", "cdf", "[", "1", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.metrics.compute_prob_mismatch": [[187, 196], ["isinstance", "dict", "numpy.sum", "zip", "numpy.abs", "cdf.keys", "numpy.sum", "numpy.abs", "numpy.array", "list", "cdf.values"], "function", ["None"], ["", "", "def", "compute_prob_mismatch", "(", "cdf", ",", "human_mean_cdf", ")", ":", "\n", "    ", "if", "isinstance", "(", "cdf", ",", "dict", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "zip", "(", "\n", "cdf", ".", "keys", "(", ")", ",", "\n", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "array", "(", "list", "(", "cdf", ".", "values", "(", ")", ")", ")", "-", "human_mean_cdf", ")", ",", "\n", "axis", "=", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "sum", "(", "np", ".", "abs", "(", "cdf", "-", "human_mean_cdf", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.trainer.Trainer.__init__": [[15, 81], ["str", "date[].replace().replace().replace", "os.path.join", "os.path.join", "hparams.dump", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ppo.PPO", "gail.GAIL", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "datetime.datetime.now", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "date[].replace().replace", "date[].replace", "date[].replace().replace().replace.rfind"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.config.JsonConfig.dump"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "loaded_step", ",", "env", ",", "dataset", ",", "device", ",", "hparams", ")", ":", "\n", "# setup logger", "\n", "        ", "date", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "date", "=", "date", "[", ":", "date", ".", "rfind", "(", "\":\"", ")", "]", ".", "replace", "(", "\"-\"", ",", "\"\"", ")", ".", "replace", "(", "\":\"", ",", "\"\"", ")", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "hparams", ".", "Train", ".", "log_root", ",", "\"log_\"", "+", "date", ")", "\n", "self", ".", "checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "\"checkpoints\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "log_dir", ")", "\n", "# write hparams", "\n", "", "hparams", ".", "dump", "(", "self", ".", "log_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "checkpoints_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "checkpoints_dir", ")", "\n", "", "self", ".", "checkpoint_every", "=", "hparams", ".", "Train", ".", "checkpoint_every", "\n", "self", ".", "max_checkpoints", "=", "hparams", ".", "Train", ".", "max_checkpoints", "\n", "\n", "self", ".", "loaded_step", "=", "loaded_step", "\n", "self", ".", "env", "=", "env", "[", "'train'", "]", "\n", "self", ".", "env_valid", "=", "env", "[", "'valid'", "]", "\n", "self", ".", "generator", "=", "model", "[", "'gen'", "]", "\n", "self", ".", "discriminator", "=", "model", "[", "'disc'", "]", "\n", "self", ".", "bbox_annos", "=", "dataset", "[", "'bbox_annos'", "]", "\n", "self", ".", "human_mean_cdf", "=", "dataset", "[", "'human_mean_cdf'", "]", "\n", "self", ".", "device", "=", "device", "\n", "\n", "# image dataloader", "\n", "self", ".", "batch_size", "=", "hparams", ".", "Train", ".", "batch_size", "\n", "self", ".", "train_img_loader", "=", "DataLoader", "(", "dataset", "[", "'img_train'", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "16", ")", "\n", "self", ".", "valid_img_loader", "=", "DataLoader", "(", "dataset", "[", "'img_valid'", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "16", ")", "\n", "\n", "# human gaze dataloader", "\n", "self", ".", "train_HG_loader", "=", "DataLoader", "(", "dataset", "[", "'gaze_train'", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "16", ")", "\n", "\n", "# training parameters", "\n", "self", ".", "gamma", "=", "hparams", ".", "Train", ".", "gamma", "\n", "self", ".", "adv_est", "=", "hparams", ".", "Train", ".", "adv_est", "\n", "self", ".", "tau", "=", "hparams", ".", "Train", ".", "tau", "\n", "self", ".", "max_traj_len", "=", "hparams", ".", "Data", ".", "max_traj_length", "\n", "self", ".", "n_epoches", "=", "hparams", ".", "Train", ".", "num_epoch", "\n", "self", ".", "n_steps", "=", "hparams", ".", "Train", ".", "num_step", "\n", "self", ".", "n_critic", "=", "hparams", ".", "Train", ".", "num_critic", "\n", "self", ".", "patch_num", "=", "hparams", ".", "Data", ".", "patch_num", "\n", "self", ".", "im_w", "=", "hparams", ".", "Data", ".", "im_w", "\n", "self", ".", "im_h", "=", "hparams", ".", "Data", ".", "im_h", "\n", "self", ".", "eval_every", "=", "hparams", ".", "Train", ".", "evaluate_every", "\n", "self", ".", "ppo", "=", "PPO", "(", "self", ".", "generator", ",", "hparams", ".", "PPO", ".", "lr", ",", "\n", "hparams", ".", "Train", ".", "adam_betas", ",", "hparams", ".", "PPO", ".", "clip_param", ",", "\n", "hparams", ".", "PPO", ".", "num_epoch", ",", "hparams", ".", "PPO", ".", "batch_size", ",", "\n", "hparams", ".", "PPO", ".", "value_coef", ",", "hparams", ".", "PPO", ".", "entropy_coef", ")", "\n", "self", ".", "gail", "=", "GAIL", "(", "self", ".", "discriminator", ",", "\n", "hparams", ".", "Train", ".", "gail_milestones", ",", "\n", "None", ",", "\n", "device", ",", "\n", "lr", "=", "hparams", ".", "Train", ".", "gail_lr", ",", "\n", "betas", "=", "hparams", ".", "Train", ".", "adam_betas", ")", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "self", ".", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.trainer.Trainer.train": [[82, 215], ["trainer.Trainer.generator.train", "trainer.Trainer.discriminator.train", "range", "trainer.Trainer.writer.close", "enumerate", "print", "trainer.Trainer.env.set_data", "range", "numpy.sum", "print", "print", "data.FakeDataRollout", "trainer.Trainer.gail.update", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "print", "list", "print", "range", "utils.actions2scanpaths", "utils.cutFixOnTarget", "utils.compute_search_cdf", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "numpy.sum", "trainer.Trainer.writer.add_scalar", "print", "utils.process_trajs", "trainer.Trainer.writer.add_scalar", "print", "data.RolloutStorage", "trainer.Trainer.ppo.update", "trainer.Trainer.writer.add_scalar", "print", "utils.save", "utils.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.env.reset", "utils.collect_trajs", "trajs_all.extend", "map", "numpy.abs", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "trainer.Trainer.env_valid.set_data", "len", "[].unsqueeze", "torch.logsigmoid", "torch.logsigmoid", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.env_valid.reset", "utils.collect_trajs", "all_actions.extend", "trainer.Trainer.discriminator", "range"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.trainer.Trainer.train", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.trainer.Trainer.train", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.set_data", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.ppo.PPO.update", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.actions2scanpaths", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.cutFixOnTarget", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.compute_search_cdf", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.process_trajs", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.ppo.PPO.update", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.save", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.save", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.reset", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.collect_trajs", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.set_data", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.reset", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.collect_trajs"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "generator", ".", "train", "(", ")", "\n", "self", ".", "discriminator", ".", "train", "(", ")", "\n", "self", ".", "global_step", "=", "self", ".", "loaded_step", "\n", "for", "i_epoch", "in", "range", "(", "self", ".", "n_epoches", ")", ":", "\n", "            ", "for", "i_batch", ",", "batch", "in", "enumerate", "(", "self", ".", "train_img_loader", ")", ":", "\n", "# run policy to collect trajactories", "\n", "                ", "print", "(", "\n", "\"generating state-action pairs to train discriminator...\"", ")", "\n", "trajs_all", "=", "[", "]", "\n", "self", ".", "env", ".", "set_data", "(", "batch", ")", "\n", "return_train", "=", "0.0", "\n", "for", "i_step", "in", "range", "(", "self", ".", "n_steps", ")", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "trajs", "=", "utils", ".", "collect_trajs", "(", "self", ".", "env", ",", "self", ".", "generator", ",", "\n", "self", ".", "patch_num", ",", "\n", "self", ".", "max_traj_len", ")", "\n", "trajs_all", ".", "extend", "(", "trajs", ")", "\n", "", "", "smp_num", "=", "np", ".", "sum", "(", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "'length'", "]", ",", "trajs_all", ")", ")", ")", "\n", "print", "(", "\"[{} {}] Collected {} state-action pairs\"", ".", "format", "(", "\n", "i_epoch", ",", "i_batch", ",", "smp_num", ")", ")", "\n", "\n", "# train discriminator (reward and value function)", "\n", "print", "(", "\"updating discriminator (step={})...\"", ".", "format", "(", "\n", "self", ".", "gail", ".", "update_counter", ")", ")", "\n", "\n", "fake_data", "=", "FakeDataRollout", "(", "trajs_all", ",", "self", ".", "batch_size", ")", "\n", "D_loss", ",", "D_real", ",", "D_fake", "=", "self", ".", "gail", ".", "update", "(", "\n", "self", ".", "train_HG_loader", ",", "fake_data", ")", "\n", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"discriminator/fake_loss\"", ",", "D_fake", ",", "\n", "self", ".", "global_step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"discriminator/real_loss\"", ",", "D_real", ",", "\n", "self", ".", "global_step", ")", "\n", "print", "(", "\"Done updating discriminator!\"", ")", "\n", "\n", "# evaluate generator/policy", "\n", "if", "self", ".", "global_step", ">", "0", "and", "self", ".", "global_step", "%", "self", ".", "eval_every", "==", "0", ":", "\n", "                    ", "print", "(", "\"evaluating policy...\"", ")", "\n", "\n", "# generating scanpaths", "\n", "all_actions", "=", "[", "]", "\n", "for", "i_sample", "in", "range", "(", "10", ")", ":", "\n", "                        ", "for", "batch", "in", "self", ".", "valid_img_loader", ":", "\n", "                            ", "self", ".", "env_valid", ".", "set_data", "(", "batch", ")", "\n", "img_names_batch", "=", "batch", "[", "'img_name'", "]", "\n", "cat_names_batch", "=", "batch", "[", "'cat_name'", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                                ", "self", ".", "env_valid", ".", "reset", "(", ")", "\n", "trajs", "=", "utils", ".", "collect_trajs", "(", "self", ".", "env_valid", ",", "\n", "self", ".", "generator", ",", "\n", "self", ".", "patch_num", ",", "\n", "self", ".", "max_traj_len", ",", "\n", "is_eval", "=", "True", ",", "\n", "sample_action", "=", "True", ")", "\n", "all_actions", ".", "extend", "(", "[", "\n", "(", "cat_names_batch", "[", "i", "]", ",", "img_names_batch", "[", "i", "]", ",", "\n", "'present'", ",", "trajs", "[", "'actions'", "]", "[", ":", ",", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "env_valid", ".", "batch_size", ")", "\n", "]", ")", "\n", "", "", "", "scanpaths", "=", "utils", ".", "actions2scanpaths", "(", "\n", "all_actions", ",", "self", ".", "patch_num", ",", "self", ".", "im_w", ",", "self", ".", "im_h", ")", "\n", "utils", ".", "cutFixOnTarget", "(", "scanpaths", ",", "self", ".", "bbox_annos", ")", "\n", "\n", "# search effiency", "\n", "mean_cdf", ",", "_", "=", "utils", ".", "compute_search_cdf", "(", "\n", "scanpaths", ",", "self", ".", "bbox_annos", ",", "self", ".", "max_traj_len", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'evaluation/TFP_step1'", ",", "mean_cdf", "[", "1", "]", ",", "\n", "self", ".", "global_step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'evaluation/TFP_step3'", ",", "mean_cdf", "[", "3", "]", ",", "\n", "self", ".", "global_step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'evaluation/TFP_step6'", ",", "mean_cdf", "[", "6", "]", ",", "\n", "self", ".", "global_step", ")", "\n", "\n", "# probability mismatch", "\n", "sad", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "self", ".", "human_mean_cdf", "-", "mean_cdf", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'evaluation/prob_mismatch'", ",", "sad", ",", "\n", "self", ".", "global_step", ")", "\n", "\n", "# update generator/policy on every n_critic iter", "\n", "", "if", "i_batch", "%", "self", ".", "n_critic", "==", "0", ":", "\n", "                    ", "print", "(", "\"updating policy...\"", ")", "\n", "# update reward and value", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "for", "i", "in", "range", "(", "len", "(", "trajs_all", ")", ")", ":", "\n", "                            ", "states", "=", "trajs_all", "[", "i", "]", "[", "\"curr_states\"", "]", "\n", "actions", "=", "trajs_all", "[", "i", "]", "[", "\"actions\"", "]", ".", "unsqueeze", "(", "1", ")", "\n", "tids", "=", "trajs_all", "[", "i", "]", "[", "'task_id'", "]", "\n", "rewards", "=", "F", ".", "logsigmoid", "(", "\n", "self", ".", "discriminator", "(", "states", ",", "actions", ",", "tids", ")", ")", "\n", "trajs_all", "[", "i", "]", "[", "\"rewards\"", "]", "=", "rewards", "\n", "\n", "", "", "return_train", "=", "utils", ".", "process_trajs", "(", "trajs_all", ",", "\n", "self", ".", "gamma", ",", "\n", "mtd", "=", "self", ".", "adv_est", ",", "\n", "tau", "=", "self", ".", "tau", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"generator/ppo_return\"", ",", "\n", "return_train", ",", "self", ".", "global_step", ")", "\n", "print", "(", "'average return = {:.3f}'", ".", "format", "(", "return_train", ")", ")", "\n", "\n", "# update policy", "\n", "rollouts", "=", "RolloutStorage", "(", "trajs_all", ",", "\n", "shuffle", "=", "True", ",", "\n", "norm_adv", "=", "True", ")", "\n", "loss", "=", "self", ".", "ppo", ".", "update", "(", "rollouts", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"generator/ppo_loss\"", ",", "loss", ",", "\n", "self", ".", "global_step", ")", "\n", "\n", "print", "(", "\"Done updating policy\"", ")", "\n", "\n", "# checkpoints", "\n", "", "if", "self", ".", "global_step", "%", "self", ".", "checkpoint_every", "==", "0", "and", "self", ".", "global_step", ">", "0", ":", "\n", "                    ", "utils", ".", "save", "(", "global_step", "=", "self", ".", "global_step", ",", "\n", "model", "=", "self", ".", "generator", ",", "\n", "optim", "=", "self", ".", "ppo", ".", "optimizer", ",", "\n", "name", "=", "'generator'", ",", "\n", "pkg_dir", "=", "self", ".", "checkpoints_dir", ",", "\n", "is_best", "=", "True", ",", "\n", "max_checkpoints", "=", "self", ".", "max_checkpoints", ")", "\n", "utils", ".", "save", "(", "global_step", "=", "self", ".", "global_step", ",", "\n", "model", "=", "self", ".", "discriminator", ",", "\n", "optim", "=", "self", ".", "gail", ".", "optimizer", ",", "\n", "name", "=", "'discriminator'", ",", "\n", "pkg_dir", "=", "self", ".", "checkpoints_dir", ",", "\n", "is_best", "=", "True", ",", "\n", "max_checkpoints", "=", "self", ".", "max_checkpoints", ")", "\n", "\n", "", "self", ".", "global_step", "+=", "1", "\n", "\n", "", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.RolloutStorage_New.__init__": [[13, 28], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().view", "torch.stack", "print", "data.RolloutStorage_New.advs.view", "data.RolloutStorage_New.obs_fovs.size", "torch.stack.size", "torch.stack.std", "torch.cat", "torch.stack.mean"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "trajs_all", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "obs_fovs", "=", "torch", ".", "cat", "(", "[", "traj", "[", "'state'", "]", "for", "traj", "in", "trajs_all", "]", ")", "\n", "self", ".", "actions", "=", "torch", ".", "cat", "(", "[", "traj", "[", "'action'", "]", "for", "traj", "in", "trajs_all", "]", ")", "\n", "self", ".", "tids", "=", "torch", ".", "cat", "(", "[", "traj", "[", "'task_id'", "]", "for", "traj", "in", "trajs_all", "]", ")", "\n", "self", ".", "lprobs", "=", "torch", ".", "cat", "(", "[", "traj", "[", "'log_prob'", "]", "for", "traj", "in", "trajs_all", "]", ")", "\n", "self", ".", "returns", "=", "torch", ".", "cat", "(", "[", "traj", "[", "'return'", "]", "\n", "for", "traj", "in", "trajs_all", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "advs", "=", "torch", ".", "stack", "(", "[", "traj", "[", "'advantage'", "]", "for", "traj", "in", "trajs_all", "]", ")", "\n", "print", "(", "advs", ".", "size", "(", ")", ")", "\n", "self", ".", "advs", "=", "(", "advs", "-", "\n", "advs", ".", "mean", "(", ")", ")", "/", "advs", ".", "std", "(", ")", "# normalize for stability", "\n", "self", ".", "advs", "=", "self", ".", "advs", ".", "view", "(", "-", "1", ")", "\n", "\n", "self", ".", "sample_num", "=", "self", ".", "obs_fovs", ".", "size", "(", "0", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.RolloutStorage_New.get_generator": [[29, 44], ["range", "torch.randperm", "torch.arange"], "methods", ["None"], ["", "def", "get_generator", "(", "self", ",", "minibatch_size", ")", ":", "\n", "        ", "perm", "=", "torch", ".", "randperm", "(", "\n", "self", ".", "sample_num", ")", "if", "self", ".", "shuffle", "else", "torch", ".", "arange", "(", "self", ".", "sample_num", ")", "\n", "for", "start_ind", "in", "range", "(", "0", ",", "self", ".", "sample_num", ",", "minibatch_size", ")", ":", "\n", "            ", "ind", "=", "perm", "[", "start_ind", ":", "start_ind", "+", "minibatch_size", "]", "\n", "obs_fov_batch", "=", "self", ".", "obs_fovs", "[", "ind", "]", "\n", "actions_batch", "=", "self", ".", "actions", "[", "ind", "]", "\n", "tids_batch", "=", "self", ".", "tids", "[", "ind", "]", "\n", "return_batch", "=", "self", ".", "returns", "[", "ind", "]", "\n", "log_probs_batch", "=", "self", ".", "lprobs", "[", "ind", "]", "\n", "advantage_batch", "=", "self", ".", "advs", "[", "ind", "]", "\n", "\n", "yield", "(", "\n", "obs_fov_batch", ",", "tids_batch", "\n", ")", ",", "actions_batch", ",", "return_batch", ",", "log_probs_batch", ",", "advantage_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.LHF_IRL.__init__": [[51, 60], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "DCB_HR_dir", ",", "DCB_LR_dir", ",", "initial_fix", ",", "img_info", ",", "annos", ",", "\n", "pa", ",", "catIds", ")", ":", "\n", "        ", "self", ".", "img_info", "=", "img_info", "\n", "self", ".", "annos", "=", "annos", "\n", "self", ".", "pa", "=", "pa", "\n", "self", ".", "initial_fix", "=", "initial_fix", "\n", "self", ".", "catIds", "=", "catIds", "\n", "self", ".", "LR_dir", "=", "DCB_LR_dir", "\n", "self", ".", "HR_dir", "=", "DCB_HR_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.LHF_IRL.__len__": [[61, 63], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.LHF_IRL.__getitem__": [[64, 110], ["data.LHF_IRL.img_info[].split", "os.path.join", "os.path.join", "torch.load", "torch.load", "utils.foveal2mask", "torch.from_numpy", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.zeros", "torch.zeros", "utils.multi_hot_coding", "torch.from_numpy().view", "cat_name.replace", "cat_name.replace", "torch.load.size", "torch.load.size", "torch.load.size", "int", "int", "torch.FloatTensor", "torch.load.size", "torch.load.size", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.load.size", "torch.load.size", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.load", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.load", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.foveal2mask", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.multi_hot_coding"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "cat_name", ",", "img_name", "=", "self", ".", "img_info", "[", "idx", "]", ".", "split", "(", "'_'", ")", "\n", "feat_name", "=", "img_name", "[", ":", "-", "3", "]", "+", "'pth.tar'", "\n", "lr_path", "=", "join", "(", "self", ".", "LR_dir", ",", "cat_name", ".", "replace", "(", "' '", ",", "'_'", ")", ",", "feat_name", ")", "\n", "hr_path", "=", "join", "(", "self", ".", "HR_dir", ",", "cat_name", ".", "replace", "(", "' '", ",", "'_'", ")", ",", "feat_name", ")", "\n", "lr", "=", "torch", ".", "load", "(", "lr_path", ")", "\n", "hr", "=", "torch", ".", "load", "(", "hr_path", ")", "\n", "imgId", "=", "cat_name", "+", "'_'", "+", "img_name", "\n", "\n", "# update state with initial fixation", "\n", "init_fix", "=", "self", ".", "initial_fix", "[", "imgId", "]", "\n", "px", ",", "py", "=", "init_fix", "\n", "px", ",", "py", "=", "px", "*", "lr", ".", "size", "(", "-", "1", ")", ",", "py", "*", "lr", ".", "size", "(", "-", "2", ")", "\n", "mask", "=", "utils", ".", "foveal2mask", "(", "px", ",", "py", ",", "self", ".", "pa", ".", "fovea_radius", ",", "hr", ".", "size", "(", "-", "2", ")", ",", "\n", "hr", ".", "size", "(", "-", "1", ")", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "hr", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "lr", "=", "(", "1", "-", "mask", ")", "*", "lr", "+", "mask", "*", "hr", "\n", "\n", "# history fixation map", "\n", "history_map", "=", "torch", ".", "zeros", "(", "(", "hr", ".", "size", "(", "-", "2", ")", ",", "hr", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "history_map", "=", "(", "1", "-", "mask", "[", "0", "]", ")", "*", "history_map", "+", "mask", "[", "0", "]", "*", "1", "\n", "\n", "# action mask", "\n", "action_mask", "=", "torch", ".", "zeros", "(", "(", "self", ".", "pa", ".", "patch_num", "[", "1", "]", ",", "self", ".", "pa", ".", "patch_num", "[", "0", "]", ")", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", "\n", "px", ",", "py", "=", "init_fix", "\n", "px", ",", "py", "=", "int", "(", "px", "*", "self", ".", "pa", ".", "patch_num", "[", "0", "]", ")", ",", "int", "(", "py", "*", "self", ".", "pa", ".", "patch_num", "[", "1", "]", ")", "\n", "action_mask", "[", "py", "-", "self", ".", "pa", ".", "IOR_size", ":", "py", "+", "self", ".", "pa", ".", "IOR_size", "+", "1", ",", "px", "-", "\n", "self", ".", "pa", ".", "IOR_size", ":", "px", "+", "self", ".", "pa", ".", "IOR_size", "+", "1", "]", "=", "1", "\n", "\n", "# target location label", "\n", "coding", "=", "utils", ".", "multi_hot_coding", "(", "self", ".", "annos", "[", "imgId", "]", ",", "self", ".", "pa", ".", "patch_size", ",", "\n", "self", ".", "pa", ".", "patch_num", ")", "\n", "coding", "=", "torch", ".", "from_numpy", "(", "coding", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "return", "{", "\n", "'task_id'", ":", "self", ".", "catIds", "[", "cat_name", "]", ",", "\n", "'img_name'", ":", "img_name", ",", "\n", "'cat_name'", ":", "cat_name", ",", "\n", "'lr_feats'", ":", "lr", ",", "\n", "'hr_feats'", ":", "hr", ",", "\n", "'history_map'", ":", "history_map", ",", "\n", "'init_fix'", ":", "torch", ".", "FloatTensor", "(", "init_fix", ")", ",", "\n", "'label_coding'", ":", "coding", ",", "\n", "'action_mask'", ":", "action_mask", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.LHF_Human_Gaze.__init__": [[118, 133], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "DCB_HR_dir", ",", "\n", "DCB_LR_dir", ",", "\n", "fix_labels", ",", "\n", "annos", ",", "\n", "pa", ",", "\n", "catIds", ",", "\n", "blur_action", "=", "False", ")", ":", "\n", "        ", "self", ".", "pa", "=", "pa", "\n", "self", ".", "fix_labels", "=", "fix_labels", "\n", "self", ".", "annos", "=", "annos", "\n", "self", ".", "catIds", "=", "catIds", "\n", "self", ".", "LR_dir", "=", "DCB_LR_dir", "\n", "self", ".", "HR_dir", "=", "DCB_HR_dir", "\n", "self", ".", "blur_action", "=", "blur_action", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.LHF_Human_Gaze.__len__": [[134, 136], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "fix_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.LHF_Human_Gaze.__getitem__": [[137, 183], ["os.path.join", "os.path.join", "torch.load", "torch.load", "torch.zeros", "range", "utils.multi_hot_coding", "torch.from_numpy().view", "cat_name.replace", "cat_name.replace", "float", "len", "utils.foveal2mask", "torch.from_numpy", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.tensor", "numpy.zeros", "scipy.gaussian_filter.reshape", "scipy.gaussian_filter", "torch.load.size", "torch.load.size", "torch.load.size", "torch.load.size", "torch.load.size", "torch.load.size", "torch.from_numpy", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.from_numpy().view.sum"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.load", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.load", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.multi_hot_coding", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.foveal2mask"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# load low- and high-res beliefs", "\n", "        ", "img_name", ",", "cat_name", ",", "fixs", ",", "action", "=", "self", ".", "fix_labels", "[", "idx", "]", "\n", "feat_name", "=", "img_name", "[", ":", "-", "3", "]", "+", "'pth.tar'", "\n", "lr_path", "=", "join", "(", "self", ".", "LR_dir", ",", "cat_name", ".", "replace", "(", "' '", ",", "'_'", ")", ",", "feat_name", ")", "\n", "hr_path", "=", "join", "(", "self", ".", "HR_dir", ",", "cat_name", ".", "replace", "(", "' '", ",", "'_'", ")", ",", "feat_name", ")", "\n", "state", "=", "torch", ".", "load", "(", "lr_path", ")", "\n", "hr", "=", "torch", ".", "load", "(", "hr_path", ")", "\n", "\n", "# construct DCB", "\n", "remap_ratio", "=", "self", ".", "pa", ".", "im_w", "/", "float", "(", "hr", ".", "size", "(", "-", "1", ")", ")", "\n", "history_map", "=", "torch", ".", "zeros", "(", "(", "hr", ".", "size", "(", "-", "2", ")", ",", "hr", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "fixs", ")", ")", ":", "\n", "            ", "px", ",", "py", "=", "fixs", "[", "i", "]", "\n", "px", ",", "py", "=", "px", "/", "remap_ratio", ",", "py", "/", "remap_ratio", "\n", "mask", "=", "utils", ".", "foveal2mask", "(", "px", ",", "py", ",", "self", ".", "pa", ".", "fovea_radius", ",", "hr", ".", "size", "(", "-", "2", ")", ",", "\n", "hr", ".", "size", "(", "-", "1", ")", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "hr", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "state", "=", "(", "1", "-", "mask", ")", "*", "state", "+", "mask", "*", "hr", "\n", "history_map", "=", "(", "1", "-", "mask", "[", "0", "]", ")", "*", "history_map", "+", "mask", "[", "0", "]", "*", "1", "\n", "\n", "# create labels", "\n", "", "imgId", "=", "cat_name", "+", "'_'", "+", "img_name", "\n", "coding", "=", "utils", ".", "multi_hot_coding", "(", "self", ".", "annos", "[", "imgId", "]", ",", "self", ".", "pa", ".", "patch_size", ",", "\n", "self", ".", "pa", ".", "patch_num", ")", "\n", "coding", "=", "torch", ".", "from_numpy", "(", "coding", "/", "coding", ".", "sum", "(", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "ret", "=", "{", "\n", "\"task_id\"", ":", "self", ".", "catIds", "[", "cat_name", "]", ",", "\n", "\"true_state\"", ":", "state", ",", "\n", "\"true_action\"", ":", "torch", ".", "tensor", "(", "[", "action", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "'label_coding'", ":", "coding", ",", "\n", "'history_map'", ":", "history_map", ",", "\n", "'img_name'", ":", "img_name", ",", "\n", "'task_name'", ":", "cat_name", "\n", "}", "\n", "\n", "# blur action maps for evaluation", "\n", "if", "self", ".", "blur_action", ":", "\n", "            ", "action_map", "=", "np", ".", "zeros", "(", "self", ".", "pa", ".", "patch_count", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "action_map", "[", "action", "]", "=", "1", "\n", "action_map", "=", "action_map", ".", "reshape", "(", "self", ".", "pa", ".", "patch_num", "[", "1", "]", ",", "-", "1", ")", "\n", "action_map", "=", "filters", ".", "gaussian_filter", "(", "action_map", ",", "sigma", "=", "1", ")", "\n", "ret", "[", "'action_map'", "]", "=", "action_map", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.RolloutStorage.__init__": [[186, 201], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().view", "torch.cat().view", "data.RolloutStorage.obs_fovs.size", "torch.cat", "torch.cat", "data.RolloutStorage.advs.mean", "data.RolloutStorage.advs.std"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "trajs_all", ",", "shuffle", "=", "True", ",", "norm_adv", "=", "False", ")", ":", "\n", "        ", "self", ".", "obs_fovs", "=", "torch", ".", "cat", "(", "[", "traj", "[", "\"curr_states\"", "]", "for", "traj", "in", "trajs_all", "]", ")", "\n", "self", ".", "actions", "=", "torch", ".", "cat", "(", "[", "traj", "[", "\"actions\"", "]", "for", "traj", "in", "trajs_all", "]", ")", "\n", "self", ".", "lprobs", "=", "torch", ".", "cat", "(", "[", "traj", "[", "'log_probs'", "]", "for", "traj", "in", "trajs_all", "]", ")", "\n", "self", ".", "tids", "=", "torch", ".", "cat", "(", "[", "traj", "[", "'task_id'", "]", "for", "traj", "in", "trajs_all", "]", ")", "\n", "self", ".", "returns", "=", "torch", ".", "cat", "(", "[", "traj", "[", "'acc_rewards'", "]", "\n", "for", "traj", "in", "trajs_all", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "self", ".", "advs", "=", "torch", ".", "cat", "(", "[", "traj", "[", "'advantages'", "]", "\n", "for", "traj", "in", "trajs_all", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "norm_adv", ":", "\n", "            ", "self", ".", "advs", "=", "(", "self", ".", "advs", "-", "self", ".", "advs", ".", "mean", "(", ")", ")", "/", "(", "self", ".", "advs", ".", "std", "(", ")", "+", "\n", "1e-8", ")", "\n", "\n", "", "self", ".", "sample_num", "=", "self", ".", "obs_fovs", ".", "size", "(", "0", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.RolloutStorage.get_generator": [[202, 218], ["min", "torch.utils.data.sampler.BatchSampler", "torch.utils.data.sampler.SubsetRandomSampler", "range"], "methods", ["None"], ["", "def", "get_generator", "(", "self", ",", "minibatch_size", ")", ":", "\n", "        ", "minibatch_size", "=", "min", "(", "self", ".", "sample_num", ",", "minibatch_size", ")", "\n", "sampler", "=", "BatchSampler", "(", "SubsetRandomSampler", "(", "range", "(", "self", ".", "sample_num", ")", ")", ",", "\n", "minibatch_size", ",", "\n", "drop_last", "=", "True", ")", "\n", "for", "ind", "in", "sampler", ":", "\n", "            ", "obs_fov_batch", "=", "self", ".", "obs_fovs", "[", "ind", "]", "\n", "actions_batch", "=", "self", ".", "actions", "[", "ind", "]", "\n", "tids_batch", "=", "self", ".", "tids", "[", "ind", "]", "\n", "return_batch", "=", "self", ".", "returns", "[", "ind", "]", "\n", "log_probs_batch", "=", "self", ".", "lprobs", "[", "ind", "]", "\n", "advantage_batch", "=", "self", ".", "advs", "[", "ind", "]", "\n", "\n", "yield", "(", "\n", "obs_fov_batch", ",", "tids_batch", "\n", ")", ",", "actions_batch", ",", "return_batch", ",", "log_probs_batch", ",", "advantage_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.FakeDataRollout.__init__": [[221, 234], ["torch.cat", "torch.cat().unsqueeze", "torch.cat", "torch.exp().unsqueeze", "data.FakeDataRollout.GS.size", "min", "torch.cat", "torch.exp", "torch.cat"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "trajs_all", ",", "minibatch_size", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "GS", "=", "torch", ".", "cat", "(", "[", "traj", "[", "'curr_states'", "]", "for", "traj", "in", "trajs_all", "]", ")", "\n", "self", ".", "GA", "=", "torch", ".", "cat", "(", "[", "traj", "[", "'actions'", "]", "\n", "for", "traj", "in", "trajs_all", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "self", ".", "tids", "=", "torch", ".", "cat", "(", "[", "traj", "[", "'task_id'", "]", "for", "traj", "in", "trajs_all", "]", ")", "\n", "self", ".", "GP", "=", "torch", ".", "exp", "(", "\n", "torch", ".", "cat", "(", "[", "traj", "[", "\"log_probs\"", "]", "for", "traj", "in", "trajs_all", "]", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# self.GIOR = torch.cat([traj[\"IORs\"]", "\n", "#                        for traj in trajs_all]).unsqueeze(1)", "\n", "\n", "self", ".", "sample_num", "=", "self", ".", "GS", ".", "size", "(", "0", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "batch_size", "=", "min", "(", "minibatch_size", ",", "self", ".", "sample_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.FakeDataRollout.__len__": [[235, 237], ["int"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "sample_num", "//", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.FakeDataRollout.get_generator": [[238, 250], ["torch.utils.data.sampler.BatchSampler", "torch.utils.data.sampler.SubsetRandomSampler", "range"], "methods", ["None"], ["", "def", "get_generator", "(", "self", ")", ":", "\n", "        ", "sampler", "=", "BatchSampler", "(", "SubsetRandomSampler", "(", "range", "(", "self", ".", "sample_num", ")", ")", ",", "\n", "self", ".", "batch_size", ",", "\n", "drop_last", "=", "True", ")", "\n", "for", "ind", "in", "sampler", ":", "\n", "            ", "GS_batch", "=", "self", ".", "GS", "[", "ind", "]", "\n", "tid_batch", "=", "self", ".", "tids", "[", "ind", "]", "\n", "GA_batch", "=", "self", ".", "GA", "[", "ind", "]", "\n", "GP_batch", "=", "self", ".", "GP", "[", "ind", "]", "\n", "# GIOR_batch = self.GIOR[ind]", "\n", "\n", "yield", "GS_batch", ",", "GA_batch", ",", "GP_batch", ",", "tid_batch", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.builder.build": [[7, 52], ["torch.eye().to", "models.LHF_Discriminator_Cond().to", "models.LHF_Policy_Cond_Small().to", "environment.IRL_Env4LHF", "environment.IRL_Env4LHF", "utils.load", "utils.load", "torch.eye", "models.LHF_Discriminator_Cond", "models.LHF_Policy_Cond_Small", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.load", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.load"], ["def", "build", "(", "hparams", ",", "is_training", ",", "device", ",", "catIds", ",", "load_path", "=", "None", ")", ":", "\n", "\n", "# build model", "\n", "    ", "input_size", "=", "134", "# number of belief maps", "\n", "task_eye", "=", "torch", ".", "eye", "(", "len", "(", "catIds", ")", ")", ".", "to", "(", "device", ")", "\n", "discriminator", "=", "LHF_Discriminator_Cond", "(", "\n", "hparams", ".", "Data", ".", "patch_count", ",", "len", "(", "catIds", ")", ",", "task_eye", ",", "\n", "input_size", ")", ".", "to", "(", "device", ")", "\n", "generator", "=", "LHF_Policy_Cond_Small", "(", "hparams", ".", "Data", ".", "patch_count", ",", "\n", "len", "(", "catIds", ")", ",", "task_eye", ",", "\n", "input_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "load_path", ":", "\n", "        ", "load", "(", "'best'", ",", "generator", ",", "'generator'", ",", "pkg_dir", "=", "load_path", ")", "\n", "global_step", "=", "load", "(", "'best'", ",", "\n", "discriminator", ",", "\n", "'discriminator'", ",", "\n", "pkg_dir", "=", "load_path", ")", "\n", "", "else", ":", "\n", "        ", "global_step", "=", "0", "\n", "\n", "# build IRL environment", "\n", "", "env_train", "=", "IRL_Env4LHF", "(", "hparams", ".", "Data", ",", "\n", "max_step", "=", "hparams", ".", "Data", ".", "max_traj_length", ",", "\n", "mask_size", "=", "hparams", ".", "Data", ".", "IOR_size", ",", "\n", "status_update_mtd", "=", "hparams", ".", "Train", ".", "stop_criteria", ",", "\n", "device", "=", "device", ",", "\n", "inhibit_return", "=", "True", ")", "\n", "env_valid", "=", "IRL_Env4LHF", "(", "hparams", ".", "Data", ",", "\n", "max_step", "=", "hparams", ".", "Data", ".", "max_traj_length", ",", "\n", "mask_size", "=", "hparams", ".", "Data", ".", "IOR_size", ",", "\n", "status_update_mtd", "=", "hparams", ".", "Train", ".", "stop_criteria", ",", "\n", "device", "=", "device", ",", "\n", "inhibit_return", "=", "True", ")", "\n", "\n", "return", "{", "\n", "'env'", ":", "{", "\n", "'train'", ":", "env_train", ",", "\n", "'valid'", ":", "env_valid", "\n", "}", ",", "\n", "'model'", ":", "{", "\n", "'gen'", ":", "generator", ",", "\n", "'disc'", ":", "discriminator", "\n", "}", ",", "\n", "'loaded_step'", ":", "global_step", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.gail.GAIL.__init__": [[8, 19], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.MultiStepLR", "torch.lr_scheduler.MultiStepLR", "torch.lr_scheduler.MultiStepLR", "gail.GAIL.discriminator.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "discriminator", ",", "milestones", ",", "state_enc", ",", "device", ",", "lr", ",", "\n", "betas", ")", ":", "\n", "        ", "self", ".", "discriminator", "=", "discriminator", "\n", "self", ".", "state_enc", "=", "state_enc", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "discriminator", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr", ",", "\n", "betas", "=", "betas", ")", "\n", "self", ".", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "self", ".", "optimizer", ",", "milestones", "=", "milestones", ",", "gamma", "=", "0.1", ")", "\n", "self", ".", "update_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.gail.GAIL.compute_grad_pen": [[20, 71], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "gail.GAIL.discriminator.get_one_hot", "gail.GAIL.discriminator.get_one_hot", "expert_states.size", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "alpha.view.view.view", "alpha.view.view.view", "gail.GAIL.discriminator", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "expert_states.detach", "expert_act.detach", "expert_task.detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "alpha.view.view.expand_as", "expert_states.detach", "policy_states.detach", "alpha.view.view.expand_as", "expert_actions.detach", "policy_actions.detach", "alpha.view.view.expand_as", "expert_tids.detach", "policy_tids.detach", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.size", "alpha.view.view.expand_as", "alpha.view.view.expand_as", "alpha.view.view.expand_as", "grad.norm"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.get_one_hot", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.models.LHF_Policy_Cond_Small.get_one_hot"], ["", "def", "compute_grad_pen", "(", "self", ",", "\n", "expert_states", ",", "\n", "expert_act", ",", "\n", "expert_task", ",", "\n", "policy_states", ",", "\n", "policy_act", ",", "\n", "policy_task", ",", "\n", "type", "=", "'real'", ",", "\n", "lambda_", "=", "5", ")", ":", "\n", "\n", "        ", "if", "type", "==", "'mixed'", ":", "\n", "            ", "expert_actions", ",", "expert_tids", "=", "self", ".", "discriminator", ".", "get_one_hot", "(", "\n", "expert_act", ",", "expert_task", ")", "\n", "policy_actions", ",", "policy_tids", "=", "self", ".", "discriminator", ".", "get_one_hot", "(", "\n", "policy_act", ",", "policy_task", ")", "\n", "\n", "bs", "=", "expert_states", ".", "size", "(", "0", ")", "\n", "alpha", "=", "torch", ".", "rand", "(", "bs", ",", "1", ")", ".", "to", "(", "expert_states", ".", "device", ")", "\n", "\n", "alpha", "=", "alpha", ".", "view", "(", "bs", ",", "1", ",", "1", ",", "1", ")", "\n", "mixup_states", "=", "alpha", ".", "expand_as", "(", "\n", "expert_states", ")", "*", "expert_states", ".", "detach", "(", ")", "+", "(", "1", "-", "alpha", ".", "expand_as", "(", "\n", "expert_states", ")", ")", "*", "policy_states", ".", "detach", "(", ")", "\n", "alpha", "=", "alpha", ".", "view", "(", "bs", ",", "1", ")", "\n", "mixup_actions", "=", "alpha", ".", "expand_as", "(", "\n", "expert_actions", ")", "*", "expert_actions", ".", "detach", "(", ")", "+", "(", "\n", "1", "-", "\n", "alpha", ".", "expand_as", "(", "expert_actions", ")", ")", "*", "policy_actions", ".", "detach", "(", ")", "\n", "mixup_tids", "=", "alpha", ".", "expand_as", "(", "expert_tids", ")", "*", "expert_tids", ".", "detach", "(", "\n", ")", "+", "(", "1", "-", "alpha", ".", "expand_as", "(", "expert_tids", ")", ")", "*", "policy_tids", ".", "detach", "(", ")", "\n", "", "elif", "type", "==", "'real'", ":", "\n", "            ", "mixup_states", "=", "expert_states", ".", "detach", "(", ")", "\n", "mixup_actions", "=", "expert_act", ".", "detach", "(", ")", "\n", "mixup_tids", "=", "expert_task", ".", "detach", "(", ")", "\n", "\n", "", "mixup_states", ".", "requires_grad", "=", "True", "\n", "# mixup_actions.requires_grad = True", "\n", "# mixup_tids.requires_grad = True", "\n", "\n", "mixup_data", "=", "(", "mixup_states", ",", "mixup_actions", ",", "mixup_tids", ")", "\n", "disc", "=", "torch", ".", "sigmoid", "(", "self", ".", "discriminator", "(", "*", "mixup_data", ")", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "disc", ".", "size", "(", ")", ")", ".", "to", "(", "disc", ".", "device", ")", "\n", "grad", "=", "autograd", ".", "grad", "(", "outputs", "=", "disc", ",", "\n", "inputs", "=", "mixup_states", ",", "\n", "grad_outputs", "=", "ones", ",", "\n", "create_graph", "=", "True", ",", "\n", "retain_graph", "=", "True", ",", "\n", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "grad_pen", "=", "lambda_", "*", "(", "grad", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "return", "grad_pen", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.gail.GAIL.update": [[72, 154], ["range", "iter", "enumerate", "fake_data.get_generator", "next", "gail.GAIL.discriminator", "gail.GAIL.discriminator", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "gail.GAIL.compute_grad_pen", "gail.GAIL.optimizer.zero_grad", "gail.GAIL.optimizer.step", "gail.GAIL.lr_scheduler.step", "gail_loss.item", "gail.GAIL.item", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fake_S.size", "gail.GAIL.size", "int", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "gail_loss.item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "print", "true_batch[].to", "gail.GAIL.state_enc", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones().to.size", "torch.ones().to.size", "torch.ones().to.size", "true_batch[].to", "gail.GAIL.size", "gail.GAIL.size", "torch.ones().to.size", "torch.ones().to.size", "torch.ones().to.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.FakeDataRollout.get_generator", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.gail.GAIL.compute_grad_pen", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.step", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.step"], ["", "def", "update", "(", "self", ",", "\n", "true_data_loader", ",", "\n", "fake_data", ",", "\n", "iter_num", "=", "1", ",", "\n", "noisy_label_ratio", "=", "0", ")", ":", "\n", "        ", "running_loss", "=", "0.0", "\n", "print_every", "=", "fake_data", ".", "sample_num", "//", "(", "5", "*", "fake_data", ".", "batch_size", ")", "+", "1", "\n", "avg_loss", "=", "0.0", "\n", "D_real", ",", "D_fake", ",", "D_grad", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "fake_sample_num", "=", "0", "\n", "real_sample_num", "=", "0", "\n", "\n", "for", "i_iter", "in", "range", "(", "iter_num", ")", ":", "\n", "            ", "fake_data_generator", "=", "iter", "(", "fake_data", ".", "get_generator", "(", ")", ")", "\n", "for", "i_batch", ",", "true_batch", "in", "enumerate", "(", "true_data_loader", ")", ":", "\n", "                ", "if", "i_batch", "==", "len", "(", "fake_data", ")", ":", "\n", "                    ", "break", "\n", "", "fake_batch", "=", "next", "(", "fake_data_generator", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "if", "self", ".", "state_enc", "is", "None", ":", "\n", "                        ", "real_S", "=", "true_batch", "[", "'true_state'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                        ", "real_S", "=", "self", ".", "state_enc", "(", "true_batch", "[", "'true_state'", "]", ".", "to", "(", "\n", "self", ".", "device", ")", ")", "\n", "", "real_A", "=", "true_batch", "[", "'true_action'", "]", "\n", "real_tids", "=", "true_batch", "[", "'task_id'", "]", "\n", "\n", "", "fake_S", ",", "fake_A", ",", "fake_P", ",", "fake_tids", "=", "fake_batch", "\n", "fake_num", ",", "real_num", "=", "fake_S", ".", "size", "(", "0", ")", ",", "real_S", ".", "size", "(", "0", ")", "\n", "if", "fake_num", "==", "0", "or", "real_num", "==", "0", ":", "\n", "                    ", "break", "\n", "\n", "", "x_real", "=", "(", "real_S", ",", "real_A", ",", "real_tids", ")", "\n", "x_fake", "=", "(", "fake_S", ",", "fake_A", ",", "fake_tids", ")", "\n", "\n", "real_outputs", "=", "self", ".", "discriminator", "(", "*", "x_real", ")", "\n", "fake_outputs", "=", "self", ".", "discriminator", "(", "*", "x_fake", ")", "\n", "\n", "real_labels", "=", "torch", ".", "ones", "(", "real_outputs", ".", "size", "(", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "fake_labels", "=", "torch", ".", "zeros", "(", "fake_outputs", ".", "size", "(", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# randomly flip labels of training data in order to", "\n", "# increase training stability", "\n", "if", "noisy_label_ratio", ">", "0", ":", "\n", "                    ", "flip_num", "=", "int", "(", "real_labels", ".", "size", "(", "0", ")", "*", "noisy_label_ratio", ")", "\n", "ind", "=", "torch", ".", "randint", "(", "real_labels", ".", "size", "(", "0", ")", ",", "(", "flip_num", ",", ")", ")", "\n", "real_labels", "[", "ind", "]", "=", "0", "\n", "fake_labels", "[", "ind", "]", "=", "1", "\n", "", "expert_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "real_outputs", ",", "real_labels", ")", "\n", "policy_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "fake_outputs", ",", "fake_labels", ")", "\n", "\n", "gail_loss", "=", "expert_loss", "+", "policy_loss", "\n", "grad_pen", "=", "self", ".", "compute_grad_pen", "(", "*", "x_real", ",", "*", "x_fake", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "(", "gail_loss", "+", "grad_pen", ")", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "if", "i_iter", "==", "iter_num", "-", "1", ":", "\n", "                    ", "avg_loss", "+=", "gail_loss", ".", "item", "(", ")", "\n", "real_sample_num", "+=", "real_num", "\n", "fake_sample_num", "+=", "fake_num", "\n", "D_real", "+=", "torch", ".", "sum", "(", "torch", ".", "sigmoid", "(", "real_outputs", ")", ")", ".", "item", "(", ")", "\n", "D_fake", "+=", "torch", ".", "sum", "(", "torch", ".", "sigmoid", "(", "fake_outputs", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "running_loss", "+=", "gail_loss", ".", "item", "(", ")", "\n", "D_grad", "+=", "grad_pen", ".", "item", "(", ")", "\n", "if", "i_batch", "%", "print_every", "==", "print_every", "-", "1", ":", "\n", "                    ", "print", "(", "\"[{}]: D_loss = {:.3f}, Grad_loss = {:.3f}\"", ".", "format", "(", "\n", "i_batch", "+", "1", ",", "running_loss", "/", "print_every", ",", "\n", "D_grad", "/", "print_every", ")", ")", "\n", "D_grad", "=", "0.0", "\n", "running_loss", "=", "0.0", "\n", "\n", "", "self", ".", "update_counter", "+=", "1", "\n", "\n", "", "", "return", "(", "avg_loss", "/", "fake_data", ".", "sample_num", ",", "D_real", "/", "real_sample_num", ",", "\n", "D_fake", "/", "fake_sample_num", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.ppo.PPO.__init__": [[7, 27], ["torch.Adam", "torch.Adam", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "ppo.PPO.policy.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "policy", ",", "\n", "lr", ",", "\n", "betas", ",", "\n", "clip_param", ",", "\n", "num_epoch", ",", "\n", "batch_size", ",", "\n", "value_coef", "=", "1.", ",", "\n", "entropy_coef", "=", "0.1", ")", ":", "\n", "\n", "        ", "self", ".", "policy", "=", "policy", "\n", "self", ".", "clip_param", "=", "clip_param", "\n", "self", ".", "num_epoch", "=", "num_epoch", "\n", "self", ".", "minibatch_size", "=", "batch_size", "\n", "self", ".", "value_coef", "=", "value_coef", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr", ",", "\n", "betas", "=", "betas", ")", "\n", "self", ".", "value_loss_fun", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.ppo.PPO.evaluate_actions": [[28, 35], ["ppo.PPO.policy", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.entropy().mean", "torch.distributions.Categorical.entropy().mean", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.entropy"], "methods", ["None"], ["", "def", "evaluate_actions", "(", "self", ",", "obs_batch", ",", "actions_batch", ")", ":", "\n", "\n", "        ", "probs", ",", "values", "=", "self", ".", "policy", "(", "*", "obs_batch", ")", "\n", "dist", "=", "Categorical", "(", "probs", ")", "\n", "log_probs", "=", "dist", ".", "log_prob", "(", "actions_batch", ")", "\n", "\n", "return", "values", ",", "log_probs", ",", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.ppo.PPO.update": [[36, 91], ["range", "rollouts.get_generator", "enumerate", "ppo.PPO.optimizer.zero_grad", "ppo.PPO.evaluate_actions", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "loss.backward", "ppo.PPO.optimizer.step", "value_loss.item", "action_loss.item", "entropy_loss.item", "loss.item", "print", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "ppo.PPO.value_loss_fun", "values.squeeze", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.data.FakeDataRollout.get_generator", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.ppo.PPO.evaluate_actions", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.step"], ["", "def", "update", "(", "self", ",", "rollouts", ")", ":", "\n", "        ", "avg_loss", "=", "0", "\n", "\n", "for", "e", "in", "range", "(", "self", ".", "num_epoch", ")", ":", "\n", "            ", "data_generator", "=", "rollouts", ".", "get_generator", "(", "self", ".", "minibatch_size", ")", "\n", "\n", "value_loss_epoch", "=", "0", "\n", "action_loss_epoch", "=", "0", "\n", "dist_entropy_epoch", "=", "0", "\n", "loss_epoch", "=", "0", "\n", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "data_generator", ")", ":", "\n", "                ", "obs_batch", ",", "actions_batch", ",", "return_batch", ",", "old_action_log_probs_batch", ",", "adv_targ", "=", "sample", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Reshape to do in a single forward pass for all steps", "\n", "values", ",", "action_log_probs", ",", "dist_entropy", "=", "self", ".", "evaluate_actions", "(", "\n", "obs_batch", ",", "actions_batch", ")", "\n", "\n", "ratio", "=", "torch", ".", "exp", "(", "action_log_probs", "-", "\n", "old_action_log_probs_batch", ")", "\n", "surr1", "=", "ratio", "*", "adv_targ", "\n", "surr2", "=", "torch", ".", "clamp", "(", "ratio", ",", "1.0", "-", "self", ".", "clip_param", ",", "\n", "1.0", "+", "self", ".", "clip_param", ")", "*", "adv_targ", "\n", "action_loss", "=", "-", "torch", ".", "min", "(", "surr1", ",", "surr2", ")", ".", "mean", "(", ")", "\n", "\n", "value_loss", "=", "self", ".", "value_loss_fun", "(", "\n", "return_batch", ",", "values", ".", "squeeze", "(", ")", ")", "*", "self", ".", "value_coef", "\n", "\n", "entropy_loss", "=", "-", "dist_entropy", "*", "self", ".", "entropy_coef", "\n", "loss", "=", "value_loss", "+", "action_loss", "+", "entropy_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "value_loss_epoch", "+=", "value_loss", ".", "item", "(", ")", "\n", "action_loss_epoch", "+=", "action_loss", ".", "item", "(", ")", "\n", "dist_entropy_epoch", "+=", "entropy_loss", ".", "item", "(", ")", "\n", "loss_epoch", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "value_loss_epoch", "/=", "i", "+", "1", "\n", "action_loss_epoch", "/=", "i", "+", "1", "\n", "dist_entropy_epoch", "/=", "i", "+", "1", "\n", "loss_epoch", "/=", "i", "+", "1", "\n", "if", "e", "%", "4", "==", "0", ":", "\n", "                ", "print", "(", "'[{}/{}]: VLoss: {:.3f}, PLoss: {:.3f}, loss: {:.3f}'", ".", "\n", "format", "(", "e", "+", "1", ",", "self", ".", "num_epoch", ",", "value_loss_epoch", ",", "\n", "action_loss_epoch", ",", "loss_epoch", ")", ")", "\n", "", "avg_loss", "+=", "loss_epoch", "\n", "\n", "", "avg_loss", "/=", "self", ".", "num_epoch", "\n", "\n", "return", "avg_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.cutFixOnTarget": [[12, 26], ["numpy.unique", "trajs[].keys", "list", "list", "numpy.ones", "enumerate", "filter", "filter", "len", "utils.get_num_step2target"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.get_num_step2target"], ["def", "cutFixOnTarget", "(", "trajs", ",", "target_annos", ")", ":", "\n", "    ", "task_names", "=", "np", ".", "unique", "(", "[", "traj", "[", "'task'", "]", "for", "traj", "in", "trajs", "]", ")", "\n", "if", "'condition'", "in", "trajs", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "trajs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "'condition'", "]", "==", "'present'", ",", "trajs", ")", ")", "\n", "", "for", "task", "in", "task_names", ":", "\n", "        ", "task_trajs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "'task'", "]", "==", "task", ",", "trajs", ")", ")", "\n", "num_steps_task", "=", "np", ".", "ones", "(", "len", "(", "task_trajs", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", ",", "traj", "in", "enumerate", "(", "task_trajs", ")", ":", "\n", "            ", "key", "=", "traj", "[", "'task'", "]", "+", "'_'", "+", "traj", "[", "'name'", "]", "\n", "bbox", "=", "target_annos", "[", "key", "]", "\n", "traj_len", "=", "get_num_step2target", "(", "traj", "[", "'X'", "]", ",", "traj", "[", "'Y'", "]", ",", "bbox", ")", "\n", "num_steps_task", "[", "i", "]", "=", "traj_len", "\n", "traj", "[", "'X'", "]", "=", "traj", "[", "'X'", "]", "[", ":", "traj_len", "]", "\n", "traj", "[", "'Y'", "]", "=", "traj", "[", "'Y'", "]", "[", ":", "traj_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.pos_to_action": [[28, 33], ["int"], "function", ["None"], ["", "", "", "def", "pos_to_action", "(", "center_x", ",", "center_y", ",", "patch_size", ",", "patch_num", ")", ":", "\n", "    ", "x", "=", "center_x", "//", "patch_size", "[", "0", "]", "\n", "y", "=", "center_y", "//", "patch_size", "[", "1", "]", "\n", "\n", "return", "int", "(", "patch_num", "[", "0", "]", "*", "y", "+", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.action_to_pos": [[35, 42], ["None"], "function", ["None"], ["", "def", "action_to_pos", "(", "acts", ",", "patch_size", ",", "patch_num", ")", ":", "\n", "    ", "patch_y", "=", "acts", "//", "patch_num", "[", "0", "]", "\n", "patch_x", "=", "acts", "%", "patch_num", "[", "0", "]", "\n", "\n", "pixel_x", "=", "patch_x", "*", "patch_size", "[", "0", "]", "+", "patch_size", "[", "0", "]", "/", "2", "\n", "pixel_y", "=", "patch_y", "*", "patch_size", "[", "1", "]", "+", "patch_size", "[", "1", "]", "/", "2", "\n", "return", "pixel_x", ",", "pixel_y", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.select_action": [[44, 70], ["policy", "torch.distributions.Categorical", "torch.distributions.Categorical.log_prob", "probs.clone().detach", "torch.argmax", "probs.clone().detach", "probs.clone().detach.sum().view", "torch.distributions.Categorical", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "m.sample.view", "values.view", "m.sample.view", "probs.clone().detach.size", "probs.clone", "action_mask.view", "probs.clone", "probs.clone().detach.sum", "probs.clone().detach.size"], "function", ["None"], ["", "def", "select_action", "(", "obs", ",", "policy", ",", "sample_action", ",", "action_mask", "=", "None", ",", "\n", "softmask", "=", "False", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "probs", ",", "values", "=", "policy", "(", "*", "obs", ")", "\n", "if", "sample_action", ":", "\n", "        ", "m", "=", "Categorical", "(", "probs", ")", "\n", "if", "action_mask", "is", "not", "None", ":", "\n", "# prevent sample previous actions by re-normalizing probs", "\n", "            ", "probs_new", "=", "probs", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "if", "softmask", ":", "\n", "                ", "probs_new", "=", "probs_new", "*", "action_mask", "\n", "", "else", ":", "\n", "                ", "probs_new", "[", "action_mask", "]", "=", "eps", "\n", "\n", "", "probs_new", "/=", "probs_new", ".", "sum", "(", "dim", "=", "1", ")", ".", "view", "(", "probs_new", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "\n", "m_new", "=", "Categorical", "(", "probs_new", ")", "\n", "actions", "=", "m_new", ".", "sample", "(", ")", "\n", "", "else", ":", "\n", "            ", "actions", "=", "m", ".", "sample", "(", ")", "\n", "", "log_probs", "=", "m", ".", "log_prob", "(", "actions", ")", "\n", "return", "actions", ".", "view", "(", "-", "1", ")", ",", "log_probs", ",", "values", ".", "view", "(", "-", "1", ")", ",", "probs", "\n", "", "else", ":", "\n", "        ", "probs_new", "=", "probs", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "probs_new", "[", "action_mask", ".", "view", "(", "probs_new", ".", "size", "(", "0", ")", ",", "-", "1", ")", "]", "=", "0", "\n", "actions", "=", "torch", ".", "argmax", "(", "probs_new", ",", "dim", "=", "1", ")", "\n", "return", "actions", ".", "view", "(", "-", "1", ")", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.collect_trajs": [[72, 164], ["env.observe", "utils.select_action", "IORs.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "range", "env.step", "torch.stack.append", "actions.append", "utils.select_action", "torch.stack", "torch.stack", "env.action_mask.to().view", "env.step", "torch.stack.append", "SASPs.append", "IORs.append", "utils.select_action", "values.append", "log_probs.append", "rewards.append", "trajs.append", "env.status.min", "env.action_mask.to().view", "torch.zeros", "status[].sum", "torch.stack.size", "env.action_mask.to", "env.task_ids[].repeat", "env.action_mask.to"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.observe", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.select_action", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.step", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.select_action", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.step", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.select_action"], ["", "", "def", "collect_trajs", "(", "env", ",", "\n", "policy", ",", "\n", "patch_num", ",", "\n", "max_traj_length", ",", "\n", "is_eval", "=", "False", ",", "\n", "sample_action", "=", "True", ")", ":", "\n", "\n", "    ", "rewards", "=", "[", "]", "\n", "obs_fov", "=", "env", ".", "observe", "(", ")", "\n", "act", ",", "log_prob", ",", "value", ",", "prob", "=", "select_action", "(", "(", "obs_fov", ",", "env", ".", "task_ids", ")", ",", "\n", "policy", ",", "\n", "sample_action", ",", "\n", "action_mask", "=", "env", ".", "action_mask", ")", "\n", "status", "=", "[", "env", ".", "status", "]", "\n", "values", "=", "[", "value", "]", "\n", "log_probs", "=", "[", "log_prob", "]", "\n", "SASPs", "=", "[", "]", "\n", "\n", "i", "=", "0", "\n", "if", "is_eval", ":", "\n", "        ", "actions", "=", "[", "]", "\n", "while", "i", "<", "max_traj_length", ":", "\n", "            ", "new_obs_fov", ",", "curr_status", "=", "env", ".", "step", "(", "act", ")", "\n", "status", ".", "append", "(", "curr_status", ")", "\n", "actions", ".", "append", "(", "act", ")", "\n", "obs_fov", "=", "new_obs_fov", "\n", "act", ",", "log_prob", ",", "value", ",", "prob_new", "=", "select_action", "(", "\n", "(", "obs_fov", ",", "env", ".", "task_ids", ")", ",", "\n", "policy", ",", "\n", "sample_action", ",", "\n", "action_mask", "=", "env", ".", "action_mask", ")", "\n", "i", "=", "i", "+", "1", "\n", "\n", "", "trajs", "=", "{", "\n", "'status'", ":", "torch", ".", "stack", "(", "status", ")", ",", "\n", "'actions'", ":", "torch", ".", "stack", "(", "actions", ")", "\n", "}", "\n", "\n", "", "else", ":", "\n", "        ", "IORs", "=", "[", "]", "\n", "IORs", ".", "append", "(", "\n", "env", ".", "action_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float", ")", ".", "view", "(", "env", ".", "batch_size", ",", "1", ",", "\n", "patch_num", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "while", "i", "<", "max_traj_length", "and", "env", ".", "status", ".", "min", "(", ")", "<", "1", ":", "\n", "            ", "new_obs_fov", ",", "curr_status", "=", "env", ".", "step", "(", "act", ")", "\n", "\n", "status", ".", "append", "(", "curr_status", ")", "\n", "SASPs", ".", "append", "(", "(", "obs_fov", ",", "act", ",", "new_obs_fov", ")", ")", "\n", "obs_fov", "=", "new_obs_fov", "\n", "\n", "IORs", ".", "append", "(", "\n", "env", ".", "action_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float", ")", ".", "view", "(", "\n", "env", ".", "batch_size", ",", "1", ",", "patch_num", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "\n", "act", ",", "log_prob", ",", "value", ",", "prob_new", "=", "select_action", "(", "\n", "(", "obs_fov", ",", "env", ".", "task_ids", ")", ",", "\n", "policy", ",", "\n", "sample_action", ",", "\n", "action_mask", "=", "env", ".", "action_mask", ")", "\n", "values", ".", "append", "(", "value", ")", "\n", "log_probs", ".", "append", "(", "log_prob", ")", "\n", "\n", "rewards", ".", "append", "(", "torch", ".", "zeros", "(", "env", ".", "batch_size", ")", ")", "\n", "\n", "i", "=", "i", "+", "1", "\n", "\n", "", "S", "=", "torch", ".", "stack", "(", "[", "sasp", "[", "0", "]", "for", "sasp", "in", "SASPs", "]", ")", "\n", "A", "=", "torch", ".", "stack", "(", "[", "sasp", "[", "1", "]", "for", "sasp", "in", "SASPs", "]", ")", "\n", "V", "=", "torch", ".", "stack", "(", "values", ")", "\n", "R", "=", "torch", ".", "stack", "(", "rewards", ")", "\n", "LogP", "=", "torch", ".", "stack", "(", "log_probs", "[", ":", "-", "1", "]", ")", "\n", "status", "=", "torch", ".", "stack", "(", "status", "[", "1", ":", "]", ")", "\n", "\n", "bs", "=", "len", "(", "env", ".", "img_names", ")", "\n", "trajs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "            ", "ind", "=", "(", "status", "[", ":", ",", "i", "]", "==", "1", ")", ".", "to", "(", "torch", ".", "int8", ")", ".", "argmax", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "if", "status", "[", ":", ",", "i", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "ind", "=", "status", ".", "size", "(", "0", ")", "\n", "", "trajs", ".", "append", "(", "{", "\n", "'curr_states'", ":", "S", "[", ":", "ind", ",", "i", "]", ",", "\n", "'actions'", ":", "A", "[", ":", "ind", ",", "i", "]", ",", "\n", "'values'", ":", "V", "[", ":", "ind", "+", "1", ",", "i", "]", ",", "\n", "'log_probs'", ":", "LogP", "[", ":", "ind", ",", "i", "]", ",", "\n", "'rewards'", ":", "R", "[", ":", "ind", ",", "i", "]", ",", "\n", "'task_id'", ":", "env", ".", "task_ids", "[", "i", "]", ".", "repeat", "(", "ind", ")", ",", "\n", "'img_name'", ":", "[", "env", ".", "img_names", "[", "i", "]", "]", "*", "ind", ",", "\n", "'length'", ":", "ind", "\n", "}", ")", "\n", "\n", "", "", "return", "trajs", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.compute_return_advantage": [[166, 188], ["torch.zeros_like", "reversed", "range", "torch.zeros_like.squeeze", "advs.squeeze", "torch.zeros_like.size", "torch.zeros_like", "reversed", "range", "delta.size"], "function", ["None"], ["", "def", "compute_return_advantage", "(", "rewards", ",", "values", ",", "gamma", ",", "mtd", "=", "'CRITIC'", ",", "tau", "=", "0.96", ")", ":", "\n", "    ", "device", "=", "rewards", ".", "device", "\n", "acc_reward", "=", "torch", ".", "zeros_like", "(", "rewards", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "acc_reward", "[", "-", "1", "]", "=", "rewards", "[", "-", "1", "]", "\n", "for", "i", "in", "reversed", "(", "range", "(", "acc_reward", ".", "size", "(", "0", ")", "-", "1", ")", ")", ":", "\n", "        ", "acc_reward", "[", "i", "]", "=", "rewards", "[", "i", "]", "+", "gamma", "*", "acc_reward", "[", "i", "+", "1", "]", "\n", "\n", "# compute advantages", "\n", "", "if", "mtd", "==", "'MC'", ":", "# Monte-Carlo estimation", "\n", "        ", "advs", "=", "acc_reward", "-", "values", "[", ":", "-", "1", "]", "\n", "", "elif", "mtd", "==", "'CRITIC'", ":", "# critic estimation", "\n", "        ", "advs", "=", "rewards", "+", "gamma", "*", "values", "[", "1", ":", "]", "-", "values", "[", ":", "-", "1", "]", "\n", "", "elif", "mtd", "==", "'GAE'", ":", "# generalized advantage estimation", "\n", "        ", "delta", "=", "rewards", "+", "gamma", "*", "values", "[", "1", ":", "]", "-", "values", "[", ":", "-", "1", "]", "\n", "adv", "=", "torch", ".", "zeros_like", "(", "delta", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "adv", "[", "-", "1", "]", "=", "delta", "[", "-", "1", "]", "\n", "for", "i", "in", "reversed", "(", "range", "(", "delta", ".", "size", "(", "0", ")", "-", "1", ")", ")", ":", "\n", "            ", "adv", "[", "i", "]", "=", "delta", "[", "i", "]", "+", "gamma", "*", "tau", "*", "adv", "[", "i", "+", "1", "]", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "acc_reward", ".", "squeeze", "(", ")", ",", "advs", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.process_trajs": [[190, 226], ["torch.zeros_like", "reversed", "len", "range", "torch.zeros_like.size", "torch.zeros_like", "reversed", "range", "delta.size"], "function", ["None"], ["", "def", "process_trajs", "(", "trajs", ",", "gamma", ",", "mtd", "=", "'CRITIC'", ",", "tau", "=", "0.96", ")", ":", "\n", "# compute discounted cummulative reward", "\n", "    ", "device", "=", "trajs", "[", "0", "]", "[", "'log_probs'", "]", ".", "device", "\n", "avg_return", "=", "0", "\n", "for", "traj", "in", "trajs", ":", "\n", "\n", "        ", "acc_reward", "=", "torch", ".", "zeros_like", "(", "traj", "[", "'rewards'", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "device", ")", "\n", "acc_reward", "[", "-", "1", "]", "=", "traj", "[", "'rewards'", "]", "[", "-", "1", "]", "\n", "for", "i", "in", "reversed", "(", "range", "(", "acc_reward", ".", "size", "(", "0", ")", "-", "1", ")", ")", ":", "\n", "            ", "acc_reward", "[", "i", "]", "=", "traj", "[", "'rewards'", "]", "[", "i", "]", "+", "gamma", "*", "acc_reward", "[", "i", "+", "1", "]", "\n", "\n", "", "traj", "[", "'acc_rewards'", "]", "=", "acc_reward", "\n", "avg_return", "+=", "acc_reward", "[", "0", "]", "\n", "\n", "values", "=", "traj", "[", "'values'", "]", "\n", "# compute advantages", "\n", "if", "mtd", "==", "'MC'", ":", "# Monte-Carlo estimation", "\n", "            ", "traj", "[", "'advantages'", "]", "=", "traj", "[", "'acc_rewards'", "]", "-", "values", "[", ":", "-", "1", "]", "\n", "\n", "", "elif", "mtd", "==", "'CRITIC'", ":", "# critic estimation", "\n", "            ", "traj", "[", "'advantages'", "]", "=", "traj", "[", "\n", "'rewards'", "]", "+", "gamma", "*", "values", "[", "1", ":", "]", "-", "values", "[", ":", "-", "1", "]", "\n", "\n", "", "elif", "mtd", "==", "'GAE'", ":", "# generalized advantage estimation", "\n", "            ", "delta", "=", "traj", "[", "'rewards'", "]", "+", "gamma", "*", "values", "[", "1", ":", "]", "-", "values", "[", ":", "-", "1", "]", "\n", "adv", "=", "torch", ".", "zeros_like", "(", "delta", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "adv", "[", "-", "1", "]", "=", "delta", "[", "-", "1", "]", "\n", "for", "i", "in", "reversed", "(", "range", "(", "delta", ".", "size", "(", "0", ")", "-", "1", ")", ")", ":", "\n", "                ", "adv", "[", "i", "]", "=", "delta", "[", "i", "]", "+", "gamma", "*", "tau", "*", "adv", "[", "i", "+", "1", "]", "\n", "", "traj", "[", "'advantages'", "]", "=", "adv", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "return", "avg_return", "/", "len", "(", "trajs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.get_num_step2target": [[228, 238], ["numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.array", "numpy.array", "numpy.sum", "numpy.argmax"], "function", ["None"], ["", "def", "get_num_step2target", "(", "X", ",", "Y", ",", "bbox", ")", ":", "\n", "    ", "X", ",", "Y", "=", "np", ".", "array", "(", "X", ")", ",", "np", ".", "array", "(", "Y", ")", "\n", "on_target_X", "=", "np", ".", "logical_and", "(", "X", ">", "bbox", "[", "0", "]", ",", "X", "<", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ")", "\n", "on_target_Y", "=", "np", ".", "logical_and", "(", "Y", ">", "bbox", "[", "1", "]", ",", "Y", "<", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", "\n", "on_target", "=", "np", ".", "logical_and", "(", "on_target_X", ",", "on_target_Y", ")", "\n", "if", "np", ".", "sum", "(", "on_target", ")", ">", "0", ":", "\n", "        ", "first_on_target_idx", "=", "np", ".", "argmax", "(", "on_target", ")", "\n", "return", "first_on_target_idx", "+", "1", "\n", "", "else", ":", "\n", "        ", "return", "1000", "# some big enough number", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.get_CDF": [[240, 246], ["numpy.zeros", "float", "range", "len", "numpy.sum"], "function", ["None"], ["", "", "def", "get_CDF", "(", "num_steps", ",", "max_step", ")", ":", "\n", "    ", "cdf", "=", "np", ".", "zeros", "(", "max_step", ")", "\n", "total", "=", "float", "(", "len", "(", "num_steps", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "max_step", "+", "1", ")", ":", "\n", "        ", "cdf", "[", "i", "-", "1", "]", "=", "np", ".", "sum", "(", "num_steps", "<=", "i", ")", "/", "total", "\n", "", "return", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.get_num_steps": [[248, 262], ["list", "numpy.ones", "enumerate", "filter", "len", "utils.get_num_step2target"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.get_num_step2target"], ["", "def", "get_num_steps", "(", "trajs", ",", "target_annos", ",", "task_names", ")", ":", "\n", "    ", "num_steps", "=", "{", "}", "\n", "for", "task", "in", "task_names", ":", "\n", "        ", "task_trajs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "'task'", "]", "==", "task", ",", "trajs", ")", ")", "\n", "num_steps_task", "=", "np", ".", "ones", "(", "len", "(", "task_trajs", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", ",", "traj", "in", "enumerate", "(", "task_trajs", ")", ":", "\n", "            ", "key", "=", "traj", "[", "'task'", "]", "+", "'_'", "+", "traj", "[", "'name'", "]", "\n", "bbox", "=", "target_annos", "[", "key", "]", "\n", "step_num", "=", "get_num_step2target", "(", "traj", "[", "'X'", "]", ",", "traj", "[", "'Y'", "]", ",", "bbox", ")", "\n", "num_steps_task", "[", "i", "]", "=", "step_num", "\n", "traj", "[", "'X'", "]", "=", "traj", "[", "'X'", "]", "[", ":", "step_num", "]", "\n", "traj", "[", "'Y'", "]", "=", "traj", "[", "'Y'", "]", "[", ":", "step_num", "]", "\n", "", "num_steps", "[", "task", "]", "=", "num_steps_task", "\n", "", "return", "num_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.get_mean_cdf": [[264, 269], ["cdf_tasks.append", "utils.get_CDF"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.get_CDF"], ["", "def", "get_mean_cdf", "(", "num_steps", ",", "task_names", ",", "max_step", ")", ":", "\n", "    ", "cdf_tasks", "=", "[", "]", "\n", "for", "task", "in", "task_names", ":", "\n", "        ", "cdf_tasks", ".", "append", "(", "get_CDF", "(", "num_steps", "[", "task", "]", ",", "max_step", ")", ")", "\n", "", "return", "cdf_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.compute_search_cdf": [[271, 282], ["numpy.unique", "utils.get_num_steps", "utils.get_mean_cdf", "dict", "numpy.mean", "numpy.std", "zip"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.get_num_steps", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.get_mean_cdf"], ["", "def", "compute_search_cdf", "(", "scanpaths", ",", "annos", ",", "max_step", ",", "return_by_task", "=", "False", ")", ":", "\n", "# compute search CDF", "\n", "    ", "task_names", "=", "np", ".", "unique", "(", "[", "traj", "[", "'task'", "]", "for", "traj", "in", "scanpaths", "]", ")", "\n", "num_steps", "=", "get_num_steps", "(", "scanpaths", ",", "annos", ",", "task_names", ")", "\n", "cdf_tasks", "=", "get_mean_cdf", "(", "num_steps", ",", "task_names", ",", "max_step", "+", "1", ")", "\n", "if", "return_by_task", ":", "\n", "        ", "return", "dict", "(", "zip", "(", "task_names", ",", "cdf_tasks", ")", ")", "\n", "", "else", ":", "\n", "        ", "mean_cdf", "=", "np", ".", "mean", "(", "cdf_tasks", ",", "axis", "=", "0", ")", "\n", "std_cdf", "=", "np", ".", "std", "(", "cdf_tasks", ",", "axis", "=", "0", ")", "\n", "return", "mean_cdf", ",", "std_cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.calc_overlap_ratio": [[284, 311], ["float", "numpy.zeros", "range", "range", "float", "max", "max"], "function", ["None"], ["", "", "def", "calc_overlap_ratio", "(", "bbox", ",", "patch_size", ",", "patch_num", ")", ":", "\n", "    ", "\"\"\"\n    compute the overlaping ratio of the bbox and each patch (10x16)\n    \"\"\"", "\n", "patch_area", "=", "float", "(", "patch_size", "[", "0", "]", "*", "patch_size", "[", "1", "]", ")", "\n", "aoi_ratio", "=", "np", ".", "zeros", "(", "(", "1", ",", "patch_num", "[", "1", "]", ",", "patch_num", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "tl_x", ",", "tl_y", "=", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "\n", "br_x", ",", "br_y", "=", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ",", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", "\n", "lx", ",", "ux", "=", "tl_x", "//", "patch_size", "[", "0", "]", ",", "br_x", "//", "patch_size", "[", "0", "]", "\n", "ly", ",", "uy", "=", "tl_y", "//", "patch_size", "[", "1", "]", ",", "br_y", "//", "patch_size", "[", "1", "]", "\n", "\n", "for", "x", "in", "range", "(", "lx", ",", "ux", "+", "1", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "ly", ",", "uy", "+", "1", ")", ":", "\n", "            ", "patch_tlx", ",", "patch_tly", "=", "x", "*", "patch_size", "[", "0", "]", ",", "y", "*", "patch_size", "[", "1", "]", "\n", "patch_brx", ",", "patch_bry", "=", "patch_tlx", "+", "patch_size", "[", "\n", "0", "]", ",", "patch_tly", "+", "patch_size", "[", "1", "]", "\n", "\n", "aoi_tlx", "=", "tl_x", "if", "patch_tlx", "<", "tl_x", "else", "patch_tlx", "\n", "aoi_tly", "=", "tl_y", "if", "patch_tly", "<", "tl_y", "else", "patch_tly", "\n", "aoi_brx", "=", "br_x", "if", "patch_brx", ">", "br_x", "else", "patch_brx", "\n", "aoi_bry", "=", "br_y", "if", "patch_bry", ">", "br_y", "else", "patch_bry", "\n", "\n", "aoi_ratio", "[", "0", ",", "y", ",", "x", "]", "=", "max", "(", "(", "aoi_brx", "-", "aoi_tlx", ")", ",", "0", ")", "*", "max", "(", "\n", "(", "aoi_bry", "-", "aoi_tly", ")", ",", "0", ")", "/", "float", "(", "patch_area", ")", "\n", "\n", "", "", "return", "aoi_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.foveal2mask": [[313, 318], ["numpy.sqrt", "mask.astype"], "function", ["None"], ["", "def", "foveal2mask", "(", "x", ",", "y", ",", "r", ",", "h", ",", "w", ")", ":", "\n", "    ", "Y", ",", "X", "=", "np", ".", "ogrid", "[", ":", "h", ",", ":", "w", "]", "\n", "dist", "=", "np", ".", "sqrt", "(", "(", "X", "-", "x", ")", "**", "2", "+", "(", "Y", "-", "y", ")", "**", "2", ")", "\n", "mask", "=", "dist", "<=", "r", "\n", "return", "mask", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.multi_hot_coding": [[320, 335], ["utils.calc_overlap_ratio", "hot_ind.sum", "numpy.logical_not"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.calc_overlap_ratio"], ["", "def", "multi_hot_coding", "(", "bbox", ",", "patch_size", ",", "patch_num", ")", ":", "\n", "    ", "\"\"\"\n    compute the overlaping ratio of the bbox and each patch (10x16)\n    \"\"\"", "\n", "thresh", "=", "0", "\n", "aoi_ratio", "=", "calc_overlap_ratio", "(", "bbox", ",", "patch_size", ",", "patch_num", ")", "\n", "hot_ind", "=", "aoi_ratio", ">", "thresh", "\n", "while", "hot_ind", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "thresh", "*=", "0.8", "\n", "hot_ind", "=", "aoi_ratio", ">", "thresh", "\n", "\n", "", "aoi_ratio", "[", "hot_ind", "]", "=", "1", "\n", "aoi_ratio", "[", "np", ".", "logical_not", "(", "hot_ind", ")", "]", "=", "0", "\n", "\n", "return", "aoi_ratio", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.actions2scanpaths": [[337, 357], ["actions.to.to", "torch.stack", "numpy.concatenate", "scanpaths.append", "float", "float", "numpy.array", "np.concatenate.cpu().numpy", "np.concatenate.cpu"], "function", ["None"], ["", "def", "actions2scanpaths", "(", "actions", ",", "patch_num", ",", "im_w", ",", "im_h", ")", ":", "\n", "# convert actions to scanpaths", "\n", "    ", "scanpaths", "=", "[", "]", "\n", "for", "traj", "in", "actions", ":", "\n", "        ", "task_name", ",", "img_name", ",", "condition", ",", "actions", "=", "traj", "\n", "actions", "=", "actions", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "py", "=", "(", "actions", "//", "patch_num", "[", "0", "]", ")", "/", "float", "(", "patch_num", "[", "1", "]", ")", "\n", "px", "=", "(", "actions", "%", "patch_num", "[", "0", "]", ")", "/", "float", "(", "patch_num", "[", "0", "]", ")", "\n", "fixs", "=", "torch", ".", "stack", "(", "[", "px", ",", "py", "]", ")", "\n", "fixs", "=", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "[", "[", "0.5", "]", ",", "[", "0.5", "]", "]", ")", ",", "\n", "fixs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "axis", "=", "1", ")", "\n", "scanpaths", ".", "append", "(", "{", "\n", "'X'", ":", "fixs", "[", "0", "]", "*", "im_w", ",", "\n", "'Y'", ":", "fixs", "[", "1", "]", "*", "im_h", ",", "\n", "'name'", ":", "img_name", ",", "\n", "'task'", ":", "task_name", ",", "\n", "'condition'", ":", "condition", "\n", "}", ")", "\n", "", "return", "scanpaths", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.preprocess_fixations": [[359, 397], ["utils.pos_to_action", "utils.action_to_pos", "range", "len", "min", "utils.pos_to_action", "label_his.append", "utils.action_to_pos", "fixs.append", "fix_labels.append", "len", "copy.copy"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.pos_to_action", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.action_to_pos", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.pos_to_action", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.action_to_pos"], ["", "def", "preprocess_fixations", "(", "trajs", ",", "\n", "patch_size", ",", "\n", "patch_num", ",", "\n", "im_h", ",", "\n", "im_w", ",", "\n", "truncate_num", "=", "-", "1", ",", "\n", "need_label", "=", "True", ")", ":", "\n", "    ", "fix_labels", "=", "[", "]", "\n", "for", "traj", "in", "trajs", ":", "\n", "# first fixations are fixed at the screen center", "\n", "        ", "traj", "[", "'X'", "]", "[", "0", "]", ",", "traj", "[", "'Y'", "]", "[", "0", "]", "=", "im_w", "/", "2", ",", "im_h", "/", "2", "\n", "label", "=", "pos_to_action", "(", "traj", "[", "'X'", "]", "[", "0", "]", ",", "traj", "[", "'Y'", "]", "[", "0", "]", ",", "patch_size", ",", "\n", "patch_num", ")", "\n", "tar_x", ",", "tar_y", "=", "action_to_pos", "(", "label", ",", "patch_size", ",", "patch_num", ")", "\n", "fixs", "=", "[", "(", "tar_x", ",", "tar_y", ")", "]", "\n", "label_his", "=", "[", "label", "]", "\n", "if", "truncate_num", "<", "1", ":", "\n", "            ", "traj_len", "=", "len", "(", "traj", "[", "'X'", "]", ")", "\n", "", "else", ":", "\n", "            ", "traj_len", "=", "min", "(", "truncate_num", ",", "len", "(", "traj", "[", "'X'", "]", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "traj_len", ")", ":", "\n", "            ", "label", "=", "pos_to_action", "(", "traj", "[", "'X'", "]", "[", "i", "]", ",", "traj", "[", "'Y'", "]", "[", "i", "]", ",", "patch_size", ",", "\n", "patch_num", ")", "\n", "\n", "# remove returning fixations (enforce inhibition of return)", "\n", "if", "label", "in", "label_his", ":", "\n", "                ", "continue", "\n", "", "label_his", ".", "append", "(", "label", ")", "\n", "fix_label", "=", "(", "traj", "[", "'name'", "]", ",", "traj", "[", "'task'", "]", ",", "copy", "(", "fixs", ")", ",", "label", ")", "\n", "\n", "# discretize fixations", "\n", "tar_x", ",", "tar_y", "=", "action_to_pos", "(", "label", ",", "patch_size", ",", "patch_num", ")", "\n", "fixs", ".", "append", "(", "(", "tar_x", ",", "tar_y", ")", ")", "\n", "\n", "fix_labels", ".", "append", "(", "fix_label", ")", "\n", "\n", "", "", "return", "fix_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils._file_at_step": [[399, 402], ["int", "int"], "function", ["None"], ["", "def", "_file_at_step", "(", "step", ",", "name", ")", ":", "\n", "    ", "return", "\"save_{}_{}k{}.pkg\"", ".", "format", "(", "name", ",", "int", "(", "step", "//", "1000", ")", ",", "\n", "int", "(", "step", "%", "1000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils._file_best": [[404, 406], ["None"], "function", ["None"], ["", "def", "_file_best", "(", "name", ")", ":", "\n", "    ", "return", "\"trained_{}.pkg\"", ".", "format", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.save": [[408, 450], ["os.path.join", "os.path.join", "torch.save", "print", "ValueError", "optim.state_dict", "utils._file_at_step", "utils._file_best", "shutil.copyfile", "os.listdir", "history.sort", "hasattr", "model.module.state_dict", "model.state_dict", "re.search", "len", "os.path.join", "print", "os.path.exists", "history.pop", "file_name.replace().replace().split", "history.append", "utils._file_at_step", "os.remove", "int", "file_name.replace().replace", "int", "file_name.replace"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.save", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils._file_at_step", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils._file_best", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils._file_at_step"], ["", "def", "save", "(", "global_step", ",", "\n", "model", ",", "\n", "optim", ",", "\n", "name", ",", "\n", "pkg_dir", "=", "\"\"", ",", "\n", "is_best", "=", "False", ",", "\n", "max_checkpoints", "=", "None", ")", ":", "\n", "    ", "if", "optim", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"cannot save without optimzier\"", ")", "\n", "", "state", "=", "{", "\n", "\"global_step\"", ":", "\n", "global_step", ",", "\n", "# DataParallel wrap model in attr `module`.", "\n", "\"model\"", ":", "\n", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "if", "hasattr", "(", "model", ",", "\"module\"", ")", "else", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optim\"", ":", "\n", "optim", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "pkg_dir", ",", "_file_at_step", "(", "global_step", ",", "name", ")", ")", "\n", "best_path", "=", "os", ".", "path", ".", "join", "(", "pkg_dir", ",", "_file_best", "(", "name", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_path", ")", "\n", "print", "(", "\"[Checkpoint]: save to {} successfully\"", ".", "format", "(", "save_path", ")", ")", "\n", "\n", "if", "is_best", ":", "\n", "        ", "copyfile", "(", "save_path", ",", "best_path", ")", "\n", "", "if", "max_checkpoints", "is", "not", "None", ":", "\n", "        ", "history", "=", "[", "]", "\n", "for", "file_name", "in", "os", ".", "listdir", "(", "pkg_dir", ")", ":", "\n", "            ", "if", "re", ".", "search", "(", "\"save_{}_\\d*k\\d*\\.pkg\"", ".", "format", "(", "name", ")", ",", "file_name", ")", ":", "\n", "                ", "digits", "=", "file_name", ".", "replace", "(", "\"save_{}_\"", ".", "format", "(", "name", ")", ",", "\n", "\"\"", ")", ".", "replace", "(", "\".pkg\"", ",", "\"\"", ")", ".", "split", "(", "\"k\"", ")", "\n", "number", "=", "int", "(", "digits", "[", "0", "]", ")", "*", "1000", "+", "int", "(", "digits", "[", "1", "]", ")", "\n", "history", ".", "append", "(", "number", ")", "\n", "", "", "history", ".", "sort", "(", ")", "\n", "while", "len", "(", "history", ")", ">", "max_checkpoints", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "pkg_dir", ",", "_file_at_step", "(", "history", "[", "0", "]", ",", "name", ")", ")", "\n", "print", "(", "\"[Checkpoint]: remove {} to keep {} checkpoints\"", ".", "format", "(", "\n", "path", ",", "max_checkpoints", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "remove", "(", "path", ")", "\n", "", "history", ".", "pop", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.load": [[452, 481], ["isinstance", "isinstance", "torch.load", "model.load_state_dict", "print", "os.path.join", "print", "print", "optim.load_state_dict", "utils._file_at_step", "os.path.exists", "os.path.join", "os.path.join", "utils._file_best"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.load", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils._file_at_step", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils._file_best"], ["", "", "", "def", "load", "(", "step_or_path", ",", "model", ",", "name", ",", "optim", "=", "None", ",", "pkg_dir", "=", "\"\"", ",", "device", "=", "None", ")", ":", "\n", "    ", "step", "=", "step_or_path", "\n", "save_path", "=", "None", "\n", "if", "isinstance", "(", "step", ",", "int", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "pkg_dir", ",", "_file_at_step", "(", "step", ",", "name", ")", ")", "\n", "", "if", "isinstance", "(", "step", ",", "str", ")", ":", "\n", "        ", "if", "pkg_dir", "is", "not", "None", ":", "\n", "            ", "if", "step", "==", "\"best\"", ":", "\n", "                ", "save_path", "=", "os", ".", "path", ".", "join", "(", "pkg_dir", ",", "_file_best", "(", "name", ")", ")", "\n", "", "else", ":", "\n", "                ", "save_path", "=", "os", ".", "path", ".", "join", "(", "pkg_dir", ",", "step", ")", "\n", "", "", "else", ":", "\n", "            ", "save_path", "=", "step", "\n", "", "", "if", "save_path", "is", "not", "None", "and", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "print", "(", "\"[Checkpoint]: Failed to find {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "return", "\n", "", "if", "save_path", "is", "None", ":", "\n", "        ", "print", "(", "\"[Checkpoint]: Cannot load the checkpoint\"", ")", "\n", "return", "\n", "\n", "# begin to load", "\n", "", "state", "=", "torch", ".", "load", "(", "save_path", ",", "map_location", "=", "device", ")", "\n", "global_step", "=", "state", "[", "\"global_step\"", "]", "\n", "model", ".", "load_state_dict", "(", "state", "[", "\"model\"", "]", ")", "\n", "if", "optim", "is", "not", "None", ":", "\n", "        ", "optim", ".", "load_state_dict", "(", "state", "[", "\"optim\"", "]", ")", "\n", "\n", "", "print", "(", "\"[Checkpoint]: Load {} successfully\"", ".", "format", "(", "save_path", ")", ")", "\n", "return", "global_step", "\n", "", ""]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cart2pol": [[10, 22], ["numpy.sqrt", "numpy.arctan2"], "function", ["None"], ["def", "cart2pol", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"Transform cartesian into polar coordinates.\n\n    :param x: float\n    :param y : float\n\n    :return: rho: float, length from (0,0)\n    :return: theta: float, angle in radians\n    \"\"\"", "\n", "rho", "=", "np", ".", "sqrt", "(", "x", "**", "2", "+", "y", "**", "2", ")", "\n", "theta", "=", "np", ".", "arctan2", "(", "y", ",", "x", ")", "\n", "return", "rho", ",", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.calcangle": [[24, 35], ["math.degrees", "math.acos", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "calcangle", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "\"\"\"Calculate angle between to vectors (saccades).\n\n    :param: x1, x2: list of float\n\n    :return: angle: float, angle in degrees\n    \"\"\"", "\n", "angle", "=", "math", ".", "degrees", "(", "\n", "math", ".", "acos", "(", "\n", "np", ".", "dot", "(", "x1", ",", "x2", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "x1", ")", "*", "np", ".", "linalg", ".", "norm", "(", "x2", ")", ")", ")", ")", "\n", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.gen_scanpath_structure": [[37, 97], ["range", "range", "range", "collections.OrderedDict", "numpy.shape", "fixation_x.append", "fixation_y.append", "fixation_dur.append", "saccade_x.append", "saccade_y.append", "saccade_lenx.append", "saccade_leny.append", "multimatch.cart2pol", "saccade_rho.append", "saccade_theta.append"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cart2pol"], ["", "def", "gen_scanpath_structure", "(", "data", ")", ":", "\n", "    ", "\"\"\"Transform a fixation vector into a vector based scanpath representation.\n\n    Takes an nx3 fixation vector (start_x, start_y, duration) in the form of\n    of a record array and transforms it into appropriate vectorbased scanpath\n    representation. Indices are as follows:\n    0: fixation_x\n    1: fixation_y\n    2: fixation_dur\n    3: saccade_x\n    4: saccade_y\n    5: saccade_lenx\n    6: saccade_leny\n    7: saccade_theta\n    8: saccade_rho\n\n    :param: data: record array\n\n    :return: eyedata: array-like, list of lists, vector-based scanpath representation\n    \"\"\"", "\n", "\n", "fixation_x", "=", "[", "]", "\n", "fixation_y", "=", "[", "]", "\n", "fixation_dur", "=", "[", "]", "\n", "saccade_x", "=", "[", "]", "\n", "saccade_y", "=", "[", "]", "\n", "saccade_lenx", "=", "[", "]", "\n", "saccade_leny", "=", "[", "]", "\n", "saccade_theta", "=", "[", "]", "\n", "saccade_rho", "=", "[", "]", "\n", "# get the number of rows", "\n", "length", "=", "np", ".", "shape", "(", "data", ")", "[", "0", "]", "\n", "# keep coordinates and durations of fixations", "\n", "for", "i", "in", "range", "(", "0", ",", "length", ")", ":", "\n", "        ", "fixation_x", ".", "append", "(", "data", "[", "i", "]", "[", "0", "]", ")", "\n", "fixation_y", ".", "append", "(", "data", "[", "i", "]", "[", "1", "]", ")", "\n", "fixation_dur", ".", "append", "(", "data", "[", "i", "]", "[", "2", "]", ")", "\n", "# fixations are the start coordinates for saccades", "\n", "", "for", "i", "in", "range", "(", "0", ",", "length", "-", "1", ")", ":", "\n", "        ", "saccade_x", ".", "append", "(", "data", "[", "i", "]", "[", "0", "]", ")", "\n", "saccade_y", ".", "append", "(", "data", "[", "i", "]", "[", "1", "]", ")", "\n", "# calculate saccade length and angle from vector lengths between fixations", "\n", "", "for", "i", "in", "range", "(", "1", ",", "length", ")", ":", "\n", "        ", "saccade_lenx", ".", "append", "(", "fixation_x", "[", "i", "]", "-", "saccade_x", "[", "i", "-", "1", "]", ")", "\n", "saccade_leny", ".", "append", "(", "fixation_y", "[", "i", "]", "-", "saccade_y", "[", "i", "-", "1", "]", ")", "\n", "rho", ",", "theta", "=", "cart2pol", "(", "saccade_lenx", "[", "i", "-", "1", "]", ",", "saccade_leny", "[", "i", "-", "1", "]", ")", "\n", "saccade_rho", ".", "append", "(", "rho", ")", "\n", "saccade_theta", ".", "append", "(", "theta", ")", "\n", "# append everything into an ordered dict.", "\n", "", "eyedata", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "eyedata", "[", "'fixation_x'", "]", "=", "fixation_x", "\n", "eyedata", "[", "'fixation_y'", "]", "=", "fixation_y", "\n", "eyedata", "[", "'fixation_dur'", "]", "=", "fixation_dur", "\n", "eyedata", "[", "'saccade_x'", "]", "=", "saccade_x", "\n", "eyedata", "[", "'saccade_y'", "]", "=", "saccade_y", "\n", "eyedata", "[", "'saccade_lenx'", "]", "=", "saccade_lenx", "\n", "eyedata", "[", "'saccade_leny'", "]", "=", "saccade_leny", "\n", "eyedata", "[", "'saccade_theta'", "]", "=", "saccade_theta", "\n", "eyedata", "[", "'saccade_rho'", "]", "=", "saccade_rho", "\n", "return", "eyedata", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.keepsaccade": [[99, 136], ["sim_lenx.insert", "sim_leny.insert", "sim_x.insert", "sim_y.insert", "sim_theta.insert", "sim_len.insert", "sim_dur.insert"], "function", ["None"], ["", "def", "keepsaccade", "(", "i", ",", "\n", "j", ",", "\n", "sim_lenx", ",", "\n", "sim_leny", ",", "\n", "sim_x", ",", "\n", "sim_y", ",", "\n", "sim_theta", ",", "\n", "sim_len", ",", "\n", "sim_dur", ",", "\n", "data", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Helper function for scanpath simplification. If no simplification can be\n    performed on a particular saccade, this functions stores the original data.\n    :param i: current index\n    :param j: current index\n    :param sim_lenx: list\n    :param sim_leny: list\n    :param sim_x: list\n    :param sim_y: list\n    :param sim_theta: list\n    :param sim_len: list\n    :param sim_dur: list\n    :param data: eyedata, list of list\n    \"\"\"", "\n", "\n", "sim_lenx", ".", "insert", "(", "j", ",", "data", "[", "'saccade_lenx'", "]", "[", "i", "]", ")", "\n", "sim_leny", ".", "insert", "(", "j", ",", "data", "[", "'saccade_leny'", "]", "[", "i", "]", ")", "\n", "sim_x", ".", "insert", "(", "j", ",", "data", "[", "'saccade_x'", "]", "[", "i", "]", ")", "\n", "sim_y", ".", "insert", "(", "j", ",", "data", "[", "'saccade_y'", "]", "[", "i", "]", ")", "\n", "sim_theta", ".", "insert", "(", "j", ",", "data", "[", "'saccade_theta'", "]", "[", "i", "]", ")", "\n", "sim_len", ".", "insert", "(", "j", ",", "data", "[", "'saccade_rho'", "]", "[", "i", "]", ")", "\n", "sim_dur", ".", "insert", "(", "j", ",", "data", "[", "'fixation_dur'", "]", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "j", "+=", "1", "\n", "\n", "return", "sim_lenx", ",", "sim_leny", ",", "sim_x", ",", "sim_y", ",", "sim_theta", ",", "sim_len", ",", "sim_dur", ",", "i", ",", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.simlen": [[138, 271], ["sim_dur.append", "collections.OrderedDict", "len", "len", "len", "multimatch.keepsaccade", "multimatch.keepsaccade", "multimatch.cart2pol", "sim_dur.insert", "multimatch.keepsaccade", "multimatch.cart2pol", "sim_lenx.insert", "sim_leny.insert", "sim_x.insert", "sim_y.insert", "sim_theta.insert", "sim_len.insert", "sim_dur.insert", "multimatch.keepsaccade", "len"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.keepsaccade", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.keepsaccade", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cart2pol", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.keepsaccade", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cart2pol", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.keepsaccade"], ["", "def", "simlen", "(", "data", ",", "TAmp", ",", "TDur", ")", ":", "\n", "    ", "\"\"\"Simplify scanpaths based on saccadic length.\n\n    Simplify consecutive saccades if their length is smaller than the\n    threshold TAmp and the duration of the closest fixations is lower\n    than threshold TDur.\n\n    :param: data: array-like, list of lists, output of gen_scanpath_structure\n    :param: TAmp: float, length in px\n    :param: TDur: float, time in seconds\n\n    :return: eyedata: list of lists, one iteration of length based simplification\n    \"\"\"", "\n", "\n", "if", "len", "(", "data", "[", "'saccade_x'", "]", ")", "<", "1", ":", "\n", "        ", "return", "data", "\n", "# if the scanpath is long enough", "\n", "", "else", ":", "\n", "        ", "i", "=", "0", "\n", "j", "=", "0", "\n", "# initialize new empty lists for simplified results", "\n", "sim_dur", "=", "[", "]", "\n", "sim_x", "=", "[", "]", "\n", "sim_y", "=", "[", "]", "\n", "sim_lenx", "=", "[", "]", "\n", "sim_leny", "=", "[", "]", "\n", "sim_theta", "=", "[", "]", "\n", "sim_len", "=", "[", "]", "\n", "# while we don't run into index errors", "\n", "while", "i", "<=", "len", "(", "data", "[", "'saccade_x'", "]", ")", "-", "1", ":", "\n", "# if saccade is the last one", "\n", "            ", "if", "i", "==", "len", "(", "data", "[", "'saccade_x'", "]", ")", "-", "1", ":", "\n", "# and if saccade has short length:", "\n", "                ", "if", "data", "[", "'saccade_rho'", "]", "[", "i", "]", "<", "TAmp", ":", "\n", "# and if the fixation duration is short:", "\n", "                    ", "if", "(", "data", "[", "'fixation_dur'", "]", "[", "-", "1", "]", "<", "TDur", ")", "or", "(", "data", "[", "'fixation_dur'", "]", "[", "-", "2", "]", "<", "TDur", ")", ":", "\n", "# calculate sum of local vectors for simplification", "\n", "                        ", "v_x", "=", "data", "[", "'saccade_lenx'", "]", "[", "-", "2", "]", "+", "data", "[", "'saccade_lenx'", "]", "[", "-", "1", "]", "\n", "v_y", "=", "data", "[", "'saccade_leny'", "]", "[", "-", "2", "]", "+", "data", "[", "'saccade_leny'", "]", "[", "-", "1", "]", "\n", "rho", ",", "theta", "=", "cart2pol", "(", "v_x", ",", "v_y", ")", "\n", "# save them in the new vectors", "\n", "sim_lenx", "[", "j", "-", "1", "]", "=", "v_x", "\n", "sim_leny", "[", "j", "-", "1", "]", "=", "v_y", "\n", "sim_theta", "[", "j", "-", "1", "]", "=", "theta", "\n", "sim_len", "[", "j", "-", "1", "]", "=", "rho", "\n", "sim_dur", ".", "insert", "(", "j", ",", "data", "[", "'fixation_dur'", "]", "[", "i", "-", "1", "]", ")", "\n", "j", "-=", "1", "\n", "i", "+=", "1", "\n", "# if fixation duration is long:", "\n", "", "else", ":", "\n", "# insert original data in new list -- no simplification", "\n", "                        ", "sim_lenx", ",", "sim_leny", ",", "sim_x", ",", "sim_y", ",", "sim_theta", ",", "sim_len", ",", "sim_dur", ",", "i", ",", "j", "=", "keepsaccade", "(", "i", ",", "\n", "j", ",", "\n", "sim_lenx", ",", "\n", "sim_leny", ",", "\n", "sim_x", ",", "\n", "sim_y", ",", "\n", "sim_theta", ",", "\n", "sim_len", ",", "\n", "sim_dur", ",", "\n", "data", ")", "\n", "# if saccade doesn't have short length:", "\n", "", "", "else", ":", "\n", "# insert original data in new list -- no simplification", "\n", "                    ", "sim_lenx", ",", "sim_leny", ",", "sim_x", ",", "sim_y", ",", "sim_theta", ",", "sim_len", ",", "sim_dur", ",", "i", ",", "j", "=", "keepsaccade", "(", "i", ",", "\n", "j", ",", "\n", "sim_lenx", ",", "\n", "sim_leny", ",", "\n", "sim_x", ",", "\n", "sim_y", ",", "\n", "sim_theta", ",", "\n", "sim_len", ",", "\n", "sim_dur", ",", "\n", "data", ")", "\n", "# if saccade is not the last one", "\n", "", "", "else", ":", "\n", "# and if saccade has short length", "\n", "                ", "if", "(", "data", "[", "'saccade_rho'", "]", "[", "i", "]", "<", "TAmp", ")", "and", "(", "i", "<", "len", "(", "data", "[", "'saccade_x'", "]", ")", "-", "1", ")", ":", "\n", "# and if fixation durations are short", "\n", "                    ", "if", "(", "data", "[", "'fixation_dur'", "]", "[", "i", "+", "1", "]", "<", "TDur", ")", "or", "(", "data", "[", "'fixation_dur'", "]", "[", "i", "]", "<", "TDur", ")", ":", "\n", "# calculate sum of local vectors in x and y length for simplification", "\n", "                        ", "v_x", "=", "data", "[", "'saccade_lenx'", "]", "[", "i", "]", "+", "data", "[", "'saccade_lenx'", "]", "[", "i", "+", "1", "]", "\n", "v_y", "=", "data", "[", "'saccade_leny'", "]", "[", "i", "]", "+", "data", "[", "'saccade_leny'", "]", "[", "i", "+", "1", "]", "\n", "rho", ",", "theta", "=", "cart2pol", "(", "v_x", ",", "v_y", ")", "\n", "# save them in the new vectors", "\n", "sim_lenx", ".", "insert", "(", "j", ",", "v_x", ")", "\n", "sim_leny", ".", "insert", "(", "j", ",", "v_y", ")", "\n", "sim_x", ".", "insert", "(", "j", ",", "data", "[", "'saccade_x'", "]", "[", "i", "]", ")", "\n", "sim_y", ".", "insert", "(", "j", ",", "data", "[", "'saccade_y'", "]", "[", "i", "]", ")", "\n", "sim_theta", ".", "insert", "(", "j", ",", "theta", ")", "\n", "sim_len", ".", "insert", "(", "j", ",", "rho", ")", "\n", "# add the old fixation duration", "\n", "sim_dur", ".", "insert", "(", "j", ",", "data", "[", "'fixation_dur'", "]", "[", "i", "]", ")", "\n", "i", "+=", "2", "\n", "j", "+=", "1", "\n", "# if fixation durations are long", "\n", "", "else", ":", "\n", "# insert original data in new lists -- no simplification", "\n", "                        ", "sim_lenx", ",", "sim_leny", ",", "sim_x", ",", "sim_y", ",", "sim_theta", ",", "sim_len", ",", "sim_dur", ",", "i", ",", "j", "=", "keepsaccade", "(", "i", ",", "\n", "j", ",", "\n", "sim_lenx", ",", "\n", "sim_leny", ",", "\n", "sim_x", ",", "\n", "sim_y", ",", "\n", "sim_theta", ",", "\n", "sim_len", ",", "\n", "sim_dur", ",", "\n", "data", ")", "\n", "# if saccade doesn't have short length", "\n", "", "", "else", ":", "\n", "# insert original data in new list -- no simplification", "\n", "                    ", "sim_lenx", ",", "sim_leny", ",", "sim_x", ",", "sim_y", ",", "sim_theta", ",", "sim_len", ",", "sim_dur", ",", "i", ",", "j", "=", "keepsaccade", "(", "i", ",", "\n", "j", ",", "\n", "sim_lenx", ",", "\n", "sim_leny", ",", "\n", "sim_x", ",", "\n", "sim_y", ",", "\n", "sim_theta", ",", "\n", "sim_len", ",", "\n", "sim_dur", ",", "\n", "data", ")", "\n", "# append the last fixation duration", "\n", "", "", "", "", "sim_dur", ".", "append", "(", "data", "[", "'fixation_dur'", "]", "[", "-", "1", "]", ")", "\n", "# append everything into an ordered dict.", "\n", "eyedata", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "eyedata", "[", "'fixation_dur'", "]", "=", "sim_dur", "\n", "eyedata", "[", "'saccade_x'", "]", "=", "sim_x", "\n", "eyedata", "[", "'saccade_y'", "]", "=", "sim_y", "\n", "eyedata", "[", "'saccade_lenx'", "]", "=", "sim_lenx", "\n", "eyedata", "[", "'saccade_leny'", "]", "=", "sim_leny", "\n", "eyedata", "[", "'saccade_theta'", "]", "=", "sim_theta", "\n", "eyedata", "[", "'saccade_rho'", "]", "=", "sim_len", "\n", "return", "eyedata", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.simdir": [[273, 400], ["sim_dur.append", "collections.OrderedDict", "len", "len", "multimatch.calcangle", "float", "len", "multimatch.cart2pol", "sim_lenx.insert", "sim_leny.insert", "sim_x.insert", "sim_y.insert", "sim_theta.insert", "sim_len.insert", "sim_dur.insert", "multimatch.keepsaccade", "multimatch.keepsaccade", "len", "multimatch.cart2pol", "sim_dur.insert", "multimatch.keepsaccade", "len"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.calcangle", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cart2pol", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.keepsaccade", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.keepsaccade", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cart2pol", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.keepsaccade"], ["", "def", "simdir", "(", "data", ",", "\n", "TDir", ",", "\n", "TDur", "\n", ")", ":", "\n", "    ", "\"\"\"Simplify scanpaths based on angular relations between saccades (direction).\n\n    Simplify consecutive saccades if the angle between them is smaller than the\n    threshold TDir and the duration of the intermediate fixations is lower\n    than threshold TDur.\n\n    :param: data: array-like, list of lists, output of gen_scanpath_structure\n    :param: TDir: float, angle in degrees\n    :param: TDur: float, time in seconds\n\n    :return: eyedata: list of lists, one iteration of direction based simplification\n    \"\"\"", "\n", "\n", "if", "len", "(", "data", "[", "'saccade_x'", "]", ")", "<", "1", ":", "\n", "        ", "return", "data", "\n", "# if the scanpath is long enough", "\n", "", "else", ":", "\n", "        ", "i", "=", "0", "\n", "j", "=", "0", "\n", "# initialize empty lists", "\n", "sim_dur", "=", "[", "]", "\n", "sim_x", "=", "[", "]", "\n", "sim_y", "=", "[", "]", "\n", "sim_lenx", "=", "[", "]", "\n", "sim_leny", "=", "[", "]", "\n", "sim_theta", "=", "[", "]", "\n", "sim_len", "=", "[", "]", "\n", "# while we don't run into index errors", "\n", "while", "i", "<=", "len", "(", "data", "[", "'saccade_x'", "]", ")", "-", "1", ":", "\n", "            ", "if", "i", "<", "len", "(", "data", "[", "'saccade_x'", "]", ")", "-", "1", ":", "\n", "# lets check angles", "\n", "                ", "v1", "=", "[", "data", "[", "'saccade_lenx'", "]", "[", "i", "]", ",", "data", "[", "'saccade_leny'", "]", "[", "i", "]", "]", "\n", "v2", "=", "[", "data", "[", "'saccade_lenx'", "]", "[", "i", "+", "1", "]", ",", "data", "[", "'saccade_leny'", "]", "[", "i", "+", "1", "]", "]", "\n", "angle", "=", "calcangle", "(", "v1", ",", "v2", ")", "\n", "", "else", ":", "\n", "# an angle of infinite size won't go into any further loop", "\n", "                ", "angle", "=", "float", "(", "'inf'", ")", "\n", "# if the angle is small and its not the last saccade", "\n", "", "if", "(", "angle", "<", "TDir", ")", "&", "(", "i", "<", "len", "(", "data", "[", "'saccade_x'", "]", ")", "-", "1", ")", ":", "\n", "# if the fixation duration is short:", "\n", "                ", "if", "data", "[", "'fixation_dur'", "]", "[", "i", "+", "1", "]", "<", "TDur", ":", "\n", "# if the fixation durations are short:", "\n", "# calculate the sum of local vectors", "\n", "                    ", "v_x", "=", "data", "[", "'saccade_lenx'", "]", "[", "i", "]", "+", "data", "[", "'saccade_lenx'", "]", "[", "i", "+", "1", "]", "\n", "v_y", "=", "data", "[", "'saccade_leny'", "]", "[", "i", "]", "+", "data", "[", "'saccade_leny'", "]", "[", "i", "+", "1", "]", "\n", "rho", ",", "theta", "=", "cart2pol", "(", "v_x", ",", "v_y", ")", "\n", "# save them in the new vectors", "\n", "sim_lenx", ".", "insert", "(", "j", ",", "v_x", ")", "\n", "sim_leny", ".", "insert", "(", "j", ",", "v_y", ")", "\n", "sim_x", ".", "insert", "(", "j", ",", "data", "[", "'saccade_x'", "]", "[", "i", "]", ")", "\n", "sim_y", ".", "insert", "(", "j", ",", "data", "[", "'saccade_y'", "]", "[", "i", "]", ")", "\n", "sim_theta", ".", "insert", "(", "j", ",", "theta", ")", "\n", "sim_len", ".", "insert", "(", "j", ",", "rho", ")", "\n", "# add the fixation duration", "\n", "sim_dur", ".", "insert", "(", "j", ",", "data", "[", "'fixation_dur'", "]", "[", "i", "]", ")", "\n", "i", "+=", "2", "\n", "j", "+=", "1", "\n", "", "else", ":", "\n", "# insert original data in new list -- no simplification", "\n", "                    ", "sim_lenx", ",", "sim_leny", ",", "sim_x", ",", "sim_y", ",", "sim_theta", ",", "sim_len", ",", "sim_dur", ",", "i", ",", "j", "=", "keepsaccade", "(", "i", ",", "\n", "j", ",", "\n", "sim_lenx", ",", "\n", "sim_leny", ",", "\n", "sim_x", ",", "\n", "sim_y", ",", "\n", "sim_theta", ",", "\n", "sim_len", ",", "\n", "sim_dur", ",", "\n", "data", ")", "\n", "# elif the angle is small, but its the last saccade:", "\n", "", "", "elif", "(", "angle", "<", "TDir", ")", "&", "(", "i", "==", "len", "(", "data", "[", "'saccade_x'", "]", ")", "-", "1", ")", ":", "\n", "# if the fixation duration is short:", "\n", "                ", "if", "data", "[", "'fixation_dur'", "]", "[", "i", "+", "1", "]", "<", "TDur", ":", "\n", "# calculate sum of local vectors", "\n", "                    ", "v_x", "=", "data", "[", "'saccade_lenx'", "]", "[", "i", "-", "2", "]", "+", "data", "[", "'saccade_lenx'", "]", "[", "i", "-", "1", "]", "\n", "v_y", "=", "data", "[", "'saccade_leny'", "]", "[", "i", "-", "2", "]", "+", "data", "[", "'saccade_leny'", "]", "[", "i", "-", "1", "]", "\n", "rho", ",", "theta", "=", "cart2pol", "(", "v_x", ",", "v_y", ")", "\n", "# save them in new vectors", "\n", "sim_lenx", "[", "j", "-", "1", "]", "=", "v_x", "\n", "sim_leny", "[", "j", "-", "1", "]", "=", "v_y", "\n", "sim_theta", "[", "j", "-", "1", "]", "=", "theta", "\n", "sim_len", "[", "j", "-", "1", "]", "=", "rho", "\n", "sim_dur", ".", "insert", "(", "j", ",", "data", "[", "'fixation_dur'", "]", "[", "-", "1", "]", "+", "(", "data", "[", "'fixation_dur'", "]", "[", "i", "]", "/", "2", ")", ")", "\n", "j", "-=", "1", "\n", "i", "+=", "1", "\n", "# if fixation duration is long:", "\n", "", "else", ":", "\n", "# insert original data in new list -- no simplification", "\n", "                    ", "sim_lenx", ",", "sim_leny", ",", "sim_x", ",", "sim_y", ",", "sim_theta", ",", "sim_len", ",", "sim_dur", ",", "i", ",", "j", "=", "keepsaccade", "(", "i", ",", "\n", "j", ",", "\n", "sim_lenx", ",", "\n", "sim_leny", ",", "\n", "sim_x", ",", "\n", "sim_y", ",", "\n", "sim_theta", ",", "\n", "sim_len", ",", "\n", "sim_dur", ",", "\n", "data", ")", "\n", "# else (the angle is too large", "\n", "", "", "else", ":", "\n", "# insert original data in new list -- no simplification", "\n", "                ", "sim_lenx", ",", "sim_leny", ",", "sim_x", ",", "sim_y", ",", "sim_theta", ",", "sim_len", ",", "sim_dur", ",", "i", ",", "j", "=", "keepsaccade", "(", "i", ",", "\n", "j", ",", "\n", "sim_lenx", ",", "\n", "sim_leny", ",", "\n", "sim_x", ",", "\n", "sim_y", ",", "\n", "sim_theta", ",", "\n", "sim_len", ",", "\n", "sim_dur", ",", "\n", "data", ")", "\n", "# now append the last fixation duration", "\n", "", "", "", "sim_dur", ".", "append", "(", "data", "[", "'fixation_dur'", "]", "[", "-", "1", "]", ")", "\n", "# append everything into an ordered dict.", "\n", "eyedata", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "eyedata", "[", "'fixation_dur'", "]", "=", "sim_dur", "\n", "eyedata", "[", "'saccade_x'", "]", "=", "sim_x", "\n", "eyedata", "[", "'saccade_y'", "]", "=", "sim_y", "\n", "eyedata", "[", "'saccade_lenx'", "]", "=", "sim_lenx", "\n", "eyedata", "[", "'saccade_leny'", "]", "=", "sim_leny", "\n", "eyedata", "[", "'saccade_theta'", "]", "=", "sim_theta", "\n", "eyedata", "[", "'saccade_rho'", "]", "=", "sim_len", "\n", "return", "eyedata", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.simplify_scanpath": [[402, 426], ["multimatch.simdir", "multimatch.simlen", "len"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.simdir", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.simlen"], ["", "def", "simplify_scanpath", "(", "data", ",", "\n", "TAmp", ",", "\n", "TDir", ",", "\n", "TDur", "\n", ")", ":", "\n", "    ", "\"\"\"Simplify scanpaths until no further simplification is possible.\n\n    Loops over simplification functions simdir and simlen until no\n    further simplification of the scanpath is possible.\n\n    :param: data: list of lists, output of gen_scanpath_structure\n    :param: TAmp: float, length in px\n    :param: TDir: float, angle in degrees\n    :param: TDur: float, duration in seconds\n\n    :return: eyedata: list of lists, simplified vector-based scanpath representation\n    \"\"\"", "\n", "looptime", "=", "0", "\n", "while", "True", ":", "\n", "        ", "data", "=", "simdir", "(", "data", ",", "TDir", ",", "TDur", ")", "\n", "data", "=", "simlen", "(", "data", ",", "TAmp", ",", "TDur", ")", "\n", "looptime", "+=", "1", "\n", "if", "looptime", "==", "len", "(", "data", "[", "'fixation_dur'", "]", ")", ":", "\n", "            ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cal_vectordifferences": [[428, 459], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "range", "len", "abs", "abs", "row.append", "numpy.stack", "numpy.asarray", "numpy.sqrt", "numpy.ones", "numpy.ones", "len", "len"], "function", ["None"], ["", "", "", "def", "cal_vectordifferences", "(", "data1", ",", "\n", "data2", "\n", ")", ":", "\n", "    ", "\"\"\"Create matrix of vector-length differences of all vector pairs\n\n    Create M, a Matrix with all possible saccade-length differences between\n    saccade pairs.\n\n    :param: data1, data2: list of lists, vector-based scanpath representations\n\n    :return: M: array-like\n        Matrix of vector length differences\n\n    \"\"\"", "\n", "# take length in x and y direction of both scanpaths", "\n", "x1", "=", "np", ".", "asarray", "(", "data1", "[", "'saccade_lenx'", "]", ")", "\n", "x2", "=", "np", ".", "asarray", "(", "data2", "[", "'saccade_lenx'", "]", ")", "\n", "y1", "=", "np", ".", "asarray", "(", "data1", "[", "'saccade_leny'", "]", ")", "\n", "y2", "=", "np", ".", "asarray", "(", "data2", "[", "'saccade_leny'", "]", ")", "\n", "# initialize empty lists M and row, will become matrix to store sacc-length", "\n", "# pairings", "\n", "M", "=", "[", "]", "\n", "row", "=", "[", "]", "\n", "# calculate saccade length differences, vectorized", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "x1", ")", ")", ":", "\n", "        ", "x_diff", "=", "abs", "(", "x1", "[", "i", "]", "*", "np", ".", "ones", "(", "len", "(", "x2", ")", ")", "-", "x2", ")", "\n", "y_diff", "=", "abs", "(", "y1", "[", "i", "]", "*", "np", ".", "ones", "(", "len", "(", "y2", ")", ")", "-", "y2", ")", "\n", "# calc final length from x and y lengths, append, stack into matrix M", "\n", "row", ".", "append", "(", "np", ".", "asarray", "(", "np", ".", "sqrt", "(", "x_diff", "**", "2", "+", "y_diff", "**", "2", ")", ")", ")", "\n", "M", "=", "np", ".", "stack", "(", "row", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.createdirectedgraph": [[461, 528], ["range", "range", "range", "range", "range", "len", "weightedEdges.append", "len", "dict", "list", "zip", "list", "list", "adjacent.values", "weight.values"], "function", ["None"], ["", "def", "createdirectedgraph", "(", "szM", ",", "\n", "M", ",", "\n", "M_assignment", "\n", ")", ":", "\n", "    ", "\"\"\"Create a directed graph:\n    The data structure of the result is a dicitionary within a dictionary\n    such as\n    weightedGraph = {0 : {1:259.55, 15:48.19, 16:351.95},\n    1 : {2:249.354, 16:351.951, 17:108.97},\n    2 : {3:553.30, 17:108.97, 18:341.78}, ...}\n\n    It defines the possible nodes to reach from a particular node, and the weight that\n    is associated with the path to each of the possible nodes.\n\n    :param: szM: list, shape of matrix M\n    :param: M: array-like, matrix of vector length differences\n    :param: M_assignment: array-like, Matrix, arranged with values from 0 to number of entries in M\n\n    :return: weighted graph: dict, Dictionary within a dictionary pairing weights (distances) with\n            node-pairings\n\n    \"\"\"", "\n", "\n", "# initialize dictionary for neighbouring vertices and edge weights", "\n", "adjacent", "=", "{", "}", "\n", "weight", "=", "{", "}", "\n", "# loop through every node rowwise", "\n", "for", "i", "in", "range", "(", "0", ",", "szM", "[", "0", "]", ")", ":", "\n", "# loop through every node columnwise", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "szM", "[", "1", "]", ")", ":", "\n", "            ", "currentNode", "=", "i", "*", "szM", "[", "1", "]", "+", "j", "\n", "# if in the last (bottom) row, only go right", "\n", "if", "(", "i", "==", "szM", "[", "0", "]", "-", "1", ")", "&", "(", "j", "<", "szM", "[", "1", "]", "-", "1", ")", ":", "\n", "                ", "adjacent", "[", "M_assignment", "[", "i", ",", "j", "]", "]", "=", "[", "currentNode", "+", "1", "]", "\n", "weight", "[", "M_assignment", "[", "i", ",", "j", "]", "]", "=", "[", "M", "[", "i", ",", "j", "+", "1", "]", "]", "\n", "# if in the last (rightmost) column, only go down", "\n", "", "elif", "(", "i", "<", "szM", "[", "0", "]", "-", "1", ")", "&", "(", "j", "==", "szM", "[", "1", "]", "-", "1", ")", ":", "\n", "                ", "adjacent", "[", "M_assignment", "[", "i", ",", "j", "]", "]", "=", "[", "currentNode", "+", "szM", "[", "1", "]", "]", "\n", "weight", "[", "M_assignment", "[", "i", ",", "j", "]", "]", "=", "[", "M", "[", "i", "+", "1", ",", "j", "]", "]", "\n", "# if in the last (bottom-right) vertex, do not move any further", "\n", "", "elif", "(", "i", "==", "szM", "[", "0", "]", "-", "1", ")", "&", "(", "j", "==", "szM", "[", "1", "]", "-", "1", ")", ":", "\n", "                ", "adjacent", "[", "M_assignment", "[", "i", ",", "j", "]", "]", "=", "[", "currentNode", "]", "\n", "weight", "[", "M_assignment", "[", "i", ",", "j", "]", "]", "=", "[", "0", "]", "\n", "# anywhere else, move right, down and down-right.", "\n", "", "else", ":", "\n", "                ", "adjacent", "[", "M_assignment", "[", "i", ",", "j", "]", "]", "=", "[", "currentNode", "+", "1", ",", "\n", "currentNode", "+", "szM", "[", "1", "]", ",", "\n", "currentNode", "+", "szM", "[", "1", "]", "+", "1", "]", "\n", "weight", "[", "M_assignment", "[", "i", ",", "j", "]", "]", "=", "[", "M", "[", "i", ",", "j", "+", "1", "]", ",", "\n", "M", "[", "i", "+", "1", ",", "j", "]", ",", "\n", "M", "[", "i", "+", "1", ",", "j", "+", "1", "]", "]", "\n", "# create ascending list ranging from first to last node - this", "\n", "#  will be the first key in the nested dict", "\n", "", "", "", "Startnodes", "=", "range", "(", "0", ",", "szM", "[", "0", "]", "*", "szM", "[", "1", "]", ")", "\n", "# initialize list with adjacent nodes (adjacent to each startnode)", "\n", "# and the weights associated with the paths between them", "\n", "weightedEdges", "=", "[", "]", "\n", "# zip Nodes and weights", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "adjacent", ")", ")", ":", "\n", "        ", "weightedEdges", ".", "append", "(", "list", "(", "zip", "(", "list", "(", "adjacent", ".", "values", "(", ")", ")", "[", "i", "]", ",", "\n", "list", "(", "weight", ".", "values", "(", ")", ")", "[", "i", "]", ")", ")", ")", "\n", "# initialize final dictionary", "\n", "", "weightedGraph", "=", "{", "}", "\n", "# zip Startnodes together with Nodes-Weights, result is a nested dict", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "weightedEdges", ")", ")", ":", "\n", "        ", "weightedGraph", "[", "Startnodes", "[", "i", "]", "]", "=", "dict", "(", "weightedEdges", "[", "i", "]", ")", "\n", "", "return", "weightedGraph", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.dijkstra": [[530, 581], ["weightedGraph.keys", "float", "len", "len", "min", "sp_set.append", "path.append"], "function", ["None"], ["", "def", "dijkstra", "(", "weightedGraph", ",", "\n", "start", ",", "\n", "end", "\n", ")", ":", "\n", "    ", "\"\"\"Implementation of Dijkstra algorithm:\n    Use the dijkstra algorithm to find the shortest path through a directed\n    graph (weightedGraph) from start to end.\n\n    :param: weightedGraph: dict, dictionary within a dictionary pairing weights (distances) with\n        node-pairings\n    :param: start: int, starting point of path, should be 0\n    :param: end: int, end point of path, should be (n, m) of Matrix M\n\n    :return: path: array-like, array of indices of the shortest path, i.e. best-fitting saccade pairs\n    :return: dist: float, sum of weights\n\n    \"\"\"", "\n", "\n", "# initialize empty dictionary to hold distances", "\n", "dist", "=", "{", "}", "\n", "# inialize list of vertices in the path to current vertex (predecessors)", "\n", "pred", "=", "{", "}", "\n", "# where do I need to go still?", "\n", "to_assess", "=", "weightedGraph", ".", "keys", "(", ")", "\n", "for", "node", "in", "weightedGraph", ":", "\n", "# set inital distances to infinity", "\n", "        ", "dist", "[", "node", "]", "=", "float", "(", "'inf'", ")", "\n", "# no node has any predecessors yet", "\n", "pred", "[", "node", "]", "=", "None", "\n", "# initialize list to be filled with final distances(weights) of nodes", "\n", "", "sp_set", "=", "[", "]", "\n", "# the starting node gets a weight of 0 to make sure to start there", "\n", "dist", "[", "start", "]", "=", "0", "\n", "# continue the algorithm as long as there are still unexplored nodes", "\n", "while", "len", "(", "sp_set", ")", "<", "len", "(", "to_assess", ")", ":", "\n", "        ", "still_in", "=", "{", "node", ":", "dist", "[", "node", "]", "for", "node", "in", "[", "node", "for", "node", "in", "to_assess", "if", "\n", "node", "not", "in", "sp_set", "]", "}", "\n", "# find adjacent node with minimal weight and append to sp_set", "\n", "closest", "=", "min", "(", "still_in", ",", "key", "=", "dist", ".", "get", ")", "\n", "sp_set", ".", "append", "(", "closest", ")", "\n", "for", "node", "in", "weightedGraph", "[", "closest", "]", ":", "\n", "            ", "if", "dist", "[", "node", "]", ">", "dist", "[", "closest", "]", "+", "weightedGraph", "[", "closest", "]", "[", "node", "]", ":", "\n", "                ", "dist", "[", "node", "]", "=", "dist", "[", "closest", "]", "+", "weightedGraph", "[", "closest", "]", "[", "node", "]", "\n", "pred", "[", "node", "]", "=", "closest", "\n", "# append endnode to list path", "\n", "", "", "", "path", "=", "[", "end", "]", "\n", "# append contents of pred in reversed order to path", "\n", "while", "start", "not", "in", "path", ":", "\n", "        ", "path", ".", "append", "(", "pred", "[", "path", "[", "-", "1", "]", "]", ")", "\n", "# return path in reverse order (begin to end) and final distance", "\n", "", "return", "path", "[", ":", ":", "-", "1", "]", ",", "dist", "[", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cal_angulardifference": [[583, 623], ["range", "len", "numpy.where", "range", "abs", "anglediff.append", "len", "numpy.asscalar", "numpy.asscalar"], "function", ["None"], ["", "def", "cal_angulardifference", "(", "data1", ",", "\n", "data2", ",", "\n", "path", ",", "\n", "M_assignment", "\n", ")", ":", "\n", "    ", "\"\"\"Calculate angular similarity of two scanpaths:\n\n    :param: data1: array-like, list of lists, contains vector-based scanpath representation of the\n        first scanpath\n    :param: data2: array-like, list of lists, contains vector-based scanpath representation of the\n        second scanpath\n    :param: path: array-like, array of indices for the best-fitting saccade pairings between scan-\n        paths\n    :param: M_assignment: array-like, Matrix, arranged with values from 0 to number of entries in\n        M, the matrix of vector length similarities\n\n    :return: anglediff: array of floats, array of angular differences between pairs of saccades\n        of two scanpaths\n\n    \"\"\"", "\n", "# get the angle between saccades from the scanpaths", "\n", "theta1", "=", "data1", "[", "'saccade_theta'", "]", "\n", "theta2", "=", "data2", "[", "'saccade_theta'", "]", "\n", "# initialize list to hold individual angle differences", "\n", "anglediff", "=", "[", "]", "\n", "# calculate angular differences between the saccades along specified path", "\n", "for", "k", "in", "range", "(", "0", ",", "len", "(", "path", ")", ")", ":", "\n", "# which saccade indices correspond to path?", "\n", "        ", "i", ",", "j", "=", "np", ".", "where", "(", "M_assignment", "==", "path", "[", "k", "]", ")", "\n", "# extract the angle", "\n", "spT", "=", "[", "theta1", "[", "np", ".", "asscalar", "(", "i", ")", "]", ",", "theta2", "[", "np", ".", "asscalar", "(", "j", ")", "]", "]", "\n", "for", "t", "in", "range", "(", "0", ",", "len", "(", "spT", ")", ")", ":", "\n", "# get results in range -pi, pi", "\n", "            ", "if", "spT", "[", "t", "]", "<", "0", ":", "\n", "                ", "spT", "[", "t", "]", "=", "math", ".", "pi", "+", "(", "math", ".", "pi", "+", "spT", "[", "t", "]", ")", "\n", "", "", "spT", "=", "abs", "(", "spT", "[", "0", "]", "-", "spT", "[", "1", "]", ")", "\n", "if", "spT", ">", "math", ".", "pi", ":", "\n", "            ", "spT", "=", "2", "*", "math", ".", "pi", "-", "spT", "\n", "", "anglediff", ".", "append", "(", "spT", ")", "\n", "", "return", "anglediff", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cal_durationdifference": [[625, 664], ["range", "len", "numpy.where", "durdiff.append", "abs", "abs", "numpy.asscalar", "numpy.asscalar", "max", "numpy.asscalar", "numpy.asscalar"], "function", ["None"], ["", "def", "cal_durationdifference", "(", "data1", ",", "\n", "data2", ",", "\n", "path", ",", "\n", "M_assignment", "\n", ")", ":", "\n", "    ", "\"\"\"Calculate similarity of two scanpaths fixation durations.\n\n    :param: data1: array-like\n        list of lists, contains vector-based scanpath representation of the\n        first scanpath\n    :param: data2: array-like\n        list of lists, contains vector-based scanpath representation of the\n        second scanpath\n    :param: path: array-like\n        array of indices for the best-fitting saccade pairings between scan-\n        paths\n    :param: M_assignment: array-like\n         Matrix, arranged with values from 0 to number of entries in M, the\n         matrix of vector length similarities\n\n    :return: durdiff: array of floats,\n        array of fixation duration differences between pairs of saccades from\n        two scanpaths\n\n    \"\"\"", "\n", "# get the duration of fixations in the scanpath", "\n", "dur1", "=", "data1", "[", "'fixation_dur'", "]", "\n", "dur2", "=", "data2", "[", "'fixation_dur'", "]", "\n", "# initialize list to hold individual duration differences", "\n", "durdiff", "=", "[", "]", "\n", "# calculation fixation duration differences between saccades along path", "\n", "for", "k", "in", "range", "(", "0", ",", "len", "(", "path", ")", ")", ":", "\n", "# which saccade indices correspond to path?", "\n", "        ", "i", ",", "j", "=", "np", ".", "where", "(", "M_assignment", "==", "path", "[", "k", "]", ")", "\n", "maxlist", "=", "[", "dur1", "[", "np", ".", "asscalar", "(", "i", ")", "]", ",", "dur2", "[", "np", ".", "asscalar", "(", "j", ")", "]", "]", "\n", "# compute abs. duration diff, normalize by largest duration in pair", "\n", "durdiff", ".", "append", "(", "abs", "(", "dur1", "[", "np", ".", "asscalar", "(", "i", ")", "]", "-", "\n", "dur2", "[", "np", ".", "asscalar", "(", "j", ")", "]", ")", "/", "abs", "(", "max", "(", "maxlist", ")", ")", ")", "\n", "", "return", "durdiff", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cal_lengthdifference": [[666, 700], ["numpy.asarray", "numpy.asarray", "range", "len", "numpy.where", "lendiff.append", "abs"], "function", ["None"], ["", "def", "cal_lengthdifference", "(", "data1", ",", "\n", "data2", ",", "\n", "path", ",", "\n", "M_assignment", "\n", ")", ":", "\n", "    ", "\"\"\"Calculate length similarity of two scanpaths.\n\n    :param: data1: array-like\n        list of lists, contains vector-based scanpath representation of the\n        first scanpath\n    :param: data2: array-like\n        list of lists, contains vector-based scanpath representation of the\n        second scanpath\n    :param: path: array-like\n        array of indices for the best-fitting saccade pairings between scan-\n        paths\n    :param: M_assignment: array-like\n         Matrix, arranged with values from 0 to number of entries in M, the\n         matrix of vector length similarities\n\n    :return: lendiff: array of floats\n        array of length difference between pairs of saccades of two scanpaths\n\n    \"\"\"", "\n", "# get the saccade lengths rho", "\n", "len1", "=", "np", ".", "asarray", "(", "data1", "[", "'saccade_rho'", "]", ")", "\n", "len2", "=", "np", ".", "asarray", "(", "data2", "[", "'saccade_rho'", "]", ")", "\n", "# initialize list to hold individual length differences", "\n", "lendiff", "=", "[", "]", "\n", "# calculate length differences between saccades along path", "\n", "for", "k", "in", "range", "(", "0", ",", "len", "(", "path", ")", ")", ":", "\n", "        ", "i", ",", "j", "=", "np", ".", "where", "(", "M_assignment", "==", "path", "[", "k", "]", ")", "\n", "lendiff", ".", "append", "(", "abs", "(", "len1", "[", "i", "]", "-", "len2", "[", "j", "]", ")", ")", "\n", "", "return", "lendiff", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cal_positiondifference": [[702, 740], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "range", "len", "numpy.where", "posdiff.append", "math.sqrt", "numpy.asscalar", "numpy.asscalar", "numpy.asscalar", "numpy.asscalar"], "function", ["None"], ["", "def", "cal_positiondifference", "(", "data1", ",", "\n", "data2", ",", "\n", "path", ",", "\n", "M_assignment", "\n", ")", ":", "\n", "    ", "\"\"\"Calculate position similarity of two scanpaths.\n\n    :param: data1: array-like\n        list of lists, contains vector-based scanpath representation of the\n        first scanpath\n    :param: data2: array-like\n        list of lists, contains vector-based scanpath representation of the\n        second scanpath\n    :param: path: array-like\n        array of indices for the best-fitting saccade pairings between scan-\n        paths\n    :param: M_assignment: array-like\n         Matrix, arranged with values from 0 to number of entries in M, the\n         matrix of vector length similarities\n\n    :return: posdiff: array of floats\n        array of position differences between pairs of saccades\n        of two scanpaths\n\n    \"\"\"", "\n", "# get the x and y coordinates of points between saccades", "\n", "x1", "=", "np", ".", "asarray", "(", "data1", "[", "'saccade_x'", "]", ")", "\n", "x2", "=", "np", ".", "asarray", "(", "data2", "[", "'saccade_x'", "]", ")", "\n", "y1", "=", "np", ".", "asarray", "(", "data1", "[", "'saccade_y'", "]", ")", "\n", "y2", "=", "np", ".", "asarray", "(", "data2", "[", "'saccade_y'", "]", ")", "\n", "# initialize list to hold individual position differences", "\n", "posdiff", "=", "[", "]", "\n", "# calculate position differences along path", "\n", "for", "k", "in", "range", "(", "0", ",", "len", "(", "path", ")", ")", ":", "\n", "        ", "i", ",", "j", "=", "np", ".", "where", "(", "M_assignment", "==", "path", "[", "k", "]", ")", "\n", "posdiff", ".", "append", "(", "math", ".", "sqrt", "(", "(", "x1", "[", "np", ".", "asscalar", "(", "i", ")", "]", "-", "x2", "[", "np", ".", "asscalar", "(", "j", ")", "]", ")", "**", "2", "+", "\n", "(", "y1", "[", "np", ".", "asscalar", "(", "i", ")", "]", "-", "y2", "[", "np", ".", "asscalar", "(", "j", ")", "]", ")", "**", "2", ")", ")", "\n", "", "return", "posdiff", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cal_vectordifferencealongpath": [[742, 779], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "range", "len", "numpy.where", "vectordiff.append", "numpy.sqrt", "numpy.asscalar", "numpy.asscalar", "numpy.asscalar", "numpy.asscalar"], "function", ["None"], ["", "def", "cal_vectordifferencealongpath", "(", "data1", ",", "\n", "data2", ",", "\n", "path", ",", "\n", "M_assignment", "\n", ")", ":", "\n", "    ", "\"\"\"Calculate vector similarity of two scanpaths.\n\n    :param: data1: array-like\n        list of lists, contains vector-based scanpath representation of the\n        first scanpath\n    :param: data2: array-like\n        list of lists, contains vector-based scanpath representation of the\n        second scanpath\n    :param: path: array-like\n        array of indices for the best-fitting saccade pairings between scan-\n        paths\n    :param: M_assignment: array-like\n         Matrix, arranged with values from 0 to number of entries in M, the\n         matrix of vector length similarities\n\n    :return: vectordiff: array of floats\n            array of vector differences between pairs of saccades of two scanpaths\n\n    \"\"\"", "\n", "# get the saccade lengths in x and y direction of both scanpaths", "\n", "x1", "=", "np", ".", "asarray", "(", "data1", "[", "'saccade_lenx'", "]", ")", "\n", "x2", "=", "np", ".", "asarray", "(", "data2", "[", "'saccade_lenx'", "]", ")", "\n", "y1", "=", "np", ".", "asarray", "(", "data1", "[", "'saccade_leny'", "]", ")", "\n", "y2", "=", "np", ".", "asarray", "(", "data2", "[", "'saccade_leny'", "]", ")", "\n", "# initialize list to hold individual vector differences", "\n", "vectordiff", "=", "[", "]", "\n", "# calculate vector differences along path", "\n", "for", "k", "in", "range", "(", "0", ",", "len", "(", "path", ")", ")", ":", "\n", "        ", "i", ",", "j", "=", "np", ".", "where", "(", "M_assignment", "==", "path", "[", "k", "]", ")", "\n", "vectordiff", ".", "append", "(", "np", ".", "sqrt", "(", "(", "x1", "[", "np", ".", "asscalar", "(", "i", ")", "]", "-", "x2", "[", "np", ".", "asscalar", "(", "j", ")", "]", ")", "**", "2", "+", "\n", "(", "y1", "[", "np", ".", "asscalar", "(", "i", ")", "]", "-", "y2", "[", "np", ".", "asscalar", "(", "j", ")", "]", ")", "**", "2", ")", ")", "\n", "", "return", "vectordiff", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.getunnormalised": [[781, 818], ["numpy.median", "numpy.median", "numpy.median", "numpy.median", "numpy.median", "multimatch.cal_vectordifferencealongpath", "multimatch.cal_angulardifference", "multimatch.cal_lengthdifference", "multimatch.cal_positiondifference", "multimatch.cal_durationdifference"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cal_vectordifferencealongpath", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cal_angulardifference", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cal_lengthdifference", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cal_positiondifference", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cal_durationdifference"], ["", "def", "getunnormalised", "(", "data1", ",", "\n", "data2", ",", "\n", "path", ",", "\n", "M_assignment", "\n", ")", ":", "\n", "    ", "\"\"\"Calculate unnormalised similarity measures.\n\n    Calls the five functions to create unnormalised similarity measures for\n    each of the five similarity dimensions. Takes the median of the resulting\n    similarity values per array.\n\n    :param: data1: array-like\n        list of lists, contains vector-based scanpath representation of the\n        first scanpath\n    :param: data2: array-like\n        list of lists, contains vector-based scanpath representation of the\n        second scanpath\n    :param: path: array-like\n        array of indices for the best-fitting saccade pairings between scan-\n        paths\n    :param: M_assignment: array-like\n         Matrix, arranged with values from 0 to number of entries in M, the\n         matrix of vector length similarities\n\n    :return: unnormalised: array\n        array of unnormalised similarity measures on five dimensions\n\n    >>> unorm_res = getunnormalised(scanpath_rep1, scanpath_rep2, path, M_assignment)\n    \"\"\"", "\n", "args", "=", "data1", ",", "data2", ",", "path", ",", "M_assignment", "\n", "VecSim", "=", "np", ".", "median", "(", "cal_vectordifferencealongpath", "(", "*", "args", ")", ")", "\n", "DirSim", "=", "np", ".", "median", "(", "cal_angulardifference", "(", "*", "args", ")", ")", "\n", "LenSim", "=", "np", ".", "median", "(", "cal_lengthdifference", "(", "*", "args", ")", ")", "\n", "PosSim", "=", "np", ".", "median", "(", "cal_positiondifference", "(", "*", "args", ")", ")", "\n", "DurSim", "=", "np", ".", "median", "(", "cal_durationdifference", "(", "*", "args", ")", ")", "\n", "unnormalised", "=", "[", "VecSim", ",", "DirSim", ",", "LenSim", ",", "PosSim", ",", "DurSim", "]", "\n", "return", "unnormalised", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.normaliseresults": [[820, 854], ["math.sqrt", "math.sqrt", "math.sqrt"], "function", ["None"], ["", "def", "normaliseresults", "(", "unnormalised", ",", "\n", "sz", "=", "[", "1280", ",", "720", "]", "\n", ")", ":", "\n", "    ", "\"\"\"Normalize similarity measures.\n\n    Vector similarity is normalised against two times screen diagonal,\n    the maximum\n    theoretical distance.\n    Direction similarity is normalised against pi.\n    Length Similarity is normalised against screen diagonal.\n    Position Similarity and Duration Similarity are already normalised.\n\n    :param: unnormalised: array\n        array of unnormalised similarity measures,\n        output of getunnormalised()\n\n    :return: normalresults: array\n        array of normalised similarity measures\n\n    >>> normal_res = normaliseresults(unnormalised, sz = [1280, 720])\n    \"\"\"", "\n", "# normalize vector similarity against two times screen diagonal, the maximum", "\n", "# theoretical distance", "\n", "VectorSimilarity", "=", "1", "-", "unnormalised", "[", "0", "]", "/", "(", "2", "*", "math", ".", "sqrt", "(", "sz", "[", "0", "]", "**", "2", "+", "sz", "[", "1", "]", "**", "2", ")", ")", "\n", "# normalize against pi", "\n", "DirectionSimilarity", "=", "1", "-", "unnormalised", "[", "1", "]", "/", "math", ".", "pi", "\n", "# normalize against screen diagonal", "\n", "LengthSimilarity", "=", "1", "-", "unnormalised", "[", "2", "]", "/", "math", ".", "sqrt", "(", "sz", "[", "0", "]", "**", "2", "+", "sz", "[", "1", "]", "**", "2", ")", "\n", "PositionSimilarity", "=", "1", "-", "unnormalised", "[", "3", "]", "/", "math", ".", "sqrt", "(", "sz", "[", "0", "]", "**", "2", "+", "sz", "[", "1", "]", "**", "2", ")", "\n", "# no normalisazion necessary, already done", "\n", "DurationSimilarity", "=", "1", "-", "unnormalised", "[", "4", "]", "\n", "normalresults", "=", "[", "VectorSimilarity", ",", "DirectionSimilarity", ",", "LengthSimilarity", ",", "\n", "PositionSimilarity", ",", "DurationSimilarity", "]", "\n", "return", "normalresults", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.docomparison": [[856, 913], ["multimatch.gen_scanpath_structure", "multimatch.gen_scanpath_structure", "multimatch.cal_vectordifferences", "numpy.shape", "numpy.arange().reshape", "multimatch.createdirectedgraph", "multimatch.dijkstra", "multimatch.getunnormalised", "multimatch.normaliseresults", "scanpathcomparisons.append", "scanpathcomparisons.append", "len", "len", "multimatch.simplify_scanpath", "multimatch.simplify_scanpath", "numpy.repeat", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.gen_scanpath_structure", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.gen_scanpath_structure", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.cal_vectordifferences", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.createdirectedgraph", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.dijkstra", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.getunnormalised", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.normaliseresults", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.simplify_scanpath", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.multimatch.simplify_scanpath"], ["", "def", "docomparison", "(", "fixation_vectors1", ",", "\n", "fixation_vectors2", ",", "\n", "sz", "=", "[", "1280", ",", "720", "]", ",", "\n", "grouping", "=", "False", ",", "\n", "TDir", "=", "0.0", ",", "\n", "TDur", "=", "0.0", ",", "\n", "TAmp", "=", "0.0", "\n", ")", ":", "\n", "    ", "\"\"\"Compare two scanpaths on five similarity dimensions.\n\n\n    :param: fixation_vectors1: array-like n x 3 fixation vector of one scanpath\n    :param: fixation_vectors2: array-like n x 3 fixation vector of one scanpath\n    :param: sz: list, screen dimensions in px. Default: [1280, 720]\n    :param: grouping: boolean, if True, simplification is performed based on thresholds TAmp,\n        TDir, and TDur. Default: False\n    :param: TDir: float, Direction threshold, angle in degrees. Default: 0.0\n    :param: TDur: float,  Duration threshold, duration in seconds. Default: 0.0\n    :param: TAmp: float, Amplitude threshold, length in px. Default: 0.0\n\n    :return: scanpathcomparisons: array\n        array of 5 scanpath similarity measures. Vector (Shape), Direction\n        (Angle), Length, Position, and Duration. 1 means absolute similarity, 0 means\n        lowest similarity possible.\n\n    >>> results = docomparison(fix_1, fix_2, sz = [1280, 720], grouping = True, TDir = 45.0, TDur = 0.05, TAmp = 150)\n    >>> print(results)\n    >>> [[0.95075847681364678, 0.95637548674423822, 0.94082367355291008, 0.94491164030498609, 0.78260869565217384]]\n    \"\"\"", "\n", "# initialize result vector", "\n", "scanpathcomparisons", "=", "[", "]", "\n", "# check if fixation vectors/scanpaths are long enough", "\n", "if", "(", "len", "(", "fixation_vectors1", ")", ">=", "3", ")", "&", "(", "len", "(", "fixation_vectors2", ")", ">=", "3", ")", ":", "\n", "# get the data into a geometric representation", "\n", "        ", "subj1", "=", "gen_scanpath_structure", "(", "fixation_vectors1", ")", "\n", "subj2", "=", "gen_scanpath_structure", "(", "fixation_vectors2", ")", "\n", "if", "grouping", ":", "\n", "# simplify the data", "\n", "            ", "subj1", "=", "simplify_scanpath", "(", "subj1", ",", "TAmp", ",", "TDir", ",", "TDur", ")", "\n", "subj2", "=", "simplify_scanpath", "(", "subj2", ",", "TAmp", ",", "TDir", ",", "TDur", ")", "\n", "# create M, a matrix of all vector pairings length differences (weights)", "\n", "", "M", "=", "cal_vectordifferences", "(", "subj1", ",", "subj2", ")", "\n", "# initialize a matrix of size M for a matrix of nodes", "\n", "szM", "=", "np", ".", "shape", "(", "M", ")", "\n", "M_assignment", "=", "np", ".", "arange", "(", "szM", "[", "0", "]", "*", "szM", "[", "1", "]", ")", ".", "reshape", "(", "szM", "[", "0", "]", ",", "szM", "[", "1", "]", ")", "\n", "# create a weighted graph of all possible connections per Node, and their weight", "\n", "weightedGraph", "=", "createdirectedgraph", "(", "szM", ",", "M", ",", "M_assignment", ")", "\n", "# find the shortest path (= lowest sum of weights) through the graph", "\n", "path", ",", "dist", "=", "dijkstra", "(", "weightedGraph", ",", "0", ",", "szM", "[", "0", "]", "*", "szM", "[", "1", "]", "-", "1", ")", "\n", "# compute similarities on alinged scanpaths and normalize them", "\n", "unnormalised", "=", "getunnormalised", "(", "subj1", ",", "subj2", ",", "path", ",", "M_assignment", ")", "\n", "normal", "=", "normaliseresults", "(", "unnormalised", ",", "sz", ")", "\n", "scanpathcomparisons", ".", "append", "(", "normal", ")", "\n", "# return nan as result if at least one scanpath it too short", "\n", "", "else", ":", "\n", "        ", "scanpathcomparisons", ".", "append", "(", "np", ".", "repeat", "(", "np", ".", "nan", ",", "5", ")", ")", "\n", "", "return", "scanpathcomparisons", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.__init__": [[13, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "pa", ",", "\n", "max_step", ",", "\n", "mask_size", ",", "\n", "status_update_mtd", ",", "\n", "device", ",", "\n", "inhibit_return", "=", "False", ",", "\n", "init_mtd", "=", "'center'", ")", ":", "\n", "        ", "self", ".", "pa", "=", "pa", "\n", "self", ".", "init", "=", "init_mtd", "\n", "self", ".", "max_step", "=", "max_step", "+", "1", "# one more step to hold the initial step", "\n", "self", ".", "inhibit_return", "=", "inhibit_return", "\n", "self", ".", "mask_size", "=", "mask_size", "\n", "self", ".", "status_update_mtd", "=", "status_update_mtd", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.observe": [[29, 61], ["environment.IRL_Env4LHF.states.clone", "torch.sum", "range", "torch.stack", "float", "environment.IRL_Env4LHF.fixations[].to", "utils.foveal2mask", "torch.from_numpy().to", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.stack.append", "environment.IRL_Env4LHF.states.size", "px[].item", "py[].item", "environment.IRL_Env4LHF.states.size", "environment.IRL_Env4LHF.states.size", "environment.IRL_Env4LHF.states.size", "torch.from_numpy", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.utils.foveal2mask"], ["", "def", "observe", "(", "self", ",", "accumulate", "=", "True", ")", ":", "\n", "        ", "active_indices", "=", "self", ".", "is_active", "\n", "if", "torch", ".", "sum", "(", "active_indices", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "self", ".", "step_id", ">", "0", ":", "\n", "# update state with high-res feature", "\n", "            ", "remap_ratio", "=", "self", ".", "pa", ".", "patch_num", "[", "0", "]", "/", "float", "(", "self", ".", "states", ".", "size", "(", "-", "1", ")", ")", "\n", "lastest_fixation_on_feats", "=", "self", ".", "fixations", "[", ":", ",", "self", ".", "step_id", "]", ".", "to", "(", "\n", "dtype", "=", "torch", ".", "float32", ")", "/", "remap_ratio", "\n", "px", "=", "lastest_fixation_on_feats", "[", ":", ",", "0", "]", "\n", "py", "=", "lastest_fixation_on_feats", "[", ":", ",", "1", "]", "\n", "masks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "                ", "mask", "=", "foveal2mask", "(", "px", "[", "i", "]", ".", "item", "(", ")", ",", "py", "[", "i", "]", ".", "item", "(", ")", ",", "\n", "self", ".", "pa", ".", "fovea_radius", ",", "self", ".", "states", ".", "size", "(", "-", "2", ")", ",", "\n", "self", ".", "states", ".", "size", "(", "-", "1", ")", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "states", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "", "masks", "=", "torch", ".", "stack", "(", "masks", ")", "\n", "\n", "if", "accumulate", ":", "\n", "                ", "self", ".", "states", "=", "(", "1", "-", "masks", ")", "*", "self", ".", "states", "+", "masks", "*", "self", ".", "hr_feats", "\n", "", "else", ":", "\n", "                ", "self", ".", "states", "=", "(", "1", "-", "\n", "masks", ")", "*", "self", ".", "lr_feats", "+", "masks", "*", "self", ".", "hr_feats", "\n", "", "self", ".", "history_map", "=", "(", "1", "-", "\n", "masks", "[", ":", ",", "0", "]", ")", "*", "self", ".", "history_map", "+", "masks", "[", ":", ",", "0", "]", "\n", "", "ext_states", "=", "self", ".", "states", ".", "clone", "(", ")", "\n", "\n", "return", "ext_states", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.get_reward": [[62, 64], ["torch.zeros"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "prob_old", ",", "prob_new", ")", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "self", ".", "batch_size", ",", "device", "=", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.step": [[65, 112], ["environment.IRL_Env4LHF.action_mask.clone", "environment.IRL_Env4LHF.observe", "environment.IRL_Env4LHF.status_update", "torch.arange", "print", "environment.IRL_Env4LHF.view", "print", "environment.IRL_Env4LHF.action_mask.size", "environment.IRL_Env4LHF.action_mask.view", "range", "environment.IRL_Env4LHF.action_mask.view", "environment.IRL_Env4LHF.action_mask.sum", "environment.IRL_Env4LHF.sum", "px.to", "py.to", "max", "max", "max", "max"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.observe", "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.status_update"], ["", "def", "step", "(", "self", ",", "act_batch", ")", ":", "\n", "        ", "self", ".", "step_id", "+=", "1", "\n", "assert", "self", ".", "step_id", "<", "self", ".", "max_step", ",", "\"Error: Exceeding maximum step!\"", "\n", "\n", "# update fixation", "\n", "py", ",", "px", "=", "act_batch", "//", "self", ".", "pa", ".", "patch_num", "[", "\n", "0", "]", ",", "act_batch", "%", "self", ".", "pa", ".", "patch_num", "[", "0", "]", "\n", "self", ".", "fixations", "[", ":", ",", "self", ".", "step_id", ",", "1", "]", "=", "py", "\n", "self", ".", "fixations", "[", ":", ",", "self", ".", "step_id", ",", "0", "]", "=", "px", "\n", "\n", "# update action mask", "\n", "before_action_mask", "=", "self", ".", "action_mask", ".", "clone", "(", ")", "\n", "if", "self", ".", "inhibit_return", ":", "\n", "            ", "action_idx", "=", "torch", ".", "arange", "(", "0", ",", "\n", "self", ".", "batch_size", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "self", ".", "mask_size", "==", "0", ":", "\n", "                ", "self", ".", "action_mask", "[", "action_idx", ",", "act_batch", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "bs", "=", "self", ".", "action_mask", ".", "size", "(", "0", ")", "\n", "px", ",", "py", "=", "px", ".", "to", "(", "dtype", "=", "torch", ".", "long", ")", ",", "py", ".", "to", "(", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "action_mask", "=", "self", ".", "action_mask", ".", "view", "(", "\n", "bs", ",", "self", ".", "pa", ".", "patch_num", "[", "1", "]", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "                    ", "self", ".", "action_mask", "[", "i", ",", "\n", "max", "(", "py", "[", "i", "]", "-", "self", ".", "mask_size", ",", "0", ")", ":", "py", "[", "i", "]", "+", "\n", "self", ".", "mask_size", "+", "1", ",", "\n", "max", "(", "px", "[", "i", "]", "-", "self", ".", "mask_size", ",", "0", ")", ":", "px", "[", "i", "]", "+", "\n", "self", ".", "mask_size", "+", "1", "]", "=", "1", "\n", "\n", "", "self", ".", "action_mask", "=", "self", ".", "action_mask", ".", "view", "(", "bs", ",", "-", "1", ")", "\n", "", "", "if", "self", ".", "action_mask", ".", "sum", "(", ")", "-", "before_action_mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "'error!!!'", ")", "\n", "action_mask", "=", "before_action_mask", ".", "view", "(", "bs", ",", "self", ".", "pa", ".", "patch_num", "[", "1", "]", ",", "-", "1", ")", "\n", "print", "(", "\n", "act_batch", ",", "py", ",", "px", ",", "\n", "action_mask", "[", "0", ",", "\n", "max", "(", "py", "[", "i", "]", "-", "\n", "self", ".", "mask_size", ",", "0", ")", ":", "py", "[", "i", "]", "+", "self", ".", "mask_size", "+", "1", ",", "\n", "max", "(", "px", "[", "i", "]", "-", "self", ".", "mask_size", ",", "0", ")", ":", "px", "[", "i", "]", "+", "\n", "self", ".", "mask_size", "+", "1", "]", ")", "\n", "\n", "", "obs", "=", "self", ".", "observe", "(", ")", "\n", "self", ".", "status_update", "(", "act_batch", ")", "\n", "\n", "return", "obs", ",", "self", ".", "status", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.status_update": [[113, 122], ["done.to", "torch.arange"], "methods", ["None"], ["", "def", "status_update", "(", "self", ",", "act_batch", ")", ":", "\n", "        ", "if", "self", ".", "status_update_mtd", "==", "'SOT'", ":", "# stop on target", "\n", "            ", "done", "=", "self", ".", "label_coding", "[", "torch", ".", "arange", "(", "self", ".", "batch_size", "\n", ")", ",", "0", ",", "act_batch", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "done", "[", "self", ".", "status", ">", "0", "]", "=", "2", "\n", "self", ".", "status", "=", "done", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.step_back": [[123, 126], ["None"], "methods", ["None"], ["", "def", "step_back", "(", "self", ")", ":", "\n", "        ", "self", ".", "fixations", "[", ":", ",", "self", ".", "step_id", "]", "=", "0", "\n", "self", ".", "step_id", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.reset": [[127, 168], ["torch.zeros", "torch.zeros", "torch.ones", "environment.IRL_Env4LHF.lr_feats.clone", "environment.IRL_Env4LHF.init_action_mask.clone", "environment.IRL_Env4LHF.init_history_map.clone", "torch.tensor", "environment.IRL_Env4LHF.action_mask.size", "environment.IRL_Env4LHF.action_mask.view", "environment.IRL_Env4LHF.action_mask.view", "int", "int"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "step_id", "=", "0", "# step id of the environment", "\n", "self", ".", "fixations", "=", "torch", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "max_step", ",", "2", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "status", "=", "torch", ".", "zeros", "(", "self", ".", "batch_size", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "is_active", "=", "torch", ".", "ones", "(", "self", ".", "batch_size", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "states", "=", "self", ".", "lr_feats", ".", "clone", "(", ")", "\n", "\n", "self", ".", "action_mask", "=", "self", ".", "init_action_mask", ".", "clone", "(", ")", "\n", "\n", "self", ".", "history_map", "=", "self", ".", "init_history_map", ".", "clone", "(", ")", "\n", "\n", "# random initialization", "\n", "if", "self", ".", "init", "==", "'random'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# center initialization", "\n", "", "elif", "self", ".", "init", "==", "'center'", ":", "\n", "            ", "self", ".", "fixations", "[", ":", ",", "0", "]", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "self", ".", "pa", ".", "patch_num", "[", "0", "]", "/", "2", ",", "self", ".", "pa", ".", "patch_num", "[", "1", "]", "/", "2", "]", "]", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "bs", "=", "self", ".", "action_mask", ".", "size", "(", "0", ")", "\n", "self", ".", "action_mask", "=", "self", ".", "action_mask", ".", "view", "(", "bs", ",", "self", ".", "pa", ".", "patch_num", "[", "1", "]", ",", "\n", "-", "1", ")", "\n", "px", ",", "py", "=", "int", "(", "self", ".", "pa", ".", "patch_num", "[", "0", "]", "/", "2", ")", ",", "int", "(", "self", ".", "pa", ".", "patch_num", "[", "1", "]", "/", "\n", "2", ")", "\n", "self", ".", "action_mask", "[", ":", ",", "py", "-", "self", ".", "mask_size", ":", "py", "+", "self", ".", "mask_size", "+", "\n", "1", ",", "px", "-", "self", ".", "mask_size", ":", "px", "+", "self", ".", "mask_size", "+", "\n", "1", "]", "=", "1", "\n", "\n", "self", ".", "action_mask", "=", "self", ".", "action_mask", ".", "view", "(", "bs", ",", "-", "1", ")", "\n", "", "elif", "self", ".", "init", "==", "'manual'", ":", "\n", "            ", "self", ".", "fixations", "[", ":", ",", "0", ",", "0", "]", "=", "self", ".", "init_fix", "[", ":", ",", "0", "]", "\n", "self", ".", "fixations", "[", ":", ",", "0", ",", "1", "]", "=", "self", ".", "init_fix", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.set_data": [[169, 188], ["data[].to", "data[].to", "data[].to", "data[].to", "data[].to", "data[].to", "data[].to", "environment.IRL_Env4LHF.hr_feats.size", "environment.IRL_Env4LHF.reset", "data[].to().view", "torch.zeros", "data[].to"], "methods", ["home.repos.pwc.inspect_result.cvlab-stonybrook_Scanpath_Prediction.irl_dcb.environment.IRL_Env4LHF.reset"], ["", "", "def", "set_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "label_coding", "=", "data", "[", "'label_coding'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "img_names", "=", "data", "[", "'img_name'", "]", "\n", "self", ".", "cat_names", "=", "data", "[", "'cat_name'", "]", "\n", "self", ".", "init_fix", "=", "data", "[", "'init_fix'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "init_action_mask", "=", "data", "[", "'action_mask'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "init_history_map", "=", "data", "[", "'history_map'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "task_ids", "=", "data", "[", "'task_id'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "lr_feats", "=", "data", "[", "'lr_feats'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "hr_feats", "=", "data", "[", "'hr_feats'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "batch_size", "=", "self", ".", "hr_feats", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "inhibit_return", ":", "\n", "            ", "self", ".", "action_mask", "=", "data", "[", "'action_mask'", "]", ".", "to", "(", "self", ".", "device", ")", ".", "view", "(", "\n", "self", ".", "batch_size", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "action_mask", "=", "torch", ".", "zeros", "(", "self", ".", "batch_size", ",", "\n", "self", ".", "pa", ".", "patch_count", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", "\n", "", "self", ".", "reset", "(", ")", "\n", "", "", ""]]}