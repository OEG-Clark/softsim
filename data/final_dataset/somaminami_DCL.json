{"home.repos.pwc.inspect_result.somaminami_DCL.None.train.create_object": [[172, 221], ["random.randint", "random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "lib.utils.LogManagers", "getattr", "net.cuda.cuda", "getattr", "getattr", "len", "len", "getattr", "lib.utils.load_model", "getattr.", "criterion.cuda.cuda", "lib.loss_func.TotalLoss", "net.cuda.parameters", "getattr"], "function", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.load_model"], ["def", "create_object", "(", "config", ")", ":", "\n", "# set seed value", "\n", "    ", "config", ".", "manualSeed", "=", "random", ".", "randint", "(", "1", ",", "10000", ")", "\n", "random", ".", "seed", "(", "config", ".", "manualSeed", ")", "\n", "torch", ".", "manual_seed", "(", "config", ".", "manualSeed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "config", ".", "manualSeed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "# load dataset", "\n", "train_loader", ",", "test_loader", "=", "getattr", "(", "dataset_factory", ",", "config", ".", "dataloader", ".", "name", ")", "(", "config", ")", "\n", "\n", "# model & loss func & optimizer    ", "\n", "nets", "=", "[", "]", "\n", "criterions", "=", "[", "]", "\n", "optimizers", "=", "[", "]", "\n", "for", "model_args", "in", "config", ".", "models", ":", "\n", "# model", "\n", "        ", "net", "=", "getattr", "(", "model_fuctory", ",", "model_args", ".", "name", ")", "(", "**", "model_args", ".", "args", ")", "\n", "net", "=", "net", ".", "cuda", "(", "config", ".", "gpu", ".", "id", ")", "\n", "\n", "# load weight", "\n", "if", "model_args", ".", "load_weight", ".", "path", "is", "not", "None", ":", "\n", "            ", "utils", ".", "load_model", "(", "net", ",", "model_args", ".", "load_weight", ".", "path", ",", "model_args", ".", "load_weight", ".", "model_id", ")", "\n", "\n", "", "nets", "+=", "[", "net", "]", "\n", "\n", "# loss function        ", "\n", "criterions", "=", "[", "]", "\n", "for", "row", "in", "config", ".", "losses", ":", "\n", "            ", "r", "=", "[", "]", "\n", "for", "loss", "in", "row", ":", "\n", "                ", "criterion", "=", "getattr", "(", "loss_func", ",", "loss", ".", "name", ")", "(", "loss", ".", "args", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", "config", ".", "gpu", ".", "id", ")", "\n", "r", "+=", "[", "criterion", "]", "\n", "", "criterions", "+=", "[", "loss_func", ".", "TotalLoss", "(", "r", ")", "]", "\n", "\n", "# optimizer", "\n", "", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "model_args", ".", "optim", ".", "name", ")", "\n", "optimizers", "+=", "[", "optimizer", "(", "net", ".", "parameters", "(", ")", ",", "**", "model_args", ".", "optim", ".", "args", ")", "]", "\n", "\n", "# trainer", "\n", "", "trainer", "=", "getattr", "(", "trainer_module", ",", "config", ".", "trainer", ".", "name", ")", "(", "config", ")", "\n", "\n", "# logger", "\n", "logs", "=", "utils", ".", "LogManagers", "(", "len", "(", "config", ".", "models", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "config", ".", "trainer", ".", "epochs", ",", "config", ".", "dataloader", ".", "batch_size", ")", "\n", "\n", "return", "trainer", ",", "nets", ",", "criterions", ",", "optimizers", ",", "train_loader", ",", "test_loader", ",", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.None.train.inform_optuna": [[336, 347], ["trial.report", "trial.should_prune", "optuna.structs.TrialPruned"], "function", ["None"], ["def", "inform_optuna", "(", "**", "kwargs", ")", ":", "\n", "    ", "trial", "=", "kwargs", "[", "\"_trial\"", "]", "\n", "logs", "=", "kwargs", "[", "\"_logs\"", "]", "\n", "epoch", "=", "kwargs", "[", "\"_epoch\"", "]", "\n", "\n", "error", "=", "100", "-", "logs", "[", "0", "]", "[", "\"epoch_log\"", "]", "[", "epoch", "]", "[", "\"test_accuracy\"", "]", "\n", "trial", ".", "report", "(", "error", ",", "step", "=", "epoch", ")", "\n", "\n", "if", "trial", ".", "should_prune", "(", "epoch", ")", ":", "\n", "        ", "raise", "optuna", ".", "structs", ".", "TrialPruned", "(", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.None.train.objective_func": [[392, 461], ["os.path.join", "lib.utils.make_dirs", "lib.utils.make_dirs", "enumerate", "range", "copy.deepcopy", "lib.utils.save_json", "train.create_object", "trial.set_user_attr", "lib.trainer.train", "type", "enumerate", "len", "trial.suggest_categorical", "copy.deepcopy", "all", "BlacklistError", "sys.exit", "trial.suggest_categorical", "copy.deepcopy", "trial.suggest_categorical", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.make_dirs", "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.make_dirs", "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.save_json", "home.repos.pwc.inspect_result.somaminami_DCL.None.pre-train.create_object", "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.train"], ["def", "objective_func", "(", "trial", ")", ":", "\n", "    ", "global", "config", "\n", "\n", "if", "type", "(", "args", ".", "num_trial", ")", "is", "int", ":", "\n", "        ", "if", "trial", ".", "number", ">", "args", ".", "num_trial", ":", "\n", "            ", "import", "sys", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "# make dirs", "\n", "", "", "config", ".", "trainer", ".", "base_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "optuna_dir", ",", "f\"{trial.number:04}/\"", ")", "\n", "utils", ".", "make_dirs", "(", "config", ".", "trainer", ".", "base_dir", "+", "\"log\"", ")", "\n", "utils", ".", "make_dirs", "(", "config", ".", "trainer", ".", "base_dir", "+", "\"checkpoint\"", ")", "\n", "\n", "# change config        ", "\n", "# set loss funcs & gates", "\n", "for", "source_id", ",", "model_losses", "in", "enumerate", "(", "config", ".", "losses", ")", ":", "\n", "        ", "for", "target_id", ",", "_", "in", "enumerate", "(", "model_losses", ")", ":", "\n", "            ", "loss_name", "=", "trial", ".", "suggest_categorical", "(", "f'{source_id:02}_{target_id:02}_loss'", ",", "\n", "LOSS_LISTS", "[", "source_id", "]", "[", "target_id", "]", ")", "\n", "\n", "loss_args", "=", "copy", ".", "deepcopy", "(", "args_factory", ".", "losses", "[", "loss_name", "]", ")", "\n", "if", "\"gate\"", "in", "loss_args", ".", "args", ":", "\n", "                ", "gate_name", "=", "trial", ".", "suggest_categorical", "(", "f'{source_id:02}_{target_id:02}_gate'", ",", "GATE_LIST", "[", "source_id", "]", "[", "target_id", "]", ")", "\n", "loss_args", ".", "args", ".", "gate", "=", "copy", ".", "deepcopy", "(", "args_factory", ".", "gates", "[", "gate_name", "]", ")", "\n", "", "config", ".", "losses", "[", "source_id", "]", "[", "target_id", "]", "=", "loss_args", "\n", "\n", "", "", "for", "model_id", "in", "range", "(", "len", "(", "config", ".", "models", ")", ")", ":", "\n", "# set model", "\n", "        ", "model_name", "=", "trial", ".", "suggest_categorical", "(", "f\"model_{model_id}_name\"", ",", "MODEL_LISTS", "[", "model_id", "]", ")", "\n", "model", "=", "copy", ".", "deepcopy", "(", "args_factory", ".", "models", "[", "model_name", "]", ")", "\n", "config", ".", "models", "[", "model_id", "]", ".", "name", "=", "model", ".", "name", "\n", "config", ".", "models", "[", "model_id", "]", ".", "args", "=", "model", ".", "args", "\n", "\n", "# set model weight", "\n", "is_cutoff", "=", "all", "(", "[", "loss", ".", "args", ".", "gate", ".", "name", "==", "\"CutoffGate\"", "for", "loss", "in", "config", ".", "losses", "[", "model_id", "]", "]", ")", "\n", "is_ensemble", "=", "config", ".", "models", "[", "model_id", "]", ".", "name", "==", "\"Ensemble\"", "\n", "if", "is_cutoff", "&", "(", "not", "is_ensemble", ")", ":", "\n", "            ", "config", ".", "models", "[", "model_id", "]", ".", "load_weight", ".", "path", "=", "model", ".", "load_weight", ".", "path", "\n", "", "else", ":", "\n", "            ", "config", ".", "models", "[", "model_id", "]", ".", "load_weight", ".", "path", "=", "None", "\n", "\n", "\n", "", "", "config", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "\n", "# save config", "\n", "utils", ".", "save_json", "(", "config", ",", "config", ".", "trainer", ".", "base_dir", "+", "r\"log/config.json\"", ")", "\n", "\n", "# create object", "\n", "trainer", ",", "nets", ",", "criterions", ",", "optimizers", ",", "train_loader", ",", "test_loader", ",", "logs", "=", "create_object", "(", "config", ")", "\n", "\n", "# make kwargs", "\n", "kwargs", "=", "{", "\"_trial\"", ":", "trial", ",", "\n", "\"_callback\"", ":", "inform_optuna", "}", "\n", "\n", "# set seed", "\n", "trial", ".", "set_user_attr", "(", "\"seed\"", ",", "config", ".", "manualSeed", ")", "\n", "\n", "# raise exception if target model is pretrained.", "\n", "if", "config", ".", "models", "[", "0", "]", ".", "load_weight", ".", "path", "is", "not", "None", ":", "\n", "        ", "class", "BlacklistError", "(", "optuna", ".", "structs", ".", "OptunaError", ")", ":", "\n", "            ", "pass", "\n", "", "raise", "BlacklistError", "(", ")", "\n", "\n", "# start trial", "\n", "", "trainer", ".", "train", "(", "nets", ",", "criterions", ",", "optimizers", ",", "train_loader", ",", "test_loader", ",", "logs", ",", "trial", "=", "trial", ",", "**", "kwargs", ")", "\n", "\n", "acc", "=", "100", "-", "logs", "[", "0", "]", "[", "\"epoch_log\"", "]", "[", "config", ".", "trainer", ".", "epochs", "]", "[", "\"test_accuracy\"", "]", "\n", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.None.pre-train.create_object": [[211, 260], ["random.randint", "random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "lib.utils.LogManagers", "getattr", "net.cuda.cuda", "getattr", "getattr", "len", "len", "getattr", "lib.utils.load_model", "getattr.", "criterion.cuda.cuda", "lib.loss_func.TotalLoss", "net.cuda.parameters", "getattr"], "function", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.load_model"], ["def", "create_object", "(", "config", ")", ":", "\n", "# set seed value", "\n", "    ", "config", ".", "manualSeed", "=", "random", ".", "randint", "(", "1", ",", "10000", ")", "\n", "random", ".", "seed", "(", "config", ".", "manualSeed", ")", "\n", "torch", ".", "manual_seed", "(", "config", ".", "manualSeed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "config", ".", "manualSeed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "# create dataset", "\n", "train_loader", ",", "test_loader", "=", "getattr", "(", "dataset_factory", ",", "config", ".", "dataloader", ".", "name", ")", "(", "config", ")", "\n", "\n", "# define model & loss func & optimizer    ", "\n", "nets", "=", "[", "]", "\n", "criterions", "=", "[", "]", "\n", "optimizers", "=", "[", "]", "\n", "for", "model_args", "in", "config", ".", "models", ":", "\n", "# define model", "\n", "        ", "net", "=", "getattr", "(", "model_fuctory", ",", "model_args", ".", "name", ")", "(", "**", "model_args", ".", "args", ")", "\n", "net", "=", "net", ".", "cuda", "(", "config", ".", "gpu", ".", "id", ")", "\n", "\n", "# load weight", "\n", "if", "model_args", ".", "load_weight", ".", "path", "is", "not", "None", ":", "\n", "            ", "utils", ".", "load_model", "(", "net", ",", "model_args", ".", "load_weight", ".", "path", ",", "model_args", ".", "load_weight", ".", "model_id", ")", "\n", "\n", "", "nets", "+=", "[", "net", "]", "\n", "\n", "# define loss function        ", "\n", "criterions", "=", "[", "]", "\n", "for", "row", "in", "config", ".", "losses", ":", "\n", "            ", "r", "=", "[", "]", "\n", "for", "loss", "in", "row", ":", "\n", "                ", "criterion", "=", "getattr", "(", "loss_func", ",", "loss", ".", "name", ")", "(", "loss", ".", "args", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", "config", ".", "gpu", ".", "id", ")", "\n", "r", "+=", "[", "criterion", "]", "\n", "", "criterions", "+=", "[", "loss_func", ".", "TotalLoss", "(", "r", ")", "]", "\n", "\n", "# define optimizer", "\n", "", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "model_args", ".", "optim", ".", "name", ")", "\n", "optimizers", "+=", "[", "optimizer", "(", "net", ".", "parameters", "(", ")", ",", "**", "model_args", ".", "optim", ".", "args", ")", "]", "\n", "\n", "# Trainer", "\n", "", "trainer", "=", "getattr", "(", "trainer_module", ",", "config", ".", "trainer", ".", "name", ")", "(", "config", ")", "\n", "\n", "# Logger", "\n", "logs", "=", "utils", ".", "LogManagers", "(", "len", "(", "config", ".", "models", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "config", ".", "trainer", ".", "epochs", ",", "config", ".", "dataloader", ".", "batch_size", ")", "\n", "\n", "return", "trainer", ",", "nets", ",", "criterions", ",", "optimizers", ",", "train_loader", ",", "test_loader", ",", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.Ensemble.__init__": [[21, 26], ["torch.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__"], ["    ", "def", "__init__", "(", "self", ",", "source_list", ",", "detach_list", ")", ":", "\n", "        ", "super", "(", "Ensemble", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "source_list", "=", "source_list", "\n", "self", ".", "detach_list", "=", "detach_list", "\n", "self", ".", "dummy_module", "=", "torch", ".", "nn", ".", "Linear", "(", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.Ensemble.forward": [[27, 29], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.Ensemble.post_forward": [[30, 44], ["torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "outputs[].detach"], "methods", ["None"], ["", "def", "post_forward", "(", "self", ",", "outputs", ")", ":", "\n", "# pick up ensemble models", "\n", "        ", "filtered_outputs", "=", "[", "]", "\n", "for", "id_", "in", "self", ".", "source_list", ":", "\n", "            ", "if", "id_", "in", "self", ".", "detach_list", ":", "\n", "# detach gragh", "\n", "                ", "filtered_outputs", "+=", "[", "outputs", "[", "id_", "]", ".", "detach", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "filtered_outputs", "+=", "[", "outputs", "[", "id_", "]", "]", "\n", "\n", "# compute ensemble output", "\n", "", "", "ensembled_output", "=", "torch", ".", "stack", "(", "filtered_outputs", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n", "return", "ensembled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.DownsampleA.__init__": [[56, 60], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "        ", "super", "(", "DownsampleA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "2", "\n", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.DownsampleA.forward": [[61, 64], ["models.DownsampleA.avg", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.DownsampleA.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "avg", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x", ",", "x", ".", "mul", "(", "0", ")", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.DownsampleC.__init__": [[67, 71], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "        ", "super", "(", "DownsampleC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "!=", "1", "or", "nIn", "!=", "nOut", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.DownsampleC.forward": [[72, 75], ["models.DownsampleC.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.DownsampleD.__init__": [[78, 83], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "        ", "super", "(", "DownsampleD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "2", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "2", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.DownsampleD.forward": [[84, 88], ["models.DownsampleD.conv", "models.DownsampleD.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.ResNetBasicblock.__init__": [[94, 104], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_a", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_a", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv_b", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_b", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.ResNetBasicblock.forward": [[105, 119], ["models.ResNetBasicblock.conv_a", "models.ResNetBasicblock.bn_a", "torch.relu", "torch.relu", "torch.relu", "models.ResNetBasicblock.conv_b", "models.ResNetBasicblock.bn_b", "torch.relu", "torch.relu", "torch.relu", "models.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "basicblock", "=", "self", ".", "conv_a", "(", "x", ")", "\n", "basicblock", "=", "self", ".", "bn_a", "(", "basicblock", ")", "\n", "basicblock", "=", "F", ".", "relu", "(", "basicblock", ",", "inplace", "=", "True", ")", "\n", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "basicblock", "=", "self", ".", "bn_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "F", ".", "relu", "(", "residual", "+", "basicblock", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.CifarResNet.__init__": [[125, 162], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.CifarResNet._make_layer", "models.CifarResNet._make_layer", "models.CifarResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "models.CifarResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__", "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.NetworkBlock._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "depth", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            depth: number of layers.\n            num_classes: number of classes\n            base_width: base width\n        \"\"\"", "\n", "super", "(", "CifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "#print ('CifarResNet : Depth : {} , Layers for each block : {}'.format(depth, layer_blocks))", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "conv_1_3x3", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "stage_1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layer_blocks", ",", "1", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "#m.bias.data.zero_()", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.CifarResNet._make_layer": [[163, 175], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.DownsampleA", "block", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "DownsampleA", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.CifarResNet.forward": [[176, 185], ["models.CifarResNet.conv_1_3x3", "torch.relu", "torch.relu", "torch.relu", "models.CifarResNet.stage_1", "models.CifarResNet.stage_2", "models.CifarResNet.stage_3", "models.CifarResNet.avgpool", "x.view.view.view", "models.CifarResNet.classifier", "models.CifarResNet.bn_1", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_1_3x3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn_1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "stage_1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.BasicBlock.__init__": [[234, 248], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.BasicBlock.forward": [[249, 259], ["models.BasicBlock.relu2", "models.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "models.BasicBlock.relu1", "models.BasicBlock.relu1", "models.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "models.BasicBlock.bn1", "models.BasicBlock.bn1", "models.BasicBlock.conv1", "models.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.NetworkBlock.__init__": [[261, 264], ["torch.Module.__init__", "models.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__", "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.NetworkBlock._make_layer": [[265, 270], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.NetworkBlock.forward": [[271, 273], ["models.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.WideResNet.__init__": [[275, 305], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.NetworkBlock", "models.NetworkBlock", "models.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "models.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "6", ")", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.WideResNet.forward": [[306, 315], ["models.WideResNet.conv1", "models.WideResNet.block1", "models.WideResNet.block2", "models.WideResNet.block3", "models.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "models.WideResNet.fc", "models.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.resnet20": [[187, 194], ["models.CifarResNet"], "function", ["None"], ["", "", "def", "resnet20", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-20 model for CIFAR-10 (by default)\n    Args:\n        num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "20", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.resnet32": [[195, 202], ["models.CifarResNet"], "function", ["None"], ["", "def", "resnet32", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-32 model for CIFAR-10 (by default)\n    Args:\n        num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "32", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.resnet44": [[203, 210], ["models.CifarResNet"], "function", ["None"], ["", "def", "resnet44", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-44 model for CIFAR-10 (by default)\n    Args:\n        num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "44", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.resnet56": [[211, 218], ["models.CifarResNet"], "function", ["None"], ["", "def", "resnet56", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-56 model for CIFAR-10 (by default)\n    Args:\n        num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "56", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.models.resnet110": [[219, 226], ["models.CifarResNet"], "function", ["None"], ["", "def", "resnet110", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-110 model for CIFAR-10 (by default)\n    Args:\n        num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "110", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.__init__": [[16, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.to_cuda": [[20, 24], ["input_.cuda.cuda.cuda", "target.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "to_cuda", "(", "self", ",", "input_", ",", "target", ")", ":", "\n", "        ", "input_", "=", "input_", ".", "cuda", "(", "self", ".", "args", ".", "gpu", ".", "id", ")", "\n", "target", "=", "target", ".", "cuda", "(", "self", ".", "args", ".", "gpu", ".", "id", ")", "\n", "return", "input_", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.compute_outputs": [[25, 28], ["model"], "methods", ["None"], ["", "def", "compute_outputs", "(", "self", ",", "models", ",", "input_", ",", "target", ")", ":", "\n", "        ", "outputs", "=", "[", "model", "(", "input_", ")", "for", "model", "in", "models", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.post_forward": [[29, 34], ["enumerate", "hasattr", "model.post_forward"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.post_forward"], ["", "def", "post_forward", "(", "self", ",", "models", ",", "outputs", ")", ":", "\n", "        ", "for", "id_", ",", "model", "in", "enumerate", "(", "models", ")", ":", "\n", "            ", "if", "hasattr", "(", "model", ",", "\"post_forward\"", ")", ":", "\n", "                ", "outputs", "[", "id_", "]", "=", "model", ".", "post_forward", "(", "outputs", ")", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.calc_accuracy": [[35, 37], ["lib.utils.accuracy"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.accuracy"], ["", "def", "calc_accuracy", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "return", "utils", ".", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.measure": [[38, 40], ["trainer.ClassificationTrainer.calc_accuracy"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.calc_accuracy"], ["", "def", "measure", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "return", "calc_accuracy", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.update_meter": [[41, 46], ["loss_meter.update", "top1_meter.update", "loss.item", "acc[].item"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.AverageMeter.update", "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.AverageMeter.update"], ["", "def", "update_meter", "(", "self", ",", "loss", ",", "acc", ",", "loss_meter", ",", "top1_meter", ",", "batch_size", ")", ":", "\n", "# record loss and accuracy ", "\n", "        ", "loss_meter", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "top1_meter", ".", "update", "(", "acc", "[", "0", "]", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.write_log": [[47, 52], ["zip"], "methods", ["None"], ["", "def", "write_log", "(", "self", ",", "logs", ",", "loss_meters", ",", "top1_meters", ",", "epoch", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "for", "log", ",", "loss_meter", ",", "top1_meter", "in", "zip", "(", "logs", ".", "net", ",", "loss_meters", ",", "top1_meters", ")", ":", "\n", "            ", "log", "[", "\"epoch_log\"", "]", "[", "epoch", "]", "[", "mode", "+", "\"_loss\"", "]", "=", "loss_meter", ".", "avg", "\n", "log", "[", "\"epoch_log\"", "]", "[", "epoch", "]", "[", "mode", "+", "\"_accuracy\"", "]", "=", "top1_meter", ".", "avg", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.train_on_batch": [[53, 92], ["trainer.ClassificationTrainer.compute_outputs", "trainer.ClassificationTrainer.post_forward", "enumerate", "zip", "criterion", "trainer.ClassificationTrainer.calc_accuracy", "trainer.ClassificationTrainer.update_meter", "optimizer.zero_grad", "losses[].backward", "optimizers[].step", "enumerate", "input_.size"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.compute_outputs", "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.post_forward", "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.calc_accuracy", "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.update_meter"], ["", "def", "train_on_batch", "(", "self", ",", "input_", ",", "target", ",", "models", ",", "criterions", ",", "optimizers", ",", "\n", "logs", ",", "loss_meters", ",", "top1_meters", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "compute_outputs", "(", "models", ",", "input_", ",", "target", ")", "\n", "\n", "outputs", "=", "self", ".", "post_forward", "(", "models", ",", "outputs", ")", "\n", "\n", "losses", "=", "[", "]", "\n", "for", "model_id", ",", "(", "criterion", ",", "\n", "optimizer", ",", "\n", "log", ",", "\n", "loss_meter", ",", "\n", "top1_meter", ")", "in", "enumerate", "(", "zip", "(", "criterions", ",", "\n", "optimizers", ",", "\n", "logs", ".", "net", ",", "\n", "loss_meters", ",", "\n", "top1_meters", ")", ")", ":", "\n", "\n", "            ", "loss", "=", "criterion", "(", "model_id", ",", "outputs", ",", "target", ",", "log", ",", "**", "kwargs", ")", "\n", "losses", "+=", "[", "loss", "]", "\n", "\n", "acc", "=", "self", ".", "calc_accuracy", "(", "outputs", "[", "model_id", "]", ",", "target", ")", "\n", "\n", "self", ".", "update_meter", "(", "loss", ",", "acc", ",", "loss_meter", ",", "top1_meter", ",", "batch_size", "=", "input_", ".", "size", "(", "0", ")", ")", "\n", "\n", "\n", "# initialize gradient", "\n", "", "for", "optimizer", "in", "optimizers", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "# exclude loss if it equal 0", "\n", "", "update_idxs", "=", "[", "id_", "for", "id_", ",", "loss", "in", "enumerate", "(", "losses", ")", "if", "loss", "!=", "0", "]", "\n", "# compute gradient", "\n", "for", "id_", "in", "update_idxs", ":", "\n", "            ", "losses", "[", "id_", "]", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "# update paramaters", "\n", "", "for", "id_", "in", "update_idxs", ":", "\n", "            ", "optimizers", "[", "id_", "]", ".", "step", "(", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.train_on_dataset": [[94, 113], ["enumerate", "trainer.ClassificationTrainer.write_log", "lib.utils.AverageMeter", "lib.utils.AverageMeter", "model.train", "trainer.ClassificationTrainer.to_cuda", "trainer.ClassificationTrainer.train_on_batch", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.write_log", "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.train", "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.to_cuda", "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.train_on_batch"], ["", "def", "train_on_dataset", "(", "self", ",", "data_loader", ",", "models", ",", "criterions", ",", "optimizers", ",", "epoch", ",", "logs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n            train on dataset for one epoch\n        \"\"\"", "\n", "\n", "loss_meters", "=", "[", "utils", ".", "AverageMeter", "(", ")", "for", "i", "in", "range", "(", "len", "(", "models", ")", ")", "]", "\n", "top1_meters", "=", "[", "utils", ".", "AverageMeter", "(", ")", "for", "i", "in", "range", "(", "len", "(", "models", ")", ")", "]", "\n", "\n", "for", "model", "in", "models", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "\n", "", "for", "i", ",", "(", "input_", ",", "target", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "input_", ",", "target", "=", "self", ".", "to_cuda", "(", "input_", ",", "target", ")", "\n", "self", ".", "train_on_batch", "(", "input_", ",", "target", ",", "models", ",", "criterions", ",", "optimizers", ",", "\n", "logs", ",", "loss_meters", ",", "top1_meters", ",", "**", "kwargs", ")", "\n", "\n", "", "self", ".", "write_log", "(", "logs", ",", "loss_meters", ",", "top1_meters", ",", "epoch", ",", "mode", "=", "\"train\"", ")", "\n", "\n", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.validate_on_batch": [[115, 133], ["trainer.ClassificationTrainer.compute_outputs", "trainer.ClassificationTrainer.post_forward", "enumerate", "zip", "criterion", "trainer.ClassificationTrainer.calc_accuracy", "trainer.ClassificationTrainer.update_meter", "input_.size"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.compute_outputs", "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.post_forward", "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.calc_accuracy", "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.update_meter"], ["", "def", "validate_on_batch", "(", "self", ",", "input_", ",", "target", ",", "models", ",", "criterions", ",", "logs", ",", "loss_meters", ",", "top1_meters", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "compute_outputs", "(", "models", ",", "input_", ",", "target", ")", "\n", "outputs", "=", "self", ".", "post_forward", "(", "models", ",", "outputs", ")", "\n", "for", "model_id", ",", "(", "criterion", ",", "\n", "log", ",", "\n", "loss_meter", ",", "\n", "top1_meter", ")", "in", "enumerate", "(", "zip", "(", "criterions", ",", "\n", "logs", ".", "net", ",", "\n", "loss_meters", ",", "\n", "top1_meters", ")", ")", ":", "\n", "\n", "            ", "loss", "=", "criterion", "(", "model_id", ",", "outputs", ",", "target", ",", "log", "=", "None", ",", "**", "kwargs", ")", "\n", "\n", "acc", "=", "self", ".", "calc_accuracy", "(", "outputs", "[", "model_id", "]", ",", "target", ")", "\n", "\n", "self", ".", "update_meter", "(", "loss", ",", "acc", ",", "loss_meter", ",", "top1_meter", ",", "batch_size", "=", "input_", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.validate_on_dataset": [[134, 153], ["enumerate", "trainer.ClassificationTrainer.write_log", "lib.utils.AverageMeter", "lib.utils.AverageMeter", "model.eval", "trainer.ClassificationTrainer.to_cuda", "trainer.ClassificationTrainer.validate_on_batch", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.write_log", "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.to_cuda", "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.validate_on_batch"], ["", "def", "validate_on_dataset", "(", "self", ",", "data_loader", ",", "models", ",", "criterions", ",", "epoch", ",", "logs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n            validate on dataset\n        \"\"\"", "\n", "\n", "loss_meters", "=", "[", "utils", ".", "AverageMeter", "(", ")", "for", "i", "in", "range", "(", "len", "(", "models", ")", ")", "]", "\n", "top1_meters", "=", "[", "utils", ".", "AverageMeter", "(", ")", "for", "i", "in", "range", "(", "len", "(", "models", ")", ")", "]", "\n", "\n", "for", "model", "in", "models", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "", "for", "i", ",", "(", "input_", ",", "target", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "input_", ",", "target", "=", "self", ".", "to_cuda", "(", "input_", ",", "target", ")", "\n", "self", ".", "validate_on_batch", "(", "input_", ",", "target", ",", "models", ",", "criterions", ",", "\n", "logs", ",", "loss_meters", ",", "top1_meters", ")", "\n", "\n", "", "self", ".", "write_log", "(", "logs", ",", "loss_meters", ",", "top1_meters", ",", "epoch", ",", "mode", "=", "\"test\"", ")", "\n", "\n", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.train": [[154, 212], ["print", "range", "print", "time.time", "zip", "kwargs.update", "trainer.ClassificationTrainer.train_on_dataset", "trainer.ClassificationTrainer.validate_on_dataset", "enumerate", "logs.save", "print", "lib.utils.adjust_learning_rate", "print", "os.path.join", "lib.utils.save_checkpoint", "time.time"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.AverageMeter.update", "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.train_on_dataset", "home.repos.pwc.inspect_result.somaminami_DCL.lib.trainer.ClassificationTrainer.validate_on_dataset", "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManagers.save", "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.save_checkpoint"], ["", "def", "train", "(", "self", ",", "nets", ",", "criterions", ",", "optimizers", ",", "\n", "train_loader", ",", "test_loader", ",", "logs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "import", "time", "\n", "import", "os", "\n", "\n", "print", "(", "\"manual seed : %d\"", "%", "self", ".", "args", ".", "manualSeed", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "trainer", ".", "start_epoch", ",", "self", ".", "args", ".", "trainer", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "print", "(", "\"epoch %d\"", "%", "epoch", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "optimizer", ",", "model_args", "in", "zip", "(", "optimizers", ",", "self", ".", "args", ".", "models", ")", ":", "\n", "                ", "utils", ".", "adjust_learning_rate", "(", "optimizer", ",", "\n", "epoch", ",", "\n", "model_args", ".", "optim", ".", "gammas", ",", "\n", "model_args", ".", "optim", ".", "schedule", ",", "\n", "model_args", ".", "optim", ".", "args", ".", "lr", ")", "\n", "\n", "", "kwargs", "=", "{", "}", "if", "kwargs", "is", "None", "else", "kwargs", "\n", "kwargs", ".", "update", "(", "{", "\n", "\"_trainer\"", ":", "self", ",", "\n", "\"_train_loader\"", ":", "train_loader", ",", "\n", "\"_test_loader\"", ":", "test_loader", ",", "\n", "\"_nets\"", ":", "nets", ",", "\n", "\"_criterions\"", ":", "criterions", ",", "\n", "\"_optimizers\"", ":", "optimizers", ",", "\n", "\"_epoch\"", ":", "epoch", ",", "\n", "\"_logs\"", ":", "logs", ",", "\n", "\"_args\"", ":", "self", ".", "args", "\n", "}", ")", "\n", "\n", "# train for one epoch", "\n", "self", ".", "train_on_dataset", "(", "train_loader", ",", "nets", ",", "criterions", ",", "optimizers", ",", "epoch", ",", "logs", ",", "**", "kwargs", ")", "\n", "# evaluate on validation set", "\n", "self", ".", "validate_on_dataset", "(", "test_loader", ",", "nets", ",", "criterions", ",", "epoch", ",", "logs", ",", "**", "kwargs", ")", "\n", "\n", "# print log", "\n", "for", "i", ",", "log", "in", "enumerate", "(", "logs", ".", "net", ")", ":", "\n", "                ", "print", "(", "\"  net{0}    loss :train={1:.3f}, test={2:.3f}    acc :train={3:.3f}, test ={4:.3f}\"", ".", "format", "(", "\n", "i", ",", "\n", "log", "[", "\"epoch_log\"", "]", "[", "epoch", "]", "[", "\"train_loss\"", "]", ",", "\n", "log", "[", "\"epoch_log\"", "]", "[", "epoch", "]", "[", "\"test_loss\"", "]", ",", "\n", "log", "[", "\"epoch_log\"", "]", "[", "epoch", "]", "[", "\"train_accuracy\"", "]", ",", "\n", "log", "[", "\"epoch_log\"", "]", "[", "epoch", "]", "[", "\"test_accuracy\"", "]", ")", ")", "\n", "\n", "", "if", "epoch", "%", "self", ".", "args", ".", "trainer", ".", "saving_interval", "==", "0", ":", "\n", "                ", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "trainer", ".", "base_dir", ",", "\"checkpoint\"", ")", "\n", "utils", ".", "save_checkpoint", "(", "nets", ",", "optimizers", ",", "epoch", ",", "ckpt_dir", ")", "\n", "\n", "", "logs", ".", "save", "(", "self", ".", "args", ".", "trainer", ".", "base_dir", "+", "r\"log/\"", ")", "\n", "\n", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "\"  elapsed_time:{0:.3f}[sec]\"", ".", "format", "(", "elapsed_time", ")", ")", "\n", "\n", "if", "\"_callback\"", "in", "kwargs", ":", "\n", "                ", "kwargs", "[", "\"_callback\"", "]", "(", "**", "kwargs", ")", "\n", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.dataset_factory.worker_initializer.__init__": [[19, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "manualSeed", ")", ":", "\n", "        ", "self", ".", "manualSeed", "=", "manualSeed", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.dataset_factory.worker_initializer.worker_init_fn": [[22, 25], ["random.seed"], "methods", ["None"], ["", "def", "worker_init_fn", "(", "self", ",", "worker_id", ")", ":", "\n", "        ", "random", ".", "seed", "(", "self", ".", "manualSeed", "+", "worker_id", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.dataset_factory.CIFAR10": [[32, 74], ["torchvision.Compose", "torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.RandomHorizontalFlip", "torchvision.Pad", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.ToTensor", "dataset_factory.worker_initializer", "dataset_factory.worker_initializer"], "function", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.dataset_factory.CIFAR10", "home.repos.pwc.inspect_result.somaminami_DCL.lib.dataset_factory.CIFAR10", "home.repos.pwc.inspect_result.somaminami_DCL.lib.dataset_factory.CIFAR10", "home.repos.pwc.inspect_result.somaminami_DCL.lib.dataset_factory.CIFAR10"], ["", "", "def", "CIFAR10", "(", "args", ")", ":", "\n", "    ", "manualSeed", "=", "args", ".", "manualSeed", "\n", "args", "=", "args", ".", "dataloader", "\n", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "Pad", "(", "4", ",", "padding_mode", "=", "\"reflect\"", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "0", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "]", ")", "\n", "\n", "data_path", "=", "args", ".", "data_path", "\n", "\n", "train_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "data_path", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "train_transform", ")", "\n", "\n", "test_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "data_path", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "test_transform", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "args", ".", "train_shuffle", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "args", ".", "train_drop_last", ",", "\n", "worker_init_fn", "=", "worker_initializer", "(", "manualSeed", ")", ".", "worker_init_fn", ")", "\n", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "args", ".", "test_shuffle", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "args", ".", "test_drop_last", ",", "\n", "worker_init_fn", "=", "worker_initializer", "(", "manualSeed", ")", ".", "worker_init_fn", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.dataset_factory.CIFAR100": [[81, 123], ["torchvision.Compose", "torchvision.Compose", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.RandomHorizontalFlip", "torchvision.Pad", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.ToTensor", "dataset_factory.worker_initializer", "dataset_factory.worker_initializer"], "function", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.dataset_factory.CIFAR100", "home.repos.pwc.inspect_result.somaminami_DCL.lib.dataset_factory.CIFAR100", "home.repos.pwc.inspect_result.somaminami_DCL.lib.dataset_factory.CIFAR100", "home.repos.pwc.inspect_result.somaminami_DCL.lib.dataset_factory.CIFAR100"], ["", "def", "CIFAR100", "(", "args", ")", ":", "\n", "    ", "manualSeed", "=", "args", ".", "manualSeed", "\n", "args", "=", "args", ".", "dataloader", "\n", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "Pad", "(", "4", ",", "padding_mode", "=", "\"reflect\"", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "0", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "]", ")", "\n", "\n", "data_path", "=", "args", ".", "data_path", "\n", "\n", "train_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "data_path", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "train_transform", ")", "\n", "\n", "test_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "data_path", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "test_transform", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "args", ".", "train_shuffle", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "args", ".", "train_drop_last", ",", "\n", "worker_init_fn", "=", "worker_initializer", "(", "manualSeed", ")", ".", "worker_init_fn", ")", "\n", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "args", ".", "test_shuffle", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "args", ".", "test_drop_last", ",", "\n", "worker_init_fn", "=", "worker_initializer", "(", "manualSeed", ")", ".", "worker_init_fn", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManager.__init__": [[27, 34], ["dict.__init__", "defaultdict", "defaultdict"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epochs", ",", "iteration", ")", ":", "\n", "        ", "super", "(", "LogManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "from", "collections", "import", "defaultdict", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "iteration", "=", "iteration", "\n", "self", "[", "\"epoch_log\"", "]", "=", "defaultdict", "(", "dict", ")", "\n", "self", "[", "\"ite_log\"", "]", "=", "defaultdict", "(", "dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManager.save": [[35, 40], ["utils.make_dirs", "utils.LogManager.to_dataframe().to_csv", "utils.LogManager.to_dataframe().to_csv", "os.path.join", "os.path.join", "utils.LogManager.to_dataframe", "utils.LogManager.to_dataframe"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.make_dirs", "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManager.to_dataframe", "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManager.to_dataframe"], ["", "def", "save", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "make_dirs", "(", "save_dir", ")", "\n", "self", ".", "to_dataframe", "(", "\"epoch_log\"", ")", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"epoch_log.csv\"", ")", ",", "float_format", "=", "\"%.6g\"", ")", "\n", "self", ".", "to_dataframe", "(", "\"ite_log\"", ")", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"ite_log.csv\"", ")", ",", "float_format", "=", "\"%.6g\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManager.__save_pickle__": [[41, 45], ["open", "pickle.dump"], "methods", ["None"], ["", "def", "__save_pickle__", "(", "self", ",", "obj", ",", "save_path", ")", ":", "\n", "        ", "with", "open", "(", "save_path", ",", "mode", "=", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "f", ",", "protocol", "=", "4", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManager.to_dataframe": [[46, 48], ["pandas.DataFrame.from_dict"], "methods", ["None"], ["", "def", "to_dataframe", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "pd", ".", "DataFrame", ".", "from_dict", "(", "self", "[", "key", "]", ",", "orient", "=", "\"index\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManager.load": [[50, 57], ["pandas.read_csv", "pandas.read_csv", "pandas.read_csv.to_dict", "pandas.read_csv.to_dict", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "epoch_log", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"epoch_log.csv\"", ")", ",", "index_col", "=", "0", ")", "\n", "ite_log", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"ite_log.csv\"", ")", ",", "index_col", "=", "0", ")", "\n", "\n", "self", "[", "\"epoch_log\"", "]", "=", "epoch_log", ".", "to_dict", "(", ")", "\n", "self", "[", "\"ite_log\"", "]", "=", "ite_log", ".", "to_dict", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManagers.__init__": [[63, 70], ["dict.__init__", "utils.LogManager", "range"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_model", ",", "train_length", ",", "epochs", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "LogManagers", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_model", "=", "num_model", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "train_len", "=", "train_length", "\n", "self", ".", "iteration", "=", "(", "train_length", "//", "batch_size", "+", "1", ")", "*", "epochs", "\n", "self", ".", "net", "=", "[", "LogManager", "(", "epochs", ",", "self", ".", "iteration", ")", "for", "i", "in", "range", "(", "self", ".", "num_model", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManagers.__getitem__": [[71, 73], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "net", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManagers.save": [[74, 79], ["zip", "os.path.join", "n.save", "range"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManagers.save"], ["", "def", "save", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "net_dirs", "=", "[", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"net%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_model", ")", "]", "\n", "for", "n", ",", "d", "in", "zip", "(", "self", ".", "net", ",", "net_dirs", ")", ":", "\n", "            ", "n", ".", "save", "(", "d", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManagers.load": [[81, 86], ["enumerate", "os.path.join", "utils.LogManagers.net[].load", "range"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManagers.load"], ["", "def", "load", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "net_dirs", "=", "[", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"net%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_model", ")", "]", "\n", "for", "i", ",", "net_dir", "in", "enumerate", "(", "net_dirs", ")", ":", "\n", "            ", "self", ".", "net", "[", "i", "]", ".", "load", "(", "net_dir", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.AverageMeter.__init__": [[152, 154], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.AverageMeter.reset": [[155, 160], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.AverageMeter.update": [[161, 166], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.make_dirs": [[17, 21], ["os.path.isdir", "os.makedirs"], "function", ["None"], ["def", "make_dirs", "(", "dir_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.save_pickle": [[91, 95], ["open", "pickle.dump"], "function", ["None"], ["", "", "def", "save_pickle", "(", "self", ",", "obj", ",", "save_path", ")", ":", "\n", "    ", "with", "open", "(", "save_path", ",", "mode", "=", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ",", "protocol", "=", "4", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.load_pickle": [[96, 100], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManagers.load"], ["", "def", "load_pickle", "(", "self", ",", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "mode", "=", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "result", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.save_json": [[106, 111], ["open", "json.dump"], "function", ["None"], ["", "def", "save_json", "(", "_dict", ",", "save_path", ")", ":", "\n", "    ", "import", "json", "\n", "with", "open", "(", "save_path", ",", "mode", "=", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "_dict", ",", "f", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.print_log": [[116, 120], ["print", "log.write", "log.flush"], "function", ["None"], ["", "def", "print_log", "(", "print_string", ",", "log", ")", ":", "\n", "    ", "print", "(", "\"{}\"", ".", "format", "(", "print_string", ")", ")", "\n", "log", ".", "write", "(", "'{}\\n'", ".", "format", "(", "print_string", ")", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.adjust_learning_rate": [[121, 133], ["zip", "len", "len"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "gammas", ",", "schedule", ",", "learning_rate", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "learning_rate", "\n", "assert", "len", "(", "gammas", ")", "==", "len", "(", "schedule", ")", ",", "\"length of gammas and schedule should be equal\"", "\n", "for", "(", "gamma", ",", "step", ")", "in", "zip", "(", "gammas", ",", "schedule", ")", ":", "\n", "        ", "if", "(", "epoch", ">=", "step", ")", ":", "\n", "            ", "lr", "=", "lr", "*", "gamma", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.accuracy": [[134, 149], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.save_checkpoint": [[171, 184], ["enumerate", "os.path.join", "torch.save", "zip", "model.state_dict", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManagers.save"], ["", "", "def", "save_checkpoint", "(", "models", ",", "optimizers", ",", "epoch", ",", "save_dir", ")", ":", "\n", "    ", "state", "=", "{", "}", "\n", "for", "i", ",", "(", "model", ",", "optimizer", ")", "in", "enumerate", "(", "zip", "(", "models", ",", "optimizers", ")", ")", ":", "\n", "        ", "state", "[", "i", "]", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'arch'", ":", "model", ".", "__class__", ".", "__name__", ",", "\n", "'model_pram'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_pram'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'checkpoint_epoch_%d.pkl'", "%", "epoch", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ",", "pickle_protocol", "=", "4", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.load_checkpoint": [[185, 202], ["os.path.join", "torch.load", "enumerate", "zip", "model.cpu", "model.load_state_dict", "optimizer.load_state_dict", "model.cuda", "optimizer.state.values", "optim_state.items", "isinstance", "v.cuda"], "function", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManagers.load"], ["", "def", "load_checkpoint", "(", "models", ",", "optimizers", ",", "epoch", ",", "save_dir", ",", "use_cuda", ",", "gpu_id", "=", "None", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'checkpoint_epoch_%d.pkl'", "%", "epoch", ")", "\n", "state", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "for", "i", ",", "(", "model", ",", "optimizer", ")", "in", "enumerate", "(", "zip", "(", "models", ",", "optimizers", ")", ")", ":", "\n", "        ", "model", ".", "cpu", "(", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "state", "[", "i", "]", "[", "\"model_pram\"", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "state", "[", "i", "]", "[", "\"optimizer_pram\"", "]", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "            ", "model", ".", "cuda", "(", "gpu_id", ")", "\n", "for", "optim_state", "in", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "optim_state", ".", "items", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                        ", "optim_state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "", "", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.load_model": [[207, 215], ["model.cpu", "model.load_state_dict", "model.to", "torch.load", "list", "model.state_dict().values", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.utils.LogManagers.load"], ["", "def", "load_model", "(", "model", ",", "models_path", ",", "model_id", ")", ":", "\n", "    ", "device", "=", "list", "(", "model", ".", "state_dict", "(", ")", ".", "values", "(", ")", ")", "[", "0", "]", ".", "device", "\n", "model_state", "=", "torch", ".", "load", "(", "models_path", ",", "map_location", "=", "\"cpu\"", ")", "[", "model_id", "]", "\n", "model_param", "=", "model_state", "[", "\"model_pram\"", "]", "\n", "model", ".", "cpu", "(", ")", "\n", "model", ".", "load_state_dict", "(", "model_param", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func.TotalLoss.__init__": [[18, 22], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_funcs", ")", ":", "\n", "        ", "super", "(", "TotalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_funcs", "=", "loss_funcs", "\n", "self", ".", "ite", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func.TotalLoss.forward": [[23, 42], ["enumerate", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "zip", "enumerate", "float", "loss_func", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "zip", "float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "model_id", ",", "outputs", ",", "label_id", ",", "log", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "target_output", "=", "outputs", "[", "model_id", "]", "\n", "for", "source_id", ",", "(", "source_output", ",", "loss_func", ")", "in", "enumerate", "(", "zip", "(", "outputs", ",", "self", ".", "loss_funcs", ")", ")", ":", "\n", "            ", "kwargs", "[", "\"_source_id\"", "]", "=", "source_id", "\n", "kwargs", "[", "\"_target_id\"", "]", "=", "model_id", "\n", "losses", "+=", "[", "loss_func", "(", "target_output", ",", "\n", "source_output", ",", "\n", "label_id", ",", "\n", "log", ",", "\n", "**", "kwargs", ")", "]", "\n", "", "total_loss", "=", "torch", ".", "stack", "(", "losses", ")", ".", "sum", "(", ")", "\n", "\n", "if", "log", "is", "not", "None", ":", "\n", "            ", "for", "source_id", ",", "(", "func", ",", "loss", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "loss_funcs", ",", "losses", ")", ")", ":", "\n", "                ", "log", "[", "\"ite_log\"", "]", "[", "self", ".", "ite", "]", "[", "f\"{model_id:02}_{source_id:02}_\"", "+", "func", ".", "__class__", ".", "__name__", "]", "=", "float", "(", "loss", ")", "\n", "", "log", "[", "\"ite_log\"", "]", "[", "self", ".", "ite", "]", "[", "f\"{model_id:02}_loss\"", "]", "=", "float", "(", "total_loss", ")", "\n", "self", ".", "ite", "+=", "1", "\n", "", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._LossBase.__init__": [[53, 57], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "_LossBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ite", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._LossBase.forward": [[58, 60], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "target_output", ",", "source_output", ",", "label_id", ",", "log", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func.IndependentLoss.__init__": [[68, 72], ["loss_func._LossBase.__init__", "globals"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "IndependentLoss", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "gate", "=", "globals", "(", ")", "[", "args", ".", "gate", ".", "name", "]", "(", "self", ",", "args", ".", "gate", ".", "args", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func.IndependentLoss.forward": [[73, 90], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "loss_func.IndependentLoss.gate.f"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func.CorrectGate.f"], ["", "def", "forward", "(", "self", ",", "target_output", ",", "source_output", ",", "label_id", ",", "log", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "loss_per_sample", "=", "F", ".", "cross_entropy", "(", "target_output", ",", "label_id", ",", "reduction", "=", "'none'", ")", "\n", "\n", "kwargs", "[", "\"_student_logits\"", "]", "=", "target_output", "\n", "identity", "=", "torch", ".", "eye", "(", "target_output", ".", "shape", "[", "-", "1", "]", ",", "device", "=", "target_output", ".", "device", ")", "\n", "onehot_label", "=", "identity", "[", "label_id", "]", "\n", "kwargs", "[", "\"_teacher_logits\"", "]", "=", "onehot_label", "\n", "kwargs", "[", "\"_label_id\"", "]", "=", "label_id", "\n", "\n", "hard_loss", "=", "self", ".", "gate", ".", "f", "(", "loss_per_sample", ",", "log", ",", "**", "kwargs", ")", "\n", "\n", "loss", "=", "hard_loss", "*", "self", ".", "args", ".", "loss_weight", "\n", "\n", "if", "log", "is", "not", "None", ":", "\n", "            ", "self", ".", "ite", "=", "self", ".", "ite", "+", "1", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func.KLLoss.__init__": [[98, 103], ["loss_func._LossBase.__init__", "globals"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "KLLoss", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "T", "=", "args", ".", "T", "\n", "self", ".", "gate", "=", "globals", "(", ")", "[", "args", ".", "gate", ".", "name", "]", "(", "self", ",", "args", ".", "gate", ".", "args", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func.KLLoss.forward": [[104, 125], ["source_output.detach", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "loss_func.KLLoss.kl_divergence", "loss_func.KLLoss.gate.f"], "methods", ["home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func.KLLoss.kl_divergence", "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func.CorrectGate.f"], ["", "def", "forward", "(", "self", ",", "target_output", ",", "source_output", ",", "label_id", ",", "log", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "student_logits", "=", "target_output", "\n", "teacher_logits", "=", "source_output", ".", "detach", "(", ")", "\n", "\n", "student_softmax", "=", "F", ".", "softmax", "(", "student_logits", "/", "self", ".", "T", ",", "dim", "=", "1", ")", "\n", "teacher_softmax", "=", "F", ".", "softmax", "(", "teacher_logits", "/", "self", ".", "T", ",", "dim", "=", "1", ")", "\n", "\n", "soft_loss_per_sample", "=", "self", ".", "kl_divergence", "(", "student_softmax", ",", "teacher_softmax", ",", "log", "=", "log", ")", "\n", "\n", "kwargs", "[", "\"_student_logits\"", "]", "=", "student_logits", "\n", "kwargs", "[", "\"_teacher_logits\"", "]", "=", "teacher_logits", "\n", "kwargs", "[", "\"_label_id\"", "]", "=", "label_id", "\n", "\n", "soft_loss", "=", "self", ".", "gate", ".", "f", "(", "soft_loss_per_sample", ",", "log", ",", "**", "kwargs", ")", "\n", "\n", "loss", "=", "soft_loss", "*", "(", "self", ".", "T", "**", "2", ")", "\n", "\n", "if", "log", "is", "not", "None", ":", "\n", "            ", "self", ".", "ite", "=", "self", ".", "ite", "+", "1", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func.KLLoss.kl_divergence": [[126, 131], ["kl.sum.sum.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "kl_divergence", "(", "self", ",", "student", ",", "teacher", ",", "log", "=", "None", ")", ":", "\n", "        ", "kl", "=", "teacher", "*", "torch", ".", "log", "(", "(", "teacher", "/", "(", "student", "+", "1e-10", ")", ")", "+", "1e-10", ")", "\n", "kl", "=", "kl", ".", "sum", "(", "dim", "=", "1", ")", "\n", "loss", "=", "kl", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.__init__": [[141, 144], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parent", ",", "args", ")", ":", "\n", "        ", "self", ".", "parent", "=", "parent", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func._BaseGate.f": [[145, 147], ["None"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "loss_per_sample", ",", "log", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "soft_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func.ThroughGate.f": [[155, 158], ["loss_per_sample.mean"], "methods", ["None"], ["    ", "def", "f", "(", "self", ",", "loss_per_sample", ",", "log", ",", "**", "kwargs", ")", ":", "\n", "        ", "soft_loss", "=", "loss_per_sample", ".", "mean", "(", ")", "\n", "return", "soft_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func.CutoffGate.f": [[166, 169], ["torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["    ", "def", "f", "(", "self", ",", "loss_per_sample", ",", "log", ",", "**", "kwargs", ")", ":", "\n", "        ", "soft_loss", "=", "torch", ".", "zeros_like", "(", "loss_per_sample", "[", "0", "]", ",", "requires_grad", "=", "True", ")", ".", "sum", "(", ")", "\n", "return", "soft_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func.LinearGate.f": [[177, 192], ["loss_per_sample.mean", "float"], "methods", ["None"], ["    ", "def", "f", "(", "self", ",", "loss_per_sample", ",", "log", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "log", "is", "not", "None", ":", "\n", "            ", "self", ".", "end_ite", "=", "log", ".", "iteration", "\n", "\n", "", "loss_weight", "=", "self", ".", "parent", ".", "ite", "/", "self", ".", "end_ite", "\n", "\n", "soft_loss", "=", "loss_per_sample", ".", "mean", "(", ")", "\n", "soft_loss", "=", "soft_loss", "*", "loss_weight", "\n", "\n", "if", "log", "is", "not", "None", ":", "\n", "            ", "source_id", "=", "kwargs", "[", "\"_source_id\"", "]", "\n", "target_id", "=", "kwargs", "[", "\"_target_id\"", "]", "\n", "log", "[", "\"ite_log\"", "]", "[", "self", ".", "parent", ".", "ite", "]", "[", "f\"{target_id:02}_{source_id:02}_linear_weight\"", "]", "=", "float", "(", "loss_weight", ")", "\n", "\n", "", "return", "soft_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.somaminami_DCL.lib.loss_func.CorrectGate.f": [[200, 224], ["student_logits.argmax", "teacher_logits.argmax", "float", "float", "float", "float", "TT.sum", "TF.sum", "FT.sum", "FF.sum"], "methods", ["None"], ["    ", "def", "f", "(", "self", ",", "loss_per_sample", ",", "log", ",", "**", "kwargs", ")", ":", "\n", "        ", "student_logits", "=", "kwargs", "[", "\"_student_logits\"", "]", "\n", "teacher_logits", "=", "kwargs", "[", "\"_teacher_logits\"", "]", "\n", "label_id", "=", "kwargs", "[", "\"_label_id\"", "]", "\n", "\n", "true_s", "=", "student_logits", ".", "argmax", "(", "dim", "=", "1", ")", "==", "label_id", "\n", "true_t", "=", "teacher_logits", ".", "argmax", "(", "dim", "=", "1", ")", "==", "label_id", "\n", "TT", "=", "(", "(", "true_t", "==", "1", ")", "&", "(", "true_s", "==", "1", ")", ")", ".", "type_as", "(", "loss_per_sample", "[", "0", "]", ")", "\n", "TF", "=", "(", "(", "true_t", "==", "1", ")", "&", "(", "true_s", "==", "0", ")", ")", ".", "type_as", "(", "loss_per_sample", "[", "0", "]", ")", "\n", "FT", "=", "(", "(", "true_t", "==", "0", ")", "&", "(", "true_s", "==", "1", ")", ")", ".", "type_as", "(", "loss_per_sample", "[", "0", "]", ")", "\n", "FF", "=", "(", "(", "true_t", "==", "0", ")", "&", "(", "true_s", "==", "0", ")", ")", ".", "type_as", "(", "loss_per_sample", "[", "0", "]", ")", "\n", "mask", "=", "1", "*", "TT", "+", "1", "*", "TF", "+", "0", "*", "FT", "+", "0", "*", "FF", "\n", "\n", "soft_loss", "=", "(", "loss_per_sample", "*", "mask", ")", ".", "mean", "(", ")", "\n", "\n", "if", "log", "is", "not", "None", ":", "\n", "            ", "source_id", "=", "kwargs", "[", "\"_source_id\"", "]", "\n", "target_id", "=", "kwargs", "[", "\"_target_id\"", "]", "\n", "log", "[", "\"ite_log\"", "]", "[", "self", ".", "parent", ".", "ite", "]", "[", "f\"{target_id:02}_{source_id:02}_TT\"", "]", "=", "float", "(", "TT", ".", "sum", "(", ")", ")", "\n", "log", "[", "\"ite_log\"", "]", "[", "self", ".", "parent", ".", "ite", "]", "[", "f\"{target_id:02}_{source_id:02}_TF\"", "]", "=", "float", "(", "TF", ".", "sum", "(", ")", ")", "\n", "log", "[", "\"ite_log\"", "]", "[", "self", ".", "parent", ".", "ite", "]", "[", "f\"{target_id:02}_{source_id:02}_FT\"", "]", "=", "float", "(", "FT", ".", "sum", "(", ")", ")", "\n", "log", "[", "\"ite_log\"", "]", "[", "self", ".", "parent", ".", "ite", "]", "[", "f\"{target_id:02}_{source_id:02}_FF\"", "]", "=", "float", "(", "FF", ".", "sum", "(", ")", ")", "\n", "\n", "", "return", "soft_loss", "\n", "\n"]]}