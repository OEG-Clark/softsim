{"home.repos.pwc.inspect_result.gykovacs_maweight.None.setup.readme": [[3, 6], ["open", "f.read"], "function", ["None"], ["def", "readme", "(", ")", ":", "\n", "    ", "with", "open", "(", "'README.rst'", ")", "as", "f", ":", "\n", "        ", "return", "f", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight._find_executable": [[45, 96], ["os.environ.get", "os.environ[].split", "list.extend", "list", "set", "os.path.join", "os.path.isfile", "sorted", "sys.platform.startswith", "name.upper", "sys.platform.startswith", "os.path.dirname", "os.path.dirname", "os.path.expanduser", "os.environ.get", "os.environ.get", "os.path.dirname", "os.path.dirname", "os.listdir", "os.path.join", "os.path.isfile", "os.path.abspath", "os.path.abspath", "os.path.isdir", "subprocess.check_output", "subprocess.check_output", "locals", "globals"], "function", ["None"], ["def", "_find_executable", "(", "name", ")", ":", "\n", "    ", "\"\"\" Try to find a executables by name.\n    Args:\n        name(str): name of the executable\n    Returns:\n        str: absolute path of the executable\n    \"\"\"", "\n", "exe_name", "=", "name", "+", "'.exe'", "*", "sys", ".", "platform", ".", "startswith", "(", "'win'", ")", "\n", "env_path", "=", "os", ".", "environ", ".", "get", "(", "name", ".", "upper", "(", ")", "+", "'_PATH'", ",", "''", ")", "\n", "\n", "# prepare the list of candidate locations", "\n", "location_candidates", "=", "os", ".", "environ", "[", "'PATH'", "]", ".", "split", "(", "';'", "if", "sys", ".", "platform", ".", "startswith", "(", "'win'", ")", "else", "':'", ")", "\n", "location_candidates", ".", "extend", "(", "[", "env_path", ",", "\n", "os", ".", "path", ".", "dirname", "(", "env_path", ")", ",", "\n", "os", ".", "path", ".", "dirname", "(", "sys", ".", "executable", ")", ",", "\n", "os", ".", "path", ".", "expanduser", "(", "'~'", ")", ",", "\n", "'c:\\\\program files'", ",", "\n", "os", ".", "environ", ".", "get", "(", "'PROGRAMFILES'", ")", ",", "\n", "'c:\\\\program files (x86)'", ",", "\n", "os", ".", "environ", ".", "get", "(", "'PROGRAMFILES(x86'", ")", ",", "\n", "'/usr/bin'", ",", "\n", "'/usr/local/bin'", ",", "\n", "'/opt/local/bin'", ",", "\n", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", "if", "'__file__'", "in", "locals", "(", ")", "else", "''", ")", ")", ",", "\n", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", "if", "'__file__'", "in", "globals", "(", ")", "else", "''", ")", ")", "]", ")", "\n", "\n", "location_candidates", "=", "[", "l", "for", "l", "in", "location_candidates", "if", "l", "and", "os", ".", "path", ".", "isdir", "(", "l", ")", "]", "\n", "location_candidates", "=", "list", "(", "set", "(", "location_candidates", ")", ")", "\n", "\n", "# checking the candidate directories", "\n", "for", "d", "in", "location_candidates", ":", "\n", "        ", "file", "=", "os", ".", "path", ".", "join", "(", "d", ",", "exe_name", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "subprocess", ".", "check_output", "(", "[", "file", "]", ")", "\n", "return", "file", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "# checking subdirectories", "\n", "", "", "", "for", "d", "in", "location_candidates", ":", "\n", "        ", "for", "subd", "in", "sorted", "(", "os", ".", "listdir", "(", "d", ")", ")", ":", "\n", "            ", "file", "=", "os", ".", "path", ".", "join", "(", "d", ",", "subd", ",", "exe_name", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "subprocess", ".", "check_output", "(", "[", "file", "]", ")", "\n", "return", "file", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "\n", "", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight.executable_version": [[97, 100], ["subprocess.Popen().communicate", "subprocess.Popen"], "function", ["None"], ["", "def", "executable_version", "(", ")", ":", "\n", "    ", "out", ",", "err", "=", "subprocess", ".", "Popen", "(", "[", "_maweight_executables", "[", "'elastix'", "]", ",", "'--version'", "]", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", ".", "communicate", "(", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight.parameters_default": [[101, 151], ["isinstance", "len", "ValueError"], "function", ["None"], ["", "def", "parameters_default", "(", "image_dim", "=", "3", ",", "default_pixel_value", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Returns a default, general settings of the parameters.\n    Args:\n        image_dim (int or image): the number of image dimensions or\n                                    an image to derive the number of\n                                    dimensions from\n        default_pixel_value (num): the default value of pixels\n    Returns:\n        dict: a dictionary of parameters\n    \"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "image_dim", ",", "int", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "image_dim", "=", "len", "(", "image_dim", ".", "shape", ")", "\n", "", "except", ":", "\n", "            ", "raise", "ValueError", "(", "\"pass an integer or an image as 'image_dim'\"", ")", "\n", "\n", "", "", "params", "=", "{", "'FixedImageDimension'", ":", "image_dim", ",", "\n", "'MovingImageDimension'", ":", "image_dim", ",", "\n", "'WriteResultImage'", ":", "\"true\"", ",", "\n", "'ResultImagePixelType'", ":", "\"double\"", ",", "\n", "'FixedInternalImagePixelType'", ":", "\"float\"", ",", "\n", "'MovingInternalImagePixelType'", ":", "\"float\"", ",", "\n", "'UseDirectionCosines'", ":", "\"true\"", ",", "\n", "'Registration'", ":", "\"MultiResolutionRegistration\"", ",", "\n", "'FixedImagePyramid'", ":", "\"FixedRecursiveImagePyramid\"", ",", "\n", "'MovingImagePyramid'", ":", "\"MovingRecursiveImagePyramid\"", ",", "\n", "'HowToCombineTransforms'", ":", "\"Compose\"", ",", "\n", "'DefaultPixelValue'", ":", "\"%f\"", "%", "default_pixel_value", ",", "\n", "'Interpolator'", ":", "\"BSplineInterpolator\"", ",", "\n", "'BSplineInterpolationOrder'", ":", "\"1\"", ",", "\n", "'ResampleInterpolator'", ":", "\"FinalBSplineInterpolator\"", ",", "\n", "'FinalBSplineInterpolationOrder'", ":", "3", ",", "\n", "'Resampler'", ":", "\"DefaultResampler\"", ",", "\n", "'Metric'", ":", "\"AdvancedMattesMutualInformation\"", ",", "\n", "'NumberOfHistogramBins'", ":", "32", ",", "\n", "'ImageSampler'", ":", "\"RandomCoordinate\"", ",", "\n", "'NumberOfSpatialSamples'", ":", "4048", ",", "\n", "'NewSamplesEveryIteration'", ":", "\"true\"", ",", "\n", "'NumberOfResolutions'", ":", "4", ",", "\n", "'Transform'", ":", "\"BSplineTransform\"", ",", "\n", "'Optimizer'", ":", "\"AdaptiveStochasticGradientDescent\"", ",", "\n", "'MaximumNumberOfIterations'", ":", "200", ",", "\n", "'FinalGridSpacingInVoxels'", ":", "[", "10", ",", "10", ",", "10", "]", ",", "\n", "'ResultImageFormat'", ":", "\"nii\"", ",", "\n", "'CheckNumberOfSamples'", ":", "\"false\"", ",", "\n", "\"RandomSeed\"", ":", "5", "}", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight.parameters_fast": [[152, 169], ["_maweight.parameters_default"], "function", ["home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight.parameters_default"], ["", "def", "parameters_fast", "(", "image_dim", "=", "3", ",", "default_pixel_value", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Returns a faster settings of the parameters.\n    Args:\n        image_dim (int or image): the number of image dimensions or\n                                    an image to derive the number of\n                                    dimensions from\n        default_pixel_value (num): the default value of pixels\n    Returns:\n        dict: a dictionary of parameters\n    \"\"\"", "\n", "params", "=", "parameters_default", "(", "image_dim", ",", "default_pixel_value", ")", "\n", "params", "[", "'NumberOfSpatialSamples'", "]", "=", "1024", "\n", "params", "[", "'NumberOfHistogramBins'", "]", "=", "32", "\n", "params", "[", "'RandomSeed'", "]", "=", "5", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight._save_parameters_to_file": [[170, 190], ["open", "open.close", "isinstance", "open.write", "isinstance", "open.write", "isinstance", "open.write", "isinstance", "open.write", "tuple", "len"], "function", ["None"], ["", "def", "_save_parameters_to_file", "(", "params", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Save parameters to file in the appropriate format.\n    Args:\n        params (dict): dictionary of parameters\n        filename (str): the name of the file\n    \"\"\"", "\n", "\n", "file", "=", "open", "(", "filename", ",", "\"w\"", ")", "\n", "for", "k", "in", "params", ":", "\n", "        ", "if", "isinstance", "(", "params", "[", "k", "]", ",", "str", ")", ":", "\n", "            ", "file", ".", "write", "(", "'(%s \"%s\")\\n'", "%", "(", "k", ",", "params", "[", "k", "]", ")", ")", "\n", "", "elif", "isinstance", "(", "params", "[", "k", "]", ",", "int", ")", ":", "\n", "            ", "file", ".", "write", "(", "'(%s %d)\\n'", "%", "(", "k", ",", "params", "[", "k", "]", ")", ")", "\n", "", "elif", "isinstance", "(", "params", "[", "k", "]", ",", "float", ")", ":", "\n", "            ", "file", ".", "write", "(", "'(%s %f)\\n'", "%", "(", "k", ",", "params", "[", "k", "]", ")", ")", "\n", "", "elif", "isinstance", "(", "params", "[", "k", "]", ",", "list", ")", ":", "\n", "            ", "format_string", "=", "'(%s'", "+", "(", "' %d'", "*", "len", "(", "params", "[", "k", "]", ")", ")", "+", "')\\n'", "\n", "file", ".", "write", "(", "format_string", "%", "tuple", "(", "[", "k", "]", "+", "params", "[", "k", "]", ")", ")", "\n", "", "", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight._prepare_files": [[191, 228], ["zip", "range", "isinstance", "len", "file_arguments.append", "nib.Nifti1Image.endswith", "isinstance", "isinstance", "isinstance", "os.path.join", "nibabel.save", "file_arguments.append", "f[].lower", "isinstance", "nibabel.Nifti1Image", "isinstance", "os.path.join", "imageio.imwrite", "file_arguments.append", "len", "str", "len", "numpy.array", "str"], "function", ["None"], ["", "def", "_prepare_files", "(", "image_parameters", ",", "tmp_dir", ")", ":", "\n", "    ", "\"\"\"\n    Those image parameters which are not file paths are saved as files in the\n    temporary directory, the dimension of images if extracted.\n    Args:\n        image_parameters (list): the list of image parameters (paths or images)\n        tmp_dir (str): the path of the temporary directory\n    Returns:\n        list, int: the list of paths, dimension of images\n    \"\"\"", "\n", "file_arguments", "=", "[", "]", "\n", "image_dim", "=", "None", "\n", "\n", "for", "i", ",", "f", "in", "zip", "(", "range", "(", "len", "(", "image_parameters", ")", ")", ",", "image_parameters", ")", ":", "\n", "        ", "if", "isinstance", "(", "f", ",", "str", ")", ":", "\n", "# if argument is filename", "\n", "            ", "file_arguments", ".", "append", "(", "f", ")", "\n", "if", "f", ".", "endswith", "(", "'.nii'", ")", ":", "\n", "                ", "image_dim", "=", "3", "\n", "", "elif", "f", "[", "-", "3", ":", "]", ".", "lower", "(", ")", "in", "[", "'tif'", "]", ":", "\n", "                ", "image_dim", "=", "2", "\n", "", "", "elif", "(", "isinstance", "(", "f", ",", "np", ".", "ndarray", ")", "and", "len", "(", "f", ".", "shape", ")", "==", "3", ")", "or", "isinstance", "(", "f", ",", "nib", ".", "Nifti1Image", ")", "or", "isinstance", "(", "f", ",", "nib", ".", "Nifti2Image", ")", ":", "\n", "# if argument is 3D array or NiftiImage object", "\n", "            ", "if", "isinstance", "(", "f", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "f", "=", "nib", ".", "Nifti1Image", "(", "f", ",", "affine", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", ")", "\n", "", "tmp_file", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "str", "(", "i", ")", "+", "'.nii'", ")", "\n", "nib", ".", "save", "(", "f", ",", "tmp_file", ")", "\n", "file_arguments", ".", "append", "(", "tmp_file", ")", "\n", "image_dim", "=", "3", "\n", "", "elif", "(", "isinstance", "(", "f", ",", "np", ".", "array", ")", "and", "len", "(", "f", ".", "shape", ")", "==", "2", ")", ":", "\n", "# if argument is 2D array", "\n", "            ", "tmp_file", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "str", "(", "i", ")", "+", "'.tif'", ")", "\n", "imageio", ".", "imwrite", "(", "tmp_file", ",", "f", ")", "\n", "file_arguments", ".", "append", "(", "tmp_file", ")", "\n", "image_dim", "=", "2", "\n", "\n", "", "", "return", "file_arguments", ",", "image_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight._execute_command": [[229, 245], ["subprocess.Popen", "subprocess.Popen.communicate", "subprocess.Popen.poll", "subprocess.Popen.stdout.readline", "sys.stdout.write", "sys.stdout.flush"], "function", ["None"], ["", "def", "_execute_command", "(", "command", ",", "verbose", ")", ":", "\n", "    ", "\"\"\"\n    Executes a shell command and depending on the verbosity level prints its\n    output to the stdout.\n    Args:\n        command (list(str)): the command and its arguments\n        verbose (int): level of verbosity (0, 1, 2)\n    \"\"\"", "\n", "p", "=", "subprocess", ".", "Popen", "(", "command", ",", "stdin", "=", "subprocess", ".", "PIPE", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "PIPE", ")", "\n", "if", "verbose", ":", "\n", "        ", "while", "p", ".", "poll", "(", ")", "is", "None", ":", "\n", "            ", "out", "=", "p", ".", "stdout", ".", "readline", "(", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "out", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "p", ".", "communicate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight.register_and_transform": [[246, 414], ["_maweight._prepare_files", "os.path.join", "_maweight._save_parameters_to_file", "_maweight._execute_command", "os.path.join", "range", "Exception", "Exception", "_maweight.parameters_default", "tempfile.mkdtemp", "str", "print", "len", "_maweight._execute_command", "shutil.rmtree", "len", "len", "shutil.copyfile", "print", "str", "os.path.join", "shutil.copyfile", "results.append", "results[].get_data", "shutil.copyfile", "results.append", "len", "len", "os.path.join", "nibabel.load", "results.append", "os.path.join", "shutil.copyfile", "results.append", "os.path.join", "imageio.imread", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight._prepare_files", "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight._save_parameters_to_file", "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight._execute_command", "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight.parameters_default", "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight._execute_command"], ["", "", "def", "register_and_transform", "(", "moving", ",", "\n", "fixed", ",", "\n", "to_fit", ",", "\n", "output_names", "=", "None", ",", "\n", "params", "=", "None", ",", "\n", "work_dir", "=", "None", ",", "\n", "threads", "=", "6", ",", "\n", "elastix_path", "=", "None", ",", "\n", "transformix_path", "=", "None", ",", "\n", "registered_image_path", "=", "None", ",", "\n", "verbose", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Registers and transforms images.\n    Args:\n        moving (str or ndarray or Nifti1Image): the moving image\n        fixed (str or ndarray or Nifti1Image): the fixed image\n        to_fit (list(str or ndarray or Nifti1Image)): the images to transform\n                                with the deformation field extracted during the\n                                registration\n        output_names (list(str)): optional filenames to save the transformed images on\n        work_dir (str): optional temporary directory path\n        threads (int): the number of threads to use\n        elastix_path (str): path of the elastix executable\n        transformix_path (str): path of the transformix executable\n        registered_image_path (str): path to save the registered image to\n        verbose (int): verbosity level (0, 1, 2)\n    Returns:\n        list(str or Nifti1Image): output_names if provided, otherwise\n                                the list of transformed Nifti1Image objects\n                                \n    Usage:\n        Suppose you want to segment image F (fixed) using the segmented image M\n        (moving) and two masks MA and MB. F, M, MA and MB can be either \n        numpy.ndarray, nibabel.Nifti1Image, or string paths to nii images.\n        \n        Calling the register_and_transform function will register M to F, and\n        using the deformation field transforms MA and MB to F. (Arbitrary number\n        of mask images can be used.)\n        \n        Example calls:\n            1) The following call returns the two transformed masks in a list:\n            \n            register_and_transform(M, F, [MA, MB])\n            \n            2) The following call writes the two fitted masks into files\n                path_a and path_b:\n                    \n            register_and_transform(M, F, [MA, MB], \n            output_names= [path_a, path_b])\n            \n            3) The following path uses a specified working directory:\n    \n            register_and_transform(M, F, [MA, MB],\n                                   output_names= [path_a, path_b],\n                                   work_dir= path_work_dir)\n            \n            4) Parameters of the registration can be altered by generating\n                a default set of parameters calling the function\n                \n                def_par= parameters_default()\n                \n                updating the dict def_par arbitrarily, like\n                \n                def_par['NumberOfSpatialSamples']= 1024\n                \n                and passing it to the register_and_transform function:\n                    \n            register_and_transform(M, F, [MA, MB],\n                                   output_names= [path_a, path_b],\n                                   params= def_par)\n            \n            5) A particular example:\n                \n            register_and_transform('/home/gykovacs/rabbit/etalon/201k.nii',\n                                     '/home/gykovacs/workspaces/rabbit/to_segment/001-a.nii',\n                                     ['/home/gykovacs/workspaces/rabbit/etalon/201k-mld.nii',\n                                      '/home/gykovacs/workspaces/rabbit/etalon/201k-hinds.nii'],\n                                     ['/home/gykovacs/workspaces/rabbit/output/001-a-mld.nii',\n                                      '/home/gykovacs/workspaces/rabbit/output/001-a-hinds.nii'],\n                                     work_dir= '/home/gykovacs/tmp/')\n\n    \"\"\"", "\n", "\n", "if", "(", "not", "output_names", "is", "None", ")", "and", "len", "(", "output_names", ")", "!=", "len", "(", "to_fit", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"length of output_names (%d) and to_fit (%d) do not match\"", "%", "(", "len", "(", "output_names", ")", ",", "len", "(", "to_fit", ")", ")", ")", "\n", "\n", "", "elastix_path", "=", "elastix_path", "or", "_maweight_executables", "[", "'elastix'", "]", "\n", "transformix_path", "=", "transformix_path", "or", "_maweight_executables", "[", "'transformix'", "]", "\n", "\n", "if", "elastix_path", "is", "None", "or", "transformix_path", "is", "None", ":", "\n", "        ", "raise", "Exception", "(", "'elastix and transformix executables cannot be found'", ")", "\n", "\n", "", "params", "=", "params", "or", "parameters_default", "(", ")", "\n", "\n", "tmp_dir", "=", "work_dir", "or", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "file_arguments", ",", "image_dim", "=", "_prepare_files", "(", "[", "moving", ",", "fixed", "]", "+", "to_fit", ",", "tmp_dir", ")", "\n", "\n", "if", "not", "image_dim", "is", "None", ":", "\n", "        ", "params", "[", "'FixedImageDimension'", "]", "=", "image_dim", "\n", "params", "[", "'MovingImageDimension'", "]", "=", "image_dim", "\n", "if", "image_dim", "==", "3", ":", "\n", "            ", "params", "[", "'ResultImageFormat'", "]", "=", "'nii'", "\n", "", "elif", "image_dim", "==", "2", ":", "\n", "            ", "params", "[", "'ResultImageFormat'", "]", "=", "'tif'", "\n", "params", "[", "'ResultImagePixelType'", "]", "=", "'float'", "\n", "\n", "", "", "params_file", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "'params.txt'", ")", "\n", "_save_parameters_to_file", "(", "params", ",", "params_file", ")", "\n", "\n", "command", "=", "[", "elastix_path", ",", "\n", "'-m'", ",", "\n", "file_arguments", "[", "0", "]", ",", "\n", "'-f'", ",", "\n", "file_arguments", "[", "1", "]", ",", "\n", "'-out'", ",", "\n", "tmp_dir", ",", "\n", "'-p'", ",", "\n", "params_file", ",", "\n", "'-threads'", ",", "\n", "str", "(", "threads", ")", "]", "\n", "\n", "if", "verbose", ">", "2", ":", "print", "(", "'Executing the registration'", ")", "\n", "\n", "_execute_command", "(", "command", ",", "verbose", ")", "\n", "\n", "if", "not", "registered_image_path", "is", "None", ":", "\n", "        ", "if", "image_dim", "==", "3", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "'result.0.nii'", ")", ",", "registered_image_path", ")", "\n", "", "elif", "image_dim", "==", "2", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "'result.0.tif'", ")", ",", "registered_image_path", ")", "\n", "\n", "", "", "path_trafo_params", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "'TransformParameters.0.txt'", ")", "\n", "\n", "results", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "file_arguments", "[", "2", ":", "]", ")", ")", ":", "\n", "        ", "if", "verbose", ">", "2", ":", "print", "(", "'Executing the fitting of %s'", "%", "file_arguments", "[", "2", ":", "]", "[", "i", "]", ")", "\n", "command", "=", "[", "transformix_path", ",", "\n", "'-in'", ",", "\n", "file_arguments", "[", "2", ":", "]", "[", "i", "]", ",", "\n", "'-out'", ",", "\n", "tmp_dir", ",", "\n", "'-tp'", ",", "\n", "path_trafo_params", ",", "\n", "'-threads'", ",", "\n", "str", "(", "threads", ")", "]", "\n", "\n", "_execute_command", "(", "command", ",", "verbose", ")", "\n", "\n", "if", "output_names", "is", "None", ":", "\n", "            ", "if", "image_dim", "==", "3", ":", "\n", "                ", "results", ".", "append", "(", "nib", ".", "load", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "'result.nii'", ")", ")", ")", "\n", "results", "[", "-", "1", "]", ".", "get_data", "(", ")", "\n", "", "elif", "image_dim", "==", "2", ":", "\n", "                ", "results", ".", "append", "(", "imageio", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "'result.tif'", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "image_dim", "==", "3", ":", "\n", "                ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "'result.nii'", ")", ",", "output_names", "[", "i", "]", ")", "\n", "results", ".", "append", "(", "output_names", "[", "i", "]", ")", "\n", "", "elif", "image_dim", "==", "2", ":", "\n", "                ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "'result.tif'", ")", ",", "output_names", "[", "i", "]", ")", "\n", "results", ".", "append", "(", "output_names", "[", "i", "]", ")", "\n", "\n", "", "", "", "if", "work_dir", "is", "None", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "tmp_dir", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight.compute_features": [[415, 442], ["features.append", "feature_names.append", "features.append", "feature_names.append", "features.append", "feature_names.append", "features.append", "feature_names.append", "features.append", "feature_names.append", "features.append", "feature_names.append", "features.extend", "feature_names.extend", "numpy.sum", "numpy.sum", "numpy.mean", "numpy.std", "scipy.stats.skew", "scipy.stats.kurtosis", "numpy.histogram", "range", "len"], "function", ["None"], ["", "def", "compute_features", "(", "mask", ",", "image", ",", "threshold", ",", "bins", ",", "features", ",", "feature_names", ",", "features_to_compute", ",", "postfix", ")", ":", "\n", "    ", "mask", "=", "mask", ">", "threshold", "\n", "masked_image", "=", "image", "[", "mask", "]", "\n", "\n", "if", "'num'", "in", "features_to_compute", ":", "\n", "        ", "features", ".", "append", "(", "np", ".", "sum", "(", "mask", ")", ")", "\n", "feature_names", ".", "append", "(", "'-'", ".", "join", "(", "[", "features_to_compute", "[", "'num'", "]", ",", "postfix", "]", ")", ")", "\n", "", "if", "'sum'", "in", "features_to_compute", ":", "\n", "        ", "features", ".", "append", "(", "np", ".", "sum", "(", "masked_image", ")", ")", "\n", "feature_names", ".", "append", "(", "'-'", ".", "join", "(", "[", "features_to_compute", "[", "'sum'", "]", ",", "postfix", "]", ")", ")", "\n", "", "if", "'mean'", "in", "features_to_compute", ":", "\n", "        ", "features", ".", "append", "(", "np", ".", "mean", "(", "masked_image", ")", ")", "\n", "feature_names", ".", "append", "(", "'-'", ".", "join", "(", "[", "features_to_compute", "[", "'mean'", "]", ",", "postfix", "]", ")", ")", "\n", "", "if", "'std'", "in", "features_to_compute", ":", "\n", "        ", "features", ".", "append", "(", "np", ".", "std", "(", "masked_image", ")", ")", "\n", "feature_names", ".", "append", "(", "'-'", ".", "join", "(", "[", "features_to_compute", "[", "'std'", "]", ",", "postfix", "]", ")", ")", "\n", "", "if", "'skew'", "in", "features_to_compute", ":", "\n", "        ", "features", ".", "append", "(", "skew", "(", "masked_image", ")", ")", "\n", "feature_names", ".", "append", "(", "'-'", ".", "join", "(", "[", "features_to_compute", "[", "'skew'", "]", ",", "postfix", "]", ")", ")", "\n", "", "if", "'kurt'", "in", "features_to_compute", ":", "\n", "        ", "features", ".", "append", "(", "kurtosis", "(", "masked_image", ")", ")", "\n", "feature_names", ".", "append", "(", "'-'", ".", "join", "(", "[", "features_to_compute", "[", "'kurt'", "]", ",", "postfix", "]", ")", ")", "\n", "", "if", "'hist'", "in", "features_to_compute", ":", "\n", "        ", "features", ".", "extend", "(", "np", ".", "histogram", "(", "masked_image", ",", "bins", "=", "bins", ")", "[", "0", "]", ")", "\n", "feature_names", ".", "extend", "(", "[", "'-'", ".", "join", "(", "[", "'hist'", ",", "'%d'", "%", "k", ",", "postfix", "]", ")", "for", "k", "in", "range", "(", "len", "(", "bins", ")", "-", "1", ")", "]", ")", "\n", "\n", "", "return", "features", ",", "feature_names", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight.extract_features_3d": [[443, 520], ["isinstance", "zip", "zip", "pandas.DataFrame", "nibabel.load().get_data", "isinstance", "range", "range", "isinstance", "len", "_maweight.compute_features", "range", "image.get_data.get_data", "len", "isinstance", "_maweight.compute_features", "len", "nibabel.load().get_data", "isinstance", "nibabel.load", "nibabel.load().get_data", "isinstance", "m.get_data", "m.get_data", "nibabel.load", "nibabel.load"], "function", ["home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight.compute_features", "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight.compute_features"], ["", "def", "extract_features_3d", "(", "image", ",", "\n", "masks", ",", "\n", "labels", ",", "\n", "thresholds", "=", "[", "0.5", "]", ",", "\n", "bins", "=", "[", "i", "*", "100", "for", "i", "in", "range", "(", "0", ",", "12", ")", "]", ",", "\n", "features_to_compute", "=", "{", "'num'", ":", "'num'", ",", "\n", "'sum'", ":", "'sum'", ",", "\n", "'mean'", ":", "'mean'", ",", "\n", "'std'", ":", "'std'", ",", "\n", "'skew'", ":", "'skew'", ",", "\n", "'kurt'", ":", "'kurt'", ",", "\n", "'hist'", ":", "'hist'", "}", ")", ":", "\n", "    ", "\"\"\"\n    extract statistical descriptors\n    Args:\n        image (str, ndarray, Nifti1Image): original image\n        masks (list(str, ndarray, Nifti1Image)): list of masks\n        labels (list(str)): the list of labels to use in the feature names,\n                            generally, the ids of the masks\n        thresholds (list(float)): the thresholds used to threshold the masks\n        bins (list(float)): list of bin boundaries used to compute histograms\n    Returns:\n        DataFrame: a dataframe of 1 line containing the extracted features\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "image", ",", "str", ")", ":", "\n", "        ", "image", "=", "nib", ".", "load", "(", "image", ")", ".", "get_data", "(", ")", "\n", "", "elif", "isinstance", "(", "image", ",", "nib", ".", "Nifti1Image", ")", ":", "\n", "        ", "image", "=", "image", ".", "get_data", "(", ")", "\n", "\n", "", "features", "=", "[", "]", "\n", "feature_names", "=", "[", "]", "\n", "\n", "features", ",", "feature_names", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "m", ",", "i", "in", "zip", "(", "masks", ",", "range", "(", "len", "(", "masks", ")", ")", ")", ":", "\n", "        ", "for", "t", "in", "thresholds", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "str", ")", ":", "\n", "                ", "mask", "=", "nib", ".", "load", "(", "m", ")", ".", "get_data", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nib", ".", "Nifti1Image", ")", ":", "\n", "                ", "mask", "=", "m", ".", "get_data", "(", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "m", "\n", "\n", "", "features", ",", "feature_names", "=", "compute_features", "(", "mask", ",", "\n", "image", ",", "\n", "t", ",", "\n", "bins", ",", "\n", "features", ",", "\n", "feature_names", ",", "\n", "features_to_compute", ",", "\n", "'%s-%f'", "%", "(", "labels", "[", "i", "]", ",", "t", ")", ")", "\n", "", "", "mean_mask_image", "=", "None", "\n", "for", "m", ",", "i", "in", "zip", "(", "masks", ",", "range", "(", "len", "(", "masks", ")", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "str", ")", ":", "\n", "            ", "mask", "=", "nib", ".", "load", "(", "m", ")", ".", "get_data", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nib", ".", "Nifti1Image", ")", ":", "\n", "            ", "mask", "=", "m", ".", "get_data", "(", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "m", "\n", "\n", "", "if", "mean_mask_image", "is", "None", ":", "\n", "            ", "mean_mask_image", "=", "mask", "\n", "", "else", ":", "\n", "            ", "mean_mask_image", "+=", "mask", "\n", "", "", "mean_mask_image", "=", "mean_mask_image", "/", "len", "(", "masks", ")", "\n", "for", "t", "in", "thresholds", ":", "\n", "        ", "features", ",", "feature_names", "=", "compute_features", "(", "mean_mask_image", ",", "\n", "image", ",", "\n", "t", ",", "\n", "bins", ",", "\n", "features", ",", "\n", "feature_names", ",", "\n", "features_to_compute", ",", "\n", "'%f-mean_mask'", "%", "(", "t", ")", ")", "\n", "\n", "", "return", "pd", ".", "DataFrame", "(", "data", "=", "[", "features", "]", ",", "columns", "=", "feature_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight.model_selection": [[521, 573], ["pandas.DataFrame", "print", "ModelSelection", "list", "[].regressor.get_params", "ModelSelection.get_best_model", "print", "all_results.append", "ModelSelection.select", "ModelSelection.evaluate", "numpy.std", "numpy.std", "print", "sklearn.preprocessing.StandardScaler", "maweight.mltoolkit.optimization.SimulatedAnnealing", "enumerate", "len", "NegR2_score", "sklearn.model_selection.RepeatedKFold", "ModelSelection.get_best_model", "ModelSelection.get_best_model", "maweight.mltoolkit.automl.R2_score", "maweight.mltoolkit.automl.RMSE_score", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelection.ModelSelection.get_best_model", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelection.ModelSelection.select", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelection.ModelSelection.evaluate", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelection.ModelSelection.get_best_model", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelection.ModelSelection.get_best_model"], ["", "def", "model_selection", "(", "features", ",", "\n", "target", ",", "\n", "objectives", "=", "[", "KNNR_Objective", ",", "\n", "LinearRegression_Objective", ",", "\n", "LassoRegression_Objective", ",", "\n", "RidgeRegression_Objective", ",", "\n", "PLSRegression_Objective", "]", ",", "\n", "dataset", "=", "None", ",", "\n", "type", "=", "None", ",", "\n", "disable_feature_selection", "=", "False", ")", ":", "\n", "    ", "all_results", "=", "[", "]", "\n", "\n", "for", "o", "in", "objectives", ":", "\n", "        ", "print", "(", "\"Objective {}:\"", ".", "format", "(", "o", ".", "__name__", ")", ")", "\n", "results", "=", "{", "}", "\n", "ms", "=", "ModelSelection", "(", "o", ",", "\n", "features", ".", "values", ",", "\n", "target", ".", "values", ",", "\n", "verbosity", "=", "0", ",", "\n", "score_functions", "=", "[", "NegR2_score", "(", ")", "]", ",", "\n", "preprocessor", "=", "StandardScaler", "(", ")", ",", "\n", "optimizer", "=", "SimulatedAnnealing", "(", "verbosity", "=", "0", ",", "\n", "random_state", "=", "11", ")", ",", "\n", "random_state", "=", "11", ",", "\n", "disable_feature_selection", "=", "disable_feature_selection", ")", "\n", "results", "[", "'model_selection_score'", "]", "=", "ms", ".", "select", "(", ")", "[", "'score'", "]", "\n", "results", "[", "'features'", "]", "=", "list", "(", "features", ".", "columns", "[", "ms", ".", "get_best_model", "(", ")", "[", "\"features\"", "]", "]", ")", "\n", "results", "[", "'parameters'", "]", "=", "ms", ".", "get_best_model", "(", ")", "[", "'model'", "]", ".", "regressor", ".", "get_params", "(", ")", "\n", "results", "[", "'model'", "]", "=", "o", ".", "__name__", "\n", "\n", "best", "=", "ms", ".", "get_best_model", "(", ")", "\n", "used_features", "=", "[", "features", ".", "columns", "[", "i", "]", "for", "i", ",", "x", "in", "enumerate", "(", "best", "[", "\"features\"", "]", ")", "if", "x", "]", "\n", "\n", "print", "(", "\"Number of used features: {}\\nUsed features: {} \\nScore: {}\"", ".", "format", "(", "len", "(", "used_features", ")", ",", "used_features", ",", "best", "[", "\"score\"", "]", ")", ")", "\n", "for", "i", "in", "[", "1", "]", ":", "\n", "            ", "tmp", "=", "ms", ".", "evaluate", "(", "n_estimators", "=", "i", ",", "score_functions", "=", "[", "R2_score", "(", ")", ",", "RMSE_score", "(", ")", "]", ",", "validator", "=", "RepeatedKFold", "(", "n_splits", "=", "10", ",", "n_repeats", "=", "20", ",", "random_state", "=", "21", ")", ")", "\n", "results", "[", "'r2_'", "+", "str", "(", "i", ")", "]", "=", "tmp", "[", "'scores'", "]", "[", "0", "]", "\n", "results", "[", "'rmse_'", "+", "str", "(", "i", ")", "]", "=", "tmp", "[", "'scores'", "]", "[", "1", "]", "\n", "results", "[", "'y_test_'", "+", "str", "(", "i", ")", "]", "=", "tmp", "[", "'y_test'", "]", "\n", "results", "[", "'y_pred_'", "+", "str", "(", "i", ")", "]", "=", "tmp", "[", "'y_pred'", "]", "\n", "results", "[", "'y_indices_'", "+", "str", "(", "i", ")", "]", "=", "tmp", "[", "'y_indices'", "]", "\n", "results", "[", "'r2_per_fold_'", "+", "str", "(", "i", ")", "]", "=", "tmp", "[", "'scores_per_fold'", "]", "[", "0", "]", "\n", "results", "[", "'rmse_per_fold_'", "+", "str", "(", "i", ")", "]", "=", "tmp", "[", "'scores_per_fold'", "]", "[", "1", "]", "\n", "results", "[", "'r2_std_'", "+", "str", "(", "i", ")", "]", "=", "np", ".", "std", "(", "tmp", "[", "'scores_per_fold'", "]", "[", "0", "]", ")", "\n", "results", "[", "'rmse_std_'", "+", "str", "(", "i", ")", "]", "=", "np", ".", "std", "(", "tmp", "[", "'scores_per_fold'", "]", "[", "1", "]", ")", "\n", "print", "(", "i", ",", "results", "[", "'r2_'", "+", "str", "(", "i", ")", "]", ")", "\n", "", "results", "[", "'dataset'", "]", "=", "dataset", "\n", "results", "[", "'type'", "]", "=", "type", "\n", "\n", "all_results", ".", "append", "(", "results", ")", "\n", "\n", "", "return", "pd", ".", "DataFrame", "(", "all_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.FixedParameter.__init__": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.FixedParameter.sample": [[14, 16], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.FixedParameter.dim": [[17, 19], ["None"], "methods", ["None"], ["", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.FixedParameter.vectorize": [[20, 22], ["numpy.array"], "methods", ["None"], ["", "def", "vectorize", "(", "self", ",", "parameter", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "parameter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.FixedParameter.devectorize": [[23, 25], ["None"], "methods", ["None"], ["", "def", "devectorize", "(", "self", ",", "vector", ")", ":", "\n", "        ", "return", "vector", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.FixedParameter.mutate": [[26, 28], ["_ParameterSpace.FixedParameter.sample"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample"], ["", "def", "mutate", "(", "self", ",", "parameter", ",", "rate", ")", ":", "\n", "        ", "return", "self", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.FixedParameter.ranges": [[29, 31], ["numpy.array"], "methods", ["None"], ["", "def", "ranges", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "self", ".", "value", ",", "self", ".", "value", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.FixedParameter.cap": [[32, 34], ["None"], "methods", ["None"], ["", "def", "cap", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "self", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformFloatParameter.__init__": [[36, 40], ["_ParameterSpace.UniformFloatParameter.set_random_state"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._RandomStateMixin.RandomStateMixin.set_random_state"], ["    ", "def", "__init__", "(", "self", ",", "lower_bound", ",", "upper_bound", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "lower_bound", "=", "lower_bound", "\n", "self", ".", "upper_bound", "=", "upper_bound", "\n", "self", ".", "set_random_state", "(", "random_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformFloatParameter.sample": [[41, 43], ["_ParameterSpace.UniformFloatParameter.random_state.random"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lower_bound", "+", "self", ".", "random_state", ".", "random", "(", ")", "*", "(", "self", ".", "upper_bound", "-", "self", ".", "lower_bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformFloatParameter.dim": [[44, 46], ["None"], "methods", ["None"], ["", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformFloatParameter.vectorize": [[47, 49], ["numpy.array", "_ParameterSpace.UniformFloatParameter.cap"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.cap"], ["", "def", "vectorize", "(", "self", ",", "parameter", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "self", ".", "cap", "(", "parameter", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformFloatParameter.devectorize": [[50, 52], ["_ParameterSpace.UniformFloatParameter.cap"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.cap"], ["", "def", "devectorize", "(", "self", ",", "vector", ")", ":", "\n", "        ", "return", "self", ".", "cap", "(", "vector", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformFloatParameter.mutate": [[53, 55], ["_ParameterSpace.UniformFloatParameter.sample"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample"], ["", "def", "mutate", "(", "self", ",", "parameter", ",", "rate", "=", "0.5", ")", ":", "\n", "        ", "return", "self", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformFloatParameter.ranges": [[56, 58], ["numpy.array"], "methods", ["None"], ["", "def", "ranges", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "self", ".", "lower_bound", ",", "self", ".", "upper_bound", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformFloatParameter.cap": [[59, 65], ["None"], "methods", ["None"], ["", "def", "cap", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "value", "<", "self", ".", "lower_bound", ":", "\n", "            ", "return", "self", ".", "lower_bound", "\n", "", "elif", "value", ">", "self", ".", "upper_bound", ":", "\n", "            ", "return", "self", ".", "upper_bound", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformIntegerParameter.__init__": [[67, 72], ["_ParameterSpace.UniformIntegerParameter.set_random_state"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._RandomStateMixin.RandomStateMixin.set_random_state"], ["    ", "def", "__init__", "(", "self", ",", "lower_bound", ",", "upper_bound", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "lower_bound", "=", "lower_bound", "\n", "self", ".", "upper_bound", "=", "upper_bound", "\n", "\n", "self", ".", "set_random_state", "(", "random_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformIntegerParameter.sample": [[73, 75], ["_ParameterSpace.UniformIntegerParameter.random_state.randint"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "random_state", ".", "randint", "(", "self", ".", "lower_bound", ",", "self", ".", "upper_bound", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformIntegerParameter.dim": [[76, 78], ["None"], "methods", ["None"], ["", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformIntegerParameter.vectorize": [[79, 81], ["numpy.array", "int", "round", "_ParameterSpace.UniformIntegerParameter.cap"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.cap"], ["", "def", "vectorize", "(", "self", ",", "parameter", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "int", "(", "round", "(", "self", ".", "cap", "(", "parameter", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformIntegerParameter.devectorize": [[82, 84], ["_ParameterSpace.UniformIntegerParameter.cap", "int", "round"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.cap"], ["", "def", "devectorize", "(", "self", ",", "vector", ")", ":", "\n", "        ", "return", "self", ".", "cap", "(", "int", "(", "round", "(", "vector", "[", "0", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformIntegerParameter.mutate": [[85, 87], ["_ParameterSpace.UniformIntegerParameter.sample"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample"], ["", "def", "mutate", "(", "self", ",", "parameter", ",", "rate", "=", "0.5", ")", ":", "\n", "        ", "return", "self", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformIntegerParameter.ranges": [[88, 90], ["numpy.array"], "methods", ["None"], ["", "def", "ranges", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "self", ".", "lower_bound", ",", "self", ".", "upper_bound", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.UniformIntegerParameter.cap": [[91, 97], ["None"], "methods", ["None"], ["", "def", "cap", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "value", "<", "self", ".", "lower_bound", ":", "\n", "            ", "return", "self", ".", "lower_bound", "\n", "", "if", "value", ">", "self", ".", "upper_bound", ":", "\n", "            ", "return", "self", ".", "upper_bound", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.CategorialParameter.__init__": [[99, 103], ["_ParameterSpace.CategorialParameter.set_random_state", "str", "numpy.eye", "enumerate", "len"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._RandomStateMixin.RandomStateMixin.set_random_state"], ["    ", "def", "__init__", "(", "self", ",", "categories", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "categories", "=", "categories", "\n", "self", ".", "map_to_vector", "=", "{", "str", "(", "c", ")", ":", "np", ".", "eye", "(", "len", "(", "categories", ")", ")", "[", "i", "]", "for", "i", ",", "c", "in", "enumerate", "(", "categories", ")", "}", "\n", "self", ".", "set_random_state", "(", "random_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.CategorialParameter.sample": [[104, 106], ["_ParameterSpace.CategorialParameter.random_state.choice"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "random_state", ".", "choice", "(", "self", ".", "categories", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.CategorialParameter.dim": [[107, 109], ["len"], "methods", ["None"], ["", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "categories", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.CategorialParameter.vectorize": [[110, 112], ["str"], "methods", ["None"], ["", "def", "vectorize", "(", "self", ",", "parameter", ")", ":", "\n", "        ", "return", "self", ".", "map_to_vector", "[", "str", "(", "parameter", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.CategorialParameter.devectorize": [[113, 115], ["numpy.argmin", "numpy.apply_along_axis", "numpy.linalg.norm", "numpy.eye", "len"], "methods", ["None"], ["", "def", "devectorize", "(", "self", ",", "vector", ")", ":", "\n", "        ", "return", "self", ".", "categories", "[", "np", ".", "argmin", "(", "np", ".", "apply_along_axis", "(", "lambda", "x", ":", "np", ".", "linalg", ".", "norm", "(", "vector", "-", "x", ")", ",", "axis", "=", "0", ",", "arr", "=", "np", ".", "eye", "(", "len", "(", "self", ".", "categories", ")", ")", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.CategorialParameter.mutate": [[116, 118], ["_ParameterSpace.CategorialParameter.sample"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample"], ["", "def", "mutate", "(", "self", ",", "parameter", ",", "rate", "=", "0.1", ")", ":", "\n", "        ", "return", "self", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.CategorialParameter.ranges": [[119, 121], ["numpy.repeat", "len"], "methods", ["None"], ["", "def", "ranges", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "repeat", "(", "[", "[", "0", ",", "1", "]", "]", ",", "len", "(", "self", ".", "categories", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.CategorialParameter.cap": [[122, 124], ["_ParameterSpace.CategorialParameter.vectorize", "_ParameterSpace.CategorialParameter.devectorize"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.vectorize", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.devectorize"], ["", "def", "cap", "(", "self", ",", "vector", ")", ":", "\n", "        ", "return", "self", ".", "vectorize", "(", "self", ".", "devectorize", "(", "vector", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.CategorialParameter.crossover": [[125, 133], ["_ParameterSpace.CategorialParameter.sample", "_ParameterSpace.CategorialParameter.random_state.random"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample"], ["", "def", "crossover", "(", "self", ",", "parameters1", ",", "parameters2", ",", "crossover_rate", "=", "0.5", ")", ":", "\n", "        ", "new_parameters", "=", "self", ".", "sample", "(", ")", "\n", "for", "p", "in", "parameters1", ":", "\n", "            ", "if", "self", ".", "random_state", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "new_parameters", "[", "p", "]", "=", "parameters1", "[", "p", "]", "\n", "", "else", ":", "\n", "                ", "new_parameters", "[", "p", "]", "=", "parameters2", "[", "p", "]", "\n", "", "", "return", "new_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.__init__": [[135, 139], ["_ParameterSpace.ParameterSpace.set_random_state", "_ParameterSpace.ParameterSpace.init_inner_structure"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._RandomStateMixin.RandomStateMixin.set_random_state", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.init_inner_structure"], ["    ", "def", "__init__", "(", "self", ",", "parameters", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "parameters", "=", "parameters", "\n", "self", ".", "set_random_state", "(", "random_state", ")", "\n", "self", ".", "init_inner_structure", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.init_inner_structure": [[140, 145], ["_ParameterSpace.ParameterSpace.parameters[].dim", "_ParameterSpace.ParameterSpace.parameters[].set_random_state"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.dim", "home.repos.pwc.inspect_result.gykovacs_maweight.base._RandomStateMixin.RandomStateMixin.set_random_state"], ["", "def", "init_inner_structure", "(", "self", ")", ":", "\n", "        ", "self", ".", "dimensions", "=", "{", "p", ":", "self", ".", "parameters", "[", "p", "]", ".", "dim", "(", ")", "for", "p", "in", "self", ".", "parameters", "}", "\n", "if", "not", "self", ".", "random_state", "is", "None", ":", "\n", "            ", "for", "p", "in", "self", ".", "parameters", ":", "\n", "                ", "self", ".", "parameters", "[", "p", "]", ".", "set_random_state", "(", "self", ".", "random_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.dim": [[146, 148], ["numpy.sum", "list", "_ParameterSpace.ParameterSpace.dimensions.values"], "methods", ["None"], ["", "", "", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "list", "(", "self", ".", "dimensions", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.sample": [[149, 154], ["_ParameterSpace.ParameterSpace.parameters[].sample"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "result", "=", "{", "}", "\n", "for", "p", "in", "self", ".", "parameters", ":", "\n", "            ", "result", "[", "p", "]", "=", "self", ".", "parameters", "[", "p", "]", ".", "sample", "(", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.sample_vectorized": [[155, 157], ["_ParameterSpace.ParameterSpace.vectorize", "_ParameterSpace.ParameterSpace.sample"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.vectorize", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample"], ["", "def", "sample_vectorized", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vectorize", "(", "self", ".", "sample", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.vectorize": [[158, 160], ["numpy.hstack", "_ParameterSpace.ParameterSpace.parameters[].vectorize"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.vectorize"], ["", "def", "vectorize", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "return", "np", ".", "hstack", "(", "[", "self", ".", "parameters", "[", "p", "]", ".", "vectorize", "(", "parameters", "[", "p", "]", ")", "for", "p", "in", "parameters", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.devectorize": [[161, 169], ["_ParameterSpace.ParameterSpace.parameters[].devectorize"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.devectorize"], ["", "def", "devectorize", "(", "self", ",", "vector", ")", ":", "\n", "        ", "result", "=", "{", "}", "\n", "n", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", ":", "\n", "            ", "result", "[", "p", "]", "=", "self", ".", "parameters", "[", "p", "]", ".", "devectorize", "(", "vector", "[", "n", ":", "(", "n", "+", "self", ".", "dimensions", "[", "p", "]", ")", "]", ")", "\n", "n", "+=", "self", ".", "dimensions", "[", "p", "]", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.mutate": [[170, 177], ["copy.deepcopy", "_ParameterSpace.ParameterSpace.random_state.random", "_ParameterSpace.ParameterSpace.parameters[].mutate"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.mutate"], ["", "def", "mutate", "(", "self", ",", "parameters", ",", "rate", "=", "0.5", ")", ":", "\n", "        ", "new_parameters", "=", "copy", ".", "deepcopy", "(", "parameters", ")", "\n", "for", "p", "in", "self", ".", "parameters", ":", "\n", "            ", "if", "self", ".", "random_state", ".", "random", "(", ")", "<", "rate", ":", "\n", "                ", "new_parameters", "[", "p", "]", "=", "self", ".", "parameters", "[", "p", "]", ".", "mutate", "(", "new_parameters", "[", "p", "]", ",", "rate", ")", "\n", "\n", "", "", "return", "new_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.crossover": [[178, 187], ["_ParameterSpace.ParameterSpace.sample", "_ParameterSpace.ParameterSpace.random_state.random", "_ParameterSpace.ParameterSpace.random_state.random"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample"], ["", "def", "crossover", "(", "self", ",", "parameters1", ",", "parameters2", ",", "crossover_rate", "=", "0.5", ")", ":", "\n", "        ", "new_parameters", "=", "self", ".", "sample", "(", ")", "\n", "for", "p", "in", "parameters1", ":", "\n", "            ", "if", "self", ".", "random_state", ".", "random", "(", ")", "<", "crossover_rate", ":", "\n", "                ", "if", "self", ".", "random_state", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                    ", "new_parameters", "[", "p", "]", "=", "parameters1", "[", "p", "]", "\n", "", "else", ":", "\n", "                    ", "new_parameters", "[", "p", "]", "=", "parameters2", "[", "p", "]", "\n", "", "", "", "return", "new_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.ranges": [[188, 190], ["numpy.vstack", "_ParameterSpace.ParameterSpace.parameters[].ranges"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.ranges"], ["", "def", "ranges", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "vstack", "(", "[", "self", ".", "parameters", "[", "p", "]", ".", "ranges", "(", ")", "for", "p", "in", "self", ".", "parameters", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.cap": [[191, 193], ["_ParameterSpace.ParameterSpace.vectorize", "_ParameterSpace.ParameterSpace.devectorize"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.vectorize", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.devectorize"], ["", "def", "cap", "(", "self", ",", "vector", ")", ":", "\n", "        ", "return", "self", ".", "vectorize", "(", "self", ".", "devectorize", "(", "vector", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.encode_ndarrays": [[194, 204], ["isinstance", "parameters[].tolist", "isinstance", "_ParameterSpace.ParameterSpace.encode_ndarrays", "isinstance", "int"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.encode_ndarrays"], ["", "@", "classmethod", "\n", "def", "encode_ndarrays", "(", "cls", ",", "parameters", ")", ":", "\n", "        ", "for", "p", "in", "parameters", ":", "\n", "            ", "if", "isinstance", "(", "parameters", "[", "p", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "parameters", "[", "p", "]", "=", "parameters", "[", "p", "]", ".", "tolist", "(", ")", "\n", "", "elif", "isinstance", "(", "parameters", "[", "p", "]", ",", "dict", ")", ":", "\n", "                ", "parameters", "[", "p", "]", "=", "ParameterSpace", ".", "encode_ndarrays", "(", "parameters", "[", "p", "]", ")", "\n", "", "elif", "isinstance", "(", "parameters", "[", "p", "]", ",", "np", ".", "int64", ")", ":", "\n", "                ", "parameters", "[", "p", "]", "=", "int", "(", "parameters", "[", "p", "]", ")", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.decode_ndarrays": [[205, 213], ["isinstance", "numpy.array", "isinstance", "_ParameterSpace.ParameterSpace.decode_ndarrays"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.decode_ndarrays"], ["", "@", "classmethod", "\n", "def", "decode_ndarrays", "(", "cls", ",", "parameters", ")", ":", "\n", "        ", "for", "p", "in", "parameters", ":", "\n", "            ", "if", "isinstance", "(", "parameters", "[", "p", "]", ",", "list", ")", ":", "\n", "                ", "parameters", "[", "p", "]", "=", "np", ".", "array", "(", "parameters", "[", "p", "]", ")", "\n", "", "elif", "isinstance", "(", "parameters", "[", "p", "]", ",", "dict", ")", ":", "\n", "                ", "parameters", "[", "p", "]", "=", "ParameterSpace", ".", "decode_ndarrays", "(", "parameters", "[", "p", "]", ")", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.jsonify": [[214, 218], ["copy.deepcopy", "json.dumps", "_ParameterSpace.ParameterSpace.encode_ndarrays"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.encode_ndarrays"], ["", "@", "classmethod", "\n", "def", "jsonify", "(", "cls", ",", "parameters", ")", ":", "\n", "        ", "parameters", "=", "copy", ".", "deepcopy", "(", "parameters", ")", "\n", "return", "json", ".", "dumps", "(", "ParameterSpace", ".", "encode_ndarrays", "(", "parameters", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.dejsonify": [[219, 222], ["_ParameterSpace.ParameterSpace.decode_ndarrays", "json.loads"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.decode_ndarrays"], ["", "@", "classmethod", "\n", "def", "dejsonify", "(", "cls", ",", "parameters", ")", ":", "\n", "        ", "return", "ParameterSpace", ".", "decode_ndarrays", "(", "json", ".", "loads", "(", "parameters", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.BinaryVectorParameter.__init__": [[224, 233], ["maweight.mltoolkit.base.RandomStateMixin.__init__", "_ParameterSpace.ParameterSpace.__init__"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "n_lower", "=", "1", ",", "n_upper", "=", "None", ",", "n_init", "=", "None", ",", "random_state", "=", "None", ",", "disabled", "=", "False", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "n_lower", "=", "n_lower", "\n", "self", ".", "n_upper", "=", "n_upper", "\n", "self", ".", "n_init", "=", "n_init", "\n", "self", ".", "disabled", "=", "disabled", "\n", "\n", "ParameterBase", ".", "__init__", "(", "self", ")", "\n", "ParameterSpace", ".", "__init__", "(", "self", ",", "{", "'binary_vector'", ":", "self", "}", ",", "random_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.BinaryVectorParameter.sample": [[234, 242], ["numpy.repeat", "numpy.repeat", "_ParameterSpace.BinaryVectorParameter.random_state.choice", "list", "range", "int"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "disabled", ":", "\n", "            ", "tmp", "=", "np", ".", "repeat", "(", "False", ",", "self", ".", "n", ")", "\n", "tmp", "[", "self", ".", "random_state", ".", "choice", "(", "list", "(", "range", "(", "self", ".", "n", ")", ")", ",", "self", ".", "n_init", "or", "int", "(", "self", ".", "n", "/", "2", ")", ",", "replace", "=", "False", ")", "]", "=", "True", "\n", "", "else", ":", "\n", "            ", "tmp", "=", "np", ".", "repeat", "(", "True", ",", "self", ".", "n", ")", "\n", "\n", "", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.BinaryVectorParameter.dim": [[243, 245], ["None"], "methods", ["None"], ["", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.BinaryVectorParameter.vectorize": [[246, 248], ["parameter.astype"], "methods", ["None"], ["", "def", "vectorize", "(", "self", ",", "parameter", ")", ":", "\n", "        ", "return", "parameter", ".", "astype", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.BinaryVectorParameter.devectorize": [[249, 272], ["sorted", "sum", "numpy.repeat", "int", "sum", "numpy.repeat", "sum", "sum", "_ParameterSpace.BinaryVectorParameter.random_state.choice", "_ParameterSpace.BinaryVectorParameter.random_state.choice", "list", "list", "range", "int", "range", "int"], "methods", ["None"], ["", "def", "devectorize", "(", "self", ",", "vector", ")", ":", "\n", "        ", "sort", "=", "sorted", "(", "vector", ")", "\n", "\n", "if", "self", ".", "n_lower", "is", "None", "and", "self", ".", "n_upper", "is", "None", ":", "\n", "            ", "tmp", "=", "vector", ">=", "0.5", "\n", "if", "sum", "(", "tmp", ")", "==", "0", ":", "\n", "                ", "tmp", "=", "np", ".", "repeat", "(", "False", ",", "self", ".", "n", ")", "\n", "tmp", "[", "self", ".", "random_state", ".", "choice", "(", "list", "(", "range", "(", "self", ".", "n", ")", ")", ",", "self", ".", "n_init", "or", "int", "(", "self", ".", "n", "/", "2", ")", ",", "replace", "=", "False", ")", "]", "=", "True", "\n", "", "return", "tmp", "\n", "", "else", ":", "\n", "            ", "n_lower", "=", "self", ".", "n_lower", "or", "0", "\n", "n_upper", "=", "self", ".", "n_upper", "or", "self", ".", "n", "\n", "\n", "binary_vector", "=", "vector", ">=", "0.5", "\n", "if", "sum", "(", "binary_vector", ")", ">=", "n_lower", "and", "sum", "(", "binary_vector", ")", "<=", "n_upper", ":", "\n", "                ", "return", "binary_vector", "\n", "", "else", ":", "\n", "                ", "n", "=", "int", "(", "(", "n_lower", "+", "n_upper", ")", "/", "2", ")", "\n", "", "tmp", "=", "vector", ">=", "sort", "[", "n", "]", "\n", "if", "sum", "(", "tmp", ")", "==", "0", ":", "\n", "                ", "tmp", "=", "np", ".", "repeat", "(", "False", ",", "self", ".", "n", ")", "\n", "tmp", "[", "self", ".", "random_state", ".", "choice", "(", "list", "(", "range", "(", "self", ".", "n", ")", ")", ",", "self", ".", "n_init", "or", "int", "(", "self", ".", "n", "/", "2", ")", ",", "replace", "=", "False", ")", "]", "=", "True", "\n", "", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.BinaryVectorParameter.mutate": [[273, 311], ["parameter.copy", "numpy.sum", "range", "sum", "numpy.repeat", "_ParameterSpace.BinaryVectorParameter.random_state.choice", "len", "list", "_ParameterSpace.BinaryVectorParameter.random_state.choice", "_ParameterSpace.BinaryVectorParameter.random_state.random", "sum", "_ParameterSpace.BinaryVectorParameter.random_state.choice", "range", "_ParameterSpace.BinaryVectorParameter.random_state.choice", "_ParameterSpace.BinaryVectorParameter.random_state.choice", "sum", "list", "numpy.where", "_ParameterSpace.BinaryVectorParameter.random_state.choice", "range", "int", "numpy.where", "numpy.where", "sum", "numpy.where", "sum"], "methods", ["None"], ["", "", "def", "mutate", "(", "self", ",", "parameter", ",", "rate", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "disabled", ":", "\n", "            ", "return", "parameter", "\n", "\n", "", "new_parameter", "=", "parameter", ".", "copy", "(", ")", "\n", "current_n", "=", "np", ".", "sum", "(", "new_parameter", ")", "\n", "\n", "if", "rate", "==", "None", ":", "\n", "            ", "increase", ",", "decrease", "=", "False", ",", "False", "\n", "\n", "if", "(", "self", ".", "n_lower", "is", "None", "and", "current_n", ">", "0", ")", "or", "(", "not", "self", ".", "n_lower", "is", "None", "and", "current_n", ">", "self", ".", "n_lower", ")", ":", "\n", "                ", "decrease", "=", "True", "\n", "", "if", "(", "self", ".", "n_upper", "is", "None", "and", "current_n", "<", "self", ".", "n", "-", "1", ")", "or", "(", "not", "self", ".", "n_upper", "is", "None", "and", "current_n", "<", "self", ".", "n_upper", ")", ":", "\n", "                ", "increase", "=", "True", "\n", "\n", "", "if", "decrease", "and", "increase", ":", "\n", "                ", "idx", "=", "self", ".", "random_state", ".", "choice", "(", "list", "(", "range", "(", "self", ".", "n", ")", ")", ")", "\n", "", "elif", "decrease", ":", "\n", "                ", "idx", "=", "self", ".", "random_state", ".", "choice", "(", "np", ".", "where", "(", "new_parameter", "==", "True", ")", "[", "0", "]", ")", "\n", "", "elif", "increase", ":", "\n", "                ", "idx", "=", "self", ".", "random_state", ".", "choice", "(", "np", ".", "where", "(", "new_parameter", "==", "False", ")", "[", "0", "]", ")", "\n", "\n", "", "new_parameter", "[", "idx", "]", "=", "not", "new_parameter", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "new_parameter", ")", ")", ":", "\n", "                ", "if", "self", ".", "random_state", ".", "random", "(", ")", "<", "rate", ":", "\n", "                    ", "new_parameter", "[", "i", "]", "=", "not", "new_parameter", "[", "i", "]", "\n", "", "", "if", "not", "self", ".", "n_lower", "is", "None", "and", "sum", "(", "new_parameter", ")", "<", "self", ".", "n_lower", ":", "\n", "                ", "new_parameter", "[", "self", ".", "random_state", ".", "choice", "(", "np", ".", "where", "(", "new_parameter", "==", "False", ")", "[", "0", "]", ",", "self", ".", "n_lower", "-", "sum", "(", "new_parameter", ")", ",", "replace", "=", "False", ")", "]", "=", "True", "\n", "", "elif", "not", "self", ".", "n_upper", "is", "None", "and", "sum", "(", "new_parameter", ")", ">", "self", ".", "n_upper", ":", "\n", "                ", "new_parameter", "[", "self", ".", "random_state", ".", "choice", "(", "np", ".", "where", "(", "new_parameter", "==", "True", ")", "[", "0", "]", ",", "sum", "(", "new_parameter", ")", "-", "self", ".", "n_upper", ",", "replace", "=", "False", ")", "]", "=", "False", "\n", "\n", "", "", "tmp", "=", "new_parameter", "\n", "if", "sum", "(", "tmp", ")", "==", "0", ":", "\n", "            ", "tmp", "=", "np", ".", "repeat", "(", "False", ",", "self", ".", "n", ")", "\n", "tmp", "[", "self", ".", "random_state", ".", "choice", "(", "list", "(", "range", "(", "self", ".", "n", ")", ")", ",", "self", ".", "n_init", "or", "int", "(", "self", ".", "n", "/", "2", ")", ",", "replace", "=", "False", ")", "]", "=", "True", "\n", "\n", "", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.BinaryVectorParameter.crossover": [[312, 346], ["parameter1.copy", "range", "numpy.sum", "len", "set", "set", "set", "set.difference", "set.difference", "sum", "numpy.repeat", "numpy.where", "_ParameterSpace.BinaryVectorParameter.random_state.random", "numpy.where", "numpy.where", "numpy.where", "_ParameterSpace.BinaryVectorParameter.random_state.choice", "_ParameterSpace.BinaryVectorParameter.random_state.choice", "_ParameterSpace.BinaryVectorParameter.random_state.choice", "_ParameterSpace.BinaryVectorParameter.random_state.randint", "list", "list", "set.difference.union", "range", "int"], "methods", ["None"], ["", "def", "crossover", "(", "self", ",", "parameter1", ",", "parameter2", ",", "crossover_rate", "=", "0.9", ")", ":", "\n", "        ", "if", "self", ".", "disabled", ":", "\n", "            ", "return", "parameter1", "\n", "", "new_parameter", "=", "parameter1", ".", "copy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "parameter2", ")", ")", ":", "\n", "            ", "if", "crossover_rate", "is", "None", "or", "self", ".", "random_state", ".", "random", "(", ")", "<", "crossover_rate", ":", "\n", "                ", "new_parameter", "[", "i", "]", "=", "parameter2", "[", "i", "]", "if", "self", ".", "random_state", ".", "randint", "(", "2", ")", "==", "1", "else", "parameter1", "[", "i", "]", "\n", "\n", "", "", "current_n", "=", "np", ".", "sum", "(", "new_parameter", ")", "\n", "\n", "increase", ",", "decrease", "=", "0", ",", "0", "\n", "if", "not", "self", ".", "n_lower", "is", "None", "and", "current_n", "<", "self", ".", "n_lower", ":", "\n", "            ", "increase", "=", "self", ".", "n_lower", "-", "current_n", "\n", "", "if", "not", "self", ".", "n_upper", "is", "None", "and", "current_n", ">", "self", ".", "n_upper", ":", "\n", "            ", "decrease", "=", "current_n", "-", "self", ".", "n_upper", "\n", "\n", "", "if", "increase", ">", "0", ":", "\n", "            ", "already_set", "=", "set", "(", "np", ".", "where", "(", "new_parameter", "==", "True", ")", "[", "0", "]", ")", "\n", "set_1", "=", "set", "(", "np", ".", "where", "(", "parameter1", "==", "True", ")", "[", "0", "]", ")", "\n", "set_2", "=", "set", "(", "np", ".", "where", "(", "parameter2", "==", "True", ")", "[", "0", "]", ")", "\n", "not_set_1", "=", "set_1", ".", "difference", "(", "already_set", ")", "\n", "not_set_2", "=", "set_2", ".", "difference", "(", "already_set", ")", "\n", "new_parameter", "[", "self", ".", "random_state", ".", "choice", "(", "list", "(", "not_set_1", ".", "union", "(", "not_set_2", ")", ")", ",", "increase", ")", "]", "=", "True", "\n", "", "if", "decrease", ">", "0", ":", "\n", "            ", "already_set", "=", "np", ".", "where", "(", "new_parameter", "==", "True", ")", "[", "0", "]", "\n", "new_parameter", "[", "self", ".", "random_state", ".", "choice", "(", "already_set", ",", "decrease", ")", "]", "=", "False", "\n", "\n", "", "tmp", "=", "new_parameter", "\n", "if", "sum", "(", "tmp", ")", "==", "0", ":", "\n", "            ", "tmp", "=", "np", ".", "repeat", "(", "False", ",", "self", ".", "n", ")", "\n", "tmp", "[", "self", ".", "random_state", ".", "choice", "(", "list", "(", "range", "(", "self", ".", "n", ")", ")", ",", "self", ".", "n_init", "or", "int", "(", "self", ".", "n", "/", "2", ")", ",", "replace", "=", "False", ")", "]", "=", "True", "\n", "\n", "", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.BinaryVectorParameter.ranges": [[347, 349], ["numpy.repeat", "_ParameterSpace.BinaryVectorParameter.dim"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.dim"], ["", "def", "ranges", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "repeat", "(", "[", "[", "0", ",", "1", "]", "]", ",", "self", ".", "dim", "(", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.BinaryVectorParameter.cap": [[350, 352], ["_ParameterSpace.BinaryVectorParameter.vectorize", "_ParameterSpace.BinaryVectorParameter.devectorize"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.vectorize", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.devectorize"], ["", "def", "cap", "(", "self", ",", "vector", ")", ":", "\n", "        ", "return", "self", ".", "vectorize", "(", "self", ".", "devectorize", "(", "vector", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.GroupedBinaryVectorParameter.__init__": [[354, 369], ["len", "maweight.mltoolkit.base.RandomStateMixin.__init__", "_ParameterSpace.ParameterSpace.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__"], ["    ", "def", "__init__", "(", "self", ",", "length", ",", "n_lower", "=", "None", ",", "n_upper", "=", "None", ",", "n_init", "=", "None", ",", "groups", "=", "None", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        groups are expected to be represented by a dictionary of indices\n        n_init, n_lower and n_upper are relative to the number of groups\n        \"\"\"", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "n_init", "=", "n_init", "\n", "self", ".", "n_lower", "=", "n_lower", "\n", "self", ".", "n_upper", "=", "n_upper", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "group_counts", "=", "{", "g", ":", "len", "(", "groups", "[", "g", "]", ")", "for", "g", "in", "groups", "}", "\n", "self", ".", "n", "=", "self", ".", "length", "\n", "self", ".", "n_groups", "=", "len", "(", "groups", ")", "\n", "ParameterBase", ".", "__init__", "(", "self", ")", "\n", "ParameterSpace", ".", "__init__", "(", "self", ",", "{", "'grouped_binary_vector'", ":", "self", "}", ",", "random_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.GroupedBinaryVectorParameter.sample": [[370, 376], ["numpy.repeat", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.choice", "list", "_ParameterSpace.GroupedBinaryVectorParameter.groups.keys", "int"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "tmp", "=", "np", ".", "repeat", "(", "False", ",", "self", ".", "length", ")", "\n", "group_mask", "=", "self", ".", "random_state", ".", "choice", "(", "list", "(", "self", ".", "groups", ".", "keys", "(", ")", ")", ",", "self", ".", "n_init", "or", "int", "(", "self", ".", "n_groups", "/", "2", ")", "+", "1", ")", "\n", "for", "g", "in", "group_mask", ":", "\n", "            ", "tmp", "[", "self", ".", "groups", "[", "g", "]", "]", "=", "True", "\n", "", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.GroupedBinaryVectorParameter.dim": [[377, 379], ["None"], "methods", ["None"], ["", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.GroupedBinaryVectorParameter.vectorize": [[380, 388], ["numpy.repeat", "numpy.repeat.astype"], "methods", ["None"], ["", "def", "vectorize", "(", "self", ",", "parameter", ")", ":", "\n", "        ", "tmp", "=", "np", ".", "repeat", "(", "False", ",", "self", ".", "n_groups", ")", "\n", "i", "=", "0", "\n", "for", "g", "in", "self", ".", "groups", ":", "\n", "            ", "tmp", "[", "i", "]", "=", "parameter", "[", "self", ".", "groups", "[", "g", "]", "[", "0", "]", "]", "\n", "i", "+=", "1", "\n", "\n", "", "return", "tmp", ".", "astype", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.GroupedBinaryVectorParameter.devectorize": [[389, 419], ["numpy.repeat", "sum", "numpy.repeat", "sorted", "int", "len", "sum", "sum", "sum", "numpy.repeat", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.choice", "len", "list", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.choice", "range", "int", "list", "len", "range", "int", "len", "len", "len"], "methods", ["None"], ["", "def", "devectorize", "(", "self", ",", "vector", ")", ":", "\n", "        ", "tmp", "=", "np", ".", "repeat", "(", "False", ",", "self", ".", "length", ")", "\n", "\n", "binary_vector", "=", "vector", ">=", "0.5", "\n", "\n", "if", "not", "self", ".", "n_lower", "is", "None", "or", "not", "self", ".", "n_upper", "is", "None", ":", "\n", "            ", "n_lower", "=", "self", ".", "n_lower", "or", "0", "\n", "n_upper", "=", "self", ".", "n_upper", "or", "self", ".", "length", "\n", "\n", "if", "sum", "(", "binary_vector", ")", ">=", "n_lower", "and", "sum", "(", "binary_vector", ")", "<=", "n_upper", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "sort", "=", "sorted", "(", "vector", ")", "\n", "\n", "n", "=", "int", "(", "(", "n_lower", "+", "n_upper", ")", "/", "2", ")", "\n", "binary_vector", "=", "vector", ">=", "sort", "[", "n", "]", "\n", "if", "sum", "(", "binary_vector", ")", "==", "0", ":", "\n", "                    ", "binary_vector", "=", "np", ".", "repeat", "(", "False", ",", "len", "(", "binary_vector", ")", ")", "\n", "binary_vector", "[", "self", ".", "random_state", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "binary_vector", ")", ")", ")", ",", "self", ".", "n_init", "or", "int", "(", "len", "(", "binary_vector", ")", "/", "2", ")", ",", "replace", "=", "False", ")", "]", "=", "True", "\n", "\n", "", "", "", "if", "sum", "(", "binary_vector", ")", "==", "0", ":", "\n", "            ", "binary_vector", "=", "np", ".", "repeat", "(", "False", ",", "len", "(", "binary_vector", ")", ")", "\n", "binary_vector", "[", "self", ".", "random_state", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "binary_vector", ")", ")", ")", ",", "self", ".", "n_init", "or", "int", "(", "len", "(", "binary_vector", ")", "/", "2", ")", ",", "replace", "=", "False", ")", "]", "=", "True", "\n", "\n", "", "i", "=", "0", "\n", "for", "g", "in", "self", ".", "groups", ":", "\n", "            ", "tmp", "[", "self", ".", "groups", "[", "g", "]", "]", "=", "binary_vector", "[", "i", "]", "\n", "i", "+=", "1", "\n", "\n", "", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.GroupedBinaryVectorParameter.mutate": [[420, 455], ["_ParameterSpace.GroupedBinaryVectorParameter.vectorize", "numpy.sum", "_ParameterSpace.GroupedBinaryVectorParameter.devectorize", "range", "sum", "numpy.repeat", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.choice", "len", "len", "list", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.choice", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.random", "sum", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.choice", "range", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.choice", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.choice", "sum", "list", "numpy.where", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.choice", "range", "int", "numpy.where", "numpy.where", "sum", "len", "numpy.where", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.vectorize", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.devectorize"], ["", "def", "mutate", "(", "self", ",", "parameter", ",", "rate", "=", "None", ")", ":", "\n", "        ", "new_parameter", "=", "self", ".", "vectorize", "(", "parameter", ")", "\n", "current_n", "=", "np", ".", "sum", "(", "new_parameter", ")", "\n", "\n", "if", "rate", "==", "None", ":", "\n", "            ", "increase", ",", "decrease", "=", "False", ",", "False", "\n", "\n", "if", "(", "self", ".", "n_lower", "is", "None", "and", "current_n", ">", "0", ")", "or", "(", "not", "self", ".", "n_lower", "is", "None", "and", "current_n", ">", "self", ".", "n_lower", ")", ":", "\n", "                ", "decrease", "=", "True", "\n", "", "if", "(", "self", ".", "n_upper", "is", "None", "and", "current_n", "<", "self", ".", "n_groups", "-", "1", ")", "or", "(", "not", "self", ".", "n_upper", "is", "None", "and", "current_n", "<", "self", ".", "n_upper", ")", ":", "\n", "                ", "increase", "=", "True", "\n", "\n", "", "if", "decrease", "and", "increase", ":", "\n", "                ", "idx", "=", "self", ".", "random_state", ".", "choice", "(", "list", "(", "range", "(", "self", ".", "n_groups", ")", ")", ")", "\n", "", "elif", "decrease", ":", "\n", "                ", "idx", "=", "self", ".", "random_state", ".", "choice", "(", "np", ".", "where", "(", "new_parameter", "==", "True", ")", "[", "0", "]", ")", "\n", "", "elif", "increase", ":", "\n", "                ", "idx", "=", "self", ".", "random_state", ".", "choice", "(", "np", ".", "where", "(", "new_parameter", "==", "False", ")", "[", "0", "]", ")", "\n", "\n", "", "new_parameter", "[", "idx", "]", "=", "not", "new_parameter", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "new_parameter", ")", ")", ":", "\n", "                ", "if", "self", ".", "random_state", ".", "random", "(", ")", "<", "rate", ":", "\n", "                    ", "new_parameter", "[", "i", "]", "=", "not", "new_parameter", "[", "i", "]", "\n", "", "", "if", "not", "self", ".", "n_lower", "is", "None", "and", "sum", "(", "new_parameter", ")", "<", "self", ".", "n_lower", ":", "\n", "                ", "new_parameter", "[", "self", ".", "random_state", ".", "choice", "(", "np", ".", "where", "(", "new_parameter", "==", "False", ")", "[", "0", "]", ",", "self", ".", "n_lower", "-", "sum", "(", "new_parameter", ")", ",", "replace", "=", "False", ")", "]", "=", "True", "\n", "", "elif", "not", "self", ".", "n_upper", "is", "None", "and", "sum", "(", "new_parameter", ")", ">", "self", ".", "n_upper", ":", "\n", "                ", "new_parameter", "[", "self", ".", "random_state", ".", "choice", "(", "np", ".", "where", "(", "new_parameter", "==", "True", ")", "[", "0", "]", ",", "sum", "(", "new_parameter", ")", "-", "self", ".", "n_upper", ",", "replace", "=", "False", ")", "]", "=", "False", "\n", "\n", "", "", "binary_vector", "=", "new_parameter", "\n", "if", "sum", "(", "binary_vector", ")", "==", "0", ":", "\n", "            ", "binary_vector", "=", "np", ".", "repeat", "(", "False", ",", "len", "(", "binary_vector", ")", ")", "\n", "binary_vector", "[", "self", ".", "random_state", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "binary_vector", ")", ")", ")", ",", "self", ".", "n_init", "or", "int", "(", "len", "(", "binary_vector", ")", "/", "2", ")", ",", "replace", "=", "False", ")", "]", "=", "True", "\n", "\n", "", "return", "self", ".", "devectorize", "(", "new_parameter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.GroupedBinaryVectorParameter.crossover": [[456, 492], ["_ParameterSpace.GroupedBinaryVectorParameter.vectorize", "_ParameterSpace.GroupedBinaryVectorParameter.vectorize", "_ParameterSpace.GroupedBinaryVectorParameter.vectorize", "range", "numpy.sum", "_ParameterSpace.GroupedBinaryVectorParameter.devectorize", "_ParameterSpace.GroupedBinaryVectorParameter.sample", "len", "set", "set", "set", "set.difference", "set.difference", "sum", "numpy.repeat", "numpy.where", "len", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.random", "numpy.where", "numpy.where", "numpy.where", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.choice", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.choice", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.choice", "_ParameterSpace.GroupedBinaryVectorParameter.random_state.randint", "list", "list", "set.difference.union", "range", "int", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.vectorize", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.vectorize", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.vectorize", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.devectorize", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample"], ["", "def", "crossover", "(", "self", ",", "parameter1", ",", "parameter2", ",", "crossover_rate", ")", ":", "\n", "        ", "new_parameter", "=", "self", ".", "vectorize", "(", "self", ".", "sample", "(", ")", ")", "\n", "parameter1", "=", "self", ".", "vectorize", "(", "parameter1", ")", "\n", "parameter2", "=", "self", ".", "vectorize", "(", "parameter2", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "parameter2", ")", ")", ":", "\n", "            ", "if", "crossover_rate", "is", "None", "or", "self", ".", "random_state", ".", "random", "(", ")", "<", "crossover_rate", ":", "\n", "                ", "new_parameter", "[", "i", "]", "=", "parameter2", "[", "i", "]", "if", "self", ".", "random_state", ".", "randint", "(", "2", ")", "==", "1", "else", "parameter1", "[", "i", "]", "\n", "\n", "", "", "current_n", "=", "np", ".", "sum", "(", "new_parameter", ")", "\n", "\n", "increase", ",", "decrease", "=", "0", ",", "0", "\n", "if", "self", ".", "n_lower", "is", "None", "and", "current_n", "==", "0", ":", "\n", "            ", "increase", "=", "1", "\n", "", "if", "not", "self", ".", "n_lower", "is", "None", "and", "current_n", "<", "self", ".", "n_lower", ":", "\n", "            ", "increase", "=", "self", ".", "n_lower", "-", "current_n", "\n", "", "if", "not", "self", ".", "n_upper", "is", "None", "and", "current_n", ">", "self", ".", "n_upper", ":", "\n", "            ", "decrease", "=", "current_n", "-", "self", ".", "n_upper", "\n", "\n", "", "if", "increase", ">", "0", ":", "\n", "            ", "already_set", "=", "set", "(", "np", ".", "where", "(", "new_parameter", "==", "True", ")", "[", "0", "]", ")", "\n", "set_1", "=", "set", "(", "np", ".", "where", "(", "parameter1", "==", "True", ")", "[", "0", "]", ")", "\n", "set_2", "=", "set", "(", "np", ".", "where", "(", "parameter2", "==", "True", ")", "[", "0", "]", ")", "\n", "not_set_1", "=", "set_1", ".", "difference", "(", "already_set", ")", "\n", "not_set_2", "=", "set_2", ".", "difference", "(", "already_set", ")", "\n", "new_parameter", "[", "self", ".", "random_state", ".", "choice", "(", "list", "(", "not_set_1", ".", "union", "(", "not_set_2", ")", ")", ",", "increase", ")", "]", "=", "True", "\n", "", "if", "decrease", ">", "0", ":", "\n", "            ", "already_set", "=", "np", ".", "where", "(", "new_parameter", "==", "True", ")", "[", "0", "]", "\n", "new_parameter", "[", "self", ".", "random_state", ".", "choice", "(", "already_set", ",", "decrease", ")", "]", "=", "False", "\n", "\n", "", "binary_vector", "=", "new_parameter", "\n", "if", "sum", "(", "binary_vector", ")", "==", "0", ":", "\n", "            ", "binary_vector", "=", "np", ".", "repeat", "(", "False", ",", "len", "(", "binary_vector", ")", ")", "\n", "binary_vector", "[", "self", ".", "random_state", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "binary_vector", ")", ")", ")", ",", "self", ".", "n_init", "or", "int", "(", "len", "(", "binary_vector", ")", "/", "2", ")", ",", "replace", "=", "False", ")", "]", "=", "True", "\n", "\n", "", "return", "self", ".", "devectorize", "(", "new_parameter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.GroupedBinaryVectorParameter.ranges": [[493, 495], ["numpy.repeat", "_ParameterSpace.GroupedBinaryVectorParameter.dim"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.dim"], ["", "def", "ranges", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "repeat", "(", "[", "[", "0", ",", "1", "]", "]", ",", "self", ".", "dim", "(", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.GroupedBinaryVectorParameter.cap": [[496, 498], ["_ParameterSpace.GroupedBinaryVectorParameter.vectorize", "_ParameterSpace.GroupedBinaryVectorParameter.devectorize"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.vectorize", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.devectorize"], ["", "def", "cap", "(", "self", ",", "vector", ")", ":", "\n", "        ", "return", "self", ".", "vectorize", "(", "self", ".", "devectorize", "(", "vector", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.__init__": [[500, 502], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parameter_spaces", ")", ":", "\n", "        ", "self", ".", "parameter_spaces", "=", "parameter_spaces", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.dim": [[503, 505], ["numpy.sum", "_ParameterSpace.JointParameterSpace.parameter_spaces[].dim"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.dim"], ["", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "[", "self", ".", "parameter_spaces", "[", "p", "]", ".", "dim", "(", ")", "for", "p", "in", "self", ".", "parameter_spaces", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample": [[506, 511], ["_ParameterSpace.JointParameterSpace.parameter_spaces[].sample"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "result", "=", "{", "}", "\n", "for", "p", "in", "self", ".", "parameter_spaces", ":", "\n", "            ", "result", "[", "p", "]", "=", "self", ".", "parameter_spaces", "[", "p", "]", ".", "sample", "(", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample_vectorized": [[512, 514], ["numpy.hstack", "_ParameterSpace.JointParameterSpace.parameter_spaces[].sample_vectorized"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample_vectorized"], ["", "def", "sample_vectorized", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "hstack", "(", "[", "self", ".", "parameter_spaces", "[", "p", "]", ".", "sample_vectorized", "(", ")", "for", "p", "in", "self", ".", "parameter_spaces", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.vectorize": [[515, 517], ["numpy.hstack", "_ParameterSpace.JointParameterSpace.parameter_spaces[].vectorize"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.vectorize"], ["", "def", "vectorize", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "return", "np", ".", "hstack", "(", "[", "self", ".", "parameter_spaces", "[", "p", "]", ".", "vectorize", "(", "parameters", "[", "p", "]", ")", "for", "p", "in", "parameters", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.devectorize": [[518, 526], ["_ParameterSpace.JointParameterSpace.parameter_spaces[].devectorize", "_ParameterSpace.JointParameterSpace.parameter_spaces[].dim", "_ParameterSpace.JointParameterSpace.parameter_spaces[].dim"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.devectorize", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.dim", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.dim"], ["", "def", "devectorize", "(", "self", ",", "vector", ")", ":", "\n", "        ", "result", "=", "{", "}", "\n", "n", "=", "0", "\n", "for", "p", "in", "self", ".", "parameter_spaces", ":", "\n", "            ", "result", "[", "p", "]", "=", "self", ".", "parameter_spaces", "[", "p", "]", ".", "devectorize", "(", "vector", "[", "n", ":", "(", "n", "+", "self", ".", "parameter_spaces", "[", "p", "]", ".", "dim", "(", ")", ")", "]", ")", "\n", "n", "+=", "self", ".", "parameter_spaces", "[", "p", "]", ".", "dim", "(", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.mutate": [[527, 533], ["_ParameterSpace.JointParameterSpace.parameter_spaces[].mutate"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.mutate"], ["", "def", "mutate", "(", "self", ",", "parameters", ",", "rate", "=", "0.5", ")", ":", "\n", "        ", "new_parameters", "=", "{", "}", "\n", "for", "p", "in", "self", ".", "parameter_spaces", ":", "\n", "            ", "new_parameters", "[", "p", "]", "=", "self", ".", "parameter_spaces", "[", "p", "]", ".", "mutate", "(", "parameters", "[", "p", "]", ")", "\n", "\n", "", "return", "new_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.crossover": [[534, 540], ["_ParameterSpace.JointParameterSpace.parameter_spaces[].crossover"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.crossover"], ["", "def", "crossover", "(", "self", ",", "parameters1", ",", "parameters2", ",", "crossover_rate", "=", "0.5", ")", ":", "\n", "        ", "new_parameters", "=", "{", "}", "\n", "for", "p", "in", "self", ".", "parameter_spaces", ":", "\n", "            ", "new_parameters", "[", "p", "]", "=", "self", ".", "parameter_spaces", "[", "p", "]", ".", "crossover", "(", "parameters1", "[", "p", "]", ",", "parameters2", "[", "p", "]", ",", "0.5", ")", "\n", "\n", "", "return", "new_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.ranges": [[541, 543], ["numpy.vstack", "_ParameterSpace.JointParameterSpace.parameter_spaces[].ranges"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.ranges"], ["", "def", "ranges", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "vstack", "(", "[", "self", ".", "parameter_spaces", "[", "p", "]", ".", "ranges", "(", ")", "for", "p", "in", "self", ".", "parameter_spaces", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.cap": [[544, 546], ["_ParameterSpace.JointParameterSpace.vectorize", "_ParameterSpace.JointParameterSpace.devectorize"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.vectorize", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.devectorize"], ["", "def", "cap", "(", "self", ",", "vector", ")", ":", "\n", "        ", "return", "self", ".", "vectorize", "(", "self", ".", "devectorize", "(", "vector", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._SimulatedAnnealing.SimulatedAnnealing.__init__": [[35, 67], ["_SimulatedAnnealing.SimulatedAnnealing.set_random_state", "maweight.mltoolkit.base.VerboseLoggingMixin.__init__", "numpy.power", "len", "numpy.max", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._RandomStateMixin.RandomStateMixin.set_random_state", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "max_iterations", "=", "8000", ",", "\n", "T_init", "=", "4", ",", "\n", "annealing_rate", "=", "'auto'", ",", "\n", "eps", "=", "1e-7", ",", "\n", "maximize", "=", "False", ",", "\n", "random_state", "=", "None", ",", "\n", "fn_stopping_condition", "=", "lambda", "x", ":", "False", ",", "\n", "verbosity", "=", "1", ",", "\n", "logging_frequency", "=", "100", ")", ":", "\n", "        ", "self", ".", "max_iterations", "=", "max_iterations", "\n", "self", ".", "T_init", "=", "T_init", "\n", "self", ".", "annealing_rate", "=", "annealing_rate", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "maximize", "=", "maximize", "\n", "self", ".", "fn_stopping_condition", "=", "fn_stopping_condition", "\n", "self", ".", "set_random_state", "(", "random_state", ")", "\n", "self", ".", "verbosity", "=", "verbosity", "\n", "self", ".", "logging_frequency", "=", "logging_frequency", "\n", "\n", "if", "self", ".", "annealing_rate", "==", "'auto'", ":", "\n", "            ", "self", ".", "annealing_rate", "=", "np", ".", "power", "(", "self", ".", "eps", "/", "self", ".", "T_init", ",", "1.0", "/", "self", ".", "max_iterations", ")", "\n", "\n", "", "def", "stopping", "(", "x", ")", ":", "\n", "            ", "if", "len", "(", "x", ")", "<", "500", ":", "\n", "                ", "return", "False", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "max", "(", "x", "[", "-", "500", ":", "]", ")", "-", "np", ".", "min", "(", "x", "[", "-", "500", ":", "]", ")", "<", "1e-5", "\n", "\n", "", "", "self", ".", "fn_stopping_condition", "=", "stopping", "\n", "\n", "VerboseLoggingMixin", ".", "__init__", "(", "self", ",", "\"SimulatedAnnealing\"", ",", "self", ".", "verbosity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._SimulatedAnnealing.SimulatedAnnealing.execute": [[68, 112], ["objective.get_default_parameter_space", "_SimulatedAnnealing.SimulatedAnnealing.verbose_logging", "objective.get_default_parameter_space.sample", "_SimulatedAnnealing.SimulatedAnnealing.verbose_logging", "tqdm.tqdm", "print", "_SimulatedAnnealing.SimulatedAnnealing.verbose_logging", "_SimulatedAnnealing.SimulatedAnnealing.verbose_logging", "objective.score", "range", "_SimulatedAnnealing.SimulatedAnnealing.verbose_logging", "objective.get_default_parameter_space.mutate", "_SimulatedAnnealing.SimulatedAnnealing.verbose_logging", "_SimulatedAnnealing.SimulatedAnnealing.verbose_logging", "_SimulatedAnnealing.SimulatedAnnealing.global_optimum_history.append", "_SimulatedAnnealing.SimulatedAnnealing.fn_stopping_condition", "objective.score", "print", "_SimulatedAnnealing.SimulatedAnnealing.verbose_logging", "_SimulatedAnnealing.SimulatedAnnealing.verbose_logging", "str", "str", "math.log", "_SimulatedAnnealing.SimulatedAnnealing.random_state.random", "str"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.PLSRegression_Objective.get_default_parameter_space", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.mutate", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging"], ["", "def", "execute", "(", "self", ",", "objective", ")", ":", "\n", "        ", "self", ".", "global_optimum_history", "=", "[", "]", "\n", "\n", "p_space", "=", "objective", ".", "get_default_parameter_space", "(", ")", "\n", "\n", "self", ".", "verbose_logging", "(", "1", ",", "'creating initial sample'", ")", "\n", "T", "=", "self", ".", "T_init", "\n", "s", "=", "p_space", ".", "sample", "(", ")", "\n", "s_score", "=", "objective", ".", "score", "(", "s", ")", "[", "0", "]", "\n", "\n", "if", "not", "self", ".", "maximize", ":", "\n", "            ", "multiplier", "=", "1", "\n", "", "else", ":", "\n", "            ", "multiplier", "=", "-", "1", "\n", "\n", "", "self", ".", "verbose_logging", "(", "1", ",", "'executing the main iteration'", ")", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "self", ".", "max_iterations", ")", ")", ":", "\n", "            ", "T", "*=", "self", ".", "annealing_rate", "\n", "\n", "self", ".", "verbose_logging", "(", "2", ",", "'mutating the object'", ")", "\n", "s_new", "=", "p_space", ".", "mutate", "(", "s", ")", "\n", "\n", "self", ".", "verbose_logging", "(", "2", ",", "'scoring the object'", ")", "\n", "s_new_score", "=", "objective", ".", "score", "(", "s_new", ")", "[", "0", "]", "\n", "self", ".", "verbose_logging", "(", "2", ",", "'new_score: %f, best_score: %f'", "%", "(", "s_new_score", ",", "s_score", ")", ")", "\n", "\n", "if", "multiplier", "*", "s_new_score", "<=", "multiplier", "*", "s_score", "or", "(", "multiplier", "*", "s_new_score", "-", "multiplier", "*", "s_score", ")", "/", "T", "<", "math", ".", "log", "(", "self", ".", "random_state", ".", "random", "(", ")", ")", ":", "\n", "                ", "s", "=", "s_new", "\n", "s_score", "=", "s_new_score", "\n", "\n", "", "self", ".", "global_optimum_history", ".", "append", "(", "s_score", ")", "\n", "\n", "if", "self", ".", "fn_stopping_condition", "(", "self", ".", "global_optimum_history", ")", ":", "\n", "                ", "print", "(", "'iterations: %d'", "%", "i", ")", "\n", "return", "{", "'object'", ":", "s", ",", "'score'", ":", "s_score", "}", "\n", "\n", "", "if", "i", "%", "self", ".", "logging_frequency", "==", "0", ":", "\n", "                ", "self", ".", "verbose_logging", "(", "1", ",", "'iteration: %d temperature: %.4f current_objective: %.4f'", "%", "(", "i", ",", "T", ",", "s_score", ")", ")", "\n", "self", ".", "verbose_logging", "(", "1", ",", "'best_params: %s'", "%", "str", "(", "s", ")", ")", "\n", "", "", "print", "(", "'iterations: %d'", "%", "i", ")", "\n", "\n", "self", ".", "verbose_logging", "(", "1", ",", "'best_params: %s'", "%", "str", "(", "s", ")", ")", "\n", "self", ".", "verbose_logging", "(", "1", ",", "'best_score: %s'", "%", "str", "(", "s_score", ")", ")", "\n", "return", "{", "'object'", ":", "s", ",", "'score'", ":", "s_score", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._OptimizationBase.OptimizationBase.__init__": [[4, 6], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._EvolutionaryAlgorithm.EvolutionaryAlgorithm.__init__": [[44, 69], ["_EvolutionaryAlgorithm.EvolutionaryAlgorithm.set_verbosity_level"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.set_verbosity_level"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_generations", "=", "100", ",", "\n", "max_pop_size", "=", "10", ",", "\n", "n_cross", "=", "10", ",", "\n", "n_mutate", "=", "10", ",", "\n", "mutation_rate", "=", "0.5", ",", "\n", "features_mutation_rate", "=", "1.0", ",", "\n", "max_repeats", "=", "20", ",", "\n", "maximize", "=", "False", ",", "\n", "random_state", "=", "None", ",", "\n", "fn_stopping_condition", "=", "lambda", "x", ":", "False", ",", "\n", "verbosity", "=", "1", ",", "\n", "n_jobs", "=", "1", ")", ":", "\n", "        ", "self", ".", "n_generations", "=", "n_generations", "\n", "self", ".", "max_pop_size", "=", "max_pop_size", "\n", "self", ".", "n_cross", "=", "n_cross", "\n", "self", ".", "n_mutate", "=", "n_mutate", "\n", "self", ".", "mutation_rate", "=", "mutation_rate", "\n", "self", ".", "features_mutation_rate", "=", "features_mutation_rate", "\n", "self", ".", "max_repeats", "=", "max_repeats", "\n", "self", ".", "maximize", "=", "maximize", "\n", "self", ".", "fn_stopping_condition", "=", "fn_stopping_condition", "\n", "self", ".", "verbosity", "=", "verbosity", "\n", "self", ".", "set_verbosity_level", "(", "verbosity", ")", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._EvolutionaryAlgorithm.EvolutionaryAlgorithm.execute": [[70, 133], ["objective.get_default_parameter_space", "_EvolutionaryAlgorithm.EvolutionaryAlgorithm.verbose_logging", "_EvolutionaryAlgorithm.EvolutionaryAlgorithm.verbose_logging", "range", "objective.get_default_parameter_space.sample", "_EvolutionaryAlgorithm.EvolutionaryAlgorithm.verbose_logging", "range", "_EvolutionaryAlgorithm.EvolutionaryAlgorithm.verbose_logging", "range", "_EvolutionaryAlgorithm.EvolutionaryAlgorithm.verbose_logging", "sorted.extend", "sorted.extend", "_EvolutionaryAlgorithm.EvolutionaryAlgorithm.global_optimum_history.append", "_EvolutionaryAlgorithm.EvolutionaryAlgorithm.fn_stopping_condition", "_EvolutionaryAlgorithm.EvolutionaryAlgorithm.verbose_logging", "range", "logging.getLogger", "logging.getLogger.setLevel", "Parallel", "mutations.append", "crossovers.append", "sorted", "sorted", "objective.score", "range", "objective.get_default_parameter_space.mutate", "objective.get_default_parameter_space.crossover", "logging.getLogger", "logging.getLogger.setLevel", "Parallel", "Parallel", "objective.score", "delayed", "len", "len", "len", "objective.validate_parameters", "objective.validate_parameters", "objective.score", "range", "range", "objective.score", "objective.score", "delayed", "len", "delayed", "len", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "list", "list", "list", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.PLSRegression_Objective.get_default_parameter_space", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.sample", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.mutate", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.JointParameterSpace.crossover", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.validate_parameters", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.validate_parameters", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score"], ["", "def", "execute", "(", "self", ",", "objective", ")", ":", "\n", "        ", "self", ".", "global_optimum_history", "=", "[", "]", "\n", "\n", "p_space", "=", "objective", ".", "get_default_parameter_space", "(", ")", "\n", "\n", "self", ".", "verbose_logging", "(", "1", ",", "'creating initial population'", ")", "\n", "population", "=", "[", "p_space", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "2", "*", "self", ".", "max_pop_size", ")", "]", "\n", "if", "self", ".", "n_jobs", "==", "1", ":", "\n", "            ", "population", "=", "[", "(", "p", ",", "objective", ".", "score", "(", "p", ")", "[", "0", "]", ")", "for", "p", "in", "population", "]", "\n", "", "else", ":", "\n", "            ", "def", "scoring", "(", "x", ")", ":", "\n", "                    ", "import", "logging", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'smote_variants'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "return", "objective", ".", "score", "(", "x", ")", "[", "0", "]", "\n", "", "scores", "=", "Parallel", "(", "n_jobs", "=", "self", ".", "n_jobs", ")", "(", "delayed", "(", "scoring", ")", "(", "p", ")", "for", "p", "in", "population", ")", "\n", "population", "=", "[", "(", "population", "[", "i", "]", ",", "scores", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "population", ")", ")", "]", "\n", "\n", "", "self", ".", "verbose_logging", "(", "1", ",", "'running main iteration'", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_generations", ")", ":", "\n", "            ", "self", ".", "verbose_logging", "(", "2", ",", "'executing mutations'", ")", "\n", "mutations", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "n_mutate", ")", ":", "\n", "                ", "mutations", ".", "append", "(", "p_space", ".", "mutate", "(", "population", "[", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "population", ")", ")", ")", ")", "]", "[", "0", "]", ")", ")", "\n", "\n", "", "self", ".", "verbose_logging", "(", "2", ",", "'executing crossovers'", ")", "\n", "crossovers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "n_cross", ")", ":", "\n", "                ", "crossovers", ".", "append", "(", "p_space", ".", "crossover", "(", "population", "[", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "population", ")", ")", ")", ")", "]", "[", "0", "]", ",", "population", "[", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "population", ")", ")", ")", ")", "]", "[", "0", "]", ")", ")", "\n", "\n", "", "self", ".", "verbose_logging", "(", "2", ",", "'evaluating mutations (%d) and crossovers (%d)'", "%", "(", "len", "(", "mutations", ")", ",", "len", "(", "crossovers", ")", ")", ")", "\n", "\n", "if", "self", ".", "n_jobs", "==", "1", ":", "\n", "                ", "mutations", "=", "[", "(", "m", ",", "objective", ".", "score", "(", "m", ")", "[", "0", "]", ")", "for", "m", "in", "mutations", "if", "objective", ".", "validate_parameters", "(", "m", ")", "]", "\n", "crossovers", "=", "[", "(", "c", ",", "objective", ".", "score", "(", "c", ")", "[", "0", "]", ")", "for", "c", "in", "crossovers", "if", "objective", ".", "validate_parameters", "(", "c", ")", "]", "\n", "", "else", ":", "\n", "                ", "def", "scoring", "(", "x", ")", ":", "\n", "                    ", "import", "logging", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'smote_variants'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "return", "objective", ".", "score", "(", "x", ")", "[", "0", "]", "\n", "", "scores", "=", "Parallel", "(", "n_jobs", "=", "self", ".", "n_jobs", ")", "(", "delayed", "(", "scoring", ")", "(", "m", ")", "for", "m", "in", "mutations", ")", "\n", "mutations", "=", "[", "(", "mutations", "[", "i", "]", ",", "scores", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "mutations", ")", ")", "]", "\n", "scores", "=", "Parallel", "(", "n_jobs", "=", "self", ".", "n_jobs", ")", "(", "delayed", "(", "scoring", ")", "(", "c", ")", "for", "c", "in", "crossovers", ")", "\n", "crossovers", "=", "[", "(", "crossovers", "[", "i", "]", ",", "scores", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "crossovers", ")", ")", "]", "\n", "\n", "", "population", ".", "extend", "(", "mutations", ")", "\n", "population", ".", "extend", "(", "crossovers", ")", "\n", "\n", "if", "not", "self", ".", "maximize", ":", "\n", "                ", "population", "=", "sorted", "(", "population", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "population", "=", "sorted", "(", "population", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "\n", "", "population", "=", "population", "[", ":", "self", ".", "max_pop_size", "]", "\n", "\n", "self", ".", "global_optimum_history", ".", "append", "(", "population", "[", "0", "]", "[", "1", "]", ")", "\n", "\n", "if", "self", ".", "fn_stopping_condition", "(", "self", ".", "global_optimum_history", ")", ":", "\n", "                ", "return", "population", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "self", ".", "verbose_logging", "(", "1", ",", "\"iteration %d best_score: %f\"", "%", "(", "i", ",", "population", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "return", "{", "'object'", ":", "population", "[", "0", "]", "[", "0", "]", ",", "'score'", ":", "population", "[", "0", "]", "[", "1", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSLE_score.__init__": [[41, 45], ["_ModelSelectionObjective.RMSLE_score.reset"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSE_score.reset"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'max'", ",", "threshold", "=", "None", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSLE_score.reset": [[46, 50], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "sum_of_squares", "=", "0.0", "\n", "self", ".", "n", "=", "0", "\n", "self", ".", "groups", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSLE_score.accumulate": [[51, 66], ["_ModelSelectionObjective.RMSLE_score.score", "pd.DataFrame", "pd.DataFrame.groupby().agg", "numpy.sum", "len", "_ModelSelectionObjective.RMSLE_score.groups.add", "numpy.power", "pd.DataFrame.groupby", "numpy.log", "numpy.log", "numpy.sum", "numpy.sum", "numpy.log", "numpy.log", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score"], ["", "def", "accumulate", "(", "self", ",", "gt", ",", "pred", ",", "groups", "=", "None", ")", ":", "\n", "        ", "if", "groups", "is", "None", ":", "\n", "            ", "self", ".", "sum_of_squares", "=", "self", ".", "sum_of_squares", "+", "np", ".", "sum", "(", "np", ".", "power", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "gt", ")", "+", "1.0", ")", "-", "np", ".", "log", "(", "np", ".", "exp", "(", "pred", ")", "+", "1.0", ")", ",", "2.0", ")", ")", "\n", "self", ".", "n", "=", "self", ".", "n", "+", "len", "(", "gt", ")", "\n", "", "else", ":", "\n", "            ", "results", "=", "pd", ".", "DataFrame", "(", "{", "'gt'", ":", "gt", ",", "'pred'", ":", "pred", ",", "'groups'", ":", "groups", "}", ")", "\n", "results", "[", "'squared_diff'", "]", "=", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "results", "[", "'gt'", "]", ")", "+", "1.0", ")", "-", "np", ".", "log", "(", "np", ".", "exp", "(", "results", "[", "'pred'", "]", ")", "+", "1.0", ")", ")", ".", "apply", "(", "lambda", "x", ":", "x", "*", "x", ")", "\n", "results", "[", "'n'", "]", "=", "1", "\n", "grouped", "=", "results", ".", "groupby", "(", "by", "=", "'groups'", ")", ".", "agg", "(", "{", "'squared_diff'", ":", "lambda", "x", ":", "np", ".", "sum", "(", "x", ")", ",", "'n'", ":", "lambda", "x", ":", "np", ".", "sum", "(", "x", ")", "}", ")", "\n", "if", "self", ".", "groups", "is", "None", ":", "\n", "                ", "self", ".", "groups", "=", "grouped", "\n", "", "else", ":", "\n", "                ", "self", ".", "groups", "=", "self", ".", "groups", ".", "add", "(", "grouped", ",", "fill_value", "=", "0.0", ")", "\n", "\n", "", "", "return", "self", ".", "score", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSLE_score.score": [[67, 82], ["numpy.sqrt", "numpy.max", "numpy.sqrt", "numpy.min", "numpy.mean", "numpy.sum", "len", "numpy.sum", "len"], "methods", ["None"], ["", "def", "score", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "groups", "is", "None", ":", "\n", "            ", "return", "np", ".", "sqrt", "(", "self", ".", "sum_of_squares", "/", "self", ".", "n", ")", "\n", "", "else", ":", "\n", "            ", "scores", "=", "(", "self", ".", "groups", "[", "'squared_diff'", "]", "/", "self", ".", "groups", "[", "'n'", "]", ")", ".", "apply", "(", "lambda", "x", ":", "np", ".", "sqrt", "(", "x", ")", ")", "\n", "if", "self", ".", "mode", "==", "'max'", ":", "\n", "                ", "return", "np", ".", "max", "(", "scores", ".", "values", ")", "\n", "", "elif", "self", ".", "mode", "==", "'min'", ":", "\n", "                ", "return", "np", ".", "min", "(", "scores", ".", "values", ")", "\n", "", "elif", "self", ".", "mode", "==", "'mean'", ":", "\n", "                ", "return", "np", ".", "mean", "(", "scores", ".", "values", ")", "\n", "", "elif", "self", ".", "mode", "==", "'fraction_below'", ":", "\n", "                ", "return", "np", ".", "sum", "(", "scores", "<", "self", ".", "threshold", ")", "/", "len", "(", "scores", ")", "\n", "", "elif", "self", ".", "mode", "==", "'fraction_above'", ":", "\n", "                ", "return", "np", ".", "sum", "(", "scores", ">", "self", ".", "threshold", ")", "/", "len", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.MAE_score.__init__": [[84, 88], ["_ModelSelectionObjective.MAE_score.reset"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSE_score.reset"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'max'", ",", "threshold", "=", "None", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.MAE_score.reset": [[89, 93], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "sum_of_errors", "=", "0.0", "\n", "self", ".", "n", "=", "0", "\n", "self", ".", "groups", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.MAE_score.accumulate": [[94, 109], ["_ModelSelectionObjective.MAE_score.score", "pd.DataFrame", "numpy.abs", "pd.DataFrame.groupby().agg", "numpy.sum", "len", "_ModelSelectionObjective.MAE_score.groups.add", "numpy.abs", "pd.DataFrame.groupby", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score"], ["", "def", "accumulate", "(", "self", ",", "gt", ",", "pred", ",", "groups", "=", "None", ")", ":", "\n", "        ", "if", "groups", "is", "None", ":", "\n", "            ", "self", ".", "sum_of_errors", "=", "self", ".", "sum_of_errors", "+", "np", ".", "sum", "(", "np", ".", "abs", "(", "gt", "-", "pred", ")", ")", "\n", "self", ".", "n", "=", "self", ".", "n", "+", "len", "(", "gt", ")", "\n", "", "else", ":", "\n", "            ", "results", "=", "pd", ".", "DataFrame", "(", "{", "'gt'", ":", "gt", ",", "'pred'", ":", "pred", ",", "'groups'", ":", "groups", "}", ")", "\n", "results", "[", "'sum_diff'", "]", "=", "np", ".", "abs", "(", "results", "[", "'gt'", "]", "-", "results", "[", "'pred'", "]", ")", "\n", "results", "[", "'n'", "]", "=", "1", "\n", "grouped", "=", "results", ".", "groupby", "(", "by", "=", "'groups'", ")", ".", "agg", "(", "{", "'sum_diff'", ":", "lambda", "x", ":", "np", ".", "sum", "(", "x", ")", ",", "'n'", ":", "lambda", "x", ":", "np", ".", "sum", "(", "x", ")", "}", ")", "\n", "if", "self", ".", "groups", "is", "None", ":", "\n", "                ", "self", ".", "groups", "=", "grouped", "\n", "", "else", ":", "\n", "                ", "self", ".", "groups", "=", "self", ".", "groups", ".", "add", "(", "grouped", ",", "fill_value", "=", "0.0", ")", "\n", "\n", "", "", "return", "self", ".", "score", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.MAE_score.score": [[111, 126], ["numpy.max", "numpy.min", "numpy.mean", "numpy.sum", "len", "numpy.sum", "len"], "methods", ["None"], ["", "def", "score", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "groups", "is", "None", ":", "\n", "            ", "return", "self", ".", "sum_of_errors", "/", "self", ".", "n", "\n", "", "else", ":", "\n", "            ", "scores", "=", "self", ".", "groups", "[", "'sum_diff'", "]", "/", "self", ".", "groups", "[", "'n'", "]", "\n", "if", "self", ".", "mode", "==", "'max'", ":", "\n", "                ", "return", "np", ".", "max", "(", "scores", ".", "values", ")", "\n", "", "elif", "self", ".", "mode", "==", "'min'", ":", "\n", "                ", "return", "np", ".", "min", "(", "scores", ".", "values", ")", "\n", "", "elif", "self", ".", "mode", "==", "'mean'", ":", "\n", "                ", "return", "np", ".", "mean", "(", "scores", ".", "values", ")", "\n", "", "elif", "self", ".", "mode", "==", "'fraction_below'", ":", "\n", "                ", "return", "np", ".", "sum", "(", "scores", "<", "self", ".", "threshold", ")", "/", "len", "(", "scores", ")", "\n", "", "elif", "self", ".", "mode", "==", "'fraction_above'", ":", "\n", "                ", "return", "np", ".", "sum", "(", "scores", ">", "self", ".", "threshold", ")", "/", "len", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.GroupScoreMixin.evaluate_scores": [[128, 139], ["numpy.max", "numpy.min", "numpy.mean", "numpy.sum", "len", "len", "list", "list", "list", "numpy.sum", "scores.values", "scores.values", "scores.values", "numpy.array", "scores.values", "numpy.array", "scores.values"], "methods", ["None"], ["    ", "def", "evaluate_scores", "(", "self", ",", "group_mode", ",", "scores", ",", "threshold", ")", ":", "\n", "        ", "if", "self", ".", "group_mode", "==", "'max'", ":", "\n", "            ", "return", "-", "np", ".", "max", "(", "list", "(", "scores", ".", "values", "(", ")", ")", ")", "\n", "", "if", "self", ".", "group_mode", "==", "'min'", ":", "\n", "            ", "return", "-", "np", ".", "min", "(", "list", "(", "scores", ".", "values", "(", ")", ")", ")", "\n", "", "if", "self", ".", "group_mode", "==", "'mean'", ":", "\n", "            ", "return", "-", "np", ".", "mean", "(", "list", "(", "scores", ".", "values", "(", ")", ")", ")", "\n", "", "if", "self", ".", "group_mode", "==", "'fraction_below'", ":", "\n", "            ", "return", "np", ".", "sum", "(", "np", ".", "array", "(", "scores", ".", "values", "(", ")", ")", "<", "self", ".", "threshold", ")", "/", "len", "(", "scores", ")", "\n", "", "if", "self", ".", "group_mode", "==", "'fraction_below'", ":", "\n", "            ", "return", "-", "np", ".", "sum", "(", "np", ".", "array", "(", "scores", ".", "values", "(", ")", ")", ">", "self", ".", "threshold", ")", "/", "len", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.R2_score.__init__": [[141, 145], ["_ModelSelectionObjective.R2_score.reset"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSE_score.reset"], ["    ", "def", "__init__", "(", "self", ",", "group_mode", "=", "'max'", ",", "threshold", "=", "None", ")", ":", "\n", "        ", "self", ".", "group_mode", "=", "group_mode", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.R2_score.reset": [[146, 155], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "sum_of_squares", "=", "0.0", "\n", "self", ".", "sum_of_values", "=", "0.0", "\n", "self", ".", "sum_of_residual_squares", "=", "0.0", "\n", "self", ".", "group_sum_of_squares", "=", "{", "}", "\n", "self", ".", "group_sum_of_values", "=", "{", "}", "\n", "self", ".", "group_sum_of_residual_squares", "=", "{", "}", "\n", "self", ".", "n", "=", "0", "\n", "self", ".", "group_n", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.R2_score.accumulate": [[156, 175], ["_ModelSelectionObjective.R2_score.score", "numpy.dot", "numpy.sum", "numpy.dot", "len", "numpy.dot", "numpy.sum", "numpy.dot", "len"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score"], ["", "def", "accumulate", "(", "self", ",", "gt", ",", "pred", ",", "groups", "=", "None", ",", "sample_weights", "=", "None", ")", ":", "\n", "        ", "if", "groups", "is", "None", ":", "\n", "            ", "self", ".", "sum_of_squares", "+=", "np", ".", "dot", "(", "gt", ",", "gt", ")", "\n", "self", ".", "sum_of_values", "+=", "np", ".", "sum", "(", "gt", ")", "\n", "self", ".", "sum_of_residual_squares", "+=", "np", ".", "dot", "(", "(", "gt", "-", "pred", ")", ",", "(", "gt", "-", "pred", ")", ")", "\n", "self", ".", "n", "+=", "len", "(", "gt", ")", "\n", "", "else", ":", "\n", "            ", "for", "g", "in", "groups", ":", "\n", "                ", "if", "not", "g", "in", "self", ".", "group_sum_of_squares", ":", "\n", "                    ", "self", ".", "group_sum_of_squares", "[", "g", "]", "=", "0", "\n", "self", ".", "group_sum_of_values", "[", "g", "]", "=", "0", "\n", "self", ".", "group_sum_of_residual_squares", "[", "g", "]", "=", "0", "\n", "self", ".", "group_n", "[", "g", "]", "=", "0", "\n", "", "self", ".", "group_sum_of_squares", "[", "g", "]", "+=", "np", ".", "dot", "(", "gt", "[", "groups", "[", "g", "]", "]", ",", "gt", "[", "groups", "[", "g", "]", "]", ")", "\n", "self", ".", "group_sum_of_values", "[", "g", "]", "+=", "np", ".", "sum", "(", "gt", "[", "groups", "[", "g", "]", "]", ")", "\n", "self", ".", "group_sum_of_residual_squares", "[", "g", "]", "+=", "np", ".", "dot", "(", "(", "gt", "[", "groups", "[", "g", "]", "]", "-", "pred", "[", "groups", "[", "g", "]", "]", ")", ",", "(", "gt", "[", "groups", "[", "g", "]", "]", "-", "pred", "[", "groups", "[", "g", "]", "]", ")", ")", "\n", "self", ".", "group_n", "[", "g", "]", "+=", "len", "(", "groups", "[", "g", "]", ")", "\n", "\n", "", "", "return", "self", ".", "score", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.R2_score.score": [[176, 185], ["len", "_ModelSelectionObjective.R2_score.evaluate_scores"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.GroupScoreMixin.evaluate_scores"], ["", "def", "score", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "group_n", ")", "==", "0", ":", "\n", "            ", "return", "(", "1.0", "-", "self", ".", "sum_of_residual_squares", "/", "(", "self", ".", "sum_of_squares", "-", "self", ".", "sum_of_values", "*", "self", ".", "sum_of_values", "/", "self", ".", "n", ")", ")", "\n", "", "else", ":", "\n", "            ", "scores", "=", "{", "}", "\n", "for", "g", "in", "self", ".", "group_n", ":", "\n", "                ", "scores", "[", "g", "]", "=", "(", "1.0", "-", "self", ".", "group_sum_of_residual_squares", "[", "g", "]", "/", "(", "self", ".", "group_sum_of_squares", "[", "g", "]", "-", "self", ".", "group_sum_of_values", "[", "g", "]", "*", "self", ".", "group_sum_of_values", "[", "g", "]", "/", "self", ".", "group_n", "[", "g", "]", ")", ")", "\n", "\n", "", "return", "self", ".", "evaluate_scores", "(", "self", ".", "group_mode", ",", "scores", ",", "self", ".", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSE_score.__init__": [[187, 191], ["_ModelSelectionObjective.RMSE_score.reset"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSE_score.reset"], ["    ", "def", "__init__", "(", "self", ",", "group_mode", "=", "'max'", ",", "threshold", "=", "None", ")", ":", "\n", "        ", "self", ".", "group_mode", "=", "group_mode", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSE_score.reset": [[192, 197], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "sum_of_residual_squares", "=", "0.0", "\n", "self", ".", "group_sum_of_residual_squares", "=", "{", "}", "\n", "self", ".", "n", "=", "0", "\n", "self", ".", "group_n", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSE_score.accumulate": [[198, 211], ["_ModelSelectionObjective.RMSE_score.score", "numpy.dot", "len", "numpy.dot", "len"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score"], ["", "def", "accumulate", "(", "self", ",", "gt", ",", "pred", ",", "groups", "=", "None", ",", "sample_weights", "=", "None", ")", ":", "\n", "        ", "if", "groups", "is", "None", ":", "\n", "            ", "self", ".", "sum_of_residual_squares", "+=", "np", ".", "dot", "(", "gt", "-", "pred", ",", "gt", "-", "pred", ")", "\n", "self", ".", "n", "+=", "len", "(", "gt", ")", "\n", "", "else", ":", "\n", "            ", "for", "g", "in", "groups", ":", "\n", "                ", "if", "not", "g", "in", "self", ".", "group_sum_of_residual_squares", ":", "\n", "                    ", "self", ".", "group_sum_of_residual_squares", "[", "g", "]", "=", "0", "\n", "self", ".", "group_n", "[", "g", "]", "=", "0", "\n", "", "self", ".", "group_sum_of_residual_squares", "[", "g", "]", "+=", "np", ".", "dot", "(", "gt", "[", "groups", "[", "g", "]", "]", "-", "pred", "[", "groups", "[", "g", "]", "]", ",", "gt", "[", "groups", "[", "g", "]", "]", "-", "pred", "[", "groups", "[", "g", "]", "]", ")", "\n", "self", ".", "group_n", "[", "g", "]", "+=", "len", "(", "groups", "[", "g", "]", ")", "\n", "\n", "", "", "return", "self", ".", "score", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSE_score.score": [[212, 220], ["len", "numpy.sqrt", "_ModelSelectionObjective.RMSE_score.evaluate_scores", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.GroupScoreMixin.evaluate_scores"], ["", "def", "score", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "group_n", ")", "==", "0", ":", "\n", "            ", "return", "np", ".", "sqrt", "(", "self", ".", "sum_of_residual_squares", "/", "self", ".", "n", ")", "\n", "", "else", ":", "\n", "            ", "scores", "=", "{", "}", "\n", "for", "g", "in", "self", ".", "group_n", ":", "\n", "                ", "scores", "[", "g", "]", "=", "np", ".", "sqrt", "(", "self", ".", "group_sum_of_residual_squares", "[", "g", "]", "/", "self", ".", "group_n", "[", "g", "]", ")", "\n", "", "return", "self", ".", "evaluate_scores", "(", "self", ".", "group_mode", ",", "scores", ",", "self", ".", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.NegR2_score.__init__": [[222, 224], ["_ModelSelectionObjective.R2_score.__init__"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__"], ["    ", "def", "__init__", "(", "self", ",", "group_mode", "=", "'max'", ",", "threshold", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "group_mode", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.NegR2_score.accumulate": [[225, 227], ["_ModelSelectionObjective.R2_score.accumulate"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.NegR2_score.accumulate"], ["", "def", "accumulate", "(", "self", ",", "gt", ",", "pred", ",", "groups", "=", "None", ",", "sample_weights", "=", "None", ")", ":", "\n", "        ", "return", "-", "super", "(", ")", ".", "accumulate", "(", "gt", ",", "pred", ",", "groups", ",", "sample_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.NegR2_score.score": [[228, 230], ["_ModelSelectionObjective.R2_score.score"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score"], ["", "def", "score", "(", "self", ")", ":", "\n", "        ", "return", "-", "super", "(", ")", ".", "score", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.FeatureSelectionRegressor.__init__": [[232, 237], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "regressor", ",", "\n", "feature_mask", ")", ":", "\n", "        ", "self", ".", "regressor", "=", "regressor", "\n", "self", ".", "feature_mask", "=", "feature_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.FeatureSelectionRegressor.fit": [[238, 246], ["sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler", "_ModelSelectionObjective.FeatureSelectionRegressor.ss.fit_transform", "_ModelSelectionObjective.FeatureSelectionRegressor.regressor.fit", "_ModelSelectionObjective.FeatureSelectionRegressor.regressor.fit"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.fit", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "sample_weights", "=", "None", ")", ":", "\n", "        ", "self", ".", "ss", "=", "StandardScaler", "(", ")", "\n", "X_tmp", "=", "self", ".", "ss", ".", "fit_transform", "(", "X", "[", ":", ",", "self", ".", "feature_mask", "]", ")", "\n", "try", ":", "\n", "            ", "self", ".", "regressor", ".", "fit", "(", "X_tmp", ",", "y", ",", "sample_weights", "=", "sample_weights", ")", "\n", "", "except", ":", "\n", "            ", "self", ".", "regressor", ".", "fit", "(", "X_tmp", ",", "y", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.FeatureSelectionRegressor.predict": [[247, 249], ["_ModelSelectionObjective.FeatureSelectionRegressor.regressor.predict", "_ModelSelectionObjective.FeatureSelectionRegressor.ss.transform"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "self", ".", "regressor", ".", "predict", "(", "self", ".", "ss", ".", "transform", "(", "X", "[", ":", ",", "self", ".", "feature_mask", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.__init__": [[251, 261], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "objective", ",", "\n", "optimizer", ",", "\n", "bagging_params", "=", "{", "}", ",", "\n", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "objective", "=", "objective", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "bagging_params", "=", "bagging_params", "\n", "self", ".", "is_frozen", "=", "False", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.freeze": [[262, 264], ["None"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "self", ".", "is_frozen", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.fit": [[265, 282], ["_ModelSelectionObjective.ModelSelectionRegressor.model.fit", "_ModelSelectionObjective.ModelSelectionRegressor.optimizer.execute", "_ModelSelectionObjective.ModelSelectionRegressor.objective.instantiate", "sklearn.ensemble.BaggingRegressor", "sklearn.ensemble.BaggingRegressor", "sklearn.ensemble.BaggingRegressor", "sklearn.ensemble.BaggingRegressor", "_ModelSelectionObjective.ModelSelectionRegressor.objective.instantiate"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.fit", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._EvolutionaryAlgorithm.EvolutionaryAlgorithm.execute", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.instantiate", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.instantiate"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "self", ".", "objective", ".", "X", "=", "X", "\n", "self", ".", "objective", ".", "y", "=", "y", "\n", "\n", "if", "not", "self", ".", "is_frozen", ":", "\n", "            ", "self", ".", "best_parameters", "=", "self", ".", "optimizer", ".", "execute", "(", "self", ".", "objective", ")", "\n", "\n", "#logging.info('best_parameters: %s' % str(self.best_parameters))", "\n", "\n", "", "if", "self", ".", "bagging_params", "==", "{", "}", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "objective", ".", "instantiate", "(", "self", ".", "best_parameters", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "BaggingRegressor", "(", "base_estimator", "=", "self", ".", "objective", ".", "instantiate", "(", "self", ".", "best_parameters", ")", ",", "**", "(", "self", ".", "bagging_params", ")", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "\n", "", "self", ".", "model", ".", "fit", "(", "X", "[", ":", ",", "self", ".", "best_parameters", "[", "'features'", "]", "]", ",", "y", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.predict": [[283, 285], ["_ModelSelectionObjective.ModelSelectionRegressor.model.predict"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "predict", "(", "X", "[", ":", ",", "self", ".", "best_parameters", "[", "'features'", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.predict_std": [[286, 295], ["isinstance", "numpy.stack", "numpy.stack.append", "_ModelSelectionObjective.ModelSelectionRegressor.model.predict", "numpy.std", "_ModelSelectionObjective.ModelSelectionRegressor.model.predict", "numpy.repeat", "e.predict", "len"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.predict", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.predict", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.predict"], ["", "def", "predict_std", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "model", ",", "BaggingRegressor", ")", ":", "\n", "            ", "ens_preds", "=", "[", "]", "\n", "for", "e", "in", "self", ".", "model", ".", "estimators_", ":", "\n", "                ", "ens_preds", ".", "append", "(", "e", ".", "predict", "(", "X", "[", ":", ",", "self", ".", "best_parameters", "[", "'features'", "]", "]", ")", ")", "\n", "", "ens_preds", "=", "np", ".", "stack", "(", "ens_preds", ",", "axis", "=", "1", ")", "\n", "return", "self", ".", "model", ".", "predict", "(", "X", "[", ":", ",", "self", ".", "best_parameters", "[", "'features'", "]", "]", ")", ",", "np", ".", "std", "(", "ens_preds", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", ".", "predict", "(", "X", "[", ":", ",", "self", ".", "best_parameters", "[", "'features'", "]", "]", ")", ",", "np", ".", "repeat", "(", "0.0", ",", "len", "(", "X", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.score": [[296, 298], ["None"], "methods", ["None"], ["", "", "def", "score", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "best_parameters", "[", "'score'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.__init__": [[303, 353], ["_ModelSelectionObjective.ModelSelectionObjectiveMixin.set_random_state", "maweight.mltoolkit.base.CacheBase.__init__", "maweight.mltoolkit.base.VerboseLoggingMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._RandomStateMixin.RandomStateMixin.set_random_state", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__"], ["def", "__init__", "(", "self", ",", "\n", "base_class", ",", "\n", "X", ",", "\n", "y", ",", "\n", "sample_weights", "=", "None", ",", "\n", "groups", "=", "None", ",", "\n", "evaluation_weights", "=", "None", ",", "\n", "X_val", "=", "None", ",", "\n", "y_val", "=", "None", ",", "\n", "sample_weights_val", "=", "None", ",", "\n", "groups_val", "=", "None", ",", "\n", "evaluation_weights_val", "=", "None", ",", "\n", "feature_groups", "=", "None", ",", "\n", "reverse", "=", "False", ",", "\n", "preprocessor", "=", "None", ",", "\n", "score_functions", "=", "None", ",", "\n", "validator", "=", "None", ",", "\n", "oversampler", "=", "None", ",", "\n", "disable_feature_selection", "=", "False", ",", "\n", "random_state", "=", "None", ",", "\n", "cache_path", "=", "None", ",", "\n", "verbosity", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        Constructor of the Model class\n        Args:\n            feature_names (list(str)): names of the features to use\n        \"\"\"", "\n", "self", ".", "base_class", "=", "base_class", "\n", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "sample_weights", "=", "sample_weights", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "evaluation_weights", "=", "evaluation_weights", "\n", "self", ".", "X_val", "=", "X_val", "\n", "self", ".", "y_val", "=", "y_val", "\n", "self", ".", "sample_weights_val", "=", "sample_weights_val", "\n", "self", ".", "groups_val", "=", "groups_val", "\n", "self", ".", "evaluation_weights_val", "=", "evaluation_weights_val", "\n", "self", ".", "feature_groups", "=", "feature_groups", "\n", "self", ".", "reverse", "=", "reverse", "\n", "self", ".", "preprocessor", "=", "preprocessor", "\n", "self", ".", "score_functions", "=", "score_functions", "\n", "self", ".", "validator", "=", "validator", "\n", "self", ".", "oversampler", "=", "oversampler", "\n", "self", ".", "disable_feature_selection", "=", "disable_feature_selection", "\n", "self", ".", "set_random_state", "(", "random_state", ")", "\n", "self", ".", "verbosity", "=", "verbosity", "\n", "\n", "CacheBase", ".", "__init__", "(", "self", ",", "cache_path", ")", "\n", "VerboseLoggingMixin", ".", "__init__", "(", "self", ",", "\"ModelSelectionObjective\"", ",", "self", ".", "verbosity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.validate_parameters": [[354, 361], ["None"], "methods", ["None"], ["", "def", "validate_parameters", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "\"\"\"\n        Checks the consistency of the actual parameters.\n        Returns:\n            bool: true if the parameters are consistent\n        \"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.get_default_parameter_space": [[362, 369], ["BinaryVectorParameter", "GroupedBinaryVectorParameter", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "get_default_parameter_space", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "feature_groups", "is", "None", ":", "\n", "            ", "n_init", "=", "1", "if", "not", "self", ".", "reverse", "else", "len", "(", "self", ".", "X", "[", "0", "]", ")", "\n", "return", "BinaryVectorParameter", "(", "len", "(", "self", ".", "X", "[", "0", "]", ")", ",", "n_init", "=", "n_init", ",", "random_state", "=", "self", ".", "_random_state_init", ",", "disabled", "=", "self", ".", "disable_feature_selection", ")", "\n", "", "else", ":", "\n", "            ", "n_init", "=", "1", "if", "not", "self", ".", "reverse", "else", "len", "(", "self", ".", "feature_groups", ")", "\n", "return", "GroupedBinaryVectorParameter", "(", "length", "=", "len", "(", "self", ".", "X", "[", "0", "]", ")", ",", "groups", "=", "self", ".", "feature_groups", ",", "n_init", "=", "n_init", ",", "random_state", "=", "self", ".", "_random_state_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin._score_ab": [[370, 400], ["model.fit", "issubclass", "issubclass", "model.fit", "model.predict_proba", "numpy.apply_along_axis", "s.accumulate", "issubclass", "issubclass", "model.predict", "model.predict", "s.accumulate", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.fit", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.fit", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.NegR2_score.accumulate", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.predict", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.predict", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.NegR2_score.accumulate"], ["", "", "def", "_score_ab", "(", "self", ",", "parameters", ",", "model", ",", "X", ",", "y", ",", "sample_weights", ",", "X_val", ",", "y_val", ",", "groups_val", ",", "evaluation_weights_val", ",", "score_functions", ")", ":", "\n", "# trying to fit with sample_weights", "\n", "        ", "try", ":", "\n", "            ", "model", ".", "fit", "(", "X", ",", "y", ",", "sample_weights", "=", "sample_weights", ")", "\n", "", "except", ":", "\n", "            ", "model", ".", "fit", "(", "X", ",", "y", ")", "\n", "\n", "", "if", "issubclass", "(", "self", ".", "base_class", ",", "ClassifierMixin", ")", "or", "issubclass", "(", "self", ".", "base_class", ",", "XGBClassifier", ")", ":", "\n", "# if the problem is classification", "\n", "            ", "y_pred", ",", "y_pred_proba", "=", "None", ",", "None", "\n", "# trying to predict probabilities", "\n", "try", ":", "\n", "                ", "y_pred_proba", "=", "model", ".", "predict_proba", "(", "X_val", ")", "\n", "", "except", ":", "\n", "                ", "y_pred", "=", "model", ".", "predict", "(", "X_val", ")", "\n", "\n", "# predicting labels from probabilities", "\n", "", "if", "y_pred", "is", "None", ":", "\n", "                ", "y_pred", "=", "np", ".", "apply_along_axis", "(", "lambda", "x", ":", "np", ".", "argmax", "(", "x", ")", ",", "axis", "=", "1", ",", "arr", "=", "y_pred_proba", ")", "\n", "\n", "# scoring", "\n", "", "for", "s", "in", "score_functions", ":", "\n", "                ", "s", ".", "accumulate", "(", "y_val", ",", "y_pred", ",", "y_pred_proba", ",", "groups_val", ",", "evaluation_weights_val", ")", "\n", "", "", "elif", "issubclass", "(", "self", ".", "base_class", ",", "RegressorMixin", ")", "or", "issubclass", "(", "self", ".", "base_class", ",", "XGBRegressor", ")", ":", "\n", "# if the problem is regression, prediction", "\n", "            ", "y_pred", "=", "model", ".", "predict", "(", "X_val", ")", "\n", "\n", "# scoring", "\n", "for", "s", "in", "score_functions", ":", "\n", "                ", "s", ".", "accumulate", "(", "y_val", ",", "y_pred", ",", "groups_val", ",", "evaluation_weights_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin._score_with_validator": [[401, 450], ["validator.split", "model.fit", "issubclass", "issubclass", "model.fit", "model.predict_proba", "numpy.apply_along_axis", "s.accumulate", "issubclass", "issubclass", "model.predict", "print", "model.predict", "len", "s.accumulate", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.fit", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.fit", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.NegR2_score.accumulate", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.predict", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.predict", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.NegR2_score.accumulate"], ["", "", "", "def", "_score_with_validator", "(", "self", ",", "parameters", ",", "model", ",", "validator", "=", "None", ",", "score_functions", "=", "None", ")", ":", "\n", "        ", "validator", "=", "validator", "or", "self", ".", "validator", "\n", "\n", "for", "train", ",", "test", "in", "validator", ".", "split", "(", "self", ".", "X", ",", "self", ".", "y", ")", ":", "\n", "            ", "X_train", ",", "X_test", "=", "self", ".", "X", "[", "train", "]", ",", "self", ".", "X", "[", "test", "]", "\n", "y_train", ",", "y_test", "=", "self", ".", "y", "[", "train", "]", ",", "self", ".", "y", "[", "test", "]", "\n", "\n", "# if groups and sample weights are provided, spliting is applied", "\n", "groups_test", ",", "sample_weights_train", ",", "sample_weights_test", ",", "evaluation_weights_train", ",", "evaluation_weights_test", "=", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "if", "self", ".", "groups", ":", "\n", "                ", "groups_test", "=", "self", ".", "groups", "[", "test", "]", "\n", "", "if", "self", ".", "sample_weights", ":", "\n", "                ", "sample_weights_train", ",", "sample_weights_test", "=", "self", ".", "sample_weights", "[", "train", "]", ",", "self", ".", "sample_weights", "[", "test", "]", "\n", "evaluation_weights_train", ",", "evaluation_weights_test", "=", "self", ".", "evaluation_weights", "[", "train", "]", ",", "self", ".", "evaluation_weights", "[", "test", "]", "\n", "\n", "# trying to fit the model with sample weights", "\n", "", "try", ":", "\n", "                ", "model", ".", "fit", "(", "X_train", ",", "y_train", ",", "sample_weights", "=", "sample_weights_train", ")", "\n", "", "except", ":", "\n", "                ", "model", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "\n", "", "if", "issubclass", "(", "self", ".", "base_class", ",", "ClassifierMixin", ")", "or", "issubclass", "(", "self", ".", "base_class", ",", "XGBClassifier", ")", ":", "\n", "# if the problem is classification", "\n", "                ", "y_pred", ",", "y_pred_proba", "=", "None", ",", "None", "\n", "# trying to predict probabilities", "\n", "try", ":", "\n", "                    ", "y_pred_proba", "=", "model", ".", "predict_proba", "(", "X_test", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "e", ")", "\n", "y_pred", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "\n", "# predicting labels from probabilities", "\n", "", "if", "y_pred", "is", "None", ":", "\n", "                    ", "y_pred", "=", "np", ".", "apply_along_axis", "(", "lambda", "x", ":", "np", ".", "argmax", "(", "x", ")", ",", "axis", "=", "1", ",", "arr", "=", "y_pred_proba", ")", "\n", "\n", "# scoring", "\n", "", "for", "s", "in", "score_functions", ":", "\n", "                    ", "s", ".", "accumulate", "(", "y_test", ",", "y_pred", ",", "y_pred_proba", ",", "groups_test", ",", "evaluation_weights_test", ")", "\n", "", "", "elif", "issubclass", "(", "self", ".", "base_class", ",", "RegressorMixin", ")", "or", "issubclass", "(", "self", ".", "base_class", ",", "XGBRegressor", ")", ":", "\n", "# if the problem is regression, prediction", "\n", "                ", "y_pred", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "#print('y_pred.shape', y_pred.shape)", "\n", "if", "len", "(", "y_pred", ".", "shape", ")", ">", "1", ":", "\n", "                    ", "y_pred", "=", "y_pred", "[", ":", ",", "0", "]", "\n", "#print('mod_y_pred.shape', y_pred.shape)", "\n", "\n", "# scoring", "\n", "", "for", "s", "in", "score_functions", ":", "\n", "                    ", "s", ".", "accumulate", "(", "y_test", ",", "y_pred", ",", "groups_test", ",", "evaluation_weights_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score": [[451, 517], ["_ModelSelectionObjective.ModelSelectionObjectiveMixin.verbose_logging", "ParameterSpace.jsonify", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.is_in_cache", "copy.deepcopy", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.instantiate", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.verbose_logging", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.put_into_cache", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.verbose_logging", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.get_from_cache", "issubclass", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.verbose_logging", "copy.deepcopy", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.verbose_logging", "s.reset", "_ModelSelectionObjective.ModelSelectionObjectiveMixin._score_with_validator", "s.score", "str", "NegACC_score", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.verbose_logging", "issubclass", "issubclass", "sklearn.model_selection.RepeatedStratifiedKFold", "sklearn.model_selection.RepeatedStratifiedKFold", "sklearn.model_selection.RepeatedStratifiedKFold", "sklearn.model_selection.RepeatedStratifiedKFold", "sklearn.model_selection.RepeatedKFold", "sklearn.model_selection.RepeatedKFold", "sklearn.model_selection.RepeatedKFold", "sklearn.model_selection.RepeatedKFold", "_ModelSelectionObjective.ModelSelectionObjectiveMixin._score_ab", "_ModelSelectionObjective.NegR2_score", "str", "_ModelSelectionObjective.ModelSelectionObjectiveMixin._score_ab"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._ParameterSpace.ParameterSpace.jsonify", "home.repos.pwc.inspect_result.gykovacs_maweight.base._CacheBase.CacheBase.is_in_cache", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.instantiate", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.base._CacheBase.CacheBase.put_into_cache", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.base._CacheBase.CacheBase.get_from_cache", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSE_score.reset", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin._score_with_validator", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin._score_ab", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin._score_ab"], ["", "", "", "", "def", "score", "(", "self", ",", "\n", "parameters", ",", "\n", "X", "=", "None", ",", "\n", "y", "=", "None", ",", "\n", "groups", "=", "None", ",", "\n", "evaluation_weights", "=", "None", ",", "\n", "validator", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Validate the model.\n        Args:\n            X (pd.DataFrame): validation training data\n            y (pd.DataFrame): validation test data\n            score_function (func): the score function to use\n            bagging (int): the number of random repetitions of k-fold cross validators\n        Returns:\n            float, np.array: the validation score and the mean forecasts on the training set\n        \"\"\"", "\n", "\n", "self", ".", "verbose_logging", "(", "2", ",", "\"scoring %s\"", "%", "str", "(", "parameters", ")", ")", "\n", "\n", "parameters_string", "=", "ParameterSpace", ".", "jsonify", "(", "parameters", ")", "\n", "\n", "if", "self", ".", "is_in_cache", "(", "parameters_string", ")", ":", "\n", "            ", "self", ".", "verbose_logging", "(", "1", ",", "'no evaluation, score taken from cache'", ")", "\n", "return", "self", ".", "get_from_cache", "(", "parameters_string", ")", "\n", "\n", "", "if", "self", ".", "score_functions", "is", "None", "and", "issubclass", "(", "self", ".", "base_class", ",", "sklearn", ".", "base", ".", "ClassifierMixin", ")", ":", "\n", "            ", "self", ".", "verbose_logging", "(", "2", ",", "\"the score function to be used is ACC_score\"", ")", "\n", "self", ".", "score_functions", "=", "[", "NegACC_score", "(", ")", "]", "\n", "", "elif", "self", ".", "score_functions", "is", "None", ":", "\n", "            ", "self", ".", "verbose_logging", "(", "2", ",", "\"the score function to be used is R2_score\"", ")", "\n", "self", ".", "score_functions", "=", "[", "NegR2_score", "(", ")", "]", "\n", "\n", "", "score_functions", "=", "copy", ".", "deepcopy", "(", "self", ".", "score_functions", ")", "\n", "\n", "model", "=", "self", ".", "instantiate", "(", "parameters", ")", "\n", "\n", "validator", "=", "validator", "or", "copy", ".", "deepcopy", "(", "self", ".", "validator", ")", "\n", "\n", "if", "validator", "is", "None", ":", "\n", "            ", "if", "issubclass", "(", "self", ".", "base_class", ",", "sklearn", ".", "base", ".", "ClassifierMixin", ")", "or", "issubclass", "(", "self", ".", "base_class", ",", "XGBClassifier", ")", ":", "\n", "                ", "validator", "=", "RepeatedStratifiedKFold", "(", "n_splits", "=", "8", ",", "n_repeats", "=", "3", ",", "random_state", "=", "5", ")", "\n", "", "else", ":", "\n", "                ", "validator", "=", "RepeatedKFold", "(", "n_splits", "=", "5", ",", "n_repeats", "=", "20", ",", "random_state", "=", "random_state", ")", "\n", "", "self", ".", "verbose_logging", "(", "2", ",", "\"validator created %s\"", "%", "str", "(", "validator", ")", ")", "\n", "\n", "", "self", ".", "verbose_logging", "(", "2", ",", "\"resetting score functions\"", ")", "\n", "for", "s", "in", "score_functions", ":", "\n", "            ", "s", ".", "reset", "(", ")", "\n", "\n", "# cross-validation based evaluation using the preset vectors", "\n", "", "if", "(", "(", "X", "is", "None", "and", "self", ".", "X_val", "is", "None", ")", "or", "self", ".", "X", "==", "X", ")", ":", "\n", "# evaluation goes by the preset vectors", "\n", "            ", "self", ".", "_score_with_validator", "(", "parameters", ",", "model", ",", "validator", ",", "score_functions", ")", "\n", "", "elif", "not", "X", "is", "None", ":", "\n", "# if we are validating on new data, the model is fitted to the preset dataset", "\n", "            ", "self", ".", "_score_ab", "(", "parameters", ",", "model", ",", "self", ".", "X", ",", "self", ".", "y", ",", "self", ".", "sample_weights", ",", "X", ",", "y", ",", "groups", ",", "evaluation_weights", ",", "score_functions", ")", "\n", "", "elif", "not", "self", ".", "X_val", "is", "None", ":", "\n", "# validation happens on the validation dataset", "\n", "            ", "self", ".", "_score_ab", "(", "parameters", ",", "model", ",", "self", ".", "X", ",", "self", ".", "y", ",", "self", ".", "sample_weights", ",", "self", ".", "X_val", ",", "self", ".", "y_val", ",", "self", ".", "groups_val", ",", "self", ".", "evaluation_weights_val", ",", "score_functions", ")", "\n", "\n", "", "scores", "=", "[", "s", ".", "score", "(", ")", "for", "s", "in", "score_functions", "]", "\n", "\n", "self", ".", "put_into_cache", "(", "parameters_string", ",", "scores", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.instantiate_base": [[518, 529], ["numpy.sum", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.base_class", "numpy.sum", "pipeline.make_pipeline", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler", "linear_model.Lasso", "pipeline.make_pipeline", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler", "linear_model.Ridge"], "methods", ["None"], ["", "def", "instantiate_base", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "if", "'n_components'", "in", "parameters", "[", "'ml'", "]", "and", "parameters", "[", "'ml'", "]", "[", "'n_components'", "]", ">", "np", ".", "sum", "(", "parameters", "[", "'features'", "]", ")", ":", "\n", "            ", "parameters", "[", "'ml'", "]", "[", "'n_components'", "]", "=", "np", ".", "sum", "(", "parameters", "[", "'features'", "]", ")", "\n", "", "from", "sklearn", "import", "linear_model", "\n", "from", "sklearn", "import", "pipeline", "\n", "if", "(", "not", "self", ".", "base_class", "==", "linear_model", ".", "Lasso", ")", "and", "(", "not", "self", ".", "base_class", "==", "linear_model", ".", "Ridge", ")", ":", "\n", "            ", "return", "self", ".", "base_class", "(", "**", "(", "parameters", "[", "'ml'", "]", ")", ")", "\n", "", "elif", "self", ".", "base_class", "==", "linear_model", ".", "Lasso", ":", "\n", "            ", "return", "pipeline", ".", "make_pipeline", "(", "StandardScaler", "(", "with_mean", "=", "False", ")", ",", "linear_model", ".", "Lasso", "(", "**", "(", "parameters", "[", "'ml'", "]", ")", ")", ")", "\n", "", "elif", "self", ".", "base_class", "==", "linear_model", ".", "Ridge", ":", "\n", "            ", "return", "pipeline", ".", "make_pipeline", "(", "StandardScaler", "(", "with_mean", "=", "False", ")", ",", "linear_model", ".", "Ridge", "(", "**", "(", "parameters", "[", "'ml'", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.instantiate": [[530, 563], ["issubclass", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.instantiate_base", "sklearn.pipeline.Pipeline", "sklearn.pipeline.Pipeline", "sklearn.pipeline.Pipeline", "sklearn.pipeline.Pipeline", "sklearn.pipeline.Pipeline", "sklearn.pipeline.Pipeline", "sklearn.pipeline.Pipeline", "sklearn.pipeline.Pipeline", "FeatureSelectionClassifier", "numpy.delete", "print", "FeatureSelectionClassifier", "_ModelSelectionObjective.FeatureSelectionRegressor", "numpy.delete", "print", "_ModelSelectionObjective.FeatureSelectionRegressor", "len", "len", "str", "len", "len", "str", "copy.deepcopy", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.instantiate_base", "copy.deepcopy", "sv.OversamplingClassifier", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.oversampler", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.instantiate_base"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.XGBR_Objective.instantiate_base", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.XGBR_Objective.instantiate_base", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.XGBR_Objective.instantiate_base"], ["", "", "def", "instantiate", "(", "self", ",", "parameters", ",", "features_to_ignore", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate new model instance.\n        Args:\n            parameters (dict): dictionary of parameters\n        Returns:\n            RegressorMixin: a new RegressorMixin object\n        \"\"\"", "\n", "\n", "if", "self", ".", "preprocessor", ":", "\n", "            ", "if", "not", "self", ".", "oversampler", ":", "\n", "                ", "model", "=", "Pipeline", "(", "steps", "=", "[", "(", "'prep'", ",", "copy", ".", "deepcopy", "(", "self", ".", "preprocessor", ")", ")", ",", "(", "'model'", ",", "self", ".", "instantiate_base", "(", "parameters", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "Pipeline", "(", "steps", "=", "[", "(", "'prep'", ",", "copy", ".", "deepcopy", "(", "self", ".", "preprocessor", ")", ")", ",", "(", "'model'", ",", "sv", ".", "OversamplingClassifier", "(", "self", ".", "oversampler", "(", "**", "parameters", "[", "'oversampler'", "]", ")", ",", "self", ".", "instantiate_base", "(", "parameters", ")", ")", ")", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "instantiate_base", "(", "parameters", ")", "\n", "\n", "", "if", "issubclass", "(", "self", ".", "base_class", ",", "ClassifierMixin", ")", ":", "\n", "            ", "if", "not", "features_to_ignore", ":", "\n", "                ", "model", "=", "FeatureSelectionClassifier", "(", "model", ",", "parameters", "[", "'features'", "]", ")", "\n", "", "else", ":", "\n", "                ", "features", "=", "np", ".", "delete", "(", "parameters", "[", "'features'", "]", ",", "features_to_ignore", ")", "\n", "print", "(", "'features reduced from %d to %d by removing %s'", "%", "(", "len", "(", "parameters", "[", "'features'", "]", ")", ",", "len", "(", "features", ")", ",", "str", "(", "features_to_ignore", ")", ")", ")", "\n", "model", "=", "FeatureSelectionClassifier", "(", "model", ",", "features", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "not", "features_to_ignore", ":", "\n", "                ", "model", "=", "FeatureSelectionRegressor", "(", "model", ",", "parameters", "[", "'features'", "]", ")", "\n", "", "else", ":", "\n", "                ", "features", "=", "np", ".", "delete", "(", "parameters", "[", "'features'", "]", ",", "features_to_ignore", ")", "\n", "print", "(", "'features reduced from %d to %d by removing %s'", "%", "(", "len", "(", "parameters", "[", "'features'", "]", ")", ",", "len", "(", "features", ")", ",", "str", "(", "features_to_ignore", ")", ")", ")", "\n", "model", "=", "FeatureSelectionRegressor", "(", "model", ",", "features", ")", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelection.ModelSelection.__init__": [[21, 66], ["maweight.mltoolkit.optimization.SimulatedAnnealing", "maweight.mltoolkit.base.VerboseLoggingMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "objective", ",", "\n", "X", ",", "\n", "y", ",", "\n", "sample_weights", "=", "None", ",", "\n", "groups", "=", "None", ",", "\n", "evaluation_weights", "=", "None", ",", "\n", "X_val", "=", "None", ",", "\n", "y_val", "=", "None", ",", "\n", "sample_weights_val", "=", "None", ",", "\n", "groups_val", "=", "None", ",", "\n", "evaluation_weights_val", "=", "None", ",", "\n", "feature_groups", "=", "None", ",", "\n", "reverse", "=", "False", ",", "\n", "preprocessor", "=", "None", ",", "\n", "score_functions", "=", "None", ",", "\n", "validator", "=", "None", ",", "\n", "disable_feature_selection", "=", "False", ",", "\n", "random_state", "=", "None", ",", "\n", "optimizer", "=", "SimulatedAnnealing", "(", ")", ",", "\n", "cache_dir", "=", "None", ",", "\n", "verbosity", "=", "1", ")", ":", "\n", "        ", "self", ".", "objective", "=", "objective", "\n", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "sample_weights", "=", "sample_weights", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "evaluation_weights", "=", "evaluation_weights", "\n", "self", ".", "X_val", "=", "X_val", "\n", "self", ".", "y_val", "=", "y_val", "\n", "self", ".", "sample_weights_val", "=", "sample_weights_val", "\n", "self", ".", "groups_val", "=", "groups_val", "\n", "self", ".", "evaluation_weights_val", "=", "evaluation_weights_val", "\n", "self", ".", "feature_groups", "=", "feature_groups", "\n", "self", ".", "reverse", "=", "reverse", "\n", "self", ".", "preprocessor", "=", "preprocessor", "\n", "self", ".", "score_functions", "=", "score_functions", "\n", "self", ".", "validator", "=", "validator", "\n", "self", ".", "disable_feature_selection", "=", "disable_feature_selection", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "cache_dir", "=", "cache_dir", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "verbosity", "=", "verbosity", "\n", "\n", "VerboseLoggingMixin", ".", "__init__", "(", "self", ",", "\"ModelSelection\"", ",", "self", ".", "verbosity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelection.ModelSelection.select": [[67, 82], ["_ModelSelection.ModelSelection.verbose_logging", "_ModelSelection.ModelSelection.verbose_logging", "_ModelSelection.ModelSelection.objective", "_ModelSelection.ModelSelection.verbose_logging", "_ModelSelection.ModelSelection.optimizer.execute", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging", "home.repos.pwc.inspect_result.gykovacs_maweight.optimization._EvolutionaryAlgorithm.EvolutionaryAlgorithm.execute"], ["", "def", "select", "(", "self", ")", ":", "\n", "        ", "cache_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_dir", ",", "self", ".", "objective", ".", "__name__", ")", "if", "self", ".", "cache_dir", "else", "None", "\n", "self", ".", "verbose_logging", "(", "1", ",", "\"Initializing model selection with objective %s\"", "%", "self", ".", "objective", ".", "__name__", ")", "\n", "self", ".", "verbose_logging", "(", "1", ",", "\"Cache path: %s\"", "%", "cache_path", ")", "\n", "\n", "self", ".", "objective_instance", "=", "self", ".", "objective", "(", "self", ".", "X", ",", "self", ".", "y", ",", "self", ".", "sample_weights", ",", "self", ".", "groups", ",", "self", ".", "evaluation_weights", ",", "\n", "self", ".", "X_val", ",", "self", ".", "y_val", ",", "self", ".", "sample_weights_val", ",", "self", ".", "groups_val", ",", "\n", "self", ".", "evaluation_weights_val", ",", "self", ".", "feature_groups", ",", "self", ".", "reverse", ",", "\n", "self", ".", "preprocessor", ",", "self", ".", "score_functions", ",", "self", ".", "validator", ",", "None", ",", "self", ".", "disable_feature_selection", ",", "\n", "self", ".", "random_state", ",", "cache_path", ",", "self", ".", "verbosity", ")", "\n", "\n", "self", ".", "verbose_logging", "(", "1", ",", "\"Executing model selection with objective %s\"", "%", "self", ".", "objective", ".", "__name__", ")", "\n", "self", ".", "result", "=", "self", ".", "optimizer", ".", "execute", "(", "self", ".", "objective_instance", ")", "\n", "\n", "return", "self", ".", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelection.ModelSelection.get_best_model": [[83, 96], ["_ModelSelection.ModelSelection.objective_instance.instantiate", "isinstance", "sklearn.ensemble.BaggingRegressor.fit", "BaggingClassifier", "sklearn.ensemble.BaggingRegressor"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.instantiate", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.fit"], ["", "def", "get_best_model", "(", "self", ",", "train", "=", "False", ",", "X", "=", "None", ",", "y", "=", "None", ",", "n_estimators", "=", "-", "1", ")", ":", "\n", "        ", "model", "=", "self", ".", "objective_instance", ".", "instantiate", "(", "self", ".", "result", "[", "'object'", "]", ")", "\n", "if", "n_estimators", ">", "1", ":", "\n", "            ", "if", "isinstance", "(", "model", ",", "ClassifierMixin", ")", ":", "\n", "                ", "model", "=", "BaggingClassifier", "(", "model", ",", "n_estimators", "=", "n_estimators", ",", "bootstrap", "=", "False", ",", "max_samples", "=", "0.9", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "BaggingRegressor", "(", "model", ",", "n_estimators", "=", "n_estimators", ",", "bootstrap", "=", "False", ",", "max_samples", "=", "0.9", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "\n", "", "", "if", "train", "is", "True", ":", "\n", "            ", "X", ",", "y", "=", "X", "or", "self", ".", "X", ",", "y", "or", "self", ".", "y", "\n", "model", ".", "fit", "(", "X", "[", ":", ",", "self", ".", "result", "[", "'object'", "]", "[", "'features'", "]", "]", ",", "y", ")", "\n", "\n", "", "return", "{", "'model'", ":", "model", ",", "'features'", ":", "self", ".", "result", "[", "'object'", "]", "[", "'features'", "]", ",", "'score'", ":", "self", ".", "result", "[", "'score'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelection.ModelSelection.get_best_feature_selection_model": [[97, 115], ["_ModelSelection.ModelSelection.objective_instance.instantiate", "isinstance", "isinstance", "FeatureSelectionClassifier", "maweight.mltoolkit.automl.FeatureSelectionRegressor", "sklearn.ensemble.BaggingRegressor.fit", "BaggingClassifier", "sklearn.ensemble.BaggingRegressor"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.instantiate", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.fit"], ["", "def", "get_best_feature_selection_model", "(", "self", ",", "train", "=", "False", ",", "X", "=", "None", ",", "y", "=", "None", ",", "n_estimators", "=", "-", "1", ")", ":", "\n", "        ", "model", "=", "self", ".", "objective_instance", ".", "instantiate", "(", "self", ".", "result", "[", "'object'", "]", "[", "'ml'", "]", ")", "\n", "if", "n_estimators", ">", "0", ":", "\n", "            ", "if", "isinstance", "(", "model", ",", "ClassifierMixin", ")", ":", "\n", "                ", "model", "=", "BaggingClassifier", "(", "model", ",", "n_estimators", "=", "n_estimators", ",", "bootstrap", "=", "False", ",", "max_samples", "=", "0.9", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "BaggingRegressor", "(", "model", ",", "n_estimators", "=", "n_estimators", ",", "bootstrap", "=", "False", ",", "max_samples", "=", "0.9", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "\n", "", "", "if", "isinstance", "(", "model", ",", "ClassifierMixin", ")", ":", "\n", "            ", "model", "=", "FeatureSelectionClassifier", "(", "model", ",", "self", ".", "result", "[", "'object'", "]", "[", "'features'", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "FeatureSelectionRegressor", "(", "model", ",", "self", ".", "result", "[", "'object'", "]", "[", "'features'", "]", ")", "\n", "\n", "", "if", "train", "is", "True", ":", "\n", "            ", "X", ",", "y", "=", "X", "or", "self", ".", "X", ",", "y", "or", "self", ".", "y", "\n", "model", ".", "fit", "(", "X", ",", "y", ")", "\n", "\n", "", "return", "{", "'model'", ":", "model", ",", "'features'", ":", "self", ".", "result", "[", "'object'", "]", "[", "'features'", "]", ",", "'score'", ":", "self", ".", "result", "[", "'score'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelection.ModelSelection.evaluate": [[116, 189], ["_ModelSelection.ModelSelection.get_best_model", "tqdm.tqdm", "print", "isinstance", "isinstance", "s.__class__", "s.reset", "s.reset", "sklearn.model_selection.RepeatedKFold.split", "model.fit", "model.predict", "isinstance", "all_tests.append", "all_preds.append", "all_indices.append", "enumerate", "numpy.hstack", "numpy.hstack", "numpy.hstack", "sklearn.model_selection.RepeatedStratifiedKFold", "sklearn.model_selection.RepeatedKFold", "s.accumulate", "s.accumulate", "scores_per_fold[].append", "s.reset", "s.score", "ACC_score", "maweight.mltoolkit.automl.R2_score", "len", "s.score"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelection.ModelSelection.get_best_model", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSE_score.reset", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSE_score.reset", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.fit", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionRegressor.predict", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.NegR2_score.accumulate", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.NegR2_score.accumulate", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.RMSE_score.reset", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._ModelSelectionObjective.ModelSelectionObjectiveMixin.score"], ["", "def", "evaluate", "(", "self", ",", "\n", "X", "=", "None", ",", "\n", "y", "=", "None", ",", "\n", "n_estimators", "=", "-", "1", ",", "\n", "validator", "=", "None", ",", "\n", "score_functions", "=", "None", ",", "\n", "return_vectors", "=", "False", ")", ":", "\n", "        ", "tmp", "=", "self", ".", "get_best_model", "(", "n_estimators", "=", "n_estimators", ")", "\n", "\n", "if", "validator", "is", "None", ":", "\n", "            ", "if", "isinstance", "(", "tmp", "[", "'model'", "]", ",", "ClassifierMixin", ")", ":", "\n", "                ", "validator", "=", "RepeatedStratifiedKFold", "(", "n_splits", "=", "8", ",", "n_repeats", "=", "3", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "", "else", ":", "\n", "                ", "validator", "=", "RepeatedKFold", "(", "n_splits", "=", "5", ",", "n_repeats", "=", "20", ",", "random_state", "=", "21", ")", "\n", "\n", "", "", "X", ",", "y", "=", "X", "or", "self", ".", "X", ",", "y", "or", "self", ".", "y", "\n", "\n", "if", "score_functions", "is", "None", ":", "\n", "            ", "if", "isinstance", "(", "tmp", "[", "'model'", "]", ",", "ClassifierMixin", ")", ":", "\n", "                ", "score_functions", "=", "[", "ACC_score", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "score_functions", "=", "[", "R2_score", "(", ")", "]", "\n", "\n", "", "", "score_functions_per_fold", "=", "[", "s", ".", "__class__", "(", ")", "for", "s", "in", "score_functions", "]", "\n", "\n", "model", "=", "tmp", "[", "'model'", "]", "\n", "\n", "for", "s", "in", "score_functions", ":", "\n", "            ", "s", ".", "reset", "(", ")", "\n", "", "for", "s", "in", "score_functions_per_fold", ":", "\n", "            ", "s", ".", "reset", "(", ")", "\n", "\n", "", "all_tests", "=", "[", "]", "\n", "all_preds", "=", "[", "]", "\n", "all_indices", "=", "[", "]", "\n", "scores_per_fold", "=", "[", "[", "]", "for", "s", "in", "score_functions_per_fold", "]", "\n", "\n", "i", "=", "0", "\n", "for", "train", ",", "test", "in", "tqdm", ".", "tqdm", "(", "validator", ".", "split", "(", "X", ",", "y", ")", ")", ":", "\n", "            ", "X_train", ",", "X_test", "=", "X", "[", "train", "]", ",", "X", "[", "test", "]", "\n", "y_train", ",", "y_test", "=", "y", "[", "train", "]", ",", "y", "[", "test", "]", "\n", "i", "=", "i", "+", "1", "\n", "\n", "model", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "\n", "y_pred", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "\n", "if", "isinstance", "(", "tmp", "[", "'model'", "]", ",", "RegressorMixin", ")", ":", "\n", "                ", "if", "len", "(", "y_pred", ".", "shape", ")", ">", "1", ":", "\n", "                    ", "y_pred", "=", "y_pred", "[", ":", ",", "0", "]", "\n", "\n", "", "", "all_tests", ".", "append", "(", "y_test", ")", "\n", "all_preds", ".", "append", "(", "y_pred", ")", "\n", "all_indices", ".", "append", "(", "test", ")", "\n", "\n", "for", "s", "in", "score_functions", ":", "\n", "                ", "s", ".", "accumulate", "(", "y_test", ",", "y_pred", ")", "\n", "\n", "", "for", "s", "in", "score_functions_per_fold", ":", "\n", "                ", "s", ".", "accumulate", "(", "y_test", ",", "y_pred", ")", "\n", "\n", "", "for", "i", ",", "s", "in", "enumerate", "(", "score_functions_per_fold", ")", ":", "\n", "                ", "scores_per_fold", "[", "i", "]", ".", "append", "(", "s", ".", "score", "(", ")", ")", "\n", "\n", "", "for", "s", "in", "score_functions_per_fold", ":", "\n", "                ", "s", ".", "reset", "(", ")", "\n", "", "", "print", "(", "i", ")", "\n", "\n", "return", "{", "'scores'", ":", "[", "s", ".", "score", "(", ")", "for", "s", "in", "score_functions", "]", ",", "\n", "'scores_per_fold'", ":", "scores_per_fold", ",", "\n", "'y_test'", ":", "np", ".", "hstack", "(", "all_tests", ")", ",", "\n", "'y_pred'", ":", "np", ".", "hstack", "(", "all_preds", ")", ",", "\n", "'y_indices'", ":", "np", ".", "hstack", "(", "all_indices", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.XGBR_Objective.__init__": [[40, 74], ["_ModelSelectionObjective.ModelSelectionObjectiveMixin.__init__", "maweight.mltoolkit.optimization.ParameterSpace", "super().get_default_parameter_space", "maweight.mltoolkit.optimization.CategorialParameter", "maweight.mltoolkit.optimization.JointParameterSpace", "maweight.mltoolkit.optimization.JointParameterSpace", "maweight.mltoolkit.optimization.UniformIntegerParameter", "maweight.mltoolkit.optimization.FixedParameter", "maweight.mltoolkit.optimization.FixedParameter", "numpy.random.choice", "oversampler.parameter_combinations"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.PLSRegression_Objective.get_default_parameter_space"], ["    ", "def", "__init__", "(", "self", ",", "\n", "X", ",", "\n", "y", ",", "\n", "sample_weights", "=", "None", ",", "\n", "groups", "=", "None", ",", "\n", "evaluation_weights", "=", "None", ",", "\n", "X_val", "=", "None", ",", "\n", "y_val", "=", "None", ",", "\n", "sample_weights_val", "=", "None", ",", "\n", "groups_val", "=", "None", ",", "\n", "evaluation_weights_val", "=", "None", ",", "\n", "feature_groups", "=", "None", ",", "\n", "reverse", "=", "False", ",", "\n", "preprocessor", "=", "None", ",", "\n", "score_functions", "=", "None", ",", "\n", "validator", "=", "None", ",", "\n", "oversampler", "=", "None", ",", "\n", "disable_feature_selection", "=", "False", ",", "\n", "random_state", "=", "random_state", ",", "\n", "cache_path", "=", "None", ",", "\n", "verbosity", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "xgboost", ".", "XGBRegressor", ",", "X", ",", "y", ",", "sample_weights", ",", "groups", ",", "evaluation_weights", ",", "\n", "X_val", ",", "y_val", ",", "sample_weights_val", ",", "groups_val", ",", "evaluation_weights_val", ",", "\n", "feature_groups", ",", "reverse", ",", "preprocessor", ",", "score_functions", ",", "validator", ",", "oversampler", ",", "disable_feature_selection", ",", "random_state", ",", "cache_path", ",", "verbosity", ")", "\n", "\n", "self", ".", "_default_ml_parameter_space", "=", "ParameterSpace", "(", "{", "'max_depth'", ":", "UniformIntegerParameter", "(", "2", ",", "5", ")", ",", "\n", "'n_estimators'", ":", "FixedParameter", "(", "100", ")", ",", "\n", "'random_state'", ":", "FixedParameter", "(", "random_state", ")", "}", ",", "random_state", "=", "self", ".", "_random_state_init", ")", "\n", "self", ".", "_default_features_parameter_space", "=", "super", "(", ")", ".", "get_default_parameter_space", "(", ")", "\n", "if", "not", "oversampler", "is", "None", ":", "\n", "            ", "self", ".", "_oversampler_parameter_space", "=", "CategorialParameter", "(", "np", ".", "random", ".", "choice", "(", "oversampler", ".", "parameter_combinations", "(", ")", ",", "35", ")", ")", "\n", "self", ".", "_default_parameter_space", "=", "JointParameterSpace", "(", "{", "'ml'", ":", "self", ".", "_default_ml_parameter_space", ",", "'features'", ":", "self", ".", "_default_features_parameter_space", ",", "'oversampler'", ":", "self", ".", "_oversampler_parameter_space", "}", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_default_parameter_space", "=", "JointParameterSpace", "(", "{", "'ml'", ":", "self", ".", "_default_ml_parameter_space", ",", "'features'", ":", "self", ".", "_default_features_parameter_space", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.XGBR_Objective.get_default_parameter_space": [[75, 82], ["None"], "methods", ["None"], ["", "", "def", "get_default_parameter_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get default parameter descriptors.\n        Returns:\n            dict: dictionary of default parameter descriptors.\n        \"\"\"", "\n", "return", "self", ".", "_default_parameter_space", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.XGBR_Objective.instantiate_base": [[83, 85], ["_regressors.XGBR_Objective.base_class"], "methods", ["None"], ["", "def", "instantiate_base", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "return", "self", ".", "base_class", "(", "**", "(", "parameters", "[", "'ml'", "]", ")", ",", "objective", "=", "'reg:squarederror'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.RFR_Objective.__init__": [[87, 121], ["_ModelSelectionObjective.ModelSelectionObjectiveMixin.__init__", "maweight.mltoolkit.optimization.ParameterSpace", "super().get_default_parameter_space", "maweight.mltoolkit.optimization.CategorialParameter", "maweight.mltoolkit.optimization.JointParameterSpace", "maweight.mltoolkit.optimization.JointParameterSpace", "maweight.mltoolkit.optimization.UniformIntegerParameter", "maweight.mltoolkit.optimization.FixedParameter", "maweight.mltoolkit.optimization.FixedParameter", "numpy.random.choice", "oversampler.parameter_combinations"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.PLSRegression_Objective.get_default_parameter_space"], ["    ", "def", "__init__", "(", "self", ",", "\n", "X", ",", "\n", "y", ",", "\n", "sample_weights", "=", "None", ",", "\n", "groups", "=", "None", ",", "\n", "evaluation_weights", "=", "None", ",", "\n", "X_val", "=", "None", ",", "\n", "y_val", "=", "None", ",", "\n", "sample_weights_val", "=", "None", ",", "\n", "groups_val", "=", "None", ",", "\n", "evaluation_weights_val", "=", "None", ",", "\n", "feature_groups", "=", "None", ",", "\n", "reverse", "=", "False", ",", "\n", "preprocessor", "=", "None", ",", "\n", "score_functions", "=", "None", ",", "\n", "validator", "=", "None", ",", "\n", "oversampler", "=", "None", ",", "\n", "disable_feature_selection", "=", "False", ",", "\n", "random_state", "=", "random_state", ",", "\n", "cache_path", "=", "None", ",", "\n", "verbosity", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "ensemble", ".", "RandomForestRegressor", ",", "X", ",", "y", ",", "sample_weights", ",", "groups", ",", "evaluation_weights", ",", "\n", "X_val", ",", "y_val", ",", "sample_weights_val", ",", "groups_val", ",", "evaluation_weights_val", ",", "\n", "feature_groups", ",", "reverse", ",", "preprocessor", ",", "score_functions", ",", "validator", ",", "oversampler", ",", "disable_feature_selection", ",", "random_state", ",", "cache_path", ",", "verbosity", ")", "\n", "\n", "self", ".", "_default_ml_parameter_space", "=", "ParameterSpace", "(", "{", "'max_depth'", ":", "UniformIntegerParameter", "(", "2", ",", "5", ")", ",", "\n", "'n_estimators'", ":", "FixedParameter", "(", "100", ")", ",", "\n", "'random_state'", ":", "FixedParameter", "(", "random_state", ")", "}", ",", "random_state", "=", "self", ".", "_random_state_init", ")", "\n", "self", ".", "_default_features_parameter_space", "=", "super", "(", ")", ".", "get_default_parameter_space", "(", ")", "\n", "if", "not", "oversampler", "is", "None", ":", "\n", "            ", "self", ".", "_oversampler_parameter_space", "=", "CategorialParameter", "(", "np", ".", "random", ".", "choice", "(", "oversampler", ".", "parameter_combinations", "(", ")", ",", "35", ")", ")", "\n", "self", ".", "_default_parameter_space", "=", "JointParameterSpace", "(", "{", "'ml'", ":", "self", ".", "_default_ml_parameter_space", ",", "'features'", ":", "self", ".", "_default_features_parameter_space", ",", "'oversampler'", ":", "self", ".", "_oversampler_parameter_space", "}", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_default_parameter_space", "=", "JointParameterSpace", "(", "{", "'ml'", ":", "self", ".", "_default_ml_parameter_space", ",", "'features'", ":", "self", ".", "_default_features_parameter_space", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.RFR_Objective.get_default_parameter_space": [[122, 129], ["None"], "methods", ["None"], ["", "", "def", "get_default_parameter_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get default parameter descriptors.\n        Returns:\n            dict: dictionary of default parameter descriptors.\n        \"\"\"", "\n", "return", "self", ".", "_default_parameter_space", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.KNNR_Objective.__init__": [[131, 166], ["_ModelSelectionObjective.ModelSelectionObjectiveMixin.__init__", "maweight.mltoolkit.optimization.ParameterSpace", "super().get_default_parameter_space", "maweight.mltoolkit.optimization.CategorialParameter", "maweight.mltoolkit.optimization.JointParameterSpace", "maweight.mltoolkit.optimization.JointParameterSpace", "maweight.mltoolkit.optimization.UniformIntegerParameter", "maweight.mltoolkit.optimization.CategorialParameter", "maweight.mltoolkit.optimization.UniformIntegerParameter", "numpy.random.choice", "oversampler.parameter_combinations"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__", "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.PLSRegression_Objective.get_default_parameter_space"], ["    ", "def", "__init__", "(", "self", ",", "\n", "X", ",", "\n", "y", ",", "\n", "sample_weights", "=", "None", ",", "\n", "groups", "=", "None", ",", "\n", "evaluation_weights", "=", "None", ",", "\n", "X_val", "=", "None", ",", "\n", "y_val", "=", "None", ",", "\n", "sample_weights_val", "=", "None", ",", "\n", "groups_val", "=", "None", ",", "\n", "evaluation_weights_val", "=", "None", ",", "\n", "feature_groups", "=", "None", ",", "\n", "reverse", "=", "False", ",", "\n", "preprocessor", "=", "None", ",", "\n", "score_functions", "=", "None", ",", "\n", "validator", "=", "None", ",", "\n", "oversampler", "=", "None", ",", "\n", "disable_feature_selection", "=", "False", ",", "\n", "random_state", "=", "random_state", ",", "\n", "cache_path", "=", "None", ",", "\n", "verbosity", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "neighbors", ".", "KNeighborsRegressor", ",", "X", ",", "y", ",", "sample_weights", ",", "groups", ",", "evaluation_weights", ",", "\n", "X_val", ",", "y_val", ",", "sample_weights_val", ",", "groups_val", ",", "evaluation_weights_val", ",", "\n", "feature_groups", ",", "reverse", ",", "preprocessor", ",", "score_functions", ",", "validator", ",", "oversampler", ",", "disable_feature_selection", ",", "random_state", ",", "cache_path", ",", "verbosity", ")", "\n", "\n", "self", ".", "_default_ml_parameter_space", "=", "ParameterSpace", "(", "{", "'n_neighbors'", ":", "UniformIntegerParameter", "(", "1", ",", "13", ")", ",", "\n", "'weights'", ":", "CategorialParameter", "(", "[", "'uniform'", ",", "'distance'", "]", ")", ",", "\n", "'p'", ":", "UniformIntegerParameter", "(", "1", ",", "7", ")", "\n", "}", ",", "random_state", "=", "self", ".", "_random_state_init", ")", "\n", "self", ".", "_default_features_parameter_space", "=", "super", "(", ")", ".", "get_default_parameter_space", "(", ")", "\n", "if", "not", "oversampler", "is", "None", ":", "\n", "            ", "self", ".", "_oversampler_parameter_space", "=", "CategorialParameter", "(", "np", ".", "random", ".", "choice", "(", "oversampler", ".", "parameter_combinations", "(", ")", ",", "35", ")", ")", "\n", "self", ".", "_default_parameter_space", "=", "JointParameterSpace", "(", "{", "'ml'", ":", "self", ".", "_default_ml_parameter_space", ",", "'features'", ":", "self", ".", "_default_features_parameter_space", ",", "'oversampler'", ":", "self", ".", "_oversampler_parameter_space", "}", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_default_parameter_space", "=", "JointParameterSpace", "(", "{", "'ml'", ":", "self", ".", "_default_ml_parameter_space", ",", "'features'", ":", "self", ".", "_default_features_parameter_space", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.KNNR_Objective.get_default_parameter_space": [[167, 174], ["None"], "methods", ["None"], ["", "", "def", "get_default_parameter_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get default parameter descriptors.\n        Returns:\n            dict: dictionary of default parameter descriptors.\n        \"\"\"", "\n", "return", "self", ".", "_default_parameter_space", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.SVR_Poly_Objective.__init__": [[176, 200], ["sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "X", ",", "\n", "y", ",", "\n", "sample_weights", "=", "None", ",", "\n", "groups", "=", "None", ",", "\n", "evaluation_weights", "=", "None", ",", "\n", "X_val", "=", "None", ",", "\n", "y_val", "=", "None", ",", "\n", "sample_weights_val", "=", "None", ",", "\n", "groups_val", "=", "None", ",", "\n", "evaluation_weights_val", "=", "None", ",", "\n", "feature_groups", "=", "None", ",", "\n", "reverse", "=", "False", ",", "\n", "preprocessor", "=", "preprocessing", ".", "StandardScaler", "(", ")", ",", "\n", "score_functions", "=", "None", ",", "\n", "validator", "=", "None", ",", "\n", "oversampler", "=", "None", ",", "\n", "disable_feature_selection", "=", "False", ",", "\n", "random_state", "=", "random_state", ",", "\n", "cache_path", "=", "None", ",", "\n", "verbosity", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "svm", ".", "SVR", ",", "X", ",", "y", ",", "sample_weights", ",", "groups", ",", "evaluation_weights", ",", "\n", "X_val", ",", "y_val", ",", "sample_weights_val", ",", "groups_val", ",", "evaluation_weights_val", ",", "\n", "feature_groups", ",", "reverse", ",", "preprocessor", ",", "score_functions", ",", "validator", ",", "oversampler", ",", "disable_feature_selection", ",", "random_state", ",", "cache_path", ",", "verbosity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.SVR_Poly_Objective.get_default_parameter_space": [[201, 216], ["maweight.mltoolkit.optimization.ParameterSpace", "maweight.mltoolkit.optimization.JointParameterSpace", "maweight.mltoolkit.optimization.UniformIntegerParameter", "maweight.mltoolkit.optimization.CategorialParameter", "maweight.mltoolkit.optimization.CategorialParameter", "maweight.mltoolkit.optimization.FixedParameter", "maweight.mltoolkit.optimization.FixedParameter", "super().get_default_parameter_space"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.PLSRegression_Objective.get_default_parameter_space"], ["", "def", "get_default_parameter_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get default parameter descriptors.\n        Returns:\n            dict: dictionary of default parameter descriptors.\n        \"\"\"", "\n", "params_ml", "=", "ParameterSpace", "(", "{", "'degree'", ":", "UniformIntegerParameter", "(", "1", ",", "5", ")", ",", "\n", "'C'", ":", "CategorialParameter", "(", "[", "0.01", ",", "0.02", ",", "0.05", ",", "0.1", ",", "0.2", ",", "0.5", ",", "1.0", ",", "2.0", ",", "5.0", ",", "10.0", "]", ")", ",", "\n", "'epsilon'", ":", "CategorialParameter", "(", "[", "0.001", ",", "0.01", ",", "0.1", ",", "1.0", "]", ")", ",", "\n", "'kernel'", ":", "FixedParameter", "(", "'poly'", ")", ",", "\n", "'gamma'", ":", "FixedParameter", "(", "'scale'", ")", "\n", "}", ",", "random_state", "=", "self", ".", "_random_state_init", ")", "\n", "params", "=", "JointParameterSpace", "(", "{", "'ml'", ":", "params_ml", ",", "'features'", ":", "super", "(", ")", ".", "get_default_parameter_space", "(", ")", "}", ")", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.SVR_RBF_Objective.__init__": [[218, 242], ["sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "X", ",", "\n", "y", ",", "\n", "sample_weights", "=", "None", ",", "\n", "groups", "=", "None", ",", "\n", "evaluation_weights", "=", "None", ",", "\n", "X_val", "=", "None", ",", "\n", "y_val", "=", "None", ",", "\n", "sample_weights_val", "=", "None", ",", "\n", "groups_val", "=", "None", ",", "\n", "evaluation_weights_val", "=", "None", ",", "\n", "feature_groups", "=", "None", ",", "\n", "reverse", "=", "False", ",", "\n", "preprocessor", "=", "preprocessing", ".", "StandardScaler", "(", ")", ",", "\n", "score_functions", "=", "None", ",", "\n", "validator", "=", "None", ",", "\n", "oversampler", "=", "None", ",", "\n", "disable_feature_selection", "=", "False", ",", "\n", "random_state", "=", "random_state", ",", "\n", "cache_path", "=", "None", ",", "\n", "verbosity", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "svm", ".", "SVR", ",", "X", ",", "y", ",", "sample_weights", ",", "groups", ",", "evaluation_weights", ",", "\n", "X_val", ",", "y_val", ",", "sample_weights_val", ",", "groups_val", ",", "evaluation_weights_val", ",", "\n", "feature_groups", ",", "reverse", ",", "preprocessor", ",", "score_functions", ",", "validator", ",", "oversampler", ",", "disable_feature_selection", ",", "random_state", ",", "cache_path", ",", "verbosity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.SVR_RBF_Objective.get_default_parameter_space": [[243, 257], ["maweight.mltoolkit.optimization.ParameterSpace", "maweight.mltoolkit.optimization.JointParameterSpace", "maweight.mltoolkit.optimization.CategorialParameter", "maweight.mltoolkit.optimization.CategorialParameter", "maweight.mltoolkit.optimization.FixedParameter", "maweight.mltoolkit.optimization.FixedParameter", "super().get_default_parameter_space"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.PLSRegression_Objective.get_default_parameter_space"], ["", "def", "get_default_parameter_space", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get default parameter descriptors.\n        Returns:\n            dict: dictionary of default parameter descriptors.\n        \"\"\"", "\n", "params_ml", "=", "ParameterSpace", "(", "{", "'C'", ":", "CategorialParameter", "(", "[", "0.001", ",", "0.002", ",", "0.005", ",", "0.01", ",", "0.02", ",", "0.05", ",", "0.1", ",", "0.2", ",", "0.5", ",", "1.0", ",", "2.0", ",", "5.0", ",", "10.0", "]", ")", ",", "\n", "'epsilon'", ":", "CategorialParameter", "(", "[", "0.001", ",", "0.002", ",", "0.005", ",", "0.01", ",", "0.02", ",", "0.05", ",", "0.1", ",", "0.2", ",", "0.5", ",", "1.0", ",", "2.0", ",", "5.0", "]", ")", ",", "\n", "'kernel'", ":", "FixedParameter", "(", "'rbf'", ")", ",", "\n", "'gamma'", ":", "FixedParameter", "(", "'scale'", ")", "\n", "}", ",", "random_state", "=", "self", ".", "_random_state_init", ")", "\n", "params", "=", "JointParameterSpace", "(", "{", "'ml'", ":", "params_ml", ",", "'features'", ":", "super", "(", ")", ".", "get_default_parameter_space", "(", ")", "}", ")", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.LinearRegression_Objective.__init__": [[259, 284], ["sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "X", ",", "\n", "y", ",", "\n", "sample_weights", "=", "None", ",", "\n", "groups", "=", "None", ",", "\n", "evaluation_weights", "=", "None", ",", "\n", "X_val", "=", "None", ",", "\n", "y_val", "=", "None", ",", "\n", "sample_weights_val", "=", "None", ",", "\n", "groups_val", "=", "None", ",", "\n", "evaluation_weights_val", "=", "None", ",", "\n", "feature_groups", "=", "None", ",", "\n", "reverse", "=", "False", ",", "\n", "preprocessor", "=", "preprocessing", ".", "StandardScaler", "(", ")", ",", "\n", "score_functions", "=", "None", ",", "\n", "validator", "=", "None", ",", "\n", "oversampler", "=", "None", ",", "\n", "disable_feature_selection", "=", "False", ",", "\n", "random_state", "=", "random_state", ",", "\n", "cache_path", "=", "None", ",", "\n", "verbosity", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "linear_model", ".", "LinearRegression", ",", "X", ",", "y", ",", "sample_weights", ",", "groups", ",", "evaluation_weights", ",", "\n", "X_val", ",", "y_val", ",", "sample_weights_val", ",", "groups_val", ",", "evaluation_weights_val", ",", "\n", "feature_groups", ",", "reverse", ",", "preprocessor", ",", "score_functions", ",", "validator", ",", "oversampler", ",", "\n", "disable_feature_selection", ",", "random_state", ",", "cache_path", ",", "verbosity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.LinearRegression_Objective.get_default_parameter_space": [[285, 289], ["maweight.mltoolkit.optimization.ParameterSpace", "maweight.mltoolkit.optimization.JointParameterSpace", "maweight.mltoolkit.optimization.UniformIntegerParameter", "super().get_default_parameter_space"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.PLSRegression_Objective.get_default_parameter_space"], ["", "def", "get_default_parameter_space", "(", "self", ")", ":", "\n", "        ", "params_ml", "=", "ParameterSpace", "(", "{", "'fit_intercept'", ":", "UniformIntegerParameter", "(", "0", ",", "1", ",", "random_state", "=", "self", ".", "_random_state_init", ")", "}", ",", "random_state", "=", "self", ".", "_random_state_init", ")", "\n", "params", "=", "JointParameterSpace", "(", "{", "'ml'", ":", "params_ml", ",", "'features'", ":", "super", "(", ")", ".", "get_default_parameter_space", "(", ")", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.LassoRegression_Objective.__init__": [[291, 316], ["sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "X", ",", "\n", "y", ",", "\n", "sample_weights", "=", "None", ",", "\n", "groups", "=", "None", ",", "\n", "evaluation_weights", "=", "None", ",", "\n", "X_val", "=", "None", ",", "\n", "y_val", "=", "None", ",", "\n", "sample_weights_val", "=", "None", ",", "\n", "groups_val", "=", "None", ",", "\n", "evaluation_weights_val", "=", "None", ",", "\n", "feature_groups", "=", "None", ",", "\n", "reverse", "=", "False", ",", "\n", "preprocessor", "=", "preprocessing", ".", "StandardScaler", "(", ")", ",", "\n", "score_functions", "=", "None", ",", "\n", "validator", "=", "None", ",", "\n", "oversampler", "=", "None", ",", "\n", "disable_feature_selection", "=", "False", ",", "\n", "random_state", "=", "random_state", ",", "\n", "cache_path", "=", "None", ",", "\n", "verbosity", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "linear_model", ".", "Lasso", ",", "X", ",", "y", ",", "sample_weights", ",", "groups", ",", "evaluation_weights", ",", "\n", "X_val", ",", "y_val", ",", "sample_weights_val", ",", "groups_val", ",", "evaluation_weights_val", ",", "\n", "feature_groups", ",", "reverse", ",", "preprocessor", ",", "score_functions", ",", "validator", ",", "oversampler", ",", "\n", "disable_feature_selection", ",", "random_state", ",", "cache_path", ",", "verbosity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.LassoRegression_Objective.get_default_parameter_space": [[317, 323], ["maweight.mltoolkit.optimization.ParameterSpace", "maweight.mltoolkit.optimization.JointParameterSpace", "maweight.mltoolkit.optimization.FixedParameter", "maweight.mltoolkit.optimization.CategorialParameter", "maweight.mltoolkit.optimization.FixedParameter", "super().get_default_parameter_space"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.PLSRegression_Objective.get_default_parameter_space"], ["", "def", "get_default_parameter_space", "(", "self", ")", ":", "\n", "        ", "params_ml", "=", "ParameterSpace", "(", "{", "'fit_intercept'", ":", "FixedParameter", "(", "True", ")", ",", "#UniformIntegerParameter(0, 1, random_state=self._random_state_init),", "\n", "'alpha'", ":", "CategorialParameter", "(", "[", "0.01", ",", "0.02", ",", "0.05", ",", "0.1", ",", "0.2", ",", "0.5", ",", "1.0", ",", "2.0", ",", "5.0", ",", "10.0", "]", ")", ",", "\n", "'random_state'", ":", "FixedParameter", "(", "5", ")", "}", ",", "random_state", "=", "self", ".", "_random_state_init", ")", "\n", "params", "=", "JointParameterSpace", "(", "{", "'ml'", ":", "params_ml", ",", "'features'", ":", "super", "(", ")", ".", "get_default_parameter_space", "(", ")", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.RidgeRegression_Objective.__init__": [[325, 350], ["sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "X", ",", "\n", "y", ",", "\n", "sample_weights", "=", "None", ",", "\n", "groups", "=", "None", ",", "\n", "evaluation_weights", "=", "None", ",", "\n", "X_val", "=", "None", ",", "\n", "y_val", "=", "None", ",", "\n", "sample_weights_val", "=", "None", ",", "\n", "groups_val", "=", "None", ",", "\n", "evaluation_weights_val", "=", "None", ",", "\n", "feature_groups", "=", "None", ",", "\n", "reverse", "=", "False", ",", "\n", "preprocessor", "=", "preprocessing", ".", "StandardScaler", "(", ")", ",", "\n", "score_functions", "=", "None", ",", "\n", "validator", "=", "None", ",", "\n", "oversampler", "=", "None", ",", "\n", "disable_feature_selection", "=", "False", ",", "\n", "random_state", "=", "random_state", ",", "\n", "cache_path", "=", "None", ",", "\n", "verbosity", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "linear_model", ".", "Ridge", ",", "X", ",", "y", ",", "sample_weights", ",", "groups", ",", "evaluation_weights", ",", "\n", "X_val", ",", "y_val", ",", "sample_weights_val", ",", "groups_val", ",", "evaluation_weights_val", ",", "\n", "feature_groups", ",", "reverse", ",", "preprocessor", ",", "score_functions", ",", "validator", ",", "oversampler", ",", "\n", "disable_feature_selection", ",", "random_state", ",", "cache_path", ",", "verbosity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.RidgeRegression_Objective.get_default_parameter_space": [[351, 357], ["maweight.mltoolkit.optimization.ParameterSpace", "maweight.mltoolkit.optimization.JointParameterSpace", "maweight.mltoolkit.optimization.FixedParameter", "maweight.mltoolkit.optimization.CategorialParameter", "maweight.mltoolkit.optimization.FixedParameter", "super().get_default_parameter_space"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.PLSRegression_Objective.get_default_parameter_space"], ["", "def", "get_default_parameter_space", "(", "self", ")", ":", "\n", "        ", "params_ml", "=", "ParameterSpace", "(", "{", "'fit_intercept'", ":", "FixedParameter", "(", "True", ")", ",", "#UniformIntegerParameter(0, 1, random_state=self._random_state_init),", "\n", "'alpha'", ":", "CategorialParameter", "(", "[", "0.01", ",", "0.02", ",", "0.05", ",", "0.1", ",", "0.2", ",", "0.5", ",", "1.0", ",", "2.0", ",", "5.0", ",", "10.0", "]", ")", ",", "\n", "'random_state'", ":", "FixedParameter", "(", "5", ")", "}", ",", "random_state", "=", "self", ".", "_random_state_init", ")", "\n", "params", "=", "JointParameterSpace", "(", "{", "'ml'", ":", "params_ml", ",", "'features'", ":", "super", "(", ")", ".", "get_default_parameter_space", "(", ")", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.PLSRegression_Objective.__init__": [[359, 383], ["sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "sklearn.StandardScaler", "_ModelSelectionObjective.ModelSelectionObjectiveMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "X", ",", "\n", "y", ",", "\n", "sample_weights", "=", "None", ",", "\n", "groups", "=", "None", ",", "\n", "evaluation_weights", "=", "None", ",", "\n", "X_val", "=", "None", ",", "\n", "y_val", "=", "None", ",", "\n", "sample_weights_val", "=", "None", ",", "\n", "groups_val", "=", "None", ",", "\n", "evaluation_weights_val", "=", "None", ",", "\n", "feature_groups", "=", "None", ",", "\n", "reverse", "=", "False", ",", "\n", "preprocessor", "=", "preprocessing", ".", "StandardScaler", "(", ")", ",", "\n", "score_functions", "=", "None", ",", "\n", "validator", "=", "None", ",", "\n", "oversampler", "=", "None", ",", "\n", "disable_feature_selection", "=", "False", ",", "\n", "random_state", "=", "random_state", ",", "\n", "cache_path", "=", "None", ",", "\n", "verbosity", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cross_decomposition", ".", "PLSRegression", ",", "X", ",", "y", ",", "sample_weights", ",", "groups", ",", "evaluation_weights", ",", "\n", "X_val", ",", "y_val", ",", "sample_weights_val", ",", "groups_val", ",", "evaluation_weights_val", ",", "\n", "feature_groups", ",", "reverse", ",", "preprocessor", ",", "score_functions", ",", "validator", ",", "oversampler", ",", "disable_feature_selection", ",", "random_state", ",", "cache_path", ",", "verbosity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.PLSRegression_Objective.get_default_parameter_space": [[384, 389], ["int", "maweight.mltoolkit.optimization.ParameterSpace", "maweight.mltoolkit.optimization.JointParameterSpace", "numpy.sqrt", "len", "maweight.mltoolkit.optimization.UniformIntegerParameter", "super().get_default_parameter_space"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.automl._regressors.PLSRegression_Objective.get_default_parameter_space"], ["", "def", "get_default_parameter_space", "(", "self", ")", ":", "\n", "        ", "max_components", "=", "int", "(", "np", ".", "sqrt", "(", "len", "(", "self", ".", "X", "[", "0", "]", ")", ")", ")", "\n", "params_ml", "=", "ParameterSpace", "(", "{", "'n_components'", ":", "UniformIntegerParameter", "(", "2", ",", "max_components", ",", "random_state", "=", "self", ".", "_random_state_init", ")", "}", ",", "random_state", "=", "self", ".", "_random_state_init", ")", "\n", "params", "=", "JointParameterSpace", "(", "{", "'ml'", ":", "params_ml", ",", "'features'", ":", "super", "(", ")", ".", "get_default_parameter_space", "(", ")", "}", ")", "\n", "return", "params", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gykovacs_maweight.base._CacheBase.CacheBase.__init__": [[9, 21], ["jsonlines.open", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "jsonlines.open", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cache_path", "=", "None", ")", ":", "\n", "        ", "self", ".", "cache", "=", "{", "}", "\n", "self", ".", "cache_path", "=", "cache_path", "\n", "if", "self", ".", "cache_path", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "cache_path", ")", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "cache_path", ")", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "self", ".", "cache_path", ")", "\n", "", "", "else", ":", "\n", "                ", "with", "jsonlines", ".", "open", "(", "self", ".", "cache_path", ")", "as", "reader", ":", "\n", "                    ", "for", "obj", "in", "reader", ":", "\n", "                        ", "self", ".", "cache", "[", "obj", "[", "'parameters'", "]", "]", "=", "obj", "[", "'value'", "]", "\n", "", "", "", "self", ".", "cache_writer", "=", "jsonlines", ".", "open", "(", "self", ".", "cache_path", ",", "mode", "=", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.base._CacheBase.CacheBase.is_in_cache": [[22, 24], ["None"], "methods", ["None"], ["", "", "def", "is_in_cache", "(", "self", ",", "parameter", ")", ":", "\n", "        ", "return", "parameter", "in", "self", ".", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.base._CacheBase.CacheBase.get_from_cache": [[25, 30], ["_CacheBase.CacheBase.is_in_cache"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.base._CacheBase.CacheBase.is_in_cache"], ["", "def", "get_from_cache", "(", "self", ",", "parameter", ")", ":", "\n", "        ", "if", "self", ".", "is_in_cache", "(", "parameter", ")", ":", "\n", "            ", "return", "self", ".", "cache", "[", "parameter", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.base._CacheBase.CacheBase.put_into_cache": [[31, 35], ["_CacheBase.CacheBase.cache_writer.write"], "methods", ["None"], ["", "", "def", "put_into_cache", "(", "self", ",", "parameter", ",", "value", ")", ":", "\n", "        ", "self", ".", "cache", "[", "parameter", "]", "=", "value", "\n", "if", "self", ".", "cache_path", ":", "\n", "            ", "self", ".", "cache_writer", ".", "write", "(", "{", "'parameters'", ":", "parameter", ",", "'value'", ":", "value", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.base._CacheBase.CacheBase.close_cache": [[36, 39], ["_CacheBase.CacheBase.cache_writer.close"], "methods", ["None"], ["", "", "def", "close_cache", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cache_path", ":", "\n", "            ", "self", ".", "cache_writer", ".", "close", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.gykovacs_maweight.base._RandomStateMixin.RandomStateMixin.set_random_state": [[7, 27], ["isinstance", "numpy.random.RandomState", "isinstance", "ValueError", "str"], "methods", ["None"], ["def", "set_random_state", "(", "self", ",", "random_state", ")", ":", "\n", "        ", "\"\"\"\n        sets the random_state member of the object\n        \n        Args:\n            random_state (int/np.random.RandomState/None): the random state initializer\n        \"\"\"", "\n", "\n", "self", ".", "_random_state_init", "=", "random_state", "\n", "\n", "if", "random_state", "is", "None", ":", "\n", "            ", "self", ".", "random_state", "=", "np", ".", "random", "\n", "", "elif", "isinstance", "(", "random_state", ",", "int", ")", ":", "\n", "            ", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "random_state", ")", "\n", "", "elif", "isinstance", "(", "random_state", ",", "np", ".", "random", ".", "RandomState", ")", ":", "\n", "            ", "self", ".", "random_state", "=", "random_state", "\n", "", "elif", "random_state", "is", "np", ".", "random", ":", "\n", "            ", "self", ".", "random_state", "=", "random_state", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"random state cannot be initialized by \"", "+", "str", "(", "random_state", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.__init__": [[5, 16], ["logging.getLogger", "_VerboseLoggingMixin.VerboseLoggingMixin.logger.setLevel", "logging.StreamHandler", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "_VerboseLoggingMixin.VerboseLoggingMixin.logger.addHandler"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "\"\"", ",", "level", "=", "3", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "self", ".", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "#logging.basicConfig(format='%(asctime)s %(message)s')", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(message)s'", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "self", ".", "logging_level", "=", "level", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.set_verbosity_level": [[17, 32], ["None"], "methods", ["None"], ["", "def", "set_verbosity_level", "(", "self", ",", "level", ")", ":", "\n", "        ", "if", "level", "==", "'NOTSET'", "or", "level", "==", "5", ":", "\n", "            ", "self", ".", "logging_level", "=", "level", "\n", "", "elif", "level", "==", "'DEBUG'", "or", "level", "==", "4", ":", "\n", "            ", "self", ".", "logging_level", "=", "level", "\n", "", "elif", "level", "==", "'INFO'", "or", "level", "==", "3", ":", "\n", "            ", "self", ".", "logging_level", "=", "level", "\n", "", "elif", "level", "==", "'WARNING'", "or", "level", "==", "2", ":", "\n", "            ", "self", ".", "logging_level", "=", "level", "\n", "", "elif", "level", "==", "'ERROR'", "or", "level", "==", "1", ":", "\n", "            ", "self", ".", "logging_level", "=", "level", "\n", "", "elif", "level", "==", "'CRITICAL'", "or", "level", "==", "0", ":", "\n", "            ", "self", ".", "logging_level", "=", "level", "\n", "", "else", ":", "\n", "            ", "self", ".", "logging_level", "=", "level", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.base._VerboseLoggingMixin.VerboseLoggingMixin.verbose_logging": [[33, 37], ["print", "datetime.datetime.utcnow"], "methods", ["None"], ["", "", "def", "verbose_logging", "(", "self", ",", "level", ",", "message", ")", ":", "\n", "        ", "if", "level", "<=", "self", ".", "logging_level", ":", "\n", "#self.logger.info(message)", "\n", "            ", "print", "(", "datetime", ".", "datetime", ".", "utcnow", "(", ")", ",", "message", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gykovacs_maweight.tests.test_regseg.Testmaweight.test_version_check": [[8, 10], ["test_regseg.Testmaweight.assertTrue", "maweight.executable_version"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight.executable_version"], ["    ", "def", "test_version_check", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "'elastix'", "in", "rs", ".", "executable_version", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gykovacs_maweight.tests.test_regseg.Testmaweight.test_on_ndarrays": [[11, 38], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "maweight.register_and_transform", "test_regseg.Testmaweight.assertTrue", "isinstance"], "methods", ["home.repos.pwc.inspect_result.gykovacs_maweight.maweight._maweight.register_and_transform"], ["", "def", "test_on_ndarrays", "(", "self", ")", ":", "\n", "        ", "s", "=", "17", "\n", "a", "=", "np", ".", "zeros", "(", "(", "s", ",", "s", ",", "s", ")", ")", "\n", "a", "[", "5", ",", "5", ",", "5", "]", "=", "1", "\n", "a", "[", "5", ",", "4", ",", "5", "]", "=", "1", "\n", "a", "[", "5", ",", "6", ",", "5", "]", "=", "1", "\n", "a", "[", "4", ",", "5", ",", "5", "]", "=", "1", "\n", "a", "[", "6", ",", "5", ",", "5", "]", "=", "1", "\n", "a", "[", "5", ",", "5", ",", "4", "]", "=", "1", "\n", "a", "[", "5", ",", "5", ",", "6", "]", "=", "1", "\n", "b", "=", "np", ".", "zeros", "(", "(", "s", ",", "s", ",", "s", ")", ")", "\n", "b", "[", "5", ",", "4", ",", "3", "]", "=", "2", "\n", "b", "[", "4", ",", "4", ",", "3", "]", "=", "2", "\n", "b", "[", "6", ",", "4", ",", "3", "]", "=", "2", "\n", "b", "[", "5", ",", "4", ",", "3", "]", "=", "2", "\n", "b", "[", "5", ",", "6", ",", "3", "]", "=", "2", "\n", "b", "[", "5", ",", "4", ",", "4", "]", "=", "2", "\n", "b", "[", "5", ",", "6", ",", "6", "]", "=", "2", "\n", "\n", "c", "=", "np", ".", "zeros", "(", "(", "s", ",", "s", ",", "s", ")", ")", "\n", "c", "[", "5", ",", "5", ",", "5", "]", "=", "10", "\n", "d", "=", "np", ".", "zeros", "(", "(", "s", ",", "s", ",", "s", ")", ")", "\n", "d", "[", "5", ",", "4", ",", "5", "]", "=", "9", "\n", "\n", "results", "=", "rs", ".", "register_and_transform", "(", "a", ",", "b", ",", "[", "c", ",", "d", "]", ",", "None", ",", "\n", "work_dir", "=", "None", ",", "verbose", "=", "0", ")", "\n", "self", ".", "assertTrue", "(", "isinstance", "(", "results", "[", "0", "]", ",", "nib", ".", "Nifti1Image", ")", ")", "\n", "", "", ""]]}