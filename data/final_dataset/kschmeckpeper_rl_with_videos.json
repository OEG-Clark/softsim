{"home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument._normalize_trial_resources": [[35, 52], ["None"], "function", ["None"], ["def", "_normalize_trial_resources", "(", "resources", ",", "cpu", ",", "gpu", ",", "extra_cpu", ",", "extra_gpu", ")", ":", "\n", "    ", "if", "resources", "is", "None", ":", "\n", "        ", "resources", "=", "{", "}", "\n", "\n", "", "if", "cpu", "is", "not", "None", ":", "\n", "        ", "resources", "[", "'cpu'", "]", "=", "cpu", "\n", "\n", "", "if", "gpu", "is", "not", "None", ":", "\n", "        ", "resources", "[", "'gpu'", "]", "=", "gpu", "\n", "\n", "", "if", "extra_cpu", "is", "not", "None", ":", "\n", "        ", "resources", "[", "'extra_cpu'", "]", "=", "extra_cpu", "\n", "\n", "", "if", "extra_gpu", "is", "not", "None", ":", "\n", "        ", "resources", "[", "'extra_gpu'", "]", "=", "extra_gpu", "\n", "\n", "", "return", "resources", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.add_command_line_args_to_variant_spec": [[54, 71], ["variant_spec[].update", "variant_spec[].get", "variant_spec[].get"], "function", ["None"], ["", "def", "add_command_line_args_to_variant_spec", "(", "variant_spec", ",", "command_line_args", ")", ":", "\n", "    ", "variant_spec", "[", "'run_params'", "]", ".", "update", "(", "{", "\n", "'checkpoint_frequency'", ":", "(", "\n", "command_line_args", ".", "checkpoint_frequency", "\n", "if", "command_line_args", ".", "checkpoint_frequency", "is", "not", "None", "\n", "else", "variant_spec", "[", "'run_params'", "]", ".", "get", "(", "'checkpoint_frequency'", ",", "0", ")", "\n", ")", ",", "\n", "'checkpoint_at_end'", ":", "(", "\n", "command_line_args", ".", "checkpoint_at_end", "\n", "if", "command_line_args", ".", "checkpoint_at_end", "is", "not", "None", "\n", "else", "variant_spec", "[", "'run_params'", "]", ".", "get", "(", "'checkpoint_at_end'", ",", "True", ")", "\n", ")", ",", "\n", "}", ")", "\n", "\n", "variant_spec", "[", "'restore'", "]", "=", "command_line_args", ".", "restore", "\n", "\n", "return", "variant_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.generate_experiment_kwargs": [[73, 129], ["os.path.join", "instrument._normalize_trial_resources", "rl_with_videos.misc.utils.datetimestamp", "instrument.add_command_line_args_to_variant_spec", "ray.tune.function", "instrument.generate_experiment_kwargs.create_trial_name_creator"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument._normalize_trial_resources", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.datetimestamp", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.add_command_line_args_to_variant_spec"], ["", "def", "generate_experiment_kwargs", "(", "variant_spec", ",", "command_line_args", ")", ":", "\n", "# TODO(hartikainen): Allow local dir to be modified through cli args", "\n", "    ", "local_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "'~/ray_results'", ",", "\n", "command_line_args", ".", "universe", ",", "\n", "command_line_args", ".", "domain", ",", "\n", "command_line_args", ".", "task", ")", "\n", "resources_per_trial", "=", "_normalize_trial_resources", "(", "\n", "command_line_args", ".", "resources_per_trial", ",", "\n", "command_line_args", ".", "trial_cpus", ",", "\n", "command_line_args", ".", "trial_gpus", ",", "\n", "command_line_args", ".", "trial_extra_cpus", ",", "\n", "command_line_args", ".", "trial_extra_gpus", ")", "\n", "\n", "datetime_prefix", "=", "datetimestamp", "(", ")", "\n", "experiment_id", "=", "'-'", ".", "join", "(", "(", "datetime_prefix", ",", "command_line_args", ".", "exp_name", ")", ")", "\n", "\n", "variant_spec", "=", "add_command_line_args_to_variant_spec", "(", "\n", "variant_spec", ",", "command_line_args", ")", "\n", "\n", "if", "command_line_args", ".", "video_save_frequency", "is", "not", "None", ":", "\n", "        ", "assert", "'algorithm_params'", "in", "variant_spec", "\n", "variant_spec", "[", "'algorithm_params'", "]", "[", "'kwargs'", "]", "[", "'video_save_frequency'", "]", "=", "(", "\n", "command_line_args", ".", "video_save_frequency", ")", "\n", "\n", "", "if", "command_line_args", ".", "path_save_frequency", "is", "not", "None", ":", "\n", "        ", "assert", "'algorithm_params'", "in", "variant_spec", "\n", "variant_spec", "[", "'algorithm_params'", "]", "[", "'kwargs'", "]", "[", "'path_save_frequency'", "]", "=", "(", "\n", "command_line_args", ".", "path_save_frequency", ")", "\n", "\n", "", "def", "create_trial_name_creator", "(", "trial_name_template", "=", "None", ")", ":", "\n", "        ", "if", "not", "trial_name_template", ":", "\n", "            ", "return", "None", "\n", "\n", "", "def", "trial_name_creator", "(", "trial", ")", ":", "\n", "            ", "return", "trial_name_template", ".", "format", "(", "trial", "=", "trial", ")", "\n", "\n", "", "return", "tune", ".", "function", "(", "trial_name_creator", ")", "\n", "\n", "", "experiment_kwargs", "=", "{", "\n", "'name'", ":", "experiment_id", ",", "\n", "'resources_per_trial'", ":", "resources_per_trial", ",", "\n", "'config'", ":", "variant_spec", ",", "\n", "'local_dir'", ":", "local_dir", ",", "\n", "'num_samples'", ":", "command_line_args", ".", "num_samples", ",", "\n", "'upload_dir'", ":", "command_line_args", ".", "upload_dir", ",", "\n", "'checkpoint_freq'", ":", "(", "\n", "variant_spec", "[", "'run_params'", "]", "[", "'checkpoint_frequency'", "]", ")", ",", "\n", "'checkpoint_at_end'", ":", "(", "\n", "variant_spec", "[", "'run_params'", "]", "[", "'checkpoint_at_end'", "]", ")", ",", "\n", "'trial_name_creator'", ":", "create_trial_name_creator", "(", "\n", "command_line_args", ".", "trial_name_template", ")", ",", "\n", "'restore'", ":", "command_line_args", ".", "restore", ",", "# Defaults to None", "\n", "}", "\n", "\n", "return", "experiment_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.unique_cluster_name": [[131, 140], ["rl_with_videos.misc.utils.datetimestamp", "str", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.datetimestamp"], ["", "def", "unique_cluster_name", "(", "args", ")", ":", "\n", "    ", "cluster_name_parts", "=", "(", "\n", "datetimestamp", "(", "''", ")", ",", "\n", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "[", ":", "6", "]", ",", "\n", "args", ".", "domain", ",", "\n", "args", ".", "task", "\n", ")", "\n", "cluster_name", "=", "\"-\"", ".", "join", "(", "cluster_name_parts", ")", ".", "lower", "(", ")", "\n", "return", "cluster_name", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.get_experiments_info": [[142, 158], ["sum", "number_of_trials.values", "len", "list", "ray.tune.suggest.variant_generator.generate_variants"], "function", ["None"], ["", "def", "get_experiments_info", "(", "experiments", ")", ":", "\n", "    ", "number_of_trials", "=", "{", "\n", "experiment_kwargs", "[", "'name'", "]", ":", "len", "(", "list", "(", "\n", "tune", ".", "suggest", ".", "variant_generator", ".", "generate_variants", "(", "\n", "experiment_kwargs", "[", "'config'", "]", ")", "\n", ")", ")", "*", "experiment_kwargs", "[", "'num_samples'", "]", "\n", "for", "experiment_kwargs", "in", "experiments", "\n", "}", "\n", "total_number_of_trials", "=", "sum", "(", "number_of_trials", ".", "values", "(", ")", ")", "\n", "\n", "experiments_info", "=", "{", "\n", "\"number_of_trials\"", ":", "number_of_trials", ",", "\n", "\"total_number_of_trials\"", ":", "total_number_of_trials", ",", "\n", "}", "\n", "\n", "return", "experiments_info", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.confirm_yes_no": [[160, 174], ["input().lower", "input().lower", "input", "exit", "print", "input"], "function", ["None"], ["", "def", "confirm_yes_no", "(", "prompt", ")", ":", "\n", "# raw_input returns the empty string for \"enter\"", "\n", "    ", "yes", "=", "{", "'yes'", ",", "'ye'", ",", "'y'", "}", "\n", "no", "=", "{", "'no'", ",", "'n'", "}", "\n", "\n", "choice", "=", "input", "(", "prompt", ")", ".", "lower", "(", ")", "\n", "while", "True", ":", "\n", "        ", "if", "choice", "in", "yes", ":", "\n", "            ", "return", "True", "\n", "", "elif", "choice", "in", "no", ":", "\n", "            ", "exit", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Please respond with 'yes' or 'no'.\\n(yes/no)\"", ")", "\n", "", "choice", "=", "input", "(", ")", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.run_example_dry": [[176, 202], ["importlib.import_module", "importlib.import_module.get_parser().parse_args", "importlib.import_module.get_variant_spec", "instrument.generate_experiment_kwargs", "instrument.get_experiments_info", "print", "importlib.import_module.get_parser", "pprint.pformat", "pprint.pformat"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.archive_gs.parse_args", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.__init__.get_variant_spec", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.generate_experiment_kwargs", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.get_experiments_info", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.install_mujoco.get_parser"], ["", "", "def", "run_example_dry", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "\"\"\"Print the variant spec and related information of an example.\"\"\"", "\n", "example_module", "=", "importlib", ".", "import_module", "(", "example_module_name", ")", "\n", "\n", "example_args", "=", "example_module", ".", "get_parser", "(", ")", ".", "parse_args", "(", "example_argv", ")", "\n", "variant_spec", "=", "example_module", ".", "get_variant_spec", "(", "example_args", ")", "\n", "\n", "experiment_kwargs", "=", "generate_experiment_kwargs", "(", "variant_spec", ",", "example_args", ")", "\n", "\n", "experiments_info", "=", "get_experiments_info", "(", "[", "experiment_kwargs", "]", ")", "\n", "number_of_trials", "=", "experiments_info", "[", "\"number_of_trials\"", "]", "\n", "total_number_of_trials", "=", "experiments_info", "[", "\"total_number_of_trials\"", "]", "\n", "\n", "experiments_info_text", "=", "f\"\"\"\nDry run.\n\nExperiment specs:\n{pformat(experiment_kwargs, indent=2)}\n\nNumber of trials:\n{pformat(number_of_trials, indent=2)}\n\nNumber of total trials (including samples/seeds): {total_number_of_trials}\n\"\"\"", "\n", "\n", "print", "(", "experiments_info_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.run_example_local": [[204, 235], ["importlib.import_module", "importlib.import_module.get_parser().parse_args", "importlib.import_module.get_variant_spec", "importlib.import_module.get_trainable_class", "instrument.generate_experiment_kwargs", "print", "str", "datetime_str.replace().replace().replace.replace().replace().replace", "ray.init", "ray.tune.run", "datetime.datetime.now", "importlib.import_module.get_parser", "datetime_str.replace().replace().replace.replace().replace", "datetime_str.replace().replace().replace.replace"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.archive_gs.parse_args", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.__init__.get_variant_spec", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.__init__.get_trainable_class", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.generate_experiment_kwargs", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.install_mujoco.get_parser"], ["", "def", "run_example_local", "(", "example_module_name", ",", "example_argv", ",", "local_mode", "=", "False", ")", ":", "\n", "    ", "\"\"\"Run example locally, potentially parallelizing across cpus/gpus.\"\"\"", "\n", "example_module", "=", "importlib", ".", "import_module", "(", "example_module_name", ")", "\n", "\n", "example_args", "=", "example_module", ".", "get_parser", "(", ")", ".", "parse_args", "(", "example_argv", ")", "\n", "variant_spec", "=", "example_module", ".", "get_variant_spec", "(", "example_args", ")", "\n", "trainable_class", "=", "example_module", ".", "get_trainable_class", "(", "example_args", ")", "\n", "\n", "experiment_kwargs", "=", "generate_experiment_kwargs", "(", "variant_spec", ",", "example_args", ")", "\n", "print", "(", "\"experiment kwargs:\"", ",", "experiment_kwargs", ")", "\n", "import", "datetime", "\n", "datetime_str", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "datetime_str", "=", "datetime_str", ".", "replace", "(", "' '", ",", "'-'", ")", ".", "replace", "(", "':'", ",", "'-'", ")", ".", "replace", "(", "'.'", ",", "'-'", ")", "\n", "temp_dir", "=", "example_args", ".", "temp_dir", "+", "\"/\"", "+", "datetime_str", "\n", "\n", "ray", ".", "init", "(", "\n", "num_cpus", "=", "example_args", ".", "cpus", ",", "\n", "num_gpus", "=", "example_args", ".", "gpus", ",", "\n", "resources", "=", "example_args", ".", "resources", "or", "{", "}", ",", "\n", "local_mode", "=", "local_mode", ",", "\n", "include_webui", "=", "example_args", ".", "include_webui", ",", "\n", "temp_dir", "=", "temp_dir", ")", "\n", "\n", "tune", ".", "run", "(", "\n", "trainable_class", ",", "\n", "**", "experiment_kwargs", ",", "\n", "with_server", "=", "example_args", ".", "with_server", ",", "\n", "server_port", "=", "example_args", ".", "server_port", ",", "\n", "max_failures", "=", "0", ",", "\n", "scheduler", "=", "None", ",", "\n", "reuse_actors", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.run_example_debug": [[237, 261], ["instrument.run_example_local", "multiprocessing.cpu_count", "debug_example_argv.append", "print", "debug_example_argv.append"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.run_example_local"], ["", "def", "run_example_debug", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "\"\"\"The debug mode limits tune trial runs to enable use of debugger.\n\n    The debug mode should allow easy switch between parallelized and\n    non-parallelized runs such that the debugger can be reasonably used when\n    running the code. In practice, this allocates all the cpus available in ray\n    such that only a single trial can run at once.\n\n    TODO(hartikainen): This should allocate a custom \"debug_resource\" instead\n    of all cpus once ray local mode supports custom resources.\n    \"\"\"", "\n", "\n", "debug_example_argv", "=", "[", "]", "\n", "for", "option", "in", "example_argv", ":", "\n", "        ", "if", "'--trial-cpus'", "in", "option", ":", "\n", "            ", "available_cpus", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "debug_example_argv", ".", "append", "(", "f'--trial-cpus={available_cpus}'", ")", "\n", "", "elif", "'--upload-dir'", "in", "option", ":", "\n", "            ", "print", "(", "f\"Ignoring {option} due to debug mode.\"", ")", "\n", "continue", "\n", "", "else", ":", "\n", "            ", "debug_example_argv", ".", "append", "(", "option", ")", "\n", "\n", "", "", "run_example_local", "(", "example_module_name", ",", "debug_example_argv", ",", "local_mode", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.run_example_cluster": [[263, 295], ["importlib.import_module", "importlib.import_module.get_parser().parse_args", "importlib.import_module.get_variant_spec", "importlib.import_module.get_trainable_class", "instrument.generate_experiment_kwargs", "ray.init", "ray.tune.run", "ray.services.get_node_ip_address", "importlib.import_module.get_parser"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.archive_gs.parse_args", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.__init__.get_variant_spec", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.__init__.get_trainable_class", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.generate_experiment_kwargs", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.install_mujoco.get_parser"], ["", "def", "run_example_cluster", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "\"\"\"Run example on cluster mode.\n\n    This functions is very similar to the local mode, except that it\n    correctly sets the redis address to make ray/tune work on a cluster.\n    \"\"\"", "\n", "example_module", "=", "importlib", ".", "import_module", "(", "example_module_name", ")", "\n", "\n", "example_args", "=", "example_module", ".", "get_parser", "(", ")", ".", "parse_args", "(", "example_argv", ")", "\n", "variant_spec", "=", "example_module", ".", "get_variant_spec", "(", "example_args", ")", "\n", "trainable_class", "=", "example_module", ".", "get_trainable_class", "(", "example_args", ")", "\n", "\n", "experiment_kwargs", "=", "generate_experiment_kwargs", "(", "variant_spec", ",", "example_args", ")", "\n", "\n", "redis_address", "=", "ray", ".", "services", ".", "get_node_ip_address", "(", ")", "+", "':6379'", "\n", "\n", "ray", ".", "init", "(", "\n", "redis_address", "=", "redis_address", ",", "\n", "num_cpus", "=", "example_args", ".", "cpus", ",", "\n", "num_gpus", "=", "example_args", ".", "gpus", ",", "\n", "local_mode", "=", "False", ",", "\n", "include_webui", "=", "example_args", ".", "include_webui", ",", "\n", "temp_dir", "=", "example_args", ".", "temp_dir", ")", "\n", "\n", "tune", ".", "run", "(", "\n", "trainable_class", ",", "\n", "**", "experiment_kwargs", ",", "\n", "with_server", "=", "example_args", ".", "with_server", ",", "\n", "server_port", "=", "example_args", ".", "server_port", ",", "\n", "scheduler", "=", "None", ",", "\n", "queue_trials", "=", "True", ",", "\n", "reuse_actors", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.launch_example_cluster": [[297, 351], ["importlib.import_module", "importlib.import_module.get_parser().parse_args", "importlib.import_module.get_variant_spec", "instrument.generate_experiment_kwargs", "instrument.get_experiments_info", "instrument.confirm_yes_no", "ray.autoscaler.commands.exec_cluster", "instrument.confirm_yes_no", "instrument.unique_cluster_name", "importlib.import_module.get_parser"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.archive_gs.parse_args", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.__init__.get_variant_spec", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.generate_experiment_kwargs", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.get_experiments_info", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.confirm_yes_no", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.confirm_yes_no", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.unique_cluster_name", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.install_mujoco.get_parser"], ["", "def", "launch_example_cluster", "(", "example_module_name", ",", "\n", "example_argv", ",", "\n", "config_file", ",", "\n", "screen", ",", "\n", "tmux", ",", "\n", "stop", ",", "\n", "start", ",", "\n", "override_cluster_name", ",", "\n", "port_forward", ")", ":", "\n", "    ", "\"\"\"Launches the example on autoscaled ray cluster through ray exec_cmd.\n\n    This handles basic validation and sanity checks for the experiment, and\n    then executes the command on autoscaled ray cluster. If necessary, it will\n    also fill in more useful defaults for our workflow (i.e. for tmux and\n    cluster_name).\n    \"\"\"", "\n", "example_module", "=", "importlib", ".", "import_module", "(", "example_module_name", ")", "\n", "\n", "example_args", "=", "example_module", ".", "get_parser", "(", ")", ".", "parse_args", "(", "example_argv", ")", "\n", "variant_spec", "=", "example_module", ".", "get_variant_spec", "(", "example_args", ")", "\n", "\n", "experiment_kwargs", "=", "generate_experiment_kwargs", "(", "variant_spec", ",", "example_args", ")", "\n", "\n", "experiments_info", "=", "get_experiments_info", "(", "[", "experiment_kwargs", "]", ")", "\n", "total_number_of_trials", "=", "experiments_info", "[", "'total_number_of_trials'", "]", "\n", "\n", "if", "not", "example_args", ".", "upload_dir", ":", "\n", "        ", "confirm_yes_no", "(", "\n", "\"`upload_dir` is empty. No results will be uploaded to cloud\"", "\n", "\" storage. Use `--upload-dir` argument to set upload dir.\"", "\n", "\" Continue without upload directory?\\n(yes/no) \"", ")", "\n", "\n", "", "confirm_yes_no", "(", "f\"Launch {total_number_of_trials} trials?\\n(yes/no) \"", ")", "\n", "\n", "override_cluster_name", "=", "override_cluster_name", "or", "unique_cluster_name", "(", "\n", "example_args", ")", "\n", "\n", "cluster_command_parts", "=", "(", "\n", "'softlearning'", ",", "\n", "'run_example_cluster'", ",", "\n", "example_module_name", ",", "\n", "*", "example_argv", ")", "\n", "cluster_command", "=", "' '", ".", "join", "(", "cluster_command_parts", ")", "\n", "\n", "return", "exec_cluster", "(", "\n", "config_file", "=", "config_file", ",", "\n", "cmd", "=", "cluster_command", ",", "\n", "docker", "=", "False", ",", "\n", "screen", "=", "screen", ",", "\n", "tmux", "=", "tmux", ",", "\n", "stop", "=", "stop", ",", "\n", "start", "=", "start", ",", "\n", "override_cluster_name", "=", "override_cluster_name", ",", "\n", "port_forward", "=", "port_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.launch_example_gce": [[353, 369], ["instrument.launch_example_cluster"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.launch_example_cluster"], ["", "def", "launch_example_gce", "(", "*", "args", ",", "config_file", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Forwards call to `launch_example_cluster` after adding gce defaults.\n\n    This optionally sets the ray autoscaler configuration file to the default\n    gce configuration file, and then calls `launch_example_cluster` to\n    execute the original command on autoscaled gce cluster by parsing the args.\n\n    See `launch_example_cluster` for further details.\n    \"\"\"", "\n", "config_file", "=", "(", "\n", "config_file", "or", "AUTOSCALER_DEFAULT_CONFIG_FILE_GCE", ")", "\n", "\n", "return", "launch_example_cluster", "(", "\n", "*", "args", ",", "\n", "config_file", "=", "config_file", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.launch_example_ec2": [[371, 387], ["instrument.launch_example_cluster"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.launch_example_cluster"], ["", "def", "launch_example_ec2", "(", "*", "args", ",", "config_file", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Forwards call to `launch_example_cluster` after adding ec2 defaults.\n\n    This optionally sets the ray autoscaler configuration file to the default\n    ec2 configuration file, and then calls `launch_example_cluster` to\n    execute the original command on autoscaled ec2 cluster by parsing the args.\n\n    See `launch_example_cluster` for further details.\n    \"\"\"", "\n", "config_file", "=", "(", "\n", "config_file", "or", "AUTOSCALER_DEFAULT_CONFIG_FILE_EC2", ")", "\n", "\n", "launch_example_cluster", "(", "\n", "*", "args", ",", "\n", "config_file", "=", "config_file", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.utils.add_ray_init_args": [[22, 56], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "utils.add_ray_init_args.init_help_string"], "function", ["None"], ["def", "add_ray_init_args", "(", "parser", ")", ":", "\n", "\n", "    ", "def", "init_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `ray.init`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Cpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Gpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resources'", ",", "\n", "type", "=", "json", ".", "loads", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Resources to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--include-webui'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "init_help_string", "(", "\"Boolean flag indicating whether to start the\"", "\n", "\"web UI, which is a Jupyter notebook.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--temp-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"If provided, it will specify the root temporary\"", "\n", "\" directory for the Ray process.\"", ")", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.utils.add_ray_tune_args": [[58, 158], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "utils.add_ray_tune_args.tune_help_string"], "function", ["None"], ["", "def", "add_ray_tune_args", "(", "parser", ")", ":", "\n", "\n", "    ", "def", "tune_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `tune.run`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--resources-per-trial'", ",", "\n", "type", "=", "json", ".", "loads", ",", "\n", "default", "=", "{", "}", ",", "\n", "help", "=", "tune_help_string", "(", "\"Resources to allocate for each trial.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"CPUs to allocate for each trial. Note: this is only used for\"", "\n", "\" Ray's internal scheduling bookkeeping, and is not an actual hard\"", "\n", "\" limit for CPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-gpus'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"GPUs to allocate for each trial. Note: this is only used for\"", "\n", "\" Ray's internal scheduling bookkeeping, and is not an actual hard\"", "\n", "\" limit for GPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-extra-cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Extra CPUs to reserve in case the trials need to\"", "\n", "\" launch additional Ray actors that use CPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-extra-gpus'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Extra GPUs to reserve in case the trials need to\"", "\n", "\" launch additional Ray actors that use GPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-samples'", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "tune_help_string", "(", "\"Number of times to repeat each trial.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--upload-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "''", ",", "\n", "help", "=", "tune_help_string", "(", "\"Optional URI to sync training results to (e.g.\"", "\n", "\" s3://<bucket> or gs://<bucket>).\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-name-template'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'id={trial.trial_id}-seed={trial.config[run_params][seed]}'", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Optional string template for trial name. For example:\"", "\n", "\" '{trial.trial_id}-seed={trial.config[run_params][seed]}'\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint-frequency'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"How many training iterations between checkpoints.\"", "\n", "\" A value of 0 (default) disables checkpointing. If set,\"", "\n", "\" takes precedence over variant['run_params']\"", "\n", "\"['checkpoint_frequency'].\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint-at-end'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Whether to checkpoint at the end of the experiment. If set,\"", "\n", "\" takes precedence over variant['run_params']\"", "\n", "\"['checkpoint_at_end'].\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--max-failures'", ",", "\n", "default", "=", "3", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Try to recover a trial from its last checkpoint at least this \"", "\n", "\"many times. Only applies if checkpointing is enabled.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--restore'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Path to checkpoint. Only makes sense to set if running 1 trial.\"", "\n", "\" Defaults to None.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--with-server'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "tune_help_string", "(", "\"Starts a background Tune server. Needed for\"", "\n", "\" using the Client API.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--server-port'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4321", ",", "\n", "help", "=", "tune_help_string", "(", "\"Port number for launching TuneServer.\"", ")", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.utils.get_parser": [[160, 229], ["argparse.ArgumentParser", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "utils.add_ray_init_args", "utils.add_ray_tune_args", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "rl_with_videos.misc.utils.datetimestamp", "bool", "bool", "distutils.util.strtobool", "distutils.util.strtobool"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.utils.add_ray_init_args", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.utils.add_ray_tune_args", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.datetimestamp"], ["", "def", "get_parser", "(", "allow_policy_list", "=", "False", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--universe'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "AVAILABLE_UNIVERSES", ",", "\n", "default", "=", "DEFAULT_UNIVERSE", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--domain'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "DEFAULT_DOMAIN", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--task'", ",", "type", "=", "str", ",", "default", "=", "DEFAULT_TASK", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint-replay-pool'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Whether a checkpoint should also saved the replay\"", "\n", "\" pool. If set, takes precedence over\"", "\n", "\" variant['run_params']['checkpoint_replay_pool'].\"", "\n", "\" Note that the replay pool is saved (and \"", "\n", "\" constructed) piece by piece so that each\"", "\n", "\" experience is saved only once.\"", ")", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--algorithm'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "AVAILABLE_ALGORITHMS", ",", "\n", "default", "=", "DEFAULT_ALGORITHM", ")", "\n", "if", "allow_policy_list", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "'--policy'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "(", "'gaussian'", ",", ")", ",", "\n", "default", "=", "'gaussian'", ")", "\n", "", "else", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "'--policy'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "(", "'gaussian'", ",", ")", ",", "\n", "default", "=", "'gaussian'", ")", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--exp-name'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "datetimestamp", "(", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'local'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--confirm-remote'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "nargs", "=", "'?'", ",", "\n", "const", "=", "True", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"Whether or not to query yes/no on remote run.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--video-save-frequency'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Save frequency for videos.\"", ")", "\n", "\n", "parser", "=", "add_ray_init_args", "(", "parser", ")", "\n", "parser", "=", "add_ray_tune_args", "(", "parser", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.utils.variant_equals": [[231, 243], ["ray.tune.sample_from", "spec.get"], "function", ["None"], ["", "def", "variant_equals", "(", "*", "keys", ")", ":", "\n", "    ", "def", "get_from_spec", "(", "spec", ")", ":", "\n", "# TODO(hartikainen): This may break in some cases. ray.tune seems to", "\n", "# add a 'config' key at the top of the spec, whereas `generate_variants`", "\n", "# does not.", "\n", "        ", "node", "=", "spec", ".", "get", "(", "'config'", ",", "spec", ")", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "node", "=", "node", "[", "key", "]", "\n", "\n", "", "return", "node", "\n", "\n", "", "return", "sample_from", "(", "get_from_spec", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._setup": [[22, 34], ["rl_with_videos.misc.utils.set_seed", "tensorflow.GPUOptions", "tensorflow.Session", "tensorflow.keras.backend.set_session", "tensorflow.keras.backend.get_session", "tensorflow.ConfigProto"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.set_seed"], ["    ", "def", "_setup", "(", "self", ",", "variant", ")", ":", "\n", "        ", "set_seed", "(", "variant", "[", "'run_params'", "]", "[", "'seed'", "]", ")", "\n", "\n", "self", ".", "_variant", "=", "variant", "\n", "\n", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "allow_growth", "=", "True", ")", "\n", "session", "=", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", "gpu_options", "=", "gpu_options", ")", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "set_session", "(", "session", ")", "\n", "self", ".", "_session", "=", "tf", ".", "keras", ".", "backend", ".", "get_session", "(", ")", "\n", "\n", "self", ".", "train_generator", "=", "None", "\n", "self", ".", "_built", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._stop": [[35, 38], ["tensorflow.reset_default_graph", "tensorflow.keras.backend.clear_session"], "methods", ["None"], ["", "def", "_stop", "(", "self", ")", ":", "\n", "        ", "tf", ".", "reset_default_graph", "(", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._build": [[39, 74], ["copy.deepcopy", "rl_with_videos.environments.utils.get_environment_from_params", "rl_with_videos.replay_pools.utils.get_replay_pool_from_variant", "rl_with_videos.samplers.utils.get_sampler_from_variant", "rl_with_videos.value_functions.utils.get_Q_function_from_variant", "rl_with_videos.policies.utils.get_policy_from_variant", "rl_with_videos.policies.utils.get_policy", "rl_with_videos.algorithms.utils.get_algorithm_from_variant", "rl_with_videos.misc.utils.initialize_tf_variables", "rl_with_videos.environments.utils.get_environment_from_params"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.environments.utils.get_environment_from_params", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.utils.get_replay_pool_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.utils.get_sampler_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.value_functions.utils.get_Q_function_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.utils.get_policy_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.utils.get_policy", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.utils.get_algorithm_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.initialize_tf_variables", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.environments.utils.get_environment_from_params"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "variant", "=", "copy", ".", "deepcopy", "(", "self", ".", "_variant", ")", "\n", "\n", "environment_params", "=", "variant", "[", "'environment_params'", "]", "\n", "training_environment", "=", "self", ".", "training_environment", "=", "(", "\n", "get_environment_from_params", "(", "environment_params", "[", "'training'", "]", ")", ")", "\n", "evaluation_environment", "=", "self", ".", "evaluation_environment", "=", "(", "\n", "get_environment_from_params", "(", "environment_params", "[", "'evaluation'", "]", ")", "\n", "if", "'evaluation'", "in", "environment_params", "\n", "else", "training_environment", ")", "\n", "\n", "replay_pool", "=", "self", ".", "replay_pool", "=", "(", "\n", "get_replay_pool_from_variant", "(", "variant", ",", "training_environment", ")", ")", "\n", "sampler", "=", "self", ".", "sampler", "=", "get_sampler_from_variant", "(", "variant", ")", "\n", "Qs", "=", "self", ".", "Qs", "=", "get_Q_function_from_variant", "(", "\n", "variant", ",", "training_environment", ")", "\n", "policy", "=", "self", ".", "policy", "=", "get_policy_from_variant", "(", "\n", "variant", ",", "training_environment", ",", "Qs", ")", "\n", "initial_exploration_policy", "=", "self", ".", "initial_exploration_policy", "=", "(", "\n", "get_policy", "(", "'UniformPolicy'", ",", "training_environment", ")", ")", "\n", "\n", "self", ".", "algorithm", "=", "get_algorithm_from_variant", "(", "\n", "variant", "=", "self", ".", "_variant", ",", "\n", "training_environment", "=", "training_environment", ",", "\n", "evaluation_environment", "=", "evaluation_environment", ",", "\n", "policy", "=", "policy", ",", "\n", "initial_exploration_policy", "=", "initial_exploration_policy", ",", "\n", "Qs", "=", "Qs", ",", "\n", "pool", "=", "replay_pool", ",", "\n", "sampler", "=", "sampler", ",", "\n", "session", "=", "self", ".", "_session", ")", "\n", "\n", "initialize_tf_variables", "(", "self", ".", "_session", ",", "only_uninitialized", "=", "True", ")", "\n", "\n", "self", ".", "_built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._train": [[75, 85], ["next", "main.ExperimentRunner._build", "main.ExperimentRunner.algorithm.train"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._build", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm.train"], ["", "def", "_train", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_built", ":", "\n", "            ", "self", ".", "_build", "(", ")", "\n", "\n", "", "if", "self", ".", "train_generator", "is", "None", ":", "\n", "            ", "self", ".", "train_generator", "=", "self", ".", "algorithm", ".", "train", "(", ")", "\n", "\n", "", "diagnostics", "=", "next", "(", "self", ".", "train_generator", ")", "\n", "\n", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._pickle_path": [[86, 88], ["os.path.join"], "methods", ["None"], ["", "def", "_pickle_path", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'checkpoint.pkl'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._replay_pool_pickle_path": [[89, 91], ["os.path.join"], "methods", ["None"], ["", "def", "_replay_pool_pickle_path", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'replay_pool.pkl'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._tf_checkpoint_prefix": [[92, 94], ["os.path.join"], "methods", ["None"], ["", "def", "_tf_checkpoint_prefix", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'checkpoint'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._get_tf_checkpoint": [[95, 99], ["tensorflow.train.Checkpoint"], "methods", ["None"], ["", "def", "_get_tf_checkpoint", "(", "self", ")", ":", "\n", "        ", "tf_checkpoint", "=", "tf", ".", "train", ".", "Checkpoint", "(", "**", "self", ".", "algorithm", ".", "tf_saveables", ")", "\n", "\n", "return", "tf_checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner.picklables": [[100, 110], ["main.ExperimentRunner.policy.get_weights"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.get_weights"], ["", "@", "property", "\n", "def", "picklables", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'variant'", ":", "self", ".", "_variant", ",", "\n", "'training_environment'", ":", "self", ".", "training_environment", ",", "\n", "'evaluation_environment'", ":", "self", ".", "evaluation_environment", ",", "\n", "'sampler'", ":", "self", ".", "sampler", ",", "\n", "'algorithm'", ":", "self", ".", "algorithm", ",", "\n", "'Qs'", ":", "self", ".", "Qs", ",", "\n", "'policy_weights'", ":", "self", ".", "policy", ".", "get_weights", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._save": [[112, 139], ["main.ExperimentRunner._pickle_path", "main.ExperimentRunner._variant[].get", "main.ExperimentRunner._get_tf_checkpoint", "main.ExperimentRunner.save", "os.path.join", "open", "pickle.dump", "main.ExperimentRunner._save_replay_pool", "main.ExperimentRunner._tf_checkpoint_prefix"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._pickle_path", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._get_tf_checkpoint", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._save_replay_pool", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._tf_checkpoint_prefix"], ["", "def", "_save", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "\"\"\"Implements the checkpoint logic.\n\n        TODO(hartikainen): This implementation is currently very hacky. Things\n        that need to be fixed:\n          - Figure out how serialize/save tf.keras.Model subclassing. The\n            current implementation just dumps the weights in a pickle, which\n            is not optimal.\n          - Try to unify all the saving and loading into easily\n            extendable/maintainable interfaces. Currently we use\n            `tf.train.Checkpoint` and `pickle.dump` in very unorganized way\n            which makes things not so usable.\n        \"\"\"", "\n", "pickle_path", "=", "self", ".", "_pickle_path", "(", "checkpoint_dir", ")", "\n", "with", "open", "(", "pickle_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "picklables", ",", "f", ")", "\n", "\n", "", "if", "self", ".", "_variant", "[", "'run_params'", "]", ".", "get", "(", "'checkpoint_replay_pool'", ",", "False", ")", ":", "\n", "            ", "self", ".", "_save_replay_pool", "(", "checkpoint_dir", ")", "\n", "\n", "", "tf_checkpoint", "=", "self", ".", "_get_tf_checkpoint", "(", ")", "\n", "\n", "tf_checkpoint", ".", "save", "(", "\n", "file_prefix", "=", "self", ".", "_tf_checkpoint_prefix", "(", "checkpoint_dir", ")", ",", "\n", "session", "=", "self", ".", "_session", ")", "\n", "\n", "return", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._save_replay_pool": [[140, 144], ["main.ExperimentRunner._replay_pool_pickle_path", "main.ExperimentRunner.replay_pool.save_latest_experience"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._replay_pool_pickle_path", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.save_latest_experience"], ["", "def", "_save_replay_pool", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "replay_pool_pickle_path", "=", "self", ".", "_replay_pool_pickle_path", "(", "\n", "checkpoint_dir", ")", "\n", "self", ".", "replay_pool", ".", "save_latest_experience", "(", "replay_pool_pickle_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._restore_replay_pool": [[145, 156], ["os.path.dirname", "main.ExperimentRunner._replay_pool_pickle_path", "main.ExperimentRunner.replay_pool.load_experience", "sorted", "glob.iglob", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._replay_pool_pickle_path", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.load_experience"], ["", "def", "_restore_replay_pool", "(", "self", ",", "current_checkpoint_dir", ")", ":", "\n", "        ", "experiment_root", "=", "os", ".", "path", ".", "dirname", "(", "current_checkpoint_dir", ")", "\n", "\n", "experience_paths", "=", "[", "\n", "self", ".", "_replay_pool_pickle_path", "(", "checkpoint_dir", ")", "\n", "for", "checkpoint_dir", "in", "sorted", "(", "glob", ".", "iglob", "(", "\n", "os", ".", "path", ".", "join", "(", "experiment_root", ",", "'checkpoint_*'", ")", ")", ")", "\n", "]", "\n", "\n", "for", "experience_path", "in", "experience_paths", ":", "\n", "            ", "self", ".", "replay_pool", ".", "load_experience", "(", "experience_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._restore": [[157, 211], ["isinstance", "checkpoint_dir.rstrip.rstrip.rstrip", "rl_with_videos.replay_pools.utils.get_replay_pool_from_variant", "main.ExperimentRunner._variant[].get", "rl_with_videos.policies.utils.get_policy_from_variant", "main.ExperimentRunner.policy.set_weights", "rl_with_videos.policies.utils.get_policy", "rl_with_videos.algorithms.utils.get_algorithm_from_variant", "main.ExperimentRunner.algorithm.__setstate__", "main.ExperimentRunner._get_tf_checkpoint", "main.ExperimentRunner.restore", "main.ExperimentRunner.restore.assert_consumed().run_restore_ops", "rl_with_videos.misc.utils.initialize_tf_variables", "zip", "main.ExperimentRunner._session.as_default", "main.ExperimentRunner._pickle_path", "main.ExperimentRunner._restore_replay_pool", "picklable[].__getstate__", "tensorflow.train.latest_checkpoint", "Q_target.set_weights", "open", "pickle.load", "main.ExperimentRunner.restore.assert_consumed", "Q.get_weights", "os.path.split", "main.ExperimentRunner._tf_checkpoint_prefix"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.utils.get_replay_pool_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.utils.get_policy_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.set_weights", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.utils.get_policy", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.utils.get_algorithm_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.__setstate__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._get_tf_checkpoint", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.initialize_tf_variables", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._pickle_path", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._restore_replay_pool", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.__getstate__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.set_weights", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.get_weights", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._tf_checkpoint_prefix"], ["", "", "def", "_restore", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "assert", "isinstance", "(", "checkpoint_dir", ",", "str", ")", ",", "checkpoint_dir", "\n", "\n", "checkpoint_dir", "=", "checkpoint_dir", ".", "rstrip", "(", "'/'", ")", "\n", "\n", "with", "self", ".", "_session", ".", "as_default", "(", ")", ":", "\n", "            ", "pickle_path", "=", "self", ".", "_pickle_path", "(", "checkpoint_dir", ")", "\n", "with", "open", "(", "pickle_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "picklable", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "", "training_environment", "=", "self", ".", "training_environment", "=", "picklable", "[", "\n", "'training_environment'", "]", "\n", "evaluation_environment", "=", "self", ".", "evaluation_environment", "=", "picklable", "[", "\n", "'evaluation_environment'", "]", "\n", "\n", "replay_pool", "=", "self", ".", "replay_pool", "=", "(", "\n", "get_replay_pool_from_variant", "(", "self", ".", "_variant", ",", "training_environment", ")", ")", "\n", "\n", "if", "self", ".", "_variant", "[", "'run_params'", "]", ".", "get", "(", "'checkpoint_replay_pool'", ",", "False", ")", ":", "\n", "            ", "self", ".", "_restore_replay_pool", "(", "checkpoint_dir", ")", "\n", "\n", "", "sampler", "=", "self", ".", "sampler", "=", "picklable", "[", "'sampler'", "]", "\n", "Qs", "=", "self", ".", "Qs", "=", "picklable", "[", "'Qs'", "]", "\n", "# policy = self.policy = picklable['policy']", "\n", "policy", "=", "self", ".", "policy", "=", "(", "\n", "get_policy_from_variant", "(", "self", ".", "_variant", ",", "training_environment", ",", "Qs", ")", ")", "\n", "self", ".", "policy", ".", "set_weights", "(", "picklable", "[", "'policy_weights'", "]", ")", "\n", "initial_exploration_policy", "=", "self", ".", "initial_exploration_policy", "=", "(", "\n", "get_policy", "(", "'UniformPolicy'", ",", "training_environment", ")", ")", "\n", "\n", "self", ".", "algorithm", "=", "get_algorithm_from_variant", "(", "\n", "variant", "=", "self", ".", "_variant", ",", "\n", "training_environment", "=", "training_environment", ",", "\n", "evaluation_environment", "=", "evaluation_environment", ",", "\n", "policy", "=", "policy", ",", "\n", "initial_exploration_policy", "=", "initial_exploration_policy", ",", "\n", "Qs", "=", "Qs", ",", "\n", "pool", "=", "replay_pool", ",", "\n", "sampler", "=", "sampler", ",", "\n", "session", "=", "self", ".", "_session", ")", "\n", "self", ".", "algorithm", ".", "__setstate__", "(", "picklable", "[", "'algorithm'", "]", ".", "__getstate__", "(", ")", ")", "\n", "\n", "tf_checkpoint", "=", "self", ".", "_get_tf_checkpoint", "(", ")", "\n", "status", "=", "tf_checkpoint", ".", "restore", "(", "tf", ".", "train", ".", "latest_checkpoint", "(", "\n", "os", ".", "path", ".", "split", "(", "self", ".", "_tf_checkpoint_prefix", "(", "checkpoint_dir", ")", ")", "[", "0", "]", ")", ")", "\n", "\n", "status", ".", "assert_consumed", "(", ")", ".", "run_restore_ops", "(", "self", ".", "_session", ")", "\n", "initialize_tf_variables", "(", "self", ".", "_session", ",", "only_uninitialized", "=", "True", ")", "\n", "\n", "# TODO(hartikainen): target Qs should either be checkpointed or pickled.", "\n", "for", "Q", ",", "Q_target", "in", "zip", "(", "self", ".", "algorithm", ".", "_Qs", ",", "self", ".", "algorithm", ".", "_Q_targets", ")", ":", "\n", "            ", "Q_target", ".", "set_weights", "(", "Q", ".", "get_weights", "(", ")", ")", "\n", "\n", "", "self", ".", "_built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.main": [[213, 223], ["examples.instrument.run_example_local"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.run_example_local"], ["", "", "def", "main", "(", "argv", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run ExperimentRunner locally on ray.\n\n    To run this example on cloud (e.g. gce/ec2), use the setup scripts:\n    'softlearning launch_example_{gce,ec2} examples.development <options>'.\n\n    Run 'softlearning launch_example_{gce,ec2} --help' for further\n    instructions.\n    \"\"\"", "\n", "run_example_local", "(", "'examples.development'", ",", "argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.variants.get_variant_spec_base": [[196, 269], ["rl_with_videos.misc.utils.deep_update", "rl_with_videos.misc.utils.deep_update", "ALGORITHM_PARAMS_PER_DOMAIN.get", "ALGORITHM_PARAMS_ADDITIONAL.get", "rl_with_videos.misc.utils.get_git_rev", "rl_with_videos.misc.utils.deep_update", "ray.tune.sample_from", "POLICY_PARAMS_FOR_DOMAIN[].get", "ray.tune.sample_from", "ENVIRONMENT_PARAMS.get().get", "ray.tune.sample_from", "MAX_PATH_LENGTH_PER_DOMAIN.get", "MAX_PATH_LENGTH_PER_DOMAIN.get", "NUM_EPOCHS_PER_DOMAIN.get", "numpy.random.randint", "ENVIRONMENT_PARAMS.get", "spec.get", "int", "int", "int", "spec.get"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.deep_update", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.deep_update", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.get_git_rev", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.deep_update"], ["def", "get_variant_spec_base", "(", "universe", ",", "domain", ",", "task", ",", "policy", ",", "algorithm", ")", ":", "\n", "    ", "algorithm_params", "=", "deep_update", "(", "\n", "ALGORITHM_PARAMS_BASE", ",", "\n", "ALGORITHM_PARAMS_PER_DOMAIN", ".", "get", "(", "domain", ",", "{", "}", ")", "\n", ")", "\n", "algorithm_params", "=", "deep_update", "(", "\n", "algorithm_params", ",", "\n", "ALGORITHM_PARAMS_ADDITIONAL", ".", "get", "(", "algorithm", ",", "{", "}", ")", "\n", ")", "\n", "variant_spec", "=", "{", "\n", "'git_sha'", ":", "get_git_rev", "(", "__file__", ")", ",", "\n", "\n", "'environment_params'", ":", "{", "\n", "'training'", ":", "{", "\n", "'domain'", ":", "domain", ",", "\n", "'task'", ":", "task", ",", "\n", "'universe'", ":", "universe", ",", "\n", "'kwargs'", ":", "(", "\n", "ENVIRONMENT_PARAMS", ".", "get", "(", "domain", ",", "{", "}", ")", ".", "get", "(", "task", ",", "{", "}", ")", ")", ",", "\n", "}", ",", "\n", "'evaluation'", ":", "tune", ".", "sample_from", "(", "lambda", "spec", ":", "(", "\n", "spec", ".", "get", "(", "'config'", ",", "spec", ")", "\n", "[", "'environment_params'", "]", "\n", "[", "'training'", "]", "\n", ")", ")", ",", "\n", "}", ",", "\n", "'policy_params'", ":", "deep_update", "(", "\n", "POLICY_PARAMS_BASE", "[", "policy", "]", ",", "\n", "POLICY_PARAMS_FOR_DOMAIN", "[", "policy", "]", ".", "get", "(", "domain", ",", "{", "}", ")", "\n", ")", ",", "\n", "'Q_params'", ":", "{", "\n", "'type'", ":", "'double_feedforward_Q_function'", ",", "\n", "'kwargs'", ":", "{", "\n", "'hidden_layer_sizes'", ":", "(", "M", ",", "M", ")", ",", "\n", "}", "\n", "}", ",", "\n", "'algorithm_params'", ":", "algorithm_params", ",", "\n", "'replay_pool_params'", ":", "{", "\n", "'type'", ":", "'SimpleReplayPool'", ",", "\n", "'kwargs'", ":", "{", "\n", "'max_size'", ":", "tune", ".", "sample_from", "(", "lambda", "spec", ":", "(", "\n", "{", "\n", "'SimpleReplayPool'", ":", "int", "(", "1e6", ")", ",", "\n", "'TrajectoryReplayPool'", ":", "int", "(", "1e4", ")", ",", "\n", "}", ".", "get", "(", "\n", "spec", ".", "get", "(", "'config'", ",", "spec", ")", "\n", "[", "'replay_pool_params'", "]", "\n", "[", "'type'", "]", ",", "\n", "int", "(", "1e6", ")", ")", "\n", ")", ")", ",", "\n", "}", "\n", "}", ",", "\n", "'sampler_params'", ":", "{", "\n", "'type'", ":", "'SimpleSampler'", ",", "\n", "'kwargs'", ":", "{", "\n", "'max_path_length'", ":", "MAX_PATH_LENGTH_PER_DOMAIN", ".", "get", "(", "\n", "domain", ",", "DEFAULT_MAX_PATH_LENGTH", ")", ",", "\n", "'min_pool_size'", ":", "MAX_PATH_LENGTH_PER_DOMAIN", ".", "get", "(", "\n", "domain", ",", "DEFAULT_MAX_PATH_LENGTH", ")", ",", "\n", "'batch_size'", ":", "256", ",", "\n", "}", "\n", "}", ",", "\n", "'run_params'", ":", "{", "\n", "'seed'", ":", "tune", ".", "sample_from", "(", "\n", "lambda", "spec", ":", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", ",", "\n", "'checkpoint_at_end'", ":", "True", ",", "\n", "'checkpoint_frequency'", ":", "NUM_EPOCHS_PER_DOMAIN", ".", "get", "(", "\n", "domain", ",", "DEFAULT_NUM_EPOCHS", ")", "//", "NUM_CHECKPOINTS", ",", "\n", "'checkpoint_replay_pool'", ":", "False", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "return", "variant_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.variants.get_variant_spec_image": [[271, 306], ["variants.get_variant_spec_base", "preprocessor_params.copy", "preprocessor_params.copy", "task.lower", "domain.lower"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.variants.get_variant_spec_base", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "get_variant_spec_image", "(", "universe", ",", "\n", "domain", ",", "\n", "task", ",", "\n", "policy", ",", "\n", "algorithm", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "variant_spec", "=", "get_variant_spec_base", "(", "\n", "universe", ",", "domain", ",", "task", ",", "policy", ",", "algorithm", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "'image'", "in", "task", ".", "lower", "(", ")", "or", "'image'", "in", "domain", ".", "lower", "(", ")", ":", "\n", "        ", "preprocessor_params", "=", "{", "\n", "'type'", ":", "'convnet_preprocessor'", ",", "\n", "'kwargs'", ":", "{", "\n", "'image_shape'", ":", "(", "\n", "variant_spec", "\n", "[", "'environment_params'", "]", "\n", "[", "'training'", "]", "\n", "[", "'kwargs'", "]", "\n", "[", "'image_shape'", "]", ")", ",", "\n", "'output_size'", ":", "M", ",", "\n", "'conv_filters'", ":", "(", "4", ",", "4", ")", ",", "\n", "'conv_kernel_sizes'", ":", "(", "(", "3", ",", "3", ")", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "'pool_type'", ":", "'MaxPool2D'", ",", "\n", "'pool_sizes'", ":", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", ",", "\n", "'pool_strides'", ":", "(", "2", ",", "2", ")", ",", "\n", "'dense_hidden_layer_sizes'", ":", "(", ")", ",", "\n", "}", ",", "\n", "}", "\n", "variant_spec", "[", "'policy_params'", "]", "[", "'kwargs'", "]", "[", "'preprocessor_params'", "]", "=", "(", "\n", "preprocessor_params", ".", "copy", "(", ")", ")", "\n", "variant_spec", "[", "'Q_params'", "]", "[", "'kwargs'", "]", "[", "'preprocessor_params'", "]", "=", "(", "\n", "preprocessor_params", ".", "copy", "(", ")", ")", "\n", "\n", "", "return", "variant_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.variants.get_variant_spec": [[308, 325], ["variants.get_variant_spec_image", "variants.get_variant_spec_base", "task.lower", "task.lower", "domain.lower"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.variants.get_variant_spec_image", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.variants.get_variant_spec_base"], ["", "def", "get_variant_spec", "(", "args", ")", ":", "\n", "    ", "universe", ",", "domain", ",", "task", "=", "args", ".", "universe", ",", "args", ".", "domain", ",", "args", ".", "task", "\n", "\n", "if", "(", "'image'", "in", "task", ".", "lower", "(", ")", "\n", "or", "'blind'", "in", "task", ".", "lower", "(", ")", "\n", "or", "'image'", "in", "domain", ".", "lower", "(", ")", ")", ":", "\n", "        ", "variant_spec", "=", "get_variant_spec_image", "(", "\n", "universe", ",", "domain", ",", "task", ",", "args", ".", "policy", ",", "args", ".", "algorithm", ")", "\n", "", "else", ":", "\n", "        ", "variant_spec", "=", "get_variant_spec_base", "(", "\n", "universe", ",", "domain", ",", "task", ",", "args", ".", "policy", ",", "args", ".", "algorithm", ")", "\n", "\n", "", "if", "args", ".", "checkpoint_replay_pool", "is", "not", "None", ":", "\n", "        ", "variant_spec", "[", "'run_params'", "]", "[", "'checkpoint_replay_pool'", "]", "=", "(", "\n", "args", ".", "checkpoint_replay_pool", ")", "\n", "\n", "", "return", "variant_spec", "\n", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.simulate_policy.parse_args": [[14, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "bool", "distutils.util.strtobool"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.archive_gs.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint_path'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Path to the checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-path-length'", ",", "'-l'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--num-rollouts'", ",", "'-n'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--render-mode'", ",", "'-r'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'human'", ",", "\n", "choices", "=", "(", "'human'", ",", "'rgb_array'", ",", "None", ")", ",", "\n", "help", "=", "\"Mode to render the rollouts in.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--deterministic'", ",", "'-d'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "nargs", "=", "'?'", ",", "\n", "const", "=", "True", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"Evaluate policy deterministically.\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.simulate_policy.simulate_policy": [[38, 74], ["tensorflow.keras.backend.get_session", "args.checkpoint_path.rstrip", "os.path.dirname", "os.path.join", "rl_with_videos.environments.utils.get_environment_from_params", "rl_with_videos.policies.utils.get_policy_from_variant", "rl_with_videos.policies.utils.get_policy_from_variant.set_weights", "open", "json.load", "tf.keras.backend.get_session.as_default", "os.path.join", "rl_with_videos.policies.utils.get_policy_from_variant.set_deterministic", "rl_with_videos.samplers.rollouts", "pdb.set_trace", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.environments.utils.get_environment_from_params", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.utils.get_policy_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.set_weights", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.BasePolicy.set_deterministic", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.utils.rollouts"], ["", "def", "simulate_policy", "(", "args", ")", ":", "\n", "    ", "session", "=", "tf", ".", "keras", ".", "backend", ".", "get_session", "(", ")", "\n", "checkpoint_path", "=", "args", ".", "checkpoint_path", ".", "rstrip", "(", "'/'", ")", "\n", "experiment_path", "=", "os", ".", "path", ".", "dirname", "(", "checkpoint_path", ")", "\n", "\n", "variant_path", "=", "os", ".", "path", ".", "join", "(", "experiment_path", ",", "'params.json'", ")", "\n", "with", "open", "(", "variant_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "variant", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "session", ".", "as_default", "(", ")", ":", "\n", "        ", "pickle_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "'checkpoint.pkl'", ")", "\n", "with", "open", "(", "pickle_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "picklable", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "", "environment_params", "=", "(", "\n", "variant", "[", "'environment_params'", "]", "[", "'evaluation'", "]", "\n", "if", "'evaluation'", "in", "variant", "[", "'environment_params'", "]", "\n", "else", "variant", "[", "'environment_params'", "]", "[", "'training'", "]", ")", "\n", "evaluation_environment", "=", "get_environment_from_params", "(", "environment_params", ")", "\n", "\n", "policy", "=", "(", "\n", "get_policy_from_variant", "(", "variant", ",", "evaluation_environment", ",", "Qs", "=", "[", "None", "]", ")", ")", "\n", "policy", ".", "set_weights", "(", "picklable", "[", "'policy_weights'", "]", ")", "\n", "\n", "with", "policy", ".", "set_deterministic", "(", "args", ".", "deterministic", ")", ":", "\n", "        ", "paths", "=", "rollouts", "(", "args", ".", "num_rollouts", ",", "\n", "evaluation_environment", ",", "\n", "policy", ",", "\n", "path_length", "=", "args", ".", "max_path_length", ",", "\n", "render_mode", "=", "args", ".", "render_mode", ")", "\n", "\n", "", "if", "args", ".", "render_mode", "!=", "'human'", ":", "\n", "        ", "from", "pprint", "import", "pprint", ";", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "pass", "\n", "\n", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.__init__.get_trainable_class": [[9, 12], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.__init__.get_variant_spec": [[14, 18], ["__init__.get_variant_spec"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.__init__.get_variant_spec"], []], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.__init__.get_parser": [[20, 24], ["__init__.get_parser"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.install_mujoco.get_parser"], []], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.main.ExperimentRunnerRL._build": [[28, 87], ["copy.deepcopy", "rl_with_videos.environments.utils.get_goal_example_environment_from_variant", "rl_with_videos.environments.utils.get_goal_example_environment_from_variant", "print", "rl_with_videos.replay_pools.utils.get_replay_pool_from_variant", "rl_with_videos.samplers.utils.get_sampler_from_variant", "rl_with_videos.value_functions.utils.get_Q_function_from_variant", "rl_with_videos.policies.utils.get_policy_from_variant", "rl_with_videos.policies.utils.get_policy", "print", "rl_with_videos.algorithms.utils.get_algorithm_from_variant", "rl_with_videos.misc.utils.initialize_tf_variables", "print", "print", "rl_with_videos.preprocessors.utils.get_preprocessor_from_params", "print", "print", "rl_with_videos.replay_pools.utils.get_replay_pool_from_variant", "rl_with_videos.replay_pools.utils.get_replay_pool_from_variant", "rl_with_videos.models.utils.get_inverse_model_from_variant", "print"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.environments.utils.get_goal_example_environment_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.environments.utils.get_goal_example_environment_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.utils.get_replay_pool_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.utils.get_sampler_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.value_functions.utils.get_Q_function_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.utils.get_policy_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.utils.get_policy", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.utils.get_algorithm_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.initialize_tf_variables", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.preprocessors.utils.get_preprocessor_from_params", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.utils.get_replay_pool_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.utils.get_replay_pool_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.utils.get_inverse_model_from_variant"], ["session", "=", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", "gpu_options", "=", "gpu_options", ")", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "set_session", "(", "session", ")", "\n", "self", ".", "_session", "=", "tf", ".", "keras", ".", "backend", ".", "get_session", "(", ")", "\n", "\n", "self", ".", "train_generator", "=", "None", "\n", "self", ".", "_built", "=", "False", "\n", "\n", "", "def", "_stop", "(", "self", ")", ":", "\n", "        ", "tf", ".", "reset_default_graph", "(", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "\n", "", "def", "_build", "(", "self", ")", ":", "\n", "        ", "variant", "=", "copy", ".", "deepcopy", "(", "self", ".", "_variant", ")", "\n", "\n", "environment_params", "=", "variant", "[", "'environment_params'", "]", "\n", "training_environment", "=", "self", ".", "training_environment", "=", "(", "\n", "get_environment_from_params", "(", "environment_params", "[", "'training'", "]", ")", ")", "\n", "evaluation_environment", "=", "self", ".", "evaluation_environment", "=", "(", "\n", "get_environment_from_params", "(", "environment_params", "[", "'evaluation'", "]", ")", "\n", "if", "'evaluation'", "in", "environment_params", "\n", "else", "training_environment", ")", "\n", "\n", "replay_pool", "=", "self", ".", "replay_pool", "=", "(", "\n", "get_replay_pool_from_variant", "(", "variant", ",", "training_environment", ")", ")", "\n", "sampler", "=", "self", ".", "sampler", "=", "get_sampler_from_variant", "(", "variant", ")", "\n", "Qs", "=", "self", ".", "Qs", "=", "get_Q_function_from_variant", "(", "\n", "variant", ",", "training_environment", ")", "\n", "policy", "=", "self", ".", "policy", "=", "get_policy_from_variant", "(", "\n", "variant", ",", "training_environment", ",", "Qs", ")", "\n", "initial_exploration_policy", "=", "self", ".", "initial_exploration_policy", "=", "(", "\n", "get_policy", "(", "'UniformPolicy'", ",", "training_environment", ")", ")", "\n", "\n", "self", ".", "algorithm", "=", "get_algorithm_from_variant", "(", "\n", "variant", "=", "self", ".", "_variant", ",", "\n", "training_environment", "=", "training_environment", ",", "\n", "evaluation_environment", "=", "evaluation_environment", ",", "\n", "policy", "=", "policy", ",", "\n", "initial_exploration_policy", "=", "initial_exploration_policy", ",", "\n", "Qs", "=", "Qs", ",", "\n", "pool", "=", "replay_pool", ",", "\n", "sampler", "=", "sampler", ",", "\n", "session", "=", "self", ".", "_session", ")", "\n", "\n", "initialize_tf_variables", "(", "self", ".", "_session", ",", "only_uninitialized", "=", "True", ")", "\n", "\n", "self", ".", "_built", "=", "True", "\n", "\n", "", "def", "_train", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_built", ":", "\n", "            ", "self", ".", "_build", "(", ")", "\n", "\n", "", "if", "self", ".", "train_generator", "is", "None", ":", "\n", "            ", "self", ".", "train_generator", "=", "self", ".", "algorithm", ".", "train", "(", ")", "\n", "\n", "", "diagnostics", "=", "next", "(", "self", ".", "train_generator", ")", "\n", "\n", "return", "diagnostics", "\n", "\n", "", "def", "_pickle_path", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'checkpoint.pkl'", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.main.ExperimentRunnerRL._restore": [[88, 151], ["isinstance", "checkpoint_dir.rstrip.rstrip.rstrip", "rl_with_videos.replay_pools.utils.get_replay_pool_from_variant", "main.ExperimentRunnerRL._variant[].get", "rl_with_videos.policies.utils.get_policy_from_variant", "main.ExperimentRunnerRL.policy.set_weights", "rl_with_videos.policies.utils.get_policy", "print", "rl_with_videos.algorithms.utils.get_algorithm_from_variant", "main.ExperimentRunnerRL.algorithm.__setstate__", "main.ExperimentRunnerRL._get_tf_checkpoint", "main.ExperimentRunnerRL.restore", "main.ExperimentRunnerRL.restore.assert_consumed().run_restore_ops", "rl_with_videos.misc.utils.initialize_tf_variables", "zip", "main.ExperimentRunnerRL._session.as_default", "main.ExperimentRunnerRL._pickle_path", "main.ExperimentRunnerRL._restore_replay_pool", "print", "picklable[].__getstate__", "tensorflow.train.latest_checkpoint", "Q_target.set_weights", "open", "pickle.load", "main.ExperimentRunnerRL.restore.assert_consumed", "Q.get_weights", "os.path.split", "main.ExperimentRunnerRL._tf_checkpoint_prefix"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.utils.get_replay_pool_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.utils.get_policy_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.set_weights", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.utils.get_policy", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.utils.get_algorithm_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.__setstate__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._get_tf_checkpoint", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.initialize_tf_variables", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._pickle_path", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._restore_replay_pool", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.__getstate__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.set_weights", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.get_weights", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.development.main.ExperimentRunner._tf_checkpoint_prefix"], ["\n", "", "def", "_replay_pool_pickle_path", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'replay_pool.pkl'", ")", "\n", "\n", "", "def", "_tf_checkpoint_prefix", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'checkpoint'", ")", "\n", "\n", "", "def", "_get_tf_checkpoint", "(", "self", ")", ":", "\n", "        ", "tf_checkpoint", "=", "tf", ".", "train", ".", "Checkpoint", "(", "**", "self", ".", "algorithm", ".", "tf_saveables", ")", "\n", "\n", "return", "tf_checkpoint", "\n", "\n", "", "@", "property", "\n", "def", "picklables", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'variant'", ":", "self", ".", "_variant", ",", "\n", "'training_environment'", ":", "self", ".", "training_environment", ",", "\n", "'evaluation_environment'", ":", "self", ".", "evaluation_environment", ",", "\n", "'sampler'", ":", "self", ".", "sampler", ",", "\n", "'algorithm'", ":", "self", ".", "algorithm", ",", "\n", "'Qs'", ":", "self", ".", "Qs", ",", "\n", "'policy_weights'", ":", "self", ".", "policy", ".", "get_weights", "(", ")", ",", "\n", "}", "\n", "\n", "", "def", "_save", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "\"\"\"Implements the checkpoint logic.\n\n        TODO(hartikainen): This implementation is currently very hacky. Things\n        that need to be fixed:\n          - Figure out how serialize/save tf.keras.Model subclassing. The\n            current implementation just dumps the weights in a pickle, which\n            is not optimal.\n          - Try to unify all the saving and loading into easily\n            extendable/maintainable interfaces. Currently we use\n            `tf.train.Checkpoint` and `pickle.dump` in very unorganized way\n            which makes things not so usable.\n        \"\"\"", "\n", "pickle_path", "=", "self", ".", "_pickle_path", "(", "checkpoint_dir", ")", "\n", "with", "open", "(", "pickle_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "picklables", ",", "f", ")", "\n", "\n", "", "if", "self", ".", "_variant", "[", "'run_params'", "]", ".", "get", "(", "'checkpoint_replay_pool'", ",", "False", ")", ":", "\n", "            ", "self", ".", "_save_replay_pool", "(", "checkpoint_dir", ")", "\n", "\n", "", "tf_checkpoint", "=", "self", ".", "_get_tf_checkpoint", "(", ")", "\n", "\n", "tf_checkpoint", ".", "save", "(", "\n", "file_prefix", "=", "self", ".", "_tf_checkpoint_prefix", "(", "checkpoint_dir", ")", ",", "\n", "session", "=", "self", ".", "_session", ")", "\n", "\n", "return", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "''", ")", "\n", "\n", "", "def", "_save_replay_pool", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "replay_pool_pickle_path", "=", "self", ".", "_replay_pool_pickle_path", "(", "\n", "checkpoint_dir", ")", "\n", "self", ".", "replay_pool", ".", "save_latest_experience", "(", "replay_pool_pickle_path", ")", "\n", "\n", "", "def", "_restore_replay_pool", "(", "self", ",", "current_checkpoint_dir", ")", ":", "\n", "        ", "experiment_root", "=", "os", ".", "path", ".", "dirname", "(", "current_checkpoint_dir", ")", "\n", "\n", "experience_paths", "=", "[", "\n", "self", ".", "_replay_pool_pickle_path", "(", "checkpoint_dir", ")", "\n", "for", "checkpoint_dir", "in", "sorted", "(", "glob", ".", "iglob", "(", "\n", "os", ".", "path", ".", "join", "(", "experiment_root", ",", "'checkpoint_*'", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.main.ExperimentRunnerRL.picklables": [[152, 165], ["main.ExperimentRunnerRL.policy.get_weights"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.get_weights"], ["]", "\n", "\n", "for", "experience_path", "in", "experience_paths", ":", "\n", "            ", "self", ".", "replay_pool", ".", "load_experience", "(", "experience_path", ")", "\n", "\n", "", "", "def", "_restore", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "assert", "isinstance", "(", "checkpoint_dir", ",", "str", ")", ",", "checkpoint_dir", "\n", "\n", "checkpoint_dir", "=", "checkpoint_dir", ".", "rstrip", "(", "'/'", ")", "\n", "\n", "with", "self", ".", "_session", ".", "as_default", "(", ")", ":", "\n", "            ", "pickle_path", "=", "self", ".", "_pickle_path", "(", "checkpoint_dir", ")", "\n", "with", "open", "(", "pickle_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "picklable", "=", "pickle", ".", "load", "(", "f", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.main.main": [[166, 171], ["examples.instrument.run_example_local"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.run_example_local"], ["\n", "", "", "training_environment", "=", "self", ".", "training_environment", "=", "picklable", "[", "\n", "'training_environment'", "]", "\n", "evaluation_environment", "=", "self", ".", "evaluation_environment", "=", "picklable", "[", "\n", "'evaluation_environment'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.variants.get_variant_spec_base": [[100, 159], ["rl_with_videos.misc.utils.deep_update", "ALGORITHM_PARAMS_ADDITIONAL.get", "rl_with_videos.misc.utils.get_git_rev", "rl_with_videos.misc.utils.deep_update", "POLICY_PARAMS_FOR_DOMAIN[].get", "ray.tune.sample_from", "MAX_PATH_LENGTH_PER_DOMAIN.get", "MAX_PATH_LENGTH_PER_DOMAIN.get", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.deep_update", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.get_git_rev", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.deep_update"], ["'kwargs'", ":", "{", "\n", "'n_epochs'", ":", "NUM_EPOCHS_PER_DOMAIN", ".", "get", "(", "\n", "domain", ",", "DEFAULT_NUM_EPOCHS", ")", ",", "\n", "'n_initial_exploration_steps'", ":", "(", "\n", "MAX_PATH_LENGTH_PER_DOMAIN", ".", "get", "(", "\n", "domain", ",", "DEFAULT_MAX_PATH_LENGTH", "\n", ")", "*", "10", ")", ",", "\n", "}", "\n", "}", "for", "domain", "in", "NUM_EPOCHS_PER_DOMAIN", "\n", "}", "\n", "}", "\n", "\n", "ENVIRONMENT_PARAMS", "=", "{", "\n", "'Swimmer'", ":", "{", "# 2 DoF", "\n", "}", ",", "\n", "'Hopper'", ":", "{", "# 3 DoF", "\n", "}", ",", "\n", "'HalfCheetah'", ":", "{", "# 6 DoF", "\n", "}", ",", "\n", "'Walker2d'", ":", "{", "# 6 DoF", "\n", "}", ",", "\n", "'Ant'", ":", "{", "# 8 DoF", "\n", "'Parameterizable-v3'", ":", "{", "\n", "'healthy_reward'", ":", "0.0", ",", "\n", "'healthy_z_range'", ":", "(", "-", "np", ".", "inf", ",", "np", ".", "inf", ")", ",", "\n", "'exclude_current_positions_from_observation'", ":", "False", ",", "\n", "}", "\n", "}", ",", "\n", "'Humanoid'", ":", "{", "# 17 DoF", "\n", "'Parameterizable-v3'", ":", "{", "\n", "'healthy_reward'", ":", "0.0", ",", "\n", "'healthy_z_range'", ":", "(", "-", "np", ".", "inf", ",", "np", ".", "inf", ")", ",", "\n", "'exclude_current_positions_from_observation'", ":", "False", ",", "\n", "}", "\n", "}", ",", "\n", "'Pusher2d'", ":", "{", "# 3 DoF", "\n", "'Default-v3'", ":", "{", "\n", "'arm_object_distance_cost_coeff'", ":", "0.0", ",", "\n", "'goal_object_distance_cost_coeff'", ":", "1.0", ",", "\n", "'goal'", ":", "(", "0", ",", "-", "1", ")", ",", "\n", "}", ",", "\n", "'DefaultReach-v0'", ":", "{", "\n", "'arm_goal_distance_cost_coeff'", ":", "1.0", ",", "\n", "'arm_object_distance_cost_coeff'", ":", "0.0", ",", "\n", "}", ",", "\n", "'ImageDefault-v0'", ":", "{", "\n", "'image_shape'", ":", "(", "32", ",", "32", ",", "3", ")", ",", "\n", "'arm_object_distance_cost_coeff'", ":", "0.0", ",", "\n", "'goal_object_distance_cost_coeff'", ":", "3.0", ",", "\n", "}", ",", "\n", "'ImageReach-v0'", ":", "{", "\n", "'image_shape'", ":", "(", "32", ",", "32", ",", "3", ")", ",", "\n", "'arm_goal_distance_cost_coeff'", ":", "1.0", ",", "\n", "'arm_object_distance_cost_coeff'", ":", "0.0", ",", "\n", "}", ",", "\n", "'BlindReach-v0'", ":", "{", "\n", "'image_shape'", ":", "(", "32", ",", "32", ",", "3", ")", ",", "\n", "'arm_goal_distance_cost_coeff'", ":", "1.0", ",", "\n", "'arm_object_distance_cost_coeff'", ":", "0.0", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.variants.get_variant_spec": [[162, 276], ["variants.get_variant_spec_base", "preprocessor_params.copy", "preprocessor_params.copy", "min", "int", "preprocessor_params.copy", "NotImplementedError", "preprocessor_params.copy"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.variants.get_variant_spec_base", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy"], ["'Default-v0'", ":", "{", "\n", "'observation_keys'", ":", "(", "'observation'", ",", "'desired_goal'", ")", ",", "\n", "}", ",", "\n", "'Wall-v0'", ":", "{", "\n", "'observation_keys'", ":", "(", "'observation'", ",", "'desired_goal'", ")", ",", "\n", "}", ",", "\n", "}", ",", "\n", "'Sawyer'", ":", "{", "\n", "task_name", ":", "{", "\n", "'has_renderer'", ":", "False", ",", "\n", "'has_offscreen_renderer'", ":", "False", ",", "\n", "'use_camera_obs'", ":", "False", ",", "\n", "'reward_shaping'", ":", "tune", ".", "grid_search", "(", "[", "True", ",", "False", "]", ")", ",", "\n", "}", "\n", "for", "task_name", "in", "(", "\n", "'Lift'", ",", "\n", "'NutAssembly'", ",", "\n", "'NutAssemblyRound'", ",", "\n", "'NutAssemblySingle'", ",", "\n", "'NutAssemblySquare'", ",", "\n", "'PickPlace'", ",", "\n", "'PickPlaceBread'", ",", "\n", "'PickPlaceCan'", ",", "\n", "'PickPlaceCereal'", ",", "\n", "'PickPlaceMilk'", ",", "\n", "'PickPlaceSingle'", ",", "\n", "'Stack'", ",", "\n", ")", "\n", "}", "\n", "}", "\n", "\n", "NUM_CHECKPOINTS", "=", "10", "\n", "\n", "\n", "def", "get_variant_spec_base", "(", "universe", ",", "domain", ",", "task", ",", "policy", ",", "algorithm", ")", ":", "\n", "    ", "algorithm_params", "=", "deep_update", "(", "\n", "ALGORITHM_PARAMS_BASE", ",", "\n", "ALGORITHM_PARAMS_PER_DOMAIN", ".", "get", "(", "domain", ",", "{", "}", ")", "\n", ")", "\n", "algorithm_params", "=", "deep_update", "(", "\n", "algorithm_params", ",", "\n", "ALGORITHM_PARAMS_ADDITIONAL", ".", "get", "(", "algorithm", ",", "{", "}", ")", "\n", ")", "\n", "variant_spec", "=", "{", "\n", "'git_sha'", ":", "get_git_rev", "(", "__file__", ")", ",", "\n", "\n", "'environment_params'", ":", "{", "\n", "'training'", ":", "{", "\n", "'domain'", ":", "domain", ",", "\n", "'task'", ":", "task", ",", "\n", "'universe'", ":", "universe", ",", "\n", "'kwargs'", ":", "(", "\n", "ENVIRONMENT_PARAMS", ".", "get", "(", "domain", ",", "{", "}", ")", ".", "get", "(", "task", ",", "{", "}", ")", ")", ",", "\n", "}", ",", "\n", "'evaluation'", ":", "tune", ".", "sample_from", "(", "lambda", "spec", ":", "(", "\n", "spec", ".", "get", "(", "'config'", ",", "spec", ")", "\n", "[", "'environment_params'", "]", "\n", "[", "'training'", "]", "\n", ")", ")", ",", "\n", "}", ",", "\n", "'policy_params'", ":", "deep_update", "(", "\n", "POLICY_PARAMS_BASE", "[", "policy", "]", ",", "\n", "POLICY_PARAMS_FOR_DOMAIN", "[", "policy", "]", ".", "get", "(", "domain", ",", "{", "}", ")", "\n", ")", ",", "\n", "'Q_params'", ":", "{", "\n", "'type'", ":", "'double_feedforward_Q_function'", ",", "\n", "'kwargs'", ":", "{", "\n", "'hidden_layer_sizes'", ":", "(", "M", ",", "M", ")", ",", "\n", "}", "\n", "}", ",", "\n", "'algorithm_params'", ":", "algorithm_params", ",", "\n", "'replay_pool_params'", ":", "{", "\n", "'type'", ":", "'SimpleReplayPool'", ",", "\n", "'kwargs'", ":", "{", "\n", "'max_size'", ":", "tune", ".", "sample_from", "(", "lambda", "spec", ":", "(", "\n", "{", "\n", "'SimpleReplayPool'", ":", "int", "(", "1e6", ")", ",", "\n", "'TrajectoryReplayPool'", ":", "int", "(", "1e4", ")", ",", "\n", "}", ".", "get", "(", "\n", "spec", ".", "get", "(", "'config'", ",", "spec", ")", "\n", "[", "'replay_pool_params'", "]", "\n", "[", "'type'", "]", ",", "\n", "int", "(", "1e6", ")", ")", "\n", ")", ")", ",", "\n", "}", "\n", "}", ",", "\n", "'sampler_params'", ":", "{", "\n", "'type'", ":", "'SimpleSampler'", ",", "\n", "'kwargs'", ":", "{", "\n", "'max_path_length'", ":", "MAX_PATH_LENGTH_PER_DOMAIN", ".", "get", "(", "\n", "domain", ",", "DEFAULT_MAX_PATH_LENGTH", ")", ",", "\n", "'min_pool_size'", ":", "MAX_PATH_LENGTH_PER_DOMAIN", ".", "get", "(", "\n", "domain", ",", "DEFAULT_MAX_PATH_LENGTH", ")", ",", "\n", "'batch_size'", ":", "256", ",", "\n", "}", "\n", "}", ",", "\n", "'run_params'", ":", "{", "\n", "'seed'", ":", "tune", ".", "sample_from", "(", "\n", "lambda", "spec", ":", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", ",", "\n", "'checkpoint_at_end'", ":", "True", ",", "\n", "'checkpoint_frequency'", ":", "NUM_EPOCHS_PER_DOMAIN", ".", "get", "(", "\n", "domain", ",", "DEFAULT_NUM_EPOCHS", ")", "//", "NUM_CHECKPOINTS", ",", "\n", "'checkpoint_replay_pool'", ":", "False", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "return", "variant_spec", "\n", "\n", "\n", "", "def", "get_variant_spec_image", "(", "universe", ",", "\n", "domain", ",", "\n", "task", ",", "\n", "policy", ",", "\n", "algorithm", ",", "\n", "*", "args", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.__init__.get_trainable_class": [[9, 12], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.__init__.get_variant_spec": [[14, 18], ["__init__.get_variant_spec"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.__init__.get_variant_spec"], []], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.__init__.get_parser": [[25, 29], ["__init__.get_parser"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.install_mujoco.get_parser"], []], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.utils.add_ray_init_args": [[31, 65], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "utils.add_ray_init_args.init_help_string"], "function", ["None"], ["help", "=", "init_help_string", "(", "\"Cpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Gpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resources'", ",", "\n", "type", "=", "json", ".", "loads", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Resources to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--include-webui'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "init_help_string", "(", "\"Boolean flag indicating whether to start the\"", "\n", "\"web UI, which is a Jupyter notebook.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--temp-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"If provided, it will specify the root temporary\"", "\n", "\" directory for the Ray process.\"", ")", ")", "\n", "\n", "return", "parser", "\n", "\n", "\n", "", "def", "add_ray_tune_args", "(", "parser", ")", ":", "\n", "\n", "    ", "def", "tune_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `tune.run`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--resources-per-trial'", ",", "\n", "type", "=", "json", ".", "loads", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.utils.add_ray_tune_args": [[67, 169], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "utils.add_ray_tune_args.tune_help_string"], "function", ["None"], ["help", "=", "tune_help_string", "(", "\"Resources to allocate for each trial.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"CPUs to allocate for each trial. Note: this is only used for\"", "\n", "\" Ray's internal scheduling bookkeeping, and is not an actual hard\"", "\n", "\" limit for CPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-gpus'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"GPUs to allocate for each trial. Note: this is only used for\"", "\n", "\" Ray's internal scheduling bookkeeping, and is not an actual hard\"", "\n", "\" limit for GPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-extra-cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Extra CPUs to reserve in case the trials need to\"", "\n", "\" launch additional Ray actors that use CPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-extra-gpus'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Extra GPUs to reserve in case the trials need to\"", "\n", "\" launch additional Ray actors that use GPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-samples'", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "tune_help_string", "(", "\"Number of times to repeat each trial.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--upload-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "''", ",", "\n", "help", "=", "tune_help_string", "(", "\"Optional URI to sync training results to (e.g.\"", "\n", "\" s3://<bucket> or gs://<bucket>).\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-name-template'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'id={trial.trial_id}-seed={trial.config[run_params][seed]}'", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Optional string template for trial name. For example:\"", "\n", "\" '{trial.trial_id}-seed={trial.config[run_params][seed]}'\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint-frequency'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"How many training iterations between checkpoints.\"", "\n", "\" A value of 0 (default) disables checkpointing. If set,\"", "\n", "\" takes precedence over variant['run_params']\"", "\n", "\"['checkpoint_frequency'].\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint-at-end'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Whether to checkpoint at the end of the experiment. If set,\"", "\n", "\" takes precedence over variant['run_params']\"", "\n", "\"['checkpoint_at_end'].\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--max-failures'", ",", "\n", "default", "=", "3", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Try to recover a trial from its last checkpoint at least this \"", "\n", "\"many times. Only applies if checkpointing is enabled.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--restore'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Path to checkpoint. Only makes sense to set if running 1 trial.\"", "\n", "\" Defaults to None.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--with-server'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "tune_help_string", "(", "\"Starts a background Tune server. Needed for\"", "\n", "\" using the Client API.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--server-port'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4321", ",", "\n", "help", "=", "tune_help_string", "(", "\"Port number for launching TuneServer.\"", ")", ")", "\n", "\n", "return", "parser", "\n", "\n", "\n", "", "def", "get_parser", "(", "allow_policy_list", "=", "False", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--universe'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "AVAILABLE_UNIVERSES", ",", "\n", "default", "=", "DEFAULT_UNIVERSE", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--domain'", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.utils.get_parser": [[171, 332], ["argparse.ArgumentParser", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "utils.add_ray_init_args", "utils.add_ray_tune_args", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "rl_with_videos.misc.utils.datetimestamp", "bool", "bool", "distutils.util.strtobool", "distutils.util.strtobool"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.utils.add_ray_init_args", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.utils.add_ray_tune_args", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.datetimestamp"], ["default", "=", "DEFAULT_DOMAIN", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--task'", ",", "type", "=", "str", ",", "default", "=", "DEFAULT_TASK", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint-replay-pool'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Whether a checkpoint should also saved the replay\"", "\n", "\" pool. If set, takes precedence over\"", "\n", "\" variant['run_params']['checkpoint_replay_pool'].\"", "\n", "\" Note that the replay pool is saved (and \"", "\n", "\" constructed) piece by piece so that each\"", "\n", "\" experience is saved only once.\"", ")", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--algorithm'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "AVAILABLE_ALGORITHMS", ",", "\n", "default", "=", "DEFAULT_ALGORITHM", ")", "\n", "if", "allow_policy_list", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "'--policy'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "(", "'gaussian'", ",", ")", ",", "\n", "default", "=", "'gaussian'", ")", "\n", "", "else", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "'--policy'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "(", "'gaussian'", ",", ")", ",", "\n", "default", "=", "'gaussian'", ")", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--exp-name'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "datetimestamp", "(", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'local'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--confirm-remote'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "nargs", "=", "'?'", ",", "\n", "const", "=", "True", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"Whether or not to query yes/no on remote run.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--video-save-frequency'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Save frequency for videos.\"", ")", "\n", "\n", "parser", "=", "add_ray_init_args", "(", "parser", ")", "\n", "parser", "=", "add_ray_tune_args", "(", "parser", ")", "\n", "\n", "return", "parser", "\n", "\n", "\n", "", "def", "variant_equals", "(", "*", "keys", ")", ":", "\n", "    ", "def", "get_from_spec", "(", "spec", ")", ":", "\n", "# TODO(hartikainen): This may break in some cases. ray.tune seems to", "\n", "# add a 'config' key at the top of the spec, whereas `generate_variants`", "\n", "# does not.", "\n", "        ", "node", "=", "spec", ".", "get", "(", "'config'", ",", "spec", ")", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "node", "=", "node", "[", "key", "]", "\n", "\n", "", "return", "node", "\n", "\n", "", "return", "sample_from", "(", "get_from_spec", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.run_rl.utils.variant_equals": [[334, 346], ["spec.get"], "function", ["None"], []], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.calc_replay_pool_reward.get_reward_stats": [[13, 51], ["range", "numpy.array", "print", "print", "print", "print", "print", "print", "print", "print", "numpy.mean", "gzip.open", "pickle.load", "matplotlib.hist", "matplotlib.savefig", "matplotlib.clf", "numpy.max", "numpy.min", "numpy.mean", "numpy.std", "np.array.append", "steps.append", "numpy.std", "numpy.sqrt"], "function", ["None"], ["def", "get_reward_stats", "(", "path", ",", "out_path", ",", "name", ")", ":", "\n", "    ", "with", "gzip", ".", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "rewards", "=", "[", "0.0", "]", "\n", "steps", "=", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "data", "[", "'rewards'", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rewards", "[", "-", "1", "]", "+=", "data", "[", "'rewards'", "]", "[", "i", "]", "\n", "steps", "[", "-", "1", "]", "+=", "1", "\n", "if", "data", "[", "'terminals'", "]", "[", "i", "]", ":", "\n", "            ", "rewards", ".", "append", "(", "0.0", ")", "\n", "steps", ".", "append", "(", "0", ")", "\n", "\n", "\n", "", "", "if", "steps", "[", "-", "1", "]", "==", "0", ":", "\n", "        ", "steps", "=", "steps", "[", ":", "-", "1", "]", "\n", "rewards", "=", "rewards", "[", ":", "-", "1", "]", "\n", "", "rewards", "=", "np", ".", "array", "(", "rewards", ")", "\n", "\n", "if", "out_path", "is", "not", "None", ":", "\n", "        ", "plt", ".", "hist", "(", "rewards", ")", "\n", "plt", ".", "savefig", "(", "out_path", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "#print(\"rewards:\", rewards)", "\n", "#print(\"num steps:\", steps)", "\n", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "print", "(", "name", ")", "\n", "print", "(", "\"num trajectories:\"", ",", "rewards", ".", "shape", "[", "0", "]", ")", "\n", "print", "(", "\"max reward:\"", ",", "np", ".", "max", "(", "rewards", ")", ")", "\n", "print", "(", "\"min reward:\"", ",", "np", ".", "min", "(", "rewards", ")", ")", "\n", "\n", "print", "(", "\"Average reward\"", ",", "np", ".", "mean", "(", "rewards", ")", ")", "\n", "print", "(", "\"std dev:\"", ",", "np", ".", "std", "(", "rewards", ")", ")", "\n", "print", "(", "\"std error\"", ",", "np", ".", "std", "(", "rewards", ")", "/", "np", ".", "sqrt", "(", "rewards", ".", "shape", "[", "0", "]", ")", ")", "\n", "return", "np", ".", "mean", "(", "rewards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.calc_replay_pool_reward.get_all_reward_stats": [[52, 67], ["sorted", "matplotlib.plot", "matplotlib.savefig", "matplotlib.clf", "rewards.append", "num_steps.append", "list", "os.listdir", "calc_replay_pool_reward.get_reward_stats", "int", "zip", "os.path.isdir", "os.path.join", "os.path.join", "d.split", "sorted", "zip"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.calc_replay_pool_reward.get_reward_stats"], ["", "def", "get_all_reward_stats", "(", "path", ",", "out_path", ")", ":", "\n", "    ", "dirs", "=", "[", "d", "for", "d", "in", "listdir", "(", "path", ")", "if", "isdir", "(", "join", "(", "path", ",", "d", ")", ")", "and", "\"checkpoint\"", "in", "d", "]", "\n", "dirs", "=", "sorted", "(", "dirs", ")", "\n", "\n", "num_steps", "=", "[", "]", "\n", "rewards", "=", "[", "]", "\n", "for", "d", "in", "dirs", ":", "\n", "        ", "rewards", ".", "append", "(", "get_reward_stats", "(", "join", "(", "path", ",", "d", ",", "\"replay_pool.pkl\"", ")", ",", "out_path", "+", "\"_\"", "+", "d", "+", "\".png\"", ",", "d", ")", ")", "\n", "num_steps", ".", "append", "(", "int", "(", "d", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", ")", "\n", "\n", "", "num_steps", ",", "rewards", "=", "(", "list", "(", "t", ")", "for", "t", "in", "zip", "(", "*", "sorted", "(", "zip", "(", "num_steps", ",", "rewards", ")", ")", ")", ")", "\n", "\n", "plt", ".", "plot", "(", "num_steps", ",", "rewards", ")", "\n", "plt", ".", "savefig", "(", "out_path", "+", "\"_all_checkpoints.png\"", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.cat_replay_pools.combine_replay_pools": [[8, 22], ["pickle.load.keys", "gzip.open", "pickle.load", "gzip.open", "pickle.load", "numpy.concatenate", "print", "gzip.open", "pickle.dump"], "function", ["None"], ["def", "combine_replay_pools", "(", "args", ")", ":", "\n", "    ", "with", "gzip", ".", "open", "(", "args", ".", "path_1", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data_1", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "gzip", ".", "open", "(", "args", ".", "path_2", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data_2", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "\n", "", "combined_data", "=", "{", "}", "\n", "for", "k", "in", "data_1", ".", "keys", "(", ")", ":", "\n", "        ", "combined_data", "[", "k", "]", "=", "np", ".", "concatenate", "(", "(", "data_1", "[", "k", "]", ",", "data_2", "[", "k", "]", ")", ",", "axis", "=", "0", ")", "\n", "print", "(", "k", ",", "data_1", "[", "k", "]", ".", "shape", ",", "data_2", "[", "k", "]", ".", "shape", ",", "combined_data", "[", "k", "]", ".", "shape", ")", "\n", "\n", "", "with", "gzip", ".", "open", "(", "args", ".", "out_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "combined_data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.install_mujoco.get_parser": [[15, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--mujoco-path'", ",", "type", "=", "str", ",", "default", "=", "DEFAULT_MUJOCO_PATH", ")", "\n", "parser", ".", "add_argument", "(", "'--versions'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "(", "'1.50'", ",", "'2.00'", ")", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.install_mujoco.get_mujoco_zip_name": [[25, 39], ["distutils.version.LooseVersion", "distutils.version.LooseVersion", "ValueError", "version.replace"], "function", ["None"], ["", "def", "get_mujoco_zip_name", "(", "platform", ",", "version", ")", ":", "\n", "    ", "past_150", "=", "LooseVersion", "(", "version", ")", ">", "LooseVersion", "(", "\"1.50\"", ")", "\n", "basename", "=", "\"mujoco\"", "if", "past_150", "else", "\"mjpro\"", "\n", "\n", "if", "platform", "==", "'darwin'", ":", "\n", "        ", "platform_id", "=", "'macos'", "if", "past_150", "else", "'osx'", "\n", "", "elif", "platform", "==", "'linux'", ":", "\n", "        ", "platform_id", "=", "'linux'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "platform", ")", "\n", "\n", "# For example: \"mujoco200_linux.zip\"", "\n", "", "zip_name", "=", "f\"{basename}{version.replace('.', '')}_{platform_id}.zip\"", "\n", "return", "zip_name", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.install_mujoco.install_mujoco": [[41, 50], ["print", "install_mujoco.get_mujoco_zip_name", "os.system", "os.system", "os.system"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.install_mujoco.get_mujoco_zip_name"], ["", "def", "install_mujoco", "(", "platform", ",", "version", ",", "mujoco_path", ")", ":", "\n", "    ", "print", "(", "f\"Installing MuJoCo version {version} to {mujoco_path}\"", ")", "\n", "\n", "mujoco_zip_name", "=", "get_mujoco_zip_name", "(", "platform", ",", "version", ")", "\n", "\n", "mujoco_zip_url", "=", "f\"https://www.roboti.us/download/{mujoco_zip_name}\"", "\n", "os", ".", "system", "(", "f\"wget -N -P {mujoco_path} {mujoco_zip_url}\"", ")", "\n", "os", ".", "system", "(", "f\"unzip -n {mujoco_path}/{mujoco_zip_name} -d {mujoco_path}\"", ")", "\n", "os", ".", "system", "(", "f\"rm {mujoco_path}/{mujoco_zip_name}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.install_mujoco.main": [[52, 65], ["install_mujoco.get_parser", "get_parser.parse_args", "os.path.expanduser", "os.path.exists", "os.makedirs", "install_mujoco.install_mujoco"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.install_mujoco.get_parser", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.archive_gs.parse_args", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.install_mujoco.install_mujoco"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "mujoco_path", "=", "os", ".", "path", ".", "expanduser", "(", "args", ".", "mujoco_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "mujoco_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "mujoco_path", ")", "\n", "\n", "", "platform", "=", "sys", ".", "platform", "\n", "assert", "platform", "in", "KNOWN_PLATFORMS", ",", "(", "platform", ",", "KNOWN_PLATFORMS", ")", "\n", "\n", "for", "version", "in", "args", ".", "versions", ":", "\n", "        ", "install_mujoco", "(", "platform", ",", "version", ",", "mujoco_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.sync_gs.parse_args": [[9, 21], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.archive_gs.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'sync_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "nargs", "=", "'?'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--sync-checkpoints'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dry'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.sync_gs.sync_gs": [[23, 61], ["os.path.join", "os.path.join", "subprocess.call", "ValueError", "os.path.expanduser", "remote_gs_parts.append", "local_gs_parts.append", "os.path.exists", "os.makedirs", "shlex.quote", "shlex.quote"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.autoencoder_models.SpatialSoftMax.call"], ["", "def", "sync_gs", "(", "args", ")", ":", "\n", "    ", "\"\"\"Sync files from google cloud storage bucket to local machine.\n\n    TODO(hartikainen): Refactor this to use project config instead of\n        environment variables (e.g. `SAC_GS_BUCKET`).\n    \"\"\"", "\n", "if", "'SAC_GS_BUCKET'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"'SAC_GS_BUCKET' environment variable needs to be set.\"", ")", "\n", "\n", "", "bucket", "=", "os", ".", "environ", "[", "'SAC_GS_BUCKET'", "]", "\n", "\n", "remote_gs_parts", "=", "[", "bucket", ",", "'ray'", ",", "'results'", "]", "\n", "local_gs_parts", "=", "[", "os", ".", "path", ".", "expanduser", "(", "'~/ray_results/gs/'", ")", "]", "\n", "\n", "if", "args", ".", "sync_path", "is", "not", "None", ":", "\n", "        ", "remote_gs_parts", ".", "append", "(", "args", ".", "sync_path", ")", "\n", "local_gs_parts", ".", "append", "(", "args", ".", "sync_path", ")", "\n", "\n", "", "remote_gs_path", "=", "os", ".", "path", ".", "join", "(", "*", "remote_gs_parts", ")", "\n", "local_gs_path", "=", "os", ".", "path", ".", "join", "(", "*", "local_gs_parts", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "local_gs_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "local_gs_path", ")", "\n", "\n", "", "command_parts", "=", "[", "'gsutil'", ",", "'-m'", ",", "'rsync'", ",", "'-r'", "]", "\n", "\n", "if", "not", "args", ".", "sync_checkpoints", ":", "\n", "        ", "command_parts", "+=", "[", "'-x'", ",", "'\".*./checkpoint_.*./.*\"'", "]", "\n", "\n", "", "if", "args", ".", "dry", ":", "\n", "        ", "command_parts", "+=", "[", "\"-n\"", "]", "\n", "\n", "", "command_parts", "+=", "[", "shlex", ".", "quote", "(", "remote_gs_path", ")", ",", "shlex", ".", "quote", "(", "local_gs_path", ")", "]", "\n", "\n", "command", "=", "\" \"", ".", "join", "(", "command_parts", ")", "\n", "\n", "subprocess", ".", "call", "(", "command", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.sync_gs.main": [[63, 66], ["sync_gs.parse_args", "sync_gs.sync_gs"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.archive_gs.parse_args", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.sync_gs.sync_gs"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "sync_gs", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.swap_colors_replay_pool.swap_colors_replay_pools": [[8, 32], ["print", "data_1[].reshape", "data_1[].reshape.reshape", "print", "data_1[].reshape", "data_1[].reshape.reshape", "print", "print", "gzip.open", "pickle.load", "pickle.load.keys", "gzip.open", "pickle.dump", "gzip.open", "pickle.dump"], "function", ["None"], ["def", "swap_colors_replay_pools", "(", "args", ")", ":", "\n", "    ", "with", "gzip", ".", "open", "(", "args", ".", "path_1", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data_1", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "\"data_1\"", ",", "data_1", ".", "keys", "(", ")", ")", "\n", "\n", "obs", "=", "data_1", "[", "'observations'", "]", ".", "reshape", "(", "-", "1", ",", "48", ",", "48", ",", "3", ")", "\n", "obs", "=", "obs", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "data_1", "[", "'observations'", "]", "=", "obs", ".", "reshape", "(", "obs", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "with", "gzip", ".", "open", "(", "args", ".", "paired_out_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data_1", ",", "f", ")", "\n", "", "print", "(", "\"saved paired data to \"", ",", "args", ".", "paired_out_path", ")", "\n", "\n", "\n", "next_obs", "=", "data_1", "[", "'next_observations'", "]", ".", "reshape", "(", "-", "1", ",", "48", ",", "48", ",", "3", ")", "\n", "next_obs", "=", "next_obs", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "data_1", "[", "'next_observations'", "]", "=", "next_obs", ".", "reshape", "(", "next_obs", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "print", "(", "\"obs shape:\"", ",", "data_1", "[", "'observations'", "]", ".", "shape", ")", "\n", "\n", "with", "gzip", ".", "open", "(", "args", ".", "out_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data_1", ",", "f", ")", "\n", "", "print", "(", "\"saved flipped data to\"", ",", "args", ".", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.archive_gs.parse_args": [[8, 16], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.archive_gs.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'archive_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "nargs", "=", "'?'", ")", "\n", "parser", ".", "add_argument", "(", "'--unarchive'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--dry'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.archive_gs.archive_gs": [[18, 50], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "subprocess.call", "ValueError", "print"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.autoencoder_models.SpatialSoftMax.call"], ["", "def", "archive_gs", "(", "args", ")", ":", "\n", "    ", "\"\"\"Archive files in google cloud storage bucket.\n\n    Moves files from `<bucket>/ray/results` to `<bucket>/archive/ray/results`.\n\n    TODO(hartikainen): Refactor this to use project config instead of\n        environment variables (e.g. `SAC_GS_BUCKET`).\n    \"\"\"", "\n", "if", "'SAC_GS_BUCKET'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"'SAC_GS_BUCKET' environment variable needs to be set.\"", ")", "\n", "\n", "", "bucket", "=", "os", ".", "environ", "[", "'SAC_GS_BUCKET'", "]", "\n", "fresh_results_path", "=", "os", ".", "path", ".", "join", "(", "bucket", ",", "'ray'", ",", "'results'", ")", "\n", "archive_results_path", "=", "os", ".", "path", ".", "join", "(", "bucket", ",", "'archive'", ",", "'ray'", ",", "'results'", ")", "\n", "\n", "fresh_url", "=", "os", ".", "path", ".", "join", "(", "fresh_results_path", ",", "args", ".", "archive_path", ")", "\n", "archive_url", "=", "os", ".", "path", ".", "join", "(", "archive_results_path", ",", "args", ".", "archive_path", ")", "\n", "\n", "src_url", ",", "dst_url", "=", "(", "\n", "(", "archive_url", ",", "fresh_url", ")", "\n", "if", "args", ".", "unarchive", "\n", "else", "(", "fresh_url", ",", "archive_url", ")", ")", "\n", "\n", "command_parts", "=", "[", "'gsutil'", ",", "'-m'", ",", "'mv'", ",", "src_url", ",", "dst_url", "]", "\n", "command", "=", "\" \"", ".", "join", "(", "command_parts", ")", "\n", "\n", "if", "args", ".", "dry", ":", "\n", "        ", "print", "(", "command", ")", "\n", "return", "\n", "\n", "", "subprocess", ".", "call", "(", "command", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.archive_gs.main": [[52, 55], ["archive_gs.parse_args", "archive_gs.archive_gs"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.archive_gs.parse_args", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.archive_gs.archive_gs"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "archive_gs", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.fix_acrobot_actions.combine_replay_pools": [[8, 21], ["print", "print", "print", "gzip.open", "pickle.load", "gzip.open", "pickle.dump", "numpy.where", "numpy.where", "numpy.where", "numpy.logical_and"], "function", ["None"], ["def", "combine_replay_pools", "(", "args", ")", ":", "\n", "    ", "with", "gzip", ".", "open", "(", "args", ".", "path_1", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "\"actions:\"", ",", "data", "[", "'actions'", "]", ".", "shape", ")", "\n", "print", "(", "\"before:\"", ",", "data", "[", "'actions'", "]", "[", ":", "100", "]", ")", "\n", "data", "[", "'actions'", "]", "[", "np", ".", "where", "(", "data", "[", "'actions'", "]", ">", "0.5", ")", "]", "=", "1.0", "\n", "data", "[", "'actions'", "]", "[", "np", ".", "where", "(", "data", "[", "'actions'", "]", "<", "-", "0.5", ")", "]", "=", "-", "1.0", "\n", "data", "[", "'actions'", "]", "[", "np", ".", "where", "(", "np", ".", "logical_and", "(", "data", "[", "'actions'", "]", "<", "0.5", ",", "data", "[", "'actions'", "]", ">", "-", "0.5", ")", ")", "]", "=", "0.0", "\n", "print", "(", "\"After:\"", ",", "data", "[", "'actions'", "]", "[", ":", "100", "]", ")", "\n", "\n", "with", "gzip", ".", "open", "(", "args", ".", "out_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.save_to_replay_pool.save_replay_pool_from_images": [[9, 84], ["print", "data[].reshape", "data[].reshape", "len", "print", "sorted", "print", "print", "cv2.imread", "cv2.resize", "range", "numpy.array", "print", "gzip.open", "pickle.dump", "os.listdir", "os.path.isfile", "int", "trajectories[].keys", "os.path.join", "cv2.resize.reshape", "data[].append", "cv2.imread", "cv2.resize", "data[].append", "data[].append", "data[].append", "data[].append", "os.path.join", "f.split", "f.split", "int", "len", "os.path.join", "cv2.resize.reshape", "len", "int", "int", "range", "len"], "function", ["None"], ["def", "save_replay_pool_from_images", "(", "args", ")", ":", "\n", "    ", "files", "=", "[", "f", "for", "f", "in", "listdir", "(", "args", ".", "image_path", ")", "if", "isfile", "(", "join", "(", "args", ".", "image_path", ",", "f", ")", ")", "]", "\n", "\n", "trajectories", "=", "{", "}", "\n", "print", "(", "\"Files:\"", ",", "len", "(", "files", ")", ")", "\n", "for", "f", "in", "files", ":", "\n", "#        print(\"f:\", f)", "\n", "        ", "if", "\"fake_B\"", "in", "f", ":", "\n", "            ", "traj_name", "=", "f", "[", ":", "-", "15", "]", "\n", "\n", "index", "=", "int", "(", "f", "[", "-", "15", ":", "-", "11", "]", ")", "\n", "", "elif", "\"frame\"", "in", "f", "and", "\"video\"", "in", "f", ":", "\n", "            ", "sections", "=", "f", ".", "split", "(", "'_'", ")", "\n", "#            print(\"sections\", sections)", "\n", "if", "len", "(", "sections", ")", ">", "4", ":", "\n", "                ", "traj_name", "=", "'_'", ".", "join", "(", "sections", "[", ":", "3", "]", ")", "\n", "index", "=", "int", "(", "sections", "[", "4", "]", "[", ":", "-", "4", "]", ")", "\n", "", "else", ":", "\n", "                ", "traj_name", "=", "sections", "[", "1", "]", "\n", "index", "=", "int", "(", "sections", "[", "3", "]", "[", ":", "-", "4", "]", ")", "\n", "#            print(\"traj_name\", traj_name, \"index\", index)", "\n", "", "", "else", ":", "\n", "            ", "sections", "=", "f", ".", "split", "(", "'_'", ")", "\n", "traj_name", "=", "sections", "[", "1", "]", "\n", "index", "=", "int", "(", "sections", "[", "2", "]", "[", ":", "-", "4", "]", ")", "\n", "#            print(\"traj_name, index\", traj_name, index)", "\n", "#            continue", "\n", "\n", "", "if", "traj_name", "not", "in", "trajectories", ":", "\n", "            ", "trajectories", "[", "traj_name", "]", "=", "{", "}", "\n", "", "trajectories", "[", "traj_name", "]", "[", "index", "]", "=", "f", "\n", "\n", "\n", "\n", "", "data", "=", "{", "'observations'", ":", "[", "]", ",", "\n", "'next_observations'", ":", "[", "]", ",", "\n", "'rewards'", ":", "[", "]", ",", "\n", "'terminals'", ":", "[", "]", ",", "\n", "'actions'", ":", "[", "]", "\n", "}", "\n", "\n", "for", "traj", "in", "trajectories", ":", "\n", "        ", "print", "(", "\"traj:\"", ",", "traj", ")", "\n", "indices", "=", "sorted", "(", "trajectories", "[", "traj", "]", ".", "keys", "(", ")", ")", "\n", "print", "(", "\"indices\"", ",", "indices", ")", "\n", "if", "args", ".", "reverse", ":", "\n", "            ", "indices", "=", "indices", "[", ":", ":", "-", "1", "]", "\n", "", "print", "(", "\"reversed_indices\"", ",", "indices", ")", "\n", "next_im", "=", "cv2", ".", "imread", "(", "join", "(", "args", ".", "image_path", ",", "trajectories", "[", "traj", "]", "[", "indices", "[", "0", "]", "]", ")", ")", "\n", "next_im", "=", "cv2", ".", "resize", "(", "next_im", ",", "args", ".", "image_size", ")", "\n", "next_im", "=", "next_im", ".", "reshape", "(", "-", "1", ")", "/", "255.0", "\n", "for", "i", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", ":", "\n", "            ", "if", "i", "%", "args", ".", "save_fraction", "!=", "0", ":", "\n", "                ", "continue", "\n", "", "data", "[", "'observations'", "]", ".", "append", "(", "next_im", ")", "\n", "next_im", "=", "cv2", ".", "imread", "(", "join", "(", "args", ".", "image_path", ",", "trajectories", "[", "traj", "]", "[", "indices", "[", "i", "]", "]", ")", ")", "\n", "next_im", "=", "cv2", ".", "resize", "(", "next_im", ",", "args", ".", "image_size", ")", "\n", "next_im", "=", "next_im", ".", "reshape", "(", "-", "1", ")", "/", "255.0", "\n", "data", "[", "'next_observations'", "]", ".", "append", "(", "next_im", ")", "\n", "data", "[", "'rewards'", "]", ".", "append", "(", "0.0", ")", "\n", "data", "[", "'terminals'", "]", ".", "append", "(", "1", "if", "i", "==", "len", "(", "indices", ")", "-", "2", "else", "0", ")", "\n", "data", "[", "'actions'", "]", ".", "append", "(", "[", "0.0", "for", "_", "in", "range", "(", "args", ".", "action_space", ")", "]", ")", "\n", "", "data", "[", "'terminals'", "]", "[", "-", "1", "]", "=", "1", "\n", "\n", "", "for", "k", "in", "data", ":", "\n", "        ", "data", "[", "k", "]", "=", "np", ".", "array", "(", "data", "[", "k", "]", ")", "\n", "\n", "", "data", "[", "'rewards'", "]", "=", "data", "[", "'rewards'", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "data", "[", "'terminals'", "]", "=", "data", "[", "'terminals'", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "for", "k", "in", "data", ":", "\n", "        ", "print", "(", "\"k,\"", ",", "k", ",", "data", "[", "k", "]", ".", "shape", ")", "\n", "\n", "", "with", "gzip", ".", "open", "(", "args", ".", "out_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.process_tensorboard_logs.moving_average": [[117, 121], ["numpy.cumsum"], "function", ["None"], ["def", "moving_average", "(", "a", ",", "n", "=", "10", ")", ":", "\n", "    ", "ret", "=", "np", ".", "cumsum", "(", "a", ",", "dtype", "=", "float", ")", "\n", "ret", "[", "n", ":", "]", "=", "ret", "[", "n", ":", "]", "-", "ret", "[", ":", "-", "n", "]", "\n", "return", "ret", "[", "n", "-", "1", ":", "]", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.process_tensorboard_logs.get_rewards": [[123, 192], ["numpy.array", "numpy.array", "print", "print", "numpy.mean", "numpy.std", "print", "print", "os.path.isdir", "tensorflow.train.summary_iterator", "print", "int", "range", "int", "print", "range", "int", "process_tensorboard_logs.moving_average", "numpy.sqrt", "sorted", "np.array.append", "len", "min", "len", "max", "len", "print", "all_rewards[].extend", "print", "min", "steps.append", "rewards.append", "len", "len", "len", "len", "process_tensorboard_logs.moving_average", "os.listdir", "os.path.isfile", "os.path.join", "print", "len", "len", "len", "os.path.join", "len", "len"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.process_tensorboard_logs.moving_average", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.process_tensorboard_logs.moving_average"], ["", "def", "get_rewards", "(", "paths", ",", "smoothing", "=", "None", ",", "extend", "=", "True", ")", ":", "\n", "    ", "all_steps", "=", "None", "\n", "all_rewards", "=", "None", "\n", "for", "path", "in", "paths", ":", "\n", "        ", "if", "isdir", "(", "path", ")", ":", "\n", "            ", "files", "=", "[", "f", "for", "f", "in", "listdir", "(", "path", ")", "if", "isfile", "(", "join", "(", "path", ",", "f", ")", ")", "]", "\n", "\n", "for", "f", "in", "sorted", "(", "files", ")", ":", "\n", "                ", "if", "\"events.out.tfevents\"", "in", "f", ":", "\n", "                    ", "path", "=", "join", "(", "path", ",", "f", ")", "\n", "#                    print(\"path:\", path)", "\n", "break", "\n", "", "", "", "steps", "=", "[", "]", "\n", "rewards", "=", "[", "]", "\n", "for", "summary", "in", "summary_iterator", "(", "path", ")", ":", "\n", "            ", "step", "=", "None", "\n", "reward", "=", "None", "\n", "for", "v", "in", "summary", ".", "summary", ".", "value", ":", "\n", "                ", "if", "v", ".", "tag", "==", "\"ray/tune/train-steps\"", ":", "\n", "                    ", "step", "=", "v", ".", "simple_value", "\n", "", "if", "v", ".", "tag", "==", "\"ray/tune/evaluation/return-average\"", ":", "\n", "                    ", "reward", "=", "v", ".", "simple_value", "\n", "", "", "if", "step", "is", "not", "None", "and", "reward", "is", "not", "None", ":", "\n", "                ", "if", "len", "(", "steps", ")", ">", "0", "and", "step", "<", "steps", "[", "-", "1", "]", ":", "\n", "                    ", "print", "(", "\"detected backwards time\"", ")", "\n", "break", "\n", "", "steps", ".", "append", "(", "step", ")", "\n", "rewards", ".", "append", "(", "reward", ")", "\n", "", "", "if", "all_steps", "is", "None", ":", "\n", "            ", "all_steps", "=", "steps", "\n", "all_rewards", "=", "[", "rewards", "]", "\n", "", "else", ":", "\n", "            ", "all_rewards", ".", "append", "(", "rewards", ")", "\n", "if", "len", "(", "all_steps", ")", "<", "len", "(", "steps", ")", ":", "\n", "                ", "all_steps", "=", "steps", "\n", "", "", "print", "(", "path", ",", "len", "(", "rewards", ")", ")", "\n", "\n", "", "if", "not", "extend", ":", "\n", "        ", "min_length", "=", "int", "(", "min", "(", "[", "len", "(", "r", ")", "for", "r", "in", "all_rewards", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_rewards", ")", ")", ":", "\n", "            ", "all_rewards", "[", "i", "]", "=", "all_rewards", "[", "i", "]", "[", ":", "min_length", "]", "\n", "", "", "if", "extend", ":", "\n", "        ", "max_length", "=", "int", "(", "max", "(", "[", "len", "(", "r", ")", "for", "r", "in", "all_rewards", "]", ")", ")", "\n", "print", "(", "\"max_length:\"", ",", "max_length", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_rewards", ")", ")", ":", "\n", "            ", "print", "(", "\"len before:\"", ",", "len", "(", "all_rewards", "[", "i", "]", ")", ")", "\n", "all_rewards", "[", "i", "]", ".", "extend", "(", "[", "all_rewards", "[", "i", "]", "[", "-", "1", "]", "]", "*", "(", "max_length", "-", "len", "(", "all_rewards", "[", "i", "]", ")", ")", ")", "\n", "print", "(", "\"len after:\"", ",", "len", "(", "all_rewards", "[", "i", "]", ")", ")", "\n", "\n", "", "min_length", "=", "int", "(", "min", "(", "[", "len", "(", "r", ")", "for", "r", "in", "all_rewards", "]", ")", ")", "\n", "\n", "if", "smoothing", "is", "not", "None", ":", "\n", "            ", "all_rewards", "=", "[", "moving_average", "(", "r", ",", "n", "=", "smoothing", ")", "for", "r", "in", "all_rewards", "]", "\n", "", "", "if", "smoothing", "is", "not", "None", ":", "\n", "        ", "all_steps", "=", "moving_average", "(", "all_steps", ",", "n", "=", "smoothing", ")", "\n", "", "all_steps", "=", "np", ".", "array", "(", "all_steps", "[", ":", "min_length", "]", ")", "\n", "all_rewards", "=", "np", ".", "array", "(", "all_rewards", ")", "\n", "\n", "print", "(", "\"all_steps\"", ",", "all_steps", ".", "shape", ")", "\n", "print", "(", "\"all_rewards:\"", ",", "all_rewards", ".", "shape", ")", "\n", "\n", "mean_rewards", "=", "np", ".", "mean", "(", "all_rewards", ",", "axis", "=", "0", ")", "\n", "std_dev", "=", "np", ".", "std", "(", "all_rewards", ",", "axis", "=", "0", ")", "\n", "std_error", "=", "std_dev", "/", "np", ".", "sqrt", "(", "all_rewards", ".", "shape", "[", "0", "]", ")", "\n", "\n", "print", "(", "\"mean_rewards:\"", ",", "mean_rewards", ".", "shape", ")", "\n", "print", "(", "\"std_error:\"", ",", "std_error", ".", "shape", ")", "\n", "\n", "return", "all_steps", ",", "mean_rewards", ",", "std_error", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.add_options": [[41, 47], ["click.decorators._param_memo"], "function", ["None"], ["def", "add_options", "(", "options", ")", ":", "\n", "    ", "def", "decorator", "(", "f", ")", ":", "\n", "        ", "for", "option", "in", "options", "[", ":", ":", "-", "1", "]", ":", "\n", "            ", "click", ".", "decorators", ".", "_param_memo", "(", "f", ",", "option", ")", "\n", "", "return", "f", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.cli": [[49, 52], ["click.group", "console_scripts.run_example_local_cmd", "console_scripts.run_example_dry_cmd", "console_scripts.run_example_cluster_cmd", "console_scripts.run_example_local_cmd", "console_scripts.run_example_dry_cmd", "console_scripts.run_example_debug_cmd", "console_scripts.launch_example_cluster_cmd", "console_scripts.launch_example_gce_cmd", "console_scripts.launch_example_ec2_cmd"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.run_example_local_cmd", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.run_example_dry_cmd", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.run_example_cluster_cmd", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.run_example_local_cmd", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.run_example_dry_cmd", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.run_example_debug_cmd", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.launch_example_cluster_cmd", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.launch_example_gce_cmd", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.launch_example_ec2_cmd"], ["", "@", "click", ".", "group", "(", ")", "\n", "def", "cli", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.run_example_dry_cmd": [[54, 62], ["cli.command", "click.argument", "click.argument", "examples.instrument.run_example_dry"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.run_example_dry"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'run_example_dry'", ",", "\n", "context_settings", "=", "{", "'ignore_unknown_options'", ":", "True", "}", ")", "\n", "@", "click", ".", "argument", "(", "\"example_module_name\"", ",", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'example_argv'", ",", "nargs", "=", "-", "1", ",", "type", "=", "click", ".", "UNPROCESSED", ")", "\n", "def", "run_example_dry_cmd", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "\"\"\"Print the variant spec and related information of an example.\"\"\"", "\n", "return", "run_example_dry", "(", "example_module_name", ",", "example_argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.run_example_local_cmd": [[64, 72], ["cli.command", "click.argument", "click.argument", "examples.instrument.run_example_local"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.run_example_local"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'run_example_local'", ",", "\n", "context_settings", "=", "{", "'ignore_unknown_options'", ":", "True", "}", ")", "\n", "@", "click", ".", "argument", "(", "\"example_module_name\"", ",", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'example_argv'", ",", "nargs", "=", "-", "1", ",", "type", "=", "click", ".", "UNPROCESSED", ")", "\n", "def", "run_example_local_cmd", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "\"\"\"Run example locally, potentially parallelizing across cpus/gpus.\"\"\"", "\n", "return", "run_example_local", "(", "example_module_name", ",", "example_argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.run_example_debug_cmd": [[74, 82], ["cli.command", "click.argument", "click.argument", "examples.instrument.run_example_debug"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.run_example_debug"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'run_example_debug'", ",", "\n", "context_settings", "=", "{", "'ignore_unknown_options'", ":", "True", "}", ")", "\n", "@", "click", ".", "argument", "(", "\"example_module_name\"", ",", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'example_argv'", ",", "nargs", "=", "-", "1", ",", "type", "=", "click", ".", "UNPROCESSED", ")", "\n", "def", "run_example_debug_cmd", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "\"\"\"The debug mode limits tune trial runs to enable use of debugger.\"\"\"", "\n", "return", "run_example_debug", "(", "example_module_name", ",", "example_argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.run_example_cluster_cmd": [[84, 96], ["cli.command", "click.argument", "click.argument", "examples.instrument.run_example_cluster"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.run_example_cluster"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'run_example_cluster'", ",", "\n", "context_settings", "=", "{", "'ignore_unknown_options'", ":", "True", "}", ")", "\n", "@", "click", ".", "argument", "(", "\"example_module_name\"", ",", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'example_argv'", ",", "nargs", "=", "-", "1", ",", "type", "=", "click", ".", "UNPROCESSED", ")", "\n", "def", "run_example_cluster_cmd", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "\"\"\"Run example on cluster mode.\n\n    This functions is very similar to the local mode, except that it\n    correctly sets the redis address to make ray/tune work on a cluster.\n    \"\"\"", "\n", "run_example_cluster", "(", "example_module_name", ",", "example_argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.launch_example_cluster_cmd": [[98, 146], ["cli.command", "click.argument", "click.argument", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "examples.instrument.launch_example_cluster"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.launch_example_cluster"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'launch_example_cluster'", ",", "\n", "context_settings", "=", "{", "\n", "'allow_extra_args'", ":", "True", ",", "\n", "'ignore_unknown_options'", ":", "True", "\n", "}", ")", "\n", "@", "click", ".", "argument", "(", "\"example_module_name\"", ",", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'example_argv'", ",", "nargs", "=", "-", "1", ",", "type", "=", "click", ".", "UNPROCESSED", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--config_file\"", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--stop/--no-stop\"", ",", "\n", "is_flag", "=", "True", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"Stop the cluster after the command finishes running.\"", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--start/--no-start\"", ",", "\n", "is_flag", "=", "True", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"Start the cluster if needed.\"", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--screen/--no-screen\"", ",", "\n", "is_flag", "=", "True", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Run the command in a screen.\"", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--tmux/--no-tmux\"", ",", "\n", "is_flag", "=", "True", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"Run the command in tmux.\"", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--override-cluster-name\"", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Override the configured cluster name.\"", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--port-forward\"", ",", "required", "=", "False", ",", "type", "=", "int", ",", "help", "=", "\"Port to forward.\"", ")", "\n", "def", "launch_example_cluster_cmd", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Launches the example on autoscaled ray cluster through ray exec_cmd.\n\n    This handles basic validation and sanity checks for the experiment, and\n    then executes the command on autoscaled ray cluster. If necessary, it will\n    also fill in more useful defaults for our workflow (i.e. for tmux and\n    override_cluster_name).\n    \"\"\"", "\n", "return", "launch_example_cluster", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.launch_example_gce_cmd": [[148, 165], ["cli.command", "console_scripts.add_options", "examples.instrument.launch_example_gce"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.add_options", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.launch_example_gce"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'launch_example_gce'", ",", "\n", "context_settings", "=", "{", "\n", "'allow_extra_args'", ":", "True", ",", "\n", "'ignore_unknown_options'", ":", "True", "\n", "}", ")", "\n", "@", "add_options", "(", "launch_example_cluster_cmd", ".", "params", ")", "\n", "def", "launch_example_gce_cmd", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Forwards call to `launch_example_cluster` after adding gce defaults.\n\n    This optionally sets the ray autoscaler configuration file to the default\n    gce configuration file, and then calls `launch_example_cluster` to\n    execute the original command on autoscaled gce cluster by parsing the args.\n\n    See `launch_example_cluster` for further details.\n    \"\"\"", "\n", "return", "launch_example_gce", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.launch_example_ec2_cmd": [[167, 184], ["cli.command", "console_scripts.add_options", "examples.instrument.launch_example_ec2"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.add_options", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.examples.instrument.launch_example_ec2"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'launch_example_ec2'", ",", "\n", "context_settings", "=", "{", "\n", "'allow_extra_args'", ":", "True", ",", "\n", "'ignore_unknown_options'", ":", "True", "\n", "}", ")", "\n", "@", "add_options", "(", "launch_example_cluster_cmd", ".", "params", ")", "\n", "def", "launch_example_ec2_cmd", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Forwards call to `launch_example_cluster` after adding ec2 defaults.\n\n    This optionally sets the ray autoscaler configuration file to the default\n    ec2 configuration file, and then calls `launch_example_cluster` to\n    execute the original command on autoscaled ec2 cluster by parsing the args.\n\n    See `launch_example_cluster` for further details.\n    \"\"\"", "\n", "return", "launch_example_ec2", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.main": [[201, 203], ["console_scripts.cli"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.scripts.console_scripts.cli"], ["def", "main", "(", ")", ":", "\n", "    ", "return", "cli", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.utils.numpy.softmax": [[4, 8], ["numpy.max", "numpy.exp", "numpy.sum"], "function", ["None"], ["def", "softmax", "(", "x", ")", ":", "\n", "    ", "max_x", "=", "np", ".", "max", "(", "x", ")", "\n", "exp_x", "=", "np", ".", "exp", "(", "x", "-", "max_x", ")", "\n", "return", "exp_x", "/", "np", ".", "sum", "(", "exp_x", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.utils.gradient_reversal.GradientReversal.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_calls", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.utils.gradient_reversal.GradientReversal.__call__": [[13, 25], ["tensorflow.python.framework.ops.RegisterGradient", "tensorflow.python.framework.ops.RegisterGradient", "tensorflow.get_default_graph", "tensorflow.get_default_graph", "tensorflow.get_default_graph.gradient_override_map", "tensorflow.identity", "tensorflow.identity", "tensorflow.negative", "tensorflow.negative"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "l", "=", "1.0", ")", ":", "\n", "        ", "grad_name", "=", "\"FlipGradient%d\"", "%", "self", ".", "num_calls", "\n", "@", "ops", ".", "RegisterGradient", "(", "grad_name", ")", "\n", "def", "_flip_gradients", "(", "op", ",", "grad", ")", ":", "\n", "            ", "return", "[", "tf", ".", "negative", "(", "grad", ")", "*", "l", "]", "\n", "\n", "", "g", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "with", "g", ".", "gradient_override_map", "(", "{", "\"Identity\"", ":", "grad_name", "}", ")", ":", "\n", "            ", "y", "=", "tf", ".", "identity", "(", "x", ")", "\n", "\n", "", "self", ".", "num_calls", "+=", "1", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.utils.keras.PicklableKerasModel.__getstate__": [[7, 14], ["tempfile.NamedTemporaryFile", "tensorflow.keras.models.save_model", "fd.read"], "methods", ["None"], ["    ", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.hdf5'", ",", "delete", "=", "True", ")", "as", "fd", ":", "\n", "            ", "tf", ".", "keras", ".", "models", ".", "save_model", "(", "self", ",", "fd", ".", "name", ",", "overwrite", "=", "True", ")", "\n", "model_str", "=", "fd", ".", "read", "(", ")", "\n", "", "d", "=", "{", "'model_str'", ":", "model_str", "}", "\n", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.utils.keras.PicklableKerasModel.__setstate__": [[15, 25], ["keras.PicklableKerasModel.__dict__.update", "tempfile.NamedTemporaryFile", "fd.write", "fd.flush", "tensorflow.keras.models.load_model", "tensorflow.keras.models.load_model.__dict__.copy"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.hdf5'", ",", "delete", "=", "True", ")", "as", "fd", ":", "\n", "            ", "fd", ".", "write", "(", "state", "[", "'model_str'", "]", ")", "\n", "fd", ".", "flush", "(", ")", "\n", "\n", "loaded_model", "=", "tf", ".", "keras", ".", "models", ".", "load_model", "(", "\n", "fd", ".", "name", ",", "custom_objects", "=", "{", "\n", "self", ".", "__class__", ".", "__name__", ":", "self", ".", "__class__", "}", ")", "\n", "\n", "", "self", ".", "__dict__", ".", "update", "(", "loaded_model", ".", "__dict__", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.utils.keras.PicklableKerasModel.from_config": [[26, 33], ["super().from_config"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.utils.keras.PicklableKerasModel.from_config"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "*", "args", ",", "custom_objects", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "custom_objects", "=", "custom_objects", "or", "{", "}", "\n", "custom_objects", "[", "cls", ".", "__name__", "]", "=", "cls", "\n", "custom_objects", "[", "'tf'", "]", "=", "tf", "\n", "return", "super", "(", "PicklableKerasModel", ",", "cls", ")", ".", "from_config", "(", "\n", "*", "args", ",", "custom_objects", "=", "custom_objects", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.BasePolicy.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_deterministic", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.BasePolicy.reset": [[12, 15], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset and clean the policy.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.BasePolicy.actions": [[16, 19], ["None"], "methods", ["None"], ["", "def", "actions", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "\"\"\"Compute (symbolic) actions given conditions (observations)\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.BasePolicy.log_pis": [[20, 23], ["None"], "methods", ["None"], ["", "def", "log_pis", "(", "self", ",", "conditions", ",", "actions", ")", ":", "\n", "        ", "\"\"\"Compute (symbolic) log probs for given observations and actions.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.BasePolicy.actions_np": [[24, 27], ["None"], "methods", ["None"], ["", "def", "actions_np", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "\"\"\"Compute (numeric) actions given conditions (observations)\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.BasePolicy.log_pis_np": [[28, 31], ["None"], "methods", ["None"], ["", "def", "log_pis_np", "(", "self", ",", "conditions", ",", "actions", ")", ":", "\n", "        ", "\"\"\"Compute (numeric) log probs for given observations and actions.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.BasePolicy.set_deterministic": [[32, 44], ["None"], "methods", ["None"], ["", "@", "contextmanager", "\n", "def", "set_deterministic", "(", "self", ",", "deterministic", "=", "True", ")", ":", "\n", "        ", "\"\"\"Context manager for changing the determinism of the policy.\n        Args:\n            set_deterministic (`bool`): Value to set the self._is_deterministic\n                to during the context. The value will be reset back to the\n                previous value when the context exits.\n        \"\"\"", "\n", "was_deterministic", "=", "self", ".", "_deterministic", "\n", "self", ".", "_deterministic", "=", "deterministic", "\n", "yield", "\n", "self", ".", "_deterministic", "=", "was_deterministic", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.BasePolicy.get_diagnostics": [[45, 55], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "\"\"\"Return diagnostic information of the policy.\n\n        Arguments:\n            conditions: Observations to run the diagnostics for.\n        Returns:\n            diagnostics: OrderedDict of diagnostic information.\n        \"\"\"", "\n", "diagnostics", "=", "OrderedDict", "(", "{", "}", ")", "\n", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.BasePolicy.__getstate__": [[56, 61], ["serializable.Serializable.__getstate__", "base_policy.BasePolicy.get_weights"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.__getstate__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.get_weights"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "Serializable", ".", "__getstate__", "(", "self", ")", "\n", "state", "[", "'pickled_weights'", "]", "=", "self", ".", "get_weights", "(", ")", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.BasePolicy.__setstate__": [[62, 65], ["serializable.Serializable.__setstate__", "base_policy.BasePolicy.set_weights"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.__setstate__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.set_weights"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "Serializable", ".", "__setstate__", "(", "self", ",", "state", ")", "\n", "self", ".", "set_weights", "(", "state", "[", "'pickled_weights'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.LatentSpacePolicy.__init__": [[68, 78], ["base_policy.BasePolicy.__init__", "base_policy.LatentSpacePolicy._reset_smoothing_x", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.LatentSpacePolicy._reset_smoothing_x"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "smoothing_coefficient", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LatentSpacePolicy", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "assert", "smoothing_coefficient", "is", "None", "or", "0", "<=", "smoothing_coefficient", "<=", "1", "\n", "self", ".", "_smoothing_alpha", "=", "smoothing_coefficient", "or", "0", "\n", "self", ".", "_smoothing_beta", "=", "(", "\n", "np", ".", "sqrt", "(", "1.0", "-", "np", ".", "power", "(", "self", ".", "_smoothing_alpha", ",", "2.0", ")", ")", "\n", "/", "(", "1.0", "-", "self", ".", "_smoothing_alpha", ")", ")", "\n", "self", ".", "_reset_smoothing_x", "(", ")", "\n", "self", ".", "_smooth_latents", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.LatentSpacePolicy._reset_smoothing_x": [[79, 81], ["numpy.zeros"], "methods", ["None"], ["", "def", "_reset_smoothing_x", "(", "self", ")", ":", "\n", "        ", "self", ".", "_smoothing_x", "=", "np", ".", "zeros", "(", "(", "1", ",", "*", "self", ".", "_output_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.LatentSpacePolicy.actions_np": [[82, 96], ["base_policy.LatentSpacePolicy.deterministic_actions_model.predict", "base_policy.LatentSpacePolicy.actions_model.predict", "base_policy.LatentSpacePolicy.latents_model.predict", "base_policy.LatentSpacePolicy.actions_model_for_fixed_latents.predict"], "methods", ["None"], ["", "def", "actions_np", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "if", "self", ".", "_deterministic", ":", "\n", "            ", "return", "self", ".", "deterministic_actions_model", ".", "predict", "(", "conditions", ")", "\n", "", "elif", "self", ".", "_smoothing_alpha", "==", "0", ":", "\n", "            ", "return", "self", ".", "actions_model", ".", "predict", "(", "conditions", ")", "\n", "", "else", ":", "\n", "            ", "alpha", ",", "beta", "=", "self", ".", "_smoothing_alpha", ",", "self", ".", "_smoothing_beta", "\n", "raw_latents", "=", "self", ".", "latents_model", ".", "predict", "(", "conditions", ")", "\n", "self", ".", "_smoothing_x", "=", "(", "\n", "alpha", "*", "self", ".", "_smoothing_x", "+", "(", "1.0", "-", "alpha", ")", "*", "raw_latents", ")", "\n", "latents", "=", "beta", "*", "self", ".", "_smoothing_x", "\n", "\n", "return", "self", ".", "actions_model_for_fixed_latents", ".", "predict", "(", "\n", "[", "*", "conditions", ",", "latents", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.LatentSpacePolicy.reset": [[97, 99], ["base_policy.LatentSpacePolicy._reset_smoothing_x"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.LatentSpacePolicy._reset_smoothing_x"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_reset_smoothing_x", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.uniform_policy.UniformPolicy.__init__": [[9, 41], ["base_policy.BasePolicy.__init__", "uniform_policy.UniformPolicy._Serializable__initialize", "tensorflow.keras.Model", "tensorflow.keras.Input", "tensorflow.keras.Model", "locals", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.concat", "tensorflow.random.uniform", "tensorflow.tile", "tensorflow.log", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shapes", ",", "output_shape", ",", "action_range", "=", "(", "-", "1.0", ",", "1.0", ")", ")", ":", "\n", "        ", "super", "(", "UniformPolicy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "\n", "self", ".", "inputs", "=", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "input_shape", ")", "\n", "for", "input_shape", "in", "input_shapes", "\n", "]", "\n", "self", ".", "_action_range", "=", "action_range", "\n", "\n", "x", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "concat", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", ")", "(", "self", ".", "inputs", ")", "\n", "\n", "actions", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "random", ".", "uniform", "(", "\n", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "output_shape", "[", "0", "]", ")", ",", "\n", "*", "action_range", ")", "\n", ")", "(", "x", ")", "\n", "\n", "self", ".", "actions_model", "=", "tf", ".", "keras", ".", "Model", "(", "self", ".", "inputs", ",", "actions", ")", "\n", "\n", "self", ".", "actions_input", "=", "tf", ".", "keras", ".", "Input", "(", "shape", "=", "output_shape", ")", "\n", "\n", "log_pis", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "tile", "(", "tf", ".", "log", "(", "[", "\n", "(", "action_range", "[", "1", "]", "-", "action_range", "[", "0", "]", ")", "/", "2.0", "\n", "]", ")", "[", "None", "]", ",", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "1", ")", ")", "\n", ")", "(", "self", ".", "actions_input", ")", "\n", "\n", "self", ".", "log_pis_model", "=", "tf", ".", "keras", ".", "Model", "(", "\n", "(", "*", "self", ".", "inputs", ",", "self", ".", "actions_input", ")", ",", "log_pis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.uniform_policy.UniformPolicy.get_weights": [[42, 44], ["None"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.uniform_policy.UniformPolicy.set_weights": [[45, 47], ["None"], "methods", ["None"], ["", "def", "set_weights", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.uniform_policy.UniformPolicy.trainable_variables": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable_variables", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.uniform_policy.UniformPolicy.reset": [[52, 54], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.uniform_policy.UniformPolicy.actions": [[55, 57], ["uniform_policy.UniformPolicy.actions_model"], "methods", ["None"], ["", "def", "actions", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "return", "self", ".", "actions_model", "(", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.uniform_policy.UniformPolicy.log_pis": [[58, 60], ["uniform_policy.UniformPolicy.log_pis_model"], "methods", ["None"], ["", "def", "log_pis", "(", "self", ",", "conditions", ",", "actions", ")", ":", "\n", "        ", "return", "self", ".", "log_pis_model", "(", "[", "*", "conditions", ",", "actions", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.uniform_policy.UniformPolicy.actions_np": [[61, 63], ["uniform_policy.UniformPolicy.actions_model.predict"], "methods", ["None"], ["", "def", "actions_np", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "return", "self", ".", "actions_model", ".", "predict", "(", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.uniform_policy.UniformPolicy.log_pis_np": [[64, 66], ["uniform_policy.UniformPolicy.log_pis_model.predict"], "methods", ["None"], ["", "def", "log_pis_np", "(", "self", ",", "conditions", ",", "actions", ")", ":", "\n", "        ", "return", "self", ".", "log_pis_model", ".", "predict", "(", "[", "*", "conditions", ",", "actions", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.uniform_policy.UniformPolicy.get_diagnostics": [[67, 69], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "{", "}", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.utils.get_gaussian_policy": [[6, 14], ["FeedforwardGaussianPolicy"], "function", ["None"], ["from", "ray", ".", "tune", "import", "sample_from", "\n", "\n", "import", "rl_with_videos", ".", "algorithms", ".", "utils", "as", "alg_utils", "\n", "import", "rl_with_videos", ".", "environments", ".", "utils", "as", "env_utils", "\n", "from", "rl_with_videos", ".", "misc", ".", "utils", "import", "datetimestamp", "\n", "\n", "\n", "DEFAULT_UNIVERSE", "=", "'gym'", "\n", "DEFAULT_DOMAIN", "=", "'Pendulum'", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.utils.get_uniform_policy": [[16, 23], ["UniformPolicy"], "function", ["None"], ["DEFAULT_ALGORITHM", "=", "'SAC'", "\n", "\n", "AVAILABLE_UNIVERSES", "=", "tuple", "(", "env_utils", ".", "UNIVERSES", ")", "\n", "AVAILABLE_ALGORITHMS", "=", "set", "(", "alg_utils", ".", "ALGORITHM_CLASSES", ".", "keys", "(", ")", ")", "\n", "\n", "\n", "def", "add_ray_init_args", "(", "parser", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.utils.get_policy": [[31, 33], ["None"], "function", ["None"], ["help", "=", "init_help_string", "(", "\"Cpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.utils.get_policy_from_variant": [[35, 52], ["copy.deepcopy", "copy.deepcopy.pop", "rl_with_videos.preprocessors.utils.get_preprocessor_from_params"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.preprocessors.utils.get_preprocessor_from_params"], ["default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Gpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resources'", ",", "\n", "type", "=", "json", ".", "loads", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Resources to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--include-webui'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "init_help_string", "(", "\"Boolean flag indicating whether to start the\"", "\n", "\"web UI, which is a Jupyter notebook.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--temp-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"If provided, it will specify the root temporary\"", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.__init__": [[19, 155], ["gaussian_policy.GaussianPolicy._Serializable__initialize", "base_policy.LatentSpacePolicy.__init__", "tensorflow_probability.distributions.MultivariateNormalDiag", "tensorflow.keras.Model", "tensorflow.keras.layers.Input", "tensorflow.keras.Model", "tensorflow.keras.Model", "tensorflow.keras.Model", "tensorflow.keras.layers.Input", "tensorflow.keras.Model", "tensorflow.keras.Model", "locals", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Lambda", "preprocessor", "gaussian_policy.GaussianPolicy._shift_and_log_scale_diag_net", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow_probability.bijectors.Affine", "tensorflow_probability.bijectors.Chain.forward", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "rl_with_videos.distributions.squash_bijector.SquashBijector", "tensorflow_probability.bijectors.Identity", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow_probability.distributions.MultivariateNormalDiag", "tensorflow_probability.bijectors.Chain", "tensorflow_probability.distributions.ConditionalTransformedDistribution", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.zeros", "tensorflow.ones", "tensorflow_probability.distributions.ConditionalTransformedDistribution.log_prob", "tensorflow.concat", "tensorflow.split", "tensorflow.clip_by_value", "tensorflow_probability.distributions.MultivariateNormalDiag.sample", "tensorflow.exp", "squash_bijector.forward", "squash_bijector.forward", "squash_bijector.forward", "tensorflow.zeros", "tensorflow.ones", "tensorflow_probability.bijectors.Affine", "tensorflow.shape", "tensorflow.exp"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.FeedforwardGaussianPolicy._shift_and_log_scale_diag_net", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.PointDynamics.forward", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.sample", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.PointDynamics.forward", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.PointDynamics.forward", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.PointDynamics.forward"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_shapes", ",", "\n", "output_shape", ",", "\n", "squash", "=", "True", ",", "\n", "preprocessor", "=", "None", ",", "\n", "name", "=", "None", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "\n", "self", ".", "_input_shapes", "=", "input_shapes", "\n", "self", ".", "_output_shape", "=", "output_shape", "\n", "self", ".", "_squash", "=", "squash", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "_preprocessor", "=", "preprocessor", "\n", "\n", "super", "(", "GaussianPolicy", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "condition_inputs", "=", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "input_shape", ")", "\n", "for", "input_shape", "in", "input_shapes", "\n", "]", "\n", "\n", "conditions", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "concat", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", ")", "(", "self", ".", "condition_inputs", ")", "\n", "\n", "if", "preprocessor", "is", "not", "None", ":", "\n", "            ", "conditions", "=", "preprocessor", "(", "conditions", ")", "\n", "\n", "", "shift_and_log_scale_diag", "=", "self", ".", "_shift_and_log_scale_diag_net", "(", "\n", "input_shapes", "=", "(", "conditions", ".", "shape", "[", "1", ":", "]", ",", ")", ",", "\n", "output_size", "=", "output_shape", "[", "0", "]", "*", "2", ",", "\n", ")", "(", "conditions", ")", "\n", "\n", "shift", ",", "log_scale_diag", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "shift_and_log_scale_diag", ":", "tf", ".", "split", "(", "\n", "shift_and_log_scale_diag", ",", "\n", "num_or_size_splits", "=", "2", ",", "\n", "axis", "=", "-", "1", ")", "\n", ")", "(", "shift_and_log_scale_diag", ")", "\n", "\n", "log_scale_diag", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "log_scale_diag", ":", "tf", ".", "clip_by_value", "(", "\n", "log_scale_diag", ",", "*", "SCALE_DIAG_MIN_MAX", ")", "\n", ")", "(", "log_scale_diag", ")", "\n", "\n", "batch_size", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ")", "(", "conditions", ")", "\n", "\n", "base_distribution", "=", "tfp", ".", "distributions", ".", "MultivariateNormalDiag", "(", "\n", "loc", "=", "tf", ".", "zeros", "(", "output_shape", ")", ",", "\n", "scale_diag", "=", "tf", ".", "ones", "(", "output_shape", ")", ")", "\n", "\n", "latents", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "batch_size", ":", "base_distribution", ".", "sample", "(", "batch_size", ")", "\n", ")", "(", "batch_size", ")", "\n", "\n", "self", ".", "latents_model", "=", "tf", ".", "keras", ".", "Model", "(", "self", ".", "condition_inputs", ",", "latents", ")", "\n", "self", ".", "latents_input", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "output_shape", ")", "\n", "\n", "def", "raw_actions_fn", "(", "inputs", ")", ":", "\n", "            ", "shift", ",", "log_scale_diag", ",", "latents", "=", "inputs", "\n", "bijector", "=", "tfp", ".", "bijectors", ".", "Affine", "(", "\n", "shift", "=", "shift", ",", "\n", "scale_diag", "=", "tf", ".", "exp", "(", "log_scale_diag", ")", ")", "\n", "actions", "=", "bijector", ".", "forward", "(", "latents", ")", "\n", "return", "actions", "\n", "\n", "", "raw_actions", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "raw_actions_fn", "\n", ")", "(", "(", "shift", ",", "log_scale_diag", ",", "latents", ")", ")", "\n", "\n", "raw_actions_for_fixed_latents", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "raw_actions_fn", "\n", ")", "(", "(", "shift", ",", "log_scale_diag", ",", "self", ".", "latents_input", ")", ")", "\n", "\n", "squash_bijector", "=", "(", "\n", "SquashBijector", "(", ")", "\n", "if", "self", ".", "_squash", "\n", "else", "tfp", ".", "bijectors", ".", "Identity", "(", ")", ")", "\n", "\n", "actions", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "raw_actions", ":", "squash_bijector", ".", "forward", "(", "raw_actions", ")", "\n", ")", "(", "raw_actions", ")", "\n", "self", ".", "actions_model", "=", "tf", ".", "keras", ".", "Model", "(", "self", ".", "condition_inputs", ",", "actions", ")", "\n", "\n", "\n", "actions_for_fixed_latents", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "raw_actions", ":", "squash_bijector", ".", "forward", "(", "raw_actions", ")", "\n", ")", "(", "raw_actions_for_fixed_latents", ")", "\n", "self", ".", "actions_model_for_fixed_latents", "=", "tf", ".", "keras", ".", "Model", "(", "\n", "(", "*", "self", ".", "condition_inputs", ",", "self", ".", "latents_input", ")", ",", "\n", "actions_for_fixed_latents", ")", "\n", "\n", "deterministic_actions", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "shift", ":", "squash_bijector", ".", "forward", "(", "shift", ")", "\n", ")", "(", "shift", ")", "\n", "\n", "self", ".", "deterministic_actions_model", "=", "tf", ".", "keras", ".", "Model", "(", "\n", "self", ".", "condition_inputs", ",", "deterministic_actions", ")", "\n", "\n", "def", "log_pis_fn", "(", "inputs", ")", ":", "\n", "            ", "shift", ",", "log_scale_diag", ",", "actions", "=", "inputs", "\n", "base_distribution", "=", "tfp", ".", "distributions", ".", "MultivariateNormalDiag", "(", "\n", "loc", "=", "tf", ".", "zeros", "(", "output_shape", ")", ",", "\n", "scale_diag", "=", "tf", ".", "ones", "(", "output_shape", ")", ")", "\n", "bijector", "=", "tfp", ".", "bijectors", ".", "Chain", "(", "(", "\n", "squash_bijector", ",", "\n", "tfp", ".", "bijectors", ".", "Affine", "(", "\n", "shift", "=", "shift", ",", "\n", "scale_diag", "=", "tf", ".", "exp", "(", "log_scale_diag", ")", ")", ",", "\n", ")", ")", "\n", "distribution", "=", "(", "\n", "tfp", ".", "distributions", ".", "ConditionalTransformedDistribution", "(", "\n", "distribution", "=", "base_distribution", ",", "\n", "bijector", "=", "bijector", ")", ")", "\n", "\n", "log_pis", "=", "distribution", ".", "log_prob", "(", "actions", ")", "[", ":", ",", "None", "]", "\n", "return", "log_pis", "\n", "\n", "", "self", ".", "actions_input", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "output_shape", ")", "\n", "\n", "log_pis", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "log_pis_fn", ")", "(", "[", "shift", ",", "log_scale_diag", ",", "actions", "]", ")", "\n", "\n", "log_pis_for_action_input", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "log_pis_fn", ")", "(", "[", "shift", ",", "log_scale_diag", ",", "self", ".", "actions_input", "]", ")", "\n", "\n", "self", ".", "log_pis_model", "=", "tf", ".", "keras", ".", "Model", "(", "\n", "(", "*", "self", ".", "condition_inputs", ",", "self", ".", "actions_input", ")", ",", "\n", "log_pis_for_action_input", ")", "\n", "\n", "self", ".", "diagnostics_model", "=", "tf", ".", "keras", ".", "Model", "(", "\n", "self", ".", "condition_inputs", ",", "\n", "(", "shift", ",", "log_scale_diag", ",", "log_pis", ",", "raw_actions", ",", "actions", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy._shift_and_log_scale_diag_net": [[156, 158], ["None"], "methods", ["None"], ["", "def", "_shift_and_log_scale_diag_net", "(", "self", ",", "input_shapes", ",", "output_size", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.get_weights": [[159, 161], ["gaussian_policy.GaussianPolicy.actions_model.get_weights"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.get_weights"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "actions_model", ".", "get_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.set_weights": [[162, 164], ["gaussian_policy.GaussianPolicy.actions_model.set_weights"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.set_weights"], ["", "def", "set_weights", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "actions_model", ".", "set_weights", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.trainable_variables": [[165, 168], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable_variables", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "actions_model", ".", "trainable_variables", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.non_trainable_weights": [[169, 173], ["list", "set"], "methods", ["None"], ["", "@", "property", "\n", "def", "non_trainable_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Due to our nested model structure, we need to filter duplicates.\"\"\"", "\n", "return", "list", "(", "set", "(", "super", "(", "GaussianPolicy", ",", "self", ")", ".", "non_trainable_weights", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.actions": [[174, 180], ["gaussian_policy.GaussianPolicy.actions_model", "print", "gaussian_policy.GaussianPolicy.deterministic_actions_model"], "methods", ["None"], ["", "def", "actions", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "if", "self", ".", "_deterministic", ":", "\n", "            ", "print", "(", "\"deterministic\"", ")", "\n", "return", "self", ".", "deterministic_actions_model", "(", "conditions", ")", "\n", "\n", "", "return", "self", ".", "actions_model", "(", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.log_pis": [[181, 184], ["gaussian_policy.GaussianPolicy.log_pis_model"], "methods", ["None"], ["", "def", "log_pis", "(", "self", ",", "conditions", ",", "actions", ")", ":", "\n", "        ", "assert", "not", "self", ".", "_deterministic", ",", "self", ".", "_deterministic", "\n", "return", "self", ".", "log_pis_model", "(", "[", "*", "conditions", ",", "actions", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.actions_np": [[185, 187], ["super().actions_np"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.actions_np"], ["", "def", "actions_np", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "return", "super", "(", "GaussianPolicy", ",", "self", ")", ".", "actions_np", "(", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.log_pis_np": [[188, 191], ["gaussian_policy.GaussianPolicy.log_pis_model.predict"], "methods", ["None"], ["", "def", "log_pis_np", "(", "self", ",", "conditions", ",", "actions", ")", ":", "\n", "        ", "assert", "not", "self", ".", "_deterministic", ",", "self", ".", "_deterministic", "\n", "return", "self", ".", "log_pis_model", ".", "predict", "(", "[", "*", "conditions", ",", "actions", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.get_diagnostics": [[192, 221], ["gaussian_policy.GaussianPolicy.diagnostics_model.predict", "collections.OrderedDict", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.min", "numpy.max"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "\"\"\"Return diagnostic information of the policy.\n\n        Returns the mean, min, max, and standard deviation of means and\n        covariances.\n        \"\"\"", "\n", "(", "shifts_np", ",", "\n", "log_scale_diags_np", ",", "\n", "log_pis_np", ",", "\n", "raw_actions_np", ",", "\n", "actions_np", ")", "=", "self", ".", "diagnostics_model", ".", "predict", "(", "conditions", ")", "\n", "\n", "return", "OrderedDict", "(", "(", "\n", "(", "'shifts-mean'", ",", "np", ".", "mean", "(", "shifts_np", ")", ")", ",", "\n", "(", "'shifts-std'", ",", "np", ".", "std", "(", "shifts_np", ")", ")", ",", "\n", "\n", "(", "'log_scale_diags-mean'", ",", "np", ".", "mean", "(", "log_scale_diags_np", ")", ")", ",", "\n", "(", "'log_scale_diags-std'", ",", "np", ".", "std", "(", "log_scale_diags_np", ")", ")", ",", "\n", "\n", "(", "'-log-pis-mean'", ",", "np", ".", "mean", "(", "-", "log_pis_np", ")", ")", ",", "\n", "(", "'-log-pis-std'", ",", "np", ".", "std", "(", "-", "log_pis_np", ")", ")", ",", "\n", "\n", "(", "'raw-actions-mean'", ",", "np", ".", "mean", "(", "raw_actions_np", ")", ")", ",", "\n", "(", "'raw-actions-std'", ",", "np", ".", "std", "(", "raw_actions_np", ")", ")", ",", "\n", "\n", "(", "'actions-mean'", ",", "np", ".", "mean", "(", "actions_np", ")", ")", ",", "\n", "(", "'actions-std'", ",", "np", ".", "std", "(", "actions_np", ")", ")", ",", "\n", "(", "'actions-min'", ",", "np", ".", "min", "(", "actions_np", ")", ")", ",", "\n", "(", "'actions-max'", ",", "np", ".", "max", "(", "actions_np", ")", ")", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.FeedforwardGaussianPolicy.__init__": [[225, 236], ["gaussian_policy.FeedforwardGaussianPolicy._Serializable__initialize", "gaussian_policy.GaussianPolicy.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "hidden_layer_sizes", ",", "\n", "activation", "=", "'relu'", ",", "\n", "output_activation", "=", "'linear'", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_hidden_layer_sizes", "=", "hidden_layer_sizes", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_output_activation", "=", "output_activation", "\n", "\n", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "super", "(", "FeedforwardGaussianPolicy", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.FeedforwardGaussianPolicy._shift_and_log_scale_diag_net": [[237, 246], ["rl_with_videos.models.feedforward.feedforward_model"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.feedforward.feedforward_model"], ["", "def", "_shift_and_log_scale_diag_net", "(", "self", ",", "input_shapes", ",", "output_size", ")", ":", "\n", "        ", "shift_and_log_scale_diag_net", "=", "feedforward_model", "(", "\n", "input_shapes", "=", "input_shapes", ",", "\n", "hidden_layer_sizes", "=", "self", ".", "_hidden_layer_sizes", ",", "\n", "output_size", "=", "output_size", ",", "\n", "activation", "=", "self", ".", "_activation", ",", "\n", "output_activation", "=", "self", ".", "_output_activation", ")", "\n", "\n", "return", "shift_and_log_scale_diag_net", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.__init__": [[10, 24], ["replay_pool.ReplayPool.__init__", "int", "flexible_replay_pool.FlexibleReplayPool.add_fields"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.add_fields"], ["    ", "def", "__init__", "(", "self", ",", "max_size", ",", "fields_attrs", ")", ":", "\n", "        ", "super", "(", "FlexibleReplayPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "max_size", "=", "int", "(", "max_size", ")", "\n", "self", ".", "_max_size", "=", "max_size", "\n", "\n", "self", ".", "fields", "=", "{", "}", "\n", "self", ".", "fields_attrs", "=", "{", "}", "\n", "\n", "self", ".", "add_fields", "(", "fields_attrs", ")", "\n", "\n", "self", ".", "_pointer", "=", "0", "\n", "self", ".", "_size", "=", "0", "\n", "self", ".", "_samples_since_save", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.size": [[25, 28], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.field_names": [[29, 32], ["list", "flexible_replay_pool.FlexibleReplayPool.fields.keys"], "methods", ["None"], ["", "@", "property", "\n", "def", "field_names", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "fields", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.add_fields": [[33, 41], ["flexible_replay_pool.FlexibleReplayPool.fields_attrs.update", "fields_attrs.items", "field_attrs.get", "field_attrs.get."], "methods", ["None"], ["", "def", "add_fields", "(", "self", ",", "fields_attrs", ")", ":", "\n", "        ", "self", ".", "fields_attrs", ".", "update", "(", "fields_attrs", ")", "\n", "\n", "for", "field_name", ",", "field_attrs", "in", "fields_attrs", ".", "items", "(", ")", ":", "\n", "            ", "field_shape", "=", "(", "self", ".", "_max_size", ",", "*", "field_attrs", "[", "'shape'", "]", ")", "\n", "initializer", "=", "field_attrs", ".", "get", "(", "'initializer'", ",", "np", ".", "zeros", ")", "\n", "self", ".", "fields", "[", "field_name", "]", "=", "initializer", "(", "\n", "field_shape", ",", "dtype", "=", "field_attrs", "[", "'dtype'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool._advance": [[42, 46], ["min"], "methods", ["None"], ["", "", "def", "_advance", "(", "self", ",", "count", "=", "1", ")", ":", "\n", "        ", "self", ".", "_pointer", "=", "(", "self", ".", "_pointer", "+", "count", ")", "%", "self", ".", "_max_size", "\n", "self", ".", "_size", "=", "min", "(", "self", ".", "_size", "+", "count", ",", "self", ".", "_max_size", ")", "\n", "self", ".", "_samples_since_save", "+=", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.add_sample": [[47, 53], ["flexible_replay_pool.FlexibleReplayPool.add_samples", "sample.items"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_samples"], ["", "def", "add_sample", "(", "self", ",", "sample", ")", ":", "\n", "        ", "samples", "=", "{", "\n", "key", ":", "value", "[", "None", ",", "...", "]", "\n", "for", "key", ",", "value", "in", "sample", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "add_samples", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.add_samples": [[54, 69], ["list", "flexible_replay_pool.FlexibleReplayPool._advance", "samples.keys", "numpy.arange", "flexible_replay_pool.FlexibleReplayPool.fields_attrs[].get", "samples.get"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool._advance"], ["", "def", "add_samples", "(", "self", ",", "samples", ")", ":", "\n", "        ", "field_names", "=", "list", "(", "samples", ".", "keys", "(", ")", ")", "\n", "num_samples", "=", "samples", "[", "field_names", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "\n", "\n", "index", "=", "np", ".", "arange", "(", "\n", "self", ".", "_pointer", ",", "self", ".", "_pointer", "+", "num_samples", ")", "%", "self", ".", "_max_size", "\n", "\n", "for", "field_name", "in", "self", ".", "field_names", ":", "\n", "            ", "default_value", "=", "(", "\n", "self", ".", "fields_attrs", "[", "field_name", "]", ".", "get", "(", "'default_value'", ",", "0.0", ")", ")", "\n", "values", "=", "samples", ".", "get", "(", "field_name", ",", "default_value", ")", "\n", "assert", "values", ".", "shape", "[", "0", "]", "==", "num_samples", "\n", "self", ".", "fields", "[", "field_name", "]", "[", "index", "]", "=", "values", "\n", "\n", "", "self", ".", "_advance", "(", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.random_indices": [[70, 73], ["numpy.random.randint", "numpy.arange"], "methods", ["None"], ["", "def", "random_indices", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "_size", "==", "0", ":", "return", "np", ".", "arange", "(", "0", ",", "0", ")", "\n", "return", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "_size", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.random_batch": [[74, 78], ["flexible_replay_pool.FlexibleReplayPool.random_indices", "flexible_replay_pool.FlexibleReplayPool.batch_by_indices"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.random_indices", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices"], ["", "def", "random_batch", "(", "self", ",", "batch_size", ",", "field_name_filter", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "random_indices", "=", "self", ".", "random_indices", "(", "batch_size", ")", "\n", "return", "self", ".", "batch_by_indices", "(", "\n", "random_indices", ",", "field_name_filter", "=", "field_name_filter", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.last_n_batch": [[79, 85], ["flexible_replay_pool.FlexibleReplayPool.batch_by_indices", "numpy.arange", "min"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices"], ["", "def", "last_n_batch", "(", "self", ",", "last_n", ",", "field_name_filter", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "last_n_indices", "=", "np", ".", "arange", "(", "\n", "self", ".", "_pointer", "-", "min", "(", "self", ".", "size", ",", "last_n", ")", ",", "self", ".", "_pointer", "\n", ")", "%", "self", ".", "_max_size", "\n", "return", "self", ".", "batch_by_indices", "(", "\n", "last_n_indices", ",", "field_name_filter", "=", "field_name_filter", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.filter_fields": [[86, 105], ["isinstance", "isinstance", "flexible_replay_pool.FlexibleReplayPool.filter_fields.filter_fn"], "methods", ["None"], ["", "def", "filter_fields", "(", "self", ",", "field_names", ",", "field_name_filter", ")", ":", "\n", "        ", "if", "isinstance", "(", "field_name_filter", ",", "str", ")", ":", "\n", "            ", "field_name_filter", "=", "[", "field_name_filter", "]", "\n", "\n", "", "if", "isinstance", "(", "field_name_filter", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "field_name_list", "=", "field_name_filter", "\n", "\n", "def", "filter_fn", "(", "field_name", ")", ":", "\n", "                ", "return", "field_name", "in", "field_name_list", "\n", "\n", "", "", "else", ":", "\n", "            ", "filter_fn", "=", "field_name_filter", "\n", "\n", "", "filtered_field_names", "=", "[", "\n", "field_name", "for", "field_name", "in", "field_names", "\n", "if", "filter_fn", "(", "field_name", ")", "\n", "]", "\n", "\n", "return", "filtered_field_names", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.batch_by_indices": [[106, 120], ["numpy.any", "ValueError", "flexible_replay_pool.FlexibleReplayPool.filter_fields"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.filter_fields"], ["", "def", "batch_by_indices", "(", "self", ",", "indices", ",", "field_name_filter", "=", "None", ")", ":", "\n", "        ", "if", "np", ".", "any", "(", "indices", "%", "self", ".", "_max_size", ">", "self", ".", "size", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Tried to retrieve batch with indices greater than current\"", "\n", "\" size\"", ")", "\n", "\n", "", "field_names", "=", "self", ".", "field_names", "\n", "if", "field_name_filter", "is", "not", "None", ":", "\n", "            ", "field_names", "=", "self", ".", "filter_fields", "(", "\n", "field_names", ",", "field_name_filter", ")", "\n", "\n", "", "return", "{", "\n", "field_name", ":", "self", ".", "fields", "[", "field_name", "]", "[", "indices", "]", "\n", "for", "field_name", "in", "field_names", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.save_latest_experience": [[122, 129], ["flexible_replay_pool.FlexibleReplayPool.last_n_batch", "gzip.open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.last_n_batch"], ["", "def", "save_latest_experience", "(", "self", ",", "pickle_path", ")", ":", "\n", "        ", "latest_samples", "=", "self", ".", "last_n_batch", "(", "self", ".", "_samples_since_save", ")", "\n", "\n", "with", "gzip", ".", "open", "(", "pickle_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "latest_samples", ",", "f", ")", "\n", "\n", "", "self", ".", "_samples_since_save", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.load_experience": [[130, 141], ["pickle.load.items", "flexible_replay_pool.FlexibleReplayPool.add_samples", "gzip.open", "pickle.load", "list", "pickle.load.keys"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_samples"], ["", "def", "load_experience", "(", "self", ",", "experience_path", ")", ":", "\n", "        ", "with", "gzip", ".", "open", "(", "experience_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "latest_samples", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "key", "=", "list", "(", "latest_samples", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "num_samples", "=", "latest_samples", "[", "key", "]", ".", "shape", "[", "0", "]", "\n", "for", "field_name", ",", "data", "in", "latest_samples", ".", "items", "(", ")", ":", "\n", "            ", "assert", "data", ".", "shape", "[", "0", "]", "==", "num_samples", ",", "data", ".", "shape", "\n", "\n", "", "self", ".", "add_samples", "(", "latest_samples", ")", "\n", "self", ".", "_samples_since_save", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.__getstate__": [[142, 150], ["flexible_replay_pool.FlexibleReplayPool.__dict__.copy"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "state", "[", "'fields'", "]", "=", "{", "\n", "field_name", ":", "self", ".", "fields", "[", "field_name", "]", "[", ":", "self", ".", "size", "]", "\n", "for", "field_name", "in", "self", ".", "field_names", "\n", "}", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.__setstate__": [[151, 162], ["state[].keys", "numpy.concatenate", "numpy.zeros"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "state", "[", "'_size'", "]", "<", "state", "[", "'_max_size'", "]", ":", "\n", "            ", "pad_size", "=", "state", "[", "'_max_size'", "]", "-", "state", "[", "'_size'", "]", "\n", "for", "field_name", "in", "state", "[", "'fields'", "]", ".", "keys", "(", ")", ":", "\n", "                ", "field_shape", "=", "state", "[", "'fields_attrs'", "]", "[", "field_name", "]", "[", "'shape'", "]", "\n", "state", "[", "'fields'", "]", "[", "field_name", "]", "=", "np", ".", "concatenate", "(", "(", "\n", "state", "[", "'fields'", "]", "[", "field_name", "]", ",", "\n", "np", ".", "zeros", "(", "(", "pad_size", ",", "*", "field_shape", ")", ")", "\n", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "self", ".", "__dict__", "=", "state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.extra_policy_info_replay_pool.ExtraPolicyInfoReplayPool.__init__": [[5, 20], ["simple_replay_pool.SimpleReplayPool.__init__", "extra_policy_info_replay_pool.ExtraPolicyInfoReplayPool.add_fields"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.add_fields"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ExtraPolicyInfoReplayPool", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "fields", "=", "{", "\n", "'raw_actions'", ":", "{", "\n", "'shape'", ":", "self", ".", "_action_space", ".", "shape", ",", "\n", "'dtype'", ":", "'float32'", "\n", "}", ",", "\n", "'log_pis'", ":", "{", "\n", "'shape'", ":", "(", "1", ",", ")", ",", "\n", "'dtype'", ":", "'float32'", "\n", "}", "\n", "}", "\n", "\n", "self", ".", "add_fields", "(", "fields", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.simple_replay_pool.SimpleReplayPool.__init__": [[37, 71], ["simple_replay_pool.normalize_observation_fields", "normalize_observation_fields.update", "flexible_replay_pool.FlexibleReplayPool.__init__", "normalize_observation_fields.items"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.simple_replay_pool.normalize_observation_fields", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "observation_space", ",", "action_space", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_observation_space", "=", "observation_space", "\n", "self", ".", "_action_space", "=", "action_space", "\n", "\n", "observation_fields", "=", "normalize_observation_fields", "(", "observation_space", ")", "\n", "# It's a bit memory inefficient to save the observations twice,", "\n", "# but it makes the code *much* easier since you no longer have", "\n", "# to worry about termination conditions.", "\n", "observation_fields", ".", "update", "(", "{", "\n", "'next_'", "+", "key", ":", "value", "\n", "for", "key", ",", "value", "in", "observation_fields", ".", "items", "(", ")", "\n", "}", ")", "\n", "\n", "fields", "=", "{", "\n", "**", "observation_fields", ",", "\n", "**", "{", "\n", "'actions'", ":", "{", "\n", "'shape'", ":", "self", ".", "_action_space", ".", "shape", ",", "\n", "'dtype'", ":", "'float32'", "\n", "}", ",", "\n", "'rewards'", ":", "{", "\n", "'shape'", ":", "(", "1", ",", ")", ",", "\n", "'dtype'", ":", "'float32'", "\n", "}", ",", "\n", "# self.terminals[i] = a terminal was received at time i", "\n", "'terminals'", ":", "{", "\n", "'shape'", ":", "(", "1", ",", ")", ",", "\n", "'dtype'", ":", "'bool'", "\n", "}", ",", "\n", "}", "\n", "}", "\n", "\n", "super", "(", "SimpleReplayPool", ",", "self", ")", ".", "__init__", "(", "\n", "*", "args", ",", "fields_attrs", "=", "fields", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.simple_replay_pool.SimpleReplayPool.add_samples": [[72, 101], ["collections.defaultdict", "collections.defaultdict", "samples.update", "super().add_samples", "isinstance", "super().add_samples", "observation.items", "next_observation.items", "dict_observations[].append", "dict_next_observations[].append", "numpy.array", "numpy.array", "collections.defaultdict.items", "collections.defaultdict.items"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_samples", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_samples"], ["", "def", "add_samples", "(", "self", ",", "samples", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "self", ".", "_observation_space", ",", "Dict", ")", ":", "\n", "            ", "return", "super", "(", "SimpleReplayPool", ",", "self", ")", ".", "add_samples", "(", "samples", ")", "\n", "\n", "", "dict_observations", "=", "defaultdict", "(", "list", ")", "\n", "for", "observation", "in", "samples", "[", "'observations'", "]", ":", "\n", "            ", "for", "key", ",", "value", "in", "observation", ".", "items", "(", ")", ":", "\n", "                ", "dict_observations", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "", "dict_next_observations", "=", "defaultdict", "(", "list", ")", "\n", "for", "next_observation", "in", "samples", "[", "'next_observations'", "]", ":", "\n", "            ", "for", "key", ",", "value", "in", "next_observation", ".", "items", "(", ")", ":", "\n", "                ", "dict_next_observations", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "", "samples", ".", "update", "(", "\n", "**", "{", "\n", "f'observations.{observation_key}'", ":", "np", ".", "array", "(", "values", ")", "\n", "for", "observation_key", ",", "values", "in", "dict_observations", ".", "items", "(", ")", "\n", "}", ",", "\n", "**", "{", "\n", "f'next_observations.{observation_key}'", ":", "np", ".", "array", "(", "values", ")", "\n", "for", "observation_key", ",", "values", "in", "dict_next_observations", ".", "items", "(", ")", "\n", "}", ",", "\n", ")", "\n", "\n", "del", "samples", "[", "'observations'", "]", "\n", "del", "samples", "[", "'next_observations'", "]", "\n", "\n", "return", "super", "(", "SimpleReplayPool", ",", "self", ")", ".", "add_samples", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.simple_replay_pool.SimpleReplayPool.batch_by_indices": [[102, 140], ["numpy.concatenate", "numpy.concatenate", "isinstance", "super().batch_by_indices", "tuple", "simple_replay_pool.SimpleReplayPool.filter_fields", "simple_replay_pool.SimpleReplayPool._observation_space.spaces.keys", "batch.keys"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.filter_fields"], ["", "def", "batch_by_indices", "(", "self", ",", "\n", "indices", ",", "\n", "field_name_filter", "=", "None", ",", "\n", "observation_keys", "=", "None", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "self", ".", "_observation_space", ",", "Dict", ")", ":", "\n", "            ", "return", "super", "(", "SimpleReplayPool", ",", "self", ")", ".", "batch_by_indices", "(", "\n", "indices", ",", "field_name_filter", "=", "field_name_filter", ")", "\n", "\n", "", "batch", "=", "{", "\n", "field_name", ":", "self", ".", "fields", "[", "field_name", "]", "[", "indices", "]", "\n", "for", "field_name", "in", "self", ".", "field_names", "\n", "}", "\n", "\n", "if", "observation_keys", "is", "None", ":", "\n", "            ", "observation_keys", "=", "tuple", "(", "self", ".", "_observation_space", ".", "spaces", ".", "keys", "(", ")", ")", "\n", "\n", "", "observations", "=", "np", ".", "concatenate", "(", "[", "\n", "batch", "[", "'observations.{}'", ".", "format", "(", "key", ")", "]", "\n", "for", "key", "in", "observation_keys", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "next_observations", "=", "np", ".", "concatenate", "(", "[", "\n", "batch", "[", "'next_observations.{}'", ".", "format", "(", "key", ")", "]", "\n", "for", "key", "in", "observation_keys", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "batch", "[", "'observations'", "]", "=", "observations", "\n", "batch", "[", "'next_observations'", "]", "=", "next_observations", "\n", "\n", "if", "field_name_filter", "is", "not", "None", ":", "\n", "            ", "filtered_fields", "=", "self", ".", "filter_fields", "(", "\n", "batch", ".", "keys", "(", ")", ",", "field_name_filter", ")", "\n", "batch", "=", "{", "\n", "field_name", ":", "batch", "[", "field_name", "]", "\n", "for", "field_name", "in", "filtered_fields", "\n", "}", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.simple_replay_pool.SimpleReplayPool.terminate_episode": [[141, 143], ["None"], "methods", ["None"], ["", "def", "terminate_episode", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.simple_replay_pool.normalize_observation_fields": [[9, 34], ["isinstance", "isinstance", "simple_replay_pool.normalize_observation_fields", "NotImplementedError", "observation_space.spaces.items", "field.items", "type"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.simple_replay_pool.normalize_observation_fields"], ["def", "normalize_observation_fields", "(", "observation_space", ",", "name", "=", "'observations'", ")", ":", "\n", "    ", "if", "isinstance", "(", "observation_space", ",", "Dict", ")", ":", "\n", "        ", "fields", "=", "[", "\n", "normalize_observation_fields", "(", "child_observation_space", ",", "name", ")", "\n", "for", "name", ",", "child_observation_space", "\n", "in", "observation_space", ".", "spaces", ".", "items", "(", ")", "\n", "]", "\n", "fields", "=", "{", "\n", "'observations.{}'", ".", "format", "(", "name", ")", ":", "value", "\n", "for", "field", "in", "fields", "\n", "for", "name", ",", "value", "in", "field", ".", "items", "(", ")", "\n", "}", "\n", "", "elif", "isinstance", "(", "observation_space", ",", "(", "Box", ",", "Discrete", ")", ")", ":", "\n", "        ", "fields", "=", "{", "\n", "name", ":", "{", "\n", "'shape'", ":", "observation_space", ".", "shape", ",", "\n", "'dtype'", ":", "observation_space", ".", "dtype", ",", "\n", "}", "\n", "}", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"Observation space of type '{}' not supported.\"", "\n", "\"\"", ".", "format", "(", "type", "(", "observation_space", ")", ")", ")", "\n", "\n", "", "return", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.active_replay_pool.ActiveReplayPool.__init__": [[5, 16], ["simple_replay_pool.SimpleReplayPool.__init__", "active_replay_pool.ActiveReplayPool.add_fields"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.flexible_replay_pool.FlexibleReplayPool.add_fields"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ActiveReplayPool", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "active_fields", "=", "{", "\n", "'is_goal'", ":", "{", "\n", "'shape'", ":", "(", "1", ",", ")", ",", "\n", "'dtype'", ":", "'bool'", "\n", "}", ",", "\n", "}", "\n", "\n", "self", ".", "add_fields", "(", "active_fields", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.__init__": [[18, 31], ["replay_pool.ReplayPool.__init__", "int", "collections.deque", "collections.deque"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "observation_space", ",", "\n", "action_space", ",", "\n", "max_size", ")", ":", "\n", "        ", "super", "(", "TrajectoryReplayPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "max_size", "=", "int", "(", "max_size", ")", "\n", "self", ".", "_max_size", "=", "max_size", "\n", "\n", "self", ".", "_trajectories", "=", "deque", "(", "maxlen", "=", "max_size", ")", "\n", "self", ".", "_trajectory_lengths", "=", "deque", "(", "maxlen", "=", "max_size", ")", "\n", "self", ".", "_num_samples", "=", "0", "\n", "self", ".", "_trajectories_since_save", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.num_trajectories": [[32, 35], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_trajectories", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_trajectories", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.size": [[36, 39], ["sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "_trajectory_lengths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.num_samples": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_samples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_paths": [[44, 51], ["len", "next", "iter", "trajectory.keys"], "methods", ["None"], ["", "def", "add_paths", "(", "self", ",", "trajectories", ")", ":", "\n", "        ", "self", ".", "_trajectories", "+=", "trajectories", "\n", "self", ".", "_trajectory_lengths", "+=", "[", "\n", "trajectory", "[", "next", "(", "iter", "(", "trajectory", ".", "keys", "(", ")", ")", ")", "]", ".", "shape", "[", "0", "]", "\n", "for", "trajectory", "in", "trajectories", "\n", "]", "\n", "self", ".", "_trajectories_since_save", "+=", "len", "(", "trajectories", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_path": [[52, 54], ["trajectory_replay_pool.TrajectoryReplayPool.add_paths"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_paths"], ["", "def", "add_path", "(", "self", ",", "trajectory", ")", ":", "\n", "        ", "self", ".", "add_paths", "(", "[", "trajectory", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_sample": [[55, 58], ["NotImplementedError"], "methods", ["None"], ["", "def", "add_sample", "(", "self", ",", "sample", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "f\"{self.__class__.__name__} only supports adding full paths at\"", "\n", "\" once.\"", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_samples": [[60, 63], ["NotImplementedError"], "methods", ["None"], ["", "def", "add_samples", "(", "self", ",", "samples", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "f\"{self.__class__.__name__} only supports adding full paths at\"", "\n", "\" once.\"", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices": [[65, 85], ["len", "enumerate", "len", "len", "numpy.empty", "episode.items", "trajectories[].items"], "methods", ["None"], ["", "def", "batch_by_indices", "(", "self", ",", "\n", "episode_indices", ",", "\n", "step_indices", ",", "\n", "field_name_filter", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "episode_indices", ")", "==", "len", "(", "step_indices", ")", "\n", "\n", "batch_size", "=", "len", "(", "episode_indices", ")", "\n", "trajectories", "=", "[", "self", ".", "_trajectories", "[", "i", "]", "for", "i", "in", "episode_indices", "]", "\n", "\n", "batch", "=", "{", "\n", "field_name", ":", "np", ".", "empty", "(", "\n", "(", "batch_size", ",", "*", "values", ".", "shape", "[", "1", ":", "]", ")", ",", "dtype", "=", "values", ".", "dtype", ")", "\n", "for", "field_name", ",", "values", "in", "trajectories", "[", "0", "]", ".", "items", "(", ")", "\n", "}", "\n", "\n", "for", "i", ",", "episode", "in", "enumerate", "(", "trajectories", ")", ":", "\n", "            ", "for", "field_name", ",", "episode_values", "in", "episode", ".", "items", "(", ")", ":", "\n", "                ", "batch", "[", "field_name", "]", "[", "i", "]", "=", "episode_values", "[", "step_indices", "[", "i", "]", "]", "\n", "\n", "", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.random_batch": [[86, 114], ["len", "numpy.array", "rl_with_videos.utils.numpy.softmax", "numpy.random.choice", "next", "numpy.array", "trajectory_replay_pool.random_int_with_variable_range", "trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices", "numpy.sum", "numpy.arange", "iter", "numpy.zeros_like", "trajectory_replay_pool.TrajectoryReplayPool._trajectories[].keys"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.utils.numpy.softmax", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.random_int_with_variable_range", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices"], ["", "def", "random_batch", "(", "self", ",", "batch_size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "num_trajectories", "=", "len", "(", "self", ".", "_trajectories", ")", "\n", "if", "num_trajectories", "<", "1", ":", "\n", "            ", "return", "{", "}", "\n", "\n", "", "trajectory_lengths", "=", "np", ".", "array", "(", "self", ".", "_trajectory_lengths", ")", "\n", "trajectory_weights", "=", "trajectory_lengths", "/", "np", ".", "sum", "(", "trajectory_lengths", ")", "\n", "trajectory_probabilities", "=", "softmax", "(", "trajectory_weights", ")", "\n", "\n", "trajectory_indices", "=", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "num_trajectories", ")", ",", "\n", "size", "=", "batch_size", ",", "\n", "replace", "=", "True", ",", "\n", "p", "=", "trajectory_probabilities", ")", "\n", "first_key", "=", "next", "(", "iter", "(", "\n", "self", ".", "_trajectories", "[", "trajectory_indices", "[", "0", "]", "]", ".", "keys", "(", ")", ")", ")", "\n", "trajectory_lengths", "=", "np", ".", "array", "(", "[", "\n", "self", ".", "_trajectories", "[", "trajectory_index", "]", "[", "first_key", "]", ".", "shape", "[", "0", "]", "\n", "for", "trajectory_index", "in", "trajectory_indices", "\n", "]", ")", "\n", "\n", "step_indices", "=", "random_int_with_variable_range", "(", "\n", "np", ".", "zeros_like", "(", "trajectory_lengths", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "trajectory_lengths", ")", "\n", "\n", "batch", "=", "self", ".", "batch_by_indices", "(", "trajectory_indices", ",", "step_indices", ")", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.last_n_batch": [[115, 146], ["len", "range", "trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices", "min", "list", "range", "list", "trajectory.keys"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices"], ["", "def", "last_n_batch", "(", "self", ",", "last_n", ",", "field_name_filter", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "num_trajectories", "=", "len", "(", "self", ".", "_trajectories", ")", "\n", "if", "num_trajectories", "<", "1", ":", "\n", "            ", "return", "{", "}", "\n", "\n", "", "trajectory_indices", "=", "[", "]", "\n", "step_indices", "=", "[", "]", "\n", "\n", "trajectory_lengths", "=", "0", "\n", "for", "trajectory_index", "in", "range", "(", "num_trajectories", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "trajectory", "=", "self", ".", "_trajectories", "[", "trajectory_index", "]", "\n", "trajectory_length", "=", "trajectory", "[", "list", "(", "trajectory", ".", "keys", "(", ")", ")", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "\n", "\n", "steps_from_this_episode", "=", "min", "(", "trajectory_length", ",", "last_n", "-", "trajectory_lengths", ")", "\n", "step_indices", "+=", "list", "(", "range", "(", "\n", "trajectory_length", "-", "1", ",", "\n", "trajectory_length", "-", "steps_from_this_episode", "-", "1", ",", "\n", "-", "1", ")", ")", "\n", "trajectory_indices", "+=", "[", "trajectory_index", "]", "*", "steps_from_this_episode", "\n", "\n", "trajectory_lengths", "+=", "trajectory_length", "\n", "\n", "if", "trajectory_lengths", ">=", "last_n", ":", "\n", "                ", "break", "\n", "\n", "", "", "trajectory_indices", "=", "trajectory_indices", "[", ":", ":", "-", "1", "]", "\n", "step_indices", "=", "step_indices", "[", ":", ":", "-", "1", "]", "\n", "\n", "batch", "=", "self", ".", "batch_by_indices", "(", "trajectory_indices", ",", "step_indices", ")", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.save_latest_experience": [[147, 160], ["max", "tuple", "itertools.islice", "gzip.open", "pickle.dump"], "methods", ["None"], ["", "def", "save_latest_experience", "(", "self", ",", "pickle_path", ")", ":", "\n", "# deque doesn't support direct slicing, thus need to use islice", "\n", "        ", "num_trajectories", "=", "self", ".", "num_trajectories", "\n", "start_index", "=", "max", "(", "num_trajectories", "-", "self", ".", "_trajectories_since_save", ",", "0", ")", "\n", "end_index", "=", "num_trajectories", "\n", "\n", "latest_trajectories", "=", "tuple", "(", "islice", "(", "\n", "self", ".", "_trajectories", ",", "start_index", ",", "end_index", ")", ")", "\n", "\n", "with", "gzip", ".", "open", "(", "pickle_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "latest_trajectories", ",", "f", ")", "\n", "\n", "", "self", ".", "_trajectories_since_save", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.load_experience": [[161, 167], ["trajectory_replay_pool.TrajectoryReplayPool.add_paths", "gzip.open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_paths"], ["", "def", "load_experience", "(", "self", ",", "experience_path", ")", ":", "\n", "        ", "with", "gzip", ".", "open", "(", "experience_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "latest_trajectories", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "add_paths", "(", "latest_trajectories", ")", "\n", "self", ".", "_trajectories_since_save", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.random_int_with_variable_range": [[12, 15], ["numpy.floor().astype", "numpy.floor", "numpy.random.uniform"], "function", ["None"], ["def", "random_int_with_variable_range", "(", "mins", ",", "maxs", ")", ":", "\n", "    ", "result", "=", "np", ".", "floor", "(", "np", ".", "random", ".", "uniform", "(", "mins", ",", "maxs", ")", ")", ".", "astype", "(", "int", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.replay_pool.ReplayPool.add_sample": [[7, 11], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "add_sample", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"Add a transition tuple.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.replay_pool.ReplayPool.terminate_episode": [[12, 16], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "terminate_episode", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clean up pool after episode termination.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.replay_pool.ReplayPool.size": [[17, 21], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "size", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.replay_pool.ReplayPool.add_path": [[22, 35], ["replay_pool.ReplayPool.add_samples", "replay_pool.ReplayPool.terminate_episode"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_samples", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.union_pool.UnionPool.terminate_episode"], ["", "def", "add_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Add a rollout to the replay pool.\n\n        This default implementation naively goes through every step, but you\n        may want to optimize this.\n\n        NOTE: You should NOT call \"terminate_episode\" after calling add_path.\n        It's assumed that this function handles the episode termination.\n\n        :param path: Dict like one outputted by railrl.samplers.util.rollout\n        \"\"\"", "\n", "self", ".", "add_samples", "(", "path", ")", "\n", "self", ".", "terminate_episode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.replay_pool.ReplayPool.random_batch": [[36, 40], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "random_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Return a random batch of size `batch_size`.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.action_free_replay_pool.ActionFreeReplayPool.__init__": [[7, 90], ["print", "simple_replay_pool.normalize_observation_fields", "simple_replay_pool.normalize_observation_fields.update", "flexible_replay_pool.FlexibleReplayPool.__init__", "print", "action_free_replay_pool.ActionFreeReplayPool.load_experience", "print", "action_free_replay_pool.ActionFreeReplayPool.fields.pop", "print", "range", "exit", "print", "action_free_replay_pool.ActionFreeReplayPool.fields.keys", "action_free_replay_pool.ActionFreeReplayPool.fields.pop", "type", "cv2.imwrite", "simple_replay_pool.normalize_observation_fields.items", "np.reshape"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.simple_replay_pool.normalize_observation_fields", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.load_experience"], ["    ", "def", "__init__", "(", "self", ",", "\n", "observation_space", ",", "\n", "action_space", ",", "\n", "data_path", "=", "None", ",", "\n", "*", "args", ",", "\n", "extra_fields", "=", "None", ",", "\n", "remove_rewards", "=", "False", ",", "\n", "use_ground_truth_actions", "=", "False", ",", "\n", "max_demo_length", "=", "-", "1", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "extra_fields", "=", "extra_fields", "or", "{", "}", "\n", "#        action_space = environment.action_space", "\n", "#        assert isinstance(observation_space, Dict), observation_space", "\n", "\n", "#        self._environment = environment", "\n", "self", ".", "_observation_space", "=", "observation_space", "\n", "self", ".", "_action_space", "=", "action_space", "\n", "print", "(", "\"self._observation_space\"", ",", "self", ".", "_observation_space", ")", "\n", "\n", "observation_fields", "=", "normalize_observation_fields", "(", "observation_space", ")", "\n", "# It's a bit memory inefficient to save the observations twice,", "\n", "# but it makes the code *much* easier since you no longer have", "\n", "# to worry about termination conditions.", "\n", "observation_fields", ".", "update", "(", "{", "\n", "'next_'", "+", "key", ":", "value", "\n", "for", "key", ",", "value", "in", "observation_fields", ".", "items", "(", ")", "\n", "}", ")", "\n", "\n", "fields", "=", "{", "\n", "**", "observation_fields", ",", "\n", "**", "{", "\n", "'actions'", ":", "{", "\n", "'shape'", ":", "self", ".", "_action_space", ".", "shape", ",", "\n", "'dtype'", ":", "'float32'", "\n", "}", ",", "\n", "'rewards'", ":", "{", "\n", "'shape'", ":", "(", "1", ",", ")", ",", "\n", "'dtype'", ":", "'float32'", "\n", "}", ",", "\n", "# self.terminals[i] = a terminal was received at time i", "\n", "'terminals'", ":", "{", "\n", "'shape'", ":", "(", "1", ",", ")", ",", "\n", "'dtype'", ":", "'bool'", "\n", "}", ",", "\n", "}", "\n", "}", "\n", "\n", "super", "(", "ActionFreeReplayPool", ",", "self", ")", ".", "__init__", "(", "\n", "*", "args", ",", "fields_attrs", "=", "fields", ",", "**", "kwargs", ")", "\n", "print", "(", "\"about to load replay pool\"", ")", "\n", "self", ".", "load_experience", "(", "data_path", ")", "\n", "print", "(", "\"loaded experience of size:\"", ",", "self", ".", "size", ")", "\n", "if", "not", "use_ground_truth_actions", ":", "\n", "            ", "self", ".", "fields", ".", "pop", "(", "'actions'", ")", "\n", "#        self.fields_flat.pop(('actions',))", "\n", "\n", "", "if", "False", ":", "\n", "            ", "num_images", "=", "10000", "\n", "obs", "=", "self", ".", "fields", "[", "\"observations\"", "]", "\n", "print", "(", "\"obs:\"", ",", "obs", ".", "shape", ",", "type", "(", "obs", ")", ")", "\n", "import", "cv2", "\n", "import", "numpy", "as", "np", "\n", "base_out_path", "=", "\"/scratch/karls/pac_cyclegan_10k\"", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "im", "=", "np", ".", "reshape", "(", "obs", "[", "i", "*", "num_images", "//", "obs", ".", "shape", "[", "0", "]", ",", ":", "]", ",", "(", "48", ",", "48", ",", "3", ")", ")", "*", "255", "\n", "if", "i", "%", "10", "==", "0", ":", "\n", "                    ", "path", "=", "base_out_path", "+", "\"/testB/\"", "\n", "", "else", ":", "\n", "                    ", "path", "=", "base_out_path", "+", "\"/trainB/\"", "\n", "", "path", "=", "path", "+", "\"{:06d}.jpg\"", ".", "format", "(", "i", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "path", ",", "im", ")", "\n", "\n", "", "exit", "(", ")", "\n", "\n", "", "if", "max_demo_length", "!=", "-", "1", "and", "max_demo_length", "<", "self", ".", "fields", "[", "'observations'", "]", ".", "shape", "[", "0", "]", "and", "max_demo_length", "<", "self", ".", "_size", ":", "\n", "            ", "print", "(", "\"going from size {} or {} to size {}\"", ".", "format", "(", "self", ".", "fields", "[", "'observations'", "]", ".", "shape", "[", "0", "]", ",", "self", ".", "_size", ",", "max_demo_length", ")", ")", "\n", "for", "k", "in", "self", ".", "fields", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "fields", "[", "k", "]", "=", "self", ".", "fields", "[", "k", "]", "[", "self", ".", "_size", "-", "max_demo_length", ":", "self", ".", "_size", "]", "\n", "", "self", ".", "_size", "=", "max_demo_length", "\n", "\n", "", "if", "remove_rewards", ":", "\n", "            ", "self", ".", "fields", ".", "pop", "(", "'rewards'", ")", "\n", "#            self.fields_flat.pop(('rewards',))", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.action_free_replay_pool.ActionFreeReplayPool.add_sample": [[96, 98], ["None"], "methods", ["None"], ["def", "add_sample", "(", "self", ",", "sample", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.action_free_replay_pool.ActionFreeReplayPool.add_path": [[99, 101], ["None"], "methods", ["None"], ["", "def", "add_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.union_pool.UnionPool.__init__": [[7, 13], ["numpy.array", "sum"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pools", ")", ":", "\n", "        ", "pool_sizes", "=", "np", ".", "array", "(", "[", "b", ".", "size", "for", "b", "in", "pools", "]", ")", "\n", "self", ".", "_total_size", "=", "sum", "(", "pool_sizes", ")", "\n", "self", ".", "_normalized_pool_sizes", "=", "pool_sizes", "/", "self", ".", "_total_size", "\n", "\n", "self", ".", "pools", "=", "pools", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.union_pool.UnionPool.add_sample": [[14, 16], ["None"], "methods", ["None"], ["", "def", "add_sample", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.union_pool.UnionPool.terminate_episode": [[17, 19], ["None"], "methods", ["None"], ["", "def", "terminate_episode", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.union_pool.UnionPool.size": [[20, 23], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_total_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.union_pool.UnionPool.add_path": [[24, 26], ["None"], "methods", ["None"], ["", "def", "add_path", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.union_pool.UnionPool.random_batch": [[27, 45], ["partial_batch_sizes.astype.astype.astype", "partial_batches[].keys", "sum", "pool.random_batch", "numpy.concatenate", "zip", "union_pool.UnionPool.random_batch.all_values"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.random_batch"], ["", "def", "random_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "\n", "# TODO: Hack", "\n", "        ", "partial_batch_sizes", "=", "self", ".", "_normalized_pool_sizes", "*", "batch_size", "\n", "partial_batch_sizes", "=", "partial_batch_sizes", ".", "astype", "(", "int", ")", "\n", "partial_batch_sizes", "[", "0", "]", "=", "batch_size", "-", "sum", "(", "partial_batch_sizes", "[", "1", ":", "]", ")", "\n", "\n", "partial_batches", "=", "[", "\n", "pool", ".", "random_batch", "(", "partial_batch_size", ")", "for", "pool", ",", "\n", "partial_batch_size", "in", "zip", "(", "self", ".", "pools", ",", "partial_batch_sizes", ")", "\n", "]", "\n", "\n", "def", "all_values", "(", "key", ")", ":", "\n", "            ", "return", "[", "partial_batch", "[", "key", "]", "for", "partial_batch", "in", "partial_batches", "]", "\n", "\n", "", "keys", "=", "partial_batches", "[", "0", "]", ".", "keys", "(", ")", "\n", "\n", "return", "{", "key", ":", "np", ".", "concatenate", "(", "all_values", "(", "key", ")", ",", "axis", "=", "0", ")", "for", "key", "in", "keys", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.utils.get_replay_pool_from_variant": [[25, 38], ["copy.deepcopy"], "function", ["None"], ["        ", "return", "help_string", "+", "\" Passed to `ray.init`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Cpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Gpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resources'", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.value_functions.vanilla.create_feedforward_Q_function": [[6, 25], ["print", "rl_with_videos.models.feedforward.feedforward_model"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.feedforward.feedforward_model"], ["def", "create_feedforward_Q_function", "(", "observation_shape", ",", "\n", "action_shape", ",", "\n", "*", "args", ",", "\n", "observation_preprocessor", "=", "None", ",", "\n", "name", "=", "'feedforward_Q'", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "input_shapes", "=", "(", "observation_shape", ",", "action_shape", ")", "\n", "preprocessors", "=", "(", "observation_preprocessor", ",", "None", ")", "\n", "print", "(", "\"preprocessors:\"", ",", "preprocessors", ")", "\n", "\n", "q", "=", "feedforward_model", "(", "\n", "input_shapes", ",", "\n", "*", "args", ",", "\n", "output_size", "=", "1", ",", "\n", "preprocessors", "=", "preprocessors", ",", "\n", "name", "=", "name", ",", "\n", "**", "kwargs", ")", "\n", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.value_functions.vanilla.create_feedforward_V_function": [[26, 39], ["rl_with_videos.models.feedforward.feedforward_model"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.feedforward.feedforward_model"], ["", "def", "create_feedforward_V_function", "(", "observation_shape", ",", "\n", "*", "args", ",", "\n", "observation_preprocessor", "=", "None", ",", "\n", "name", "=", "'feedforward_V'", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "input_shapes", "=", "(", "observation_shape", ",", ")", "\n", "preprocessors", "=", "(", "observation_preprocessor", ",", "None", ")", "\n", "return", "feedforward_model", "(", "\n", "input_shapes", ",", "\n", "*", "args", ",", "\n", "output_size", "=", "1", ",", "\n", "preprocessors", "=", "preprocessors", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.value_functions.value_function.SumQFunction.__init__": [[8, 28], ["value_function.SumQFunction._Serializable__initialize", "tensorflow.placeholder", "tensorflow.placeholder", "value_function.SumQFunction.output_for", "locals", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.value_functions.value_function.SumQFunction.output_for"], ["    ", "def", "__init__", "(", "self", ",", "\n", "observation_shape", ",", "\n", "action_shape", ",", "\n", "q_functions", ")", ":", "\n", "        ", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "\n", "self", ".", "q_functions", "=", "q_functions", "\n", "\n", "assert", "len", "(", "observation_shape", ")", "==", "1", ",", "observation_shape", "\n", "self", ".", "_Do", "=", "observation_shape", "[", "0", "]", "\n", "assert", "len", "(", "action_shape", ")", "==", "1", ",", "action_shape", "\n", "self", ".", "_Da", "=", "action_shape", "[", "0", "]", "\n", "\n", "self", ".", "_observations_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "self", ".", "_Do", ")", ",", "name", "=", "'observations'", ")", "\n", "self", ".", "_actions_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "self", ".", "_Da", ")", ",", "name", "=", "'actions'", ")", "\n", "\n", "self", ".", "_output", "=", "self", ".", "output_for", "(", "\n", "self", ".", "_observations_ph", ",", "self", ".", "_actions_ph", ",", "reuse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.value_functions.value_function.SumQFunction.output_for": [[29, 36], ["tensorflow.add_n", "qf.output_for"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.value_functions.value_function.SumQFunction.output_for"], ["", "def", "output_for", "(", "self", ",", "observations", ",", "actions", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "outputs", "=", "[", "\n", "qf", ".", "output_for", "(", "observations", ",", "actions", ",", "reuse", "=", "reuse", ")", "\n", "for", "qf", "in", "self", ".", "q_functions", "\n", "]", "\n", "output", "=", "tf", ".", "add_n", "(", "outputs", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.value_functions.value_function.SumQFunction._eval": [[37, 44], ["tensorflow.keras.backend.get_session().run", "tensorflow.keras.backend.get_session"], "methods", ["None"], ["", "def", "_eval", "(", "self", ",", "observations", ",", "actions", ")", ":", "\n", "        ", "feeds", "=", "{", "\n", "self", ".", "_observations_ph", ":", "observations", ",", "\n", "self", ".", "_actions_ph", ":", "actions", "\n", "}", "\n", "\n", "return", "tf", ".", "keras", ".", "backend", ".", "get_session", "(", ")", ".", "run", "(", "self", ".", "_output", ",", "feeds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.value_functions.value_function.SumQFunction.get_param_values": [[45, 49], ["numpy.concatenate", "qf.get_param_values"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.get_param_values"], ["", "def", "get_param_values", "(", "self", ")", ":", "\n", "        ", "all_values_list", "=", "[", "qf", ".", "get_param_values", "(", ")", "for", "qf", "in", "self", ".", "q_functions", "]", "\n", "\n", "return", "np", ".", "concatenate", "(", "all_values_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.value_functions.value_function.SumQFunction.set_param_values": [[50, 58], ["numpy.split", "zip", "numpy.cumsum", "qf.set_param_values", "qf.get_param_values"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.set_param_values", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.get_param_values"], ["", "def", "set_param_values", "(", "self", ",", "all_values", ")", ":", "\n", "        ", "param_sizes", "=", "[", "qf", ".", "get_param_values", "(", ")", ".", "size", "for", "qf", "in", "self", ".", "q_functions", "]", "\n", "split_points", "=", "np", ".", "cumsum", "(", "param_sizes", ")", "[", ":", "-", "1", "]", "\n", "\n", "all_values_list", "=", "np", ".", "split", "(", "all_values", ",", "split_points", ")", "\n", "\n", "for", "values", ",", "qf", "in", "zip", "(", "all_values_list", ",", "self", ".", "q_functions", ")", ":", "\n", "            ", "qf", ".", "set_param_values", "(", "values", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.value_functions.utils.create_double_value_function": [[7, 13], ["tuple", "value_fn", "range"], "function", ["None"], ["\n", "import", "rl_with_videos", ".", "algorithms", ".", "utils", "as", "alg_utils", "\n", "import", "rl_with_videos", ".", "environments", ".", "utils", "as", "env_utils", "\n", "from", "rl_with_videos", ".", "misc", ".", "utils", "import", "datetimestamp", "\n", "\n", "\n", "DEFAULT_UNIVERSE", "=", "'gym'", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.value_functions.utils.get_Q_function_from_variant": [[24, 39], ["copy.deepcopy", "copy.deepcopy.pop", "rl_with_videos.preprocessors.utils.get_preprocessor_from_params"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.preprocessors.utils.get_preprocessor_from_params"], ["    ", "def", "init_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `ray.init`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Cpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Gpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resources'", ",", "\n", "type", "=", "json", ".", "loads", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.value_functions.utils.get_V_function_from_variant": [[41, 55], ["copy.deepcopy", "copy.deepcopy.pop", "rl_with_videos.preprocessors.utils.get_preprocessor_from_params"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.preprocessors.utils.get_preprocessor_from_params"], ["help", "=", "init_help_string", "(", "\"Resources to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--include-webui'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "init_help_string", "(", "\"Boolean flag indicating whether to start the\"", "\n", "\"web UI, which is a Jupyter notebook.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--temp-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"If provided, it will specify the root temporary\"", "\n", "\" directory for the Ray process.\"", ")", ")", "\n", "\n", "return", "parser", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC.__init__": [[28, 120], ["rl_algorithm.RLAlgorithm.__init__", "tuple", "sac.SAC._build", "len", "len", "tensorflow.keras.models.clone_model", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._build"], ["def", "__init__", "(", "\n", "self", ",", "\n", "training_environment", ",", "\n", "evaluation_environment", ",", "\n", "policy", ",", "\n", "Qs", ",", "\n", "pool", ",", "\n", "plotter", "=", "None", ",", "\n", "\n", "lr", "=", "3e-4", ",", "\n", "reward_scale", "=", "1.0", ",", "\n", "target_entropy", "=", "'auto'", ",", "\n", "discount", "=", "0.99", ",", "\n", "tau", "=", "5e-3", ",", "\n", "target_update_interval", "=", "1", ",", "\n", "action_prior", "=", "'uniform'", ",", "\n", "reparameterize", "=", "False", ",", "\n", "store_extra_policy_info", "=", "False", ",", "\n", "\n", "should_augment", "=", "False", ",", "\n", "trans_dist", "=", "4", ",", "\n", "\n", "save_full_state", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            env (`SoftlearningEnv`): Environment used for training.\n            policy: A policy function approximator.\n            initial_exploration_policy: ('Policy'): A policy that we use\n                for initial exploration which is not trained by the algorithm.\n            Qs: Q-function approximators. The min of these\n                approximators will be used. Usage of at least two Q-functions\n                improves performance by reducing overestimation bias.\n            pool (`PoolBase`): Replay pool to add gathered samples to.\n            plotter (`QFPolicyPlotter`): Plotter instance to be used for\n                visualizing Q-function during training.\n            lr (`float`): Learning rate used for the function approximators.\n            discount (`float`): Discount factor for Q-function updates.\n            tau (`float`): Soft value function target update weight.\n            target_update_interval ('int'): Frequency at which target network\n                updates occur in iterations.\n            reparameterize ('bool'): If True, we use a gradient estimator for\n                the policy derived using the reparameterization trick. We use\n                a likelihood ratio based estimator otherwise.\n        \"\"\"", "\n", "\n", "super", "(", "SAC", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "_training_environment", "=", "training_environment", "\n", "self", ".", "_evaluation_environment", "=", "evaluation_environment", "\n", "self", ".", "_policy", "=", "policy", "\n", "\n", "self", ".", "_Qs", "=", "[", "q", "for", "q", "in", "Qs", "]", "\n", "self", ".", "_Q_targets", "=", "tuple", "(", "tf", ".", "keras", ".", "models", ".", "clone_model", "(", "Q", ")", "for", "Q", "in", "self", ".", "_Qs", ")", "\n", "\n", "\n", "self", ".", "_pool", "=", "pool", "\n", "self", ".", "_plotter", "=", "plotter", "\n", "\n", "self", ".", "_policy_lr", "=", "lr", "\n", "self", ".", "_Q_lr", "=", "lr", "\n", "self", ".", "_q_discrim_lr", "=", "lr", "\n", "\n", "self", ".", "_reward_scale", "=", "reward_scale", "\n", "self", ".", "_target_entropy", "=", "(", "\n", "-", "np", ".", "prod", "(", "self", ".", "_training_environment", ".", "action_space", ".", "shape", ")", "\n", "if", "target_entropy", "==", "'auto'", "\n", "else", "target_entropy", ")", "\n", "\n", "self", ".", "_discount", "=", "discount", "\n", "self", ".", "_tau", "=", "tau", "\n", "self", ".", "_target_update_interval", "=", "target_update_interval", "\n", "self", ".", "_action_prior", "=", "action_prior", "\n", "\n", "self", ".", "_reparameterize", "=", "reparameterize", "\n", "self", ".", "_store_extra_policy_info", "=", "store_extra_policy_info", "\n", "\n", "self", ".", "_save_full_state", "=", "save_full_state", "\n", "\n", "self", ".", "_should_augment", "=", "should_augment", "\n", "self", ".", "_trans_dist", "=", "trans_dist", "\n", "\n", "observation_shape", "=", "self", ".", "_training_environment", ".", "active_observation_shape", "\n", "action_shape", "=", "self", ".", "_training_environment", ".", "action_space", ".", "shape", "\n", "\n", "assert", "len", "(", "observation_shape", ")", "==", "1", ",", "observation_shape", "\n", "self", ".", "_observation_shape", "=", "observation_shape", "\n", "assert", "len", "(", "action_shape", ")", "==", "1", ",", "action_shape", "\n", "self", ".", "_action_shape", "=", "action_shape", "\n", "\n", "self", ".", "_build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._build": [[121, 131], ["sac.SAC._init_global_step", "sac.SAC._init_placeholders", "sac.SAC._init_augmentation", "sac.SAC._init_actor_update", "sac.SAC._init_critic_update", "sac.SAC._init_diagnostics_ops"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._init_global_step", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._init_placeholders", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._init_augmentation", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._init_actor_update", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._init_critic_update", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._init_diagnostics_ops"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_training_ops", "=", "{", "}", "\n", "\n", "self", ".", "_init_global_step", "(", ")", "\n", "self", ".", "_init_placeholders", "(", ")", "\n", "self", ".", "_init_augmentation", "(", ")", "\n", "\n", "self", ".", "_init_actor_update", "(", ")", "\n", "self", ".", "_init_critic_update", "(", ")", "\n", "self", ".", "_init_diagnostics_ops", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._init_placeholders": [[132, 185], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "_init_placeholders", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create input placeholders for the SAC algorithm.\n\n        Creates `tf.placeholder`s for:\n            - observation\n            - next observation\n            - action\n            - reward\n            - terminals\n        \"\"\"", "\n", "self", ".", "_iteration_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "int64", ",", "shape", "=", "None", ",", "name", "=", "'iteration'", ")", "\n", "\n", "self", ".", "_observations_no_aug_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_observation_shape", ")", ",", "\n", "name", "=", "'observation_no_aug'", ",", "\n", ")", "\n", "\n", "self", ".", "_next_observations_no_aug_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_observation_shape", ")", ",", "\n", "name", "=", "'next_observation_no_aug'", ",", "\n", ")", "\n", "\n", "self", ".", "_actions_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_action_shape", ")", ",", "\n", "name", "=", "'actions'", ",", "\n", ")", "\n", "\n", "self", ".", "_rewards_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'rewards'", ",", "\n", ")", "\n", "\n", "self", ".", "_terminals_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'terminals'", ",", "\n", ")", "\n", "\n", "if", "self", ".", "_store_extra_policy_info", ":", "\n", "            ", "self", ".", "_log_pis_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'log_pis'", ",", "\n", ")", "\n", "self", ".", "_raw_actions_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_action_shape", ")", ",", "\n", "name", "=", "'raw_actions'", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._init_augmentation": [[187, 190], ["sac.SAC._augment_image", "sac.SAC._augment_image"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._augment_image", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._augment_image"], ["", "", "def", "_init_augmentation", "(", "self", ")", ":", "\n", "        ", "self", ".", "_observations_ph", "=", "self", ".", "_augment_image", "(", "self", ".", "_observations_no_aug_ph", ")", "\n", "self", ".", "_next_observations_ph", "=", "self", ".", "_augment_image", "(", "self", ".", "_next_observations_no_aug_ph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._get_Q_target": [[192, 210], ["sac.SAC._policy.actions", "sac.SAC._policy.log_pis", "tuple", "tensorflow.reduce_min", "sac.td_target", "Q"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.actions", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.log_pis", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.td_target"], ["", "def", "_get_Q_target", "(", "self", ")", ":", "\n", "        ", "next_actions", "=", "self", ".", "_policy", ".", "actions", "(", "[", "self", ".", "_next_observations_ph", "]", ")", "\n", "next_log_pis", "=", "self", ".", "_policy", ".", "log_pis", "(", "\n", "[", "self", ".", "_next_observations_ph", "]", ",", "next_actions", ")", "\n", "\n", "next_Qs_values", "=", "tuple", "(", "\n", "Q", "(", "[", "self", ".", "_next_observations_ph", ",", "next_actions", "]", ")", "\n", "for", "Q", "in", "self", ".", "_Q_targets", ")", "\n", "\n", "min_next_Q", "=", "tf", ".", "reduce_min", "(", "next_Qs_values", ",", "axis", "=", "0", ")", "\n", "next_value", "=", "min_next_Q", "-", "self", ".", "_alpha", "*", "next_log_pis", "\n", "\n", "Q_target", "=", "td_target", "(", "\n", "reward", "=", "self", ".", "_reward_scale", "*", "self", ".", "_rewards_ph", ",", "\n", "discount", "=", "self", ".", "_discount", ",", "\n", "next_value", "=", "(", "1", "-", "self", ".", "_terminals_ph", ")", "*", "next_value", ")", "\n", "\n", "return", "Q_target", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._init_critic_update": [[211, 248], ["tensorflow.stop_gradient", "tuple", "tuple", "tuple", "tuple", "sac.SAC._training_ops.update", "sac.SAC._get_Q_target", "Q", "tensorflow.losses.mean_squared_error", "tensorflow.train.AdamOptimizer", "Q_optimizer.minimize", "tensorflow.group", "enumerate", "enumerate", "zip"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._get_Q_target"], ["", "def", "_init_critic_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create minimization operation for critic Q-function.\n\n        Creates a `tf.optimizer.minimize` operation for updating\n        critic Q-function with gradient descent, and appends it to\n        `self._training_ops` attribute.\n\n        See Equations (5, 6) in [1], for further information of the\n        Q-function update rule.\n        \"\"\"", "\n", "Q_target", "=", "tf", ".", "stop_gradient", "(", "self", ".", "_get_Q_target", "(", ")", ")", "\n", "\n", "#        assert Q_target.shape.as_list() == [None, 1]", "\n", "\n", "Q_values", "=", "self", ".", "_Q_values", "=", "tuple", "(", "\n", "Q", "(", "[", "self", ".", "_observations_ph", ",", "self", ".", "_actions_ph", "]", ")", "\n", "for", "Q", "in", "self", ".", "_Qs", ")", "\n", "\n", "\n", "Q_losses", "=", "tuple", "(", "\n", "tf", ".", "losses", ".", "mean_squared_error", "(", "\n", "labels", "=", "Q_target", ",", "predictions", "=", "Q_value", ",", "weights", "=", "0.5", ")", "\n", "for", "Q_value", "in", "Q_values", ")", "\n", "\n", "self", ".", "_Q_losses", "=", "Q_losses", "\n", "self", ".", "_Q_optimizers", "=", "tuple", "(", "\n", "tf", ".", "train", ".", "AdamOptimizer", "(", "\n", "learning_rate", "=", "self", ".", "_Q_lr", ",", "\n", "name", "=", "'{}_{}_optimizer'", ".", "format", "(", "Q", ".", "_name", ",", "i", ")", "\n", ")", "for", "i", ",", "Q", "in", "enumerate", "(", "self", ".", "_Qs", ")", ")", "\n", "\n", "Q_training_ops", "=", "tuple", "(", "\n", "Q_optimizer", ".", "minimize", "(", "loss", "=", "Q_loss", ",", "var_list", "=", "Q", ".", "trainable_variables", ")", "\n", "for", "i", ",", "(", "Q", ",", "Q_loss", ",", "Q_optimizer", ")", "\n", "in", "enumerate", "(", "zip", "(", "self", ".", "_Qs", ",", "Q_losses", ",", "self", ".", "_Q_optimizers", ")", ")", ")", "\n", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "'Q'", ":", "tf", ".", "group", "(", "Q_training_ops", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._init_actor_update": [[249, 322], ["sac.SAC._policy.actions", "sac.SAC._policy.log_pis", "tensorflow.get_variable", "tensorflow.exp", "isinstance", "tuple", "tensorflow.reduce_min", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer", "sac.SAC._policy_optimizer.minimize", "sac.SAC._training_ops.update", "tensorflow.train.AdamOptimizer", "sac.SAC._alpha_optimizer.minimize", "sac.SAC._training_ops.update", "tensorflow_probability.distributions.MultivariateNormalDiag", "tensorflow_probability.distributions.MultivariateNormalDiag.log_prob", "tensorflow.reduce_mean", "Q", "tensorflow.zeros", "tensorflow.ones", "tensorflow.stop_gradient"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.actions", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.log_pis"], ["", "def", "_init_actor_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create minimization operations for policy and entropy.\n\n        Creates a `tf.optimizer.minimize` operations for updating\n        policy and entropy with gradient descent, and adds them to\n        `self._training_ops` attribute.\n\n        See Section 4.2 in [1], for further information of the policy update,\n        and Section 5 in [1] for further information of the entropy update.\n        \"\"\"", "\n", "actions", "=", "self", ".", "_policy", ".", "actions", "(", "[", "self", ".", "_observations_ph", "]", ")", "\n", "log_pis", "=", "self", ".", "_policy", ".", "log_pis", "(", "[", "self", ".", "_observations_ph", "]", ",", "actions", ")", "\n", "\n", "#        assert log_pis.shape.as_list() == [None, 1]", "\n", "\n", "log_alpha", "=", "self", ".", "_log_alpha", "=", "tf", ".", "get_variable", "(", "\n", "'log_alpha'", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "0.0", ")", "\n", "alpha", "=", "tf", ".", "exp", "(", "log_alpha", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "_target_entropy", ",", "Number", ")", ":", "\n", "            ", "alpha_loss", "=", "-", "tf", ".", "reduce_mean", "(", "\n", "log_alpha", "*", "tf", ".", "stop_gradient", "(", "log_pis", "+", "self", ".", "_target_entropy", ")", ")", "\n", "\n", "self", ".", "_alpha_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "\n", "self", ".", "_policy_lr", ",", "name", "=", "'alpha_optimizer'", ")", "\n", "self", ".", "_alpha_train_op", "=", "self", ".", "_alpha_optimizer", ".", "minimize", "(", "\n", "loss", "=", "alpha_loss", ",", "var_list", "=", "[", "log_alpha", "]", ")", "\n", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "\n", "'temperature_alpha'", ":", "self", ".", "_alpha_train_op", "\n", "}", ")", "\n", "\n", "", "self", ".", "_alpha", "=", "alpha", "\n", "\n", "if", "self", ".", "_action_prior", "==", "'normal'", ":", "\n", "            ", "policy_prior", "=", "tfp", ".", "distributions", ".", "MultivariateNormalDiag", "(", "\n", "loc", "=", "tf", ".", "zeros", "(", "self", ".", "_action_shape", ")", ",", "\n", "scale_diag", "=", "tf", ".", "ones", "(", "self", ".", "_action_shape", ")", ")", "\n", "policy_prior_log_probs", "=", "policy_prior", ".", "log_prob", "(", "actions", ")", "\n", "", "elif", "self", ".", "_action_prior", "==", "'uniform'", ":", "\n", "            ", "policy_prior_log_probs", "=", "0.0", "\n", "\n", "", "Q_log_targets", "=", "tuple", "(", "\n", "Q", "(", "[", "self", ".", "_observations_ph", ",", "actions", "]", ")", "\n", "for", "Q", "in", "self", ".", "_Qs", ")", "\n", "min_Q_log_target", "=", "tf", ".", "reduce_min", "(", "Q_log_targets", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "\n", "if", "self", ".", "_reparameterize", ":", "\n", "            ", "policy_kl_losses", "=", "(", "\n", "alpha", "*", "log_pis", "\n", "-", "min_Q_log_target", "\n", "-", "policy_prior_log_probs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "#        assert policy_kl_losses.shape.as_list() == [None, 1]", "\n", "\n", "", "self", ".", "_policy_losses", "=", "policy_kl_losses", "\n", "policy_loss", "=", "tf", ".", "reduce_mean", "(", "policy_kl_losses", ")", "\n", "\n", "self", ".", "_policy_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "\n", "learning_rate", "=", "self", ".", "_policy_lr", ",", "\n", "name", "=", "\"policy_optimizer\"", ")", "\n", "\n", "policy_train_op", "=", "self", ".", "_policy_optimizer", ".", "minimize", "(", "\n", "loss", "=", "policy_loss", ",", "\n", "var_list", "=", "self", ".", "_policy", ".", "trainable_variables", ")", "\n", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "'policy_train_op'", ":", "policy_train_op", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._init_diagnostics_ops": [[323, 340], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "metric_fn", "collections.OrderedDict.items", "collections.OrderedDict.items", "tensorflow_probability.stats.stddev"], "methods", ["None"], ["", "def", "_init_diagnostics_ops", "(", "self", ")", ":", "\n", "        ", "diagnosables", "=", "OrderedDict", "(", "(", "\n", "(", "'Q_value'", ",", "self", ".", "_Q_values", ")", ",", "\n", "(", "'Q_loss'", ",", "self", ".", "_Q_losses", ")", ",", "\n", "(", "'policy_loss'", ",", "self", ".", "_policy_losses", ")", ",", "\n", "(", "'alpha'", ",", "self", ".", "_alpha", ")", "\n", ")", ")", "\n", "\n", "diagnostic_metrics", "=", "OrderedDict", "(", "(", "\n", "(", "'mean'", ",", "tf", ".", "reduce_mean", ")", ",", "\n", "(", "'std'", ",", "lambda", "x", ":", "tfp", ".", "stats", ".", "stddev", "(", "x", ",", "sample_axis", "=", "None", ")", ")", ",", "\n", ")", ")", "\n", "\n", "self", ".", "_diagnostics_ops", "=", "OrderedDict", "(", "[", "\n", "(", "f'{key}-{metric_name}'", ",", "metric_fn", "(", "values", ")", ")", "\n", "for", "key", ",", "values", "in", "diagnosables", ".", "items", "(", ")", "\n", "for", "metric_name", ",", "metric_fn", "in", "diagnostic_metrics", ".", "items", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._init_training": [[342, 344], ["sac.SAC._update_target"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._update_target"], ["", "def", "_init_training", "(", "self", ")", ":", "\n", "        ", "self", ".", "_update_target", "(", "tau", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._update_target": [[345, 354], ["zip", "Q.get_weights", "Q_target.get_weights", "Q_target.set_weights", "zip"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.get_weights", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.get_weights", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.set_weights"], ["", "def", "_update_target", "(", "self", ",", "tau", "=", "None", ")", ":", "\n", "        ", "tau", "=", "tau", "or", "self", ".", "_tau", "\n", "\n", "for", "Q", ",", "Q_target", "in", "zip", "(", "self", ".", "_Qs", ",", "self", ".", "_Q_targets", ")", ":", "\n", "            ", "source_params", "=", "Q", ".", "get_weights", "(", ")", "\n", "target_params", "=", "Q_target", ".", "get_weights", "(", ")", "\n", "Q_target", ".", "set_weights", "(", "[", "\n", "tau", "*", "source", "+", "(", "1.0", "-", "tau", ")", "*", "target", "\n", "for", "source", ",", "target", "in", "zip", "(", "source_params", ",", "target_params", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._do_training": [[356, 366], ["sac.SAC._get_feed_dict", "sac.SAC._session.run", "sac.SAC._update_target"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._get_feed_dict", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._update_target"], ["", "", "def", "_do_training", "(", "self", ",", "iteration", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Runs the operations for updating training and target ops.\"\"\"", "\n", "\n", "feed_dict", "=", "self", ".", "_get_feed_dict", "(", "iteration", ",", "batch", ")", "\n", "#        print(\"training ops:\", self._training_ops)", "\n", "self", ".", "_session", ".", "run", "(", "self", ".", "_training_ops", ",", "feed_dict", ")", "\n", "\n", "if", "iteration", "%", "self", ".", "_target_update_interval", "==", "0", ":", "\n", "# Run target ops here.", "\n", "            ", "self", ".", "_update_target", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._augment_image": [[367, 380], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.constant", "tensorflow.pad", "tensorflow.image.random_crop"], "methods", ["None"], ["", "", "def", "_augment_image", "(", "self", ",", "flat_image", ")", ":", "\n", "        ", "original_shape", "=", "flat_image", ".", "shape", "[", "1", "]", "\n", "if", "not", "self", ".", "_should_augment", ":", "\n", "            ", "return", "flat_image", "\n", "", "image", "=", "tf", ".", "reshape", "(", "flat_image", ",", "(", "-", "1", ",", "48", ",", "48", ",", "3", ")", ")", "\n", "\n", "if", "self", ".", "_should_augment", ":", "\n", "            ", "padding", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "0", "]", ",", "[", "self", ".", "_trans_dist", ",", "self", ".", "_trans_dist", "]", ",", "[", "self", ".", "_trans_dist", ",", "self", ".", "_trans_dist", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "image", "=", "tf", ".", "pad", "(", "image", ",", "padding", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_crop", "(", "image", ",", "(", "256", ",", "48", ",", "48", ",", "3", ")", ")", "\n", "\n", "", "flattened_image", "=", "tf", ".", "reshape", "(", "image", ",", "(", "-", "1", ",", "original_shape", ")", ")", "\n", "return", "flattened_image", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._get_feed_dict": [[381, 400], ["None"], "methods", ["None"], ["", "def", "_get_feed_dict", "(", "self", ",", "iteration", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Construct TensorFlow feed_dict from sample batch.\"\"\"", "\n", "\n", "feed_dict", "=", "{", "\n", "self", ".", "_observations_no_aug_ph", ":", "batch", "[", "'observations'", "]", ",", "\n", "self", ".", "_actions_ph", ":", "batch", "[", "'actions'", "]", ",", "\n", "self", ".", "_next_observations_no_aug_ph", ":", "batch", "[", "'next_observations'", "]", ",", "\n", "self", ".", "_rewards_ph", ":", "batch", "[", "'rewards'", "]", ",", "\n", "self", ".", "_terminals_ph", ":", "batch", "[", "'terminals'", "]", ",", "\n", "}", "\n", "\n", "if", "self", ".", "_store_extra_policy_info", ":", "\n", "            ", "feed_dict", "[", "self", ".", "_log_pis_ph", "]", "=", "batch", "[", "'log_pis'", "]", "\n", "feed_dict", "[", "self", ".", "_raw_actions_ph", "]", "=", "batch", "[", "'raw_actions'", "]", "\n", "\n", "", "if", "iteration", "is", "not", "None", ":", "\n", "            ", "feed_dict", "[", "self", ".", "_iteration_ph", "]", "=", "iteration", "\n", "\n", "", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC.get_diagnostics": [[401, 428], ["sac.SAC._get_feed_dict", "sac.SAC._session.run", "sac.SAC.update", "collections.OrderedDict", "sac.SAC._plotter.draw", "sac.SAC._policy.get_diagnostics().items", "sac.SAC._policy.get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._get_feed_dict", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.draw", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.get_diagnostics"], ["", "def", "get_diagnostics", "(", "self", ",", "\n", "iteration", ",", "\n", "batch", ",", "\n", "training_paths", ",", "\n", "evaluation_paths", ")", ":", "\n", "        ", "\"\"\"Return diagnostic information as ordered dictionary.\n\n        Records mean and standard deviation of Q-function and state\n        value function, and TD-loss (mean squared Bellman error)\n        for the sample batch.\n\n        Also calls the `draw` method of the plotter, if plotter defined.\n        \"\"\"", "\n", "\n", "feed_dict", "=", "self", ".", "_get_feed_dict", "(", "iteration", ",", "batch", ")", "\n", "diagnostics", "=", "self", ".", "_session", ".", "run", "(", "self", ".", "_diagnostics_ops", ",", "feed_dict", ")", "\n", "\n", "diagnostics", ".", "update", "(", "OrderedDict", "(", "[", "\n", "(", "f'policy/{key}'", ",", "value", ")", "\n", "for", "key", ",", "value", "in", "\n", "self", ".", "_policy", ".", "get_diagnostics", "(", "batch", "[", "'observations'", "]", ")", ".", "items", "(", ")", "\n", "]", ")", ")", "\n", "\n", "if", "self", ".", "_plotter", ":", "\n", "            ", "self", ".", "_plotter", ".", "draw", "(", ")", "\n", "\n", "", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC.tf_saveables": [[429, 444], ["hasattr", "enumerate"], "methods", ["None"], ["", "@", "property", "\n", "def", "tf_saveables", "(", "self", ")", ":", "\n", "        ", "saveables", "=", "{", "\n", "'_policy_optimizer'", ":", "self", ".", "_policy_optimizer", ",", "\n", "**", "{", "\n", "f'Q_optimizer_{i}'", ":", "optimizer", "\n", "for", "i", ",", "optimizer", "in", "enumerate", "(", "self", ".", "_Q_optimizers", ")", "\n", "}", ",", "\n", "'_log_alpha'", ":", "self", ".", "_log_alpha", ",", "\n", "}", "\n", "\n", "if", "hasattr", "(", "self", ",", "'_alpha_optimizer'", ")", ":", "\n", "            ", "saveables", "[", "'_alpha_optimizer'", "]", "=", "self", ".", "_alpha_optimizer", "\n", "\n", "", "return", "saveables", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.td_target": [[13, 15], ["None"], "function", ["None"], ["def", "td_target", "(", "reward", ",", "discount", ",", "next_value", ")", ":", "\n", "    ", "return", "reward", "+", "discount", "*", "next_value", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm.__init__": [[23, 82], ["max", "tensorflow.keras.backend.get_session"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sampler", ",", "\n", "n_epochs", "=", "1000", ",", "\n", "train_every_n_steps", "=", "1", ",", "\n", "n_train_repeat", "=", "1", ",", "\n", "max_train_repeat_per_timestep", "=", "5", ",", "\n", "n_initial_exploration_steps", "=", "0", ",", "\n", "initial_exploration_policy", "=", "None", ",", "\n", "epoch_length", "=", "1000", ",", "\n", "eval_n_episodes", "=", "10", ",", "\n", "eval_deterministic", "=", "True", ",", "\n", "eval_render_mode", "=", "None", ",", "\n", "video_save_frequency", "=", "0", ",", "\n", "path_save_frequency", "=", "0", ",", "\n", "session", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            n_epochs (`int`): Number of epochs to run the training for.\n            n_train_repeat (`int`): Number of times to repeat the training\n                for single time step.\n            n_initial_exploration_steps: Number of steps in the beginning to\n                take using actions drawn from a separate exploration policy.\n            epoch_length (`int`): Epoch length.\n            eval_n_episodes (`int`): Number of rollouts to evaluate.\n            eval_deterministic (`int`): Whether or not to run the policy in\n                deterministic mode when evaluating policy.\n            eval_render_mode (`str`): Mode to render evaluation rollouts in.\n                None to disable rendering.\n        \"\"\"", "\n", "self", ".", "sampler", "=", "sampler", "\n", "\n", "self", ".", "_n_epochs", "=", "n_epochs", "\n", "self", ".", "_n_train_repeat", "=", "n_train_repeat", "\n", "self", ".", "_max_train_repeat_per_timestep", "=", "max", "(", "\n", "max_train_repeat_per_timestep", ",", "n_train_repeat", ")", "\n", "self", ".", "_train_every_n_steps", "=", "train_every_n_steps", "\n", "self", ".", "_epoch_length", "=", "epoch_length", "\n", "self", ".", "_n_initial_exploration_steps", "=", "n_initial_exploration_steps", "\n", "self", ".", "_initial_exploration_policy", "=", "initial_exploration_policy", "\n", "\n", "self", ".", "_eval_n_episodes", "=", "eval_n_episodes", "\n", "self", ".", "_eval_deterministic", "=", "eval_deterministic", "\n", "self", ".", "_video_save_frequency", "=", "video_save_frequency", "\n", "self", ".", "_path_save_frequency", "=", "path_save_frequency", "\n", "\n", "if", "self", ".", "_video_save_frequency", ">", "0", ":", "\n", "            ", "assert", "eval_render_mode", "!=", "'human'", ",", "(", "\n", "\"RlAlgorithm cannot render and save videos at the same time\"", ")", "\n", "self", ".", "_eval_render_mode", "=", "'rgb_array'", "\n", "", "else", ":", "\n", "            ", "self", ".", "_eval_render_mode", "=", "eval_render_mode", "\n", "\n", "", "self", ".", "_session", "=", "session", "or", "tf", ".", "keras", ".", "backend", ".", "get_session", "(", ")", "\n", "\n", "self", ".", "_epoch", "=", "0", "\n", "self", ".", "_timestep", "=", "0", "\n", "self", ".", "_num_train_steps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._init_global_step": [[83, 87], ["tensorflow.python.training.training_util.get_or_create_global_step", "rl_algorithm.RLAlgorithm._training_ops.update", "tensorflow.python.training.training_util._increment_global_step"], "methods", ["None"], ["", "def", "_init_global_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "global_step", "=", "training_util", ".", "get_or_create_global_step", "(", ")", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "\n", "'increment_global_step'", ":", "training_util", ".", "_increment_global_step", "(", "1", ")", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._initial_exploration_hook": [[89, 100], ["rl_algorithm.RLAlgorithm.sampler.initialize", "ValueError", "rl_algorithm.RLAlgorithm.sampler.sample"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.initialize", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.sample"], ["", "def", "_initial_exploration_hook", "(", "self", ",", "env", ",", "initial_exploration_policy", ",", "pool", ")", ":", "\n", "        ", "if", "self", ".", "_n_initial_exploration_steps", "<", "1", ":", "return", "\n", "\n", "if", "not", "initial_exploration_policy", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Initial exploration policy must be provided when\"", "\n", "\" n_initial_exploration_steps > 0.\"", ")", "\n", "\n", "", "self", ".", "sampler", ".", "initialize", "(", "env", ",", "initial_exploration_policy", ",", "pool", ")", "\n", "while", "pool", ".", "size", "<", "self", ".", "_n_initial_exploration_steps", ":", "\n", "            ", "self", ".", "sampler", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._training_before_hook": [[101, 104], ["None"], "methods", ["None"], ["", "", "def", "_training_before_hook", "(", "self", ")", ":", "\n", "        ", "\"\"\"Method called before the actual training loops.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._training_after_hook": [[105, 108], ["None"], "methods", ["None"], ["", "def", "_training_after_hook", "(", "self", ")", ":", "\n", "        ", "\"\"\"Method called after the actual training loops.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._timestep_before_hook": [[109, 112], ["None"], "methods", ["None"], ["", "def", "_timestep_before_hook", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Hook called at the beginning of each timestep.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._timestep_after_hook": [[113, 116], ["None"], "methods", ["None"], ["", "def", "_timestep_after_hook", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Hook called at the end of each timestep.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._epoch_before_hook": [[117, 120], ["None"], "methods", ["None"], ["", "def", "_epoch_before_hook", "(", "self", ")", ":", "\n", "        ", "\"\"\"Hook called at the beginning of each epoch.\"\"\"", "\n", "self", ".", "_train_steps_this_epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._epoch_after_hook": [[121, 124], ["None"], "methods", ["None"], ["", "def", "_epoch_after_hook", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Hook called at the end of each epoch.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._training_batch": [[125, 127], ["rl_algorithm.RLAlgorithm.sampler.random_batch"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.random_batch"], ["", "def", "_training_batch", "(", "self", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "sampler", ".", "random_batch", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._evaluation_batch": [[128, 130], ["rl_algorithm.RLAlgorithm._training_batch"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._training_batch"], ["", "def", "_evaluation_batch", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_training_batch", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._training_started": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_training_started", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_total_timestep", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._total_timestep": [[135, 139], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_total_timestep", "(", "self", ")", ":", "\n", "        ", "total_timestep", "=", "self", ".", "_epoch", "*", "self", ".", "_epoch_length", "+", "self", ".", "_timestep", "\n", "return", "total_timestep", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm.train": [[140, 143], ["rl_algorithm.RLAlgorithm._train"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._train"], ["", "def", "train", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Initiate training of the SAC instance.\"\"\"", "\n", "return", "self", ".", "_train", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._train": [[144, 281], ["rl_algorithm.RLAlgorithm.sampler.initialize", "gtimer.reset_root", "gtimer.rename_root", "gtimer.set_def_unique", "rl_algorithm.RLAlgorithm._training_before_hook", "gtimer.timed_for", "rl_algorithm.RLAlgorithm.sampler.terminate", "rl_algorithm.RLAlgorithm._training_after_hook", "rl_algorithm.RLAlgorithm._init_training", "rl_algorithm.RLAlgorithm._initial_exploration_hook", "range", "rl_algorithm.RLAlgorithm._epoch_before_hook", "gtimer.stamp", "itertools.count", "rl_algorithm.RLAlgorithm.sampler.get_last_n_paths", "gtimer.stamp", "rl_algorithm.RLAlgorithm._evaluation_paths", "gtimer.stamp", "rl_algorithm.RLAlgorithm._evaluate_rollouts", "gtimer.stamp", "rl_algorithm.RLAlgorithm._epoch_after_hook", "gtimer.stamp", "rl_algorithm.RLAlgorithm.sampler.get_diagnostics", "rl_algorithm.RLAlgorithm.get_diagnostics", "rl_algorithm.RLAlgorithm.update", "rl_algorithm.RLAlgorithm._timestep_before_hook", "gtimer.stamp", "rl_algorithm.RLAlgorithm._do_sampling", "gtimer.stamp", "gtimer.stamp", "rl_algorithm.RLAlgorithm._timestep_after_hook", "gtimer.stamp", "math.ceil", "enumerate", "rl_algorithm.RLAlgorithm._evaluate_rollouts", "gtimer.stamp", "collections.OrderedDict", "hasattr", "training_environment.render_rollouts", "rl_algorithm.RLAlgorithm._do_training_repeats", "os.path.join", "rl_algorithm.RLAlgorithm._evaluation_batch", "gtimer.get_times", "os.getcwd", "os.path.exists", "os.makedirs", "open", "pickle.dump", "os.path.dirname", "os.path.dirname", "sorted", "sorted", "sorted", "sorted", "rl_algorithm.RLAlgorithm.keys", "rl_algorithm.RLAlgorithm.keys", "time_diagnostics.keys", "rl_algorithm.RLAlgorithm.keys"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.initialize", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._training_before_hook", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.terminate", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._training_after_hook", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._init_training", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._initial_exploration_hook", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._epoch_before_hook", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.get_last_n_paths", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._evaluation_paths", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._evaluate_rollouts", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._epoch_after_hook", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.get_diagnostics", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.get_diagnostics", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._timestep_before_hook", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._do_sampling", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._timestep_after_hook", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._evaluate_rollouts", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.render_rollouts", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._do_training_repeats", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._evaluation_batch"], ["", "def", "_train", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return a generator that performs RL training.\n\n        Args:\n            env (`SoftlearningEnv`): Environment used for training.\n            policy (`Policy`): Policy used for training\n            initial_exploration_policy ('Policy'): Policy used for exploration\n                If None, then all exploration is done using policy\n            pool (`PoolBase`): Sample pool to add samples to\n        \"\"\"", "\n", "training_environment", "=", "self", ".", "_training_environment", "\n", "evaluation_environment", "=", "self", ".", "_evaluation_environment", "\n", "policy", "=", "self", ".", "_policy", "\n", "pool", "=", "self", ".", "_pool", "\n", "\n", "if", "not", "self", ".", "_training_started", ":", "\n", "            ", "self", ".", "_init_training", "(", ")", "\n", "\n", "self", ".", "_initial_exploration_hook", "(", "\n", "training_environment", ",", "self", ".", "_initial_exploration_policy", ",", "pool", ")", "\n", "\n", "", "self", ".", "sampler", ".", "initialize", "(", "training_environment", ",", "policy", ",", "pool", ")", "\n", "\n", "gt", ".", "reset_root", "(", ")", "\n", "gt", ".", "rename_root", "(", "'RLAlgorithm'", ")", "\n", "gt", ".", "set_def_unique", "(", "False", ")", "\n", "\n", "self", ".", "_training_before_hook", "(", ")", "\n", "\n", "for", "self", ".", "_epoch", "in", "gt", ".", "timed_for", "(", "range", "(", "self", ".", "_epoch", ",", "self", ".", "_n_epochs", ")", ")", ":", "\n", "            ", "self", ".", "_epoch_before_hook", "(", ")", "\n", "gt", ".", "stamp", "(", "'epoch_before_hook'", ")", "\n", "\n", "start_samples", "=", "self", ".", "sampler", ".", "_total_samples", "\n", "for", "i", "in", "count", "(", ")", ":", "\n", "                ", "samples_now", "=", "self", ".", "sampler", ".", "_total_samples", "\n", "self", ".", "_timestep", "=", "samples_now", "-", "start_samples", "\n", "\n", "if", "(", "samples_now", ">=", "start_samples", "+", "self", ".", "_epoch_length", "\n", "and", "self", ".", "ready_to_train", ")", ":", "\n", "                    ", "break", "\n", "\n", "", "self", ".", "_timestep_before_hook", "(", ")", "\n", "gt", ".", "stamp", "(", "'timestep_before_hook'", ")", "\n", "\n", "self", ".", "_do_sampling", "(", "timestep", "=", "self", ".", "_total_timestep", ")", "\n", "gt", ".", "stamp", "(", "'sample'", ")", "\n", "\n", "if", "self", ".", "ready_to_train", ":", "\n", "                    ", "self", ".", "_do_training_repeats", "(", "timestep", "=", "self", ".", "_total_timestep", ")", "\n", "", "gt", ".", "stamp", "(", "'train'", ")", "\n", "\n", "self", ".", "_timestep_after_hook", "(", ")", "\n", "gt", ".", "stamp", "(", "'timestep_after_hook'", ")", "\n", "\n", "", "training_paths", "=", "self", ".", "sampler", ".", "get_last_n_paths", "(", "\n", "math", ".", "ceil", "(", "self", ".", "_epoch_length", "/", "self", ".", "sampler", ".", "_max_path_length", ")", ")", "\n", "gt", ".", "stamp", "(", "'training_paths'", ")", "\n", "evaluation_paths", "=", "self", ".", "_evaluation_paths", "(", "\n", "policy", ",", "evaluation_environment", ")", "\n", "gt", ".", "stamp", "(", "'evaluation_paths'", ")", "\n", "\n", "training_metrics", "=", "self", ".", "_evaluate_rollouts", "(", "\n", "training_paths", ",", "training_environment", ")", "\n", "gt", ".", "stamp", "(", "'training_metrics'", ")", "\n", "\n", "should_save_path", "=", "(", "\n", "self", ".", "_path_save_frequency", ">", "0", "\n", "and", "self", ".", "_epoch", "%", "self", ".", "_path_save_frequency", "==", "0", ")", "\n", "if", "should_save_path", ":", "\n", "                ", "import", "pickle", "\n", "for", "i", ",", "path", "in", "enumerate", "(", "training_paths", ")", ":", "\n", "#path.pop('images')", "\n", "                    ", "path_file_name", "=", "f'training_path_{self._epoch}_{i}.pkl'", "\n", "path_file_path", "=", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "getcwd", "(", ")", ",", "'paths'", ",", "path_file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "path_file_path", ")", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "path_file_path", ")", ")", "\n", "", "with", "open", "(", "path_file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "pickle", ".", "dump", "(", "path", ",", "f", ")", "\n", "\n", "", "", "", "if", "evaluation_paths", ":", "\n", "                ", "evaluation_metrics", "=", "self", ".", "_evaluate_rollouts", "(", "\n", "evaluation_paths", ",", "evaluation_environment", ")", "\n", "gt", ".", "stamp", "(", "'evaluation_metrics'", ")", "\n", "", "else", ":", "\n", "                ", "evaluation_metrics", "=", "{", "}", "\n", "\n", "", "self", ".", "_epoch_after_hook", "(", "training_paths", ")", "\n", "gt", ".", "stamp", "(", "'epoch_after_hook'", ")", "\n", "\n", "sampler_diagnostics", "=", "self", ".", "sampler", ".", "get_diagnostics", "(", ")", "\n", "\n", "diagnostics", "=", "self", ".", "get_diagnostics", "(", "\n", "iteration", "=", "self", ".", "_total_timestep", ",", "\n", "batch", "=", "self", ".", "_evaluation_batch", "(", ")", ",", "\n", "training_paths", "=", "training_paths", ",", "\n", "evaluation_paths", "=", "evaluation_paths", ")", "\n", "\n", "time_diagnostics", "=", "gt", ".", "get_times", "(", ")", ".", "stamps", ".", "itrs", "\n", "\n", "diagnostics", ".", "update", "(", "OrderedDict", "(", "(", "\n", "*", "(", "\n", "(", "f'evaluation/{key}'", ",", "evaluation_metrics", "[", "key", "]", ")", "\n", "for", "key", "in", "sorted", "(", "evaluation_metrics", ".", "keys", "(", ")", ")", "\n", ")", ",", "\n", "*", "(", "\n", "(", "f'training/{key}'", ",", "training_metrics", "[", "key", "]", ")", "\n", "for", "key", "in", "sorted", "(", "training_metrics", ".", "keys", "(", ")", ")", "\n", ")", ",", "\n", "*", "(", "\n", "(", "f'times/{key}'", ",", "time_diagnostics", "[", "key", "]", "[", "-", "1", "]", ")", "\n", "for", "key", "in", "sorted", "(", "time_diagnostics", ".", "keys", "(", ")", ")", "\n", ")", ",", "\n", "*", "(", "\n", "(", "f'sampler/{key}'", ",", "sampler_diagnostics", "[", "key", "]", ")", "\n", "for", "key", "in", "sorted", "(", "sampler_diagnostics", ".", "keys", "(", ")", ")", "\n", ")", ",", "\n", "(", "'epoch'", ",", "self", ".", "_epoch", ")", ",", "\n", "(", "'timestep'", ",", "self", ".", "_timestep", ")", ",", "\n", "(", "'timesteps_total'", ",", "self", ".", "_total_timestep", ")", ",", "\n", "(", "'train-steps'", ",", "self", ".", "_num_train_steps", ")", ",", "\n", ")", ")", ")", "\n", "\n", "if", "self", ".", "_eval_render_mode", "is", "not", "None", "and", "hasattr", "(", "\n", "evaluation_environment", ",", "'render_rollouts'", ")", ":", "\n", "# TODO(hartikainen): Make this consistent such that there's no", "\n", "# need for the hasattr check.", "\n", "                ", "training_environment", ".", "render_rollouts", "(", "evaluation_paths", ")", "\n", "\n", "", "yield", "diagnostics", "\n", "\n", "", "self", ".", "sampler", ".", "terminate", "(", ")", "\n", "\n", "self", ".", "_training_after_hook", "(", ")", "\n", "\n", "yield", "{", "'done'", ":", "True", ",", "**", "diagnostics", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._evaluation_paths": [[282, 306], ["policy.set_deterministic", "rl_with_videos.samplers.rollouts", "enumerate", "path.pop", "os.path.join", "rl_with_videos.misc.utils.save_video", "os.getcwd"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.base_policy.BasePolicy.set_deterministic", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.utils.rollouts", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.save_video"], ["", "def", "_evaluation_paths", "(", "self", ",", "policy", ",", "evaluation_env", ")", ":", "\n", "        ", "if", "self", ".", "_eval_n_episodes", "<", "1", ":", "return", "(", ")", "\n", "\n", "with", "policy", ".", "set_deterministic", "(", "self", ".", "_eval_deterministic", ")", ":", "\n", "            ", "paths", "=", "rollouts", "(", "\n", "self", ".", "_eval_n_episodes", ",", "\n", "evaluation_env", ",", "\n", "policy", ",", "\n", "self", ".", "sampler", ".", "_max_path_length", ",", "\n", "render_mode", "=", "self", ".", "_eval_render_mode", ")", "\n", "\n", "", "should_save_video", "=", "(", "\n", "self", ".", "_video_save_frequency", ">", "0", "\n", "and", "self", ".", "_epoch", "%", "self", ".", "_video_save_frequency", "==", "0", ")", "\n", "\n", "if", "should_save_video", ":", "\n", "            ", "for", "i", ",", "path", "in", "enumerate", "(", "paths", ")", ":", "\n", "                ", "video_frames", "=", "path", ".", "pop", "(", "'images'", ")", "\n", "video_file_name", "=", "f'evaluation_path_{self._epoch}_{i}.avi'", "\n", "video_file_path", "=", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "getcwd", "(", ")", ",", "'videos'", ",", "video_file_name", ")", "\n", "save_video", "(", "video_frames", ",", "video_file_path", ")", "\n", "\n", "", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._evaluate_rollouts": [[307, 329], ["collections.OrderedDict", "env.get_path_infos", "env.get_path_infos.items", "path[].sum", "len", "numpy.mean", "numpy.min", "numpy.max", "numpy.std", "numpy.mean", "numpy.min", "numpy.max", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.get_path_infos"], ["", "def", "_evaluate_rollouts", "(", "self", ",", "paths", ",", "env", ")", ":", "\n", "        ", "\"\"\"Compute evaluation metrics for the given rollouts.\"\"\"", "\n", "\n", "total_returns", "=", "[", "path", "[", "'rewards'", "]", ".", "sum", "(", ")", "for", "path", "in", "paths", "]", "\n", "episode_lengths", "=", "[", "len", "(", "p", "[", "'rewards'", "]", ")", "for", "p", "in", "paths", "]", "\n", "\n", "diagnostics", "=", "OrderedDict", "(", "(", "\n", "(", "'return-average'", ",", "np", ".", "mean", "(", "total_returns", ")", ")", ",", "\n", "(", "'return-min'", ",", "np", ".", "min", "(", "total_returns", ")", ")", ",", "\n", "(", "'return-max'", ",", "np", ".", "max", "(", "total_returns", ")", ")", ",", "\n", "(", "'return-std'", ",", "np", ".", "std", "(", "total_returns", ")", ")", ",", "\n", "(", "'episode-length-avg'", ",", "np", ".", "mean", "(", "episode_lengths", ")", ")", ",", "\n", "(", "'episode-length-min'", ",", "np", ".", "min", "(", "episode_lengths", ")", ")", ",", "\n", "(", "'episode-length-max'", ",", "np", ".", "max", "(", "episode_lengths", ")", ")", ",", "\n", "(", "'episode-length-std'", ",", "np", ".", "std", "(", "episode_lengths", ")", ")", ",", "\n", ")", ")", "\n", "\n", "env_infos", "=", "env", ".", "get_path_infos", "(", "paths", ")", "\n", "for", "key", ",", "value", "in", "env_infos", ".", "items", "(", ")", ":", "\n", "            ", "diagnostics", "[", "f'env_infos/{key}'", "]", "=", "value", "\n", "\n", "", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm.get_diagnostics": [[330, 337], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "get_diagnostics", "(", "self", ",", "\n", "iteration", ",", "\n", "batch", ",", "\n", "training_paths", ",", "\n", "evaluation_paths", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm.ready_to_train": [[338, 341], ["rl_algorithm.RLAlgorithm.sampler.batch_ready"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.batch_ready"], ["", "@", "property", "\n", "def", "ready_to_train", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sampler", ".", "batch_ready", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._do_sampling": [[342, 344], ["rl_algorithm.RLAlgorithm.sampler.sample"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.sample"], ["", "def", "_do_sampling", "(", "self", ",", "timestep", ")", ":", "\n", "        ", "self", ".", "sampler", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._do_training_repeats": [[345, 360], ["range", "rl_algorithm.RLAlgorithm._do_training", "rl_algorithm.RLAlgorithm._training_batch"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._do_training", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._training_batch"], ["", "def", "_do_training_repeats", "(", "self", ",", "timestep", ")", ":", "\n", "        ", "\"\"\"Repeat training _n_train_repeat times every _train_every_n_steps\"\"\"", "\n", "if", "timestep", "%", "self", ".", "_train_every_n_steps", ">", "0", ":", "return", "\n", "trained_enough", "=", "(", "\n", "self", ".", "_train_steps_this_epoch", "\n", ">", "self", ".", "_max_train_repeat_per_timestep", "*", "self", ".", "_timestep", ")", "\n", "if", "trained_enough", ":", "return", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "_n_train_repeat", ")", ":", "\n", "            ", "self", ".", "_do_training", "(", "\n", "iteration", "=", "timestep", ",", "\n", "batch", "=", "self", ".", "_training_batch", "(", ")", ")", "\n", "\n", "", "self", ".", "_num_train_steps", "+=", "self", ".", "_n_train_repeat", "\n", "self", ".", "_train_steps_this_epoch", "+=", "self", ".", "_n_train_repeat", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._do_training": [[361, 364], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_do_training", "(", "self", ",", "iteration", ",", "batch", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._init_training": [[365, 368], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_init_training", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm.tf_saveables": [[369, 372], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tf_saveables", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm.__getstate__": [[373, 383], ["int"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "{", "\n", "'_epoch_length'", ":", "self", ".", "_epoch_length", ",", "\n", "'_epoch'", ":", "(", "\n", "self", ".", "_epoch", "+", "int", "(", "self", ".", "_timestep", ">=", "self", ".", "_epoch_length", ")", ")", ",", "\n", "'_timestep'", ":", "self", ".", "_timestep", "%", "self", ".", "_epoch_length", ",", "\n", "'_num_train_steps'", ":", "self", ".", "_num_train_steps", ",", "\n", "}", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm.__setstate__": [[384, 386], ["rl_algorithm.RLAlgorithm.__dict__.update"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.utils.create_SAC_algorithm": [[4, 10], ["SAC"], "function", ["None"], ["import", "json", "\n", "\n", "from", "ray", ".", "tune", "import", "sample_from", "\n", "\n", "import", "rl_with_videos", ".", "algorithms", ".", "utils", "as", "alg_utils", "\n", "import", "rl_with_videos", ".", "environments", ".", "utils", "as", "env_utils", "\n", "from", "rl_with_videos", ".", "misc", ".", "utils", "import", "datetimestamp", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.utils.create_RLV_algorithm": [[12, 18], ["RLV"], "function", ["None"], ["\n", "DEFAULT_UNIVERSE", "=", "'gym'", "\n", "DEFAULT_DOMAIN", "=", "'Pendulum'", "\n", "DEFAULT_TASK", "=", "'v0'", "\n", "DEFAULT_ALGORITHM", "=", "'SAC'", "\n", "\n", "AVAILABLE_UNIVERSES", "=", "tuple", "(", "env_utils", ".", "UNIVERSES", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.utils.get_algorithm_from_variant": [[26, 36], ["copy.deepcopy"], "function", ["None"], ["\n", "", "parser", ".", "add_argument", "(", "\n", "'--cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Cpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Gpus to allocate to ray process.\"", ")", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV.__init__": [[13, 56], ["print", "print", "print", "print", "kwargs.pop", "kwargs.pop", "rl_with_videos.algorithms.sac.SAC.__init__"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "remove_rewards", "=", "False", ",", "\n", "replace_rewards_scale", "=", "1.0", ",", "\n", "replace_rewards_bottom", "=", "0.0", ",", "\n", "use_ground_truth_actions", "=", "False", ",", "\n", "use_zero_actions", "=", "False", ",", "\n", "preprocessor_for_inverse", "=", "False", ",", "\n", "domain_shift", "=", "False", ",", "\n", "domain_shift_generator_weight", "=", "0.01", ",", "\n", "domain_shift_discriminator_weight", "=", "0.01", ",", "\n", "paired_loss_scale", "=", "1.0", ",", "\n", "paired_data_pool", "=", "None", ",", "\n", "shared_preprocessor_model", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "print", "(", "\"\\n\\n\\n\\n\\nkwargs in rlv:\"", ",", "kwargs", ")", "\n", "print", "(", "\"\\n\\n\\n\\n\\n\\n\"", ")", "\n", "print", "(", "\"paired_data pool\"", ",", "paired_data_pool", ")", "\n", "print", "(", "\"shared preprocessor model\"", ",", "shared_preprocessor_model", ")", "\n", "self", ".", "_paired_data_pool", "=", "paired_data_pool", "\n", "self", ".", "_paired_loss_scale", "=", "paired_loss_scale", "\n", "self", ".", "_shared_preprocessor_model", "=", "shared_preprocessor_model", "\n", "\n", "self", ".", "_action_free_pool", "=", "kwargs", ".", "pop", "(", "'action_free_pool'", ")", "\n", "self", ".", "_inverse_model", ",", "self", ".", "_domain_shift_model", "=", "kwargs", ".", "pop", "(", "'inverse_model'", ")", "\n", "self", ".", "_inverse_model_lr", "=", "3e-4", "\n", "self", ".", "_domain_shift_discrim_lr", "=", "3e-4", "\n", "self", ".", "_paired_loss_lr", "=", "3e-4", "\n", "\n", "self", ".", "_domain_shift", "=", "domain_shift", "\n", "self", ".", "_domain_shift_generator_weight", "=", "domain_shift_generator_weight", "\n", "self", ".", "_domain_shift_discriminator_weight", "=", "domain_shift_discriminator_weight", "\n", "\n", "self", ".", "_remove_rewards", "=", "remove_rewards", "\n", "self", ".", "_replace_rewards_scale", "=", "replace_rewards_scale", "\n", "self", ".", "_replace_rewards_bottom", "=", "replace_rewards_bottom", "\n", "\n", "self", ".", "_use_ground_truth_actions", "=", "use_ground_truth_actions", "\n", "self", ".", "_use_zero_actions", "=", "use_zero_actions", "\n", "\n", "self", ".", "_preprocessor_for_inverse", "=", "preprocessor_for_inverse", "\n", "\n", "\n", "super", "(", "RLV", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._build": [[57, 73], ["rl_with_videos.RLV._init_global_step", "rl_with_videos.RLV._init_placeholders", "rl_with_videos.RLV._init_augmentation", "rl_with_videos.RLV._init_inverse_model", "rl_with_videos.RLV._init_actor_update", "rl_with_videos.RLV._init_critic_update", "rl_with_videos.RLV._init_diagnostics_ops", "rl_with_videos.RLV._init_reward_generation"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_algorithm.RLAlgorithm._init_global_step", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._init_placeholders", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._init_augmentation", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._init_inverse_model", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._init_actor_update", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._init_critic_update", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._init_diagnostics_ops", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._init_reward_generation"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_training_ops", "=", "{", "}", "\n", "\n", "self", ".", "_init_global_step", "(", ")", "\n", "self", ".", "_init_placeholders", "(", ")", "\n", "\n", "self", ".", "_init_augmentation", "(", ")", "\n", "\n", "if", "self", ".", "_remove_rewards", ":", "\n", "            ", "self", ".", "_init_reward_generation", "(", ")", "\n", "\n", "", "self", ".", "_init_inverse_model", "(", ")", "\n", "\n", "self", ".", "_init_actor_update", "(", ")", "\n", "self", ".", "_init_critic_update", "(", ")", "\n", "self", ".", "_init_diagnostics_ops", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._init_placeholders": [[74, 152], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "action_free_placeholders.pop", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "_init_placeholders", "(", "self", ")", ":", "\n", "        ", "action_conditioned_placeholders", "=", "{", "\n", "'observations_no_aug'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_observation_shape", ")", ",", "\n", "name", "=", "\"observation_no_aug\"", ")", "\n", ",", "\n", "'next_observations_no_aug'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_observation_shape", ")", ",", "\n", "name", "=", "\"next_observation_no_aug\"", ")", ",", "\n", "'actions'", ":", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_action_shape", ")", ",", "\n", "name", "=", "'actions'", ",", "\n", ")", ",", "\n", "'rewards'", ":", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'rewards'", ",", "\n", ")", ",", "\n", "'terminals'", ":", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'terminals'", ",", "\n", ")", ",", "\n", "'iteration'", ":", "tf", ".", "placeholder", "(", "\n", "tf", ".", "int64", ",", "shape", "=", "(", ")", ",", "name", "=", "'iteration'", ",", "\n", ")", ",", "\n", "}", "\n", "action_free_placeholders", "=", "{", "\n", "'observations_no_aug'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_observation_shape", ")", ",", "\n", "name", "=", "\"observation_no_aug\"", ")", "\n", ",", "\n", "'next_observations_no_aug'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_observation_shape", ")", ",", "\n", "name", "=", "\"next_observation_no_aug\"", ")", ",", "\n", "'rewards'", ":", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'rewards'", ",", "\n", ")", ",", "\n", "'terminals'", ":", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'terminals'", ",", "\n", ")", ",", "\n", "'iteration'", ":", "tf", ".", "placeholder", "(", "\n", "tf", ".", "int64", ",", "shape", "=", "(", ")", ",", "name", "=", "'iteration'", ",", "\n", ")", ",", "\n", "}", "\n", "if", "self", ".", "_remove_rewards", ":", "\n", "            ", "action_free_placeholders", ".", "pop", "(", "'rewards'", ")", "\n", "", "if", "self", ".", "_use_ground_truth_actions", ":", "\n", "            ", "action_free_placeholders", "[", "'actions'", "]", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_action_shape", ")", ",", "\n", "name", "=", "'actions'", ",", "\n", ")", "\n", "\n", "\n", "", "self", ".", "_placeholders", "=", "{", "\n", "'action_free'", ":", "action_free_placeholders", ",", "\n", "'action_conditioned'", ":", "action_conditioned_placeholders", "\n", "}", "\n", "\n", "\n", "if", "self", ".", "_paired_data_pool", "is", "not", "None", ":", "\n", "            ", "self", ".", "_placeholders", "[", "'paired_data'", "]", "=", "{", "\n", "'obs_of_observation_no_aug'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_observation_shape", ")", ",", "\n", "name", "=", "\"obs_of_observation_no_aug\"", ")", ",", "\n", "'obs_of_interaction_no_aug'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_observation_shape", ")", ",", "\n", "name", "=", "\"obs_of_interaction_no_aug\"", ")", "\n", "}", "\n", "\n", "", "if", "self", ".", "_domain_shift", ":", "\n", "            ", "self", ".", "_domains_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "1", ")", ",", "name", "=", "'domains'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._training_batch": [[155, 167], ["rl_with_videos.RLV.sampler.random_batch", "rl_with_videos.RLV._action_free_pool.random_batch", "rl_with_videos.RLV._paired_data_pool.random_batch"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.random_batch", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.random_batch", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.random_batch"], ["", "", "def", "_training_batch", "(", "self", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "batch", "=", "self", ".", "sampler", ".", "random_batch", "(", "batch_size", ")", "\n", "action_free_batch_size", "=", "256", "\n", "action_free_batch", "=", "self", ".", "_action_free_pool", ".", "random_batch", "(", "action_free_batch_size", ")", "\n", "combined_batch", "=", "{", "\n", "'action_conditioned'", ":", "batch", ",", "\n", "'action_free'", ":", "action_free_batch", "\n", "}", "\n", "if", "self", ".", "_paired_data_pool", "is", "not", "None", ":", "\n", "            ", "paired_data_batch_size", "=", "256", "\n", "combined_batch", "[", "'paired_data'", "]", "=", "self", ".", "_paired_data_pool", ".", "random_batch", "(", "paired_data_batch_size", ")", "\n", "", "return", "combined_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._get_feed_dict": [[168, 192], ["batch[].keys", "numpy.concatenate", "numpy.zeros", "numpy.ones"], "methods", ["None"], ["", "def", "_get_feed_dict", "(", "self", ",", "iteration", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Construct a TensorFlow feed dictionary from a sample batch.\"\"\"", "\n", "\n", "\n", "\n", "feed_dict", "=", "{", "}", "\n", "for", "action", "in", "[", "'action_conditioned'", ",", "'action_free'", "]", ":", "\n", "            ", "for", "k", "in", "batch", "[", "action", "]", ".", "keys", "(", ")", ":", "\n", "                ", "if", "k", "in", "[", "'observations'", ",", "'next_observations'", "]", ":", "\n", "                    ", "feed_dict", "[", "self", ".", "_placeholders", "[", "action", "]", "[", "k", "+", "\"_no_aug\"", "]", "]", "=", "batch", "[", "action", "]", "[", "k", "]", "\n", "", "else", ":", "\n", "                    ", "feed_dict", "[", "self", ".", "_placeholders", "[", "action", "]", "[", "k", "]", "]", "=", "batch", "[", "action", "]", "[", "k", "]", "\n", "", "", "", "if", "iteration", "is", "not", "None", ":", "\n", "            ", "feed_dict", "[", "self", ".", "_placeholders", "[", "'action_conditioned'", "]", "[", "'iteration'", "]", "]", "=", "iteration", "\n", "\n", "", "if", "self", ".", "_domain_shift", ":", "\n", "            ", "feed_dict", "[", "self", ".", "_domains_ph", "]", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "batch", "[", "'action_conditioned'", "]", "[", "'terminals'", "]", ".", "shape", ")", ",", "\n", "np", ".", "ones", "(", "batch", "[", "'action_free'", "]", "[", "'terminals'", "]", ".", "shape", ")", "]", ")", "\n", "\n", "\n", "", "if", "self", ".", "_paired_data_pool", "is", "not", "None", ":", "\n", "            ", "feed_dict", "[", "self", ".", "_placeholders", "[", "'paired_data'", "]", "[", "'obs_of_observation_no_aug'", "]", "]", "=", "batch", "[", "'paired_data'", "]", "[", "'observations'", "]", "\n", "feed_dict", "[", "self", ".", "_placeholders", "[", "'paired_data'", "]", "[", "'obs_of_interaction_no_aug'", "]", "]", "=", "batch", "[", "'paired_data'", "]", "[", "'next_observations'", "]", "\n", "", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._init_augmentation": [[193, 204], ["rl_with_videos.RLV._placeholders.keys", "top_level_keys.append", "print", "list", "rl_with_videos.RLV._placeholders[].keys", "print", "rl_with_videos.RLV._augment_image"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.sac.SAC._augment_image"], ["", "def", "_init_augmentation", "(", "self", ")", ":", "\n", "        ", "top_level_keys", "=", "[", "'action_conditioned'", ",", "'action_free'", "]", "\n", "if", "'paired_data'", "in", "self", ".", "_placeholders", ".", "keys", "(", ")", ":", "\n", "            ", "top_level_keys", ".", "append", "(", "'paired_data'", ")", "\n", "print", "(", "\"\\n\\n\\n\\naugmenting paired data\\n\\n\\n\\n\"", ")", "\n", "", "for", "action", "in", "top_level_keys", ":", "\n", "            ", "keys", "=", "list", "(", "self", ".", "_placeholders", "[", "action", "]", ".", "keys", "(", ")", ")", "\n", "for", "k", "in", "keys", ":", "\n", "                ", "if", "k", "[", "-", "7", ":", "]", "==", "'_no_aug'", ":", "\n", "                    ", "print", "(", "\"augmenting\"", ",", "action", ",", "k", ")", "\n", "self", ".", "_placeholders", "[", "action", "]", "[", "k", "[", ":", "-", "7", "]", "]", "=", "self", ".", "_augment_image", "(", "self", ".", "_placeholders", "[", "action", "]", "[", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV.get_diagnostics": [[205, 233], ["rl_with_videos.RLV._get_feed_dict", "print", "rl_with_videos.RLV._session.run", "rl_with_videos.RLV.update", "collections.OrderedDict", "rl_with_videos.RLV._plotter.draw", "rl_with_videos.RLV._policy.get_diagnostics().items", "rl_with_videos.RLV._policy.get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._get_feed_dict", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.draw", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.get_diagnostics"], ["", "", "", "", "def", "get_diagnostics", "(", "self", ",", "\n", "iteration", ",", "\n", "batch", ",", "\n", "training_paths", ",", "\n", "evaluation_paths", ")", ":", "\n", "        ", "\"\"\"Return diagnostic information as ordered dictionary.\n\n        Records mean and standard deviation of Q-function and state\n        value function, and TD-loss (mean squared Bellman error)\n        for the sample batch.\n\n        Also calls the `draw` method of the plotter, if plotter defined.\n        \"\"\"", "\n", "\n", "feed_dict", "=", "self", ".", "_get_feed_dict", "(", "iteration", ",", "batch", ")", "\n", "print", "(", "\"Diagnostics ops:\"", ",", "self", ".", "_diagnostics_ops", ")", "\n", "diagnostics", "=", "self", ".", "_session", ".", "run", "(", "self", ".", "_diagnostics_ops", ",", "feed_dict", ")", "\n", "\n", "diagnostics", ".", "update", "(", "OrderedDict", "(", "[", "\n", "(", "f'policy/{key}'", ",", "value", ")", "\n", "for", "key", ",", "value", "in", "\n", "self", ".", "_policy", ".", "get_diagnostics", "(", "batch", "[", "'action_conditioned'", "]", "[", "'observations'", "]", ")", ".", "items", "(", ")", "\n", "]", ")", ")", "\n", "\n", "if", "self", ".", "_plotter", ":", "\n", "            ", "self", ".", "_plotter", ".", "draw", "(", ")", "\n", "\n", "", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._init_reward_generation": [[236, 242], ["print", "tensorflow.math.multiply", "tensorflow.math.multiply", "tensorflow.cast", "tensorflow.cast"], "methods", ["None"], ["", "def", "_init_reward_generation", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Removed rewards.  Running reward generation\"", ")", "\n", "self", ".", "_placeholders", "[", "'action_free'", "]", "[", "'rewards'", "]", "=", "tf", ".", "math", ".", "multiply", "(", "self", ".", "_replace_rewards_scale", ",", "\n", "tf", ".", "cast", "(", "self", ".", "_placeholders", "[", "'action_free'", "]", "[", "'terminals'", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "self", ".", "_placeholders", "[", "'action_free'", "]", "[", "'rewards'", "]", "+=", "tf", ".", "math", ".", "multiply", "(", "self", ".", "_replace_rewards_bottom", ",", "\n", "1.0", "-", "tf", ".", "cast", "(", "self", ".", "_placeholders", "[", "'action_free'", "]", "[", "'terminals'", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._init_inverse_model": [[243, 343], ["tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "rl_with_videos.RLV._inverse_model", "tensorflow.compat.v1.losses.mean_squared_error", "tensorflow.compat.v1.train.AdamOptimizer", "rl_with_videos.RLV._inverse_model_optimizer.minimize", "rl_with_videos.RLV._training_ops.update", "tensorflow.concat", "tensorflow.concat", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "rl_with_videos.RLV._domain_shift_model", "tensorflow.compat.v1.train.AdamOptimizer", "rl_with_videos.RLV._domain_shift_discrim_optimizer.minimize", "rl_with_videos.RLV._training_ops.update", "tensorflow.concat", "print", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "rl_with_videos.RLV._shared_preprocessor_model", "tensorflow.compat.v1.train.AdamOptimizer", "rl_with_videos.RLV._paired_optimizer.minimize", "rl_with_videos.RLV._training_ops.update", "tensorflow.keras.losses.BinaryCrossentropy", "tensorflow.keras.losses.BinaryCrossentropy", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.keras.losses.MeanSquaredError", "tensorflow.abs"], "methods", ["None"], ["", "def", "_init_inverse_model", "(", "self", ")", ":", "\n", "        ", "\"\"\" Creates minimization ops for inverse model.\n\n        Creates a `tf.optimizer.minimize` operations for updating\n        the inverse model with gradient descent, and adds it to\n        `self._training_ops` attribute.\n\n        \"\"\"", "\n", "\n", "next_states", "=", "tf", ".", "concat", "(", "[", "self", ".", "_placeholders", "[", "'action_conditioned'", "]", "[", "'next_observations'", "]", ",", "\n", "self", ".", "_placeholders", "[", "'action_free'", "]", "[", "'next_observations'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "prev_states", "=", "tf", ".", "concat", "(", "[", "self", ".", "_placeholders", "[", "'action_conditioned'", "]", "[", "'observations'", "]", ",", "\n", "self", ".", "_placeholders", "[", "'action_free'", "]", "[", "'observations'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "true_actions", "=", "self", ".", "_placeholders", "[", "'action_conditioned'", "]", "[", "'actions'", "]", "\n", "action_con_obs", "=", "self", ".", "_placeholders", "[", "'action_conditioned'", "]", "[", "'observations'", "]", "\n", "action_con_next_obs", "=", "self", ".", "_placeholders", "[", "'action_conditioned'", "]", "[", "'next_observations'", "]", "\n", "action_free_obs", "=", "self", ".", "_placeholders", "[", "'action_free'", "]", "[", "'observations'", "]", "\n", "action_free_next_obs", "=", "self", ".", "_placeholders", "[", "'action_free'", "]", "[", "'next_observations'", "]", "\n", "\n", "if", "action_con_obs", ".", "shape", "[", "-", "1", "]", "==", "6912", "and", "not", "self", ".", "_preprocessor_for_inverse", ":", "\n", "# 3 channel, 48x48 image", "\n", "            ", "action_con_obs", "=", "tf", ".", "reshape", "(", "action_con_obs", ",", "(", "-", "1", ",", "48", ",", "48", ",", "3", ")", ")", "\n", "action_con_next_obs", "=", "tf", ".", "reshape", "(", "action_con_next_obs", ",", "(", "-", "1", ",", "48", ",", "48", ",", "3", ")", ")", "\n", "action_free_obs", "=", "tf", ".", "reshape", "(", "action_free_obs", ",", "(", "-", "1", ",", "48", ",", "48", ",", "3", ")", ")", "\n", "action_free_next_obs", "=", "tf", ".", "reshape", "(", "action_free_next_obs", ",", "(", "-", "1", ",", "48", ",", "48", ",", "3", ")", ")", "\n", "", "combined_first_obs", "=", "tf", ".", "concat", "(", "[", "action_con_obs", ",", "action_free_obs", "]", ",", "axis", "=", "0", ")", "\n", "combined_next_obs", "=", "tf", ".", "concat", "(", "[", "action_con_next_obs", ",", "action_free_next_obs", "]", ",", "axis", "=", "0", ")", "\n", "combined_pred_actions", "=", "self", ".", "_inverse_model", "(", "[", "combined_first_obs", ",", "combined_next_obs", "]", ")", "\n", "\n", "pred_seen_actions", "=", "combined_pred_actions", "[", ":", "256", "]", "\n", "pred_unseen_actions", "=", "combined_pred_actions", "[", "256", ":", "]", "\n", "\n", "\n", "inverse_model_loss", "=", "tf", ".", "compat", ".", "v1", ".", "losses", ".", "mean_squared_error", "(", "\n", "labels", "=", "true_actions", ",", "predictions", "=", "pred_seen_actions", ")", "\n", "\n", "\n", "if", "self", ".", "_domain_shift", ":", "\n", "\n", "            ", "if", "self", ".", "_paired_data_pool", "is", "not", "None", ":", "\n", "                ", "combined_paired_data", "=", "tf", ".", "concat", "(", "[", "self", ".", "_placeholders", "[", "'paired_data'", "]", "[", "'obs_of_interaction'", "]", ",", "\n", "self", ".", "_placeholders", "[", "'paired_data'", "]", "[", "'obs_of_observation'", "]", "]", ",", "axis", "=", "0", ")", "\n", "paired_encodings", "=", "self", ".", "_shared_preprocessor_model", "(", "combined_paired_data", ")", "\n", "interaction_encodings", "=", "paired_encodings", "[", ":", "256", "]", "\n", "observation_encodings", "=", "paired_encodings", "[", "256", ":", "]", "\n", "self", ".", "_paired_loss", "=", "self", ".", "_paired_loss_scale", "*", "tf", ".", "keras", ".", "losses", ".", "MeanSquaredError", "(", ")", "(", "interaction_encodings", ",", "observation_encodings", ")", "\n", "\n", "self", ".", "_paired_optimizer", "=", "tf", ".", "compat", ".", "v1", ".", "train", ".", "AdamOptimizer", "(", "\n", "learning_rate", "=", "self", ".", "_paired_loss_lr", ",", "\n", "name", "=", "'paired_loss_optimizer'", ")", "\n", "paired_train_op", "=", "self", ".", "_paired_optimizer", ".", "minimize", "(", "loss", "=", "self", ".", "_paired_loss", ",", "\n", "var_list", "=", "self", ".", "_shared_preprocessor_model", ".", "trainable_variables", ")", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "'paired_loss'", ":", "paired_train_op", "}", ")", "\n", "\n", "", "pred_domains", "=", "self", ".", "_domain_shift_model", "(", "prev_states", ")", "\n", "discriminator_loss", "=", "tf", ".", "keras", ".", "losses", ".", "BinaryCrossentropy", "(", ")", "(", "self", ".", "_domains_ph", ",", "pred_domains", ")", "\n", "generator_loss", "=", "tf", ".", "keras", ".", "losses", ".", "BinaryCrossentropy", "(", ")", "(", "1.0", "-", "self", ".", "_domains_ph", ",", "pred_domains", ")", "\n", "\n", "self", ".", "_domain_shift_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "abs", "(", "pred_domains", "-", "self", ".", "_domains_ph", ")", "<=", "0.5", ",", "tf", ".", "float32", ")", ")", "/", "512", "\n", "\n", "self", ".", "_domain_shift_generator_loss", "=", "generator_loss", "\n", "self", ".", "_domain_shift_discriminator_loss", "=", "discriminator_loss", "\n", "\n", "\n", "inverse_model_loss", "=", "inverse_model_loss", "+", "generator_loss", "*", "self", ".", "_domain_shift_generator_weight", "\n", "self", ".", "_weighted_discriminator_loss", "=", "discriminator_loss", "*", "self", ".", "_domain_shift_discriminator_weight", "\n", "\n", "self", ".", "_domain_shift_discrim_optimizer", "=", "tf", ".", "compat", ".", "v1", ".", "train", ".", "AdamOptimizer", "(", "\n", "learning_rate", "=", "self", ".", "_domain_shift_discrim_lr", ",", "\n", "name", "=", "'domain_shift_discrim_optimizer'", ")", "\n", "domain_shift_discrim_train_op", "=", "self", ".", "_domain_shift_discrim_optimizer", ".", "minimize", "(", "loss", "=", "self", ".", "_weighted_discriminator_loss", ",", "\n", "var_list", "=", "self", ".", "_domain_shift_model", ".", "trainable_variables", ")", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "'domain_shift_discriminator'", ":", "domain_shift_discrim_train_op", "}", ")", "\n", "\n", "\n", "", "self", ".", "_inverse_model_optimizer", "=", "tf", ".", "compat", ".", "v1", ".", "train", ".", "AdamOptimizer", "(", "\n", "learning_rate", "=", "self", ".", "_inverse_model_lr", ",", "\n", "name", "=", "'inverse_model_optimizer'", ")", "\n", "\n", "inverse_train_op", "=", "self", ".", "_inverse_model_optimizer", ".", "minimize", "(", "loss", "=", "inverse_model_loss", ",", "var_list", "=", "self", ".", "_inverse_model", ".", "trainable_variables", ")", "\n", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "'inverse_model'", ":", "inverse_train_op", "}", ")", "\n", "self", ".", "_inverse_model_loss", "=", "inverse_model_loss", "\n", "\n", "self", ".", "_observations_ph", "=", "prev_states", "\n", "self", ".", "_next_observations_ph", "=", "next_states", "\n", "if", "not", "self", ".", "_use_ground_truth_actions", ":", "\n", "            ", "self", ".", "_actions_ph", "=", "tf", ".", "concat", "(", "[", "true_actions", ",", "pred_unseen_actions", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"\\n\\n\\n\\nUSING GROUND TRUTH ACTIONS\\n\\n\\n\\n\\n\\n\"", ")", "\n", "self", ".", "_actions_ph", "=", "tf", ".", "concat", "(", "[", "true_actions", ",", "self", ".", "_placeholders", "[", "'action_free'", "]", "[", "'actions'", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "if", "self", ".", "_use_zero_actions", ":", "\n", "            ", "self", ".", "_actions_ph", "=", "tf", ".", "concat", "(", "[", "true_actions", ",", "pred_unseen_actions", "*", "0.0", "]", ",", "axis", "=", "0", ")", "\n", "", "self", ".", "_rewards_ph", "=", "tf", ".", "concat", "(", "[", "self", ".", "_placeholders", "[", "'action_conditioned'", "]", "[", "'rewards'", "]", ",", "\n", "self", ".", "_placeholders", "[", "'action_free'", "]", "[", "'rewards'", "]", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "_terminals_ph", "=", "tf", ".", "concat", "(", "[", "self", ".", "_placeholders", "[", "'action_conditioned'", "]", "[", "'terminals'", "]", ",", "\n", "self", ".", "_placeholders", "[", "'action_free'", "]", "[", "'terminals'", "]", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "_iteration_ph", "=", "self", ".", "_placeholders", "[", "'action_conditioned'", "]", "[", "'iteration'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.algorithms.rl_with_videos.RLV._init_diagnostics_ops": [[344, 370], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "metric_fn", "collections.OrderedDict.items", "collections.OrderedDict.items", "tensorflow_probability.stats.stddev"], "methods", ["None"], ["", "def", "_init_diagnostics_ops", "(", "self", ")", ":", "\n", "        ", "diagnosables", "=", "OrderedDict", "(", "(", "\n", "(", "'Q_value'", ",", "self", ".", "_Q_values", ")", ",", "\n", "(", "'Q_loss'", ",", "self", ".", "_Q_losses", ")", ",", "\n", "(", "'policy_loss'", ",", "self", ".", "_policy_losses", ")", ",", "\n", "(", "'alpha'", ",", "self", ".", "_alpha", ")", ",", "\n", "(", "'inverse_model_loss'", ",", "self", ".", "_inverse_model_loss", ")", ",", "\n", ")", ")", "\n", "\n", "if", "self", ".", "_domain_shift", ":", "\n", "            ", "diagnosables", "[", "'domain_shift_discriminator'", "]", "=", "self", ".", "_domain_shift_discriminator_loss", "\n", "diagnosables", "[", "'domain_shift_generator'", "]", "=", "self", ".", "_domain_shift_generator_loss", "\n", "diagnosables", "[", "'domain_shift_score'", "]", "=", "self", ".", "_domain_shift_score", "\n", "\n", "", "if", "self", ".", "_paired_data_pool", "is", "not", "None", ":", "\n", "            ", "diagnosables", "[", "'paired_data_loss'", "]", "=", "self", ".", "_paired_loss", "\n", "\n", "", "diagnostic_metrics", "=", "OrderedDict", "(", "(", "\n", "(", "'mean'", ",", "tf", ".", "reduce_mean", ")", ",", "\n", "(", "'std'", ",", "lambda", "x", ":", "tfp", ".", "stats", ".", "stddev", "(", "x", ",", "sample_axis", "=", "None", ")", ")", ",", "\n", ")", ")", "\n", "\n", "self", ".", "_diagnostics_ops", "=", "OrderedDict", "(", "[", "\n", "(", "f'{key}-{metric_name}'", ",", "metric_fn", "(", "values", ")", ")", "\n", "for", "key", ",", "values", "in", "diagnosables", ".", "items", "(", ")", "\n", "for", "metric_name", ",", "metric_fn", "in", "diagnostic_metrics", ".", "items", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.preprocessors.convnet.conv_layers": [[7, 24], ["zip", "print", "tensorflow.keras.layers.Conv2D", "getattr"], "function", ["None"], ["def", "conv_layers", "(", "images", ",", "conv_filters", ",", "conv_kernel_sizes", ",", "pool_sizes", ",", "pool_strides", ",", "pool_type", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "conv_out", "=", "images", "\n", "for", "filters", ",", "kernel_size", ",", "pool_size", ",", "strides", "in", "zip", "(", "\n", "conv_filters", ",", "conv_kernel_sizes", ",", "pool_sizes", ",", "pool_strides", ")", ":", "\n", "        ", "print", "(", "\"kwargs:\"", ",", "kwargs", ")", "\n", "conv_out", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", "(", "conv_out", ")", "\n", "conv_out", "=", "getattr", "(", "tf", ".", "keras", ".", "layers", ",", "pool_type", ")", "(", "\n", "pool_size", "=", "pool_size", ",", "strides", "=", "strides", "\n", ")", "(", "conv_out", ")", "\n", "", "return", "conv_out", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.preprocessors.convnet.convnet_preprocessor": [[25, 82], ["convnet.conv_layers", "rl_with_videos.utils.keras.PicklableKerasModel", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Lambda", "rl_with_videos.models.feedforward.feedforward_model", "tensorflow.concat", "tensorflow.concat", "concatenated_output.shape[].as_list"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.preprocessors.convnet.conv_layers", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.feedforward.feedforward_model"], ["", "def", "convnet_preprocessor", "(", "\n", "input_shapes", ",", "\n", "image_shape", ",", "\n", "output_size", ",", "\n", "conv_filters", "=", "(", "32", ",", "32", ")", ",", "\n", "conv_kernel_sizes", "=", "(", "(", "5", ",", "5", ")", ",", "(", "5", ",", "5", ")", ")", ",", "\n", "pool_type", "=", "'MaxPool2D'", ",", "\n", "pool_sizes", "=", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", ",", "\n", "pool_strides", "=", "(", "2", ",", "2", ")", ",", "\n", "dense_hidden_layer_sizes", "=", "(", "64", ",", "64", ")", ",", "\n", "data_format", "=", "'channels_last'", ",", "\n", "name", "=", "\"convnet_preprocessor\"", ",", "\n", "make_picklable", "=", "True", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "if", "data_format", "==", "'channels_last'", ":", "\n", "        ", "H", ",", "W", ",", "C", "=", "image_shape", "\n", "", "elif", "data_format", "==", "'channels_first'", ":", "\n", "        ", "C", ",", "H", ",", "W", "=", "image_shape", "\n", "\n", "", "inputs", "=", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "input_shape", ")", "\n", "for", "input_shape", "in", "input_shapes", "\n", "]", "\n", "\n", "\n", "concatenated_input", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "concat", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", ")", "(", "inputs", ")", "\n", "\n", "images_flat", ",", "input_raw", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "[", "x", "[", "...", ",", ":", "H", "*", "W", "*", "C", "]", ",", "x", "[", "...", ",", "H", "*", "W", "*", "C", ":", "]", "]", "\n", ")", "(", "concatenated_input", ")", "\n", "\n", "images", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "image_shape", ")", "(", "images_flat", ")", "\n", "conv_out", "=", "conv_layers", "(", "images", ",", "conv_filters", ",", "conv_kernel_sizes", ",", "pool_sizes", ",", "pool_strides", ",", "pool_type", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "flattened", "=", "tf", ".", "keras", ".", "layers", ".", "Flatten", "(", ")", "(", "conv_out", ")", "\n", "concatenated_output", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "concat", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", ")", "(", "[", "flattened", ",", "input_raw", "]", ")", "\n", "\n", "output", "=", "(", "\n", "feedforward_model", "(", "\n", "input_shapes", "=", "(", "concatenated_output", ".", "shape", "[", "1", ":", "]", ".", "as_list", "(", ")", ",", ")", ",", "\n", "output_size", "=", "output_size", ",", "\n", "hidden_layer_sizes", "=", "dense_hidden_layer_sizes", ",", "\n", "activation", "=", "'relu'", ",", "\n", "output_activation", "=", "'linear'", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", "(", "[", "concatenated_output", "]", ")", "\n", "if", "dense_hidden_layer_sizes", "\n", "else", "concatenated_output", ")", "\n", "\n", "model", "=", "PicklableKerasModel", "(", "inputs", ",", "output", ",", "name", "=", "name", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.preprocessors.utils.get_convnet_preprocessor": [[4, 12], ["convnet_preprocessor"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.preprocessors.convnet.convnet_preprocessor"], ["import", "json", "\n", "\n", "from", "ray", ".", "tune", "import", "sample_from", "\n", "\n", "import", "rl_with_videos", ".", "algorithms", ".", "utils", "as", "alg_utils", "\n", "import", "rl_with_videos", ".", "environments", ".", "utils", "as", "env_utils", "\n", "from", "rl_with_videos", ".", "misc", ".", "utils", "import", "datetimestamp", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.preprocessors.utils.get_feedforward_preprocessor": [[14, 22], ["feedforward_model"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.feedforward.feedforward_model"], ["DEFAULT_DOMAIN", "=", "'Pendulum'", "\n", "DEFAULT_TASK", "=", "'v0'", "\n", "DEFAULT_ALGORITHM", "=", "'SAC'", "\n", "\n", "AVAILABLE_UNIVERSES", "=", "tuple", "(", "env_utils", ".", "UNIVERSES", ")", "\n", "AVAILABLE_ALGORITHMS", "=", "set", "(", "alg_utils", ".", "ALGORITHM_CLASSES", ".", "keys", "(", ")", ")", "\n", "\n", "\n", "def", "add_ray_init_args", "(", "parser", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.preprocessors.utils.get_preprocessor_from_params": [[31, 58], ["print", "print", "print", "preprocessor_params.get", "copy.deepcopy", "print", "print", "print", "print", "preprocessor_params.get"], "function", ["None"], ["help", "=", "init_help_string", "(", "\"Cpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Gpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resources'", ",", "\n", "type", "=", "json", ".", "loads", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Resources to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--include-webui'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "init_help_string", "(", "\"Boolean flag indicating whether to start the\"", "\n", "\"web UI, which is a Jupyter notebook.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--temp-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"If provided, it will specify the root temporary\"", "\n", "\" directory for the Ray process.\"", ")", ")", "\n", "\n", "return", "parser", "\n", "\n", "\n", "", "def", "add_ray_tune_args", "(", "parser", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.preprocessors.utils.get_preprocessor_from_variant": [[60, 64], ["utils.get_preprocessor_from_params"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.preprocessors.utils.get_preprocessor_from_params"], ["    ", "def", "tune_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `tune.run`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--resources-per-trial'", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.__init__": [[6, 20], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "max_path_length", ",", "\n", "min_pool_size", ",", "\n", "batch_size", ",", "\n", "store_last_n_paths", "=", "10", ")", ":", "\n", "        ", "self", ".", "_max_path_length", "=", "max_path_length", "\n", "self", ".", "_min_pool_size", "=", "min_pool_size", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_store_last_n_paths", "=", "store_last_n_paths", "\n", "self", ".", "_last_n_paths", "=", "deque", "(", "maxlen", "=", "store_last_n_paths", ")", "\n", "\n", "self", ".", "env", "=", "None", "\n", "self", ".", "policy", "=", "None", "\n", "self", ".", "pool", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.initialize": [[21, 25], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "env", ",", "policy", ",", "pool", ")", ":", "\n", "        ", "self", ".", "env", "=", "env", "\n", "self", ".", "policy", "=", "policy", "\n", "self", ".", "pool", "=", "pool", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.set_policy": [[26, 28], ["None"], "methods", ["None"], ["", "def", "set_policy", "(", "self", ",", "policy", ")", ":", "\n", "        ", "self", ".", "policy", "=", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.clear_last_n_paths": [[29, 31], ["base_sampler.BaseSampler._last_n_paths.clear"], "methods", ["None"], ["", "def", "clear_last_n_paths", "(", "self", ")", ":", "\n", "        ", "self", ".", "_last_n_paths", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.get_last_n_paths": [[32, 39], ["tuple", "itertools.islice"], "methods", ["None"], ["", "def", "get_last_n_paths", "(", "self", ",", "n", "=", "None", ")", ":", "\n", "        ", "if", "n", "is", "None", ":", "\n", "            ", "n", "=", "self", ".", "_store_last_n_paths", "\n", "\n", "", "last_n_paths", "=", "tuple", "(", "islice", "(", "self", ".", "_last_n_paths", ",", "None", ",", "n", ")", ")", "\n", "\n", "return", "last_n_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.sample": [[40, 42], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.batch_ready": [[43, 46], ["None"], "methods", ["None"], ["", "def", "batch_ready", "(", "self", ")", ":", "\n", "        ", "enough_samples", "=", "self", ".", "pool", ".", "size", ">=", "self", ".", "_min_pool_size", "\n", "return", "enough_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.random_batch": [[47, 50], ["base_sampler.BaseSampler.pool.random_batch"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.random_batch"], ["", "def", "random_batch", "(", "self", ",", "batch_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "batch_size", "=", "batch_size", "or", "self", ".", "_batch_size", "\n", "return", "self", ".", "pool", ".", "random_batch", "(", "batch_size", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.terminate": [[51, 53], ["base_sampler.BaseSampler.env.close"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.close"], ["", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.get_diagnostics": [[54, 57], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "diagnostics", "=", "OrderedDict", "(", "{", "'pool-size'", ":", "self", ".", "pool", ".", "size", "}", ")", "\n", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.__getstate__": [[58, 65], ["base_sampler.BaseSampler.__dict__.items"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "{", "\n", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "\n", "if", "key", "not", "in", "(", "'env'", ",", "'policy'", ",", "'pool'", ")", "\n", "}", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.__setstate__": [[66, 72], ["base_sampler.BaseSampler.__dict__.update"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state", ")", "\n", "\n", "self", ".", "env", "=", "None", "\n", "self", ".", "policy", "=", "None", "\n", "self", ".", "pool", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.extra_policy_info_sampler.ExtraPolicyInfoSampler.sample": [[12, 62], ["extra_policy_info_sampler.ExtraPolicyInfoSampler.policy.actions_np", "extra_policy_info_sampler.ExtraPolicyInfoSampler.policy.log_pis_np", "extra_policy_info_sampler.ExtraPolicyInfoSampler.env.step", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path[].append", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path[].append", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path[].append", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path[].append", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path[].append", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path[].append", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path[].append", "extra_policy_info_sampler.ExtraPolicyInfoSampler.env.reset", "extra_policy_info_sampler.ExtraPolicyInfoSampler.env.convert_to_active_observation", "extra_policy_info_sampler.ExtraPolicyInfoSampler.pool.add_path", "extra_policy_info_sampler.ExtraPolicyInfoSampler._last_n_paths.appendleft", "extra_policy_info_sampler.ExtraPolicyInfoSampler.policy.reset", "extra_policy_info_sampler.ExtraPolicyInfoSampler.env.reset", "max", "collections.defaultdict", "numpy.array", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path.items"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.actions_np", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.log_pis_np", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.step", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.reset", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.convert_to_active_observation", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.union_pool.UnionPool.add_path", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.reset", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.reset"], ["    ", "def", "sample", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_current_observation", "is", "None", ":", "\n", "            ", "self", ".", "_current_observation", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "", "observations", "=", "self", ".", "env", ".", "convert_to_active_observation", "(", "\n", "self", ".", "_current_observation", ")", "[", "None", "]", "\n", "actions", "=", "self", ".", "policy", ".", "actions_np", "(", "[", "observations", "]", ")", "\n", "log_pis", "=", "self", ".", "policy", ".", "log_pis_np", "(", "[", "observations", "]", ",", "actions", ")", "\n", "\n", "action", "=", "actions", "[", "0", "]", "\n", "log_pi", "=", "log_pis", "[", "0", "]", "\n", "\n", "next_observation", ",", "reward", ",", "terminal", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_path_length", "+=", "1", "\n", "self", ".", "_path_return", "+=", "reward", "\n", "self", ".", "_total_samples", "+=", "1", "\n", "\n", "self", ".", "_current_path", "[", "'observations'", "]", ".", "append", "(", "self", ".", "_current_observation", ")", "\n", "self", ".", "_current_path", "[", "'actions'", "]", ".", "append", "(", "action", ")", "\n", "self", ".", "_current_path", "[", "'rewards'", "]", ".", "append", "(", "[", "reward", "]", ")", "\n", "self", ".", "_current_path", "[", "'terminals'", "]", ".", "append", "(", "[", "terminal", "]", ")", "\n", "self", ".", "_current_path", "[", "'next_observations'", "]", ".", "append", "(", "next_observation", ")", "\n", "self", ".", "_current_path", "[", "'infos'", "]", ".", "append", "(", "info", ")", "\n", "# self._current_path['raw_actions'].append(raw_action)", "\n", "self", ".", "_current_path", "[", "'log_pis'", "]", ".", "append", "(", "log_pi", ")", "\n", "\n", "if", "terminal", "or", "self", ".", "_path_length", ">=", "self", ".", "_max_path_length", ":", "\n", "            ", "last_path", "=", "{", "\n", "field_name", ":", "np", ".", "array", "(", "values", ")", "\n", "for", "field_name", ",", "values", "in", "self", ".", "_current_path", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "pool", ".", "add_path", "(", "last_path", ")", "\n", "self", ".", "_last_n_paths", ".", "appendleft", "(", "last_path", ")", "\n", "\n", "self", ".", "policy", ".", "reset", "(", ")", "\n", "self", ".", "_current_observation", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "self", ".", "_max_path_return", "=", "max", "(", "self", ".", "_max_path_return", ",", "\n", "self", ".", "_path_return", ")", "\n", "self", ".", "_last_path_return", "=", "self", ".", "_path_return", "\n", "\n", "self", ".", "_path_length", "=", "0", "\n", "self", ".", "_path_return", "=", "0", "\n", "self", ".", "_current_path", "=", "defaultdict", "(", "list", ")", "\n", "\n", "self", ".", "_n_episodes", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "_current_observation", "=", "next_observation", "\n", "\n", "", "return", "self", ".", "_current_observation", ",", "reward", ",", "terminal", ",", "info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.active_sampler.ActiveSampler.__init__": [[5, 8], ["simple_sampler.SimpleSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "is_goal_key", "=", "'is_goal'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ActiveSampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_is_goal_key", "=", "is_goal_key", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.active_sampler.ActiveSampler._process_observations": [[9, 27], ["None"], "methods", ["None"], ["", "def", "_process_observations", "(", "self", ",", "\n", "observation", ",", "\n", "action", ",", "\n", "reward", ",", "\n", "terminal", ",", "\n", "next_observation", ",", "\n", "info", ")", ":", "\n", "        ", "processed_observation", "=", "{", "\n", "'observations'", ":", "observation", ",", "\n", "'actions'", ":", "action", ",", "\n", "'rewards'", ":", "[", "reward", "]", ",", "\n", "'terminals'", ":", "[", "terminal", "]", ",", "\n", "'next_observations'", ":", "next_observation", ",", "\n", "'is_goal'", ":", "[", "info", "[", "self", ".", "_is_goal_key", "]", "]", ",", "\n", "'infos'", ":", "info", ",", "\n", "}", "\n", "\n", "return", "processed_observation", "", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.dummy_sampler.DummySampler.__init__": [[5, 10], ["base_sampler.BaseSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "max_path_length", ")", ":", "\n", "        ", "super", "(", "DummySampler", ",", "self", ")", ".", "__init__", "(", "\n", "max_path_length", "=", "max_path_length", ",", "\n", "min_pool_size", "=", "0", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.dummy_sampler.DummySampler.sample": [[11, 13], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.__init__": [[14, 23], ["base_sampler.BaseSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RemoteSampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "_remote_environment", "=", "None", "\n", "self", ".", "_remote_path", "=", "None", "\n", "self", ".", "_n_episodes", "=", "0", "\n", "self", ".", "_total_samples", "=", "0", "\n", "self", ".", "_last_path_return", "=", "0", "\n", "self", ".", "_max_path_return", "=", "-", "np", ".", "inf", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler._create_remote_environment": [[24, 36], ["pickle.dumps", "pickle.dumps", "_RemoteEnv.remote", "ray.get", "ray.is_initialized", "ray.init", "remote_sampler.RemoteSampler._remote_environment.initialized.remote"], "methods", ["None"], ["", "def", "_create_remote_environment", "(", "self", ",", "env", ",", "policy", ")", ":", "\n", "        ", "env_pkl", "=", "pickle", ".", "dumps", "(", "env", ")", "\n", "policy_pkl", "=", "pickle", ".", "dumps", "(", "policy", ")", "\n", "\n", "if", "not", "ray", ".", "is_initialized", "(", ")", ":", "\n", "            ", "ray", ".", "init", "(", ")", "\n", "\n", "", "self", ".", "_remote_environment", "=", "_RemoteEnv", ".", "remote", "(", "env_pkl", ",", "policy_pkl", ")", "\n", "\n", "# Block until the env and policy is ready", "\n", "initialized", "=", "ray", ".", "get", "(", "self", ".", "_remote_environment", ".", "initialized", ".", "remote", "(", ")", ")", "\n", "assert", "initialized", ",", "initialized", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.initialize": [[37, 40], ["super().initialize", "remote_sampler.RemoteSampler._create_remote_environment"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.initialize", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler._create_remote_environment"], ["", "def", "initialize", "(", "self", ",", "env", ",", "policy", ",", "pool", ")", ":", "\n", "        ", "super", "(", "RemoteSampler", ",", "self", ")", ".", "initialize", "(", "env", ",", "policy", ",", "pool", ")", "\n", "self", ".", "_create_remote_environment", "(", "env", ",", "policy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.wait_for_path": [[41, 47], ["ray.wait"], "methods", ["None"], ["", "def", "wait_for_path", "(", "self", ",", "timeout", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "_remote_path", "is", "None", ":", "\n", "            ", "return", "[", "True", "]", "\n", "\n", "", "path_ready", ",", "_", "=", "ray", ".", "wait", "(", "[", "self", ".", "_remote_path", "]", ",", "timeout", "=", "timeout", ")", "\n", "return", "path_ready", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.sample": [[48, 68], ["remote_sampler.RemoteSampler.wait_for_path", "remote_sampler.RemoteSampler.policy.get_weights", "remote_sampler.RemoteSampler._remote_environment.rollout.remote", "len", "ray.get", "remote_sampler.RemoteSampler._last_n_paths.appendleft", "remote_sampler.RemoteSampler.pool.add_path", "len", "numpy.sum", "max", "remote_sampler.RemoteSampler.batch_ready"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.wait_for_path", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.get_weights", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.union_pool.UnionPool.add_path", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.base_sampler.BaseSampler.batch_ready"], ["", "def", "sample", "(", "self", ",", "timeout", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "_remote_path", "is", "None", ":", "\n", "            ", "policy_params", "=", "self", ".", "policy", ".", "get_weights", "(", ")", "\n", "self", ".", "_remote_path", "=", "self", ".", "_remote_environment", ".", "rollout", ".", "remote", "(", "\n", "policy_params", ",", "self", ".", "_max_path_length", ")", "\n", "\n", "", "path_ready", "=", "self", ".", "wait_for_path", "(", "timeout", "=", "timeout", ")", "\n", "\n", "if", "len", "(", "path_ready", ")", "or", "not", "self", ".", "batch_ready", "(", ")", ":", "\n", "            ", "path", "=", "ray", ".", "get", "(", "self", ".", "_remote_path", ")", "\n", "self", ".", "_last_n_paths", ".", "appendleft", "(", "path", ")", "\n", "\n", "self", ".", "pool", ".", "add_path", "(", "path", ")", "\n", "\n", "self", ".", "_remote_path", "=", "None", "\n", "self", ".", "_total_samples", "+=", "len", "(", "path", "[", "'observations'", "]", ")", "\n", "self", ".", "_last_path_return", "=", "np", ".", "sum", "(", "path", "[", "'rewards'", "]", ")", "\n", "self", ".", "_max_path_return", "=", "max", "(", "self", ".", "_max_path_return", ",", "\n", "self", ".", "_last_path_return", ")", "\n", "self", ".", "_n_episodes", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.get_diagnostics": [[69, 79], ["collections.OrderedDict"], "methods", ["None"], ["", "", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "diagnostics", "=", "OrderedDict", "(", "{", "\n", "'max-path-return'", ":", "self", ".", "_max_path_return", ",", "\n", "'last-path-return'", ":", "self", ".", "_last_path_return", ",", "\n", "'pool-size'", ":", "self", ".", "pool", ".", "size", ",", "\n", "'episodes'", ":", "self", ".", "_n_episodes", ",", "\n", "'total-samples'", ":", "self", ".", "_total_samples", ",", "\n", "}", ")", "\n", "\n", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.__getstate__": [[80, 88], ["super().__getstate__", "super().__getstate__.items"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.__getstate__"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "super_state", "=", "super", "(", "RemoteSampler", ",", "self", ")", ".", "__getstate__", "(", ")", "\n", "state", "=", "{", "\n", "key", ":", "value", "for", "key", ",", "value", "in", "super_state", ".", "items", "(", ")", "\n", "if", "key", "not", "in", "(", "'_remote_environment'", ",", "'_remote_path'", ")", "\n", "}", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.__setstate__": [[89, 93], ["super().__setstate__", "remote_sampler.RemoteSampler._create_remote_environment"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.__setstate__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler._create_remote_environment"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RemoteSampler", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "self", ".", "_create_remote_environment", "(", "self", ".", "env", ",", "self", ".", "policy", ")", "\n", "self", ".", "_remote_path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler._RemoteEnv.__init__": [[97, 108], ["tensorflow.keras.backend.get_session", "remote_sampler._RemoteEnv._session.run", "pickle.loads", "pickle.loads", "hasattr", "tensorflow.global_variables_initializer", "remote_sampler._RemoteEnv._env.initialize"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.initialize"], ["    ", "def", "__init__", "(", "self", ",", "env_pkl", ",", "policy_pkl", ")", ":", "\n", "        ", "self", ".", "_session", "=", "tf", ".", "keras", ".", "backend", ".", "get_session", "(", ")", "\n", "self", ".", "_session", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "self", ".", "_env", "=", "pickle", ".", "loads", "(", "env_pkl", ")", "\n", "self", ".", "_policy", "=", "pickle", ".", "loads", "(", "policy_pkl", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "_env", ",", "'initialize'", ")", ":", "\n", "            ", "self", ".", "_env", ".", "initialize", "(", ")", "\n", "\n", "", "self", ".", "_initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler._RemoteEnv.initialized": [[109, 111], ["None"], "methods", ["None"], ["", "def", "initialized", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_initialized", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler._RemoteEnv.rollout": [[112, 117], ["remote_sampler._RemoteEnv._policy.set_weights", "utils.rollout"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.set_weights", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.utils.rollout"], ["", "def", "rollout", "(", "self", ",", "policy_weights", ",", "path_length", ")", ":", "\n", "        ", "self", ".", "_policy", ".", "set_weights", "(", "policy_weights", ")", "\n", "path", "=", "rollout", "(", "self", ".", "_env", ",", "self", ".", "_policy", ",", "path_length", ")", "\n", "\n", "return", "path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.__init__": [[9, 20], ["base_sampler.BaseSampler.__init__", "collections.defaultdict"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SimpleSampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "_path_length", "=", "0", "\n", "self", ".", "_path_return", "=", "0", "\n", "self", ".", "_current_path", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "_last_path_return", "=", "0", "\n", "self", ".", "_max_path_return", "=", "-", "np", ".", "inf", "\n", "self", ".", "_n_episodes", "=", "0", "\n", "self", ".", "_current_observation", "=", "None", "\n", "self", ".", "_total_samples", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler._process_observations": [[21, 38], ["None"], "methods", ["None"], ["", "def", "_process_observations", "(", "self", ",", "\n", "observation", ",", "\n", "action", ",", "\n", "reward", ",", "\n", "terminal", ",", "\n", "next_observation", ",", "\n", "info", ")", ":", "\n", "        ", "processed_observation", "=", "{", "\n", "'observations'", ":", "observation", ",", "\n", "'actions'", ":", "action", ",", "\n", "'rewards'", ":", "[", "reward", "]", ",", "\n", "'terminals'", ":", "[", "terminal", "]", ",", "\n", "'next_observations'", ":", "next_observation", ",", "\n", "'infos'", ":", "info", ",", "\n", "}", "\n", "\n", "return", "processed_observation", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.sample": [[39, 89], ["simple_sampler.SimpleSampler.env.step", "simple_sampler.SimpleSampler._process_observations", "simple_sampler.SimpleSampler.items", "simple_sampler.SimpleSampler.env.reset", "simple_sampler.SimpleSampler.policy.actions_np", "simple_sampler.SimpleSampler._current_path[].append", "simple_sampler.SimpleSampler.pool.add_path", "simple_sampler.SimpleSampler._last_n_paths.appendleft", "max", "simple_sampler.SimpleSampler.policy.reset", "collections.defaultdict", "numpy.array", "simple_sampler.SimpleSampler._current_path.items", "simple_sampler.SimpleSampler.env.convert_to_active_observation"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.step", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler._process_observations", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.reset", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.actions_np", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.union_pool.UnionPool.add_path", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.reset", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.convert_to_active_observation"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_current_observation", "is", "None", ":", "\n", "            ", "self", ".", "_current_observation", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "", "action", "=", "self", ".", "policy", ".", "actions_np", "(", "[", "\n", "self", ".", "env", ".", "convert_to_active_observation", "(", "\n", "self", ".", "_current_observation", ")", "[", "None", "]", "\n", "]", ")", "[", "0", "]", "\n", "\n", "next_observation", ",", "reward", ",", "terminal", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_path_length", "+=", "1", "\n", "self", ".", "_path_return", "+=", "reward", "\n", "self", ".", "_total_samples", "+=", "1", "\n", "terminal", "=", "terminal", "or", "self", ".", "_path_length", ">=", "self", ".", "_max_path_length", "\n", "\n", "processed_sample", "=", "self", ".", "_process_observations", "(", "\n", "observation", "=", "self", ".", "_current_observation", ",", "\n", "action", "=", "action", ",", "\n", "reward", "=", "reward", ",", "\n", "terminal", "=", "terminal", ",", "\n", "next_observation", "=", "next_observation", ",", "\n", "info", "=", "info", ",", "\n", ")", "\n", "\n", "for", "key", ",", "value", "in", "processed_sample", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_current_path", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "if", "terminal", "or", "self", ".", "_path_length", ">=", "self", ".", "_max_path_length", ":", "\n", "            ", "last_path", "=", "{", "\n", "field_name", ":", "np", ".", "array", "(", "values", ")", "\n", "for", "field_name", ",", "values", "in", "self", ".", "_current_path", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "pool", ".", "add_path", "(", "last_path", ")", "\n", "self", ".", "_last_n_paths", ".", "appendleft", "(", "last_path", ")", "\n", "\n", "self", ".", "_max_path_return", "=", "max", "(", "self", ".", "_max_path_return", ",", "\n", "self", ".", "_path_return", ")", "\n", "self", ".", "_last_path_return", "=", "self", ".", "_path_return", "\n", "\n", "self", ".", "policy", ".", "reset", "(", ")", "\n", "self", ".", "_current_observation", "=", "None", "\n", "self", ".", "_path_length", "=", "0", "\n", "self", ".", "_path_return", "=", "0", "\n", "self", ".", "_current_path", "=", "defaultdict", "(", "list", ")", "\n", "\n", "self", ".", "_n_episodes", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "_current_observation", "=", "next_observation", "\n", "\n", "", "return", "next_observation", ",", "reward", ",", "terminal", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.random_batch": [[90, 96], ["getattr", "simple_sampler.SimpleSampler.pool.random_batch"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.random_batch"], ["", "def", "random_batch", "(", "self", ",", "batch_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "batch_size", "=", "batch_size", "or", "self", ".", "_batch_size", "\n", "observation_keys", "=", "getattr", "(", "self", ".", "env", ",", "'observation_keys'", ",", "None", ")", "\n", "\n", "return", "self", ".", "pool", ".", "random_batch", "(", "\n", "batch_size", ",", "observation_keys", "=", "observation_keys", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.get_diagnostics": [[97, 107], ["super().get_diagnostics", "super().get_diagnostics.update"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.get_diagnostics"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "diagnostics", "=", "super", "(", "SimpleSampler", ",", "self", ")", ".", "get_diagnostics", "(", ")", "\n", "diagnostics", ".", "update", "(", "{", "\n", "'max-path-return'", ":", "self", ".", "_max_path_return", ",", "\n", "'last-path-return'", ":", "self", ".", "_last_path_return", ",", "\n", "'episodes'", ":", "self", ".", "_n_episodes", ",", "\n", "'total-samples'", ":", "self", ".", "_total_samples", ",", "\n", "}", ")", "\n", "\n", "return", "diagnostics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.utils.get_sampler_from_variant": [[15, 37], ["copy.deepcopy", "copy.deepcopy", "sampler_params.get", "sampler_params.get"], "function", ["None"], ["DEFAULT_TASK", "=", "'v0'", "\n", "DEFAULT_ALGORITHM", "=", "'SAC'", "\n", "\n", "AVAILABLE_UNIVERSES", "=", "tuple", "(", "env_utils", ".", "UNIVERSES", ")", "\n", "AVAILABLE_ALGORITHMS", "=", "set", "(", "alg_utils", ".", "ALGORITHM_CLASSES", ".", "keys", "(", ")", ")", "\n", "\n", "\n", "def", "add_ray_init_args", "(", "parser", ")", ":", "\n", "\n", "    ", "def", "init_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `ray.init`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Cpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Gpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.utils.rollout": [[39, 102], ["rl_with_videos.replay_pools.SimpleReplayPool", "simple_sampler.SimpleSampler", "simple_sampler.SimpleSampler.initialize", "range", "replay_pools.SimpleReplayPool.batch_by_indices", "simple_sampler.SimpleSampler.sample", "infos.append", "numpy.arange", "numpy.stack", "callback", "policy.reset", "getattr", "hasattr", "env.unwrapped.sim.render", "images.append"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.remote_sampler.RemoteSampler.initialize", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.simple_sampler.SimpleSampler.sample", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.reset", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.render"], ["type", "=", "json", ".", "loads", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Resources to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--include-webui'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "init_help_string", "(", "\"Boolean flag indicating whether to start the\"", "\n", "\"web UI, which is a Jupyter notebook.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--temp-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"If provided, it will specify the root temporary\"", "\n", "\" directory for the Ray process.\"", ")", ")", "\n", "\n", "return", "parser", "\n", "\n", "\n", "", "def", "add_ray_tune_args", "(", "parser", ")", ":", "\n", "\n", "    ", "def", "tune_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `tune.run`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--resources-per-trial'", ",", "\n", "type", "=", "json", ".", "loads", ",", "\n", "default", "=", "{", "}", ",", "\n", "help", "=", "tune_help_string", "(", "\"Resources to allocate for each trial.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"CPUs to allocate for each trial. Note: this is only used for\"", "\n", "\" Ray's internal scheduling bookkeeping, and is not an actual hard\"", "\n", "\" limit for CPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-gpus'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"GPUs to allocate for each trial. Note: this is only used for\"", "\n", "\" Ray's internal scheduling bookkeeping, and is not an actual hard\"", "\n", "\" limit for GPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-extra-cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Extra CPUs to reserve in case the trials need to\"", "\n", "\" launch additional Ray actors that use CPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-extra-gpus'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Extra GPUs to reserve in case the trials need to\"", "\n", "\" launch additional Ray actors that use GPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-samples'", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "tune_help_string", "(", "\"Number of times to repeat each trial.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--upload-dir'", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.utils.rollouts": [[104, 107], ["utils.rollout", "range"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.samplers.utils.rollout"], ["default", "=", "''", ",", "\n", "help", "=", "tune_help_string", "(", "\"Optional URI to sync training results to (e.g.\"", "\n", "\" s3://<bucket> or gs://<bucket>).\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.squash_bijector.SquashBijector.__init__": [[7, 12], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "validate_args", "=", "False", ",", "name", "=", "\"tanh\"", ")", ":", "\n", "        ", "super", "(", "SquashBijector", ",", "self", ")", ".", "__init__", "(", "\n", "forward_min_event_ndims", "=", "0", ",", "\n", "validate_args", "=", "validate_args", ",", "\n", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.squash_bijector.SquashBijector._forward": [[13, 15], ["tensorflow.nn.tanh"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "tanh", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.squash_bijector.SquashBijector._inverse": [[16, 18], ["tensorflow.atanh"], "methods", ["None"], ["", "def", "_inverse", "(", "self", ",", "y", ")", ":", "\n", "        ", "return", "tf", ".", "atanh", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.squash_bijector.SquashBijector._forward_log_det_jacobian": [[19, 21], ["tensorflow.nn.softplus", "numpy.log"], "methods", ["None"], ["", "def", "_forward_log_det_jacobian", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "2.", "*", "(", "np", ".", "log", "(", "2.", ")", "-", "x", "-", "tf", ".", "nn", ".", "softplus", "(", "-", "2.", "*", "x", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow.ConditionalRealNVPFlow.__init__": [[28, 73], ["tuple", "real_nvp_flow.ConditionalRealNVPFlow.build", "tensorflow_probability.bijectors.ConditionalBijector.__init__", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization.build", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_coupling_layers", "=", "2", ",", "\n", "hidden_layer_sizes", "=", "(", "64", ",", ")", ",", "\n", "use_batch_normalization", "=", "False", ",", "\n", "event_dims", "=", "None", ",", "\n", "is_constant_jacobian", "=", "False", ",", "\n", "validate_args", "=", "False", ",", "\n", "name", "=", "\"conditional_real_nvp_flow\"", ")", ":", "\n", "        ", "\"\"\"Instantiates the `ConditionalRealNVPFlow` normalizing flow.\n\n        Args:\n            is_constant_jacobian: Python `bool`. Default: `False`. When `True` the\n                implementation assumes `log_scale` does not depend on the forward domain\n                (`x`) or inverse domain (`y`) values. (No validation is made;\n                `is_constant_jacobian=False` is always safe but possibly computationally\n                inefficient.)\n            validate_args: Python `bool` indicating whether arguments should be\n                checked for correctness.\n            name: Python `str`, name given to ops managed by this object.\n\n        Raises:\n            ValueError: if TODO happens\n        \"\"\"", "\n", "self", ".", "_graph_parents", "=", "[", "]", "\n", "self", ".", "_name", "=", "name", "\n", "\n", "self", ".", "_num_coupling_layers", "=", "num_coupling_layers", "\n", "self", ".", "_hidden_layer_sizes", "=", "tuple", "(", "hidden_layer_sizes", ")", "\n", "if", "use_batch_normalization", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"TODO(hartikainen): Batch normalization is not yet supported\"", "\n", "\" for ConditionalRealNVPFlow.\"", ")", "\n", "", "self", ".", "_use_batch_normalization", "=", "use_batch_normalization", "\n", "\n", "assert", "event_dims", "is", "not", "None", ",", "event_dims", "\n", "self", ".", "_event_dims", "=", "event_dims", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n", "super", "(", "ConditionalRealNVPFlow", ",", "self", ")", ".", "__init__", "(", "\n", "forward_min_event_ndims", "=", "1", ",", "\n", "inverse_min_event_ndims", "=", "1", ",", "\n", "is_constant_jacobian", "=", "is_constant_jacobian", ",", "\n", "validate_args", "=", "validate_args", ",", "\n", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow.ConditionalRealNVPFlow.build": [[74, 106], ["numpy.prod", "range", "tensorflow_probability.bijectors.RealNVP", "flow.append", "tensorflow_probability.bijectors.BatchNormalization", "flow.append", "tensorflow_probability.bijectors.Permute", "flow.append", "real_nvp_flow.conditioned_real_nvp_template", "list", "reversed", "range"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow.conditioned_real_nvp_template"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "D", "=", "np", ".", "prod", "(", "self", ".", "_event_dims", ")", "\n", "\n", "flow", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_num_coupling_layers", ")", ":", "\n", "            ", "if", "self", ".", "_use_batch_normalization", ":", "\n", "                ", "batch_normalization_bijector", "=", "bijectors", ".", "BatchNormalization", "(", ")", "\n", "flow", ".", "append", "(", "batch_normalization_bijector", ")", "\n", "\n", "", "real_nvp_bijector", "=", "bijectors", ".", "RealNVP", "(", "\n", "num_masked", "=", "D", "//", "2", ",", "\n", "shift_and_log_scale_fn", "=", "conditioned_real_nvp_template", "(", "\n", "hidden_layers", "=", "self", ".", "_hidden_layer_sizes", ",", "\n", "# TODO: test tf.nn.relu", "\n", "activation", "=", "tf", ".", "nn", ".", "tanh", ")", ",", "\n", "name", "=", "'real_nvp_{}'", ".", "format", "(", "i", ")", ")", "\n", "\n", "flow", ".", "append", "(", "real_nvp_bijector", ")", "\n", "\n", "if", "i", "<", "self", ".", "_num_coupling_layers", "-", "1", ":", "\n", "                ", "permute_bijector", "=", "bijectors", ".", "Permute", "(", "\n", "permutation", "=", "list", "(", "reversed", "(", "range", "(", "D", ")", ")", ")", ",", "\n", "name", "=", "'permute_{}'", ".", "format", "(", "i", ")", ")", "\n", "# TODO(hartikainen): We need to force _is_constant_jacobian due", "\n", "# to the event_dim caching. See the issue filed at github:", "\n", "# https://github.com/tensorflow/probability/issues/122", "\n", "permute_bijector", ".", "_is_constant_jacobian", "=", "False", "\n", "flow", ".", "append", "(", "permute_bijector", ")", "\n", "\n", "# Note: bijectors.Chain applies the list of bijectors in the", "\n", "# _reverse_ order of what they are inputted.", "\n", "", "", "self", ".", "flow", "=", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions": [[107, 115], ["isinstance"], "methods", ["None"], ["", "def", "_get_flow_conditions", "(", "self", ",", "**", "condition_kwargs", ")", ":", "\n", "        ", "conditions", "=", "{", "\n", "bijector", ".", "name", ":", "condition_kwargs", "\n", "for", "bijector", "in", "self", ".", "flow", "\n", "if", "isinstance", "(", "bijector", ",", "bijectors", ".", "RealNVP", ")", "\n", "}", "\n", "\n", "return", "conditions", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow.ConditionalRealNVPFlow._forward": [[116, 126], ["real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions", "bijector.forward", "real_nvp_flow.ConditionalRealNVPFlow.get"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.PointDynamics.forward"], ["", "def", "_forward", "(", "self", ",", "x", ",", "**", "condition_kwargs", ")", ":", "\n", "        ", "conditions", "=", "self", ".", "_get_flow_conditions", "(", "**", "condition_kwargs", ")", "\n", "for", "bijector", "in", "self", ".", "flow", ":", "\n", "            ", "x", "=", "bijector", ".", "forward", "(", "x", ",", "**", "conditions", ".", "get", "(", "bijector", ".", "name", ",", "{", "}", ")", ")", "\n", "\n", "# TODO(hartikainen): Once tfp.bijectors.Chain supports conditioning,", "\n", "# replace the above for-loops with self.flow.forward.", "\n", "# x = self.flow.forward(x, **conditions)", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow.ConditionalRealNVPFlow._inverse": [[127, 137], ["real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions", "reversed", "bijector.inverse", "real_nvp_flow.ConditionalRealNVPFlow.get"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions"], ["", "def", "_inverse", "(", "self", ",", "y", ",", "**", "condition_kwargs", ")", ":", "\n", "        ", "conditions", "=", "self", ".", "_get_flow_conditions", "(", "**", "condition_kwargs", ")", "\n", "for", "bijector", "in", "reversed", "(", "self", ".", "flow", ")", ":", "\n", "            ", "y", "=", "bijector", ".", "inverse", "(", "y", ",", "**", "conditions", ".", "get", "(", "bijector", ".", "name", ",", "{", "}", ")", ")", "\n", "\n", "# TODO(hartikainen): Once tfp.bijectors.Chain supports conditioning,", "\n", "# replace the above for-loops with self.flow.inverse.", "\n", "# y = self.flow.inverse(y, **conditions)", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow.ConditionalRealNVPFlow._forward_log_det_jacobian": [[138, 169], ["real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions", "tensorflow.cast", "real_nvp_flow.ConditionalRealNVPFlow._maybe_get_static_event_ndims", "real_nvp_flow._use_static_shape", "b.forward_log_det_jacobian", "real_nvp_flow._use_static_shape", "b.forward", "tensorflow.shape", "b.forward_event_shape", "real_nvp_flow.ConditionalRealNVPFlow._maybe_get_static_event_ndims", "b.forward_event_shape_tensor", "tensorflow.size", "real_nvp_flow.ConditionalRealNVPFlow._maybe_get_static_event_ndims", "real_nvp_flow.ConditionalRealNVPFlow.get", "real_nvp_flow.ConditionalRealNVPFlow.get", "tensorflow.rank"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow._use_static_shape", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow._use_static_shape", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.PointDynamics.forward", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.union_pool.UnionPool.size"], ["", "def", "_forward_log_det_jacobian", "(", "self", ",", "x", ",", "**", "condition_kwargs", ")", ":", "\n", "        ", "conditions", "=", "self", ".", "_get_flow_conditions", "(", "**", "condition_kwargs", ")", "\n", "\n", "# TODO(hartikainen): Once tfp.bijectors.Chain supports conditioning,", "\n", "# replace everything below with self.flow.forward_log_det_jacobian.", "\n", "# fldj = self.flow.forward_log_det_jacobian(", "\n", "#     x, event_ndims=1, **conditions)", "\n", "\n", "fldj", "=", "tf", ".", "cast", "(", "0.", ",", "dtype", "=", "x", ".", "dtype", ".", "base_dtype", ")", "\n", "event_ndims", "=", "self", ".", "_maybe_get_static_event_ndims", "(", "\n", "self", ".", "forward_min_event_ndims", ")", "\n", "\n", "if", "_use_static_shape", "(", "x", ",", "event_ndims", ")", ":", "\n", "            ", "event_shape", "=", "x", ".", "shape", "[", "x", ".", "shape", ".", "ndims", "-", "event_ndims", ":", "]", "\n", "", "else", ":", "\n", "            ", "event_shape", "=", "tf", ".", "shape", "(", "x", ")", "[", "tf", ".", "rank", "(", "x", ")", "-", "event_ndims", ":", "]", "\n", "", "for", "b", "in", "self", ".", "flow", ":", "\n", "            ", "fldj", "+=", "b", ".", "forward_log_det_jacobian", "(", "\n", "x", ",", "event_ndims", "=", "event_ndims", ",", "**", "conditions", ".", "get", "(", "b", ".", "name", ",", "{", "}", ")", ")", "\n", "if", "_use_static_shape", "(", "x", ",", "event_ndims", ")", ":", "\n", "                ", "event_shape", "=", "b", ".", "forward_event_shape", "(", "event_shape", ")", "\n", "event_ndims", "=", "self", ".", "_maybe_get_static_event_ndims", "(", "event_shape", ".", "ndims", ")", "\n", "", "else", ":", "\n", "                ", "event_shape", "=", "b", ".", "forward_event_shape_tensor", "(", "event_shape", ")", "\n", "event_ndims", "=", "tf", ".", "size", "(", "event_shape", ")", "\n", "event_ndims_", "=", "self", ".", "_maybe_get_static_event_ndims", "(", "event_ndims", ")", "\n", "if", "event_ndims_", "is", "not", "None", ":", "\n", "                    ", "event_ndims", "=", "event_ndims_", "\n", "", "", "x", "=", "b", ".", "forward", "(", "x", ",", "**", "conditions", ".", "get", "(", "b", ".", "name", ",", "{", "}", ")", ")", "\n", "\n", "", "return", "fldj", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow.ConditionalRealNVPFlow._inverse_log_det_jacobian": [[170, 206], ["real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions", "tensorflow.cast", "real_nvp_flow.ConditionalRealNVPFlow._maybe_get_static_event_ndims", "real_nvp_flow._use_static_shape", "reversed", "b.inverse_log_det_jacobian", "real_nvp_flow._use_static_shape", "b.inverse", "tensorflow.shape", "b.inverse_event_shape", "real_nvp_flow.ConditionalRealNVPFlow._maybe_get_static_event_ndims", "b.inverse_event_shape_tensor", "tensorflow.size", "real_nvp_flow.ConditionalRealNVPFlow._maybe_get_static_event_ndims", "real_nvp_flow.ConditionalRealNVPFlow.get", "real_nvp_flow.ConditionalRealNVPFlow.get", "tensorflow.rank"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow._use_static_shape", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow._use_static_shape", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.replay_pools.union_pool.UnionPool.size"], ["", "def", "_inverse_log_det_jacobian", "(", "self", ",", "y", ",", "**", "condition_kwargs", ")", ":", "\n", "        ", "conditions", "=", "self", ".", "_get_flow_conditions", "(", "**", "condition_kwargs", ")", "\n", "\n", "# TODO(hartikainen): Once tfp.bijectors.Chain supports conditioning,", "\n", "# replace everything below with self.flow.inverse_log_det_jacobian.", "\n", "# ildj = self.flow.inverse_log_det_jacobian(", "\n", "#     y, event_ndims=1, **conditions)", "\n", "\n", "ildj", "=", "tf", ".", "cast", "(", "0.", ",", "dtype", "=", "y", ".", "dtype", ".", "base_dtype", ")", "\n", "\n", "event_ndims", "=", "self", ".", "_maybe_get_static_event_ndims", "(", "\n", "self", ".", "inverse_min_event_ndims", ")", "\n", "\n", "if", "_use_static_shape", "(", "y", ",", "event_ndims", ")", ":", "\n", "            ", "event_shape", "=", "y", ".", "shape", "[", "y", ".", "shape", ".", "ndims", "-", "event_ndims", ":", "]", "\n", "", "else", ":", "\n", "            ", "event_shape", "=", "tf", ".", "shape", "(", "y", ")", "[", "tf", ".", "rank", "(", "y", ")", "-", "event_ndims", ":", "]", "\n", "\n", "", "for", "b", "in", "reversed", "(", "self", ".", "flow", ")", ":", "\n", "            ", "ildj", "+=", "b", ".", "inverse_log_det_jacobian", "(", "\n", "y", ",", "event_ndims", "=", "event_ndims", ",", "**", "conditions", ".", "get", "(", "b", ".", "name", ",", "{", "}", ")", ")", "\n", "\n", "if", "_use_static_shape", "(", "y", ",", "event_ndims", ")", ":", "\n", "                ", "event_shape", "=", "b", ".", "inverse_event_shape", "(", "event_shape", ")", "\n", "event_ndims", "=", "self", ".", "_maybe_get_static_event_ndims", "(", "\n", "event_shape", ".", "ndims", ")", "\n", "", "else", ":", "\n", "                ", "event_shape", "=", "b", ".", "inverse_event_shape_tensor", "(", "event_shape", ")", "\n", "event_ndims", "=", "tf", ".", "size", "(", "event_shape", ")", "\n", "event_ndims_", "=", "self", ".", "_maybe_get_static_event_ndims", "(", "event_ndims", ")", "\n", "if", "event_ndims_", "is", "not", "None", ":", "\n", "                    ", "event_ndims", "=", "event_ndims_", "\n", "\n", "", "", "y", "=", "b", ".", "inverse", "(", "y", ",", "**", "conditions", ".", "get", "(", "b", ".", "name", ",", "{", "}", ")", ")", "\n", "\n", "", "return", "ildj", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow._use_static_shape": [[17, 19], ["input_tensor.shape.is_fully_defined", "isinstance"], "function", ["None"], ["def", "_use_static_shape", "(", "input_tensor", ",", "ndims", ")", ":", "\n", "    ", "return", "input_tensor", ".", "shape", ".", "is_fully_defined", "(", ")", "and", "isinstance", "(", "ndims", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.distributions.real_nvp_flow.conditioned_real_nvp_template": [[208, 244], ["tensorflow.name_scope", "tensorflow.make_template", "tensorflow.concat", "tensorflow.layers.dense", "tensorflow.split", "tensorflow.layers.dense", "sorted"], "function", ["None"], ["", "", "def", "conditioned_real_nvp_template", "(", "hidden_layers", ",", "\n", "shift_only", "=", "False", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "None", ",", "\n", "*", "args", ",", "# pylint: disable=keyword-arg-before-vararg", "\n", "**", "kwargs", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "name_scope", "(", "name", ",", "\"conditioned_real_nvp_template\"", ")", ":", "\n", "\n", "        ", "def", "_fn", "(", "x", ",", "output_units", ",", "**", "condition_kwargs", ")", ":", "\n", "            ", "\"\"\"MLP which concatenates the condition kwargs to input.\"\"\"", "\n", "x", "=", "tf", ".", "concat", "(", "\n", "(", "x", ",", "*", "[", "condition_kwargs", "[", "k", "]", "for", "k", "in", "sorted", "(", "condition_kwargs", ")", "]", ")", ",", "\n", "axis", "=", "-", "1", ")", "\n", "\n", "for", "units", "in", "hidden_layers", ":", "\n", "                ", "x", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "inputs", "=", "x", ",", "\n", "units", "=", "units", ",", "\n", "activation", "=", "activation", ",", "\n", "*", "args", ",", "# pylint: disable=keyword-arg-before-vararg", "\n", "**", "kwargs", ")", "\n", "", "x", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "inputs", "=", "x", ",", "\n", "units", "=", "(", "1", "if", "shift_only", "else", "2", ")", "*", "output_units", ",", "\n", "activation", "=", "None", ",", "\n", "*", "args", ",", "# pylint: disable=keyword-arg-before-vararg", "\n", "**", "kwargs", ")", "\n", "\n", "if", "shift_only", ":", "\n", "                ", "return", "x", ",", "None", "\n", "\n", "", "shift", ",", "log_scale", "=", "tf", ".", "split", "(", "x", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "return", "shift", ",", "log_scale", "\n", "\n", "", "return", "tf", ".", "make_template", "(", "\"conditioned_real_nvp_template\"", ",", "_fn", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.convnet.convnet_model": [[20, 102], ["tfk.Sequential", "rl_with_videos.utils.tensorflow.nest.map_structure", "rl_with_videos.utils.tensorflow.nest.flatten", "tensorflow.concat", "rl_with_videos.utils.keras.PicklableSequential", "rl_with_videos.utils.keras.PicklableSequential", "tensorflow.keras.layers.Conv2D", "normalization_layer", "isinstance", "tensorflow.keras.layers.Activation", "activation", "tensorflow.image.convert_image_dtype", "tensorflow.image.convert_image_dtype", "tfkl.Lambda", "tfkl.Flatten", "tfkl.Lambda", "tfkl.Flatten", "tensorflow.keras.layers.Dense", "getattr", "convnet.convnet_model.conv_block"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.flatten"], ["conv_out", "=", "getattr", "(", "tf", ".", "keras", ".", "layers", ",", "pool_type", ")", "(", "\n", "pool_size", "=", "pool_size", ",", "strides", "=", "strides", "\n", ")", "(", "conv_out", ")", "\n", "", "return", "conv_out", "\n", "\n", "", "def", "convnet_preprocessor", "(", "\n", "input_shapes", ",", "\n", "image_shape", ",", "\n", "output_size", ",", "\n", "conv_filters", "=", "(", "32", ",", "32", ")", ",", "\n", "conv_kernel_sizes", "=", "(", "(", "5", ",", "5", ")", ",", "(", "5", ",", "5", ")", ")", ",", "\n", "pool_type", "=", "'MaxPool2D'", ",", "\n", "pool_sizes", "=", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", ",", "\n", "pool_strides", "=", "(", "2", ",", "2", ")", ",", "\n", "dense_hidden_layer_sizes", "=", "(", "64", ",", "64", ")", ",", "\n", "data_format", "=", "'channels_last'", ",", "\n", "name", "=", "\"convnet_preprocessor\"", ",", "\n", "make_picklable", "=", "True", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "if", "data_format", "==", "'channels_last'", ":", "\n", "        ", "H", ",", "W", ",", "C", "=", "image_shape", "\n", "", "elif", "data_format", "==", "'channels_first'", ":", "\n", "        ", "C", ",", "H", ",", "W", "=", "image_shape", "\n", "\n", "", "inputs", "=", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "input_shape", ")", "\n", "for", "input_shape", "in", "input_shapes", "\n", "]", "\n", "\n", "\n", "concatenated_input", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "concat", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", ")", "(", "inputs", ")", "\n", "\n", "images_flat", ",", "input_raw", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "[", "x", "[", "...", ",", ":", "H", "*", "W", "*", "C", "]", ",", "x", "[", "...", ",", "H", "*", "W", "*", "C", ":", "]", "]", "\n", ")", "(", "concatenated_input", ")", "\n", "\n", "images", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "image_shape", ")", "(", "images_flat", ")", "\n", "conv_out", "=", "conv_layers", "(", "images", ",", "conv_filters", ",", "conv_kernel_sizes", ",", "pool_sizes", ",", "pool_strides", ",", "pool_type", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "flattened", "=", "tf", ".", "keras", ".", "layers", ".", "Flatten", "(", ")", "(", "conv_out", ")", "\n", "concatenated_output", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "concat", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", ")", "(", "[", "flattened", ",", "input_raw", "]", ")", "\n", "\n", "output", "=", "(", "\n", "feedforward_model", "(", "\n", "input_shapes", "=", "(", "concatenated_output", ".", "shape", "[", "1", ":", "]", ".", "as_list", "(", ")", ",", ")", ",", "\n", "output_size", "=", "output_size", ",", "\n", "hidden_layer_sizes", "=", "dense_hidden_layer_sizes", ",", "\n", "activation", "=", "'relu'", ",", "\n", "output_activation", "=", "'linear'", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", "(", "[", "concatenated_output", "]", ")", "\n", "if", "dense_hidden_layer_sizes", "\n", "else", "concatenated_output", ")", "\n", "\n", "model", "=", "PicklableKerasModel", "(", "inputs", ",", "output", ",", "name", "=", "name", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization.__init__": [[79, 106], ["super().__init__", "tensorflow.keras.initializers.get", "tensorflow.keras.initializers.get", "tensorflow.keras.regularizers.get", "tensorflow.keras.regularizers.get", "tensorflow.keras.constraints.get", "tensorflow.keras.constraints.get", "normalization.GroupNormalization._check_axis"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._check_axis"], ["def", "__init__", "(", "self", ",", "\n", "groups", "=", "2", ",", "\n", "axis", "=", "-", "1", ",", "\n", "epsilon", "=", "1e-5", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "beta_initializer", "=", "'zeros'", ",", "\n", "gamma_initializer", "=", "'ones'", ",", "\n", "beta_regularizer", "=", "None", ",", "\n", "gamma_regularizer", "=", "None", ",", "\n", "beta_constraint", "=", "None", ",", "\n", "gamma_constraint", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GroupNormalization", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "supports_masking", "=", "True", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "axis", "=", "axis", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "center", "=", "center", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "beta_initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "get", "(", "beta_initializer", ")", "\n", "self", ".", "gamma_initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "get", "(", "gamma_initializer", ")", "\n", "self", ".", "beta_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "get", "(", "beta_regularizer", ")", "\n", "self", ".", "gamma_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "get", "(", "gamma_regularizer", ")", "\n", "self", ".", "beta_constraint", "=", "tf", ".", "keras", ".", "constraints", ".", "get", "(", "beta_constraint", ")", "\n", "self", ".", "gamma_constraint", "=", "tf", ".", "keras", ".", "constraints", ".", "get", "(", "gamma_constraint", ")", "\n", "self", ".", "_check_axis", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization.build": [[107, 118], ["normalization.GroupNormalization._check_if_input_shape_is_none", "normalization.GroupNormalization._set_number_of_groups_for_instance_norm", "normalization.GroupNormalization._check_size_of_dimensions", "normalization.GroupNormalization._create_input_spec", "normalization.GroupNormalization._add_gamma_weight", "normalization.GroupNormalization._add_beta_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._check_if_input_shape_is_none", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._set_number_of_groups_for_instance_norm", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._check_size_of_dimensions", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._create_input_spec", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._add_gamma_weight", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._add_beta_weight", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "        ", "self", ".", "_check_if_input_shape_is_none", "(", "input_shape", ")", "\n", "self", ".", "_set_number_of_groups_for_instance_norm", "(", "input_shape", ")", "\n", "self", ".", "_check_size_of_dimensions", "(", "input_shape", ")", "\n", "self", ".", "_create_input_spec", "(", "input_shape", ")", "\n", "\n", "self", ".", "_add_gamma_weight", "(", "input_shape", ")", "\n", "self", ".", "_add_beta_weight", "(", "input_shape", ")", "\n", "self", ".", "built", "=", "True", "\n", "super", "(", "GroupNormalization", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization.call": [[119, 133], ["tensorflow.keras.backend.int_shape", "tensorflow.shape", "normalization.GroupNormalization._reshape_into_groups", "normalization.GroupNormalization._apply_normalization", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._reshape_into_groups", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._apply_normalization"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "input_shape", "=", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "inputs", ")", "\n", "tensor_input_shape", "=", "tf", ".", "shape", "(", "inputs", ")", "\n", "\n", "reshaped_inputs", ",", "group_shape", "=", "self", ".", "_reshape_into_groups", "(", "\n", "inputs", ",", "input_shape", ",", "tensor_input_shape", ")", "\n", "\n", "normalized_inputs", "=", "self", ".", "_apply_normalization", "(", "reshaped_inputs", ",", "\n", "input_shape", ")", "\n", "\n", "outputs", "=", "tf", ".", "reshape", "(", "normalized_inputs", ",", "tensor_input_shape", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization.get_config": [[134, 161], ["super().get_config", "dict", "tensorflow.keras.initializers.serialize", "tensorflow.keras.initializers.serialize", "tensorflow.keras.regularizers.serialize", "tensorflow.keras.regularizers.serialize", "tensorflow.keras.constraints.serialize", "tensorflow.keras.constraints.serialize", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "'groups'", ":", "\n", "self", ".", "groups", ",", "\n", "'axis'", ":", "\n", "self", ".", "axis", ",", "\n", "'epsilon'", ":", "\n", "self", ".", "epsilon", ",", "\n", "'center'", ":", "\n", "self", ".", "center", ",", "\n", "'scale'", ":", "\n", "self", ".", "scale", ",", "\n", "'beta_initializer'", ":", "\n", "tf", ".", "keras", ".", "initializers", ".", "serialize", "(", "self", ".", "beta_initializer", ")", ",", "\n", "'gamma_initializer'", ":", "\n", "tf", ".", "keras", ".", "initializers", ".", "serialize", "(", "self", ".", "gamma_initializer", ")", ",", "\n", "'beta_regularizer'", ":", "\n", "tf", ".", "keras", ".", "regularizers", ".", "serialize", "(", "self", ".", "beta_regularizer", ")", ",", "\n", "'gamma_regularizer'", ":", "\n", "tf", ".", "keras", ".", "regularizers", ".", "serialize", "(", "self", ".", "gamma_regularizer", ")", ",", "\n", "'beta_constraint'", ":", "\n", "tf", ".", "keras", ".", "constraints", ".", "serialize", "(", "self", ".", "beta_constraint", ")", ",", "\n", "'gamma_constraint'", ":", "\n", "tf", ".", "keras", ".", "constraints", ".", "serialize", "(", "self", ".", "gamma_constraint", ")", "\n", "}", "\n", "base_config", "=", "super", "(", "GroupNormalization", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization.compute_output_shape": [[162, 164], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._reshape_into_groups": [[165, 173], ["tensorflow.stack.insert", "tensorflow.stack", "tensorflow.reshape", "range", "len"], "methods", ["None"], ["", "def", "_reshape_into_groups", "(", "self", ",", "inputs", ",", "input_shape", ",", "tensor_input_shape", ")", ":", "\n", "\n", "        ", "group_shape", "=", "[", "tensor_input_shape", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "input_shape", ")", ")", "]", "\n", "group_shape", "[", "self", ".", "axis", "]", "=", "input_shape", "[", "self", ".", "axis", "]", "//", "self", ".", "groups", "\n", "group_shape", ".", "insert", "(", "1", ",", "self", ".", "groups", ")", "\n", "group_shape", "=", "tf", ".", "stack", "(", "group_shape", ")", "\n", "reshaped_inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "group_shape", ")", "\n", "return", "reshaped_inputs", ",", "group_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._apply_normalization": [[174, 192], ["tensorflow.keras.backend.int_shape", "list", "tensorflow.nn.moments", "normalization.GroupNormalization._get_reshaped_weights", "tensorflow.nn.batch_normalization", "range", "len"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._get_reshaped_weights"], ["", "def", "_apply_normalization", "(", "self", ",", "reshaped_inputs", ",", "input_shape", ")", ":", "\n", "\n", "        ", "group_shape", "=", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "reshaped_inputs", ")", "\n", "group_reduction_axes", "=", "list", "(", "range", "(", "len", "(", "group_shape", ")", ")", ")", "\n", "# Remember the ordering of the tensor is [batch, group , steps]. Jump", "\n", "# the first 2 to calculate the variance and the mean", "\n", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "\n", "reshaped_inputs", ",", "group_reduction_axes", "[", "2", ":", "]", ",", "keep_dims", "=", "True", ")", "\n", "\n", "gamma", ",", "beta", "=", "self", ".", "_get_reshaped_weights", "(", "input_shape", ")", "\n", "normalized_inputs", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "\n", "reshaped_inputs", ",", "\n", "mean", "=", "mean", ",", "\n", "variance", "=", "variance", ",", "\n", "scale", "=", "gamma", ",", "\n", "offset", "=", "beta", ",", "\n", "variance_epsilon", "=", "self", ".", "epsilon", ")", "\n", "return", "normalized_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._get_reshaped_weights": [[193, 203], ["normalization.GroupNormalization._create_broadcast_shape", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._create_broadcast_shape"], ["", "def", "_get_reshaped_weights", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "broadcast_shape", "=", "self", ".", "_create_broadcast_shape", "(", "input_shape", ")", "\n", "gamma", "=", "None", "\n", "beta", "=", "None", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "gamma", "=", "tf", ".", "reshape", "(", "self", ".", "gamma", ",", "broadcast_shape", ")", "\n", "\n", "", "if", "self", ".", "center", ":", "\n", "            ", "beta", "=", "tf", ".", "reshape", "(", "self", ".", "beta", ",", "broadcast_shape", ")", "\n", "", "return", "gamma", ",", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._check_if_input_shape_is_none": [[204, 211], ["ValueError", "str", "str"], "methods", ["None"], ["", "def", "_check_if_input_shape_is_none", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "dim", "=", "input_shape", "[", "self", ".", "axis", "]", "\n", "if", "dim", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Axis '", "+", "str", "(", "self", ".", "axis", ")", "+", "' of '", "\n", "'input tensor should have a defined dimension '", "\n", "'but the layer received an input with shape '", "+", "\n", "str", "(", "input_shape", ")", "+", "'.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._set_number_of_groups_for_instance_norm": [[212, 217], ["None"], "methods", ["None"], ["", "", "def", "_set_number_of_groups_for_instance_norm", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "dim", "=", "input_shape", "[", "self", ".", "axis", "]", "\n", "\n", "if", "self", ".", "groups", "==", "-", "1", ":", "\n", "            ", "self", ".", "groups", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._check_size_of_dimensions": [[218, 230], ["ValueError", "ValueError", "str", "str", "str", "str"], "methods", ["None"], ["", "", "def", "_check_size_of_dimensions", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "        ", "dim", "=", "input_shape", "[", "self", ".", "axis", "]", "\n", "if", "dim", "<", "self", ".", "groups", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Number of groups ('", "+", "str", "(", "self", ".", "groups", ")", "+", "') cannot be '", "\n", "'more than the number of channels ('", "+", "str", "(", "dim", ")", "+", "').'", ")", "\n", "\n", "", "if", "dim", "%", "self", ".", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Number of groups ('", "+", "str", "(", "self", ".", "groups", ")", "+", "') must be a '", "\n", "'multiple of the number of channels ('", "+", "str", "(", "dim", ")", "+", "').'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._check_axis": [[231, 236], ["ValueError"], "methods", ["None"], ["", "", "def", "_check_axis", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "axis", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"You are trying to normalize your batch axis. Do you want to \"", "\n", "\"use tf.layer.batch_normalization instead\"", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._create_input_spec": [[238, 243], ["tensorflow.keras.layers.InputSpec", "len"], "methods", ["None"], ["", "", "def", "_create_input_spec", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "        ", "dim", "=", "input_shape", "[", "self", ".", "axis", "]", "\n", "self", ".", "input_spec", "=", "tf", ".", "keras", ".", "layers", ".", "InputSpec", "(", "\n", "ndim", "=", "len", "(", "input_shape", ")", ",", "axes", "=", "{", "self", ".", "axis", ":", "dim", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._add_gamma_weight": [[244, 258], ["normalization.GroupNormalization.add_weight"], "methods", ["None"], ["", "def", "_add_gamma_weight", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "        ", "dim", "=", "input_shape", "[", "self", ".", "axis", "]", "\n", "shape", "=", "(", "dim", ",", ")", "\n", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "self", ".", "gamma", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "shape", ",", "\n", "name", "=", "'gamma'", ",", "\n", "initializer", "=", "self", ".", "gamma_initializer", ",", "\n", "regularizer", "=", "self", ".", "gamma_regularizer", ",", "\n", "constraint", "=", "self", ".", "gamma_constraint", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gamma", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._add_beta_weight": [[259, 273], ["normalization.GroupNormalization.add_weight"], "methods", ["None"], ["", "", "def", "_add_beta_weight", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "        ", "dim", "=", "input_shape", "[", "self", ".", "axis", "]", "\n", "shape", "=", "(", "dim", ",", ")", "\n", "\n", "if", "self", ".", "center", ":", "\n", "            ", "self", ".", "beta", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "shape", ",", "\n", "name", "=", "'beta'", ",", "\n", "initializer", "=", "self", ".", "beta_initializer", ",", "\n", "regularizer", "=", "self", ".", "beta_regularizer", ",", "\n", "constraint", "=", "self", ".", "beta_constraint", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "beta", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.GroupNormalization._create_broadcast_shape": [[274, 279], ["broadcast_shape.insert", "len"], "methods", ["None"], ["", "", "def", "_create_broadcast_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "broadcast_shape", "=", "[", "1", "]", "*", "len", "(", "input_shape", ")", "\n", "broadcast_shape", "[", "self", ".", "axis", "]", "=", "input_shape", "[", "self", ".", "axis", "]", "//", "self", ".", "groups", "\n", "broadcast_shape", ".", "insert", "(", "1", ",", "self", ".", "groups", ")", "\n", "return", "broadcast_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.LayerNormalization.__init__": [[317, 322], ["normalization.GroupNormalization.__init__", "logging.warning"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "\"groups\"", "in", "kwargs", ":", "\n", "            ", "logging", ".", "warning", "(", "\"The given value for groups will be overwritten.\"", ")", "\n", "", "kwargs", "[", "\"groups\"", "]", "=", "1", "\n", "super", "(", "LayerNormalization", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.InstanceNormalization.__init__": [[361, 367], ["normalization.GroupNormalization.__init__", "logging.warning"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "\"groups\"", "in", "kwargs", ":", "\n", "            ", "logging", ".", "warning", "(", "\"The given value for groups will be overwritten.\"", ")", "\n", "\n", "", "kwargs", "[", "\"groups\"", "]", "=", "-", "1", "\n", "super", "(", "InstanceNormalization", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.normalization.register_keras_custom_object": [[26, 29], ["tensorflow.keras.utils.get_custom_objects"], "function", ["None"], ["def", "register_keras_custom_object", "(", "cls", ")", ":", "\n", "    ", "get_custom_objects", "(", ")", "[", "cls", ".", "__name__", "]", "=", "cls", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.autoencoder_models.SpatialSoftMax.call": [[120, 150], ["tensorflow.shape", "tensorflow.meshgrid", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.concat", "tensorflow.reshape", "tensorflow.reshape.set_shape", "tensorflow.lin_space", "tensorflow.lin_space", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.utils.numpy.softmax"], ["def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "#implementation from tf.contrib.layers.spatial_softmax", "\n", "#the follwoing line does not work because of a pesky", "\n", "#temperature variable creation", "\n", "#return tf.contrib.layers.spatial_softmax(inputs, temperature=1.0, trainable=True)", "\n", "\n", "#TODO Avi maybe add temperature here ", "\n", "#softmax_attention = nn.softmax(features / temperature)", "\n", "#import IPython; IPython.embed()", "\n", "        ", "shape", "=", "tf", ".", "shape", "(", "inputs", ")", "\n", "static_shape", "=", "inputs", ".", "shape", "\n", "height", ",", "width", ",", "num_channels", "=", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ",", "static_shape", "[", "3", "]", "\n", "pos_x", ",", "pos_y", "=", "tf", ".", "meshgrid", "(", "\n", "tf", ".", "lin_space", "(", "-", "1.", ",", "1.", ",", "num", "=", "height", ")", ",", "\n", "tf", ".", "lin_space", "(", "-", "1.", ",", "1.", ",", "num", "=", "width", ")", ",", "\n", "indexing", "=", "'ij'", ")", "\n", "pos_x", "=", "tf", ".", "reshape", "(", "pos_x", ",", "[", "height", "*", "width", "]", ")", "\n", "pos_y", "=", "tf", ".", "reshape", "(", "pos_y", ",", "[", "height", "*", "width", "]", ")", "\n", "\n", "inputs", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "transpose", "(", "inputs", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", ",", "[", "-", "1", ",", "height", "*", "width", "]", ")", "\n", "\n", "softmax_attention", "=", "tf", ".", "nn", ".", "softmax", "(", "inputs", ")", "\n", "expected_x", "=", "tf", ".", "reduce_sum", "(", "pos_x", "*", "softmax_attention", ",", "[", "1", "]", ",", "keepdims", "=", "True", ")", "\n", "expected_y", "=", "tf", ".", "reduce_sum", "(", "pos_y", "*", "softmax_attention", ",", "[", "1", "]", ",", "keepdims", "=", "True", ")", "\n", "expected_xy", "=", "tf", ".", "concat", "(", "[", "expected_x", ",", "expected_y", "]", ",", "1", ")", "\n", "feature_keypoints", "=", "tf", ".", "reshape", "(", "expected_xy", ",", "\n", "[", "-", "1", ",", "num_channels", ".", "value", "*", "2", "]", ")", "\n", "feature_keypoints", ".", "set_shape", "(", "[", "None", ",", "num_channels", ".", "value", "*", "2", "]", ")", "\n", "return", "feature_keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.autoencoder_models.SpatialSoftMax.compute_output_shape": [[151, 153], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "3", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.autoencoder_models.vanilla_ae": [[7, 58], ["tensorflow.keras.layers.Input", "rl_with_videos.utils.keras.PicklableKerasModel", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Conv2DTranspose"], "function", ["None"], ["def", "vanilla_ae", "(", "latent_dim", ")", ":", "\n", "\n", "    ", "input_image", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "(", "84", ",", "84", ",", "3", ")", ")", "\n", "\n", "conv", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "32", ",", "\n", "kernel_size", "=", "5", ",", "\n", "strides", "=", "(", "3", ",", "3", ")", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "input_image", ")", "\n", "conv", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "5", ",", "\n", "strides", "=", "(", "3", ",", "3", ")", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "conv", ")", "\n", "conv", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "5", ",", "\n", "strides", "=", "(", "3", ",", "3", ")", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "conv", ")", "\n", "\n", "flat", "=", "tf", ".", "keras", ".", "layers", ".", "Flatten", "(", ")", "(", "conv", ")", "\n", "latent_features", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "latent_dim", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "flat", ")", "\n", "\n", "low_dim", "=", "7", "#image dimension of downsampled image", "\n", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "low_dim", "*", "low_dim", "*", "32", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "latent_features", ")", "\n", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "target_shape", "=", "(", "low_dim", ",", "low_dim", ",", "32", ")", ")", "(", "out", ")", "\n", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2DTranspose", "(", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "5", ",", "\n", "strides", "=", "(", "3", ",", "3", ")", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "out", ")", "\n", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2DTranspose", "(", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "5", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "out", ")", "\n", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2DTranspose", "(", "\n", "filters", "=", "32", ",", "\n", "kernel_size", "=", "5", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "out", ")", "\n", "# No activation", "\n", "reconstruction", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2DTranspose", "(", "\n", "filters", "=", "3", ",", "kernel_size", "=", "3", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "'reconstruction'", ")", "(", "out", ")", "\n", "\n", "return", "PicklableKerasModel", "(", "inputs", "=", "input_image", ",", "outputs", "=", "[", "latent_features", ",", "reconstruction", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.autoencoder_models.spatial_ae": [[60, 114], ["tensorflow.keras.layers.Input", "rl_with_videos.utils.keras.PicklableKerasModel", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "autoencoder_models.SpatialSoftMax", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Conv2DTranspose", "int"], "function", ["None"], ["", "def", "spatial_ae", "(", "latent_dim", ")", ":", "\n", "    ", "\"\"\"\n    Implements the Deep Spatial AutoEncoder described in Finn et al. (2016)\n    \"\"\"", "\n", "assert", "latent_dim", "%", "2", "==", "0", ",", "latent_dim", "\n", "input_image", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "(", "84", ",", "84", ",", "3", ")", ")", "\n", "\n", "conv", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "32", ",", "\n", "kernel_size", "=", "5", ",", "\n", "strides", "=", "(", "3", ",", "3", ")", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "input_image", ")", "\n", "conv", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "32", ",", "\n", "kernel_size", "=", "5", ",", "\n", "strides", "=", "(", "3", ",", "3", ")", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "conv", ")", "\n", "conv", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "int", "(", "latent_dim", "/", "2", ")", ",", "\n", "kernel_size", "=", "5", ",", "\n", "strides", "=", "(", "3", ",", "3", ")", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "conv", ")", "\n", "\n", "#feature_points = tf.contrib.layers.spatial_softmax(conv, name='spatial_softmax')", "\n", "feature_points", "=", "SpatialSoftMax", "(", ")", "(", "conv", ")", "\n", "feature_points_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "0.5", ")", "(", "feature_points", ")", "\n", "\n", "low_dim", "=", "7", "#image dimension of downsampled image", "\n", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "low_dim", "*", "low_dim", "*", "32", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "feature_points_dropout", ")", "\n", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "target_shape", "=", "(", "low_dim", ",", "low_dim", ",", "32", ")", ")", "(", "out", ")", "\n", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2DTranspose", "(", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "5", ",", "\n", "strides", "=", "(", "3", ",", "3", ")", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "out", ")", "\n", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2DTranspose", "(", "\n", "filters", "=", "64", ",", "\n", "kernel_size", "=", "5", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "out", ")", "\n", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2DTranspose", "(", "\n", "filters", "=", "32", ",", "\n", "kernel_size", "=", "5", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "(", "out", ")", "\n", "# No activation", "\n", "reconstruction", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2DTranspose", "(", "\n", "filters", "=", "3", ",", "kernel_size", "=", "3", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "'reconstruction'", ")", "(", "out", ")", "\n", "\n", "return", "PicklableKerasModel", "(", "inputs", "=", "input_image", ",", "outputs", "=", "[", "feature_points", ",", "reconstruction", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.feedforward.feedforward_model": [[7, 57], ["print", "print", "rl_with_videos.utils.keras.PicklableKerasModel", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Lambda", "print", "print", "print", "tensorflow.keras.layers.Dense", "len", "preprocessor", "zip", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Dense", "tensorflow.concat", "rl_with_videos.utils.gradient_reversal.gradient_reversal", "tensorflow.stop_gradient"], "function", ["None"], ["def", "feedforward_model", "(", "input_shapes", ",", "\n", "output_size", ",", "\n", "hidden_layer_sizes", ",", "\n", "activation", "=", "'relu'", ",", "\n", "reverse_gradients", "=", "False", ",", "\n", "stop_gradients", "=", "False", ",", "\n", "output_activation", "=", "'linear'", ",", "\n", "preprocessors", "=", "None", ",", "\n", "name", "=", "'feedforward_model'", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "inputs", "=", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "input_shape", ")", "\n", "for", "input_shape", "in", "input_shapes", "\n", "]", "\n", "print", "(", "\"name:\"", ",", "name", ")", "\n", "print", "(", "\"inputs:\"", ",", "inputs", ")", "\n", "if", "preprocessors", "is", "None", ":", "\n", "        ", "preprocessors", "=", "(", "None", ",", ")", "*", "len", "(", "inputs", ")", "\n", "\n", "", "preprocessed_inputs", "=", "[", "\n", "preprocessor", "(", "input_", ")", "if", "preprocessor", "is", "not", "None", "else", "input_", "\n", "for", "preprocessor", ",", "input_", "in", "zip", "(", "preprocessors", ",", "inputs", ")", "\n", "]", "\n", "\n", "concatenated", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "concat", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", ")", "(", "preprocessed_inputs", ")", "\n", "\n", "if", "reverse_gradients", ":", "\n", "        ", "print", "(", "\"concatenated:\"", ",", "concatenated", ")", "\n", "concatenated", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "t", ":", "gradient_reversal", "(", "t", ")", ")", "(", "concatenated", ")", "\n", "print", "(", "\"after:\"", ",", "concatenated", ")", "\n", "", "if", "stop_gradients", ":", "\n", "        ", "print", "(", "\"stopping gradient to preprocessor\"", ")", "\n", "concatenated", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "x", ":", "tf", ".", "stop_gradient", "(", "x", ")", ")", "(", "concatenated", ")", "\n", "\n", "", "out", "=", "concatenated", "\n", "for", "units", "in", "hidden_layer_sizes", ":", "\n", "        ", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "units", ",", "*", "args", ",", "activation", "=", "activation", ",", "**", "kwargs", "\n", ")", "(", "out", ")", "\n", "\n", "", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "output_size", ",", "*", "args", ",", "activation", "=", "output_activation", ",", "**", "kwargs", "\n", ")", "(", "out", ")", "\n", "\n", "model", "=", "PicklableKerasModel", "(", "inputs", ",", "out", ",", "name", "=", "name", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.utils.build_metric_learner_from_variant": [[5, 16], ["metric_learner_params.update", "MetricLearner"], "function", ["None"], ["\n", "from", "ray", ".", "tune", "import", "sample_from", "\n", "\n", "import", "rl_with_videos", ".", "algorithms", ".", "utils", "as", "alg_utils", "\n", "import", "rl_with_videos", ".", "environments", ".", "utils", "as", "env_utils", "\n", "from", "rl_with_videos", ".", "misc", ".", "utils", "import", "datetimestamp", "\n", "\n", "\n", "DEFAULT_UNIVERSE", "=", "'gym'", "\n", "DEFAULT_DOMAIN", "=", "'Pendulum'", "\n", "DEFAULT_TASK", "=", "'v0'", "\n", "DEFAULT_ALGORITHM", "=", "'SAC'", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.utils.get_model_from_variant": [[18, 20], ["None"], "function", ["None"], ["AVAILABLE_UNIVERSES", "=", "tuple", "(", "env_utils", ".", "UNIVERSES", ")", "\n", "AVAILABLE_ALGORITHMS", "=", "set", "(", "alg_utils", ".", "ALGORITHM_CLASSES", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.utils.get_inverse_model_from_variant": [[21, 55], ["copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.pop", "convnet_model", "feedforward_model", "copy.deepcopy.pop", "rl_with_videos.preprocessors.utils.get_preprocessor_from_params", "feedforward_model"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.convnet.convnet_model", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.feedforward.feedforward_model", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.preprocessors.utils.get_preprocessor_from_params", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.feedforward.feedforward_model"], ["\n", "def", "add_ray_init_args", "(", "parser", ")", ":", "\n", "\n", "    ", "def", "init_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `ray.init`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Cpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Gpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resources'", ",", "\n", "type", "=", "json", ".", "loads", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Resources to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--include-webui'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "init_help_string", "(", "\"Boolean flag indicating whether to start the\"", "\n", "\"web UI, which is a Jupyter notebook.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--temp-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"If provided, it will specify the root temporary\"", "\n", "\" directory for the Ray process.\"", ")", ")", "\n", "\n", "return", "parser", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.models.utils.flatten_input_structure": [[57, 60], ["nest.flatten"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.flatten"], ["\n", "", "def", "add_ray_tune_args", "(", "parser", ")", ":", "\n", "\n", "    ", "def", "tune_help_string", "(", "help_string", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.environments.helpers.random_point_in_circle": [[4, 10], ["numpy.random.uniform", "numpy.array", "numpy.isscalar", "numpy.random.uniform", "numpy.cos", "numpy.sin"], "function", ["None"], ["def", "random_point_in_circle", "(", "angle_range", "=", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ",", "radius", "=", "(", "0", ",", "25", ")", ")", ":", "\n", "    ", "angle", "=", "np", ".", "random", ".", "uniform", "(", "*", "angle_range", ")", "\n", "radius", "=", "radius", "if", "np", ".", "isscalar", "(", "radius", ")", "else", "np", ".", "random", ".", "uniform", "(", "*", "radius", ")", "\n", "x", ",", "y", "=", "np", ".", "cos", "(", "angle", ")", "*", "radius", ",", "np", ".", "sin", "(", "angle", ")", "*", "radius", "\n", "point", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "return", "point", "\n", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.environments.utils.get_environment": [[30, 32], ["None"], "function", ["None"], ["default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Cpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.environments.utils.get_environment_from_params": [[33, 40], ["environment_params.get().copy", "utils.get_environment", "environment_params.get"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.environments.utils.get_environment"], ["'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Gpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resources'", ",", "\n", "type", "=", "json", ".", "loads", ",", "\n", "default", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.environments.utils.get_goal_example_environment_from_variant": [[41, 56], ["adapters.gym_adapter.GymAdapter", "register_goal_example_envs", "register_rl_with_videos_custom_envs", "gym.make", "gym.envs.registry.all"], "function", ["None"], ["help", "=", "init_help_string", "(", "\"Resources to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--include-webui'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "init_help_string", "(", "\"Boolean flag indicating whether to start the\"", "\n", "\"web UI, which is a Jupyter notebook.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--temp-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"If provided, it will specify the root temporary\"", "\n", "\" directory for the Ray process.\"", ")", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.MultiGoalEnv.__init__": [[17, 49], ["gym.utils.EzPickle.__init__", "multi_goal.PointDynamics", "numpy.zeros", "numpy.array", "multi_goal.MultiGoalEnv.reset", "locals"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.reset"], ["def", "__init__", "(", "self", ",", "\n", "goal_reward", "=", "10", ",", "\n", "actuation_cost_coeff", "=", "30.0", ",", "\n", "distance_cost_coeff", "=", "1.0", ",", "\n", "init_sigma", "=", "0.1", ")", ":", "\n", "        ", "EzPickle", ".", "__init__", "(", "**", "locals", "(", ")", ")", "\n", "\n", "self", ".", "dynamics", "=", "PointDynamics", "(", "dim", "=", "2", ",", "sigma", "=", "0", ")", "\n", "self", ".", "init_mu", "=", "np", ".", "zeros", "(", "2", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "init_sigma", "=", "init_sigma", "\n", "self", ".", "goal_positions", "=", "np", ".", "array", "(", "\n", "(", "\n", "(", "5", ",", "0", ")", ",", "\n", "(", "-", "5", ",", "0", ")", ",", "\n", "(", "0", ",", "5", ")", ",", "\n", "(", "0", ",", "-", "5", ")", "\n", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "goal_threshold", "=", "1.0", "\n", "self", ".", "goal_reward", "=", "goal_reward", "\n", "self", ".", "action_cost_coeff", "=", "actuation_cost_coeff", "\n", "self", ".", "distance_cost_coeff", "=", "distance_cost_coeff", "\n", "self", ".", "xlim", "=", "(", "-", "7", ",", "7", ")", "\n", "self", ".", "ylim", "=", "(", "-", "7", ",", "7", ")", "\n", "self", ".", "vel_bound", "=", "1.", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "observation", "=", "None", "\n", "\n", "self", ".", "_ax", "=", "None", "\n", "self", ".", "_env_lines", "=", "[", "]", "\n", "self", ".", "fixed_plots", "=", "None", "\n", "self", ".", "dynamic_plots", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.MultiGoalEnv.reset": [[50, 60], ["numpy.clip", "numpy.random.normal"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "unclipped_observation", "=", "(", "\n", "self", ".", "init_mu", "\n", "+", "self", ".", "init_sigma", "\n", "*", "np", ".", "random", ".", "normal", "(", "size", "=", "self", ".", "dynamics", ".", "s_dim", ")", ")", "\n", "self", ".", "observation", "=", "np", ".", "clip", "(", "\n", "unclipped_observation", ",", "\n", "self", ".", "observation_space", ".", "low", ",", "\n", "self", ".", "observation_space", ".", "high", ")", "\n", "return", "self", ".", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.MultiGoalEnv.observation_space": [[61, 68], ["gym.spaces.Box", "numpy.array", "numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "array", "(", "(", "self", ".", "xlim", "[", "0", "]", ",", "self", ".", "ylim", "[", "0", "]", ")", ")", ",", "\n", "high", "=", "np", ".", "array", "(", "(", "self", ".", "xlim", "[", "1", "]", ",", "self", ".", "ylim", "[", "1", "]", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", "shape", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.MultiGoalEnv.action_space": [[69, 76], ["gym.spaces.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "-", "self", ".", "vel_bound", ",", "\n", "high", "=", "self", ".", "vel_bound", ",", "\n", "shape", "=", "(", "self", ".", "dynamics", ".", "a_dim", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.MultiGoalEnv.get_current_obs": [[77, 79], ["numpy.copy"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "get_current_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "copy", "(", "self", ".", "observation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.MultiGoalEnv.step": [[80, 106], ["numpy.clip().ravel.ravel", "numpy.clip().ravel", "multi_goal.MultiGoalEnv.dynamics.forward", "numpy.clip", "multi_goal.MultiGoalEnv.compute_reward", "numpy.amin", "numpy.copy", "numpy.clip", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.PointDynamics.forward", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.ImageForkReacher2dEnv.compute_reward", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "action", "=", "action", ".", "ravel", "(", ")", "\n", "\n", "action", "=", "np", ".", "clip", "(", "\n", "action", ",", "\n", "self", ".", "action_space", ".", "low", ",", "\n", "self", ".", "action_space", ".", "high", ")", ".", "ravel", "(", ")", "\n", "\n", "observation", "=", "self", ".", "dynamics", ".", "forward", "(", "self", ".", "observation", ",", "action", ")", "\n", "observation", "=", "np", ".", "clip", "(", "\n", "observation", ",", "\n", "self", ".", "observation_space", ".", "low", ",", "\n", "self", ".", "observation_space", ".", "high", ")", "\n", "\n", "reward", "=", "self", ".", "compute_reward", "(", "observation", ",", "action", ")", "\n", "dist_to_goal", "=", "np", ".", "amin", "(", "[", "\n", "np", ".", "linalg", ".", "norm", "(", "observation", "-", "goal_position", ")", "\n", "for", "goal_position", "in", "self", ".", "goal_positions", "\n", "]", ")", "\n", "done", "=", "dist_to_goal", "<", "self", ".", "goal_threshold", "\n", "if", "done", ":", "\n", "            ", "reward", "+=", "self", ".", "goal_reward", "\n", "\n", "", "self", ".", "observation", "=", "np", ".", "copy", "(", "observation", ")", "\n", "\n", "return", "observation", ",", "reward", ",", "done", ",", "{", "'pos'", ":", "observation", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.MultiGoalEnv._init_plot": [[107, 121], ["matplotlib.figure", "matplotlib.figure.add_subplot", "multi_goal.MultiGoalEnv._ax.axis", "multi_goal.MultiGoalEnv._ax.set_xlim", "multi_goal.MultiGoalEnv._ax.set_ylim", "multi_goal.MultiGoalEnv._ax.set_title", "multi_goal.MultiGoalEnv._ax.set_xlabel", "multi_goal.MultiGoalEnv._ax.set_ylabel", "multi_goal.MultiGoalEnv._plot_position_cost"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.MultiGoalEnv._plot_position_cost"], ["", "def", "_init_plot", "(", "self", ")", ":", "\n", "        ", "fig_env", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "7", ",", "7", ")", ")", "\n", "self", ".", "_ax", "=", "fig_env", ".", "add_subplot", "(", "111", ")", "\n", "self", ".", "_ax", ".", "axis", "(", "'equal'", ")", "\n", "\n", "self", ".", "_env_lines", "=", "[", "]", "\n", "self", ".", "_ax", ".", "set_xlim", "(", "(", "-", "7", ",", "7", ")", ")", "\n", "self", ".", "_ax", ".", "set_ylim", "(", "(", "-", "7", ",", "7", ")", ")", "\n", "\n", "self", ".", "_ax", ".", "set_title", "(", "'Multigoal Environment'", ")", "\n", "self", ".", "_ax", ".", "set_xlabel", "(", "'x'", ")", "\n", "self", ".", "_ax", ".", "set_ylabel", "(", "'y'", ")", "\n", "\n", "self", ".", "_plot_position_cost", "(", "self", ".", "_ax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.MultiGoalEnv.render_rollouts": [[122, 139], ["matplotlib.draw", "matplotlib.pause", "multi_goal.MultiGoalEnv._init_plot", "line.remove", "numpy.stack", "multi_goal.MultiGoalEnv._ax.plot"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.draw", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.MultiGoalEnv._init_plot"], ["", "def", "render_rollouts", "(", "self", ",", "paths", "=", "(", ")", ")", ":", "\n", "        ", "\"\"\"Render for rendering the past rollouts of the environment.\"\"\"", "\n", "if", "self", ".", "_ax", "is", "None", ":", "\n", "            ", "self", ".", "_init_plot", "(", ")", "\n", "\n", "# noinspection PyArgumentList", "\n", "", "[", "line", ".", "remove", "(", ")", "for", "line", "in", "self", ".", "_env_lines", "]", "\n", "self", ".", "_env_lines", "=", "[", "]", "\n", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "positions", "=", "np", ".", "stack", "(", "[", "info", "[", "'pos'", "]", "for", "info", "in", "path", "[", "'infos'", "]", "]", ")", "\n", "xx", "=", "positions", "[", ":", ",", "0", "]", "\n", "yy", "=", "positions", "[", ":", ",", "1", "]", "\n", "self", ".", "_env_lines", "+=", "self", ".", "_ax", ".", "plot", "(", "xx", ",", "yy", ",", "'b'", ")", "\n", "\n", "", "plt", ".", "draw", "(", ")", "\n", "plt", ".", "pause", "(", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.MultiGoalEnv.render": [[140, 143], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "\"\"\"Render for rendering the current state of the environment.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.MultiGoalEnv.compute_reward": [[144, 161], ["numpy.sum", "numpy.amin", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "compute_reward", "(", "self", ",", "observation", ",", "action", ")", ":", "\n", "# penalize the L2 norm of acceleration", "\n", "# noinspection PyTypeChecker", "\n", "        ", "action_cost", "=", "np", ".", "sum", "(", "action", "**", "2", ")", "*", "self", ".", "action_cost_coeff", "\n", "\n", "# penalize squared dist to goal", "\n", "cur_position", "=", "observation", "\n", "# noinspection PyTypeChecker", "\n", "goal_cost", "=", "self", ".", "distance_cost_coeff", "*", "np", ".", "amin", "(", "[", "\n", "np", ".", "sum", "(", "(", "cur_position", "-", "goal_position", ")", "**", "2", ")", "\n", "for", "goal_position", "in", "self", ".", "goal_positions", "\n", "]", ")", "\n", "\n", "# penalize staying with the log barriers", "\n", "costs", "=", "[", "action_cost", ",", "goal_cost", "]", "\n", "reward", "=", "-", "np", ".", "sum", "(", "costs", ")", "\n", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.MultiGoalEnv._plot_position_cost": [[162, 183], ["tuple", "tuple", "numpy.meshgrid", "numpy.amin", "ax.contour", "ax.clabel", "ax.set_xlim", "ax.set_ylim", "ax.plot", "numpy.arange", "numpy.arange", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_plot_position_cost", "(", "self", ",", "ax", ")", ":", "\n", "        ", "delta", "=", "0.01", "\n", "x_min", ",", "x_max", "=", "tuple", "(", "1.1", "*", "np", ".", "array", "(", "self", ".", "xlim", ")", ")", "\n", "y_min", ",", "y_max", "=", "tuple", "(", "1.1", "*", "np", ".", "array", "(", "self", ".", "ylim", ")", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "\n", "np", ".", "arange", "(", "x_min", ",", "x_max", ",", "delta", ")", ",", "\n", "np", ".", "arange", "(", "y_min", ",", "y_max", ",", "delta", ")", "\n", ")", "\n", "goal_costs", "=", "np", ".", "amin", "(", "[", "\n", "(", "X", "-", "goal_x", ")", "**", "2", "+", "(", "Y", "-", "goal_y", ")", "**", "2", "\n", "for", "goal_x", ",", "goal_y", "in", "self", ".", "goal_positions", "\n", "]", ",", "axis", "=", "0", ")", "\n", "costs", "=", "goal_costs", "\n", "\n", "contours", "=", "ax", ".", "contour", "(", "X", ",", "Y", ",", "costs", ",", "20", ")", "\n", "ax", ".", "clabel", "(", "contours", ",", "inline", "=", "1", ",", "fontsize", "=", "10", ",", "fmt", "=", "'%.0f'", ")", "\n", "ax", ".", "set_xlim", "(", "[", "x_min", ",", "x_max", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "y_min", ",", "y_max", "]", ")", "\n", "goal", "=", "ax", ".", "plot", "(", "self", ".", "goal_positions", "[", ":", ",", "0", "]", ",", "\n", "self", ".", "goal_positions", "[", ":", ",", "1", "]", ",", "'ro'", ")", "\n", "return", "[", "contours", ",", "goal", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.PointDynamics.__init__": [[190, 195], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dim", ",", "sigma", ")", ":", "\n", "        ", "self", ".", "dim", "=", "dim", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "s_dim", "=", "dim", "\n", "self", ".", "a_dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.multi_goal.PointDynamics.forward": [[196, 201], ["numpy.random.normal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "mu_next", "=", "state", "+", "action", "\n", "state_next", "=", "mu_next", "+", "self", ".", "sigma", "*", "np", ".", "random", ".", "normal", "(", "size", "=", "self", ".", "s_dim", ")", "\n", "return", "state_next", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.__init__.register_mujoco_environments": [[106, 116], ["tuple", "gym.register"], "function", ["None"], []], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.__init__.register_general_environments": [[118, 128], ["tuple", "gym.register"], "function", ["None"], []], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.__init__.register_multiworld_environments": [[130, 140], ["tuple", "gym.register"], "function", ["None"], []], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.__init__.register_environments": [[142, 151], ["__init__.register_mujoco_environments", "__init__.register_general_environments", "__init__.register_multiworld_environments"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.__init__.register_mujoco_environments", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.__init__.register_general_environments", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.gym.__init__.register_multiworld_environments"], []], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.pusher_2d.Pusher2dEnv.__init__": [[34, 61], ["pusher_2d.Pusher2dEnv._Serializable__initialize", "[].astype", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "locals", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["def", "__init__", "(", "self", ",", "\n", "goal", "=", "(", "0", ",", "-", "1", ")", ",", "\n", "arm_object_distance_cost_coeff", "=", "0", ",", "\n", "goal_object_distance_cost_coeff", "=", "1.0", ",", "\n", "ctrl_cost_coeff", "=", "0.1", ")", ":", "\n", "        ", "\"\"\"\n        goal (`list`): List of two elements denoting the x and y coordinates of\n            the goal location. Either of the coordinate can also be a string\n            'any' to make the reward not to depend on the corresponding\n            coordinate.\n        arm_distance_coeff ('float'): Coefficient for the arm-to-object distance\n            cost.\n        goal_distance_coeff ('float'): Coefficient for the object-to-goal\n            distance cost.\n        \"\"\"", "\n", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "\n", "self", ".", "_goal_mask", "=", "[", "coordinate", "!=", "'any'", "for", "coordinate", "in", "goal", "]", "\n", "self", ".", "_goal", "=", "np", ".", "array", "(", "goal", ")", "[", "self", ".", "_goal_mask", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "self", ".", "_arm_object_distance_cost_coeff", "=", "arm_object_distance_cost_coeff", "\n", "self", ".", "_goal_object_distance_cost_coeff", "=", "goal_object_distance_cost_coeff", "\n", "self", ".", "_ctrl_cost_coeff", "=", "ctrl_cost_coeff", "\n", "\n", "MujocoEnv", ".", "__init__", "(", "self", ",", "model_path", "=", "self", ".", "MODEL_PATH", ",", "frame_skip", "=", "5", ")", "\n", "\n", "self", ".", "model", ".", "stat", ".", "extent", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.pusher_2d.Pusher2dEnv.step": [[62, 70], ["pusher_2d.Pusher2dEnv.compute_reward", "pusher_2d.Pusher2dEnv.do_simulation", "pusher_2d.Pusher2dEnv._get_obs", "pusher_2d.Pusher2dEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.ImageForkReacher2dEnv.compute_reward", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.BlindForkReacher2dEnv._get_obs", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.BlindForkReacher2dEnv._get_obs"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "reward", ",", "info", "=", "self", ".", "compute_reward", "(", "self", ".", "_get_obs", "(", ")", ",", "action", ")", "\n", "\n", "self", ".", "do_simulation", "(", "action", ",", "self", ".", "frame_skip", ")", "\n", "observation", "=", "self", ".", "_get_obs", "(", ")", "\n", "done", "=", "False", "\n", "\n", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.pusher_2d.Pusher2dEnv.compute_reward": [[71, 102], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.sum", "rewards.squeeze.squeeze.squeeze", "arm_object_distances.squeeze.squeeze.squeeze", "goal_object_distances.squeeze.squeeze.squeeze"], "methods", ["None"], ["", "def", "compute_reward", "(", "self", ",", "observations", ",", "actions", ")", ":", "\n", "        ", "is_batch", "=", "True", "\n", "if", "observations", ".", "ndim", "==", "1", ":", "\n", "            ", "observations", "=", "observations", "[", "None", "]", "\n", "actions", "=", "actions", "[", "None", "]", "\n", "is_batch", "=", "False", "\n", "\n", "", "arm_pos", "=", "observations", "[", ":", ",", "-", "6", ":", "-", "3", "]", "\n", "obj_pos", "=", "observations", "[", ":", ",", "-", "3", ":", "]", "\n", "obj_pos_masked", "=", "obj_pos", "[", ":", ",", ":", "2", "]", "[", ":", ",", "self", ".", "_goal_mask", "]", "\n", "\n", "goal_object_distances", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "_goal", "[", "None", "]", "-", "obj_pos_masked", ",", "axis", "=", "1", ")", "\n", "arm_object_distances", "=", "np", ".", "linalg", ".", "norm", "(", "arm_pos", "-", "obj_pos", ",", "axis", "=", "1", ")", "\n", "ctrl_costs", "=", "np", ".", "sum", "(", "actions", "**", "2", ",", "axis", "=", "1", ")", "\n", "\n", "costs", "=", "(", "\n", "+", "self", ".", "_arm_object_distance_cost_coeff", "*", "arm_object_distances", "\n", "+", "self", ".", "_goal_object_distance_cost_coeff", "*", "goal_object_distances", "\n", "+", "self", ".", "_ctrl_cost_coeff", "*", "ctrl_costs", ")", "\n", "\n", "rewards", "=", "-", "costs", "\n", "\n", "if", "not", "is_batch", ":", "\n", "            ", "rewards", "=", "rewards", ".", "squeeze", "(", ")", "\n", "arm_object_distances", "=", "arm_object_distances", ".", "squeeze", "(", ")", "\n", "goal_object_distances", "=", "goal_object_distances", ".", "squeeze", "(", ")", "\n", "\n", "", "return", "rewards", ",", "{", "\n", "'arm_object_distance'", ":", "arm_object_distances", ",", "\n", "'goal_object_distance'", ":", "goal_object_distances", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.pusher_2d.Pusher2dEnv.viewer_setup": [[104, 113], ["numpy.array", "range"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "0", "\n", "cam_pos", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "4", ",", "-", "45", ",", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "i", "]", "=", "cam_pos", "[", "i", "]", "\n", "", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "cam_pos", "[", "3", "]", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "cam_pos", "[", "4", "]", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "cam_pos", "[", "5", "]", "\n", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.pusher_2d.Pusher2dEnv.reset_model": [[114, 139], ["pusher_2d.Pusher2dEnv.set_state", "pusher_2d.Pusher2dEnv._get_obs", "pusher_2d.Pusher2dEnv.init_qvel.copy().squeeze", "numpy.array", "numpy.array", "numpy.random.uniform", "pusher_2d.Pusher2dEnv.init_qpos.squeeze", "pusher_2d.Pusher2dEnv.init_qpos.squeeze", "numpy.random.uniform", "pusher_2d.Pusher2dEnv.init_qvel.copy"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.BlindForkReacher2dEnv._get_obs", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "reset_model", "(", "self", ",", "qpos", "=", "None", ",", "qvel", "=", "None", ")", ":", "\n", "        ", "if", "qpos", "is", "None", ":", "\n", "            ", "qpos", "=", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "0.1", ",", "high", "=", "0.1", ",", "size", "=", "self", ".", "model", ".", "nq", "\n", ")", "+", "self", ".", "init_qpos", ".", "squeeze", "(", ")", "\n", "qpos", "[", "self", ".", "TARGET_INDS", "]", "=", "self", ".", "init_qpos", ".", "squeeze", "(", ")", "[", "self", ".", "TARGET_INDS", "]", "\n", "\n", "puck_position", "=", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "[", "0.3", ",", "-", "1.0", "]", ",", "high", "=", "[", "1.0", ",", "-", "0.4", "]", ")", ",", "\n", "\n", "qpos", "[", "self", ".", "PUCK_INDS", "]", "=", "puck_position", "\n", "\n", "", "if", "qvel", "is", "None", ":", "\n", "            ", "qvel", "=", "self", ".", "init_qvel", ".", "copy", "(", ")", ".", "squeeze", "(", ")", "\n", "qvel", "[", "self", ".", "PUCK_INDS", "]", "=", "0", "\n", "qvel", "[", "self", ".", "TARGET_INDS", "]", "=", "0", "\n", "\n", "# TODO: remnants from rllab -> gym conversion", "\n", "# qacc = np.zeros(self.sim.data.qacc.shape[0])", "\n", "# ctrl = np.zeros(self.sim.data.ctrl.shape[0])", "\n", "# full_state = np.concatenate((qpos, qvel, qacc, ctrl))", "\n", "\n", "", "self", ".", "set_state", "(", "np", ".", "array", "(", "qpos", ")", ",", "np", ".", "array", "(", "qvel", ")", ")", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.pusher_2d.Pusher2dEnv._get_obs": [[140, 148], ["numpy.concatenate().reshape", "numpy.concatenate", "numpy.sin", "numpy.cos", "pusher_2d.Pusher2dEnv.get_body_com", "pusher_2d.Pusher2dEnv.get_body_com"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "np", ".", "sin", "(", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", "[", "self", ".", "JOINT_INDS", "]", ")", ",", "\n", "np", ".", "cos", "(", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", "[", "self", ".", "JOINT_INDS", "]", ")", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", "[", "self", ".", "JOINT_INDS", "]", ",", "\n", "self", ".", "get_body_com", "(", "\"distal_4\"", ")", ",", "\n", "self", ".", "get_body_com", "(", "\"object\"", ")", ",", "\n", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.pusher_2d.ForkReacherEnv.__init__": [[151, 162], ["pusher_2d.ForkReacherEnv._Serializable__initialize", "pusher_2d.Pusher2dEnv.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "arm_goal_distance_cost_coeff", "=", "1.0", ",", "\n", "arm_object_distance_cost_coeff", "=", "0.0", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "\n", "self", ".", "_arm_goal_distance_cost_coeff", "=", "arm_goal_distance_cost_coeff", "\n", "self", ".", "_arm_object_distance_cost_coeff", "=", "arm_object_distance_cost_coeff", "\n", "\n", "super", "(", "ForkReacherEnv", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.pusher_2d.ForkReacherEnv.compute_reward": [[163, 195], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.sum", "NotImplementedError", "rewards.squeeze.squeeze.squeeze", "arm_goal_dists.squeeze.squeeze.squeeze", "arm_object_dists.squeeze.squeeze.squeeze"], "methods", ["None"], ["", "def", "compute_reward", "(", "self", ",", "observations", ",", "actions", ")", ":", "\n", "        ", "is_batch", "=", "True", "\n", "if", "observations", ".", "ndim", "==", "1", ":", "\n", "            ", "observations", "=", "observations", "[", "None", "]", "\n", "actions", "=", "actions", "[", "None", "]", "\n", "is_batch", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Might be broken.'", ")", "\n", "\n", "", "arm_pos", "=", "observations", "[", ":", ",", "-", "8", ":", "-", "6", "]", "\n", "goal_pos", "=", "observations", "[", ":", ",", "-", "2", ":", "]", "\n", "object_pos", "=", "observations", "[", ":", ",", "-", "5", ":", "-", "3", "]", "\n", "\n", "arm_goal_dists", "=", "np", ".", "linalg", ".", "norm", "(", "arm_pos", "-", "goal_pos", ",", "axis", "=", "1", ")", "\n", "arm_object_dists", "=", "np", ".", "linalg", ".", "norm", "(", "arm_pos", "-", "object_pos", ",", "axis", "=", "1", ")", "\n", "ctrl_costs", "=", "np", ".", "sum", "(", "actions", "**", "2", ",", "axis", "=", "1", ")", "\n", "\n", "costs", "=", "(", "\n", "+", "self", ".", "_arm_goal_distance_cost_coeff", "*", "arm_goal_dists", "\n", "+", "self", ".", "_arm_object_distance_cost_coeff", "*", "arm_object_dists", "\n", "+", "self", ".", "_ctrl_cost_coeff", "*", "ctrl_costs", ")", "\n", "\n", "rewards", "=", "-", "costs", "\n", "\n", "if", "not", "is_batch", ":", "\n", "            ", "rewards", "=", "rewards", ".", "squeeze", "(", ")", "\n", "arm_goal_dists", "=", "arm_goal_dists", ".", "squeeze", "(", ")", "\n", "arm_object_dists", "=", "arm_object_dists", ".", "squeeze", "(", ")", "\n", "\n", "", "return", "rewards", ",", "{", "\n", "'arm_goal_distance'", ":", "arm_goal_dists", ",", "\n", "'arm_object_distance'", ":", "arm_object_dists", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.pusher_2d.ForkReacherEnv.reset_model": [[197, 243], ["pusher_2d.ForkReacherEnv.set_state", "pusher_2d.ForkReacherEnv._get_obs", "numpy.array", "numpy.random.uniform", "pusher_2d.ForkReacherEnv.init_qvel.copy().squeeze", "numpy.array", "numpy.array", "numpy.random.uniform", "pusher_2d.ForkReacherEnv.init_qpos.squeeze", "rl_with_videos.environments.helpers.random_point_in_circle", "numpy.sign", "numpy.maximum", "numpy.abs", "numpy.where", "pusher_2d.ForkReacherEnv.init_qvel.copy"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.BlindForkReacher2dEnv._get_obs", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.environments.helpers.random_point_in_circle", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "reset_model", "(", "self", ",", "qpos", "=", "None", ",", "qvel", "=", "None", ")", ":", "\n", "        ", "if", "qpos", "is", "None", ":", "\n", "            ", "qpos", "=", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "0.1", ",", "high", "=", "0.1", ",", "size", "=", "self", ".", "model", ".", "nq", "\n", ")", "+", "self", ".", "init_qpos", ".", "squeeze", "(", ")", "\n", "\n", "# qpos[self.JOINT_INDS[0]] = np.random.uniform(-np.pi, np.pi)", "\n", "# qpos[self.JOINT_INDS[1]] = np.random.uniform(", "\n", "#     -np.pi/2, np.pi/2) + np.pi/4", "\n", "# qpos[self.JOINT_INDS[2]] = np.random.uniform(", "\n", "#     -np.pi/2, np.pi/2) + np.pi/2", "\n", "\n", "target_position", "=", "np", ".", "array", "(", "random_point_in_circle", "(", "\n", "angle_range", "=", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ",", "radius", "=", "(", "0.6", ",", "1.2", ")", ")", ")", "\n", "target_position", "[", "1", "]", "+=", "1.0", "\n", "\n", "qpos", "[", "self", ".", "TARGET_INDS", "]", "=", "target_position", "\n", "# qpos[self.TARGET_INDS] = [1.0, 2.0]", "\n", "# qpos[self.TARGET_INDS] = self.init_qpos.squeeze()[self.TARGET_INDS]", "\n", "\n", "puck_position", "=", "np", ".", "random", ".", "uniform", "(", "[", "-", "1.0", "]", ",", "[", "1.0", "]", ",", "size", "=", "[", "2", "]", ")", "\n", "puck_position", "=", "(", "\n", "np", ".", "sign", "(", "puck_position", ")", "\n", "*", "np", ".", "maximum", "(", "np", ".", "abs", "(", "puck_position", ")", ",", "1", "/", "2", ")", ")", "\n", "puck_position", "[", "np", ".", "where", "(", "puck_position", "==", "0", ")", "]", "=", "1.0", "\n", "# puck_position[1] += 1.0", "\n", "# puck_position = np.random.uniform(", "\n", "#     low=[0.3, -1.0], high=[1.0, -0.4]),", "\n", "\n", "qpos", "[", "self", ".", "PUCK_INDS", "]", "=", "puck_position", "\n", "\n", "", "if", "qvel", "is", "None", ":", "\n", "            ", "qvel", "=", "self", ".", "init_qvel", ".", "copy", "(", ")", ".", "squeeze", "(", ")", "\n", "qvel", "[", "self", ".", "PUCK_INDS", "]", "=", "0", "\n", "qvel", "[", "self", ".", "TARGET_INDS", "]", "=", "0", "\n", "\n", "# TODO: remnants from rllab -> gym conversion", "\n", "# qacc = np.zeros(self.sim.data.qacc.shape[0])", "\n", "# ctrl = np.zeros(self.sim.data.ctrl.shape[0])", "\n", "# full_state = np.concatenate((qpos, qvel, qacc, ctrl))", "\n", "\n", "# super(Pusher2dEnv, self).reset(full_state)", "\n", "\n", "", "self", ".", "set_state", "(", "np", ".", "array", "(", "qpos", ")", ",", "np", ".", "array", "(", "qvel", ")", ")", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.pusher_2d.ForkReacherEnv._get_obs": [[244, 250], ["pusher_2d.Pusher2dEnv._get_obs", "numpy.concatenate", "pusher_2d.ForkReacherEnv.get_body_com"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.BlindForkReacher2dEnv._get_obs"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "super_observation", "=", "super", "(", "ForkReacherEnv", ",", "self", ")", ".", "_get_obs", "(", ")", "\n", "observation", "=", "np", ".", "concatenate", "(", "[", "\n", "super_observation", ",", "self", ".", "get_body_com", "(", "'goal'", ")", "[", ":", "2", "]", "\n", "]", ")", "\n", "return", "observation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.ImagePusher2dEnv.__init__": [[8, 12], ["image_pusher_2d.ImagePusher2dEnv._Serializable__initialize", "pusher_2d.Pusher2dEnv.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_shape", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "self", ".", "image_shape", "=", "image_shape", "\n", "Pusher2dEnv", ".", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.ImagePusher2dEnv._get_obs": [[13, 23], ["image_pusher_2d.ImagePusher2dEnv.render", "numpy.concatenate().reshape", "numpy.concatenate", "image_pusher_2d.ImagePusher2dEnv.reshape"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.render"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "width", ",", "height", "=", "self", ".", "image_shape", "[", ":", "2", "]", "\n", "image", "=", "self", ".", "render", "(", "mode", "=", "'rgb_array'", ",", "width", "=", "width", ",", "height", "=", "height", ")", "\n", "image", "=", "(", "(", "2.0", "/", "255.0", ")", "*", "image", "-", "1.0", ")", "\n", "\n", "return", "np", ".", "concatenate", "(", "[", "\n", "image", ".", "reshape", "(", "-", "1", ")", ",", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", "[", "self", ".", "JOINT_INDS", "]", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", "[", "self", ".", "JOINT_INDS", "]", ",", "\n", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.ImagePusher2dEnv.step": [[24, 36], ["super()._get_obs", "image_pusher_2d.ImagePusher2dEnv.compute_reward", "image_pusher_2d.ImagePusher2dEnv.do_simulation", "image_pusher_2d.ImagePusher2dEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.BlindForkReacher2dEnv._get_obs", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.ImageForkReacher2dEnv.compute_reward", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.BlindForkReacher2dEnv._get_obs"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Step, computing reward from 'true' observations and not images.\"\"\"", "\n", "\n", "reward_observations", "=", "super", "(", "ImagePusher2dEnv", ",", "self", ")", ".", "_get_obs", "(", ")", "\n", "reward", ",", "info", "=", "self", ".", "compute_reward", "(", "reward_observations", ",", "action", ")", "\n", "\n", "self", ".", "do_simulation", "(", "action", ",", "self", ".", "frame_skip", ")", "\n", "\n", "observation", "=", "self", ".", "_get_obs", "(", ")", "\n", "done", "=", "False", "\n", "\n", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.ImagePusher2dEnv.viewer_setup": [[37, 44], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "0", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", ":", "3", "]", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "3.5", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "90", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "0", "\n", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.ImageForkReacher2dEnv.__init__": [[47, 58], ["image_pusher_2d.ImageForkReacher2dEnv._Serializable__initialize", "image_pusher_2d.ImagePusher2dEnv.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "arm_goal_distance_cost_coeff", ",", "\n", "arm_object_distance_cost_coeff", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "\n", "self", ".", "_arm_goal_distance_cost_coeff", "=", "arm_goal_distance_cost_coeff", "\n", "self", ".", "_arm_object_distance_cost_coeff", "=", "arm_object_distance_cost_coeff", "\n", "\n", "super", "(", "ImageForkReacher2dEnv", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.ImageForkReacher2dEnv.compute_reward": [[59, 91], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.sum", "NotImplementedError", "rewards.squeeze.squeeze.squeeze", "arm_goal_dists.squeeze.squeeze.squeeze", "arm_object_dists.squeeze.squeeze.squeeze", "image_pusher_2d.ImageForkReacher2dEnv.get_body_com"], "methods", ["None"], ["", "def", "compute_reward", "(", "self", ",", "observations", ",", "actions", ")", ":", "\n", "        ", "is_batch", "=", "True", "\n", "if", "observations", ".", "ndim", "==", "1", ":", "\n", "            ", "observations", "=", "observations", "[", "None", "]", "\n", "actions", "=", "actions", "[", "None", "]", "\n", "is_batch", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Might be broken.'", ")", "\n", "\n", "", "arm_pos", "=", "observations", "[", ":", ",", "-", "6", ":", "-", "4", "]", "\n", "goal_pos", "=", "self", ".", "get_body_com", "(", "'goal'", ")", "[", ":", "2", "]", "[", "None", "]", "\n", "object_pos", "=", "observations", "[", ":", ",", "-", "3", ":", "-", "1", "]", "\n", "\n", "arm_goal_dists", "=", "np", ".", "linalg", ".", "norm", "(", "arm_pos", "-", "goal_pos", ",", "axis", "=", "1", ")", "\n", "arm_object_dists", "=", "np", ".", "linalg", ".", "norm", "(", "arm_pos", "-", "object_pos", ",", "axis", "=", "1", ")", "\n", "ctrl_costs", "=", "np", ".", "sum", "(", "actions", "**", "2", ",", "axis", "=", "1", ")", "\n", "\n", "costs", "=", "(", "\n", "+", "self", ".", "_arm_goal_distance_cost_coeff", "*", "arm_goal_dists", "\n", "+", "self", ".", "_arm_object_distance_cost_coeff", "*", "arm_object_dists", "\n", "+", "self", ".", "_ctrl_cost_coeff", "*", "ctrl_costs", ")", "\n", "\n", "rewards", "=", "-", "costs", "\n", "\n", "if", "not", "is_batch", ":", "\n", "            ", "rewards", "=", "rewards", ".", "squeeze", "(", ")", "\n", "arm_goal_dists", "=", "arm_goal_dists", ".", "squeeze", "(", ")", "\n", "arm_object_dists", "=", "arm_object_dists", ".", "squeeze", "(", ")", "\n", "\n", "", "return", "rewards", ",", "{", "\n", "'arm_goal_distance'", ":", "arm_goal_dists", ",", "\n", "'arm_object_distance'", ":", "arm_object_dists", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.ImageForkReacher2dEnv.reset_model": [[93, 136], ["numpy.array", "numpy.random.uniform", "image_pusher_2d.ImageForkReacher2dEnv.init_qvel.copy().squeeze", "image_pusher_2d.ImageForkReacher2dEnv.set_state", "image_pusher_2d.ImageForkReacher2dEnv._get_obs", "numpy.random.uniform", "image_pusher_2d.ImageForkReacher2dEnv.init_qpos.squeeze", "rl_with_videos.environments.helpers.random_point_in_circle", "numpy.sign", "numpy.maximum", "numpy.abs", "numpy.where", "image_pusher_2d.ImageForkReacher2dEnv.init_qvel.copy"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.BlindForkReacher2dEnv._get_obs", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.environments.helpers.random_point_in_circle", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "0.1", ",", "high", "=", "0.1", ",", "size", "=", "self", ".", "model", ".", "nq", ")", "+", "self", ".", "init_qpos", ".", "squeeze", "(", ")", "\n", "\n", "# qpos[self.JOINT_INDS[0]] = np.random.uniform(-np.pi, np.pi)", "\n", "# qpos[self.JOINT_INDS[1]] = np.random.uniform(", "\n", "#     -np.pi/2, np.pi/2) + np.pi/4", "\n", "# qpos[self.JOINT_INDS[2]] = np.random.uniform(", "\n", "#     -np.pi/2, np.pi/2) + np.pi/2", "\n", "\n", "target_position", "=", "np", ".", "array", "(", "random_point_in_circle", "(", "\n", "angle_range", "=", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ",", "radius", "=", "(", "0.6", ",", "1.2", ")", ")", ")", "\n", "target_position", "[", "1", "]", "+=", "1.0", "\n", "\n", "qpos", "[", "self", ".", "TARGET_INDS", "]", "=", "target_position", "\n", "# qpos[self.TARGET_INDS] = [1.0, 2.0]", "\n", "# qpos[self.TARGET_INDS] = self.init_qpos.squeeze()[self.TARGET_INDS]", "\n", "\n", "puck_position", "=", "np", ".", "random", ".", "uniform", "(", "[", "-", "1.0", "]", ",", "[", "1.0", "]", ",", "size", "=", "[", "2", "]", ")", "\n", "puck_position", "=", "(", "\n", "np", ".", "sign", "(", "puck_position", ")", "\n", "*", "np", ".", "maximum", "(", "np", ".", "abs", "(", "puck_position", ")", ",", "1", "/", "2", ")", ")", "\n", "puck_position", "[", "np", ".", "where", "(", "puck_position", "==", "0", ")", "]", "=", "1.0", "\n", "# puck_position[1] += 1.0", "\n", "# puck_position = np.random.uniform(", "\n", "#     low=[0.3, -1.0], high=[1.0, -0.4]),", "\n", "\n", "qpos", "[", "self", ".", "PUCK_INDS", "]", "=", "puck_position", "\n", "\n", "qvel", "=", "self", ".", "init_qvel", ".", "copy", "(", ")", ".", "squeeze", "(", ")", "\n", "qvel", "[", "self", ".", "PUCK_INDS", "]", "=", "0", "\n", "qvel", "[", "self", ".", "TARGET_INDS", "]", "=", "0", "\n", "\n", "# TODO: remnants from rllab -> gym conversion", "\n", "# qacc = np.zeros(self.sim.data.qacc.shape[0])", "\n", "# ctrl = np.zeros(self.sim.data.ctrl.shape[0])", "\n", "# full_state = np.concatenate((qpos, qvel, qacc, ctrl))", "\n", "\n", "# super(Pusher2dEnv, self).reset(full_state)", "\n", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.mujoco.image_pusher_2d.BlindForkReacher2dEnv._get_obs": [[139, 144], ["numpy.concatenate().reshape", "numpy.concatenate"], "methods", ["None"], ["    ", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", "[", "self", ".", "JOINT_INDS", "]", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", "[", "self", ".", "JOINT_INDS", "]", ",", "\n", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.wrappers.normalize_action.NormalizeActionWrapper.action": [[12, 22], ["numpy.clip", "isinstance"], "methods", ["None"], ["def", "action", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "self", ".", "env", ".", "action_space", ",", "spaces", ".", "Box", ")", ":", "\n", "            ", "return", "action", "\n", "\n", "# rescale the action", "\n", "", "low", ",", "high", "=", "self", ".", "env", ".", "action_space", ".", "low", ",", "self", ".", "env", ".", "action_space", ".", "high", "\n", "scaled_action", "=", "low", "+", "(", "action", "+", "1.0", ")", "*", "(", "high", "-", "low", ")", "/", "2.0", "\n", "scaled_action", "=", "np", ".", "clip", "(", "scaled_action", ",", "low", ",", "high", ")", "\n", "\n", "return", "scaled_action", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.wrappers.normalize_action.NormalizeActionWrapper.reverse_action": [[23, 25], ["None"], "methods", ["None"], ["", "def", "reverse_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.gym_adapter.GymAdapter.__init__": [[46, 89], ["softlearning_env.SoftlearningEnv.__init__", "isinstance", "gym.envs.make", "isinstance", "rl_with_videos.environments.gym.wrappers.NormalizeActionWrapper", "tuple", "rl_with_videos.environments.gym.wrappers.NormalizeActionWrapper.observation_space.spaces.keys"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["def", "__init__", "(", "self", ",", "\n", "*", "args", ",", "\n", "domain", "=", "None", ",", "\n", "task", "=", "None", ",", "\n", "env", "=", "None", ",", "\n", "normalize", "=", "True", ",", "\n", "observation_keys", "=", "None", ",", "\n", "unwrap_time_limit", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "not", "args", ",", "(", "\n", "\"Gym environments don't support args. Use kwargs instead.\"", ")", "\n", "\n", "# self._Serializable__initialize(locals())", "\n", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "unwrap_time_limit", "=", "unwrap_time_limit", "\n", "\n", "super", "(", "GymAdapter", ",", "self", ")", ".", "__init__", "(", "domain", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "env", "is", "None", ":", "\n", "            ", "assert", "(", "domain", "is", "not", "None", "and", "task", "is", "not", "None", ")", ",", "(", "domain", ",", "task", ")", "\n", "env_id", "=", "f\"{domain}-{task}\"", "\n", "env", "=", "gym", ".", "envs", ".", "make", "(", "env_id", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "assert", "domain", "is", "None", "and", "task", "is", "None", ",", "(", "domain", ",", "task", ")", "\n", "\n", "", "if", "isinstance", "(", "env", ",", "wrappers", ".", "TimeLimit", ")", "and", "unwrap_time_limit", ":", "\n", "# Remove the TimeLimit wrapper that sets 'done = True' when", "\n", "# the time limit specified for each environment has been passed and", "\n", "# therefore the environment is not Markovian (terminal condition", "\n", "# depends on time rather than state).", "\n", "            ", "env", "=", "env", ".", "env", "\n", "\n", "", "if", "isinstance", "(", "env", ".", "observation_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "            ", "observation_keys", "=", "(", "\n", "observation_keys", "or", "tuple", "(", "env", ".", "observation_space", ".", "spaces", ".", "keys", "(", ")", ")", ")", "\n", "\n", "", "self", ".", "observation_keys", "=", "observation_keys", "\n", "\n", "if", "normalize", ":", "\n", "            ", "env", "=", "NormalizeActionWrapper", "(", "env", ")", "\n", "\n", "", "self", ".", "_env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.gym_adapter.GymAdapter.observation_space": [[90, 94], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "observation_space", "=", "self", ".", "_env", ".", "observation_space", "\n", "return", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.gym_adapter.GymAdapter.active_observation_shape": [[95, 108], ["sum", "isinstance", "numpy.prod"], "methods", ["None"], ["", "@", "property", "\n", "def", "active_observation_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Shape for the active observation based on observation_keys.\"\"\"", "\n", "if", "not", "isinstance", "(", "self", ".", "_env", ".", "observation_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "            ", "return", "super", "(", "GymAdapter", ",", "self", ")", ".", "active_observation_shape", "\n", "\n", "", "active_size", "=", "sum", "(", "\n", "np", ".", "prod", "(", "self", ".", "_env", ".", "observation_space", ".", "spaces", "[", "key", "]", ".", "shape", ")", "\n", "for", "key", "in", "self", ".", "observation_keys", ")", "\n", "\n", "active_observation_shape", "=", "(", "active_size", ",", ")", "\n", "\n", "return", "active_observation_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.gym_adapter.GymAdapter.convert_to_active_observation": [[109, 118], ["numpy.concatenate", "isinstance"], "methods", ["None"], ["", "def", "convert_to_active_observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "self", ".", "_env", ".", "observation_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "            ", "return", "observation", "\n", "\n", "", "observation", "=", "np", ".", "concatenate", "(", "[", "\n", "observation", "[", "key", "]", "for", "key", "in", "self", ".", "observation_keys", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.gym_adapter.GymAdapter.action_space": [[119, 127], ["len", "NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "action_space", "=", "self", ".", "_env", ".", "action_space", "\n", "if", "len", "(", "action_space", ".", "shape", ")", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Action space ({}) is not flat, make sure to check the\"", "\n", "\" implemenation.\"", ".", "format", "(", "action_space", ")", ")", "\n", "", "return", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.gym_adapter.GymAdapter.step": [[128, 139], ["gym_adapter.GymAdapter._env.step"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.step"], ["", "def", "step", "(", "self", ",", "action", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# TODO(hartikainen): refactor this to always return an OrderedDict,", "\n", "# such that the observations for all the envs is consistent. Right now", "\n", "# some of the gym envs return np.array whereas others return dict.", "\n", "#", "\n", "# Something like:", "\n", "# observation = OrderedDict()", "\n", "# observation['observation'] = env.step(action, *args, **kwargs)", "\n", "# return observation", "\n", "\n", "        ", "return", "self", ".", "_env", ".", "step", "(", "action", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.gym_adapter.GymAdapter.reset": [[140, 142], ["gym_adapter.GymAdapter._env.reset"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.reset"], ["", "def", "reset", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "reset", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.gym_adapter.GymAdapter.render": [[143, 145], ["gym_adapter.GymAdapter._env.render"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.render"], ["", "def", "render", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "render", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.gym_adapter.GymAdapter.close": [[146, 148], ["gym_adapter.GymAdapter._env.close"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.close"], ["", "def", "close", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "close", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.gym_adapter.GymAdapter.seed": [[149, 151], ["gym_adapter.GymAdapter._env.seed"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.seed"], ["", "def", "seed", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "seed", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.gym_adapter.GymAdapter.unwrapped": [[152, 155], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "unwrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.gym_adapter.GymAdapter.get_param_values": [[156, 158], ["None"], "methods", ["None"], ["", "def", "get_param_values", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.gym_adapter.GymAdapter.set_param_values": [[159, 161], ["None"], "methods", ["None"], ["", "def", "set_param_values", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.gym_adapter.parse_domain_task": [[15, 21], ["gym_id.split"], "function", ["None"], ["def", "parse_domain_task", "(", "gym_id", ")", ":", "\n", "    ", "domain_task_parts", "=", "gym_id", ".", "split", "(", "'-'", ")", "\n", "domain", "=", "'-'", ".", "join", "(", "domain_task_parts", "[", ":", "1", "]", ")", "\n", "task", "=", "'-'", ".", "join", "(", "domain_task_parts", "[", "1", ":", "]", ")", "\n", "\n", "return", "domain", ",", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.RobosuiteAdapter.__init__": [[39, 81], ["robosuite_adapter.RobosuiteAdapter._Serializable__initialize", "softlearning_env.SoftlearningEnv.__init__", "robosuite.make.observation_spec", "isinstance", "set().issubset", "locals", "robosuite.make", "tuple", "set", "suite.make.observation_spec.keys", "numpy.testing.assert_equal", "suite.make.observation_spec.keys", "set", "suite.make.observation_spec.keys"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["def", "__init__", "(", "self", ",", "\n", "domain", ",", "\n", "task", ",", "\n", "*", "args", ",", "\n", "env", "=", "None", ",", "\n", "normalize", "=", "True", ",", "\n", "observation_keys", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "not", "args", ",", "(", "\n", "\"Robosuite environments don't support args. Use kwargs instead.\"", ")", "\n", "\n", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n", "super", "(", "RobosuiteAdapter", ",", "self", ")", ".", "__init__", "(", "domain", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "env", "is", "None", ":", "\n", "            ", "assert", "(", "domain", "is", "not", "None", "and", "task", "is", "not", "None", ")", ",", "(", "domain", ",", "task", ")", "\n", "env_id", "=", "f\"{domain}{task}\"", "\n", "env", "=", "suite", ".", "make", "(", "env_id", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "assert", "domain", "is", "None", "and", "task", "is", "None", ",", "(", "domain", ",", "task", ")", "\n", "\n", "# TODO(Alacarter): Check how robosuite handles max episode length", "\n", "# termination.", "\n", "\n", "", "observation_spec", "=", "env", ".", "observation_spec", "(", ")", "\n", "assert", "isinstance", "(", "observation_spec", ",", "OrderedDict", ")", ",", "observation_spec", "\n", "self", ".", "observation_keys", "=", "(", "\n", "observation_keys", "or", "tuple", "(", "observation_spec", ".", "keys", "(", ")", ")", ")", "\n", "assert", "set", "(", "self", ".", "observation_keys", ")", ".", "issubset", "(", "\n", "set", "(", "observation_spec", ".", "keys", "(", ")", ")", "\n", ")", ",", "(", "self", ".", "observation_keys", ",", "observation_spec", ".", "keys", "(", ")", ")", "\n", "\n", "if", "normalize", ":", "\n", "            ", "np", ".", "testing", ".", "assert_equal", "(", "\n", "env", ".", "action_spec", ",", "\n", "(", "-", "1.0", ",", "1.0", ")", ",", "\n", "\"Ensure spaces are normalized.\"", ")", "\n", "\n", "", "self", ".", "_env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.RobosuiteAdapter.observation_space": [[82, 87], ["robosuite_adapter.convert_robosuite_to_gym_obs_space", "robosuite_adapter.RobosuiteAdapter._env.observation_spec"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.convert_robosuite_to_gym_obs_space"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "observation_space", "=", "convert_robosuite_to_gym_obs_space", "(", "\n", "self", ".", "_env", ".", "observation_spec", "(", ")", ")", "\n", "return", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.RobosuiteAdapter.active_observation_shape": [[88, 100], ["sum", "numpy.prod"], "methods", ["None"], ["", "@", "property", "\n", "def", "active_observation_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Shape for the active observation based on observation_keys.\"\"\"", "\n", "observation_space", "=", "self", ".", "observation_space", "\n", "\n", "active_size", "=", "sum", "(", "\n", "np", ".", "prod", "(", "observation_space", ".", "spaces", "[", "key", "]", ".", "shape", ")", "\n", "for", "key", "in", "self", ".", "observation_keys", ")", "\n", "\n", "active_observation_shape", "=", "(", "active_size", ",", ")", "\n", "\n", "return", "active_observation_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.RobosuiteAdapter.convert_to_active_observation": [[101, 107], ["numpy.concatenate"], "methods", ["None"], ["", "def", "convert_to_active_observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "observation", "=", "np", ".", "concatenate", "(", "[", "\n", "observation", "[", "key", "]", "for", "key", "in", "self", ".", "observation_keys", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.RobosuiteAdapter.action_space": [[108, 117], ["robosuite_adapter.convert_robosuite_to_gym_action_space", "len", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.convert_robosuite_to_gym_action_space"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "action_space", "=", "convert_robosuite_to_gym_action_space", "(", "\n", "self", ".", "_env", ".", "action_spec", ")", "\n", "if", "len", "(", "action_space", ".", "shape", ")", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Action space ({}) is not flat, make sure to check the\"", "\n", "\" implemenation.\"", ".", "format", "(", "action_space", ")", ")", "\n", "", "return", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.RobosuiteAdapter.step": [[118, 130], ["robosuite_adapter.RobosuiteAdapter._env.step"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.step"], ["", "def", "step", "(", "self", ",", "action", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# TODO(hartikainen): refactor this to always return an OrderedDict,", "\n", "# such that the observations for all the envs is consistent. Right now", "\n", "# some of the Robosuite envs return np.array whereas others return", "\n", "# dict.", "\n", "#", "\n", "# Something like:", "\n", "# observation = OrderedDict()", "\n", "# observation['observation'] = env.step(action, *args, **kwargs)", "\n", "# return observation", "\n", "\n", "        ", "return", "self", ".", "_env", ".", "step", "(", "action", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.RobosuiteAdapter.reset": [[131, 133], ["robosuite_adapter.RobosuiteAdapter._env.reset"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.reset"], ["", "def", "reset", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "reset", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.RobosuiteAdapter.render": [[134, 138], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# TODO(Alacarter): Implement rendering so that self._env.viewer.render()", "\n", "# can take in args and kwargs", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.RobosuiteAdapter.close": [[139, 141], ["robosuite_adapter.RobosuiteAdapter._env.close"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.close"], ["", "def", "close", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "close", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.RobosuiteAdapter.seed": [[142, 144], ["robosuite_adapter.RobosuiteAdapter._env.seed"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.seed"], ["", "def", "seed", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "seed", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.RobosuiteAdapter.unwrapped": [[145, 148], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.RobosuiteAdapter.get_param_values": [[149, 151], ["None"], "methods", ["None"], ["", "def", "get_param_values", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.RobosuiteAdapter.set_param_values": [[152, 154], ["None"], "methods", ["None"], ["", "def", "set_param_values", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.convert_robosuite_to_gym_obs_space": [[15, 26], ["isinstance", "type", "robosuite_observation_space.items", "gym.spaces.Dict", "list_dict.append", "collections.OrderedDict", "gym.spaces.Box", "float", "float"], "function", ["None"], ["def", "convert_robosuite_to_gym_obs_space", "(", "robosuite_observation_space", ")", ":", "\n", "    ", "assert", "isinstance", "(", "robosuite_observation_space", ",", "OrderedDict", ")", ",", "type", "(", "\n", "robosuite_observation_space", ")", "\n", "list_dict", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "robosuite_observation_space", ".", "items", "(", ")", ":", "\n", "        ", "list_dict", ".", "append", "(", "(", "key", ",", "spaces", ".", "Box", "(", "\n", "low", "=", "-", "float", "(", "\"inf\"", ")", ",", "\n", "high", "=", "float", "(", "\"inf\"", ")", ",", "\n", "shape", "=", "value", ".", "shape", ",", "\n", "dtype", "=", "value", ".", "dtype", ")", ")", ")", "\n", "", "return", "spaces", ".", "Dict", "(", "OrderedDict", "(", "list_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.robosuite_adapter.convert_robosuite_to_gym_action_space": [[28, 34], ["isinstance", "type", "gym.spaces.Box"], "function", ["None"], ["", "def", "convert_robosuite_to_gym_action_space", "(", "robosuite_action_space", ")", ":", "\n", "    ", "assert", "isinstance", "(", "robosuite_action_space", ",", "tuple", ")", ",", "type", "(", "robosuite_action_space", ")", "\n", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "robosuite_action_space", "[", "0", "]", ",", "\n", "high", "=", "robosuite_action_space", "[", "1", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.__init__": [[46, 57], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "domain", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Initialize an environment based on domain and task.\n        Keyword Arguments:\n        domain   --\n        task     --\n        *args    --\n        **kwargs --\n        \"\"\"", "\n", "#self._Serializable__initialize(locals())", "\n", "self", ".", "_domain", "=", "domain", "\n", "self", ".", "_task", "=", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.observation_space": [[58, 62], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.active_observation_shape": [[63, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "active_observation_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "observation_space", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.convert_to_active_observation": [[67, 69], ["None"], "methods", ["None"], ["", "def", "convert_to_active_observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.action_space": [[70, 74], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.step": [[75, 93], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Run one timestep of the environment's dynamics. When end of\n        episode is reached, you are responsible for calling `reset()`\n        to reset this environment's state.\n\n        Accepts an action and returns a tuple (observation, reward, done, info).\n\n        Args:\n            action (object): an action provided by the environment\n\n        Returns:\n            observation (object): agent's observation of the current environment\n            reward (float) : amount of reward returned after previous action\n            done (boolean): whether the episode has ended, in which case further step() calls will return undefined results\n            info (dict): contains auxiliary diagnostic information (helpful for debugging, and sometimes learning)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.reset": [[94, 102], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the state of the environment and returns an initial observation.\n\n        Returns: observation (object): the initial observation of the\n            space.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.render": [[103, 143], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "\"\"\"Renders the environment.\n\n        The set of supported modes varies per environment. (And some\n        environments do not support rendering at all.) By convention,\n        if mode is:\n\n        - human: render to the current display or terminal and\n          return nothing. Usually for human consumption.\n        - rgb_array: Return an numpy.ndarray with shape (x, y, 3),\n          representing RGB values for an x-by-y pixel image, suitable\n          for turning into a video.\n        - ansi: Return a string (str) or StringIO.StringIO containing a\n          terminal-style text representation. The text can include newlines\n          and ANSI escape sequences (e.g. for colors).\n\n        Note:\n            Make sure that your class's metadata 'render.modes' key includes\n              the list of supported modes. It's recommended to call super()\n              in implementations to use the functionality of this method.\n\n        Args:\n            mode (str): the mode to render with\n            close (bool): close all open renderings\n\n        Example:\n\n        class MyEnv(Env):\n            metadata = {'render.modes': ['human', 'rgb_array']}\n\n            def render(self, mode='human'):\n                if mode == 'rgb_array':\n                    return np.array(...) # return RGB frame suitable for video\n                elif mode is 'human':\n                    ... # pop up a window and render\n                else:\n                    super(MyEnv, self).render(mode=mode) # just raise an exception\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.render_rollouts": [[144, 152], ["hasattr", "hasattr", "softlearning_env.SoftlearningEnv._env.render_rollouts", "unwrapped_env.render_rollouts"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.render_rollouts", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.render_rollouts"], ["", "def", "render_rollouts", "(", "self", ",", "paths", ")", ":", "\n", "        ", "\"\"\"Renders past rollouts of the environment.\"\"\"", "\n", "if", "hasattr", "(", "self", ".", "_env", ",", "'render_rollouts'", ")", ":", "\n", "            ", "return", "self", ".", "_env", ".", "render_rollouts", "(", "paths", ")", "\n", "\n", "", "unwrapped_env", "=", "self", ".", "unwrapped", "\n", "if", "hasattr", "(", "unwrapped_env", ",", "'render_rollouts'", ")", ":", "\n", "            ", "return", "unwrapped_env", ".", "render_rollouts", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.close": [[153, 161], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Override _close in your subclass to perform any necessary cleanup.\n\n        Environments will automatically close() themselves when\n        garbage collected or when the program exits.\n        \"\"\"", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.seed": [[162, 179], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"Sets the seed for this env's random number generator(s).\n\n        Note:\n            Some environments use multiple pseudorandom number generators.\n            We want to capture all such seeds used in order to ensure that\n            there aren't accidental correlations between multiple generators.\n\n        Returns:\n            list<bigint>: Returns the list of seeds used in this env's random\n              number generators. The first value in the list should be the\n              \"main\" seed, or the value which a reproducer should pass to\n              'seed'. Often, the main seed equals the provided 'seed', but\n              this won't be true if seed=None, for example.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy": [[180, 187], ["copy.deepcopy"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create a deep copy the environment.\n\n        TODO: Investigate if this can be done somehow else, especially for gym\n        envs.\n        \"\"\"", "\n", "return", "deepcopy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.unwrapped": [[188, 197], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "\"\"\"Completely unwrap this env.\n\n        Returns:\n            gym.Env: The base non-wrapped gym.Env instance\n        \"\"\"", "\n", "return", "self", ".", "_env", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.__str__": [[198, 204], ["type"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'<{type_name}(domain={domain}, task={task}) <{env}>>'", ".", "format", "(", "\n", "type_name", "=", "type", "(", "self", ")", ".", "__name__", ",", "\n", "domain", "=", "self", ".", "_domain", ",", "\n", "task", "=", "self", ".", "_task", ",", "\n", "env", "=", "self", ".", "_env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.get_param_values": [[205, 208], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_param_values", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.set_param_values": [[209, 212], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_param_values", "(", "self", ",", "params", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.get_path_infos": [[213, 244], ["list", "collections.defaultdict", "collections.defaultdict.items", "[].keys", "path_results.items", "numpy.mean", "numpy.array", "results[].append", "results[].append", "results[].append", "results[].append", "numpy.mean", "numpy.median", "numpy.dtype", "results[].append", "paths[].get", "numpy.array", "numpy.ptp"], "methods", ["None"], ["", "def", "get_path_infos", "(", "self", ",", "paths", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Log some general diagnostics from the env infos.\n\n        TODO(hartikainen): These logs don't make much sense right now. Need to\n        figure out better format for logging general env infos.\n        \"\"\"", "\n", "keys", "=", "list", "(", "paths", "[", "0", "]", ".", "get", "(", "'infos'", ",", "[", "{", "}", "]", ")", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "\n", "results", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "path_results", "=", "{", "\n", "k", ":", "[", "\n", "info", "[", "k", "]", "\n", "for", "info", "in", "path", "[", "'infos'", "]", "\n", "]", "for", "k", "in", "keys", "\n", "}", "\n", "for", "info_key", ",", "info_values", "in", "path_results", ".", "items", "(", ")", ":", "\n", "                ", "info_values", "=", "np", ".", "array", "(", "info_values", ")", "\n", "results", "[", "info_key", "+", "'-first'", "]", ".", "append", "(", "info_values", "[", "0", "]", ")", "\n", "results", "[", "info_key", "+", "'-last'", "]", ".", "append", "(", "info_values", "[", "-", "1", "]", ")", "\n", "results", "[", "info_key", "+", "'-mean'", "]", ".", "append", "(", "np", ".", "mean", "(", "info_values", ")", ")", "\n", "results", "[", "info_key", "+", "'-median'", "]", ".", "append", "(", "np", ".", "median", "(", "info_values", ")", ")", "\n", "if", "np", ".", "array", "(", "info_values", ")", ".", "dtype", "!=", "np", ".", "dtype", "(", "'bool'", ")", ":", "\n", "                    ", "results", "[", "info_key", "+", "'-range'", "]", ".", "append", "(", "np", ".", "ptp", "(", "info_values", ")", ")", "\n", "\n", "", "", "", "aggregated_results", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "aggregated_results", "[", "key", "+", "'-mean'", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "\n", "", "return", "aggregated_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.__init__": [[64, 105], ["dm_control_adapter.DmControlAdapter._Serializable__initialize", "softlearning_env.SoftlearningEnv.__init__", "isinstance", "locals", "dm_control.suite.load", "dm_control.suite.load.observation_spec", "tuple", "numpy.testing.assert_equal", "numpy.testing.assert_equal", "dm_control.suite.load.observation_spec().keys", "dm_control.suite.load.action_spec", "dm_control.suite.load.action_spec", "dm_control.suite.load.observation_spec"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__"], ["def", "__init__", "(", "self", ",", "\n", "domain", ",", "\n", "task", ",", "\n", "*", "args", ",", "\n", "env", "=", "None", ",", "\n", "normalize", "=", "True", ",", "\n", "observation_keys", "=", "None", ",", "\n", "unwrap_time_limit", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "not", "args", ",", "(", "\n", "\"Gym environments don't support args. Use kwargs instead.\"", ")", "\n", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "unwrap_time_limit", "=", "unwrap_time_limit", "\n", "\n", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "super", "(", "DmControlAdapter", ",", "self", ")", ".", "__init__", "(", "domain", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "env", "is", "None", ":", "\n", "            ", "assert", "(", "domain", "is", "not", "None", "and", "task", "is", "not", "None", ")", ",", "(", "domain", ",", "task", ")", "\n", "env", "=", "suite", ".", "load", "(", "\n", "domain_name", "=", "domain", ",", "\n", "task_name", "=", "task", ",", "\n", "task_kwargs", "=", "kwargs", "\n", "# TODO(hartikainen): Figure out how to pass kwargs to this guy.", "\n", "# Need to split into `task_kwargs`, `environment_kwargs`, and", "\n", "# `visualize_reward` bool. Check the suite.load(.) in:", "\n", "# https://github.com/deepmind/dm_control/blob/master/dm_control/suite/__init__.py", "\n", ")", "\n", "", "else", ":", "\n", "            ", "assert", "domain", "is", "None", "and", "task", "is", "None", ",", "(", "domain", ",", "task", ")", "\n", "\n", "", "assert", "isinstance", "(", "env", ".", "observation_spec", "(", ")", ",", "OrderedDict", ")", "\n", "self", ".", "observation_keys", "=", "(", "\n", "observation_keys", "or", "tuple", "(", "env", ".", "observation_spec", "(", ")", ".", "keys", "(", ")", ")", ")", "\n", "\n", "# Ensure action space is already normalized.", "\n", "if", "normalize", ":", "\n", "            ", "np", ".", "testing", ".", "assert_equal", "(", "env", ".", "action_spec", "(", ")", ".", "minimum", ",", "-", "1", ")", "\n", "np", ".", "testing", ".", "assert_equal", "(", "env", ".", "action_spec", "(", ")", ".", "maximum", ",", "1", ")", "\n", "\n", "", "self", ".", "_env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.observation_space": [[106, 111], ["dm_control_adapter.convert_dm_control_to_gym_space", "dm_control_adapter.DmControlAdapter._env.observation_spec"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.convert_dm_control_to_gym_space"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "observation_space", "=", "convert_dm_control_to_gym_space", "(", "\n", "self", ".", "_env", ".", "observation_spec", "(", ")", ")", "\n", "return", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.active_observation_shape": [[112, 121], ["sum", "int", "numpy.prod"], "methods", ["None"], ["", "@", "property", "\n", "def", "active_observation_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Shape for the active observation based on observation_keys.\"\"\"", "\n", "observation_space", "=", "self", ".", "observation_space", "\n", "active_size", "=", "sum", "(", "\n", "np", ".", "prod", "(", "observation_space", ".", "spaces", "[", "key", "]", ".", "shape", ")", "\n", "for", "key", "in", "self", ".", "observation_keys", ")", "\n", "active_shape", "=", "(", "int", "(", "active_size", ")", ",", ")", "\n", "return", "active_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.convert_to_active_observation": [[122, 126], ["numpy.concatenate"], "methods", ["None"], ["", "def", "convert_to_active_observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "flattened_observation", "=", "np", ".", "concatenate", "(", "[", "\n", "observation", "[", "key", "]", "for", "key", "in", "self", ".", "observation_keys", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "flattened_observation", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.action_space": [[127, 135], ["dm_control_adapter.convert_dm_control_to_gym_space", "dm_control_adapter.DmControlAdapter._env.action_spec", "len", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.convert_dm_control_to_gym_space"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "action_space", "=", "convert_dm_control_to_gym_space", "(", "self", ".", "_env", ".", "action_spec", "(", ")", ")", "\n", "if", "len", "(", "action_space", ".", "shape", ")", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Action space ({}) is not flat, make sure to check the\"", "\n", "\" implemenation.\"", ".", "format", "(", "action_space", ")", ")", "\n", "", "return", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.step": [[136, 145], ["dm_control_adapter.DmControlAdapter._env.step", "dm_control_adapter.DmControlAdapter.last"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.step"], ["", "def", "step", "(", "self", ",", "action", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "timestep", "=", "self", ".", "_env", ".", "step", "(", "action", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "observation", "=", "timestep", ".", "observation", "\n", "reward", "=", "timestep", ".", "reward", "\n", "terminal", "=", "timestep", ".", "last", "(", ")", "\n", "info", "=", "{", "}", "\n", "# TODO(Alacarter): See if there's a way to pull info from the", "\n", "# environment.", "\n", "return", "observation", ",", "reward", ",", "terminal", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.reset": [[146, 149], ["dm_control_adapter.DmControlAdapter._env.reset"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.reset"], ["", "def", "reset", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "timestep", "=", "self", ".", "_env", ".", "reset", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "timestep", ".", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.render": [[150, 161], ["NotImplementedError", "dm_control_adapter.DmControlAdapter._env.physics.render", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.render"], ["", "def", "render", "(", "self", ",", "*", "args", ",", "mode", "=", "\"human\"", ",", "camera_id", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "mode", "==", "\"human\"", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"TODO(Alacarter): Figure out how to not continuously launch\"", "\n", "\" viewers if one is already open.\"", "\n", "\" See: https://github.com/deepmind/dm_control/issues/39.\"", ")", "\n", "", "elif", "mode", "==", "\"rgb_array\"", ":", "\n", "            ", "return", "self", ".", "_env", ".", "physics", ".", "render", "(", "\n", "*", "args", ",", "camera_id", "=", "camera_id", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.close": [[162, 164], ["dm_control_adapter.DmControlAdapter._env.close"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.close"], ["", "", "def", "close", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "close", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.seed": [[165, 167], ["dm_control_adapter.DmControlAdapter._env.seed"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.seed"], ["", "def", "seed", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "seed", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.unwrapped": [[168, 171], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.get_param_values": [[172, 174], ["None"], "methods", ["None"], ["", "def", "get_param_values", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.set_param_values": [[175, 177], ["None"], "methods", ["None"], ["", "def", "set_param_values", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.convert_dm_control_to_gym_space": [[16, 59], ["isinstance", "gym.spaces.Box", "isinstance", "isinstance", "gym.spaces.Box", "isinstance", "ValueError", "gym.spaces.Dict", "ValueError", "float", "collections.OrderedDict", "float", "dm_control_adapter.convert_dm_control_to_gym_space", "dm_control_space.items"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.convert_dm_control_to_gym_space"], ["def", "convert_dm_control_to_gym_space", "(", "dm_control_space", ")", ":", "\n", "    ", "\"\"\"Recursively convert dm_control_space into gym space.\n\n    Note: Need to check the following cases of the input type, in the following\n    order:\n       (1) BoundedArraySpec\n       (2) ArraySpec\n       (3) OrderedDict.\n\n    - Generally, dm_control observation_specs are OrderedDict with other spaces\n      (e.g. ArraySpec) nested in it.\n    - Generally, dm_control action_specs are of type `BoundedArraySpec`.\n\n    To handle dm_control observation_specs as inputs, we check the following\n    input types in order to enable recursive calling on each nested item.\n    \"\"\"", "\n", "if", "isinstance", "(", "dm_control_space", ",", "BoundedArraySpec", ")", ":", "\n", "        ", "gym_box", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "dm_control_space", ".", "minimum", ",", "\n", "high", "=", "dm_control_space", ".", "maximum", ",", "\n", "shape", "=", "None", ",", "\n", "dtype", "=", "dm_control_space", ".", "dtype", ")", "\n", "# Note: `gym.Box` doesn't allow both shape and min/max to be defined", "\n", "# at the same time. Thus we omit shape in the constructor and verify", "\n", "# that it's been implicitly set correctly.", "\n", "assert", "gym_box", ".", "shape", "==", "dm_control_space", ".", "shape", ",", "(", "\n", "(", "gym_box", ".", "shape", ",", "dm_control_space", ".", "shape", ")", ")", "\n", "return", "gym_box", "\n", "", "elif", "isinstance", "(", "dm_control_space", ",", "ArraySpec", ")", ":", "\n", "        ", "if", "isinstance", "(", "dm_control_space", ",", "BoundedArraySpec", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The order of the if-statements matters.\"", ")", "\n", "", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "-", "float", "(", "\"inf\"", ")", ",", "\n", "high", "=", "float", "(", "\"inf\"", ")", ",", "\n", "shape", "=", "dm_control_space", ".", "shape", ",", "\n", "dtype", "=", "dm_control_space", ".", "dtype", ")", "\n", "", "elif", "isinstance", "(", "dm_control_space", ",", "OrderedDict", ")", ":", "\n", "        ", "return", "spaces", ".", "Dict", "(", "OrderedDict", "(", "[", "\n", "(", "key", ",", "convert_dm_control_to_gym_space", "(", "value", ")", ")", "\n", "for", "key", ",", "value", "in", "dm_control_space", ".", "items", "(", ")", "\n", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "dm_control_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.kernel.adaptive_isotropic_gaussian_kernel": [[7, 74], ["tensorflow.concat", "tensorflow.nn.top_k", "tensorflow.maximum", "tensorflow.stop_gradient", "tensorflow.expand_dims", "tensorflow.exp", "tensorflow.expand_dims", "tensorflow.expand_dims", "xs.get_shape().as_list", "ys.get_shape().as_list", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.expand_dims", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "numpy.log", "tensorflow.expand_dims", "tensorflow.reshape", "xs.get_shape", "ys.get_shape"], "function", ["None"], ["def", "adaptive_isotropic_gaussian_kernel", "(", "xs", ",", "ys", ",", "h_min", "=", "1e-3", ")", ":", "\n", "    ", "\"\"\"Gaussian kernel with dynamic bandwidth.\n\n    The bandwidth is adjusted dynamically to match median_distance / log(Kx).\n    See [2] for more information.\n\n    Args:\n        xs(`tf.Tensor`): A tensor of shape (N x Kx x D) containing N sets of Kx\n            particles of dimension D. This is the first kernel argument.\n        ys(`tf.Tensor`): A tensor of shape (N x Ky x D) containing N sets of Kx\n            particles of dimension D. This is the second kernel argument.\n        h_min(`float`): Minimum bandwidth.\n\n    Returns:\n        `dict`: Returned dictionary has two fields:\n            'output': A `tf.Tensor` object of shape (N x Kx x Ky) representing\n                the kernel matrix for inputs `xs` and `ys`.\n            'gradient': A 'tf.Tensor` object of shape (N x Kx x Ky x D)\n                representing the gradient of the kernel with respect to `xs`.\n\n    Reference:\n        [2] Qiang Liu,Dilin Wang, \"Stein Variational Gradient Descent: A General\n            Purpose Bayesian Inference Algorithm,\" Neural Information Processing\n            Systems (NIPS), 2016.\n    \"\"\"", "\n", "Kx", ",", "D", "=", "xs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "2", ":", "]", "\n", "Ky", ",", "D2", "=", "ys", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "2", ":", "]", "\n", "assert", "D", "==", "D2", "\n", "\n", "leading_shape", "=", "tf", ".", "shape", "(", "xs", ")", "[", ":", "-", "2", "]", "\n", "\n", "# Compute the pairwise distances of left and right particles.", "\n", "diff", "=", "tf", ".", "expand_dims", "(", "xs", ",", "-", "2", ")", "-", "tf", ".", "expand_dims", "(", "ys", ",", "-", "3", ")", "\n", "# ... x Kx x Ky x D", "\n", "\n", "if", "LooseVersion", "(", "tf", ".", "__version__", ")", "<=", "LooseVersion", "(", "'1.5.0'", ")", ":", "\n", "        ", "dist_sq", "=", "tf", ".", "reduce_sum", "(", "diff", "**", "2", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "dist_sq", "=", "tf", ".", "reduce_sum", "(", "diff", "**", "2", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "False", ")", "\n", "# ... x Kx x Ky", "\n", "\n", "# Get median.", "\n", "", "input_shape", "=", "tf", ".", "concat", "(", "(", "leading_shape", ",", "[", "Kx", "*", "Ky", "]", ")", ",", "axis", "=", "0", ")", "\n", "values", ",", "_", "=", "tf", ".", "nn", ".", "top_k", "(", "\n", "input", "=", "tf", ".", "reshape", "(", "dist_sq", ",", "input_shape", ")", ",", "\n", "k", "=", "(", "Kx", "*", "Ky", "//", "2", "+", "1", ")", ",", "# This is exactly true only if Kx*Ky is odd.", "\n", "sorted", "=", "True", ")", "# ... x floor(Ks*Kd/2)", "\n", "\n", "medians_sq", "=", "values", "[", "...", ",", "-", "1", "]", "# ... (shape) (last element is the median)", "\n", "\n", "h", "=", "medians_sq", "/", "np", ".", "log", "(", "Kx", ")", "# ... (shape)", "\n", "h", "=", "tf", ".", "maximum", "(", "h", ",", "h_min", ")", "\n", "h", "=", "tf", ".", "stop_gradient", "(", "h", ")", "# Just in case.", "\n", "h_expanded_twice", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "h", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "# ... x 1 x 1", "\n", "\n", "kappa", "=", "tf", ".", "exp", "(", "-", "dist_sq", "/", "h_expanded_twice", ")", "# ... x Kx x Ky", "\n", "\n", "# Construct the gradient", "\n", "h_expanded_thrice", "=", "tf", ".", "expand_dims", "(", "h_expanded_twice", ",", "-", "1", ")", "\n", "# ... x 1 x 1 x 1", "\n", "kappa_expanded", "=", "tf", ".", "expand_dims", "(", "kappa", ",", "-", "1", ")", "# ... x Kx x Ky x 1", "\n", "\n", "kappa_grad", "=", "-", "2", "*", "diff", "/", "h_expanded_thrice", "*", "kappa_expanded", "\n", "# ... x Kx x Ky x D", "\n", "\n", "return", "{", "\"output\"", ":", "kappa", ",", "\"gradient\"", ":", "kappa_grad", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.__init__": [[7, 32], ["numpy.array", "len", "matplotlib.figure", "range", "list", "numpy.where", "len", "matplotlib.figure.add_subplot", "plt.figure.add_subplot.set_xlim", "plt.figure.add_subplot.set_ylim", "plt.figure.add_subplot.grid", "plotter.QFPolicyPlotter._ax_lst.append", "numpy.isnan"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "Q", ",", "policy", ",", "obs_lst", ",", "default_action", ",", "n_samples", ")", ":", "\n", "        ", "self", ".", "_Q", "=", "Q", "\n", "self", ".", "_policy", "=", "policy", "\n", "self", ".", "_obs_lst", "=", "obs_lst", "\n", "self", ".", "_default_action", "=", "np", ".", "array", "(", "default_action", ")", "\n", "self", ".", "_n_samples", "=", "n_samples", "\n", "\n", "self", ".", "_var_inds", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "default_action", ")", ")", "[", "0", "]", "\n", "assert", "len", "(", "self", ".", "_var_inds", ")", "==", "2", "\n", "\n", "n_plots", "=", "len", "(", "obs_lst", ")", "\n", "\n", "x_size", "=", "5", "*", "n_plots", "\n", "y_size", "=", "5", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "x_size", ",", "y_size", ")", ")", "\n", "self", ".", "_ax_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_plots", ")", ":", "\n", "            ", "ax", "=", "fig", ".", "add_subplot", "(", "100", "+", "n_plots", "*", "10", "+", "i", "+", "1", ")", "\n", "ax", ".", "set_xlim", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "ax", ".", "set_ylim", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "ax", ".", "grid", "(", "True", ")", "\n", "self", ".", "_ax_lst", ".", "append", "(", "ax", ")", "\n", "\n", "", "self", ".", "_line_objects", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.draw": [[33, 43], ["list", "plotter.QFPolicyPlotter._plot_level_curves", "plotter.QFPolicyPlotter._plot_action_samples", "matplotlib.draw", "matplotlib.pause", "h.remove"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter._plot_level_curves", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter._plot_action_samples", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter.draw"], ["", "def", "draw", "(", "self", ")", ":", "\n", "# noinspection PyArgumentList", "\n", "        ", "[", "h", ".", "remove", "(", ")", "for", "h", "in", "self", ".", "_line_objects", "]", "\n", "self", ".", "_line_objects", "=", "list", "(", ")", "\n", "\n", "self", ".", "_plot_level_curves", "(", ")", "\n", "self", ".", "_plot_action_samples", "(", ")", "\n", "\n", "plt", ".", "draw", "(", ")", "\n", "plt", ".", "pause", "(", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter._plot_level_curves": [[44, 68], ["numpy.linspace", "numpy.linspace", "numpy.meshgrid", "numpy.tile", "xgrid.ravel", "ygrid.ravel", "zip", "len", "len", "plotter.QFPolicyPlotter._default_action.astype", "numpy.tile", "plotter.QFPolicyPlotter._Q.predict", "numpy.reshape", "ax.contour", "ax.clabel", "obs[].astype"], "methods", ["None"], ["", "def", "_plot_level_curves", "(", "self", ")", ":", "\n", "# Create mesh grid.", "\n", "        ", "xs", "=", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "50", ")", "\n", "ys", "=", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "50", ")", "\n", "xgrid", ",", "ygrid", "=", "np", ".", "meshgrid", "(", "xs", ",", "ys", ")", "\n", "N", "=", "len", "(", "xs", ")", "*", "len", "(", "ys", ")", "\n", "\n", "# Copy default values along the first axis and replace nans with", "\n", "# the mesh grid points.", "\n", "actions", "=", "np", ".", "tile", "(", "self", ".", "_default_action", ".", "astype", "(", "np", ".", "float32", ")", ",", "(", "N", ",", "1", ")", ")", "\n", "actions", "[", ":", ",", "self", ".", "_var_inds", "[", "0", "]", "]", "=", "xgrid", ".", "ravel", "(", ")", "\n", "actions", "[", ":", ",", "self", ".", "_var_inds", "[", "1", "]", "]", "=", "ygrid", ".", "ravel", "(", ")", "\n", "\n", "for", "ax", ",", "obs", "in", "zip", "(", "self", ".", "_ax_lst", ",", "self", ".", "_obs_lst", ")", ":", "\n", "            ", "observations", "=", "np", ".", "tile", "(", "\n", "obs", "[", "None", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "(", "actions", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "Q_np", "=", "self", ".", "_Q", ".", "predict", "(", "(", "observations", ",", "actions", ")", ")", "\n", "Q_np", "=", "np", ".", "reshape", "(", "Q_np", ",", "xgrid", ".", "shape", ")", "\n", "\n", "cs", "=", "ax", ".", "contour", "(", "xgrid", ",", "ygrid", ",", "Q_np", ",", "20", ")", "\n", "self", ".", "_line_objects", "+=", "cs", ".", "collections", "\n", "self", ".", "_line_objects", "+=", "ax", ".", "clabel", "(", "\n", "cs", ",", "inline", "=", "1", ",", "fontsize", "=", "10", ",", "fmt", "=", "'%.2f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.plotter.QFPolicyPlotter._plot_action_samples": [[69, 76], ["zip", "plotter.QFPolicyPlotter._policy.actions_np", "ax.plot", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.policies.gaussian_policy.GaussianPolicy.actions_np"], ["", "", "def", "_plot_action_samples", "(", "self", ")", ":", "\n", "        ", "for", "ax", ",", "obs", "in", "zip", "(", "self", ".", "_ax_lst", ",", "self", ".", "_obs_lst", ")", ":", "\n", "            ", "observations", "=", "np", ".", "ones", "(", "(", "self", ".", "_n_samples", ",", "1", ")", ")", "*", "obs", "[", "None", ",", ":", "]", "\n", "actions", "=", "self", ".", "_policy", ".", "actions_np", "(", "[", "observations", "]", ")", "\n", "\n", "x", ",", "y", "=", "actions", "[", ":", ",", "0", "]", ",", "actions", "[", ":", ",", "1", "]", "\n", "self", ".", "_line_objects", "+=", "ax", ".", "plot", "(", "x", ",", "y", ",", "'b*'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.generate_goal_examples.get_goal_example_from_variant": [[24, 45], ["rl_with_videos.environments.utils.get_goal_example_environment_from_variant", "generate_goal_examples.generate_door_goal_examples", "generate_goal_examples.generate_push_goal_examples", "generate_goal_examples.generate_pick_goal_examples"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.environments.utils.get_goal_example_environment_from_variant", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.generate_goal_examples.generate_door_goal_examples", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.generate_goal_examples.generate_push_goal_examples", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.generate_goal_examples.generate_pick_goal_examples"], ["def", "get_goal_example_from_variant", "(", "variant", ")", ":", "\n", "\n", "    ", "env", "=", "get_goal_example_environment_from_variant", "(", "variant", ")", "\n", "total_goal_examples", "=", "variant", "[", "'data_params'", "]", "[", "'n_goal_examples'", "]", "+", "variant", "[", "'data_params'", "]", "[", "'n_goal_examples_validation_max'", "]", "\n", "\n", "if", "variant", "[", "'task'", "]", "in", "DOOR_TASKS", ":", "\n", "        ", "goal_examples", "=", "generate_door_goal_examples", "(", "total_goal_examples", ",", "env", ")", "\n", "", "elif", "variant", "[", "'task'", "]", "in", "PUSH_TASKS", ":", "\n", "        ", "goal_examples", "=", "generate_push_goal_examples", "(", "total_goal_examples", ",", "env", ")", "\n", "", "elif", "variant", "[", "'task'", "]", "in", "PICK_TASKS", ":", "\n", "        ", "goal_examples", "=", "generate_pick_goal_examples", "(", "total_goal_examples", ",", "env", ",", "variant", "[", "'task'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "n_goal_examples", "=", "variant", "[", "'data_params'", "]", "[", "'n_goal_examples'", "]", "\n", "\n", "goal_examples_train", "=", "goal_examples", "[", ":", "n_goal_examples", "]", "\n", "goal_examples_validation", "=", "goal_examples", "[", "n_goal_examples", ":", "]", "\n", "\n", "return", "goal_examples_train", ",", "goal_examples_validation", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.generate_goal_examples.generate_pick_goal_examples": [[46, 125], ["range", "numpy.asarray", "env.reset", "range", "len", "env.step", "np.asarray.append", "len", "len", "numpy.linalg.norm", "numpy.linalg.norm", "env.unwrapped.get_obj_pos", "env.unwrapped.get_endeff_pos", "numpy.asarray", "env.unwrapped.get_endeff_pos", "numpy.asarray", "env.unwrapped.get_obj_pos", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.reset", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.step"], ["", "def", "generate_pick_goal_examples", "(", "total_goal_examples", ",", "env", ",", "task_name", ")", ":", "\n", "    ", "max_attempt", "=", "50", "\n", "top_level_attempts", "=", "10", "*", "total_goal_examples", "\n", "attempts", "=", "0", "\n", "n", "=", "0", "\n", "\n", "goal_examples", "=", "[", "]", "\n", "gain", "=", "5.0", "\n", "for", "_", "in", "range", "(", "top_level_attempts", ")", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "\n", "            ", "if", "'3D'", "in", "task_name", ":", "\n", "                ", "obj_xy", "=", "env", ".", "unwrapped", ".", "get_obj_pos", "(", ")", "[", ":", "2", "]", "\n", "hand_xy", "=", "env", ".", "unwrapped", ".", "get_endeff_pos", "(", ")", "[", ":", "2", "]", "\n", "goal_xy", "=", "env", ".", "unwrapped", ".", "fixed_goal", "[", "3", ":", "5", "]", "\n", "\n", "hand_obj_distance", "=", "np", ".", "linalg", ".", "norm", "(", "obj_xy", "-", "0.02", "-", "hand_xy", ")", "\n", "goal_obj_distance", "=", "np", ".", "linalg", ".", "norm", "(", "obj_xy", "-", "goal_xy", ")", "\n", "\n", "if", "i", "<", "25", ":", "\n", "                    ", "if", "hand_obj_distance", ">", "0.015", ":", "\n", "                        ", "action_xy", "=", "gain", "*", "(", "obj_xy", "-", "hand_xy", ")", "\n", "", "else", ":", "\n", "                        ", "action_xy", "=", "[", "0.", ",", "0.", "]", "\n", "", "action", "=", "np", ".", "asarray", "(", "[", "action_xy", "[", "0", "]", ",", "action_xy", "[", "1", "]", ",", "0.", ",", "-", "1", "]", ")", "\n", "", "elif", "i", "<", "35", ":", "\n", "                    ", "action", "=", "np", ".", "asarray", "(", "[", "0.", ",", "0", ",", "-", "1", ",", "-", "1.", "]", ")", "\n", "", "elif", "i", "<", "45", ":", "\n", "                    ", "action", "=", "np", ".", "asarray", "(", "[", "0.", ",", "0", ",", "-", "1", ",", "1.", "]", ")", "\n", "", "elif", "i", "<", "60", ":", "\n", "                    ", "action", "=", "np", ".", "asarray", "(", "[", "0.", ",", "0", ",", "+", "1", ",", "1.", "]", ")", "\n", "", "elif", "i", "<", "100", ":", "\n", "                    ", "if", "goal_obj_distance", ">", "0.015", ":", "\n", "                        ", "action_xy", "=", "gain", "*", "(", "goal_xy", "-", "obj_xy", ")", "\n", "", "else", ":", "\n", "                        ", "action_xy", "=", "[", "0.", ",", "0.", "]", "\n", "", "action", "=", "np", ".", "asarray", "(", "[", "action_xy", "[", "0", "]", ",", "action_xy", "[", "1", "]", ",", "0.", ",", "1.", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "                ", "obj_y", "=", "env", ".", "unwrapped", ".", "get_obj_pos", "(", ")", "[", "1", "]", "-", "0.02", "\n", "hand_y", "=", "env", ".", "unwrapped", ".", "get_endeff_pos", "(", ")", "[", "1", "]", "\n", "goal_y", "=", "env", ".", "unwrapped", ".", "fixed_goal", "[", "4", "]", "\n", "\n", "if", "i", "<", "25", ":", "\n", "                    ", "if", "obj_y", "<", "(", "hand_y", "-", "0.01", ")", ":", "\n", "                        ", "action", "=", "np", ".", "asarray", "(", "[", "-", "1.", ",", "0.", ",", "-", "1.", "]", ")", "\n", "", "elif", "obj_y", ">", "(", "hand_y", "+", "0.01", ")", ":", "\n", "                        ", "action", "=", "np", ".", "asarray", "(", "[", "1.", ",", "0.", ",", "-", "1.", "]", ")", "\n", "", "else", ":", "\n", "                        ", "action", "=", "np", ".", "asarray", "(", "[", "0.", ",", "0.", ",", "-", "1.", "]", ")", "\n", "", "", "elif", "i", "<", "40", ":", "\n", "                    ", "action", "=", "np", ".", "asarray", "(", "[", "0.", ",", "-", "1.0", ",", "-", "1.", "]", ")", "\n", "", "elif", "i", "<", "60", ":", "\n", "                    ", "action", "=", "np", ".", "asarray", "(", "[", "0.", ",", "-", "1.0", ",", "1.0", "]", ")", "\n", "", "elif", "i", "<", "80", ":", "\n", "                    ", "action", "=", "np", ".", "asarray", "(", "[", "0.", ",", "1.", ",", "1.", "]", ")", "\n", "", "elif", "i", "<", "100", ":", "\n", "                    ", "if", "goal_y", "<", "(", "hand_y", "-", "0.01", ")", ":", "\n", "                        ", "action", "=", "np", ".", "asarray", "(", "[", "-", "1.", ",", "0.", ",", "1.", "]", ")", "\n", "", "elif", "goal_y", ">", "(", "hand_y", "+", "0.01", ")", ":", "\n", "                        ", "action", "=", "np", ".", "asarray", "(", "[", "1.", ",", "0.", ",", "1.", "]", ")", "\n", "", "else", ":", "\n", "                        ", "action", "=", "np", ".", "asarray", "(", "[", "0.", ",", "0.", ",", "1.", "]", ")", "\n", "\n", "", "", "", "ob", ",", "r", ",", "d", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "\n", "", "if", "info", "[", "'obj_success'", "]", ":", "\n", "            ", "goal_examples", ".", "append", "(", "ob", ")", "\n", "\n", "", "if", "len", "(", "goal_examples", ")", ">=", "total_goal_examples", ":", "\n", "            ", "break", "\n", "\n", "", "", "assert", "len", "(", "goal_examples", ")", "==", "total_goal_examples", ",", "f'Could not generate enough goal examples: {len(goal_examples)}'", "\n", "goal_examples", "=", "np", ".", "asarray", "(", "goal_examples", ")", "\n", "\n", "return", "goal_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.generate_goal_examples.generate_push_goal_examples": [[126, 165], ["numpy.asarray", "env.reset", "numpy.random.uniform", "numpy.random.uniform", "env.unwrapped.set_to_goal", "env.unwrapped.get_endeff_pos", "env.unwrapped.get_puck_pos", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "len", "env.step", "np.asarray.append", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.reset", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.step"], ["", "def", "generate_push_goal_examples", "(", "total_goal_examples", ",", "env", ")", ":", "\n", "    ", "max_attempt", "=", "5", "*", "total_goal_examples", "\n", "attempts", "=", "0", "\n", "n", "=", "0", "\n", "goal_examples", "=", "[", "]", "\n", "\n", "while", "n", "<", "total_goal_examples", "and", "attempts", "<", "max_attempt", ":", "\n", "\n", "        ", "attempts", "+=", "1", "\n", "env", ".", "reset", "(", ")", "\n", "goal_vec", "=", "{", "\n", "'state_desired_goal'", ":", "env", ".", "unwrapped", ".", "fixed_goal", "\n", "}", "\n", "\n", "goal_vec", "[", "'state_desired_goal'", "]", "[", ":", "2", "]", "+=", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "0.01", ",", "high", "=", "0.01", ",", "size", "=", "(", "2", ",", ")", ")", "\n", "goal_vec", "[", "'state_desired_goal'", "]", "[", "-", "2", ":", "]", "+=", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "0.01", ",", "high", "=", "0.01", ",", "size", "=", "(", "2", ",", ")", ")", "\n", "\n", "env", ".", "unwrapped", ".", "set_to_goal", "(", "goal_vec", ")", "\n", "\n", "endeff_pos", "=", "env", ".", "unwrapped", ".", "get_endeff_pos", "(", ")", "\n", "puck_pos", "=", "env", ".", "unwrapped", ".", "get_puck_pos", "(", ")", "\n", "\n", "endeff_distance", "=", "np", ".", "linalg", ".", "norm", "(", "endeff_pos", "-", "goal_vec", "[", "'state_desired_goal'", "]", "[", ":", "3", "]", ")", "\n", "puck_distance", "=", "np", ".", "linalg", ".", "norm", "(", "puck_pos", "[", ":", "2", "]", "-", "goal_vec", "[", "'state_desired_goal'", "]", "[", "3", ":", "5", "]", ")", "\n", "puck_endeff_distance", "=", "np", ".", "linalg", ".", "norm", "(", "puck_pos", "[", ":", "2", "]", "-", "endeff_pos", "[", ":", "2", "]", ")", "\n", "\n", "endeff_threshold", "=", "0.05", "\n", "puck_threshold", "=", "env", ".", "unwrapped", ".", "indicator_threshold", "\n", "puck_radius", "=", "env", ".", "unwrapped", ".", "puck_radius", "\n", "\n", "if", "endeff_distance", "<", "endeff_threshold", "and", "puck_distance", "<", "puck_threshold", "and", "puck_endeff_distance", ">", "puck_radius", ":", "\n", "            ", "ob", ",", "rew", ",", "done", ",", "info", "=", "env", ".", "step", "(", "np", ".", "asarray", "(", "[", "0.", ",", "0.", "]", ")", ")", "\n", "goal_examples", ".", "append", "(", "ob", ")", "\n", "n", "+=", "1", "\n", "\n", "", "", "assert", "len", "(", "goal_examples", ")", "==", "total_goal_examples", ",", "'Could not generate enough goal examples'", "\n", "goal_examples", "=", "np", ".", "asarray", "(", "goal_examples", ")", "\n", "\n", "return", "goal_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.generate_goal_examples.generate_door_goal_examples": [[166, 219], ["numpy.asarray", "env.reset", "env.unwrapped._set_door_pos", "range", "env.unwrapped.get_endeff_pos", "env.unwrapped.get_door_angle", "numpy.linalg.norm", "numpy.abs", "len", "env.unwrapped.get_door_angle", "numpy.random.uniform", "env.step", "env.step", "np.asarray.append", "numpy.random.uniform", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.reset", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.step", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.step"], ["", "def", "generate_door_goal_examples", "(", "total_goal_examples", ",", "env", ")", ":", "\n", "\n", "    ", "max_attempt", "=", "10", "*", "total_goal_examples", "\n", "attempts", "=", "0", "\n", "n", "=", "0", "\n", "goal_examples", "=", "[", "]", "\n", "\n", "while", "n", "<", "total_goal_examples", "and", "attempts", "<", "max_attempt", ":", "\n", "\n", "        ", "attempts", "+=", "1", "\n", "env", ".", "reset", "(", ")", "\n", "env", ".", "unwrapped", ".", "_set_door_pos", "(", "0", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "0.", ",", "high", "=", "0.1", ")", ")", "\n", "goal_vec", "=", "{", "\n", "'state_desired_goal'", ":", "env", ".", "unwrapped", ".", "fixed_goal", "\n", "}", "\n", "\n", "for", "j", "in", "range", "(", "100", ")", ":", "\n", "\n", "            ", "door_angle", "=", "env", ".", "unwrapped", ".", "get_door_angle", "(", ")", "\n", "if", "j", "<", "25", ":", "\n", "                ", "act", "=", "[", "0.05", ",", "1", ",", "-", "0.5", "]", "\n", "", "elif", "j", "<", "100", "and", "door_angle", "<", "0.8", ":", "\n", "                ", "act", "=", "[", "0.0", ",", "-", "0.4", ",", "0.0", "]", "\n", "", "else", ":", "\n", "                ", "act", "=", "[", "0.", ",", "0.", ",", "0.", "]", "\n", "\n", "", "act", "+=", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "0.01", ",", "high", "=", "0.01", ",", "size", "=", "3", ")", "\n", "ob", ",", "rew", ",", "done", ",", "info", "=", "env", ".", "step", "(", "np", ".", "asarray", "(", "act", ")", ")", "\n", "\n", "# goal_vec['state_desired_goal'][:3] += np.random.uniform(low=-0.01, high=0.01, size=(3,))", "\n", "# goal_vec['state_desired_goal'][3] += np.random.uniform(low=-0.01, high=0.01)", "\n", "\n", "# env.unwrapped.set_to_goal_pos(goal_vec['state_desired_goal'][:3])", "\n", "# env.unwrapped.set_to_goal_angle(goal_vec['state_desired_goal'][3])", "\n", "\n", "", "pos", "=", "env", ".", "unwrapped", ".", "get_endeff_pos", "(", ")", "\n", "angle", "=", "env", ".", "unwrapped", ".", "get_door_angle", "(", ")", "\n", "endeff_distance", "=", "np", ".", "linalg", ".", "norm", "(", "pos", "-", "goal_vec", "[", "'state_desired_goal'", "]", "[", ":", "3", "]", ")", "\n", "angle_distance", "=", "np", ".", "abs", "(", "angle", "-", "goal_vec", "[", "'state_desired_goal'", "]", "[", "3", "]", ")", "\n", "#state = np.concatenate([pos, angle])", "\n", "angle_threshold", "=", "env", ".", "unwrapped", ".", "indicator_threshold", "[", "0", "]", "\n", "endeff_threshold", "=", "env", ".", "unwrapped", ".", "indicator_threshold", "[", "1", "]", "\n", "\n", "# if endeff_distance < endeff_threshold and angle_distance < angle_threshold:", "\n", "if", "info", "[", "'angle_success'", "]", ":", "\n", "            ", "ob", ",", "rew", ",", "done", ",", "info", "=", "env", ".", "step", "(", "np", ".", "asarray", "(", "[", "0.", ",", "0.", ",", "0.", "]", ")", ")", "\n", "goal_examples", ".", "append", "(", "ob", ")", "\n", "n", "+=", "1", "\n", "\n", "", "", "assert", "len", "(", "goal_examples", ")", "==", "total_goal_examples", ",", "'Could not generate enough goal examples'", "\n", "goal_examples", "=", "np", ".", "asarray", "(", "goal_examples", ")", "\n", "\n", "return", "goal_examples", "\n", "", ""]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.initialize_tf_variables": [[19, 38], ["session.run", "tensorflow.global_variables", "tensorflow.local_variables", "tensorflow.variables_initializer", "session.run", "utils.initialize_tf_variables.is_initialized"], "function", ["None"], ["AVAILABLE_ALGORITHMS", "=", "set", "(", "alg_utils", ".", "ALGORITHM_CLASSES", ".", "keys", "(", ")", ")", "\n", "\n", "\n", "def", "add_ray_init_args", "(", "parser", ")", ":", "\n", "\n", "    ", "def", "init_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `ray.init`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Cpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Gpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resources'", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.set_seed": [[40, 46], ["random.seed", "numpy.random.seed", "tensorflow.set_random_seed", "print"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.seed", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.dm_control_adapter.DmControlAdapter.seed"], ["default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Resources to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--include-webui'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "init_help_string", "(", "\"Boolean flag indicating whether to start the\"", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.datetimestamp": [[48, 53], ["datetime.datetime.now", "datetime.datetime.now.strftime"], "function", ["None"], ["parser", ".", "add_argument", "(", "\n", "'--temp-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"If provided, it will specify the root temporary\"", "\n", "\" directory for the Ray process.\"", ")", ")", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.datestamp": [[55, 57], ["datetime.date.today().isoformat().replace", "datetime.date.today().isoformat", "datetime.date.today"], "function", ["None"], ["return", "parser", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.timestamp": [[59, 64], ["datetime.datetime.now", "datetime.datetime.time", "datetime.datetime.time.strftime"], "function", ["None"], ["\n", "    ", "def", "tune_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `tune.run`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--resources-per-trial'", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.concat_obs_z": [[66, 72], ["numpy.isscalar", "numpy.zeros", "numpy.hstack"], "function", ["None"], ["default", "=", "{", "}", ",", "\n", "help", "=", "tune_help_string", "(", "\"Resources to allocate for each trial.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", "help", "=", "tune_help_string", "(", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.split_aug_obs": [[74, 79], ["numpy.where"], "function", ["None"], ["\" Ray's internal scheduling bookkeeping, and is not an actual hard\"", "\n", "\" limit for CPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-gpus'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils._make_dir": [[81, 85], ["os.path.dirname", "os.path.exists", "os.makedirs"], "function", ["None"], ["\"GPUs to allocate for each trial. Note: this is only used for\"", "\n", "\" Ray's internal scheduling bookkeeping, and is not an actual hard\"", "\n", "\" limit for GPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-extra-cpus'", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.save_video": [[87, 105], ["utils._make_dir", "numpy.flip", "cv2.VideoWriter_fourcc", "cv2.VideoWriter_fourcc", "cv2.VideoWriter", "cv2.VideoWriter.release", "cv2.VideoWriter.write"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils._make_dir"], ["default", "=", "None", ",", "\n", "help", "=", "(", "\"Extra CPUs to reserve in case the trials need to\"", "\n", "\" launch additional Ray actors that use CPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-extra-gpus'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Extra GPUs to reserve in case the trials need to\"", "\n", "\" launch additional Ray actors that use GPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-samples'", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "tune_help_string", "(", "\"Number of times to repeat each trial.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--upload-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "''", ",", "\n", "help", "=", "tune_help_string", "(", "\"Optional URI to sync training results to (e.g.\"", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.deep_update": [[107, 119], ["d.copy.copy", "u.copy.copy", "u.copy.items", "isinstance", "utils.deep_update", "d.copy.get"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.adapters.softlearning_env.SoftlearningEnv.copy", "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.deep_update"], ["parser", ".", "add_argument", "(", "\n", "'--trial-name-template'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'id={trial.trial_id}-seed={trial.config[run_params][seed]}'", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Optional string template for trial name. For example:\"", "\n", "\" '{trial.trial_id}-seed={trial.config[run_params][seed]}'\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint-frequency'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"How many training iterations between checkpoints.\"", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.get_git_rev": [[121, 141], ["git.Repo", "print"], "function", ["None"], ["\" takes precedence over variant['run_params']\"", "\n", "\"['checkpoint_frequency'].\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint-at-end'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Whether to checkpoint at the end of the experiment. If set,\"", "\n", "\" takes precedence over variant['run_params']\"", "\n", "\"['checkpoint_at_end'].\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--max-failures'", ",", "\n", "default", "=", "3", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Try to recover a trial from its last checkpoint at least this \"", "\n", "\"many times. Only applies if checkpointing is enabled.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--restore'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.flatten": [[143, 156], ["unflattened.items", "dict", "ValueError", "isinstance", "items.extend", "items.append", "flatten().items", "utils.flatten"], "function", ["home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.flatten"], ["\"Path to checkpoint. Only makes sense to set if running 1 trial.\"", "\n", "\" Defaults to None.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--with-server'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "tune_help_string", "(", "\"Starts a background Tune server. Needed for\"", "\n", "\" using the Client API.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--server-port'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4321", ",", "\n", "help", "=", "tune_help_string", "(", "\"Port number for launching TuneServer.\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.unflatten": [[158, 170], ["flattened.items", "key.split"], "function", ["None"], ["\n", "\n", "", "def", "get_parser", "(", "allow_policy_list", "=", "False", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--universe'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "AVAILABLE_UNIVERSES", ",", "\n", "default", "=", "DEFAULT_UNIVERSE", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--domain'", ",", "\n", "type", "=", "str", ",", "\n"]], "home.repos.pwc.inspect_result.kschmeckpeper_rl_with_videos.misc.utils.mixup": [[171, 183], ["utils.mixup.unison_shuffled_copies"], "function", ["None"], ["default", "=", "DEFAULT_DOMAIN", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--task'", ",", "type", "=", "str", ",", "default", "=", "DEFAULT_TASK", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint-replay-pool'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Whether a checkpoint should also saved the replay\"", "\n", "\" pool. If set, takes precedence over\"", "\n", "\" variant['run_params']['checkpoint_replay_pool'].\"", "\n", "\" Note that the replay pool is saved (and \"", "\n", "\" constructed) piece by piece so that each\"", "\n"]]}