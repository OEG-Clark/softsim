{"home.repos.pwc.inspect_result.nv-tlabs_atiss.None.setup.collect_docstring": [[16, 26], ["itertools.dropwhile", "doc[].replace().replace", "doc.endswith", "doc[].replace", "x.startswith"], "function", ["None"], ["def", "collect_docstring", "(", "lines", ")", ":", "\n", "    ", "\"\"\"Return document docstring if it exists\"\"\"", "\n", "lines", "=", "dropwhile", "(", "lambda", "x", ":", "not", "x", ".", "startswith", "(", "'\"\"\"'", ")", ",", "lines", ")", "\n", "doc", "=", "\"\"", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "doc", "+=", "line", "\n", "if", "doc", ".", "endswith", "(", "'\"\"\"\\n'", ")", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "doc", "[", "3", ":", "-", "4", "]", ".", "replace", "(", "\"\\r\"", ",", "\"\"", ")", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.None.setup.collect_metadata": [[28, 39], ["open", "iter", "setup.collect_docstring", "os.path.join", "line.startswith", "map", "line.split", "x.strip"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.None.setup.collect_docstring"], ["", "def", "collect_metadata", "(", ")", ":", "\n", "    ", "meta", "=", "{", "}", "\n", "with", "open", "(", "path", ".", "join", "(", "\"scene_synthesis\"", ",", "\"__init__.py\"", ")", ")", "as", "f", ":", "\n", "        ", "lines", "=", "iter", "(", "f", ")", "\n", "meta", "[", "\"description\"", "]", "=", "collect_docstring", "(", "lines", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "if", "line", ".", "startswith", "(", "\"__\"", ")", ":", "\n", "                ", "key", ",", "value", "=", "map", "(", "lambda", "x", ":", "x", ".", "strip", "(", ")", ",", "line", ".", "split", "(", "\"=\"", ")", ")", "\n", "meta", "[", "key", "[", "2", ":", "-", "2", "]", "]", "=", "value", "[", "1", ":", "-", "1", "]", "\n", "\n", "", "", "", "return", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.None.setup.get_extensions": [[41, 43], ["None"], "function", ["None"], ["", "def", "get_extensions", "(", ")", ":", "\n", "    ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.None.setup.get_install_requirements": [[45, 56], ["None"], "function", ["None"], ["", "def", "get_install_requirements", "(", ")", ":", "\n", "    ", "return", "[", "\n", "\"numpy\"", ",", "\n", "\"torch\"", ",", "\n", "\"torchvision\"", ",", "\n", "\"networkx\"", ",", "\n", "\"trimesh\"", ",", "\n", "\"matplotlib\"", ",", "\n", "\"shapely\"", ",", "\n", "\"simple-3dviz\"", ",", "\n", "\"scipy\"", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.None.setup.setup_package": [[59, 85], ["setup.collect_metadata", "setuptools.setup", "open", "f.read", "setuptools.find_packages", "setup.get_install_requirements", "setup.get_extensions"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.None.setup.collect_metadata", "home.repos.pwc.inspect_result.nv-tlabs_atiss.None.setup.get_install_requirements", "home.repos.pwc.inspect_result.nv-tlabs_atiss.None.setup.get_extensions"], ["", "def", "setup_package", "(", ")", ":", "\n", "    ", "with", "open", "(", "\"README.md\"", ")", "as", "f", ":", "\n", "        ", "long_description", "=", "f", ".", "read", "(", ")", "\n", "", "meta", "=", "collect_metadata", "(", ")", "\n", "setup", "(", "\n", "name", "=", "\"scene-synthesis\"", ",", "\n", "version", "=", "meta", "[", "\"version\"", "]", ",", "\n", "description", "=", "meta", "[", "\"description\"", "]", ",", "\n", "long_description", "=", "long_description", ",", "\n", "long_description_content_type", "=", "\"text/markdown\"", ",", "\n", "maintainer", "=", "meta", "[", "\"maintainer\"", "]", ",", "\n", "maintainer_email", "=", "meta", "[", "\"email\"", "]", ",", "\n", "url", "=", "meta", "[", "\"url\"", "]", ",", "\n", "keywords", "=", "meta", "[", "\"keywords\"", "]", ",", "\n", "license", "=", "meta", "[", "\"license\"", "]", ",", "\n", "classifiers", "=", "[", "\n", "\"Intended Audience :: Science/Research\"", ",", "\n", "\"Intended Audience :: Developers\"", ",", "\n", "\"License :: OSI Approved :: NVIDIA Source Code License\"", ",", "\n", "\"Topic :: Scientific/Engineering\"", ",", "\n", "\"Programming Language :: Python\"", ",", "\n", "\"Programming Language :: Python :: 3\"", ",", "\n", "]", ",", "\n", "packages", "=", "find_packages", "(", "exclude", "=", "[", "\"docs\"", ",", "\"scripts\"", "]", ")", ",", "\n", "install_requires", "=", "get_install_requirements", "(", ")", ",", "\n", "ext_modules", "=", "get_extensions", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.render_threedfront_scene.scene_init": [[32, 42], ["scene.add"], "function", ["None"], ["def", "scene_init", "(", "mesh", ",", "up_vector", ",", "camera_position", ",", "camera_target", ",", "background", ")", ":", "\n", "    ", "def", "inner", "(", "scene", ")", ":", "\n", "        ", "scene", ".", "background", "=", "background", "\n", "scene", ".", "up_vector", "=", "up_vector", "\n", "scene", ".", "camera_position", "=", "camera_position", "\n", "scene", ".", "camera_target", "=", "camera_target", "\n", "scene", ".", "light", "=", "camera_position", "\n", "if", "mesh", "is", "not", "None", ":", "\n", "            ", "scene", ".", "add", "(", "mesh", ")", "\n", "", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.render_threedfront_scene.main": [[44, 262], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.getLogger().setLevel", "simple_3dviz.Scene", "scene_synthesis.datasets.threed_front.ThreedFront.from_dataset_directory", "print", "os.path.exists", "os.makedirs", "pyrr.Matrix44.orthogonal_projection", "logging.getLogger", "len", "print", "s.furniture_renderables", "os.path.join", "utils.export_scene", "list", "tuple", "tuple", "tuple", "tuple", "print", "simple_3dviz.renderables.textured_mesh.TexturedMesh.from_file", "TexturedMesh.from_file.scale", "trimesh.load", "PIL.Image.open", "numpy.zeros", "numpy.cos", "numpy.sin", "numpy.cos", "trimesh_meshes.append", "utils.floor_plan_from_scene", "simple_3dviz.utils.render", "simple_3dviz.window.show", "os.path.exists", "os.mkdir", "map", "map", "map", "map", "map", "numpy.sin", "trimesh.load.vertices.dot", "simple_3dviz.behaviours.io.SaveFrames", "x.split", "x.split", "x.split", "x.split", "x.split", "ei.mesh_renderable", "ei.mesh_renderable", "simple_3dviz.behaviours.keyboard.SnapshotOnKey"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.from_dataset_directory", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.furniture_renderables", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.export_scene", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ModelInfo.from_file", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.scale", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.floor_plan_from_scene", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.show", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.BaseThreedFutureModel.mesh_renderable", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.BaseThreedFutureModel.mesh_renderable"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Visualize a 3D-FRONT room from json file\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"scene_id\"", ",", "\n", "help", "=", "\"The scene id of the scene to be visualized\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"output_directory\"", ",", "\n", "help", "=", "\"Path to output directory\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_3d_front_dataset_directory\"", ",", "\n", "help", "=", "\"Path to the 3D-FRONT dataset\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_3d_future_dataset_directory\"", ",", "\n", "help", "=", "\"Path to the 3D-FUTURE dataset\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_model_info\"", ",", "\n", "help", "=", "\"Path to the 3D-FUTURE model_info.json file\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_floor_plan_textures\"", ",", "\n", "help", "=", "\"Path to floor texture images\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--annotation_file\"", ",", "\n", "default", "=", "\"../config/bedroom_threed_front_splits.csv\"", ",", "\n", "help", "=", "\"Path to the train/test splits file\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--background\"", ",", "\n", "type", "=", "lambda", "x", ":", "list", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"1,1,1,1\"", ",", "\n", "help", "=", "\"Set the background of the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--up_vector\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"0,0,1\"", ",", "\n", "help", "=", "\"Up vector of the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--camera_target\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"0,0,0\"", ",", "\n", "help", "=", "\"Set the target for the camera\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--camera_position\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"-2.0,-2.0,-2.0\"", ",", "\n", "help", "=", "\"Camer position in the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--window_size\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "int", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"512,512\"", ",", "\n", "help", "=", "\"Define the size of the scene and the window\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_frames\"", ",", "\n", "help", "=", "\"Path to save the visualization frames to\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--without_screen\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Perform no screen rendering\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--with_orthographic_projection\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Use orthographic projection\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--with_floor_layout\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Visualize also the rooom's floor\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--with_walls\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Visualize also the rooom's floor\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--with_door_and_windows\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Visualize also the rooom's floor\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--with_texture\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Visualize objects with texture\"", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "logging", ".", "getLogger", "(", "\"trimesh\"", ")", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "# Check if output directory exists and if it doesn't create it", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_directory", ")", "\n", "\n", "# Create the scene and the behaviour list for simple-3dviz", "\n", "", "scene", "=", "Scene", "(", "size", "=", "args", ".", "window_size", ")", "\n", "if", "args", ".", "with_orthographic_projection", ":", "\n", "        ", "scene", ".", "camera_matrix", "=", "pyrr", ".", "Matrix44", ".", "orthogonal_projection", "(", "\n", "left", "=", "-", "3.1", ",", "right", "=", "3.1", ",", "bottom", "=", "-", "3.1", ",", "top", "=", "3.1", ",", "near", "=", "0.1", ",", "far", "=", "1000", "\n", ")", "\n", "", "scene", ".", "light", "=", "args", ".", "camera_position", "\n", "behaviours", "=", "[", "]", "\n", "\n", "d", "=", "ThreedFront", ".", "from_dataset_directory", "(", "\n", "args", ".", "path_to_3d_front_dataset_directory", ",", "\n", "args", ".", "path_to_model_info", ",", "\n", "args", ".", "path_to_3d_future_dataset_directory", ",", "\n", "path_to_room_masks_dir", "=", "None", ",", "\n", "path_to_bounds", "=", "None", ",", "\n", "filter_fn", "=", "lambda", "s", ":", "s", "\n", ")", "\n", "print", "(", "\"Loading dataset with {} rooms\"", ".", "format", "(", "len", "(", "d", ")", ")", ")", "\n", "\n", "for", "s", "in", "d", ".", "scenes", ":", "\n", "        ", "if", "s", ".", "scene_id", "==", "args", ".", "scene_id", ":", "\n", "            ", "for", "b", "in", "s", ".", "bboxes", ":", "\n", "                ", "print", "(", "b", ".", "model_jid", ",", "b", ".", "label", ")", "\n", "", "print", "(", "s", ".", "furniture_in_room", ",", "s", ".", "scene_id", ",", "s", ".", "json_path", ")", "\n", "renderables", "=", "s", ".", "furniture_renderables", "(", "\n", "with_floor_plan_offset", "=", "True", ",", "with_texture", "=", "args", ".", "with_texture", "\n", ")", "\n", "trimesh_meshes", "=", "[", "]", "\n", "for", "furniture", "in", "s", ".", "bboxes", ":", "\n", "# Load the furniture and scale it as it is given in the dataset", "\n", "                ", "raw_mesh", "=", "TexturedMesh", ".", "from_file", "(", "furniture", ".", "raw_model_path", ")", "\n", "raw_mesh", ".", "scale", "(", "furniture", ".", "scale", ")", "\n", "\n", "# Create a trimesh object for the same mesh in order to save", "\n", "# everything as a single scene", "\n", "tr_mesh", "=", "trimesh", ".", "load", "(", "furniture", ".", "raw_model_path", ",", "force", "=", "\"mesh\"", ")", "\n", "tr_mesh", ".", "visual", ".", "material", ".", "image", "=", "Image", ".", "open", "(", "\n", "furniture", ".", "texture_image_path", "\n", ")", "\n", "tr_mesh", ".", "vertices", "*=", "furniture", ".", "scale", "\n", "theta", "=", "furniture", ".", "z_angle", "\n", "R", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "R", "[", "0", ",", "0", "]", "=", "np", ".", "cos", "(", "theta", ")", "\n", "R", "[", "0", ",", "2", "]", "=", "-", "np", ".", "sin", "(", "theta", ")", "\n", "R", "[", "2", ",", "0", "]", "=", "np", ".", "sin", "(", "theta", ")", "\n", "R", "[", "2", ",", "2", "]", "=", "np", ".", "cos", "(", "theta", ")", "\n", "R", "[", "1", ",", "1", "]", "=", "1.", "\n", "tr_mesh", ".", "vertices", "[", "...", "]", "=", "tr_mesh", ".", "vertices", ".", "dot", "(", "R", ")", "+", "furniture", ".", "position", "\n", "tr_mesh", ".", "vertices", "[", "...", "]", "=", "tr_mesh", ".", "vertices", "-", "s", ".", "centroid", "\n", "trimesh_meshes", ".", "append", "(", "tr_mesh", ")", "\n", "\n", "", "if", "args", ".", "with_floor_layout", ":", "\n", "# Get a floor plan", "\n", "                ", "floor_plan", ",", "tr_floor", ",", "_", "=", "floor_plan_from_scene", "(", "\n", "s", ",", "args", ".", "path_to_floor_plan_textures", ",", "without_room_mask", "=", "True", "\n", ")", "\n", "renderables", "+=", "floor_plan", "\n", "trimesh_meshes", "+=", "tr_floor", "\n", "\n", "", "if", "args", ".", "with_walls", ":", "\n", "                ", "for", "ei", "in", "s", ".", "extras", ":", "\n", "                    ", "if", "\"WallInner\"", "in", "ei", ".", "model_type", ":", "\n", "                        ", "renderables", "=", "renderables", "+", "[", "\n", "ei", ".", "mesh_renderable", "(", "\n", "offset", "=", "-", "s", ".", "centroid", ",", "\n", "colors", "=", "(", "0.8", ",", "0.8", ",", "0.8", ",", "0.6", ")", "\n", ")", "\n", "]", "\n", "\n", "", "", "", "if", "args", ".", "with_door_and_windows", ":", "\n", "                ", "for", "ei", "in", "s", ".", "extras", ":", "\n", "                    ", "if", "\"Window\"", "in", "ei", ".", "model_type", "or", "\"Door\"", "in", "ei", ".", "model_type", ":", "\n", "                        ", "renderables", "=", "renderables", "+", "[", "\n", "ei", ".", "mesh_renderable", "(", "\n", "offset", "=", "-", "s", ".", "centroid", ",", "\n", "colors", "=", "(", "0.8", ",", "0.8", ",", "0.8", ",", "0.6", ")", "\n", ")", "\n", "]", "\n", "\n", "", "", "", "if", "args", ".", "without_screen", ":", "\n", "                ", "path_to_image", "=", "\"{}/{}_\"", ".", "format", "(", "args", ".", "output_directory", ",", "s", ".", "uid", ")", "\n", "behaviours", "+=", "[", "SaveFrames", "(", "path_to_image", "+", "\"{:03d}.png\"", ",", "1", ")", "]", "\n", "render", "(", "\n", "renderables", ",", "\n", "size", "=", "args", ".", "window_size", ",", "\n", "camera_position", "=", "args", ".", "camera_position", ",", "\n", "camera_target", "=", "args", ".", "camera_target", ",", "\n", "up_vector", "=", "args", ".", "up_vector", ",", "\n", "background", "=", "args", ".", "background", ",", "\n", "behaviours", "=", "behaviours", ",", "\n", "n_frames", "=", "2", ",", "\n", "scene", "=", "scene", "\n", ")", "\n", "", "else", ":", "\n", "                ", "show", "(", "\n", "renderables", ",", "\n", "behaviours", "=", "behaviours", "+", "[", "SnapshotOnKey", "(", ")", "]", ",", "\n", "size", "=", "args", ".", "window_size", ",", "\n", "camera_position", "=", "args", ".", "camera_position", ",", "\n", "camera_target", "=", "args", ".", "camera_target", ",", "\n", "light", "=", "args", ".", "camera_position", ",", "\n", "up_vector", "=", "args", ".", "up_vector", ",", "\n", "background", "=", "args", ".", "background", ",", "\n", ")", "\n", "# Create a trimesh scene and export it", "\n", "", "path_to_objs", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_directory", ",", "\n", "\"train_{}\"", ".", "format", "(", "args", ".", "scene_id", ")", "\n", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_objs", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "path_to_objs", ")", "\n", "", "export_scene", "(", "path_to_objs", ",", "trimesh_meshes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.evaluate_kl_divergence_object_category.categorical_kl": [[28, 30], ["numpy.log", "numpy.log"], "function", ["None"], ["def", "categorical_kl", "(", "p", ",", "q", ")", ":", "\n", "    ", "return", "(", "p", "*", "(", "np", ".", "log", "(", "p", "+", "1e-6", ")", "-", "np", ".", "log", "(", "q", "+", "1e-6", ")", ")", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.evaluate_kl_divergence_object_category.main": [[32, 193], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.getLogger().setLevel", "torch.cuda.is_available", "print", "training_utils.load_config", "scene_synthesis.datasets.get_dataset_raw_and_encoded", "print", "scene_synthesis.networks.build_network", "network.eval", "tqdm.tqdm", "print", "evaluate_kl_divergence_object_category.categorical_kl", "print", "os.path.join", "numpy.array", "zip", "numpy.zeros", "numpy.zeros", "zip", "print", "numpy.savez", "torch.device", "torch.device", "os.path.exists", "os.makedirs", "scene_synthesis.datasets.filter_function", "range", "numpy.random.choice", "torch.from_numpy().to", "network.generate_boxes", "dataset.post_process", "synthesized_scenes.append", "sum", "sum", "sum", "sum", "gt_class_labels.sum", "syn_class_labels.sum", "print", "gt_scene[].argmax", "[].argmax", "range", "range", "logging.getLogger", "config[].get", "len", "len", "len", "range", "len", "range", "config[].get", "torch.from_numpy", "v[].cpu().numpy", "d[].sum", "[].sum", "len", "len", "len", "len", "len", "len", "numpy.transpose", "dataset.post_process.items", "v[].cpu"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.training_utils.load_config", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_dataset_raw_and_encoded", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.__init__.build_network", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.evaluate_kl_divergence_object_category.categorical_kl", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.generate_boxes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.post_process"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "(", "\"Compute the KL-divergence between the object category \"", "\n", "\"distributions of real and synthesized scenes\"", ")", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"config_file\"", ",", "\n", "help", "=", "\"Path to the file that contains the experiment configuration\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--weight_file\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Path to a pretrained model\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--path_to_bounds\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Path to the dataset's bounds\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_directory\"", ",", "\n", "default", "=", "\"/tmp/\"", ",", "\n", "help", "=", "\"Path to the output directory\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_synthesized_scenes\"", ",", "\n", "default", "=", "1000", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of scenes to be synthesized\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--splits\"", ",", "\n", "choices", "=", "[", "\n", "\"training\"", ",", "\n", "\"validation\"", "\n", "]", ",", "\n", "default", "=", "\"training\"", ",", "\n", "help", "=", "\"Split to evaluate\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--without_lamps\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"If set ignore lamps when rendering the room\"", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "# Disable trimesh's logger", "\n", "logging", ".", "getLogger", "(", "\"trimesh\"", ")", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "print", "(", "\"Running code on\"", ",", "device", ")", "\n", "\n", "# Check if output directory exists and if it doesn't create it", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_directory", ")", "\n", "\n", "", "config", "=", "load_config", "(", "args", ".", "config_file", ")", "\n", "\n", "# Load the training dataset", "\n", "path_to_bounds", "=", "args", ".", "path_to_bounds", "\n", "\n", "config", "[", "\"data\"", "]", "[", "\"encoding_type\"", "]", "=", "config", "[", "\"data\"", "]", "[", "\"encoding_type\"", "]", "+", "\"_eval\"", "\n", "dataset", ",", "ground_truth_scenes", "=", "get_dataset_raw_and_encoded", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "filter_function", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "split", "=", "config", "[", "args", ".", "splits", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"test\"", "]", ")", ",", "\n", "without_lamps", "=", "args", ".", "without_lamps", "\n", ")", ",", "\n", "path_to_bounds", "=", "args", ".", "path_to_bounds", ",", "\n", "split", "=", "config", "[", "args", ".", "splits", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"test\"", "]", ")", "\n", ")", "\n", "print", "(", "\"Loaded {} scenes with {} object types:\"", ".", "format", "(", "\n", "len", "(", "dataset", ")", ",", "dataset", ".", "n_object_types", ")", "\n", ")", "\n", "\n", "# Using the pre-trained model create the synthesized dataset", "\n", "network", ",", "_", ",", "validate_on_batch", "=", "build_network", "(", "\n", "ground_truth_scenes", ".", "feature_size", ",", "ground_truth_scenes", ".", "n_classes", ",", "\n", "config", ",", "args", ".", "weight_file", ",", "device", "=", "device", "\n", ")", "\n", "network", ".", "eval", "(", ")", "\n", "\n", "# Generate some rooms with the pre-trained model", "\n", "synthesized_scenes", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "args", ".", "n_synthesized_scenes", ")", ")", ":", "\n", "        ", "scene_idx", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "dataset", ")", ")", "\n", "scene", "=", "dataset", "[", "scene_idx", "]", "\n", "room_mask", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "transpose", "(", "scene", ".", "room_mask", "[", "None", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", ")", ".", "to", "(", "device", ")", "\n", "bbox_params", "=", "network", ".", "generate_boxes", "(", "\n", "room_mask", "=", "room_mask", ",", "device", "=", "device", "\n", ")", "\n", "boxes", "=", "dataset", ".", "post_process", "(", "bbox_params", ")", "\n", "synthesized_scenes", ".", "append", "(", "{", "\n", "k", ":", "v", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "k", ",", "v", "in", "boxes", ".", "items", "(", ")", "\n", "}", ")", "\n", "", "print", "(", "dataset", ".", "class_labels", ")", "\n", "\n", "# Firstly compute the frequencies of the class labels", "\n", "gt_class_labels", "=", "sum", "(", "[", "\n", "d", "[", "\"class_labels\"", "]", ".", "sum", "(", "0", ")", "\n", "for", "d", "in", "ground_truth_scenes", "\n", "]", ")", "/", "sum", "(", "[", "\n", "d", "[", "\"class_labels\"", "]", ".", "shape", "[", "0", "]", "\n", "for", "d", "in", "ground_truth_scenes", "\n", "]", ")", "\n", "syn_class_labels", "=", "sum", "(", "[", "\n", "d", "[", "\"class_labels\"", "]", "[", "1", ":", "-", "1", "]", ".", "sum", "(", "0", ")", "\n", "for", "d", "in", "synthesized_scenes", "\n", "]", ")", "/", "sum", "(", "[", "\n", "d", "[", "\"class_labels\"", "]", ".", "shape", "[", "0", "]", "-", "2", "\n", "for", "d", "in", "synthesized_scenes", "\n", "]", ")", "\n", "assert", "0.9999", "<=", "gt_class_labels", ".", "sum", "(", ")", "<=", "1.0001", "\n", "assert", "0.9999", "<=", "syn_class_labels", ".", "sum", "(", ")", "<=", "1.0001", "\n", "stats", "=", "{", "}", "\n", "stats", "[", "\"class_labels\"", "]", "=", "categorical_kl", "(", "gt_class_labels", ",", "syn_class_labels", ")", "\n", "print", "(", "stats", ")", "\n", "path_to_stats", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_directory", ",", "\"{}_stats.npz\"", ".", "format", "(", "args", ".", "splits", ")", "\n", ")", "\n", "\n", "classes", "=", "np", ".", "array", "(", "dataset", ".", "class_labels", ")", "\n", "for", "c", ",", "gt_cp", ",", "syn_cp", "in", "zip", "(", "classes", ",", "gt_class_labels", ",", "syn_class_labels", ")", ":", "\n", "        ", "print", "(", "\"{}: target: {} / synth: {}\"", ".", "format", "(", "c", ",", "gt_cp", ",", "syn_cp", ")", ")", "\n", "\n", "", "gt_cooccurrences", "=", "np", ".", "zeros", "(", "(", "len", "(", "classes", ")", "-", "2", ",", "len", "(", "classes", ")", "-", "2", ")", ")", "\n", "syn_cooccurrences", "=", "np", ".", "zeros", "(", "(", "len", "(", "classes", ")", "-", "2", ",", "len", "(", "classes", ")", "-", "2", ")", ")", "\n", "for", "gt_scene", ",", "syn_scene", "in", "zip", "(", "ground_truth_scenes", ",", "synthesized_scenes", ")", ":", "\n", "        ", "gt_classes", "=", "gt_scene", "[", "\"class_labels\"", "]", ".", "argmax", "(", "axis", "=", "-", "1", ")", "\n", "syn_classes", "=", "syn_scene", "[", "\"class_labels\"", "]", "[", "1", ":", "-", "1", "]", ".", "argmax", "(", "axis", "=", "-", "1", ")", "\n", "\n", "for", "ii", "in", "range", "(", "len", "(", "gt_classes", ")", ")", ":", "\n", "            ", "r", "=", "gt_classes", "[", "ii", "]", "\n", "for", "jj", "in", "range", "(", "ii", "+", "1", ",", "len", "(", "gt_classes", ")", ")", ":", "\n", "                ", "c", "=", "gt_classes", "[", "jj", "]", "\n", "gt_cooccurrences", "[", "r", ",", "c", "]", "+=", "1", "\n", "\n", "", "", "for", "ii", "in", "range", "(", "len", "(", "syn_classes", ")", ")", ":", "\n", "            ", "r", "=", "syn_classes", "[", "ii", "]", "\n", "for", "jj", "in", "range", "(", "ii", "+", "1", ",", "len", "(", "syn_classes", ")", ")", ":", "\n", "                ", "c", "=", "syn_classes", "[", "jj", "]", "\n", "syn_cooccurrences", "[", "r", ",", "c", "]", "+=", "1", "\n", "\n", "", "", "", "print", "(", "\"Saving stats at {}\"", ".", "format", "(", "path_to_stats", ")", ")", "\n", "np", ".", "savez", "(", "\n", "path_to_stats", ",", "\n", "stats", "=", "stats", ",", "\n", "classes", "=", "classes", ",", "\n", "gt_class_labels", "=", "gt_class_labels", ",", "\n", "syn_class_labels", "=", "syn_class_labels", ",", "\n", "gt_cooccurrences", "=", "gt_cooccurrences", ",", "\n", "syn_cooccurrences", "=", "syn_cooccurrences", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.failure_correction.poll_object": [[37, 52], ["numpy.array", "object_types[].tolist", "print", "int", "float", "input", "float", "input", "list", "input().split", "enumerate", "current_boxes[].argmax", "input"], "function", ["None"], ["def", "poll_object", "(", "dataset", ",", "current_boxes", ",", "scene_id", ")", ":", "\n", "    ", "\"\"\"Show the objects in the current_scene and ask which ones to be\n    removed.\"\"\"", "\n", "object_types", "=", "np", ".", "array", "(", "dataset", ".", "object_types", ")", "\n", "labels", "=", "object_types", "[", "current_boxes", "[", "\"class_labels\"", "]", ".", "argmax", "(", "-", "1", ")", "]", ".", "tolist", "(", ")", "\n", "print", "(", "\n", "\"The {} scene you selected contains {}\"", ".", "format", "(", "\n", "scene_id", ",", "list", "(", "enumerate", "(", "labels", ")", ")", "\n", ")", "\n", ")", "\n", "idx", "=", "int", "(", "input", "(", "\"Enter the index of the object to be moved\\n\"", ")", ")", "\n", "offset", "=", "[", "float", "(", "ti", ")", "for", "ti", "in", "input", "(", "\"Enter translation\\n\"", ")", ".", "split", "(", "\",\"", ")", "]", "\n", "rotation", "=", "float", "(", "input", "(", "\"Enter the rotation amount\\n\"", ")", ")", "\n", "\n", "return", "idx", ",", "offset", ",", "rotation", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.failure_correction.make_network_input": [[54, 69], ["dict", "torch.tensor().float", "torch.from_numpy", "numpy.copy().astype", "failure_correction.make_network_input._prepare"], "function", ["None"], ["", "def", "make_network_input", "(", "current_boxes", ",", "idx", ",", "offset", ",", "rotation", ")", ":", "\n", "    ", "def", "_prepare", "(", "x", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "np", ".", "copy", "(", "x", "[", "None", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "boxes", "=", "dict", "(", "\n", "class_labels", "=", "_prepare", "(", "current_boxes", "[", "\"class_labels\"", "]", ")", ",", "\n", "translations", "=", "_prepare", "(", "current_boxes", "[", "\"translations\"", "]", ")", ",", "\n", "sizes", "=", "_prepare", "(", "current_boxes", "[", "\"sizes\"", "]", ")", ",", "\n", "angles", "=", "_prepare", "(", "current_boxes", "[", "\"angles\"", "]", ")", ",", "\n", "room_layout", "=", "_prepare", "(", "current_boxes", "[", "\"room_layout\"", "]", ")", "\n", ")", "\n", "boxes", "[", "\"translations\"", "]", "[", "0", ",", "idx", "]", "+=", "torch", ".", "tensor", "(", "offset", ")", ".", "float", "(", ")", "\n", "boxes", "[", "\"angles\"", "]", "[", "0", ",", "idx", "]", "=", "(", "boxes", "[", "\"angles\"", "]", "[", "0", ",", "idx", "]", "+", "1", "+", "rotation", ")", "%", "2", "-", "1", "\n", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.failure_correction.extract_object": [[71, 85], ["sorted", "dict", "list", "torch.tensor", "set", "set", "range"], "function", ["None"], ["", "def", "extract_object", "(", "boxes", ",", "idx", ")", ":", "\n", "    ", "n_objects", "=", "boxes", "[", "\"class_labels\"", "]", ".", "shape", "[", "1", "]", "\n", "indices", "=", "sorted", "(", "list", "(", "set", "(", "range", "(", "n_objects", ")", ")", "-", "set", "(", "[", "idx", "]", ")", ")", ")", "\n", "return", "dict", "(", "\n", "class_labels", "=", "boxes", "[", "\"class_labels\"", "]", "[", ":", ",", "indices", "]", ",", "\n", "translations", "=", "boxes", "[", "\"translations\"", "]", "[", ":", ",", "indices", "]", ",", "\n", "sizes", "=", "boxes", "[", "\"sizes\"", "]", "[", ":", ",", "indices", "]", ",", "\n", "angles", "=", "boxes", "[", "\"angles\"", "]", "[", ":", ",", "indices", "]", ",", "\n", "room_layout", "=", "boxes", "[", "\"room_layout\"", "]", ",", "\n", "class_labels_tr", "=", "boxes", "[", "\"class_labels\"", "]", "[", ":", ",", "idx", ":", "idx", "+", "1", "]", ",", "\n", "translations_tr", "=", "boxes", "[", "\"translations\"", "]", "[", ":", ",", "idx", ":", "idx", "+", "1", "]", ",", "\n", "angles_tr", "=", "boxes", "[", "\"angles\"", "]", "[", ":", ",", "idx", ":", "idx", "+", "1", "]", ",", "\n", "sizes_tr", "=", "boxes", "[", "\"sizes\"", "]", "[", ":", ",", "idx", ":", "idx", "+", "1", "]", ",", "\n", "lengths", "=", "torch", ".", "tensor", "(", "[", "n_objects", "-", "1", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.failure_correction.main": [[88, 314], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.getLogger().setLevel", "torch.cuda.is_available", "print", "training_utils.load_config", "scene_synthesis.datasets.get_dataset_raw_and_encoded", "scene_synthesis.datasets.threed_future_dataset.ThreedFutureDataset.from_pickled_dataset", "print", "scene_synthesis.datasets.get_dataset_raw_and_encoded", "print", "scene_synthesis.networks.build_network", "network.eval", "simple_3dviz.Scene", "numpy.array", "range", "torch.device", "torch.device", "os.path.exists", "os.makedirs", "enumerate", "print", "utils.floor_plan_from_scene", "failure_correction.poll_object", "failure_correction.make_network_input", "utils.render_to_folder", "numpy.argmin", "print", "failure_correction.extract_object", "network.add_object", "os.path.join", "utils.render_scene_from_bbox_params", "logging.getLogger", "scene_synthesis.datasets.filter_function", "config[].get", "len", "scene_synthesis.datasets.filter_function", "config[].get", "len", "numpy.random.choice", "torch.no_grad", "range", "list", "tuple", "tuple", "tuple", "tuple", "str", "len", "failure_correction.extract_object", "probabilities.append", "[].argmax().item", "map", "map", "map", "map", "map", "config[].get", "config[].get", "x.split", "x.split", "x.split", "x.split", "x.split", "network().reconstruction_loss", "[].argmax", "network"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.training_utils.load_config", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_dataset_raw_and_encoded", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset.from_pickled_dataset", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_dataset_raw_and_encoded", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.__init__.build_network", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.floor_plan_from_scene", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.failure_correction.poll_object", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.make_network_input", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render_to_folder", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.failure_correction.extract_object", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.add_object", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render_scene_from_bbox_params", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.failure_correction.extract_object", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.AutoregressiveBBoxOutput.reconstruction_loss"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Perform failure cases detection and correction\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"config_file\"", ",", "\n", "help", "=", "\"Path to the file that contains the experiment configuration\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"output_directory\"", ",", "\n", "help", "=", "\"Path to the output directory\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_pickled_3d_futute_models\"", ",", "\n", "help", "=", "\"Path to the 3D-FUTURE model meshes\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_floor_plan_textures\"", ",", "\n", "help", "=", "\"Path to floor texture images\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--weight_file\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Path to a pretrained model\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_sequences\"", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"The number of sequences to be generated\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--background\"", ",", "\n", "type", "=", "lambda", "x", ":", "list", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"1,1,1,1\"", ",", "\n", "help", "=", "\"Set the background of the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--up_vector\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"0,1,0\"", ",", "\n", "help", "=", "\"Up vector of the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--camera_position\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"-0.10923499,1.9325259,-7.19009\"", ",", "\n", "help", "=", "\"Camer position in the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--camera_target\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"0,0,0\"", ",", "\n", "help", "=", "\"Set the target for the camera\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--window_size\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "int", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"512,512\"", ",", "\n", "help", "=", "\"Define the size of the scene and the window\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_frames\"", ",", "\n", "help", "=", "\"Path to save the visualization frames to\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "360", ",", "\n", "help", "=", "\"Number of frames to be rendered\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--scene_id\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"The scene id to be used for conditioning\"", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "# Disable trimesh's logger", "\n", "logging", ".", "getLogger", "(", "\"trimesh\"", ")", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "print", "(", "\"Running code on\"", ",", "device", ")", "\n", "\n", "# Check if output directory exists and if it doesn't create it", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_directory", ")", "\n", "\n", "", "config", "=", "load_config", "(", "args", ".", "config_file", ")", "\n", "\n", "raw_dataset", ",", "train_dataset", "=", "get_dataset_raw_and_encoded", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "filter_fn", "=", "filter_function", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "split", "=", "config", "[", "\"training\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"train\"", ",", "\"val\"", "]", ")", "\n", ")", ",", "\n", "split", "=", "config", "[", "\"training\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"train\"", ",", "\"val\"", "]", ")", "\n", ")", "\n", "\n", "# Build the dataset of 3D models", "\n", "objects_dataset", "=", "ThreedFutureDataset", ".", "from_pickled_dataset", "(", "\n", "args", ".", "path_to_pickled_3d_futute_models", "\n", ")", "\n", "print", "(", "\"Loaded {} 3D-FUTURE models\"", ".", "format", "(", "len", "(", "objects_dataset", ")", ")", ")", "\n", "\n", "raw_dataset", ",", "dataset", "=", "get_dataset_raw_and_encoded", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "filter_fn", "=", "filter_function", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "split", "=", "config", "[", "\"validation\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"test\"", "]", ")", "\n", ")", ",", "\n", "split", "=", "config", "[", "\"validation\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"test\"", "]", ")", "\n", ")", "\n", "print", "(", "\"Loaded {} scenes with {} object types:\"", ".", "format", "(", "\n", "len", "(", "dataset", ")", ",", "dataset", ".", "n_object_types", ")", "\n", ")", "\n", "\n", "network", ",", "_", ",", "_", "=", "build_network", "(", "\n", "dataset", ".", "feature_size", ",", "dataset", ".", "n_classes", ",", "\n", "config", ",", "args", ".", "weight_file", ",", "device", "=", "device", "\n", ")", "\n", "network", ".", "eval", "(", ")", "\n", "\n", "# Create the scene and the behaviour list for simple-3dviz", "\n", "scene", "=", "Scene", "(", "size", "=", "args", ".", "window_size", ")", "\n", "scene", ".", "up_vector", "=", "args", ".", "up_vector", "\n", "scene", ".", "camera_target", "=", "args", ".", "camera_target", "\n", "scene", ".", "camera_position", "=", "args", ".", "camera_position", "\n", "scene", ".", "light", "=", "args", ".", "camera_position", "\n", "\n", "given_scene_id", "=", "None", "\n", "if", "args", ".", "scene_id", ":", "\n", "        ", "for", "i", ",", "di", "in", "enumerate", "(", "raw_dataset", ")", ":", "\n", "            ", "if", "str", "(", "di", ".", "scene_id", ")", "==", "args", ".", "scene_id", ":", "\n", "                ", "given_scene_id", "=", "i", "\n", "\n", "", "", "", "classes", "=", "np", ".", "array", "(", "dataset", ".", "class_labels", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "n_sequences", ")", ":", "\n", "        ", "scene_idx", "=", "given_scene_id", "or", "np", ".", "random", ".", "choice", "(", "len", "(", "dataset", ")", ")", "\n", "current_scene", "=", "raw_dataset", "[", "scene_idx", "]", "\n", "current_boxes", "=", "dataset", "[", "scene_idx", "]", "\n", "print", "(", "\"{} / {}: Using the {} floor plan of scene {}\"", ".", "format", "(", "\n", "i", ",", "args", ".", "n_sequences", ",", "scene_idx", ",", "current_scene", ".", "scene_id", ")", "\n", ")", "\n", "# Get a floor plan", "\n", "floor_plan", ",", "tr_floor", ",", "room_mask", "=", "floor_plan_from_scene", "(", "\n", "current_scene", ",", "args", ".", "path_to_floor_plan_textures", "\n", ")", "\n", "\n", "# Choose", "\n", "idx", ",", "offset", ",", "rotation", "=", "poll_object", "(", "\n", "dataset", ",", "current_boxes", ",", "current_scene", ".", "scene_id", "\n", ")", "\n", "boxes", "=", "make_network_input", "(", "\n", "current_boxes", ",", "\n", "idx", ",", "\n", "offset", ",", "\n", "rotation", "\n", ")", "\n", "\n", "# Render the failed scene", "\n", "render_to_folder", "(", "\n", "args", ",", "\n", "\"failure_{}_{:03}\"", ".", "format", "(", "current_scene", ".", "scene_id", ",", "i", ")", ",", "\n", "dataset", ",", "\n", "objects_dataset", ",", "\n", "tr_floor", ",", "\n", "floor_plan", ",", "\n", "scene", ",", "\n", "boxes", ",", "\n", "True", "\n", ")", "\n", "\n", "# Compute object probabilities and pick out the worst", "\n", "n_objects", "=", "boxes", "[", "\"class_labels\"", "]", ".", "shape", "[", "1", "]", "\n", "probabilities", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "o", "in", "range", "(", "n_objects", ")", ":", "\n", "                ", "new_boxes", "=", "extract_object", "(", "boxes", ",", "o", ")", "\n", "probabilities", ".", "append", "(", "\n", "-", "network", "(", "new_boxes", ")", ".", "reconstruction_loss", "(", "\n", "new_boxes", ",", "\n", "lengths", "=", "new_boxes", "[", "\"lengths\"", "]", "\n", ")", "\n", ")", "\n", "", "", "worst", "=", "np", ".", "argmin", "(", "probabilities", ")", "\n", "print", "(", "\"The least probable object is\"", ",", "worst", ")", "\n", "\n", "# Re-insert that particular object in the room", "\n", "new_boxes", "=", "extract_object", "(", "boxes", ",", "worst", ")", "\n", "new_boxes", "[", "\"centroids\"", "]", "=", "new_boxes", "[", "\"translations\"", "]", "\n", "bbox_params", "=", "network", ".", "add_object", "(", "\n", "room_mask", "=", "room_mask", ",", "\n", "class_label", "=", "new_boxes", "[", "\"class_labels_tr\"", "]", "[", "0", ",", "0", "]", ".", "argmax", "(", "-", "1", ")", ".", "item", "(", ")", ",", "\n", "boxes", "=", "new_boxes", "\n", ")", "\n", "\n", "\n", "# Specify the path of the rendered image", "\n", "path_to_image", "=", "\"{}/{}_{}_{:03d}\"", ".", "format", "(", "\n", "args", ".", "output_directory", ",", "\n", "current_scene", ".", "scene_id", ",", "\n", "scene_idx", ",", "\n", "i", "\n", ")", "\n", "# Specify the path to the save the generated scene", "\n", "path_to_objs", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_directory", ",", "\n", "\"fixed_{}_{:03d}\"", ".", "format", "(", "current_scene", ".", "scene_id", ",", "i", ")", "\n", ")", "\n", "render_scene_from_bbox_params", "(", "\n", "args", ",", "\n", "bbox_params", ",", "\n", "dataset", ",", "\n", "objects_dataset", ",", "\n", "classes", ",", "\n", "floor_plan", ",", "\n", "tr_floor", ",", "\n", "scene", ",", "\n", "path_to_image", ",", "\n", "path_to_objs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.scene_completion.poll_objects": [[33, 49], ["numpy.array", "object_types[].tolist", "print", "list", "print", "int", "list", "input().split", "set", "set", "enumerate", "range", "current_boxes[].argmax", "input", "len"], "function", ["None"], ["def", "poll_objects", "(", "dataset", ",", "current_boxes", ",", "scene_id", ")", ":", "\n", "    ", "\"\"\"Show the objects in the current_scene and ask which ones to be\n    removed.\"\"\"", "\n", "object_types", "=", "np", ".", "array", "(", "dataset", ".", "object_types", ")", "\n", "labels", "=", "object_types", "[", "current_boxes", "[", "\"class_labels\"", "]", ".", "argmax", "(", "-", "1", ")", "]", ".", "tolist", "(", ")", "\n", "print", "(", "\n", "\"The {} scene you selected contains {}\"", ".", "format", "(", "\n", "scene_id", ",", "list", "(", "enumerate", "(", "labels", ")", ")", "\n", ")", "\n", ")", "\n", "msg", "=", "\"Enter the indices of objects to be removed, separated with commas\\n\"", "\n", "ois", "=", "[", "int", "(", "oi", ")", "for", "oi", "in", "input", "(", "msg", ")", ".", "split", "(", "\",\"", ")", "if", "oi", "!=", "\"\"", "]", "\n", "idxs_kept", "=", "list", "(", "set", "(", "range", "(", "len", "(", "labels", ")", ")", ")", "-", "set", "(", "ois", ")", ")", "\n", "print", "(", "\"You are keeping the following indices {}\"", ".", "format", "(", "idxs_kept", ")", ")", "\n", "\n", "return", "idxs_kept", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.scene_completion.main": [[51, 271], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.getLogger().setLevel", "torch.cuda.is_available", "print", "training_utils.load_config", "scene_synthesis.datasets.get_dataset_raw_and_encoded", "scene_synthesis.datasets.threed_future_dataset.ThreedFutureDataset.from_pickled_dataset", "print", "scene_synthesis.datasets.get_dataset_raw_and_encoded", "print", "scene_synthesis.networks.build_network", "network.eval", "simple_3dviz.Scene", "numpy.array", "range", "torch.device", "torch.device", "os.path.exists", "os.makedirs", "enumerate", "print", "utils.floor_plan_from_scene", "scene_completion.poll_objects", "utils.make_network_input", "utils.render_to_folder", "utils.poll_specific_class", "os.path.join", "utils.render_scene_from_bbox_params", "logging.getLogger", "scene_synthesis.datasets.filter_function", "config[].get", "len", "scene_synthesis.datasets.filter_function", "config[].get", "len", "numpy.random.choice", "print", "network.add_object", "print", "network.complete_scene", "list", "tuple", "tuple", "tuple", "tuple", "str", "len", "map", "map", "map", "map", "map", "config[].get", "config[].get", "x.split", "x.split", "x.split", "x.split", "x.split"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.training_utils.load_config", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_dataset_raw_and_encoded", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset.from_pickled_dataset", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_dataset_raw_and_encoded", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.__init__.build_network", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.floor_plan_from_scene", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.object_suggestions.poll_objects", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.make_network_input", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render_to_folder", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.poll_specific_class", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render_scene_from_bbox_params", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.add_object", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.complete_scene"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Complete a partially complete scene\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"config_file\"", ",", "\n", "help", "=", "\"Path to the file that contains the experiment configuration\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"output_directory\"", ",", "\n", "help", "=", "\"Path to the output directory\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_pickled_3d_futute_models\"", ",", "\n", "help", "=", "\"Path to the 3D-FUTURE model meshes\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_floor_plan_textures\"", ",", "\n", "help", "=", "\"Path to floor texture images\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--weight_file\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Path to a pretrained model\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_sequences\"", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"The number of sequences to be generated\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--background\"", ",", "\n", "type", "=", "lambda", "x", ":", "list", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"1,1,1,1\"", ",", "\n", "help", "=", "\"Set the background of the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--up_vector\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"0,1,0\"", ",", "\n", "help", "=", "\"Up vector of the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--camera_position\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"-0.10923499,1.9325259,-7.19009\"", ",", "\n", "help", "=", "\"Camer position in the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--camera_target\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"0,0,0\"", ",", "\n", "help", "=", "\"Set the target for the camera\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--window_size\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "int", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"512,512\"", ",", "\n", "help", "=", "\"Define the size of the scene and the window\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--with_rotating_camera\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Use a camera rotating around the object\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_frames\"", ",", "\n", "help", "=", "\"Path to save the visualization frames to\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "360", ",", "\n", "help", "=", "\"Number of frames to be rendered\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--without_screen\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Perform no screen rendering\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--scene_id\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"The scene id to be used for conditioning\"", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "# Disable trimesh's logger", "\n", "logging", ".", "getLogger", "(", "\"trimesh\"", ")", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "print", "(", "\"Running code on\"", ",", "device", ")", "\n", "\n", "# Check if output directory exists and if it doesn't create it", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_directory", ")", "\n", "\n", "", "config", "=", "load_config", "(", "args", ".", "config_file", ")", "\n", "\n", "raw_dataset", ",", "train_dataset", "=", "get_dataset_raw_and_encoded", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "filter_fn", "=", "filter_function", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "split", "=", "config", "[", "\"training\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"train\"", ",", "\"val\"", "]", ")", "\n", ")", ",", "\n", "split", "=", "config", "[", "\"training\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"train\"", ",", "\"val\"", "]", ")", "\n", ")", "\n", "\n", "# Build the dataset of 3D models", "\n", "objects_dataset", "=", "ThreedFutureDataset", ".", "from_pickled_dataset", "(", "\n", "args", ".", "path_to_pickled_3d_futute_models", "\n", ")", "\n", "print", "(", "\"Loaded {} 3D-FUTURE models\"", ".", "format", "(", "len", "(", "objects_dataset", ")", ")", ")", "\n", "\n", "raw_dataset", ",", "dataset", "=", "get_dataset_raw_and_encoded", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "filter_fn", "=", "filter_function", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "split", "=", "config", "[", "\"validation\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"test\"", "]", ")", "\n", ")", ",", "\n", "split", "=", "config", "[", "\"validation\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"test\"", "]", ")", "\n", ")", "\n", "print", "(", "\"Loaded {} scenes with {} object types:\"", ".", "format", "(", "\n", "len", "(", "dataset", ")", ",", "dataset", ".", "n_object_types", ")", "\n", ")", "\n", "\n", "network", ",", "_", ",", "_", "=", "build_network", "(", "\n", "dataset", ".", "feature_size", ",", "dataset", ".", "n_classes", ",", "\n", "config", ",", "args", ".", "weight_file", ",", "device", "=", "device", "\n", ")", "\n", "network", ".", "eval", "(", ")", "\n", "\n", "# Create the scene and the behaviour list for simple-3dviz", "\n", "scene", "=", "Scene", "(", "size", "=", "args", ".", "window_size", ")", "\n", "scene", ".", "up_vector", "=", "args", ".", "up_vector", "\n", "scene", ".", "camera_target", "=", "args", ".", "camera_target", "\n", "scene", ".", "camera_position", "=", "args", ".", "camera_position", "\n", "scene", ".", "light", "=", "args", ".", "camera_position", "\n", "\n", "given_scene_id", "=", "None", "\n", "if", "args", ".", "scene_id", ":", "\n", "        ", "for", "i", ",", "di", "in", "enumerate", "(", "raw_dataset", ")", ":", "\n", "            ", "if", "str", "(", "di", ".", "scene_id", ")", "==", "args", ".", "scene_id", ":", "\n", "                ", "given_scene_id", "=", "i", "\n", "\n", "", "", "", "classes", "=", "np", ".", "array", "(", "dataset", ".", "class_labels", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "n_sequences", ")", ":", "\n", "        ", "scene_idx", "=", "given_scene_id", "or", "np", ".", "random", ".", "choice", "(", "len", "(", "dataset", ")", ")", "\n", "current_scene", "=", "raw_dataset", "[", "scene_idx", "]", "\n", "current_boxes", "=", "dataset", "[", "scene_idx", "]", "\n", "print", "(", "\"{} / {}: Using the {} floor plan of scene {}\"", ".", "format", "(", "\n", "i", ",", "args", ".", "n_sequences", ",", "scene_idx", ",", "current_scene", ".", "scene_id", ")", "\n", ")", "\n", "# Get a floor plan", "\n", "floor_plan", ",", "tr_floor", ",", "room_mask", "=", "floor_plan_from_scene", "(", "\n", "current_scene", ",", "args", ".", "path_to_floor_plan_textures", "\n", ")", "\n", "\n", "object_indices", "=", "poll_objects", "(", "\n", "dataset", ",", "current_boxes", ",", "current_scene", ".", "scene_id", "\n", ")", "\n", "boxes", "=", "make_network_input", "(", "current_boxes", ",", "object_indices", ")", "\n", "\n", "# Render the failed scene", "\n", "render_to_folder", "(", "\n", "args", ",", "\n", "\"partial_{}_{:03}\"", ".", "format", "(", "current_scene", ".", "scene_id", ",", "i", ")", ",", "\n", "dataset", ",", "\n", "objects_dataset", ",", "\n", "tr_floor", ",", "\n", "floor_plan", ",", "\n", "scene", ",", "\n", "boxes", ",", "\n", "True", "\n", ")", "\n", "\n", "query_class_label", "=", "poll_specific_class", "(", "dataset", ")", "\n", "\n", "if", "query_class_label", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Adding a single object\"", ")", "\n", "bbox_params", "=", "network", ".", "add_object", "(", "\n", "room_mask", "=", "room_mask", ",", "\n", "class_label", "=", "query_class_label", ",", "\n", "boxes", "=", "boxes", "\n", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Doing scene completion\"", ")", "\n", "bbox_params", "=", "network", ".", "complete_scene", "(", "\n", "boxes", "=", "boxes", ",", "room_mask", "=", "room_mask", "\n", ")", "\n", "\n", "# Specify the path of the rendered image", "\n", "", "path_to_image", "=", "\"{}/{}_{}_{:03d}\"", ".", "format", "(", "\n", "args", ".", "output_directory", ",", "\n", "current_scene", ".", "scene_id", ",", "\n", "scene_idx", ",", "\n", "i", "\n", ")", "\n", "# Specify the path to the save the generated scene", "\n", "path_to_objs", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_directory", ",", "\n", "\"complete_{}_{:03d}\"", ".", "format", "(", "current_scene", ".", "scene_id", ",", "i", ")", "\n", ")", "\n", "render_scene_from_bbox_params", "(", "\n", "args", ",", "\n", "bbox_params", ",", "\n", "dataset", ",", "\n", "objects_dataset", ",", "\n", "classes", ",", "\n", "floor_plan", ",", "\n", "tr_floor", ",", "\n", "scene", ",", "\n", "path_to_image", ",", "\n", "path_to_objs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.object_suggestions.poll_objects": [[38, 59], ["numpy.array", "object_types[].tolist", "print", "list", "print", "int", "float", "list", "input().split", "set", "set", "input().split", "enumerate", "range", "current_boxes[].argmax", "input", "len", "input"], "function", ["None"], ["def", "poll_objects", "(", "dataset", ",", "current_boxes", ",", "scene_id", ")", ":", "\n", "    ", "\"\"\"Show the objects in the current_scene and ask which ones to be\n    removed.\"\"\"", "\n", "object_types", "=", "np", ".", "array", "(", "dataset", ".", "object_types", ")", "\n", "labels", "=", "object_types", "[", "current_boxes", "[", "\"class_labels\"", "]", ".", "argmax", "(", "-", "1", ")", "]", ".", "tolist", "(", ")", "\n", "print", "(", "\n", "\"The {} scene you selected contains {}\"", ".", "format", "(", "\n", "scene_id", ",", "list", "(", "enumerate", "(", "labels", ")", ")", "\n", ")", "\n", ")", "\n", "msg", "=", "\"Enter the indices of objects to be removed, separated with commas\\n\"", "\n", "ois", "=", "[", "int", "(", "oi", ")", "for", "oi", "in", "input", "(", "msg", ")", ".", "split", "(", "\",\"", ")", "if", "oi", "!=", "\"\"", "]", "\n", "idxs_kept", "=", "list", "(", "set", "(", "range", "(", "len", "(", "labels", ")", ")", ")", "-", "set", "(", "ois", ")", ")", "\n", "print", "(", "\"You are keeping the following indices {}\"", ".", "format", "(", "idxs_kept", ")", ")", "\n", "\n", "bbox_bounds", "=", "[", "\n", "float", "(", "ti", ")", "\n", "for", "ti", "in", "input", "(", "\"Enter bbox dims to place an object\\n\"", ")", ".", "split", "(", "\",\"", ")", "\n", "]", "\n", "\n", "return", "idxs_kept", ",", "bbox_bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.object_suggestions.render_to_folder": [[61, 120], ["dataset.post_process", "torch.cat().cpu", "scene_synthesis.utils.get_textured_objects", "object_suggestions.post_process_box", "os.path.join", "utils.export_scene", "os.path.join", "simple_3dviz.utils.render", "torch.cat", "torch.cat.numpy", "numpy.array", "os.path.exists", "os.mkdir", "simple_3dviz.behaviours.misc.LightToCamera", "simple_3dviz.behaviours.io.SaveFrames", "torch.cat", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.post_process", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.utils.get_textured_objects", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.object_suggestions.post_process_box", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.export_scene", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render"], ["", "def", "render_to_folder", "(", "\n", "args", ",", "\n", "folder", ",", "\n", "dataset", ",", "\n", "objects_dataset", ",", "\n", "tr_floor", ",", "\n", "floor_plan", ",", "\n", "scene", ",", "\n", "bbox_params", ",", "\n", "bbox_bounds", ",", "\n", "add_start_end", "=", "False", ",", "\n", ")", ":", "\n", "    ", "boxes", "=", "dataset", ".", "post_process", "(", "bbox_params", ")", "\n", "bbox_params_t", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "boxes", "[", "\"class_labels\"", "]", ",", "\n", "boxes", "[", "\"translations\"", "]", ",", "\n", "boxes", "[", "\"sizes\"", "]", ",", "\n", "boxes", "[", "\"angles\"", "]", "\n", "]", ",", "\n", "dim", "=", "-", "1", "\n", ")", ".", "cpu", "(", ")", "\n", "\n", "if", "add_start_end", ":", "\n", "        ", "bbox_params_t", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "zeros", "(", "1", ",", "1", ",", "bbox_params_t", ".", "shape", "[", "2", "]", ")", ",", "\n", "bbox_params_t", ",", "\n", "torch", ".", "zeros", "(", "1", ",", "1", ",", "bbox_params_t", ".", "shape", "[", "2", "]", ")", ",", "\n", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "renderables", ",", "trimesh_meshes", "=", "get_textured_objects", "(", "\n", "bbox_params_t", ".", "numpy", "(", ")", ",", "objects_dataset", ",", "np", ".", "array", "(", "dataset", ".", "class_labels", ")", "\n", ")", "\n", "\n", "box_renderable", ",", "box_trimesh", "=", "post_process_box", "(", "dataset", ",", "bbox_bounds", ")", "\n", "\n", "path_to_objs", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_directory", ",", "folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_objs", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path_to_objs", ")", "\n", "", "export_scene", "(", "path_to_objs", ",", "tr_floor", "+", "[", "box_trimesh", "]", "+", "trimesh_meshes", ")", "\n", "\n", "path_to_image", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_directory", ",", "\n", "folder", "+", "\"_render.png\"", "\n", ")", "\n", "behaviours", "=", "[", "\n", "LightToCamera", "(", ")", ",", "\n", "SaveFrames", "(", "path_to_image", ",", "1", ")", "\n", "]", "\n", "render", "(", "\n", "renderables", "+", "floor_plan", "+", "[", "box_renderable", "]", ",", "\n", "behaviours", "=", "behaviours", ",", "\n", "size", "=", "args", ".", "window_size", ",", "\n", "camera_position", "=", "args", ".", "camera_position", ",", "\n", "camera_target", "=", "args", ".", "camera_target", ",", "\n", "up_vector", "=", "args", ".", "up_vector", ",", "\n", "background", "=", "args", ".", "background", ",", "\n", "n_frames", "=", "args", ".", "n_frames", ",", "\n", "scene", "=", "scene", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.object_suggestions.post_process_box": [[123, 146], ["dict", "dataset.post_process", "[].numpy", "[].numpy", "simple_3dviz.Mesh.from_boxes", "trimesh.creation.box", "trimesh.creation.box.apply_translation", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.post_process"], ["", "def", "post_process_box", "(", "dataset", ",", "bbox_bounds", ")", ":", "\n", "    ", "boxes", "=", "dict", "(", "\n", "class_labels", "=", "torch", ".", "zeros", "(", "1", ",", "2", ",", "dataset", ".", "n_classes", ")", ",", "\n", "sizes", "=", "torch", ".", "zeros", "(", "1", ",", "2", ",", "3", ")", ",", "\n", "angles", "=", "torch", ".", "zeros", "(", "1", ",", "2", ",", "1", ")", ",", "\n", "translations", "=", "torch", ".", "tensor", "(", "[", "\n", "[", "bbox_bounds", "[", "0", "]", ",", "bbox_bounds", "[", "2", "]", ",", "bbox_bounds", "[", "4", "]", "]", ",", "\n", "[", "bbox_bounds", "[", "1", "]", ",", "bbox_bounds", "[", "3", "]", ",", "bbox_bounds", "[", "5", "]", "]", "\n", "]", ")", "[", "None", "]", "\n", ")", "\n", "boxes", "=", "dataset", ".", "post_process", "(", "boxes", ")", "\n", "\n", "box_min", "=", "boxes", "[", "\"translations\"", "]", "[", "0", ",", "0", "]", ".", "numpy", "(", ")", "\n", "box_max", "=", "boxes", "[", "\"translations\"", "]", "[", "0", ",", "1", "]", ".", "numpy", "(", ")", "\n", "centroid", "=", "(", "box_max", "+", "box_min", ")", "/", "2", "\n", "radii", "=", "(", "box_max", "-", "box_min", ")", "/", "2", "\n", "\n", "box_renderable", "=", "Mesh", ".", "from_boxes", "(", "centroid", "[", "None", "]", ",", "radii", "[", "None", "]", ",", "(", "1.0", ",", "0", ",", "0", ")", ")", "\n", "box_trimesh", "=", "trimesh", ".", "creation", ".", "box", "(", "extents", "=", "2", "*", "radii", ")", "\n", "box_trimesh", ".", "apply_translation", "(", "centroid", ")", "\n", "box_trimesh", ".", "visual", ".", "face_colors", "=", "[", "1.0", ",", "0", ",", "0", ",", "1.0", "]", "\n", "\n", "return", "box_renderable", ",", "box_trimesh", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.object_suggestions.sample_in_bbox": [[148, 191], ["class_probs.numpy().ravel.numpy().ravel", "numpy.random.choice", "range", "RuntimeError", "numpy.random.choice", "numpy.random.rand", "numpy.clip", "len", "object_suggestions.sample_in_bbox.in_bbox"], "function", ["None"], ["", "def", "sample_in_bbox", "(", "class_probs", ",", "translation_probs", ",", "bbox", ",", "trials", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Do rejection sampling to sample the class and translation from the given\n    probabilities.\"\"\"", "\n", "def", "in_bbox", "(", "bbox", ",", "x", ",", "y", ",", "z", ")", ":", "\n", "        ", "return", "(", "\n", "bbox", "[", "0", "]", "<=", "x", "<=", "bbox", "[", "1", "]", "and", "\n", "bbox", "[", "2", "]", "<=", "y", "<=", "bbox", "[", "3", "]", "and", "\n", "bbox", "[", "4", "]", "<=", "z", "<=", "bbox", "[", "5", "]", "\n", ")", "\n", "\n", "", "def", "sample_dmll", "(", "probs", ",", "mu", ",", "s", ")", ":", "\n", "        ", "i", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "probs", ")", ",", "p", "=", "probs", ")", "\n", "u", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "return", "np", ".", "clip", "(", "\n", "mu", "[", "i", "]", "+", "s", "[", "i", "]", "*", "(", "np", ".", "log", "(", "u", ")", "-", "np", ".", "log", "(", "1", "-", "u", ")", ")", ",", "\n", "-", "1", ",", "\n", "1", "\n", ")", "\n", "\n", "# Prepare the probs for sampling (casting to numpy basically)", "\n", "", "class_probs", "=", "class_probs", ".", "numpy", "(", ")", ".", "ravel", "(", ")", "\n", "translation_probs", "=", "[", "\n", "[", "\n", "(", "p", ".", "numpy", "(", ")", ".", "ravel", "(", ")", ",", "mu", ".", "numpy", "(", ")", ".", "ravel", "(", ")", ",", "s", ".", "numpy", "(", ")", ".", "ravel", "(", ")", ")", "\n", "for", "(", "p", ",", "mu", ",", "s", ")", "in", "lc", "\n", "]", "for", "lc", "in", "translation_probs", "\n", "]", "\n", "\n", "# How many trials to do before giving up", "\n", "N", "=", "trials", "\n", "\n", "# Sample the class labels", "\n", "classes", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "class_probs", ")", ",", "N", ",", "p", "=", "class_probs", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "if", "classes", "[", "i", "]", ">=", "len", "(", "translation_probs", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "c", "=", "classes", "[", "i", "]", "\n", "x", ",", "y", ",", "z", "=", "[", "sample_dmll", "(", "*", "di", ")", "for", "di", "in", "translation_probs", "[", "c", "]", "]", "\n", "if", "in_bbox", "(", "bbox", ",", "x", ",", "y", ",", "z", ")", ":", "\n", "            ", "return", "c", ",", "(", "x", ",", "y", ",", "z", ")", "\n", "\n", "", "", "raise", "RuntimeError", "(", "\"Couldn't sample in the bbox\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.object_suggestions.main": [[193, 427], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.getLogger().setLevel", "torch.cuda.is_available", "print", "training_utils.load_config", "scene_synthesis.datasets.get_dataset_raw_and_encoded", "scene_synthesis.datasets.threed_future_dataset.ThreedFutureDataset.from_pickled_dataset", "print", "scene_synthesis.datasets.get_dataset_raw_and_encoded", "print", "scene_synthesis.networks.build_network", "network.eval", "simple_3dviz.Scene", "numpy.array", "range", "torch.device", "torch.device", "os.path.exists", "os.makedirs", "enumerate", "print", "utils.floor_plan_from_scene", "object_suggestions.poll_objects", "utils.make_network_input", "object_suggestions.render_to_folder", "print", "network.add_object_with_class_and_translation", "os.path.join", "utils.render_scene_from_bbox_params", "logging.getLogger", "scene_synthesis.datasets.filter_function", "config[].get", "len", "scene_synthesis.datasets.filter_function", "config[].get", "len", "numpy.random.choice", "torch.no_grad", "network.distribution_classes", "object_suggestions.sample_in_bbox", "int", "[].float", "list", "tuple", "tuple", "tuple", "tuple", "str", "len", "network.distribution_translations", "map", "map", "map", "map", "map", "config[].get", "config[].get", "range", "x.split", "x.split", "x.split", "x.split", "x.split", "len", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.training_utils.load_config", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_dataset_raw_and_encoded", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset.from_pickled_dataset", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_dataset_raw_and_encoded", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.__init__.build_network", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.floor_plan_from_scene", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.object_suggestions.poll_objects", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.make_network_input", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render_to_folder", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.add_object_with_class_and_translation", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render_scene_from_bbox_params", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.distribution_classes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.object_suggestions.sample_in_bbox", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.distribution_translations"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "(", "\"Suggest a new object to be added based on a user \"", "\n", "\"specified region of acceptable positions\"", ")", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"config_file\"", ",", "\n", "help", "=", "\"Path to the file that contains the experiment configuration\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"output_directory\"", ",", "\n", "help", "=", "\"Path to the output directory\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_pickled_3d_futute_models\"", ",", "\n", "help", "=", "\"Path to the 3D-FUTURE model meshes\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_floor_plan_textures\"", ",", "\n", "help", "=", "\"Path to floor texture images\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--weight_file\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Path to a pretrained model\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_sequences\"", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"The number of sequences to be generated\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--background\"", ",", "\n", "type", "=", "lambda", "x", ":", "list", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"1,1,1,1\"", ",", "\n", "help", "=", "\"Set the background of the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--up_vector\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"0,1,0\"", ",", "\n", "help", "=", "\"Up vector of the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--camera_position\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"-0.10923499,1.9325259,-7.19009\"", ",", "\n", "help", "=", "\"Camer position in the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--camera_target\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"0,0,0\"", ",", "\n", "help", "=", "\"Set the target for the camera\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--window_size\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "int", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"512,512\"", ",", "\n", "help", "=", "\"Define the size of the scene and the window\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--with_rotating_camera\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Use a camera rotating around the object\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_frames\"", ",", "\n", "help", "=", "\"Path to save the visualization frames to\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "360", ",", "\n", "help", "=", "\"Number of frames to be rendered\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--scene_id\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"The scene id to be used for conditioning\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--trials\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100000", ",", "\n", "help", "=", "\"How many trials to do for rejection sampling\"", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "# Disable trimesh's logger", "\n", "logging", ".", "getLogger", "(", "\"trimesh\"", ")", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "print", "(", "\"Running code on\"", ",", "device", ")", "\n", "\n", "# Check if output directory exists and if it doesn't create it", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_directory", ")", "\n", "\n", "", "config", "=", "load_config", "(", "args", ".", "config_file", ")", "\n", "\n", "raw_dataset", ",", "train_dataset", "=", "get_dataset_raw_and_encoded", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "filter_fn", "=", "filter_function", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "split", "=", "config", "[", "\"training\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"train\"", ",", "\"val\"", "]", ")", "\n", ")", ",", "\n", "split", "=", "config", "[", "\"training\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"train\"", ",", "\"val\"", "]", ")", "\n", ")", "\n", "\n", "# Build the dataset of 3D models", "\n", "objects_dataset", "=", "ThreedFutureDataset", ".", "from_pickled_dataset", "(", "\n", "args", ".", "path_to_pickled_3d_futute_models", "\n", ")", "\n", "print", "(", "\"Loaded {} 3D-FUTURE models\"", ".", "format", "(", "len", "(", "objects_dataset", ")", ")", ")", "\n", "\n", "raw_dataset", ",", "dataset", "=", "get_dataset_raw_and_encoded", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "filter_fn", "=", "filter_function", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "split", "=", "config", "[", "\"validation\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"test\"", "]", ")", "\n", ")", ",", "\n", "split", "=", "config", "[", "\"validation\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"test\"", "]", ")", "\n", ")", "\n", "print", "(", "\"Loaded {} scenes with {} object types:\"", ".", "format", "(", "\n", "len", "(", "dataset", ")", ",", "dataset", ".", "n_object_types", ")", "\n", ")", "\n", "\n", "network", ",", "_", ",", "_", "=", "build_network", "(", "\n", "dataset", ".", "feature_size", ",", "dataset", ".", "n_classes", ",", "\n", "config", ",", "args", ".", "weight_file", ",", "device", "=", "device", "\n", ")", "\n", "network", ".", "eval", "(", ")", "\n", "\n", "# Create the scene and the behaviour list for simple-3dviz", "\n", "scene", "=", "Scene", "(", "size", "=", "args", ".", "window_size", ")", "\n", "scene", ".", "up_vector", "=", "args", ".", "up_vector", "\n", "scene", ".", "camera_target", "=", "args", ".", "camera_target", "\n", "scene", ".", "camera_position", "=", "args", ".", "camera_position", "\n", "scene", ".", "light", "=", "args", ".", "camera_position", "\n", "\n", "given_scene_id", "=", "None", "\n", "if", "args", ".", "scene_id", ":", "\n", "        ", "for", "i", ",", "di", "in", "enumerate", "(", "raw_dataset", ")", ":", "\n", "            ", "if", "str", "(", "di", ".", "scene_id", ")", "==", "args", ".", "scene_id", ":", "\n", "                ", "given_scene_id", "=", "i", "\n", "\n", "", "", "", "classes", "=", "np", ".", "array", "(", "dataset", ".", "class_labels", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "n_sequences", ")", ":", "\n", "        ", "scene_idx", "=", "given_scene_id", "or", "np", ".", "random", ".", "choice", "(", "len", "(", "dataset", ")", ")", "\n", "current_scene", "=", "raw_dataset", "[", "scene_idx", "]", "\n", "current_boxes", "=", "dataset", "[", "scene_idx", "]", "\n", "print", "(", "\"{} / {}: Using the {} floor plan of scene {}\"", ".", "format", "(", "\n", "i", ",", "args", ".", "n_sequences", ",", "scene_idx", ",", "current_scene", ".", "scene_id", ")", "\n", ")", "\n", "# Get a floor plan", "\n", "floor_plan", ",", "tr_floor", ",", "room_mask", "=", "floor_plan_from_scene", "(", "\n", "current_scene", ",", "args", ".", "path_to_floor_plan_textures", "\n", ")", "\n", "\n", "object_indices", ",", "bbox_bounds", "=", "poll_objects", "(", "\n", "dataset", ",", "current_boxes", ",", "current_scene", ".", "scene_id", "\n", ")", "\n", "boxes", "=", "make_network_input", "(", "current_boxes", ",", "object_indices", ")", "\n", "\n", "# Render the partial", "\n", "render_to_folder", "(", "\n", "args", ",", "\n", "\"input_{}_{:03}\"", ".", "format", "(", "current_scene", ".", "scene_id", ",", "i", ")", ",", "\n", "dataset", ",", "\n", "objects_dataset", ",", "\n", "tr_floor", ",", "\n", "floor_plan", ",", "\n", "scene", ",", "\n", "boxes", ",", "\n", "bbox_bounds", ",", "\n", "True", ",", "\n", ")", "\n", "\n", "# Given the current context predict the probability of all class labels", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "class_probs", "=", "network", ".", "distribution_classes", "(", "\n", "boxes", "=", "boxes", ",", "room_mask", "=", "room_mask", "\n", ")", "\n", "translation_probs", "=", "[", "\n", "network", ".", "distribution_translations", "(", "boxes", ",", "room_mask", ",", "c", ")", "\n", "for", "c", "in", "range", "(", "len", "(", "dataset", ".", "object_types", ")", ")", "\n", "]", "\n", "", "try", ":", "\n", "            ", "new_class", ",", "(", "tx", ",", "ty", ",", "tz", ")", "=", "sample_in_bbox", "(", "class_probs", ",", "\n", "translation_probs", ",", "\n", "bbox_bounds", ",", "args", ".", "trials", ")", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "continue", "\n", "", "print", "(", "\"Adding {} at location: ({:.4f}, {:.4f}, {:.4f})\"", ".", "format", "(", "\n", "dataset", ".", "object_types", "[", "new_class", "]", ",", "tx", ",", "ty", ",", "tz", "\n", ")", ")", "\n", "\n", "bbox_params", "=", "network", ".", "add_object_with_class_and_translation", "(", "\n", "boxes", ",", "\n", "room_mask", ",", "\n", "int", "(", "new_class", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "tx", ",", "ty", ",", "tz", "]", ")", "[", "None", ",", "None", "]", ".", "float", "(", ")", "\n", ")", "\n", "\n", "# Specify the path of the rendered image", "\n", "path_to_image", "=", "\"{}/{}_{}_{:03d}\"", ".", "format", "(", "\n", "args", ".", "output_directory", ",", "\n", "current_scene", ".", "scene_id", ",", "\n", "scene_idx", ",", "\n", "i", "\n", ")", "\n", "# Specify the path to the save the generated scene", "\n", "path_to_objs", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_directory", ",", "\n", "\"suggestion_{}_{:03d}\"", ".", "format", "(", "current_scene", ".", "scene_id", ",", "i", ")", "\n", ")", "\n", "render_scene_from_bbox_params", "(", "\n", "args", ",", "\n", "bbox_params", ",", "\n", "dataset", ",", "\n", "objects_dataset", ",", "\n", "classes", ",", "\n", "floor_plan", ",", "\n", "tr_floor", ",", "\n", "scene", ",", "\n", "path_to_image", ",", "\n", "path_to_objs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.preprocess_data.main": [[32, 267], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.getLogger().setLevel", "utils.scene_from_args", "scene_synthesis.datasets.threed_front.ThreedFront.from_dataset_directory", "print", "os.path.join", "print", "scene_synthesis.datasets.threed_front.ThreedFront.from_dataset_directory", "print", "print", "scene_synthesis.datasets.threed_front_dataset.dataset_encoding_factory", "tqdm.tqdm", "os.path.exists", "os.makedirs", "open", "set", "open", "set", "open", "json.dump", "zip", "os.path.join", "os.path.exists", "logging.getLogger", "scene_synthesis.datasets.filter_function", "len", "tr_bounds[].tolist", "tr_bounds[].tolist", "si_bounds[].tolist", "si_bounds[].tolist", "an_bounds[].tolist", "an_bounds[].tolist", "scene_synthesis.datasets.filter_function", "len", "enumerate", "utils.DirLock", "os.path.exists", "utils.ensure_parent_directory_exists", "numpy.savez_compressed", "os.path.exists", "utils.floor_plan_from_scene", "utils.get_textured_objects_in_scene", "utils.render", "tuple", "list", "tuple", "tuple", "tuple", "l.strip", "l.strip", "utils.render", "os.path.join", "map", "map", "map", "map", "map", "os.path.join", "x.split", "x.split", "x.split", "x.split", "x.split", "utils.floor_plan_renderable"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.scene_from_args", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.from_dataset_directory", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.from_dataset_directory", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.dataset_encoding_factory", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.ensure_parent_directory_exists", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.floor_plan_from_scene", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.get_textured_objects_in_scene", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.floor_plan_renderable"], ["def", "main", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Prepare the 3D-FRONT scenes to train our model\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"output_directory\"", ",", "\n", "default", "=", "\"/tmp/\"", ",", "\n", "help", "=", "\"Path to output directory\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_3d_front_dataset_directory\"", ",", "\n", "help", "=", "\"Path to the 3D-FRONT dataset\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_3d_future_dataset_directory\"", ",", "\n", "help", "=", "\"Path to the 3D-FUTURE dataset\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_model_info\"", ",", "\n", "help", "=", "\"Path to the 3D-FUTURE model_info.json file\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_floor_plan_textures\"", ",", "\n", "help", "=", "\"Path to floor texture images\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--path_to_invalid_scene_ids\"", ",", "\n", "default", "=", "\"../config/invalid_threed_front_rooms.txt\"", ",", "\n", "help", "=", "\"Path to invalid scenes\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--path_to_invalid_bbox_jids\"", ",", "\n", "default", "=", "\"../config/black_list.txt\"", ",", "\n", "help", "=", "\"Path to objects that ae blacklisted\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--annotation_file\"", ",", "\n", "default", "=", "\"../config/bedroom_threed_front_splits.csv\"", ",", "\n", "help", "=", "\"Path to the train/test splits file\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--room_side\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "3.1", ",", "\n", "help", "=", "\"The size of the room along a side (default:3.1)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dataset_filtering\"", ",", "\n", "default", "=", "\"threed_front_bedroom\"", ",", "\n", "choices", "=", "[", "\n", "\"threed_front_bedroom\"", ",", "\n", "\"threed_front_livingroom\"", ",", "\n", "\"threed_front_diningroom\"", ",", "\n", "\"threed_front_library\"", "\n", "]", ",", "\n", "help", "=", "\"The type of dataset filtering to be used\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--without_lamps\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"If set ignore lamps when rendering the room\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--up_vector\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"0,0,-1\"", ",", "\n", "help", "=", "\"Up vector of the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--background\"", ",", "\n", "type", "=", "lambda", "x", ":", "list", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"0,0,0,1\"", ",", "\n", "help", "=", "\"Set the background of the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--camera_target\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"0,0,0\"", ",", "\n", "help", "=", "\"Set the target for the camera\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--camera_position\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"0,4,0\"", ",", "\n", "help", "=", "\"Camer position in the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--window_size\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "int", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"256,256\"", ",", "\n", "help", "=", "\"Define the size of the scene and the window\"", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "logging", ".", "getLogger", "(", "\"trimesh\"", ")", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "# Check if output directory exists and if it doesn't create it", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_directory", ")", "\n", "\n", "# Create the scene and the behaviour list for simple-3dviz", "\n", "", "scene", "=", "scene_from_args", "(", "args", ")", "\n", "\n", "with", "open", "(", "args", ".", "path_to_invalid_scene_ids", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "invalid_scene_ids", "=", "set", "(", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "path_to_invalid_bbox_jids", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "invalid_bbox_jids", "=", "set", "(", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ")", "\n", "\n", "", "config", "=", "{", "\n", "\"filter_fn\"", ":", "args", ".", "dataset_filtering", ",", "\n", "\"min_n_boxes\"", ":", "-", "1", ",", "\n", "\"max_n_boxes\"", ":", "-", "1", ",", "\n", "\"path_to_invalid_scene_ids\"", ":", "args", ".", "path_to_invalid_scene_ids", ",", "\n", "\"path_to_invalid_bbox_jids\"", ":", "args", ".", "path_to_invalid_bbox_jids", ",", "\n", "\"annotation_file\"", ":", "args", ".", "annotation_file", "\n", "}", "\n", "\n", "# Initially, we only consider the train split to compute the dataset", "\n", "# statistics, e.g the translations, sizes and angles bounds", "\n", "dataset", "=", "ThreedFront", ".", "from_dataset_directory", "(", "\n", "dataset_directory", "=", "args", ".", "path_to_3d_front_dataset_directory", ",", "\n", "path_to_model_info", "=", "args", ".", "path_to_model_info", ",", "\n", "path_to_models", "=", "args", ".", "path_to_3d_future_dataset_directory", ",", "\n", "filter_fn", "=", "filter_function", "(", "config", ",", "[", "\"train\"", ",", "\"val\"", "]", ",", "args", ".", "without_lamps", ")", "\n", ")", "\n", "print", "(", "\"Loading dataset with {} rooms\"", ".", "format", "(", "len", "(", "dataset", ")", ")", ")", "\n", "\n", "# Compute the bounds for the translations, sizes and angles in the dataset.", "\n", "# This will then be used to properly align rooms.", "\n", "tr_bounds", "=", "dataset", ".", "bounds", "[", "\"translations\"", "]", "\n", "si_bounds", "=", "dataset", ".", "bounds", "[", "\"sizes\"", "]", "\n", "an_bounds", "=", "dataset", ".", "bounds", "[", "\"angles\"", "]", "\n", "\n", "dataset_stats", "=", "{", "\n", "\"bounds_translations\"", ":", "tr_bounds", "[", "0", "]", ".", "tolist", "(", ")", "+", "tr_bounds", "[", "1", "]", ".", "tolist", "(", ")", ",", "\n", "\"bounds_sizes\"", ":", "si_bounds", "[", "0", "]", ".", "tolist", "(", ")", "+", "si_bounds", "[", "1", "]", ".", "tolist", "(", ")", ",", "\n", "\"bounds_angles\"", ":", "an_bounds", "[", "0", "]", ".", "tolist", "(", ")", "+", "an_bounds", "[", "1", "]", ".", "tolist", "(", ")", ",", "\n", "\"class_labels\"", ":", "dataset", ".", "class_labels", ",", "\n", "\"object_types\"", ":", "dataset", ".", "object_types", ",", "\n", "\"class_frequencies\"", ":", "dataset", ".", "class_frequencies", ",", "\n", "\"class_order\"", ":", "dataset", ".", "class_order", ",", "\n", "\"count_furniture\"", ":", "dataset", ".", "count_furniture", "\n", "}", "\n", "\n", "path_to_json", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_directory", ",", "\"dataset_stats.txt\"", ")", "\n", "with", "open", "(", "path_to_json", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "dataset_stats", ",", "f", ")", "\n", "", "print", "(", "\n", "\"Saving training statistics for dataset with bounds: {} to {}\"", ".", "format", "(", "\n", "dataset", ".", "bounds", ",", "path_to_json", "\n", ")", "\n", ")", "\n", "\n", "dataset", "=", "ThreedFront", ".", "from_dataset_directory", "(", "\n", "dataset_directory", "=", "args", ".", "path_to_3d_front_dataset_directory", ",", "\n", "path_to_model_info", "=", "args", ".", "path_to_model_info", ",", "\n", "path_to_models", "=", "args", ".", "path_to_3d_future_dataset_directory", ",", "\n", "filter_fn", "=", "filter_function", "(", "\n", "config", ",", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ",", "args", ".", "without_lamps", "\n", ")", "\n", ")", "\n", "print", "(", "dataset", ".", "bounds", ")", "\n", "print", "(", "\"Loading dataset with {} rooms\"", ".", "format", "(", "len", "(", "dataset", ")", ")", ")", "\n", "\n", "encoded_dataset", "=", "dataset_encoding_factory", "(", "\n", "\"basic\"", ",", "dataset", ",", "augmentations", "=", "None", ",", "box_ordering", "=", "None", "\n", ")", "\n", "\n", "for", "(", "i", ",", "es", ")", ",", "ss", "in", "tqdm", "(", "zip", "(", "enumerate", "(", "encoded_dataset", ")", ",", "dataset", ")", ")", ":", "\n", "# Create a separate folder for each room", "\n", "        ", "room_directory", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_directory", ",", "ss", ".", "uid", ")", "\n", "# Check if room_directory exists and if it doesn't create it", "\n", "if", "os", ".", "path", ".", "exists", "(", "room_directory", ")", ":", "\n", "            ", "continue", "\n", "# Make sure we are the only ones creating this file", "\n", "", "with", "DirLock", "(", "room_directory", "+", "\".lock\"", ")", "as", "lock", ":", "\n", "            ", "if", "not", "lock", ".", "is_acquired", ":", "\n", "                ", "continue", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "room_directory", ")", ":", "\n", "                ", "continue", "\n", "", "ensure_parent_directory_exists", "(", "room_directory", ")", "\n", "\n", "uids", "=", "[", "bi", ".", "model_uid", "for", "bi", "in", "ss", ".", "bboxes", "]", "\n", "jids", "=", "[", "bi", ".", "model_jid", "for", "bi", "in", "ss", ".", "bboxes", "]", "\n", "\n", "floor_plan_vertices", ",", "floor_plan_faces", "=", "ss", ".", "floor_plan", "\n", "\n", "# Render and save the room mask as an image", "\n", "room_mask", "=", "render", "(", "\n", "scene", ",", "\n", "[", "floor_plan_renderable", "(", "ss", ")", "]", ",", "\n", "(", "1.0", ",", "1.0", ",", "1.0", ")", ",", "\n", "\"flat\"", ",", "\n", "os", ".", "path", ".", "join", "(", "room_directory", ",", "\"room_mask.png\"", ")", "\n", ")", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "np", ".", "savez_compressed", "(", "\n", "os", ".", "path", ".", "join", "(", "room_directory", ",", "\"boxes\"", ")", ",", "\n", "uids", "=", "uids", ",", "\n", "jids", "=", "jids", ",", "\n", "scene_id", "=", "ss", ".", "scene_id", ",", "\n", "scene_uid", "=", "ss", ".", "uid", ",", "\n", "scene_type", "=", "ss", ".", "scene_type", ",", "\n", "json_path", "=", "ss", ".", "json_path", ",", "\n", "room_layout", "=", "room_mask", ",", "\n", "floor_plan_vertices", "=", "floor_plan_vertices", ",", "\n", "floor_plan_faces", "=", "floor_plan_faces", ",", "\n", "floor_plan_centroid", "=", "ss", ".", "floor_plan_centroid", ",", "\n", "class_labels", "=", "es", "[", "\"class_labels\"", "]", ",", "\n", "translations", "=", "es", "[", "\"translations\"", "]", ",", "\n", "sizes", "=", "es", "[", "\"sizes\"", "]", ",", "\n", "angles", "=", "es", "[", "\"angles\"", "]", "\n", ")", "\n", "\n", "# Render a top-down orthographic projection of the room at a", "\n", "# specific pixel resolutin", "\n", "path_to_image", "=", "\"{}/rendered_scene_{}.png\"", ".", "format", "(", "\n", "room_directory", ",", "args", ".", "window_size", "[", "0", "]", "\n", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path_to_image", ")", ":", "\n", "                ", "continue", "\n", "\n", "# Get a simple_3dviz Mesh of the floor plan to be rendered", "\n", "", "floor_plan", ",", "_", ",", "_", "=", "floor_plan_from_scene", "(", "\n", "ss", ",", "args", ".", "path_to_floor_plan_textures", ",", "without_room_mask", "=", "True", "\n", ")", "\n", "renderables", "=", "get_textured_objects_in_scene", "(", "\n", "ss", ",", "ignore_lamps", "=", "args", ".", "without_lamps", "\n", ")", "\n", "render", "(", "\n", "scene", ",", "\n", "renderables", "+", "floor_plan", ",", "\n", "color", "=", "None", ",", "\n", "mode", "=", "\"shading\"", ",", "\n", "frame_path", "=", "path_to_image", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.compute_fid_scores.ThreedFrontRenderDataset.__init__": [[29, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.compute_fid_scores.ThreedFrontRenderDataset.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.compute_fid_scores.ThreedFrontRenderDataset.__getitem__": [[35, 39], ["PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "image_path", "=", "self", ".", "dataset", "[", "idx", "]", ".", "image_path", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.compute_fid_scores.main": [[41, 106], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "dict", "scene_synthesis.datasets.splits_builder.CSVSplitsBuilder", "compute_fid_scores.ThreedFrontRenderDataset", "print", "enumerate", "len", "print", "range", "print", "print", "scene_synthesis.datasets.threed_front.CachedThreedFront", "os.path.exists", "os.makedirs", "di.save", "os.path.exists", "os.makedirs", "os.path.join", "numpy.random.shuffle", "numpy.random.choice", "enumerate", "cleanfid.fid.compute_fid", "scores.append", "print", "numpy.std", "os.listdir", "oi.endswith", "shutil.copyfile", "sum", "len", "scene_synthesis.datasets.splits_builder.CSVSplitsBuilder.get_splits", "torch.device"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.splits_builder.SplitsBuilder.get_splits", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device"], ["", "", "def", "main", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "(", "\"Compute the FID scores between the real and the \"", "\n", "\"synthetic images\"", ")", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_real_renderings\"", ",", "\n", "help", "=", "\"Path to the folder containing the real renderings\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_synthesized_renderings\"", ",", "\n", "help", "=", "\"Path to the folder containing the synthesized\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_annotations\"", ",", "\n", "help", "=", "\"Path to the folder containing the annotations\"", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "# Create Real datasets", "\n", "config", "=", "dict", "(", "\n", "train_stats", "=", "\"dataset_stats.txt\"", ",", "\n", "room_layout_size", "=", "\"256,256\"", "\n", ")", "\n", "splits_builder", "=", "CSVSplitsBuilder", "(", "args", ".", "path_to_annotations", ")", "\n", "test_real", "=", "ThreedFrontRenderDataset", "(", "CachedThreedFront", "(", "\n", "args", ".", "path_to_real_renderings", ",", "\n", "config", "=", "config", ",", "\n", "scene_ids", "=", "splits_builder", ".", "get_splits", "(", "[", "\"test\"", "]", ")", "\n", ")", ")", "\n", "\n", "print", "(", "\"Generating temporary a folder with test_real images...\"", ")", "\n", "path_to_test_real", "=", "\"/tmp/test_real/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_test_real", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path_to_test_real", ")", "\n", "", "for", "i", ",", "di", "in", "enumerate", "(", "test_real", ")", ":", "\n", "        ", "di", ".", "save", "(", "\"{}/{:05d}.png\"", ".", "format", "(", "path_to_test_real", ",", "i", ")", ")", "\n", "# Number of images to be copied", "\n", "", "N", "=", "len", "(", "test_real", ")", "\n", "\n", "print", "(", "\"Generating temporary a folder with test_fake images...\"", ")", "\n", "path_to_test_fake", "=", "\"/tmp/test_fake/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_test_fake", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path_to_test_fake", ")", "\n", "\n", "", "synthesized_images", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "path_to_synthesized_renderings", ",", "oi", ")", "\n", "for", "oi", "in", "os", ".", "listdir", "(", "args", ".", "path_to_synthesized_renderings", ")", "\n", "if", "oi", ".", "endswith", "(", "\".png\"", ")", "\n", "]", "\n", "\n", "scores", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "synthesized_images", ")", "\n", "synthesized_images_subset", "=", "np", ".", "random", ".", "choice", "(", "synthesized_images", ",", "N", ")", "\n", "for", "i", ",", "fi", "in", "enumerate", "(", "synthesized_images_subset", ")", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "fi", ",", "\"{}/{:05d}.png\"", ".", "format", "(", "path_to_test_fake", ",", "i", ")", ")", "\n", "\n", "# Compute the FID score", "\n", "", "fid_score", "=", "fid", ".", "compute_fid", "(", "path_to_test_real", ",", "path_to_test_fake", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "scores", ".", "append", "(", "fid_score", ")", "\n", "print", "(", "fid_score", ")", "\n", "", "print", "(", "sum", "(", "scores", ")", "/", "len", "(", "scores", ")", ")", "\n", "print", "(", "np", ".", "std", "(", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.pickle_threed_future_dataset.main": [[25, 124], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "scene_synthesis.datasets.threed_front.ThreedFront.from_dataset_directory", "print", "scene_synthesis.datasets.threed_future_dataset.ThreedFutureDataset", "os.path.exists", "os.makedirs", "open", "set", "open", "set", "parser.parse_args.dataset_filtering.split", "open", "pickle.dump", "scene_synthesis.datasets.filter_function", "len", "objects.values", "l.strip", "l.strip"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.from_dataset_directory", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function"], ["def", "main", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Pickle the 3D Future dataset\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"output_directory\"", ",", "\n", "default", "=", "\"/tmp/\"", ",", "\n", "help", "=", "\"Path to output directory\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_3d_front_dataset_directory\"", ",", "\n", "help", "=", "\"Path to the 3D-FRONT dataset\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_3d_future_dataset_directory\"", ",", "\n", "help", "=", "\"Path to the 3D-FUTURE dataset\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_model_info\"", ",", "\n", "help", "=", "\"Path to the 3D-FUTURE model_info.json file\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--path_to_invalid_bbox_jids\"", ",", "\n", "default", "=", "\"../config/black_list.txt\"", ",", "\n", "help", "=", "\"Path to objects that ae blacklisted\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--path_to_invalid_scene_ids\"", ",", "\n", "default", "=", "\"../config/invalid_threed_front_rooms.txt\"", ",", "\n", "help", "=", "\"Path to invalid scenes\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--annotation_file\"", ",", "\n", "default", "=", "\"../config/bedroom_threed_front_splits.csv\"", ",", "\n", "help", "=", "\"Path to the train/test splits file\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dataset_filtering\"", ",", "\n", "default", "=", "\"threed_front_bedroom\"", ",", "\n", "choices", "=", "[", "\n", "\"threed_front_bedroom\"", ",", "\n", "\"threed_front_livingroom\"", ",", "\n", "\"threed_front_diningroom\"", ",", "\n", "\"threed_front_library\"", "\n", "]", ",", "\n", "help", "=", "\"The type of dataset filtering to be used\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--without_lamps\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"If set ignore lamps when rendering the room\"", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "# Check if output directory exists and if it doesn't create it", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_directory", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "path_to_invalid_scene_ids", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "invalid_scene_ids", "=", "set", "(", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "path_to_invalid_bbox_jids", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "invalid_bbox_jids", "=", "set", "(", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ")", "\n", "\n", "", "config", "=", "{", "\n", "\"filter_fn\"", ":", "args", ".", "dataset_filtering", ",", "\n", "\"min_n_boxes\"", ":", "-", "1", ",", "\n", "\"max_n_boxes\"", ":", "-", "1", ",", "\n", "\"path_to_invalid_scene_ids\"", ":", "args", ".", "path_to_invalid_scene_ids", ",", "\n", "\"path_to_invalid_bbox_jids\"", ":", "args", ".", "path_to_invalid_bbox_jids", ",", "\n", "\"annotation_file\"", ":", "args", ".", "annotation_file", "\n", "}", "\n", "\n", "# Initially, we only consider the train split to compute the dataset", "\n", "# statistics, e.g the translations, sizes and angles bounds", "\n", "scenes_dataset", "=", "ThreedFront", ".", "from_dataset_directory", "(", "\n", "dataset_directory", "=", "args", ".", "path_to_3d_front_dataset_directory", ",", "\n", "path_to_model_info", "=", "args", ".", "path_to_model_info", ",", "\n", "path_to_models", "=", "args", ".", "path_to_3d_future_dataset_directory", ",", "\n", "filter_fn", "=", "filter_function", "(", "config", ",", "[", "\"train\"", ",", "\"val\"", "]", ",", "args", ".", "without_lamps", ")", "\n", ")", "\n", "print", "(", "\"Loading dataset with {} rooms\"", ".", "format", "(", "len", "(", "scenes_dataset", ")", ")", ")", "\n", "\n", "# Collect the set of objects in the scenes", "\n", "objects", "=", "{", "}", "\n", "for", "scene", "in", "scenes_dataset", ":", "\n", "        ", "for", "obj", "in", "scene", ".", "bboxes", ":", "\n", "            ", "objects", "[", "obj", ".", "model_jid", "]", "=", "obj", "\n", "", "", "objects", "=", "[", "vi", "for", "vi", "in", "objects", ".", "values", "(", ")", "]", "\n", "\n", "objects_dataset", "=", "ThreedFutureDataset", "(", "objects", ")", "\n", "room_type", "=", "args", ".", "dataset_filtering", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "\n", "output_path", "=", "\"{}/threed_future_model_{}.pkl\"", ".", "format", "(", "\n", "args", ".", "output_directory", ",", "\n", "room_type", "\n", ")", "\n", "with", "open", "(", "output_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "objects_dataset", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.ImageFolderDataset.__init__": [[27, 37], ["sorted", "len", "os.path.join", "os.listdir", "f.endswith"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "directory", ",", "train", "=", "True", ")", ":", "\n", "        ", "images", "=", "sorted", "(", "[", "\n", "os", ".", "path", ".", "join", "(", "directory", ",", "f", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "directory", ")", "\n", "if", "f", ".", "endswith", "(", "\"png\"", ")", "\n", "]", ")", "\n", "N", "=", "len", "(", "images", ")", "//", "2", "\n", "\n", "start", "=", "0", "if", "train", "else", "N", "\n", "self", ".", "images", "=", "images", "[", "start", ":", "start", "+", "N", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.ImageFolderDataset.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.ImageFolderDataset.__getitem__": [[41, 43], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "images", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.ThreedFrontRenderDataset.__init__": [[46, 48], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.ThreedFrontRenderDataset.__len__": [[49, 51], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.ThreedFrontRenderDataset.__getitem__": [[52, 54], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "idx", "]", ".", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.SyntheticVRealDataset.__init__": [[57, 61], ["min", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "real", ",", "synthetic", ")", ":", "\n", "        ", "self", ".", "N", "=", "min", "(", "len", "(", "real", ")", ",", "len", "(", "synthetic", ")", ")", "\n", "self", ".", "real", "=", "real", "\n", "self", ".", "synthetic", "=", "synthetic", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.SyntheticVRealDataset.__len__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "2", "*", "self", ".", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.SyntheticVRealDataset.__getitem__": [[65, 78], ["PIL.Image.open", "numpy.transpose", "numpy.asarray().astype", "numpy.float32", "torch.from_numpy", "torch.tensor", "numpy.asarray"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", "<", "self", ".", "N", ":", "\n", "            ", "image_path", "=", "self", ".", "real", "[", "idx", "]", "\n", "label", "=", "1", "\n", "", "else", ":", "\n", "            ", "image_path", "=", "self", ".", "synthetic", "[", "idx", "-", "self", ".", "N", "]", "\n", "label", "=", "0", "\n", "\n", "", "img", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "np", ".", "float32", "(", "255", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", "[", ":", ",", ":", ",", ":", "3", "]", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "img", ")", ",", "torch", ".", "tensor", "(", "[", "label", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.AlexNet.__init__": [[81, 86], ["super().__init__", "torchvision.models.alexnet", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "models", ".", "alexnet", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "fc", "=", "torch", ".", "nn", ".", "Linear", "(", "9216", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.AlexNet.forward": [[87, 94], ["synthetic_vs_real_classifier.AlexNet.model.features", "synthetic_vs_real_classifier.AlexNet.model.avgpool", "synthetic_vs_real_classifier.AlexNet.fc", "torch.sigmoid", "torch.sigmoid.view", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ".", "view", "(", "len", "(", "x", ")", ",", "-", "1", ")", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.AverageMeter.__init__": [[97, 100], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_value", "=", "0", "\n", "self", ".", "_cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.AverageMeter.__iadd__": [[101, 109], ["torch.is_tensor", "x.sum().item", "x.numel", "x.sum"], "methods", ["None"], ["", "def", "__iadd__", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "            ", "self", ".", "_value", "+=", "x", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "_cnt", "+=", "x", ".", "numel", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_value", "+=", "x", "\n", "self", ".", "_cnt", "+=", "1", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.AverageMeter.value": [[110, 113], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_value", "/", "self", ".", "_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.synthetic_vs_real_classifier.main": [[115, 270], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available", "print", "dict", "scene_synthesis.datasets.splits_builder.CSVSplitsBuilder", "synthetic_vs_real_classifier.ThreedFrontRenderDataset", "synthetic_vs_real_classifier.ThreedFrontRenderDataset", "synthetic_vs_real_classifier.ImageFolderDataset", "synthetic_vs_real_classifier.ImageFolderDataset", "synthetic_vs_real_classifier.SyntheticVRealDataset", "synthetic_vs_real_classifier.SyntheticVRealDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "synthetic_vs_real_classifier.AlexNet", "model.to.to", "torch.optim.Adam", "range", "print", "print", "torch.device", "torch.device", "os.path.exists", "os.makedirs", "scene_synthesis.datasets.threed_front.CachedThreedFront", "scene_synthesis.datasets.threed_front.CachedThreedFront", "model.to.parameters", "range", "scores.append", "numpy.std", "synthetic_vs_real_classifier.AverageMeter", "synthetic_vs_real_classifier.AverageMeter", "enumerate", "print", "sum", "len", "scene_synthesis.datasets.splits_builder.CSVSplitsBuilder.get_splits", "scene_synthesis.datasets.splits_builder.CSVSplitsBuilder.get_splits", "model.to.train", "x.to.to", "y.to.to", "torch.optim.Adam.zero_grad", "model.to.", "torch.nn.functional.binary_cross_entropy", "torch.nn.functional.binary_cross_entropy.backward", "torch.optim.Adam.step", "print", "torch.no_grad", "model.to.eval", "synthetic_vs_real_classifier.AverageMeter", "synthetic_vs_real_classifier.AverageMeter", "enumerate", "print", "x.to.to", "y.to.to", "model.to.", "torch.nn.functional.binary_cross_entropy", "msg_pre.format", "print", "len", "torch.abs", "len", "torch.abs"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.splits_builder.SplitsBuilder.get_splits", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.splits_builder.SplitsBuilder.get_splits"], ["", "", "def", "main", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "(", "\"Train a classifier to discriminate between real \"", "\n", "\"and synthetic rooms\"", ")", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_real_renderings\"", ",", "\n", "help", "=", "\"Path to the folder containing the real renderings\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_synthesized_renderings\"", ",", "\n", "help", "=", "\"Path to the folder containing the synthesized\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_annotations\"", ",", "\n", "help", "=", "\"Path to the folder containing the annotations\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batch_size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "256", ",", "\n", "help", "=", "\"Set the batch size for training and evaluating (default: 256)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_workers\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"Set the PyTorch data loader workers (default: 0)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--epochs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"Train for that many epochs (default: 10)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_directory\"", ",", "\n", "default", "=", "\"/tmp/\"", ",", "\n", "help", "=", "\"Path to the output directory\"", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "print", "(", "\"Running code on\"", ",", "device", ")", "\n", "\n", "# Check if output directory exists and if it doesn't create it", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_directory", ")", "\n", "\n", "# Create Real datasets", "\n", "", "config", "=", "dict", "(", "\n", "train_stats", "=", "\"dataset_stats.txt\"", ",", "\n", "room_layout_size", "=", "\"256,256\"", "\n", ")", "\n", "splits_builder", "=", "CSVSplitsBuilder", "(", "args", ".", "path_to_annotations", ")", "\n", "train_real", "=", "ThreedFrontRenderDataset", "(", "CachedThreedFront", "(", "\n", "args", ".", "path_to_real_renderings", ",", "\n", "config", "=", "config", ",", "\n", "scene_ids", "=", "splits_builder", ".", "get_splits", "(", "[", "\"train\"", ",", "\"val\"", "]", ")", "\n", ")", ")", "\n", "test_real", "=", "ThreedFrontRenderDataset", "(", "CachedThreedFront", "(", "\n", "args", ".", "path_to_real_renderings", ",", "\n", "config", "=", "config", ",", "\n", "scene_ids", "=", "splits_builder", ".", "get_splits", "(", "[", "\"test\"", "]", ")", "\n", ")", ")", "\n", "\n", "# Create the synthetic datasets", "\n", "train_synthetic", "=", "ImageFolderDataset", "(", "\n", "args", ".", "path_to_synthesized_renderings", ",", "\n", "True", "\n", ")", "\n", "test_synthetic", "=", "ImageFolderDataset", "(", "\n", "args", ".", "path_to_synthesized_renderings", ",", "\n", "False", "\n", ")", "\n", "\n", "# Join them in useable datasets", "\n", "train_dataset", "=", "SyntheticVRealDataset", "(", "train_real", ",", "train_synthetic", ")", "\n", "test_dataset", "=", "SyntheticVRealDataset", "(", "test_real", ",", "test_synthetic", ")", "\n", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", "\n", ")", "\n", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", "\n", ")", "\n", "\n", "# Create the model", "\n", "model", "=", "AlexNet", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ")", "\n", "\n", "# Train the model", "\n", "scores", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "for", "e", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "            ", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "acc_meter", "=", "AverageMeter", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "                ", "model", ".", "train", "(", ")", "\n", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "y_hat", "=", "model", "(", "x", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy", "(", "y_hat", ",", "y", ")", "\n", "acc", "=", "(", "torch", ".", "abs", "(", "y", "-", "y_hat", ")", "<", "0.5", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "loss_meter", "+=", "loss", "\n", "acc_meter", "+=", "acc", "\n", "\n", "msg", "=", "\"{: 3d} loss: {:.4f} - acc: {:.4f}\"", ".", "format", "(", "\n", "i", ",", "loss_meter", ".", "value", ",", "acc_meter", ".", "value", "\n", ")", "\n", "print", "(", "msg", "+", "\"\\b\"", "*", "len", "(", "msg", ")", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "print", "(", ")", "\n", "\n", "if", "(", "e", "+", "1", ")", "%", "5", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "model", ".", "eval", "(", ")", "\n", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "acc_meter", "=", "AverageMeter", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "test_dataloader", ")", ":", "\n", "                        ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "y_hat", "=", "model", "(", "x", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy", "(", "\n", "y_hat", ",", "y", "\n", ")", "\n", "acc", "=", "(", "torch", ".", "abs", "(", "y", "-", "y_hat", ")", "<", "0.5", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "loss_meter", "+=", "loss", "\n", "acc_meter", "+=", "acc", "\n", "\n", "msg_pre", "=", "\"{: 3d} val_loss: {:.4f} - val_acc: {:.4f}\"", "\n", "\n", "msg", "=", "msg_pre", ".", "format", "(", "\n", "i", ",", "loss_meter", ".", "value", ",", "acc_meter", ".", "value", "\n", ")", "\n", "print", "(", "msg", "+", "\"\\b\"", "*", "len", "(", "msg", ")", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "print", "(", ")", "\n", "", "", "", "scores", ".", "append", "(", "acc_meter", ".", "value", ")", "\n", "", "print", "(", "sum", "(", "scores", ")", "/", "len", "(", "scores", ")", ")", "\n", "print", "(", "np", ".", "std", "(", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.generate_scenes.main": [[37, 275], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.getLogger().setLevel", "torch.cuda.is_available", "print", "training_utils.load_config", "scene_synthesis.datasets.get_dataset_raw_and_encoded", "scene_synthesis.datasets.threed_future_dataset.ThreedFutureDataset.from_pickled_dataset", "print", "scene_synthesis.datasets.get_dataset_raw_and_encoded", "print", "scene_synthesis.networks.build_network", "network.eval", "simple_3dviz.Scene", "numpy.array", "range", "torch.device", "torch.device", "os.path.exists", "os.makedirs", "enumerate", "print", "utils.floor_plan_from_scene", "network.generate_boxes", "dataset.post_process", "torch.cat().cpu().numpy", "scene_synthesis.utils.get_textured_objects", "logging.getLogger", "scene_synthesis.datasets.filter_function", "config[].get", "len", "scene_synthesis.datasets.filter_function", "config[].get", "len", "numpy.random.choice", "simple_3dviz.utils.render", "simple_3dviz.window.show", "os.path.join", "utils.export_scene", "list", "tuple", "tuple", "tuple", "tuple", "str", "len", "room_mask.to", "torch.cat().cpu", "simple_3dviz.behaviours.misc.LightToCamera", "simple_3dviz.behaviours.io.SaveFrames", "os.path.exists", "os.mkdir", "map", "map", "map", "map", "map", "config[].get", "config[].get", "simple_3dviz.behaviours.movements.CameraTrajectory", "simple_3dviz.behaviours.io.SaveGif", "x.split", "x.split", "x.split", "x.split", "x.split", "torch.cat", "simple_3dviz.behaviours.trajectory.Circle", "simple_3dviz.behaviours.misc.LightToCamera", "simple_3dviz.behaviours.keyboard.SnapshotOnKey", "simple_3dviz.behaviours.keyboard.SortTriangles"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.training_utils.load_config", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_dataset_raw_and_encoded", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset.from_pickled_dataset", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_dataset_raw_and_encoded", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.__init__.build_network", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.floor_plan_from_scene", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.generate_boxes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.post_process", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.utils.get_textured_objects", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.show", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.export_scene"], ["def", "main", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Generate scenes using a previously trained model\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"config_file\"", ",", "\n", "help", "=", "\"Path to the file that contains the experiment configuration\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"output_directory\"", ",", "\n", "default", "=", "\"/tmp/\"", ",", "\n", "help", "=", "\"Path to the output directory\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_pickled_3d_futute_models\"", ",", "\n", "help", "=", "\"Path to the 3D-FUTURE model meshes\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"path_to_floor_plan_textures\"", ",", "\n", "help", "=", "\"Path to floor texture images\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--weight_file\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Path to a pretrained model\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_sequences\"", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"The number of sequences to be generated\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--background\"", ",", "\n", "type", "=", "lambda", "x", ":", "list", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"1,1,1,1\"", ",", "\n", "help", "=", "\"Set the background of the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--up_vector\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"0,1,0\"", ",", "\n", "help", "=", "\"Up vector of the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--camera_position\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"-0.10923499,1.9325259,-7.19009\"", ",", "\n", "help", "=", "\"Camer position in the scene\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--camera_target\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "float", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"0,0,0\"", ",", "\n", "help", "=", "\"Set the target for the camera\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--window_size\"", ",", "\n", "type", "=", "lambda", "x", ":", "tuple", "(", "map", "(", "int", ",", "x", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "default", "=", "\"512,512\"", ",", "\n", "help", "=", "\"Define the size of the scene and the window\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--with_rotating_camera\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Use a camera rotating around the object\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_frames\"", ",", "\n", "help", "=", "\"Path to save the visualization frames to\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_frames\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "360", ",", "\n", "help", "=", "\"Number of frames to be rendered\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--without_screen\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Perform no screen rendering\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--scene_id\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"The scene id to be used for conditioning\"", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "# Disable trimesh's logger", "\n", "logging", ".", "getLogger", "(", "\"trimesh\"", ")", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "print", "(", "\"Running code on\"", ",", "device", ")", "\n", "\n", "# Check if output directory exists and if it doesn't create it", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_directory", ")", "\n", "\n", "", "config", "=", "load_config", "(", "args", ".", "config_file", ")", "\n", "\n", "raw_dataset", ",", "train_dataset", "=", "get_dataset_raw_and_encoded", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "filter_fn", "=", "filter_function", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "split", "=", "config", "[", "\"training\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"train\"", ",", "\"val\"", "]", ")", "\n", ")", ",", "\n", "split", "=", "config", "[", "\"training\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"train\"", ",", "\"val\"", "]", ")", "\n", ")", "\n", "\n", "# Build the dataset of 3D models", "\n", "objects_dataset", "=", "ThreedFutureDataset", ".", "from_pickled_dataset", "(", "\n", "args", ".", "path_to_pickled_3d_futute_models", "\n", ")", "\n", "print", "(", "\"Loaded {} 3D-FUTURE models\"", ".", "format", "(", "len", "(", "objects_dataset", ")", ")", ")", "\n", "\n", "raw_dataset", ",", "dataset", "=", "get_dataset_raw_and_encoded", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "filter_fn", "=", "filter_function", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "split", "=", "config", "[", "\"validation\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"test\"", "]", ")", "\n", ")", ",", "\n", "split", "=", "config", "[", "\"validation\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"test\"", "]", ")", "\n", ")", "\n", "print", "(", "\"Loaded {} scenes with {} object types:\"", ".", "format", "(", "\n", "len", "(", "dataset", ")", ",", "dataset", ".", "n_object_types", ")", "\n", ")", "\n", "\n", "network", ",", "_", ",", "_", "=", "build_network", "(", "\n", "dataset", ".", "feature_size", ",", "dataset", ".", "n_classes", ",", "\n", "config", ",", "args", ".", "weight_file", ",", "device", "=", "device", "\n", ")", "\n", "network", ".", "eval", "(", ")", "\n", "\n", "# Create the scene and the behaviour list for simple-3dviz", "\n", "scene", "=", "Scene", "(", "size", "=", "args", ".", "window_size", ")", "\n", "scene", ".", "up_vector", "=", "args", ".", "up_vector", "\n", "scene", ".", "camera_target", "=", "args", ".", "camera_target", "\n", "scene", ".", "camera_position", "=", "args", ".", "camera_position", "\n", "scene", ".", "light", "=", "args", ".", "camera_position", "\n", "\n", "given_scene_id", "=", "None", "\n", "if", "args", ".", "scene_id", ":", "\n", "        ", "for", "i", ",", "di", "in", "enumerate", "(", "raw_dataset", ")", ":", "\n", "            ", "if", "str", "(", "di", ".", "scene_id", ")", "==", "args", ".", "scene_id", ":", "\n", "                ", "given_scene_id", "=", "i", "\n", "\n", "", "", "", "classes", "=", "np", ".", "array", "(", "dataset", ".", "class_labels", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "n_sequences", ")", ":", "\n", "        ", "scene_idx", "=", "given_scene_id", "or", "np", ".", "random", ".", "choice", "(", "len", "(", "dataset", ")", ")", "\n", "current_scene", "=", "raw_dataset", "[", "scene_idx", "]", "\n", "print", "(", "\"{} / {}: Using the {} floor plan of scene {}\"", ".", "format", "(", "\n", "i", ",", "args", ".", "n_sequences", ",", "scene_idx", ",", "current_scene", ".", "scene_id", ")", "\n", ")", "\n", "# Get a floor plan", "\n", "floor_plan", ",", "tr_floor", ",", "room_mask", "=", "floor_plan_from_scene", "(", "\n", "current_scene", ",", "args", ".", "path_to_floor_plan_textures", "\n", ")", "\n", "\n", "bbox_params", "=", "network", ".", "generate_boxes", "(", "\n", "room_mask", "=", "room_mask", ".", "to", "(", "device", ")", ",", "\n", "device", "=", "device", "\n", ")", "\n", "boxes", "=", "dataset", ".", "post_process", "(", "bbox_params", ")", "\n", "bbox_params_t", "=", "torch", ".", "cat", "(", "[", "\n", "boxes", "[", "\"class_labels\"", "]", ",", "\n", "boxes", "[", "\"translations\"", "]", ",", "\n", "boxes", "[", "\"sizes\"", "]", ",", "\n", "boxes", "[", "\"angles\"", "]", "\n", "]", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "renderables", ",", "trimesh_meshes", "=", "get_textured_objects", "(", "\n", "bbox_params_t", ",", "objects_dataset", ",", "classes", "\n", ")", "\n", "renderables", "+=", "floor_plan", "\n", "trimesh_meshes", "+=", "tr_floor", "\n", "\n", "if", "args", ".", "without_screen", ":", "\n", "# Do the rendering", "\n", "            ", "path_to_image", "=", "\"{}/{}_{}_{:03d}\"", ".", "format", "(", "\n", "args", ".", "output_directory", ",", "\n", "current_scene", ".", "scene_id", ",", "\n", "scene_idx", ",", "\n", "i", "\n", ")", "\n", "behaviours", "=", "[", "\n", "LightToCamera", "(", ")", ",", "\n", "SaveFrames", "(", "path_to_image", "+", "\".png\"", ",", "1", ")", "\n", "]", "\n", "if", "args", ".", "with_rotating_camera", ":", "\n", "                ", "behaviours", "+=", "[", "\n", "CameraTrajectory", "(", "\n", "Circle", "(", "\n", "[", "0", ",", "args", ".", "camera_position", "[", "1", "]", ",", "0", "]", ",", "\n", "args", ".", "camera_position", ",", "\n", "args", ".", "up_vector", "\n", ")", ",", "\n", "speed", "=", "1", "/", "360", "\n", ")", ",", "\n", "SaveGif", "(", "path_to_image", "+", "\".gif\"", ",", "1", ")", "\n", "]", "\n", "\n", "", "render", "(", "\n", "renderables", ",", "\n", "behaviours", "=", "behaviours", ",", "\n", "size", "=", "args", ".", "window_size", ",", "\n", "camera_position", "=", "args", ".", "camera_position", ",", "\n", "camera_target", "=", "args", ".", "camera_target", ",", "\n", "up_vector", "=", "args", ".", "up_vector", ",", "\n", "background", "=", "args", ".", "background", ",", "\n", "n_frames", "=", "args", ".", "n_frames", ",", "\n", "scene", "=", "scene", "\n", ")", "\n", "", "else", ":", "\n", "            ", "show", "(", "\n", "renderables", ",", "\n", "behaviours", "=", "[", "LightToCamera", "(", ")", ",", "SnapshotOnKey", "(", ")", ",", "SortTriangles", "(", ")", "]", ",", "\n", "size", "=", "args", ".", "window_size", ",", "\n", "camera_position", "=", "args", ".", "camera_position", ",", "\n", "camera_target", "=", "args", ".", "camera_target", ",", "\n", "up_vector", "=", "args", ".", "up_vector", ",", "\n", "background", "=", "args", ".", "background", ",", "\n", "title", "=", "\"Generated Scene\"", "\n", ")", "\n", "", "if", "trimesh_meshes", "is", "not", "None", ":", "\n", "# Create a trimesh scene and export it", "\n", "            ", "path_to_objs", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_directory", ",", "\n", "\"{:03d}_scene\"", ".", "format", "(", "i", ")", "\n", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_objs", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "path_to_objs", ")", "\n", "", "export_scene", "(", "path_to_objs", ",", "trimesh_meshes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.training_utils.load_config": [[22, 26], ["open", "yaml.load"], "function", ["None"], ["def", "load_config", "(", "config_file", ")", ":", "\n", "    ", "with", "open", "(", "config_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "Loader", ")", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.training_utils.id_generator": [[28, 30], ["random.choice", "range"], "function", ["None"], ["", "def", "id_generator", "(", "size", "=", "6", ",", "chars", "=", "string", ".", "ascii_uppercase", "+", "string", ".", "digits", ")", ":", "\n", "    ", "return", "''", ".", "join", "(", "random", ".", "choice", "(", "chars", ")", "for", "_", "in", "range", "(", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.training_utils.save_experiment_params": [[32, 60], ["vars", "os.path.dirname", "str", "list", "hasattr", "str", "os.path.realpath", "subprocess.check_output().strip", "params.items", "training_utils.load_config", "params.update", "open", "json.dump", "vars.items", "os.getcwd", "os.chdir", "subprocess.check_output().strip", "os.chdir", "os.path.join", "subprocess.check_output", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.training_utils.load_config"], ["", "def", "save_experiment_params", "(", "args", ",", "experiment_tag", ",", "directory", ")", ":", "\n", "    ", "t", "=", "vars", "(", "args", ")", "\n", "params", "=", "{", "k", ":", "str", "(", "v", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "\n", "\n", "git_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "git_head_hash", "=", "\"foo\"", "\n", "try", ":", "\n", "        ", "git_head_hash", "=", "subprocess", ".", "check_output", "(", "\n", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", "\n", ")", ".", "strip", "(", ")", "\n", "", "except", "subprocess", ".", "CalledProcessError", ":", "\n", "# Keep the current working directory to move back in a bit", "\n", "        ", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "git_dir", ")", "\n", "git_head_hash", "=", "subprocess", ".", "check_output", "(", "\n", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", "\n", ")", ".", "strip", "(", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "", "params", "[", "\"git-commit\"", "]", "=", "str", "(", "git_head_hash", ")", "\n", "params", "[", "\"experiment_tag\"", "]", "=", "experiment_tag", "\n", "for", "k", ",", "v", "in", "list", "(", "params", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "v", "==", "\"\"", ":", "\n", "            ", "params", "[", "k", "]", "=", "None", "\n", "", "", "if", "hasattr", "(", "args", ",", "\"config_file\"", ")", ":", "\n", "        ", "config", "=", "load_config", "(", "args", ".", "config_file", ")", "\n", "params", ".", "update", "(", "config", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"params.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "params", ",", "f", ",", "indent", "=", "4", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.DirLock.__init__": [[29, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dirpath", ")", ":", "\n", "        ", "self", ".", "_dirpath", "=", "dirpath", "\n", "self", ".", "_acquired", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.DirLock.is_acquired": [[33, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_acquired", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_acquired", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.DirLock.acquire": [[37, 45], ["os.mkdir"], "methods", ["None"], ["", "def", "acquire", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_acquired", ":", "\n", "            ", "return", "\n", "", "try", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "_dirpath", ")", "\n", "self", ".", "_acquired", "=", "True", "\n", "", "except", "FileExistsError", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.DirLock.release": [[46, 56], ["os.rmdir"], "methods", ["None"], ["", "", "def", "release", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_acquired", ":", "\n", "            ", "return", "\n", "", "try", ":", "\n", "            ", "os", ".", "rmdir", "(", "self", ".", "_dirpath", ")", "\n", "self", ".", "_acquired", "=", "False", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "self", ".", "_acquired", "=", "False", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.DirLock.__enter__": [[57, 60], ["utils.DirLock.acquire"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.DirLock.acquire"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "acquire", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.DirLock.__exit__": [[61, 63], ["utils.DirLock.release"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.DirLock.release"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "self", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.ensure_parent_directory_exists": [[65, 67], ["os.makedirs"], "function", ["None"], ["", "", "def", "ensure_parent_directory_exists", "(", "filepath", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "filepath", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.floor_plan_renderable": [[69, 75], ["simple_3dviz.Mesh.from_faces"], "function", ["None"], ["", "def", "floor_plan_renderable", "(", "room", ",", "color", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", ":", "\n", "    ", "vertices", ",", "faces", "=", "room", ".", "floor_plan", "\n", "# Center the floor", "\n", "vertices", "-=", "room", ".", "floor_plan_centroid", "\n", "# Return a simple-3dviz renderable", "\n", "return", "Mesh", ".", "from_faces", "(", "vertices", ",", "faces", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.floor_plan_from_scene": [[77, 97], ["utils.get_floor_plan", "torch.from_numpy", "numpy.transpose", "os.path.join", "os.listdir"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.utils.get_floor_plan"], ["", "def", "floor_plan_from_scene", "(", "\n", "scene", ",", "\n", "path_to_floor_plan_textures", ",", "\n", "without_room_mask", "=", "False", "\n", ")", ":", "\n", "    ", "if", "not", "without_room_mask", ":", "\n", "        ", "room_mask", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "transpose", "(", "scene", ".", "room_mask", "[", "None", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "room_mask", "=", "None", "\n", "# Also get a renderable for the floor plan", "\n", "", "floor", ",", "tr_floor", "=", "get_floor_plan", "(", "\n", "scene", ",", "\n", "[", "\n", "os", ".", "path", ".", "join", "(", "path_to_floor_plan_textures", ",", "fi", ")", "\n", "for", "fi", "in", "os", ".", "listdir", "(", "path_to_floor_plan_textures", ")", "\n", "]", "\n", ")", "\n", "return", "[", "floor", "]", ",", "[", "tr_floor", "]", ",", "room_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.get_floor_plan": [[99, 127], ["numpy.copy", "np.copy.min", "numpy.random.choice", "simple_3dviz.renderables.textured_mesh.TexturedMesh.from_faces", "trimesh.Trimesh", "trimesh.visual.TextureVisuals", "numpy.copy", "numpy.copy", "simple_3dviz.renderables.textured_mesh.Material.with_texture_image", "numpy.copy", "trimesh.visual.material.SimpleMaterial", "PIL.Image.open"], "function", ["None"], ["", "def", "get_floor_plan", "(", "scene", ",", "floor_textures", ")", ":", "\n", "    ", "\"\"\"Return the floor plan of the scene as a trimesh mesh and a simple-3dviz\n    TexturedMesh.\"\"\"", "\n", "vertices", ",", "faces", "=", "scene", ".", "floor_plan", "\n", "vertices", "=", "vertices", "-", "scene", ".", "floor_plan_centroid", "\n", "uv", "=", "np", ".", "copy", "(", "vertices", "[", ":", ",", "[", "0", ",", "2", "]", "]", ")", "\n", "uv", "-=", "uv", ".", "min", "(", "axis", "=", "0", ")", "\n", "uv", "/=", "0.3", "# repeat every 30cm", "\n", "texture", "=", "np", ".", "random", ".", "choice", "(", "floor_textures", ")", "\n", "\n", "floor", "=", "TexturedMesh", ".", "from_faces", "(", "\n", "vertices", "=", "vertices", ",", "\n", "uv", "=", "uv", ",", "\n", "faces", "=", "faces", ",", "\n", "material", "=", "Material", ".", "with_texture_image", "(", "texture", ")", "\n", ")", "\n", "\n", "tr_floor", "=", "trimesh", ".", "Trimesh", "(", "\n", "np", ".", "copy", "(", "vertices", ")", ",", "np", ".", "copy", "(", "faces", ")", ",", "process", "=", "False", "\n", ")", "\n", "tr_floor", ".", "visual", "=", "trimesh", ".", "visual", ".", "TextureVisuals", "(", "\n", "uv", "=", "np", ".", "copy", "(", "uv", ")", ",", "\n", "material", "=", "trimesh", ".", "visual", ".", "material", ".", "SimpleMaterial", "(", "\n", "image", "=", "Image", ".", "open", "(", "texture", ")", "\n", ")", "\n", ")", "\n", "\n", "return", "floor", ",", "tr_floor", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.get_textured_objects_in_scene": [[129, 162], ["simple_3dviz.renderables.textured_mesh.TexturedMesh.from_file", "TexturedMesh.from_file.scale", "furniture.centroid", "numpy.zeros", "numpy.cos", "numpy.sin", "numpy.cos", "TexturedMesh.from_file.affine_transform", "TexturedMesh.from_file.affine_transform", "renderables.append", "model_path.endswith", "pdb.set_trace", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ModelInfo.from_file", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.scale", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.centroid"], ["", "def", "get_textured_objects_in_scene", "(", "scene", ",", "ignore_lamps", "=", "False", ")", ":", "\n", "    ", "renderables", "=", "[", "]", "\n", "for", "furniture", "in", "scene", ".", "bboxes", ":", "\n", "        ", "model_path", "=", "furniture", ".", "raw_model_path", "\n", "if", "not", "model_path", ".", "endswith", "(", "\"obj\"", ")", ":", "\n", "            ", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "# Load the furniture and scale it as it is given in the dataset", "\n", "", "raw_mesh", "=", "TexturedMesh", ".", "from_file", "(", "model_path", ")", "\n", "raw_mesh", ".", "scale", "(", "furniture", ".", "scale", ")", "\n", "\n", "# Compute the centroid of the vertices in order to match the", "\n", "# bbox (because the prediction only considers bboxes)", "\n", "bbox", "=", "raw_mesh", ".", "bbox", "\n", "centroid", "=", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "1", "]", ")", "/", "2", "\n", "\n", "# Extract the predicted affine transformation to position the", "\n", "# mesh", "\n", "translation", "=", "furniture", ".", "centroid", "(", "offset", "=", "-", "scene", ".", "centroid", ")", "\n", "theta", "=", "furniture", ".", "z_angle", "\n", "R", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "R", "[", "0", ",", "0", "]", "=", "np", ".", "cos", "(", "theta", ")", "\n", "R", "[", "0", ",", "2", "]", "=", "-", "np", ".", "sin", "(", "theta", ")", "\n", "R", "[", "2", ",", "0", "]", "=", "np", ".", "sin", "(", "theta", ")", "\n", "R", "[", "2", ",", "2", "]", "=", "np", ".", "cos", "(", "theta", ")", "\n", "R", "[", "1", ",", "1", "]", "=", "1.", "\n", "\n", "# Apply the transformations in order to correctly position the mesh", "\n", "raw_mesh", ".", "affine_transform", "(", "t", "=", "-", "centroid", ")", "\n", "raw_mesh", ".", "affine_transform", "(", "R", "=", "R", ",", "t", "=", "translation", ")", "\n", "renderables", ".", "append", "(", "raw_mesh", ")", "\n", "", "return", "renderables", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render": [[164, 184], ["scene.clear", "zip", "scene.render", "numpy.copy", "scene.add", "simple_3dviz.utils.save_frame", "len", "isinstance", "len"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.WandB.clear", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render"], ["", "def", "render", "(", "scene", ",", "renderables", ",", "color", ",", "mode", ",", "frame_path", "=", "None", ")", ":", "\n", "    ", "if", "color", "is", "not", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "color", "[", "0", "]", "[", "0", "]", "\n", "", "except", "TypeError", ":", "\n", "            ", "color", "=", "[", "color", "]", "*", "len", "(", "renderables", ")", "\n", "", "", "else", ":", "\n", "        ", "color", "=", "[", "None", "]", "*", "len", "(", "renderables", ")", "\n", "\n", "", "scene", ".", "clear", "(", ")", "\n", "for", "r", ",", "c", "in", "zip", "(", "renderables", ",", "color", ")", ":", "\n", "        ", "if", "isinstance", "(", "r", ",", "Mesh", ")", "and", "c", "is", "not", "None", ":", "\n", "            ", "r", ".", "mode", "=", "mode", "\n", "r", ".", "colors", "=", "c", "\n", "", "scene", ".", "add", "(", "r", ")", "\n", "", "scene", ".", "render", "(", ")", "\n", "if", "frame_path", "is", "not", "None", ":", "\n", "        ", "save_frame", "(", "frame_path", ",", "scene", ".", "frame", ")", "\n", "\n", "", "return", "np", ".", "copy", "(", "scene", ".", "frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.scene_from_args": [[186, 199], ["simple_3dviz.Scene", "pyrr.Matrix44.orthogonal_projection"], "function", ["None"], ["", "def", "scene_from_args", "(", "args", ")", ":", "\n", "# Create the scene and the behaviour list for simple-3dviz", "\n", "    ", "scene", "=", "Scene", "(", "size", "=", "args", ".", "window_size", ",", "background", "=", "args", ".", "background", ")", "\n", "scene", ".", "up_vector", "=", "args", ".", "up_vector", "\n", "scene", ".", "camera_target", "=", "args", ".", "camera_target", "\n", "scene", ".", "camera_position", "=", "args", ".", "camera_position", "\n", "scene", ".", "light", "=", "args", ".", "camera_position", "\n", "scene", ".", "camera_matrix", "=", "Matrix44", ".", "orthogonal_projection", "(", "\n", "left", "=", "-", "args", ".", "room_side", ",", "right", "=", "args", ".", "room_side", ",", "\n", "bottom", "=", "args", ".", "room_side", ",", "top", "=", "-", "args", ".", "room_side", ",", "\n", "near", "=", "0.1", ",", "far", "=", "6", "\n", ")", "\n", "return", "scene", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.export_scene": [[201, 236], ["enumerate", "trimesh.exchange.obj.export_obj", "next", "os.path.join", "next", "os.path.join", "range", "open", "f.write", "open", "f.write", "os.path.splitext", "open", "f.write", "range", "len", "os.path.join", "obj_out.replace", "tex_out[].replace", "len", "tex_out.keys", "k.endswith", "mtl_names[].encode", "tex_out.keys", "k.endswith"], "function", ["None"], ["", "def", "export_scene", "(", "output_directory", ",", "trimesh_meshes", ",", "names", "=", "None", ")", ":", "\n", "    ", "if", "names", "is", "None", ":", "\n", "        ", "names", "=", "[", "\n", "\"object_{:03d}.obj\"", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "trimesh_meshes", ")", ")", "\n", "]", "\n", "", "mtl_names", "=", "[", "\n", "\"material_{:03d}\"", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "trimesh_meshes", ")", ")", "\n", "]", "\n", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "trimesh_meshes", ")", ":", "\n", "        ", "obj_out", ",", "tex_out", "=", "trimesh", ".", "exchange", ".", "obj", ".", "export_obj", "(", "\n", "m", ",", "\n", "return_texture", "=", "True", "\n", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_directory", ",", "names", "[", "i", "]", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "obj_out", ".", "replace", "(", "\"material0\"", ",", "mtl_names", "[", "i", "]", ")", ")", "\n", "\n", "# No material and texture to rename", "\n", "", "if", "tex_out", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "", "mtl_key", "=", "next", "(", "k", "for", "k", "in", "tex_out", ".", "keys", "(", ")", "if", "k", ".", "endswith", "(", "\".mtl\"", ")", ")", "\n", "path_to_mtl_file", "=", "os", ".", "path", ".", "join", "(", "output_directory", ",", "mtl_names", "[", "i", "]", "+", "\".mtl\"", ")", "\n", "with", "open", "(", "path_to_mtl_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "\n", "tex_out", "[", "mtl_key", "]", ".", "replace", "(", "\n", "b\"material0\"", ",", "mtl_names", "[", "i", "]", ".", "encode", "(", "\"ascii\"", ")", "\n", ")", "\n", ")", "\n", "", "tex_key", "=", "next", "(", "k", "for", "k", "in", "tex_out", ".", "keys", "(", ")", "if", "not", "k", ".", "endswith", "(", "\".mtl\"", ")", ")", "\n", "tex_ext", "=", "os", ".", "path", ".", "splitext", "(", "tex_key", ")", "[", "1", "]", "\n", "path_to_tex_file", "=", "os", ".", "path", ".", "join", "(", "output_directory", ",", "mtl_names", "[", "i", "]", "+", "tex_ext", ")", "\n", "with", "open", "(", "path_to_tex_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "tex_out", "[", "tex_key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.print_predicted_labels": [[238, 243], ["numpy.array", "[].argmax", "object_types[].tolist", "print", "[].argmax.cpu().numpy", "[].argmax.cpu"], "function", ["None"], ["", "", "", "def", "print_predicted_labels", "(", "dataset", ",", "boxes", ")", ":", "\n", "    ", "object_types", "=", "np", ".", "array", "(", "dataset", ".", "object_types", ")", "\n", "box_id", "=", "boxes", "[", "\"class_labels\"", "]", "[", "0", ",", "1", ":", "-", "1", "]", ".", "argmax", "(", "-", "1", ")", "\n", "labels", "=", "object_types", "[", "box_id", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ".", "tolist", "(", ")", "\n", "print", "(", "\"The predicted scene contains {}\"", ".", "format", "(", "labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.poll_specific_class": [[245, 253], ["input", "dataset.object_types.index"], "function", ["None"], ["", "def", "poll_specific_class", "(", "dataset", ")", ":", "\n", "    ", "label", "=", "input", "(", "\n", "\"Select an object class from {}\\n\"", ".", "format", "(", "dataset", ".", "object_types", ")", "\n", ")", "\n", "if", "label", "in", "dataset", ".", "object_types", ":", "\n", "        ", "return", "dataset", ".", "object_types", ".", "index", "(", "label", ")", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.make_network_input": [[255, 264], ["dict", "torch.from_numpy", "x[].astype", "utils.make_network_input._prepare"], "function", ["None"], ["", "", "def", "make_network_input", "(", "current_boxes", ",", "indices", ")", ":", "\n", "    ", "def", "_prepare", "(", "x", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "x", "[", "None", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "return", "dict", "(", "\n", "class_labels", "=", "_prepare", "(", "current_boxes", "[", "\"class_labels\"", "]", "[", "indices", "]", ")", ",", "\n", "translations", "=", "_prepare", "(", "current_boxes", "[", "\"translations\"", "]", "[", "indices", "]", ")", ",", "\n", "sizes", "=", "_prepare", "(", "current_boxes", "[", "\"sizes\"", "]", "[", "indices", "]", ")", ",", "\n", "angles", "=", "_prepare", "(", "current_boxes", "[", "\"angles\"", "]", "[", "indices", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render_to_folder": [[267, 324], ["dataset.post_process", "torch.cat().cpu", "scene_synthesis.utils.get_textured_objects", "os.path.join", "utils.export_scene", "os.path.join", "simple_3dviz.utils.render", "torch.cat", "torch.cat.numpy", "numpy.array", "os.path.exists", "os.mkdir", "simple_3dviz.behaviours.misc.LightToCamera", "simple_3dviz.behaviours.io.SaveFrames", "torch.cat", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.post_process", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.utils.get_textured_objects", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.export_scene", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render"], ["", "def", "render_to_folder", "(", "\n", "args", ",", "\n", "folder", ",", "\n", "dataset", ",", "\n", "objects_dataset", ",", "\n", "tr_floor", ",", "\n", "floor_plan", ",", "\n", "scene", ",", "\n", "bbox_params", ",", "\n", "add_start_end", "=", "False", "\n", ")", ":", "\n", "    ", "boxes", "=", "dataset", ".", "post_process", "(", "bbox_params", ")", "\n", "bbox_params_t", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "boxes", "[", "\"class_labels\"", "]", ",", "\n", "boxes", "[", "\"translations\"", "]", ",", "\n", "boxes", "[", "\"sizes\"", "]", ",", "\n", "boxes", "[", "\"angles\"", "]", "\n", "]", ",", "\n", "dim", "=", "-", "1", "\n", ")", ".", "cpu", "(", ")", "\n", "\n", "if", "add_start_end", ":", "\n", "        ", "bbox_params_t", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "zeros", "(", "1", ",", "1", ",", "bbox_params_t", ".", "shape", "[", "2", "]", ")", ",", "\n", "bbox_params_t", ",", "\n", "torch", ".", "zeros", "(", "1", ",", "1", ",", "bbox_params_t", ".", "shape", "[", "2", "]", ")", ",", "\n", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "renderables", ",", "trimesh_meshes", "=", "get_textured_objects", "(", "\n", "bbox_params_t", ".", "numpy", "(", ")", ",", "objects_dataset", ",", "np", ".", "array", "(", "dataset", ".", "class_labels", ")", "\n", ")", "\n", "trimesh_meshes", "+=", "tr_floor", "\n", "\n", "path_to_objs", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_directory", ",", "folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_objs", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path_to_objs", ")", "\n", "", "export_scene", "(", "path_to_objs", ",", "trimesh_meshes", ")", "\n", "\n", "path_to_image", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_directory", ",", "\n", "folder", "+", "\"_render.png\"", "\n", ")", "\n", "behaviours", "=", "[", "\n", "LightToCamera", "(", ")", ",", "\n", "SaveFrames", "(", "path_to_image", ",", "1", ")", "\n", "]", "\n", "render_simple_3dviz", "(", "\n", "renderables", "+", "floor_plan", ",", "\n", "behaviours", "=", "behaviours", ",", "\n", "size", "=", "args", ".", "window_size", ",", "\n", "camera_position", "=", "args", ".", "camera_position", ",", "\n", "camera_target", "=", "args", ".", "camera_target", ",", "\n", "up_vector", "=", "args", ".", "up_vector", ",", "\n", "background", "=", "args", ".", "background", ",", "\n", "n_frames", "=", "args", ".", "n_frames", ",", "\n", "scene", "=", "scene", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render_scene_from_bbox_params": [[327, 378], ["dataset.post_process", "utils.print_predicted_labels", "torch.cat().cpu().numpy", "scene_synthesis.utils.get_textured_objects", "simple_3dviz.utils.render", "simple_3dviz.behaviours.misc.LightToCamera", "simple_3dviz.behaviours.io.SaveFrames", "utils.export_scene", "torch.cat().cpu", "os.path.exists", "os.mkdir", "torch.cat"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.post_process", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.print_predicted_labels", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.utils.get_textured_objects", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.render", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.utils.export_scene"], ["", "def", "render_scene_from_bbox_params", "(", "\n", "args", ",", "\n", "bbox_params", ",", "\n", "dataset", ",", "\n", "objects_dataset", ",", "\n", "classes", ",", "\n", "floor_plan", ",", "\n", "tr_floor", ",", "\n", "scene", ",", "\n", "path_to_image", ",", "\n", "path_to_objs", "\n", ")", ":", "\n", "    ", "boxes", "=", "dataset", ".", "post_process", "(", "bbox_params", ")", "\n", "print_predicted_labels", "(", "dataset", ",", "boxes", ")", "\n", "bbox_params_t", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "boxes", "[", "\"class_labels\"", "]", ",", "\n", "boxes", "[", "\"translations\"", "]", ",", "\n", "boxes", "[", "\"sizes\"", "]", ",", "\n", "boxes", "[", "\"angles\"", "]", "\n", "]", ",", "\n", "dim", "=", "-", "1", "\n", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "renderables", ",", "trimesh_meshes", "=", "get_textured_objects", "(", "\n", "bbox_params_t", ",", "objects_dataset", ",", "classes", "\n", ")", "\n", "renderables", "+=", "floor_plan", "\n", "trimesh_meshes", "+=", "tr_floor", "\n", "\n", "# Do the rendering", "\n", "behaviours", "=", "[", "\n", "LightToCamera", "(", ")", ",", "\n", "SaveFrames", "(", "path_to_image", "+", "\".png\"", ",", "1", ")", "\n", "]", "\n", "render_simple_3dviz", "(", "\n", "renderables", ",", "\n", "behaviours", "=", "behaviours", ",", "\n", "size", "=", "args", ".", "window_size", ",", "\n", "camera_position", "=", "args", ".", "camera_position", ",", "\n", "camera_target", "=", "args", ".", "camera_target", ",", "\n", "up_vector", "=", "args", ".", "up_vector", ",", "\n", "background", "=", "args", ".", "background", ",", "\n", "n_frames", "=", "args", ".", "n_frames", ",", "\n", "scene", "=", "scene", "\n", ")", "\n", "if", "trimesh_meshes", "is", "not", "None", ":", "\n", "# Create a trimesh scene and export it", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_objs", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "path_to_objs", ")", "\n", "", "export_scene", "(", "path_to_objs", ",", "trimesh_meshes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.train_network.yield_forever": [[27, 31], ["None"], "function", ["None"], ["def", "yield_forever", "(", "iterator", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "x", "in", "iterator", ":", "\n", "            ", "yield", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.train_network.load_checkpoints": [[33, 58], ["max", "os.path.join().format", "os.path.join().format", "print", "model.load_state_dict", "print", "optimizer.load_state_dict", "len", "int", "torch.load", "torch.load", "os.listdir", "f.startswith", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists"], "function", ["None"], ["", "", "", "def", "load_checkpoints", "(", "model", ",", "optimizer", ",", "experiment_directory", ",", "args", ",", "device", ")", ":", "\n", "    ", "model_files", "=", "[", "\n", "f", "for", "f", "in", "os", ".", "listdir", "(", "experiment_directory", ")", "\n", "if", "f", ".", "startswith", "(", "\"model_\"", ")", "\n", "]", "\n", "if", "len", "(", "model_files", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "ids", "=", "[", "int", "(", "f", "[", "6", ":", "]", ")", "for", "f", "in", "model_files", "]", "\n", "max_id", "=", "max", "(", "ids", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "\n", "experiment_directory", ",", "\"model_{:05d}\"", "\n", ")", ".", "format", "(", "max_id", ")", "\n", "opt_path", "=", "os", ".", "path", ".", "join", "(", "\n", "experiment_directory", ",", "\"opt_{:05d}\"", "\n", ")", ".", "format", "(", "max_id", ")", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "model_path", ")", "and", "os", ".", "path", ".", "exists", "(", "opt_path", ")", ")", ":", "\n", "        ", "return", "\n", "\n", "", "print", "(", "\"Loading model checkpoint from {}\"", ".", "format", "(", "model_path", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "device", ")", ")", "\n", "print", "(", "\"Loading optimizer checkpoint from {}\"", ".", "format", "(", "opt_path", ")", ")", "\n", "optimizer", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "opt_path", ",", "map_location", "=", "device", ")", "\n", ")", "\n", "args", ".", "continue_from_epoch", "=", "max_id", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.train_network.save_checkpoints": [[60, 68], ["torch.save", "torch.save", "model.state_dict", "os.path.join().format", "optimizer.state_dict", "os.path.join().format", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoints", "(", "epoch", ",", "model", ",", "optimizer", ",", "experiment_directory", ")", ":", "\n", "    ", "torch", ".", "save", "(", "\n", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "\"model_{:05d}\"", ")", ".", "format", "(", "epoch", ")", "\n", ")", "\n", "torch", ".", "save", "(", "\n", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "\"opt_{:05d}\"", ")", ".", "format", "(", "epoch", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.train_network.main": [[71, 284], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.getLogger().setLevel", "numpy.random.seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "print", "os.path.join", "training_utils.save_experiment_params", "print", "training_utils.load_config", "scene_synthesis.datasets.get_encoded_dataset", "os.path.join", "numpy.savez", "print", "scene_synthesis.datasets.get_encoded_dataset", "torch.utils.data.DataLoader", "print", "print", "torch.utils.data.DataLoader", "print", "print", "scene_synthesis.networks.build_network", "scene_synthesis.networks.optimizer_factory", "train_network.load_checkpoints", "scene_synthesis.stats_logger.StatsLogger.instance().add_output_file", "config[].get", "config[].get", "config[].get", "config[].get", "range", "numpy.random.randint", "torch.cuda.manual_seed_all", "torch.device", "torch.device", "os.path.exists", "os.makedirs", "training_utils.id_generator", "os.path.exists", "os.makedirs", "scene_synthesis.datasets.filter_function", "scene_synthesis.datasets.filter_function", "network.parameters", "scene_synthesis.stats_logger.WandB.instance().init", "open", "network.train", "zip", "scene_synthesis.stats_logger.StatsLogger.instance().clear", "logging.getLogger", "numpy.random.randint", "config[].get", "config[].get", "config[].get", "config[].get", "len", "config[].get", "len", "scene_synthesis.stats_logger.StatsLogger.instance", "os.path.join", "range", "train_network.yield_forever", "sample.items", "train_on_batch", "scene_synthesis.stats_logger.StatsLogger.instance().print_progress", "train_network.save_checkpoints", "print", "network.eval", "enumerate", "scene_synthesis.stats_logger.StatsLogger.instance().clear", "print", "numpy.iinfo", "config[].get", "config[].get", "scene_synthesis.stats_logger.WandB.instance", "config[].get", "v.to", "scene_synthesis.stats_logger.StatsLogger.instance", "sample.items", "validate_on_batch", "scene_synthesis.stats_logger.StatsLogger.instance().print_progress", "numpy.iinfo", "scene_synthesis.stats_logger.StatsLogger.instance", "v.to", "scene_synthesis.stats_logger.StatsLogger.instance", "scene_synthesis.stats_logger.StatsLogger.instance"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.training_utils.save_experiment_params", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.training_utils.load_config", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_encoded_dataset", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_encoded_dataset", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.__init__.build_network", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.__init__.optimizer_factory", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.train_network.load_checkpoints", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.add_output_file", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.training_utils.id_generator", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.WandB.init", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.WandB.clear", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.instance", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.train_network.yield_forever", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.train_on_batch", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.WandB.print_progress", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scripts.train_network.save_checkpoints", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.WandB.clear", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.instance", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.instance", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.validate_on_batch", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.WandB.print_progress", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.instance", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.instance", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.instance"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Train a generative model on bounding boxes\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"config_file\"", ",", "\n", "help", "=", "\"Path to the file that contains the experiment configuration\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"output_directory\"", ",", "\n", "help", "=", "\"Path to the output directory\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--weight_file\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"The path to a previously trained model to continue\"", "\n", "\" the training from\"", ")", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--continue_from_epoch\"", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Continue training from epoch (default=0)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_processes\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"The number of processed spawned by the batch provider\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "27", ",", "\n", "help", "=", "\"Seed for the PRNG\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--experiment_tag\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Tag that refers to the current experiment\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--with_wandb_logger\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Use wandB for logging the training progress\"", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "# Disable trimesh's logger", "\n", "logging", ".", "getLogger", "(", "\"trimesh\"", ")", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "# Set the random seed", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "np", ".", "random", ".", "randint", "(", "np", ".", "iinfo", "(", "np", ".", "int32", ")", ".", "max", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "np", ".", "random", ".", "randint", "(", "np", ".", "iinfo", "(", "np", ".", "int32", ")", ".", "max", ")", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "print", "(", "\"Running code on\"", ",", "device", ")", "\n", "\n", "# Check if output directory exists and if it doesn't create it", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_directory", ")", "\n", "\n", "# Create an experiment directory using the experiment_tag", "\n", "", "if", "args", ".", "experiment_tag", "is", "None", ":", "\n", "        ", "experiment_tag", "=", "id_generator", "(", "9", ")", "\n", "", "else", ":", "\n", "        ", "experiment_tag", "=", "args", ".", "experiment_tag", "\n", "\n", "", "experiment_directory", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_directory", ",", "\n", "experiment_tag", "\n", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "experiment_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "experiment_directory", ")", "\n", "\n", "# Save the parameters of this run to a file", "\n", "", "save_experiment_params", "(", "args", ",", "experiment_tag", ",", "experiment_directory", ")", "\n", "print", "(", "\"Save experiment statistics in {}\"", ".", "format", "(", "experiment_directory", ")", ")", "\n", "\n", "# Parse the config file", "\n", "config", "=", "load_config", "(", "args", ".", "config_file", ")", "\n", "\n", "train_dataset", "=", "get_encoded_dataset", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "filter_function", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "split", "=", "config", "[", "\"training\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"train\"", ",", "\"val\"", "]", ")", "\n", ")", ",", "\n", "path_to_bounds", "=", "None", ",", "\n", "augmentations", "=", "config", "[", "\"data\"", "]", ".", "get", "(", "\"augmentations\"", ",", "None", ")", ",", "\n", "split", "=", "config", "[", "\"training\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"train\"", ",", "\"val\"", "]", ")", "\n", ")", "\n", "# Compute the bounds for this experiment, save them to a file in the", "\n", "# experiment directory and pass them to the validation dataset", "\n", "path_to_bounds", "=", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "\"bounds.npz\"", ")", "\n", "np", ".", "savez", "(", "\n", "path_to_bounds", ",", "\n", "sizes", "=", "train_dataset", ".", "bounds", "[", "\"sizes\"", "]", ",", "\n", "translations", "=", "train_dataset", ".", "bounds", "[", "\"translations\"", "]", ",", "\n", "angles", "=", "train_dataset", ".", "bounds", "[", "\"angles\"", "]", "\n", ")", "\n", "print", "(", "\"Saved the dataset bounds in {}\"", ".", "format", "(", "path_to_bounds", ")", ")", "\n", "\n", "validation_dataset", "=", "get_encoded_dataset", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "filter_function", "(", "\n", "config", "[", "\"data\"", "]", ",", "\n", "split", "=", "config", "[", "\"validation\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"test\"", "]", ")", "\n", ")", ",", "\n", "path_to_bounds", "=", "path_to_bounds", ",", "\n", "augmentations", "=", "None", ",", "\n", "split", "=", "config", "[", "\"validation\"", "]", ".", "get", "(", "\"splits\"", ",", "[", "\"test\"", "]", ")", "\n", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "config", "[", "\"training\"", "]", ".", "get", "(", "\"batch_size\"", ",", "128", ")", ",", "\n", "num_workers", "=", "args", ".", "n_processes", ",", "\n", "collate_fn", "=", "train_dataset", ".", "collate_fn", ",", "\n", "shuffle", "=", "True", "\n", ")", "\n", "print", "(", "\"Loaded {} training scenes with {} object types\"", ".", "format", "(", "\n", "len", "(", "train_dataset", ")", ",", "train_dataset", ".", "n_object_types", ")", "\n", ")", "\n", "print", "(", "\"Training set has {} bounds\"", ".", "format", "(", "train_dataset", ".", "bounds", ")", ")", "\n", "\n", "val_loader", "=", "DataLoader", "(", "\n", "validation_dataset", ",", "\n", "batch_size", "=", "config", "[", "\"validation\"", "]", ".", "get", "(", "\"batch_size\"", ",", "1", ")", ",", "\n", "num_workers", "=", "args", ".", "n_processes", ",", "\n", "collate_fn", "=", "validation_dataset", ".", "collate_fn", ",", "\n", "shuffle", "=", "False", "\n", ")", "\n", "print", "(", "\"Loaded {} validation scenes with {} object types\"", ".", "format", "(", "\n", "len", "(", "validation_dataset", ")", ",", "validation_dataset", ".", "n_object_types", ")", "\n", ")", "\n", "print", "(", "\"Validation set has {} bounds\"", ".", "format", "(", "validation_dataset", ".", "bounds", ")", ")", "\n", "\n", "# Make sure that the train_dataset and the validation_dataset have the same", "\n", "# number of object categories", "\n", "assert", "train_dataset", ".", "object_types", "==", "validation_dataset", ".", "object_types", "\n", "\n", "# Build the network architecture to be used for training", "\n", "network", ",", "train_on_batch", ",", "validate_on_batch", "=", "build_network", "(", "\n", "train_dataset", ".", "feature_size", ",", "train_dataset", ".", "n_classes", ",", "\n", "config", ",", "args", ".", "weight_file", ",", "device", "=", "device", "\n", ")", "\n", "# Build an optimizer object to compute the gradients of the parameters", "\n", "optimizer", "=", "optimizer_factory", "(", "config", "[", "\"training\"", "]", ",", "network", ".", "parameters", "(", ")", ")", "\n", "# Load the checkpoints if they exist in the experiment directory", "\n", "load_checkpoints", "(", "network", ",", "optimizer", ",", "experiment_directory", ",", "args", ",", "device", ")", "\n", "\n", "# Initialize the logger", "\n", "if", "args", ".", "with_wandb_logger", ":", "\n", "        ", "WandB", ".", "instance", "(", ")", ".", "init", "(", "\n", "config", ",", "\n", "model", "=", "network", ",", "\n", "project", "=", "config", "[", "\"logger\"", "]", ".", "get", "(", "\n", "\"project\"", ",", "\"autoregressive_transformer\"", "\n", ")", ",", "\n", "name", "=", "experiment_tag", ",", "\n", "watch", "=", "False", ",", "\n", "log_frequency", "=", "10", "\n", ")", "\n", "\n", "# Log the stats to a file", "\n", "", "StatsLogger", ".", "instance", "(", ")", ".", "add_output_file", "(", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "\"stats.txt\"", ")", ",", "\n", "\"w\"", "\n", ")", ")", "\n", "\n", "epochs", "=", "config", "[", "\"training\"", "]", ".", "get", "(", "\"epochs\"", ",", "150", ")", "\n", "steps_per_epoch", "=", "config", "[", "\"training\"", "]", ".", "get", "(", "\"steps_per_epoch\"", ",", "500", ")", "\n", "save_every", "=", "config", "[", "\"training\"", "]", ".", "get", "(", "\"save_frequency\"", ",", "10", ")", "\n", "val_every", "=", "config", "[", "\"validation\"", "]", ".", "get", "(", "\"frequency\"", ",", "100", ")", "\n", "\n", "# Do the training", "\n", "for", "i", "in", "range", "(", "args", ".", "continue_from_epoch", ",", "epochs", ")", ":", "\n", "        ", "network", ".", "train", "(", ")", "\n", "for", "b", ",", "sample", "in", "zip", "(", "range", "(", "steps_per_epoch", ")", ",", "yield_forever", "(", "train_loader", ")", ")", ":", "\n", "# Move everything to device", "\n", "            ", "for", "k", ",", "v", "in", "sample", ".", "items", "(", ")", ":", "\n", "                ", "sample", "[", "k", "]", "=", "v", ".", "to", "(", "device", ")", "\n", "", "batch_loss", "=", "train_on_batch", "(", "network", ",", "optimizer", ",", "sample", ",", "config", ")", "\n", "StatsLogger", ".", "instance", "(", ")", ".", "print_progress", "(", "i", "+", "1", ",", "b", "+", "1", ",", "batch_loss", ")", "\n", "\n", "", "if", "(", "i", "%", "save_every", ")", "==", "0", ":", "\n", "            ", "save_checkpoints", "(", "\n", "i", ",", "\n", "network", ",", "\n", "optimizer", ",", "\n", "experiment_directory", ",", "\n", ")", "\n", "", "StatsLogger", ".", "instance", "(", ")", ".", "clear", "(", ")", "\n", "\n", "if", "i", "%", "val_every", "==", "0", "and", "i", ">", "0", ":", "\n", "            ", "print", "(", "\"====> Validation Epoch ====>\"", ")", "\n", "network", ".", "eval", "(", ")", "\n", "for", "b", ",", "sample", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "# Move everything to device", "\n", "                ", "for", "k", ",", "v", "in", "sample", ".", "items", "(", ")", ":", "\n", "                    ", "sample", "[", "k", "]", "=", "v", ".", "to", "(", "device", ")", "\n", "", "batch_loss", "=", "validate_on_batch", "(", "network", ",", "sample", ",", "config", ")", "\n", "StatsLogger", ".", "instance", "(", ")", ".", "print_progress", "(", "-", "1", ",", "b", "+", "1", ",", "batch_loss", ")", "\n", "", "StatsLogger", ".", "instance", "(", ")", ".", "clear", "(", ")", "\n", "print", "(", "\"====> Validation Epoch ====>\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.AverageAggregator.__init__": [[19, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_value", "=", "0", "\n", "self", ".", "_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.AverageAggregator.value": [[27, 31], ["None"], "methods", ["None"], ["", "@", "value", ".", "setter", "\n", "def", "value", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "_value", "+=", "val", "\n", "self", ".", "_count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.__init__": [[36, 43], ["dict", "stats_logger.AverageAggregator", "RuntimeError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "if", "StatsLogger", ".", "__INSTANCE", "is", "not", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"StatsLogger should not be directly created\"", ")", "\n", "\n", "", "self", ".", "_values", "=", "dict", "(", ")", "\n", "self", ".", "_loss", "=", "AverageAggregator", "(", ")", "\n", "self", ".", "_output_files", "=", "[", "sys", ".", "stdout", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.add_output_file": [[44, 46], ["stats_logger.StatsLogger._output_files.append"], "methods", ["None"], ["", "def", "add_output_file", "(", "self", ",", "f", ")", ":", "\n", "        ", "self", ".", "_output_files", ".", "append", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.__getitem__": [[47, 51], ["stats_logger.AverageAggregator"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "not", "in", "self", ".", "_values", ":", "\n", "            ", "self", ".", "_values", "[", "key", "]", "=", "AverageAggregator", "(", ")", "\n", "", "return", "self", ".", "_values", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.clear": [[52, 58], ["stats_logger.StatsLogger._values.clear", "stats_logger.AverageAggregator", "f.isatty", "print"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.WandB.clear"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "_values", ".", "clear", "(", ")", "\n", "self", ".", "_loss", "=", "AverageAggregator", "(", ")", "\n", "for", "f", "in", "self", ".", "_output_files", ":", "\n", "            ", "if", "f", ".", "isatty", "(", ")", ":", "\n", "                ", "print", "(", "file", "=", "f", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.print_progress": [[59, 70], ["fmt.format", "stats_logger.StatsLogger._values.items", "f.isatty", "precision.format", "print", "print", "len"], "methods", ["None"], ["", "", "", "def", "print_progress", "(", "self", ",", "epoch", ",", "batch", ",", "loss", ",", "precision", "=", "\"{:.5f}\"", ")", ":", "\n", "        ", "self", ".", "_loss", ".", "value", "=", "loss", "\n", "fmt", "=", "\"epoch: {} - batch: {} - loss: \"", "+", "precision", "\n", "msg", "=", "fmt", ".", "format", "(", "epoch", ",", "batch", ",", "self", ".", "_loss", ".", "value", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "_values", ".", "items", "(", ")", ":", "\n", "            ", "msg", "+=", "\" - \"", "+", "k", "+", "\": \"", "+", "precision", ".", "format", "(", "v", ".", "value", ")", "\n", "", "for", "f", "in", "self", ".", "_output_files", ":", "\n", "            ", "if", "f", ".", "isatty", "(", ")", ":", "\n", "                ", "print", "(", "msg", "+", "\"\\b\"", "*", "len", "(", "msg", ")", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ",", "file", "=", "f", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "msg", ",", "flush", "=", "True", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.instance": [[71, 76], ["cls"], "methods", ["None"], ["", "", "", "@", "classmethod", "\n", "def", "instance", "(", "cls", ")", ":", "\n", "        ", "if", "StatsLogger", ".", "__INSTANCE", "is", "None", ":", "\n", "            ", "StatsLogger", ".", "__INSTANCE", "=", "cls", "(", ")", "\n", "", "return", "StatsLogger", ".", "__INSTANCE", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.WandB.init": [[90, 117], ["wandb.login", "wandb.init", "wandb.watch", "dict", "experiment_arguments.items"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.WandB.init"], ["def", "init", "(", "\n", "self", ",", "\n", "experiment_arguments", ",", "\n", "model", ",", "\n", "project", "=", "\"experiment\"", ",", "\n", "name", "=", "\"experiment_name\"", ",", "\n", "watch", "=", "True", ",", "\n", "log_frequency", "=", "10", "\n", ")", ":", "\n", "        ", "self", ".", "project", "=", "project", "\n", "self", ".", "experiment_name", "=", "name", "\n", "self", ".", "watch", "=", "watch", "\n", "self", ".", "log_frequency", "=", "log_frequency", "\n", "self", ".", "_epoch", "=", "0", "\n", "self", ".", "_validation", "=", "False", "\n", "# Login to wandb", "\n", "wandb", ".", "login", "(", ")", "\n", "\n", "# Init the run", "\n", "wandb", ".", "init", "(", "\n", "project", "=", "(", "self", ".", "project", "or", "None", ")", ",", "\n", "name", "=", "(", "self", ".", "experiment_name", "or", "None", ")", ",", "\n", "config", "=", "dict", "(", "experiment_arguments", ".", "items", "(", ")", ")", "\n", ")", "\n", "\n", "if", "self", ".", "watch", ":", "\n", "            ", "wandb", ".", "watch", "(", "model", ",", "log_freq", "=", "self", ".", "log_frequency", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.WandB.print_progress": [[118, 124], ["stats_logger.StatsLogger.print_progress"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.WandB.print_progress"], ["", "", "def", "print_progress", "(", "self", ",", "epoch", ",", "batch", ",", "loss", ",", "precision", "=", "\"{:.5f}\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "print_progress", "(", "epoch", ",", "batch", ",", "loss", ",", "precision", ")", "\n", "\n", "self", ".", "_validation", "=", "epoch", "<", "0", "\n", "if", "not", "self", ".", "_validation", ":", "\n", "            ", "self", ".", "_epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.WandB.clear": [[125, 137], ["wandb.log", "stats_logger.StatsLogger.clear", "stats_logger.WandB._values.items"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.WandB.clear"], ["", "", "def", "clear", "(", "self", ")", ":", "\n", "# Before clearing everything out send it to wandb", "\n", "        ", "prefix", "=", "\"val_\"", "if", "self", ".", "_validation", "else", "\"\"", "\n", "values", "=", "{", "\n", "prefix", "+", "k", ":", "v", ".", "value", "\n", "for", "k", ",", "v", "in", "self", ".", "_values", ".", "items", "(", ")", "\n", "}", "\n", "values", "[", "prefix", "+", "\"loss\"", "]", "=", "self", ".", "_loss", ".", "value", "\n", "values", "[", "prefix", "+", "\"epoch\"", "]", "=", "self", ".", "_epoch", "\n", "wandb", ".", "log", "(", "values", ")", "\n", "\n", "super", "(", ")", ".", "clear", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.utils.get_textured_objects": [[16, 65], ["range", "objects_dataset.get_closest_furniture_to_box", "simple_3dviz.renderables.textured_mesh.TexturedMesh.from_file", "TexturedMesh.from_file.scale", "numpy.zeros", "numpy.cos", "numpy.sin", "numpy.cos", "TexturedMesh.from_file.affine_transform", "TexturedMesh.from_file.affine_transform", "renderables.append", "trimesh.load", "PIL.Image.open", "trimesh_meshes.append", "numpy.sin", "trimesh.load.vertices.dot", "bbox_params_t[].argmax"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset.get_closest_furniture_to_box", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ModelInfo.from_file", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.scale"], ["import", "trimesh", "\n", "\n", "from", "simple_3dviz", "import", "Mesh", ",", "Scene", "\n", "from", "simple_3dviz", ".", "renderables", ".", "textured_mesh", "import", "Material", ",", "TexturedMesh", "\n", "from", "simple_3dviz", ".", "utils", "import", "save_frame", "\n", "from", "simple_3dviz", ".", "behaviours", ".", "misc", "import", "LightToCamera", "\n", "from", "simple_3dviz", ".", "behaviours", ".", "io", "import", "SaveFrames", "\n", "from", "simple_3dviz", ".", "utils", "import", "render", "as", "render_simple_3dviz", "\n", "\n", "from", "scene_synthesis", ".", "utils", "import", "get_textured_objects", "\n", "\n", "\n", "class", "DirLock", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dirpath", ")", ":", "\n", "        ", "self", ".", "_dirpath", "=", "dirpath", "\n", "self", ".", "_acquired", "=", "False", "\n", "\n", "", "@", "property", "\n", "def", "is_acquired", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_acquired", "\n", "\n", "", "def", "acquire", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_acquired", ":", "\n", "            ", "return", "\n", "", "try", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "_dirpath", ")", "\n", "self", ".", "_acquired", "=", "True", "\n", "", "except", "FileExistsError", ":", "\n", "            ", "pass", "\n", "\n", "", "", "def", "release", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_acquired", ":", "\n", "            ", "return", "\n", "", "try", ":", "\n", "            ", "os", ".", "rmdir", "(", "self", ".", "_dirpath", ")", "\n", "self", ".", "_acquired", "=", "False", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "self", ".", "_acquired", "=", "False", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "\n", "", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "acquire", "(", ")", "\n", "return", "self", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "self", ".", "release", "(", ")", "\n", "\n", "\n", "", "", "def", "ensure_parent_directory_exists", "(", "filepath", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.utils.get_floor_plan": [[67, 95], ["numpy.copy", "np.copy.min", "numpy.random.choice", "simple_3dviz.renderables.textured_mesh.TexturedMesh.from_faces", "trimesh.Trimesh", "trimesh.visual.TextureVisuals", "numpy.copy", "numpy.copy", "simple_3dviz.renderables.textured_mesh.Material.with_texture_image", "numpy.copy", "trimesh.visual.material.SimpleMaterial", "PIL.Image.open"], "function", ["None"], ["\n", "\n", "", "def", "floor_plan_renderable", "(", "room", ",", "color", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", ":", "\n", "    ", "vertices", ",", "faces", "=", "room", ".", "floor_plan", "\n", "# Center the floor", "\n", "vertices", "-=", "room", ".", "floor_plan_centroid", "\n", "# Return a simple-3dviz renderable", "\n", "return", "Mesh", ".", "from_faces", "(", "vertices", ",", "faces", ",", "color", ")", "\n", "\n", "\n", "", "def", "floor_plan_from_scene", "(", "\n", "scene", ",", "\n", "path_to_floor_plan_textures", ",", "\n", "without_room_mask", "=", "False", "\n", ")", ":", "\n", "    ", "if", "not", "without_room_mask", ":", "\n", "        ", "room_mask", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "transpose", "(", "scene", ".", "room_mask", "[", "None", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "room_mask", "=", "None", "\n", "# Also get a renderable for the floor plan", "\n", "", "floor", ",", "tr_floor", "=", "get_floor_plan", "(", "\n", "scene", ",", "\n", "[", "\n", "os", ".", "path", ".", "join", "(", "path_to_floor_plan_textures", ",", "fi", ")", "\n", "for", "fi", "in", "os", ".", "listdir", "(", "path_to_floor_plan_textures", ")", "\n", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset.__init__": [[16, 19], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "objects", ")", ":", "\n", "        ", "assert", "len", "(", "objects", ")", ">", "0", "\n", "self", ".", "objects", "=", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset.__len__": [[20, 22], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "objects", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset.__str__": [[23, 26], ["len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Dataset contains {} objects with {} discrete types\"", ".", "format", "(", "\n", "len", "(", "self", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset.__getitem__": [[28, 30], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "objects", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset._filter_objects_by_label": [[31, 33], ["None"], "methods", ["None"], ["", "def", "_filter_objects_by_label", "(", "self", ",", "label", ")", ":", "\n", "        ", "return", "[", "oi", "for", "oi", "in", "self", ".", "objects", "if", "oi", ".", "label", "==", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset.get_closest_furniture_to_box": [[34, 42], ["threed_future_dataset.ThreedFutureDataset._filter_objects_by_label", "enumerate", "numpy.sum", "sorted", "mses.items"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset._filter_objects_by_label"], ["", "def", "get_closest_furniture_to_box", "(", "self", ",", "query_label", ",", "query_size", ")", ":", "\n", "        ", "objects", "=", "self", ".", "_filter_objects_by_label", "(", "query_label", ")", "\n", "\n", "mses", "=", "{", "}", "\n", "for", "i", ",", "oi", "in", "enumerate", "(", "objects", ")", ":", "\n", "            ", "mses", "[", "oi", "]", "=", "np", ".", "sum", "(", "(", "oi", ".", "size", "-", "query_size", ")", "**", "2", ",", "axis", "=", "-", "1", ")", "\n", "", "sorted_mses", "=", "[", "k", "for", "k", ",", "v", "in", "sorted", "(", "mses", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "]", "\n", "return", "sorted_mses", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset.get_closest_furniture_to_2dbox": [[43, 54], ["threed_future_dataset.ThreedFutureDataset._filter_objects_by_label", "enumerate", "sorted", "mses.items"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset._filter_objects_by_label"], ["", "def", "get_closest_furniture_to_2dbox", "(", "self", ",", "query_label", ",", "query_size", ")", ":", "\n", "        ", "objects", "=", "self", ".", "_filter_objects_by_label", "(", "query_label", ")", "\n", "\n", "mses", "=", "{", "}", "\n", "for", "i", ",", "oi", "in", "enumerate", "(", "objects", ")", ":", "\n", "            ", "mses", "[", "oi", "]", "=", "(", "\n", "(", "oi", ".", "size", "[", "0", "]", "-", "query_size", "[", "0", "]", ")", "**", "2", "+", "\n", "(", "oi", ".", "size", "[", "2", "]", "-", "query_size", "[", "1", "]", ")", "**", "2", "\n", ")", "\n", "", "sorted_mses", "=", "[", "k", "for", "k", ",", "v", "in", "sorted", "(", "mses", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "]", "\n", "return", "sorted_mses", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset.from_dataset_directory": [[55, 63], ["utils.parse_threed_future_models", "cls"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.utils.parse_threed_future_models"], ["", "@", "classmethod", "\n", "def", "from_dataset_directory", "(", "\n", "cls", ",", "dataset_directory", ",", "path_to_model_info", ",", "path_to_models", "\n", ")", ":", "\n", "        ", "objects", "=", "parse_threed_future_models", "(", "\n", "dataset_directory", ",", "path_to_models", ",", "path_to_model_info", "\n", ")", "\n", "return", "cls", "(", "objects", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset.from_pickled_dataset": [[64, 69], ["open", "pickle.load"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_pickled_dataset", "(", "cls", ",", "path_to_pickled_dataset", ")", ":", "\n", "        ", "with", "open", "(", "path_to_pickled_dataset", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "dataset", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.InfiniteDataset.__init__": [[19, 23], ["torch.utils.data.IterableDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.InfiniteDataset.__iter__": [[24, 45], ["len", "torch.utils.data.get_worker_info", "numpy.arange", "min", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "N", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n", "# Split the work if we have multiple workers", "\n", "# see https://pytorch.org/stable/data.html", "\n", "worker_info", "=", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "\n", "if", "worker_info", "is", "None", ":", "\n", "            ", "start", "=", "0", "\n", "end", "=", "N", "\n", "", "else", ":", "\n", "            ", "num_workers", "=", "worker_info", ".", "num_workers", "\n", "per_worker", "=", "(", "N", "+", "num_workers", "-", "1", ")", "//", "num_workers", "\n", "start", "=", "worker_info", ".", "id", "*", "per_worker", "\n", "end", "=", "min", "(", "start", "+", "per_worker", ",", "N", ")", "\n", "\n", "", "indices", "=", "np", ".", "arange", "(", "start", ",", "end", ")", "\n", "while", "True", ":", "\n", "            ", "if", "self", ".", "shuffle", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "", "for", "i", "in", "indices", ":", "\n", "                ", "yield", "self", ".", "dataset", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.__init__": [[49, 52], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scenes", ")", ":", "\n", "        ", "assert", "len", "(", "scenes", ")", ">", "0", "\n", "self", ".", "scenes", "=", "scenes", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.__len__": [[53, 55], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "scenes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.__getitem__": [[56, 58], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "scenes", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.class_labels": [[59, 62], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_labels", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.n_classes": [[63, 66], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "class_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.object_types": [[67, 70], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "object_types", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.n_object_types": [[71, 75], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_object_types", "(", "self", ")", ":", "\n", "        ", "\"\"\"The number of distinct objects contained in the scenes.\"\"\"", "\n", "return", "len", "(", "self", ".", "object_types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.room_types": [[76, 79], ["set"], "methods", ["None"], ["", "@", "property", "\n", "def", "room_types", "(", "self", ")", ":", "\n", "        ", "return", "set", "(", "[", "si", ".", "scene_type", "for", "si", "in", "self", ".", "scenes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.count_objects_in_rooms": [[80, 83], ["collections.Counter", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "count_objects_in_rooms", "(", "self", ")", ":", "\n", "        ", "return", "Counter", "(", "[", "len", "(", "si", ".", "bboxes", ")", "for", "si", "in", "self", ".", "scenes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.post_process": [[84, 86], ["None"], "methods", ["None"], ["", "def", "post_process", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_valid_scene_ids": [[87, 92], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "with_valid_scene_ids", "(", "invalid_scene_ids", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "return", "scene", "if", "scene", ".", "scene_id", "not", "in", "invalid_scene_ids", "else", "False", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_scene_ids": [[93, 98], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "with_scene_ids", "(", "scene_ids", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "return", "scene", "if", "scene", ".", "scene_id", "in", "scene_ids", "else", "False", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_room": [[99, 104], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "with_room", "(", "scene_type", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "return", "scene", "if", "scene_type", "in", "scene", ".", "scene_type", "else", "False", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.room_smaller_than_along_axis": [[105, 110], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "room_smaller_than_along_axis", "(", "max_size", ",", "axis", "=", "1", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "return", "scene", "if", "scene", ".", "bbox", "[", "1", "]", "[", "axis", "]", "<=", "max_size", "else", "False", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.room_larger_than_along_axis": [[111, 116], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "room_larger_than_along_axis", "(", "min_size", ",", "axis", "=", "1", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "return", "scene", "if", "scene", ".", "bbox", "[", "0", "]", "[", "axis", "]", ">=", "min_size", "else", "False", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.floor_plan_with_limits": [[117, 128], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "floor_plan_with_limits", "(", "limit_x", ",", "limit_y", ",", "axis", "=", "[", "0", ",", "2", "]", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "min_bbox", ",", "max_bbox", "=", "scene", ".", "floor_plan_bbox", "\n", "t_x", "=", "max_bbox", "[", "axis", "[", "0", "]", "]", "-", "min_bbox", "[", "axis", "[", "0", "]", "]", "\n", "t_y", "=", "max_bbox", "[", "axis", "[", "1", "]", "]", "-", "min_bbox", "[", "axis", "[", "1", "]", "]", "\n", "if", "t_x", "<=", "limit_x", "and", "t_y", "<=", "limit_y", ":", "\n", "                ", "return", "scene", "\n", "", "else", ":", "\n", "                ", "False", "\n", "", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_valid_boxes": [[129, 137], ["range", "len", "scene.bboxes.pop"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "with_valid_boxes", "(", "box_types", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "scene", ".", "bboxes", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "if", "scene", ".", "bboxes", "[", "i", "]", ".", "label", "not", "in", "box_types", ":", "\n", "                    ", "scene", ".", "bboxes", ".", "pop", "(", "i", ")", "\n", "", "", "return", "scene", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.without_box_types": [[138, 146], ["range", "len", "scene.bboxes.pop"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "without_box_types", "(", "box_types", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "scene", ".", "bboxes", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "if", "scene", ".", "bboxes", "[", "i", "]", ".", "label", "in", "box_types", ":", "\n", "                    ", "scene", ".", "bboxes", ".", "pop", "(", "i", ")", "\n", "", "", "return", "scene", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_generic_classes": [[147, 155], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "with_generic_classes", "(", "box_types_map", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "for", "box", "in", "scene", ".", "bboxes", ":", "\n", "# Update the box label based on the box_types_map", "\n", "                ", "box", ".", "label", "=", "box_types_map", "[", "box", ".", "label", "]", "\n", "", "return", "scene", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_valid_bbox_jids": [[156, 164], ["any"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "with_valid_bbox_jids", "(", "invalid_bbox_jds", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "return", "(", "\n", "False", "if", "any", "(", "b", ".", "model_jid", "in", "invalid_bbox_jds", "for", "b", "in", "scene", ".", "bboxes", ")", "\n", "else", "scene", "\n", ")", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.at_most_boxes": [[165, 170], ["len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "at_most_boxes", "(", "n", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "return", "scene", "if", "len", "(", "scene", ".", "bboxes", ")", "<=", "n", "else", "False", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.at_least_boxes": [[171, 176], ["len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "at_least_boxes", "(", "n", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "return", "scene", "if", "len", "(", "scene", ".", "bboxes", ")", ">=", "n", "else", "False", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_object_types": [[177, 185], ["all"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "with_object_types", "(", "objects", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "return", "(", "\n", "scene", "if", "all", "(", "b", ".", "label", "in", "objects", "for", "b", "in", "scene", ".", "bboxes", ")", "\n", "else", "False", "\n", ")", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.contains_object_types": [[186, 194], ["any"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "contains_object_types", "(", "objects", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "return", "(", "\n", "scene", "if", "any", "(", "b", ".", "label", "in", "objects", "for", "b", "in", "scene", ".", "bboxes", ")", "\n", "else", "False", "\n", ")", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.without_object_types": [[195, 203], ["any"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "without_object_types", "(", "objects", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "return", "(", "\n", "False", "if", "any", "(", "b", ".", "label", "in", "objects", "for", "b", "in", "scene", ".", "bboxes", ")", "\n", "else", "scene", "\n", ")", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.filter_compose": [[204, 216], ["iter", "next"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "filter_compose", "(", "*", "filters", ")", ":", "\n", "        ", "def", "inner", "(", "scene", ")", ":", "\n", "            ", "s", "=", "scene", "\n", "fs", "=", "iter", "(", "filters", ")", "\n", "try", ":", "\n", "                ", "while", "s", ":", "\n", "                    ", "s", "=", "next", "(", "fs", ")", "(", "s", ")", "\n", "", "", "except", "StopIteration", ":", "\n", "                ", "pass", "\n", "", "return", "s", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseScene.__init__": [[220, 224], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scene_id", ",", "scene_type", ",", "bboxes", ")", ":", "\n", "        ", "self", ".", "bboxes", "=", "bboxes", "\n", "self", ".", "scene_id", "=", "scene_id", "\n", "self", ".", "scene_type", "=", "scene_type", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseScene.__str__": [[225, 228], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Scene: {} of type: {} contains {} bboxes\"", ".", "format", "(", "\n", "self", ".", "scene_id", ",", "self", ".", "scene_type", ",", "self", ".", "nobjects", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseScene.nobjects": [[230, 234], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nobjects", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of bounding boxes / objects in a Scene.\"\"\"", "\n", "return", "len", "(", "self", ".", "bboxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseScene.object_types": [[235, 239], ["sorted", "set"], "methods", ["None"], ["", "@", "property", "\n", "def", "object_types", "(", "self", ")", ":", "\n", "        ", "\"\"\"The set of object types in this scene.\"\"\"", "\n", "return", "sorted", "(", "set", "(", "b", ".", "label", "for", "b", "in", "self", ".", "bboxes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseScene.n_object_types": [[240, 244], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_object_types", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of distinct objects in a Scene.\"\"\"", "\n", "return", "len", "(", "self", ".", "object_types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseScene.ordered_bboxes_with_centroid": [[245, 251], ["numpy.array", "numpy.lexsort"], "methods", ["None"], ["", "def", "ordered_bboxes_with_centroid", "(", "self", ")", ":", "\n", "        ", "centroids", "=", "np", ".", "array", "(", "[", "b", ".", "centroid", "for", "b", "in", "self", ".", "bboxes", "]", ")", "\n", "ordering", "=", "np", ".", "lexsort", "(", "centroids", ".", "T", ")", "\n", "ordered_bboxes", "=", "[", "self", ".", "bboxes", "[", "i", "]", "for", "i", "in", "ordering", "]", "\n", "\n", "return", "ordered_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseScene.ordered_bboxes_with_class_labels": [[252, 259], ["numpy.array", "numpy.array", "numpy.lexsort", "numpy.hstack", "b.int_label"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.int_label"], ["", "def", "ordered_bboxes_with_class_labels", "(", "self", ",", "all_labels", ")", ":", "\n", "        ", "centroids", "=", "np", ".", "array", "(", "[", "b", ".", "centroid", "for", "b", "in", "self", ".", "bboxes", "]", ")", "\n", "int_labels", "=", "np", ".", "array", "(", "[", "[", "b", ".", "int_label", "(", "all_labels", ")", "]", "for", "b", "in", "self", ".", "bboxes", "]", ")", "\n", "ordering", "=", "np", ".", "lexsort", "(", "np", ".", "hstack", "(", "[", "centroids", ",", "int_labels", "]", ")", ".", "T", ")", "\n", "ordered_bboxes", "=", "[", "self", ".", "bboxes", "[", "i", "]", "for", "i", "in", "ordering", "]", "\n", "\n", "return", "ordered_bboxes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.__init__": [[29, 42], ["common.BaseDataset.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["def", "__init__", "(", "self", ",", "scenes", ",", "bounds", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "scenes", ")", "\n", "assert", "isinstance", "(", "self", ".", "scenes", "[", "0", "]", ",", "Room", ")", "\n", "self", ".", "_object_types", "=", "None", "\n", "self", ".", "_room_types", "=", "None", "\n", "self", ".", "_count_furniture", "=", "None", "\n", "self", ".", "_bbox", "=", "None", "\n", "\n", "self", ".", "_sizes", "=", "self", ".", "_centroids", "=", "self", ".", "_angles", "=", "None", "\n", "if", "bounds", "is", "not", "None", ":", "\n", "            ", "self", ".", "_sizes", "=", "bounds", "[", "\"sizes\"", "]", "\n", "self", ".", "_centroids", "=", "bounds", "[", "\"translations\"", "]", "\n", "self", ".", "_angles", "=", "bounds", "[", "\"angles\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.__str__": [[43, 46], ["len"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Dataset contains {} scenes with {} discrete types\"", ".", "format", "(", "\n", "len", "(", "self", ".", "scenes", ")", ",", "self", ".", "n_object_types", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.bbox": [[48, 62], ["numpy.array", "numpy.array", "numpy.minimum", "numpy.maximum"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox", "(", "self", ")", ":", "\n", "        ", "\"\"\"The bbox for the entire dataset is simply computed based on the\n        bounding boxes of all scenes in the dataset.\n        \"\"\"", "\n", "if", "self", ".", "_bbox", "is", "None", ":", "\n", "            ", "_bbox_min", "=", "np", ".", "array", "(", "[", "1000", ",", "1000", ",", "1000", "]", ")", "\n", "_bbox_max", "=", "np", ".", "array", "(", "[", "-", "1000", ",", "-", "1000", ",", "-", "1000", "]", ")", "\n", "for", "s", "in", "self", ".", "scenes", ":", "\n", "                ", "bbox_min", ",", "bbox_max", "=", "s", ".", "bbox", "\n", "_bbox_min", "=", "np", ".", "minimum", "(", "bbox_min", ",", "_bbox_min", ")", "\n", "_bbox_max", "=", "np", ".", "maximum", "(", "bbox_max", ",", "_bbox_max", ")", "\n", "", "self", ".", "_bbox", "=", "(", "_bbox_min", ",", "_bbox_max", ")", "\n", "", "return", "self", ".", "_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront._centroid": [[63, 65], ["box.centroid"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.centroid"], ["", "def", "_centroid", "(", "self", ",", "box", ",", "offset", ")", ":", "\n", "        ", "return", "box", ".", "centroid", "(", "offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront._size": [[66, 68], ["None"], "methods", ["None"], ["", "def", "_size", "(", "self", ",", "box", ")", ":", "\n", "        ", "return", "box", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront._compute_bounds": [[69, 90], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.any", "threed_front.ThreedFront._centroid", "numpy.minimum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "print", "threed_front.ThreedFront._size", "threed_front.ThreedFront._size"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront._centroid", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront._size", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront._size"], ["", "def", "_compute_bounds", "(", "self", ")", ":", "\n", "        ", "_size_min", "=", "np", ".", "array", "(", "[", "10000000", "]", "*", "3", ")", "\n", "_size_max", "=", "np", ".", "array", "(", "[", "-", "10000000", "]", "*", "3", ")", "\n", "_centroid_min", "=", "np", ".", "array", "(", "[", "10000000", "]", "*", "3", ")", "\n", "_centroid_max", "=", "np", ".", "array", "(", "[", "-", "10000000", "]", "*", "3", ")", "\n", "_angle_min", "=", "np", ".", "array", "(", "[", "10000000000", "]", ")", "\n", "_angle_max", "=", "np", ".", "array", "(", "[", "-", "10000000000", "]", ")", "\n", "for", "s", "in", "self", ".", "scenes", ":", "\n", "            ", "for", "f", "in", "s", ".", "bboxes", ":", "\n", "                ", "if", "np", ".", "any", "(", "f", ".", "size", ">", "5", ")", ":", "\n", "                    ", "print", "(", "s", ".", "scene_id", ",", "f", ".", "size", ",", "f", ".", "model_uid", ",", "f", ".", "scale", ")", "\n", "", "centroid", "=", "self", ".", "_centroid", "(", "f", ",", "-", "s", ".", "centroid", ")", "\n", "_centroid_min", "=", "np", ".", "minimum", "(", "centroid", ",", "_centroid_min", ")", "\n", "_centroid_max", "=", "np", ".", "maximum", "(", "centroid", ",", "_centroid_max", ")", "\n", "_size_min", "=", "np", ".", "minimum", "(", "self", ".", "_size", "(", "f", ")", ",", "_size_min", ")", "\n", "_size_max", "=", "np", ".", "maximum", "(", "self", ".", "_size", "(", "f", ")", ",", "_size_max", ")", "\n", "_angle_min", "=", "np", ".", "minimum", "(", "f", ".", "z_angle", ",", "_angle_min", ")", "\n", "_angle_max", "=", "np", ".", "maximum", "(", "f", ".", "z_angle", ",", "_angle_max", ")", "\n", "", "", "self", ".", "_sizes", "=", "(", "_size_min", ",", "_size_max", ")", "\n", "self", ".", "_centroids", "=", "(", "_centroid_min", ",", "_centroid_max", ")", "\n", "self", ".", "_angles", "=", "(", "_angle_min", ",", "_angle_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.bounds": [[91, 97], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bounds", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"translations\"", ":", "self", ".", "centroids", ",", "\n", "\"sizes\"", ":", "self", ".", "sizes", ",", "\n", "\"angles\"", ":", "self", ".", "angles", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.sizes": [[99, 104], ["threed_front.ThreedFront._compute_bounds"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront._compute_bounds"], ["", "@", "property", "\n", "def", "sizes", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_sizes", "is", "None", ":", "\n", "            ", "self", ".", "_compute_bounds", "(", ")", "\n", "", "return", "self", ".", "_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.centroids": [[105, 110], ["threed_front.ThreedFront._compute_bounds"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront._compute_bounds"], ["", "@", "property", "\n", "def", "centroids", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_centroids", "is", "None", ":", "\n", "            ", "self", ".", "_compute_bounds", "(", ")", "\n", "", "return", "self", ".", "_centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.angles": [[111, 116], ["threed_front.ThreedFront._compute_bounds"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront._compute_bounds"], ["", "@", "property", "\n", "def", "angles", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_angles", "is", "None", ":", "\n", "            ", "self", ".", "_compute_bounds", "(", ")", "\n", "", "return", "self", ".", "_angles", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.count_furniture": [[117, 127], ["collections.Counter", "collections.OrderedDict", "collections.OrderedDict.append", "sum", "sorted", "collections.OrderedDict.items"], "methods", ["None"], ["", "@", "property", "\n", "def", "count_furniture", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_count_furniture", "is", "None", ":", "\n", "            ", "counts", "=", "[", "]", "\n", "for", "s", "in", "self", ".", "scenes", ":", "\n", "                ", "counts", ".", "append", "(", "s", ".", "furniture_in_room", ")", "\n", "", "counts", "=", "Counter", "(", "sum", "(", "counts", ",", "[", "]", ")", ")", "\n", "counts", "=", "OrderedDict", "(", "sorted", "(", "counts", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", ")", "\n", "self", ".", "_count_furniture", "=", "counts", "\n", "", "return", "self", ".", "_count_furniture", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.class_order": [[128, 133], ["dict", "zip", "threed_front.ThreedFront.count_furniture.keys", "range", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_order", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "zip", "(", "\n", "self", ".", "count_furniture", ".", "keys", "(", ")", ",", "\n", "range", "(", "len", "(", "self", ".", "count_furniture", ")", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.class_frequencies": [[135, 145], ["sum", "object_counts.items", "object_counts.items"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_frequencies", "(", "self", ")", ":", "\n", "        ", "object_counts", "=", "self", ".", "count_furniture", "\n", "class_freq", "=", "{", "}", "\n", "n_objects_in_dataset", "=", "sum", "(", "\n", "[", "object_counts", "[", "k", "]", "for", "k", ",", "v", "in", "object_counts", ".", "items", "(", ")", "]", "\n", ")", "\n", "for", "k", ",", "v", "in", "object_counts", ".", "items", "(", ")", ":", "\n", "            ", "class_freq", "[", "k", "]", "=", "object_counts", "[", "k", "]", "/", "n_objects_in_dataset", "\n", "", "return", "class_freq", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.object_types": [[146, 154], ["set", "sorted", "set"], "methods", ["None"], ["", "@", "property", "\n", "def", "object_types", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_object_types", "is", "None", ":", "\n", "            ", "self", ".", "_object_types", "=", "set", "(", ")", "\n", "for", "s", "in", "self", ".", "scenes", ":", "\n", "                ", "self", ".", "_object_types", "|=", "set", "(", "s", ".", "object_types", ")", "\n", "", "self", ".", "_object_types", "=", "sorted", "(", "self", ".", "_object_types", ")", "\n", "", "return", "self", ".", "_object_types", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.room_types": [[155, 160], ["set"], "methods", ["None"], ["", "@", "property", "\n", "def", "room_types", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_room_types", "is", "None", ":", "\n", "            ", "self", ".", "_room_types", "=", "set", "(", "[", "s", ".", "scene_type", "for", "s", "in", "self", ".", "scenes", "]", ")", "\n", "", "return", "self", ".", "_room_types", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.class_labels": [[161, 164], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "object_types", "+", "[", "\"start\"", ",", "\"end\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.from_dataset_directory": [[165, 180], ["utils.parse_threed_front_scenes", "cls", "numpy.load", "map"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.utils.parse_threed_front_scenes"], ["", "@", "classmethod", "\n", "def", "from_dataset_directory", "(", "cls", ",", "dataset_directory", ",", "path_to_model_info", ",", "\n", "path_to_models", ",", "path_to_room_masks_dir", "=", "None", ",", "\n", "path_to_bounds", "=", "None", ",", "filter_fn", "=", "lambda", "s", ":", "s", ")", ":", "\n", "        ", "scenes", "=", "parse_threed_front_scenes", "(", "\n", "dataset_directory", ",", "\n", "path_to_model_info", ",", "\n", "path_to_models", ",", "\n", "path_to_room_masks_dir", "\n", ")", "\n", "bounds", "=", "None", "\n", "if", "path_to_bounds", ":", "\n", "            ", "bounds", "=", "np", ".", "load", "(", "path_to_bounds", ",", "allow_pickle", "=", "True", ")", "\n", "\n", "", "return", "cls", "(", "[", "s", "for", "s", "in", "map", "(", "filter_fn", ",", "scenes", ")", "if", "s", "]", ",", "bounds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedRoom.__init__": [[183, 206], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "scene_id", ",", "\n", "room_layout", ",", "\n", "floor_plan_vertices", ",", "\n", "floor_plan_faces", ",", "\n", "floor_plan_centroid", ",", "\n", "class_labels", ",", "\n", "translations", ",", "\n", "sizes", ",", "\n", "angles", ",", "\n", "image_path", "\n", ")", ":", "\n", "        ", "self", ".", "scene_id", "=", "scene_id", "\n", "self", ".", "room_layout", "=", "room_layout", "\n", "self", ".", "floor_plan_faces", "=", "floor_plan_faces", "\n", "self", ".", "floor_plan_vertices", "=", "floor_plan_vertices", "\n", "self", ".", "floor_plan_centroid", "=", "floor_plan_centroid", "\n", "self", ".", "class_labels", "=", "class_labels", "\n", "self", ".", "translations", "=", "translations", "\n", "self", ".", "sizes", "=", "sizes", "\n", "self", ".", "angles", "=", "angles", "\n", "self", ".", "image_path", "=", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedRoom.floor_plan": [[207, 211], ["numpy.copy", "numpy.copy"], "methods", ["None"], ["", "@", "property", "\n", "def", "floor_plan", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "copy", "(", "self", ".", "floor_plan_vertices", ")", ",", "np", ".", "copy", "(", "self", ".", "floor_plan_faces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedRoom.room_mask": [[212, 215], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "room_mask", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "room_layout", "[", ":", ",", ":", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront.__init__": [[218, 243], ["threed_front.CachedThreedFront._parse_train_stats", "sorted", "sorted", "os.path.join", "sorted", "os.path.isfile", "os.path.join", "os.path.join", "os.listdir", "oi.split"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront._parse_train_stats"], ["    ", "def", "__init__", "(", "self", ",", "base_dir", ",", "config", ",", "scene_ids", ")", ":", "\n", "        ", "self", ".", "_base_dir", "=", "base_dir", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "_parse_train_stats", "(", "config", "[", "\"train_stats\"", "]", ")", "\n", "\n", "self", ".", "_tags", "=", "sorted", "(", "[", "\n", "oi", "\n", "for", "oi", "in", "os", ".", "listdir", "(", "self", ".", "_base_dir", ")", "\n", "if", "oi", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "in", "scene_ids", "\n", "]", ")", "\n", "self", ".", "_path_to_rooms", "=", "sorted", "(", "[", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_base_dir", ",", "pi", ",", "\"boxes.npz\"", ")", "\n", "for", "pi", "in", "self", ".", "_tags", "\n", "]", ")", "\n", "rendered_scene", "=", "\"rendered_scene_256.png\"", "\n", "path_to_rendered_scene", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_base_dir", ",", "self", ".", "_tags", "[", "0", "]", ",", "rendered_scene", "\n", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path_to_rendered_scene", ")", ":", "\n", "            ", "rendered_scene", "=", "\"rendered_scene_256_no_lamps.png\"", "\n", "\n", "", "self", ".", "_path_to_renders", "=", "sorted", "(", "[", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_base_dir", ",", "pi", ",", "rendered_scene", ")", "\n", "for", "pi", "in", "self", ".", "_tags", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront._get_room_layout": [[245, 254], ["PIL.Image.fromarray", "img.resize.resize.resize", "tuple", "numpy.asarray().astype", "numpy.float32", "map", "threed_front.CachedThreedFront.config[].split", "numpy.asarray"], "methods", ["None"], ["", "def", "_get_room_layout", "(", "self", ",", "room_layout", ")", ":", "\n", "# Resize the room_layout if needed", "\n", "        ", "img", "=", "Image", ".", "fromarray", "(", "room_layout", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "img", "=", "img", ".", "resize", "(", "\n", "tuple", "(", "map", "(", "int", ",", "self", ".", "config", "[", "\"room_layout_size\"", "]", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", "\n", ")", "\n", "D", "=", "np", ".", "asarray", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "np", ".", "float32", "(", "255", ")", "\n", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront.__getitem__": [[255, 269], ["functools.lru_cache", "numpy.load", "threed_front.CachedRoom", "threed_front.CachedThreedFront._get_room_layout"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront._get_room_layout"], ["", "@", "lru_cache", "(", "maxsize", "=", "32", ")", "\n", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "D", "=", "np", ".", "load", "(", "self", ".", "_path_to_rooms", "[", "i", "]", ")", "\n", "return", "CachedRoom", "(", "\n", "scene_id", "=", "D", "[", "\"scene_id\"", "]", ",", "\n", "room_layout", "=", "self", ".", "_get_room_layout", "(", "D", "[", "\"room_layout\"", "]", ")", ",", "\n", "floor_plan_vertices", "=", "D", "[", "\"floor_plan_vertices\"", "]", ",", "\n", "floor_plan_faces", "=", "D", "[", "\"floor_plan_faces\"", "]", ",", "\n", "floor_plan_centroid", "=", "D", "[", "\"floor_plan_centroid\"", "]", ",", "\n", "class_labels", "=", "D", "[", "\"class_labels\"", "]", ",", "\n", "translations", "=", "D", "[", "\"translations\"", "]", ",", "\n", "sizes", "=", "D", "[", "\"sizes\"", "]", ",", "\n", "angles", "=", "D", "[", "\"angles\"", "]", ",", "\n", "image_path", "=", "self", ".", "_path_to_renders", "[", "i", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront.get_room_params": [[271, 282], ["numpy.load", "threed_front.CachedThreedFront._get_room_layout", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront._get_room_layout"], ["", "def", "get_room_params", "(", "self", ",", "i", ")", ":", "\n", "        ", "D", "=", "np", ".", "load", "(", "self", ".", "_path_to_rooms", "[", "i", "]", ")", "\n", "\n", "room", "=", "self", ".", "_get_room_layout", "(", "D", "[", "\"room_layout\"", "]", ")", "\n", "room", "=", "np", ".", "transpose", "(", "room", "[", ":", ",", ":", ",", "None", "]", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "{", "\n", "\"room_layout\"", ":", "room", ",", "\n", "\"class_labels\"", ":", "D", "[", "\"class_labels\"", "]", ",", "\n", "\"translations\"", ":", "D", "[", "\"translations\"", "]", ",", "\n", "\"sizes\"", ":", "D", "[", "\"sizes\"", "]", ",", "\n", "\"angles\"", ":", "D", "[", "\"angles\"", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront.__len__": [[284, 286], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_path_to_rooms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront.__str__": [[287, 290], ["len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Dataset contains {} scenes with {} discrete types\"", ".", "format", "(", "\n", "len", "(", "self", ")", ",", "self", ".", "n_object_types", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront._parse_train_stats": [[292, 310], ["open", "json.load", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "os.path.join"], "methods", ["None"], ["", "def", "_parse_train_stats", "(", "self", ",", "train_stats", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_base_dir", ",", "train_stats", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "train_stats", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "_centroids", "=", "train_stats", "[", "\"bounds_translations\"", "]", "\n", "self", ".", "_centroids", "=", "(", "\n", "np", ".", "array", "(", "self", ".", "_centroids", "[", ":", "3", "]", ")", ",", "\n", "np", ".", "array", "(", "self", ".", "_centroids", "[", "3", ":", "]", ")", "\n", ")", "\n", "self", ".", "_sizes", "=", "train_stats", "[", "\"bounds_sizes\"", "]", "\n", "self", ".", "_sizes", "=", "(", "np", ".", "array", "(", "self", ".", "_sizes", "[", ":", "3", "]", ")", ",", "np", ".", "array", "(", "self", ".", "_sizes", "[", "3", ":", "]", ")", ")", "\n", "self", ".", "_angles", "=", "train_stats", "[", "\"bounds_angles\"", "]", "\n", "self", ".", "_angles", "=", "(", "np", ".", "array", "(", "self", ".", "_angles", "[", "0", "]", ")", ",", "np", ".", "array", "(", "self", ".", "_angles", "[", "1", "]", ")", ")", "\n", "\n", "self", ".", "_class_labels", "=", "train_stats", "[", "\"class_labels\"", "]", "\n", "self", ".", "_object_types", "=", "train_stats", "[", "\"object_types\"", "]", "\n", "self", ".", "_class_frequencies", "=", "train_stats", "[", "\"class_frequencies\"", "]", "\n", "self", ".", "_class_order", "=", "train_stats", "[", "\"class_order\"", "]", "\n", "self", ".", "_count_furniture", "=", "train_stats", "[", "\"count_furniture\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront.class_labels": [[311, 314], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_class_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront.object_types": [[315, 318], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "object_types", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_object_types", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront.class_frequencies": [[319, 322], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_frequencies", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_class_frequencies", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront.class_order": [[323, 326], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_order", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_class_order", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront.count_furniture": [[327, 330], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "count_furniture", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_count_furniture", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.splits_builder.SplitsBuilder.__init__": [[13, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_test_splits_file", ")", ":", "\n", "        ", "self", ".", "_train_test_splits_file", "=", "train_test_splits_file", "\n", "self", ".", "_splits", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.splits_builder.SplitsBuilder.train_split": [[17, 19], ["None"], "methods", ["None"], ["", "def", "train_split", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_splits", "[", "\"train\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.splits_builder.SplitsBuilder.test_split": [[20, 22], ["None"], "methods", ["None"], ["", "def", "test_split", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_splits", "[", "\"test\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.splits_builder.SplitsBuilder.val_split": [[23, 25], ["None"], "methods", ["None"], ["", "def", "val_split", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_splits", "[", "\"val\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.splits_builder.SplitsBuilder._parse_train_test_splits_file": [[26, 30], ["numpy.array", "open", "csv.reader"], "methods", ["None"], ["", "def", "_parse_train_test_splits_file", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "_train_test_splits_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "data", "=", "[", "row", "for", "row", "in", "csv", ".", "reader", "(", "f", ")", "]", "\n", "", "return", "np", ".", "array", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.splits_builder.SplitsBuilder.get_splits": [[31, 39], ["isinstance", "s.extend", "splits_builder.SplitsBuilder._parse_split_file"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.splits_builder.CSVSplitsBuilder._parse_split_file"], ["", "def", "get_splits", "(", "self", ",", "keep_splits", "=", "[", "\"train, val\"", "]", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "keep_splits", ",", "list", ")", ":", "\n", "            ", "keep_splits", "=", "[", "keep_splits", "]", "\n", "# Return only the split", "\n", "", "s", "=", "[", "]", "\n", "for", "ks", "in", "keep_splits", ":", "\n", "            ", "s", ".", "extend", "(", "self", ".", "_parse_split_file", "(", ")", "[", "ks", "]", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.splits_builder.CSVSplitsBuilder._parse_split_file": [[42, 48], ["splits_builder.CSVSplitsBuilder._parse_train_test_splits_file"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.splits_builder.SplitsBuilder._parse_train_test_splits_file"], ["    ", "def", "_parse_split_file", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_splits", ":", "\n", "            ", "data", "=", "self", ".", "_parse_train_test_splits_file", "(", ")", "\n", "for", "s", "in", "[", "\"train\"", ",", "\"test\"", ",", "\"val\"", "]", ":", "\n", "                ", "self", ".", "_splits", "[", "s", "]", "=", "[", "r", "[", "0", "]", "for", "r", "in", "data", "if", "r", "[", "1", "]", "==", "s", "]", "\n", "", "", "return", "self", ".", "_splits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetDecoratorBase.__init__": [[21, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "_dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetDecoratorBase.__len__": [[24, 26], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetDecoratorBase.__getitem__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "_dataset", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetDecoratorBase.bounds": [[30, 33], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bounds", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dataset", ".", "bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetDecoratorBase.n_classes": [[34, 37], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dataset", ".", "n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetDecoratorBase.class_labels": [[38, 41], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dataset", ".", "class_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetDecoratorBase.class_frequencies": [[42, 45], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_frequencies", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dataset", ".", "class_frequencies", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetDecoratorBase.n_object_types": [[46, 49], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_object_types", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dataset", ".", "n_object_types", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetDecoratorBase.object_types": [[50, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "object_types", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dataset", ".", "object_types", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetDecoratorBase.feature_size": [[54, 57], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bbox_dims", "+", "self", ".", "n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetDecoratorBase.bbox_dims": [[58, 61], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_dims", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetDecoratorBase.post_process": [[62, 64], ["threed_front_dataset.DatasetDecoratorBase._dataset.post_process"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.post_process"], ["", "def", "post_process", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "self", ".", "_dataset", ".", "post_process", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.BoxOrderedDataset.__init__": [[67, 70], ["threed_front_dataset.DatasetDecoratorBase.__init__"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "box_ordering", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "box_ordering", "=", "box_ordering", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.BoxOrderedDataset._get_boxes": [[71, 82], ["functools.lru_cache", "scene.ordered_bboxes_with_class_frequencies", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.ordered_bboxes_with_class_frequencies"], ["", "@", "lru_cache", "(", "maxsize", "=", "16", ")", "\n", "def", "_get_boxes", "(", "self", ",", "scene_idx", ")", ":", "\n", "        ", "scene", "=", "self", ".", "_dataset", "[", "scene_idx", "]", "\n", "if", "self", ".", "box_ordering", "is", "None", ":", "\n", "            ", "return", "scene", ".", "bboxes", "\n", "", "elif", "self", ".", "box_ordering", "==", "\"class_frequencies\"", ":", "\n", "            ", "return", "scene", ".", "ordered_bboxes_with_class_frequencies", "(", "\n", "self", ".", "class_frequencies", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DataEncoder.property_type": [[87, 90], ["NotImplementedError"], "methods", ["None"], ["@", "property", "\n", "def", "property_type", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.RoomLayoutEncoder.property_type": [[93, 96], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "property_type", "(", "self", ")", ":", "\n", "        ", "return", "\"room_layout\"", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.RoomLayoutEncoder.__getitem__": [[97, 101], ["numpy.transpose"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Implement the encoding for the room layout as images.\"\"\"", "\n", "img", "=", "self", ".", "_dataset", "[", "idx", "]", ".", "room_mask", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "return", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.RoomLayoutEncoder.bbox_dims": [[102, 105], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_dims", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.ClassLabelsEncoder.property_type": [[109, 112], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "property_type", "(", "self", ")", ":", "\n", "        ", "return", "\"class_labels\"", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.ClassLabelsEncoder.__getitem__": [[113, 125], ["threed_front_dataset.ClassLabelsEncoder._get_boxes", "len", "len", "numpy.zeros", "enumerate", "bs.one_hot_label"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.BoxOrderedDataset._get_boxes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.one_hot_label"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# Make a local copy of the class labels", "\n", "        ", "classes", "=", "self", ".", "class_labels", "\n", "\n", "# Get the scene", "\n", "boxes", "=", "self", ".", "_get_boxes", "(", "idx", ")", "\n", "L", "=", "len", "(", "boxes", ")", "# sequence length", "\n", "C", "=", "len", "(", "classes", ")", "# number of classes", "\n", "class_labels", "=", "np", ".", "zeros", "(", "(", "L", ",", "C", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", ",", "bs", "in", "enumerate", "(", "boxes", ")", ":", "\n", "            ", "class_labels", "[", "i", "]", "=", "bs", ".", "one_hot_label", "(", "classes", ")", "\n", "", "return", "class_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.ClassLabelsEncoder.bbox_dims": [[126, 129], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_dims", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.TranslationEncoder.property_type": [[132, 135], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "property_type", "(", "self", ")", ":", "\n", "        ", "return", "\"translations\"", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.TranslationEncoder.__getitem__": [[136, 145], ["threed_front_dataset.TranslationEncoder._get_boxes", "len", "numpy.zeros", "enumerate", "bs.centroid"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.BoxOrderedDataset._get_boxes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.centroid"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# Get the scene", "\n", "        ", "scene", "=", "self", ".", "_dataset", "[", "idx", "]", "\n", "boxes", "=", "self", ".", "_get_boxes", "(", "idx", ")", "\n", "L", "=", "len", "(", "boxes", ")", "# sequence length", "\n", "translations", "=", "np", ".", "zeros", "(", "(", "L", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", ",", "bs", "in", "enumerate", "(", "boxes", ")", ":", "\n", "            ", "translations", "[", "i", "]", "=", "bs", ".", "centroid", "(", "-", "scene", ".", "centroid", ")", "\n", "", "return", "translations", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.TranslationEncoder.bbox_dims": [[146, 149], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_dims", "(", "self", ")", ":", "\n", "        ", "return", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.SizeEncoder.property_type": [[152, 155], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "property_type", "(", "self", ")", ":", "\n", "        ", "return", "\"sizes\"", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.SizeEncoder.__getitem__": [[156, 164], ["threed_front_dataset.SizeEncoder._get_boxes", "len", "numpy.zeros", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.BoxOrderedDataset._get_boxes"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# Get the scene", "\n", "        ", "boxes", "=", "self", ".", "_get_boxes", "(", "idx", ")", "\n", "L", "=", "len", "(", "boxes", ")", "# sequence length", "\n", "sizes", "=", "np", ".", "zeros", "(", "(", "L", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", ",", "bs", "in", "enumerate", "(", "boxes", ")", ":", "\n", "            ", "sizes", "[", "i", "]", "=", "bs", ".", "size", "\n", "", "return", "sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.SizeEncoder.bbox_dims": [[165, 168], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_dims", "(", "self", ")", ":", "\n", "        ", "return", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.AngleEncoder.property_type": [[171, 174], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "property_type", "(", "self", ")", ":", "\n", "        ", "return", "\"angles\"", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.AngleEncoder.__getitem__": [[175, 184], ["threed_front_dataset.AngleEncoder._get_boxes", "len", "numpy.zeros", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.BoxOrderedDataset._get_boxes"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# Get the scene", "\n", "        ", "boxes", "=", "self", ".", "_get_boxes", "(", "idx", ")", "\n", "# Get the rotation matrix for the current scene", "\n", "L", "=", "len", "(", "boxes", ")", "# sequence length", "\n", "angles", "=", "np", ".", "zeros", "(", "(", "L", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", ",", "bs", "in", "enumerate", "(", "boxes", ")", ":", "\n", "            ", "angles", "[", "i", "]", "=", "bs", ".", "z_angle", "\n", "", "return", "angles", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.AngleEncoder.bbox_dims": [[185, 188], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_dims", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetCollection.__init__": [[191, 194], ["threed_front_dataset.DatasetDecoratorBase.__init__"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "datasets", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "datasets", "[", "0", "]", ")", "\n", "self", ".", "_datasets", "=", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetCollection.bbox_dims": [[195, 198], ["sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_dims", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "d", ".", "bbox_dims", "for", "d", "in", "self", ".", "_datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetCollection.__getitem__": [[199, 204], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_params", "=", "{", "}", "\n", "for", "di", "in", "self", ".", "_datasets", ":", "\n", "            ", "sample_params", "[", "di", ".", "property_type", "]", "=", "di", "[", "idx", "]", "\n", "", "return", "sample_params", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.DatasetCollection.collate_fn": [[205, 248], ["max", "set", "sample_params.update", "sample_params.update", "numpy.array", "torch_sample.update", "set", "set", "torch.from_numpy().float", "samples[].keys", "numpy.stack", "numpy.stack", "torch.from_numpy", "torch_sample.keys", "len", "numpy.vstack", "numpy.zeros", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_fn", "(", "samples", ")", ":", "\n", "# We assume that all samples have the same set of keys", "\n", "        ", "key_set", "=", "set", "(", "samples", "[", "0", "]", ".", "keys", "(", ")", ")", "-", "set", "(", "[", "\"length\"", "]", ")", "\n", "\n", "# Compute the max length of the sequences in the batch", "\n", "max_length", "=", "max", "(", "sample", "[", "\"length\"", "]", "for", "sample", "in", "samples", ")", "\n", "\n", "# Assume that all inputs that are 3D or 1D do not need padding.", "\n", "# Otherwise, pad the first dimension.", "\n", "padding_keys", "=", "set", "(", "k", "for", "k", "in", "key_set", "if", "len", "(", "samples", "[", "0", "]", "[", "k", "]", ".", "shape", ")", "==", "2", ")", "\n", "sample_params", "=", "{", "}", "\n", "sample_params", ".", "update", "(", "{", "\n", "k", ":", "np", ".", "stack", "(", "[", "sample", "[", "k", "]", "for", "sample", "in", "samples", "]", ",", "axis", "=", "0", ")", "\n", "for", "k", "in", "(", "key_set", "-", "padding_keys", ")", "\n", "}", ")", "\n", "\n", "sample_params", ".", "update", "(", "{", "\n", "k", ":", "np", ".", "stack", "(", "[", "\n", "np", ".", "vstack", "(", "[", "\n", "sample", "[", "k", "]", ",", "\n", "np", ".", "zeros", "(", "(", "max_length", "-", "len", "(", "sample", "[", "k", "]", ")", ",", "sample", "[", "k", "]", ".", "shape", "[", "1", "]", ")", ")", "\n", "]", ")", "for", "sample", "in", "samples", "\n", "]", ",", "axis", "=", "0", ")", "\n", "for", "k", "in", "padding_keys", "\n", "}", ")", "\n", "sample_params", "[", "\"lengths\"", "]", "=", "np", ".", "array", "(", "[", "\n", "sample", "[", "\"length\"", "]", "for", "sample", "in", "samples", "\n", "]", ")", "\n", "\n", "# Make torch tensors from the numpy tensors", "\n", "torch_sample", "=", "{", "\n", "k", ":", "torch", ".", "from_numpy", "(", "sample_params", "[", "k", "]", ")", ".", "float", "(", ")", "\n", "for", "k", "in", "sample_params", "\n", "}", "\n", "\n", "torch_sample", ".", "update", "(", "{", "\n", "k", ":", "torch_sample", "[", "k", "]", "[", ":", ",", "None", "]", "\n", "for", "k", "in", "torch_sample", ".", "keys", "(", ")", "\n", "if", "\"_tr\"", "in", "k", "\n", "}", ")", "\n", "\n", "return", "torch_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.CachedDatasetCollection.__init__": [[251, 254], ["threed_front_dataset.DatasetCollection.__init__"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "_dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.CachedDatasetCollection.__getitem__": [[255, 257], ["threed_front_dataset.CachedDatasetCollection._dataset.get_room_params"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.CachedThreedFront.get_room_params"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "_dataset", ".", "get_room_params", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.CachedDatasetCollection.bbox_dims": [[258, 261], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_dims", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dataset", ".", "bbox_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.RotationAugmentation.__init__": [[264, 268], ["threed_front_dataset.DatasetDecoratorBase.__init__"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "min_rad", "=", "0.174533", ",", "max_rad", "=", "5.06145", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "_min_rad", "=", "min_rad", "\n", "self", ".", "_max_rad", "=", "max_rad", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.RotationAugmentation.rotation_matrix_around_y": [[269, 278], ["numpy.zeros", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "rotation_matrix_around_y", "(", "theta", ")", ":", "\n", "        ", "R", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "R", "[", "0", ",", "0", "]", "=", "np", ".", "cos", "(", "theta", ")", "\n", "R", "[", "0", ",", "2", "]", "=", "-", "np", ".", "sin", "(", "theta", ")", "\n", "R", "[", "2", ",", "0", "]", "=", "np", ".", "sin", "(", "theta", ")", "\n", "R", "[", "2", ",", "2", "]", "=", "np", ".", "cos", "(", "theta", ")", "\n", "R", "[", "1", ",", "1", "]", "=", "1.", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.RotationAugmentation.rot_angle": [[279, 285], ["numpy.random.rand", "numpy.random.uniform"], "methods", ["None"], ["", "@", "property", "\n", "def", "rot_angle", "(", "self", ")", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "self", ".", "_min_rad", ",", "self", ".", "_max_rad", ")", "\n", "", "else", ":", "\n", "            ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.RotationAugmentation.__getitem__": [[286, 307], ["threed_front_dataset.RotationAugmentation.rotation_matrix_around_y", "sample_params.items", "v.dot", "numpy.transpose", "numpy.transpose", "scipy.ndimage.rotate"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.RotationAugmentation.rotation_matrix_around_y"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# Get the rotation matrix for the current scene", "\n", "        ", "rot_angle", "=", "self", ".", "rot_angle", "\n", "R", "=", "RotationAugmentation", ".", "rotation_matrix_around_y", "(", "rot_angle", ")", "\n", "\n", "sample_params", "=", "self", ".", "_dataset", "[", "idx", "]", "\n", "for", "k", ",", "v", "in", "sample_params", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "==", "\"translations\"", ":", "\n", "                ", "sample_params", "[", "k", "]", "=", "v", ".", "dot", "(", "R", ")", "\n", "", "elif", "k", "==", "\"angles\"", ":", "\n", "                ", "angle_min", ",", "angle_max", "=", "self", ".", "bounds", "[", "\"angles\"", "]", "\n", "sample_params", "[", "k", "]", "=", "(", "v", "+", "rot_angle", "-", "angle_min", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "+", "angle_min", "\n", "", "elif", "k", "==", "\"room_layout\"", ":", "\n", "# Fix the ordering of the channels because it was previously", "\n", "# changed", "\n", "                ", "img", "=", "np", ".", "transpose", "(", "v", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "sample_params", "[", "k", "]", "=", "np", ".", "transpose", "(", "rotate", "(", "\n", "img", ",", "rot_angle", "*", "180", "/", "np", ".", "pi", ",", "reshape", "=", "False", "\n", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "", "return", "sample_params", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.scale": [[310, 317], ["x.astype", "numpy.clip"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "scale", "(", "x", ",", "minimum", ",", "maximum", ")", ":", "\n", "        ", "X", "=", "x", ".", "astype", "(", "np", ".", "float32", ")", "\n", "X", "=", "np", ".", "clip", "(", "X", ",", "minimum", ",", "maximum", ")", "\n", "X", "=", "(", "(", "X", "-", "minimum", ")", "/", "(", "maximum", "-", "minimum", ")", ")", "\n", "X", "=", "2", "*", "X", "-", "1", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.descale": [[318, 323], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "descale", "(", "x", ",", "minimum", ",", "maximum", ")", ":", "\n", "        ", "x", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "x", "=", "x", "*", "(", "maximum", "-", "minimum", ")", "+", "minimum", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.__getitem__": [[324, 333], ["sample_params.items", "threed_front_dataset.Scale.scale"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.scale"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "bounds", "=", "self", ".", "bounds", "\n", "sample_params", "=", "self", ".", "_dataset", "[", "idx", "]", "\n", "for", "k", ",", "v", "in", "sample_params", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "bounds", ":", "\n", "                ", "sample_params", "[", "k", "]", "=", "Scale", ".", "scale", "(", "\n", "v", ",", "bounds", "[", "k", "]", "[", "0", "]", ",", "bounds", "[", "k", "]", "[", "1", "]", "\n", ")", "\n", "", "", "return", "sample_params", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.post_process": [[334, 345], ["s.items", "threed_front_dataset.DatasetDecoratorBase.post_process", "threed_front_dataset.Scale.descale"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.post_process", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.descale"], ["", "def", "post_process", "(", "self", ",", "s", ")", ":", "\n", "        ", "bounds", "=", "self", ".", "bounds", "\n", "sample_params", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "s", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "==", "\"room_layout\"", "or", "k", "==", "\"class_labels\"", ":", "\n", "                ", "sample_params", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "sample_params", "[", "k", "]", "=", "Scale", ".", "descale", "(", "\n", "v", ",", "bounds", "[", "k", "]", "[", "0", "]", ",", "bounds", "[", "k", "]", "[", "1", "]", "\n", ")", "\n", "", "", "return", "super", "(", ")", ".", "post_process", "(", "sample_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.bbox_dims": [[346, 349], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_dims", "(", "self", ")", ":", "\n", "        ", "return", "3", "+", "3", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Jitter.__getitem__": [[352, 360], ["sample_params.items", "numpy.random.normal"], "methods", ["None"], ["    ", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_params", "=", "self", ".", "_dataset", "[", "idx", "]", "\n", "for", "k", ",", "v", "in", "sample_params", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "==", "\"room_layout\"", "or", "k", "==", "\"class_labels\"", ":", "\n", "                ", "sample_params", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "sample_params", "[", "k", "]", "=", "v", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "0.01", ")", "\n", "", "", "return", "sample_params", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Permutation.__init__": [[363, 367], ["threed_front_dataset.DatasetDecoratorBase.__init__"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "permutation_keys", ",", "permutation_axis", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "_permutation_keys", "=", "permutation_keys", "\n", "self", ".", "_permutation_axis", "=", "permutation_axis", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Permutation.__getitem__": [[368, 377], ["numpy.random.permutation"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_params", "=", "self", ".", "_dataset", "[", "idx", "]", "\n", "\n", "shapes", "=", "sample_params", "[", "\"class_labels\"", "]", ".", "shape", "\n", "ordering", "=", "np", ".", "random", ".", "permutation", "(", "shapes", "[", "self", ".", "_permutation_axis", "]", ")", "\n", "\n", "for", "k", "in", "self", ".", "_permutation_keys", ":", "\n", "            ", "sample_params", "[", "k", "]", "=", "sample_params", "[", "k", "]", "[", "ordering", "]", "\n", "", "return", "sample_params", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.OrderedDataset.__init__": [[380, 384], ["threed_front_dataset.DatasetDecoratorBase.__init__"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "ordered_keys", ",", "box_ordering", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "_ordered_keys", "=", "ordered_keys", "\n", "self", ".", "_box_ordering", "=", "box_ordering", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.OrderedDataset.__getitem__": [[385, 397], ["threed_front_dataset.OrderedDataset._get_class_frequency_order", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.OrderedDataset._get_class_frequency_order"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "_box_ordering", "is", "None", ":", "\n", "            ", "return", "self", ".", "_dataset", "[", "idx", "]", "\n", "\n", "", "if", "self", ".", "_box_ordering", "!=", "\"class_frequencies\"", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "sample", "=", "self", ".", "_dataset", "[", "idx", "]", "\n", "order", "=", "self", ".", "_get_class_frequency_order", "(", "sample", ")", "\n", "for", "k", "in", "self", ".", "_ordered_keys", ":", "\n", "            ", "sample", "[", "k", "]", "=", "sample", "[", "k", "]", "[", "order", "]", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.OrderedDataset._get_class_frequency_order": [[398, 409], ["sample[].argmax", "numpy.array", "numpy.lexsort", "numpy.hstack"], "methods", ["None"], ["", "def", "_get_class_frequency_order", "(", "self", ",", "sample", ")", ":", "\n", "        ", "t", "=", "sample", "[", "\"translations\"", "]", "\n", "c", "=", "sample", "[", "\"class_labels\"", "]", ".", "argmax", "(", "-", "1", ")", "\n", "class_frequencies", "=", "self", ".", "class_frequencies", "\n", "class_labels", "=", "self", ".", "class_labels", "\n", "f", "=", "np", ".", "array", "(", "[", "\n", "[", "class_frequencies", "[", "class_labels", "[", "ci", "]", "]", "]", "\n", "for", "ci", "in", "c", "\n", "]", ")", "\n", "\n", "return", "np", ".", "lexsort", "(", "np", ".", "hstack", "(", "[", "t", ",", "f", "]", ")", ".", "T", ")", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Autoregressive.__getitem__": [[412, 440], ["sample_params.items", "sample_params.update", "numpy.copy", "numpy.vstack", "numpy.copy", "numpy.vstack", "numpy.eye", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_params", "=", "self", ".", "_dataset", "[", "idx", "]", "\n", "\n", "sample_params_target", "=", "{", "}", "\n", "# Compute the target from the input", "\n", "for", "k", ",", "v", "in", "sample_params", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "==", "\"room_layout\"", "or", "k", "==", "\"length\"", ":", "\n", "                ", "pass", "\n", "", "elif", "k", "==", "\"class_labels\"", ":", "\n", "                ", "class_labels", "=", "np", ".", "copy", "(", "v", ")", "\n", "L", ",", "C", "=", "class_labels", ".", "shape", "\n", "# Add the end label the end of each sequence", "\n", "end_label", "=", "np", ".", "eye", "(", "C", ")", "[", "-", "1", "]", "\n", "sample_params_target", "[", "k", "+", "\"_tr\"", "]", "=", "np", ".", "vstack", "(", "[", "\n", "class_labels", ",", "end_label", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "copy", "(", "v", ")", "\n", "# Set the attributes to for the end symbol", "\n", "_", ",", "C", "=", "p", ".", "shape", "\n", "sample_params_target", "[", "k", "+", "\"_tr\"", "]", "=", "np", ".", "vstack", "(", "[", "p", ",", "np", ".", "zeros", "(", "C", ")", "]", ")", "\n", "\n", "", "", "sample_params", ".", "update", "(", "sample_params_target", ")", "\n", "\n", "# Add the number of bounding boxes in the scene", "\n", "sample_params", "[", "\"length\"", "]", "=", "sample_params", "[", "\"class_labels\"", "]", ".", "shape", "[", "0", "]", "\n", "\n", "return", "sample_params", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Autoregressive.collate_fn": [[441, 443], ["threed_front_dataset.DatasetCollection.collate_fn"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Autoregressive.collate_fn"], ["", "def", "collate_fn", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "DatasetCollection", ".", "collate_fn", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Autoregressive.bbox_dims": [[444, 447], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_dims", "(", "self", ")", ":", "\n", "        ", "return", "7", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.AutoregressiveWOCM.__getitem__": [[450, 468], ["threed_front_dataset.Autoregressive.__getitem__", "numpy.random.randint", "super().__getitem__.items"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.AutoregressiveWOCM.__getitem__"], ["    ", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_params", "=", "super", "(", ")", ".", "__getitem__", "(", "idx", ")", "\n", "\n", "# Split the boxes and generate input sequences and target boxes", "\n", "L", ",", "C", "=", "sample_params", "[", "\"class_labels\"", "]", ".", "shape", "\n", "n_boxes", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "L", "+", "1", ")", "\n", "\n", "for", "k", ",", "v", "in", "sample_params", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "==", "\"room_layout\"", "or", "k", "==", "\"length\"", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "if", "\"_tr\"", "in", "k", ":", "\n", "                    ", "sample_params", "[", "k", "]", "=", "v", "[", "n_boxes", "]", "\n", "", "else", ":", "\n", "                    ", "sample_params", "[", "k", "]", "=", "v", "[", ":", "n_boxes", "]", "\n", "", "", "", "sample_params", "[", "\"length\"", "]", "=", "n_boxes", "\n", "\n", "return", "sample_params", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.dataset_encoding_factory": [[470, 535], ["isinstance", "threed_front_dataset.Scale", "threed_front_dataset.OrderedDataset", "threed_front_dataset.BoxOrderedDataset", "threed_front_dataset.RoomLayoutEncoder", "threed_front_dataset.ClassLabelsEncoder", "threed_front_dataset.TranslationEncoder", "threed_front_dataset.SizeEncoder", "threed_front_dataset.AngleEncoder", "threed_front_dataset.DatasetCollection", "threed_front_dataset.DatasetCollection", "threed_front_dataset.CachedDatasetCollection", "threed_front_dataset.AutoregressiveWOCM", "print", "threed_front_dataset.RotationAugmentation", "threed_front_dataset.Permutation", "threed_front_dataset.AutoregressiveWOCM", "NotImplementedError", "print", "threed_front_dataset.Jitter"], "function", ["None"], ["", "", "def", "dataset_encoding_factory", "(", "\n", "name", ",", "\n", "dataset", ",", "\n", "augmentations", "=", "None", ",", "\n", "box_ordering", "=", "None", "\n", ")", ":", "\n", "# NOTE: The ordering might change after augmentations so really it should", "\n", "#       be done after the augmentations. For class frequencies it is fine", "\n", "#       though.", "\n", "    ", "if", "\"cached\"", "in", "name", ":", "\n", "        ", "dataset_collection", "=", "OrderedDataset", "(", "\n", "CachedDatasetCollection", "(", "dataset", ")", ",", "\n", "[", "\"class_labels\"", ",", "\"translations\"", ",", "\"sizes\"", ",", "\"angles\"", "]", ",", "\n", "box_ordering", "=", "box_ordering", "\n", ")", "\n", "", "else", ":", "\n", "        ", "box_ordered_dataset", "=", "BoxOrderedDataset", "(", "\n", "dataset", ",", "\n", "box_ordering", "\n", ")", "\n", "room_layout", "=", "RoomLayoutEncoder", "(", "box_ordered_dataset", ")", "\n", "class_labels", "=", "ClassLabelsEncoder", "(", "box_ordered_dataset", ")", "\n", "translations", "=", "TranslationEncoder", "(", "box_ordered_dataset", ")", "\n", "sizes", "=", "SizeEncoder", "(", "box_ordered_dataset", ")", "\n", "angles", "=", "AngleEncoder", "(", "box_ordered_dataset", ")", "\n", "\n", "dataset_collection", "=", "DatasetCollection", "(", "\n", "room_layout", ",", "\n", "class_labels", ",", "\n", "translations", ",", "\n", "sizes", ",", "\n", "angles", "\n", ")", "\n", "\n", "", "if", "name", "==", "\"basic\"", ":", "\n", "        ", "return", "DatasetCollection", "(", "\n", "class_labels", ",", "\n", "translations", ",", "\n", "sizes", ",", "\n", "angles", "\n", ")", "\n", "\n", "", "if", "isinstance", "(", "augmentations", ",", "list", ")", ":", "\n", "        ", "for", "aug_type", "in", "augmentations", ":", "\n", "            ", "if", "aug_type", "==", "\"rotations\"", ":", "\n", "                ", "print", "(", "\"Applying rotation augmentations\"", ")", "\n", "dataset_collection", "=", "RotationAugmentation", "(", "dataset_collection", ")", "\n", "", "elif", "aug_type", "==", "\"jitter\"", ":", "\n", "                ", "print", "(", "\"Applying jittering augmentations\"", ")", "\n", "dataset_collection", "=", "Jitter", "(", "dataset_collection", ")", "\n", "\n", "# Scale the input", "\n", "", "", "", "dataset_collection", "=", "Scale", "(", "dataset_collection", ")", "\n", "if", "\"eval\"", "in", "name", ":", "\n", "        ", "return", "dataset_collection", "\n", "", "elif", "\"wocm_no_prm\"", "in", "name", ":", "\n", "        ", "return", "AutoregressiveWOCM", "(", "dataset_collection", ")", "\n", "", "elif", "\"wocm\"", "in", "name", ":", "\n", "        ", "dataset_collection", "=", "Permutation", "(", "\n", "dataset_collection", ",", "\n", "[", "\"class_labels\"", ",", "\"translations\"", ",", "\"sizes\"", ",", "\"angles\"", "]", "\n", ")", "\n", "return", "AutoregressiveWOCM", "(", "dataset_collection", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Asset.label": [[58, 61], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "label", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "category", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ModelInfo.__init__": [[71, 80], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model_info_data", ")", ":", "\n", "        ", "self", ".", "model_info_data", "=", "model_info_data", "\n", "self", ".", "_model_info", "=", "None", "\n", "# List to keep track of the different styles, themes", "\n", "self", ".", "_styles", "=", "[", "]", "\n", "self", ".", "_themes", "=", "[", "]", "\n", "self", ".", "_categories", "=", "[", "]", "\n", "self", ".", "_super_categories", "=", "[", "]", "\n", "self", ".", "_materials", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ModelInfo.model_info": [[81, 121], ["threed_front_scene.Asset", "threed_front_scene.ModelInfo._styles.append", "threed_front_scene.ModelInfo._themes.append", "threed_front_scene.ModelInfo._super_categories.append", "threed_front_scene.ModelInfo._categories.append", "threed_front_scene.ModelInfo._materials.append", "m[].lower().replace", "m[].lower().replace", "m[].lower", "m[].lower"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_info", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_model_info", "is", "None", ":", "\n", "            ", "self", ".", "_model_info", "=", "{", "}", "\n", "# Create a dictionary of all models/assets in the dataset", "\n", "for", "m", "in", "self", ".", "model_info_data", ":", "\n", "# Keep track of the different styles", "\n", "                ", "if", "m", "[", "\"style\"", "]", "not", "in", "self", ".", "_styles", "and", "m", "[", "\"style\"", "]", "is", "not", "None", ":", "\n", "                    ", "self", ".", "_styles", ".", "append", "(", "m", "[", "\"style\"", "]", ")", "\n", "# Keep track of the different themes", "\n", "", "if", "m", "[", "\"theme\"", "]", "not", "in", "self", ".", "_themes", "and", "m", "[", "\"theme\"", "]", "is", "not", "None", ":", "\n", "                    ", "self", ".", "_themes", ".", "append", "(", "m", "[", "\"theme\"", "]", ")", "\n", "# Keep track of the different super-categories", "\n", "", "if", "m", "[", "\"super-category\"", "]", "not", "in", "self", ".", "_super_categories", "and", "m", "[", "\"super-category\"", "]", "is", "not", "None", ":", "\n", "                    ", "self", ".", "_super_categories", ".", "append", "(", "m", "[", "\"super-category\"", "]", ")", "\n", "# Keep track of the different categories", "\n", "", "if", "m", "[", "\"category\"", "]", "not", "in", "self", ".", "_categories", "and", "m", "[", "\"category\"", "]", "is", "not", "None", ":", "\n", "                    ", "self", ".", "_categories", ".", "append", "(", "m", "[", "\"category\"", "]", ")", "\n", "# Keep track of the different categories", "\n", "", "if", "m", "[", "\"material\"", "]", "not", "in", "self", ".", "_materials", "and", "m", "[", "\"material\"", "]", "is", "not", "None", ":", "\n", "                    ", "self", ".", "_materials", ".", "append", "(", "m", "[", "\"material\"", "]", ")", "\n", "\n", "", "super_cat", "=", "\"unknown_super-category\"", "\n", "cat", "=", "\"unknown_category\"", "\n", "\n", "if", "m", "[", "\"super-category\"", "]", "is", "not", "None", ":", "\n", "                    ", "super_cat", "=", "m", "[", "\"super-category\"", "]", ".", "lower", "(", ")", ".", "replace", "(", "\" / \"", ",", "\"/\"", ")", "\n", "\n", "", "if", "m", "[", "\"category\"", "]", "is", "not", "None", ":", "\n", "                    ", "cat", "=", "m", "[", "\"category\"", "]", ".", "lower", "(", ")", ".", "replace", "(", "\" / \"", ",", "\"/\"", ")", "\n", "\n", "", "self", ".", "_model_info", "[", "m", "[", "\"model_id\"", "]", "]", "=", "Asset", "(", "\n", "super_cat", ",", "\n", "cat", ",", "\n", "m", "[", "\"style\"", "]", ",", "\n", "m", "[", "\"theme\"", "]", ",", "\n", "m", "[", "\"material\"", "]", "\n", ")", "\n", "\n", "", "", "return", "self", ".", "_model_info", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ModelInfo.styles": [[122, 125], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "styles", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_styles", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ModelInfo.themes": [[126, 129], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "themes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_themes", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ModelInfo.materials": [[130, 133], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "materials", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_materials", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ModelInfo.categories": [[134, 137], ["set", "s.lower().replace", "s.lower"], "methods", ["None"], ["", "@", "property", "\n", "def", "categories", "(", "self", ")", ":", "\n", "        ", "return", "set", "(", "[", "s", ".", "lower", "(", ")", ".", "replace", "(", "\" / \"", ",", "\"/\"", ")", "for", "s", "in", "self", ".", "_categories", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ModelInfo.super_categories": [[138, 143], ["set", "s.lower().replace", "s.lower"], "methods", ["None"], ["", "@", "property", "\n", "def", "super_categories", "(", "self", ")", ":", "\n", "        ", "return", "set", "(", "[", "\n", "s", ".", "lower", "(", ")", ".", "replace", "(", "\" / \"", ",", "\"/\"", ")", "\n", "for", "s", "in", "self", ".", "_super_categories", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ModelInfo.from_file": [[145, 151], ["cls", "open", "json.load"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_file", "(", "cls", ",", "path_to_model_info", ")", ":", "\n", "        ", "with", "open", "(", "path_to_model_info", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "model_info", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "return", "cls", "(", "model_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.BaseThreedFutureModel.__init__": [[154, 160], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_uid", ",", "model_jid", ",", "position", ",", "rotation", ",", "scale", ")", ":", "\n", "        ", "self", ".", "model_uid", "=", "model_uid", "\n", "self", ".", "model_jid", "=", "model_jid", "\n", "self", ".", "position", "=", "position", "\n", "self", ".", "rotation", "=", "rotation", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.BaseThreedFutureModel._transform": [[161, 175], ["numpy.cross", "numpy.arccos", "threed_front_scene.rotation_matrix", "vertices.dot.dot.dot", "numpy.dot", "numpy.sum", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.rotation_matrix"], ["", "def", "_transform", "(", "self", ",", "vertices", ")", ":", "\n", "# the following code is adapted and slightly simplified from the", "\n", "# 3D-Front toolbox (json2obj.py). It basically scales, rotates and", "\n", "# translates the model based on the model info.", "\n", "        ", "ref", "=", "[", "0", ",", "0", ",", "1", "]", "\n", "axis", "=", "np", ".", "cross", "(", "ref", ",", "self", ".", "rotation", "[", "1", ":", "]", ")", "\n", "theta", "=", "np", ".", "arccos", "(", "np", ".", "dot", "(", "ref", ",", "self", ".", "rotation", "[", "1", ":", "]", ")", ")", "*", "2", "\n", "vertices", "=", "vertices", "*", "self", ".", "scale", "\n", "if", "np", ".", "sum", "(", "axis", ")", "!=", "0", "and", "not", "np", ".", "isnan", "(", "theta", ")", ":", "\n", "            ", "R", "=", "rotation_matrix", "(", "axis", ",", "theta", ")", "\n", "vertices", "=", "vertices", ".", "dot", "(", "R", ".", "T", ")", "\n", "", "vertices", "+=", "self", ".", "position", "\n", "\n", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.BaseThreedFutureModel.mesh_renderable": [[176, 202], ["threed_front_scene.BaseThreedFutureModel.raw_model_transformed", "simple_3dviz.Mesh.from_faces", "simple_3dviz.renderables.textured_mesh.TexturedMesh.from_file", "simple_3dviz.renderables.textured_mesh.TexturedMesh.from_file.scale", "numpy.zeros", "numpy.cos", "numpy.sin", "numpy.cos", "simple_3dviz.renderables.textured_mesh.TexturedMesh.from_file.affine_transform", "simple_3dviz.renderables.textured_mesh.TexturedMesh.from_file.affine_transform", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureExtra.raw_model_transformed", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ModelInfo.from_file", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.Scale.scale"], ["", "def", "mesh_renderable", "(", "\n", "self", ",", "\n", "colors", "=", "(", "0.5", ",", "0.5", ",", "0.5", ",", "1.0", ")", ",", "\n", "offset", "=", "[", "[", "0", ",", "0", ",", "0", "]", "]", ",", "\n", "with_texture", "=", "False", "\n", ")", ":", "\n", "        ", "if", "not", "with_texture", ":", "\n", "            ", "m", "=", "self", ".", "raw_model_transformed", "(", "offset", ")", "\n", "return", "Mesh", ".", "from_faces", "(", "m", ".", "vertices", ",", "m", ".", "faces", ",", "colors", "=", "colors", ")", "\n", "", "else", ":", "\n", "            ", "m", "=", "TexturedMesh", ".", "from_file", "(", "self", ".", "raw_model_path", ")", "\n", "m", ".", "scale", "(", "self", ".", "scale", ")", "\n", "# Extract the predicted affine transformation to position the", "\n", "# mesh", "\n", "theta", "=", "self", ".", "z_angle", "\n", "R", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "R", "[", "0", ",", "0", "]", "=", "np", ".", "cos", "(", "theta", ")", "\n", "R", "[", "0", ",", "2", "]", "=", "-", "np", ".", "sin", "(", "theta", ")", "\n", "R", "[", "2", ",", "0", "]", "=", "np", ".", "sin", "(", "theta", ")", "\n", "R", "[", "2", ",", "2", "]", "=", "np", ".", "cos", "(", "theta", ")", "\n", "R", "[", "1", ",", "1", "]", "=", "1.", "\n", "\n", "# Apply the transformations in order to correctly position the mesh", "\n", "m", ".", "affine_transform", "(", "R", "=", "R", ",", "t", "=", "self", ".", "position", ")", "\n", "m", ".", "affine_transform", "(", "t", "=", "offset", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.__init__": [[205, 219], ["threed_front_scene.BaseThreedFutureModel.__init__"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model_uid", ",", "\n", "model_jid", ",", "\n", "model_info", ",", "\n", "position", ",", "\n", "rotation", ",", "\n", "scale", ",", "\n", "path_to_models", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_uid", ",", "model_jid", ",", "position", ",", "rotation", ",", "scale", ")", "\n", "self", ".", "model_info", "=", "model_info", "\n", "self", ".", "path_to_models", "=", "path_to_models", "\n", "self", ".", "_label", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.raw_model_path": [[220, 226], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_model_path", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "path_to_models", ",", "\n", "self", ".", "model_jid", ",", "\n", "\"raw_model.obj\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.texture_image_path": [[228, 234], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "texture_image_path", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "path_to_models", ",", "\n", "self", ".", "model_jid", ",", "\n", "\"texture.png\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.path_to_bbox_vertices": [[236, 242], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "path_to_bbox_vertices", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "path_to_models", ",", "\n", "self", ".", "model_jid", ",", "\n", "\"bbox_vertices.npy\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.raw_model": [[244, 259], ["trimesh.load", "pdb.set_trace", "print", "print"], "methods", ["None"], ["", "def", "raw_model", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "trimesh", ".", "load", "(", "\n", "self", ".", "raw_model_path", ",", "\n", "process", "=", "False", ",", "\n", "force", "=", "\"mesh\"", ",", "\n", "skip_materials", "=", "True", ",", "\n", "skip_texture", "=", "True", "\n", ")", "\n", "", "except", ":", "\n", "            ", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "print", "(", "\"Loading model failed\"", ",", "flush", "=", "True", ")", "\n", "print", "(", "self", ".", "raw_model_path", ",", "flush", "=", "True", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.raw_model_transformed": [[260, 266], ["threed_front_scene.ThreedFutureModel.raw_model", "numpy.array", "trimesh.Trimesh", "threed_front_scene.ThreedFutureModel._transform", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.raw_model", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.BaseThreedFutureModel._transform"], ["", "", "def", "raw_model_transformed", "(", "self", ",", "offset", "=", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ":", "\n", "        ", "model", "=", "self", ".", "raw_model", "(", ")", "\n", "faces", "=", "np", ".", "array", "(", "model", ".", "faces", ")", "\n", "vertices", "=", "self", ".", "_transform", "(", "np", ".", "array", "(", "model", ".", "vertices", ")", ")", "+", "offset", "\n", "\n", "return", "trimesh", ".", "Trimesh", "(", "vertices", ",", "faces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.centroid": [[267, 269], ["threed_front_scene.ThreedFutureModel.corners().mean", "threed_front_scene.ThreedFutureModel.corners"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.corners"], ["", "def", "centroid", "(", "self", ",", "offset", "=", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ":", "\n", "        ", "return", "self", ".", "corners", "(", "offset", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.size": [[270, 277], ["threed_front_scene.ThreedFutureModel.corners", "numpy.array", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.corners"], ["", "@", "cached_property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "corners", "=", "self", ".", "corners", "(", ")", "\n", "return", "np", ".", "array", "(", "[", "\n", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", "4", "]", "-", "corners", "[", "0", "]", ")", "**", "2", ")", ")", "/", "2", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", "2", "]", "-", "corners", "[", "0", "]", ")", "**", "2", ")", ")", "/", "2", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", "1", "]", "-", "corners", "[", "0", "]", ")", "**", "2", ")", ")", "/", "2", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.bottom_center": [[279, 283], ["threed_front_scene.ThreedFutureModel.centroid", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.centroid"], ["", "def", "bottom_center", "(", "self", ",", "offset", "=", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ":", "\n", "        ", "centroid", "=", "self", ".", "centroid", "(", "offset", ")", "\n", "size", "=", "self", ".", "size", "\n", "return", "np", ".", "array", "(", "[", "centroid", "[", "0", "]", ",", "centroid", "[", "1", "]", "-", "size", "[", "1", "]", ",", "centroid", "[", "2", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.bottom_size": [[284, 287], ["None"], "methods", ["None"], ["", "@", "cached_property", "\n", "def", "bottom_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "*", "[", "1", ",", "2", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.z_angle": [[288, 306], ["numpy.cross", "numpy.arccos", "numpy.isnan", "numpy.dot", "numpy.sign", "numpy.dot", "numpy.sum"], "methods", ["None"], ["", "@", "cached_property", "\n", "def", "z_angle", "(", "self", ")", ":", "\n", "# See BaseThreedFutureModel._transform for the origin of the following", "\n", "# code.", "\n", "        ", "ref", "=", "[", "0", ",", "0", ",", "1", "]", "\n", "axis", "=", "np", ".", "cross", "(", "ref", ",", "self", ".", "rotation", "[", "1", ":", "]", ")", "\n", "theta", "=", "np", ".", "arccos", "(", "np", ".", "dot", "(", "ref", ",", "self", ".", "rotation", "[", "1", ":", "]", ")", ")", "*", "2", "\n", "\n", "if", "np", ".", "sum", "(", "axis", ")", "==", "0", "or", "np", ".", "isnan", "(", "theta", ")", ":", "\n", "            ", "return", "0", "\n", "\n", "", "assert", "np", ".", "dot", "(", "axis", ",", "[", "1", ",", "0", ",", "1", "]", ")", "==", "0", "\n", "assert", "0", "<=", "theta", "<=", "2", "*", "np", ".", "pi", "\n", "\n", "if", "theta", ">=", "np", ".", "pi", ":", "\n", "            ", "theta", "=", "theta", "-", "2", "*", "np", ".", "pi", "\n", "\n", "", "return", "np", ".", "sign", "(", "axis", "[", "1", "]", ")", "*", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.label": [[313, 316], ["None"], "methods", ["None"], ["", "@", "label", ".", "setter", "\n", "def", "label", "(", "self", ",", "_label", ")", ":", "\n", "        ", "self", ".", "_label", "=", "_label", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.corners": [[317, 325], ["threed_front_scene.ThreedFutureModel._transform", "numpy.load", "numpy.array", "numpy.save", "threed_front_scene.ThreedFutureModel.raw_model"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.BaseThreedFutureModel._transform", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.raw_model"], ["", "def", "corners", "(", "self", ",", "offset", "=", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "bbox_vertices", "=", "np", ".", "load", "(", "self", ".", "path_to_bbox_vertices", ",", "mmap_mode", "=", "\"r\"", ")", "\n", "", "except", ":", "\n", "            ", "bbox_vertices", "=", "np", ".", "array", "(", "self", ".", "raw_model", "(", ")", ".", "bounding_box", ".", "vertices", ")", "\n", "np", ".", "save", "(", "self", ".", "path_to_bbox_vertices", ",", "bbox_vertices", ")", "\n", "", "c", "=", "self", ".", "_transform", "(", "bbox_vertices", ")", "\n", "return", "c", "+", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.origin_renderable": [[326, 343], ["threed_front_scene.ThreedFutureModel.corners", "simple_3dviz.Lines", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.corners"], ["", "def", "origin_renderable", "(", "self", ",", "offset", "=", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ":", "\n", "        ", "corners", "=", "self", ".", "corners", "(", "offset", ")", "\n", "return", "Lines", "(", "\n", "[", "\n", "corners", "[", "0", "]", ",", "corners", "[", "4", "]", ",", "\n", "corners", "[", "0", "]", ",", "corners", "[", "2", "]", ",", "\n", "corners", "[", "0", "]", ",", "corners", "[", "1", "]", "\n", "]", ",", "\n", "colors", "=", "np", ".", "array", "(", "[", "\n", "[", "1.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ",", "\n", "[", "1.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ",", "\n", "[", "0.0", ",", "1.0", ",", "0.0", ",", "1.0", "]", ",", "\n", "[", "0.0", ",", "1.0", ",", "0.0", ",", "1.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "1.0", ",", "1.0", "]", "\n", "]", ")", ",", "\n", "width", "=", "0.02", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.bbox_corners_renderable": [[345, 349], ["simple_3dviz.Spherecloud", "threed_front_scene.ThreedFutureModel.corners"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.corners"], ["", "def", "bbox_corners_renderable", "(", "\n", "self", ",", "sizes", "=", "0.1", ",", "colors", "=", "(", "1", ",", "0", ",", "0", ")", ",", "offset", "=", "[", "[", "0", ",", "0", ",", "0", "]", "]", "\n", ")", ":", "\n", "        ", "return", "Spherecloud", "(", "self", ".", "corners", "(", "offset", ")", ",", "sizes", "=", "sizes", ",", "colors", "=", "colors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.bbox_renderable": [[350, 365], ["numpy.zeros", "numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "simple_3dviz.Mesh.from_superquadrics", "numpy.array", "numpy.ones", "numpy.array", "numpy.sin", "threed_front_scene.ThreedFutureModel.centroid"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.centroid"], ["", "def", "bbox_renderable", "(", "\n", "self", ",", "colors", "=", "(", "0.00392157", ",", "0.", ",", "0.40392157", ",", "1.", ")", ",", "offset", "=", "[", "[", "0", ",", "0", ",", "0", "]", "]", "\n", ")", ":", "\n", "        ", "alpha", "=", "np", ".", "array", "(", "self", ".", "size", ")", "[", "None", "]", "\n", "epsilon", "=", "np", ".", "ones", "(", "(", "1", ",", "2", ")", ")", "*", "0.1", "\n", "translation", "=", "np", ".", "array", "(", "self", ".", "centroid", "(", "offset", ")", ")", "[", "None", "]", "\n", "R", "=", "np", ".", "zeros", "(", "(", "1", ",", "3", ",", "3", ")", ")", "\n", "theta", "=", "np", ".", "array", "(", "self", ".", "z_angle", ")", "\n", "R", "[", ":", ",", "0", ",", "0", "]", "=", "np", ".", "cos", "(", "theta", ")", "\n", "R", "[", ":", ",", "0", ",", "2", "]", "=", "-", "np", ".", "sin", "(", "theta", ")", "\n", "R", "[", ":", ",", "2", ",", "0", "]", "=", "np", ".", "sin", "(", "theta", ")", "\n", "R", "[", ":", ",", "2", ",", "2", "]", "=", "np", ".", "cos", "(", "theta", ")", "\n", "R", "[", ":", ",", "1", ",", "1", "]", "=", "1.", "\n", "\n", "return", "Mesh", ".", "from_superquadrics", "(", "alpha", ",", "epsilon", ",", "translation", ",", "R", ",", "colors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.show": [[366, 376], ["threed_front_scene.ThreedFutureModel.mesh_renderable", "threed_front_scene.ThreedFutureModel.show"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.BaseThreedFutureModel.mesh_renderable", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.show"], ["", "def", "show", "(", "\n", "self", ",", "\n", "behaviours", "=", "[", "LightToCamera", "(", ")", "]", ",", "\n", "with_bbox_corners", "=", "False", ",", "\n", "offset", "=", "[", "[", "0", ",", "0", ",", "0", "]", "]", "\n", ")", ":", "\n", "        ", "renderables", "=", "self", ".", "mesh_renderable", "(", "offset", "=", "offset", ")", "\n", "if", "with_bbox_corners", ":", "\n", "            ", "renderables", "+=", "[", "self", ".", "bbox_corners_renderable", "(", "offset", "=", "offset", ")", "]", "\n", "", "show", "(", "renderables", ",", "behaviours", "=", "behaviours", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.one_hot_label": [[377, 379], ["numpy.eye", "len", "threed_front_scene.ThreedFutureModel.int_label"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.int_label"], ["", "def", "one_hot_label", "(", "self", ",", "all_labels", ")", ":", "\n", "        ", "return", "np", ".", "eye", "(", "len", "(", "all_labels", ")", ")", "[", "self", ".", "int_label", "(", "all_labels", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.int_label": [[380, 382], ["all_labels.index"], "methods", ["None"], ["", "def", "int_label", "(", "self", ",", "all_labels", ")", ":", "\n", "        ", "return", "all_labels", ".", "index", "(", "self", ".", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.copy_from_other_model": [[383, 395], ["threed_front_scene.ThreedFutureModel"], "methods", ["None"], ["", "def", "copy_from_other_model", "(", "self", ",", "other_model", ")", ":", "\n", "        ", "model", "=", "ThreedFutureModel", "(", "\n", "model_uid", "=", "other_model", ".", "model_uid", ",", "\n", "model_jid", "=", "other_model", ".", "model_jid", ",", "\n", "model_info", "=", "other_model", ".", "model_info", ",", "\n", "position", "=", "self", ".", "position", ",", "\n", "rotation", "=", "self", ".", "rotation", ",", "\n", "scale", "=", "other_model", ".", "scale", ",", "\n", "path_to_models", "=", "self", ".", "path_to_models", "\n", ")", "\n", "model", ".", "label", "=", "self", ".", "label", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureExtra.__init__": [[398, 413], ["threed_front_scene.BaseThreedFutureModel.__init__"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model_uid", ",", "\n", "model_jid", ",", "\n", "xyz", ",", "\n", "faces", ",", "\n", "model_type", ",", "\n", "position", ",", "\n", "rotation", ",", "\n", "scale", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_uid", ",", "model_jid", ",", "position", ",", "rotation", ",", "scale", ")", "\n", "self", ".", "xyz", "=", "xyz", "\n", "self", ".", "faces", "=", "faces", "\n", "self", ".", "model_type", "=", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureExtra.raw_model_transformed": [[414, 418], ["numpy.array", "trimesh.Trimesh", "threed_front_scene.ThreedFutureExtra._transform", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.BaseThreedFutureModel._transform"], ["", "def", "raw_model_transformed", "(", "self", ",", "offset", "=", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ":", "\n", "        ", "vertices", "=", "self", ".", "_transform", "(", "np", ".", "array", "(", "self", ".", "xyz", ")", ")", "+", "offset", "\n", "faces", "=", "np", ".", "array", "(", "self", ".", "faces", ")", "\n", "return", "trimesh", ".", "Trimesh", "(", "vertices", ",", "faces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureExtra.show": [[419, 424], ["threed_front_scene.ThreedFutureExtra.mesh_renderable", "threed_front_scene.ThreedFutureExtra.show"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.BaseThreedFutureModel.mesh_renderable", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.show"], ["", "def", "show", "(", "\n", "self", ",", "behaviours", "=", "[", "LightToCamera", "(", ")", ",", "SnapshotOnKey", "(", ")", "]", ",", "offset", "=", "[", "[", "0", ",", "0", ",", "0", "]", "]", "\n", ")", ":", "\n", "        ", "renderables", "=", "self", ".", "mesh_renderable", "(", "offset", "=", "offset", ")", "\n", "show", "(", "renderables", ",", "behaviours", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.__init__": [[427, 443], ["common.BaseScene.__init__", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "scene_id", ",", "scene_type", ",", "bboxes", ",", "extras", ",", "json_path", ",", "\n", "path_to_room_masks_dir", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "scene_id", ",", "scene_type", ",", "bboxes", ")", "\n", "self", ".", "json_path", "=", "json_path", "\n", "self", ".", "extras", "=", "extras", "\n", "\n", "self", ".", "uid", "=", "\"_\"", ".", "join", "(", "[", "self", ".", "json_path", ",", "scene_id", "]", ")", "\n", "self", ".", "path_to_room_masks_dir", "=", "path_to_room_masks_dir", "\n", "if", "path_to_room_masks_dir", "is", "not", "None", ":", "\n", "            ", "self", ".", "path_to_room_mask", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "path_to_room_masks_dir", ",", "self", ".", "uid", ",", "\"room_mask.png\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "path_to_room_mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.floor": [[444, 447], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "floor", "(", "self", ")", ":", "\n", "        ", "return", "[", "ei", "for", "ei", "in", "self", ".", "extras", "if", "ei", ".", "model_type", "==", "\"Floor\"", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.bbox": [[448, 455], ["functools.lru_cache", "numpy.empty", "numpy.vstack", "numpy.min", "numpy.max", "f.corners"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.corners"], ["", "@", "property", "\n", "@", "lru_cache", "(", "maxsize", "=", "512", ")", "\n", "def", "bbox", "(", "self", ")", ":", "\n", "        ", "corners", "=", "np", ".", "empty", "(", "(", "0", ",", "3", ")", ")", "\n", "for", "f", "in", "self", ".", "bboxes", ":", "\n", "            ", "corners", "=", "np", ".", "vstack", "(", "[", "corners", ",", "f", ".", "corners", "(", ")", "]", ")", "\n", "", "return", "np", ".", "min", "(", "corners", ",", "axis", "=", "0", ")", ",", "np", ".", "max", "(", "corners", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.bboxes_centroid": [[456, 460], ["None"], "methods", ["None"], ["", "@", "cached_property", "\n", "def", "bboxes_centroid", "(", "self", ")", ":", "\n", "        ", "a", ",", "b", "=", "self", ".", "bbox", "\n", "return", "(", "a", "+", "b", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.furniture_in_room": [[461, 464], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "furniture_in_room", "(", "self", ")", ":", "\n", "        ", "return", "[", "f", ".", "label", "for", "f", "in", "self", ".", "bboxes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.floor_plan": [[465, 480], ["functools.reduce", "numpy.vstack", "numpy.vstack", "numpy.copy", "numpy.copy", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "floor_plan", "(", "self", ")", ":", "\n", "        ", "def", "cat_mesh", "(", "m1", ",", "m2", ")", ":", "\n", "            ", "v1", ",", "f1", "=", "m1", "\n", "v2", ",", "f2", "=", "m2", "\n", "v", "=", "np", ".", "vstack", "(", "[", "v1", ",", "v2", "]", ")", "\n", "f", "=", "np", ".", "vstack", "(", "[", "f1", ",", "f2", "+", "len", "(", "v1", ")", "]", ")", "\n", "return", "v", ",", "f", "\n", "\n", "# Compute the full floor plan", "\n", "", "vertices", ",", "faces", "=", "reduce", "(", "\n", "cat_mesh", ",", "\n", "(", "(", "ei", ".", "xyz", ",", "ei", ".", "faces", ")", "for", "ei", "in", "self", ".", "extras", "if", "ei", ".", "model_type", "==", "\"Floor\"", ")", "\n", ")", "\n", "return", "np", ".", "copy", "(", "vertices", ")", ",", "np", ".", "copy", "(", "faces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.floor_plan_bbox": [[481, 485], ["numpy.min", "numpy.max"], "methods", ["None"], ["", "@", "cached_property", "\n", "def", "floor_plan_bbox", "(", "self", ")", ":", "\n", "        ", "vertices", ",", "faces", "=", "self", ".", "floor_plan", "\n", "return", "np", ".", "min", "(", "vertices", ",", "axis", "=", "0", ")", ",", "np", ".", "max", "(", "vertices", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.floor_plan_centroid": [[486, 490], ["None"], "methods", ["None"], ["", "@", "cached_property", "\n", "def", "floor_plan_centroid", "(", "self", ")", ":", "\n", "        ", "a", ",", "b", "=", "self", ".", "floor_plan_bbox", "\n", "return", "(", "a", "+", "b", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.centroid": [[491, 494], ["None"], "methods", ["None"], ["", "@", "cached_property", "\n", "def", "centroid", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "floor_plan_centroid", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.count_furniture_in_room": [[495, 498], ["collections.Counter"], "methods", ["None"], ["", "@", "property", "\n", "def", "count_furniture_in_room", "(", "self", ")", ":", "\n", "        ", "return", "Counter", "(", "self", ".", "furniture_in_room", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.room_mask": [[499, 502], ["threed_front_scene.Room.room_mask_rotated"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.room_mask_rotated"], ["", "@", "property", "\n", "def", "room_mask", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "room_mask_rotated", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.room_mask_rotated": [[503, 510], ["PIL.Image.open().convert", "im.rotate.rotate.rotate", "numpy.asarray().astype", "numpy.float32", "PIL.Image.open", "numpy.asarray"], "methods", ["None"], ["", "def", "room_mask_rotated", "(", "self", ",", "angle", "=", "0", ")", ":", "\n", "# The angle is in rad", "\n", "        ", "im", "=", "Image", ".", "open", "(", "self", ".", "path_to_room_mask", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "# Downsample the room_mask image by applying bilinear interpolation", "\n", "im", "=", "im", ".", "rotate", "(", "angle", "*", "180", "/", "np", ".", "pi", ",", "resample", "=", "Image", ".", "BICUBIC", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "im", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "np", ".", "float32", "(", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.category_counts": [[511, 522], ["print", "len", "class_labels.index"], "methods", ["None"], ["", "def", "category_counts", "(", "self", ",", "class_labels", ")", ":", "\n", "        ", "\"\"\"List of category counts in the room\n        \"\"\"", "\n", "print", "(", "class_labels", ")", "\n", "if", "\"start\"", "in", "class_labels", "and", "\"end\"", "in", "class_labels", ":", "\n", "            ", "class_labels", "=", "class_labels", "[", ":", "-", "2", "]", "\n", "", "category_counts", "=", "[", "0", "]", "*", "len", "(", "class_labels", ")", "\n", "\n", "for", "di", "in", "self", ".", "furniture_in_room", ":", "\n", "            ", "category_counts", "[", "class_labels", ".", "index", "(", "di", ")", "]", "+=", "1", "\n", "", "return", "category_counts", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.ordered_bboxes_with_centroid": [[523, 529], ["numpy.array", "numpy.lexsort", "f.centroid"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.centroid"], ["", "def", "ordered_bboxes_with_centroid", "(", "self", ")", ":", "\n", "        ", "centroids", "=", "np", ".", "array", "(", "[", "f", ".", "centroid", "(", "-", "self", ".", "centroid", ")", "for", "f", "in", "self", ".", "bboxes", "]", ")", "\n", "ordering", "=", "np", ".", "lexsort", "(", "centroids", ".", "T", ")", "\n", "ordered_bboxes", "=", "[", "self", ".", "bboxes", "[", "i", "]", "for", "i", "in", "ordering", "]", "\n", "\n", "return", "ordered_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.ordered_bboxes_with_class_labels": [[530, 539], ["numpy.array", "numpy.array", "numpy.lexsort", "f.centroid", "numpy.hstack", "f.int_label"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.centroid", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.int_label"], ["", "def", "ordered_bboxes_with_class_labels", "(", "self", ",", "all_labels", ")", ":", "\n", "        ", "centroids", "=", "np", ".", "array", "(", "[", "f", ".", "centroid", "(", "-", "self", ".", "centroid", ")", "for", "f", "in", "self", ".", "bboxes", "]", ")", "\n", "int_labels", "=", "np", ".", "array", "(", "\n", "[", "[", "f", ".", "int_label", "(", "all_labels", ")", "]", "for", "f", "in", "self", ".", "bboxes", "]", "\n", ")", "\n", "ordering", "=", "np", ".", "lexsort", "(", "np", ".", "hstack", "(", "[", "centroids", ",", "int_labels", "]", ")", ".", "T", ")", "\n", "ordered_bboxes", "=", "[", "self", ".", "bboxes", "[", "i", "]", "for", "i", "in", "ordering", "]", "\n", "\n", "return", "ordered_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.ordered_bboxes_with_class_frequencies": [[540, 549], ["numpy.array", "numpy.array", "numpy.lexsort", "f.centroid", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.centroid"], ["", "def", "ordered_bboxes_with_class_frequencies", "(", "self", ",", "class_order", ")", ":", "\n", "        ", "centroids", "=", "np", ".", "array", "(", "[", "f", ".", "centroid", "(", "-", "self", ".", "centroid", ")", "for", "f", "in", "self", ".", "bboxes", "]", ")", "\n", "label_order", "=", "np", ".", "array", "(", "[", "\n", "[", "class_order", "[", "f", ".", "label", "]", "]", "for", "f", "in", "self", ".", "bboxes", "\n", "]", ")", "\n", "ordering", "=", "np", ".", "lexsort", "(", "np", ".", "hstack", "(", "[", "centroids", ",", "label_order", "]", ")", ".", "T", ")", "\n", "ordered_bboxes", "=", "[", "self", ".", "bboxes", "[", "i", "]", "for", "i", "in", "ordering", "[", ":", ":", "-", "1", "]", "]", "\n", "\n", "return", "ordered_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.furniture_renderables": [[550, 589], ["f.mesh_renderable", "f.origin_renderable", "simple_3dviz.Mesh.from_faces", "f.bbox_corners_renderable", "f.bbox_renderable"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.BaseThreedFutureModel.mesh_renderable", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.origin_renderable", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.bbox_corners_renderable", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.bbox_renderable"], ["", "def", "furniture_renderables", "(", "\n", "self", ",", "\n", "colors", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "with_bbox_corners", "=", "False", ",", "\n", "with_origin", "=", "False", ",", "\n", "with_bboxes", "=", "False", ",", "\n", "with_objects_offset", "=", "False", ",", "\n", "with_floor_plan_offset", "=", "False", ",", "\n", "with_floor_plan", "=", "False", ",", "\n", "with_texture", "=", "False", "\n", ")", ":", "\n", "        ", "if", "with_objects_offset", ":", "\n", "            ", "offset", "=", "-", "self", ".", "bboxes_centroid", "\n", "", "elif", "with_floor_plan_offset", ":", "\n", "            ", "offset", "=", "-", "self", ".", "floor_plan_centroid", "\n", "", "else", ":", "\n", "            ", "offset", "=", "[", "[", "0", ",", "0", ",", "0", "]", "]", "\n", "\n", "", "renderables", "=", "[", "\n", "f", ".", "mesh_renderable", "(", "\n", "colors", "=", "colors", ",", "offset", "=", "offset", ",", "with_texture", "=", "with_texture", "\n", ")", "\n", "for", "f", "in", "self", ".", "bboxes", "\n", "]", "\n", "if", "with_origin", ":", "\n", "            ", "renderables", "+=", "[", "f", ".", "origin_renderable", "(", "offset", ")", "for", "f", "in", "self", ".", "bboxes", "]", "\n", "", "if", "with_bbox_corners", ":", "\n", "            ", "for", "f", "in", "self", ".", "bboxes", ":", "\n", "                ", "renderables", "+=", "[", "f", ".", "bbox_corners_renderable", "(", "offset", "=", "offset", ")", "]", "\n", "", "", "if", "with_bboxes", ":", "\n", "            ", "for", "f", "in", "self", ".", "bboxes", ":", "\n", "                ", "renderables", "+=", "[", "f", ".", "bbox_renderable", "(", "offset", "=", "offset", ")", "]", "\n", "", "", "if", "with_floor_plan", ":", "\n", "            ", "vertices", ",", "faces", "=", "self", ".", "floor_plan", "\n", "vertices", "=", "vertices", "+", "offset", "\n", "renderables", "+=", "[", "\n", "Mesh", ".", "from_faces", "(", "vertices", ",", "faces", ",", "colors", "=", "(", "0.8", ",", "0.8", ",", "0.8", ",", "0.6", ")", ")", "\n", "]", "\n", "", "return", "renderables", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.show": [[590, 616], ["threed_front_scene.Room.furniture_renderables", "threed_front_scene.Room.show"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.furniture_renderables", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.show"], ["", "def", "show", "(", "\n", "self", ",", "\n", "behaviours", "=", "[", "LightToCamera", "(", ")", ",", "SnapshotOnKey", "(", ")", "]", ",", "\n", "with_bbox_corners", "=", "False", ",", "\n", "with_bboxes", "=", "False", ",", "\n", "with_objects_offset", "=", "False", ",", "\n", "with_floor_plan_offset", "=", "False", ",", "\n", "with_floor_plan", "=", "False", ",", "\n", "background", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ",", "\n", "camera_target", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "camera_position", "=", "(", "-", "2", ",", "-", "2", ",", "-", "2", ")", ",", "\n", "up_vector", "=", "(", "0", ",", "0", ",", "1", ")", ",", "\n", "window_size", "=", "(", "512", ",", "512", ")", "\n", ")", ":", "\n", "        ", "renderables", "=", "self", ".", "furniture_renderables", "(", "\n", "with_bbox_corners", "=", "with_bbox_corners", ",", "\n", "with_bboxes", "=", "with_bboxes", ",", "\n", "with_objects_offset", "=", "with_objects_offset", ",", "\n", "with_floor_plan_offset", "=", "with_floor_plan_offset", ",", "\n", "with_floor_plan", "=", "with_floor_plan", "\n", ")", "\n", "show", "(", "\n", "renderables", ",", "behaviours", "=", "behaviours", ",", "\n", "size", "=", "window_size", ",", "camera_position", "=", "camera_position", ",", "\n", "camera_target", "=", "camera_target", ",", "up_vector", "=", "up_vector", ",", "\n", "background", "=", "background", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.Room.augment_room": [[618, 641], ["numpy.random.choice", "objects_dataset.get_closest_furniture_to_box", "numpy.random.choice.copy_from_other_model", "threed_front_scene.Room", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_future_dataset.ThreedFutureDataset.get_closest_furniture_to_box", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.copy_from_other_model"], ["", "def", "augment_room", "(", "self", ",", "objects_dataset", ")", ":", "\n", "        ", "bboxes", "=", "self", ".", "bboxes", "\n", "# Randomly pick an asset to be augmented", "\n", "bi", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "bboxes", ")", "\n", "query_label", "=", "bi", ".", "label", "\n", "query_size", "=", "bi", ".", "size", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "0.02", ")", "\n", "# Retrieve the new asset based on the size of the picked asset", "\n", "furniture", "=", "objects_dataset", ".", "get_closest_furniture_to_box", "(", "\n", "query_label", ",", "query_size", "\n", ")", "\n", "bi_retrieved", "=", "bi", ".", "copy_from_other_model", "(", "furniture", ")", "\n", "\n", "new_bboxes", "=", "[", "\n", "box", "for", "box", "in", "bboxes", "if", "not", "box", "==", "bi", "\n", "]", "+", "[", "bi_retrieved", "]", "\n", "\n", "return", "Room", "(", "\n", "scene_id", "=", "self", ".", "scene_id", "+", "\"_augm\"", ",", "\n", "scene_type", "=", "self", ".", "scene_type", ",", "\n", "bboxes", "=", "new_bboxes", ",", "\n", "extras", "=", "self", ".", "extras", ",", "\n", "json_path", "=", "self", ".", "json_path", ",", "\n", "path_to_room_masks_dir", "=", "self", ".", "path_to_room_masks_dir", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.rotation_matrix": [[36, 47], ["numpy.asarray", "numpy.cos", "numpy.array", "numpy.sqrt", "numpy.sin", "numpy.dot"], "function", ["None"], ["", "def", "rotation_matrix", "(", "axis", ",", "theta", ")", ":", "\n", "    ", "\"\"\"Axis-angle rotation matrix from 3D-Front-Toolbox.\"\"\"", "\n", "axis", "=", "np", ".", "asarray", "(", "axis", ")", "\n", "axis", "=", "axis", "/", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "axis", ",", "axis", ")", ")", "\n", "a", "=", "np", ".", "cos", "(", "theta", "/", "2.0", ")", "\n", "b", ",", "c", ",", "d", "=", "-", "axis", "*", "np", ".", "sin", "(", "theta", "/", "2.0", ")", "\n", "aa", ",", "bb", ",", "cc", ",", "dd", "=", "a", "*", "a", ",", "b", "*", "b", ",", "c", "*", "c", ",", "d", "*", "d", "\n", "bc", ",", "ad", ",", "ac", ",", "ab", ",", "bd", ",", "cd", "=", "b", "*", "c", ",", "a", "*", "d", ",", "a", "*", "c", ",", "a", "*", "b", ",", "b", "*", "d", ",", "c", "*", "d", "\n", "return", "np", ".", "array", "(", "[", "[", "aa", "+", "bb", "-", "cc", "-", "dd", ",", "2", "*", "(", "bc", "+", "ad", ")", ",", "2", "*", "(", "bd", "-", "ac", ")", "]", ",", "\n", "[", "2", "*", "(", "bc", "-", "ad", ")", ",", "aa", "+", "cc", "-", "bb", "-", "dd", ",", "2", "*", "(", "cd", "+", "ab", ")", "]", ",", "\n", "[", "2", "*", "(", "bd", "+", "ac", ")", ",", "2", "*", "(", "cd", "-", "ab", ")", ",", "aa", "+", "dd", "-", "bb", "-", "cc", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_raw_dataset": [[18, 45], ["splits_builder.CSVSplitsBuilder", "splits_builder.CSVSplitsBuilder.get_splits", "threed_front.CachedThreedFront", "threed_front.ThreedFront.from_dataset_directory"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.splits_builder.SplitsBuilder.get_splits", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front.ThreedFront.from_dataset_directory"], [""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_dataset_raw_and_encoded": [[47, 63], ["__init__.get_raw_dataset", "threed_front_dataset.dataset_encoding_factory", "config.get", "config.get"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_raw_dataset", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_dataset.dataset_encoding_factory"], []], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_encoded_dataset": [[65, 76], ["__init__.get_dataset_raw_and_encoded"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.get_dataset_raw_and_encoded"], []], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.__init__.filter_function": [[78, 184], ["print", "splits_builder.CSVSplitsBuilder", "splits_builder.CSVSplitsBuilder.get_splits", "open", "set", "open", "set", "common.BaseDataset.filter_compose", "common.BaseDataset.with_room", "common.BaseDataset.at_least_boxes", "common.BaseDataset.at_most_boxes", "common.BaseDataset.with_object_types", "common.BaseDataset.with_generic_classes", "common.BaseDataset.with_valid_scene_ids", "common.BaseDataset.with_valid_bbox_jids", "common.BaseDataset.contains_object_types", "common.BaseDataset.room_smaller_than_along_axis", "common.BaseDataset.room_larger_than_along_axis", "common.BaseDataset.floor_plan_with_limits", "common.BaseDataset.without_box_types", "common.BaseDataset.with_scene_ids", "common.BaseDataset.filter_compose", "l.strip", "l.strip", "list", "common.BaseDataset.with_room", "common.BaseDataset.at_least_boxes", "common.BaseDataset.at_most_boxes", "common.BaseDataset.with_object_types", "common.BaseDataset.with_generic_classes", "common.BaseDataset.with_valid_scene_ids", "common.BaseDataset.with_valid_bbox_jids", "common.BaseDataset.room_smaller_than_along_axis", "common.BaseDataset.room_larger_than_along_axis", "common.BaseDataset.floor_plan_with_limits", "common.BaseDataset.without_box_types", "common.BaseDataset.with_scene_ids", "common.BaseDataset.filter_compose", "base.THREED_FRONT_BEDROOM_FURNITURE.keys", "list", "common.BaseDataset.with_room", "common.BaseDataset.at_least_boxes", "common.BaseDataset.at_most_boxes", "common.BaseDataset.with_object_types", "common.BaseDataset.with_generic_classes", "common.BaseDataset.with_valid_scene_ids", "common.BaseDataset.with_valid_bbox_jids", "common.BaseDataset.room_smaller_than_along_axis", "common.BaseDataset.room_larger_than_along_axis", "common.BaseDataset.floor_plan_with_limits", "common.BaseDataset.without_box_types", "common.BaseDataset.with_scene_ids", "common.BaseDataset.filter_compose", "base.THREED_FRONT_LIVINGROOM_FURNITURE.keys", "list", "common.BaseDataset.with_room", "common.BaseDataset.at_least_boxes", "common.BaseDataset.with_object_types", "common.BaseDataset.with_generic_classes", "common.BaseDataset.with_valid_scene_ids", "common.BaseDataset.with_valid_bbox_jids", "common.BaseDataset.room_smaller_than_along_axis", "common.BaseDataset.room_larger_than_along_axis", "common.BaseDataset.floor_plan_with_limits", "common.BaseDataset.without_box_types", "common.BaseDataset.with_scene_ids", "base.THREED_FRONT_LIVINGROOM_FURNITURE.keys", "list", "base.THREED_FRONT_LIBRARY_FURNITURE.keys", "len"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.splits_builder.SplitsBuilder.get_splits", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.filter_compose", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_room", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.at_least_boxes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.at_most_boxes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_object_types", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_generic_classes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_valid_scene_ids", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_valid_bbox_jids", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.contains_object_types", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.room_smaller_than_along_axis", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.room_larger_than_along_axis", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.floor_plan_with_limits", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.without_box_types", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_scene_ids", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.filter_compose", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_room", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.at_least_boxes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.at_most_boxes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_object_types", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_generic_classes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_valid_scene_ids", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_valid_bbox_jids", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.room_smaller_than_along_axis", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.room_larger_than_along_axis", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.floor_plan_with_limits", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.without_box_types", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_scene_ids", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.filter_compose", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_room", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.at_least_boxes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.at_most_boxes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_object_types", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_generic_classes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_valid_scene_ids", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_valid_bbox_jids", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.room_smaller_than_along_axis", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.room_larger_than_along_axis", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.floor_plan_with_limits", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.without_box_types", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_scene_ids", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.filter_compose", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_room", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.at_least_boxes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_object_types", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_generic_classes", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_valid_scene_ids", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_valid_bbox_jids", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.room_smaller_than_along_axis", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.room_larger_than_along_axis", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.floor_plan_with_limits", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.without_box_types", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.common.BaseDataset.with_scene_ids"], []], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.utils.parse_threed_front_scenes": [[19, 132], ["os.getenv", "pickle.load", "threed_front_scene.ModelInfo.from_file", "set", "print", "enumerate", "print", "sum", "pickle.dump", "open", "os.path.join", "print", "open", "os.getenv", "sorted", "f.endswith", "open", "json.load", "collections.defaultdict", "collections.defaultdict", "sum.append", "len", "os.listdir", "dict", "dict", "len", "numpy.asarray().reshape", "numpy.asarray().reshape", "any", "any", "furniture_in_room.append", "len", "set.add", "rooms.append", "threed_front_scene.ThreedFutureModel", "extra_meshes_in_room.append", "threed_front_scene.Room", "numpy.asarray", "numpy.asarray", "threed_front_scene.ThreedFutureExtra", "rr[].lower", "[].split", "m.split"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ModelInfo.from_file"], ["from", "simple_3dviz", ".", "renderables", ".", "textured_mesh", "import", "Material", ",", "TexturedMesh", "\n", "from", "simple_3dviz", ".", "utils", "import", "save_frame", "\n", "from", "simple_3dviz", ".", "behaviours", ".", "misc", "import", "LightToCamera", "\n", "from", "simple_3dviz", ".", "behaviours", ".", "io", "import", "SaveFrames", "\n", "from", "simple_3dviz", ".", "utils", "import", "render", "as", "render_simple_3dviz", "\n", "\n", "from", "scene_synthesis", ".", "utils", "import", "get_textured_objects", "\n", "\n", "\n", "class", "DirLock", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dirpath", ")", ":", "\n", "        ", "self", ".", "_dirpath", "=", "dirpath", "\n", "self", ".", "_acquired", "=", "False", "\n", "\n", "", "@", "property", "\n", "def", "is_acquired", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_acquired", "\n", "\n", "", "def", "acquire", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_acquired", ":", "\n", "            ", "return", "\n", "", "try", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "_dirpath", ")", "\n", "self", ".", "_acquired", "=", "True", "\n", "", "except", "FileExistsError", ":", "\n", "            ", "pass", "\n", "\n", "", "", "def", "release", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_acquired", ":", "\n", "            ", "return", "\n", "", "try", ":", "\n", "            ", "os", ".", "rmdir", "(", "self", ".", "_dirpath", ")", "\n", "self", ".", "_acquired", "=", "False", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "self", ".", "_acquired", "=", "False", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "\n", "", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "acquire", "(", ")", "\n", "return", "self", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "self", ".", "release", "(", ")", "\n", "\n", "\n", "", "", "def", "ensure_parent_directory_exists", "(", "filepath", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "filepath", ",", "exist_ok", "=", "True", ")", "\n", "\n", "\n", "", "def", "floor_plan_renderable", "(", "room", ",", "color", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", ":", "\n", "    ", "vertices", ",", "faces", "=", "room", ".", "floor_plan", "\n", "# Center the floor", "\n", "vertices", "-=", "room", ".", "floor_plan_centroid", "\n", "# Return a simple-3dviz renderable", "\n", "return", "Mesh", ".", "from_faces", "(", "vertices", ",", "faces", ",", "color", ")", "\n", "\n", "\n", "", "def", "floor_plan_from_scene", "(", "\n", "scene", ",", "\n", "path_to_floor_plan_textures", ",", "\n", "without_room_mask", "=", "False", "\n", ")", ":", "\n", "    ", "if", "not", "without_room_mask", ":", "\n", "        ", "room_mask", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "transpose", "(", "scene", ".", "room_mask", "[", "None", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "room_mask", "=", "None", "\n", "# Also get a renderable for the floor plan", "\n", "", "floor", ",", "tr_floor", "=", "get_floor_plan", "(", "\n", "scene", ",", "\n", "[", "\n", "os", ".", "path", ".", "join", "(", "path_to_floor_plan_textures", ",", "fi", ")", "\n", "for", "fi", "in", "os", ".", "listdir", "(", "path_to_floor_plan_textures", ")", "\n", "]", "\n", ")", "\n", "return", "[", "floor", "]", ",", "[", "tr_floor", "]", ",", "room_mask", "\n", "\n", "\n", "", "def", "get_floor_plan", "(", "scene", ",", "floor_textures", ")", ":", "\n", "    ", "\"\"\"Return the floor plan of the scene as a trimesh mesh and a simple-3dviz\n    TexturedMesh.\"\"\"", "\n", "vertices", ",", "faces", "=", "scene", ".", "floor_plan", "\n", "vertices", "=", "vertices", "-", "scene", ".", "floor_plan_centroid", "\n", "uv", "=", "np", ".", "copy", "(", "vertices", "[", ":", ",", "[", "0", ",", "2", "]", "]", ")", "\n", "uv", "-=", "uv", ".", "min", "(", "axis", "=", "0", ")", "\n", "uv", "/=", "0.3", "# repeat every 30cm", "\n", "texture", "=", "np", ".", "random", ".", "choice", "(", "floor_textures", ")", "\n", "\n", "floor", "=", "TexturedMesh", ".", "from_faces", "(", "\n", "vertices", "=", "vertices", ",", "\n", "uv", "=", "uv", ",", "\n", "faces", "=", "faces", ",", "\n", "material", "=", "Material", ".", "with_texture_image", "(", "texture", ")", "\n", ")", "\n", "\n", "tr_floor", "=", "trimesh", ".", "Trimesh", "(", "\n", "np", ".", "copy", "(", "vertices", ")", ",", "np", ".", "copy", "(", "faces", ")", ",", "process", "=", "False", "\n", ")", "\n", "tr_floor", ".", "visual", "=", "trimesh", ".", "visual", ".", "TextureVisuals", "(", "\n", "uv", "=", "np", ".", "copy", "(", "uv", ")", ",", "\n", "material", "=", "trimesh", ".", "visual", ".", "material", ".", "SimpleMaterial", "(", "\n", "image", "=", "Image", ".", "open", "(", "texture", ")", "\n", ")", "\n", ")", "\n", "\n", "return", "floor", ",", "tr_floor", "\n", "\n", "\n", "", "def", "get_textured_objects_in_scene", "(", "scene", ",", "ignore_lamps", "=", "False", ")", ":", "\n", "    ", "renderables", "=", "[", "]", "\n", "for", "furniture", "in", "scene", ".", "bboxes", ":", "\n", "        ", "model_path", "=", "furniture", ".", "raw_model_path", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.utils.parse_threed_future_models": [[134, 204], ["os.getenv", "pickle.load", "threed_front_scene.ModelInfo.from_file", "set", "print", "enumerate", "print", "pickle.dump", "open", "os.path.join", "print", "open", "os.getenv", "sorted", "f.endswith", "open", "json.load", "collections.defaultdict", "len", "os.listdir", "dict", "len", "any", "any", "set.add", "pickle.load.append", "threed_front_scene.ThreedFutureModel"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ModelInfo.from_file"], ["            ", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "# Load the furniture and scale it as it is given in the dataset", "\n", "", "raw_mesh", "=", "TexturedMesh", ".", "from_file", "(", "model_path", ")", "\n", "raw_mesh", ".", "scale", "(", "furniture", ".", "scale", ")", "\n", "\n", "# Compute the centroid of the vertices in order to match the", "\n", "# bbox (because the prediction only considers bboxes)", "\n", "bbox", "=", "raw_mesh", ".", "bbox", "\n", "centroid", "=", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "1", "]", ")", "/", "2", "\n", "\n", "# Extract the predicted affine transformation to position the", "\n", "# mesh", "\n", "translation", "=", "furniture", ".", "centroid", "(", "offset", "=", "-", "scene", ".", "centroid", ")", "\n", "theta", "=", "furniture", ".", "z_angle", "\n", "R", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "R", "[", "0", ",", "0", "]", "=", "np", ".", "cos", "(", "theta", ")", "\n", "R", "[", "0", ",", "2", "]", "=", "-", "np", ".", "sin", "(", "theta", ")", "\n", "R", "[", "2", ",", "0", "]", "=", "np", ".", "sin", "(", "theta", ")", "\n", "R", "[", "2", ",", "2", "]", "=", "np", ".", "cos", "(", "theta", ")", "\n", "R", "[", "1", ",", "1", "]", "=", "1.", "\n", "\n", "# Apply the transformations in order to correctly position the mesh", "\n", "raw_mesh", ".", "affine_transform", "(", "t", "=", "-", "centroid", ")", "\n", "raw_mesh", ".", "affine_transform", "(", "R", "=", "R", ",", "t", "=", "translation", ")", "\n", "renderables", ".", "append", "(", "raw_mesh", ")", "\n", "", "return", "renderables", "\n", "\n", "\n", "", "def", "render", "(", "scene", ",", "renderables", ",", "color", ",", "mode", ",", "frame_path", "=", "None", ")", ":", "\n", "    ", "if", "color", "is", "not", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "color", "[", "0", "]", "[", "0", "]", "\n", "", "except", "TypeError", ":", "\n", "            ", "color", "=", "[", "color", "]", "*", "len", "(", "renderables", ")", "\n", "", "", "else", ":", "\n", "        ", "color", "=", "[", "None", "]", "*", "len", "(", "renderables", ")", "\n", "\n", "", "scene", ".", "clear", "(", ")", "\n", "for", "r", ",", "c", "in", "zip", "(", "renderables", ",", "color", ")", ":", "\n", "        ", "if", "isinstance", "(", "r", ",", "Mesh", ")", "and", "c", "is", "not", "None", ":", "\n", "            ", "r", ".", "mode", "=", "mode", "\n", "r", ".", "colors", "=", "c", "\n", "", "scene", ".", "add", "(", "r", ")", "\n", "", "scene", ".", "render", "(", ")", "\n", "if", "frame_path", "is", "not", "None", ":", "\n", "        ", "save_frame", "(", "frame_path", ",", "scene", ".", "frame", ")", "\n", "\n", "", "return", "np", ".", "copy", "(", "scene", ".", "frame", ")", "\n", "\n", "\n", "", "def", "scene_from_args", "(", "args", ")", ":", "\n", "# Create the scene and the behaviour list for simple-3dviz", "\n", "    ", "scene", "=", "Scene", "(", "size", "=", "args", ".", "window_size", ",", "background", "=", "args", ".", "background", ")", "\n", "scene", ".", "up_vector", "=", "args", ".", "up_vector", "\n", "scene", ".", "camera_target", "=", "args", ".", "camera_target", "\n", "scene", ".", "camera_position", "=", "args", ".", "camera_position", "\n", "scene", ".", "light", "=", "args", ".", "camera_position", "\n", "scene", ".", "camera_matrix", "=", "Matrix44", ".", "orthogonal_projection", "(", "\n", "left", "=", "-", "args", ".", "room_side", ",", "right", "=", "args", ".", "room_side", ",", "\n", "bottom", "=", "args", ".", "room_side", ",", "top", "=", "-", "args", ".", "room_side", ",", "\n", "near", "=", "0.1", ",", "far", "=", "6", "\n", ")", "\n", "return", "scene", "\n", "\n", "\n", "", "def", "export_scene", "(", "output_directory", ",", "trimesh_meshes", ",", "names", "=", "None", ")", ":", "\n", "    ", "if", "names", "is", "None", ":", "\n", "        ", "names", "=", "[", "\n", "\"object_{:03d}.obj\"", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "trimesh_meshes", ")", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.feature_extractors.BaseFeatureExtractor.feature_size": [[19, 22], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "feature_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_feature_size", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.feature_extractors.BaseFeatureExtractor.forward": [[23, 25], ["feature_extractors.BaseFeatureExtractor._feature_extractor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "self", ".", "_feature_extractor", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.feature_extractors.ResNet18.__init__": [[31, 53], ["torch.nn.Module.__init__", "torchvision.models.resnet18", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.AdaptiveAvgPool2d", "frozen_batchnorm.FrozenBatchNorm2d.freeze", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.frozen_batchnorm.FrozenBatchNorm2d.freeze"], ["def", "__init__", "(", "self", ",", "freeze_bn", ",", "input_channels", ",", "feature_size", ")", ":", "\n", "        ", "super", "(", "ResNet18", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_feature_size", "=", "feature_size", "\n", "\n", "self", ".", "_feature_extractor", "=", "models", ".", "resnet18", "(", "pretrained", "=", "False", ")", "\n", "if", "freeze_bn", ":", "\n", "            ", "FrozenBatchNorm2d", ".", "freeze", "(", "self", ".", "_feature_extractor", ")", "\n", "\n", "", "self", ".", "_feature_extractor", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "input_channels", ",", "\n", "64", ",", "\n", "kernel_size", "=", "(", "7", ",", "7", ")", ",", "\n", "stride", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "_feature_extractor", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "self", ".", "feature_size", ")", "\n", ")", "\n", "self", ".", "_feature_extractor", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.feature_extractors.AlexNet.__init__": [[56, 70], ["torch.nn.Module.__init__", "torchvision.models.alexnet", "torch.nn.Conv2d", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "feature_size", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_feature_size", "=", "feature_size", "\n", "\n", "self", ".", "_feature_extractor", "=", "models", ".", "alexnet", "(", "pretrained", "=", "False", ")", "\n", "self", ".", "_feature_extractor", ".", "features", "[", "0", "]", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "input_channels", ",", "\n", "64", ",", "\n", "kernel_size", "=", "(", "11", ",", "11", ")", ",", "\n", "stride", "=", "(", "4", ",", "4", ")", ",", "\n", "padding", "=", "(", "2", ",", "2", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_fc", "=", "nn", ".", "Linear", "(", "9216", ",", "self", ".", "_feature_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.feature_extractors.AlexNet.forward": [[71, 77], ["feature_extractors.AlexNet._feature_extractor.features", "feature_extractors.AlexNet._feature_extractor.avgpool", "feature_extractors.AlexNet._fc", "feature_extractors.AlexNet.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "_feature_extractor", ".", "features", "(", "X", ")", "\n", "X", "=", "self", ".", "_feature_extractor", ".", "avgpool", "(", "X", ")", "\n", "X", "=", "self", ".", "_fc", "(", "X", ".", "view", "(", "X", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.feature_extractors.get_feature_extractor": [[79, 94], ["feature_extractors.ResNet18", "feature_extractors.AlexNet"], "function", ["None"], ["", "", "def", "get_feature_extractor", "(", "\n", "name", ",", "\n", "freeze_bn", "=", "False", ",", "\n", "input_channels", "=", "1", ",", "\n", "feature_size", "=", "128", "\n", ")", ":", "\n", "    ", "\"\"\"Based on the name return the appropriate feature extractor.\"\"\"", "\n", "return", "{", "\n", "\"resnet18\"", ":", "ResNet18", "(", "\n", "freeze_bn", "=", "freeze_bn", ",", "\n", "input_channels", "=", "input_channels", ",", "\n", "feature_size", "=", "feature_size", "\n", ")", ",", "\n", "\"alexnet\"", ":", "AlexNet", "(", "input_channels", ",", "feature_size", "=", "feature_size", ")", "\n", "}", "[", "name", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.base.FixedPositionalEncoding.__init__": [[14, 20], ["torch.Module.__init__", "torch.pow().view", "torch.pow().view", "torch.pow().view", "torch.pow().view", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["\"kids bed\"", ":", "\"kids_bed\"", ",", "\n", "\"ceiling lamp\"", ":", "\"ceiling_lamp\"", ",", "\n", "\"pendant lamp\"", ":", "\"pendant_lamp\"", ",", "\n", "\"bookcase/jewelry armoire\"", ":", "\"bookshelf\"", ",", "\n", "\"tv stand\"", ":", "\"tv_stand\"", ",", "\n", "\"wardrobe\"", ":", "\"wardrobe\"", ",", "\n", "\"lounge chair/cafe chair/office chair\"", ":", "\"chair\"", ",", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.base.FixedPositionalEncoding.forward": [[21, 26], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "base.FixedPositionalEncoding.sigma.to", "base.FixedPositionalEncoding.sigma.to"], "methods", ["None"], ["\"dining chair\"", ":", "\"chair\"", ",", "\n", "\"classic chinese chair\"", ":", "\"chair\"", ",", "\n", "\"armchair\"", ":", "\"armchair\"", ",", "\n", "\"dressing table\"", ":", "\"dressing_table\"", ",", "\n", "\"dressing chair\"", ":", "\"dressing_chair\"", ",", "\n", "\"corner/side table\"", ":", "\"table\"", ",", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.base.sample_from_dmll": [[28, 52], ["pred.size", "torch.softmax", "torch.softmax", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.arange", "torch.arange", "torch.rand", "torch.rand", "len", "pred.size", "torch.nn.functional.elu", "torch.nn.functional.elu", "torch.clamp", "torch.clamp", "torch.multinomial", "torch.multinomial", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.size", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.size"], ["\"round end table\"", ":", "\"table\"", ",", "\n", "\"drawer chest/corner cabinet\"", ":", "\"cabinet\"", ",", "\n", "\"sideboard/side cabinet/console table\"", ":", "\"cabinet\"", ",", "\n", "\"children cabinet\"", ":", "\"children_cabinet\"", ",", "\n", "\"shelf\"", ":", "\"shelf\"", ",", "\n", "\"footstool/sofastool/bed end stool/stool\"", ":", "\"stool\"", ",", "\n", "\"coffee table\"", ":", "\"coffee_table\"", ",", "\n", "\"loveseat sofa\"", ":", "\"sofa\"", ",", "\n", "\"three-seat/multi-seat sofa\"", ":", "\"sofa\"", ",", "\n", "\"l-shaped sofa\"", ":", "\"sofa\"", ",", "\n", "\"lazy sofa\"", ":", "\"sofa\"", ",", "\n", "\"chaise longue sofa\"", ":", "\"sofa\"", ",", "\n", "}", "\n", "\n", "THREED_FRONT_LIBRARY_FURNITURE", "=", "{", "\n", "\"bookcase/jewelry armoire\"", ":", "\"bookshelf\"", ",", "\n", "\"desk\"", ":", "\"desk\"", ",", "\n", "\"pendant lamp\"", ":", "\"pendant_lamp\"", ",", "\n", "\"ceiling lamp\"", ":", "\"ceiling_lamp\"", ",", "\n", "\"lounge chair/cafe chair/office chair\"", ":", "\"lounge_chair\"", ",", "\n", "\"dining chair\"", ":", "\"dining_chair\"", ",", "\n", "\"dining table\"", ":", "\"dining_table\"", ",", "\n", "\"corner/side table\"", ":", "\"corner_side_table\"", ",", "\n", "\"classic chinese chair\"", ":", "\"chinese_chair\"", ",", "\n", "\"armchair\"", ":", "\"armchair\"", ",", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.base.optimizer_factory": [[54, 66], ["config.get", "config.get", "config.get", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adam", "NotImplementedError"], "function", ["None"], ["\"sideboard/side cabinet/console table\"", ":", "\"console_table\"", ",", "\n", "\"footstool/sofastool/bed end stool/stool\"", ":", "\"stool\"", ",", "\n", "\"barstool\"", ":", "\"stool\"", ",", "\n", "\"round end table\"", ":", "\"round_end_table\"", ",", "\n", "\"loveseat sofa\"", ":", "\"loveseat_sofa\"", ",", "\n", "\"drawer chest/corner cabinet\"", ":", "\"cabinet\"", ",", "\n", "\"wardrobe\"", ":", "\"wardrobe\"", ",", "\n", "\"three-seat/multi-seat sofa\"", ":", "\"multi_seat_sofa\"", ",", "\n", "\"wine cabinet\"", ":", "\"wine_cabinet\"", ",", "\n", "\"coffee table\"", ":", "\"coffee_table\"", ",", "\n", "\"lazy sofa\"", ":", "\"lazy_sofa\"", ",", "\n", "\"children cabinet\"", ":", "\"cabinet\"", ",", "\n", "\"chaise longue sofa\"", ":", "\"chaise_longue_sofa\"", ",", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.__init__": [[16, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sizes", ",", "translations", ",", "angles", ",", "class_labels", ")", ":", "\n", "        ", "self", ".", "sizes", "=", "sizes", "\n", "self", ".", "translations", "=", "translations", "\n", "self", ".", "angles", "=", "angles", "\n", "self", ".", "class_labels", "=", "class_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.__len__": [[22, 24], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "members", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.members": [[25, 28], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "members", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "sizes", ",", "self", ".", "translations", ",", "self", ".", "angles", ",", "self", ".", "class_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.n_classes": [[29, 32], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "class_labels", ".", "shape", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.device": [[33, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "class_labels", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.extract_bbox_params_from_tensor": [[37, 52], ["isinstance", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "extract_bbox_params_from_tensor", "(", "t", ")", ":", "\n", "        ", "if", "isinstance", "(", "t", ",", "dict", ")", ":", "\n", "            ", "class_labels", "=", "t", "[", "\"class_labels_tr\"", "]", "\n", "translations", "=", "t", "[", "\"translations_tr\"", "]", "\n", "sizes", "=", "t", "[", "\"sizes_tr\"", "]", "\n", "angles", "=", "t", "[", "\"angles_tr\"", "]", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "t", ".", "shape", ")", "==", "3", "\n", "class_labels", "=", "t", "[", ":", ",", ":", ",", ":", "-", "7", "]", "\n", "translations", "=", "t", "[", ":", ",", ":", ",", "-", "7", ":", "-", "4", "]", "\n", "sizes", "=", "t", "[", ":", ",", ":", ",", "-", "4", ":", "-", "1", "]", "\n", "angles", "=", "t", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "\n", "", "return", "class_labels", ",", "translations", ",", "sizes", ",", "angles", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.feature_dims": [[53, 56], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_dims", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.get_losses": [[57, 59], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_losses", "(", "self", ",", "X_target", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.reconstruction_loss": [[60, 62], ["NotImplementedError"], "methods", ["None"], ["", "def", "reconstruction_loss", "(", "self", ",", "sample_params", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.AutoregressiveBBoxOutput.__init__": [[65, 71], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sizes", ",", "translations", ",", "angles", ",", "class_labels", ")", ":", "\n", "        ", "self", ".", "sizes_x", ",", "self", ".", "sizes_y", ",", "self", ".", "sizes_z", "=", "sizes", "\n", "self", ".", "translations_x", ",", "self", ".", "translations_y", ",", "self", ".", "translations_z", "=", "translations", "\n", "self", ".", "class_labels", "=", "class_labels", "\n", "self", ".", "angles", "=", "angles", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.AutoregressiveBBoxOutput.members": [[72, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "members", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "sizes_x", ",", "self", ".", "sizes_y", ",", "self", ".", "sizes_z", ",", "\n", "self", ".", "translations_x", ",", "self", ".", "translations_y", ",", "self", ".", "translations_z", ",", "\n", "self", ".", "angles", ",", "self", ".", "class_labels", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.AutoregressiveBBoxOutput.feature_dims": [[80, 83], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_dims", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_classes", "+", "3", "+", "3", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.AutoregressiveBBoxOutput._targets_from_tensor": [[84, 99], ["bbox_output.AutoregressiveBBoxOutput.extract_bbox_params_from_tensor"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.BBoxOutput.extract_bbox_params_from_tensor"], ["", "def", "_targets_from_tensor", "(", "self", ",", "X_target", ")", ":", "\n", "# Make sure that everything has the correct shape", "\n", "# Extract the bbox_params for the target tensor", "\n", "        ", "target_bbox_params", "=", "self", ".", "extract_bbox_params_from_tensor", "(", "X_target", ")", "\n", "target", "=", "{", "}", "\n", "target", "[", "\"labels\"", "]", "=", "target_bbox_params", "[", "0", "]", "\n", "target", "[", "\"translations_x\"", "]", "=", "target_bbox_params", "[", "1", "]", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "target", "[", "\"translations_y\"", "]", "=", "target_bbox_params", "[", "1", "]", "[", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "target", "[", "\"translations_z\"", "]", "=", "target_bbox_params", "[", "1", "]", "[", ":", ",", ":", ",", "2", ":", "3", "]", "\n", "target", "[", "\"sizes_x\"", "]", "=", "target_bbox_params", "[", "2", "]", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "target", "[", "\"sizes_y\"", "]", "=", "target_bbox_params", "[", "2", "]", "[", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "target", "[", "\"sizes_z\"", "]", "=", "target_bbox_params", "[", "2", "]", "[", ":", ",", ":", ",", "2", ":", "3", "]", "\n", "target", "[", "\"angles\"", "]", "=", "target_bbox_params", "[", "3", "]", "\n", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.AutoregressiveBBoxOutput.get_losses": [[100, 122], ["bbox_output.AutoregressiveBBoxOutput._targets_from_tensor", "losses.cross_entropy_loss", "losses.dmll", "losses.dmll", "losses.dmll", "losses.dmll", "losses.dmll", "losses.dmll", "losses.dmll", "torch.sum().item", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.AutoregressiveBBoxOutput._targets_from_tensor", "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.__init__.cross_entropy_loss", "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.__init__.dmll", "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.__init__.dmll", "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.__init__.dmll", "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.__init__.dmll", "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.__init__.dmll", "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.__init__.dmll", "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.__init__.dmll"], ["", "def", "get_losses", "(", "self", ",", "X_target", ")", ":", "\n", "        ", "target", "=", "self", ".", "_targets_from_tensor", "(", "X_target", ")", "\n", "\n", "assert", "torch", ".", "sum", "(", "target", "[", "\"labels\"", "]", "[", "...", ",", "-", "2", "]", ")", ".", "item", "(", ")", "==", "0", "\n", "\n", "# For the class labels compute the cross entropy loss between the", "\n", "# target and the predicted labels", "\n", "label_loss", "=", "cross_entropy_loss", "(", "self", ".", "class_labels", ",", "target", "[", "\"labels\"", "]", ")", "\n", "\n", "# For the translations, sizes and angles compute the discretized", "\n", "# logistic mixture likelihood as described in ", "\n", "# PIXELCNN++: Improving the PixelCNN with Discretized Logistic Mixture Likelihood and", "\n", "# Other Modifications, by Salimans et al.", "\n", "translation_loss", "=", "dmll", "(", "self", ".", "translations_x", ",", "target", "[", "\"translations_x\"", "]", ")", "\n", "translation_loss", "+=", "dmll", "(", "self", ".", "translations_y", ",", "target", "[", "\"translations_y\"", "]", ")", "\n", "translation_loss", "+=", "dmll", "(", "self", ".", "translations_z", ",", "target", "[", "\"translations_z\"", "]", ")", "\n", "size_loss", "=", "dmll", "(", "self", ".", "sizes_x", ",", "target", "[", "\"sizes_x\"", "]", ")", "\n", "size_loss", "+=", "dmll", "(", "self", ".", "sizes_y", ",", "target", "[", "\"sizes_y\"", "]", ")", "\n", "size_loss", "+=", "dmll", "(", "self", ".", "sizes_z", ",", "target", "[", "\"sizes_z\"", "]", ")", "\n", "angle_loss", "=", "dmll", "(", "self", ".", "angles", ",", "target", "[", "\"angles\"", "]", ")", "\n", "\n", "return", "label_loss", ",", "translation_loss", ",", "size_loss", ",", "angle_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.AutoregressiveBBoxOutput.reconstruction_loss": [[123, 140], ["bbox_output.AutoregressiveBBoxOutput.get_losses", "label_loss.mean.mean.mean", "translation_loss.mean.mean.mean", "size_loss.mean.mean.mean", "angle_loss.mean.mean.mean", "size_loss.mean.mean.item", "translation_loss.mean.mean.item", "angle_loss.mean.mean.item", "label_loss.mean.mean.item", "stats_logger.StatsLogger.instance", "stats_logger.StatsLogger.instance", "stats_logger.StatsLogger.instance", "stats_logger.StatsLogger.instance"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.AutoregressiveBBoxOutput.get_losses", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.instance", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.instance", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.instance", "home.repos.pwc.inspect_result.nv-tlabs_atiss.scene_synthesis.stats_logger.StatsLogger.instance"], ["", "def", "reconstruction_loss", "(", "self", ",", "X_target", ",", "lengths", ")", ":", "\n", "# Compute the losses", "\n", "        ", "label_loss", ",", "translation_loss", ",", "size_loss", ",", "angle_loss", "=", "self", ".", "get_losses", "(", "X_target", ")", "\n", "\n", "label_loss", "=", "label_loss", ".", "mean", "(", ")", "\n", "translation_loss", "=", "translation_loss", ".", "mean", "(", ")", "\n", "size_loss", "=", "size_loss", ".", "mean", "(", ")", "\n", "angle_loss", "=", "angle_loss", ".", "mean", "(", ")", "\n", "\n", "StatsLogger", ".", "instance", "(", ")", "[", "\"losses.size\"", "]", ".", "value", "=", "size_loss", ".", "item", "(", ")", "\n", "StatsLogger", ".", "instance", "(", ")", "[", "\"losses.translation\"", "]", ".", "value", "=", "translation_loss", ".", "item", "(", ")", "\n", "StatsLogger", ".", "instance", "(", ")", "[", "\"losses.angle\"", "]", ".", "value", "=", "angle_loss", ".", "item", "(", ")", "\n", "StatsLogger", ".", "instance", "(", ")", "[", "\"losses.label\"", "]", ".", "value", "=", "label_loss", ".", "item", "(", ")", "\n", "\n", "return", "label_loss", "+", "translation_loss", "+", "size_loss", "+", "angle_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.Hidden2Output.__init__": [[17, 30], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "n_classes", ",", "with_extra_fc", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_extra_fc", "=", "with_extra_fc", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "mlp_layers", "=", "[", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "2", "*", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2", "*", "hidden_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", "\n", "self", ".", "hidden2output", "=", "nn", ".", "Sequential", "(", "*", "mlp_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.Hidden2Output.apply_linear_layers": [[31, 48], ["hidden_to_output.Hidden2Output.class_layer", "hidden_to_output.Hidden2Output.angle_layer", "hidden_to_output.Hidden2Output.hidden2output", "hidden_to_output.Hidden2Output.centroid_layer_x", "hidden_to_output.Hidden2Output.centroid_layer_y", "hidden_to_output.Hidden2Output.centroid_layer_z", "hidden_to_output.Hidden2Output.size_layer_x", "hidden_to_output.Hidden2Output.size_layer_y", "hidden_to_output.Hidden2Output.size_layer_z"], "methods", ["None"], ["", "def", "apply_linear_layers", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "with_extra_fc", ":", "\n", "            ", "x", "=", "self", ".", "hidden2output", "(", "x", ")", "\n", "\n", "", "class_labels", "=", "self", ".", "class_layer", "(", "x", ")", "\n", "translations", "=", "(", "\n", "self", ".", "centroid_layer_x", "(", "x", ")", ",", "\n", "self", ".", "centroid_layer_y", "(", "x", ")", ",", "\n", "self", ".", "centroid_layer_z", "(", "x", ")", "\n", ")", "\n", "sizes", "=", "(", "\n", "self", ".", "size_layer_x", "(", "x", ")", ",", "\n", "self", ".", "size_layer_y", "(", "x", ")", ",", "\n", "self", ".", "size_layer_z", "(", "x", ")", "\n", ")", "\n", "angles", "=", "self", ".", "angle_layer", "(", "x", ")", "\n", "return", "class_labels", ",", "translations", ",", "sizes", ",", "angles", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.Hidden2Output.forward": [[49, 51], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sample_params", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.__init__": [[54, 103], ["hidden_to_output.Hidden2Output.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "hidden_to_output.AutoregressiveDMLL._mlp", "hidden_to_output.AutoregressiveDMLL._mlp", "hidden_to_output.AutoregressiveDMLL._mlp", "hidden_to_output.AutoregressiveDMLL._mlp", "hidden_to_output.AutoregressiveDMLL._mlp", "hidden_to_output.AutoregressiveDMLL._mlp", "hidden_to_output.AutoregressiveDMLL._mlp", "isinstance"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL._mlp", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL._mlp", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL._mlp", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL._mlp", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL._mlp", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL._mlp", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL._mlp"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "hidden_size", ",", "\n", "n_classes", ",", "\n", "n_mixtures", ",", "\n", "bbox_output", ",", "\n", "with_extra_fc", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "hidden_size", ",", "n_classes", ",", "with_extra_fc", ")", "\n", "\n", "if", "not", "isinstance", "(", "n_mixtures", ",", "list", ")", ":", "\n", "            ", "n_mixtures", "=", "[", "n_mixtures", "]", "*", "7", "\n", "\n", "", "self", ".", "class_layer", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "n_classes", ")", "\n", "\n", "self", ".", "fc_class_labels", "=", "nn", ".", "Linear", "(", "n_classes", ",", "64", ")", "\n", "# Positional embedding for the target translation", "\n", "self", ".", "pe_trans_x", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "64", ")", "\n", "self", ".", "pe_trans_y", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "64", ")", "\n", "self", ".", "pe_trans_z", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "64", ")", "\n", "# Positional embedding for the target angle", "\n", "self", ".", "pe_angle_z", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "64", ")", "\n", "\n", "c_hidden_size", "=", "hidden_size", "+", "64", "\n", "self", ".", "centroid_layer_x", "=", "AutoregressiveDMLL", ".", "_mlp", "(", "\n", "c_hidden_size", ",", "n_mixtures", "[", "0", "]", "*", "3", "\n", ")", "\n", "self", ".", "centroid_layer_y", "=", "AutoregressiveDMLL", ".", "_mlp", "(", "\n", "c_hidden_size", ",", "n_mixtures", "[", "1", "]", "*", "3", "\n", ")", "\n", "self", ".", "centroid_layer_z", "=", "AutoregressiveDMLL", ".", "_mlp", "(", "\n", "c_hidden_size", ",", "n_mixtures", "[", "2", "]", "*", "3", "\n", ")", "\n", "c_hidden_size", "=", "c_hidden_size", "+", "64", "*", "3", "\n", "self", ".", "angle_layer", "=", "AutoregressiveDMLL", ".", "_mlp", "(", "\n", "c_hidden_size", ",", "n_mixtures", "[", "6", "]", "*", "3", "\n", ")", "\n", "c_hidden_size", "=", "c_hidden_size", "+", "64", "\n", "self", ".", "size_layer_x", "=", "AutoregressiveDMLL", ".", "_mlp", "(", "\n", "c_hidden_size", ",", "n_mixtures", "[", "3", "]", "*", "3", "\n", ")", "\n", "self", ".", "size_layer_y", "=", "AutoregressiveDMLL", ".", "_mlp", "(", "\n", "c_hidden_size", ",", "n_mixtures", "[", "4", "]", "*", "3", "\n", ")", "\n", "self", ".", "size_layer_z", "=", "AutoregressiveDMLL", ".", "_mlp", "(", "\n", "c_hidden_size", ",", "n_mixtures", "[", "5", "]", "*", "3", "\n", ")", "\n", "\n", "self", ".", "bbox_output", "=", "bbox_output", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL._mlp": [[104, 114], ["torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_mlp", "(", "hidden_size", ",", "output_size", ")", ":", "\n", "        ", "mlp_layers", "=", "[", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "2", "*", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2", "*", "hidden_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", "\n", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "mlp_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL._extract_properties_from_target": [[115, 122], ["sample_params[].float", "sample_params[].float", "sample_params[].float", "sample_params[].float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_extract_properties_from_target", "(", "sample_params", ")", ":", "\n", "        ", "class_labels", "=", "sample_params", "[", "\"class_labels_tr\"", "]", ".", "float", "(", ")", "\n", "translations", "=", "sample_params", "[", "\"translations_tr\"", "]", ".", "float", "(", ")", "\n", "sizes", "=", "sample_params", "[", "\"sizes_tr\"", "]", ".", "float", "(", ")", "\n", "angles", "=", "sample_params", "[", "\"angles_tr\"", "]", ".", "float", "(", ")", "\n", "return", "class_labels", ",", "translations", ",", "sizes", ",", "angles", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.get_dmll_params": [[123, 135], ["pred.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "len", "pred.size", "torch.nn.functional.elu", "torch.nn.functional.elu", "torch.nn.functional.elu", "torch.nn.functional.elu"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.size", "home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.size"], ["", "@", "staticmethod", "\n", "def", "get_dmll_params", "(", "pred", ")", ":", "\n", "        ", "assert", "len", "(", "pred", ".", "shape", ")", "==", "2", "\n", "\n", "N", "=", "pred", ".", "size", "(", "0", ")", "\n", "nr_mix", "=", "pred", ".", "size", "(", "1", ")", "//", "3", "\n", "\n", "probs", "=", "torch", ".", "softmax", "(", "pred", "[", ":", ",", ":", "nr_mix", "]", ",", "dim", "=", "-", "1", ")", "\n", "means", "=", "pred", "[", ":", ",", "nr_mix", ":", "2", "*", "nr_mix", "]", "\n", "scales", "=", "torch", ".", "nn", ".", "functional", ".", "elu", "(", "pred", "[", ":", ",", "2", "*", "nr_mix", ":", "3", "*", "nr_mix", "]", ")", "+", "1.0001", "\n", "\n", "return", "probs", ",", "means", ",", "scales", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.get_translations_dmll_params": [[136, 163], ["hidden_to_output.AutoregressiveDMLL.fc_class_labels", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hidden_to_output.AutoregressiveDMLL.centroid_layer_x().reshape", "hidden_to_output.AutoregressiveDMLL.centroid_layer_y().reshape", "hidden_to_output.AutoregressiveDMLL.centroid_layer_z().reshape", "hidden_to_output.AutoregressiveDMLL.get_dmll_params", "hidden_to_output.AutoregressiveDMLL.get_dmll_params", "hidden_to_output.AutoregressiveDMLL.get_dmll_params", "hidden_to_output.AutoregressiveDMLL.centroid_layer_x", "hidden_to_output.AutoregressiveDMLL.centroid_layer_y", "hidden_to_output.AutoregressiveDMLL.centroid_layer_z"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.get_dmll_params", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.get_dmll_params", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.get_dmll_params"], ["", "def", "get_translations_dmll_params", "(", "self", ",", "x", ",", "class_labels", ")", ":", "\n", "# Extract the sizes in local variables for convenience", "\n", "        ", "B", ",", "L", ",", "_", "=", "class_labels", ".", "shape", "\n", "\n", "c", "=", "self", ".", "fc_class_labels", "(", "class_labels", ")", "\n", "cf", "=", "torch", ".", "cat", "(", "[", "x", ",", "c", "]", ",", "dim", "=", "-", "1", ")", "\n", "translations_x", "=", "self", ".", "centroid_layer_x", "(", "cf", ")", ".", "reshape", "(", "B", "*", "L", ",", "-", "1", ")", "\n", "translations_y", "=", "self", ".", "centroid_layer_y", "(", "cf", ")", ".", "reshape", "(", "B", "*", "L", ",", "-", "1", ")", "\n", "translations_z", "=", "self", ".", "centroid_layer_z", "(", "cf", ")", ".", "reshape", "(", "B", "*", "L", ",", "-", "1", ")", "\n", "\n", "dmll_params", "=", "{", "}", "\n", "p", "=", "AutoregressiveDMLL", ".", "get_dmll_params", "(", "translations_x", ")", "\n", "dmll_params", "[", "\"translations_x_probs\"", "]", "=", "p", "[", "0", "]", "\n", "dmll_params", "[", "\"translations_x_means\"", "]", "=", "p", "[", "1", "]", "\n", "dmll_params", "[", "\"translations_x_scales\"", "]", "=", "p", "[", "2", "]", "\n", "\n", "p", "=", "AutoregressiveDMLL", ".", "get_dmll_params", "(", "translations_y", ")", "\n", "dmll_params", "[", "\"translations_y_probs\"", "]", "=", "p", "[", "0", "]", "\n", "dmll_params", "[", "\"translations_y_means\"", "]", "=", "p", "[", "1", "]", "\n", "dmll_params", "[", "\"translations_y_scales\"", "]", "=", "p", "[", "2", "]", "\n", "\n", "p", "=", "AutoregressiveDMLL", ".", "get_dmll_params", "(", "translations_z", ")", "\n", "dmll_params", "[", "\"translations_z_probs\"", "]", "=", "p", "[", "0", "]", "\n", "dmll_params", "[", "\"translations_z_means\"", "]", "=", "p", "[", "1", "]", "\n", "dmll_params", "[", "\"translations_z_scales\"", "]", "=", "p", "[", "2", "]", "\n", "\n", "return", "dmll_params", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.sample_class_labels": [[164, 175], ["hidden_to_output.AutoregressiveDMLL.class_layer", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["None"], ["", "def", "sample_class_labels", "(", "self", ",", "x", ")", ":", "\n", "        ", "class_labels", "=", "self", ".", "class_layer", "(", "x", ")", "\n", "\n", "# Extract the sizes in local variables for convenience", "\n", "B", ",", "L", ",", "_", "=", "class_labels", ".", "shape", "\n", "C", "=", "self", ".", "n_classes", "\n", "\n", "# Sample the class", "\n", "class_probs", "=", "torch", ".", "softmax", "(", "class_labels", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "B", "*", "L", ",", "C", ")", "\n", "sampled_classes", "=", "torch", ".", "multinomial", "(", "class_probs", ",", "1", ")", ".", "view", "(", "B", ",", "L", ")", "\n", "return", "torch", ".", "eye", "(", "C", ",", "device", "=", "x", ".", "device", ")", "[", "sampled_classes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.sample_translations": [[176, 190], ["hidden_to_output.AutoregressiveDMLL.fc_class_labels", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hidden_to_output.AutoregressiveDMLL.centroid_layer_x", "hidden_to_output.AutoregressiveDMLL.centroid_layer_y", "hidden_to_output.AutoregressiveDMLL.centroid_layer_z", "base.sample_from_dmll", "base.sample_from_dmll", "base.sample_from_dmll", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "hidden_to_output.AutoregressiveDMLL.reshape", "hidden_to_output.AutoregressiveDMLL.reshape", "hidden_to_output.AutoregressiveDMLL.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.base.sample_from_dmll", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.base.sample_from_dmll", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.base.sample_from_dmll"], ["", "def", "sample_translations", "(", "self", ",", "x", ",", "class_labels", ")", ":", "\n", "# Extract the sizes in local variables for convenience", "\n", "        ", "B", ",", "L", ",", "_", "=", "class_labels", ".", "shape", "\n", "\n", "c", "=", "self", ".", "fc_class_labels", "(", "class_labels", ")", "\n", "cf", "=", "torch", ".", "cat", "(", "[", "x", ",", "c", "]", ",", "dim", "=", "-", "1", ")", "\n", "translations_x", "=", "self", ".", "centroid_layer_x", "(", "cf", ")", "\n", "translations_y", "=", "self", ".", "centroid_layer_y", "(", "cf", ")", "\n", "translations_z", "=", "self", ".", "centroid_layer_z", "(", "cf", ")", "\n", "\n", "t_x", "=", "sample_from_dmll", "(", "translations_x", ".", "reshape", "(", "B", "*", "L", ",", "-", "1", ")", ")", "\n", "t_y", "=", "sample_from_dmll", "(", "translations_y", ".", "reshape", "(", "B", "*", "L", ",", "-", "1", ")", ")", "\n", "t_z", "=", "sample_from_dmll", "(", "translations_z", ".", "reshape", "(", "B", "*", "L", ",", "-", "1", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "t_x", ",", "t_y", ",", "t_z", "]", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "B", ",", "L", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.sample_angles": [[191, 203], ["hidden_to_output.AutoregressiveDMLL.fc_class_labels", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hidden_to_output.AutoregressiveDMLL.pe_trans_x", "hidden_to_output.AutoregressiveDMLL.pe_trans_y", "hidden_to_output.AutoregressiveDMLL.pe_trans_z", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hidden_to_output.AutoregressiveDMLL.angle_layer", "base.sample_from_dmll().view", "base.sample_from_dmll", "hidden_to_output.AutoregressiveDMLL.reshape"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.base.sample_from_dmll"], ["", "def", "sample_angles", "(", "self", ",", "x", ",", "class_labels", ",", "translations", ")", ":", "\n", "# Extract the sizes in local variables for convenience", "\n", "        ", "B", ",", "L", ",", "_", "=", "class_labels", ".", "shape", "\n", "\n", "c", "=", "self", ".", "fc_class_labels", "(", "class_labels", ")", "\n", "cf", "=", "torch", ".", "cat", "(", "[", "x", ",", "c", "]", ",", "dim", "=", "-", "1", ")", "\n", "tx", "=", "self", ".", "pe_trans_x", "(", "translations", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", "\n", "ty", "=", "self", ".", "pe_trans_y", "(", "translations", "[", ":", ",", ":", ",", "1", ":", "2", "]", ")", "\n", "tz", "=", "self", ".", "pe_trans_z", "(", "translations", "[", ":", ",", ":", ",", "2", ":", "3", "]", ")", "\n", "tf", "=", "torch", ".", "cat", "(", "[", "cf", ",", "tx", ",", "ty", ",", "tz", "]", ",", "dim", "=", "-", "1", ")", "\n", "angles", "=", "self", ".", "angle_layer", "(", "tf", ")", "\n", "return", "sample_from_dmll", "(", "angles", ".", "reshape", "(", "B", "*", "L", ",", "-", "1", ")", ")", ".", "view", "(", "B", ",", "L", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.sample_sizes": [[204, 225], ["hidden_to_output.AutoregressiveDMLL.fc_class_labels", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hidden_to_output.AutoregressiveDMLL.pe_trans_x", "hidden_to_output.AutoregressiveDMLL.pe_trans_y", "hidden_to_output.AutoregressiveDMLL.pe_trans_z", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hidden_to_output.AutoregressiveDMLL.pe_angle_z", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hidden_to_output.AutoregressiveDMLL.size_layer_x", "hidden_to_output.AutoregressiveDMLL.size_layer_y", "hidden_to_output.AutoregressiveDMLL.size_layer_z", "base.sample_from_dmll", "base.sample_from_dmll", "base.sample_from_dmll", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "hidden_to_output.AutoregressiveDMLL.reshape", "hidden_to_output.AutoregressiveDMLL.reshape", "hidden_to_output.AutoregressiveDMLL.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.base.sample_from_dmll", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.base.sample_from_dmll", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.base.sample_from_dmll"], ["", "def", "sample_sizes", "(", "self", ",", "x", ",", "class_labels", ",", "translations", ",", "angles", ")", ":", "\n", "# Extract the sizes in local variables for convenience", "\n", "        ", "B", ",", "L", ",", "_", "=", "class_labels", ".", "shape", "\n", "\n", "c", "=", "self", ".", "fc_class_labels", "(", "class_labels", ")", "\n", "cf", "=", "torch", ".", "cat", "(", "[", "x", ",", "c", "]", ",", "dim", "=", "-", "1", ")", "\n", "tx", "=", "self", ".", "pe_trans_x", "(", "translations", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", "\n", "ty", "=", "self", ".", "pe_trans_y", "(", "translations", "[", ":", ",", ":", ",", "1", ":", "2", "]", ")", "\n", "tz", "=", "self", ".", "pe_trans_z", "(", "translations", "[", ":", ",", ":", ",", "2", ":", "3", "]", ")", "\n", "tf", "=", "torch", ".", "cat", "(", "[", "cf", ",", "tx", ",", "ty", ",", "tz", "]", ",", "dim", "=", "-", "1", ")", "\n", "a", "=", "self", ".", "pe_angle_z", "(", "angles", ")", "\n", "sf", "=", "torch", ".", "cat", "(", "[", "tf", ",", "a", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "sizes_x", "=", "self", ".", "size_layer_x", "(", "sf", ")", "\n", "sizes_y", "=", "self", ".", "size_layer_y", "(", "sf", ")", "\n", "sizes_z", "=", "self", ".", "size_layer_z", "(", "sf", ")", "\n", "\n", "s_x", "=", "sample_from_dmll", "(", "sizes_x", ".", "reshape", "(", "B", "*", "L", ",", "-", "1", ")", ")", "\n", "s_y", "=", "sample_from_dmll", "(", "sizes_y", ".", "reshape", "(", "B", "*", "L", ",", "-", "1", ")", ")", "\n", "s_z", "=", "sample_from_dmll", "(", "sizes_z", ".", "reshape", "(", "B", "*", "L", ",", "-", "1", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "s_x", ",", "s_y", ",", "s_z", "]", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "B", ",", "L", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.pred_class_probs": [[226, 237], ["hidden_to_output.AutoregressiveDMLL.class_layer", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "pred_class_probs", "(", "self", ",", "x", ")", ":", "\n", "        ", "class_labels", "=", "self", ".", "class_layer", "(", "x", ")", "\n", "\n", "# Extract the sizes in local variables for convenience", "\n", "b", ",", "l", ",", "_", "=", "class_labels", ".", "shape", "\n", "c", "=", "self", ".", "n_classes", "\n", "\n", "# Sample the class", "\n", "class_probs", "=", "torch", ".", "softmax", "(", "class_labels", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "b", "*", "l", ",", "c", ")", "\n", "\n", "return", "class_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.pred_dmll_params_translation": [[238, 263], ["hidden_to_output.AutoregressiveDMLL.fc_class_labels", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hidden_to_output.AutoregressiveDMLL.centroid_layer_x().reshape", "hidden_to_output.AutoregressiveDMLL.centroid_layer_y().reshape", "hidden_to_output.AutoregressiveDMLL.centroid_layer_z().reshape", "pred.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.nn.functional.elu", "torch.nn.functional.elu", "torch.nn.functional.elu", "torch.nn.functional.elu", "hidden_to_output.AutoregressiveDMLL.pred_dmll_params_translation.dmll_params_from_pred"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.size"], ["", "def", "pred_dmll_params_translation", "(", "self", ",", "x", ",", "class_labels", ")", ":", "\n", "        ", "def", "dmll_params_from_pred", "(", "pred", ")", ":", "\n", "            ", "assert", "len", "(", "pred", ".", "shape", ")", "==", "2", "\n", "\n", "N", "=", "pred", ".", "size", "(", "0", ")", "\n", "nr_mix", "=", "pred", ".", "size", "(", "1", ")", "//", "3", "\n", "\n", "probs", "=", "torch", ".", "softmax", "(", "pred", "[", ":", ",", ":", "nr_mix", "]", ",", "dim", "=", "-", "1", ")", "\n", "means", "=", "pred", "[", ":", ",", "nr_mix", ":", "2", "*", "nr_mix", "]", "\n", "scales", "=", "torch", ".", "nn", ".", "functional", ".", "elu", "(", "pred", "[", ":", ",", "2", "*", "nr_mix", ":", "3", "*", "nr_mix", "]", ")", "\n", "scales", "=", "scales", "+", "1.0001", "\n", "\n", "return", "probs", ",", "means", ",", "scales", "\n", "\n", "# Extract the sizes in local variables for convenience", "\n", "", "B", ",", "L", ",", "_", "=", "class_labels", ".", "shape", "\n", "\n", "c", "=", "self", ".", "fc_class_labels", "(", "class_labels", ")", "\n", "cf", "=", "torch", ".", "cat", "(", "[", "x", ",", "c", "]", ",", "dim", "=", "-", "1", ")", "\n", "t_x", "=", "self", ".", "centroid_layer_x", "(", "cf", ")", ".", "reshape", "(", "B", "*", "L", ",", "-", "1", ")", "\n", "t_y", "=", "self", ".", "centroid_layer_y", "(", "cf", ")", ".", "reshape", "(", "B", "*", "L", ",", "-", "1", ")", "\n", "t_z", "=", "self", ".", "centroid_layer_z", "(", "cf", ")", ".", "reshape", "(", "B", "*", "L", ",", "-", "1", ")", "\n", "\n", "return", "dmll_params_from_pred", "(", "t_x", ")", ",", "dmll_params_from_pred", "(", "t_y", ")", ",", "dmll_params_from_pred", "(", "t_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.forward": [[264, 305], ["hidden_to_output.AutoregressiveDMLL._extract_properties_from_target", "hidden_to_output.AutoregressiveDMLL.fc_class_labels", "hidden_to_output.AutoregressiveDMLL.pe_trans_x", "hidden_to_output.AutoregressiveDMLL.pe_trans_y", "hidden_to_output.AutoregressiveDMLL.pe_trans_z", "hidden_to_output.AutoregressiveDMLL.pe_angle_z", "hidden_to_output.AutoregressiveDMLL.class_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hidden_to_output.AutoregressiveDMLL.angle_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hidden_to_output.AutoregressiveDMLL.bbox_output", "hidden_to_output.AutoregressiveDMLL.hidden2output", "hidden_to_output.AutoregressiveDMLL.centroid_layer_x", "hidden_to_output.AutoregressiveDMLL.centroid_layer_y", "hidden_to_output.AutoregressiveDMLL.centroid_layer_z", "hidden_to_output.AutoregressiveDMLL.size_layer_x", "hidden_to_output.AutoregressiveDMLL.size_layer_y", "hidden_to_output.AutoregressiveDMLL.size_layer_z"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL._extract_properties_from_target"], ["", "def", "forward", "(", "self", ",", "x", ",", "sample_params", ")", ":", "\n", "        ", "if", "self", ".", "with_extra_fc", ":", "\n", "            ", "x", "=", "self", ".", "hidden2output", "(", "x", ")", "\n", "\n", "# Extract the target properties from sample_params and embed them into", "\n", "# a higher dimensional space.", "\n", "", "target_properties", "=", "AutoregressiveDMLL", ".", "_extract_properties_from_target", "(", "\n", "sample_params", "\n", ")", "\n", "\n", "class_labels", "=", "target_properties", "[", "0", "]", "\n", "translations", "=", "target_properties", "[", "1", "]", "\n", "angles", "=", "target_properties", "[", "3", "]", "\n", "\n", "c", "=", "self", ".", "fc_class_labels", "(", "class_labels", ")", "\n", "\n", "tx", "=", "self", ".", "pe_trans_x", "(", "translations", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", "\n", "ty", "=", "self", ".", "pe_trans_y", "(", "translations", "[", ":", ",", ":", ",", "1", ":", "2", "]", ")", "\n", "tz", "=", "self", ".", "pe_trans_z", "(", "translations", "[", ":", ",", ":", ",", "2", ":", "3", "]", ")", "\n", "\n", "a", "=", "self", ".", "pe_angle_z", "(", "angles", ")", "\n", "class_labels", "=", "self", ".", "class_layer", "(", "x", ")", "\n", "\n", "cf", "=", "torch", ".", "cat", "(", "[", "x", ",", "c", "]", ",", "dim", "=", "-", "1", ")", "\n", "# Using the true class label we now want to predict the translations", "\n", "translations", "=", "(", "\n", "self", ".", "centroid_layer_x", "(", "cf", ")", ",", "\n", "self", ".", "centroid_layer_y", "(", "cf", ")", ",", "\n", "self", ".", "centroid_layer_z", "(", "cf", ")", "\n", ")", "\n", "tf", "=", "torch", ".", "cat", "(", "[", "cf", ",", "tx", ",", "ty", ",", "tz", "]", ",", "dim", "=", "-", "1", ")", "\n", "angles", "=", "self", ".", "angle_layer", "(", "tf", ")", "\n", "sf", "=", "torch", ".", "cat", "(", "[", "tf", ",", "a", "]", ",", "dim", "=", "-", "1", ")", "\n", "sizes", "=", "(", "\n", "self", ".", "size_layer_x", "(", "sf", ")", ",", "\n", "self", ".", "size_layer_y", "(", "sf", ")", ",", "\n", "self", ".", "size_layer_z", "(", "sf", ")", "\n", ")", "\n", "\n", "return", "self", ".", "bbox_output", "(", "sizes", ",", "translations", ",", "angles", ",", "class_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.get_bbox_output": [[307, 311], ["None"], "function", ["None"], ["", "", "def", "get_bbox_output", "(", "bbox_type", ")", ":", "\n", "    ", "return", "{", "\n", "\"autoregressive_mlc\"", ":", "AutoregressiveBBoxOutput", "\n", "}", "[", "bbox_type", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.frozen_batchnorm.FrozenBatchNorm2d.__init__": [[18, 25], ["torch.Module.__init__", "frozen_batchnorm.FrozenBatchNorm2d.register_parameter", "frozen_batchnorm.FrozenBatchNorm2d.register_parameter", "frozen_batchnorm.FrozenBatchNorm2d.register_buffer", "frozen_batchnorm.FrozenBatchNorm2d.register_buffer", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "super", "(", "FrozenBatchNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "register_parameter", "(", "\"weight\"", ",", "Parameter", "(", "torch", ".", "ones", "(", "num_features", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "\"bias\"", ",", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.frozen_batchnorm.FrozenBatchNorm2d.extra_repr": [[26, 28], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'{num_features}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.frozen_batchnorm.FrozenBatchNorm2d.from_batch_norm": [[29, 40], ["cls", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_batch_norm", "(", "cls", ",", "bn", ")", ":", "\n", "        ", "fbn", "=", "cls", "(", "bn", ".", "num_features", ")", "\n", "# Update the weight and biases based on the corresponding weights and", "\n", "# biases of the pre-trained bn layer", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fbn", ".", "weight", "[", "...", "]", "=", "bn", ".", "weight", "\n", "fbn", ".", "bias", "[", "...", "]", "=", "bn", ".", "bias", "\n", "fbn", ".", "running_mean", "[", "...", "]", "=", "bn", ".", "running_mean", "\n", "fbn", ".", "running_var", "[", "...", "]", "=", "bn", ".", "running_var", "+", "bn", ".", "eps", "\n", "", "return", "fbn", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.frozen_batchnorm.FrozenBatchNorm2d._getattr_nested": [[41, 48], ["len", "getattr", "frozen_batchnorm.FrozenBatchNorm2d._getattr_nested", "getattr"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.frozen_batchnorm.FrozenBatchNorm2d._getattr_nested"], ["", "@", "staticmethod", "\n", "def", "_getattr_nested", "(", "m", ",", "module_names", ")", ":", "\n", "        ", "if", "len", "(", "module_names", ")", "==", "1", ":", "\n", "            ", "return", "getattr", "(", "m", ",", "module_names", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "FrozenBatchNorm2d", ".", "_getattr_nested", "(", "\n", "getattr", "(", "m", ",", "module_names", "[", "0", "]", ")", ",", "module_names", "[", "1", ":", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.frozen_batchnorm.FrozenBatchNorm2d.freeze": [[50, 62], ["m.named_modules", "isinstance", "name.split", "len", "setattr", "setattr", "frozen_batchnorm.FrozenBatchNorm2d.from_batch_norm", "frozen_batchnorm.FrozenBatchNorm2d._getattr_nested", "frozen_batchnorm.FrozenBatchNorm2d.from_batch_norm"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.frozen_batchnorm.FrozenBatchNorm2d.from_batch_norm", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.frozen_batchnorm.FrozenBatchNorm2d._getattr_nested", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.frozen_batchnorm.FrozenBatchNorm2d.from_batch_norm"], ["", "", "@", "staticmethod", "\n", "def", "freeze", "(", "m", ")", ":", "\n", "        ", "for", "(", "name", ",", "layer", ")", "in", "m", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nest", "=", "name", ".", "split", "(", "\".\"", ")", "\n", "if", "len", "(", "nest", ")", "==", "1", ":", "\n", "                    ", "setattr", "(", "m", ",", "name", ",", "FrozenBatchNorm2d", ".", "from_batch_norm", "(", "layer", ")", ")", "\n", "", "else", ":", "\n", "                    ", "setattr", "(", "\n", "FrozenBatchNorm2d", ".", "_getattr_nested", "(", "m", ",", "nest", "[", ":", "-", "1", "]", ")", ",", "\n", "nest", "[", "-", "1", "]", ",", "\n", "FrozenBatchNorm2d", ".", "from_batch_norm", "(", "layer", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.frozen_batchnorm.FrozenBatchNorm2d.forward": [[64, 77], ["scale.reshape.reshape.reshape", "bias.reshape.reshape.reshape", "frozen_batchnorm.FrozenBatchNorm2d.weight.half", "frozen_batchnorm.FrozenBatchNorm2d.bias.half", "frozen_batchnorm.FrozenBatchNorm2d.running_mean.half", "frozen_batchnorm.FrozenBatchNorm2d.running_var.half", "frozen_batchnorm.FrozenBatchNorm2d.running_var.rsqrt"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Cast all fixed parameters to half() if necessary", "\n", "        ", "if", "x", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "            ", "self", ".", "weight", "=", "self", ".", "weight", ".", "half", "(", ")", "\n", "self", ".", "bias", "=", "self", ".", "bias", ".", "half", "(", ")", "\n", "self", ".", "running_mean", "=", "self", ".", "running_mean", ".", "half", "(", ")", "\n", "self", ".", "running_var", "=", "self", ".", "running_var", ".", "half", "(", ")", "\n", "\n", "", "scale", "=", "self", ".", "weight", "*", "self", ".", "running_var", ".", "rsqrt", "(", ")", "\n", "bias", "=", "self", ".", "bias", "-", "self", ".", "running_mean", "*", "scale", "\n", "scale", "=", "scale", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "scale", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.frozen_batchnorm.freeze_network": [[79, 84], ["network.parameters"], "function", ["None"], ["", "", "def", "freeze_network", "(", "network", ",", "freeze", "=", "False", ")", ":", "\n", "    ", "if", "freeze", ":", "\n", "        ", "for", "p", "in", "network", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "", "return", "network", "\n", "", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.__init__.hidden2output_layer": [[25, 39], ["config_n.get", "hidden_to_output.AutoregressiveDMLL", "NotImplementedError", "config_n.get", "config_n.get", "hidden_to_output.get_bbox_output", "config_n.get", "config_n.get"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.get_bbox_output"], []], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.__init__.optimizer_factory": [[41, 61], ["config.get", "config.get", "config.get", "torch.optim.SGD", "torch.optim.Adam", "RAdam", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.__init__.build_network": [[63, 110], ["autoregressive_transformer.AutoregressiveTransformerPE.to", "autoregressive_transformer.AutoregressiveTransformer", "print", "autoregressive_transformer.AutoregressiveTransformerPE.load_state_dict", "__init__.hidden2output_layer", "feature_extractors.get_feature_extractor", "autoregressive_transformer.AutoregressiveTransformerPE", "NotImplementedError", "torch.load", "config[].get", "__init__.hidden2output_layer", "feature_extractors.get_feature_extractor", "config[].get", "config[].get", "config[].get", "config[].get", "config[].get", "config[].get", "config[].get"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.__init__.hidden2output_layer", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.feature_extractors.get_feature_extractor", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.__init__.hidden2output_layer", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.feature_extractors.get_feature_extractor"], []], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.__init__": [[20, 69], ["torch.Module.__init__", "fast_transformers.builders.TransformerEncoderBuilder.from_kwargs().get", "autoregressive_transformer.BaseAutoregressiveTransformer.register_parameter", "torch.Linear", "torch.Linear", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "torch.Linear", "torch.Linear", "config.get", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "fast_transformers.builders.TransformerEncoderBuilder.from_kwargs", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "config.get", "config.get", "config.get", "config.get", "config.get"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dims", ",", "hidden2output", ",", "feature_extractor", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Build a transformer encoder", "\n", "self", ".", "transformer_encoder", "=", "TransformerEncoderBuilder", ".", "from_kwargs", "(", "\n", "n_layers", "=", "config", ".", "get", "(", "\"n_layers\"", ",", "6", ")", ",", "\n", "n_heads", "=", "config", ".", "get", "(", "\"n_heads\"", ",", "12", ")", ",", "\n", "query_dimensions", "=", "config", ".", "get", "(", "\"query_dimensions\"", ",", "64", ")", ",", "\n", "value_dimensions", "=", "config", ".", "get", "(", "\"value_dimensions\"", ",", "64", ")", ",", "\n", "feed_forward_dimensions", "=", "config", ".", "get", "(", "\n", "\"feed_forward_dimensions\"", ",", "3072", "\n", ")", ",", "\n", "attention_type", "=", "\"full\"", ",", "\n", "activation", "=", "\"gelu\"", "\n", ")", ".", "get", "(", ")", "\n", "\n", "self", ".", "register_parameter", "(", "\n", "\"start_token_embedding\"", ",", "\n", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "512", ")", ")", "\n", ")", "\n", "\n", "# TODO: Add the projection dimensions for the room features in the", "\n", "# config!!!", "\n", "self", ".", "feature_extractor", "=", "feature_extractor", "\n", "self", ".", "fc_room_f", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "feature_extractor", ".", "feature_size", ",", "512", "\n", ")", "\n", "\n", "# Positional encoding for each property", "\n", "self", ".", "pe_pos_x", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "64", ")", "\n", "self", ".", "pe_pos_y", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "64", ")", "\n", "self", ".", "pe_pos_z", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "64", ")", "\n", "\n", "self", ".", "pe_size_x", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "64", ")", "\n", "self", ".", "pe_size_y", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "64", ")", "\n", "self", ".", "pe_size_z", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "64", ")", "\n", "\n", "self", ".", "pe_angle_z", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "64", ")", "\n", "\n", "# Embedding matix for property class label.", "\n", "# Compute the number of classes from the input_dims. Note that we", "\n", "# remove 3 to account for the masked bins for the size, position and", "\n", "# angle properties", "\n", "self", ".", "input_dims", "=", "input_dims", "\n", "self", ".", "n_classes", "=", "self", ".", "input_dims", "-", "3", "-", "3", "-", "1", "\n", "self", ".", "fc_class", "=", "nn", ".", "Linear", "(", "self", ".", "n_classes", ",", "64", ",", "bias", "=", "False", ")", "\n", "\n", "hidden_dims", "=", "config", ".", "get", "(", "\"hidden_dims\"", ",", "768", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "hidden_dims", ")", "\n", "self", ".", "hidden2output", "=", "hidden2output", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.start_symbol": [[70, 81], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "start_symbol", "(", "self", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "start_class", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "self", ".", "n_classes", ",", "device", "=", "device", ")", "\n", "start_class", "[", "0", ",", "0", ",", "-", "2", "]", "=", "1", "\n", "return", "{", "\n", "\"class_labels\"", ":", "start_class", ",", "\n", "\"translations\"", ":", "torch", ".", "zeros", "(", "1", ",", "1", ",", "3", ",", "device", "=", "device", ")", ",", "\n", "\"sizes\"", ":", "torch", ".", "zeros", "(", "1", ",", "1", ",", "3", ",", "device", "=", "device", ")", ",", "\n", "\"angles\"", ":", "torch", ".", "zeros", "(", "1", ",", "1", ",", "1", ",", "device", "=", "device", ")", "\n", "}", "\n", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.end_symbol": [[82, 90], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "end_symbol", "(", "self", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "end_class", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "self", ".", "n_classes", ",", "device", "=", "device", ")", "\n", "end_class", "[", "0", ",", "0", ",", "-", "1", "]", "=", "1", "\n", "return", "{", "\n", "\"class_labels\"", ":", "end_class", ",", "\n", "\"translations\"", ":", "torch", ".", "zeros", "(", "1", ",", "1", ",", "3", ",", "device", "=", "device", ")", ",", "\n", "\"sizes\"", ":", "torch", ".", "zeros", "(", "1", ",", "1", ",", "3", ",", "device", "=", "device", ")", ",", "\n", "\"angles\"", ":", "torch", ".", "zeros", "(", "1", ",", "1", ",", "1", ",", "device", "=", "device", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.start_symbol_features": [[92, 95], ["autoregressive_transformer.BaseAutoregressiveTransformer.fc_room_f", "autoregressive_transformer.BaseAutoregressiveTransformer.feature_extractor"], "methods", ["None"], ["", "def", "start_symbol_features", "(", "self", ",", "B", ",", "room_mask", ")", ":", "\n", "        ", "room_layout_f", "=", "self", ".", "fc_room_f", "(", "self", ".", "feature_extractor", "(", "room_mask", ")", ")", "\n", "return", "room_layout_f", "[", ":", ",", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.forward": [[96, 98], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sample_params", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.autoregressive_decode": [[99, 101], ["NotImplementedError"], "methods", ["None"], ["", "def", "autoregressive_decode", "(", "self", ",", "boxes", ",", "room_mask", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.generate_boxes": [[102, 105], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "NotImplementedError"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate_boxes", "(", "self", ",", "room_mask", ",", "max_boxes", "=", "32", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.__init__": [[108, 113], ["autoregressive_transformer.BaseAutoregressiveTransformer.__init__", "autoregressive_transformer.AutoregressiveTransformer.register_parameter", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dims", ",", "hidden2output", ",", "feature_extractor", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "input_dims", ",", "hidden2output", ",", "feature_extractor", ",", "config", ")", "\n", "# Embedding to be used for the empty/mask token", "\n", "self", ".", "register_parameter", "(", "\n", "\"empty_token_embedding\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "512", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.forward": [[115, 156], ["autoregressive_transformer.AutoregressiveTransformer.fc_class", "autoregressive_transformer.AutoregressiveTransformer.pe_pos_x", "autoregressive_transformer.AutoregressiveTransformer.pe_pos_x", "autoregressive_transformer.AutoregressiveTransformer.pe_pos_x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformer.pe_size_x", "autoregressive_transformer.AutoregressiveTransformer.pe_size_x", "autoregressive_transformer.AutoregressiveTransformer.pe_size_x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformer.pe_angle_z", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformer.start_symbol_features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformer.fc", "fast_transformers.masking.LengthMask", "autoregressive_transformer.AutoregressiveTransformer.transformer_encoder", "autoregressive_transformer.AutoregressiveTransformer.hidden2output", "autoregressive_transformer.AutoregressiveTransformer.empty_token_embedding.expand"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.start_symbol_features"], ["", "def", "forward", "(", "self", ",", "sample_params", ")", ":", "\n", "# Unpack the sample_params", "\n", "        ", "class_labels", "=", "sample_params", "[", "\"class_labels\"", "]", "\n", "translations", "=", "sample_params", "[", "\"translations\"", "]", "\n", "sizes", "=", "sample_params", "[", "\"sizes\"", "]", "\n", "angles", "=", "sample_params", "[", "\"angles\"", "]", "\n", "room_layout", "=", "sample_params", "[", "\"room_layout\"", "]", "\n", "B", ",", "_", ",", "_", "=", "class_labels", ".", "shape", "\n", "\n", "# Apply the positional embeddings only on bboxes that are not the start", "\n", "# token", "\n", "class_f", "=", "self", ".", "fc_class", "(", "class_labels", ")", "\n", "# Apply the positional embedding along each dimension of the position", "\n", "# property", "\n", "pos_f_x", "=", "self", ".", "pe_pos_x", "(", "translations", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", "\n", "pos_f_y", "=", "self", ".", "pe_pos_x", "(", "translations", "[", ":", ",", ":", ",", "1", ":", "2", "]", ")", "\n", "pos_f_z", "=", "self", ".", "pe_pos_x", "(", "translations", "[", ":", ",", ":", ",", "2", ":", "3", "]", ")", "\n", "pos_f", "=", "torch", ".", "cat", "(", "[", "pos_f_x", ",", "pos_f_y", ",", "pos_f_z", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "size_f_x", "=", "self", ".", "pe_size_x", "(", "sizes", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", "\n", "size_f_y", "=", "self", ".", "pe_size_x", "(", "sizes", "[", ":", ",", ":", ",", "1", ":", "2", "]", ")", "\n", "size_f_z", "=", "self", ".", "pe_size_x", "(", "sizes", "[", ":", ",", ":", ",", "2", ":", "3", "]", ")", "\n", "size_f", "=", "torch", ".", "cat", "(", "[", "size_f_x", ",", "size_f_y", ",", "size_f_z", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "angle_f", "=", "self", ".", "pe_angle_z", "(", "angles", ")", "\n", "X", "=", "torch", ".", "cat", "(", "[", "class_f", ",", "pos_f", ",", "size_f", ",", "angle_f", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "start_symbol_f", "=", "self", ".", "start_symbol_features", "(", "B", ",", "room_layout", ")", "\n", "# Concatenate with the mask embedding for the start token", "\n", "X", "=", "torch", ".", "cat", "(", "[", "\n", "start_symbol_f", ",", "self", ".", "empty_token_embedding", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", ",", "X", "\n", "]", ",", "dim", "=", "1", ")", "\n", "X", "=", "self", ".", "fc", "(", "X", ")", "\n", "\n", "# Compute the features using causal masking", "\n", "lengths", "=", "LengthMask", "(", "\n", "sample_params", "[", "\"lengths\"", "]", "+", "2", ",", "\n", "max_len", "=", "X", ".", "shape", "[", "1", "]", "\n", ")", "\n", "F", "=", "self", ".", "transformer_encoder", "(", "X", ",", "length_mask", "=", "lengths", ")", "\n", "return", "self", ".", "hidden2output", "(", "F", "[", ":", ",", "1", ":", "2", "]", ",", "sample_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer._encode": [[157, 197], ["autoregressive_transformer.AutoregressiveTransformer.fc", "autoregressive_transformer.AutoregressiveTransformer.start_symbol_features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformer.fc_class", "autoregressive_transformer.AutoregressiveTransformer.pe_pos_x", "autoregressive_transformer.AutoregressiveTransformer.pe_pos_x", "autoregressive_transformer.AutoregressiveTransformer.pe_pos_x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformer.pe_size_x", "autoregressive_transformer.AutoregressiveTransformer.pe_size_x", "autoregressive_transformer.AutoregressiveTransformer.pe_size_x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformer.pe_angle_z", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformer.start_symbol_features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformer.transformer_encoder", "autoregressive_transformer.AutoregressiveTransformer.empty_token_embedding.expand", "autoregressive_transformer.AutoregressiveTransformer.empty_token_embedding.expand"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.start_symbol_features", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.start_symbol_features"], ["", "def", "_encode", "(", "self", ",", "boxes", ",", "room_mask", ")", ":", "\n", "        ", "class_labels", "=", "boxes", "[", "\"class_labels\"", "]", "\n", "translations", "=", "boxes", "[", "\"translations\"", "]", "\n", "sizes", "=", "boxes", "[", "\"sizes\"", "]", "\n", "angles", "=", "boxes", "[", "\"angles\"", "]", "\n", "B", ",", "_", ",", "_", "=", "class_labels", ".", "shape", "\n", "\n", "if", "class_labels", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "start_symbol_f", "=", "self", ".", "start_symbol_features", "(", "B", ",", "room_mask", ")", "\n", "X", "=", "torch", ".", "cat", "(", "[", "\n", "start_symbol_f", ",", "self", ".", "empty_token_embedding", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "# Apply the positional embeddings only on bboxes that are not the", "\n", "# start token", "\n", "            ", "class_f", "=", "self", ".", "fc_class", "(", "class_labels", "[", ":", ",", "1", ":", "]", ")", "\n", "# Apply the positional embedding along each dimension of the", "\n", "# position property", "\n", "pos_f_x", "=", "self", ".", "pe_pos_x", "(", "translations", "[", ":", ",", "1", ":", ",", "0", ":", "1", "]", ")", "\n", "pos_f_y", "=", "self", ".", "pe_pos_x", "(", "translations", "[", ":", ",", "1", ":", ",", "1", ":", "2", "]", ")", "\n", "pos_f_z", "=", "self", ".", "pe_pos_x", "(", "translations", "[", ":", ",", "1", ":", ",", "2", ":", "3", "]", ")", "\n", "pos_f", "=", "torch", ".", "cat", "(", "[", "pos_f_x", ",", "pos_f_y", ",", "pos_f_z", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "size_f_x", "=", "self", ".", "pe_size_x", "(", "sizes", "[", ":", ",", "1", ":", ",", "0", ":", "1", "]", ")", "\n", "size_f_y", "=", "self", ".", "pe_size_x", "(", "sizes", "[", ":", ",", "1", ":", ",", "1", ":", "2", "]", ")", "\n", "size_f_z", "=", "self", ".", "pe_size_x", "(", "sizes", "[", ":", ",", "1", ":", ",", "2", ":", "3", "]", ")", "\n", "size_f", "=", "torch", ".", "cat", "(", "[", "size_f_x", ",", "size_f_y", ",", "size_f_z", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "angle_f", "=", "self", ".", "pe_angle_z", "(", "angles", "[", ":", ",", "1", ":", "]", ")", "\n", "X", "=", "torch", ".", "cat", "(", "[", "class_f", ",", "pos_f", ",", "size_f", ",", "angle_f", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "start_symbol_f", "=", "self", ".", "start_symbol_features", "(", "B", ",", "room_mask", ")", "\n", "# Concatenate with the mask embedding for the start token", "\n", "X", "=", "torch", ".", "cat", "(", "[", "\n", "start_symbol_f", ",", "self", ".", "empty_token_embedding", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", ",", "X", "\n", "]", ",", "dim", "=", "1", ")", "\n", "", "X", "=", "self", ".", "fc", "(", "X", ")", "\n", "F", "=", "self", ".", "transformer_encoder", "(", "X", ",", "length_mask", "=", "None", ")", "[", ":", ",", "1", ":", "2", "]", "\n", "\n", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.autoregressive_decode": [[198, 221], ["autoregressive_transformer.AutoregressiveTransformer._encode", "autoregressive_transformer.AutoregressiveTransformer.hidden2output.sample_class_labels", "autoregressive_transformer.AutoregressiveTransformer.hidden2output.sample_translations", "autoregressive_transformer.AutoregressiveTransformer.hidden2output.sample_angles", "autoregressive_transformer.AutoregressiveTransformer.hidden2output.sample_sizes"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE._encode", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.sample_class_labels", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.sample_translations", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.sample_angles", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.sample_sizes"], ["", "def", "autoregressive_decode", "(", "self", ",", "boxes", ",", "room_mask", ")", ":", "\n", "        ", "class_labels", "=", "boxes", "[", "\"class_labels\"", "]", "\n", "\n", "# Compute the features using the transformer", "\n", "F", "=", "self", ".", "_encode", "(", "boxes", ",", "room_mask", ")", "\n", "# Sample the class label for the next bbbox", "\n", "class_labels", "=", "self", ".", "hidden2output", ".", "sample_class_labels", "(", "F", ")", "\n", "# Sample the translations", "\n", "translations", "=", "self", ".", "hidden2output", ".", "sample_translations", "(", "F", ",", "class_labels", ")", "\n", "# Sample the angles", "\n", "angles", "=", "self", ".", "hidden2output", ".", "sample_angles", "(", "\n", "F", ",", "class_labels", ",", "translations", "\n", ")", "\n", "# Sample the sizes", "\n", "sizes", "=", "self", ".", "hidden2output", ".", "sample_sizes", "(", "\n", "F", ",", "class_labels", ",", "translations", ",", "angles", "\n", ")", "\n", "\n", "return", "{", "\n", "\"class_labels\"", ":", "class_labels", ",", "\n", "\"translations\"", ":", "translations", ",", "\n", "\"sizes\"", ":", "sizes", ",", "\n", "\"angles\"", ":", "angles", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.generate_boxes": [[223, 241], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "autoregressive_transformer.AutoregressiveTransformer.start_symbol", "range", "autoregressive_transformer.AutoregressiveTransformer.autoregressive_decode", "autoregressive_transformer.AutoregressiveTransformer.keys", "boxes[].to", "boxes[].to", "boxes[].to", "boxes[].to", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.start_symbol", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.autoregressive_decode"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate_boxes", "(", "self", ",", "room_mask", ",", "max_boxes", "=", "32", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "boxes", "=", "self", ".", "start_symbol", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "max_boxes", ")", ":", "\n", "            ", "box", "=", "self", ".", "autoregressive_decode", "(", "boxes", ",", "room_mask", "=", "room_mask", ")", "\n", "\n", "for", "k", "in", "box", ".", "keys", "(", ")", ":", "\n", "                ", "boxes", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "boxes", "[", "k", "]", ",", "box", "[", "k", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Check if we have the end symbol", "\n", "", "if", "box", "[", "\"class_labels\"", "]", "[", "0", ",", "0", ",", "-", "1", "]", "==", "1", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "{", "\n", "\"class_labels\"", ":", "boxes", "[", "\"class_labels\"", "]", ".", "to", "(", "\"cpu\"", ")", ",", "\n", "\"translations\"", ":", "boxes", "[", "\"translations\"", "]", ".", "to", "(", "\"cpu\"", ")", ",", "\n", "\"sizes\"", ":", "boxes", "[", "\"sizes\"", "]", ".", "to", "(", "\"cpu\"", ")", ",", "\n", "\"angles\"", ":", "boxes", "[", "\"angles\"", "]", ".", "to", "(", "\"cpu\"", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.autoregressive_decode_with_class_label": [[243, 273], ["autoregressive_transformer.AutoregressiveTransformer._encode", "autoregressive_transformer.AutoregressiveTransformer.hidden2output.sample_translations", "autoregressive_transformer.AutoregressiveTransformer.hidden2output.sample_angles", "autoregressive_transformer.AutoregressiveTransformer.hidden2output.sample_sizes", "len"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE._encode", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.sample_translations", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.sample_angles", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.sample_sizes"], ["", "def", "autoregressive_decode_with_class_label", "(", "\n", "self", ",", "boxes", ",", "room_mask", ",", "class_label", "\n", ")", ":", "\n", "        ", "class_labels", "=", "boxes", "[", "\"class_labels\"", "]", "\n", "B", ",", "_", ",", "C", "=", "class_labels", ".", "shape", "\n", "\n", "# Make sure that everything has the correct size", "\n", "assert", "len", "(", "class_label", ".", "shape", ")", "==", "3", "\n", "assert", "class_label", ".", "shape", "[", "0", "]", "==", "B", "\n", "assert", "class_label", ".", "shape", "[", "-", "1", "]", "==", "C", "\n", "\n", "# Compute the features using the transformer", "\n", "F", "=", "self", ".", "_encode", "(", "boxes", ",", "room_mask", ")", "\n", "\n", "# Sample the translations conditioned on the query_class_label", "\n", "translations", "=", "self", ".", "hidden2output", ".", "sample_translations", "(", "F", ",", "class_label", ")", "\n", "# Sample the angles", "\n", "angles", "=", "self", ".", "hidden2output", ".", "sample_angles", "(", "\n", "F", ",", "class_label", ",", "translations", "\n", ")", "\n", "# Sample the sizes", "\n", "sizes", "=", "self", ".", "hidden2output", ".", "sample_sizes", "(", "\n", "F", ",", "class_label", ",", "translations", ",", "angles", "\n", ")", "\n", "\n", "return", "{", "\n", "\"class_labels\"", ":", "class_label", ",", "\n", "\"translations\"", ":", "translations", ",", "\n", "\"sizes\"", ":", "sizes", ",", "\n", "\"angles\"", ":", "angles", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.add_object": [[275, 315], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dict", "isinstance", "autoregressive_transformer.AutoregressiveTransformer.start_symbol", "autoregressive_transformer.AutoregressiveTransformer.keys", "autoregressive_transformer.AutoregressiveTransformer.autoregressive_decode_with_class_label", "autoregressive_transformer.AutoregressiveTransformer.keys", "autoregressive_transformer.AutoregressiveTransformer.end_symbol", "autoregressive_transformer.AutoregressiveTransformer.keys", "dict.items", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.start_symbol", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.autoregressive_decode_with_class_label", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.end_symbol"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "add_object", "(", "self", ",", "room_mask", ",", "class_label", ",", "boxes", "=", "None", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "boxes", "=", "dict", "(", "boxes", ".", "items", "(", ")", ")", "\n", "\n", "# Make sure that the provided class_label will have the correct format", "\n", "if", "isinstance", "(", "class_label", ",", "int", ")", ":", "\n", "            ", "one_hot", "=", "torch", ".", "eye", "(", "self", ".", "n_classes", ")", "\n", "class_label", "=", "one_hot", "[", "class_label", "]", "[", "None", ",", "None", "]", "\n", "", "elif", "not", "torch", ".", "is_tensor", "(", "class_label", ")", ":", "\n", "            ", "class_label", "=", "torch", ".", "from_numpy", "(", "class_label", ")", "\n", "\n", "# Make sure that the class label the correct size,", "\n", "# namely (batch_size, 1, n_classes)", "\n", "", "assert", "class_label", ".", "shape", "==", "(", "1", ",", "1", ",", "self", ".", "n_classes", ")", "\n", "\n", "# Create the initial input to the transformer, namely the start token", "\n", "start_box", "=", "self", ".", "start_symbol", "(", "device", ")", "\n", "for", "k", "in", "start_box", ".", "keys", "(", ")", ":", "\n", "            ", "boxes", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "start_box", "[", "k", "]", ",", "boxes", "[", "k", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Based on the query class label sample the location of the new object", "\n", "", "box", "=", "self", ".", "autoregressive_decode_with_class_label", "(", "\n", "boxes", "=", "boxes", ",", "\n", "room_mask", "=", "room_mask", ",", "\n", "class_label", "=", "class_label", "\n", ")", "\n", "\n", "for", "k", "in", "box", ".", "keys", "(", ")", ":", "\n", "            ", "boxes", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "boxes", "[", "k", "]", ",", "box", "[", "k", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Creat a box for the end token and update the boxes dictionary", "\n", "", "end_box", "=", "self", ".", "end_symbol", "(", "device", ")", "\n", "for", "k", "in", "end_box", ".", "keys", "(", ")", ":", "\n", "            ", "boxes", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "boxes", "[", "k", "]", ",", "end_box", "[", "k", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "{", "\n", "\"class_labels\"", ":", "boxes", "[", "\"class_labels\"", "]", ",", "\n", "\"translations\"", ":", "boxes", "[", "\"translations\"", "]", ",", "\n", "\"sizes\"", ":", "boxes", "[", "\"sizes\"", "]", ",", "\n", "\"angles\"", ":", "boxes", "[", "\"angles\"", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.complete_scene": [[317, 348], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dict", "autoregressive_transformer.AutoregressiveTransformer.start_symbol", "autoregressive_transformer.AutoregressiveTransformer.keys", "range", "dict.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformer.autoregressive_decode", "autoregressive_transformer.AutoregressiveTransformer.keys", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.start_symbol", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.autoregressive_decode"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "complete_scene", "(", "\n", "self", ",", "\n", "boxes", ",", "\n", "room_mask", ",", "\n", "max_boxes", "=", "100", ",", "\n", "device", "=", "\"cpu\"", "\n", ")", ":", "\n", "        ", "boxes", "=", "dict", "(", "boxes", ".", "items", "(", ")", ")", "\n", "\n", "# Create the initial input to the transformer, namely the start token", "\n", "start_box", "=", "self", ".", "start_symbol", "(", "device", ")", "\n", "# Add the start box token in the beginning", "\n", "for", "k", "in", "start_box", ".", "keys", "(", ")", ":", "\n", "            ", "boxes", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "start_box", "[", "k", "]", ",", "boxes", "[", "k", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "max_boxes", ")", ":", "\n", "            ", "box", "=", "self", ".", "autoregressive_decode", "(", "boxes", ",", "room_mask", "=", "room_mask", ")", "\n", "\n", "for", "k", "in", "box", ".", "keys", "(", ")", ":", "\n", "                ", "boxes", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "boxes", "[", "k", "]", ",", "box", "[", "k", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Check if we have the end symbol", "\n", "", "if", "box", "[", "\"class_labels\"", "]", "[", "0", ",", "0", ",", "-", "1", "]", "==", "1", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "{", "\n", "\"class_labels\"", ":", "boxes", "[", "\"class_labels\"", "]", ",", "\n", "\"translations\"", ":", "boxes", "[", "\"translations\"", "]", ",", "\n", "\"sizes\"", ":", "boxes", "[", "\"sizes\"", "]", ",", "\n", "\"angles\"", ":", "boxes", "[", "\"angles\"", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.autoregressive_decode_with_class_label_and_translation": [[350, 380], ["autoregressive_transformer.AutoregressiveTransformer._encode", "autoregressive_transformer.AutoregressiveTransformer.hidden2output.sample_angles", "autoregressive_transformer.AutoregressiveTransformer.hidden2output.sample_sizes", "len"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE._encode", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.sample_angles", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.sample_sizes"], ["", "def", "autoregressive_decode_with_class_label_and_translation", "(", "\n", "self", ",", "\n", "boxes", ",", "\n", "room_mask", ",", "\n", "class_label", ",", "\n", "translation", "\n", ")", ":", "\n", "        ", "class_labels", "=", "boxes", "[", "\"class_labels\"", "]", "\n", "B", ",", "_", ",", "C", "=", "class_labels", ".", "shape", "\n", "\n", "# Make sure that everything has the correct size", "\n", "assert", "len", "(", "class_label", ".", "shape", ")", "==", "3", "\n", "assert", "class_label", ".", "shape", "[", "0", "]", "==", "B", "\n", "assert", "class_label", ".", "shape", "[", "-", "1", "]", "==", "C", "\n", "\n", "# Compute the features using the transformer", "\n", "F", "=", "self", ".", "_encode", "(", "boxes", ",", "room_mask", ")", "\n", "\n", "# Sample the angles", "\n", "angles", "=", "self", ".", "hidden2output", ".", "sample_angles", "(", "F", ",", "class_label", ",", "translation", ")", "\n", "# Sample the sizes", "\n", "sizes", "=", "self", ".", "hidden2output", ".", "sample_sizes", "(", "\n", "F", ",", "class_label", ",", "translation", ",", "angles", "\n", ")", "\n", "\n", "return", "{", "\n", "\"class_labels\"", ":", "class_label", ",", "\n", "\"translations\"", ":", "translation", ",", "\n", "\"sizes\"", ":", "sizes", ",", "\n", "\"angles\"", ":", "angles", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.add_object_with_class_and_translation": [[382, 431], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dict", "isinstance", "autoregressive_transformer.AutoregressiveTransformer.start_symbol", "autoregressive_transformer.AutoregressiveTransformer.keys", "autoregressive_transformer.AutoregressiveTransformer.autoregressive_decode_with_class_label_and_translation", "autoregressive_transformer.AutoregressiveTransformer.keys", "autoregressive_transformer.AutoregressiveTransformer.end_symbol", "autoregressive_transformer.AutoregressiveTransformer.keys", "dict.items", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.start_symbol", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.autoregressive_decode_with_class_label_and_translation", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.end_symbol"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "add_object_with_class_and_translation", "(", "\n", "self", ",", "\n", "boxes", ",", "\n", "room_mask", ",", "\n", "class_label", ",", "\n", "translation", ",", "\n", "device", "=", "\"cpu\"", "\n", ")", ":", "\n", "        ", "boxes", "=", "dict", "(", "boxes", ".", "items", "(", ")", ")", "\n", "\n", "# Make sure that the provided class_label will have the correct format", "\n", "if", "isinstance", "(", "class_label", ",", "int", ")", ":", "\n", "            ", "one_hot", "=", "torch", ".", "eye", "(", "self", ".", "n_classes", ")", "\n", "class_label", "=", "one_hot", "[", "class_label", "]", "[", "None", ",", "None", "]", "\n", "", "elif", "not", "torch", ".", "is_tensor", "(", "class_label", ")", ":", "\n", "            ", "class_label", "=", "torch", ".", "from_numpy", "(", "class_label", ")", "\n", "\n", "# Make sure that the class label the correct size,", "\n", "# namely (batch_size, 1, n_classes)", "\n", "", "assert", "class_label", ".", "shape", "==", "(", "1", ",", "1", ",", "self", ".", "n_classes", ")", "\n", "\n", "\n", "# Create the initial input to the transformer, namely the start token", "\n", "start_box", "=", "self", ".", "start_symbol", "(", "device", ")", "\n", "for", "k", "in", "start_box", ".", "keys", "(", ")", ":", "\n", "            ", "boxes", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "start_box", "[", "k", "]", ",", "boxes", "[", "k", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Based on the query class label sample the location of the new object", "\n", "", "box", "=", "self", ".", "autoregressive_decode_with_class_label_and_translation", "(", "\n", "boxes", "=", "boxes", ",", "\n", "class_label", "=", "class_label", ",", "\n", "translation", "=", "translation", ",", "\n", "room_mask", "=", "room_mask", "\n", ")", "\n", "\n", "for", "k", "in", "box", ".", "keys", "(", ")", ":", "\n", "            ", "boxes", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "boxes", "[", "k", "]", ",", "box", "[", "k", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Creat a box for the end token and update the boxes dictionary", "\n", "", "end_box", "=", "self", ".", "end_symbol", "(", "device", ")", "\n", "for", "k", "in", "end_box", ".", "keys", "(", ")", ":", "\n", "            ", "boxes", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "boxes", "[", "k", "]", ",", "end_box", "[", "k", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "{", "\n", "\"class_labels\"", ":", "boxes", "[", "\"class_labels\"", "]", ",", "\n", "\"translations\"", ":", "boxes", "[", "\"translations\"", "]", ",", "\n", "\"sizes\"", ":", "boxes", "[", "\"sizes\"", "]", ",", "\n", "\"angles\"", ":", "boxes", "[", "\"angles\"", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.distribution_classes": [[433, 446], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dict", "autoregressive_transformer.AutoregressiveTransformer.start_symbol", "autoregressive_transformer.AutoregressiveTransformer.keys", "autoregressive_transformer.AutoregressiveTransformer._encode", "autoregressive_transformer.AutoregressiveTransformer.hidden2output.pred_class_probs", "dict.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.start_symbol", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE._encode", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.pred_class_probs"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "distribution_classes", "(", "self", ",", "boxes", ",", "room_mask", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "# Shallow copy the input dictionary", "\n", "        ", "boxes", "=", "dict", "(", "boxes", ".", "items", "(", ")", ")", "\n", "# Create the initial input to the transformer, namely the start token", "\n", "start_box", "=", "self", ".", "start_symbol", "(", "device", ")", "\n", "# Add the start box token in the beginning", "\n", "for", "k", "in", "start_box", ".", "keys", "(", ")", ":", "\n", "            ", "boxes", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "start_box", "[", "k", "]", ",", "boxes", "[", "k", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Compute the features using the transformer", "\n", "", "F", "=", "self", ".", "_encode", "(", "boxes", ",", "room_mask", ")", "\n", "return", "self", ".", "hidden2output", ".", "pred_class_probs", "(", "F", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformer.distribution_translations": [[447, 482], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dict", "isinstance", "autoregressive_transformer.AutoregressiveTransformer.start_symbol", "autoregressive_transformer.AutoregressiveTransformer.keys", "autoregressive_transformer.AutoregressiveTransformer._encode", "autoregressive_transformer.AutoregressiveTransformer.hidden2output.pred_dmll_params_translation", "dict.items", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.start_symbol", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE._encode", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.hidden_to_output.AutoregressiveDMLL.pred_dmll_params_translation"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "distribution_translations", "(", "\n", "self", ",", "\n", "boxes", ",", "\n", "room_mask", ",", "\n", "class_label", ",", "\n", "device", "=", "\"cpu\"", "\n", ")", ":", "\n", "# Shallow copy the input dictionary", "\n", "        ", "boxes", "=", "dict", "(", "boxes", ".", "items", "(", ")", ")", "\n", "\n", "# Make sure that the provided class_label will have the correct format", "\n", "if", "isinstance", "(", "class_label", ",", "int", ")", ":", "\n", "            ", "one_hot", "=", "torch", ".", "eye", "(", "self", ".", "n_classes", ")", "\n", "class_label", "=", "one_hot", "[", "class_label", "]", "[", "None", ",", "None", "]", "\n", "", "elif", "not", "torch", ".", "is_tensor", "(", "class_label", ")", ":", "\n", "            ", "class_label", "=", "torch", ".", "from_numpy", "(", "class_label", ")", "\n", "\n", "# Make sure that the class label the correct size,", "\n", "# namely (batch_size, 1, n_classes)", "\n", "", "assert", "class_label", ".", "shape", "==", "(", "1", ",", "1", ",", "self", ".", "n_classes", ")", "\n", "\n", "# Create the initial input to the transformer, namely the start token", "\n", "start_box", "=", "self", ".", "start_symbol", "(", "device", ")", "\n", "# Concatenate to the given input (that's why we shallow copy in the", "\n", "# beginning of this method", "\n", "for", "k", "in", "start_box", ".", "keys", "(", ")", ":", "\n", "            ", "boxes", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "start_box", "[", "k", "]", ",", "boxes", "[", "k", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Compute the features using the transformer", "\n", "", "F", "=", "self", ".", "_encode", "(", "boxes", ",", "room_mask", ")", "\n", "\n", "# Get the dmll params for the translations", "\n", "return", "self", ".", "hidden2output", ".", "pred_dmll_params_translation", "(", "\n", "F", ",", "class_label", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__": [[486, 518], ["autoregressive_transformer.AutoregressiveTransformer.__init__", "autoregressive_transformer.AutoregressiveTransformerPE.register_parameter", "autoregressive_transformer.AutoregressiveTransformerPE.register_parameter", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "base.FixedPositionalEncoding", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dims", ",", "hidden2output", ",", "feature_extractor", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "input_dims", ",", "hidden2output", ",", "feature_extractor", ",", "config", ")", "\n", "# Embedding to be used for the empty/mask token", "\n", "self", ".", "register_parameter", "(", "\n", "\"empty_token_embedding\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "512", ")", ")", "\n", ")", "\n", "\n", "# Positional embedding for the ordering", "\n", "max_seq_length", "=", "32", "\n", "self", ".", "register_parameter", "(", "\n", "\"positional_embedding\"", ",", "\n", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "max_seq_length", ",", "32", ")", ")", "\n", ")", "\n", "\n", "# Positional encoding for each property", "\n", "self", ".", "pe_pos_x", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "60", ")", "\n", "self", ".", "pe_pos_y", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "60", ")", "\n", "self", ".", "pe_pos_z", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "60", ")", "\n", "\n", "self", ".", "pe_size_x", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "60", ")", "\n", "self", ".", "pe_size_y", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "60", ")", "\n", "self", ".", "pe_size_z", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "64", ")", "\n", "\n", "self", ".", "pe_angle_z", "=", "FixedPositionalEncoding", "(", "proj_dims", "=", "60", ")", "\n", "\n", "# Embedding matix for property class label.", "\n", "# Compute the number of classes from the input_dims. Note that we", "\n", "# remove 3 to account for the masked bins for the size, position and", "\n", "# angle properties", "\n", "self", ".", "input_dims", "=", "input_dims", "\n", "self", ".", "n_classes", "=", "self", ".", "input_dims", "-", "3", "-", "3", "-", "1", "\n", "self", ".", "fc_class", "=", "nn", ".", "Linear", "(", "self", ".", "n_classes", ",", "60", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE.forward": [[519, 561], ["autoregressive_transformer.AutoregressiveTransformerPE.fc_class", "autoregressive_transformer.AutoregressiveTransformerPE.pe_pos_x", "autoregressive_transformer.AutoregressiveTransformerPE.pe_pos_x", "autoregressive_transformer.AutoregressiveTransformerPE.pe_pos_x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformerPE.pe_size_x", "autoregressive_transformer.AutoregressiveTransformerPE.pe_size_x", "autoregressive_transformer.AutoregressiveTransformerPE.pe_size_x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformerPE.pe_angle_z", "autoregressive_transformer.AutoregressiveTransformerPE.positional_embedding[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformerPE.start_symbol_features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformerPE.fc", "fast_transformers.masking.LengthMask", "autoregressive_transformer.AutoregressiveTransformerPE.transformer_encoder", "autoregressive_transformer.AutoregressiveTransformerPE.hidden2output", "autoregressive_transformer.AutoregressiveTransformerPE.empty_token_embedding.expand"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.start_symbol_features"], ["", "def", "forward", "(", "self", ",", "sample_params", ")", ":", "\n", "# Unpack the sample_params", "\n", "        ", "class_labels", "=", "sample_params", "[", "\"class_labels\"", "]", "\n", "translations", "=", "sample_params", "[", "\"translations\"", "]", "\n", "sizes", "=", "sample_params", "[", "\"sizes\"", "]", "\n", "angles", "=", "sample_params", "[", "\"angles\"", "]", "\n", "room_layout", "=", "sample_params", "[", "\"room_layout\"", "]", "\n", "B", ",", "L", ",", "_", "=", "class_labels", ".", "shape", "\n", "\n", "# Apply the positional embeddings only on bboxes that are not the start", "\n", "# token", "\n", "class_f", "=", "self", ".", "fc_class", "(", "class_labels", ")", "\n", "# Apply the positional embedding along each dimension of the position", "\n", "# property", "\n", "pos_f_x", "=", "self", ".", "pe_pos_x", "(", "translations", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", "\n", "pos_f_y", "=", "self", ".", "pe_pos_x", "(", "translations", "[", ":", ",", ":", ",", "1", ":", "2", "]", ")", "\n", "pos_f_z", "=", "self", ".", "pe_pos_x", "(", "translations", "[", ":", ",", ":", ",", "2", ":", "3", "]", ")", "\n", "pos_f", "=", "torch", ".", "cat", "(", "[", "pos_f_x", ",", "pos_f_y", ",", "pos_f_z", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "size_f_x", "=", "self", ".", "pe_size_x", "(", "sizes", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", "\n", "size_f_y", "=", "self", ".", "pe_size_x", "(", "sizes", "[", ":", ",", ":", ",", "1", ":", "2", "]", ")", "\n", "size_f_z", "=", "self", ".", "pe_size_x", "(", "sizes", "[", ":", ",", ":", ",", "2", ":", "3", "]", ")", "\n", "size_f", "=", "torch", ".", "cat", "(", "[", "size_f_x", ",", "size_f_y", ",", "size_f_z", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "angle_f", "=", "self", ".", "pe_angle_z", "(", "angles", ")", "\n", "pe", "=", "self", ".", "positional_embedding", "[", "None", ",", ":", "L", "]", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "X", "=", "torch", ".", "cat", "(", "[", "class_f", ",", "pos_f", ",", "size_f", ",", "angle_f", ",", "pe", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "start_symbol_f", "=", "self", ".", "start_symbol_features", "(", "B", ",", "room_layout", ")", "\n", "# Concatenate with the mask embedding for the start token", "\n", "X", "=", "torch", ".", "cat", "(", "[", "\n", "start_symbol_f", ",", "self", ".", "empty_token_embedding", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", ",", "X", "\n", "]", ",", "dim", "=", "1", ")", "\n", "X", "=", "self", ".", "fc", "(", "X", ")", "\n", "\n", "# Compute the features using causal masking", "\n", "lengths", "=", "LengthMask", "(", "\n", "sample_params", "[", "\"lengths\"", "]", "+", "2", ",", "\n", "max_len", "=", "X", ".", "shape", "[", "1", "]", "\n", ")", "\n", "F", "=", "self", ".", "transformer_encoder", "(", "X", ",", "length_mask", "=", "lengths", ")", "\n", "return", "self", ".", "hidden2output", "(", "F", "[", ":", ",", "1", ":", "2", "]", ",", "sample_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.AutoregressiveTransformerPE._encode": [[562, 603], ["autoregressive_transformer.AutoregressiveTransformerPE.fc", "autoregressive_transformer.AutoregressiveTransformerPE.start_symbol_features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformerPE.fc_class", "autoregressive_transformer.AutoregressiveTransformerPE.pe_pos_x", "autoregressive_transformer.AutoregressiveTransformerPE.pe_pos_x", "autoregressive_transformer.AutoregressiveTransformerPE.pe_pos_x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformerPE.pe_size_x", "autoregressive_transformer.AutoregressiveTransformerPE.pe_size_x", "autoregressive_transformer.AutoregressiveTransformerPE.pe_size_x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformerPE.pe_angle_z", "autoregressive_transformer.AutoregressiveTransformerPE.positional_embedding[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformerPE.start_symbol_features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autoregressive_transformer.AutoregressiveTransformerPE.transformer_encoder", "autoregressive_transformer.AutoregressiveTransformerPE.empty_token_embedding.expand", "autoregressive_transformer.AutoregressiveTransformerPE.empty_token_embedding.expand"], "methods", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.start_symbol_features", "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.BaseAutoregressiveTransformer.start_symbol_features"], ["", "def", "_encode", "(", "self", ",", "boxes", ",", "room_mask", ")", ":", "\n", "        ", "class_labels", "=", "boxes", "[", "\"class_labels\"", "]", "\n", "translations", "=", "boxes", "[", "\"translations\"", "]", "\n", "sizes", "=", "boxes", "[", "\"sizes\"", "]", "\n", "angles", "=", "boxes", "[", "\"angles\"", "]", "\n", "B", ",", "L", ",", "_", "=", "class_labels", ".", "shape", "\n", "\n", "if", "class_labels", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "start_symbol_f", "=", "self", ".", "start_symbol_features", "(", "B", ",", "room_mask", ")", "\n", "X", "=", "torch", ".", "cat", "(", "[", "\n", "start_symbol_f", ",", "self", ".", "empty_token_embedding", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "# Apply the positional embeddings only on bboxes that are not the", "\n", "# start token", "\n", "            ", "class_f", "=", "self", ".", "fc_class", "(", "class_labels", "[", ":", ",", "1", ":", "]", ")", "\n", "# Apply the positional embedding along each dimension of the", "\n", "# position property", "\n", "pos_f_x", "=", "self", ".", "pe_pos_x", "(", "translations", "[", ":", ",", "1", ":", ",", "0", ":", "1", "]", ")", "\n", "pos_f_y", "=", "self", ".", "pe_pos_x", "(", "translations", "[", ":", ",", "1", ":", ",", "1", ":", "2", "]", ")", "\n", "pos_f_z", "=", "self", ".", "pe_pos_x", "(", "translations", "[", ":", ",", "1", ":", ",", "2", ":", "3", "]", ")", "\n", "pos_f", "=", "torch", ".", "cat", "(", "[", "pos_f_x", ",", "pos_f_y", ",", "pos_f_z", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "size_f_x", "=", "self", ".", "pe_size_x", "(", "sizes", "[", ":", ",", "1", ":", ",", "0", ":", "1", "]", ")", "\n", "size_f_y", "=", "self", ".", "pe_size_x", "(", "sizes", "[", ":", ",", "1", ":", ",", "1", ":", "2", "]", ")", "\n", "size_f_z", "=", "self", ".", "pe_size_x", "(", "sizes", "[", ":", ",", "1", ":", ",", "2", ":", "3", "]", ")", "\n", "size_f", "=", "torch", ".", "cat", "(", "[", "size_f_x", ",", "size_f_y", ",", "size_f_z", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "angle_f", "=", "self", ".", "pe_angle_z", "(", "angles", "[", ":", ",", "1", ":", "]", ")", "\n", "pe", "=", "self", ".", "positional_embedding", "[", "None", ",", "1", ":", "L", "]", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "X", "=", "torch", ".", "cat", "(", "[", "class_f", ",", "pos_f", ",", "size_f", ",", "angle_f", ",", "pe", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "start_symbol_f", "=", "self", ".", "start_symbol_features", "(", "B", ",", "room_mask", ")", "\n", "# Concatenate with the mask embedding for the start token", "\n", "X", "=", "torch", ".", "cat", "(", "[", "\n", "start_symbol_f", ",", "self", ".", "empty_token_embedding", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", ",", "X", "\n", "]", ",", "dim", "=", "1", ")", "\n", "", "X", "=", "self", ".", "fc", "(", "X", ")", "\n", "F", "=", "self", ".", "transformer_encoder", "(", "X", ",", "length_mask", "=", "None", ")", "[", ":", ",", "1", ":", "2", "]", "\n", "\n", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.train_on_batch": [[605, 617], ["optimizer.zero_grad", "model", "model.reconstruction_loss", "X_pred.reconstruction_loss.backward", "optimizer.step", "X_pred.reconstruction_loss.item"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.AutoregressiveBBoxOutput.reconstruction_loss"], ["", "", "def", "train_on_batch", "(", "model", ",", "optimizer", ",", "sample_params", ",", "config", ")", ":", "\n", "# Make sure that everything has the correct size", "\n", "    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "X_pred", "=", "model", "(", "sample_params", ")", "\n", "# Compute the loss", "\n", "loss", "=", "X_pred", ".", "reconstruction_loss", "(", "sample_params", ",", "sample_params", "[", "\"lengths\"", "]", ")", "\n", "# Do the backpropagation", "\n", "loss", ".", "backward", "(", ")", "\n", "# Do the update", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.autoregressive_transformer.validate_on_batch": [[619, 625], ["torch.no_grad", "torch.no_grad", "model", "model.reconstruction_loss", "X_pred.reconstruction_loss.item"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.networks.bbox_output.AutoregressiveBBoxOutput.reconstruction_loss"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_on_batch", "(", "model", ",", "sample_params", ",", "config", ")", ":", "\n", "    ", "X_pred", "=", "model", "(", "sample_params", ")", "\n", "# Compute the loss", "\n", "loss", "=", "X_pred", ".", "reconstruction_loss", "(", "sample_params", ",", "sample_params", "[", "\"lengths\"", "]", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.mmd.expected_gaussian_kernel": [[12, 44], ["torch.einsum", "torch.einsum", "X2.view.view", "torch.einsum.view", "torch.exp().mean", "torch.einsum", "torch.exp"], "function", ["None"], ["def", "expected_gaussian_kernel", "(", "X", ",", "Y", ",", "gamma", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Compute the average of k(X, Y) where k is the gaussian rbf kernel with\n    \u03b3=`gamma`.\n\n    In particular, compute\n\n        k(X, Y) = ||exp(-\u03b3 ||\u03a7-\u03a5||_2^2)||_1 / N / M\n                = ||exp(-\u03b3 (||\u03a7||^2 + ||\u03a5||^2 - 2\u03a7 \u03a5^\u03a4))||_1 / N / M\n\n    Arguments\n    ---------\n        X: tensor (N, D) Features sampled from the first distribution\n        Y: tensor (M, D) Features sampled from the second distribution\n        gamma: The \u03b3 parameter for the rbf kernel.\n    \"\"\"", "\n", "N", ",", "D", "=", "X", ".", "shape", "\n", "M", ",", "_", "=", "Y", ".", "shape", "\n", "\n", "X2", "=", "torch", ".", "einsum", "(", "\"nd,nd->n\"", ",", "X", ",", "X", ")", "\n", "# minor optimization for the case that Y = X", "\n", "if", "Y", "is", "X", ":", "\n", "        ", "Y2", "=", "X2", "\n", "", "else", ":", "\n", "        ", "Y2", "=", "torch", ".", "einsum", "(", "\"md,md->m\"", ",", "Y", ",", "Y", ")", "\n", "", "XY", "=", "torch", ".", "einsum", "(", "\"nd,md->nm\"", ",", "X", ",", "Y", ")", "\n", "\n", "# prepare them for addition by making sure", "\n", "# X2.shape == (N, 1) and Y2.shape == (1, M)", "\n", "X2", "=", "X2", ".", "view", "(", "N", ",", "1", ")", "\n", "Y2", "=", "Y2", ".", "view", "(", "1", ",", "M", ")", "\n", "\n", "return", "torch", ".", "exp", "(", "-", "gamma", "*", "(", "X2", "+", "Y2", "-", "2", "*", "XY", ")", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.mmd.mmd": [[46, 64], ["mmd.expected_gaussian_kernel", "mmd.expected_gaussian_kernel", "mmd.expected_gaussian_kernel"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.mmd.expected_gaussian_kernel", "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.mmd.expected_gaussian_kernel", "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.mmd.expected_gaussian_kernel"], ["", "def", "mmd", "(", "X", ",", "Y", ",", "gamma", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Compute the mmd loss with gaussian rbf kernel with \u03b3=`gamma`.\n\n    This function computes\n\n        MMD(X, Y) ~= E_p,p[k(x, x')] + E_q,q[k(y, y')] - 2 E_p,q[k(x, y)]\n\n    Arguments\n    ---------\n        X: tensor (N, D) Features sampled from the first distribution\n        Y: tensor (M, D) Features sampled from the second distribution\n        gamma: The \u03b3 parameter for the rbf kernel.\n    \"\"\"", "\n", "Exx", "=", "expected_gaussian_kernel", "(", "X", ",", "X", ",", "gamma", ")", "\n", "Eyy", "=", "expected_gaussian_kernel", "(", "Y", ",", "Y", ",", "gamma", ")", "\n", "Exy", "=", "expected_gaussian_kernel", "(", "X", ",", "Y", ",", "gamma", ")", "\n", "\n", "return", "Exx", "+", "Eyy", "-", "2", "*", "Exy", "\n", "", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.__init__.cross_entropy_loss": [[16, 26], ["torch.nn.functional.cross_entropy().reshape", "torch.nn.functional.cross_entropy().reshape", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "pred.reshape", "target.reshape().argmax", "target.reshape"], "function", ["None"], ["__license__", "=", "\"NVIDIA Source Code License\"", "\n", "__version__", "=", "\"0.1\"", "\n", ""]], "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.__init__.log_sum_exp": [[28, 37], ["torch.max", "torch.max", "torch.max", "torch.max", "len", "torch.log", "torch.log", "x.size", "torch.sum", "torch.sum", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.datasets.threed_front_scene.ThreedFutureModel.size"], []], "home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.__init__.dmll": [[39, 114], ["torch.clamp", "torch.clamp", "torch.exp", "torch.exp", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.log_softmax", "__init__.log_sum_exp", "torch.nn.functional.softplus", "torch.log", "torch.log", "torch.clamp", "torch.clamp", "numpy.log"], "function", ["home.repos.pwc.inspect_result.nv-tlabs_atiss.losses.__init__.log_sum_exp"], []]}