{"home.repos.pwc.inspect_result.taohan10200_IIM.None.trainer.Trainer.__init__": [[16, 55], ["datasets.loading_data", "model.locator.Crowd_locator", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "misc.utils.logger", "torch.optim.Adam", "torch.optim.Adam", "misc.utils.Timer", "misc.utils.Timer", "misc.utils.Timer", "numpy.int", "torch.load", "torch.load", "torch.load", "torch.load", "trainer.Trainer.net.load_state_dict", "trainer.Trainer.optimizer.load_state_dict", "trainer.Trainer.scheduler.load_state_dict", "print", "len", "trainer.Trainer.net.Extractor.parameters", "trainer.Trainer.net.Binar.parameters"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.__init__.loading_data", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.logger"], ["    ", "def", "__init__", "(", "self", ",", "cfg_data", ",", "pwd", ")", ":", "\n", "\n", "        ", "self", ".", "cfg_data", "=", "cfg_data", "\n", "self", ".", "train_loader", ",", "self", ".", "val_loader", ",", "self", ".", "restore_transform", "=", "datasets", ".", "loading_data", "(", "cfg", ".", "DATASET", ")", "\n", "\n", "self", ".", "data_mode", "=", "cfg", ".", "DATASET", "\n", "self", ".", "exp_name", "=", "cfg", ".", "EXP_NAME", "\n", "self", ".", "exp_path", "=", "cfg", ".", "EXP_PATH", "\n", "self", ".", "pwd", "=", "pwd", "\n", "\n", "self", ".", "net_name", "=", "cfg", ".", "NET", "\n", "self", ".", "net", "=", "Crowd_locator", "(", "cfg", ".", "NET", ",", "cfg", ".", "GPU_ID", ",", "pretrained", "=", "True", ")", "\n", "\n", "if", "cfg", ".", "OPT", "==", "'Adam'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "self", ".", "net", ".", "Extractor", ".", "parameters", "(", ")", ",", "'lr'", ":", "cfg", ".", "LR_BASE_NET", ",", "'weight_decay'", ":", "1e-5", "}", ",", "\n", "{", "'params'", ":", "self", ".", "net", ".", "Binar", ".", "parameters", "(", ")", ",", "'lr'", ":", "cfg", ".", "LR_BM_NET", "}", "]", ")", "\n", "\n", "", "self", ".", "scheduler", "=", "StepLR", "(", "self", ".", "optimizer", ",", "step_size", "=", "cfg", ".", "NUM_EPOCH_LR_DECAY", ",", "gamma", "=", "cfg", ".", "LR_DECAY", ")", "\n", "self", ".", "train_record", "=", "{", "'best_F1'", ":", "0", ",", "'best_Pre'", ":", "0", ",", "'best_Rec'", ":", "0", ",", "'best_mae'", ":", "1e20", ",", "'best_mse'", ":", "1e20", ",", "'best_nae'", ":", "1e20", ",", "'best_model_name'", ":", "''", "}", "\n", "self", ".", "timer", "=", "{", "'iter time'", ":", "Timer", "(", ")", ",", "'train time'", ":", "Timer", "(", ")", ",", "'val time'", ":", "Timer", "(", ")", "}", "\n", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "i_tb", "=", "0", "\n", "self", ".", "num_iters", "=", "cfg", ".", "MAX_EPOCH", "*", "np", ".", "int", "(", "len", "(", "self", ".", "train_loader", ")", ")", "\n", "\n", "\n", "if", "cfg", ".", "RESUME", ":", "\n", "            ", "latest_state", "=", "torch", ".", "load", "(", "cfg", ".", "RESUME_PATH", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "latest_state", "[", "'net'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "latest_state", "[", "'optimizer'", "]", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "latest_state", "[", "'scheduler'", "]", ")", "\n", "self", ".", "epoch", "=", "latest_state", "[", "'epoch'", "]", "+", "1", "\n", "self", ".", "i_tb", "=", "latest_state", "[", "'i_tb'", "]", "\n", "self", ".", "num_iters", "=", "latest_state", "[", "'num_iters'", "]", "\n", "self", ".", "train_record", "=", "latest_state", "[", "'train_record'", "]", "\n", "self", ".", "exp_path", "=", "latest_state", "[", "'exp_path'", "]", "\n", "self", ".", "exp_name", "=", "latest_state", "[", "'exp_name'", "]", "\n", "print", "(", "\"Finish loading resume mode\"", ")", "\n", "", "self", ".", "writer", ",", "self", ".", "log_txt", "=", "logger", "(", "self", ".", "exp_path", ",", "self", ".", "exp_name", ",", "self", ".", "pwd", ",", "[", "'exp'", ",", "'figure'", ",", "'img'", ",", "'vis'", "]", ",", "resume", "=", "cfg", ".", "RESUME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.None.trainer.Trainer.forward": [[57, 75], ["range", "trainer.Trainer.timer[].tic", "trainer.Trainer.train", "trainer.Trainer.timer[].toc", "print", "print", "trainer.Trainer.timer[].tic", "trainer.Trainer.validate", "trainer.Trainer.timer[].toc", "print"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.tic", "home.repos.pwc.inspect_result.taohan10200_IIM.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.toc", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.tic", "home.repos.pwc.inspect_result.taohan10200_IIM.None.trainer.Trainer.validate", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.toc"], ["", "def", "forward", "(", "self", ")", ":", "\n", "# self.validate()", "\n", "        ", "for", "epoch", "in", "range", "(", "self", ".", "epoch", ",", "cfg", ".", "MAX_EPOCH", ")", ":", "\n", "            ", "self", ".", "epoch", "=", "epoch", "\n", "# training    ", "\n", "self", ".", "timer", "[", "'train time'", "]", ".", "tic", "(", ")", "\n", "self", ".", "train", "(", ")", "\n", "self", ".", "timer", "[", "'train time'", "]", ".", "toc", "(", "average", "=", "False", ")", "\n", "\n", "print", "(", "'train time: {:.2f}s'", ".", "format", "(", "self", ".", "timer", "[", "'train time'", "]", ".", "diff", ")", ")", "\n", "print", "(", "'='", "*", "20", ")", "\n", "\n", "# validation", "\n", "if", "epoch", "%", "cfg", ".", "VAL_FREQ", "==", "0", "and", "epoch", ">", "cfg", ".", "VAL_DENSE_START", ":", "\n", "                ", "self", ".", "timer", "[", "'val time'", "]", ".", "tic", "(", ")", "\n", "self", ".", "validate", "(", ")", "\n", "self", ".", "timer", "[", "'val time'", "]", ".", "toc", "(", "average", "=", "False", ")", "\n", "print", "(", "'val time: {:.2f}s'", ".", "format", "(", "self", ".", "timer", "[", "'val time'", "]", ".", "diff", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.None.trainer.Trainer.train": [[80, 127], ["trainer.Trainer.net.train", "enumerate", "trainer.Trainer.timer[].tic", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.net", "all_loss.backward", "trainer.Trainer.optimizer.step", "misc.utils.adjust_learning_rate", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.timer[].toc", "print", "print", "trainer.Trainer.get_boxInfo_from_Binar_map", "misc.utils.vis_results", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "head_map_loss.item", "binar_map_loss.item", "len", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "binar_map[].detach().cpu().numpy", "pre_map[].detach().cpu().numpy", "gt_map[].detach().cpu().numpy", "binar_map.detach().cpu().numpy", "threshold_matrix.detach().cpu().numpy", "trainer.Trainer.net.Binar.module.weight.data.item", "trainer.Trainer.net.Binar.module.bias.data.item", "trainer.Trainer.net.Binar.weight.data.item", "trainer.Trainer.net.Binar.bias.data.item", "head_map_loss.item", "threshold_matrix.max().item", "threshold_matrix.min().item", "binar_map[].detach().cpu", "pre_map[].detach().cpu", "gt_map[].detach().cpu", "binar_map.detach().cpu", "threshold_matrix.detach().cpu", "threshold_matrix.max", "threshold_matrix.min", "binar_map[].detach", "pre_map[].detach", "gt_map[].detach", "binar_map.detach", "threshold_matrix.detach"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.tic", "home.repos.pwc.inspect_result.taohan10200_IIM.model.PBM.BinarizedF.backward", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.toc", "home.repos.pwc.inspect_result.taohan10200_IIM.None.test.get_boxInfo_from_Binar_map", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.vis_results"], ["", "", "", "def", "train", "(", "self", ")", ":", "# training for all datasets", "\n", "        ", "self", ".", "net", ".", "train", "(", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "train_loader", ",", "0", ")", ":", "\n", "            ", "self", ".", "i_tb", "+=", "1", "\n", "self", ".", "timer", "[", "'iter time'", "]", ".", "tic", "(", ")", "\n", "img", ",", "gt_map", "=", "data", "\n", "\n", "img", "=", "Variable", "(", "img", ")", ".", "cuda", "(", ")", "\n", "gt_map", "=", "Variable", "(", "gt_map", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "threshold_matrix", ",", "pre_map", ",", "binar_map", "=", "self", ".", "net", "(", "img", ",", "gt_map", ")", "\n", "head_map_loss", ",", "binar_map_loss", "=", "self", ".", "net", ".", "loss", "\n", "\n", "all_loss", "=", "head_map_loss", "+", "binar_map_loss", "\n", "all_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "lr1", ",", "lr2", "=", "adjust_learning_rate", "(", "self", ".", "optimizer", ",", "\n", "cfg", ".", "LR_BASE_NET", ",", "\n", "cfg", ".", "LR_BM_NET", ",", "\n", "self", ".", "num_iters", ",", "\n", "self", ".", "i_tb", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "cfg", ".", "PRINT_FREQ", "==", "0", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "'train_lr1'", ",", "lr1", ",", "self", ".", "i_tb", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train_lr2'", ",", "lr2", ",", "self", ".", "i_tb", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train_loss'", ",", "head_map_loss", ".", "item", "(", ")", ",", "self", ".", "i_tb", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Binar_loss'", ",", "binar_map_loss", ".", "item", "(", ")", ",", "self", ".", "i_tb", ")", "\n", "if", "len", "(", "cfg", ".", "GPU_ID", ")", ">", "1", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'weight'", ",", "self", ".", "net", ".", "Binar", ".", "module", ".", "weight", ".", "data", ".", "item", "(", ")", ",", "self", ".", "i_tb", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'bias'", ",", "self", ".", "net", ".", "Binar", ".", "module", ".", "bias", ".", "data", ".", "item", "(", ")", ",", "self", ".", "i_tb", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'weight'", ",", "self", ".", "net", ".", "Binar", ".", "weight", ".", "data", ".", "item", "(", ")", ",", "self", ".", "i_tb", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'bias'", ",", "self", ".", "net", ".", "Binar", ".", "bias", ".", "data", ".", "item", "(", ")", ",", "self", ".", "i_tb", ")", "\n", "\n", "", "self", ".", "timer", "[", "'iter time'", "]", ".", "toc", "(", "average", "=", "False", ")", "\n", "print", "(", "'[ep %d][it %d][loss %.4f][lr1 %.4f][lr2 %.4f][%.2fs]'", "%", "(", "self", ".", "epoch", "+", "1", ",", "i", "+", "1", ",", "head_map_loss", ".", "item", "(", ")", ",", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "*", "10000", ",", "self", ".", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "*", "10000", ",", "self", ".", "timer", "[", "'iter time'", "]", ".", "diff", ")", ")", "\n", "print", "(", "'       [t-max: %.3f t-min: %.3f]'", "%", "\n", "(", "threshold_matrix", ".", "max", "(", ")", ".", "item", "(", ")", ",", "threshold_matrix", ".", "min", "(", ")", ".", "item", "(", ")", ")", ")", "\n", "", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "box_pre", ",", "boxes", "=", "self", ".", "get_boxInfo_from_Binar_map", "(", "binar_map", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "vis_results", "(", "'tmp_vis'", ",", "0", ",", "self", ".", "writer", ",", "self", ".", "restore_transform", ",", "img", ",", "pre_map", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "gt_map", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "binar_map", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "threshold_matrix", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "boxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.None.trainer.Trainer.get_boxInfo_from_Binar_map": [[128, 140], ["Binar_numpy.squeeze().astype.squeeze().astype.squeeze().astype", "cv2.connectedComponentsWithStats", "len", "Binar_numpy.squeeze().astype.squeeze().astype.squeeze"], "methods", ["None"], ["", "", "", "def", "get_boxInfo_from_Binar_map", "(", "self", ",", "Binar_numpy", ",", "min_area", "=", "3", ")", ":", "\n", "        ", "Binar_numpy", "=", "Binar_numpy", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "assert", "Binar_numpy", ".", "ndim", "==", "2", "\n", "cnt", ",", "labels", ",", "stats", ",", "centroids", "=", "cv2", ".", "connectedComponentsWithStats", "(", "Binar_numpy", ",", "connectivity", "=", "4", ")", "# centriod (w,h)", "\n", "\n", "boxes", "=", "stats", "[", "1", ":", ",", ":", "]", "\n", "points", "=", "centroids", "[", "1", ":", ",", ":", "]", "\n", "index", "=", "(", "boxes", "[", ":", ",", "4", "]", ">=", "min_area", ")", "\n", "boxes", "=", "boxes", "[", "index", "]", "\n", "points", "=", "points", "[", "index", "]", "\n", "pre_data", "=", "{", "'num'", ":", "len", "(", "points", ")", ",", "'points'", ":", "points", "}", "\n", "return", "pre_data", ",", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.None.trainer.Trainer.validate": [[141, 297], ["trainer.Trainer.net.eval", "misc.utils.AverageMeter", "tqdm.tqdm.tqdm", "enumerate", "numpy.sqrt", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "misc.utils.update_model", "misc.utils.print_NWPU_summary", "misc.utils.AverageMeter", "misc.utils.AverageMeter", "misc.utils.AverageMeter", "misc.utils.AverageMeter", "misc.utils.AverageMeter", "misc.utils.AverageMeter", "misc.utils.AverageCategoryMeter", "misc.utils.AverageCategoryMeter", "misc.utils.AverageMeter", "misc.utils.AverageMeter", "misc.utils.AverageMeter", "misc.utils.AverageCategoryMeter", "misc.utils.AverageCategoryMeter", "misc.utils.AverageCategoryMeter", "misc.utils.AverageCategoryMeter", "misc.utils.AverageCategoryMeter", "misc.utils.AverageCategoryMeter", "misc.utils.AverageCategoryMeter", "misc.utils.AverageCategoryMeter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.pad.cpu", "torch.mse_loss", "torch.mse_loss", "misc.utils.AverageMeter.update", "binar_map.numpy.numpy.numpy", "trainer.Trainer.get_boxInfo_from_Binar_map", "misc.compute_metric.eval_metrics", "metrics_s[].update", "metrics_s[].update", "metrics_s[].update", "metrics_s[].update", "metrics_s[].update", "metrics_l[].update", "metrics_l[].update", "metrics_l[].update", "metrics_l[].update", "metrics_l[].update", "abs", "cnt_errors[].update", "cnt_errors[].update", "range", "map", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like().cpu().float", "torch.zeros_like().cpu().float", "torch.zeros_like().cpu().float", "torch.zeros_like().cpu().float", "torch.zeros_like().cpu().float", "torch.zeros_like().cpu().float", "torch.zeros_like().cpu().float", "torch.zeros_like().cpu().float", "range", "crop_masks.sum", "torch.mse_loss.item", "gt_data[].numpy().astype", "cnt_errors[].update", "misc.utils.vis_results", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "i.cpu", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "range", "crop_imgs.size", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "range", "abs", "torch.zeros_like().cpu().float.numpy", "torch.zeros_like().cpu().float.numpy", "torch.pad.numpy", "torch.zeros_like().cpu().float.numpy", "torch.zeros_like().cpu().float.numpy", "trainer.Trainer.net", "torch.pad.size", "torch.pad.size", "max", "min", "crop_imgs.append", "crop_gt.append", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "mask[].fill_", "crop_masks.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "i.cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "torch.zeros_like().cpu", "max", "min", "gt_data[].numpy", "min", "max", "min", "trainer.Trainer.net", "min", "max", "min", "min", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "min", "min"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.update_model", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.print_NWPU_summary", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.None.test.get_boxInfo_from_Binar_map", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.compute_metric.eval_metrics", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.vis_results"], ["", "def", "validate", "(", "self", ")", ":", "\n", "        ", "self", ".", "net", ".", "eval", "(", ")", "\n", "num_classes", "=", "6", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "cnt_errors", "=", "{", "'mae'", ":", "AverageMeter", "(", ")", ",", "'mse'", ":", "AverageMeter", "(", ")", ",", "'nae'", ":", "AverageMeter", "(", ")", "}", "\n", "metrics_s", "=", "{", "'tp'", ":", "AverageMeter", "(", ")", ",", "'fp'", ":", "AverageMeter", "(", ")", ",", "'fn'", ":", "AverageMeter", "(", ")", ",", "'tp_c'", ":", "AverageCategoryMeter", "(", "num_classes", ")", ",", "\n", "'fn_c'", ":", "AverageCategoryMeter", "(", "num_classes", ")", "}", "\n", "metrics_l", "=", "{", "'tp'", ":", "AverageMeter", "(", ")", ",", "'fp'", ":", "AverageMeter", "(", ")", ",", "'fn'", ":", "AverageMeter", "(", ")", ",", "'tp_c'", ":", "AverageCategoryMeter", "(", "num_classes", ")", ",", "\n", "'fn_c'", ":", "AverageCategoryMeter", "(", "num_classes", ")", "}", "\n", "\n", "c_maes", "=", "{", "'level'", ":", "AverageCategoryMeter", "(", "5", ")", ",", "'illum'", ":", "AverageCategoryMeter", "(", "4", ")", "}", "\n", "c_mses", "=", "{", "'level'", ":", "AverageCategoryMeter", "(", "5", ")", ",", "'illum'", ":", "AverageCategoryMeter", "(", "4", ")", "}", "\n", "c_naes", "=", "{", "'level'", ":", "AverageCategoryMeter", "(", "5", ")", ",", "'illum'", ":", "AverageCategoryMeter", "(", "4", ")", "}", "\n", "gen_tqdm", "=", "tqdm", "(", "self", ".", "val_loader", ")", "\n", "for", "vi", ",", "data", "in", "enumerate", "(", "gen_tqdm", ",", "0", ")", ":", "\n", "            ", "img", ",", "dot_map", ",", "gt_data", "=", "data", "\n", "slice_h", ",", "slice_w", "=", "self", ".", "cfg_data", ".", "TRAIN_SIZE", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "img", "=", "Variable", "(", "img", ")", ".", "cuda", "(", ")", "\n", "dot_map", "=", "Variable", "(", "dot_map", ")", ".", "cuda", "(", ")", "\n", "# crop the img and gt_map with a max stride on x and y axis", "\n", "# size: HW: __C_NWPU.TRAIN_SIZE", "\n", "# stack them with a the batchsize: __C_NWPU.TRAIN_BATCH_SIZE", "\n", "crop_imgs", ",", "crop_gt", ",", "crop_masks", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "img", ".", "shape", "\n", "\n", "if", "h", "*", "w", "<", "slice_h", "*", "2", "*", "slice_w", "*", "2", "and", "h", "%", "16", "==", "0", "and", "w", "%", "16", "==", "0", ":", "\n", "                    ", "[", "pred_threshold", ",", "pred_map", ",", "__", "]", "=", "[", "i", ".", "cpu", "(", ")", "for", "i", "in", "self", ".", "net", "(", "img", ",", "mask_gt", "=", "None", ",", "mode", "=", "'val'", ")", "]", "\n", "", "else", ":", "\n", "                    ", "if", "h", "%", "16", "!=", "0", ":", "\n", "                        ", "pad_dims", "=", "(", "0", ",", "0", ",", "0", ",", "16", "-", "h", "%", "16", ")", "\n", "h", "=", "(", "h", "//", "16", "+", "1", ")", "*", "16", "\n", "img", "=", "F", ".", "pad", "(", "img", ",", "pad_dims", ",", "\"constant\"", ")", "\n", "dot_map", "=", "F", ".", "pad", "(", "dot_map", ",", "pad_dims", ",", "\"constant\"", ")", "\n", "\n", "", "if", "w", "%", "16", "!=", "0", ":", "\n", "                        ", "pad_dims", "=", "(", "0", ",", "16", "-", "w", "%", "16", ",", "0", ",", "0", ")", "\n", "w", "=", "(", "w", "//", "16", "+", "1", ")", "*", "16", "\n", "img", "=", "F", ".", "pad", "(", "img", ",", "pad_dims", ",", "\"constant\"", ")", "\n", "dot_map", "=", "F", ".", "pad", "(", "dot_map", ",", "pad_dims", ",", "\"constant\"", ")", "\n", "\n", "", "assert", "img", ".", "size", "(", ")", "[", "2", ":", "]", "==", "dot_map", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "h", ",", "slice_h", ")", ":", "\n", "                        ", "h_start", ",", "h_end", "=", "max", "(", "min", "(", "h", "-", "slice_h", ",", "i", ")", ",", "0", ")", ",", "min", "(", "h", ",", "i", "+", "slice_h", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "w", ",", "slice_w", ")", ":", "\n", "                            ", "w_start", ",", "w_end", "=", "max", "(", "min", "(", "w", "-", "slice_w", ",", "j", ")", ",", "0", ")", ",", "min", "(", "w", ",", "j", "+", "slice_w", ")", "\n", "\n", "crop_imgs", ".", "append", "(", "img", "[", ":", ",", ":", ",", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", ")", "\n", "crop_gt", ".", "append", "(", "dot_map", "[", ":", ",", ":", ",", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", ")", "\n", "mask", "=", "torch", ".", "zeros_like", "(", "dot_map", ")", ".", "cpu", "(", ")", "\n", "mask", "[", ":", ",", ":", ",", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", ".", "fill_", "(", "1.0", ")", "\n", "crop_masks", ".", "append", "(", "mask", ")", "\n", "", "", "crop_imgs", ",", "crop_gt", ",", "crop_masks", "=", "map", "(", "lambda", "x", ":", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", ",", "(", "crop_imgs", ",", "crop_gt", ",", "crop_masks", ")", ")", "\n", "\n", "# forward may need repeatng", "\n", "crop_preds", ",", "crop_thresholds", "=", "[", "]", ",", "[", "]", "\n", "nz", ",", "period", "=", "crop_imgs", ".", "size", "(", "0", ")", ",", "self", ".", "cfg_data", ".", "TRAIN_BATCH_SIZE", "\n", "for", "i", "in", "range", "(", "0", ",", "nz", ",", "period", ")", ":", "\n", "                        ", "[", "crop_threshold", ",", "crop_pred", ",", "__", "]", "=", "[", "i", ".", "cpu", "(", ")", "for", "i", "in", "self", ".", "net", "(", "crop_imgs", "[", "i", ":", "min", "(", "nz", ",", "i", "+", "period", ")", "]", ",", "mask_gt", "=", "None", ",", "mode", "=", "'val'", ")", "]", "\n", "crop_preds", ".", "append", "(", "crop_pred", ")", "\n", "crop_thresholds", ".", "append", "(", "crop_threshold", ")", "\n", "\n", "", "crop_preds", "=", "torch", ".", "cat", "(", "crop_preds", ",", "dim", "=", "0", ")", "\n", "crop_thresholds", "=", "torch", ".", "cat", "(", "crop_thresholds", ",", "dim", "=", "0", ")", "\n", "\n", "# splice them to the original size", "\n", "idx", "=", "0", "\n", "pred_map", "=", "torch", ".", "zeros_like", "(", "dot_map", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "pred_threshold", "=", "torch", ".", "zeros_like", "(", "dot_map", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "h", ",", "slice_h", ")", ":", "\n", "                        ", "h_start", ",", "h_end", "=", "max", "(", "min", "(", "h", "-", "slice_h", ",", "i", ")", ",", "0", ")", ",", "min", "(", "h", ",", "i", "+", "slice_h", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "w", ",", "slice_w", ")", ":", "\n", "                            ", "w_start", ",", "w_end", "=", "max", "(", "min", "(", "w", "-", "slice_w", ",", "j", ")", ",", "0", ")", ",", "min", "(", "w", ",", "j", "+", "slice_w", ")", "\n", "pred_map", "[", ":", ",", ":", ",", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "+=", "crop_preds", "[", "idx", "]", "\n", "pred_threshold", "[", ":", ",", ":", ",", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "+=", "crop_thresholds", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "\n", "# for the overlapping area, compute average value", "\n", "", "", "mask", "=", "crop_masks", ".", "sum", "(", "dim", "=", "0", ")", "\n", "pred_map", "=", "(", "pred_map", "/", "mask", ")", "\n", "pred_threshold", "=", "(", "pred_threshold", "/", "mask", ")", "\n", "\n", "# binar_map = self.net.Binar(pred_map.cuda(), pred_threshold.cuda()).cpu()", "\n", "", "a", "=", "torch", ".", "ones_like", "(", "pred_map", ")", "\n", "b", "=", "torch", ".", "zeros_like", "(", "pred_map", ")", "\n", "binar_map", "=", "torch", ".", "where", "(", "pred_map", ">=", "pred_threshold", ",", "a", ",", "b", ")", "\n", "\n", "dot_map", "=", "dot_map", ".", "cpu", "(", ")", "\n", "loss", "=", "F", ".", "mse_loss", "(", "pred_map", ",", "dot_map", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "binar_map", "=", "binar_map", ".", "numpy", "(", ")", "\n", "pred_data", ",", "boxes", "=", "self", ".", "get_boxInfo_from_Binar_map", "(", "binar_map", ")", "\n", "# print(pred_data, gt_data)", "\n", "\n", "\n", "tp_s", ",", "fp_s", ",", "fn_s", ",", "tp_c_s", ",", "fn_c_s", ",", "tp_l", ",", "fp_l", ",", "fn_l", ",", "tp_c_l", ",", "fn_c_l", "=", "eval_metrics", "(", "num_classes", ",", "pred_data", ",", "gt_data", ")", "\n", "\n", "metrics_s", "[", "'tp'", "]", ".", "update", "(", "tp_s", ")", "\n", "metrics_s", "[", "'fp'", "]", ".", "update", "(", "fp_s", ")", "\n", "metrics_s", "[", "'fn'", "]", ".", "update", "(", "fn_s", ")", "\n", "metrics_s", "[", "'tp_c'", "]", ".", "update", "(", "tp_c_s", ")", "\n", "metrics_s", "[", "'fn_c'", "]", ".", "update", "(", "fn_c_s", ")", "\n", "metrics_l", "[", "'tp'", "]", ".", "update", "(", "tp_l", ")", "\n", "metrics_l", "[", "'fp'", "]", ".", "update", "(", "fp_l", ")", "\n", "metrics_l", "[", "'fn'", "]", ".", "update", "(", "fn_l", ")", "\n", "metrics_l", "[", "'tp_c'", "]", ".", "update", "(", "tp_c_l", ")", "\n", "metrics_l", "[", "'fn_c'", "]", ".", "update", "(", "fn_c_l", ")", "\n", "\n", "\n", "#    -----------Counting performance------------------", "\n", "gt_count", ",", "pred_cnt", "=", "gt_data", "[", "'num'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "float", ")", ",", "pred_data", "[", "'num'", "]", "\n", "s_mae", "=", "abs", "(", "gt_count", "-", "pred_cnt", ")", "\n", "s_mse", "=", "(", "(", "gt_count", "-", "pred_cnt", ")", "*", "(", "gt_count", "-", "pred_cnt", ")", ")", "\n", "cnt_errors", "[", "'mae'", "]", ".", "update", "(", "s_mae", ")", "\n", "cnt_errors", "[", "'mse'", "]", ".", "update", "(", "s_mse", ")", "\n", "if", "gt_count", "!=", "0", ":", "\n", "                    ", "s_nae", "=", "(", "abs", "(", "gt_count", "-", "pred_cnt", ")", "/", "gt_count", ")", "\n", "cnt_errors", "[", "'nae'", "]", ".", "update", "(", "s_nae", ")", "\n", "\n", "", "if", "vi", "==", "0", ":", "\n", "                    ", "vis_results", "(", "self", ".", "exp_name", ",", "self", ".", "epoch", ",", "self", ".", "writer", ",", "self", ".", "restore_transform", ",", "img", ",", "\n", "pred_map", ".", "numpy", "(", ")", ",", "dot_map", ".", "numpy", "(", ")", ",", "binar_map", ",", "\n", "pred_threshold", ".", "numpy", "(", ")", ",", "boxes", ")", "\n", "\n", "", "", "", "ap_s", "=", "metrics_s", "[", "'tp'", "]", ".", "sum", "/", "(", "metrics_s", "[", "'tp'", "]", ".", "sum", "+", "metrics_s", "[", "'fp'", "]", ".", "sum", "+", "1e-20", ")", "\n", "ar_s", "=", "metrics_s", "[", "'tp'", "]", ".", "sum", "/", "(", "metrics_s", "[", "'tp'", "]", ".", "sum", "+", "metrics_s", "[", "'fn'", "]", ".", "sum", "+", "1e-20", ")", "\n", "f1m_s", "=", "2", "*", "ap_s", "*", "ar_s", "/", "(", "ap_s", "+", "ar_s", "+", "1e-20", ")", "\n", "ar_c_s", "=", "metrics_s", "[", "'tp_c'", "]", ".", "sum", "/", "(", "metrics_s", "[", "'tp_c'", "]", ".", "sum", "+", "metrics_s", "[", "'fn_c'", "]", ".", "sum", "+", "1e-20", ")", "\n", "\n", "ap_l", "=", "metrics_l", "[", "'tp'", "]", ".", "sum", "/", "(", "metrics_l", "[", "'tp'", "]", ".", "sum", "+", "metrics_l", "[", "'fp'", "]", ".", "sum", "+", "1e-20", ")", "\n", "ar_l", "=", "metrics_l", "[", "'tp'", "]", ".", "sum", "/", "(", "metrics_l", "[", "'tp'", "]", ".", "sum", "+", "metrics_l", "[", "'fn'", "]", ".", "sum", "+", "1e-20", ")", "\n", "f1m_l", "=", "2", "*", "ap_l", "*", "ar_l", "/", "(", "ap_l", "+", "ar_l", "+", "1e-20", ")", "\n", "ar_c_l", "=", "metrics_l", "[", "'tp_c'", "]", ".", "sum", "/", "(", "metrics_l", "[", "'tp_c'", "]", ".", "sum", "+", "metrics_l", "[", "'fn_c'", "]", ".", "sum", "+", "1e-20", ")", "\n", "\n", "\n", "loss", "=", "losses", ".", "avg", "\n", "mae", "=", "cnt_errors", "[", "'mae'", "]", ".", "avg", "\n", "mse", "=", "np", ".", "sqrt", "(", "cnt_errors", "[", "'mse'", "]", ".", "avg", ")", "\n", "nae", "=", "cnt_errors", "[", "'nae'", "]", ".", "avg", "\n", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'val_loss'", ",", "loss", ",", "self", ".", "epoch", "+", "1", ")", "\n", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'F1'", ",", "f1m_l", ",", "self", ".", "epoch", "+", "1", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Pre'", ",", "ap_l", ",", "self", ".", "epoch", "+", "1", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Rec'", ",", "ar_l", ",", "self", ".", "epoch", "+", "1", ")", "\n", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'overall_mae'", ",", "mae", ",", "self", ".", "epoch", "+", "1", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'overall_mse'", ",", "mse", ",", "self", ".", "epoch", "+", "1", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'overall_nae'", ",", "nae", ",", "self", ".", "epoch", "+", "1", ")", "\n", "\n", "self", ".", "train_record", "=", "update_model", "(", "self", ",", "[", "f1m_l", ",", "ap_l", ",", "ar_l", ",", "mae", ",", "mse", ",", "nae", ",", "loss", "]", ")", "\n", "\n", "print_NWPU_summary", "(", "self", ",", "[", "f1m_l", ",", "ap_l", ",", "ar_l", ",", "mae", ",", "mse", ",", "nae", ",", "loss", "]", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.taohan10200_IIM.None.test.main": [[50, 56], ["os.path.join", "test.test", "open", "f.readlines"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.None.test.test"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "txtpath", "=", "os", ".", "path", ".", "join", "(", "dataRoot", ",", "test_list", ")", "\n", "with", "open", "(", "txtpath", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "test", "(", "lines", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.None.test.get_boxInfo_from_Binar_map": [[58, 70], ["Binar_numpy.squeeze().astype.squeeze().astype", "cv2.connectedComponentsWithStats", "len", "Binar_numpy.squeeze().astype.squeeze"], "function", ["None"], ["", "def", "get_boxInfo_from_Binar_map", "(", "Binar_numpy", ",", "min_area", "=", "3", ")", ":", "\n", "    ", "Binar_numpy", "=", "Binar_numpy", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "assert", "Binar_numpy", ".", "ndim", "==", "2", "\n", "cnt", ",", "labels", ",", "stats", ",", "centroids", "=", "cv2", ".", "connectedComponentsWithStats", "(", "Binar_numpy", ",", "connectivity", "=", "4", ")", "# centriod (w,h)", "\n", "\n", "boxes", "=", "stats", "[", "1", ":", ",", ":", "]", "\n", "points", "=", "centroids", "[", "1", ":", ",", ":", "]", "\n", "index", "=", "(", "boxes", "[", ":", ",", "4", "]", ">=", "min_area", ")", "\n", "boxes", "=", "boxes", "[", "index", "]", "\n", "points", "=", "points", "[", "index", "]", "\n", "pre_data", "=", "{", "'num'", ":", "len", "(", "points", ")", ",", "'points'", ":", "points", "}", "\n", "return", "pre_data", ",", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.None.test.test": [[72, 174], ["model.locator.Crowd_locator", "model.locator.Crowd_locator.cuda", "torch.load", "torch.load", "model.locator.Crowd_locator.eval", "tqdm.tqdm", "len", "model.locator.Crowd_locator.load_state_dict", "collections.OrderedDict", "torch.load.items", "model.locator.Crowd_locator.load_state_dict", "os.path.join", "PIL.Image.open", "GPU_ID.split", "k.replace", "infos.split", "F.pad.convert", "img_transform", "torch.no_grad", "torch.no_grad", "torch.autograd.Variable().cuda", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "test.get_boxInfo_from_Binar_map", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu().float", "torch.zeros().cpu().float", "range", "crop_masks.sum", "torch.where.cpu().numpy", "open", "f.write", "f.write", "enumerate", "f.write", "f.close", "torch.autograd.Variable", "i.cpu", "torch.pad", "torch.pad", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "crop_imgs.size", "torch.cat.append", "torch.cat.append", "range", "model.locator.Crowd_locator.", "max", "min", "crop_imgs.append", "torch.zeros().cpu", "torch.zeros().cpu", "mask[].fill_", "crop_masks.append", "i.cpu", "torch.zeros", "torch.zeros", "torch.zeros().cpu", "torch.zeros().cpu", "max", "min", "torch.where.cpu", "str", "f.write", "f.write", "min", "max", "min", "model.locator.Crowd_locator.", "min", "max", "min", "min", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "min", "str", "F.pad.size", "F.pad.size", "str", "str", "int", "min", "str", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.None.test.get_boxInfo_from_Binar_map"], ["", "def", "test", "(", "file_list", ",", "model_path", ")", ":", "\n", "\n", "    ", "net", "=", "Crowd_locator", "(", "netName", ",", "GPU_ID", ",", "pretrained", "=", "True", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "if", "len", "(", "GPU_ID", ".", "split", "(", "','", ")", ")", ">", "1", ":", "\n", "        ", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "else", ":", "\n", "        ", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "net", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "", "net", ".", "eval", "(", ")", "\n", "\n", "gts", "=", "[", "]", "\n", "preds", "=", "[", "]", "\n", "\n", "file_list", "=", "tqdm", ".", "tqdm", "(", "file_list", ")", "\n", "for", "infos", "in", "file_list", ":", "\n", "        ", "filename", "=", "infos", ".", "split", "(", ")", "[", "0", "]", "\n", "\n", "imgname", "=", "os", ".", "path", ".", "join", "(", "dataRoot", ",", "'images'", ",", "filename", "+", "'.jpg'", ")", "\n", "img", "=", "Image", ".", "open", "(", "imgname", ")", "\n", "\n", "if", "img", ".", "mode", "==", "'L'", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "", "img", "=", "img_transform", "(", "img", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "slice_h", ",", "slice_w", "=", "512", ",", "1024", "\n", "slice_h", ",", "slice_w", "=", "slice_h", ",", "slice_w", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "img", "=", "Variable", "(", "img", ")", ".", "cuda", "(", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "img", ".", "shape", "\n", "crop_imgs", ",", "crop_dots", ",", "crop_masks", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "h", "*", "w", "<", "slice_h", "*", "2", "*", "slice_w", "*", "2", "and", "h", "%", "16", "==", "0", "and", "w", "%", "16", "==", "0", ":", "\n", "                ", "[", "pred_threshold", ",", "pred_map", ",", "__", "]", "=", "[", "i", ".", "cpu", "(", ")", "for", "i", "in", "net", "(", "img", ",", "mask_gt", "=", "None", ",", "mode", "=", "'val'", ")", "]", "\n", "", "else", ":", "\n", "                ", "if", "h", "%", "16", "!=", "0", ":", "\n", "                    ", "pad_dims", "=", "(", "0", ",", "0", ",", "0", ",", "16", "-", "h", "%", "16", ")", "\n", "h", "=", "(", "h", "//", "16", "+", "1", ")", "*", "16", "\n", "img", "=", "F", ".", "pad", "(", "img", ",", "pad_dims", ",", "\"constant\"", ")", "\n", "\n", "\n", "", "if", "w", "%", "16", "!=", "0", ":", "\n", "                    ", "pad_dims", "=", "(", "0", ",", "16", "-", "w", "%", "16", ",", "0", ",", "0", ")", "\n", "w", "=", "(", "w", "//", "16", "+", "1", ")", "*", "16", "\n", "img", "=", "F", ".", "pad", "(", "img", ",", "pad_dims", ",", "\"constant\"", ")", "\n", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "h", ",", "slice_h", ")", ":", "\n", "                    ", "h_start", ",", "h_end", "=", "max", "(", "min", "(", "h", "-", "slice_h", ",", "i", ")", ",", "0", ")", ",", "min", "(", "h", ",", "i", "+", "slice_h", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "w", ",", "slice_w", ")", ":", "\n", "                        ", "w_start", ",", "w_end", "=", "max", "(", "min", "(", "w", "-", "slice_w", ",", "j", ")", ",", "0", ")", ",", "min", "(", "w", ",", "j", "+", "slice_w", ")", "\n", "crop_imgs", ".", "append", "(", "img", "[", ":", ",", ":", ",", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", ")", "\n", "mask", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "img", ".", "size", "(", "2", ")", ",", "img", ".", "size", "(", "3", ")", ")", ".", "cpu", "(", ")", "\n", "mask", "[", ":", ",", ":", ",", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", ".", "fill_", "(", "1.0", ")", "\n", "crop_masks", ".", "append", "(", "mask", ")", "\n", "", "", "crop_imgs", ",", "crop_masks", "=", "torch", ".", "cat", "(", "crop_imgs", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "crop_masks", ",", "dim", "=", "0", ")", "\n", "\n", "# forward may need repeatng", "\n", "crop_preds", ",", "crop_thresholds", "=", "[", "]", ",", "[", "]", "\n", "nz", ",", "period", "=", "crop_imgs", ".", "size", "(", "0", ")", ",", "4", "\n", "for", "i", "in", "range", "(", "0", ",", "nz", ",", "period", ")", ":", "\n", "                    ", "[", "crop_threshold", ",", "crop_pred", ",", "__", "]", "=", "[", "i", ".", "cpu", "(", ")", "for", "i", "in", "net", "(", "crop_imgs", "[", "i", ":", "min", "(", "nz", ",", "i", "+", "period", ")", "]", ",", "mask_gt", "=", "None", ",", "mode", "=", "'val'", ")", "]", "\n", "crop_preds", ".", "append", "(", "crop_pred", ")", "\n", "crop_thresholds", ".", "append", "(", "crop_threshold", ")", "\n", "\n", "", "crop_preds", "=", "torch", ".", "cat", "(", "crop_preds", ",", "dim", "=", "0", ")", "\n", "crop_thresholds", "=", "torch", ".", "cat", "(", "crop_thresholds", ",", "dim", "=", "0", ")", "\n", "\n", "# splice them to the original size", "\n", "idx", "=", "0", "\n", "pred_map", "=", "torch", ".", "zeros", "(", "b", ",", "1", ",", "h", ",", "w", ")", ".", "cpu", "(", ")", "\n", "pred_threshold", "=", "torch", ".", "zeros", "(", "b", ",", "1", ",", "h", ",", "w", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "h", ",", "slice_h", ")", ":", "\n", "                    ", "h_start", ",", "h_end", "=", "max", "(", "min", "(", "h", "-", "slice_h", ",", "i", ")", ",", "0", ")", ",", "min", "(", "h", ",", "i", "+", "slice_h", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "w", ",", "slice_w", ")", ":", "\n", "                        ", "w_start", ",", "w_end", "=", "max", "(", "min", "(", "w", "-", "slice_w", ",", "j", ")", ",", "0", ")", ",", "min", "(", "w", ",", "j", "+", "slice_w", ")", "\n", "pred_map", "[", ":", ",", ":", ",", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "+=", "crop_preds", "[", "idx", "]", "\n", "pred_threshold", "[", ":", ",", ":", ",", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "+=", "crop_thresholds", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "", "", "mask", "=", "crop_masks", ".", "sum", "(", "dim", "=", "0", ")", "\n", "pred_map", "=", "(", "pred_map", "/", "mask", ")", "\n", "pred_threshold", "=", "(", "pred_threshold", "/", "mask", ")", "\n", "\n", "", "a", "=", "torch", ".", "ones_like", "(", "pred_map", ")", "\n", "b", "=", "torch", ".", "zeros_like", "(", "pred_map", ")", "\n", "binar_map", "=", "torch", ".", "where", "(", "pred_map", ">=", "pred_threshold", ",", "a", ",", "b", ")", "\n", "\n", "pred_data", ",", "boxes", "=", "get_boxInfo_from_Binar_map", "(", "binar_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "with", "open", "(", "out_file_name", ",", "'a'", ")", "as", "f", ":", "\n", "\n", "                ", "f", ".", "write", "(", "filename", "+", "' '", ")", "\n", "f", ".", "write", "(", "str", "(", "pred_data", "[", "'num'", "]", ")", "+", "' '", ")", "\n", "for", "ind", ",", "point", "in", "enumerate", "(", "pred_data", "[", "'points'", "]", ",", "1", ")", ":", "\n", "                    ", "if", "ind", "<", "pred_data", "[", "'num'", "]", ":", "\n", "                        ", "f", ".", "write", "(", "str", "(", "int", "(", "point", "[", "0", "]", ")", ")", "+", "' '", "+", "str", "(", "int", "(", "point", "[", "1", "]", ")", ")", "+", "' '", ")", "\n", "", "else", ":", "\n", "                            ", "f", ".", "write", "(", "str", "(", "int", "(", "point", "[", "0", "]", ")", ")", "+", "' '", "+", "str", "(", "int", "(", "point", "[", "1", "]", ")", ")", ")", "\n", "", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.None.vis4val.main": [[24, 97], ["misc.utils.read_pred_and_gt", "print", "cv2.imread", "cv2.imwrite", "numpy.array", "numpy.array", "scipy.spatial.distance_matrix", "numpy.zeros", "range", "misc.utils.hungarian", "range", "range", "range", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "str", "cv2.circle", "cv2.circle", "cv2.circle", "cv2.circle", "cv2.circle", "str", "assign.sum", "assign.sum", "assign.sum", "assign.sum", "str", "str"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.read_pred_and_gt", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.hungarian"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "pred_data", ",", "gt_data", "=", "read_pred_and_gt", "(", "pred_file", ",", "gt_file", ")", "\n", "\n", "for", "i_sample", "in", "id_std", ":", "\n", "\n", "        ", "print", "(", "i_sample", ")", "\n", "\n", "gt_p", ",", "pred_p", ",", "fn_gt_index", ",", "tp_pred_index", ",", "fp_pred_index", ",", "ap", ",", "ar", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "if", "gt_data", "[", "i_sample", "]", "[", "'num'", "]", "==", "0", "and", "pred_data", "[", "i_sample", "]", "[", "'num'", "]", "!=", "0", ":", "\n", "            ", "pred_p", "=", "pred_data", "[", "i_sample", "]", "[", "'points'", "]", "\n", "fp_pred_index", "=", "np", ".", "array", "(", "range", "(", "pred_p", ".", "shape", "[", "0", "]", ")", ")", "\n", "ap", "=", "0", "\n", "ar", "=", "0", "\n", "\n", "", "if", "pred_data", "[", "i_sample", "]", "[", "'num'", "]", "==", "0", "and", "gt_data", "[", "i_sample", "]", "[", "'num'", "]", "!=", "0", ":", "\n", "            ", "gt_p", "=", "gt_data", "[", "i_sample", "]", "[", "'points'", "]", "\n", "fn_gt_index", "=", "np", ".", "array", "(", "range", "(", "gt_p", ".", "shape", "[", "0", "]", ")", ")", "\n", "sigma_l", "=", "gt_data", "[", "i_sample", "]", "[", "'sigma'", "]", "[", ":", ",", "1", "]", "\n", "ap", "=", "0", "\n", "ar", "=", "0", "\n", "\n", "", "if", "gt_data", "[", "i_sample", "]", "[", "'num'", "]", "!=", "0", "and", "pred_data", "[", "i_sample", "]", "[", "'num'", "]", "!=", "0", ":", "\n", "            ", "pred_p", "=", "pred_data", "[", "i_sample", "]", "[", "'points'", "]", "\n", "gt_p", "=", "gt_data", "[", "i_sample", "]", "[", "'points'", "]", "\n", "sigma_l", "=", "gt_data", "[", "i_sample", "]", "[", "'sigma'", "]", "[", ":", ",", "1", "]", "\n", "level", "=", "gt_data", "[", "i_sample", "]", "[", "'level'", "]", "\n", "\n", "# dist", "\n", "dist_matrix", "=", "ss", ".", "distance_matrix", "(", "pred_p", ",", "gt_p", ",", "p", "=", "2", ")", "\n", "match_matrix", "=", "np", ".", "zeros", "(", "dist_matrix", ".", "shape", ",", "dtype", "=", "bool", ")", "\n", "for", "i_pred_p", "in", "range", "(", "pred_p", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "pred_dist", "=", "dist_matrix", "[", "i_pred_p", ",", ":", "]", "\n", "match_matrix", "[", "i_pred_p", ",", ":", "]", "=", "pred_dist", "<=", "sigma_l", "\n", "\n", "# hungarian outputs a match result, which may be not optimal. ", "\n", "# Nevertheless, the number of tp, fp, tn, fn are same under different match results", "\n", "# If you need the optimal result for visualzation, ", "\n", "# you may treat it as maximum flow problem. ", "\n", "", "tp", ",", "assign", "=", "hungarian", "(", "match_matrix", ")", "\n", "fn_gt_index", "=", "np", ".", "array", "(", "np", ".", "where", "(", "assign", ".", "sum", "(", "0", ")", "==", "0", ")", ")", "[", "0", "]", "\n", "tp_pred_index", "=", "np", ".", "array", "(", "np", ".", "where", "(", "assign", ".", "sum", "(", "1", ")", "==", "1", ")", ")", "[", "0", "]", "\n", "tp_gt_index", "=", "np", ".", "array", "(", "np", ".", "where", "(", "assign", ".", "sum", "(", "0", ")", "==", "1", ")", ")", "[", "0", "]", "\n", "fp_pred_index", "=", "np", ".", "array", "(", "np", ".", "where", "(", "assign", ".", "sum", "(", "1", ")", "==", "0", ")", ")", "[", "0", "]", "\n", "\n", "\n", "\n", "pre", "=", "tp_pred_index", ".", "shape", "[", "0", "]", "/", "(", "tp_pred_index", ".", "shape", "[", "0", "]", "+", "fp_pred_index", ".", "shape", "[", "0", "]", "+", "1e-20", ")", "\n", "rec", "=", "tp_pred_index", ".", "shape", "[", "0", "]", "/", "(", "tp_pred_index", ".", "shape", "[", "0", "]", "+", "fn_gt_index", ".", "shape", "[", "0", "]", "+", "1e-20", ")", "\n", "\n", "", "img", "=", "cv2", ".", "imread", "(", "img_path", "+", "'/'", "+", "str", "(", "i_sample", ")", "+", "'.jpg'", ")", "#bgr", "\n", "# img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)", "\n", "# img = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)", "\n", "\n", "\n", "point_r_value", "=", "5", "\n", "thickness", "=", "3", "\n", "if", "gt_data", "[", "i_sample", "]", "[", "'num'", "]", "!=", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "gt_p", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "i", "in", "fn_gt_index", ":", "\n", "                    ", "cv2", ".", "circle", "(", "img", ",", "(", "gt_p", "[", "i", "]", "[", "0", "]", ",", "gt_p", "[", "i", "]", "[", "1", "]", ")", ",", "point_r_value", ",", "(", "0", ",", "0", ",", "255", ")", ",", "-", "1", ")", "# fn: red", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "gt_p", "[", "i", "]", "[", "0", "]", ",", "gt_p", "[", "i", "]", "[", "1", "]", ")", ",", "sigma_l", "[", "i", "]", ",", "(", "0", ",", "0", ",", "255", ")", ",", "thickness", ")", "#  ", "\n", "", "else", ":", "\n", "                    ", "cv2", ".", "circle", "(", "img", ",", "(", "gt_p", "[", "i", "]", "[", "0", "]", ",", "gt_p", "[", "i", "]", "[", "1", "]", ")", ",", "sigma_l", "[", "i", "]", ",", "(", "0", ",", "255", ",", "0", ")", ",", "thickness", ")", "# gt: green", "\n", "", "", "", "if", "pred_data", "[", "i_sample", "]", "[", "'num'", "]", "!=", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "pred_p", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "i", "in", "tp_pred_index", ":", "\n", "                    ", "cv2", ".", "circle", "(", "img", ",", "(", "pred_p", "[", "i", "]", "[", "0", "]", ",", "pred_p", "[", "i", "]", "[", "1", "]", ")", ",", "point_r_value", ",", "(", "0", ",", "255", ",", "0", ")", ",", "-", "1", ")", "# tp: green", "\n", "", "else", ":", "\n", "                    ", "cv2", ".", "circle", "(", "img", ",", "(", "pred_p", "[", "i", "]", "[", "0", "]", ",", "pred_p", "[", "i", "]", "[", "1", "]", ")", ",", "point_r_value", "*", "2", ",", "(", "255", ",", "0", ",", "255", ")", ",", "-", "1", ")", "# fp: Magenta", "\n", "\n", "", "", "", "cv2", ".", "imwrite", "(", "exp_name", "+", "'/'", "+", "str", "(", "i_sample", ")", "+", "'_pre_'", "+", "str", "(", "pre", ")", "[", "0", ":", "6", "]", "+", "'_rec_'", "+", "str", "(", "rec", ")", "[", "0", ":", "6", "]", "+", "'.jpg'", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.RandAugmentPC.__init__": [[189, 195], ["FIXrandaugment.my_augment_pool"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.my_augment_pool"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "m", ")", ":", "\n", "        ", "assert", "n", ">=", "1", "\n", "assert", "1", "<=", "m", "<=", "10", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "augment_pool", "=", "my_augment_pool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.RandAugmentPC.__call__": [[196, 204], ["random.choices", "FIXrandaugment.CutoutAbs", "numpy.random.uniform", "op", "random.random"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.CutoutAbs"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_pool", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "max_v", ",", "bias", "in", "ops", ":", "\n", "            ", "prob", "=", "np", ".", "random", ".", "uniform", "(", "0.2", ",", "0.8", ")", "\n", "if", "random", ".", "random", "(", ")", "+", "prob", ">=", "1", ":", "\n", "                ", "img", "=", "op", "(", "img", ",", "v", "=", "self", ".", "m", ",", "max_v", "=", "max_v", ",", "bias", "=", "bias", ")", "\n", "", "", "img", "=", "CutoutAbs", "(", "img", ",", "16", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.RandAugmentMC.__init__": [[207, 213], ["FIXrandaugment.fixmatch_augment_pool"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.fixmatch_augment_pool"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "m", ")", ":", "\n", "        ", "assert", "n", ">=", "1", "\n", "assert", "1", "<=", "m", "<=", "10", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "augment_pool", "=", "fixmatch_augment_pool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.RandAugmentMC.__call__": [[214, 222], ["random.choices", "FIXrandaugment.CutoutAbs", "numpy.random.randint", "random.random", "op"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.CutoutAbs"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_pool", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "max_v", ",", "bias", "in", "ops", ":", "\n", "            ", "v", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "m", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", "=", "op", "(", "img", ",", "v", "=", "v", ",", "max_v", "=", "max_v", ",", "bias", "=", "bias", ")", "\n", "", "", "img", "=", "CutoutAbs", "(", "img", ",", "16", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.AutoContrast": [[20, 22], ["PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast"], "function", ["None"], ["def", "AutoContrast", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "autocontrast", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Brightness": [[24, 27], ["PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "FIXrandaugment._float_parameter", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._float_parameter", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Brightness", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Brightness", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Brightness", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Brightness"], ["", "def", "Brightness", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Color": [[29, 32], ["PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "FIXrandaugment._float_parameter", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._float_parameter", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Color", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Color", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Color", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Color"], ["", "def", "Color", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Contrast": [[34, 37], ["PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "FIXrandaugment._float_parameter", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._float_parameter", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Contrast", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Contrast", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Contrast", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Contrast"], ["", "def", "Contrast", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Cutout": [[39, 45], ["int", "FIXrandaugment.CutoutAbs", "FIXrandaugment._float_parameter", "min"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.CutoutAbs", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._float_parameter"], ["", "def", "Cutout", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "if", "v", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "v", "=", "int", "(", "v", "*", "min", "(", "img", ".", "size", ")", ")", "\n", "return", "CutoutAbs", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.CutoutAbs": [[47, 61], ["numpy.random.uniform", "numpy.random.uniform", "int", "int", "int", "int", "img.copy.copy", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "max", "max", "min", "min", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw"], "function", ["None"], ["", "def", "CutoutAbs", "(", "img", ",", "v", ",", "**", "kwarg", ")", ":", "\n", "    ", "w", ",", "h", "=", "img", ".", "size", "\n", "x0", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "w", ")", "\n", "y0", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "h", ")", "\n", "x0", "=", "int", "(", "max", "(", "0", ",", "x0", "-", "v", "/", "2.", ")", ")", "\n", "y0", "=", "int", "(", "max", "(", "0", ",", "y0", "-", "v", "/", "2.", ")", ")", "\n", "x1", "=", "int", "(", "min", "(", "w", ",", "x0", "+", "v", ")", ")", "\n", "y1", "=", "int", "(", "min", "(", "h", ",", "y0", "+", "v", ")", ")", "\n", "xy", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "# gray", "\n", "color", "=", "(", "127", ",", "127", ",", "127", ")", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "PIL", ".", "ImageDraw", ".", "Draw", "(", "img", ")", ".", "rectangle", "(", "xy", ",", "color", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Equalize": [[63, 65], ["PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize"], "function", ["None"], ["", "def", "Equalize", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "equalize", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Identity": [[67, 69], ["None"], "function", ["None"], ["", "def", "Identity", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Invert": [[71, 73], ["PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert"], "function", ["None"], ["", "def", "Invert", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "invert", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Posterize": [[75, 78], ["PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "FIXrandaugment._int_parameter"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._int_parameter"], ["", "def", "Posterize", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageOps", ".", "posterize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Rotate": [[80, 85], ["img.rotate", "FIXrandaugment._int_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._int_parameter"], ["", "def", "Rotate", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "rotate", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Sharpness": [[87, 90], ["PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "FIXrandaugment._float_parameter", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._float_parameter", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Sharpness", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Sharpness", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Sharpness", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Sharpness"], ["", "def", "Sharpness", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.ShearX": [[92, 97], ["img.transform", "FIXrandaugment._float_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._float_parameter"], ["", "def", "ShearX", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "v", ",", "0", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.ShearY": [[99, 104], ["img.transform", "FIXrandaugment._float_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._float_parameter"], ["", "def", "ShearY", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "v", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.Solarize": [[106, 109], ["PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "FIXrandaugment._int_parameter"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._int_parameter"], ["", "def", "Solarize", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "256", "-", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.SolarizeAdd": [[111, 121], ["numpy.array().astype", "numpy.clip", "img_np.astype.astype", "PIL.Image.fromarray", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "FIXrandaugment._int_parameter", "random.random", "numpy.array"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._int_parameter"], ["", "def", "SolarizeAdd", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ",", "threshold", "=", "128", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "img_np", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "img_np", "=", "img_np", "+", "v", "\n", "img_np", "=", "np", ".", "clip", "(", "img_np", ",", "0", ",", "255", ")", "\n", "img_np", "=", "img_np", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_np", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.TranslateX": [[123, 129], ["int", "img.transform", "FIXrandaugment._float_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._float_parameter"], ["", "def", "TranslateX", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "int", "(", "v", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.TranslateY": [[131, 137], ["int", "img.transform", "FIXrandaugment._float_parameter", "random.random"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._float_parameter"], ["", "def", "TranslateY", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "int", "(", "v", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._float_parameter": [[139, 141], ["float"], "function", ["None"], ["", "def", "_float_parameter", "(", "v", ",", "max_v", ")", ":", "\n", "    ", "return", "float", "(", "v", ")", "*", "max_v", "/", "PARAMETER_MAX", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment._int_parameter": [[143, 145], ["int"], "function", ["None"], ["", "def", "_int_parameter", "(", "v", ",", "max_v", ")", ":", "\n", "    ", "return", "int", "(", "v", "*", "max_v", "/", "PARAMETER_MAX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.fixmatch_augment_pool": [[147, 165], ["None"], "function", ["None"], ["", "def", "fixmatch_augment_pool", "(", ")", ":", "\n", "# FixMatch paper", "\n", "    ", "augs", "=", "[", "(", "AutoContrast", ",", "None", ",", "None", ")", ",", "\n", "(", "Brightness", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Color", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Contrast", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Equalize", ",", "None", ",", "None", ")", ",", "\n", "(", "Identity", ",", "None", ",", "None", ")", ",", "\n", "(", "Posterize", ",", "4", ",", "4", ")", ",", "\n", "# (Rotate, 30, 0),", "\n", "(", "Sharpness", ",", "0.9", ",", "0.05", ")", ",", "\n", "# (ShearX, 0.3, 0),", "\n", "# (ShearY, 0.3, 0),", "\n", "(", "Solarize", ",", "256", ",", "0", ")", ",", "\n", "# (TranslateX, 0.3, 0),", "\n", "# (TranslateY, 0.3, 0),", "\n", "]", "\n", "return", "augs", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.FIXrandaugment.my_augment_pool": [[167, 186], ["None"], "function", ["None"], ["", "def", "my_augment_pool", "(", ")", ":", "\n", "# Test", "\n", "    ", "augs", "=", "[", "(", "AutoContrast", ",", "None", ",", "None", ")", ",", "\n", "(", "Brightness", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "Color", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "Contrast", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "Cutout", ",", "0.2", ",", "0", ")", ",", "\n", "(", "Equalize", ",", "None", ",", "None", ")", ",", "\n", "(", "Invert", ",", "None", ",", "None", ")", ",", "\n", "(", "Posterize", ",", "4", ",", "4", ")", ",", "\n", "(", "Rotate", ",", "30", ",", "0", ")", ",", "\n", "(", "Sharpness", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "ShearX", ",", "0.3", ",", "0", ")", ",", "\n", "(", "ShearY", ",", "0.3", ",", "0", ")", ",", "\n", "(", "Solarize", ",", "256", ",", "0", ")", ",", "\n", "(", "SolarizeAdd", ",", "110", ",", "0", ")", ",", "\n", "(", "TranslateX", ",", "0.45", ",", "0", ")", ",", "\n", "(", "TranslateY", ",", "0.45", ",", "0", ")", "]", "\n", "return", "augs", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.__init__.createTrainData": [[13, 52], ["misc.Compose", "torchvision.Compose", "torchvision.Compose", "Dataset", "list_file.append", "print", "torch.utils.data.DataLoader", "misc.ScaleByRateWithMin", "misc.RandomCrop", "misc.RandomHorizontallyFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torch.utils.data.RandomSampler", "torch.utils.data.DataLoader"], "function", ["None"], ["def", "createTrainData", "(", "datasetname", ",", "Dataset", ",", "cfg_data", ")", ":", "\n", "\n", "    ", "folder", ",", "list_file", "=", "None", ",", "None", "\n", "\n", "if", "datasetname", "in", "[", "'SHHA'", ",", "'SHHB'", ",", "'QNRF'", ",", "'JHU'", ",", "'NWPU'", ",", "'FDST'", "]", ":", "\n", "        ", "list_file", "=", "[", "]", "\n", "list_file", ".", "append", "(", "{", "'data_path'", ":", "cfg_data", ".", "DATA_PATH", ",", "\n", "'imgId_txt'", ":", "cfg_data", ".", "TRAIN_LST", ",", "\n", "'box_gt_txt'", ":", "[", "]", "}", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'dataset is not exist'", ")", "\n", "\n", "", "main_transform", "=", "own_transforms", ".", "Compose", "(", "[", "\n", "own_transforms", ".", "ScaleByRateWithMin", "(", "[", "0.8", ",", "1.2", "]", ",", "cfg_data", ".", "TRAIN_SIZE", "[", "1", "]", ",", "cfg_data", ".", "TRAIN_SIZE", "[", "0", "]", ")", ",", "\n", "own_transforms", ".", "RandomCrop", "(", "cfg_data", ".", "TRAIN_SIZE", ")", ",", "\n", "own_transforms", ".", "RandomHorizontallyFlip", "(", ")", ",", "\n", "]", ")", "\n", "\n", "img_transform", "=", "standard_transforms", ".", "Compose", "(", "[", "\n", "standard_transforms", ".", "ToTensor", "(", ")", ",", "\n", "standard_transforms", ".", "Normalize", "(", "*", "cfg_data", ".", "MEAN_STD", ")", "\n", "]", ")", "\n", "mask_transform", "=", "standard_transforms", ".", "Compose", "(", "[", "\n", "standard_transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "\n", "train_set", "=", "Dataset", "(", "datasetname", ",", "'train'", ",", "\n", "main_transform", "=", "main_transform", ",", "\n", "img_transform", "=", "img_transform", ",", "\n", "mask_transform", "=", "mask_transform", ",", "\n", "list_file", "=", "list_file", "\n", ")", "\n", "if", "datasetname", "in", "[", "'SHHA'", ",", "'SHHB'", ",", "'QNRF'", ",", "'JHU'", ",", "'NWPU'", "]", ":", "\n", "        ", "return", "DataLoader", "(", "train_set", ",", "batch_size", "=", "cfg_data", ".", "TRAIN_BATCH_SIZE", ",", "num_workers", "=", "6", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "", "elif", "datasetname", "in", "[", "'FDST'", "]", ":", "\n", "        ", "train_sampler", "=", "RandomSampler", "(", "data_source", "=", "train_set", ",", "replacement", "=", "True", ",", "num_samples", "=", "1000", ")", "\n", "return", "DataLoader", "(", "train_set", ",", "batch_size", "=", "cfg_data", ".", "TRAIN_BATCH_SIZE", ",", "sampler", "=", "train_sampler", ",", "num_workers", "=", "6", ",", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "return", "'error'", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.__init__.createValData": [[53, 85], ["torchvision.Compose", "torchvision.Compose", "Dataset", "list_file.append", "print", "torch.utils.data.DataLoader", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torch.utils.data.RandomSampler", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "createValData", "(", "datasetname", ",", "Dataset", ",", "cfg_data", ")", ":", "\n", "\n", "    ", "if", "datasetname", "in", "[", "'SHHA'", ",", "'SHHB'", ",", "'QNRF'", ",", "'JHU'", ",", "'NWPU'", ",", "'FDST'", "]", ":", "\n", "        ", "list_file", "=", "[", "]", "\n", "list_file", ".", "append", "(", "{", "'data_path'", ":", "cfg_data", ".", "DATA_PATH", ",", "\n", "'imgId_txt'", ":", "cfg_data", ".", "VAL_LST", ",", "\n", "'box_gt_txt'", ":", "cfg_data", ".", "VAL4EVAL", "}", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'dataset is not exist'", ")", "\n", "\n", "", "img_transform", "=", "standard_transforms", ".", "Compose", "(", "[", "\n", "standard_transforms", ".", "ToTensor", "(", ")", ",", "\n", "standard_transforms", ".", "Normalize", "(", "*", "cfg_data", ".", "MEAN_STD", ")", "\n", "]", ")", "\n", "mask_transform", "=", "standard_transforms", ".", "Compose", "(", "[", "\n", "standard_transforms", ".", "ToTensor", "(", ")", "\n", "\n", "]", ")", "\n", "\n", "val_set", "=", "Dataset", "(", "datasetname", ",", "'val'", ",", "\n", "img_transform", "=", "img_transform", ",", "\n", "mask_transform", "=", "mask_transform", ",", "\n", "list_file", "=", "list_file", "\n", ")", "\n", "\n", "if", "datasetname", "in", "[", "'SHHA'", ",", "'SHHB'", ",", "'QNRF'", ",", "'JHU'", ",", "'NWPU'", "]", ":", "\n", "        ", "return", "DataLoader", "(", "val_set", ",", "batch_size", "=", "cfg_data", ".", "VAL_BATCH_SIZE", ",", "num_workers", "=", "6", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "", "elif", "datasetname", "in", "[", "'FDST'", "]", ":", "\n", "        ", "val_sampler", "=", "RandomSampler", "(", "data_source", "=", "val_set", ",", "replacement", "=", "True", ",", "num_samples", "=", "200", ")", "\n", "return", "DataLoader", "(", "val_set", ",", "batch_size", "=", "cfg_data", ".", "VAL_BATCH_SIZE", ",", "sampler", "=", "val_sampler", ",", "num_workers", "=", "6", ",", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "return", "'error'", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.__init__.createRestore": [[87, 91], ["torchvision.Compose", "misc.DeNormalize", "torchvision.ToPILImage"], "function", ["None"], ["", "", "def", "createRestore", "(", "mean_std", ")", ":", "\n", "    ", "return", "standard_transforms", ".", "Compose", "(", "[", "\n", "own_transforms", ".", "DeNormalize", "(", "*", "mean_std", ")", ",", "\n", "standard_transforms", ".", "ToPILImage", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.__init__.loading_data": [[93, 104], ["datasetname.upper.upper", "__init__.createTrainData", "__init__.createValData", "__init__.createRestore", "getattr"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.__init__.createTrainData", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.__init__.createValData", "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.__init__.createRestore"], ["", "def", "loading_data", "(", "datasetname", ")", ":", "\n", "    ", "datasetname", "=", "datasetname", ".", "upper", "(", ")", "\n", "cfg_data", "=", "getattr", "(", "setting", ",", "datasetname", ")", ".", "cfg_data", "\n", "\n", "Dataset", "=", "basedataset", ".", "Dataset", "\n", "\n", "train_loader", "=", "createTrainData", "(", "datasetname", ",", "Dataset", ",", "cfg_data", ")", "\n", "val_loader", "=", "createValData", "(", "datasetname", ",", "Dataset", ",", "cfg_data", ")", "\n", "\n", "restore_transform", "=", "createRestore", "(", "cfg_data", ".", "MEAN_STD", ")", "\n", "return", "train_loader", ",", "val_loader", ",", "restore_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.basedataset.Dataset.__init__": [[11, 80], ["len", "argv.keys", "argv.keys", "argv.keys", "print", "print", "print", "open", "f.readlines", "basedataset.Dataset.read_box_gt", "open", "json.load", "os.path.join", "os.path.join", "line.strip.strip.strip().split", "basedataset.Dataset.img_path.append", "basedataset.Dataset.mask_path.append", "basedataset.Dataset.info.append", "os.path.join", "os.path.join", "basedataset.Dataset.box_gt.append", "line.strip.strip.strip", "basedataset.Dataset.img_path.append", "basedataset.Dataset.mask_path.append", "line.strip.strip.strip", "basedataset.Dataset.img_path.append", "basedataset.Dataset.mask_path.append", "line.strip.strip.strip", "os.path.join", "os.path.join", "basedataset.Dataset.box_gt.append", "os.path.join", "os.path.join", "basedataset.Dataset.box_gt.append", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.basedataset.Dataset.read_box_gt"], ["    ", "def", "__init__", "(", "self", ",", "datasetname", ",", "mode", ",", "**", "argv", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "datasetname", "=", "datasetname", "\n", "\n", "self", ".", "img_path", "=", "[", "]", "\n", "self", ".", "json_path", "=", "[", "]", "\n", "self", ".", "mask_path", "=", "[", "]", "\n", "self", ".", "box_gt", "=", "[", "]", "\n", "self", ".", "info", "=", "[", "]", "\n", "\n", "for", "data_infor", "in", "argv", "[", "'list_file'", "]", ":", "\n", "            ", "data_path", ",", "imgId_txt", ",", "box_gt_txt", "=", "data_infor", "[", "'data_path'", "]", ",", "data_infor", "[", "'imgId_txt'", "]", ",", "data_infor", "[", "'box_gt_txt'", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "imgId_txt", ")", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "box_gt_Info", "=", "[", "]", "\n", "if", "self", ".", "mode", "==", "'val'", ":", "\n", "                ", "box_gt_Info", "=", "self", ".", "read_box_gt", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "box_gt_txt", ")", ")", "\n", "\n", "", "if", "\"NWPU\"", "in", "data_path", ":", "\n", "                ", "for", "line", "in", "lines", ":", "\n", "                    ", "splited", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "self", ".", "img_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'images'", ",", "splited", "[", "0", "]", "+", "'.jpg'", ")", ")", "\n", "self", ".", "mask_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'mask_50_60'", ",", "splited", "[", "0", "]", "+", "'.png'", ")", ")", "\n", "if", "self", ".", "mode", "==", "'val'", ":", "\n", "                        ", "self", ".", "box_gt", ".", "append", "(", "box_gt_Info", "[", "int", "(", "splited", "[", "0", "]", ")", "]", ")", "\n", "", "self", ".", "info", ".", "append", "(", "splited", "[", "1", ":", "3", "]", ")", "# lum, crowd level", "\n", "", "", "elif", "\"QNRF\"", "in", "data_path", "or", "\"JHU\"", "in", "data_path", ":", "\n", "                ", "for", "line", "in", "lines", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", "\n", "self", ".", "img_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'images'", ",", "line", "+", "'.jpg'", ")", ")", "\n", "# self.json_path.append(os.path.join(root, self.mode, 'jsons', splited[0] + '.json'))", "\n", "self", ".", "mask_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'mask_30_60'", ",", "line", "+", "'.png'", ")", ")", "\n", "if", "self", ".", "mode", "==", "'val'", ":", "\n", "                        ", "self", ".", "box_gt", ".", "append", "(", "box_gt_Info", "[", "int", "(", "line", ")", "]", ")", "\n", "", "", "", "else", ":", "\n", "                ", "for", "line", "in", "lines", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", "\n", "self", ".", "img_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'images'", ",", "line", "+", "'.jpg'", ")", ")", "\n", "# self.json_path.append(os.path.join(root, self.mode, 'jsons', splited[0] + '.json'))", "\n", "self", ".", "mask_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'mask_50_60'", ",", "line", "+", "'.png'", ")", ")", "\n", "if", "self", ".", "mode", "==", "'val'", ":", "\n", "                        ", "self", ".", "box_gt", ".", "append", "(", "box_gt_Info", "[", "int", "(", "line", ")", "]", ")", "\n", "\n", "\n", "\n", "\n", "", "", "", "", "self", ".", "num_samples", "=", "len", "(", "self", ".", "img_path", ")", "\n", "self", ".", "main_transform", "=", "None", "\n", "if", "'main_transform'", "in", "argv", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "main_transform", "=", "argv", "[", "'main_transform'", "]", "\n", "", "self", ".", "img_transform", "=", "None", "\n", "if", "'img_transform'", "in", "argv", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "img_transform", "=", "argv", "[", "'img_transform'", "]", "\n", "", "self", ".", "mask_transform", "=", "None", "\n", "if", "'mask_transform'", "in", "argv", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "mask_transform", "=", "argv", "[", "'mask_transform'", "]", "\n", "\n", "\n", "", "if", "self", ".", "mode", "is", "'train'", ":", "\n", "            ", "print", "(", "f'[{self.datasetname} DATASET]: {self.num_samples} train images.'", ")", "\n", "", "if", "self", ".", "mode", "is", "'val'", ":", "\n", "\n", "            ", "print", "(", "f'[{self.datasetname} DATASET]: {self.num_samples} validation images.'", ")", "\n", "", "if", "self", ".", "mode", "is", "'test'", ":", "\n", "            ", "print", "(", "f'[{self.datasetname} DATASET]: {self.num_samples} test images.'", ")", "\n", "import", "json", "\n", "with", "open", "(", "data_path", "+", "'/res.json'", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "res", "=", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.basedataset.Dataset.__getitem__": [[82, 98], ["basedataset.Dataset.read_image_and_gt", "basedataset.Dataset.main_transform", "basedataset.Dataset.img_transform", "basedataset.Dataset.mask_transform"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.datasets.basedataset.Dataset.read_image_and_gt"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img", ",", "mask_map", "=", "self", ".", "read_image_and_gt", "(", "index", ")", "\n", "# print(img.size, mask_map.size)", "\n", "if", "self", ".", "main_transform", "is", "not", "None", ":", "\n", "            ", "img", ",", "mask_map", "=", "self", ".", "main_transform", "(", "img", ",", "mask_map", ")", "\n", "", "if", "self", ".", "img_transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "img_transform", "(", "img", ")", "\n", "", "if", "self", ".", "mask_transform", "is", "not", "None", ":", "\n", "            ", "mask_map", "=", "self", ".", "mask_transform", "(", "mask_map", ")", "\n", "\n", "", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "\n", "            ", "return", "img", ",", "mask_map", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "mask_map", ",", "self", ".", "box_gt", "[", "index", "]", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.basedataset.Dataset.__len__": [[98, 100], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.basedataset.Dataset.read_image_and_gt": [[102, 115], ["PIL.Image.open", "PIL.Image.open", "img.convert.convert.convert"], "methods", ["None"], ["", "def", "read_image_and_gt", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img_path", "=", "self", ".", "img_path", "[", "index", "]", "\n", "# print(img_path)", "\n", "\n", "mask_path", "=", "self", ".", "mask_path", "[", "index", "]", "\n", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "if", "img", ".", "mode", "is", "not", "'RGB'", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "mask_map", "=", "Image", ".", "open", "(", "mask_path", ")", "\n", "return", "img", ",", "mask_map", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.basedataset.Dataset.read_box_gt": [[116, 132], ["open", "f.readlines", "line.strip().split.strip().split.strip().split", "int", "numpy.array().reshape", "line.strip().split.strip().split.strip", "numpy.array", "len"], "methods", ["None"], ["", "def", "read_box_gt", "(", "self", ",", "box_gt_file", ")", ":", "\n", "        ", "gt_data", "=", "{", "}", "\n", "with", "open", "(", "box_gt_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n", "line_data", "=", "[", "int", "(", "i", ")", "for", "i", "in", "line", "]", "\n", "idx", ",", "num", "=", "[", "line_data", "[", "0", "]", ",", "line_data", "[", "1", "]", "]", "\n", "points_r", "=", "[", "]", "\n", "if", "num", ">", "0", ":", "\n", "                    ", "points_r", "=", "np", ".", "array", "(", "line_data", "[", "2", ":", "]", ")", ".", "reshape", "(", "(", "(", "len", "(", "line", ")", "-", "2", ")", "//", "5", ",", "5", ")", ")", "\n", "gt_data", "[", "idx", "]", "=", "{", "'num'", ":", "num", ",", "'points'", ":", "points_r", "[", ":", ",", "0", ":", "2", "]", ",", "'sigma'", ":", "points_r", "[", ":", ",", "2", ":", "4", "]", ",", "'level'", ":", "points_r", "[", ":", ",", "4", "]", "}", "\n", "", "else", ":", "\n", "                    ", "gt_data", "[", "idx", "]", "=", "{", "'num'", ":", "0", ",", "'points'", ":", "[", "]", ",", "'sigma'", ":", "[", "]", ",", "'level'", ":", "[", "]", "}", "\n", "\n", "", "", "", "return", "gt_data", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.basedataset.Dataset.get_num_samples": [[133, 135], ["None"], "methods", ["None"], ["", "def", "get_num_samples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.basedataset.Dataset.gen_scale_map": [[137, 153], ["open", "json.load", "numpy.zeros", "PIL.Image.fromarray", "x.append", "y.append", "numpy.log", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "gen_scale_map", "(", "self", ",", "path", ",", "w", ",", "h", ")", ":", "\n", "        ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "ImgInfo", "=", "json", ".", "load", "(", "f", ")", "\n", "x", ",", "y", "=", "[", "]", ",", "[", "]", "\n", "scale_map", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "for", "head", "in", "ImgInfo", "[", "\"points\"", "]", ":", "\n", "                ", "x", ".", "append", "(", "int", "(", "head", "[", "0", "]", ")", ")", "\n", "y", ".", "append", "(", "int", "(", "head", "[", "1", "]", ")", ")", "\n", "\n", "", "for", "(", "w_start", ",", "h_start", ",", "w_end", ",", "h_end", ")", "in", "ImgInfo", "[", "\"boxes\"", "]", ":", "\n", "                ", "w_start", ",", "h_start", ",", "w_end", ",", "h_end", "=", "int", "(", "w_start", ")", ",", "int", "(", "h_start", ")", ",", "int", "(", "w_end", ")", ",", "int", "(", "h_end", ")", "\n", "area", "=", "(", "w_end", "-", "w_start", ")", "*", "(", "h_end", "-", "h_start", ")", "\n", "area", "=", "area", "if", "area", ">", "1", "else", "1", "\n", "size", "=", "np", ".", "log", "(", "area", ")", "\n", "scale_map", "[", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "=", "size", "\n", "", "return", "(", "Image", ".", "fromarray", "(", "scale_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.basedataset.Dataset.gen_mask_map": [[154, 195], ["open", "json.load", "numpy.zeros", "PIL.Image.fromarray", "x.append", "y.append", "int", "int", "max", "max", "basedataset.Dataset.generate_mask", "int", "int", "int", "int", "int", "int", "numpy.round", "numpy.round", "int", "int", "numpy.round", "numpy.round", "math.ceil", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_NWPU.generate_mask"], ["", "", "def", "gen_mask_map", "(", "self", ",", "path", ",", "w", ",", "h", ")", ":", "\n", "        ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "ImgInfo", "=", "json", ".", "load", "(", "f", ")", "\n", "x", ",", "y", "=", "[", "]", ",", "[", "]", "\n", "mask_map", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "for", "head", "in", "ImgInfo", "[", "\"points\"", "]", ":", "\n", "                ", "x", ".", "append", "(", "int", "(", "head", "[", "0", "]", ")", ")", "\n", "y", ".", "append", "(", "int", "(", "head", "[", "1", "]", ")", ")", "\n", "\n", "", "for", "(", "w_start", ",", "h_start", ",", "w_end", ",", "h_end", ")", "in", "ImgInfo", "[", "\"boxes\"", "]", ":", "\n", "\n", "                ", "w_start", ",", "h_start", ",", "w_end", ",", "h_end", "=", "int", "(", "w_start", ")", ",", "int", "(", "h_start", ")", ",", "int", "(", "w_end", ")", ",", "int", "(", "h_end", ")", "\n", "# print(w_start, h_start, w_end, h_end)", "\n", "center_w", "=", "int", "(", "np", ".", "round", "(", "(", "w_end", "+", "w_start", ")", "/", "2", ")", ")", "\n", "center_h", "=", "int", "(", "np", ".", "round", "(", "(", "h_end", "+", "h_start", ")", "/", "2", ")", ")", "\n", "width", "=", "max", "(", "int", "(", "np", ".", "round", "(", "(", "w_end", "-", "w_start", ")", "/", "2", ")", ")", ",", "1", ")", "\n", "height", "=", "max", "(", "int", "(", "np", ".", "round", "(", "(", "h_end", "-", "h_start", ")", "/", "2", ")", ")", ",", "1", ")", "\n", "assert", "(", "width", ">", "0", "and", "height", ">", "0", ")", "\n", "# print(width, height)", "\n", "if", "width", ">", "height", ":", "\n", "                    ", "if", "width", ">", "7", ":", "\n", "                        ", "height", "=", "math", ".", "ceil", "(", "height", "*", "(", "7", "/", "width", ")", ")", "\n", "width", "=", "7", "\n", "", "", "else", ":", "\n", "                    ", "if", "height", ">", "7", ":", "\n", "                        ", "width", "=", "math", ".", "ceil", "(", "width", "*", "(", "7", "/", "height", ")", ")", "\n", "height", "=", "7", "\n", "# print(width, height,center_w + width,w)", "\n", "", "", "height", "=", "height", "if", "(", "center_h", "+", "height", ")", "<", "h", "-", "1", "else", "h", "-", "1", "-", "center_h", "\n", "width", "=", "width", "if", "(", "center_w", "+", "width", ")", "<", "w", "-", "1", "else", "w", "-", "1", "-", "center_w", "\n", "\n", "height", "=", "height", "if", "(", "center_h", "-", "height", ")", ">", "0", "else", "0", "\n", "width", "=", "width", "if", "(", "center_w", "-", "width", ")", ">", "0", "else", "0", "\n", "\n", "mask", "=", "self", ".", "generate_mask", "(", "height", ",", "width", ")", "\n", "\n", "mask_map", "[", "center_h", "-", "height", ":", "center_h", "+", "height", "+", "1", ",", "center_w", "-", "width", ":", "center_w", "+", "width", "+", "1", "]", "+=", "mask", "\n", "\n", "# maks_map[h_start:h_end, w_start:w_end] = mask", "\n", "", "mask_map", "[", "mask_map", ">", "1", "]", "=", "0", "\n", "return", "(", "Image", ".", "fromarray", "(", "mask_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.datasets.basedataset.Dataset.generate_mask": [[196, 201], ["mask.astype"], "methods", ["None"], ["", "", "def", "generate_mask", "(", "self", ",", "height", ",", "width", ")", ":", "\n", "        ", "y", ",", "x", "=", "np", ".", "ogrid", "[", "-", "height", ":", "height", "+", "1", ",", "-", "width", ":", "width", "+", "1", "]", "\n", "# ellipse mask", "\n", "mask", "=", "(", "(", "x", ")", "**", "2", "/", "(", "height", "**", "2", ")", "+", "(", "y", ")", "**", "2", "/", "(", "width", "**", "2", ")", "<=", "1", ")", "\n", "return", "mask", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_QNRF.resize_images": [[36, 66], ["glob.glob", "print", "enumerate", "os.path.join", "len", "str().zfill", "os.path.join", "os.path.exists", "[].split", "int", "PIL.Image.open", "print", "print", "Image.open.resize", "img_ori.resize.save", "str", "str().zfill.split", "int", "int", "img_path.split"], "function", ["None"], ["", "def", "resize_images", "(", "src_path", ",", "shift", "=", "0", ")", ":", "\n", "    ", "mni_size", "=", "(", "1024", ",", "768", ")", "\n", "file_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "src_path", ",", "'*.jpg'", ")", ")", "\n", "print", "(", "len", "(", "file_list", ")", ")", "\n", "for", "idx", ",", "img_path", "in", "enumerate", "(", "file_list", ")", ":", "\n", "        ", "img_id", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "img_id", "=", "int", "(", "img_id", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "+", "shift", "\n", "img_id", "=", "str", "(", "img_id", ")", ".", "zfill", "(", "4", ")", "\n", "dst_img_path", "=", "os", ".", "path", ".", "join", "(", "dst_imgs_path", ",", "img_id", "+", "'.jpg'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dst_img_path", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "img_ori", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "w", ",", "h", "=", "img_ori", ".", "size", "\n", "p_w", ",", "p_h", "=", "w", "/", "1024", ",", "h", "/", "768", "\n", "if", "p_w", "<", "1", "or", "p_h", "<", "1", ":", "\n", "                ", "if", "p_w", ">", "p_h", ":", "\n", "                    ", "new_h", "=", "768", "\n", "new_w", "=", "int", "(", "w", "/", "p_h", ")", "\n", "new_w", "=", "(", "new_w", "//", "16", "+", "1", ")", "*", "16", "\n", "", "else", ":", "\n", "                    ", "new_h", "=", "int", "(", "h", "/", "p_w", ")", "\n", "new_h", "=", "(", "new_h", "//", "16", "+", "1", ")", "*", "16", "\n", "new_w", "=", "1024", "\n", "", "", "else", ":", "\n", "                ", "new_w", ",", "new_h", "=", "(", "w", "//", "16", "+", "1", ")", "*", "16", ",", "(", "h", "//", "16", "+", "1", ")", "*", "16", "\n", "", "print", "(", "img_id", ")", "\n", "print", "(", "w", ",", "h", ",", "new_w", ",", "new_h", ")", "\n", "new_img", "=", "img_ori", ".", "resize", "(", "(", "new_w", ",", "new_h", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "new_img", ".", "save", "(", "dst_img_path", ",", "quality", "=", "95", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_QNRF.remove_cover": [[69, 78], ["numpy.zeros_like", "cv2.getStructuringElement", "cv2.dilate"], "function", ["None"], ["", "", "", "def", "remove_cover", "(", "mask_map", ",", "kernel", "=", "3", ")", ":", "\n", "    ", "mask_map", "[", "mask_map", ">", "1", "]", "=", "2", "\n", "delet_map", "=", "np", ".", "zeros_like", "(", "mask_map", ",", "dtype", "=", "'uint8'", ")", "\n", "delet_map", "[", "mask_map", "==", "2", "]", "=", "2", "\n", "\n", "kernel", "=", "cv", ".", "getStructuringElement", "(", "cv", ".", "MORPH_RECT", ",", "(", "kernel", ",", "kernel", ")", ")", "\n", "delet_map", "=", "cv", ".", "dilate", "(", "delet_map", ",", "kernel", ")", "\n", "mask_map", "[", "delet_map", "==", "2", "]", "=", "0", "\n", "return", "mask_map", ",", "delet_map", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_QNRF.writer_jsons": [[79, 178], ["enumerate", "os.listdir", "print", "ImgInfo.update", "os.path.join", "os.path.exists", "img_name.split", "os.path.join", "PIL.Image.open", "cv2.imread", "torch.from_numpy", "torch.from_numpy", "torch.max_pool2d", "torch.interpolate().squeeze", "size_map.numpy.numpy", "print", "scipy.loadmat", "PIL.Image.open", "print", "annPoints.astype.astype", "ImgInfo.update", "ImgInfo.update", "enumerate", "ImgInfo.update", "os.path.join.replace", "size_map[].float", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "center_w.append", "center_h.append", "xy.append", "numpy.exp", "int", "wide.append", "heiht.append", "zip", "xywh.append", "open", "json.dump", "torch.interpolate", "len", "min", "min", "functions.euclidean_dist", "dists.squeeze.squeeze", "numpy.argsort", "functions.average_del_min", "max", "max", "numpy.sqrt", "max", "max", "min", "min", "int", "int", "min", "min", "min", "min", "min", "min", "int", "int", "int", "int", "str().zfill", "str().zfill", "str", "str", "int", "int"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.euclidean_dist", "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.average_del_min"], ["", "def", "writer_jsons", "(", ")", ":", "\n", "\n", "    ", "for", "idx", ",", "img_name", "in", "enumerate", "(", "os", ".", "listdir", "(", "dst_imgs_path", ")", ")", ":", "\n", "        ", "print", "(", "img_name", ")", "\n", "\n", "ImgInfo", "=", "{", "}", "\n", "ImgInfo", ".", "update", "(", "{", "\"img_id\"", ":", "img_name", "}", ")", "\n", "\n", "img_id", "=", "img_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "dst_json_name", "=", "os", ".", "path", ".", "join", "(", "dst_json_path", ",", "img_id", "+", "'.json'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dst_json_name", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "imgPath", "=", "os", ".", "path", ".", "join", "(", "dst_imgs_path", ",", "img_name", ")", "\n", "img", "=", "Image", ".", "open", "(", "imgPath", ")", "\n", "size_map", "=", "cv", ".", "imread", "(", "imgPath", ".", "replace", "(", "'images'", ",", "'size_map'", ")", ",", "cv", ".", "IMREAD_GRAYSCALE", ")", "\n", "size_map", "=", "torch", ".", "from_numpy", "(", "size_map", ")", "\n", "size_map", "=", "F", ".", "max_pool2d", "(", "size_map", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "float", "(", ")", ",", "(", "249", ",", "249", ")", ",", "16", ",", "124", ")", "\n", "size_map", "=", "F", ".", "interpolate", "(", "size_map", ",", "scale_factor", "=", "16", ")", ".", "squeeze", "(", ")", "\n", "\n", "size_map", "=", "size_map", ".", "numpy", "(", ")", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "w_size_map", ",", "h_size_map", "=", "size_map", ".", "shape", "\n", "\n", "print", "(", "'resize'", ",", "w", ",", "h", ",", "h_size_map", ",", "w_size_map", ")", "\n", "\n", "if", "img_id", "<=", "'1201'", ":", "\n", "                ", "gt_path", "=", "os", ".", "path", ".", "join", "(", "train_path", ",", "'img_'", "+", "img_id", "+", "'_ann.mat'", ")", "\n", "ori_imgPath", "=", "os", ".", "path", ".", "join", "(", "train_path", ",", "'img_'", "+", "img_id", "+", "'.jpg'", ")", "\n", "", "else", ":", "\n", "                ", "gt_path", "=", "os", ".", "path", ".", "join", "(", "test_path", ",", "'img_'", "+", "str", "(", "int", "(", "img_id", ")", "-", "1201", ")", ".", "zfill", "(", "4", ")", "+", "'_ann.mat'", ")", "\n", "ori_imgPath", "=", "os", ".", "path", ".", "join", "(", "test_path", ",", "'img_'", "+", "str", "(", "int", "(", "img_id", ")", "-", "1201", ")", ".", "zfill", "(", "4", ")", "+", "'.jpg'", ")", "\n", "", "gtInf", "=", "scio", ".", "loadmat", "(", "gt_path", ")", "# format [ w, h ]", "\n", "ori_img", "=", "Image", ".", "open", "(", "ori_imgPath", ")", "\n", "ori_w", ",", "ori_h", "=", "ori_img", ".", "size", "\n", "print", "(", "'ori'", ",", "ori_w", ",", "ori_h", ")", "\n", "\n", "w_rate", ",", "h_rate", "=", "w", "/", "ori_w", ",", "h", "/", "ori_h", "\n", "annPoints", "=", "gtInf", "[", "'annPoints'", "]", "\n", "\n", "annPoints", "[", ":", ",", "0", "]", "=", "annPoints", "[", ":", ",", "0", "]", "*", "w_rate", "\n", "annPoints", "[", ":", ",", "1", "]", "=", "annPoints", "[", ":", ",", "1", "]", "*", "h_rate", "\n", "annPoints", "=", "annPoints", ".", "astype", "(", "int", ")", "\n", "# print(annPoints)", "\n", "\n", "\n", "ImgInfo", ".", "update", "(", "{", "\"human_num\"", ":", "len", "(", "annPoints", ")", "}", ")", "\n", "center_w", ",", "center_h", "=", "[", "]", ",", "[", "]", "\n", "xy", "=", "[", "]", "\n", "wide", ",", "heiht", "=", "[", "]", ",", "[", "]", "\n", "for", "head", "in", "annPoints", ":", "\n", "\n", "                ", "x", ",", "y", "=", "min", "(", "head", "[", "0", "]", ",", "w", "-", "1", ")", ",", "min", "(", "head", "[", "1", "]", ",", "h", "-", "1", ")", "\n", "center_w", ".", "append", "(", "x", ")", "\n", "center_h", ".", "append", "(", "y", ")", "\n", "xy", ".", "append", "(", "[", "int", "(", "head", "[", "0", "]", ")", ",", "int", "(", "head", "[", "1", "]", ")", "]", ")", "\n", "\n", "if", "ImgInfo", "[", "\"human_num\"", "]", ">", "4", ":", "\n", "                    ", "dists", "=", "euclidean_dist", "(", "head", "[", "None", ",", ":", "]", ",", "annPoints", ")", "\n", "dists", "=", "dists", ".", "squeeze", "(", ")", "\n", "id", "=", "np", ".", "argsort", "(", "dists", ")", "\n", "p1_y", ",", "p1_x", "=", "min", "(", "annPoints", "[", "id", "[", "1", "]", "]", "[", "1", "]", ",", "h", "-", "1", ")", ",", "min", "(", "annPoints", "[", "id", "[", "1", "]", "]", "[", "0", "]", ",", "w", "-", "1", ")", "\n", "p2_y", ",", "p2_x", "=", "min", "(", "annPoints", "[", "id", "[", "2", "]", "]", "[", "1", "]", ",", "h", "-", "1", ")", ",", "min", "(", "annPoints", "[", "id", "[", "2", "]", "]", "[", "0", "]", ",", "w", "-", "1", ")", "\n", "p3_y", ",", "p3_x", "=", "min", "(", "annPoints", "[", "id", "[", "3", "]", "]", "[", "1", "]", ",", "h", "-", "1", ")", ",", "min", "(", "annPoints", "[", "id", "[", "3", "]", "]", "[", "0", "]", ",", "w", "-", "1", ")", "\n", "# print(id)", "\n", "# import pdb", "\n", "scale", "=", "average_del_min", "(", "[", "size_map", "[", "y", ",", "x", "]", ",", "size_map", "[", "p1_y", ",", "p1_x", "]", ",", "size_map", "[", "p2_y", ",", "p2_x", "]", ",", "size_map", "[", "p3_y", ",", "p3_x", "]", "]", ")", "\n", "\n", "scale", "=", "max", "(", "scale", ",", "4", ")", "\n", "", "else", ":", "\n", "                    ", "scale", "=", "max", "(", "size_map", "[", "y", ",", "x", "]", ",", "4", ")", "\n", "# print(x,y, scale)", "\n", "", "area", "=", "np", ".", "exp", "(", "scale", ")", "\n", "length", "=", "int", "(", "np", ".", "sqrt", "(", "area", ")", ")", "\n", "wide", ".", "append", "(", "length", ")", "\n", "heiht", ".", "append", "(", "length", ")", "\n", "", "ImgInfo", ".", "update", "(", "{", "\"points\"", ":", "xy", "}", ")", "\n", "# new_heads = [[i, j] for [i, j] in zip(new_x, new_y)]", "\n", "\n", "xywh", "=", "[", "]", "\n", "for", "_", ",", "(", "x", ",", "y", ",", "x_len", ",", "y_len", ")", "in", "enumerate", "(", "zip", "(", "center_w", ",", "center_h", ",", "wide", ",", "heiht", ")", ")", ":", "\n", "# print(x,y,x_len,y_len)", "\n", "\n", "                ", "x_left_top", ",", "y_left_top", "=", "max", "(", "int", "(", "x", "-", "x_len", "/", "2", ")", ",", "0", ")", ",", "max", "(", "int", "(", "y", "-", "y_len", "/", "2", ")", ",", "0", ")", "\n", "x_right_bottom", ",", "y_right_bottom", "=", "min", "(", "int", "(", "x", "+", "x_len", "/", "2", ")", ",", "w", "-", "1", ")", ",", "min", "(", "int", "(", "y", "+", "y_len", "/", "2", ")", ",", "h", "-", "1", ")", "\n", "xywh", ".", "append", "(", "[", "x_left_top", ",", "y_left_top", ",", "x_right_bottom", ",", "y_right_bottom", "]", ")", "\n", "\n", "", "ImgInfo", ".", "update", "(", "{", "\"boxes\"", ":", "xywh", "}", ")", "\n", "# print(ImgInfo)", "\n", "\n", "# plot(center_w, center_h, 'g*')", "\n", "# plt.imshow(img)", "\n", "# for (x_, y_, w_, h_) in ImgInfo[\"boxes\"]:", "\n", "#     plt.gca().add_patch(plt.Rectangle((x_, y_), w_ - x_, h_ - y_, fill=False, edgecolor='r', linewidth=1))", "\n", "# plt.show()", "\n", "\n", "with", "open", "(", "dst_json_name", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "ImgInfo", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_QNRF.generate_masks": [[180, 291], ["glob.glob", "print", "enumerate", "os.path.join", "len", "PIL.Image.open", "print", "print", "numpy.zeros", "os.path.join", "enumerate", "numpy.array", "numpy.array", "zip", "cv2.imwrite", "[].split", "open", "json.load", "centroid_list.append", "wh_list.append", "centroid_list.copy", "wh_list.copy", "functions.euclidean_dist", "dists.squeeze.squeeze", "numpy.argsort", "enumerate", "os.path.join", "img_id.split", "max", "max", "point.squeeze", "functions.generate_cycle_mask", "img_path.split", "max", "max", "max", "max", "max", "max", "max", "max", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "int", "int", "int", "int", "int", "int", "int", "int", "max", "max", "int", "int", "max", "max", "max", "max", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.euclidean_dist", "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.generate_cycle_mask"], ["", "", "", "", "def", "generate_masks", "(", ")", ":", "\n", "    ", "file_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dst_imgs_path", ",", "'*.jpg'", ")", ")", "\n", "\n", "print", "(", "len", "(", "file_list", ")", ")", "\n", "for", "idx", ",", "img_path", "in", "enumerate", "(", "file_list", ")", ":", "\n", "        ", "if", "idx", "<", "-", "1", ":", "\n", "            ", "break", "\n", "", "img_id", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "img_ori", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "w", ",", "h", "=", "img_ori", ".", "size", "\n", "\n", "print", "(", "img_id", ")", "\n", "print", "(", "w", ",", "h", ")", "\n", "mask_map", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "gt_name", "=", "os", ".", "path", ".", "join", "(", "dst_json_path", ",", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.json'", ")", "\n", "\n", "with", "open", "(", "gt_name", ")", "as", "f", ":", "\n", "            ", "ImgInfo", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "centroid_list", "=", "[", "]", "\n", "wh_list", "=", "[", "]", "\n", "for", "id", ",", "(", "w_start", ",", "h_start", ",", "w_end", ",", "h_end", ")", "in", "enumerate", "(", "ImgInfo", "[", "\"boxes\"", "]", ",", "0", ")", ":", "\n", "            ", "centroid_list", ".", "append", "(", "[", "(", "w_end", "+", "w_start", ")", "/", "2", ",", "(", "h_end", "+", "h_start", ")", "/", "2", "]", ")", "\n", "wh_list", ".", "append", "(", "[", "max", "(", "(", "w_end", "-", "w_start", ")", "/", "2", ",", "3", ")", ",", "max", "(", "(", "h_end", "-", "h_start", ")", "/", "2", ",", "3", ")", "]", ")", "\n", "# print(len(centroid_list))", "\n", "", "centroids", "=", "np", ".", "array", "(", "centroid_list", ".", "copy", "(", ")", ",", "dtype", "=", "'int'", ")", "\n", "wh", "=", "np", ".", "array", "(", "wh_list", ".", "copy", "(", ")", ",", "dtype", "=", "'int'", ")", "\n", "wh", "[", "wh", ">", "15", "]", "=", "15", "\n", "human_num", "=", "ImgInfo", "[", "\"human_num\"", "]", "\n", "for", "point", "in", "centroids", ":", "\n", "            ", "point", "=", "point", "[", "None", ",", ":", "]", "\n", "\n", "dists", "=", "euclidean_dist", "(", "point", ",", "centroids", ")", "\n", "dists", "=", "dists", ".", "squeeze", "(", ")", "\n", "id", "=", "np", ".", "argsort", "(", "dists", ")", "\n", "\n", "for", "start", ",", "first", "in", "enumerate", "(", "id", ",", "0", ")", ":", "\n", "                ", "if", "start", ">", "0", "and", "start", "<", "5", ":", "\n", "                    ", "src_point", "=", "point", ".", "squeeze", "(", ")", "\n", "dst_point", "=", "centroids", "[", "first", "]", "\n", "\n", "src_w", ",", "src_h", "=", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "\n", "dst_w", ",", "dst_h", "=", "wh", "[", "first", "]", "[", "0", "]", ",", "wh", "[", "first", "]", "[", "1", "]", "\n", "\n", "count", "=", "0", "\n", "if", "(", "src_w", "+", "dst_w", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point", "[", "0", "]", ")", ">", "0", "and", "(", "src_h", "+", "dst_h", ")", "-", "np", ".", "abs", "(", "src_point", "[", "1", "]", "-", "dst_point", "[", "1", "]", ")", ">", "0", ":", "\n", "                        ", "w_reduce", "=", "(", "(", "src_w", "+", "dst_w", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point", "[", "0", "]", ")", ")", "/", "2", "\n", "h_reduce", "=", "(", "(", "src_h", "+", "dst_h", ")", "-", "np", ".", "abs", "(", "src_point", "[", "1", "]", "-", "dst_point", "[", "1", "]", ")", ")", "/", "2", "\n", "threshold_w", ",", "threshold_h", "=", "max", "(", "-", "int", "(", "max", "(", "src_w", "-", "w_reduce", ",", "dst_w", "-", "w_reduce", ")", "/", "2.", ")", ",", "-", "60", ")", ",", "max", "(", "\n", "-", "int", "(", "max", "(", "src_h", "-", "h_reduce", ",", "dst_h", "-", "h_reduce", ")", "/", "2.", ")", ",", "-", "60", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "threshold_w", ",", "threshold_h", "=", "max", "(", "-", "int", "(", "max", "(", "src_w", ",", "dst_w", ")", "/", "2.", ")", ",", "-", "60", ")", ",", "max", "(", "-", "int", "(", "max", "(", "src_h", ",", "dst_h", ")", "/", "2.", ")", ",", "-", "60", ")", "\n", "# threshold_w, threshold_h = -5, -5", "\n", "", "while", "(", "src_w", "+", "dst_w", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point", "[", "0", "]", ")", ">", "threshold_w", "and", "(", "src_h", "+", "dst_h", ")", "-", "np", ".", "abs", "(", "\n", "src_point", "[", "1", "]", "-", "dst_point", "[", "1", "]", ")", ">", "threshold_h", ":", "\n", "\n", "                        ", "if", "(", "dst_w", "*", "dst_h", ")", ">", "(", "src_w", "*", "src_h", ")", ":", "\n", "                            ", "wh", "[", "first", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "first", "]", "[", "0", "]", "*", "0.9", ")", ",", "2", ")", "\n", "wh", "[", "first", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "first", "]", "[", "1", "]", "*", "0.9", ")", ",", "2", ")", "\n", "dst_w", ",", "dst_h", "=", "wh", "[", "first", "]", "[", "0", "]", ",", "wh", "[", "first", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "                            ", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", "*", "0.9", ")", ",", "2", ")", "\n", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "*", "0.9", ")", ",", "2", ")", "\n", "src_w", ",", "src_h", "=", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "\n", "\n", "", "if", "human_num", ">=", "3", ":", "\n", "                            ", "dst_point_", "=", "centroids", "[", "id", "[", "start", "+", "1", "]", "]", "\n", "dst_w_", ",", "dst_h_", "=", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "\n", "if", "(", "dst_w_", "*", "dst_h_", ")", ">", "(", "src_w", "*", "src_h", ")", "and", "(", "dst_w_", "*", "dst_h_", ")", ">", "(", "dst_w", "*", "dst_h", ")", ":", "\n", "                                ", "if", "(", "src_w", "+", "dst_w_", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point_", "[", "0", "]", ")", ">", "-", "3", "and", "(", "src_h", "+", "dst_h_", ")", "-", "np", ".", "abs", "(", "\n", "src_point", "[", "1", "]", "-", "dst_point_", "[", "1", "]", ")", ">", "-", "3", ":", "\n", "                                    ", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", "*", "0.9", ")", ",", "2", ")", "\n", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "*", "0.9", ")", ",", "2", ")", "\n", "\n", "", "", "", "count", "+=", "1", "\n", "if", "count", ">", "40", ":", "\n", "                            ", "break", "\n", "", "", "", "", "", "for", "(", "center_w", ",", "center_h", ")", ",", "(", "width", ",", "height", ")", "in", "zip", "(", "centroids", ",", "wh", ")", ":", "\n", "            ", "assert", "(", "width", ">", "0", "and", "height", ">", "0", ")", "\n", "\n", "if", "(", "0", "<", "center_w", "<", "w", ")", "and", "(", "0", "<", "center_h", "<", "h", ")", ":", "\n", "                ", "h_start", "=", "(", "center_h", "-", "height", ")", "\n", "h_end", "=", "(", "center_h", "+", "height", ")", "\n", "\n", "w_start", "=", "center_w", "-", "width", "\n", "w_end", "=", "center_w", "+", "width", "\n", "#", "\n", "if", "h_start", "<", "0", ":", "\n", "                    ", "h_start", "=", "0", "\n", "\n", "", "if", "h_end", ">", "h", ":", "\n", "                    ", "h_end", "=", "h", "\n", "\n", "", "if", "w_start", "<", "0", ":", "\n", "                    ", "w_start", "=", "0", "\n", "\n", "", "if", "w_end", ">", "w", ":", "\n", "                    ", "w_end", "=", "w", "\n", "\n", "", "if", "cycle", ":", "\n", "                    ", "mask", "=", "generate_cycle_mask", "(", "height", ",", "width", ")", "\n", "mask_map", "[", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "=", "mask", "\n", "\n", "", "else", ":", "\n", "                    ", "mask_map", "[", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "=", "1", "\n", "\n", "\n", "", "", "", "mask_map", "=", "mask_map", "*", "255", "\n", "\n", "cv", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "dst_mask_path", ",", "img_id", "+", "'.png'", ")", ",", "mask_map", ",", "[", "cv", ".", "IMWRITE_PNG_BILEVEL", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_QNRF.divide_dataset": [[348, 388], ["os.listdir", "print", "random.sample", "print", "set", "set", "print", "sorted", "sorted", "sorted", "print", "f.close", "f.close", "f.close", "len", "len", "round", "len", "len", "open", "open", "open", "img_name.split", "sorted.append", "set.append", "os.path.join", "f.write", "os.path.join", "f.write", "os.path.join", "f.write", "len"], "function", ["None"], ["", "", "def", "divide_dataset", "(", "val_ration", "=", "0.2", ")", ":", "\n", "    ", "import", "random", "\n", "all_file", "=", "os", ".", "listdir", "(", "dst_imgs_path", ")", "\n", "test_set", "=", "[", "]", "\n", "train_val", "=", "[", "]", "\n", "for", "img_name", "in", "all_file", ":", "\n", "        ", "img_id", "=", "img_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "img_id", ">", "'1201'", ":", "\n", "            ", "test_set", ".", "append", "(", "img_id", ")", "\n", "", "else", ":", "\n", "            ", "train_val", ".", "append", "(", "img_id", ")", "\n", "", "", "print", "(", "\"test_set_num:\"", ",", "len", "(", "test_set", ")", ",", "'train_val_num:'", ",", "len", "(", "train_val", ")", ")", "\n", "\n", "val_set", "=", "random", ".", "sample", "(", "train_val", ",", "round", "(", "val_ration", "*", "len", "(", "train_val", ")", ")", ")", "\n", "print", "(", "\"val_set_num:\"", ",", "len", "(", "val_set", ")", ")", "\n", "train_val", "=", "set", "(", "train_val", ")", "\n", "val_set", "=", "set", "(", "val_set", ")", "\n", "train_set", "=", "train_val", "-", "val_set", "\n", "print", "(", "\"train_set_num:\"", ",", "len", "(", "train_set", ")", ")", "\n", "\n", "train_set", "=", "sorted", "(", "train_set", ")", "\n", "val_set", "=", "sorted", "(", "val_set", ")", "\n", "test_set", "=", "sorted", "(", "test_set", ")", "\n", "print", "(", "test_set", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "Root", ",", "'train.txt'", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "train_name", "in", "train_set", ":", "\n", "            ", "f", ".", "write", "(", "train_name", "+", "'\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "Root", ",", "'val.txt'", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "valid_name", "in", "val_set", ":", "\n", "            ", "f", ".", "write", "(", "valid_name", "+", "'\\n'", ")", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "Root", ",", "'test.txt'", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "valid_name", "in", "test_set", ":", "\n", "            ", "f", ".", "write", "(", "valid_name", "+", "'\\n'", ")", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_QNRF.loc_gt_make": [[389, 451], ["os.path.join", "enumerate", "print", "open", "f.readlines", "img_ids.append", "print", "os.path.join", "Box_Info.append", "Box_Info.append", "enumerate", "line.split", "open", "json.load", "str", "int", "int", "Box_Info.append", "Box_Info.append", "Box_Info.append", "Box_Info.append", "Box_Info.append", "open", "enumerate", "f.write", "int", "int", "int", "int", "int", "int", "int", "int", "str", "str", "str", "str", "str", "os.path.join", "min", "numpy.sqrt", "len", "f.write", "f.write"], "function", ["None"], ["", "def", "loc_gt_make", "(", "mode", "=", "'test'", ")", ":", "\n", "    ", "txt_path", "=", "os", ".", "path", ".", "join", "(", "Root", ",", "mode", "+", "'.txt'", ")", "\n", "with", "open", "(", "txt_path", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "img_ids", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "img_ids", ".", "append", "(", "line", ".", "split", "(", "'\\n'", ")", "[", "0", "]", ")", "\n", "\n", "\n", "", "count", "=", "0", "\n", "for", "idx", ",", "img_id", "in", "enumerate", "(", "img_ids", ")", ":", "\n", "        ", "print", "(", "img_id", ")", "\n", "json_path", "=", "os", ".", "path", ".", "join", "(", "Root", ",", "'jsons'", ",", "img_id", "+", "'.json'", ")", "\n", "Box_Info", "=", "[", "]", "\n", "Box_Info", ".", "append", "(", "img_id", ")", "\n", "if", "idx", "!=", "-", "1", ":", "\n", "\n", "            ", "with", "open", "(", "json_path", ")", "as", "f", ":", "\n", "                ", "infor", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "Box_Info", ".", "append", "(", "str", "(", "infor", "[", "'human_num'", "]", ")", ")", "\n", "for", "id", ",", "head", "in", "enumerate", "(", "infor", "[", "'boxes'", "]", ")", ":", "\n", "                ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "int", "(", "head", "[", "0", "]", ")", ",", "int", "(", "head", "[", "1", "]", ")", ",", "int", "(", "head", "[", "2", "]", ")", ",", "int", "(", "head", "[", "3", "]", ")", "\n", "center_x", ",", "center_y", ",", "w", ",", "h", "=", "int", "(", "(", "x1", "+", "x2", ")", "/", "2", ")", ",", "int", "(", "(", "y1", "+", "y2", ")", "/", "2", ")", ",", "int", "(", "(", "x2", "-", "x1", ")", ")", ",", "int", "(", "(", "y2", "-", "y1", ")", ")", ",", "\n", "area", "=", "w", "*", "h", "\n", "if", "area", "==", "0", ":", "\n", "                    ", "count", "+=", "1", "\n", "continue", "\n", "\n", "", "level_area", "=", "0", "\n", "if", "area", ">=", "1", "and", "area", "<", "10", ":", "\n", "                    ", "level_area", "=", "0", "\n", "", "elif", "area", ">", "10", "and", "area", "<", "100", ":", "\n", "                    ", "level_area", "=", "1", "\n", "", "elif", "area", ">", "100", "and", "area", "<", "1000", ":", "\n", "                    ", "level_area", "=", "2", "\n", "", "elif", "area", ">", "1000", "and", "area", "<", "10000", ":", "\n", "                    ", "level_area", "=", "3", "\n", "", "elif", "area", ">", "10000", "and", "area", "<", "100000", ":", "\n", "                    ", "level_area", "=", "4", "\n", "", "elif", "area", ">", "100000", ":", "\n", "                    ", "level_area", "=", "5", "\n", "\n", "", "r_small", "=", "int", "(", "min", "(", "w", ",", "h", ")", "/", "2", ")", "\n", "r_large", "=", "int", "(", "np", ".", "sqrt", "(", "w", "*", "w", "+", "h", "*", "h", ")", "/", "2", ")", "\n", "\n", "Box_Info", ".", "append", "(", "str", "(", "center_x", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "center_y", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "r_small", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "r_large", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "level_area", ")", ")", "\n", "\n", "# print(Box_Info)", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "Root", ",", "mode", "+", "'_gt_loc.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "for", "ind", ",", "num", "in", "enumerate", "(", "Box_Info", ",", "1", ")", ":", "\n", "                    ", "if", "ind", "<", "len", "(", "Box_Info", ")", ":", "\n", "                        ", "f", ".", "write", "(", "num", "+", "' '", ")", "\n", "", "else", ":", "\n", "                        ", "f", ".", "write", "(", "num", ")", "\n", "", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "", "print", "(", "count", ")", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.scale_map.main": [[33, 135], ["os.path.join", "os.path.join", "os.listdir", "print", "datasets.dataset_prepare.models.CC.CrowdCounter", "datasets.dataset_prepare.models.CC.CrowdCounter.cuda", "datasets.dataset_prepare.models.CC.CrowdCounter.load_state_dict", "datasets.dataset_prepare.models.CC.CrowdCounter.eval", "tqdm.tqdm", "os.path.exists", "os.makedirs", "torch.load", "os.path.join", "os.path.join", "os.path.exists", "PIL.Image.open", "cv2.imwrite", "Variable().cuda.convert", "img_transform", "torch.no_grad", "torch.autograd.Variable().cuda", "fname.split", "datasets.dataset_prepare.models.CC.CrowdCounter.test_forward().cpu", "range", "map", "range", "torch.cat", "torch.zeros().cpu().float", "range", "crop_masks.sum", "pred_map[].size", "img[].size", "torch.zeros().cpu().float.data.numpy", "torch.autograd.Variable", "range", "crop_imgs.size", "datasets.dataset_prepare.models.CC.CrowdCounter.test_forward().cpu", "torch.cat.append", "range", "datasets.dataset_prepare.models.CC.CrowdCounter.test_forward", "max", "min", "crop_imgs.append", "torch.zeros().cpu", "mask[].fill_", "crop_masks.append", "torch.cat", "torch.zeros().cpu", "max", "min", "min", "max", "min", "datasets.dataset_prepare.models.CC.CrowdCounter.test_forward", "min", "max", "min", "min", "torch.zeros", "torch.zeros", "min", "Variable().cuda.size", "Variable().cuda.size", "Variable().cuda.size", "Variable().cuda.size", "min"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.model.locator.Crowd_locator.test_forward", "home.repos.pwc.inspect_result.taohan10200_IIM.model.locator.Crowd_locator.test_forward"], ["def", "main", "(", "dataset", "=", "None", ")", ":", "\n", "    ", "if", "dataset", "==", "'QNRF'", ":", "\n", "        ", "dataRoot", "=", "'/media/D/GJY/ht/ProcessedData/QNRF/'", "\n", "", "if", "dataset", "==", "'SHHB'", ":", "\n", "        ", "dataRoot", "=", "'/media/D/GJY/ht/ProcessedData/SHHB/'", "\n", "", "if", "dataset", "==", "'SHHA'", ":", "\n", "        ", "dataRoot", "=", "'/media/D/GJY/ht/ProcessedData/SHHA/'", "\n", "", "img_path", "=", "os", ".", "path", ".", "join", "(", "dataRoot", ",", "'images'", ")", "\n", "dst_size_map_path", "=", "os", ".", "path", ".", "join", "(", "dataRoot", ",", "'size_map'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_size_map_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dst_size_map_path", ")", "\n", "\n", "", "file_list", "=", "os", ".", "listdir", "(", "img_path", ")", "\n", "print", "(", "file_list", ")", "\n", "\n", "GPU_ID", "=", "'0,1'", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "GPU_ID", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "net", "=", "CrowdCounter", "(", "GPU_ID", ",", "'Res50_SCAR'", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "False", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "gen_list", "=", "tqdm", "(", "file_list", ")", "\n", "for", "fname", "in", "gen_list", ":", "\n", "\n", "        ", "imgname", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "fname", ")", "\n", "size_map_path", "=", "os", ".", "path", ".", "join", "(", "dst_size_map_path", ",", "fname", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.jpg'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "size_map_path", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "imgname", ")", "\n", "\n", "if", "img", ".", "mode", "==", "'L'", ":", "\n", "                ", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "", "img", "=", "img_transform", "(", "img", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "img", "=", "Variable", "(", "img", ")", ".", "cuda", "(", ")", "\n", "\n", "crop_imgs", ",", "crop_gt", ",", "crop_masks", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "img", ".", "shape", "\n", "slice_h", ",", "slice_w", "=", "768", ",", "1024", "\n", "if", "h", "*", "w", "<", "slice_h", "*", "2", "*", "slice_w", "*", "2", "and", "h", "%", "16", "==", "0", "and", "w", "%", "16", "==", "0", ":", "\n", "                    ", "pred_map", "=", "net", ".", "test_forward", "(", "img", ")", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "h", "%", "16", "==", "0", "and", "w", "%", "16", "==", "0", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "h", ",", "slice_h", ")", ":", "\n", "                        ", "h_start", ",", "h_end", "=", "max", "(", "min", "(", "h", "-", "slice_h", ",", "i", ")", ",", "0", ")", ",", "min", "(", "h", ",", "i", "+", "slice_h", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "w", ",", "slice_w", ")", ":", "\n", "                            ", "w_start", ",", "w_end", "=", "max", "(", "min", "(", "w", "-", "slice_w", ",", "j", ")", ",", "0", ")", ",", "min", "(", "w", ",", "j", "+", "slice_w", ")", "\n", "crop_imgs", ".", "append", "(", "img", "[", ":", ",", ":", ",", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", ")", "\n", "\n", "mask", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "img", ".", "size", "(", "2", ")", ",", "img", ".", "size", "(", "3", ")", ")", ".", "cpu", "(", ")", "\n", "mask", "[", ":", ",", ":", ",", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", ".", "fill_", "(", "1.0", ")", "\n", "crop_masks", ".", "append", "(", "mask", ")", "\n", "", "", "crop_imgs", ",", "crop_masks", "=", "map", "(", "lambda", "x", ":", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", ",", "(", "crop_imgs", ",", "crop_masks", ")", ")", "\n", "\n", "# forward may need repeatng", "\n", "crop_preds", "=", "[", "]", "\n", "nz", ",", "period", "=", "crop_imgs", ".", "size", "(", "0", ")", ",", "8", "\n", "for", "i", "in", "range", "(", "0", ",", "nz", ",", "period", ")", ":", "\n", "                        ", "crop_pred", "=", "net", ".", "test_forward", "(", "crop_imgs", "[", "i", ":", "min", "(", "nz", ",", "i", "+", "period", ")", "]", ")", ".", "cpu", "(", ")", "\n", "crop_preds", ".", "append", "(", "crop_pred", ")", "\n", "\n", "", "crop_preds", "=", "torch", ".", "cat", "(", "crop_preds", ",", "dim", "=", "0", ")", "\n", "\n", "# splice them to the original size", "\n", "idx", "=", "0", "\n", "pred_map", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "img", ".", "size", "(", "2", ")", ",", "img", ".", "size", "(", "3", ")", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "h", ",", "slice_h", ")", ":", "\n", "                        ", "h_start", ",", "h_end", "=", "max", "(", "min", "(", "h", "-", "slice_h", ",", "i", ")", ",", "0", ")", ",", "min", "(", "h", ",", "i", "+", "slice_h", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "w", ",", "slice_w", ")", ":", "\n", "                            ", "w_start", ",", "w_end", "=", "max", "(", "min", "(", "w", "-", "slice_w", ",", "j", ")", ",", "0", ")", ",", "min", "(", "w", ",", "j", "+", "slice_w", ")", "\n", "pred_map", "[", ":", ",", ":", ",", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "+=", "crop_preds", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "\n", "# for the overlapping area, compute average value", "\n", "", "", "mask", "=", "crop_masks", ".", "sum", "(", "dim", "=", "0", ")", "\n", "pred_map", "=", "(", "pred_map", "/", "mask", ")", "\n", "", "assert", "pred_map", "[", "0", ",", "0", "]", ".", "size", "(", ")", "==", "img", "[", "0", ",", "0", "]", ".", "size", "(", ")", "\n", "pred_map", "=", "pred_map", ".", "data", ".", "numpy", "(", ")", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "# sio.savemat(dataRoot + '/size_mat/' +fname.split('.')[0]+'.mat',{'matrix':pred_map})", "\n", "# pred_frame = plt.gca()", "\n", "# plt.imshow(pred_map, cmap='jet')", "\n", "# pred_frame.axes.get_yaxis().set_visible(False)", "\n", "# pred_frame.axes.get_xaxis().set_visible(False)", "\n", "# pred_frame.spines['top'].set_visible(False)", "\n", "# pred_frame.spines['bottom'].set_visible(False)", "\n", "# pred_frame.spines['left'].set_visible(False)", "\n", "# pred_frame.spines['right'].set_visible(False)", "\n", "# plt.savefig(dataRoot + '/size_map/' + fname.split('.')[0]  + '.png', \\", "\n", "#             bbox_inches='tight', pad_inches=0, dpi=150)", "\n", "# plt.close()", "\n", "\n", "# pdb.set_trace()", "\n", "# print(f'{filename} {pred:.4f}', file=record)", "\n", "", "cv", ".", "imwrite", "(", "size_map_path", ",", "pred_map", ",", "[", "cv", ".", "IMWRITE_JPEG_QUALITY", ",", "100", "]", ")", "\n", "# #", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_NWPU.generate_mask": [[20, 26], ["None"], "function", ["None"], ["", "def", "generate_mask", "(", "height", ",", "width", ")", ":", "\n", "    ", "x", ",", "y", "=", "np", ".", "ogrid", "[", "-", "height", ":", "height", "+", "1", ",", "-", "width", ":", "width", "+", "1", "]", "\n", "# ellipse mask", "\n", "mask", "=", "(", "(", "x", ")", "**", "2", "/", "(", "height", "**", "2", ")", "+", "(", "y", ")", "**", "2", "/", "(", "width", "**", "2", ")", "<=", "1", ")", "\n", "mask", ".", "dtype", "=", "'uint8'", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_NWPU.remove_cover": [[27, 36], ["numpy.zeros_like", "cv2.getStructuringElement", "cv2.dilate"], "function", ["None"], ["", "def", "remove_cover", "(", "mask_map", ",", "kernel", "=", "3", ")", ":", "\n", "    ", "mask_map", "[", "mask_map", ">", "1", "]", "=", "2", "\n", "delet_map", "=", "np", ".", "zeros_like", "(", "mask_map", ",", "dtype", "=", "'uint8'", ")", "\n", "delet_map", "[", "mask_map", "==", "2", "]", "=", "2", "\n", "\n", "kernel", "=", "cv", ".", "getStructuringElement", "(", "cv", ".", "MORPH_RECT", ",", "(", "kernel", ",", "kernel", ")", ")", "\n", "delet_map", "=", "cv", ".", "dilate", "(", "delet_map", ",", "kernel", ")", "\n", "mask_map", "[", "delet_map", "==", "2", "]", "=", "0", "\n", "return", "mask_map", ",", "delet_map", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_NWPU.generate_masks": [[37, 152], ["enumerate", "os.listdir", "os.path.join", "os.path.exists", "img_id.replace", "json.load.update", "os.path.join", "PIL.Image.open", "print", "print", "numpy.zeros", "os.path.join", "enumerate", "numpy.array", "numpy.array", "zip", "cv2.imwrite", "open", "json.load", "centroid_list.append", "wh_list.append", "centroid_list.copy", "wh_list.copy", "functions.euclidean_dist", "dists.squeeze.squeeze", "numpy.argsort", "enumerate", "img_id.split", "max", "max", "point.squeeze", "functions.generate_cycle_mask", "max", "max", "max", "max", "max", "max", "max", "max", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "int", "int", "int", "int", "int", "int", "int", "int", "max", "max", "int", "int", "max", "max", "max", "max", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.euclidean_dist", "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.generate_cycle_mask"], ["", "def", "generate_masks", "(", ")", ":", "\n", "    ", "for", "idx", ",", "img_id", "in", "enumerate", "(", "os", ".", "listdir", "(", "img_path", ")", ")", ":", "\n", "\n", "        ", "dst_mask_path", "=", "os", ".", "path", ".", "join", "(", "mask_path", ",", "img_id", ".", "replace", "(", "'jpg'", ",", "'png'", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dst_mask_path", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "ImgInfo", "=", "{", "}", "\n", "ImgInfo", ".", "update", "(", "{", "\"img_id\"", ":", "img_id", "}", ")", "\n", "img_ori", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "img_id", ")", "\n", "img_ori", "=", "Image", ".", "open", "(", "img_ori", ")", "\n", "w", ",", "h", "=", "img_ori", ".", "size", "\n", "print", "(", "img_id", ")", "\n", "print", "(", "w", ",", "h", ")", "\n", "\n", "mask_map", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "gt_name", "=", "os", ".", "path", ".", "join", "(", "json_path", ",", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.json'", ")", "\n", "\n", "with", "open", "(", "gt_name", ")", "as", "f", ":", "\n", "                ", "ImgInfo", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "\n", "\n", "", "centroid_list", "=", "[", "]", "\n", "wh_list", "=", "[", "]", "\n", "for", "id", ",", "(", "w_start", ",", "h_start", ",", "w_end", ",", "h_end", ")", "in", "enumerate", "(", "ImgInfo", "[", "\"boxes\"", "]", ",", "0", ")", ":", "\n", "                ", "centroid_list", ".", "append", "(", "[", "(", "w_end", "+", "w_start", ")", "/", "2", ",", "(", "h_end", "+", "h_start", ")", "/", "2", "]", ")", "\n", "wh_list", ".", "append", "(", "[", "max", "(", "(", "w_end", "-", "w_start", ")", "/", "2", ",", "3", ")", ",", "max", "(", "(", "h_end", "-", "h_start", ")", "/", "2", ",", "3", ")", "]", ")", "\n", "# print(len(centroid_list))", "\n", "", "centroids", "=", "np", ".", "array", "(", "centroid_list", ".", "copy", "(", ")", ",", "dtype", "=", "'int'", ")", "\n", "wh", "=", "np", ".", "array", "(", "wh_list", ".", "copy", "(", ")", ",", "dtype", "=", "'int'", ")", "\n", "wh", "[", "wh", ">", "25", "]", "=", "25", "\n", "human_num", "=", "ImgInfo", "[", "\"human_num\"", "]", "\n", "for", "point", "in", "centroids", ":", "\n", "                ", "point", "=", "point", "[", "None", ",", ":", "]", "\n", "\n", "dists", "=", "euclidean_dist", "(", "point", ",", "centroids", ")", "\n", "dists", "=", "dists", ".", "squeeze", "(", ")", "\n", "id", "=", "np", ".", "argsort", "(", "dists", ")", "\n", "\n", "for", "start", ",", "first", "in", "enumerate", "(", "id", ",", "0", ")", ":", "\n", "                    ", "if", "start", ">", "0", "and", "start", "<", "5", ":", "\n", "                        ", "src_point", "=", "point", ".", "squeeze", "(", ")", "\n", "dst_point", "=", "centroids", "[", "first", "]", "\n", "\n", "src_w", ",", "src_h", "=", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "\n", "dst_w", ",", "dst_h", "=", "wh", "[", "first", "]", "[", "0", "]", ",", "wh", "[", "first", "]", "[", "1", "]", "\n", "\n", "count", "=", "0", "\n", "if", "(", "src_w", "+", "dst_w", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point", "[", "0", "]", ")", ">", "0", "and", "(", "src_h", "+", "dst_h", ")", "-", "np", ".", "abs", "(", "src_point", "[", "1", "]", "-", "dst_point", "[", "1", "]", ")", ">", "0", ":", "\n", "                            ", "w_reduce", "=", "(", "(", "src_w", "+", "dst_w", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point", "[", "0", "]", ")", ")", "/", "2", "\n", "h_reduce", "=", "(", "(", "src_h", "+", "dst_h", ")", "-", "np", ".", "abs", "(", "src_point", "[", "1", "]", "-", "dst_point", "[", "1", "]", ")", ")", "/", "2", "\n", "threshold_w", ",", "threshold_h", "=", "max", "(", "-", "int", "(", "max", "(", "src_w", "-", "w_reduce", ",", "dst_w", "-", "w_reduce", ")", "/", "2.", ")", ",", "-", "60", ")", ",", "max", "(", "\n", "-", "int", "(", "max", "(", "src_h", "-", "h_reduce", ",", "dst_h", "-", "h_reduce", ")", "/", "2.", ")", ",", "-", "60", ")", "\n", "\n", "", "else", ":", "\n", "                            ", "threshold_w", ",", "threshold_h", "=", "max", "(", "-", "int", "(", "max", "(", "src_w", ",", "dst_w", ")", "/", "2.", ")", ",", "-", "60", ")", ",", "max", "(", "-", "int", "(", "max", "(", "src_h", ",", "dst_h", ")", "/", "2.", ")", ",", "-", "60", ")", "\n", "# threshold_w, threshold_h = -5, -5", "\n", "", "while", "(", "src_w", "+", "dst_w", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point", "[", "0", "]", ")", ">", "threshold_w", "and", "(", "src_h", "+", "dst_h", ")", "-", "np", ".", "abs", "(", "\n", "src_point", "[", "1", "]", "-", "dst_point", "[", "1", "]", ")", ">", "threshold_h", ":", "\n", "\n", "                            ", "if", "(", "dst_w", "*", "dst_h", ")", ">", "(", "src_w", "*", "src_h", ")", ":", "\n", "                                ", "wh", "[", "first", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "first", "]", "[", "0", "]", "*", "0.9", ")", ",", "2", ")", "\n", "wh", "[", "first", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "first", "]", "[", "1", "]", "*", "0.9", ")", ",", "2", ")", "\n", "dst_w", ",", "dst_h", "=", "wh", "[", "first", "]", "[", "0", "]", ",", "wh", "[", "first", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "                                ", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", "*", "0.9", ")", ",", "2", ")", "\n", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "*", "0.9", ")", ",", "2", ")", "\n", "src_w", ",", "src_h", "=", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "\n", "\n", "", "if", "human_num", ">=", "3", ":", "\n", "                                ", "dst_point_", "=", "centroids", "[", "id", "[", "start", "+", "1", "]", "]", "\n", "dst_w_", ",", "dst_h_", "=", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "\n", "if", "(", "dst_w_", "*", "dst_h_", ")", ">", "(", "src_w", "*", "src_h", ")", "and", "(", "dst_w_", "*", "dst_h_", ")", ">", "(", "dst_w", "*", "dst_h", ")", ":", "\n", "                                    ", "if", "(", "src_w", "+", "dst_w_", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point_", "[", "0", "]", ")", ">", "-", "3", "and", "(", "src_h", "+", "dst_h_", ")", "-", "np", ".", "abs", "(", "\n", "src_point", "[", "1", "]", "-", "dst_point_", "[", "1", "]", ")", ">", "-", "3", ":", "\n", "                                        ", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", "*", "0.9", ")", ",", "2", ")", "\n", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "*", "0.9", ")", ",", "2", ")", "\n", "\n", "", "", "", "count", "+=", "1", "\n", "if", "count", ">", "40", ":", "\n", "                                ", "break", "\n", "", "", "", "", "", "for", "(", "center_w", ",", "center_h", ")", ",", "(", "width", ",", "height", ")", "in", "zip", "(", "centroids", ",", "wh", ")", ":", "\n", "                ", "assert", "(", "width", ">", "0", "and", "height", ">", "0", ")", "\n", "\n", "if", "(", "0", "<", "center_w", "<", "w", ")", "and", "(", "0", "<", "center_h", "<", "h", ")", ":", "\n", "                    ", "h_start", "=", "(", "center_h", "-", "height", ")", "\n", "h_end", "=", "(", "center_h", "+", "height", ")", "\n", "\n", "w_start", "=", "center_w", "-", "width", "\n", "w_end", "=", "center_w", "+", "width", "\n", "#", "\n", "if", "h_start", "<", "0", ":", "\n", "                        ", "h_start", "=", "0", "\n", "\n", "", "if", "h_end", ">", "h", ":", "\n", "                        ", "h_end", "=", "h", "\n", "\n", "", "if", "w_start", "<", "0", ":", "\n", "                        ", "w_start", "=", "0", "\n", "\n", "", "if", "w_end", ">", "w", ":", "\n", "                        ", "w_end", "=", "w", "\n", "\n", "", "if", "cycle", ":", "\n", "                        ", "mask", "=", "generate_cycle_mask", "(", "height", ",", "width", ")", "\n", "mask_map", "[", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "=", "mask", "\n", "\n", "", "else", ":", "\n", "                        ", "mask_map", "[", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "=", "1", "\n", "\n", "\n", "", "", "", "mask_map", "=", "mask_map", "*", "255", "\n", "\n", "cv", ".", "imwrite", "(", "dst_mask_path", ",", "mask_map", ",", "[", "cv", ".", "IMWRITE_PNG_BILEVEL", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_NWPU.generate_masks_with_points": [[153, 201], ["int", "glob.glob", "print", "enumerate", "os.path.join", "len", "PIL.Image.open", "print", "numpy.zeros", "os.path.join", "len", "print", "cv2.imwrite", "print", "[].split", "open", "json.load", "scipy.spatial.KDTree", "scipy.spatial.KDTree.query", "enumerate", "np.zeros.astype", "os.path.join", "np.zeros.sum", "points.copy", "min", "min", "img_id.split", "int", "int", "int", "max", "min", "max", "min", "path.split"], "function", ["None"], ["", "", "", "def", "generate_masks_with_points", "(", ")", ":", "\n", "    ", "max_sigma", "=", "7.5", "\n", "max_kernel_size", "=", "int", "(", "2", "*", "max_sigma", ")", "\n", "max_kernel_width", "=", "2", "*", "max_kernel_size", "+", "1", "\n", "\n", "file_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "'*.jpg'", ")", ")", "\n", "\n", "print", "(", "len", "(", "file_list", ")", ")", "\n", "for", "idx", ",", "path", "in", "enumerate", "(", "file_list", ")", ":", "# 108.jpg is the wrong labeled image", "\n", "\n", "        ", "img_id", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "img_ori", "=", "Image", ".", "open", "(", "path", ")", "\n", "w", ",", "h", "=", "img_ori", ".", "size", "\n", "print", "(", "img_id", ",", "w", ",", "h", ")", "\n", "\n", "mask_map", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "gt_name", "=", "os", ".", "path", ".", "join", "(", "json_path", ",", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.json'", ")", "\n", "\n", "with", "open", "(", "gt_name", ")", "as", "f", ":", "\n", "            ", "ImgInfo", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "\n", "", "points", "=", "ImgInfo", "[", "\"points\"", "]", "\n", "gt_count", "=", "len", "(", "points", ")", "\n", "print", "(", "gt_count", ")", "\n", "leafsize", "=", "2048", "\n", "if", "gt_count", ">", "0", ":", "\n", "# build kdtree", "\n", "            ", "tree", "=", "scipy", ".", "spatial", ".", "KDTree", "(", "points", ".", "copy", "(", ")", ",", "leafsize", "=", "leafsize", ")", "\n", "distances", ",", "locations", "=", "tree", ".", "query", "(", "points", ",", "k", "=", "2", ")", "\n", "for", "i", ",", "pt", "in", "enumerate", "(", "points", ")", ":", "\n", "                ", "if", "pt", "[", "0", "]", ">=", "w", "or", "pt", "[", "1", "]", ">=", "h", ":", "\n", "                    ", "continue", "\n", "", "center_h", ",", "center_w", "=", "int", "(", "pt", "[", "1", "]", ")", ",", "int", "(", "pt", "[", "0", "]", ")", "\n", "sigma", "=", "(", "distances", "[", "i", "]", "[", "1", "]", ")", "*", "0.125", "\n", "sigma", "=", "min", "(", "max_sigma", ",", "sigma", ")", "\n", "\n", "kernel_size", "=", "min", "(", "max_kernel_size", ",", "int", "(", "2", "*", "sigma", "+", "0.5", ")", ")", "\n", "sigma", "=", "kernel_size", "/", "2", "\n", "kernel_width", "=", "kernel_size", "*", "2", "+", "1", "\n", "\n", "mask_h_s", ",", "mask_h_e", "=", "max", "(", "0", ",", "(", "center_h", "-", "kernel_size", ")", ")", ",", "min", "(", "(", "center_h", "+", "kernel_size", "+", "1", ")", ",", "h", ")", "\n", "mask_w_s", ",", "mask_w_e", "=", "max", "(", "0", ",", "(", "center_w", "-", "kernel_size", ")", ")", ",", "min", "(", "(", "center_w", "+", "kernel_size", "+", "1", ")", ",", "w", ")", "\n", "mask_map", "[", "mask_h_s", ":", "mask_h_e", ",", "mask_w_s", ":", "mask_w_e", "]", "=", "1", "\n", "", "", "mask_map", "=", "mask_map", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "cv", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "mask_path", ",", "img_id", "+", "'.png'", ")", ",", "mask_map", ",", "[", "cv", ".", "IMWRITE_PNG_BILEVEL", ",", "1", "]", ")", "\n", "print", "(", "mask_map", ".", "sum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_JHU.resize_images": [[32, 109], ["os.path.join", "os.path.join", "os.listdir", "print", "len", "os.path.join", "os.path.join", "PIL.Image.open", "print", "print", "Image.open.resize", "img_ori.resize.save", "ImgInfo.update", "os.path.join", "ImgInfo.update", "ImgInfo.update", "enumerate", "ImgInfo.update", "imgName.split", "open", "f.readlines", "infor.append", "head.split", "x_list.append", "y_list.append", "xy_list.append", "max", "w_list.append", "h_list.append", "zip", "xyxy.append", "open", "json.dump", "int", "int", "len", "os.path.join", "line.split", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update"], ["", "def", "resize_images", "(", "mode", ")", ":", "\n", "\n", "\n", "    ", "imgs_path", "=", "os", ".", "path", ".", "join", "(", "Root", ",", "mode", ",", "'images'", ")", "\n", "gt_path", "=", "os", ".", "path", ".", "join", "(", "Root", ",", "mode", ",", "'gt'", ")", "\n", "mni_size", "=", "(", "1024", ",", "768", ")", "\n", "file_list", "=", "os", ".", "listdir", "(", "imgs_path", ")", "\n", "print", "(", "len", "(", "file_list", ")", ")", "\n", "for", "imgName", "in", "file_list", ":", "\n", "        ", "img_id", "=", "imgName", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "imgs_path", ",", "imgName", ")", "\n", "dst_img_path", "=", "os", ".", "path", ".", "join", "(", "dst_imgs_path", ",", "imgName", ")", "\n", "#==============================image resize================", "\n", "# if os.path.exists(dst_img_path):", "\n", "#     continue", "\n", "# else:", "\n", "img_ori", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "ori_w", ",", "ori_h", "=", "img_ori", ".", "size", "\n", "p_w", ",", "p_h", "=", "ori_w", "/", "1024", ",", "ori_h", "/", "768", "\n", "if", "p_w", "<", "1", "or", "p_h", "<", "1", ":", "\n", "            ", "if", "p_w", ">", "p_h", ":", "\n", "                ", "new_h", "=", "768", "\n", "new_w", "=", "int", "(", "ori_w", "/", "p_h", ")", "\n", "new_w", "=", "(", "new_w", "//", "16", "+", "1", ")", "*", "16", "\n", "", "else", ":", "\n", "                ", "new_h", "=", "int", "(", "ori_h", "/", "p_w", ")", "\n", "new_h", "=", "(", "new_h", "//", "16", "+", "1", ")", "*", "16", "\n", "new_w", "=", "1024", "\n", "", "", "else", ":", "\n", "            ", "new_w", ",", "new_h", "=", "(", "ori_w", "//", "16", ")", "*", "16", ",", "(", "ori_h", "//", "16", ")", "*", "16", "\n", "", "print", "(", "img_id", ")", "\n", "print", "(", "ori_w", ",", "ori_h", ",", "new_w", ",", "new_h", ")", "\n", "new_img", "=", "img_ori", ".", "resize", "(", "(", "new_w", ",", "new_h", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "new_img", ".", "save", "(", "dst_img_path", ",", "quality", "=", "95", ")", "\n", "\n", "\n", "# ============================gt resize================", "\n", "ImgInfo", "=", "{", "}", "\n", "ImgInfo", ".", "update", "(", "{", "\"img_id\"", ":", "img_id", "}", ")", "\n", "\n", "gt_name", "=", "os", ".", "path", ".", "join", "(", "gt_path", ",", "img_id", "+", "'.txt'", ")", "\n", "infor", "=", "[", "]", "\n", "with", "open", "(", "gt_name", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "lines", ":", "\n", "            ", "infor", ".", "append", "(", "line", ".", "split", "(", "'\\n'", ")", "[", "0", "]", ")", "\n", "\n", "", "ImgInfo", ".", "update", "(", "{", "\"human_num\"", ":", "len", "(", "infor", ")", "}", ")", "\n", "x_list", ",", "y_list", "=", "[", "]", ",", "[", "]", "\n", "xy_list", "=", "[", "]", "\n", "w_list", ",", "h_list", "=", "[", "]", ",", "[", "]", "\n", "w_rate", ",", "h_rate", "=", "new_w", "/", "ori_w", ",", "new_h", "/", "ori_h", "\n", "for", "head", "in", "infor", ":", "\n", "            ", "splits", "=", "head", ".", "split", "(", ")", "\n", "x_c", ",", "y_c", ",", "w", ",", "h", ",", "=", "int", "(", "splits", "[", "0", "]", ")", "*", "w_rate", ",", "int", "(", "splits", "[", "1", "]", ")", "*", "h_rate", ",", "int", "(", "splits", "[", "2", "]", ")", "*", "w_rate", ",", "int", "(", "splits", "[", "3", "]", ")", "*", "h_rate", "\n", "x_list", ".", "append", "(", "x_c", "-", "w", "/", "2.", ")", "\n", "y_list", ".", "append", "(", "y_c", "-", "h", "/", "2.", ")", "\n", "xy_list", ".", "append", "(", "[", "x_c", ",", "y_c", "]", ")", "\n", "max_len", "=", "max", "(", "int", "(", "splits", "[", "2", "]", ")", "*", "w_rate", ",", "int", "(", "splits", "[", "3", "]", ")", "*", "h_rate", ")", "\n", "w_list", ".", "append", "(", "max_len", ")", "\n", "h_list", ".", "append", "(", "max_len", ")", "\n", "", "ImgInfo", ".", "update", "(", "{", "\"points\"", ":", "xy_list", "}", ")", "\n", "\n", "xyxy", "=", "[", "]", "\n", "for", "_", ",", "(", "x_s", ",", "y_s", ",", "w", ",", "h", ")", "in", "enumerate", "(", "zip", "(", "x_list", ",", "y_list", ",", "w_list", ",", "h_list", ")", ")", ":", "\n", "\n", "            ", "x_end", "=", "x_s", "+", "w", "\n", "y_end", "=", "y_s", "+", "h", "\n", "\n", "xyxy", ".", "append", "(", "[", "x_s", ",", "y_s", ",", "x_end", ",", "y_end", "]", ")", "\n", "\n", "", "ImgInfo", ".", "update", "(", "{", "\"boxes\"", ":", "xyxy", "}", ")", "\n", "# print(ImgInfo)", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dst_json_path", ",", "img_id", "+", "'.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "ImgInfo", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_JHU.generate_masks": [[122, 256], ["glob.glob", "print", "enumerate", "os.path.join", "len", "PIL.Image.open", "print", "print", "numpy.zeros", "os.path.join", "enumerate", "numpy.array", "numpy.array", "zip", "cv2.imwrite", "matplotlib.gca", "matplotlib.imshow", "zip", "plt.gca.axes.get_yaxis().set_visible", "plt.gca.axes.get_xaxis().set_visible", "plt.gca.spines[].set_visible", "plt.gca.spines[].set_visible", "plt.gca.spines[].set_visible", "plt.gca.spines[].set_visible", "os.path.join", "matplotlib.savefig", "matplotlib.close", "[].split", "open", "json.load", "centroid_list.append", "wh_list.append", "centroid_list.copy", "wh_list.copy", "functions.euclidean_dist", "dists.squeeze.squeeze", "numpy.argsort", "enumerate", "os.path.join", "plt.gca.add_patch", "os.path.exists", "os.makedirs", "os.path.join", "matplotlib.Rectangle", "plt.gca.axes.get_yaxis", "plt.gca.axes.get_xaxis", "img_id.split", "max", "max", "point.squeeze", "functions.generate_cycle_mask", "img_path.split", "max", "max", "max", "max", "max", "max", "max", "max", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "int", "int", "int", "int", "int", "int", "int", "int", "max", "max", "int", "int", "max", "max", "max", "max", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.euclidean_dist", "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.generate_cycle_mask"], ["", "", "", "def", "generate_masks", "(", ")", ":", "\n", "    ", "file_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dst_imgs_path", ",", "'*.jpg'", ")", ")", "\n", "\n", "print", "(", "len", "(", "file_list", ")", ")", "\n", "for", "idx", ",", "img_path", "in", "enumerate", "(", "file_list", ")", ":", "\n", "        ", "if", "idx", "<", "-", "1", ":", "\n", "            ", "break", "\n", "", "img_id", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "img_ori", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "w", ",", "h", "=", "img_ori", ".", "size", "\n", "\n", "print", "(", "img_id", ")", "\n", "print", "(", "w", ",", "h", ")", "\n", "mask_map", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "gt_name", "=", "os", ".", "path", ".", "join", "(", "dst_json_path", ",", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.json'", ")", "\n", "\n", "with", "open", "(", "gt_name", ")", "as", "f", ":", "\n", "            ", "ImgInfo", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "centroid_list", "=", "[", "]", "\n", "wh_list", "=", "[", "]", "\n", "for", "id", ",", "(", "w_start", ",", "h_start", ",", "w_end", ",", "h_end", ")", "in", "enumerate", "(", "ImgInfo", "[", "\"boxes\"", "]", ",", "0", ")", ":", "\n", "            ", "centroid_list", ".", "append", "(", "[", "(", "w_end", "+", "w_start", ")", "/", "2", ",", "(", "h_end", "+", "h_start", ")", "/", "2", "]", ")", "\n", "wh_list", ".", "append", "(", "[", "max", "(", "(", "w_end", "-", "w_start", ")", "/", "2", ",", "3", ")", ",", "max", "(", "(", "h_end", "-", "h_start", ")", "/", "2", ",", "3", ")", "]", ")", "\n", "# print(len(centroid_list))", "\n", "", "centroids", "=", "np", ".", "array", "(", "centroid_list", ".", "copy", "(", ")", ",", "dtype", "=", "'int'", ")", "\n", "wh", "=", "np", ".", "array", "(", "wh_list", ".", "copy", "(", ")", ",", "dtype", "=", "'int'", ")", "\n", "wh", "[", "wh", ">", "15", "]", "=", "15", "\n", "human_num", "=", "ImgInfo", "[", "\"human_num\"", "]", "\n", "for", "point", "in", "centroids", ":", "\n", "            ", "point", "=", "point", "[", "None", ",", ":", "]", "\n", "\n", "dists", "=", "euclidean_dist", "(", "point", ",", "centroids", ")", "\n", "dists", "=", "dists", ".", "squeeze", "(", ")", "\n", "id", "=", "np", ".", "argsort", "(", "dists", ")", "\n", "\n", "for", "start", ",", "first", "in", "enumerate", "(", "id", ",", "0", ")", ":", "\n", "                ", "if", "start", ">", "0", "and", "start", "<", "5", ":", "\n", "                    ", "src_point", "=", "point", ".", "squeeze", "(", ")", "\n", "dst_point", "=", "centroids", "[", "first", "]", "\n", "\n", "src_w", ",", "src_h", "=", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "\n", "dst_w", ",", "dst_h", "=", "wh", "[", "first", "]", "[", "0", "]", ",", "wh", "[", "first", "]", "[", "1", "]", "\n", "\n", "count", "=", "0", "\n", "if", "(", "src_w", "+", "dst_w", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point", "[", "0", "]", ")", ">", "0", "and", "(", "src_h", "+", "dst_h", ")", "-", "np", ".", "abs", "(", "src_point", "[", "1", "]", "-", "dst_point", "[", "1", "]", ")", ">", "0", ":", "\n", "                        ", "w_reduce", "=", "(", "(", "src_w", "+", "dst_w", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point", "[", "0", "]", ")", ")", "/", "2", "\n", "h_reduce", "=", "(", "(", "src_h", "+", "dst_h", ")", "-", "np", ".", "abs", "(", "src_point", "[", "1", "]", "-", "dst_point", "[", "1", "]", ")", ")", "/", "2", "\n", "threshold_w", ",", "threshold_h", "=", "max", "(", "-", "int", "(", "max", "(", "src_w", "-", "w_reduce", ",", "dst_w", "-", "w_reduce", ")", "/", "2.", ")", ",", "-", "60", ")", ",", "max", "(", "\n", "-", "int", "(", "max", "(", "src_h", "-", "h_reduce", ",", "dst_h", "-", "h_reduce", ")", "/", "2.", ")", ",", "-", "60", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "threshold_w", ",", "threshold_h", "=", "max", "(", "-", "int", "(", "max", "(", "src_w", ",", "dst_w", ")", "/", "2.", ")", ",", "-", "60", ")", ",", "max", "(", "-", "int", "(", "max", "(", "src_h", ",", "dst_h", ")", "/", "2.", ")", ",", "-", "60", ")", "\n", "# threshold_w, threshold_h = -5, -5", "\n", "", "while", "(", "src_w", "+", "dst_w", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point", "[", "0", "]", ")", ">", "threshold_w", "and", "(", "src_h", "+", "dst_h", ")", "-", "np", ".", "abs", "(", "\n", "src_point", "[", "1", "]", "-", "dst_point", "[", "1", "]", ")", ">", "threshold_h", ":", "\n", "\n", "                        ", "if", "(", "dst_w", "*", "dst_h", ")", ">", "(", "src_w", "*", "src_h", ")", ":", "\n", "                            ", "wh", "[", "first", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "first", "]", "[", "0", "]", "*", "0.9", ")", ",", "2", ")", "\n", "wh", "[", "first", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "first", "]", "[", "1", "]", "*", "0.9", ")", ",", "2", ")", "\n", "dst_w", ",", "dst_h", "=", "wh", "[", "first", "]", "[", "0", "]", ",", "wh", "[", "first", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "                            ", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", "*", "0.9", ")", ",", "2", ")", "\n", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "*", "0.9", ")", ",", "2", ")", "\n", "src_w", ",", "src_h", "=", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "\n", "\n", "", "if", "human_num", ">=", "3", ":", "\n", "                            ", "dst_point_", "=", "centroids", "[", "id", "[", "start", "+", "1", "]", "]", "\n", "dst_w_", ",", "dst_h_", "=", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "\n", "if", "(", "dst_w_", "*", "dst_h_", ")", ">", "(", "src_w", "*", "src_h", ")", "and", "(", "dst_w_", "*", "dst_h_", ")", ">", "(", "dst_w", "*", "dst_h", ")", ":", "\n", "                                ", "if", "(", "src_w", "+", "dst_w_", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point_", "[", "0", "]", ")", ">", "-", "3", "and", "(", "src_h", "+", "dst_h_", ")", "-", "np", ".", "abs", "(", "\n", "src_point", "[", "1", "]", "-", "dst_point_", "[", "1", "]", ")", ">", "-", "3", ":", "\n", "                                    ", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", "*", "0.9", ")", ",", "2", ")", "\n", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "*", "0.9", ")", ",", "2", ")", "\n", "\n", "", "", "", "count", "+=", "1", "\n", "if", "count", ">", "40", ":", "\n", "                            ", "break", "\n", "", "", "", "", "", "for", "(", "center_w", ",", "center_h", ")", ",", "(", "width", ",", "height", ")", "in", "zip", "(", "centroids", ",", "wh", ")", ":", "\n", "            ", "assert", "(", "width", ">", "0", "and", "height", ">", "0", ")", "\n", "\n", "if", "(", "0", "<", "center_w", "<", "w", ")", "and", "(", "0", "<", "center_h", "<", "h", ")", ":", "\n", "                ", "h_start", "=", "(", "center_h", "-", "height", ")", "\n", "h_end", "=", "(", "center_h", "+", "height", ")", "\n", "\n", "w_start", "=", "center_w", "-", "width", "\n", "w_end", "=", "center_w", "+", "width", "\n", "#", "\n", "if", "h_start", "<", "0", ":", "\n", "                    ", "h_start", "=", "0", "\n", "\n", "", "if", "h_end", ">", "h", ":", "\n", "                    ", "h_end", "=", "h", "\n", "\n", "", "if", "w_start", "<", "0", ":", "\n", "                    ", "w_start", "=", "0", "\n", "\n", "", "if", "w_end", ">", "w", ":", "\n", "                    ", "w_end", "=", "w", "\n", "\n", "", "if", "cycle", ":", "\n", "                    ", "mask", "=", "generate_cycle_mask", "(", "height", ",", "width", ")", "\n", "mask_map", "[", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "=", "mask", "\n", "\n", "", "else", ":", "\n", "                    ", "mask_map", "[", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "=", "1", "\n", "\n", "\n", "", "", "", "mask_map", "=", "mask_map", "*", "255", "\n", "\n", "cv", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "dst_mask_path", ",", "img_id", "+", "'.png'", ")", ",", "mask_map", ",", "[", "cv", ".", "IMWRITE_PNG_BILEVEL", ",", "1", "]", ")", "\n", "\n", "# plt.imshow(img_ori)", "\n", "\n", "saveImg", "=", "plt", ".", "gca", "(", ")", "\n", "plt", ".", "imshow", "(", "img_ori", ")", "\n", "for", "a", ",", "b", "in", "zip", "(", "centroid_list", ",", "wh_list", ")", ":", "\n", "\n", "            ", "x_", ",", "y_", ",", "w_", ",", "h_", "=", "a", "[", "0", "]", ",", "a", "[", "1", "]", ",", "b", "[", "0", "]", ",", "b", "[", "1", "]", "\n", "saveImg", ".", "add_patch", "(", "plt", ".", "Rectangle", "(", "(", "x_", "-", "w_", ",", "y_", "-", "h_", ")", ",", "2", "*", "w_", ",", "2", "*", "h_", ",", "fill", "=", "False", ",", "edgecolor", "=", "'g'", ",", "linewidth", "=", "1", ")", ")", "\n", "\n", "\n", "", "saveImg", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "saveImg", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "saveImg", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "saveImg", ".", "spines", "[", "'bottom'", "]", ".", "set_visible", "(", "False", ")", "\n", "saveImg", ".", "spines", "[", "'left'", "]", ".", "set_visible", "(", "False", ")", "\n", "saveImg", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "dst_vis_path", "=", "os", ".", "path", ".", "join", "(", "dst_Root", ",", "'box_vis'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_vis_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dst_vis_path", ")", "\n", "", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "dst_vis_path", ",", "img_id", "+", "'.jpg'", ")", ",", "\n", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ",", "dpi", "=", "300", ")", "\n", "plt", ".", "close", "(", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_JHU.loc_gt_make": [[287, 349], ["os.path.join", "enumerate", "print", "open", "f.readlines", "img_ids.append", "print", "os.path.join", "Box_Info.append", "Box_Info.append", "enumerate", "line.split", "open", "json.load", "str", "int", "int", "Box_Info.append", "Box_Info.append", "Box_Info.append", "Box_Info.append", "Box_Info.append", "open", "enumerate", "f.write", "int", "int", "int", "int", "int", "int", "int", "int", "str", "str", "str", "str", "str", "os.path.join", "min", "numpy.sqrt", "len", "f.write", "f.write"], "function", ["None"], ["", "", "def", "loc_gt_make", "(", "mode", "=", "'test'", ")", ":", "\n", "    ", "txt_path", "=", "os", ".", "path", ".", "join", "(", "dst_Root", ",", "mode", "+", "'.txt'", ")", "\n", "with", "open", "(", "txt_path", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "img_ids", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "img_ids", ".", "append", "(", "line", ".", "split", "(", "'\\n'", ")", "[", "0", "]", ")", "\n", "\n", "\n", "", "count", "=", "0", "\n", "for", "idx", ",", "img_id", "in", "enumerate", "(", "img_ids", ")", ":", "\n", "        ", "print", "(", "img_id", ")", "\n", "json_path", "=", "os", ".", "path", ".", "join", "(", "dst_Root", ",", "'jsons'", ",", "img_id", "+", "'.json'", ")", "\n", "Box_Info", "=", "[", "]", "\n", "Box_Info", ".", "append", "(", "img_id", ")", "\n", "if", "idx", "!=", "-", "1", ":", "\n", "\n", "            ", "with", "open", "(", "json_path", ")", "as", "f", ":", "\n", "                ", "infor", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "Box_Info", ".", "append", "(", "str", "(", "infor", "[", "'human_num'", "]", ")", ")", "\n", "for", "id", ",", "head", "in", "enumerate", "(", "infor", "[", "'boxes'", "]", ")", ":", "\n", "                ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "int", "(", "head", "[", "0", "]", ")", ",", "int", "(", "head", "[", "1", "]", ")", ",", "int", "(", "head", "[", "2", "]", ")", ",", "int", "(", "head", "[", "3", "]", ")", "\n", "center_x", ",", "center_y", ",", "w", ",", "h", "=", "int", "(", "(", "x1", "+", "x2", ")", "/", "2", ")", ",", "int", "(", "(", "y1", "+", "y2", ")", "/", "2", ")", ",", "int", "(", "(", "x2", "-", "x1", ")", ")", ",", "int", "(", "(", "y2", "-", "y1", ")", ")", ",", "\n", "area", "=", "w", "*", "h", "\n", "if", "area", "==", "0", ":", "\n", "                    ", "count", "+=", "1", "\n", "continue", "\n", "\n", "", "level_area", "=", "0", "\n", "if", "area", ">=", "1", "and", "area", "<", "10", ":", "\n", "                    ", "level_area", "=", "0", "\n", "", "elif", "area", ">", "10", "and", "area", "<", "100", ":", "\n", "                    ", "level_area", "=", "1", "\n", "", "elif", "area", ">", "100", "and", "area", "<", "1000", ":", "\n", "                    ", "level_area", "=", "2", "\n", "", "elif", "area", ">", "1000", "and", "area", "<", "10000", ":", "\n", "                    ", "level_area", "=", "3", "\n", "", "elif", "area", ">", "10000", "and", "area", "<", "100000", ":", "\n", "                    ", "level_area", "=", "4", "\n", "", "elif", "area", ">", "100000", ":", "\n", "                    ", "level_area", "=", "5", "\n", "\n", "", "r_small", "=", "int", "(", "min", "(", "w", ",", "h", ")", "/", "2", ")", "\n", "r_large", "=", "int", "(", "np", ".", "sqrt", "(", "w", "*", "w", "+", "h", "*", "h", ")", "/", "2", ")", "\n", "\n", "Box_Info", ".", "append", "(", "str", "(", "center_x", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "center_y", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "r_small", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "r_large", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "level_area", ")", ")", "\n", "\n", "# print(Box_Info)", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dst_Root", ",", "mode", "+", "'_gt_loc.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "for", "ind", ",", "num", "in", "enumerate", "(", "Box_Info", ",", "1", ")", ":", "\n", "                    ", "if", "ind", "<", "len", "(", "Box_Info", ")", ":", "\n", "                        ", "f", ".", "write", "(", "num", "+", "' '", ")", "\n", "", "else", ":", "\n", "                        ", "f", ".", "write", "(", "num", ")", "\n", "", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "", "print", "(", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_JHU.JHU_list_make": [[350, 356], ["os.path.join", "os.listdir", "filname.split", "open", "f.write"], "function", ["None"], ["", "def", "JHU_list_make", "(", "mode", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "Root", ",", "mode", ",", "'images'", ")", "\n", "for", "filname", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "        ", "filname", "=", "filname", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "with", "open", "(", "dst_Root", "+", "'/'", "+", "mode", "+", "'.txt'", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "filname", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.euclidean_dist": [[2, 19], ["numpy.zeros", "numpy.sum", "numpy.sum", "numpy.sqrt", "numpy.dot", "numpy.square", "numpy.square"], "function", ["None"], ["def", "euclidean_dist", "(", "test_matrix", ",", "train_matrix", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      x: pytorch Variable, with shape [m, d]\n      y: pytorch Variable, with shape [n, d]\n    Returns:\n      dist: pytorch Variable, with shape [m, n]\n    \"\"\"", "\n", "num_test", "=", "test_matrix", ".", "shape", "[", "0", "]", "\n", "num_train", "=", "train_matrix", ".", "shape", "[", "0", "]", "\n", "dists", "=", "np", ".", "zeros", "(", "(", "num_test", ",", "num_train", ")", ")", "\n", "d1", "=", "-", "2", "*", "np", ".", "dot", "(", "test_matrix", ",", "train_matrix", ".", "T", ")", "# shape (num_test, num_train)", "\n", "d2", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "test_matrix", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "# shape (num_test, 1)", "\n", "d3", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "train_matrix", ")", ",", "axis", "=", "1", ")", "# shape (num_train, )", "\n", "dists", "=", "np", ".", "sqrt", "(", "d1", "+", "d2", "+", "d3", ")", "# broadcasting", "\n", "\n", "return", "dists", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.generate_cycle_mask": [[21, 27], ["None"], "function", ["None"], ["", "def", "generate_cycle_mask", "(", "height", ",", "width", ")", ":", "\n", "    ", "x", ",", "y", "=", "np", ".", "ogrid", "[", "-", "height", ":", "height", "+", "1", ",", "-", "width", ":", "width", "+", "1", "]", "\n", "# ellipse mask", "\n", "mask", "=", "(", "(", "x", ")", "**", "2", "/", "(", "height", "**", "2", ")", "+", "(", "y", ")", "**", "2", "/", "(", "width", "**", "2", ")", "<=", "1", ")", "\n", "mask", ".", "dtype", "=", "'uint8'", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.average_del_min": [[29, 40], ["len", "len", "data_list.remove", "min", "float", "len", "len", "sum", "float", "len", "sum"], "function", ["None"], ["", "def", "average_del_min", "(", "data_list", ")", ":", "\n", "    ", "if", "len", "(", "data_list", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "if", "len", "(", "data_list", ")", ">", "2", ":", "\n", "        ", "data_list", ".", "remove", "(", "min", "(", "data_list", ")", ")", "\n", "# data_list.remove(max(data_list))", "\n", "average_data", "=", "float", "(", "sum", "(", "data_list", ")", ")", "/", "len", "(", "data_list", ")", "\n", "return", "average_data", "\n", "", "elif", "len", "(", "data_list", ")", "<=", "2", ":", "\n", "        ", "average_data", "=", "float", "(", "sum", "(", "data_list", ")", ")", "/", "len", "(", "data_list", ")", "\n", "return", "average_data", "", "", "", ""]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_SHHA.resize_images": [[35, 65], ["glob.glob", "print", "enumerate", "os.path.join", "len", "str().zfill", "os.path.join", "os.path.exists", "[].split", "int", "PIL.Image.open", "print", "print", "Image.open.resize", "img_ori.resize.save", "str", "str().zfill.split", "int", "int", "img_path.split"], "function", ["None"], ["", "def", "resize_images", "(", "src_path", ",", "shift", "=", "0", ",", "resize_factor", "=", "2", ")", ":", "\n", "    ", "file_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "src_path", ",", "'images'", ",", "'*.jpg'", ")", ")", "\n", "print", "(", "len", "(", "file_list", ")", ")", "\n", "for", "idx", ",", "img_path", "in", "enumerate", "(", "file_list", ")", ":", "\n", "        ", "img_id", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "img_id", "=", "int", "(", "img_id", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "+", "shift", "\n", "img_id", "=", "str", "(", "img_id", ")", ".", "zfill", "(", "4", ")", "\n", "dst_img_path", "=", "os", ".", "path", ".", "join", "(", "dst_imgs_path", ",", "img_id", "+", "'.jpg'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dst_img_path", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "img_ori", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "w", ",", "h", "=", "img_ori", ".", "size", "\n", "new_w", ",", "new_h", "=", "w", "*", "2", ",", "h", "*", "2", "\n", "p_w", ",", "p_h", "=", "new_w", "/", "1024", ",", "new_h", "/", "768", "\n", "if", "p_w", "<", "1", "or", "p_h", "<", "1", ":", "\n", "                ", "if", "p_w", ">", "p_h", ":", "\n", "                    ", "new_h", "=", "768", "\n", "new_w", "=", "int", "(", "new_w", "/", "p_h", ")", "\n", "new_w", "=", "(", "new_w", "//", "16", "+", "1", ")", "*", "16", "\n", "", "else", ":", "\n", "                    ", "new_h", "=", "int", "(", "new_h", "/", "p_w", ")", "\n", "new_h", "=", "(", "new_h", "//", "16", "+", "1", ")", "*", "16", "\n", "new_w", "=", "1024", "\n", "", "", "else", ":", "\n", "                ", "new_w", ",", "new_h", "=", "(", "new_w", "//", "16", ")", "*", "16", ",", "(", "new_h", "//", "16", ")", "*", "16", "\n", "", "print", "(", "img_id", ")", "\n", "print", "(", "w", ",", "h", ",", "new_w", ",", "new_h", ")", "\n", "new_img", "=", "img_ori", ".", "resize", "(", "(", "new_w", ",", "new_h", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "new_img", ".", "save", "(", "dst_img_path", ",", "quality", "=", "95", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_SHHA.writer_jsons": [[68, 167], ["enumerate", "os.listdir", "ImgInfo.update", "os.path.join", "os.path.exists", "img_name.split", "os.path.join", "PIL.Image.open", "cv2.imread", "torch.from_numpy", "torch.from_numpy", "torch.max_pool2d", "torch.interpolate().squeeze", "print", "size_map.numpy.numpy", "print", "scipy.loadmat", "PIL.Image.open", "print", "print", "annPoints.astype.astype", "ImgInfo.update", "ImgInfo.update", "enumerate", "ImgInfo.update", "os.path.join.replace", "size_map[].float", "size_map.numpy.size", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "center_w.append", "center_h.append", "xy.append", "numpy.exp", "int", "wide.append", "heiht.append", "zip", "xywh.append", "open", "json.dump", "torch.interpolate", "int", "len", "min", "min", "functions.euclidean_dist", "dists.squeeze.squeeze", "numpy.argsort", "functions.average_del_min", "max", "max", "numpy.sqrt", "max", "max", "min", "min", "int", "int", "min", "min", "min", "min", "min", "min", "int", "int", "int", "int", "str", "str", "int", "int"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.euclidean_dist", "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.average_del_min"], ["", "", "", "def", "writer_jsons", "(", ")", ":", "\n", "\n", "    ", "for", "idx", ",", "img_name", "in", "enumerate", "(", "os", ".", "listdir", "(", "dst_imgs_path", ")", ")", ":", "\n", "        ", "ImgInfo", "=", "{", "}", "\n", "ImgInfo", ".", "update", "(", "{", "\"img_id\"", ":", "img_name", "}", ")", "\n", "\n", "img_id", "=", "img_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "dst_json_name", "=", "os", ".", "path", ".", "join", "(", "dst_json_path", ",", "img_id", "+", "'.json'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dst_json_name", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "imgPath", "=", "os", ".", "path", ".", "join", "(", "dst_imgs_path", ",", "img_name", ")", "\n", "img", "=", "Image", ".", "open", "(", "imgPath", ")", "\n", "size_map", "=", "cv", ".", "imread", "(", "imgPath", ".", "replace", "(", "'images'", ",", "'size_map'", ")", ",", "cv", ".", "IMREAD_GRAYSCALE", ")", "\n", "size_map", "=", "torch", ".", "from_numpy", "(", "size_map", ")", "\n", "size_map", "=", "F", ".", "max_pool2d", "(", "size_map", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "float", "(", ")", ",", "(", "199", ",", "199", ")", ",", "16", ",", "99", ")", "\n", "size_map", "=", "F", ".", "interpolate", "(", "size_map", ",", "scale_factor", "=", "16", ")", ".", "squeeze", "(", ")", "\n", "print", "(", "size_map", ".", "size", "(", ")", ")", "\n", "size_map", "=", "size_map", ".", "numpy", "(", ")", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "print", "(", "img_id", ")", "\n", "\n", "if", "img_id", "<=", "'0300'", ":", "\n", "                ", "img_id", "=", "str", "(", "int", "(", "img_id", ")", ")", "\n", "\n", "gt_path", "=", "os", ".", "path", ".", "join", "(", "train_path", ",", "'ground_truth'", ",", "'GT_IMG_'", "+", "img_id", "+", "'.mat'", ")", "\n", "ori_imgPath", "=", "os", ".", "path", ".", "join", "(", "train_path", ",", "'images'", ",", "'IMG_'", "+", "img_id", "+", "'.jpg'", ")", "\n", "", "else", ":", "\n", "                ", "gt_path", "=", "os", ".", "path", ".", "join", "(", "test_path", ",", "'ground_truth'", ",", "'GT_IMG_'", "+", "str", "(", "int", "(", "img_id", ")", "-", "300", ")", "+", "'.mat'", ")", "\n", "ori_imgPath", "=", "os", ".", "path", ".", "join", "(", "test_path", ",", "'images'", ",", "'IMG_'", "+", "str", "(", "int", "(", "img_id", ")", "-", "300", ")", "+", "'.jpg'", ")", "\n", "", "gtInf", "=", "scio", ".", "loadmat", "(", "gt_path", ")", "# format [ w, h ]", "\n", "# print(gtInf)", "\n", "ori_img", "=", "Image", ".", "open", "(", "ori_imgPath", ")", "\n", "ori_w", ",", "ori_h", "=", "ori_img", ".", "size", "\n", "print", "(", "'ori'", ",", "ori_w", ",", "ori_h", ")", "\n", "print", "(", "'resize'", ",", "w", ",", "h", ")", "\n", "\n", "\n", "w_rate", ",", "h_rate", "=", "w", "/", "ori_w", ",", "h", "/", "ori_h", "\n", "annPoints", "=", "gtInf", "[", "'image_info'", "]", "[", "0", ",", "0", "]", "[", "0", ",", "0", "]", "[", "0", "]", "\n", "\n", "# print(annPoints)", "\n", "annPoints", "[", ":", ",", "0", "]", "=", "annPoints", "[", ":", ",", "0", "]", "*", "w_rate", "\n", "annPoints", "[", ":", ",", "1", "]", "=", "annPoints", "[", ":", ",", "1", "]", "*", "h_rate", "\n", "annPoints", "=", "annPoints", ".", "astype", "(", "int", ")", "\n", "\n", "ImgInfo", ".", "update", "(", "{", "\"human_num\"", ":", "len", "(", "annPoints", ")", "}", ")", "\n", "center_w", ",", "center_h", "=", "[", "]", ",", "[", "]", "\n", "xy", "=", "[", "]", "\n", "wide", ",", "heiht", "=", "[", "]", ",", "[", "]", "\n", "for", "head", "in", "annPoints", ":", "\n", "\n", "                ", "x", ",", "y", "=", "min", "(", "head", "[", "0", "]", ",", "w", "-", "1", ")", ",", "min", "(", "head", "[", "1", "]", ",", "h", "-", "1", ")", "\n", "center_w", ".", "append", "(", "x", ")", "\n", "center_h", ".", "append", "(", "y", ")", "\n", "xy", ".", "append", "(", "[", "int", "(", "head", "[", "0", "]", ")", ",", "int", "(", "head", "[", "1", "]", ")", "]", ")", "\n", "\n", "if", "ImgInfo", "[", "\"human_num\"", "]", ">", "4", ":", "\n", "                    ", "dists", "=", "euclidean_dist", "(", "head", "[", "None", ",", ":", "]", ",", "annPoints", ")", "\n", "dists", "=", "dists", ".", "squeeze", "(", ")", "\n", "id", "=", "np", ".", "argsort", "(", "dists", ")", "\n", "p1_y", ",", "p1_x", "=", "min", "(", "annPoints", "[", "id", "[", "1", "]", "]", "[", "1", "]", ",", "h", "-", "1", ")", ",", "min", "(", "annPoints", "[", "id", "[", "1", "]", "]", "[", "0", "]", ",", "w", "-", "1", ")", "\n", "p2_y", ",", "p2_x", "=", "min", "(", "annPoints", "[", "id", "[", "2", "]", "]", "[", "1", "]", ",", "h", "-", "1", ")", ",", "min", "(", "annPoints", "[", "id", "[", "2", "]", "]", "[", "0", "]", ",", "w", "-", "1", ")", "\n", "p3_y", ",", "p3_x", "=", "min", "(", "annPoints", "[", "id", "[", "3", "]", "]", "[", "1", "]", ",", "h", "-", "1", ")", ",", "min", "(", "annPoints", "[", "id", "[", "3", "]", "]", "[", "0", "]", ",", "w", "-", "1", ")", "\n", "# print(id)", "\n", "# import pdb", "\n", "scale", "=", "average_del_min", "(", "[", "size_map", "[", "y", ",", "x", "]", ",", "size_map", "[", "p1_y", ",", "p1_x", "]", ",", "size_map", "[", "p2_y", ",", "p2_x", "]", ",", "size_map", "[", "p3_y", ",", "p3_x", "]", "]", ")", "\n", "\n", "scale", "=", "max", "(", "scale", ",", "4", ")", "\n", "", "else", ":", "\n", "                    ", "scale", "=", "max", "(", "size_map", "[", "y", ",", "x", "]", ",", "4", ")", "\n", "# print(x,y, scale)", "\n", "", "area", "=", "np", ".", "exp", "(", "scale", ")", "\n", "length", "=", "int", "(", "np", ".", "sqrt", "(", "area", ")", ")", "\n", "wide", ".", "append", "(", "length", ")", "\n", "heiht", ".", "append", "(", "length", ")", "\n", "", "ImgInfo", ".", "update", "(", "{", "\"points\"", ":", "xy", "}", ")", "\n", "\n", "xywh", "=", "[", "]", "\n", "for", "_", ",", "(", "x", ",", "y", ",", "x_len", ",", "y_len", ")", "in", "enumerate", "(", "zip", "(", "center_w", ",", "center_h", ",", "wide", ",", "heiht", ")", ")", ":", "\n", "# print(x,y,x_len,y_len)", "\n", "\n", "                ", "x_left_top", ",", "y_left_top", "=", "max", "(", "int", "(", "x", "-", "x_len", "/", "2", ")", ",", "0", ")", ",", "max", "(", "int", "(", "y", "-", "y_len", "/", "2", ")", ",", "0", ")", "\n", "x_right_bottom", ",", "y_right_bottom", "=", "min", "(", "int", "(", "x", "+", "x_len", "/", "2", ")", ",", "w", "-", "1", ")", ",", "min", "(", "int", "(", "y", "+", "y_len", "/", "2", ")", ",", "h", "-", "1", ")", "\n", "xywh", ".", "append", "(", "[", "x_left_top", ",", "y_left_top", ",", "x_right_bottom", ",", "y_right_bottom", "]", ")", "\n", "\n", "", "ImgInfo", ".", "update", "(", "{", "\"boxes\"", ":", "xywh", "}", ")", "\n", "# print(ImgInfo)", "\n", "\n", "# plot(center_w, center_h, 'g*')", "\n", "# plt.imshow(img)", "\n", "# for (x_, y_, w_, h_) in ImgInfo[\"boxes\"]:", "\n", "#     plt.gca().add_patch(plt.Rectangle((x_, y_), w_ - x_, h_ - y_, fill=False, edgecolor='r', linewidth=1))", "\n", "# plt.show()", "\n", "\n", "with", "open", "(", "dst_json_name", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "ImgInfo", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_SHHA.generate_masks": [[169, 272], ["glob.glob", "print", "enumerate", "os.path.join", "len", "PIL.Image.open", "print", "print", "numpy.zeros", "os.path.join", "enumerate", "numpy.array", "numpy.array", "zip", "cv2.imwrite", "[].split", "open", "json.load", "centroid_list.append", "wh_list.append", "centroid_list.copy", "wh_list.copy", "functions.euclidean_dist", "dists.squeeze.squeeze", "numpy.argsort", "enumerate", "os.path.join", "img_id.split", "max", "max", "point.squeeze", "functions.generate_cycle_mask", "img_path.split", "max", "max", "max", "max", "max", "max", "int", "int", "numpy.abs", "numpy.abs", "int", "int", "int", "int", "max", "max", "max", "max", "int", "int", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.euclidean_dist", "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.generate_cycle_mask"], ["", "", "", "", "def", "generate_masks", "(", ")", ":", "\n", "    ", "file_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dst_imgs_path", ",", "'*.jpg'", ")", ")", "\n", "\n", "print", "(", "len", "(", "file_list", ")", ")", "\n", "for", "idx", ",", "img_path", "in", "enumerate", "(", "file_list", ")", ":", "\n", "        ", "if", "'.jpg'", "in", "img_path", ":", "\n", "\n", "            ", "img_id", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "img_ori", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "w", ",", "h", "=", "img_ori", ".", "size", "\n", "\n", "print", "(", "img_id", ")", "\n", "print", "(", "w", ",", "h", ")", "\n", "mask_map", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "gt_name", "=", "os", ".", "path", ".", "join", "(", "dst_json_path", ",", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.json'", ")", "\n", "\n", "with", "open", "(", "gt_name", ")", "as", "f", ":", "\n", "                ", "ImgInfo", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "centroid_list", "=", "[", "]", "\n", "wh_list", "=", "[", "]", "\n", "for", "id", ",", "(", "w_start", ",", "h_start", ",", "w_end", ",", "h_end", ")", "in", "enumerate", "(", "ImgInfo", "[", "\"boxes\"", "]", ",", "0", ")", ":", "\n", "                ", "centroid_list", ".", "append", "(", "[", "(", "w_end", "+", "w_start", ")", "/", "2", ",", "(", "h_end", "+", "h_start", ")", "/", "2", "]", ")", "\n", "wh_list", ".", "append", "(", "[", "max", "(", "(", "w_end", "-", "w_start", ")", "/", "2", ",", "3", ")", ",", "max", "(", "(", "h_end", "-", "h_start", ")", "/", "2", ",", "3", ")", "]", ")", "\n", "# print(len(centroid_list))", "\n", "", "centroids", "=", "np", ".", "array", "(", "centroid_list", ".", "copy", "(", ")", ",", "dtype", "=", "'int'", ")", "\n", "wh", "=", "np", ".", "array", "(", "wh_list", ".", "copy", "(", ")", ",", "dtype", "=", "'int'", ")", "\n", "wh", "[", "wh", ">", "25", "]", "=", "25", "\n", "human_num", "=", "ImgInfo", "[", "\"human_num\"", "]", "\n", "for", "point", "in", "centroids", ":", "\n", "                ", "point", "=", "point", "[", "None", ",", ":", "]", "\n", "\n", "dists", "=", "euclidean_dist", "(", "point", ",", "centroids", ")", "\n", "dists", "=", "dists", ".", "squeeze", "(", ")", "\n", "id", "=", "np", ".", "argsort", "(", "dists", ")", "\n", "\n", "for", "start", ",", "first", "in", "enumerate", "(", "id", ",", "0", ")", ":", "\n", "                    ", "if", "start", ">", "0", "and", "start", "<", "5", ":", "\n", "                        ", "src_point", "=", "point", ".", "squeeze", "(", ")", "\n", "dst_point", "=", "centroids", "[", "first", "]", "\n", "\n", "src_w", ",", "src_h", "=", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "\n", "dst_w", ",", "dst_h", "=", "wh", "[", "first", "]", "[", "0", "]", ",", "wh", "[", "first", "]", "[", "1", "]", "\n", "\n", "count", "=", "0", "\n", "threshold_w", ",", "threshold_h", "=", "max", "(", "-", "int", "(", "max", "(", "src_w", ",", "dst_w", ")", "/", "2.", ")", ",", "-", "60", ")", ",", "max", "(", "-", "int", "(", "max", "(", "src_h", ",", "dst_h", ")", "/", "2.", ")", ",", "-", "60", ")", "\n", "# threshold_w, threshold_h = -5,-5", "\n", "while", "(", "src_w", "+", "dst_w", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point", "[", "0", "]", ")", ">", "threshold_w", "and", "(", "src_h", "+", "dst_h", ")", "-", "np", ".", "abs", "(", "src_point", "[", "1", "]", "-", "dst_point", "[", "1", "]", ")", ">", "threshold_h", ":", "\n", "\n", "                            ", "if", "(", "dst_w", "*", "dst_h", ")", ">", "(", "src_w", "*", "src_h", ")", ":", "\n", "                                ", "wh", "[", "first", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "first", "]", "[", "0", "]", "*", "0.9", ")", ",", "1", ")", "\n", "wh", "[", "first", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "first", "]", "[", "1", "]", "*", "0.9", ")", ",", "1", ")", "\n", "dst_w", ",", "dst_h", "=", "wh", "[", "first", "]", "[", "0", "]", ",", "wh", "[", "first", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "                                ", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", "*", "0.9", ")", ",", "1", ")", "\n", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "*", "0.9", ")", ",", "1", ")", "\n", "src_w", ",", "src_h", "=", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "\n", "\n", "\n", "", "if", "human_num", ">=", "3", ":", "\n", "                                ", "dst_point_", "=", "centroids", "[", "id", "[", "start", "+", "1", "]", "]", "\n", "dst_w_", ",", "dst_h_", "=", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "\n", "if", "(", "dst_w_", "*", "dst_h_", ")", ">", "(", "src_w", "*", "src_h", ")", "and", "(", "dst_w_", "*", "dst_h_", ")", ">", "(", "dst_w", "*", "dst_h", ")", ":", "\n", "                                    ", "if", "(", "src_w", "+", "dst_w_", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point_", "[", "0", "]", ")", ">", "threshold_w", "and", "(", "src_h", "+", "dst_h_", ")", "-", "np", ".", "abs", "(", "src_point", "[", "1", "]", "-", "dst_point_", "[", "1", "]", ")", ">", "threshold_h", ":", "\n", "\n", "                                        ", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", "*", "0.9", ")", ",", "1", ")", "\n", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "*", "0.9", ")", ",", "1", ")", "\n", "\n", "\n", "", "", "", "count", "+=", "1", "\n", "if", "count", ">", "50", ":", "\n", "                                ", "break", "\n", "", "", "", "", "", "for", "(", "center_w", ",", "center_h", ")", ",", "(", "width", ",", "height", ")", "in", "zip", "(", "centroids", ",", "wh", ")", ":", "\n", "                ", "assert", "(", "width", ">", "0", "and", "height", ">", "0", ")", "\n", "\n", "if", "(", "0", "<", "center_w", "<", "w", ")", "and", "(", "0", "<", "center_h", "<", "h", ")", ":", "\n", "                    ", "h_start", "=", "(", "center_h", "-", "height", ")", "\n", "h_end", "=", "(", "center_h", "+", "height", ")", "\n", "\n", "w_start", "=", "center_w", "-", "width", "\n", "w_end", "=", "center_w", "+", "width", "\n", "#", "\n", "if", "h_start", "<", "0", ":", "\n", "                        ", "h_start", "=", "0", "\n", "\n", "", "if", "h_end", ">", "h", ":", "\n", "                        ", "h_end", "=", "h", "\n", "\n", "", "if", "w_start", "<", "0", ":", "\n", "                        ", "w_start", "=", "0", "\n", "\n", "", "if", "w_end", ">", "w", ":", "\n", "                        ", "w_end", "=", "w", "\n", "\n", "", "if", "cycle", ":", "\n", "                        ", "mask", "=", "generate_cycle_mask", "(", "height", ",", "width", ")", "\n", "mask_map", "[", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "=", "mask", "\n", "\n", "", "else", ":", "\n", "                        ", "mask_map", "[", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "=", "1", "\n", "\n", "", "", "", "mask_map", "=", "mask_map", "*", "255", "\n", "cv", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "dst_mask_path", ",", "img_id", "+", "'.png'", ")", ",", "mask_map", ",", "[", "cv", ".", "IMWRITE_PNG_BILEVEL", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_SHHA.divide_dataset": [[323, 363], ["os.listdir", "print", "random.sample", "print", "set", "set", "print", "sorted", "sorted", "sorted", "print", "f.close", "f.close", "f.close", "len", "len", "round", "len", "len", "open", "open", "open", "img_name.split", "sorted.append", "set.append", "os.path.join", "f.write", "os.path.join", "f.write", "os.path.join", "f.write", "len"], "function", ["None"], ["", "", "", "def", "divide_dataset", "(", "val_ration", "=", "0.1", ")", ":", "\n", "    ", "import", "random", "\n", "all_file", "=", "os", ".", "listdir", "(", "dst_imgs_path", ")", "\n", "test_set", "=", "[", "]", "\n", "train_val", "=", "[", "]", "\n", "for", "img_name", "in", "all_file", ":", "\n", "        ", "img_id", "=", "img_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "img_id", ">", "'0300'", ":", "\n", "            ", "test_set", ".", "append", "(", "img_id", ")", "\n", "", "else", ":", "\n", "            ", "train_val", ".", "append", "(", "img_id", ")", "\n", "", "", "print", "(", "\"test_set_num:\"", ",", "len", "(", "test_set", ")", ",", "'train_val_num:'", ",", "len", "(", "train_val", ")", ")", "\n", "\n", "val_set", "=", "random", ".", "sample", "(", "train_val", ",", "round", "(", "val_ration", "*", "len", "(", "train_val", ")", ")", ")", "\n", "print", "(", "\"val_set_num:\"", ",", "len", "(", "val_set", ")", ")", "\n", "train_val", "=", "set", "(", "train_val", ")", "\n", "val_set", "=", "set", "(", "val_set", ")", "\n", "train_set", "=", "train_val", "-", "val_set", "\n", "print", "(", "\"train_set_num:\"", ",", "len", "(", "train_set", ")", ")", "\n", "\n", "train_set", "=", "sorted", "(", "train_set", ")", "\n", "val_set", "=", "sorted", "(", "val_set", ")", "\n", "test_set", "=", "sorted", "(", "test_set", ")", "\n", "print", "(", "test_set", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "Root", ",", "'train.txt'", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "train_name", "in", "train_set", ":", "\n", "            ", "f", ".", "write", "(", "train_name", "+", "'\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "Root", ",", "'val.txt'", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "valid_name", "in", "val_set", ":", "\n", "            ", "f", ".", "write", "(", "valid_name", "+", "'\\n'", ")", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "Root", ",", "'test.txt'", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "valid_name", "in", "test_set", ":", "\n", "            ", "f", ".", "write", "(", "valid_name", "+", "'\\n'", ")", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_SHHA.loc_gt_make": [[364, 426], ["os.path.join", "enumerate", "print", "open", "f.readlines", "img_ids.append", "print", "os.path.join", "Box_Info.append", "Box_Info.append", "enumerate", "line.split", "open", "json.load", "str", "int", "int", "Box_Info.append", "Box_Info.append", "Box_Info.append", "Box_Info.append", "Box_Info.append", "open", "enumerate", "f.write", "int", "int", "int", "int", "int", "int", "int", "int", "str", "str", "str", "str", "str", "os.path.join", "min", "numpy.sqrt", "len", "f.write", "f.write"], "function", ["None"], ["", "def", "loc_gt_make", "(", "mode", "=", "'test'", ")", ":", "\n", "    ", "txt_path", "=", "os", ".", "path", ".", "join", "(", "Root", ",", "mode", "+", "'.txt'", ")", "\n", "with", "open", "(", "txt_path", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "img_ids", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "img_ids", ".", "append", "(", "line", ".", "split", "(", "'\\n'", ")", "[", "0", "]", ")", "\n", "\n", "\n", "", "count", "=", "0", "\n", "for", "idx", ",", "img_id", "in", "enumerate", "(", "img_ids", ")", ":", "\n", "        ", "print", "(", "img_id", ")", "\n", "json_path", "=", "os", ".", "path", ".", "join", "(", "dst_json_path", ",", "img_id", "+", "'.json'", ")", "\n", "Box_Info", "=", "[", "]", "\n", "Box_Info", ".", "append", "(", "img_id", ")", "\n", "if", "idx", "!=", "-", "1", ":", "\n", "\n", "            ", "with", "open", "(", "json_path", ")", "as", "f", ":", "\n", "                ", "infor", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "Box_Info", ".", "append", "(", "str", "(", "infor", "[", "'human_num'", "]", ")", ")", "\n", "for", "id", ",", "head", "in", "enumerate", "(", "infor", "[", "'boxes'", "]", ")", ":", "\n", "                ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "int", "(", "head", "[", "0", "]", ")", ",", "int", "(", "head", "[", "1", "]", ")", ",", "int", "(", "head", "[", "2", "]", ")", ",", "int", "(", "head", "[", "3", "]", ")", "\n", "center_x", ",", "center_y", ",", "w", ",", "h", "=", "int", "(", "(", "x1", "+", "x2", ")", "/", "2", ")", ",", "int", "(", "(", "y1", "+", "y2", ")", "/", "2", ")", ",", "int", "(", "(", "x2", "-", "x1", ")", ")", ",", "int", "(", "(", "y2", "-", "y1", ")", ")", ",", "\n", "area", "=", "w", "*", "h", "\n", "if", "area", "==", "0", ":", "\n", "                    ", "count", "+=", "1", "\n", "continue", "\n", "\n", "", "level_area", "=", "0", "\n", "if", "area", ">=", "1", "and", "area", "<", "10", ":", "\n", "                    ", "level_area", "=", "0", "\n", "", "elif", "area", ">", "10", "and", "area", "<", "100", ":", "\n", "                    ", "level_area", "=", "1", "\n", "", "elif", "area", ">", "100", "and", "area", "<", "1000", ":", "\n", "                    ", "level_area", "=", "2", "\n", "", "elif", "area", ">", "1000", "and", "area", "<", "10000", ":", "\n", "                    ", "level_area", "=", "3", "\n", "", "elif", "area", ">", "10000", "and", "area", "<", "100000", ":", "\n", "                    ", "level_area", "=", "4", "\n", "", "elif", "area", ">", "100000", ":", "\n", "                    ", "level_area", "=", "5", "\n", "\n", "", "r_small", "=", "int", "(", "min", "(", "w", ",", "h", ")", "/", "2", ")", "\n", "r_large", "=", "int", "(", "np", ".", "sqrt", "(", "w", "*", "w", "+", "h", "*", "h", ")", "/", "2", ")", "\n", "\n", "Box_Info", ".", "append", "(", "str", "(", "center_x", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "center_y", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "r_small", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "r_large", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "level_area", ")", ")", "\n", "\n", "# print(Box_Info)", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "Root", ",", "mode", "+", "'_gt_loc.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "for", "ind", ",", "num", "in", "enumerate", "(", "Box_Info", ",", "1", ")", ":", "\n", "                    ", "if", "ind", "<", "len", "(", "Box_Info", ")", ":", "\n", "                        ", "f", ".", "write", "(", "num", "+", "' '", ")", "\n", "", "else", ":", "\n", "                        ", "f", ".", "write", "(", "num", ")", "\n", "", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "", "print", "(", "count", ")", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_SHHB.resize_images": [[36, 54], ["glob.glob", "print", "enumerate", "os.path.join", "len", "str().zfill", "os.path.join", "os.path.exists", "[].split", "int", "PIL.Image.open", "print", "print", "Image.open.resize", "img_ori.resize.save", "str", "str().zfill.split", "img_path.split"], "function", ["None"], ["", "def", "resize_images", "(", "src_path", ",", "shift", "=", "0", ",", "resize_factor", "=", "2", ")", ":", "\n", "    ", "file_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "src_path", ",", "'images'", ",", "'*.jpg'", ")", ")", "\n", "print", "(", "len", "(", "file_list", ")", ")", "\n", "for", "idx", ",", "img_path", "in", "enumerate", "(", "file_list", ")", ":", "\n", "        ", "img_id", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "img_id", "=", "int", "(", "img_id", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "+", "shift", "\n", "img_id", "=", "str", "(", "img_id", ")", ".", "zfill", "(", "4", ")", "\n", "dst_img_path", "=", "os", ".", "path", ".", "join", "(", "dst_imgs_path", ",", "img_id", "+", "'.jpg'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dst_img_path", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "img_ori", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "w", ",", "h", "=", "img_ori", ".", "size", "\n", "new_w", ",", "new_h", "=", "w", "*", "resize_factor", "//", "16", "*", "16", ",", "h", "*", "resize_factor", "//", "16", "*", "16", "\n", "print", "(", "img_id", ")", "\n", "print", "(", "w", ",", "h", ",", "new_w", ",", "new_h", ")", "\n", "new_img", "=", "img_ori", ".", "resize", "(", "(", "new_w", ",", "new_h", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "new_img", ".", "save", "(", "dst_img_path", ",", "quality", "=", "95", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_SHHB.writer_jsons": [[56, 162], ["enumerate", "os.listdir", "ImgInfo.update", "os.path.join", "os.path.exists", "img_name.split", "os.path.join", "PIL.Image.open", "cv2.imread", "torch.from_numpy", "torch.from_numpy", "torch.max_pool2d", "torch.interpolate().squeeze", "print", "size_map.numpy.numpy", "print", "numpy.zeros", "print", "scipy.loadmat", "PIL.Image.open", "print", "annPoints.astype.astype", "ImgInfo.update", "ImgInfo.update", "enumerate", "ImgInfo.update", "os.path.join.replace", "size_map[].float", "size_map.numpy.size", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "center_w.append", "center_h.append", "xy.append", "numpy.exp", "int", "wide.append", "heiht.append", "zip", "xywh.append", "open", "json.dump", "torch.interpolate", "int", "len", "min", "min", "functions.euclidean_dist", "dists.squeeze.squeeze", "numpy.argsort", "functions.average_del_min", "max", "max", "numpy.sqrt", "max", "max", "min", "min", "int", "int", "min", "min", "min", "min", "min", "min", "int", "int", "int", "int", "str", "str", "int", "int"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update", "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.euclidean_dist", "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.average_del_min"], ["", "", "", "def", "writer_jsons", "(", ")", ":", "\n", "\n", "    ", "for", "idx", ",", "img_name", "in", "enumerate", "(", "os", ".", "listdir", "(", "dst_imgs_path", ")", ")", ":", "\n", "\n", "\n", "        ", "ImgInfo", "=", "{", "}", "\n", "ImgInfo", ".", "update", "(", "{", "\"img_id\"", ":", "img_name", "}", ")", "\n", "\n", "img_id", "=", "img_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "dst_json_name", "=", "os", ".", "path", ".", "join", "(", "dst_json_path", ",", "img_id", "+", "'.json'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dst_json_name", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "imgPath", "=", "os", ".", "path", ".", "join", "(", "dst_imgs_path", ",", "img_name", ")", "\n", "img", "=", "Image", ".", "open", "(", "imgPath", ")", "\n", "size_map", "=", "cv", ".", "imread", "(", "imgPath", ".", "replace", "(", "'images'", ",", "'size_map'", ")", ",", "cv", ".", "IMREAD_GRAYSCALE", ")", "\n", "size_map", "=", "torch", ".", "from_numpy", "(", "size_map", ")", "\n", "size_map", "=", "F", ".", "max_pool2d", "(", "size_map", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "float", "(", ")", ",", "(", "199", ",", "199", ")", ",", "16", ",", "99", ")", "\n", "size_map", "=", "F", ".", "interpolate", "(", "size_map", ",", "scale_factor", "=", "16", ")", ".", "squeeze", "(", ")", "\n", "print", "(", "size_map", ".", "size", "(", ")", ")", "\n", "size_map", "=", "size_map", ".", "numpy", "(", ")", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "print", "(", "'resize'", ",", "w", ",", "h", ")", "\n", "# print(np.array(img_ori).shape)", "\n", "scale_map", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "\n", "print", "(", "img_id", ")", "\n", "if", "img_id", "<=", "'0400'", ":", "\n", "                ", "img_id", "=", "str", "(", "int", "(", "img_id", ")", ")", "\n", "\n", "gt_path", "=", "os", ".", "path", ".", "join", "(", "train_path", ",", "'ground_truth'", ",", "'GT_IMG_'", "+", "img_id", "+", "'.mat'", ")", "\n", "ori_imgPath", "=", "os", ".", "path", ".", "join", "(", "train_path", ",", "'images'", ",", "'IMG_'", "+", "img_id", "+", "'.jpg'", ")", "\n", "", "else", ":", "\n", "                ", "gt_path", "=", "os", ".", "path", ".", "join", "(", "test_path", ",", "'ground_truth'", ",", "'GT_IMG_'", "+", "str", "(", "int", "(", "img_id", ")", "-", "400", ")", "+", "'.mat'", ")", "\n", "ori_imgPath", "=", "os", ".", "path", ".", "join", "(", "test_path", ",", "'images'", ",", "'IMG_'", "+", "str", "(", "int", "(", "img_id", ")", "-", "400", ")", "+", "'.jpg'", ")", "\n", "", "gtInf", "=", "scio", ".", "loadmat", "(", "gt_path", ")", "# format [ w, h ]", "\n", "# print(gtInf)", "\n", "ori_img", "=", "Image", ".", "open", "(", "ori_imgPath", ")", "\n", "ori_w", ",", "ori_h", "=", "ori_img", ".", "size", "\n", "print", "(", "'ori'", ",", "ori_w", ",", "ori_h", ")", "\n", "\n", "w_rate", ",", "h_rate", "=", "w", "/", "ori_w", ",", "h", "/", "ori_h", "\n", "annPoints", "=", "gtInf", "[", "'image_info'", "]", "[", "0", ",", "0", "]", "[", "0", ",", "0", "]", "[", "0", "]", "\n", "\n", "# print(annPoints)", "\n", "\n", "annPoints", "[", ":", ",", "0", "]", "=", "annPoints", "[", ":", ",", "0", "]", "*", "w_rate", "\n", "annPoints", "[", ":", ",", "1", "]", "=", "annPoints", "[", ":", ",", "1", "]", "*", "h_rate", "\n", "annPoints", "=", "annPoints", ".", "astype", "(", "int", ")", "\n", "# print(annPoints)", "\n", "\n", "\n", "ImgInfo", ".", "update", "(", "{", "\"human_num\"", ":", "len", "(", "annPoints", ")", "}", ")", "\n", "center_w", ",", "center_h", "=", "[", "]", ",", "[", "]", "\n", "xy", "=", "[", "]", "\n", "wide", ",", "heiht", "=", "[", "]", ",", "[", "]", "\n", "for", "head", "in", "annPoints", ":", "\n", "\n", "                ", "x", ",", "y", "=", "min", "(", "head", "[", "0", "]", ",", "w", "-", "1", ")", ",", "min", "(", "head", "[", "1", "]", ",", "h", "-", "1", ")", "\n", "center_w", ".", "append", "(", "x", ")", "\n", "center_h", ".", "append", "(", "y", ")", "\n", "xy", ".", "append", "(", "[", "int", "(", "head", "[", "0", "]", ")", ",", "int", "(", "head", "[", "1", "]", ")", "]", ")", "\n", "\n", "if", "ImgInfo", "[", "\"human_num\"", "]", ">", "4", ":", "\n", "                    ", "dists", "=", "euclidean_dist", "(", "head", "[", "None", ",", ":", "]", ",", "annPoints", ")", "\n", "dists", "=", "dists", ".", "squeeze", "(", ")", "\n", "id", "=", "np", ".", "argsort", "(", "dists", ")", "\n", "p1_y", ",", "p1_x", "=", "min", "(", "annPoints", "[", "id", "[", "1", "]", "]", "[", "1", "]", ",", "h", "-", "1", ")", ",", "min", "(", "annPoints", "[", "id", "[", "1", "]", "]", "[", "0", "]", ",", "w", "-", "1", ")", "\n", "p2_y", ",", "p2_x", "=", "min", "(", "annPoints", "[", "id", "[", "2", "]", "]", "[", "1", "]", ",", "h", "-", "1", ")", ",", "min", "(", "annPoints", "[", "id", "[", "2", "]", "]", "[", "0", "]", ",", "w", "-", "1", ")", "\n", "p3_y", ",", "p3_x", "=", "min", "(", "annPoints", "[", "id", "[", "3", "]", "]", "[", "1", "]", ",", "h", "-", "1", ")", ",", "min", "(", "annPoints", "[", "id", "[", "3", "]", "]", "[", "0", "]", ",", "w", "-", "1", ")", "\n", "# print(id)", "\n", "# import pdb", "\n", "scale", "=", "average_del_min", "(", "[", "size_map", "[", "y", ",", "x", "]", ",", "size_map", "[", "p1_y", ",", "p1_x", "]", ",", "size_map", "[", "p2_y", ",", "p2_x", "]", ",", "size_map", "[", "p3_y", ",", "p3_x", "]", "]", ")", "\n", "\n", "scale", "=", "max", "(", "scale", ",", "4", ")", "\n", "", "else", ":", "\n", "                    ", "scale", "=", "max", "(", "size_map", "[", "y", ",", "x", "]", ",", "4", ")", "\n", "# print(x,y, scale)", "\n", "", "area", "=", "np", ".", "exp", "(", "scale", ")", "\n", "length", "=", "int", "(", "np", ".", "sqrt", "(", "area", ")", ")", "\n", "wide", ".", "append", "(", "length", ")", "\n", "heiht", ".", "append", "(", "length", ")", "\n", "", "ImgInfo", ".", "update", "(", "{", "\"points\"", ":", "xy", "}", ")", "\n", "# new_heads = [[i, j] for [i, j] in zip(new_x, new_y)]", "\n", "\n", "xywh", "=", "[", "]", "\n", "for", "_", ",", "(", "x", ",", "y", ",", "x_len", ",", "y_len", ")", "in", "enumerate", "(", "zip", "(", "center_w", ",", "center_h", ",", "wide", ",", "heiht", ")", ")", ":", "\n", "# print(x,y,x_len,y_len)", "\n", "\n", "                ", "x_left_top", ",", "y_left_top", "=", "max", "(", "int", "(", "x", "-", "x_len", "/", "2", ")", ",", "0", ")", ",", "max", "(", "int", "(", "y", "-", "y_len", "/", "2", ")", ",", "0", ")", "\n", "x_right_bottom", ",", "y_right_bottom", "=", "min", "(", "int", "(", "x", "+", "x_len", "/", "2", ")", ",", "w", "-", "1", ")", ",", "min", "(", "int", "(", "y", "+", "y_len", "/", "2", ")", ",", "h", "-", "1", ")", "\n", "xywh", ".", "append", "(", "[", "x_left_top", ",", "y_left_top", ",", "x_right_bottom", ",", "y_right_bottom", "]", ")", "\n", "\n", "", "ImgInfo", ".", "update", "(", "{", "\"boxes\"", ":", "xywh", "}", ")", "\n", "# print(ImgInfo)", "\n", "\n", "# plot(center_w, center_h, 'g*')", "\n", "# plt.imshow(img)", "\n", "# for (x_, y_, w_, h_) in ImgInfo[\"boxes\"]:", "\n", "#     plt.gca().add_patch(plt.Rectangle((x_, y_), w_ - x_, h_ - y_, fill=False, edgecolor='r', linewidth=1))", "\n", "# plt.show()", "\n", "\n", "with", "open", "(", "dst_json_name", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "ImgInfo", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_SHHB.generate_masks": [[164, 293], ["glob.glob", "print", "enumerate", "os.path.join", "len", "PIL.Image.open", "print", "print", "numpy.zeros", "os.path.join", "enumerate", "numpy.array", "numpy.array", "zip", "cv2.imwrite", "matplotlib.gca", "matplotlib.imshow", "zip", "plt.gca.axes.get_yaxis().set_visible", "plt.gca.axes.get_xaxis().set_visible", "plt.gca.spines[].set_visible", "plt.gca.spines[].set_visible", "plt.gca.spines[].set_visible", "plt.gca.spines[].set_visible", "os.path.join", "matplotlib.savefig", "matplotlib.close", "[].split", "open", "json.load", "centroid_list.append", "wh_list.append", "centroid_list.copy", "wh_list.copy", "functions.euclidean_dist", "dists.squeeze.squeeze", "numpy.argsort", "enumerate", "os.path.join", "plt.gca.add_patch", "os.path.exists", "os.makedirs", "os.path.join", "matplotlib.Rectangle", "plt.gca.axes.get_yaxis", "plt.gca.axes.get_xaxis", "img_id.split", "max", "max", "point.squeeze", "functions.generate_cycle_mask", "img_path.split", "max", "max", "max", "max", "max", "max", "max", "max", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "int", "int", "int", "int", "int", "int", "int", "int", "max", "max", "int", "int", "max", "max", "max", "max", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.euclidean_dist", "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.functions.generate_cycle_mask"], ["", "", "", "", "def", "generate_masks", "(", ")", ":", "\n", "    ", "file_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dst_imgs_path", ",", "'*.jpg'", ")", ")", "\n", "\n", "print", "(", "len", "(", "file_list", ")", ")", "\n", "for", "idx", ",", "img_path", "in", "enumerate", "(", "file_list", ")", ":", "# 108.jpg is the wrong labeled image", "\n", "        ", "if", "'0108.jpg'", "not", "in", "img_path", ":", "\n", "            ", "img_id", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "img_ori", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "w", ",", "h", "=", "img_ori", ".", "size", "\n", "\n", "print", "(", "img_id", ")", "\n", "print", "(", "w", ",", "h", ")", "\n", "mask_map", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "gt_name", "=", "os", ".", "path", ".", "join", "(", "dst_json_path", ",", "img_id", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.json'", ")", "\n", "\n", "with", "open", "(", "gt_name", ")", "as", "f", ":", "\n", "                ", "ImgInfo", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "centroid_list", "=", "[", "]", "\n", "wh_list", "=", "[", "]", "\n", "for", "id", ",", "(", "w_start", ",", "h_start", ",", "w_end", ",", "h_end", ")", "in", "enumerate", "(", "ImgInfo", "[", "\"boxes\"", "]", ",", "0", ")", ":", "\n", "                ", "centroid_list", ".", "append", "(", "[", "(", "w_end", "+", "w_start", ")", "/", "2", ",", "(", "h_end", "+", "h_start", ")", "/", "2", "]", ")", "\n", "wh_list", ".", "append", "(", "[", "max", "(", "(", "w_end", "-", "w_start", ")", "/", "2", ",", "3", ")", ",", "max", "(", "(", "h_end", "-", "h_start", ")", "/", "2", ",", "3", ")", "]", ")", "\n", "# print(len(centroid_list))", "\n", "", "centroids", "=", "np", ".", "array", "(", "centroid_list", ".", "copy", "(", ")", ",", "dtype", "=", "'int'", ")", "\n", "wh", "=", "np", ".", "array", "(", "wh_list", ".", "copy", "(", ")", ",", "dtype", "=", "'int'", ")", "\n", "wh", "[", "wh", ">", "25", "]", "=", "25", "\n", "human_num", "=", "ImgInfo", "[", "\"human_num\"", "]", "\n", "for", "point", "in", "centroids", ":", "\n", "                ", "point", "=", "point", "[", "None", ",", ":", "]", "\n", "\n", "dists", "=", "euclidean_dist", "(", "point", ",", "centroids", ")", "\n", "dists", "=", "dists", ".", "squeeze", "(", ")", "\n", "id", "=", "np", ".", "argsort", "(", "dists", ")", "\n", "\n", "for", "start", ",", "first", "in", "enumerate", "(", "id", ",", "0", ")", ":", "\n", "                    ", "if", "start", ">", "0", "and", "start", "<", "5", ":", "\n", "                        ", "src_point", "=", "point", ".", "squeeze", "(", ")", "\n", "dst_point", "=", "centroids", "[", "first", "]", "\n", "\n", "src_w", ",", "src_h", "=", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "\n", "dst_w", ",", "dst_h", "=", "wh", "[", "first", "]", "[", "0", "]", ",", "wh", "[", "first", "]", "[", "1", "]", "\n", "\n", "count", "=", "0", "\n", "if", "(", "src_w", "+", "dst_w", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point", "[", "0", "]", ")", ">", "0", "and", "(", "src_h", "+", "dst_h", ")", "-", "np", ".", "abs", "(", "src_point", "[", "1", "]", "-", "dst_point", "[", "1", "]", ")", ">", "0", ":", "\n", "                            ", "w_reduce", "=", "(", "(", "src_w", "+", "dst_w", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point", "[", "0", "]", ")", ")", "/", "2", "\n", "h_reduce", "=", "(", "(", "src_h", "+", "dst_h", ")", "-", "np", ".", "abs", "(", "src_point", "[", "1", "]", "-", "dst_point", "[", "1", "]", ")", ")", "/", "2", "\n", "threshold_w", ",", "threshold_h", "=", "max", "(", "-", "int", "(", "max", "(", "src_w", "-", "w_reduce", ",", "dst_w", "-", "w_reduce", ")", "/", "2.", ")", ",", "-", "60", ")", ",", "max", "(", "\n", "-", "int", "(", "max", "(", "src_h", "-", "h_reduce", ",", "dst_h", "-", "h_reduce", ")", "/", "2.", ")", ",", "-", "60", ")", "\n", "\n", "", "else", ":", "\n", "                            ", "threshold_w", ",", "threshold_h", "=", "max", "(", "-", "int", "(", "max", "(", "src_w", ",", "dst_w", ")", "/", "2.", ")", ",", "-", "60", ")", ",", "max", "(", "-", "int", "(", "max", "(", "src_h", ",", "dst_h", ")", "/", "2.", ")", ",", "-", "60", ")", "\n", "# threshold_w, threshold_h = -5,-5", "\n", "", "while", "(", "src_w", "+", "dst_w", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point", "[", "0", "]", ")", ">", "threshold_w", "and", "(", "src_h", "+", "dst_h", ")", "-", "np", ".", "abs", "(", "src_point", "[", "1", "]", "-", "dst_point", "[", "1", "]", ")", ">", "threshold_h", ":", "\n", "\n", "                            ", "if", "(", "dst_w", "*", "dst_h", ")", ">", "(", "src_w", "*", "src_h", ")", ":", "\n", "                                ", "wh", "[", "first", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "first", "]", "[", "0", "]", "*", "0.9", ")", ",", "1", ")", "\n", "wh", "[", "first", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "first", "]", "[", "1", "]", "*", "0.9", ")", ",", "1", ")", "\n", "dst_w", ",", "dst_h", "=", "wh", "[", "first", "]", "[", "0", "]", ",", "wh", "[", "first", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "                                ", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", "*", "0.9", ")", ",", "1", ")", "\n", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "*", "0.9", ")", ",", "1", ")", "\n", "src_w", ",", "src_h", "=", "wh", "[", "id", "[", "0", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "0", "]", "]", "[", "1", "]", "\n", "\n", "\n", "", "if", "human_num", ">=", "3", ":", "\n", "                                ", "dst_point_", "=", "centroids", "[", "id", "[", "start", "+", "1", "]", "]", "\n", "dst_w_", ",", "dst_h_", "=", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", ",", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "\n", "if", "(", "dst_w_", "*", "dst_h_", ")", ">", "(", "src_w", "*", "src_h", ")", "and", "(", "dst_w_", "*", "dst_h_", ")", ">", "(", "dst_w", "*", "dst_h", ")", ":", "\n", "                                    ", "if", "(", "src_w", "+", "dst_w_", ")", "-", "np", ".", "abs", "(", "src_point", "[", "0", "]", "-", "dst_point_", "[", "0", "]", ")", ">", "threshold_w", "and", "(", "src_h", "+", "dst_h_", ")", "-", "np", ".", "abs", "(", "src_point", "[", "1", "]", "-", "dst_point_", "[", "1", "]", ")", ">", "threshold_h", ":", "\n", "\n", "                                        ", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "0", "]", "*", "0.9", ")", ",", "1", ")", "\n", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "=", "max", "(", "int", "(", "wh", "[", "id", "[", "start", "+", "1", "]", "]", "[", "1", "]", "*", "0.9", ")", ",", "1", ")", "\n", "\n", "\n", "", "", "", "count", "+=", "1", "\n", "if", "count", ">", "40", ":", "\n", "                                ", "break", "\n", "", "", "", "", "", "for", "(", "center_w", ",", "center_h", ")", ",", "(", "width", ",", "height", ")", "in", "zip", "(", "centroids", ",", "wh", ")", ":", "\n", "                ", "assert", "(", "width", ">", "0", "and", "height", ">", "0", ")", "\n", "\n", "if", "(", "0", "<", "center_w", "<", "w", ")", "and", "(", "0", "<", "center_h", "<", "h", ")", ":", "\n", "                    ", "h_start", "=", "(", "center_h", "-", "height", ")", "\n", "h_end", "=", "(", "center_h", "+", "height", ")", "\n", "\n", "w_start", "=", "center_w", "-", "width", "\n", "w_end", "=", "center_w", "+", "width", "\n", "#", "\n", "if", "h_start", "<", "0", ":", "\n", "                        ", "h_start", "=", "0", "\n", "\n", "", "if", "h_end", ">", "h", ":", "\n", "                        ", "h_end", "=", "h", "\n", "\n", "", "if", "w_start", "<", "0", ":", "\n", "                        ", "w_start", "=", "0", "\n", "\n", "", "if", "w_end", ">", "w", ":", "\n", "                        ", "w_end", "=", "w", "\n", "\n", "", "if", "cycle", ":", "\n", "                        ", "mask", "=", "generate_cycle_mask", "(", "height", ",", "width", ")", "\n", "mask_map", "[", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "=", "mask", "\n", "\n", "", "else", ":", "\n", "                        ", "mask_map", "[", "h_start", ":", "h_end", ",", "w_start", ":", "w_end", "]", "=", "1", "\n", "\n", "", "", "", "mask_map", "=", "mask_map", "*", "255", "\n", "\n", "cv", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "dst_mask_path", ",", "img_id", "+", "'.png'", ")", ",", "mask_map", ",", "[", "cv", ".", "IMWRITE_PNG_BILEVEL", ",", "1", "]", ")", "\n", "# plt.imshow(img_ori)", "\n", "saveImg", "=", "plt", ".", "gca", "(", ")", "\n", "plt", ".", "imshow", "(", "img_ori", ")", "\n", "for", "a", ",", "b", "in", "zip", "(", "centroid_list", ",", "wh_list", ")", ":", "\n", "                ", "x_", ",", "y_", ",", "w_", ",", "h_", "=", "a", "[", "0", "]", ",", "a", "[", "1", "]", ",", "b", "[", "0", "]", ",", "b", "[", "1", "]", "\n", "saveImg", ".", "add_patch", "(", "plt", ".", "Rectangle", "(", "(", "x_", "-", "w_", ",", "y_", "-", "h_", ")", ",", "2", "*", "w_", ",", "2", "*", "h_", ",", "fill", "=", "False", ",", "edgecolor", "=", "'g'", ",", "linewidth", "=", "1", ")", ")", "\n", "\n", "", "saveImg", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "saveImg", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "saveImg", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "saveImg", ".", "spines", "[", "'bottom'", "]", ".", "set_visible", "(", "False", ")", "\n", "saveImg", ".", "spines", "[", "'left'", "]", ".", "set_visible", "(", "False", ")", "\n", "saveImg", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "dst_vis_path", "=", "os", ".", "path", ".", "join", "(", "Root", ",", "'box_vis'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_vis_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dst_vis_path", ")", "\n", "", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "dst_vis_path", ",", "img_id", "+", "'.jpg'", ")", ",", "\n", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ",", "dpi", "=", "300", ")", "\n", "plt", ".", "close", "(", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_SHHB.divide_dataset": [[323, 363], ["os.listdir", "print", "random.sample", "print", "set", "set", "print", "sorted", "sorted", "sorted", "print", "f.close", "f.close", "f.close", "len", "len", "round", "len", "len", "open", "open", "open", "img_name.split", "sorted.append", "set.append", "os.path.join", "f.write", "os.path.join", "f.write", "os.path.join", "f.write", "len"], "function", ["None"], ["", "", "", "def", "divide_dataset", "(", "val_ration", "=", "0.1", ")", ":", "\n", "    ", "import", "random", "\n", "all_file", "=", "os", ".", "listdir", "(", "dst_imgs_path", ")", "\n", "test_set", "=", "[", "]", "\n", "train_val", "=", "[", "]", "\n", "for", "img_name", "in", "all_file", ":", "\n", "        ", "img_id", "=", "img_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "img_id", ">", "'0400'", ":", "\n", "            ", "test_set", ".", "append", "(", "img_id", ")", "\n", "", "else", ":", "\n", "            ", "train_val", ".", "append", "(", "img_id", ")", "\n", "", "", "print", "(", "\"test_set_num:\"", ",", "len", "(", "test_set", ")", ",", "'train_val_num:'", ",", "len", "(", "train_val", ")", ")", "\n", "\n", "val_set", "=", "random", ".", "sample", "(", "train_val", ",", "round", "(", "val_ration", "*", "len", "(", "train_val", ")", ")", ")", "\n", "print", "(", "\"val_set_num:\"", ",", "len", "(", "val_set", ")", ")", "\n", "train_val", "=", "set", "(", "train_val", ")", "\n", "val_set", "=", "set", "(", "val_set", ")", "\n", "train_set", "=", "train_val", "-", "val_set", "\n", "print", "(", "\"train_set_num:\"", ",", "len", "(", "train_set", ")", ")", "\n", "\n", "train_set", "=", "sorted", "(", "train_set", ")", "\n", "val_set", "=", "sorted", "(", "val_set", ")", "\n", "test_set", "=", "sorted", "(", "test_set", ")", "\n", "print", "(", "test_set", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "Root", ",", "'train.txt'", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "train_name", "in", "train_set", ":", "\n", "            ", "f", ".", "write", "(", "train_name", "+", "'\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "Root", ",", "'val.txt'", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "valid_name", "in", "val_set", ":", "\n", "            ", "f", ".", "write", "(", "valid_name", "+", "'\\n'", ")", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "Root", ",", "'test.txt'", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "valid_name", "in", "test_set", ":", "\n", "            ", "f", ".", "write", "(", "valid_name", "+", "'\\n'", ")", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.dataset_prepare.prepare_SHHB.loc_gt_make": [[364, 426], ["os.path.join", "enumerate", "print", "open", "f.readlines", "img_ids.append", "print", "os.path.join", "Box_Info.append", "Box_Info.append", "enumerate", "line.split", "open", "json.load", "str", "int", "int", "Box_Info.append", "Box_Info.append", "Box_Info.append", "Box_Info.append", "Box_Info.append", "open", "enumerate", "f.write", "int", "int", "int", "int", "int", "int", "int", "int", "str", "str", "str", "str", "str", "os.path.join", "min", "numpy.sqrt", "len", "f.write", "f.write"], "function", ["None"], ["", "def", "loc_gt_make", "(", "mode", "=", "'test'", ")", ":", "\n", "    ", "txt_path", "=", "os", ".", "path", ".", "join", "(", "Root", ",", "mode", "+", "'.txt'", ")", "\n", "with", "open", "(", "txt_path", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "img_ids", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "img_ids", ".", "append", "(", "line", ".", "split", "(", "'\\n'", ")", "[", "0", "]", ")", "\n", "\n", "\n", "", "count", "=", "0", "\n", "for", "idx", ",", "img_id", "in", "enumerate", "(", "img_ids", ")", ":", "\n", "        ", "print", "(", "img_id", ")", "\n", "json_path", "=", "os", ".", "path", ".", "join", "(", "dst_json_path", ",", "img_id", "+", "'.json'", ")", "\n", "Box_Info", "=", "[", "]", "\n", "Box_Info", ".", "append", "(", "img_id", ")", "\n", "if", "idx", "!=", "-", "1", ":", "\n", "\n", "            ", "with", "open", "(", "json_path", ")", "as", "f", ":", "\n", "                ", "infor", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "Box_Info", ".", "append", "(", "str", "(", "infor", "[", "'human_num'", "]", ")", ")", "\n", "for", "id", ",", "head", "in", "enumerate", "(", "infor", "[", "'boxes'", "]", ")", ":", "\n", "                ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "int", "(", "head", "[", "0", "]", ")", ",", "int", "(", "head", "[", "1", "]", ")", ",", "int", "(", "head", "[", "2", "]", ")", ",", "int", "(", "head", "[", "3", "]", ")", "\n", "center_x", ",", "center_y", ",", "w", ",", "h", "=", "int", "(", "(", "x1", "+", "x2", ")", "/", "2", ")", ",", "int", "(", "(", "y1", "+", "y2", ")", "/", "2", ")", ",", "int", "(", "(", "x2", "-", "x1", ")", ")", ",", "int", "(", "(", "y2", "-", "y1", ")", ")", ",", "\n", "area", "=", "w", "*", "h", "\n", "if", "area", "==", "0", ":", "\n", "                    ", "count", "+=", "1", "\n", "continue", "\n", "\n", "", "level_area", "=", "0", "\n", "if", "area", ">=", "1", "and", "area", "<", "10", ":", "\n", "                    ", "level_area", "=", "0", "\n", "", "elif", "area", ">", "10", "and", "area", "<", "100", ":", "\n", "                    ", "level_area", "=", "1", "\n", "", "elif", "area", ">", "100", "and", "area", "<", "1000", ":", "\n", "                    ", "level_area", "=", "2", "\n", "", "elif", "area", ">", "1000", "and", "area", "<", "10000", ":", "\n", "                    ", "level_area", "=", "3", "\n", "", "elif", "area", ">", "10000", "and", "area", "<", "100000", ":", "\n", "                    ", "level_area", "=", "4", "\n", "", "elif", "area", ">", "100000", ":", "\n", "                    ", "level_area", "=", "5", "\n", "\n", "", "r_small", "=", "int", "(", "min", "(", "w", ",", "h", ")", "/", "2", ")", "\n", "r_large", "=", "int", "(", "np", ".", "sqrt", "(", "w", "*", "w", "+", "h", "*", "h", ")", "/", "2", ")", "\n", "\n", "Box_Info", ".", "append", "(", "str", "(", "center_x", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "center_y", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "r_small", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "r_large", ")", ")", "\n", "Box_Info", ".", "append", "(", "str", "(", "level_area", ")", ")", "\n", "\n", "# print(Box_Info)", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "Root", ",", "mode", "+", "'_gt_loc_x2.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "for", "ind", ",", "num", "in", "enumerate", "(", "Box_Info", ",", "1", ")", ":", "\n", "                    ", "if", "ind", "<", "len", "(", "Box_Info", ")", ":", "\n", "                        ", "f", ".", "write", "(", "num", "+", "' '", ")", "\n", "", "else", ":", "\n", "                        ", "f", ".", "write", "(", "num", ")", "\n", "", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "", "print", "(", "count", ")", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.models.CC.CrowdCounter.__init__": [[9, 22], ["torch.Module.__init__", "getattr", "getattr.", "torch.MSELoss().cuda", "torch.MSELoss().cuda", "torch.MSELoss().cuda", "getattr", "len", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "CC.CrowdCounter.CCN.cuda", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpus", ",", "model_name", ")", ":", "\n", "        ", "super", "(", "CrowdCounter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# pdb.set_trace()    ", "\n", "ccnet", "=", "getattr", "(", "getattr", "(", "counters", ",", "model_name", ")", ",", "model_name", ")", "\n", "\n", "\n", "self", ".", "CCN", "=", "ccnet", "(", ")", "\n", "\n", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "            ", "self", ".", "CCN", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "CCN", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "CCN", "=", "self", ".", "CCN", ".", "cuda", "(", ")", "\n", "", "self", ".", "loss_mse_fn", "=", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.models.CC.CrowdCounter.loss": [[23, 26], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "loss", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "loss_mse", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.models.CC.CrowdCounter.forward": [[27, 32], ["CC.CrowdCounter.CCN", "CC.CrowdCounter.build_loss", "CC.CrowdCounter.squeeze", "dot_map.squeeze"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.models.CC.CrowdCounter.build_loss"], ["", "def", "forward", "(", "self", ",", "img", ",", "dot_map", ")", ":", "\n", "        ", "density_map", "=", "self", ".", "CCN", "(", "img", ")", "\n", "\n", "self", ".", "loss_mse", "=", "self", ".", "build_loss", "(", "density_map", ".", "squeeze", "(", ")", ",", "dot_map", ".", "squeeze", "(", ")", ")", "\n", "return", "density_map", ",", "dot_map", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.models.CC.CrowdCounter.build_loss": [[33, 36], ["CC.CrowdCounter.loss_mse_fn"], "methods", ["None"], ["", "def", "build_loss", "(", "self", ",", "density_map", ",", "gt_data", ")", ":", "\n", "        ", "loss_mse", "=", "self", ".", "loss_mse_fn", "(", "density_map", ",", "gt_data", ")", "\n", "return", "loss_mse", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.models.CC.CrowdCounter.test_forward": [[37, 40], ["CC.CrowdCounter.CCN"], "methods", ["None"], ["", "def", "test_forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "density_map", "=", "self", ".", "CCN", "(", "img", ")", "\n", "return", "density_map", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.Res50_SCAR.__init__": [[13, 33], ["torch.Module.__init__", "Res50_SCAR.make_layers", "Res50_SCAR.SCAModule", "initialize_weights", "torchvision.models.resnet50", "torch.Sequential", "torch.Sequential", "torch.Sequential", "Res50_SCAR.make_res_layer", "Res50_SCAR.Res50_SCAR.own_reslayer_3.load_state_dict", "Res50_SCAR.Res50_SCAR.modules", "torchvision.models.resnet50.layer3.state_dict"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__", "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.make_layers", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.initialize_weights", "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.make_res_layer"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "Res50_SCAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seen", "=", "0", "\n", "self", ".", "backend_feat", "=", "[", "512", ",", "512", ",", "512", ",", "256", ",", "128", ",", "64", "]", "\n", "self", ".", "frontend", "=", "[", "]", "\n", "\n", "self", ".", "backend", "=", "make_layers", "(", "self", ".", "backend_feat", ",", "in_channels", "=", "1024", ",", "dilation", "=", "True", ")", "\n", "self", ".", "output_layer", "=", "SCAModule", "(", "64", ",", "1", ")", "\n", "\n", "# self.output_layer = nn.Sequential(nn.Conv2d(64, 1, kernel_size=1),nn.ReLU())", "\n", "\n", "initialize_weights", "(", "self", ".", "modules", "(", ")", ")", "\n", "\n", "res", "=", "models", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "self", ".", "frontend", "=", "nn", ".", "Sequential", "(", "\n", "res", ".", "conv1", ",", "res", ".", "bn1", ",", "res", ".", "relu", ",", "res", ".", "maxpool", ",", "res", ".", "layer1", ",", "res", ".", "layer2", "\n", ")", "\n", "self", ".", "own_reslayer_3", "=", "make_res_layer", "(", "Bottleneck", ",", "256", ",", "6", ",", "stride", "=", "1", ")", "\n", "self", ".", "own_reslayer_3", ".", "load_state_dict", "(", "res", ".", "layer3", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.Res50_SCAR.forward": [[37, 49], ["Res50_SCAR.Res50_SCAR.frontend", "Res50_SCAR.Res50_SCAR.own_reslayer_3", "Res50_SCAR.Res50_SCAR.backend", "Res50_SCAR.Res50_SCAR.output_layer", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "frontend", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "own_reslayer_3", "(", "x", ")", "\n", "\n", "# pdb.set_trace()", "\n", "x", "=", "self", ".", "backend", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "8", ",", "mode", "=", "'nearest'", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.Bottleneck.__init__": [[93, 105], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.Bottleneck.forward": [[106, 127], ["Res50_SCAR.Bottleneck.conv1", "Res50_SCAR.Bottleneck.bn1", "Res50_SCAR.Bottleneck.relu", "Res50_SCAR.Bottleneck.conv2", "Res50_SCAR.Bottleneck.bn2", "Res50_SCAR.Bottleneck.relu", "Res50_SCAR.Bottleneck.conv3", "Res50_SCAR.Bottleneck.bn3", "Res50_SCAR.Bottleneck.relu", "Res50_SCAR.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.Conv2d.__init__": [[129, 142], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "NL", "=", "'relu'", ",", "same_padding", "=", "False", ",", "bn", "=", "True", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "//", "2", ")", "if", "same_padding", "else", "0", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "if", "bn", "else", "None", "\n", "if", "NL", "==", "'relu'", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "NL", "==", "'prelu'", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.Conv2d.forward": [[143, 150], ["Res50_SCAR.Conv2d.conv", "Res50_SCAR.Conv2d.bn", "Res50_SCAR.Conv2d.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.SCAModule.__init__": [[152, 164], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "Res50_SCAR.Conv2d", "Res50_SCAR.Conv2d", "Res50_SCAR.SAM", "Res50_SCAR.Conv2d", "Res50_SCAR.Conv2d", "Res50_SCAR.CAM", "Res50_SCAR.Conv2d"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inn", ",", "out", ")", ":", "\n", "        ", "super", "(", "SCAModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "base", "=", "inn", "//", "4", "\n", "self", ".", "conv_sa", "=", "nn", ".", "Sequential", "(", "Conv2d", "(", "inn", ",", "base", ",", "3", ",", "same_padding", "=", "True", ",", "bias", "=", "False", ")", ",", "\n", "SAM", "(", "base", ")", ",", "\n", "Conv2d", "(", "base", ",", "base", ",", "3", ",", "same_padding", "=", "True", ",", "bias", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_ca", "=", "nn", ".", "Sequential", "(", "Conv2d", "(", "inn", ",", "base", ",", "3", ",", "same_padding", "=", "True", ",", "bias", "=", "False", ")", ",", "\n", "CAM", "(", "base", ")", ",", "\n", "Conv2d", "(", "base", ",", "base", ",", "3", ",", "same_padding", "=", "True", ",", "bias", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_cat", "=", "Conv2d", "(", "base", "*", "2", ",", "out", ",", "1", ",", "same_padding", "=", "True", ",", "bn", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.SCAModule.forward": [[165, 171], ["Res50_SCAR.SCAModule.conv_sa", "Res50_SCAR.SCAModule.conv_ca", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Res50_SCAR.SCAModule.conv_cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "sa_feat", "=", "self", ".", "conv_sa", "(", "x", ")", "\n", "ca_feat", "=", "self", ".", "conv_ca", "(", "x", ")", "\n", "cat_feat", "=", "torch", ".", "cat", "(", "(", "sa_feat", ",", "ca_feat", ")", ",", "1", ")", "\n", "cat_feat", "=", "self", ".", "conv_cat", "(", "cat_feat", ")", "\n", "return", "cat_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.SAM.__init__": [[174, 180], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "Res50_SCAR.Conv2d", "Res50_SCAR.Conv2d", "Res50_SCAR.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ")", ":", "\n", "        ", "super", "(", "SAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "para_lambda", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "query_conv", "=", "Conv2d", "(", "channel", ",", "channel", "//", "8", ",", "1", ",", "NL", "=", "'none'", ")", "\n", "self", ".", "key_conv", "=", "Conv2d", "(", "channel", ",", "channel", "//", "8", ",", "1", ",", "NL", "=", "'none'", ")", "\n", "self", ".", "value_conv", "=", "Conv2d", "(", "channel", ",", "channel", ",", "1", ",", "NL", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.SAM.forward": [[181, 194], ["x.size", "Res50_SCAR.SAM.query_conv().view().permute", "Res50_SCAR.SAM.key_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "Res50_SCAR.SAM.value_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "torch.softmax.permute", "Res50_SCAR.SAM.query_conv().view", "Res50_SCAR.SAM.key_conv", "Res50_SCAR.SAM.value_conv", "Res50_SCAR.SAM.query_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "self", ".", "query_conv", "(", "x", ")", ".", "view", "(", "N", ",", "-", "1", ",", "W", "*", "H", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "proj_key", "=", "self", ".", "key_conv", "(", "x", ")", ".", "view", "(", "N", ",", "-", "1", ",", "W", "*", "H", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "attention", "=", "F", ".", "softmax", "(", "energy", ",", "dim", "=", "-", "1", ")", "\n", "proj_value", "=", "self", ".", "value_conv", "(", "x", ")", ".", "view", "(", "N", ",", "-", "1", ",", "W", "*", "H", ")", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "proj_value", ",", "attention", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n", "out", "=", "self", ".", "para_lambda", "*", "out", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.CAM.__init__": [[196, 199], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "CAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "para_mu", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.CAM.forward": [[200, 214], ["x.size", "x.view", "x.view().permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "x.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "[].expand_as", "x.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "x", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "proj_key", "=", "x", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "energy_new", "=", "torch", ".", "max", "(", "energy", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "expand_as", "(", "energy", ")", "-", "energy", "\n", "attention", "=", "F", ".", "softmax", "(", "energy", ",", "dim", "=", "-", "1", ")", "\n", "proj_value", "=", "x", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "attention", ",", "proj_value", ")", "\n", "out", "=", "out", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n", "out", "=", "self", ".", "para_mu", "*", "out", "+", "x", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.make_layers": [[51, 68], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "def", "make_layers", "(", "cfg", ",", "in_channels", "=", "3", ",", "batch_norm", "=", "False", ",", "dilation", "=", "False", ")", ":", "\n", "    ", "if", "dilation", ":", "\n", "        ", "d_rate", "=", "2", "\n", "", "else", ":", "\n", "        ", "d_rate", "=", "1", "\n", "", "layers", "=", "[", "]", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "d_rate", ",", "dilation", "=", "d_rate", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.counters.Res50_SCAR.make_res_layer": [[70, 88], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "function", ["None"], ["", "def", "make_res_layer", "(", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "\n", "    ", "downsample", "=", "None", "\n", "inplanes", "=", "512", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.model.PBM.BinarizedF.forward": [[9, 16], ["ctx.save_for_backward", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["  ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "threshold", ")", ":", "\n", "    ", "ctx", ".", "save_for_backward", "(", "input", ",", "threshold", ")", "\n", "a", "=", "torch", ".", "ones_like", "(", "input", ")", ".", "cuda", "(", ")", "\n", "b", "=", "torch", ".", "zeros_like", "(", "input", ")", ".", "cuda", "(", ")", "\n", "output", "=", "torch", ".", "where", "(", "input", ">=", "threshold", ",", "a", ",", "b", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.model.PBM.BinarizedF.backward": [[17, 28], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# print('grad_output',grad_output)", "\n", "    ", "input", ",", "threshold", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "grad_weight", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "      ", "grad_input", "=", "0.2", "*", "grad_output", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "      ", "grad_weight", "=", "-", "grad_output", "\n", "", "return", "grad_input", ",", "grad_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.model.PBM.compressedSigmoid.__init__": [[31, 36], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "para", "=", "2.0", ",", "bias", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "compressedSigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "para", "=", "para", "\n", "self", ".", "bias", "=", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.model.PBM.compressedSigmoid.forward": [[37, 40], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "1.", "/", "(", "self", ".", "para", "+", "torch", ".", "exp", "(", "-", "x", ")", ")", "+", "self", ".", "bias", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.model.PBM.BinarizedModule.__init__": [[42, 63], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "PBM.compressedSigmoid", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__"], ["  ", "def", "__init__", "(", "self", ",", "input_channels", "=", "720", ")", ":", "\n", "    ", "super", "(", "BinarizedModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "Threshold_Module", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "# nn.AvgPool2d(15, stride=1, padding=7),", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "# nn.AvgPool2d(15, stride=1, padding=7),", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "15", ",", "stride", "=", "1", ",", "padding", "=", "7", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "15", ",", "stride", "=", "1", ",", "padding", "=", "7", ")", ",", "\n", ")", "\n", "\n", "self", ".", "sig", "=", "compressedSigmoid", "(", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "0.5", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "0", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.model.PBM.BinarizedModule.forward": [[64, 80], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "PBM.BinarizedModule.Threshold_Module", "PBM.BinarizedModule.sig", "torch.interpolate", "torch.interpolate", "torch.interpolate", "BinarizedF.apply", "pred_map.detach", "feature.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature", ",", "pred_map", ")", ":", "\n", "\n", "\n", "    ", "p", "=", "F", ".", "interpolate", "(", "pred_map", ".", "detach", "(", ")", ",", "scale_factor", "=", "0.125", ")", "\n", "f", "=", "F", ".", "interpolate", "(", "feature", ".", "detach", "(", ")", ",", "scale_factor", "=", "0.5", ")", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "f", "=", "f", "*", "p", "\n", "threshold", "=", "self", ".", "Threshold_Module", "(", "f", ")", "\n", "\n", "threshold", "=", "self", ".", "sig", "(", "threshold", "*", "10.", ")", "# fixed factor", "\n", "\n", "threshold", "=", "F", ".", "interpolate", "(", "threshold", ",", "scale_factor", "=", "8", ")", "\n", "\n", "Binar_map", "=", "BinarizedF", ".", "apply", "(", "pred_map", ",", "threshold", ")", "\n", "return", "threshold", ",", "Binar_map", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.model.PBM.CNN.__init__": [[84, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cnn", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.model.PBM.CNN.forward": [[88, 91], ["PBM.CNN.cnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "output", "=", "self", ".", "cnn", "(", "input", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.model.locator.Crowd_locator.__init__": [[12, 30], ["torch.Module.__init__", "torch.BCELoss().cuda", "torch.BCELoss().cuda", "torch.BCELoss().cuda", "model.HR_Net.seg_hrnet.get_seg_model", "model.PBM.BinarizedModule", "model.VGG.VGG16_FPN.VGG16_FPN", "model.PBM.BinarizedModule", "len", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "locator.Crowd_locator.Extractor.cuda", "locator.Crowd_locator.Binar.cuda", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.get_seg_model"], ["    ", "def", "__init__", "(", "self", ",", "net_name", ",", "gpu_id", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "Crowd_locator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "net_name", "==", "'HR_Net'", ":", "\n", "            ", "self", ".", "Extractor", "=", "get_seg_model", "(", ")", "\n", "self", ".", "Binar", "=", "BinarizedModule", "(", "input_channels", "=", "720", ")", "\n", "", "if", "net_name", "==", "'VGG16_FPN'", ":", "\n", "            ", "self", ".", "Extractor", "=", "VGG16_FPN", "(", ")", "\n", "self", ".", "Binar", "=", "BinarizedModule", "(", "input_channels", "=", "768", ")", "\n", "\n", "", "if", "len", "(", "gpu_id", ")", ">", "1", ":", "\n", "            ", "self", ".", "Extractor", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "Extractor", ")", ".", "cuda", "(", ")", "\n", "self", ".", "Binar", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "Binar", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Extractor", "=", "self", ".", "Extractor", ".", "cuda", "(", ")", "\n", "self", ".", "Binar", "=", "self", ".", "Binar", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "loss_BCE", "=", "nn", ".", "BCELoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.model.locator.Crowd_locator.loss": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "loss", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head_map_loss", ",", "self", ".", "binar_map_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.model.locator.Crowd_locator.forward": [[35, 50], ["locator.Crowd_locator.Extractor", "locator.Crowd_locator.Binar", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "pre_map.size", "mask_gt.size", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "mask_gt", ",", "mode", "=", "'train'", ")", ":", "\n", "# print(size_map_gt.max())", "\n", "        ", "feature", ",", "pre_map", "=", "self", ".", "Extractor", "(", "img", ")", "\n", "\n", "threshold_matrix", ",", "binar_map", "=", "self", ".", "Binar", "(", "feature", ",", "pre_map", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "# weight = torch.ones_like(binar_map).cuda()", "\n", "# weight[mask_gt==1] = 2", "\n", "            ", "assert", "pre_map", ".", "size", "(", "2", ")", "==", "mask_gt", ".", "size", "(", "2", ")", "\n", "self", ".", "binar_map_loss", "=", "(", "torch", ".", "abs", "(", "binar_map", "-", "mask_gt", ")", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "head_map_loss", "=", "F", ".", "mse_loss", "(", "pre_map", ",", "mask_gt", ")", "\n", "\n", "", "return", "threshold_matrix", ",", "pre_map", ",", "binar_map", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.model.locator.Crowd_locator.test_forward": [[51, 55], ["locator.Crowd_locator.Extractor"], "methods", ["None"], ["", "def", "test_forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "feature", ",", "pre_map", "=", "self", ".", "Extractor", "(", "img", ")", "\n", "\n", "return", "feature", ",", "pre_map", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.VGG.VGG16_FPN.VGG16_FPN.__init__": [[9, 40], ["torch.Module.__init__", "list", "VGG16_FPN.FPN", "torch.Sequential", "torch.Sequential", "initialize_weights", "torchvision.models.vgg16_bn", "torchvision.models.vgg16_bn.features.children", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "VGG16_FPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "mode", "==", "'Vgg_bn'", ":", "\n", "            ", "vgg", "=", "models", ".", "vgg16_bn", "(", "pretrained", "=", "pretrained", ")", "\n", "", "features", "=", "list", "(", "vgg", ".", "features", ".", "children", "(", ")", ")", "\n", "if", "mode", "==", "'Vgg_bn'", ":", "\n", "            ", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "0", ":", "23", "]", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "23", ":", "33", "]", ")", "\n", "self", ".", "layer3", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "33", ":", "43", "]", ")", "\n", "\n", "\n", "", "in_channels", "=", "[", "256", ",", "512", ",", "512", "]", "\n", "self", ".", "neck", "=", "FPN", "(", "in_channels", ",", "256", ",", "len", "(", "in_channels", ")", ")", "\n", "\n", "\n", "self", ".", "de_pred", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "768", ",", "\n", "out_channels", "=", "768", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "768", ",", "64", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "1", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "initialize_weights", "(", "self", ".", "de_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.VGG.VGG16_FPN.VGG16_FPN.forward": [[42, 55], ["VGG16_FPN.VGG16_FPN.layer1", "VGG16_FPN.VGG16_FPN.append", "VGG16_FPN.VGG16_FPN.layer2", "VGG16_FPN.VGG16_FPN.append", "VGG16_FPN.VGG16_FPN.layer3", "VGG16_FPN.VGG16_FPN.append", "VGG16_FPN.VGG16_FPN.neck", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "VGG16_FPN.VGG16_FPN.de_pred", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "f", "=", "[", "]", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "f", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "f", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "f", ".", "append", "(", "x", ")", "\n", "\n", "f", "=", "self", ".", "neck", "(", "f", ")", "\n", "feature", "=", "torch", ".", "cat", "(", "[", "f", "[", "0", "]", ",", "F", ".", "interpolate", "(", "f", "[", "1", "]", ",", "scale_factor", "=", "2", ")", ",", "F", ".", "interpolate", "(", "f", "[", "2", "]", ",", "scale_factor", "=", "4", ")", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "de_pred", "(", "feature", ")", "\n", "return", "feature", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.VGG.VGG16_FPN.FPN.__init__": [[97, 134], ["torch.Module.__init__", "isinstance", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "VGG16_FPN.FPN.init_weights", "VGG16_FPN.Conv2d", "VGG16_FPN.Conv2d", "VGG16_FPN.FPN.lateral_convs.append", "VGG16_FPN.FPN.fpn_convs.append", "len"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet.init_weights"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_outs", ",", "start_level", "=", "0", ",", "end_level", "=", "-", "1", ",", "\n", "extra_convs_on_inputs", "=", "True", ",", "bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "FPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "in_channels", ",", "list", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_ins", "=", "len", "(", "in_channels", ")", "\n", "self", ".", "num_outs", "=", "num_outs", "\n", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "if", "end_level", "==", "-", "1", ":", "\n", "            ", "self", ".", "backbone_end_level", "=", "self", ".", "num_ins", "\n", "assert", "num_outs", ">=", "self", ".", "num_ins", "-", "start_level", "\n", "", "else", ":", "\n", "# if end_level < inputs, no extra level is allowed", "\n", "            ", "self", ".", "backbone_end_level", "=", "end_level", "\n", "assert", "end_level", "<=", "len", "(", "in_channels", ")", "\n", "assert", "num_outs", "==", "end_level", "-", "start_level", "\n", "", "self", ".", "start_level", "=", "start_level", "\n", "self", ".", "end_level", "=", "end_level", "\n", "\n", "self", ".", "extra_convs_on_inputs", "=", "extra_convs_on_inputs", "\n", "\n", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "fpn_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "start_level", ",", "self", ".", "backbone_end_level", ")", ":", "\n", "            ", "l_conv", "=", "Conv2d", "(", "in_channels", "[", "i", "]", ",", "out_channels", ",", "1", ",", "bn", "=", "bn", ",", "bias", "=", "not", "bn", ",", "same_padding", "=", "True", ")", "\n", "\n", "fpn_conv", "=", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "bn", "=", "bn", ",", "bias", "=", "not", "bn", ",", "same_padding", "=", "True", ")", "\n", "\n", "self", ".", "lateral_convs", ".", "append", "(", "l_conv", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "fpn_conv", ")", "\n", "\n", "# add extra conv layers (e.g., RetinaNet)", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "# default init_weights for conv(msra) and norm in ConvModule", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.VGG.VGG16_FPN.FPN.init_weights": [[135, 139], ["VGG16_FPN.FPN.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.VGG.VGG16_FPN.FPN.forward": [[141, 160], ["len", "range", "tuple", "len", "len", "lateral_conv", "torch.interpolate", "torch.interpolate", "enumerate", "range"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "inputs", ")", "==", "len", "(", "self", ".", "in_channels", ")", "\n", "\n", "# build laterals", "\n", "laterals", "=", "[", "lateral_conv", "(", "inputs", "[", "i", "+", "self", ".", "start_level", "]", ")", "for", "i", ",", "lateral_conv", "in", "enumerate", "(", "self", ".", "lateral_convs", ")", "]", "\n", "\n", "# build top-down path", "\n", "used_backbone_levels", "=", "len", "(", "laterals", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "prev_shape", "=", "laterals", "[", "i", "-", "1", "]", ".", "shape", "[", "2", ":", "]", "\n", "laterals", "[", "i", "-", "1", "]", "+=", "F", ".", "interpolate", "(", "laterals", "[", "i", "]", ",", "size", "=", "prev_shape", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "# build outputs", "\n", "# part 1: from original levels", "\n", "", "outs", "=", "[", "self", ".", "fpn_convs", "[", "i", "]", "(", "laterals", "[", "i", "]", ")", "for", "i", "in", "range", "(", "used_backbone_levels", ")", "]", "\n", "\n", "\n", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.VGG.VGG16_FPN.Conv2d.__init__": [[164, 177], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "int", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "NL", "=", "'relu'", ",", "same_padding", "=", "False", ",", "bn", "=", "True", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "//", "2", ")", "if", "same_padding", "else", "0", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "if", "bn", "else", "None", "\n", "if", "NL", "==", "'relu'", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "NL", "==", "'prelu'", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.VGG.VGG16_FPN.Conv2d.forward": [[178, 185], ["VGG16_FPN.Conv2d.conv", "VGG16_FPN.Conv2d.bn", "VGG16_FPN.Conv2d.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.default.update_config": [[23, 27], ["cfg.defrost", "cfg.merge_from_file", "cfg.freeze"], "function", ["None"], ["def", "update_config", "(", "cfg", ",", "args", ")", ":", "\n", "    ", "cfg", ".", "defrost", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "args", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.BasicBlock.__init__": [[36, 45], ["torch.Module.__init__", "seg_hrnet.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "seg_hrnet.conv3x3", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.conv3x3", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.BasicBlock.forward": [[46, 62], ["seg_hrnet.BasicBlock.conv1", "seg_hrnet.BasicBlock.bn1", "seg_hrnet.BasicBlock.relu", "seg_hrnet.BasicBlock.conv2", "seg_hrnet.BasicBlock.bn2", "seg_hrnet.BasicBlock.relu", "seg_hrnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.Bottleneck.__init__": [[67, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.Bottleneck.forward": [[82, 103], ["seg_hrnet.Bottleneck.conv1", "seg_hrnet.Bottleneck.bn1", "seg_hrnet.Bottleneck.relu", "seg_hrnet.Bottleneck.conv2", "seg_hrnet.Bottleneck.bn2", "seg_hrnet.Bottleneck.relu", "seg_hrnet.Bottleneck.conv3", "seg_hrnet.Bottleneck.bn3", "seg_hrnet.Bottleneck.relu", "seg_hrnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionModule.__init__": [[106, 122], ["torch.Module.__init__", "seg_hrnet.HighResolutionModule._check_branches", "seg_hrnet.HighResolutionModule._make_branches", "seg_hrnet.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionModule._check_branches": [[123, 142], ["len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionModule._make_one_branch": [[143, 166], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionModule._make_branches": [[167, 175], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "seg_hrnet.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionModule._make_fuse_layers": [[176, 221], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionModule.get_num_inchannels": [[222, 224], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionModule.forward": [[225, 250], ["range", "range", "len", "range", "x_fuse.append", "seg_hrnet.HighResolutionModule.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "elif", "j", ">", "i", ":", "\n", "                    ", "width_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "\n", "height_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "2", "]", "\n", "y", "=", "y", "+", "F", ".", "interpolate", "(", "\n", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", ",", "\n", "size", "=", "[", "height_output", ",", "width_output", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet.__init__": [[260, 326], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "seg_hrnet.HighResolutionNet._make_layer", "seg_hrnet.HighResolutionNet._make_transition_layer", "seg_hrnet.HighResolutionNet._make_stage", "seg_hrnet.HighResolutionNet._make_transition_layer", "seg_hrnet.HighResolutionNet._make_stage", "seg_hrnet.HighResolutionNet._make_transition_layer", "seg_hrnet.HighResolutionNet._make_stage", "numpy.int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "numpy.sum", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "extra", "=", "config", ".", "MODEL", ".", "EXTRA", "\n", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# stem net", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "stage1_cfg", "=", "extra", "[", "'STAGE1'", "]", "\n", "num_channels", "=", "self", ".", "stage1_cfg", "[", "'NUM_CHANNELS'", "]", "[", "0", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage1_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_blocks", "=", "self", ".", "stage1_cfg", "[", "'NUM_BLOCKS'", "]", "[", "0", "]", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_channels", ",", "num_blocks", ")", "\n", "stage1_out_channel", "=", "block", ".", "expansion", "*", "num_channels", "\n", "\n", "self", ".", "stage2_cfg", "=", "extra", "[", "'STAGE2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "\n", "[", "stage1_out_channel", "]", ",", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "extra", "[", "'STAGE3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "extra", "[", "'STAGE4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ")", "\n", "\n", "last_inp_channels", "=", "np", ".", "int", "(", "np", ".", "sum", "(", "pre_stage_channels", ")", ")", "\n", "\n", "self", ".", "last_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "last_inp_channels", ",", "\n", "out_channels", "=", "last_inp_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", ",", "\n", "BatchNorm2d", "(", "last_inp_channels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "720", ",", "64", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "1", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet._make_transition_layer": [[328, 363], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "outchannels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet._make_layer": [[364, 380], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet._make_stage": [[381, 409], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "seg_hrnet.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet.forward": [[410, 455], ["seg_hrnet.HighResolutionNet.conv1", "seg_hrnet.HighResolutionNet.bn1", "seg_hrnet.HighResolutionNet.relu", "seg_hrnet.HighResolutionNet.conv2", "seg_hrnet.HighResolutionNet.bn2", "seg_hrnet.HighResolutionNet.relu", "seg_hrnet.HighResolutionNet.layer1", "range", "seg_hrnet.HighResolutionNet.stage2", "range", "seg_hrnet.HighResolutionNet.stage3", "range", "seg_hrnet.HighResolutionNet.stage4", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seg_hrnet.HighResolutionNet.last_layer", "x[].size", "x[].size", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "x", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "# Upsampling", "\n", "x0_h", ",", "x0_w", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "upsample", "(", "x", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x2", "=", "F", ".", "upsample", "(", "x", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x3", "=", "F", ".", "upsample", "(", "x", "[", "3", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "f", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "last_layer", "(", "f", ")", "\n", "\n", "\n", "return", "f", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet.init_weights": [[456, 474], ["logger.info", "seg_hrnet.HighResolutionNet.modules", "os.path.isfile", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logger.info", "seg_hrnet.HighResolutionNet.state_dict", "seg_hrnet.HighResolutionNet.update", "seg_hrnet.HighResolutionNet.load_state_dict", "print", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "seg_hrnet.HighResolutionNet.keys"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "''", ",", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'=> init weights from normal distribution'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ")", "\n", "logger", ".", "info", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "print", "(", "\"load pre_trained parameters for HR_Net\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.conv3x3": [[27, 31], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.get_seg_model": [[475, 485], ["update_config", "seg_hrnet.HighResolutionNet", "seg_hrnet.HighResolutionNet.init_weights"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.default.update_config", "home.repos.pwc.inspect_result.taohan10200_IIM.HR_Net.seg_hrnet.HighResolutionNet.init_weights"], ["", "", "", "def", "get_seg_model", "(", "**", "kwargs", ")", ":", "\n", "    ", "from", "model", ".", "HR_Net", ".", "default", "import", "_C", "as", "hr_config", "\n", "from", "model", ".", "HR_Net", ".", "default", "import", "update_config", "\n", "\n", "update_config", "(", "hr_config", ",", "'./model/HR_Net/seg_hrnet_w48.yaml'", ")", "\n", "model", "=", "HighResolutionNet", "(", "hr_config", ",", "**", "kwargs", ")", "\n", "from", "config", "import", "cfg", "\n", "\n", "model", ".", "init_weights", "(", "cfg", ".", "PRE_HR_WEIGHTS", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.ProcessSub.__init__": [[14, 17], ["misc.inflation.inflation"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "T", "=", "0.1", ",", "K", "=", "51", ")", ":", "\n", "        ", "self", ".", "T", "=", "T", "\n", "self", ".", "inf", "=", "inflation", ".", "inflation", "(", "K", "=", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.ProcessSub.getHS": [[18, 24], ["cv2.cartToPolar", "cv2.normalize"], "methods", ["None"], ["", "def", "getHS", "(", "self", ",", "flow", ")", ":", "\n", "# h direction  s or v magnitude", "\n", "        ", "mag", ",", "ang", "=", "cv2", ".", "cartToPolar", "(", "flow", "[", "...", ",", "0", "]", ",", "flow", "[", "...", ",", "1", "]", ")", "\n", "h", "=", "ang", "*", "180", "/", "np", ".", "pi", "/", "2", "#angle", "\n", "s", "=", "cv2", ".", "normalize", "(", "mag", ",", "None", ",", "0", ",", "255", ",", "cv2", ".", "NORM_MINMAX", ")", "#magnitude", "\n", "return", "h", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.ProcessSub.__call__": [[25, 35], ["transforms.ProcessSub.getHS", "numpy.ones", "numpy.ones", "h.astype", "s.astype", "abs"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.ProcessSub.getHS"], ["", "def", "__call__", "(", "self", ",", "flow", ")", ":", "\n", "        ", "h", ",", "s", "=", "self", ".", "getHS", "(", "flow", "[", ":", ",", ":", ",", "0", ":", "2", "]", ")", "\n", "flow", "[", ":", ",", ":", ",", "0", "]", "=", "h", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "\n", "flow", "[", ":", ",", ":", ",", "1", "]", "=", "s", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "\n", "# Threshold", "\n", "temp", "=", "np", ".", "ones", "(", "flow", "[", ":", ",", ":", ",", "2", "]", ".", "shape", ")", "\n", "temp", "[", "abs", "(", "flow", "[", ":", ",", ":", ",", "2", "]", ")", "<", "self", ".", "T", "]", "=", "0", "\n", "flow", "[", ":", ",", ":", ",", "2", "]", "=", "flow", "[", ":", ",", ":", ",", "2", "]", "*", "temp", "\n", "# inflation", "\n", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.Compose.__init__": [[39, 41], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.Compose.__call__": [[42, 50], ["t", "t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "bbx", "=", "None", ")", ":", "\n", "        ", "if", "bbx", "is", "None", ":", "\n", "            ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "                ", "img", ",", "mask", "=", "t", "(", "img", ",", "mask", ")", "\n", "", "return", "img", ",", "mask", "\n", "", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", ",", "mask", ",", "bbx", "=", "t", "(", "img", ",", "mask", ",", "bbx", ")", "\n", "", "return", "img", ",", "mask", ",", "bbx", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.RandomHorizontallyFlip.__call__": [[52, 67], ["random.random", "img.transpose", "mask.transpose", "img.transpose", "mask.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "bbx", "=", "None", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "if", "bbx", "is", "None", ":", "\n", "# for i in range(3):", "\n", "#     flow[:,:,i] = np.fliplr(flow[:,:,i])", "\n", "                ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "#, flow", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "xmin", "=", "w", "-", "bbx", "[", ":", ",", "3", "]", "\n", "xmax", "=", "w", "-", "bbx", "[", ":", ",", "1", "]", "\n", "bbx", "[", ":", ",", "1", "]", "=", "xmin", "\n", "bbx", "[", ":", ",", "3", "]", "=", "xmax", "\n", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "bbx", "\n", "", "if", "bbx", "is", "None", ":", "\n", "            ", "return", "img", ",", "mask", "#flow", "\n", "", "return", "img", ",", "mask", ",", "bbx", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.RandomCrop.__init__": [[70, 76], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.RandomCrop.__call__": [[77, 98], ["random.randint", "random.randint", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "dst_size", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "dst_size", "is", "None", ":", "\n", "            ", "th", ",", "tw", "=", "self", ".", "size", "\n", "", "else", ":", "\n", "            ", "th", ",", "tw", "=", "dst_size", "\n", "", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "\n", "", "assert", "w", ">=", "tw", "\n", "assert", "h", ">=", "th", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "# flow = flow[y1:y1+th,x1:x1+tw,:]", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "#.flow", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.ScaleByRateWithMin.__init__": [[103, 107], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rateRange", ",", "min_w", ",", "min_h", ")", ":", "\n", "        ", "self", ".", "rateRange", "=", "rateRange", "\n", "self", ".", "min_w", "=", "min_w", "\n", "self", ".", "min_h", "=", "min_h", "\n", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "# dot, flow):", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.ScaleByRateWithMin.__call__": [[107, 127], ["random.uniform", "img.resize.resize.resize", "mask.resize.resize.resize", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "# dot, flow):", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "# print('ori',w,h)", "\n", "rate", "=", "random", ".", "uniform", "(", "self", ".", "rateRange", "[", "0", "]", ",", "self", ".", "rateRange", "[", "1", "]", ")", "\n", "new_w", "=", "int", "(", "w", "*", "rate", ")", "//", "32", "*", "32", "\n", "new_h", "=", "int", "(", "h", "*", "rate", ")", "//", "32", "*", "32", "\n", "if", "new_h", "<", "self", ".", "min_h", "or", "new_w", "<", "self", ".", "min_w", ":", "\n", "            ", "if", "new_w", "<", "self", ".", "min_w", ":", "\n", "                ", "new_w", "=", "self", ".", "min_w", "\n", "rate", "=", "new_w", "/", "w", "\n", "new_h", "=", "int", "(", "h", "*", "rate", ")", "//", "32", "*", "32", "\n", "", "if", "new_h", "<", "self", ".", "min_h", ":", "\n", "                ", "new_h", "=", "self", ".", "min_h", "\n", "rate", "=", "new_h", "/", "h", "\n", "new_w", "=", "int", "(", "w", "*", "rate", ")", "//", "32", "*", "32", "\n", "\n", "", "", "img", "=", "img", ".", "resize", "(", "(", "new_w", ",", "new_h", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "new_w", ",", "new_h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.RGB2Gray.__init__": [[131, 133], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "self", ".", "ratio", "=", "ratio", "# [0-1]", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.RGB2Gray.__call__": [[134, 139], ["random.random", "torchvision.transforms.functional.to_grayscale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.1", ":", "\n", "            ", "return", "TrF", ".", "to_grayscale", "(", "img", ",", "num_output_channels", "=", "3", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.GammaCorrection.__init__": [[141, 143], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gamma_range", "=", "[", "0.4", ",", "2", "]", ")", ":", "\n", "        ", "self", ".", "gamma_range", "=", "gamma_range", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.GammaCorrection.__call__": [[144, 150], ["random.random", "random.uniform", "torchvision.transforms.functional.adjust_gamma"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "gamma", "=", "random", ".", "uniform", "(", "self", ".", "gamma_range", "[", "0", "]", ",", "self", ".", "gamma_range", "[", "1", "]", ")", "\n", "return", "TrF", ".", "adjust_gamma", "(", "img", ",", "gamma", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.DeNormalize.__init__": [[154, 157], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.DeNormalize.__call__": [[158, 162], ["zip", "t.mul_().add_", "t.mul_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "mul_", "(", "s", ")", ".", "add_", "(", "m", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.transforms.MaskToTensor.__call__": [[165, 167], ["torch.from_numpy().long", "torch.from_numpy", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "int32", ")", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.inflation.inflation.__init__": [[12, 26], ["torch.Module.__init__", "numpy.zeros", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "inflation.inflation.parameters", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.zeros.reshape().astype", "abs", "abs", "numpy.zeros.reshape"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__"], ["\t", "def", "__init__", "(", "self", ",", "K", "=", "15", ",", "stride", "=", "1", ",", "padding", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "inflation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "weight", "=", "numpy", ".", "zeros", "(", "(", "K", ",", "K", ")", ")", "\n", "t", "=", "(", "K", "-", "1", ")", "/", "2", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "\t\t\t", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "\t\t\t\t", "if", "abs", "(", "i", "-", "t", ")", "+", "abs", "(", "j", "-", "t", ")", "<=", "t", ":", "\n", "\t\t\t\t\t", "weight", "[", "i", ",", "j", "]", "=", "1", "\n", "", "", "", "if", "padding", "is", "None", ":", "\n", "\t\t\t", "padding", "=", "K", "//", "2", "\n", "", "self", ".", "ikernel", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "K", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "ikernel", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "weight", ".", "reshape", "(", "1", ",", "1", ",", "K", ",", "K", ")", ".", "astype", "(", "numpy", ".", "float32", ")", ")", ")", "\n", "for", "para", "in", "self", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "para", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.inflation.inflation.forward": [[27, 32], ["inflation.inflation.unsqueeze", "inflation.inflation.unsqueeze", "inflation.inflation.ikernel", "inflation.inflation.squeeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", "\n", "x", "=", "self", ".", "ikernel", "(", "x", ")", "\n", "return", "x", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.inflation.Expend.__init__": [[34, 39], ["super().__init__", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "inflation.Expend.parameters"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Expend", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ex", "=", "torch", ".", "nn", ".", "AvgPool2d", "(", "15", ",", "stride", "=", "1", ",", "padding", "=", "7", ")", "\n", "for", "para", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "para", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.inflation.Expend.forward": [[40, 44], ["inflation.Expend.unsqueeze", "inflation.Expend.ex", "inflation.Expend.squeeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", "\n", "x", "=", "self", ".", "ex", "(", "x", ")", "\n", "return", "x", ".", "squeeze", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.compute_metric.compute_metrics": [[8, 32], ["range", "utils.hungarian", "numpy.zeros", "numpy.zeros", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "assign.sum", "assign.sum", "assign.sum", "assign.sum"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.hungarian"], ["def", "compute_metrics", "(", "dist_matrix", ",", "match_matrix", ",", "pred_num", ",", "gt_num", ",", "sigma", ",", "level", ")", ":", "\n", "    ", "for", "i_pred_p", "in", "range", "(", "pred_num", ")", ":", "\n", "        ", "pred_dist", "=", "dist_matrix", "[", "i_pred_p", ",", ":", "]", "\n", "match_matrix", "[", "i_pred_p", ",", ":", "]", "=", "pred_dist", "<=", "sigma", "\n", "\n", "", "tp", ",", "assign", "=", "hungarian", "(", "match_matrix", ")", "\n", "fn_gt_index", "=", "np", ".", "array", "(", "np", ".", "where", "(", "assign", ".", "sum", "(", "0", ")", "==", "0", ")", ")", "[", "0", "]", "\n", "tp_pred_index", "=", "np", ".", "array", "(", "np", ".", "where", "(", "assign", ".", "sum", "(", "1", ")", "==", "1", ")", ")", "[", "0", "]", "\n", "tp_gt_index", "=", "np", ".", "array", "(", "np", ".", "where", "(", "assign", ".", "sum", "(", "0", ")", "==", "1", ")", ")", "[", "0", "]", "\n", "fp_pred_index", "=", "np", ".", "array", "(", "np", ".", "where", "(", "assign", ".", "sum", "(", "1", ")", "==", "0", ")", ")", "[", "0", "]", "\n", "level_list", "=", "level", "[", "tp_gt_index", "]", "\n", "\n", "tp", "=", "tp_pred_index", ".", "shape", "[", "0", "]", "\n", "fp", "=", "fp_pred_index", ".", "shape", "[", "0", "]", "\n", "fn", "=", "fn_gt_index", ".", "shape", "[", "0", "]", "\n", "\n", "tp_c", "=", "np", ".", "zeros", "(", "[", "num_classes", "]", ")", "\n", "fn_c", "=", "np", ".", "zeros", "(", "[", "num_classes", "]", ")", "\n", "\n", "for", "i_class", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "tp_c", "[", "i_class", "]", "=", "(", "level", "[", "tp_gt_index", "]", "==", "i_class", ")", ".", "sum", "(", ")", "\n", "fn_c", "[", "i_class", "]", "=", "(", "level", "[", "fn_gt_index", "]", "==", "i_class", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "tp", ",", "fp", ",", "fn", ",", "tp_c", ",", "fn_c", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.compute_metric.eval_metrics": [[35, 82], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "range", "scipy.spatial.distance_matrix", "numpy.zeros", "compute_metric.compute_metrics", "compute_metric.compute_metrics", "gt_data_T[].numpy().squeeze", "gt_data_T[].numpy().squeeze", "gt_data_T[].numpy().squeeze", "gt_data_T[].numpy().squeeze", "range", "range", "gt_data_T[].numpy", "gt_data_T[].numpy", "gt_data_T[].numpy", "gt_data_T[].numpy"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.compute_metric.compute_metrics", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.compute_metric.compute_metrics"], ["", "def", "eval_metrics", "(", "num_classes", ",", "pred_data", ",", "gt_data_T", ")", ":", "\n", "# print(gt_data_T)", "\n", "    ", "if", "gt_data_T", "[", "'num'", "]", ">", "0", ":", "\n", "        ", "gt_data", "=", "{", "'num'", ":", "gt_data_T", "[", "'num'", "]", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ",", "'points'", ":", "gt_data_T", "[", "'points'", "]", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ",", "'sigma'", ":", "gt_data_T", "[", "'sigma'", "]", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ",", "'level'", ":", "gt_data_T", "[", "'level'", "]", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "gt_data", "=", "{", "'num'", ":", "0", ",", "'points'", ":", "[", "]", ",", "'sigma'", ":", "[", "]", ",", "'level'", ":", "[", "]", "}", "\n", "\n", "# print(gt_data)", "\n", "", "tp_s", ",", "fp_s", ",", "fn_s", ",", "tp_l", ",", "fp_l", ",", "fn_l", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "tp_c_s", "=", "np", ".", "zeros", "(", "[", "num_classes", "]", ")", "\n", "fn_c_s", "=", "np", ".", "zeros", "(", "[", "num_classes", "]", ")", "\n", "tp_c_l", "=", "np", ".", "zeros", "(", "[", "num_classes", "]", ")", "\n", "fn_c_l", "=", "np", ".", "zeros", "(", "[", "num_classes", "]", ")", "\n", "\n", "if", "gt_data", "[", "'num'", "]", "==", "0", "and", "pred_data", "[", "'num'", "]", "!=", "0", ":", "\n", "        ", "pred_p", "=", "pred_data", "[", "'points'", "]", "\n", "fp_pred_index", "=", "np", ".", "array", "(", "range", "(", "pred_p", ".", "shape", "[", "0", "]", ")", ")", "\n", "fp_s", "=", "fp_pred_index", ".", "shape", "[", "0", "]", "\n", "fp_l", "=", "fp_pred_index", ".", "shape", "[", "0", "]", "\n", "\n", "", "if", "pred_data", "[", "'num'", "]", "==", "0", "and", "gt_data", "[", "'num'", "]", "!=", "0", ":", "\n", "        ", "gt_p", "=", "gt_data", "[", "'points'", "]", "\n", "level", "=", "gt_data", "[", "'level'", "]", "\n", "\n", "fn_gt_index", "=", "np", ".", "array", "(", "range", "(", "gt_p", ".", "shape", "[", "0", "]", ")", ")", "\n", "fn_s", "=", "fn_gt_index", ".", "shape", "[", "0", "]", "\n", "fn_l", "=", "fn_gt_index", ".", "shape", "[", "0", "]", "\n", "for", "i_class", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "fn_c_s", "[", "i_class", "]", "=", "(", "level", "[", "fn_gt_index", "]", "==", "i_class", ")", ".", "sum", "(", ")", "\n", "fn_c_l", "[", "i_class", "]", "=", "(", "level", "[", "fn_gt_index", "]", "==", "i_class", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "if", "gt_data", "[", "'num'", "]", "!=", "0", "and", "pred_data", "[", "'num'", "]", "!=", "0", ":", "\n", "        ", "pred_p", "=", "pred_data", "[", "'points'", "]", "\n", "gt_p", "=", "gt_data", "[", "'points'", "]", "\n", "sigma_s", "=", "gt_data", "[", "'sigma'", "]", "[", ":", ",", "0", "]", "\n", "sigma_l", "=", "gt_data", "[", "'sigma'", "]", "[", ":", ",", "1", "]", "\n", "level", "=", "gt_data", "[", "'level'", "]", "\n", "\n", "# dist", "\n", "dist_matrix", "=", "ss", ".", "distance_matrix", "(", "pred_p", ",", "gt_p", ",", "p", "=", "2", ")", "\n", "match_matrix", "=", "np", ".", "zeros", "(", "dist_matrix", ".", "shape", ",", "dtype", "=", "bool", ")", "\n", "\n", "# sigma_s and sigma_l", "\n", "tp_s", ",", "fp_s", ",", "fn_s", ",", "tp_c_s", ",", "fn_c_s", "=", "compute_metrics", "(", "dist_matrix", ",", "match_matrix", ",", "pred_p", ".", "shape", "[", "0", "]", ",", "gt_p", ".", "shape", "[", "0", "]", ",", "sigma_s", ",", "level", ")", "\n", "tp_l", ",", "fp_l", ",", "fn_l", ",", "tp_c_l", ",", "fn_c_l", "=", "compute_metrics", "(", "dist_matrix", ",", "match_matrix", ",", "pred_p", ".", "shape", "[", "0", "]", ",", "gt_p", ".", "shape", "[", "0", "]", ",", "sigma_l", ",", "level", ")", "\n", "", "return", "tp_s", ",", "fp_s", ",", "fn_s", ",", "tp_c_s", ",", "fn_c_s", ",", "tp_l", ",", "fp_l", ",", "fn_l", ",", "tp_c_l", ",", "fn_c_l", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageMeter.__init__": [[297, 299], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageMeter.reset": [[300, 305], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageMeter.update": [[306, 311], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "cur_val", ")", ":", "\n", "        ", "self", ".", "cur_val", "=", "cur_val", "\n", "self", ".", "sum", "+=", "cur_val", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.__init__": [[316, 319], ["utils.AverageCategoryMeter.reset"], "methods", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.reset"], ["def", "__init__", "(", "self", ",", "num_class", ")", ":", "\n", "        ", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.reset": [[320, 323], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_val", "=", "np", ".", "zeros", "(", "self", ".", "num_class", ")", "\n", "self", ".", "sum", "=", "np", ".", "zeros", "(", "self", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.AverageCategoryMeter.update": [[325, 328], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "cur_val", ")", ":", "\n", "        ", "self", ".", "cur_val", "=", "cur_val", "\n", "self", ".", "sum", "+=", "cur_val", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.__init__": [[334, 340], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_time", "=", "0.", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.", "\n", "self", ".", "diff", "=", "0.", "\n", "self", ".", "average_time", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.tic": [[341, 345], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "# using time.time instead of time.clock because time time.clock", "\n", "# does not normalize for multithreading", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.Timer.toc": [[346, 355], ["time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ",", "average", "=", "True", ")", ":", "\n", "        ", "self", ".", "diff", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "self", ".", "total_time", "+=", "self", ".", "diff", "\n", "self", ".", "calls", "+=", "1", "\n", "self", ".", "average_time", "=", "self", ".", "total_time", "/", "self", ".", "calls", "\n", "if", "average", ":", "\n", "            ", "return", "self", ".", "average_time", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "diff", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.read_pred_and_gt": [[17, 58], ["open", "f.readlines", "open", "f.readlines", "line.strip().split.strip().split", "id_read.append", "line.strip().split.strip().split", "sys.exit", "int", "numpy.array().reshape", "int", "numpy.array().reshape", "line.strip().split.strip", "len", "int", "line.strip().split.strip", "len", "numpy.array", "numpy.array", "len", "len", "len"], "function", ["None"], ["def", "read_pred_and_gt", "(", "pred_file", ",", "gt_file", ")", ":", "\n", "# read pred", "\n", "    ", "pred_data", "=", "{", "}", "\n", "with", "open", "(", "pred_file", ")", "as", "f", ":", "\n", "\n", "        ", "id_read", "=", "[", "]", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n", "# check1", "\n", "if", "len", "(", "line", ")", "<", "2", "or", "len", "(", "line", ")", "%", "2", "!=", "0", "or", "(", "len", "(", "line", ")", "-", "2", ")", "/", "2", "!=", "int", "(", "line", "[", "1", "]", ")", ":", "\n", "                ", "flagError", "=", "True", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "line_data", "=", "[", "int", "(", "i", ")", "for", "i", "in", "line", "]", "\n", "idx", ",", "num", "=", "[", "line_data", "[", "0", "]", ",", "line_data", "[", "1", "]", "]", "\n", "id_read", ".", "append", "(", "idx", ")", "\n", "\n", "points", "=", "[", "]", "\n", "if", "num", ">", "0", ":", "\n", "                ", "points", "=", "np", ".", "array", "(", "line_data", "[", "2", ":", "]", ")", ".", "reshape", "(", "(", "(", "len", "(", "line", ")", "-", "2", ")", "//", "2", ",", "2", ")", ")", "\n", "pred_data", "[", "idx", "]", "=", "{", "'num'", ":", "num", ",", "'points'", ":", "points", "}", "\n", "", "else", ":", "\n", "                ", "pred_data", "[", "idx", "]", "=", "{", "'num'", ":", "num", ",", "'points'", ":", "[", "]", "}", "\n", "\n", "# read gt", "\n", "", "", "", "gt_data", "=", "{", "}", "\n", "with", "open", "(", "gt_file", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n", "line_data", "=", "[", "int", "(", "i", ")", "for", "i", "in", "line", "]", "\n", "idx", ",", "num", "=", "[", "line_data", "[", "0", "]", ",", "line_data", "[", "1", "]", "]", "\n", "points_r", "=", "[", "]", "\n", "if", "num", ">", "0", ":", "\n", "                ", "points_r", "=", "np", ".", "array", "(", "line_data", "[", "2", ":", "]", ")", ".", "reshape", "(", "(", "(", "len", "(", "line", ")", "-", "2", ")", "//", "5", ",", "5", ")", ")", "\n", "gt_data", "[", "idx", "]", "=", "{", "'num'", ":", "num", ",", "'points'", ":", "points_r", "[", ":", ",", "0", ":", "2", "]", ",", "'sigma'", ":", "points_r", "[", ":", ",", "2", ":", "4", "]", ",", "'level'", ":", "points_r", "[", ":", ",", "4", "]", "}", "\n", "", "else", ":", "\n", "                ", "gt_data", "[", "idx", "]", "=", "{", "'num'", ":", "0", ",", "'points'", ":", "[", "]", ",", "'sigma'", ":", "[", "]", ",", "'level'", ":", "[", "]", "}", "\n", "\n", "", "", "", "return", "pred_data", ",", "gt_data", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.adjust_learning_rate": [[59, 66], ["float", "float"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "base_lr1", ",", "base_lr2", ",", "max_iters", ",", "\n", "cur_iters", ",", "power", "=", "0.9", ")", ":", "\n", "    ", "lr1", "=", "base_lr1", "*", "(", "(", "1", "-", "float", "(", "cur_iters", ")", "/", "max_iters", ")", "**", "(", "power", ")", ")", "\n", "lr2", "=", "base_lr2", "*", "(", "(", "1", "-", "float", "(", "cur_iters", ")", "/", "max_iters", ")", "**", "(", "power", ")", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr1", "\n", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr2", "\n", "return", "lr1", ",", "lr2", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.initialize_weights": [[67, 70], ["utils.real_init_weights"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.real_init_weights"], ["", "def", "initialize_weights", "(", "models", ")", ":", "\n", "    ", "for", "model", "in", "models", ":", "\n", "        ", "real_init_weights", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.real_init_weights": [[72, 92], ["isinstance", "isinstance", "utils.real_init_weights", "torch.nn.init.normal_", "isinstance", "torch.nn.init.constant_", "m.weight.data.normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "m.children", "print", "utils.real_init_weights"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.real_init_weights", "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.real_init_weights"], ["", "", "def", "real_init_weights", "(", "m", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "m", ",", "list", ")", ":", "\n", "        ", "for", "mini_m", "in", "m", ":", "\n", "            ", "real_init_weights", "(", "mini_m", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "std", "=", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "for", "mini_m", "in", "m", ".", "children", "(", ")", ":", "\n", "                ", "real_init_weights", "(", "mini_m", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.logger": [[94, 113], ["SummaryWriter", "open", "open.readlines", "os.path.exists", "os.mkdir", "open", "f.write", "utils.copy_cur_env"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.copy_cur_env"], ["", "", "", "def", "logger", "(", "exp_path", ",", "exp_name", ",", "work_dir", ",", "exception", ",", "resume", "=", "False", ")", ":", "\n", "\n", "    ", "from", "tensorboardX", "import", "SummaryWriter", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "exp_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "exp_path", ")", "\n", "", "writer", "=", "SummaryWriter", "(", "exp_path", "+", "'/'", "+", "exp_name", ")", "\n", "log_file", "=", "exp_path", "+", "'/'", "+", "exp_name", "+", "'/'", "+", "exp_name", "+", "'.txt'", "\n", "\n", "cfg_file", "=", "open", "(", "'./config.py'", ",", "\"r\"", ")", "\n", "cfg_lines", "=", "cfg_file", ".", "readlines", "(", ")", "\n", "\n", "with", "open", "(", "log_file", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "''", ".", "join", "(", "cfg_lines", ")", "+", "'\\n\\n\\n\\n'", ")", "\n", "\n", "", "if", "not", "resume", ":", "\n", "        ", "copy_cur_env", "(", "work_dir", ",", "exp_path", "+", "'/'", "+", "exp_name", "+", "'/code'", ",", "exception", ")", "\n", "\n", "", "return", "writer", ",", "log_file", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.hungarian": [[115, 148], ["numpy.argwhere", "range", "numpy.zeros", "enumerate", "graph[].append", "range", "utils.hungarian.dfs"], "function", ["None"], ["", "def", "hungarian", "(", "matrixTF", ")", ":", "\n", "# matrix to adjacent matrix", "\n", "    ", "edges", "=", "np", ".", "argwhere", "(", "matrixTF", ")", "\n", "lnum", ",", "rnum", "=", "matrixTF", ".", "shape", "\n", "graph", "=", "[", "[", "]", "for", "_", "in", "range", "(", "lnum", ")", "]", "\n", "for", "edge", "in", "edges", ":", "\n", "        ", "graph", "[", "edge", "[", "0", "]", "]", ".", "append", "(", "edge", "[", "1", "]", ")", "\n", "\n", "# deep first search", "\n", "", "match", "=", "[", "-", "1", "for", "_", "in", "range", "(", "rnum", ")", "]", "\n", "vis", "=", "[", "-", "1", "for", "_", "in", "range", "(", "rnum", ")", "]", "\n", "def", "dfs", "(", "u", ")", ":", "\n", "        ", "for", "v", "in", "graph", "[", "u", "]", ":", "\n", "            ", "if", "vis", "[", "v", "]", ":", "continue", "\n", "vis", "[", "v", "]", "=", "True", "\n", "if", "match", "[", "v", "]", "==", "-", "1", "or", "dfs", "(", "match", "[", "v", "]", ")", ":", "\n", "                ", "match", "[", "v", "]", "=", "u", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n", "# for loop", "\n", "", "ans", "=", "0", "\n", "for", "a", "in", "range", "(", "lnum", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "rnum", ")", ":", "vis", "[", "i", "]", "=", "False", "\n", "if", "dfs", "(", "a", ")", ":", "ans", "+=", "1", "\n", "\n", "# assignment matrix", "\n", "", "assign", "=", "np", ".", "zeros", "(", "(", "lnum", ",", "rnum", ")", ",", "dtype", "=", "bool", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "match", ")", ":", "\n", "        ", "if", "m", ">=", "0", ":", "\n", "            ", "assign", "[", "m", ",", "i", "]", "=", "True", "\n", "\n", "", "", "return", "ans", ",", "assign", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.logger_txt": [[149, 159], ["open", "f.write", "f.write", "f.write", "f.write"], "function", ["None"], ["", "def", "logger_txt", "(", "log_file", ",", "epoch", ",", "scores", ")", ":", "\n", "    ", "f1m_l", ",", "ap_l", ",", "ar_l", ",", "mae", ",", "mse", ",", "nae", ",", "loss", "=", "scores", "\n", "\n", "snapshot_name", "=", "'ep_%d_mae_%.1f_mse_%.1f'", "%", "(", "epoch", "+", "1", ",", "mae", ",", "mse", ")", "\n", "\n", "with", "open", "(", "log_file", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'='", "*", "15", "+", "'+'", "*", "15", "+", "'='", "*", "15", "+", "'\\n\\n'", ")", "\n", "f", ".", "write", "(", "snapshot_name", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'    [mae %.2f mse %.2f nae %.4f], [val loss %.4f]\\n'", "%", "(", "mae", ",", "mse", ",", "nae", ",", "loss", ")", ")", "\n", "f", ".", "write", "(", "'='", "*", "15", "+", "'+'", "*", "15", "+", "'='", "*", "15", "+", "'\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.vis_results": [[160, 206], ["torchvision.ToTensor", "enumerate", "torch.stack", "torchvision.make_grid", "writer.add_image", "zip", "restore", "cv2.applyColorMap", "cv2.applyColorMap", "cv2.applyColorMap", "cv2.applyColorMap", "numpy.array", "enumerate", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "vutils.make_grid.extend", "cv2.rectangle", "cv2.rectangle", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "str", "img.cpu", "standard_transforms.ToTensor.", "standard_transforms.ToTensor.", "standard_transforms.ToTensor.", "standard_transforms.ToTensor.", "standard_transforms.ToTensor.", "vutils.make_grid.numpy", "Image.fromarray.convert", "Image.fromarray.convert", "Image.fromarray.convert", "Image.fromarray.convert", "Image.fromarray.convert", "tensor[].max", "tensor[].max", "tensor[].max"], "function", ["None"], ["", "", "def", "vis_results", "(", "exp_name", ",", "epoch", ",", "writer", ",", "restore", ",", "img", ",", "pred_map", ",", "gt_map", ",", "binar_map", ",", "threshold_matrix", ",", "boxes", ")", ":", "# , flow):", "\n", "\n", "    ", "pil_to_tensor", "=", "standard_transforms", ".", "ToTensor", "(", ")", "\n", "\n", "x", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "\n", "for", "idx", ",", "tensor", "in", "enumerate", "(", "zip", "(", "img", ".", "cpu", "(", ")", ".", "data", ",", "pred_map", ",", "gt_map", ",", "binar_map", ",", "threshold_matrix", ")", ")", ":", "\n", "        ", "if", "idx", ">", "1", ":", "# show only one group", "\n", "            ", "break", "\n", "\n", "", "pil_input", "=", "restore", "(", "tensor", "[", "0", "]", ")", "\n", "pred_color_map", "=", "cv2", ".", "applyColorMap", "(", "(", "255", "*", "tensor", "[", "1", "]", "/", "(", "tensor", "[", "2", "]", ".", "max", "(", ")", "+", "1e-10", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", ".", "squeeze", "(", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "gt_color_map", "=", "cv2", ".", "applyColorMap", "(", "(", "255", "*", "tensor", "[", "2", "]", "/", "(", "tensor", "[", "2", "]", ".", "max", "(", ")", "+", "1e-10", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", ".", "squeeze", "(", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "binar_color_map", "=", "cv2", ".", "applyColorMap", "(", "(", "255", "*", "tensor", "[", "3", "]", "/", "(", "tensor", "[", "2", "]", ".", "max", "(", ")", "+", "1e-10", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", ".", "squeeze", "(", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "threshold_color_map", "=", "cv2", ".", "applyColorMap", "(", "(", "255", "*", "tensor", "[", "4", "]", "/", "(", "1", "+", "1e-10", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", ".", "squeeze", "(", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "\n", "point_color", "=", "(", "0", ",", "255", ",", "0", ")", "# BGR", "\n", "thickness", "=", "1", "\n", "lineType", "=", "4", "\n", "pil_input", "=", "np", ".", "array", "(", "pil_input", ")", "\n", "\n", "for", "i", ",", "box", "in", "enumerate", "(", "boxes", ",", "0", ")", ":", "\n", "            ", "wh_LeftTop", "=", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", ")", "\n", "wh_RightBottom", "=", "(", "box", "[", "0", "]", "+", "box", "[", "2", "]", ",", "box", "[", "1", "]", "+", "box", "[", "3", "]", ")", "\n", "# print(wh_LeftTop, wh_RightBottom)", "\n", "cv2", ".", "rectangle", "(", "binar_color_map", ",", "wh_LeftTop", ",", "wh_RightBottom", ",", "point_color", ",", "thickness", ",", "lineType", ")", "\n", "cv2", ".", "rectangle", "(", "pil_input", ",", "wh_LeftTop", ",", "wh_RightBottom", ",", "point_color", ",", "thickness", ",", "lineType", ")", "\n", "\n", "", "pil_input", "=", "Image", ".", "fromarray", "(", "pil_input", ")", "\n", "pil_label", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "gt_color_map", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "pil_output", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "pred_color_map", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "pil_binar", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "binar_color_map", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "\n", "pil_threshold", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "threshold_color_map", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "\n", "\n", "x", ".", "extend", "(", "[", "pil_to_tensor", "(", "pil_input", ".", "convert", "(", "'RGB'", ")", ")", ",", "pil_to_tensor", "(", "pil_label", ".", "convert", "(", "'RGB'", ")", ")", ",", "\n", "pil_to_tensor", "(", "pil_output", ".", "convert", "(", "'RGB'", ")", ")", ",", "pil_to_tensor", "(", "pil_binar", ".", "convert", "(", "'RGB'", ")", ")", ",", "\n", "pil_to_tensor", "(", "pil_threshold", ".", "convert", "(", "'RGB'", ")", ")", "]", ")", "\n", "\n", "", "x", "=", "torch", ".", "stack", "(", "x", ",", "0", ")", "\n", "x", "=", "vutils", ".", "make_grid", "(", "x", ",", "nrow", "=", "3", ",", "padding", "=", "5", ")", "\n", "x", "=", "(", "x", ".", "numpy", "(", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "writer", ".", "add_image", "(", "exp_name", "+", "'_epoch_'", "+", "str", "(", "epoch", "+", "1", ")", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.print_NWPU_summary": [[208, 234], ["print", "print", "print", "print", "print", "print", "print", "open", "f.write", "f.write", "f.write", "f.write", "str"], "function", ["None"], ["", "def", "print_NWPU_summary", "(", "trainer", ",", "scores", ")", ":", "\n", "    ", "f1m_l", ",", "ap_l", ",", "ar_l", ",", "mae", ",", "mse", ",", "nae", ",", "loss", "=", "scores", "\n", "train_record", "=", "trainer", ".", "train_record", "\n", "\n", "with", "open", "(", "trainer", ".", "log_txt", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'='", "*", "15", "+", "'+'", "*", "15", "+", "'='", "*", "15", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "str", "(", "trainer", ".", "epoch", ")", "+", "'\\n\\n'", ")", "\n", "\n", "f", ".", "write", "(", "'  [F1 %.4f Pre %.4f Rec %.4f ] [mae %.4f mse %.4f nae %.4f], [val loss %.4f]\\n\\n'", "%", "(", "f1m_l", ",", "ap_l", ",", "ar_l", ",", "mae", ",", "mse", ",", "nae", ",", "loss", ")", ")", "\n", "\n", "f", ".", "write", "(", "'='", "*", "15", "+", "'+'", "*", "15", "+", "'='", "*", "15", "+", "'\\n\\n'", ")", "\n", "\n", "", "print", "(", "'='", "*", "50", ")", "\n", "print", "(", "trainer", ".", "exp_name", ")", "\n", "print", "(", "'    '", "+", "'-'", "*", "20", ")", "\n", "print", "(", "'  [F1 %.4f Pre %.4f Rec %.4f] [mae %.2f mse %.2f], [val loss %.4f]'", "%", "(", "f1m_l", ",", "ap_l", ",", "ar_l", ",", "mae", ",", "mse", ",", "loss", ")", ")", "\n", "print", "(", "'    '", "+", "'-'", "*", "20", ")", "\n", "print", "(", "'[best] [model: %s] , [F1 %.4f Pre %.4f Rec %.4f] [mae %.2f], [mse %.2f], [nae %.4f]'", "%", "(", "train_record", "[", "'best_model_name'", "]", ",", "train_record", "[", "'best_F1'", "]", ",", "train_record", "[", "'best_Pre'", "]", ",", "train_record", "[", "'best_Rec'", "]", ",", "train_record", "[", "'best_mae'", "]", ",", "train_record", "[", "'best_mse'", "]", ",", "train_record", "[", "'best_nae'", "]", ")", ")", "\n", "print", "(", "'='", "*", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.update_model": [[236, 276], ["torch.save", "trainer.net.state_dict", "torch.save", "trainer.net.state_dict", "trainer.optimizer.state_dict", "trainer.scheduler.state_dict", "os.path.join", "utils.logger_txt", "os.path.join"], "function", ["home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.logger_txt"], ["", "def", "update_model", "(", "trainer", ",", "scores", ")", ":", "\n", "\n", "    ", "F1", ",", "Pre", ",", "Rec", ",", "mae", ",", "mse", ",", "nae", ",", "loss", "=", "scores", "\n", "train_record", "=", "trainer", ".", "train_record", "\n", "log_file", "=", "trainer", ".", "log_txt", "\n", "epoch", "=", "trainer", ".", "epoch", "\n", "\n", "snapshot_name", "=", "'ep_%d_F1_%.3f_Pre_%.3f_Rec_%.3f_mae_%.1f_mse_%.1f'", "%", "(", "epoch", "+", "1", ",", "F1", ",", "Pre", ",", "Rec", ",", "mae", ",", "mse", ")", "\n", "\n", "if", "F1", ">", "train_record", "[", "'best_F1'", "]", "or", "Pre", ">", "train_record", "[", "'best_Pre'", "]", "or", "Rec", ">", "train_record", "[", "'best_Rec'", "]", "or", "mae", "<", "train_record", "[", "'best_mae'", "]", "or", "mse", "<", "train_record", "[", "'best_mse'", "]", "or", "nae", "<", "train_record", "[", "'best_nae'", "]", ":", "\n", "\n", "        ", "train_record", "[", "'best_model_name'", "]", "=", "snapshot_name", "\n", "if", "log_file", "is", "not", "None", ":", "\n", "            ", "logger_txt", "(", "log_file", ",", "epoch", ",", "scores", ")", "\n", "\n", "", "to_saved_weight", "=", "trainer", ".", "net", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "to_saved_weight", ",", "os", ".", "path", ".", "join", "(", "trainer", ".", "exp_path", ",", "trainer", ".", "exp_name", ",", "snapshot_name", "+", "'.pth'", ")", ")", "\n", "\n", "", "if", "F1", ">", "train_record", "[", "'best_F1'", "]", ":", "\n", "        ", "train_record", "[", "'best_F1'", "]", "=", "F1", "\n", "", "if", "Pre", ">", "train_record", "[", "'best_Pre'", "]", ":", "\n", "        ", "train_record", "[", "'best_Pre'", "]", "=", "Pre", "\n", "", "if", "Rec", ">", "train_record", "[", "'best_Rec'", "]", ":", "\n", "        ", "train_record", "[", "'best_Rec'", "]", "=", "Rec", "\n", "\n", "", "if", "mae", "<", "train_record", "[", "'best_mae'", "]", ":", "\n", "        ", "train_record", "[", "'best_mae'", "]", "=", "mae", "\n", "", "if", "mse", "<", "train_record", "[", "'best_mse'", "]", ":", "\n", "        ", "train_record", "[", "'best_mse'", "]", "=", "mse", "\n", "", "if", "nae", "<", "train_record", "[", "'best_nae'", "]", ":", "\n", "        ", "train_record", "[", "'best_nae'", "]", "=", "nae", "\n", "\n", "", "latest_state", "=", "{", "'train_record'", ":", "train_record", ",", "'net'", ":", "trainer", ".", "net", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "trainer", ".", "optimizer", ".", "state_dict", "(", ")", ",", "'scheduler'", ":", "trainer", ".", "scheduler", ".", "state_dict", "(", ")", ",", "'epoch'", ":", "trainer", ".", "epoch", ",", "'i_tb'", ":", "trainer", ".", "i_tb", ",", "'num_iters'", ":", "trainer", ".", "num_iters", ",", "'exp_path'", ":", "trainer", ".", "exp_path", ",", "'exp_name'", ":", "trainer", ".", "exp_name", "}", "\n", "\n", "torch", ".", "save", "(", "latest_state", ",", "os", ".", "path", ".", "join", "(", "trainer", ".", "exp_path", ",", "trainer", ".", "exp_name", ",", "'latest_state.pth'", ")", ")", "\n", "\n", "return", "train_record", "\n", "\n"]], "home.repos.pwc.inspect_result.taohan10200_IIM.misc.utils.copy_cur_env": [[278, 292], ["os.listdir", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "os.path.isdir", "shutil.copytree", "os.path.isfile", "shutil.copyfile"], "function", ["None"], ["", "def", "copy_cur_env", "(", "work_dir", ",", "dst_dir", ",", "exception", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "dst_dir", ")", "\n", "\n", "", "for", "filename", "in", "os", ".", "listdir", "(", "work_dir", ")", ":", "\n", "\n", "        ", "file", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "filename", ")", "\n", "dst_file", "=", "os", ".", "path", ".", "join", "(", "dst_dir", ",", "filename", ")", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "file", ")", "and", "filename", "not", "in", "exception", ":", "\n", "            ", "shutil", ".", "copytree", "(", "file", ",", "dst_file", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "file", ")", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "file", ",", "dst_file", ")", "\n", "\n"]]}