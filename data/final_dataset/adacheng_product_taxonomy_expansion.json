{"home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.dr.__init__": [[13, 29], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_path", "=", "'./data'", ")", ":", "\n", "        ", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "poi_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'poi.json'", ")", "\n", "self", ".", "hypo_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'hyponym.json'", ")", "\n", "self", ".", "hyper_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'hypernym.json'", ")", "\n", "\n", "self", ".", "concept_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'concept.txt'", ")", "\n", "self", ".", "ori_triple_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'triples.data'", ")", "\n", "self", ".", "triple_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'filter_triples.txt'", ")", "\n", "\n", "self", ".", "spu_json", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'spu.json'", ")", "\n", "self", ".", "syn_json", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'synonym.json'", ")", "\n", "self", ".", "dish_txt", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'100w_dish.txt'", ")", "\n", "\n", "self", ".", "cate_txt", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'cate_id.txt'", ")", "\n", "self", ".", "poi_spu_filter", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'poi_spu_filter_20.txt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.bert_encoder.__init__": [[83, 95], ["torch.Module.__init__", "pytorch_transformers.BertModel.from_pretrained", "pytorch_transformers.BertTokenizer.from_pretrained", "gzh.bert_encoder.bert.to"], "methods", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bert_name", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "super", "(", "bert_encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "bert_name", "==", "'mt_bert'", ":", "\n", "            ", "bert_path", "=", "mt_bert", "\n", "", "elif", "bert_name", "==", "'chinese-base-bert'", ":", "\n", "            ", "bert_path", "=", "bert_model", "\n", "", "elif", "bert_name", "==", "'wwm_bert'", ":", "\n", "            ", "bert_path", "=", "wwm_bert_model", "\n", "", "self", ".", "bert", "=", "BertModel", ".", "from_pretrained", "(", "bert_path", ")", "\n", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "bert_path", ")", "\n", "self", ".", "bert", ".", "to", "(", "device", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.bert_encoder.forward": [[96, 101], ["outputs.detach().cpu().numpy", "gzh.bert_encoder.tokenizer.tokenize", "gzh.bert_encoder.bert", "str", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "outputs.detach().cpu", "gzh.bert_encoder.tokenizer.convert_tokens_to_ids", "max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "outputs.detach", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sentence", ",", "max_len", "=", "16", ")", ":", "\n", "        ", "tokens", "=", "[", "self", ".", "tokenizer", ".", "tokenize", "(", "str", "(", "i", ")", ")", "for", "i", "in", "sentence", "]", "\n", "tensor", "=", "[", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "t", ")", "[", ":", "max_len", "]", "+", "[", "0", "]", "*", "max", "(", "0", ",", "max_len", "-", "len", "(", "t", ")", ")", "for", "t", "in", "tokens", "]", "\n", "outputs", "=", "self", ".", "bert", "(", "torch", ".", "tensor", "(", "tensor", ")", ".", "to", "(", "self", ".", "device", ")", ")", "[", "1", "]", "\n", "return", "outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.TrieNode.__init__": [[104, 113], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", "=", "None", ")", ":", "\n", "# \u503c", "\n", "        ", "self", ".", "value", "=", "value", "\n", "# fail\u6307\u9488", "\n", "self", ".", "fail", "=", "None", "\n", "# \u5c3e\u6807\u5fd7\uff1a\u6807\u5fd7\u4e3ai\u8868\u793a\u7b2ci\u4e2a\u6a21\u5f0f\u4e32\u4e32\u5c3e\uff0c\u9ed8\u8ba4\u4e3a0", "\n", "self", ".", "tail", "=", "0", "\n", "# \u5b50\u8282\u70b9\uff0c{value:TrieNode}", "\n", "self", ".", "children", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.Trie.__init__": [[116, 125], ["gzh.TrieNode", "gzh.Trie.ac_automation", "gzh.Trie.insert"], "methods", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.Trie.ac_automation", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.Trie.insert"], ["    ", "def", "__init__", "(", "self", ",", "words", "=", "[", "]", ")", ":", "\n", "# \u6839\u8282\u70b9", "\n", "        ", "self", ".", "root", "=", "TrieNode", "(", ")", "\n", "# \u6a21\u5f0f\u4e32\u4e2a\u6570", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "words", "=", "words", "\n", "for", "word", "in", "words", ":", "\n", "            ", "self", ".", "insert", "(", "word", ")", "\n", "", "self", ".", "ac_automation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.Trie.add_words": [[126, 131], ["gzh.Trie.words.extend", "gzh.Trie.ac_automation", "gzh.Trie.insert"], "methods", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.Trie.ac_automation", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.Trie.insert"], ["", "def", "add_words", "(", "self", ",", "words", ")", ":", "\n", "        ", "self", ".", "words", ".", "extend", "(", "words", ")", "\n", "for", "word", "in", "words", ":", "\n", "            ", "self", ".", "insert", "(", "word", ")", "\n", "", "self", ".", "ac_automation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.Trie.insert": [[132, 149], ["gzh.TrieNode"], "methods", ["None"], ["", "def", "insert", "(", "self", ",", "word", ")", ":", "\n", "        ", "\"\"\"\n        \u57fa\u64cd\uff0c\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\n        :param word: \u5b57\u7b26\u4e32\n        :return:\n        \"\"\"", "\n", "self", ".", "count", "+=", "1", "\n", "cur_node", "=", "self", ".", "root", "\n", "for", "char", "in", "word", ":", "\n", "            ", "if", "char", "not", "in", "cur_node", ".", "children", ":", "\n", "# \u63d2\u5165\u7ed3\u70b9", "\n", "                ", "child", "=", "TrieNode", "(", "value", "=", "char", ")", "\n", "cur_node", ".", "children", "[", "char", "]", "=", "child", "\n", "cur_node", "=", "child", "\n", "", "else", ":", "\n", "                ", "cur_node", "=", "cur_node", ".", "children", "[", "char", "]", "\n", "", "", "cur_node", ".", "tail", "=", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.Trie.ac_automation": [[150, 180], ["len", "queue.remove", "temp_node.children.values", "queue.append"], "methods", ["None"], ["", "def", "ac_automation", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u6784\u5efa\u5931\u8d25\u8def\u5f84\n        :return:\n        \"\"\"", "\n", "queue", "=", "[", "self", ".", "root", "]", "\n", "# BFS\u904d\u5386\u5b57\u5178\u6811", "\n", "while", "len", "(", "queue", ")", ":", "\n", "            ", "temp_node", "=", "queue", "[", "0", "]", "\n", "# \u53d6\u51fa\u961f\u9996\u5143\u7d20", "\n", "queue", ".", "remove", "(", "temp_node", ")", "\n", "for", "value", "in", "temp_node", ".", "children", ".", "values", "(", ")", ":", "\n", "# \u6839\u7684\u5b50\u7ed3\u70b9fail\u6307\u5411\u6839\u81ea\u5df1", "\n", "                ", "if", "temp_node", "==", "self", ".", "root", ":", "\n", "                    ", "value", ".", "fail", "=", "self", ".", "root", "\n", "", "else", ":", "\n", "# \u8f6c\u5230fail\u6307\u9488", "\n", "                    ", "p", "=", "temp_node", ".", "fail", "\n", "while", "p", ":", "\n", "# \u82e5\u7ed3\u70b9\u503c\u5728\u8be5\u7ed3\u70b9\u7684\u5b50\u7ed3\u70b9\u4e2d\uff0c\u5219\u5c06fail\u6307\u5411\u8be5\u7ed3\u70b9\u7684\u5bf9\u5e94\u5b50\u7ed3\u70b9", "\n", "                        ", "if", "value", ".", "value", "in", "p", ".", "children", ":", "\n", "                            ", "value", ".", "fail", "=", "p", ".", "children", "[", "value", ".", "value", "]", "\n", "break", "\n", "# \u8f6c\u5230fail\u6307\u9488\u7ee7\u7eed\u56de\u6eaf", "\n", "", "p", "=", "p", ".", "fail", "\n", "# \u82e5\u4e3aNone\uff0c\u8868\u793a\u5f53\u524d\u7ed3\u70b9\u503c\u5728\u4e4b\u524d\u90fd\u6ca1\u51fa\u73b0\u8fc7\uff0c\u5219\u5176fail\u6307\u5411\u6839\u7ed3\u70b9", "\n", "", "if", "not", "p", ":", "\n", "                        ", "value", ".", "fail", "=", "self", ".", "root", "\n", "# \u5c06\u5f53\u524d\u7ed3\u70b9\u7684\u6240\u6709\u5b50\u7ed3\u70b9\u52a0\u5230\u961f\u5217\u4e2d", "\n", "", "", "queue", ".", "append", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.Trie.search_word": [[181, 187], ["gzh.Trie.search"], "methods", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.Trie.search"], ["", "", "", "def", "search_word", "(", "self", ",", "word", ":", "str", ")", ":", "\n", "        ", "answers", "=", "self", ".", "search", "(", "word", ")", "\n", "for", "answer", "in", "answers", ":", "\n", "            ", "if", "answer", "==", "word", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.Trie.search": [[188, 223], ["collections.defaultdict", "range", "len", "rst[].append"], "methods", ["None"], ["", "def", "search", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        \u6a21\u5f0f\u5339\u914d\n        :param self:\n        :param text: \u957f\u6587\u672c\n        :return:\n        \"\"\"", "\n", "p", "=", "self", ".", "root", "\n", "# \u8bb0\u5f55\u5339\u914d\u8d77\u59cb\u4f4d\u7f6e\u4e0b\u6807", "\n", "start_index", "=", "0", "\n", "# \u6210\u529f\u5339\u914d\u7ed3\u679c\u96c6", "\n", "rst", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "text", ")", ")", ":", "\n", "            ", "single_char", "=", "text", "[", "i", "]", "\n", "while", "single_char", "not", "in", "p", ".", "children", "and", "p", "is", "not", "self", ".", "root", ":", "\n", "                ", "p", "=", "p", ".", "fail", "\n", "# \u6709\u4e00\u70b9\u7455\u75b5\uff0c\u539f\u56e0\u5728\u4e8e\u5339\u914d\u5b50\u4e32\u7684\u65f6\u5019\uff0c\u82e5\u5b57\u7b26\u4e32\u4e2d\u90e8\u5206\u5b57\u7b26\u7531\u4e24\u4e2a\u5339\u914d\u8bcd\u7ec4\u6210\uff0c\u6b64\u65f6\u540e\u4e00\u4e2a\u8bcd\u7684\u524d\u7f00\u4e0b\u6807\u4e0d\u4f1a\u66f4\u65b0", "\n", "# \u8fd9\u662f\u7531\u4e8eKMP\u7b97\u6cd5\u672c\u8eab\u5bfc\u81f4\u7684\uff0c\u76ee\u524d\u4e0e\u4e0b\u6587\u5faa\u73af\u5bfb\u627e\u6240\u6709\u5339\u914d\u8bcd\u5b58\u5728\u51b2\u7a81", "\n", "# \u4f46\u662f\u95ee\u9898\u4e0d\u5927\uff0c\u56e0\u4e3a\u5176\u6807\u8bb0\u7684\u4f4d\u7f6e\u5747\u4e3a\u5339\u914d\u6210\u529f\u7684\u5b57\u7b26", "\n", "", "if", "single_char", "in", "p", ".", "children", "and", "p", "is", "self", ".", "root", ":", "\n", "                ", "start_index", "=", "i", "\n", "# \u82e5\u627e\u5230\u5339\u914d\u6210\u529f\u7684\u5b57\u7b26\u7ed3\u70b9\uff0c\u5219\u6307\u5411\u90a3\u4e2a\u7ed3\u70b9\uff0c\u5426\u5219\u6307\u5411\u6839\u7ed3\u70b9", "\n", "", "if", "single_char", "in", "p", ".", "children", ":", "\n", "                ", "p", "=", "p", ".", "children", "[", "single_char", "]", "\n", "", "else", ":", "\n", "                ", "start_index", "=", "i", "\n", "p", "=", "self", ".", "root", "\n", "", "temp", "=", "p", "\n", "while", "temp", "is", "not", "self", ".", "root", ":", "\n", "# \u5c3e\u6807\u5fd7\u4e3a0\u4e0d\u5904\u7406\uff0c\u4f46\u662ftail\u9700\u8981-1\u4ece\u800c\u4e0e\u654f\u611f\u8bcd\u5b57\u5178\u4e0b\u6807\u4e00\u81f4", "\n", "# \u5faa\u73af\u539f\u56e0\u5728\u4e8e\uff0c\u6709\u4e9b\u8bcd\u672c\u8eab\u53ea\u662f\u53e6\u4e00\u4e2a\u8bcd\u7684\u540e\u7f00\uff0c\u4e5f\u9700\u8981\u8fa8\u8bc6\u51fa\u6765", "\n", "                ", "if", "temp", ".", "tail", ":", "\n", "                    ", "rst", "[", "self", ".", "words", "[", "temp", ".", "tail", "-", "1", "]", "]", ".", "append", "(", "(", "start_index", ",", "i", ")", ")", "\n", "", "temp", "=", "temp", ".", "fail", "\n", "", "", "return", "rst", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getContext": [[36, 41], ["None"], "function", ["None"], ["def", "getContext", "(", "hyper", ",", "hypo", ",", "use_template", ")", ":", "\n", "    ", "if", "not", "use_template", ":", "\n", "        ", "return", "'%s[SEP]%s\u3002'", "%", "(", "hypo", ",", "hyper", ")", "\n", "", "else", ":", "\n", "        ", "return", "'%s\u662f\u4e00\u79cd%s\u3002'", "%", "(", "hypo", ",", "hyper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getContextList": [[43, 48], ["zip", "context.append", "gzh.getContext"], "function", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertClassifier.getContext"], ["", "", "def", "getContextList", "(", "hypo_lis", ",", "hyper_lis", ")", ":", "\n", "    ", "context", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "hypo_lis", ",", "hyper_lis", ")", ":", "\n", "        ", "context", ".", "append", "(", "getContext", "(", "i", ",", "j", ")", ")", "\n", "", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getMetrics": [[50, 57], ["None"], "function", ["None"], ["", "def", "getMetrics", "(", "tp", ",", "fp", ",", "tn", ",", "fn", ")", ":", "\n", "    ", "num", "=", "(", "tp", "+", "tn", "+", "fp", "+", "fn", ")", "\n", "acc", "=", "(", "tp", "+", "tn", ")", "/", "num", "\n", "pre", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "f1", "=", "2", "*", "pre", "*", "recall", "/", "(", "pre", "+", "recall", ")", "\n", "return", "acc", ",", "pre", ",", "recall", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getDataset": [[59, 71], ["open", "open.close", "line.strip().split", "output_one.append", "output_zero.append", "line.strip"], "function", ["None"], ["", "def", "getDataset", "(", "path", ")", ":", "\n", "    ", "output_one", "=", "[", "]", "\n", "output_zero", "=", "[", "]", "\n", "f", "=", "open", "(", "path", ",", "encoding", "=", "'utf-8'", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "a", ",", "b", ",", "c", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "c", "==", "'1'", ":", "\n", "            ", "output_one", ".", "append", "(", "b", ")", "\n", "", "if", "c", "==", "'0'", ":", "\n", "            ", "output_zero", ".", "append", "(", "b", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "return", "output_one", ",", "output_zero", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getLayer": [[225, 237], ["list", "set", "range", "hypo.keys", "set.add"], "function", ["None"], ["", "", "def", "getLayer", "(", "hypo", ",", "layer_num", ")", ":", "\n", "# \u7b2c\u4e00\u5c42", "\n", "    ", "keys", "=", "list", "(", "hypo", ".", "keys", "(", ")", ")", "\n", "concept", "=", "set", "(", "keys", ")", "\n", "# \u7b2ci+1\u5c42", "\n", "for", "i", "in", "range", "(", "layer_num", "-", "1", ")", ":", "\n", "        ", "for", "key", "in", "keys", ":", "\n", "            ", "if", "key", "in", "hypo", ":", "\n", "                ", "for", "entity", "in", "hypo", "[", "key", "]", ":", "\n", "                    ", "concept", ".", "add", "(", "entity", ")", "\n", "", "", "", "keys", "=", "concept", "\n", "", "return", "concept", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getAcc": [[239, 241], ["None"], "function", ["None"], ["", "def", "getAcc", "(", "labels", ",", "preds", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.toJson": [[243, 248], ["json.dumps", "open", "open.write", "open.close"], "function", ["None"], ["", "def", "toJson", "(", "dic", ",", "path", ")", ":", "\n", "    ", "jsonData", "=", "json", ".", "dumps", "(", "dic", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "f", "=", "open", "(", "path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "f", ".", "write", "(", "jsonData", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.readJson": [[250, 255], ["open", "json.load", "open.close"], "function", ["None"], ["", "def", "readJson", "(", "path", ")", ":", "\n", "    ", "f", "=", "open", "(", "path", ",", "encoding", "=", "'utf-8'", ")", "\n", "jsonData", "=", "json", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "jsonData", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getDesc": [[257, 266], ["list", "set", "getDesc.append", "gzh.getDesc"], "function", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getDesc"], ["", "def", "getDesc", "(", "word", ",", "lis", ":", "list", ",", "hypo", ")", ":", "\n", "    ", "if", "word", "in", "hypo", ":", "\n", "        ", "for", "value", "in", "hypo", "[", "word", "]", ":", "\n", "            ", "if", "value", "in", "lis", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "lis", ".", "append", "(", "value", ")", "\n", "lis", "=", "getDesc", "(", "value", ",", "lis", ",", "hypo", ")", "\n", "", "", "", "return", "list", "(", "set", "(", "lis", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getDummies": [[267, 271], ["None"], "function", ["None"], ["", "def", "getDummies", "(", "label", ",", "size", "=", "2", ")", ":", "\n", "    ", "l", "=", "[", "0", "]", "*", "size", "\n", "l", "[", "label", "]", "=", "1", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.getDataset.getdataset": [[28, 171], ["gzh.dr", "gzh.readJson", "random.sample", "int", "random.sample", "int", "int", "print", "print", "int", "int", "sorted.extend", "sorted.extend", "sorted.extend", "print", "enumerate", "sorted.extend", "sorted.extend", "sorted.extend", "print", "open", "sorted", "open", "sorted", "open", "sorted", "open.close", "print", "print", "gzh.bert_encoder", "open", "print", "time.sleep", "tqdm.tqdm", "open.close", "open", "open.close", "gzh.toJson", "gzh.toJson", "gzh.toJson", "gzh.toJson", "os.path.exists", "os.makedirs", "tqdm.tqdm", "gzh.getDesc", "len", "len", "os.path.join", "open.write", "os.path.join", "open.write", "os.path.join", "open.write", "os.path.join", "ws.append", "batch.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "i[].endswith", "sum", "len", "len", "len", "len", "len", "random.random", "len", "len", "len", "gzh.bert_encoder.", "zip", "open.write", "gzh.getDesc", "i[].endswith", "len", "len", "len", "len", "len", "len", "len", "neg_dataset.append", "neg_dataset.append", "len", "len", "len", "len", "open.write", "open.write", "open.write", "str", "str", "str", "char2id.get", "str", "len", "str", "str", "random.sample", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.readJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.toJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.toJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.toJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.toJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getDesc", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getDesc"], ["def", "getdataset", "(", "data_path", ",", "dataset_path", ")", ":", "\n", "    ", "'''\n\n    :param data_path:\n    :param dataset_path:\n    :return: \u4e0a\u4f4d\u8bcd\uff0c\u4e0b\u4f4d\u8bcd\uff0c\u4e0b\u4f4d\u8bcd\u662f\u5426\u662f\u4e0a\u4f4d\u8bcd\u7684\u5b69\u5b50\uff0c\u4e0b\u4f4d\u8bcd\u662f\u5426\u662f\u4e0a\u4f4d\u8bcd\u7684\u5b50\u5b59\n    '''", "\n", "dr", "=", "gzh", ".", "dr", "(", "data_path", ")", "\n", "hypo", "=", "gzh", ".", "readJson", "(", "dr", ".", "hypo_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dataset_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dataset_path", ")", "\n", "", "desc", "=", "[", "item", "for", "sublist", "in", "[", "gzh", ".", "getDesc", "(", "i", ",", "[", "]", ",", "hypo", ")", "for", "i", "in", "tree", "]", "for", "item", "in", "sublist", "]", "\n", "\n", "all_pairs", "=", "[", "[", "i", ",", "j", ",", "1", ",", "1", "]", "for", "i", "in", "desc", "if", "i", "in", "hypo", "for", "j", "in", "hypo", "[", "i", "]", "]", "\n", "all_pairs", "=", "random", ".", "sample", "(", "all_pairs", ",", "k", "=", "len", "(", "all_pairs", ")", ")", "\n", "no_head_pairs", "=", "[", "i", "for", "i", "in", "all_pairs", "if", "not", "i", "[", "1", "]", ".", "endswith", "(", "i", "[", "0", "]", ")", "]", "\n", "head_pairs", "=", "[", "i", "for", "i", "in", "all_pairs", "if", "i", "[", "1", "]", ".", "endswith", "(", "i", "[", "0", "]", ")", "]", "\n", "\n", "head_size", "=", "int", "(", "len", "(", "no_head_pairs", ")", "*", "head_to_nohead", "[", "0", "]", "/", "sum", "(", "head_to_nohead", ")", ")", "\n", "head_pairs", "=", "random", ".", "sample", "(", "head_pairs", ",", "k", "=", "head_size", ")", "\n", "\n", "# no head", "\n", "train_size", "=", "int", "(", "len", "(", "no_head_pairs", ")", "*", "train_rate", ")", "\n", "val_size", "=", "int", "(", "len", "(", "no_head_pairs", ")", "*", "val_rate", ")", "\n", "# test_size = int(len(no_head_pairs) * test_rate)", "\n", "\n", "trainData", "=", "no_head_pairs", "[", ":", "train_size", "]", "\n", "valData", "=", "no_head_pairs", "[", "train_size", ":", "train_size", "+", "val_size", "]", "\n", "testData", "=", "no_head_pairs", "[", "train_size", "+", "val_size", ":", "]", "\n", "\n", "print", "(", "'\u65e0\u4e2d\u5fc3\u8bcd\u7684\u4e0a\u4e0b\u4f4d\u5173\u7cfb\u603b\u5171\u627e\u5230%d\u4e2a'", "%", "len", "(", "no_head_pairs", ")", ")", "\n", "print", "(", "'\u52a0\u5b8c\u65e0\u4e2d\u5fc3\u8bcd\u7684\u6b63\u4f8b\uff0c\u8bad\u7ec3\u96c6\u4e2a\u6570\uff1a%d\uff0c\u9a8c\u8bc1\u96c6\u4e2a\u6570\uff1a%d\uff0c\u6d4b\u8bd5\u96c6\u4e2a\u6570\uff1a%d'", "%", "(", "len", "(", "trainData", ")", ",", "len", "(", "valData", ")", ",", "len", "(", "testData", ")", ")", ")", "\n", "\n", "# head", "\n", "train_size", "=", "int", "(", "len", "(", "head_pairs", ")", "*", "train_rate", ")", "\n", "val_size", "=", "int", "(", "len", "(", "head_pairs", ")", "*", "val_rate", ")", "\n", "# test_size = int(len(head_pairs) * test_rate)", "\n", "\n", "trainData", ".", "extend", "(", "head_pairs", "[", ":", "train_size", "]", ")", "\n", "valData", ".", "extend", "(", "head_pairs", "[", "train_size", ":", "train_size", "+", "val_size", "]", ")", "\n", "testData", ".", "extend", "(", "head_pairs", "[", "train_size", "+", "val_size", ":", "]", ")", "\n", "\n", "print", "(", "'\u52a0\u5b8c\u6709\u4e2d\u5fc3\u8bcd\u7684\u6b63\u4f8b\uff0c\u8bad\u7ec3\u96c6\u4e2a\u6570\uff1a%d\uff0c\u9a8c\u8bc1\u96c6\u4e2a\u6570\uff1a%d\uff0c\u6d4b\u8bd5\u96c6\u4e2a\u6570\uff1a%d'", "%", "(", "len", "(", "trainData", ")", ",", "len", "(", "valData", ")", ",", "len", "(", "testData", ")", ")", ")", "\n", "\n", "values", "=", "[", "i", "[", "1", "]", "for", "i", "in", "all_pairs", "]", "\n", "# negtive sample", "\n", "neg_dataset", "=", "[", "]", "\n", "for", "dataset", "in", "[", "no_head_pairs", ",", "head_pairs", "]", ":", "\n", "        ", "for", "key", "in", "dataset", ":", "\n", "            ", "i", "=", "random", ".", "random", "(", ")", "\n", "if", "i", ">", "0.5", ":", "\n", "                ", "neg_dataset", ".", "append", "(", "[", "key", "[", "1", "]", ",", "key", "[", "0", "]", ",", "0", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "neg_dataset", ".", "append", "(", "[", "key", "[", "0", "]", ",", "random", ".", "sample", "(", "[", "i", "for", "i", "in", "values", "if", "i", "not", "in", "hypo", "[", "key", "[", "0", "]", "]", "]", ",", "k", "=", "1", ")", "[", "0", "]", ",", "0", ",", "0", "]", ")", "\n", "# \u8ba1\u7b97\u8d1f\u6837\u672c\u4e2d\u7684\u7956\u5148\u5173\u7cfb", "\n", "", "", "", "for", "index", ",", "value", "in", "enumerate", "(", "tqdm", ".", "tqdm", "(", "neg_dataset", ")", ")", ":", "\n", "# \u8fd9\u6b65\u6709\u70b9\u8017\u65f6\uff0c\u540e\u7eed\u53ef\u80fd\u8003\u8651\u4f18\u5316\uff1f", "\n", "        ", "desc", "=", "gzh", ".", "getDesc", "(", "value", "[", "0", "]", ",", "[", "]", ",", "hypo", ")", "\n", "if", "value", "[", "1", "]", "in", "desc", ":", "\n", "            ", "neg_dataset", "[", "index", "]", "[", "-", "1", "]", "=", "1", "\n", "\n", "", "", "train_size", ",", "val_size", "=", "len", "(", "trainData", ")", ",", "len", "(", "valData", ")", "\n", "trainData", ".", "extend", "(", "neg_dataset", "[", ":", "train_size", "]", ")", "\n", "valData", ".", "extend", "(", "neg_dataset", "[", "train_size", ":", "train_size", "+", "val_size", "]", ")", "\n", "testData", ".", "extend", "(", "neg_dataset", "[", "train_size", "+", "val_size", ":", "]", ")", "\n", "# print('\u603b\u5171\u83b7\u5f97\u4e86%d\u4e2a\u8d1f\u4f8b' % len(neg_dataset))", "\n", "print", "(", "'\u52a0\u5b8c\u8d1f\u4f8b\uff0c\u8bad\u7ec3\u96c6\u4e2a\u6570\uff1a%d\uff0c\u9a8c\u8bc1\u96c6\u4e2a\u6570\uff1a%d\uff0c\u6d4b\u8bd5\u96c6\u4e2a\u6570\uff1a%d'", "%", "(", "len", "(", "trainData", ")", ",", "len", "(", "valData", ")", ",", "len", "(", "testData", ")", ")", ")", "\n", "\n", "# \u5199\u5165\u6587\u4ef6", "\n", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'train.txt'", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "trainData", "=", "sorted", "(", "trainData", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "for", "a", ",", "b", ",", "c", ",", "d", "in", "trainData", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "a", ")", "+", "'\\t'", "+", "str", "(", "b", ")", "+", "'\\t'", "+", "str", "(", "c", ")", "+", "'\\t'", "+", "str", "(", "d", ")", "+", "'\\n'", ")", "\n", "\n", "", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'valid.txt'", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "valData", "=", "sorted", "(", "valData", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "for", "a", ",", "b", ",", "c", ",", "d", "in", "valData", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "a", ")", "+", "'\\t'", "+", "str", "(", "b", ")", "+", "'\\t'", "+", "str", "(", "c", ")", "+", "'\\t'", "+", "str", "(", "d", ")", "+", "'\\n'", ")", "\n", "\n", "", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'test.txt'", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "testData", "=", "sorted", "(", "testData", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "for", "a", ",", "b", ",", "c", ",", "d", "in", "testData", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "a", ")", "+", "'\\t'", "+", "str", "(", "b", ")", "+", "'\\t'", "+", "str", "(", "c", ")", "+", "'\\t'", "+", "str", "(", "d", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "# --------------------------------------------------------------------------- #", "\n", "# \u7edf\u8ba1\u5b57\u7b26", "\n", "char2id", "=", "{", "}", "\n", "\n", "# \u7edf\u8ba1\u8bcd\u8bed", "\n", "concept2id", "=", "{", "}", "\n", "\n", "for", "data", "in", "[", "trainData", ",", "valData", ",", "testData", "]", ":", "\n", "        ", "for", "w1", ",", "w2", ",", "label", ",", "_", "in", "data", ":", "\n", "            ", "if", "label", "!=", "1", ":", "\n", "                ", "continue", "\n", "", "for", "w", "in", "[", "w1", ",", "w2", "]", ":", "\n", "                ", "if", "w", "in", "concept2id", ":", "\n", "                    ", "continue", "\n", "", "concept2id", "[", "w", "]", "=", "len", "(", "concept2id", ")", "\n", "for", "c", "in", "w", ":", "\n", "                    ", "char2id", "[", "c", "]", "=", "char2id", ".", "get", "(", "c", ",", "len", "(", "char2id", ")", ")", "\n", "", "", "", "", "print", "(", "'\u5171\u6709%d\u4e2a\u5b57\u7b26'", "%", "len", "(", "char2id", ")", ")", "\n", "print", "(", "'\u5171\u6709%d\u4e2a\u6982\u5ff5'", "%", "len", "(", "concept2id", ")", ")", "\n", "\n", "encoder", "=", "gzh", ".", "bert_encoder", "(", "'mt_bert'", ")", "\n", "\n", "id2concept", "=", "{", "i", ":", "concept2id", "[", "i", "]", "for", "i", "in", "concept2id", "}", "\n", "id2char", "=", "{", "i", ":", "char2id", "[", "i", "]", "for", "i", "in", "char2id", "}", "\n", "\n", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'meituan.content'", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "print", "(", "'\u5f00\u59cb\u8ba1\u7b97content'", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "batch", "=", "[", "]", "\n", "ws", "=", "[", "]", "\n", "for", "w", "in", "tqdm", ".", "tqdm", "(", "concept2id", ")", ":", "\n", "        ", "ws", ".", "append", "(", "w", ")", "\n", "batch", ".", "append", "(", "w", ")", "\n", "if", "len", "(", "batch", ")", "==", "32", ":", "\n", "            ", "outputs", "=", "encoder", "(", "batch", ")", "\n", "for", "output", ",", "w", "in", "zip", "(", "outputs", ",", "ws", ")", ":", "\n", "                ", "f", ".", "write", "(", "str", "(", "concept2id", "[", "w", "]", ")", "+", "'\\t'", ")", "\n", "output", "=", "[", "str", "(", "i", ")", "for", "i", "in", "output", "]", "\n", "f", ".", "write", "(", "'\\t'", ".", "join", "(", "output", ")", "+", "'\\t'", ")", "\n", "f", ".", "write", "(", "w", "+", "'\\n'", ")", "\n", "", "batch", "=", "[", "]", "\n", "ws", "=", "[", "]", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'meituan.graph'", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "for", "dataset", "in", "[", "trainData", ",", "valData", ",", "testData", "]", ":", "\n", "        ", "for", "w1", ",", "w2", ",", "label", ",", "_", "in", "dataset", ":", "\n", "            ", "if", "label", "!=", "1", ":", "\n", "                ", "continue", "\n", "", "f", ".", "write", "(", "str", "(", "concept2id", "[", "w1", "]", ")", "+", "'\\t'", "+", "str", "(", "concept2id", "[", "w2", "]", ")", "+", "'\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "# \u6539\u9020\u7ed3\u675f", "\n", "# --------------------------------------------------------------------------- #", "\n", "\n", "gzh", ".", "toJson", "(", "id2char", ",", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'id2char.json'", ")", ")", "\n", "gzh", ".", "toJson", "(", "char2id", ",", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'char2id.json'", ")", ")", "\n", "gzh", ".", "toJson", "(", "concept2id", ",", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'concept2id.json'", ")", ")", "\n", "gzh", ".", "toJson", "(", "id2concept", ",", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'id2concept.json'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.query2Dishes.query2Dishes.__init__": [[4, 47], ["os.path.join", "os.path.join", "tools.gzh.readJson", "print", "query2Dishes.query2Dishes.zz", "tools.gzh.readJson", "tools.gzh.readJson", "print", "os.listdir", "query2Dishes.query2Dishes.getLayer", "query2Dishes.query2Dishes.bottmUpCollide", "os.path.join", "query2Dishes.query2Dishes.init_poi_dishes"], "methods", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.readJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.query2Dishes.query2Dishes.zz", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.readJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.readJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.query2Dishes.query2Dishes.getLayer", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.query2Dishes.query2Dishes.bottmUpCollide", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.query2Dishes.query2Dishes.init_poi_dishes"], ["    ", "def", "__init__", "(", "self", ",", "num_layer", ":", "int", ",", "data_path", ":", "str", ",", "hypo_json_path", ":", "str", ",", "poi_json_path", ":", "str", ",", "spu_json_path", ":", "str", ",", "dishes_txt_path", ":", "str", ",", "cate_txt_path", ":", "str", ",", "poi_spu_filter_path", ":", "str", ",", "need_init_poi", "=", "True", ",", "poi_stop_num", "=", "10", ")", ":", "\n", "        ", "'''\n        \u521d\u59cb\u5316\n        :param num_layer: \u9700\u8981\u6784\u5efa\u7684taxonomy\u5c42\u6570\n        :param data_path: \u6570\u636e\u96c6\u4fdd\u5b58\u4f4d\u7f6e\n        :param hypo_json_path: \u4e0b\u4f4d\u8bcd\u7684json\u6587\u4ef6\u5730\u5740\n        :param poi_json_path: poi\u7684json\u6587\u4ef6\u5730\u5740\n        :param spu_json_path: spu\u7684json\u6587\u4ef6\u5730\u5740\n        :param dishes_txt_path: \u63a8\u8350\u83dc\u5927\u5168\u7684txt\u6587\u4ef6\u5730\u5740\n        :param cate_txt_path: poi\u79cd\u7c7b\u7684txt\u6587\u4ef6\u5730\u5740\n        :param poi_spu_filter_path: query\u548cpoi\u5173\u8054\u6570\u636e\u7684txt\u6587\u4ef6\u5730\u5740\n        :param need_init_poi: \u662f\u5426\u9700\u8981\u521d\u59cb\u5316poi\n        :param poi_stop_num: \u5904\u7406\u591a\u5c11\u4e2apoi\n        '''", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "num_layer", "=", "num_layer", "\n", "self", ".", "spu_json_path", "=", "spu_json_path", "\n", "self", ".", "hypo_json_path", "=", "hypo_json_path", "\n", "self", ".", "poi_json_path", "=", "poi_json_path", "\n", "self", ".", "dishes_txt_path", "=", "dishes_txt_path", "\n", "self", ".", "cate_txt_path", "=", "cate_txt_path", "\n", "self", ".", "poi_spu_filter_path", "=", "poi_spu_filter_path", "\n", "self", ".", "layer_node_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'layer_node.json'", ")", "\n", "self", ".", "query2poi_fgc_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'poi_fgc_path.json'", ")", "\n", "\n", "# spu\u6587\u4ef6\u521d\u59cb\u5316\u4e0e\u5bfc\u5165", "\n", "# \u5224\u65adspu\u6709\u6ca1\u6709\u521d\u59cb\u5316\u8fc7", "\n", "if", "'spu\u81ea\u5e95\u5411\u4e0a\u649e\u63a8\u8350\u83dc_\u6700\u957f\u5b57\u7b26\u4e32\u5339\u914d.json'", "not", "in", "os", ".", "listdir", "(", "self", ".", "data_path", ")", ":", "\n", "            ", "self", ".", "getLayer", "(", ")", "\n", "self", ".", "bottmUpCollide", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "query2spu_dishes_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'spu\u81ea\u5e95\u5411\u4e0a\u649e\u63a8\u8350\u83dc_\u6700\u957f\u5b57\u7b26\u4e32\u5339\u914d.json'", ")", "\n", "", "self", ".", "spu_dishes", "=", "gzh", ".", "readJson", "(", "self", ".", "query2spu_dishes_path", ")", "\n", "print", "(", "'spu\u521d\u59cb\u5316\u5b8c\u6210'", ")", "\n", "\n", "# poi\u6587\u4ef6\u521d\u59cb\u5316\u4e0e\u5bfc\u5165", "\n", "self", ".", "zz", "(", ")", "\n", "if", "need_init_poi", ":", "\n", "            ", "self", ".", "init_poi_dishes", "(", "stop_num", "=", "poi_stop_num", ")", "\n", "# \u9009\u62e9\u524dc/a\u4e2atype\u7684\u63a8\u8350\u83dc", "\n", "", "self", ".", "query2fgc", "=", "gzh", ".", "readJson", "(", "self", ".", "query2poi_fgc_path", ")", "\n", "self", ".", "poi", "=", "gzh", ".", "readJson", "(", "self", ".", "poi_json_path", ")", "\n", "print", "(", "'poi\u521d\u59cb\u5316\u5b8c\u6210'", ")", "\n", "# \u83b7\u5f97query\u7684poi\u7684\u63a8\u8350\u83dc", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.query2Dishes.query2Dishes.query2poi_dishes": [[48, 72], ["math.ceil", "list", "sorted", "set", "list.extend", "dishes.get", "len"], "methods", ["None"], ["", "def", "query2poi_dishes", "(", "self", ",", "query", ",", "a", ",", "c", ")", ":", "\n", "        ", "'''\n        \u901a\u8fc7query\u83b7\u5f97poi\u7684\u63a8\u8350\u83dc\uff0ca\u548cc\u53ea\u662f\u4e00\u4e2a\u6bd4\u4f8b\uff0c\u53d6\u524dc/a\u4e2a\u5e97\u5373\u53ef\n        :param query:\n        :param a: \u603b\u91cf\n        :param c: \u9009\u62e9\u91cf\n        :return:\n        '''", "\n", "dishes", "=", "{", "}", "\n", "for", "shop", "in", "self", ".", "query2poi", "[", "query", "]", ":", "\n", "            ", "if", "shop", "not", "in", "self", ".", "poi", ":", "\n", "                ", "continue", "\n", "", "for", "dish", "in", "self", ".", "poi", "[", "shop", "]", ":", "\n", "                ", "dishes", "[", "dish", "]", "=", "dishes", ".", "get", "(", "dish", ",", "0", ")", "+", "1", "\n", "\n", "", "", "num", "=", "math", ".", "ceil", "(", "len", "(", "self", ".", "query2fgc", "[", "query", "]", ")", "*", "c", "/", "a", ")", "\n", "return_dishes", "=", "[", "]", "\n", "fgc", "=", "self", ".", "query2fgc", "[", "query", "]", "[", ":", "num", "]", "\n", "for", "shop", "in", "self", ".", "query2poi", "[", "query", "]", ":", "\n", "            ", "if", "self", ".", "poi2fgc", "[", "shop", "]", "in", "fgc", ":", "\n", "                ", "return_dishes", ".", "extend", "(", "[", "i", "for", "i", "in", "self", ".", "poi", "[", "shop", "]", "]", ")", "\n", "", "", "return_dishes", "=", "list", "(", "set", "(", "return_dishes", ")", ")", "\n", "return_dishes", "=", "[", "[", "i", ",", "dishes", "[", "i", "]", "]", "for", "i", "in", "return_dishes", "]", "\n", "return", "sorted", "(", "return_dishes", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "# \u521d\u59cb\u5316\u4e24\u4e2a\u5168\u5c40\u5b57\u5178", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.query2Dishes.query2Dishes.zz": [[73, 98], ["open", "open", "open.close", "line.strip().split", "line.strip().split", "query2Dishes.query2Dishes.query2poi.get", "query2Dishes.query2Dishes.add", "line.strip", "set", "line.strip"], "methods", ["None"], ["", "def", "zz", "(", "self", ")", ":", "\n", "        ", "'''\n        \u521d\u59cb\u5316\u4e24\u4e2a\u4e0epoi\u6709\u5173\u7684\u5b57\u5178\n        poi2fgc\uff1a\u901a\u8fc7poi\u83b7\u5f97\u8fd9\u4e2apoi\u7684\u7ec6\u7c92\u5ea6\u7684\u79cd\u7c7b\n        query2poi\uff1a\u901a\u8fc7query\u83b7\u5f97poi list\n        :return:\n        '''", "\n", "f", "=", "open", "(", "self", ".", "cate_txt_path", ",", "encoding", "=", "'utf-8'", ")", "\n", "# \u6bcf\u4e2apoi\u6709\u54ea\u4e9b\u5206\u7c7b", "\n", "self", ".", "poi2fgc", "=", "{", "}", "\n", "for", "line", "in", "f", ":", "\n", "            ", "poi_id", ",", "name_id", ",", "name", ",", "fgc_id", ",", "fgc", ",", "cgc_id", ",", "cgc", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "self", ".", "poi2fgc", "[", "poi_id", "]", "=", "fgc_id", "\n", "", "f", "=", "open", "(", "self", ".", "poi_spu_filter_path", ",", "encoding", "=", "'utf-8'", ")", "\n", "# query\u5230poi\u7684\u7d22\u5f15", "\n", "self", ".", "query2poi", "=", "{", "}", "\n", "for", "line", "in", "f", ":", "\n", "            ", "try", ":", "\n", "                ", "query", ",", "idd", ",", "name", ",", "num", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "li", "=", "self", ".", "query2poi", ".", "get", "(", "query", ",", "set", "(", ")", ")", "\n", "li", ".", "add", "(", "idd", ")", "\n", "self", ".", "query2poi", "[", "query", "]", "=", "li", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "", "f", ".", "close", "(", ")", "\n", "# poi\u6587\u4ef6\u521d\u59cb\u5316\u4e0e\u5bfc\u5165", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.query2Dishes.query2Dishes.init_poi_dishes": [[99, 130], ["tools.gzh.readJson", "tools.gzh.readJson", "enumerate", "tools.gzh.toJson", "tqdm.tqdm", "tools.gzh.Trie", "sorted", "query2fgc_count[].items", "tools.gzh.Trie.search", "query2fgc_count[].get"], "methods", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.readJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.readJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.toJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.Trie.search"], ["", "def", "init_poi_dishes", "(", "self", ",", "stop_num", "=", "10", ")", ":", "\n", "        ", "'''\n        \u521d\u59cb\u5316poi\u6587\u4ef6\n        :param stop_num: \u9700\u8981\u521d\u59cb\u5316\u591a\u5c11\u4e2apoi\u6587\u4ef6\uff08\u5982\u679c\u9700\u8981\u521d\u59cb\u5316\u5168\u90e8poi\u6587\u4ef6\uff0c\u5219\u9700\u8981\u5c06stop_num\u8bbe\u7f6e\u4e3a\u8d1f\u6570\uff09\n        :return:\n        '''", "\n", "poi", "=", "gzh", ".", "readJson", "(", "gzh", ".", "poi_path", ")", "\n", "hypo", "=", "gzh", ".", "readJson", "(", "gzh", ".", "hypo_path", ")", "\n", "query2fgc_count", "=", "{", "}", "\n", "query2fgc", "=", "{", "}", "\n", "\n", "for", "index", ",", "query", "in", "enumerate", "(", "tqdm", ".", "tqdm", "(", "self", ".", "query2poi", ")", ")", ":", "\n", "            ", "if", "query", "not", "in", "[", "'\u8461\u8404'", ",", "'\u829d\u58eb\u8461\u8404'", ",", "'\u91d1\u9999\u8461\u8404'", ",", "'\u9c9c\u8461\u8404'", ",", "'\u8461\u8404\u5e72'", "]", ":", "\n", "                ", "continue", "\n", "", "if", "index", "==", "stop_num", ":", "\n", "                ", "break", "\n", "", "if", "query", "not", "in", "hypo", ":", "\n", "                ", "continue", "\n", "", "if", "query", "not", "in", "query2fgc_count", ":", "\n", "                ", "query2fgc_count", "[", "query", "]", "=", "{", "}", "\n", "", "ac", "=", "gzh", ".", "Trie", "(", "hypo", "[", "query", "]", ")", "\n", "for", "shop", "in", "self", ".", "query2poi", "[", "query", "]", ":", "\n", "                ", "if", "shop", "not", "in", "self", ".", "poi2fgc", ":", "\n", "                    ", "continue", "\n", "", "for", "dish", "in", "poi", "[", "shop", "]", ":", "\n", "                    ", "txt", "=", "ac", ".", "search", "(", "dish", ")", "\n", "if", "txt", ":", "\n", "                        ", "query2fgc_count", "[", "query", "]", "[", "self", ".", "poi2fgc", "[", "shop", "]", "]", "=", "query2fgc_count", "[", "query", "]", ".", "get", "(", "self", ".", "poi2fgc", "[", "shop", "]", ",", "0", ")", "+", "1", "\n", "", "", "", "query2fgc_count", "[", "query", "]", "=", "sorted", "(", "query2fgc_count", "[", "query", "]", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "query2fgc", "[", "query", "]", "=", "[", "i", "[", "0", "]", "for", "i", "in", "query2fgc_count", "[", "query", "]", "]", "\n", "", "gzh", ".", "toJson", "(", "query2fgc", ",", "self", ".", "query2poi_fgc_path", ")", "\n", "# \u83b7\u5f97query\u7684spu\u649e\u51fa\u6765\u7684\u63a8\u8350\u83dc", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.query2Dishes.query2Dishes.query2spu_dishes": [[131, 139], ["sorted"], "methods", ["None"], ["", "def", "query2spu_dishes", "(", "self", ",", "query", ":", "str", ")", ":", "\n", "        ", "'''\n        \u901a\u8fc7query\u83b7\u5f97spu\u649e\u51fa\u6765\u7684\u63a8\u8350\u83dc\n        :param query:\n        :return:\n        '''", "\n", "if", "query", "in", "self", ".", "spu_dishes", ":", "\n", "            ", "return", "sorted", "(", "self", ".", "spu_dishes", "[", "query", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "# \u5bfc\u51fa\u91cd\u6784\u7684json", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.query2Dishes.query2Dishes.getLayer": [[140, 169], ["tools.gzh.readJson", "set", "print", "range", "tools.gzh.toJson", "tools.gzh.readJson.keys", "print", "len", "in_node.items", "in_node.items", "len"], "methods", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.readJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.toJson"], ["", "", "def", "getLayer", "(", "self", ")", ":", "\n", "        ", "'''\n        \u8ba1\u7b97hypo\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u5904\u4e8e\u54ea\u4e00\u5c42\uff0c\u65b9\u9762\u4ece\u4e0b\u5f80\u4e0a\u904d\u5386\n        :return:\n        '''", "\n", "hypo", "=", "gzh", ".", "readJson", "(", "self", ".", "hypo_json_path", ")", "\n", "# \u5165\u5ea6", "\n", "nodes", "=", "set", "(", "hypo", ".", "keys", "(", ")", ")", "\n", "\n", "num_layer", "=", "self", ".", "num_layer", "\n", "index", "=", "1", "\n", "layer", "=", "{", "}", "\n", "print", "(", "'hypo\u5171\u6709%d\u4e2a\u7ed3\u70b9'", "%", "len", "(", "nodes", ")", ")", "\n", "for", "_", "in", "range", "(", "num_layer", ")", ":", "\n", "            ", "in_node", "=", "{", "}", "\n", "\n", "for", "node", "in", "nodes", ":", "\n", "                ", "in_node", "[", "node", "]", "=", "0", "\n", "", "for", "key", "in", "nodes", ":", "\n", "                ", "if", "key", "not", "in", "hypo", ":", "\n", "                    ", "continue", "\n", "", "for", "entity", "in", "hypo", "[", "key", "]", ":", "\n", "                    ", "if", "entity", "in", "in_node", ":", "\n", "                        ", "in_node", "[", "key", "]", "+=", "1", "\n", "", "", "", "layer", "[", "index", "]", "=", "[", "i", "[", "0", "]", "for", "i", "in", "in_node", ".", "items", "(", ")", "if", "i", "[", "1", "]", "==", "0", "]", "\n", "nodes", "=", "[", "i", "[", "0", "]", "for", "i", "in", "in_node", ".", "items", "(", ")", "if", "i", "[", "1", "]", "!=", "0", "]", "\n", "print", "(", "'%d\u5c42\u5171\u6709%d\u4e2a\u7ed3\u70b9'", "%", "(", "index", ",", "len", "(", "layer", "[", "index", "]", ")", ")", ")", "\n", "index", "+=", "1", "\n", "", "gzh", ".", "toJson", "(", "layer", ",", "self", ".", "layer_node_path", ")", "\n", "# \u81ea\u5e95\u5411\u4e0aspu\u649e\u63a8\u8350\u83dc", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.query2Dishes.query2Dishes.bottmUpCollide": [[170, 268], ["tools.gzh.readJson", "open", "set", "open.close", "tools.gzh.readJson", "print", "print", "os.path.join", "tools.gzh.toJson", "set.add", "tools.gzh.Trie", "print", "time.time", "ac[].add_words", "print", "ac.pop", "hyper.get.append", "len", "sorted", "enumerate", "line.split", "len", "len", "str", "count.append", "hyper.get", "hyper.get.append", "str", "ac[].search", "[].items", "len", "len", "len", "len", "len", "new_trying.append", "time.time", "len", "len", "ac[].search.items", "set.remove", "str", "[].get"], "methods", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.readJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.readJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.toJson", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.Trie.add_words", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.Trie.search"], ["", "def", "bottmUpCollide", "(", "self", ")", ":", "\n", "        ", "'''\n        \u54ce\u2026\u2026\u4e71\u4e03\u516b\u7cdf\u4e00\u5806\u4e1c\u897f\uff0c\u53cd\u6b63\u5b9e\u73b0\u4e86\u9700\u6c42hhh\n        :return:\n        '''", "\n", "# \u51c6\u5907\u6570\u636e", "\n", "layer", "=", "gzh", ".", "readJson", "(", "self", ".", "layer_node_path", ")", "\n", "f", "=", "open", "(", "self", ".", "dishes_txt_path", ",", "encoding", "=", "'utf-8'", ")", "\n", "new_dishes", "=", "set", "(", ")", "\n", "for", "line", "in", "f", ":", "\n", "            ", "new_dishes", ".", "add", "(", "line", ".", "split", "(", "'\\t'", ")", "[", "0", "]", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "spu", "=", "gzh", ".", "readJson", "(", "self", ".", "spu_json_path", ")", "\n", "\n", "for", "key", "in", "spu", ":", "\n", "            ", "li", "=", "[", "]", "\n", "for", "d", "in", "spu", "[", "key", "]", ":", "\n", "                ", "li", ".", "append", "(", "d", "[", "0", "]", ")", "\n", "", "spu", "[", "key", "]", "=", "li", "\n", "\n", "# \u904d\u5386\u51e0\u5c42", "\n", "#num_layer = 2", "\n", "", "i", "=", "self", ".", "num_layer", "\n", "find", "=", "{", "}", "\n", "print", "(", "'\u603b\u5171\u6709%d\u4e2a\u6709spu\u7684\u6982\u5ff5\uff0c\u603b\u5171\u6709%d\u4efd\u63a8\u8350\u83dc\u3002'", "%", "(", "len", "(", "spu", ")", ",", "len", "(", "new_dishes", ")", ")", ")", "\n", "ac", "=", "{", "}", "\n", "while", "(", "i", "!=", "0", ")", ":", "\n", "            ", "find", "[", "i", "]", "=", "{", "}", "\n", "# ac\u81ea\u52a8\u673a", "\n", "ac", "[", "i", "]", "=", "gzh", ".", "Trie", "(", ")", "\n", "dishes", "=", "new_dishes", "\n", "# \u5efa\u7acbspu\u5230concept\u7684\u7d22\u5f15", "\n", "hyper", "=", "{", "}", "\n", "count", "=", "[", "]", "\n", "for", "key", "in", "layer", "[", "str", "(", "i", ")", "]", ":", "\n", "                ", "if", "key", "not", "in", "spu", ":", "\n", "                    ", "count", ".", "append", "(", "key", ")", "\n", "continue", "\n", "", "for", "entity", "in", "spu", "[", "key", "]", ":", "\n", "                    ", "li", "=", "hyper", ".", "get", "(", "entity", ",", "[", "]", ")", "\n", "li", ".", "append", "(", "key", ")", "\n", "hyper", "[", "entity", "]", "=", "li", "\n", "", "", "print", "(", "\n", "'\u5f53\u524d\u662f\u7b2c%d\u5c42\uff0c\u5269\u4f59%d\u4e2a\u63a8\u8350\u83dc\uff0chypo\u6587\u4ef6\u4e2d\u8be5\u5c42\u6709%d\u4e2a\u6982\u5ff5\u7ed3\u70b9,\u5176\u4e2d\u6709%d\u4e2a\u6982\u5ff5\u7ed3\u70b9\u6ca1\u6709spu'", "%", "(", "i", ",", "len", "(", "dishes", ")", ",", "len", "(", "layer", "[", "str", "(", "i", ")", "]", ")", ",", "len", "(", "count", ")", ")", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ac", "[", "i", "]", ".", "add_words", "(", "dishes", ")", "\n", "print", "(", "'\u7b2c%d\u5c42\u81ea\u52a8\u673a\u6784\u5efa\u5b8c\u6210,\u8017\u65f6%.1f'", "%", "(", "i", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "for", "key", "in", "layer", "[", "str", "(", "i", ")", "]", ":", "\n", "                ", "num", "=", "0", "\n", "find_num", "=", "0", "\n", "if", "key", "in", "count", ":", "\n", "                    ", "continue", "\n", "", "for", "s", "in", "spu", "[", "key", "]", ":", "\n", "                    ", "num", "+=", "1", "\n", "txt", "=", "ac", "[", "i", "]", ".", "search", "(", "s", ")", "\n", "if", "txt", ":", "\n", "# spu\u649e\u5230\u7684\u63a8\u8350\u83dc", "\n", "                        ", "find_num", "+=", "1", "\n", "match", "=", "[", "j", "[", "0", "]", "for", "j", "in", "txt", ".", "items", "(", ")", "]", "\n", "for", "dish", "in", "match", ":", "\n", "                            ", "try", ":", "\n", "                                ", "new_dishes", ".", "remove", "(", "dish", ")", "\n", "", "except", ":", "\n", "                                ", "pass", "\n", "# \u904d\u5386\u8fd9\u4e2aspu\u7684concept", "\n", "", "for", "concept", "in", "hyper", "[", "s", "]", ":", "\n", "                                ", "if", "concept", "not", "in", "find", "[", "i", "]", ":", "\n", "                                    ", "find", "[", "i", "]", "[", "concept", "]", "=", "{", "}", "\n", "", "find", "[", "i", "]", "[", "concept", "]", "[", "dish", "]", "=", "find", "[", "i", "]", "[", "concept", "]", ".", "get", "(", "dish", ",", "0", ")", "+", "1", "\n", "", "", "", "", "", "ac", ".", "pop", "(", "i", ")", "\n", "i", "-=", "1", "\n", "", "print", "(", "'\u5269\u4f59\u63a8\u8350\u83dc%d'", "%", "len", "(", "new_dishes", ")", ")", "\n", "del", "new_dishes", "\n", "# \u6700\u957f\u5339\u914d", "\n", "for", "layer_index", "in", "find", ":", "\n", "            ", "for", "concept", "in", "find", "[", "layer_index", "]", ":", "\n", "                ", "new_trying", "=", "[", "]", "\n", "trying", "=", "sorted", "(", "find", "[", "layer_index", "]", "[", "concept", "]", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "0", "]", ")", ")", "\n", "for", "index", ",", "i", "in", "enumerate", "(", "trying", ")", ":", "\n", "                    ", "if", "len", "(", "i", "[", "0", "]", ")", "<", "2", ":", "\n", "                        ", "continue", "\n", "", "length", "=", "len", "(", "i", "[", "0", "]", ")", "\n", "mark", "=", "True", "\n", "for", "j", "in", "trying", "[", "index", ":", "]", ":", "\n", "                        ", "if", "len", "(", "j", "[", "0", "]", ")", "<=", "length", ":", "\n", "                            ", "continue", "\n", "", "if", "i", "[", "0", "]", "in", "j", "[", "0", "]", ":", "\n", "                            ", "mark", "=", "False", "\n", "break", "\n", "", "", "if", "mark", ":", "\n", "                        ", "new_trying", ".", "append", "(", "[", "i", "[", "0", "]", ",", "i", "[", "1", "]", "]", ")", "\n", "", "", "find", "[", "layer_index", "]", "[", "concept", "]", "=", "new_trying", "\n", "", "", "new_find", "=", "{", "}", "\n", "for", "la", "in", "find", ":", "\n", "            ", "for", "key", "in", "find", "[", "la", "]", ":", "\n", "                ", "new_find", "[", "key", "]", "=", "find", "[", "la", "]", "[", "key", "]", "\n", "", "", "self", ".", "query2spu_dishes_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'spu\u81ea\u5e95\u5411\u4e0a\u649e\u63a8\u8350\u83dc_\u6700\u957f\u5b57\u7b26\u4e32\u5339\u914d.json'", ")", "\n", "gzh", ".", "toJson", "(", "new_find", ",", "self", ".", "query2spu_dishes_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.GCNClassifier.GCN.__init__": [[30, 40], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "GCNClassifier.GCN.gcs.append", "range", "GCNClassifier.GCN.gcs.append", "torch.Linear", "torch.Linear", "torch.Linear", "model.GCN.layers.GraphConvolution", "GCNClassifier.GCN.gcs.append", "model.GCN.layers.GraphConvolution", "model.GCN.layers.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", "=", "config", ".", "nfeat", ",", "nhid", "=", "config", ".", "nhid", ",", "nclass", "=", "1", ",", "dropout", "=", "config", ".", "dropout", ",", "layer_num", "=", "2", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "gcs", ".", "append", "(", "GraphConvolution", "(", "nfeat", ",", "nhid", ")", ")", "\n", "for", "i", "in", "range", "(", "layer_num", "-", "2", ")", ":", "\n", "            ", "self", ".", "gcs", ".", "append", "(", "GraphConvolution", "(", "nhid", ",", "nhid", ")", ")", "\n", "", "self", ".", "gcs", ".", "append", "(", "GraphConvolution", "(", "nhid", ",", "nclass", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nhid", "*", "2", ",", "nclass", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.GCNClassifier.GCN.forward": [[41, 53], ["enumerate", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "layer", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "'''\n        :param x:\n        :param adj:\n        :return:\n        '''", "\n", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "gcs", ")", ":", "\n", "            ", "if", "index", "==", "len", "(", "self", ".", "gcs", ")", "-", "1", ":", "break", "\n", "x", "=", "F", ".", "relu", "(", "layer", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "self", ".", "gcs", "[", "-", "1", "]", "(", "x", ",", "adj", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.GCNClassifier.GCN.forward_2": [[54, 70], ["enumerate", "enumerate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "new_x.reshape.reshape.reshape", "GCNClassifier.GCN.fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "enumerate", "layer", "len", "new_x.reshape.reshape.append", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu", "torch.dropout.detach().cpu", "torch.dropout.detach", "torch.dropout.detach"], "methods", ["None"], ["", "def", "forward_2", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "gcs", ")", ":", "\n", "            ", "if", "index", "==", "len", "(", "self", ".", "gcs", ")", "-", "1", ":", "break", "\n", "x", "=", "F", ".", "relu", "(", "layer", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "# \u5148\u7528\u4e00\u79cd\u5f88low\u7684\u65b9\u6cd5\u5e76\u4e14\u5f88\u8017\u65f6\u7684\u65b9\u6cd5\uff0c\u540e\u7eed\u8003\u8651\u80fd\u5426\u76f4\u63a5\u4f7f\u7528\u77e9\u9635\u8ba1\u7b97\u5f97\u5230", "\n", "", "new_x", "=", "[", "]", "\n", "for", "index1", ",", "line1", "in", "enumerate", "(", "adj", ")", ":", "\n", "            ", "for", "index2", ",", "line2", "in", "enumerate", "(", "line1", ")", ":", "\n", "                ", "if", "line2", ">", "0", ":", "\n", "                    ", "new_x", ".", "append", "(", "[", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index1", "]", ",", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index2", "]", "]", ")", "\n", "", "", "", "new_x", "=", "torch", ".", "tensor", "(", "new_x", ")", "\n", "new_x", "=", "new_x", ".", "reshape", "(", "new_x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "# print('new_x shape', new_x.shape)", "\n", "x", "=", "self", ".", "fc", "(", "new_x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.GCNClassifier.GCN.get_embedding": [[71, 77], ["enumerate", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "layer", "len"], "methods", ["None"], ["", "def", "get_embedding", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "gcs", ")", ":", "\n", "            ", "if", "index", "==", "len", "(", "self", ".", "gcs", ")", "-", "1", ":", "break", "\n", "x", "=", "F", ".", "relu", "(", "layer", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.GCNClassifier.getFeatureAdj": [[79, 113], ["gzh.bert_encoder", "set", "print", "print", "graph.get", "graph.get.add", "adj.append", "graph.get", "features.append", "float", "float", "enumerate", "set", "numpy.array", "numpy.array", "len", "gzh.bert_encoder."], "function", ["None"], ["", "", "def", "getFeatureAdj", "(", "data", ")", ":", "\n", "    ", "from", "tools", "import", "gzh", "\n", "bert_pre", "=", "config", ".", "bert_pre", "\n", "encoder", "=", "gzh", ".", "bert_encoder", "(", "bert_pre", ")", "\n", "\n", "words", "=", "set", "(", "[", "item", "for", "sublist", "in", "[", "[", "i", "[", "0", "]", ",", "i", "[", "1", "]", "]", "for", "i", "in", "data", "]", "for", "item", "in", "sublist", "]", ")", "\n", "\n", "word2id", "=", "{", "i", ":", "j", "for", "j", ",", "i", "in", "enumerate", "(", "words", ")", "}", "\n", "id2word", "=", "{", "word2id", "[", "i", "]", ":", "i", "for", "i", "in", "word2id", "}", "\n", "\n", "temp", "=", "[", "[", "word2id", "[", "i", "[", "0", "]", "]", ",", "word2id", "[", "i", "[", "1", "]", "]", "]", "for", "i", "in", "data", "]", "\n", "graph", "=", "{", "}", "\n", "for", "a", ",", "b", "in", "temp", ":", "\n", "        ", "li", "=", "graph", ".", "get", "(", "a", ",", "set", "(", ")", ")", "\n", "li", ".", "add", "(", "b", ")", "\n", "graph", "[", "a", "]", "=", "li", "\n", "", "del", "(", "temp", ")", "\n", "\n", "adj", "=", "[", "]", "\n", "for", "d", "in", "id2word", ":", "\n", "        ", "adj", ".", "append", "(", "[", "0.", "]", "*", "len", "(", "word2id", ")", ")", "\n", "for", "dd", "in", "graph", ".", "get", "(", "d", ",", "[", "]", ")", ":", "\n", "            ", "adj", "[", "-", "1", "]", "[", "dd", "]", "=", "1.", "\n", "", "", "del", "(", "graph", ")", "\n", "print", "(", "'adj shape'", ",", "np", ".", "array", "(", "adj", ")", ".", "shape", ")", "\n", "\n", "features", "=", "[", "]", "\n", "for", "word", "in", "word2id", ":", "\n", "        ", "features", ".", "append", "(", "encoder", "(", "[", "word", "]", ")", "[", "0", "]", ")", "\n", "", "print", "(", "'feature shape'", ",", "np", ".", "array", "(", "features", ")", ".", "shape", ")", "\n", "\n", "childs", "=", "[", "float", "(", "i", "[", "2", "]", ")", "for", "i", "in", "data", "]", "\n", "ances", "=", "[", "float", "(", "i", "[", "3", "]", ")", "for", "i", "in", "data", "]", "\n", "return", "features", ",", "adj", ",", "childs", ",", "ances", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.GCNClassifier.trainGCN": [[115, 124], ["model.train", "optimizer.zero_grad", "model.forward_2", "creiterion", "creiterion.backward", "optimizer.step", "torch.tensor", "torch.tensor", "torch.tensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "model.forward_2.reshape", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "sorted"], "function", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.train.train", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.models.GCN.forward_2"], ["", "def", "trainGCN", "(", "model", ",", "optimizer", ",", "creiterion", ",", "features", ",", "adj", ",", "childs", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "model", ".", "forward_2", "(", "torch", ".", "tensor", "(", "features", ")", ",", "torch", ".", "FloatTensor", "(", "adj", ")", ")", "\n", "epoch_loss", "=", "creiterion", "(", "outputs", ".", "reshape", "(", "-", "1", ")", ",", "torch", ".", "FloatTensor", "(", "sorted", "(", "childs", ",", "reverse", "=", "True", ")", "[", ":", "outputs", ".", "shape", "[", "0", "]", "]", ")", ")", "\n", "epoch_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "epoch_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.GCNClassifier.predictGCN": [[126, 163], ["model.eval", "model.forward_2().reshape", "zip", "gzh.getMetrics", "gzh.getMetrics", "model.forward_2().reshape.cpu().detach().numpy", "torch.FloatTensor().cpu().detach().numpy", "torch.FloatTensor().cpu().detach().numpy", "torch.FloatTensor().cpu().detach().numpy", "torch.FloatTensor().cpu().detach().numpy", "torch.FloatTensor().cpu().detach().numpy", "torch.FloatTensor().cpu().detach().numpy", "model.forward_2", "torch.tensor", "torch.tensor", "torch.tensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "model.forward_2().reshape.cpu().detach", "torch.FloatTensor().cpu().detach", "torch.FloatTensor().cpu().detach", "torch.FloatTensor().cpu().detach", "torch.FloatTensor().cpu().detach", "torch.FloatTensor().cpu().detach", "torch.FloatTensor().cpu().detach", "model.forward_2().reshape.cpu", "torch.FloatTensor().cpu", "torch.FloatTensor().cpu", "torch.FloatTensor().cpu", "torch.FloatTensor().cpu", "torch.FloatTensor().cpu", "torch.FloatTensor().cpu", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "sorted", "sorted"], "function", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getMetrics", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getMetrics", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.models.GCN.forward_2"], ["", "def", "predictGCN", "(", "model", ",", "features", ",", "adj", ",", "childs", ",", "ances", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "outputs", "=", "model", ".", "forward_2", "(", "torch", ".", "tensor", "(", "features", ")", ",", "torch", ".", "FloatTensor", "(", "adj", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "answers", ",", "labels", ",", "labelsa", "=", "outputs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "torch", ".", "FloatTensor", "(", "\n", "sorted", "(", "childs", ",", "reverse", "=", "True", ")", "[", ":", "outputs", ".", "shape", "[", "0", "]", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "torch", ".", "FloatTensor", "(", "\n", "sorted", "(", "ances", ",", "reverse", "=", "True", ")", "[", ":", "outputs", ".", "shape", "[", "0", "]", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "tp", ",", "fp", ",", "tn", ",", "fn", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "tpa", ",", "fpa", ",", "tna", ",", "fna", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "a", ",", "l", ",", "la", "in", "zip", "(", "answers", ",", "labels", ",", "labelsa", ")", ":", "\n", "        ", "if", "a", ">", "0.5", ":", "\n", "            ", "if", "l", "==", "1", ":", "\n", "                ", "tp", "+=", "1", "\n", "", "else", ":", "\n", "                ", "fp", "+=", "1", "\n", "", "if", "la", "==", "1", ":", "\n", "                ", "tpa", "+=", "1", "\n", "", "else", ":", "\n", "                ", "fpa", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "if", "l", "==", "0", ":", "\n", "                ", "tn", "+=", "1", "\n", "", "else", ":", "\n", "                ", "fn", "+=", "1", "\n", "", "if", "la", "==", "0", ":", "\n", "                ", "tna", "+=", "1", "\n", "", "else", ":", "\n", "                ", "fna", "+=", "1", "\n", "\n", "# # acc = accuracy_score(outputs.cpu().detach().numpy(), torch.FloatTensor(sorted(childs, reverse=True)[:outputs.shape[0]]).cpu().detach().numpy())", "\n", "# f1 = f1_score(outputs.cpu().detach().numpy(),", "\n", "#               torch.FloatTensor(sorted(childs, reverse=True)[:outputs.shape[0]]).cpu().detach().numpy())", "\n", "# f1a = f1_score(outputs.cpu().detach().numpy(),", "\n", "#                torch.FloatTensor(sorted(ances, reverse=True)[:outputs.shape[0]]).cpu().detach().numpy())", "\n", "", "", "", "from", "tools", "import", "gzh", "\n", "acc", ",", "pre", ",", "recall", ",", "f1", "=", "gzh", ".", "getMetrics", "(", "tp", ",", "fp", ",", "tn", ",", "fn", ")", "\n", "acca", ",", "prea", ",", "recalla", ",", "f1a", "=", "gzh", ".", "getMetrics", "(", "tpa", ",", "fpa", ",", "tna", ",", "fna", ")", "\n", "return", "acc", ",", "f1", ",", "f1a", "\n", "", ""]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertClassifier.bertClassifier.__init__": [[26, 38], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "BertClassifier.bertClassifier.model.to", "BertClassifier.bertClassifier.linear.to", "pytorch_transformers.BertTokenizer.from_pretrained", "pytorch_transformers.BertModel.from_pretrained", "pytorch_transformers.BertTokenizer.from_pretrained", "pytorch_transformers.BertModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "super", "(", "bertClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "bert_pre", "==", "'chinese-base-bert'", ":", "\n", "            ", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "bert_model", ")", "\n", "self", ".", "model", "=", "BertModel", ".", "from_pretrained", "(", "bert_model", ")", "\n", "", "elif", "bert_pre", "==", "'mt_bert'", ":", "\n", "            ", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "mt_bert", ")", "\n", "self", ".", "model", "=", "BertModel", ".", "from_pretrained", "(", "mt_bert", ")", "\n", "", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "768", ",", "1", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "model", ".", "to", "(", "device", ")", "\n", "self", ".", "linear", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertClassifier.bertClassifier.forward": [[39, 44], ["BertClassifier.bertClassifier.linear", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "BertClassifier.bertClassifier.model", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "BertClassifier.bertClassifier.tokenizer.convert_tokens_to_ids", "max", "BertClassifier.bertClassifier.tokenizer.tokenize", "len", "BertClassifier.bertClassifier.tokenizer.tokenize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sentence", ",", "max_len", "=", "16", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "torch", ".", "tensor", "(", "[", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "i", ")", ")", "[", ":", "max_len", "]", "+", "[", "\n", "0", "]", "*", "max", "(", "0", ",", "max_len", "-", "len", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "i", ")", ")", ")", "for", "i", "in", "sentence", "]", ")", ".", "to", "(", "self", ".", "device", ")", ")", "[", "1", "]", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertClassifier.myDataset.__init__": [[51, 57], ["len", "numpy.array", "numpy.array", "numpy.array", "BertClassifier.getContext", "float", "float"], "methods", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertClassifier.getContext"], ["    ", "def", "__init__", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "len", "=", "len", "(", "data", ")", "\n", "\n", "self", ".", "data", "=", "np", ".", "array", "(", "[", "getContext", "(", "x", ")", "for", "x", "in", "data", "]", ")", "\n", "self", ".", "child", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "2", "]", ")", "for", "x", "in", "data", "]", ")", "\n", "self", ".", "ance", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "3", "]", ")", "for", "x", "in", "data", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertClassifier.myDataset.__getitem__": [[58, 61], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "child", "[", "index", "]", ",", "self", ".", "ance", "[", "index", "]", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertClassifier.myDataset.__len__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertClassifier.getContext": [[46, 48], ["config.template"], "function", ["None"], ["", "", "def", "getContext", "(", "x", ")", ":", "\n", "    ", "return", "config", ".", "template", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertClassifier.trainClassifier": [[66, 105], ["model.train", "BertClassifier.myDataset", "torch.utils.data.DataLoader", "train.copy", "model", "zip", "torch.DoubleTensor().to().reshape", "torch.DoubleTensor().to().reshape", "torch.DoubleTensor().to().reshape", "criterion", "criterion.item", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "torch.save", "torch.save", "torch.save", "torch.DoubleTensor().to().reshape.float", "model.state_dict", "torch.DoubleTensor().to", "torch.DoubleTensor().to", "torch.DoubleTensor().to", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor"], "function", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.train.train"], ["", "", "def", "trainClassifier", "(", "train", ",", "model", ",", "criterion", ",", "optimizer", ",", "batch_size", ",", "save_model", ")", ":", "\n", "    ", "global", "myDataset", "\n", "model", ".", "train", "(", ")", "\n", "dataset", "=", "myDataset", "(", "train", ".", "copy", "(", ")", ")", "\n", "# train_loader = DataLoader(dataset=myDataset, batch_size=batch_size, shuffle=True)", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "epoch_loss", "=", "0", "\n", "tp", "=", "0", "\n", "tn", "=", "0", "\n", "fp", "=", "0", "\n", "fn", "=", "0", "\n", "for", "x", ",", "childs", ",", "_", "in", "train_loader", ":", "\n", "        ", "outputs", "=", "model", "(", "x", ")", "\n", "for", "l", ",", "o", "in", "zip", "(", "childs", ",", "outputs", ")", ":", "\n", "            ", "if", "l", "==", "1", ":", "\n", "                ", "if", "o", ">", "0.5", ":", "\n", "                    ", "tp", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "fn", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "if", "o", ">", "0.5", ":", "\n", "                    ", "fp", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "tn", "+=", "1", "\n", "", "", "", "labels", "=", "torch", ".", "DoubleTensor", "(", "childs", ")", ".", "to", "(", "'cuda'", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ".", "float", "(", ")", ")", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "if", "save_model", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'./model/pkls/BertClassifier.pkl'", ")", "\n", "", "num", "=", "(", "tp", "+", "tn", "+", "fp", "+", "fn", ")", "\n", "acc", "=", "(", "tp", "+", "tn", ")", "/", "num", "\n", "pre", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "f1", "=", "2", "*", "pre", "*", "recall", "/", "(", "pre", "+", "recall", ")", "\n", "aa", "=", "'\u8bad\u7ec3\u96c6\u6570\u636e\uff1aEdge \u51c6\u786e\u7387%.4f\uff0cf1:%.4f'", "%", "(", "acc", ",", "f1", ")", "\n", "return", "epoch_loss", ",", "aa", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertClassifier.predictClassifier": [[107, 158], ["model.eval", "BertClassifier.myDataset", "torch.utils.data.DataLoader", "test.copy", "model", "zip", "zip", "int", "int"], "function", ["None"], ["", "def", "predictClassifier", "(", "test", ",", "model", ",", "batch_size", ")", ":", "\n", "    ", "global", "myDataset", "\n", "model", ".", "eval", "(", ")", "\n", "dataset", "=", "myDataset", "(", "test", ".", "copy", "(", ")", ")", "\n", "# train_loader = DataLoader(dataset=myDataset, batch_size=batch_size, shuffle=True)", "\n", "test_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "tp", "=", "0", "\n", "tn", "=", "0", "\n", "fp", "=", "0", "\n", "fn", "=", "0", "\n", "\n", "tpa", "=", "0", "\n", "tna", "=", "0", "\n", "fpa", "=", "0", "\n", "fna", "=", "0", "\n", "for", "x", ",", "childs", ",", "ances", "in", "test_loader", ":", "\n", "        ", "outputs", "=", "model", "(", "x", ")", "\n", "for", "output", ",", "label", "in", "zip", "(", "outputs", ",", "childs", ")", ":", "\n", "            ", "if", "int", "(", "label", ")", "==", "1", ":", "\n", "                ", "if", "output", ">", "0.5", ":", "\n", "                    ", "tp", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "fn", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "if", "output", ">", "0.5", ":", "\n", "                    ", "fp", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "tn", "+=", "1", "\n", "", "", "", "for", "output", ",", "label", "in", "zip", "(", "outputs", ",", "ances", ")", ":", "\n", "            ", "if", "int", "(", "label", ")", "==", "1", ":", "\n", "                ", "if", "output", ">", "0.5", ":", "\n", "                    ", "tpa", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "fna", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "if", "output", ">", "0.5", ":", "\n", "                    ", "fpa", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "tna", "+=", "1", "\n", "\n", "", "", "", "", "num", "=", "(", "tp", "+", "tn", "+", "fp", "+", "fn", ")", "\n", "acc", "=", "(", "tp", "+", "tn", ")", "/", "num", "\n", "pre", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "f1", "=", "2", "*", "pre", "*", "recall", "/", "(", "pre", "+", "recall", ")", "\n", "numa", "=", "(", "tpa", "+", "tna", "+", "fpa", "+", "fna", ")", "\n", "acca", "=", "(", "tpa", "+", "tna", ")", "/", "numa", "\n", "prea", "=", "tpa", "/", "(", "tpa", "+", "fpa", ")", "\n", "recalla", "=", "tpa", "/", "(", "tpa", "+", "fna", ")", "\n", "f1a", "=", "2", "*", "prea", "*", "recalla", "/", "(", "prea", "+", "recalla", ")", "\n", "return", "(", "acc", ",", "f1", ")", ",", "(", "acca", ",", "f1a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertFeatureClassifier.bertGCNClassifier.__init__": [[39, 48], ["torch.Module.__init__", "BertFeatureClassifier.bertGCNClassifier.initgcn", "BertFeatureClassifier.bertGCNClassifier.initbert", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.layers.GraphConvolution.__init__", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertFeatureClassifier.bertGCNClassifier.initgcn", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertFeatureClassifier.bertGCNClassifier.initbert"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", "=", "config", ".", "nfeat", ",", "nhid", "=", "config", ".", "nhid", ",", "nclass", "=", "1", ",", "dropout", "=", "config", ".", "dropout", ",", "layer_num", "=", "2", ")", ":", "\n", "        ", "super", "(", "bertGCNClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "'cuda'", "\n", "self", ".", "initgcn", "(", "nfeat", "=", "nfeat", ",", "nhid", "=", "nhid", ",", "nclass", "=", "1", ",", "dropout", "=", "dropout", ",", "layer_num", "=", "2", ")", "\n", "self", ".", "initbert", "(", ")", "\n", "if", "not", "use_pos_dim", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "768", "+", "nhid", "*", "2", ",", "nclass", ")", "\n", "", "if", "use_pos_dim", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "768", "+", "nhid", "*", "2", ",", "nclass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertFeatureClassifier.bertGCNClassifier.initbert": [[49, 57], ["BertFeatureClassifier.bertGCNClassifier.model.to", "pytorch_transformers.BertTokenizer.from_pretrained", "pytorch_transformers.BertModel.from_pretrained", "pytorch_transformers.BertTokenizer.from_pretrained", "pytorch_transformers.BertModel.from_pretrained"], "methods", ["None"], ["", "", "def", "initbert", "(", "self", ")", ":", "\n", "        ", "if", "bert_pre", "==", "'chinese-base-bert'", ":", "\n", "            ", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "bert_model", ")", "\n", "self", ".", "model", "=", "BertModel", ".", "from_pretrained", "(", "bert_model", ")", "\n", "", "elif", "bert_pre", "==", "'mt_bert'", ":", "\n", "            ", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "mt_bert", ")", "\n", "self", ".", "model", "=", "BertModel", ".", "from_pretrained", "(", "mt_bert", ")", "\n", "", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "# model\u8fd4\u56de\u4e00\u4e2a768\u7ef4\u5ea6\u7684\u5411\u91cf", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertFeatureClassifier.bertGCNClassifier.initgcn": [[59, 66], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "BertFeatureClassifier.bertGCNClassifier.gcs.append", "range", "BertFeatureClassifier.bertGCNClassifier.gcs.append", "model.GCN.layers.GraphConvolution", "BertFeatureClassifier.bertGCNClassifier.gcs.append", "model.GCN.layers.GraphConvolution", "model.GCN.layers.GraphConvolution"], "methods", ["None"], ["", "def", "initgcn", "(", "self", ",", "nfeat", "=", "config", ".", "nfeat", ",", "nhid", "=", "config", ".", "nhid", ",", "nclass", "=", "1", ",", "dropout", "=", "config", ".", "dropout", ",", "layer_num", "=", "2", ")", ":", "\n", "        ", "self", ".", "gcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "gcs", ".", "append", "(", "GraphConvolution", "(", "nfeat", ",", "nhid", ")", ")", "\n", "for", "i", "in", "range", "(", "layer_num", "-", "2", ")", ":", "\n", "            ", "self", ".", "gcs", ".", "append", "(", "GraphConvolution", "(", "nhid", ",", "nhid", ")", ")", "\n", "", "self", ".", "gcs", ".", "append", "(", "GraphConvolution", "(", "nhid", ",", "nclass", ")", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "# gcn\u8fd4\u56de\u4e00\u6392768\u7ef4\u7684\u5411\u91cf", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertFeatureClassifier.bertGCNClassifier.forward": [[68, 118], ["enumerate", "enumerate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.reshape", "random.sample", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "new_x2.reshape.reshape.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sentence.extend", "random.sample", "BertFeatureClassifier.bertGCNClassifier.fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "enumerate", "list", "list", "BertFeatureClassifier.bertGCNClassifier.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer", "range", "len", "range", "len", "numpy.array", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "len", "sentence.append", "sentence2.append", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "config.template", "new_x2.reshape.reshape.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "config.template", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu().numpy", "BertFeatureClassifier.bertGCNClassifier.tokenizer.convert_tokens_to_ids", "max", "torch.dropout.detach", "torch.dropout.detach().cpu", "torch.dropout.detach().cpu", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu", "torch.dropout.detach().cpu", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu().numpy", "BertFeatureClassifier.bertGCNClassifier.tokenizer.tokenize", "len", "torch.dropout.detach", "torch.dropout.detach", "torch.dropout.detach().cpu", "torch.dropout.detach().cpu", "torch.dropout.detach().cpu", "torch.dropout.detach().cpu", "torch.dropout.detach", "torch.dropout.detach", "torch.dropout.detach().cpu", "torch.dropout.detach().cpu", "torch.dropout.detach().cpu", "torch.dropout.detach().cpu", "BertFeatureClassifier.bertGCNClassifier.tokenizer.tokenize", "torch.dropout.detach", "torch.dropout.detach", "torch.dropout.detach", "torch.dropout.detach", "torch.dropout.detach", "torch.dropout.detach", "torch.dropout.detach", "torch.dropout.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ",", "word2id", ",", "batch_size", "=", "32", ",", "max_len", "=", "16", ")", ":", "\n", "        ", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "gcs", ")", ":", "\n", "            ", "if", "index", "==", "len", "(", "self", ".", "gcs", ")", "-", "1", ":", "break", "\n", "x", "=", "F", ".", "relu", "(", "layer", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "# \u5148\u7528\u4e00\u79cd\u5f88low\u7684\u65b9\u6cd5\u5e76\u4e14\u5f88\u8017\u65f6\u7684\u65b9\u6cd5\uff0c\u540e\u7eed\u8003\u8651\u80fd\u5426\u76f4\u63a5\u4f7f\u7528\u77e9\u9635\u8ba1\u7b97\u5f97\u5230", "\n", "", "new_x", "=", "[", "]", "\n", "new_x2", "=", "[", "]", "\n", "sentence", "=", "[", "]", "\n", "sentence2", "=", "[", "]", "\n", "for", "index1", ",", "line1", "in", "enumerate", "(", "adj", ")", ":", "\n", "            ", "for", "index2", ",", "line2", "in", "enumerate", "(", "line1", ")", ":", "\n", "                ", "if", "line2", ">", "0", ":", "\n", "                    ", "if", "not", "use_cl", ":", "\n", "                        ", "new_x", ".", "append", "(", "[", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index1", "]", ",", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index2", "]", "]", ")", "\n", "", "if", "use_cl", ":", "\n", "                        ", "new_x", ".", "append", "(", "\n", "[", "(", "1", "-", "lr", ")", "*", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index1", "]", "+", "lr", "*", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index2", "]", ",", "\n", "(", "1", "-", "lr", ")", "*", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index2", "]", "+", "lr", "*", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index1", "]", "]", ")", "\n", "", "sentence", ".", "append", "(", "config", ".", "template", "(", "[", "word2id", "[", "index1", "]", ",", "word2id", "[", "index2", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "if", "not", "use_cl", ":", "\n", "                        ", "new_x2", ".", "append", "(", "[", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index1", "]", ",", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index2", "]", "]", ")", "\n", "", "if", "use_cl", ":", "\n", "                        ", "new_x", ".", "append", "(", "\n", "[", "(", "1", "+", "lr", ")", "*", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index1", "]", "-", "lr", "*", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index2", "]", ",", "\n", "(", "1", "+", "lr", ")", "*", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index2", "]", "-", "lr", "*", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index1", "]", "]", ")", "\n", "", "sentence2", ".", "append", "(", "config", ".", "template", "(", "[", "word2id", "[", "index1", "]", ",", "word2id", "[", "index2", "]", "]", ")", ")", "\n", "", "", "", "new_x", "=", "torch", ".", "tensor", "(", "new_x", ")", "\n", "new_x", "=", "new_x", ".", "reshape", "(", "new_x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "idx", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "len", "(", "sentence2", ")", ")", ")", ",", "k", "=", "len", "(", "sentence", ")", ")", "\n", "sentence2", "=", "[", "sentence2", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "new_x2", "=", "torch", ".", "tensor", "(", "[", "new_x2", "[", "i", "]", "for", "i", "in", "idx", "]", ")", "\n", "new_x2", "=", "new_x2", ".", "reshape", "(", "new_x2", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "new_x", "=", "torch", ".", "cat", "(", "(", "new_x", ",", "new_x2", ")", ",", "dim", "=", "0", ")", "\n", "sentence", ".", "extend", "(", "sentence2", ")", "\n", "\n", "del", "(", "new_x2", ")", "\n", "del", "(", "sentence2", ")", "\n", "\n", "idx", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "len", "(", "sentence", ")", ")", ")", ",", "k", "=", "len", "(", "sentence", ")", ")", "\n", "\n", "new_x", "=", "new_x", "[", "idx", "]", "[", ":", "batch_size", "]", "\n", "sentence", "=", "np", ".", "array", "(", "sentence", ")", "[", "idx", "]", "[", ":", "batch_size", "]", "\n", "x", "=", "self", ".", "model", "(", "torch", ".", "tensor", "(", "[", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "i", ")", ")", "[", ":", "max_len", "]", "+", "[", "\n", "0", "]", "*", "max", "(", "0", ",", "max_len", "-", "len", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "i", ")", ")", ")", "for", "i", "in", "sentence", "]", ")", ".", "to", "(", "self", ".", "device", ")", ")", "[", "1", "]", "\n", "x", "=", "self", ".", "fc", "(", "torch", ".", "cat", "(", "(", "torch", ".", "tensor", "(", "new_x", ")", ",", "torch", ".", "tensor", "(", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertFeatureClassifier.getFeatureAdj": [[120, 154], ["tools.gzh.bert_encoder", "set", "print", "print", "graph.get", "graph.get.add", "adj.append", "graph.get", "features.append", "float", "float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "enumerate", "set", "numpy.array", "numpy.array", "len", "gzh.bert_encoder."], "function", ["None"], ["", "", "def", "getFeatureAdj", "(", "data", ")", ":", "\n", "    ", "from", "tools", "import", "gzh", "\n", "bert_pre", "=", "config", ".", "bert_pre", "\n", "encoder", "=", "gzh", ".", "bert_encoder", "(", "bert_pre", ")", "\n", "\n", "words", "=", "set", "(", "[", "item", "for", "sublist", "in", "[", "[", "i", "[", "0", "]", ",", "i", "[", "1", "]", "]", "for", "i", "in", "data", "]", "for", "item", "in", "sublist", "]", ")", "\n", "\n", "word2id", "=", "{", "i", ":", "j", "for", "j", ",", "i", "in", "enumerate", "(", "words", ")", "}", "\n", "id2word", "=", "{", "word2id", "[", "i", "]", ":", "i", "for", "i", "in", "word2id", "}", "\n", "\n", "temp", "=", "[", "[", "word2id", "[", "i", "[", "0", "]", "]", ",", "word2id", "[", "i", "[", "1", "]", "]", "]", "for", "i", "in", "data", "]", "\n", "graph", "=", "{", "}", "\n", "for", "a", ",", "b", "in", "temp", ":", "\n", "        ", "li", "=", "graph", ".", "get", "(", "a", ",", "set", "(", ")", ")", "\n", "li", ".", "add", "(", "b", ")", "\n", "graph", "[", "a", "]", "=", "li", "\n", "", "del", "(", "temp", ")", "\n", "\n", "adj", "=", "[", "]", "\n", "for", "d", "in", "id2word", ":", "\n", "        ", "adj", ".", "append", "(", "[", "0.", "]", "*", "len", "(", "word2id", ")", ")", "\n", "for", "dd", "in", "graph", ".", "get", "(", "d", ",", "[", "]", ")", ":", "\n", "            ", "adj", "[", "-", "1", "]", "[", "dd", "]", "=", "1.", "\n", "", "", "del", "(", "graph", ")", "\n", "print", "(", "'adj shape'", ",", "np", ".", "array", "(", "adj", ")", ".", "shape", ")", "\n", "\n", "features", "=", "[", "]", "\n", "for", "word", "in", "word2id", ":", "\n", "        ", "features", ".", "append", "(", "encoder", "(", "[", "word", "]", ")", "[", "0", "]", ")", "\n", "", "print", "(", "'feature shape'", ",", "np", ".", "array", "(", "features", ")", ".", "shape", ")", "\n", "\n", "childs", "=", "[", "float", "(", "i", "[", "2", "]", ")", "for", "i", "in", "data", "]", "\n", "ances", "=", "[", "float", "(", "i", "[", "3", "]", ")", "for", "i", "in", "data", "]", "\n", "return", "torch", ".", "tensor", "(", "features", ")", ",", "torch", ".", "tensor", "(", "adj", ")", ",", "childs", ",", "ances", ",", "id2word", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertFeatureClassifier.trainBERTGCN": [[156, 165], ["model.train", "optimizer.zero_grad", "model", "creiterion", "creiterion.backward", "optimizer.step", "model.reshape", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "sorted"], "function", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.train.train"], ["", "def", "trainBERTGCN", "(", "model", ",", "optimizer", ",", "creiterion", ",", "features", ",", "adj", ",", "childs", ",", "word2id", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "model", "(", "features", ",", "adj", ",", "word2id", ")", "\n", "epoch_loss", "=", "creiterion", "(", "outputs", ".", "reshape", "(", "-", "1", ")", ",", "torch", ".", "FloatTensor", "(", "sorted", "(", "childs", ",", "reverse", "=", "True", ")", "[", ":", "outputs", ".", "shape", "[", "0", "]", "]", ")", ")", "\n", "epoch_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "epoch_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.model.BertFeatureClassifier.predictBERTGCN": [[167, 199], ["model.eval", "model().reshape", "zip", "tools.gzh.getMetrics", "tools.gzh.getMetrics", "model().reshape.cpu().detach().numpy", "torch.FloatTensor().cpu().detach().numpy", "torch.FloatTensor().cpu().detach().numpy", "torch.FloatTensor().cpu().detach().numpy", "torch.FloatTensor().cpu().detach().numpy", "torch.FloatTensor().cpu().detach().numpy", "torch.FloatTensor().cpu().detach().numpy", "model", "model().reshape.cpu().detach", "torch.FloatTensor().cpu().detach", "torch.FloatTensor().cpu().detach", "torch.FloatTensor().cpu().detach", "torch.FloatTensor().cpu().detach", "torch.FloatTensor().cpu().detach", "torch.FloatTensor().cpu().detach", "model().reshape.cpu", "torch.FloatTensor().cpu", "torch.FloatTensor().cpu", "torch.FloatTensor().cpu", "torch.FloatTensor().cpu", "torch.FloatTensor().cpu", "torch.FloatTensor().cpu", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "sorted", "sorted"], "function", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getMetrics", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.tools.gzh.getMetrics"], ["", "def", "predictBERTGCN", "(", "model", ",", "features", ",", "adj", ",", "childs", ",", "ances", ",", "word2id", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "outputs", "=", "model", "(", "features", ",", "adj", ",", "word2id", ")", ".", "reshape", "(", "-", "1", ")", "\n", "answers", ",", "labels", ",", "labelsa", "=", "outputs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "torch", ".", "FloatTensor", "(", "\n", "sorted", "(", "childs", ",", "reverse", "=", "True", ")", "[", ":", "outputs", ".", "shape", "[", "0", "]", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "torch", ".", "FloatTensor", "(", "\n", "sorted", "(", "ances", ",", "reverse", "=", "True", ")", "[", ":", "outputs", ".", "shape", "[", "0", "]", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "tp", ",", "fp", ",", "tn", ",", "fn", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "tpa", ",", "fpa", ",", "tna", ",", "fna", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "a", ",", "l", ",", "la", "in", "zip", "(", "answers", ",", "labels", ",", "labelsa", ")", ":", "\n", "        ", "if", "a", ">", "0.5", ":", "\n", "            ", "if", "l", "==", "1", ":", "\n", "                ", "tp", "+=", "1", "\n", "", "else", ":", "\n", "                ", "fp", "+=", "1", "\n", "", "if", "la", "==", "1", ":", "\n", "                ", "tpa", "+=", "1", "\n", "", "else", ":", "\n", "                ", "fpa", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "if", "l", "==", "0", ":", "\n", "                ", "tn", "+=", "1", "\n", "", "else", ":", "\n", "                ", "fn", "+=", "1", "\n", "", "if", "la", "==", "0", ":", "\n", "                ", "tna", "+=", "1", "\n", "", "else", ":", "\n", "                ", "fna", "+=", "1", "\n", "\n", "", "", "", "from", "tools", "import", "gzh", "\n", "acc", ",", "pre", ",", "recall", ",", "f1", "=", "gzh", ".", "getMetrics", "(", "tp", ",", "fp", ",", "tn", ",", "fn", ")", "\n", "acca", ",", "prea", ",", "recalla", ",", "f1a", "=", "gzh", ".", "getMetrics", "(", "tpa", ",", "fpa", ",", "tna", ",", "fna", ")", "\n", "return", "acc", ",", "f1", ",", "f1a", "\n", "", ""]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.models.GCN.__init__": [[16, 26], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.GCN.gcs.append", "range", "models.GCN.gcs.append", "torch.Linear", "torch.Linear", "torch.Linear", "layers.GraphConvolution", "models.GCN.gcs.append", "layers.GraphConvolution", "layers.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", "=", "config", ".", "nfeat", ",", "nhid", "=", "config", ".", "nhid", ",", "nclass", "=", "1", ",", "dropout", "=", "config", ".", "dropout", ",", "layer_num", "=", "2", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "gcs", ".", "append", "(", "GraphConvolution", "(", "nfeat", ",", "nhid", ")", ")", "\n", "for", "i", "in", "range", "(", "layer_num", "-", "2", ")", ":", "\n", "            ", "self", ".", "gcs", ".", "append", "(", "GraphConvolution", "(", "nhid", ",", "nhid", ")", ")", "\n", "", "self", ".", "gcs", ".", "append", "(", "GraphConvolution", "(", "nhid", ",", "nclass", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nhid", "*", "2", ",", "nclass", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.models.GCN.forward": [[27, 39], ["enumerate", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "layer", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "'''\n        :param x:\n        :param adj:\n        :return:\n        '''", "\n", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "gcs", ")", ":", "\n", "            ", "if", "index", "==", "len", "(", "self", ".", "gcs", ")", "-", "1", ":", "break", "\n", "x", "=", "F", ".", "relu", "(", "layer", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "self", ".", "gcs", "[", "-", "1", "]", "(", "x", ",", "adj", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.models.GCN.forward_2": [[40, 55], ["enumerate", "enumerate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "new_x.reshape.reshape.reshape", "models.GCN.fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "enumerate", "layer", "len", "new_x.reshape.reshape.append", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu().numpy", "torch.dropout.detach().cpu", "torch.dropout.detach().cpu", "torch.dropout.detach", "torch.dropout.detach"], "methods", ["None"], ["", "def", "forward_2", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "gcs", ")", ":", "\n", "            ", "if", "index", "==", "len", "(", "self", ".", "gcs", ")", "-", "1", ":", "break", "\n", "x", "=", "F", ".", "relu", "(", "layer", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "# \u5148\u7528\u4e00\u79cd\u5f88low\u7684\u65b9\u6cd5", "\n", "", "new_x", "=", "[", "]", "\n", "for", "index1", ",", "line1", "in", "enumerate", "(", "adj", ")", ":", "\n", "            ", "for", "index2", ",", "line2", "in", "enumerate", "(", "line1", ")", ":", "\n", "                ", "if", "line2", ">", "0", ":", "\n", "                    ", "new_x", ".", "append", "(", "[", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index1", "]", ",", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "index2", "]", "]", ")", "\n", "", "", "", "new_x", "=", "torch", ".", "tensor", "(", "new_x", ")", "\n", "new_x", "=", "new_x", ".", "reshape", "(", "new_x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "new_x", ")", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.models.GCN.get_embedding": [[56, 62], ["enumerate", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "layer", "len"], "methods", ["None"], ["", "def", "get_embedding", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "for", "index", ",", "layer", "in", "enumerate", "(", "self", ".", "gcs", ")", ":", "\n", "            ", "if", "index", "==", "len", "(", "self", ".", "gcs", ")", "-", "1", ":", "break", "\n", "x", "=", "F", ".", "relu", "(", "layer", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.train.train": [[57, 79], ["time.time", "model.train", "optimizer.zero_grad", "model", "torch.nll_loss", "utils.accuracy", "F.nll_loss.backward", "optimizer.step", "torch.nll_loss", "utils.accuracy", "print", "model.eval", "model", "F.nll_loss.item", "utils.accuracy.item", "F.nll_loss.item", "utils.accuracy.item", "time.time"], "function", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.train.train", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.utils.accuracy", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.utils.accuracy"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "loss_train", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "acc_train", "=", "accuracy", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "not", "fastmode", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "\n", "", "loss_val", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "acc_val", "=", "accuracy", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "print", "(", "'Epoch: {:04d}'", ".", "format", "(", "epoch", "+", "1", ")", ",", "\n", "'loss_train: {:.4f}'", ".", "format", "(", "loss_train", ".", "item", "(", ")", ")", ",", "\n", "'acc_train: {:.4f}'", ".", "format", "(", "acc_train", ".", "item", "(", ")", ")", ",", "\n", "'loss_val: {:.4f}'", ".", "format", "(", "loss_val", ".", "item", "(", ")", ")", ",", "\n", "'acc_val: {:.4f}'", ".", "format", "(", "acc_val", ".", "item", "(", ")", ")", ",", "\n", "'time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.train.test": [[81, 90], ["model.eval", "model", "torch.nll_loss", "utils.accuracy", "print", "print", "model.get_embedding", "F.nll_loss.item", "utils.accuracy.item"], "function", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.utils.accuracy", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.models.GCN.get_embedding"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "loss_test", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "acc_test", "=", "accuracy", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "print", "(", "model", ".", "get_embedding", "(", "features", ",", "adj", ")", ".", "shape", ")", "\n", "print", "(", "\"Test set results:\"", ",", "\n", "\"loss= {:.4f}\"", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "\n", "\"accuracy= {:.4f}\"", ".", "format", "(", "acc_test", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.layers.GraphConvolution.__init__": [[20, 30], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "layers.GraphConvolution.reset_parameters", "torch.FloatTensor", "torch.nn.parameter.Parameter", "layers.GraphConvolution.register_parameter", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.layers.GraphConvolution.__init__", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.layers.GraphConvolution.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.layers.GraphConvolution.reset_parameters": [[31, 36], ["layers.GraphConvolution.weight.data.uniform_", "math.sqrt", "layers.GraphConvolution.bias.data.uniform_", "layers.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.layers.GraphConvolution.forward": [[37, 49], ["torch.mm", "torch.mm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "'''\n        :param input: \u7279\u5f81\n        :param adj: \u90bb\u63a5\u77e9\u9635\n        :return:\n        '''", "\n", "support", "=", "torch", ".", "mm", "(", "input", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "mm", "(", "adj", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.layers.GraphConvolution.__repr__": [[50, 54], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.utils.encode_onehot": [[11, 18], ["set", "numpy.array", "list", "numpy.identity", "enumerate", "map", "len"], "function", ["None"], ["def", "encode_onehot", "(", "labels", ")", ":", "\n", "    ", "classes", "=", "set", "(", "labels", ")", "\n", "classes_dict", "=", "{", "c", ":", "np", ".", "identity", "(", "len", "(", "classes", ")", ")", "[", "i", ",", ":", "]", "for", "i", ",", "c", "in", "\n", "enumerate", "(", "classes", ")", "}", "\n", "labels_onehot", "=", "np", ".", "array", "(", "list", "(", "map", "(", "classes_dict", ".", "get", ",", "labels", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "labels_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.utils.load_data": [[20, 60], ["print", "numpy.genfromtxt", "scipy.csr_matrix", "utils.encode_onehot", "numpy.array", "numpy.genfromtxt", "numpy.array().reshape", "scipy.coo_matrix", "utils.normalize", "utils.normalize", "range", "range", "range", "torch.FloatTensor", "torch.LongTensor", "utils.sparse_mx_to_torch_sparse_tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "sparse_mx_to_torch_sparse_tensor.multiply", "numpy.array", "numpy.dtype", "enumerate", "numpy.array", "numpy.ones", "sparse_mx_to_torch_sparse_tensor.T.multiply", "scipy.eye", "torch.FloatTensor.todense", "numpy.where", "list", "map", "np.genfromtxt.flatten"], "function", ["home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.utils.encode_onehot", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.utils.normalize", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.utils.normalize", "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.utils.sparse_mx_to_torch_sparse_tensor"], ["", "def", "load_data", "(", "path", "=", "\"./dataset/\"", ",", "dataset", "=", "\"meituan\"", ")", ":", "\n", "    ", "\"\"\"Load citation network dataset (cora only for now)\"\"\"", "\n", "print", "(", "'Loading {} dataset...'", ".", "format", "(", "dataset", ")", ")", "\n", "\n", "# \u81ea\u5df1\u7684\u5185\u5bb9", "\n", "idx_features_labels", "=", "np", ".", "genfromtxt", "(", "\"{}{}.content\"", ".", "format", "(", "path", ",", "dataset", ")", ",", "\n", "dtype", "=", "np", ".", "dtype", "(", "str", ")", ",", "encoding", "=", "'utf-8'", ")", "\n", "features", "=", "sp", ".", "csr_matrix", "(", "idx_features_labels", "[", ":", ",", "1", ":", "-", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "=", "encode_onehot", "(", "idx_features_labels", "[", ":", ",", "-", "1", "]", ")", "\n", "\n", "# \u90bb\u63a5\u77e9\u9635", "\n", "idx", "=", "np", ".", "array", "(", "idx_features_labels", "[", ":", ",", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "idx_map", "=", "{", "j", ":", "i", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "}", "\n", "edges_unordered", "=", "np", ".", "genfromtxt", "(", "\"{}{}.graph\"", ".", "format", "(", "path", ",", "dataset", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "edges", "=", "np", ".", "array", "(", "list", "(", "map", "(", "idx_map", ".", "get", ",", "edges_unordered", ".", "flatten", "(", ")", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", ".", "reshape", "(", "edges_unordered", ".", "shape", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "edges", ".", "shape", "[", "0", "]", ")", ",", "(", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", ")", ")", ",", "\n", "shape", "=", "(", "labels", ".", "shape", "[", "0", "]", ",", "labels", ".", "shape", "[", "0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# \u6784\u5efa\u90bb\u63a5\u77e9\u9635", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "\n", "features", "=", "normalize", "(", "features", ")", "\n", "adj", "=", "normalize", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "idx_train", "=", "range", "(", "140", ")", "\n", "idx_val", "=", "range", "(", "200", ",", "500", ")", "\n", "idx_test", "=", "range", "(", "500", ",", "1500", ")", "\n", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", ")", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "np", ".", "where", "(", "labels", ")", "[", "1", "]", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", "\n", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.utils.normalize": [[62, 70], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "normalize", "(", "mx", ")", ":", "\n", "    ", "\"\"\"\u5ea6\u77e9\u9635\u7684\u5f52\u4e00\u5316\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.utils.accuracy": [[72, 77], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "len", "[].type_as.eq", "output.max"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adacheng_product_taxonomy_expansion.GCN.utils.sparse_mx_to_torch_sparse_tensor": [[79, 87], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"\u53d8\u6210torch\u91cc\u9762\u7684\u77e9\u9635\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "", ""]]}