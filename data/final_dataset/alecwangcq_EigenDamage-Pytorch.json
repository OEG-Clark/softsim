{"home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_pretrain.train": [[73, 106], ["print", "net.train", "lr_scheduler", "writer.add_scalar", "tqdm.tqdm", "writer.add_scalar", "writer.add_scalar", "lr_scheduler.get_lr", "enumerate", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "criterion.item", "net.max", "targets.size", "predicted.eq().sum().item", "tqdm.tqdm.set_description", "lr_scheduler.get_lr", "len", "inputs.to", "targets.to", "predicted.eq().sum", "lr_scheduler.get_lr", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_pretrain.train", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.PresetLRScheduler.get_lr", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner.step", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.PresetLRScheduler.get_lr", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.PresetLRScheduler.get_lr"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'\\nEpoch: %d'", "%", "epoch", ")", "\n", "net", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "lr_scheduler", "(", "optimizer", ",", "epoch", ")", "\n", "desc", "=", "(", "'[LR=%s] Loss: %.3f | Acc: %.3f%% (%d/%d)'", "%", "\n", "(", "lr_scheduler", ".", "get_lr", "(", "optimizer", ")", ",", "0", ",", "0", ",", "correct", ",", "total", ")", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'train/lr'", ",", "lr_scheduler", ".", "get_lr", "(", "optimizer", ")", ",", "epoch", ")", "\n", "\n", "prog_bar", "=", "tqdm", "(", "enumerate", "(", "trainloader", ")", ",", "total", "=", "len", "(", "trainloader", ")", ",", "desc", "=", "desc", ",", "leave", "=", "True", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "prog_bar", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "args", ".", "device", ")", ",", "targets", ".", "to", "(", "args", ".", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "desc", "=", "(", "'[LR=%s] Loss: %.3f | Acc: %.3f%% (%d/%d)'", "%", "\n", "(", "lr_scheduler", ".", "get_lr", "(", "optimizer", ")", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "prog_bar", ".", "set_description", "(", "desc", ",", "refresh", "=", "True", ")", "\n", "\n", "", "writer", ".", "add_scalar", "(", "'train/loss'", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'train/acc'", ",", "100.", "*", "correct", "/", "total", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_pretrain.test": [[108, 156], ["net.eval", "tqdm.tqdm", "writer.add_scalar", "writer.add_scalar", "enumerate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "torch.save", "torch.save", "torch.save", "lr_scheduler.get_lr", "len", "net", "criterion", "criterion.item", "net.max", "targets.size", "predicted.eq().sum().item", "tqdm.tqdm.set_description", "net.state_dict", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "inputs.to", "targets.to", "predicted.eq().sum", "lr_scheduler.get_lr", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.PresetLRScheduler.get_lr", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.PresetLRScheduler.get_lr"], ["", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "global", "best_acc", "\n", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "desc", "=", "(", "'[LR=%s] Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "%", "(", "lr_scheduler", ".", "get_lr", "(", "optimizer", ")", ",", "test_loss", "/", "(", "0", "+", "1", ")", ",", "0", ",", "correct", ",", "total", ")", ")", "\n", "\n", "prog_bar", "=", "tqdm", "(", "enumerate", "(", "testloader", ")", ",", "total", "=", "len", "(", "testloader", ")", ",", "desc", "=", "desc", ",", "leave", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "prog_bar", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "args", ".", "device", ")", ",", "targets", ".", "to", "(", "args", ".", "device", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "desc", "=", "(", "'[LR=%s] Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "%", "(", "lr_scheduler", ".", "get_lr", "(", "optimizer", ")", ",", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "prog_bar", ".", "set_description", "(", "desc", ",", "refresh", "=", "True", ")", "\n", "\n", "# Save checkpoint.", "\n", "", "", "acc", "=", "100.", "*", "correct", "/", "total", "\n", "\n", "writer", ".", "add_scalar", "(", "'test/loss'", ",", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'test/acc'", ",", "100.", "*", "correct", "/", "total", ",", "epoch", ")", "\n", "\n", "if", "acc", ">", "best_acc", ":", "\n", "        ", "print", "(", "'Saving..'", ")", "\n", "state", "=", "{", "\n", "'net'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'loss'", ":", "loss", ",", "\n", "'args'", ":", "args", "\n", "}", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint/pretrain'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'checkpoint/pretrain'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/pretrain/%s_%s%s_best.t7'", "%", "(", "args", ".", "dataset", ",", "\n", "args", ".", "network", ",", "\n", "args", ".", "depth", ")", ")", "\n", "best_acc", "=", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune.count_parameters": [[30, 36], ["sum", "p.numel", "model.parameters"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.ConvLayerRotation.parameters"], ["def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "\"\"\"The number of trainable parameters.\n    It will exclude the rotation matrix in bottleneck layer.\n    If those parameters are not trainiable.\n    \"\"\"", "\n", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune.count_rotation_numels": [[38, 48], ["model.modules", "isinstance", "m.rotation_matrix.numel"], "function", ["None"], ["", "def", "count_rotation_numels", "(", "model", ")", ":", "\n", "    ", "\"\"\"Count how many parameters in the rotation matrix.\n    Call this only when they are not trainable for complementing\n    the number of parameters.\n    \"\"\"", "\n", "total", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "ConvLayerRotation", ",", "LinearLayerRotation", ")", ")", ":", "\n", "            ", "total", "+=", "m", ".", "rotation_matrix", ".", "numel", "(", ")", "\n", "", "", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune.init_config": [[50, 57], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.common_utils.process_config"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.process_config"], ["", "def", "init_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", "=", "process_config", "(", "args", ".", "config", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune.init_dataloader": [[59, 64], ["utils.data_utils.get_dataloader"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.data_utils.get_dataloader"], ["", "def", "init_dataloader", "(", "config", ")", ":", "\n", "    ", "trainloader", ",", "testloader", "=", "get_dataloader", "(", "dataset", "=", "config", ".", "dataset", ",", "\n", "train_batch_size", "=", "config", ".", "batch_size", ",", "\n", "test_batch_size", "=", "256", ")", "\n", "return", "trainloader", ",", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune.init_network": [[66, 86], ["utils.network_utils.get_network", "print", "logger.info", "torch.load", "torch.load", "utils.network_utils.get_network.load_state_dict", "utils.network_utils.get_bottleneck_builder", "torch.load.get", "print", "logger.info", "utils.network_utils.get_network.to", "torch.load.get"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.network_utils.get_network", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.network_utils.get_bottleneck_builder"], ["", "def", "init_network", "(", "config", ",", "logger", ",", "device", ")", ":", "\n", "    ", "net", "=", "get_network", "(", "network", "=", "config", ".", "network", ",", "\n", "depth", "=", "config", ".", "depth", ",", "\n", "dataset", "=", "config", ".", "dataset", ")", "\n", "print", "(", "'==> Loading checkpoint from %s.'", "%", "config", ".", "checkpoint", ")", "\n", "logger", ".", "info", "(", "'==> Loading checkpoint from %s.'", "%", "config", ".", "checkpoint", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", ".", "checkpoint", ")", "\n", "if", "checkpoint", ".", "get", "(", "'args'", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "args", "=", "checkpoint", "[", "'args'", "]", "\n", "print", "(", "'** [%s-%s%d] Acc: %.2f%%, Epoch: %d, Loss: %.4f'", "%", "(", "args", ".", "dataset", ",", "args", ".", "network", ",", "args", ".", "depth", ",", "\n", "checkpoint", "[", "'acc'", "]", ",", "checkpoint", "[", "'epoch'", "]", ",", "\n", "checkpoint", "[", "'loss'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'** [%s-%s%d] Acc: %.2f%%, Epoch: %d, Loss: %.4f'", "%", "(", "args", ".", "dataset", ",", "args", ".", "network", ",", "args", ".", "depth", ",", "\n", "checkpoint", "[", "'acc'", "]", ",", "checkpoint", "[", "'epoch'", "]", ",", "\n", "checkpoint", "[", "'loss'", "]", ")", ")", "\n", "", "state_dict", "=", "checkpoint", "[", "'net'", "]", "if", "checkpoint", ".", "get", "(", "'net'", ",", "None", ")", "is", "not", "None", "else", "checkpoint", "[", "'state_dict'", "]", "\n", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "bottleneck_net", "=", "get_bottleneck_builder", "(", "config", ".", "network", ")", "\n", "\n", "return", "net", ".", "to", "(", "device", ")", ",", "bottleneck_net", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune.init_pruner": [[88, 150], ["pruner.kfac_eigen_pruner.KFACEigenPruner", "pruner.kfac_full_pruner.KFACFullPruner", "config.get", "pruner.fisher_diag_pruner.FisherDiagPruner", "pruner.kfac_OBD_F2.KFACOBDF2Pruner", "pruner.kfac_OBS_F2.KFACOBSF2Pruner"], "function", ["None"], ["", "def", "init_pruner", "(", "net", ",", "bottleneck_net", ",", "config", ",", "writer", ",", "logger", ")", ":", "\n", "    ", "if", "config", ".", "fisher_mode", "==", "'eigen'", ":", "\n", "        ", "pruner", "=", "KFACEigenPruner", "(", "net", ",", "\n", "bottleneck_net", ",", "\n", "config", ",", "\n", "writer", ",", "\n", "logger", ",", "\n", "config", ".", "prune_ratio_limit", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "use_patch", "=", "config", ".", "get", "(", "'use_patch'", ",", "True", ")", ",", "\n", "fix_layers", "=", "config", ".", "fix_layers", ",", "\n", "fix_rotation", "=", "config", ".", "fix_rotation", ")", "\n", "", "elif", "config", ".", "fisher_mode", "==", "'full'", ":", "\n", "        ", "pruner", "=", "KFACFullPruner", "(", "net", ",", "\n", "VGG", ",", "\n", "config", ",", "\n", "writer", ",", "\n", "logger", ",", "\n", "config", ".", "prune_ratio_limit", ",", "\n", "'%s%d'", "%", "(", "config", ".", "network", ",", "config", ".", "depth", ")", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "use_patch", "=", "False", ",", "\n", "fix_layers", "=", "0", ")", "\n", "pass", "\n", "", "elif", "config", ".", "fisher_mode", "==", "'diag'", ":", "\n", "# FisherDiagPruner", "\n", "        ", "pruner", "=", "FisherDiagPruner", "(", "model", "=", "net", ",", "\n", "builder", "=", "VGG", ",", "\n", "config", "=", "config", ",", "\n", "writer", "=", "writer", ",", "\n", "logger", "=", "logger", ",", "\n", "prune_ratio_limit", "=", "config", ".", "prune_ratio_limit", ",", "\n", "network", "=", "'%s%d'", "%", "(", "config", ".", "network", ",", "config", ".", "depth", ")", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "use_patch", "=", "False", ",", "\n", "fix_layers", "=", "0", ")", "\n", "", "elif", "config", ".", "fisher_mode", "==", "'OBD_F2'", ":", "\n", "        ", "pruner", "=", "KFACOBDF2Pruner", "(", "net", ",", "\n", "VGG", ",", "\n", "config", ",", "\n", "writer", ",", "\n", "logger", ",", "\n", "config", ".", "prune_ratio_limit", ",", "\n", "'%s%d'", "%", "(", "config", ".", "network", ",", "config", ".", "depth", ")", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "use_patch", "=", "False", ",", "\n", "fix_layers", "=", "0", ")", "\n", "", "elif", "config", ".", "fisher_mode", "==", "'OBS_F2'", ":", "\n", "        ", "pruner", "=", "KFACOBSF2Pruner", "(", "net", ",", "\n", "VGG", ",", "\n", "config", ",", "\n", "writer", ",", "\n", "logger", ",", "\n", "config", ".", "prune_ratio_limit", ",", "\n", "'%s%d'", "%", "(", "config", ".", "network", ",", "config", ".", "depth", ")", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "use_patch", "=", "False", ",", "\n", "fix_layers", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "pruner", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune.init_summary_writer": [[152, 167], ["utils.common_utils.makedirs", "utils.common_utils.makedirs", "os.path.dirname", "os.path.join", "os.path.join", "os.path.join", "utils.common_utils.get_logger", "utils.common_utils.get_logger.info", "tensorboardX.SummaryWriter", "os.path.abspath", "dict"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.makedirs", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.makedirs", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.get_logger"], ["", "def", "init_summary_writer", "(", "config", ")", ":", "\n", "    ", "makedirs", "(", "config", ".", "summary_dir", ")", "\n", "makedirs", "(", "config", ".", "checkpoint_dir", ")", "\n", "\n", "# set logger", "\n", "path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "path_model", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'models/%s.py'", "%", "config", ".", "network", ")", "\n", "path_main", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'main_prune.py'", ")", "\n", "path_pruner", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'pruner/%s.py'", "%", "config", ".", "pruner", ")", "\n", "logger", "=", "get_logger", "(", "'log'", ",", "logpath", "=", "config", ".", "summary_dir", "+", "'/'", ",", "\n", "filepath", "=", "path_model", ",", "package_files", "=", "[", "path_main", ",", "path_pruner", "]", ")", "\n", "logger", ".", "info", "(", "dict", "(", "config", ")", ")", "\n", "writer", "=", "SummaryWriter", "(", "config", ".", "summary_dir", ")", "\n", "\n", "return", "logger", ",", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune.save_model": [[169, 184], ["os.path.join", "torch.save", "torch.save"], "function", ["None"], ["", "def", "save_model", "(", "config", ",", "iteration", ",", "pruner", ",", "cfg", ",", "stat", ")", ":", "\n", "    ", "network", "=", "config", ".", "network", "\n", "depth", "=", "config", ".", "depth", "\n", "dataset", "=", "config", ".", "dataset", "\n", "checkpoint_dir", "=", "config", ".", "checkpoint_dir", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'%s_%s%s_%d.pth.tar'", "%", "(", "dataset", ",", "network", ",", "depth", ",", "iteration", ")", ")", "\n", "save", "=", "{", "\n", "# 'Q_a': pruner.Q_a,", "\n", "# 'Q_g': pruner.Q_g,", "\n", "'config'", ":", "config", ",", "\n", "'net'", ":", "pruner", ".", "model", ",", "\n", "'cfg'", ":", "cfg", ",", "\n", "'stat'", ":", "stat", "\n", "}", "\n", "torch", ".", "save", "(", "save", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune.compute_ratio": [[186, 198], ["main_prune.count_rotation_numels", "logger.info", "main_prune.count_parameters"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.count_rotation_numels", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.count_parameters"], ["", "def", "compute_ratio", "(", "model", ",", "total", ",", "fix_rotation", ",", "logger", ")", ":", "\n", "    ", "indicator", "=", "1", "if", "fix_rotation", "else", "0", "\n", "rotation_numel", "=", "count_rotation_numels", "(", "model", ")", "\n", "pruned_numel", "=", "count_parameters", "(", "model", ")", "+", "rotation_numel", "*", "indicator", "\n", "ratio", "=", "100.", "*", "pruned_numel", "/", "total", "\n", "logger", ".", "info", "(", "'Compression ratio: %.2f%%(%d/%d), Total: %d, Rotation: %d.'", "%", "(", "ratio", ",", "\n", "pruned_numel", ",", "\n", "total", ",", "\n", "pruned_numel", ",", "\n", "rotation_numel", ")", ")", "\n", "unfair_ratio", "=", "100", "-", "100.", "*", "(", "pruned_numel", "-", "rotation_numel", "*", "indicator", ")", "\n", "return", "100", "-", "ratio", ",", "unfair_ratio", ",", "pruned_numel", ",", "rotation_numel", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune.main": [[200, 307], ["torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "main_prune.init_summary_writer", "main_prune.init_dataloader", "main_prune.init_network", "main_prune.init_pruner", "utils.common_utils.str_to_list", "utils.common_utils.str_to_list", "utils.common_utils.str_to_list", "utils.common_utils.str_to_list", "config.get", "main_prune.count_parameters", "range", "net.train", "len", "logger.info", "logger.info", "logger.info", "init_pruner.make_pruned_model", "main_prune.compute_ratio", "init_pruner.test_model", "init_pruner.test_model", "logger.info", "logger.info", "init_pruner.fine_tune_model", "init_pruner.test_model", "logger.info", "logger.info", "main_prune.save_model", "len", "len", "len", "len", "len", "len", "utils.compute_flops.print_model_param_flops", "utils.compute_flops.print_model_param_flops", "main_prune.init_network", "main_prune.init_pruner", "open", "json.dump", "os.path.join"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_summary_writer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_dataloader", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_network", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_pruner", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.str_to_list", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.str_to_list", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.str_to_list", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.str_to_list", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.count_parameters", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_pretrain.train", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner.make_pruned_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.compute_ratio", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.test_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.test_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.fine_tune_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.test_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.save_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.compute_flops.print_model_param_flops", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.compute_flops.print_model_param_flops", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_network", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_pruner"], ["", "def", "main", "(", "config", ")", ":", "\n", "    ", "stats", "=", "{", "}", "\n", "device", "=", "'cuda'", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "# config = init_config() if config is None else config", "\n", "logger", ",", "writer", "=", "init_summary_writer", "(", "config", ")", "\n", "trainloader", ",", "testloader", "=", "init_dataloader", "(", "config", ")", "\n", "net", ",", "bottleneck_net", "=", "init_network", "(", "config", ",", "logger", ",", "device", ")", "\n", "pruner", "=", "init_pruner", "(", "net", ",", "bottleneck_net", ",", "config", ",", "writer", ",", "logger", ")", "\n", "\n", "# start pruning", "\n", "epochs", "=", "str_to_list", "(", "config", ".", "epoch", ",", "','", ",", "int", ")", "\n", "learning_rates", "=", "str_to_list", "(", "config", ".", "learning_rate", ",", "','", ",", "float", ")", "\n", "weight_decays", "=", "str_to_list", "(", "config", ".", "weight_decay", ",", "','", ",", "float", ")", "\n", "ratios", "=", "str_to_list", "(", "config", ".", "ratio", ",", "','", ",", "float", ")", "\n", "\n", "fisher_type", "=", "config", ".", "fisher_type", "# empirical|true", "\n", "fisher_mode", "=", "config", ".", "fisher_mode", "# eigen|full|diagonal", "\n", "normalize", "=", "config", ".", "normalize", "\n", "prune_mode", "=", "config", ".", "prune_mode", "# one-pass | iterative", "\n", "fix_rotation", "=", "config", ".", "get", "(", "'fix_rotation'", ",", "True", ")", "\n", "\n", "assert", "(", "len", "(", "epochs", ")", "==", "len", "(", "learning_rates", ")", "and", "\n", "len", "(", "learning_rates", ")", "==", "len", "(", "weight_decays", ")", "and", "\n", "len", "(", "weight_decays", ")", "==", "len", "(", "ratios", ")", ")", "\n", "\n", "total_parameters", "=", "count_parameters", "(", "net", ".", "train", "(", ")", ")", "\n", "for", "it", "in", "range", "(", "len", "(", "epochs", ")", ")", ":", "\n", "        ", "epoch", "=", "epochs", "[", "it", "]", "\n", "lr", "=", "learning_rates", "[", "it", "]", "\n", "wd", "=", "weight_decays", "[", "it", "]", "\n", "ratio", "=", "ratios", "[", "it", "]", "\n", "logger", ".", "info", "(", "'-'", "*", "120", ")", "\n", "logger", ".", "info", "(", "'** [%d], Ratio: %.2f, epoch: %d, lr: %.4f, wd: %.4f'", "%", "(", "it", ",", "ratio", ",", "epoch", ",", "lr", ",", "wd", ")", ")", "\n", "logger", ".", "info", "(", "'Reinit: %s, Fisher_mode: %s, fisher_type: %s, normalize: %s, fix_rotation: %s.'", "%", "(", "config", ".", "re_init", ",", "\n", "fisher_mode", ",", "\n", "fisher_type", ",", "\n", "normalize", ",", "\n", "fix_rotation", ")", ")", "\n", "pruner", ".", "fix_rotation", "=", "fix_rotation", "\n", "\n", "# conduct pruning", "\n", "cfg", "=", "pruner", ".", "make_pruned_model", "(", "trainloader", ",", "\n", "criterion", "=", "criterion", ",", "\n", "device", "=", "device", ",", "\n", "fisher_type", "=", "fisher_type", ",", "\n", "prune_ratio", "=", "ratio", ",", "\n", "normalize", "=", "normalize", ",", "\n", "re_init", "=", "config", ".", "re_init", ")", "\n", "\n", "# for tracking the best accuracy", "\n", "compression_ratio", ",", "unfair_ratio", ",", "all_numel", ",", "rotation_numel", "=", "compute_ratio", "(", "pruner", ".", "model", ",", "total_parameters", ",", "\n", "fix_rotation", ",", "logger", ")", "\n", "if", "config", ".", "dataset", "==", "'tiny_imagenet'", ":", "\n", "            ", "total_flops", ",", "rotation_flops", "=", "print_model_param_flops", "(", "pruner", ".", "model", ",", "64", ",", "cuda", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "total_flops", ",", "rotation_flops", "=", "print_model_param_flops", "(", "pruner", ".", "model", ",", "32", ",", "cuda", "=", "True", ")", "\n", "", "train_loss_pruned", ",", "train_acc_pruned", "=", "pruner", ".", "test_model", "(", "trainloader", ",", "criterion", ",", "device", ")", "\n", "test_loss_pruned", ",", "test_acc_pruned", "=", "pruner", ".", "test_model", "(", "testloader", ",", "criterion", ",", "device", ")", "\n", "\n", "# write results", "\n", "logger", ".", "info", "(", "'Before: Accuracy: %.2f%%(train), %.2f%%(test).'", "%", "(", "train_acc_pruned", ",", "test_acc_pruned", ")", ")", "\n", "logger", ".", "info", "(", "'        Loss:     %.2f  (train), %.2f  (test).'", "%", "(", "train_loss_pruned", ",", "test_loss_pruned", ")", ")", "\n", "\n", "test_loss_finetuned", ",", "test_acc_finetuned", "=", "pruner", ".", "fine_tune_model", "(", "trainloader", "=", "trainloader", ",", "\n", "testloader", "=", "testloader", ",", "\n", "criterion", "=", "criterion", ",", "\n", "optim", "=", "optim", ",", "\n", "learning_rate", "=", "lr", ",", "\n", "weight_decay", "=", "wd", ",", "\n", "nepochs", "=", "epoch", ")", "\n", "train_loss_finetuned", ",", "train_acc_finetuned", "=", "pruner", ".", "test_model", "(", "trainloader", ",", "criterion", ",", "device", ")", "\n", "logger", ".", "info", "(", "'After:  Accuracy: %.2f%%(train), %.2f%%(test).'", "%", "(", "train_acc_finetuned", ",", "test_acc_finetuned", ")", ")", "\n", "logger", ".", "info", "(", "'        Loss:     %.2f  (train), %.2f  (test).'", "%", "(", "train_loss_finetuned", ",", "test_loss_finetuned", ")", ")", "\n", "# save model", "\n", "\n", "stat", "=", "{", "\n", "'total_flops'", ":", "total_flops", ",", "\n", "'rotation_flops'", ":", "rotation_flops", ",", "\n", "'it'", ":", "it", ",", "\n", "'prune_ratio'", ":", "ratio", ",", "\n", "'cr'", ":", "compression_ratio", ",", "\n", "'unfair_cr'", ":", "unfair_ratio", ",", "\n", "'all_params'", ":", "all_numel", ",", "\n", "'rotation_params'", ":", "rotation_numel", ",", "\n", "'prune/train_loss'", ":", "train_loss_pruned", ",", "\n", "'prune/train_acc'", ":", "train_acc_pruned", ",", "\n", "'prune/test_loss'", ":", "test_loss_pruned", ",", "\n", "'prune/test_acc'", ":", "test_acc_pruned", ",", "\n", "'finetune/train_loss'", ":", "train_loss_finetuned", ",", "\n", "'finetune/test_loss'", ":", "test_loss_finetuned", ",", "\n", "'finetune/train_acc'", ":", "train_acc_finetuned", ",", "\n", "'finetune/test_acc'", ":", "test_acc_finetuned", "\n", "}", "\n", "save_model", "(", "config", ",", "it", ",", "pruner", ",", "cfg", ",", "stat", ")", "\n", "\n", "stats", "[", "it", "]", "=", "stat", "\n", "\n", "if", "prune_mode", "==", "'one_pass'", ":", "\n", "            ", "del", "net", "\n", "del", "pruner", "\n", "net", ",", "bottleneck_net", "=", "init_network", "(", "config", ",", "logger", ",", "device", ")", "\n", "pruner", "=", "init_pruner", "(", "net", ",", "bottleneck_net", ",", "config", ",", "writer", ",", "logger", ")", "\n", "pruner", ".", "iter", "=", "it", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", ".", "summary_dir", ",", "'stats.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "stats", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.count_parameters": [[31, 37], ["sum", "p.numel", "model.parameters"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.ConvLayerRotation.parameters"], ["def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "\"\"\"The number of trainable parameters.\n    It will exclude the rotation matrix in bottleneck layer.\n    If those parameters are not trainiable.\n    \"\"\"", "\n", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.count_rotation_numels": [[39, 49], ["model.modules", "isinstance", "m.rotation_matrix.numel"], "function", ["None"], ["", "def", "count_rotation_numels", "(", "model", ")", ":", "\n", "    ", "\"\"\"Count how many parameters in the rotation matrix.\n    Call this only when they are not trainable for complementing\n    the number of parameters.\n    \"\"\"", "\n", "total", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "ConvLayerRotation", ",", "LinearLayerRotation", ")", ")", ":", "\n", "            ", "total", "+=", "m", ".", "rotation_matrix", ".", "numel", "(", ")", "\n", "", "", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_config": [[51, 58], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.common_utils.process_config"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.process_config"], ["", "def", "init_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", "=", "process_config", "(", "args", ".", "config", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_dataloader": [[60, 65], ["utils.data_utils.get_dataloader"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.data_utils.get_dataloader"], ["", "def", "init_dataloader", "(", "config", ")", ":", "\n", "    ", "trainloader", ",", "testloader", "=", "get_dataloader", "(", "dataset", "=", "config", ".", "dataset", ",", "\n", "train_batch_size", "=", "config", ".", "batch_size", ",", "\n", "test_batch_size", "=", "128", ")", "\n", "return", "trainloader", ",", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_network": [[67, 87], ["utils.network_utils.get_network", "print", "logger.info", "torch.load", "torch.load", "utils.network_utils.get_network.load_state_dict", "utils.network_utils.get_bottleneck_builder", "torch.load.get", "print", "logger.info", "utils.network_utils.get_network.to", "torch.load.get"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.network_utils.get_network", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.network_utils.get_bottleneck_builder"], ["", "def", "init_network", "(", "config", ",", "logger", ",", "device", ")", ":", "\n", "    ", "net", "=", "get_network", "(", "network", "=", "config", ".", "network", ",", "\n", "depth", "=", "config", ".", "depth", ",", "\n", "dataset", "=", "config", ".", "dataset", ")", "\n", "print", "(", "'==> Loading checkpoint from %s.'", "%", "config", ".", "checkpoint", ")", "\n", "logger", ".", "info", "(", "'==> Loading checkpoint from %s.'", "%", "config", ".", "checkpoint", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", ".", "checkpoint", ")", "\n", "if", "checkpoint", ".", "get", "(", "'args'", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "args", "=", "checkpoint", "[", "'args'", "]", "\n", "print", "(", "'** [%s-%s%d] Acc: %.2f%%, Epoch: %d, Loss: %.4f'", "%", "(", "args", ".", "dataset", ",", "args", ".", "network", ",", "args", ".", "depth", ",", "\n", "checkpoint", "[", "'acc'", "]", ",", "checkpoint", "[", "'epoch'", "]", ",", "\n", "checkpoint", "[", "'loss'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'** [%s-%s%d] Acc: %.2f%%, Epoch: %d, Loss: %.4f'", "%", "(", "args", ".", "dataset", ",", "args", ".", "network", ",", "args", ".", "depth", ",", "\n", "checkpoint", "[", "'acc'", "]", ",", "checkpoint", "[", "'epoch'", "]", ",", "\n", "checkpoint", "[", "'loss'", "]", ")", ")", "\n", "", "state_dict", "=", "checkpoint", "[", "'net'", "]", "if", "checkpoint", ".", "get", "(", "'net'", ",", "None", ")", "is", "not", "None", "else", "checkpoint", "[", "'state_dict'", "]", "\n", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "bottleneck_net", "=", "get_bottleneck_builder", "(", "config", ".", "network", ")", "\n", "\n", "return", "net", ".", "to", "(", "device", ")", ",", "bottleneck_net", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_pruner": [[89, 161], ["pruner.kfac_eigen_pruner.KFACEigenPruner", "pruner.kfac_full_pruner.KFACFullPruner", "config.get", "pruner.fisher_diag_pruner.FisherDiagPruner", "pruner.kfac_OBD_F2.KFACOBDF2Pruner", "pruner.kfac_OBS_F2.KFACOBSF2Pruner", "pruner.kfac_eigen_svd_pruner.KFACEigenSVDPruner", "config.get"], "function", ["None"], ["", "def", "init_pruner", "(", "net", ",", "bottleneck_net", ",", "config", ",", "writer", ",", "logger", ")", ":", "\n", "    ", "if", "config", ".", "fisher_mode", "==", "'eigen'", ":", "\n", "        ", "pruner", "=", "KFACEigenPruner", "(", "net", ",", "\n", "bottleneck_net", ",", "\n", "config", ",", "\n", "writer", ",", "\n", "logger", ",", "\n", "config", ".", "prune_ratio_limit", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "use_patch", "=", "config", ".", "get", "(", "'use_patch'", ",", "True", ")", ",", "\n", "fix_layers", "=", "config", ".", "fix_layers", ",", "\n", "fix_rotation", "=", "config", ".", "fix_rotation", ")", "\n", "", "elif", "config", ".", "fisher_mode", "==", "'full'", ":", "\n", "        ", "pruner", "=", "KFACFullPruner", "(", "net", ",", "\n", "VGG", ",", "\n", "config", ",", "\n", "writer", ",", "\n", "logger", ",", "\n", "config", ".", "prune_ratio_limit", ",", "\n", "'%s%d'", "%", "(", "config", ".", "network", ",", "config", ".", "depth", ")", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "use_patch", "=", "False", ",", "\n", "fix_layers", "=", "0", ")", "\n", "", "elif", "config", ".", "fisher_mode", "==", "'diag'", ":", "\n", "# FisherDiagPruner", "\n", "        ", "pruner", "=", "FisherDiagPruner", "(", "model", "=", "net", ",", "\n", "builder", "=", "VGG", ",", "\n", "config", "=", "config", ",", "\n", "writer", "=", "writer", ",", "\n", "logger", "=", "logger", ",", "\n", "prune_ratio_limit", "=", "config", ".", "prune_ratio_limit", ",", "\n", "network", "=", "'%s%d'", "%", "(", "config", ".", "network", ",", "config", ".", "depth", ")", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "use_patch", "=", "False", ",", "\n", "fix_layers", "=", "0", ")", "\n", "", "elif", "config", ".", "fisher_mode", "==", "'OBD_F2'", ":", "\n", "        ", "pruner", "=", "KFACOBDF2Pruner", "(", "net", ",", "\n", "VGG", ",", "\n", "config", ",", "\n", "writer", ",", "\n", "logger", ",", "\n", "config", ".", "prune_ratio_limit", ",", "\n", "'%s%d'", "%", "(", "config", ".", "network", ",", "config", ".", "depth", ")", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "use_patch", "=", "False", ",", "\n", "fix_layers", "=", "0", ")", "\n", "", "elif", "config", ".", "fisher_mode", "==", "'OBS_F2'", ":", "\n", "        ", "pruner", "=", "KFACOBSF2Pruner", "(", "net", ",", "\n", "VGG", ",", "\n", "config", ",", "\n", "writer", ",", "\n", "logger", ",", "\n", "config", ".", "prune_ratio_limit", ",", "\n", "'%s%d'", "%", "(", "config", ".", "network", ",", "config", ".", "depth", ")", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "use_patch", "=", "False", ",", "\n", "fix_layers", "=", "0", ")", "\n", "", "elif", "config", ".", "fisher_mode", "==", "'eigen_svd'", ":", "\n", "        ", "pruner", "=", "KFACEigenSVDPruner", "(", "net", ",", "\n", "bottleneck_net", ",", "\n", "config", ",", "\n", "writer", ",", "\n", "logger", ",", "\n", "config", ".", "prune_ratio_limit", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "use_patch", "=", "config", ".", "get", "(", "'use_patch'", ",", "True", ")", ",", "\n", "fix_layers", "=", "config", ".", "fix_layers", ",", "\n", "fix_rotation", "=", "config", ".", "fix_rotation", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "pruner", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_summary_writer": [[163, 178], ["utils.common_utils.makedirs", "utils.common_utils.makedirs", "os.path.dirname", "os.path.join", "os.path.join", "os.path.join", "utils.common_utils.get_logger", "utils.common_utils.get_logger.info", "tensorboardX.SummaryWriter", "os.path.abspath", "dict"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.makedirs", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.makedirs", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.get_logger"], ["", "def", "init_summary_writer", "(", "config", ")", ":", "\n", "    ", "makedirs", "(", "config", ".", "summary_dir", ")", "\n", "makedirs", "(", "config", ".", "checkpoint_dir", ")", "\n", "\n", "# set logger", "\n", "path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "path_model", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'models/%s.py'", "%", "config", ".", "network", ")", "\n", "path_main", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'main_prune.py'", ")", "\n", "path_pruner", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'pruner/%s.py'", "%", "config", ".", "pruner", ")", "\n", "logger", "=", "get_logger", "(", "'log'", ",", "logpath", "=", "config", ".", "summary_dir", "+", "'/'", ",", "\n", "filepath", "=", "path_model", ",", "package_files", "=", "[", "path_main", ",", "path_pruner", "]", ")", "\n", "logger", ".", "info", "(", "dict", "(", "config", ")", ")", "\n", "writer", "=", "SummaryWriter", "(", "config", ".", "summary_dir", ")", "\n", "\n", "return", "logger", ",", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.save_model": [[180, 198], ["torch.save", "torch.save", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "save_model", "(", "config", ",", "iteration", ",", "pruner", ",", "cfg", ",", "stat", ",", "fintuned", "=", "True", ")", ":", "\n", "    ", "network", "=", "config", ".", "network", "\n", "depth", "=", "config", ".", "depth", "\n", "dataset", "=", "config", ".", "dataset", "\n", "checkpoint_dir", "=", "config", ".", "checkpoint_dir", "\n", "if", "fintuned", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'%s_%s%s_%d.pth.tar'", "%", "(", "dataset", ",", "network", ",", "depth", ",", "iteration", ")", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'pre_%s_%s%s_%d.pth.tar'", "%", "(", "dataset", ",", "network", ",", "depth", ",", "iteration", ")", ")", "\n", "", "save", "=", "{", "\n", "# 'Q_a': pruner.Q_a,", "\n", "# 'Q_g': pruner.Q_g,", "\n", "'config'", ":", "config", ",", "\n", "'net'", ":", "pruner", ".", "model", ",", "\n", "'cfg'", ":", "cfg", ",", "\n", "'stat'", ":", "stat", "\n", "}", "\n", "torch", ".", "save", "(", "save", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.load_model": [[200, 214], ["print", "torch.load", "torch.load", "print", "print", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "load_model", "(", "config", ",", "iteration", ",", "fintuned", ")", ":", "\n", "    ", "network", "=", "config", ".", "network", "\n", "depth", "=", "config", ".", "depth", "\n", "dataset", "=", "config", ".", "dataset", "\n", "checkpoint_dir", "=", "config", ".", "checkpoint_dir", "\n", "if", "fintuned", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'%s_%s%s_%d.pth.tar'", "%", "(", "dataset", ",", "network", ",", "depth", ",", "iteration", ")", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'pre_%s_%s%s_%d.pth.tar'", "%", "(", "dataset", ",", "network", ",", "depth", ",", "iteration", ")", ")", "\n", "", "print", "(", "'=> Loading from %s.'", "%", "path", ")", "\n", "state", "=", "torch", ".", "load", "(", "path", ")", "\n", "print", "(", "state", "[", "'net'", "]", ")", "\n", "print", "(", "'Loaded.'", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.compute_ratio": [[216, 228], ["main_prune_separable.count_rotation_numels", "logger.info", "main_prune_separable.count_parameters"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.count_rotation_numels", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.count_parameters"], ["", "def", "compute_ratio", "(", "model", ",", "total", ",", "fix_rotation", ",", "logger", ")", ":", "\n", "    ", "indicator", "=", "1", "if", "fix_rotation", "else", "0", "\n", "rotation_numel", "=", "count_rotation_numels", "(", "model", ")", "\n", "pruned_numel", "=", "count_parameters", "(", "model", ")", "+", "rotation_numel", "*", "indicator", "\n", "ratio", "=", "100.", "*", "pruned_numel", "/", "total", "\n", "logger", ".", "info", "(", "'Compression ratio: %.2f%%(%d/%d), Total: %d, Rotation: %d.'", "%", "(", "ratio", ",", "\n", "pruned_numel", ",", "\n", "total", ",", "\n", "pruned_numel", ",", "\n", "rotation_numel", ")", ")", "\n", "unfair_ratio", "=", "100", "-", "100.", "*", "(", "pruned_numel", "-", "rotation_numel", "*", "indicator", ")", "\n", "return", "100", "-", "ratio", ",", "unfair_ratio", ",", "pruned_numel", ",", "rotation_numel", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.main": [[230, 348], ["torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "main_prune_separable.init_summary_writer", "main_prune_separable.init_dataloader", "main_prune_separable.init_network", "main_prune_separable.init_pruner", "utils.common_utils.str_to_list", "utils.common_utils.str_to_list", "utils.common_utils.str_to_list", "utils.common_utils.str_to_list", "config.get", "main_prune_separable.count_parameters", "range", "config.get", "utils.common_utils.str_to_list", "net.train", "len", "logger.info", "logger.info", "logger.info", "main_prune_separable.compute_ratio", "init_pruner.test_model", "init_pruner.test_model", "logger.info", "logger.info", "init_pruner.fine_tune_model", "init_pruner.test_model", "logger.info", "logger.info", "main_prune_separable.save_model", "len", "len", "len", "len", "len", "len", "main_prune_separable.load_model", "init_pruner.make_pruned_model", "main_prune_separable.save_model", "utils.compute_flops.print_model_param_flops", "utils.compute_flops.print_model_param_flops", "main_prune_separable.init_network", "main_prune_separable.init_pruner", "open", "json.dump", "os.path.join"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_summary_writer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_dataloader", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_network", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_pruner", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.str_to_list", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.str_to_list", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.str_to_list", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.str_to_list", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.count_parameters", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.str_to_list", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_pretrain.train", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.compute_ratio", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.test_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.test_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.fine_tune_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.test_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.save_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.load_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner.make_pruned_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.save_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.compute_flops.print_model_param_flops", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.compute_flops.print_model_param_flops", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_network", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_prune_separable.init_pruner"], ["", "def", "main", "(", "config", ")", ":", "\n", "    ", "stats", "=", "{", "}", "\n", "device", "=", "'cuda'", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "# config = init_config() if config is None else config", "\n", "logger", ",", "writer", "=", "init_summary_writer", "(", "config", ")", "\n", "trainloader", ",", "testloader", "=", "init_dataloader", "(", "config", ")", "\n", "net", ",", "bottleneck_net", "=", "init_network", "(", "config", ",", "logger", ",", "device", ")", "\n", "pruner", "=", "init_pruner", "(", "net", ",", "bottleneck_net", ",", "config", ",", "writer", ",", "logger", ")", "\n", "\n", "# start pruning", "\n", "epochs", "=", "str_to_list", "(", "config", ".", "epoch", ",", "','", ",", "int", ")", "\n", "learning_rates", "=", "str_to_list", "(", "config", ".", "learning_rate", ",", "','", ",", "float", ")", "\n", "weight_decays", "=", "str_to_list", "(", "config", ".", "weight_decay", ",", "','", ",", "float", ")", "\n", "ratios", "=", "str_to_list", "(", "config", ".", "ratio", ",", "','", ",", "float", ")", "\n", "if", "config", ".", "get", "(", "'pre_model'", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "pre_load", "=", "str_to_list", "(", "config", ".", "pre_model", ",", "','", ",", "int", ")", "\n", "", "else", ":", "\n", "        ", "pre_load", "=", "None", "\n", "\n", "", "fisher_type", "=", "config", ".", "fisher_type", "# empirical|true", "\n", "fisher_mode", "=", "config", ".", "fisher_mode", "# eigen|full|diagonal", "\n", "normalize", "=", "config", ".", "normalize", "\n", "prune_mode", "=", "config", ".", "prune_mode", "# one-pass | iterative", "\n", "fix_rotation", "=", "config", ".", "get", "(", "'fix_rotation'", ",", "True", ")", "\n", "\n", "assert", "(", "len", "(", "epochs", ")", "==", "len", "(", "learning_rates", ")", "and", "\n", "len", "(", "learning_rates", ")", "==", "len", "(", "weight_decays", ")", "and", "\n", "len", "(", "weight_decays", ")", "==", "len", "(", "ratios", ")", ")", "\n", "\n", "total_parameters", "=", "count_parameters", "(", "net", ".", "train", "(", ")", ")", "\n", "for", "it", "in", "range", "(", "len", "(", "epochs", ")", ")", ":", "\n", "        ", "epoch", "=", "epochs", "[", "it", "]", "\n", "lr", "=", "learning_rates", "[", "it", "]", "\n", "wd", "=", "weight_decays", "[", "it", "]", "\n", "ratio", "=", "ratios", "[", "it", "]", "\n", "logger", ".", "info", "(", "'-'", "*", "120", ")", "\n", "logger", ".", "info", "(", "'** [%d], Ratio: %.2f, epoch: %d, lr: %.4f, wd: %.4f'", "%", "(", "it", ",", "ratio", ",", "epoch", ",", "lr", ",", "wd", ")", ")", "\n", "logger", ".", "info", "(", "'Reinit: %s, Fisher_mode: %s, fisher_type: %s, normalize: %s, fix_rotation: %s.'", "%", "(", "config", ".", "re_init", ",", "\n", "fisher_mode", ",", "\n", "fisher_type", ",", "\n", "normalize", ",", "\n", "fix_rotation", ")", ")", "\n", "pruner", ".", "fix_rotation", "=", "fix_rotation", "\n", "\n", "# conduct pruning", "\n", "if", "pre_load", "is", "not", "None", "and", "pre_load", "[", "it", "]", "==", "1", ":", "\n", "            ", "state", "=", "load_model", "(", "config", ",", "it", ",", "False", ")", "\n", "pruner", ".", "model", "=", "state", "[", "'net'", "]", "\n", "cfg", "=", "state", "[", "'cfg'", "]", "\n", "", "else", ":", "\n", "            ", "cfg", "=", "pruner", ".", "make_pruned_model", "(", "trainloader", ",", "\n", "criterion", "=", "criterion", ",", "\n", "device", "=", "device", ",", "\n", "fisher_type", "=", "fisher_type", ",", "\n", "prune_ratio", "=", "ratio", ",", "\n", "normalize", "=", "normalize", ",", "\n", "re_init", "=", "config", ".", "re_init", ")", "\n", "save_model", "(", "config", ",", "it", ",", "pruner", ",", "cfg", ",", "None", ",", "False", ")", "\n", "\n", "# for tracking the best accuracy", "\n", "", "compression_ratio", ",", "unfair_ratio", ",", "all_numel", ",", "rotation_numel", "=", "compute_ratio", "(", "pruner", ".", "model", ",", "total_parameters", ",", "\n", "fix_rotation", ",", "logger", ")", "\n", "\n", "if", "config", ".", "dataset", "==", "'tiny_imagenet'", ":", "\n", "            ", "total_flops", ",", "rotation_flops", "=", "print_model_param_flops", "(", "pruner", ".", "model", ",", "64", ",", "cuda", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "total_flops", ",", "rotation_flops", "=", "print_model_param_flops", "(", "pruner", ".", "model", ",", "32", ",", "cuda", "=", "True", ")", "\n", "", "train_loss_pruned", ",", "train_acc_pruned", "=", "pruner", ".", "test_model", "(", "trainloader", ",", "criterion", ",", "device", ")", "\n", "test_loss_pruned", ",", "test_acc_pruned", "=", "pruner", ".", "test_model", "(", "testloader", ",", "criterion", ",", "device", ")", "\n", "\n", "# write results", "\n", "logger", ".", "info", "(", "'Before: Accuracy: %.2f%%(train), %.2f%%(test).'", "%", "(", "train_acc_pruned", ",", "test_acc_pruned", ")", ")", "\n", "logger", ".", "info", "(", "'        Loss:     %.2f  (train), %.2f  (test).'", "%", "(", "train_loss_pruned", ",", "test_loss_pruned", ")", ")", "\n", "\n", "test_loss_finetuned", ",", "test_acc_finetuned", "=", "pruner", ".", "fine_tune_model", "(", "trainloader", "=", "trainloader", ",", "\n", "testloader", "=", "testloader", ",", "\n", "criterion", "=", "criterion", ",", "\n", "optim", "=", "optim", ",", "\n", "learning_rate", "=", "lr", ",", "\n", "weight_decay", "=", "wd", ",", "\n", "nepochs", "=", "epoch", ")", "\n", "train_loss_finetuned", ",", "train_acc_finetuned", "=", "pruner", ".", "test_model", "(", "trainloader", ",", "criterion", ",", "device", ")", "\n", "logger", ".", "info", "(", "'After:  Accuracy: %.2f%%(train), %.2f%%(test).'", "%", "(", "train_acc_finetuned", ",", "test_acc_finetuned", ")", ")", "\n", "logger", ".", "info", "(", "'        Loss:     %.2f  (train), %.2f  (test).'", "%", "(", "train_loss_finetuned", ",", "test_loss_finetuned", ")", ")", "\n", "# save model", "\n", "\n", "stat", "=", "{", "\n", "'total_flops'", ":", "total_flops", ",", "\n", "'rotation_flops'", ":", "rotation_flops", ",", "\n", "'it'", ":", "it", ",", "\n", "'prune_ratio'", ":", "ratio", ",", "\n", "'cr'", ":", "compression_ratio", ",", "\n", "'unfair_cr'", ":", "unfair_ratio", ",", "\n", "'all_params'", ":", "all_numel", ",", "\n", "'rotation_params'", ":", "rotation_numel", ",", "\n", "'prune/train_loss'", ":", "train_loss_pruned", ",", "\n", "'prune/train_acc'", ":", "train_acc_pruned", ",", "\n", "'prune/test_loss'", ":", "test_loss_pruned", ",", "\n", "'prune/test_acc'", ":", "test_acc_pruned", ",", "\n", "'finetune/train_loss'", ":", "train_loss_finetuned", ",", "\n", "'finetune/test_loss'", ":", "test_loss_finetuned", ",", "\n", "'finetune/train_acc'", ":", "train_acc_finetuned", ",", "\n", "'finetune/test_acc'", ":", "test_acc_finetuned", "\n", "}", "\n", "save_model", "(", "config", ",", "it", ",", "pruner", ",", "cfg", ",", "stat", ")", "\n", "\n", "stats", "[", "it", "]", "=", "stat", "\n", "\n", "if", "prune_mode", "==", "'one_pass'", ":", "\n", "            ", "del", "net", "\n", "del", "pruner", "\n", "net", ",", "bottleneck_net", "=", "init_network", "(", "config", ",", "logger", ",", "device", ")", "\n", "pruner", "=", "init_pruner", "(", "net", ",", "bottleneck_net", ",", "config", ",", "writer", ",", "logger", ")", "\n", "pruner", ".", "iter", "=", "it", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", ".", "summary_dir", ",", "'stats.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "stats", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeMatGrad.__call__": [[109, 118], ["isinstance", "cls.linear", "isinstance", "cls.conv2d"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovG.linear", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovAPatch.conv2d"], ["    ", "@", "classmethod", "\n", "def", "__call__", "(", "cls", ",", "input", ",", "grad_output", ",", "layer", ")", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "grad", "=", "cls", ".", "linear", "(", "input", ",", "grad_output", ",", "layer", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "grad", "=", "cls", ".", "conv2d", "(", "input", ",", "grad_output", ",", "layer", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeMatGrad.linear": [[119, 134], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "grad_output.unsqueeze.unsqueeze.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.new().fill_", "torch.cat.new().fill_", "torch.cat.new().fill_", "torch.cat.new", "torch.cat.new", "torch.cat.new", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "linear", "(", "input", ",", "grad_output", ",", "layer", ")", ":", "\n", "        ", "\"\"\"\n        :param input: batch_size * input_dim\n        :param grad_output: batch_size * output_dim\n        :param layer: [nn.module] output_dim * input_dim\n        :return: batch_size * output_dim * (input_dim + [1 if with bias])\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                ", "input", "=", "torch", ".", "cat", "(", "[", "input", ",", "input", ".", "new", "(", "input", ".", "size", "(", "0", ")", ",", "1", ")", ".", "fill_", "(", "1", ")", "]", ",", "1", ")", "\n", "", "input", "=", "input", ".", "unsqueeze", "(", "1", ")", "\n", "grad_output", "=", "grad_output", ".", "unsqueeze", "(", "2", ")", "\n", "grad", "=", "torch", ".", "bmm", "(", "grad_output", ",", "input", ")", "\n", "", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeMatGrad.conv2d": [[135, 154], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "kfac_utils._extract_patches", "torch.cat.view", "torch.cat.view", "torch.cat.view", "utils.common_utils.try_contiguous().view.transpose().transpose", "utils.common_utils.try_contiguous().view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat.size", "torch.cat.size", "torch.cat.size", "utils.common_utils.try_contiguous().view.size", "utils.common_utils.try_contiguous().view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.common_utils.try_contiguous().view.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "utils.common_utils.try_contiguous().view.transpose", "utils.common_utils.try_contiguous", "torch.cat.new().fill_", "torch.cat.new().fill_", "torch.cat.new().fill_", "torch.cat.new", "torch.cat.new", "torch.cat.new", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils._extract_patches", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.try_contiguous"], ["", "@", "staticmethod", "\n", "def", "conv2d", "(", "input", ",", "grad_output", ",", "layer", ")", ":", "\n", "        ", "\"\"\"\n        :param input: batch_size * in_c * in_h * in_w\n        :param grad_output: batch_size * out_c * h * w\n        :param layer: nn.module batch_size * out_c * (in_c*k_h*k_w + [1 if with bias])\n        :return:\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "input", "=", "_extract_patches", "(", "input", ",", "layer", ".", "kernel_size", ",", "layer", ".", "stride", ",", "layer", ".", "padding", ")", "\n", "input", "=", "input", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "-", "1", ")", ")", "# b * hw * in_c*kh*kw", "\n", "grad_output", "=", "grad_output", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "grad_output", "=", "try_contiguous", "(", "grad_output", ")", ".", "view", "(", "grad_output", ".", "size", "(", "0", ")", ",", "-", "1", ",", "grad_output", ".", "size", "(", "-", "1", ")", ")", "\n", "# b * hw * out_c", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                ", "input", "=", "torch", ".", "cat", "(", "[", "input", ",", "input", ".", "new", "(", "input", ".", "size", "(", "0", ")", ",", "1", ")", ".", "fill_", "(", "1", ")", "]", ",", "1", ")", "\n", "", "input", "=", "input", ".", "view", "(", "grad_output", ".", "size", "(", "0", ")", ",", "-", "1", ",", "input", ".", "size", "(", "-", "1", ")", ")", "# b * hw * in_c*kh*kw", "\n", "grad", "=", "torch", ".", "einsum", "(", "'abm,abn->amn'", ",", "(", "grad_output", ",", "input", ")", ")", "\n", "", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovA.compute_cov_a": [[158, 161], ["cls.__call__"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.PresetLRScheduler.__call__"], ["    ", "@", "classmethod", "\n", "def", "compute_cov_a", "(", "cls", ",", "a", ",", "layer", ")", ":", "\n", "        ", "return", "cls", ".", "__call__", "(", "a", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovA.__call__": [[162, 173], ["isinstance", "cls.linear", "isinstance", "cls.conv2d"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovG.linear", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovAPatch.conv2d"], ["", "@", "classmethod", "\n", "def", "__call__", "(", "cls", ",", "a", ",", "layer", ")", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "cov_a", "=", "cls", ".", "linear", "(", "a", ",", "layer", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "cov_a", "=", "cls", ".", "conv2d", "(", "a", ",", "layer", ")", "\n", "", "else", ":", "\n", "# raise NotImplementedError", "\n", "            ", "cov_a", "=", "None", "\n", "\n", "", "return", "cov_a", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovA.conv2d": [[174, 184], ["torch.cat.size", "torch.cat.size", "torch.cat.size", "kfac_utils._extract_patches", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cat.new().fill_", "torch.cat.new().fill_", "torch.cat.new().fill_", "torch.cat.new", "torch.cat.new", "torch.cat.new", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils._extract_patches"], ["", "@", "staticmethod", "\n", "def", "conv2d", "(", "a", ",", "layer", ")", ":", "\n", "        ", "batch_size", "=", "a", ".", "size", "(", "0", ")", "\n", "a", "=", "_extract_patches", "(", "a", ",", "layer", ".", "kernel_size", ",", "layer", ".", "stride", ",", "layer", ".", "padding", ")", "\n", "spatial_size", "=", "a", ".", "size", "(", "1", ")", "*", "a", ".", "size", "(", "2", ")", "\n", "a", "=", "a", ".", "view", "(", "-", "1", ",", "a", ".", "size", "(", "-", "1", ")", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "            ", "a", "=", "torch", ".", "cat", "(", "[", "a", ",", "a", ".", "new", "(", "a", ".", "size", "(", "0", ")", ",", "1", ")", ".", "fill_", "(", "1", ")", "]", ",", "1", ")", "\n", "", "a", "=", "a", "/", "spatial_size", "\n", "return", "a", ".", "t", "(", ")", "@", "(", "a", "/", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovA.linear": [[185, 192], ["torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cat.new().fill_", "torch.cat.new().fill_", "torch.cat.new().fill_", "torch.cat.new", "torch.cat.new", "torch.cat.new", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "linear", "(", "a", ",", "layer", ")", ":", "\n", "# a: batch_size * in_dim", "\n", "        ", "batch_size", "=", "a", ".", "size", "(", "0", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "            ", "a", "=", "torch", ".", "cat", "(", "[", "a", ",", "a", ".", "new", "(", "a", ".", "size", "(", "0", ")", ",", "1", ")", ".", "fill_", "(", "1", ")", "]", ",", "1", ")", "\n", "", "return", "a", ".", "t", "(", ")", "@", "(", "a", "/", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovG.compute_cov_g": [[196, 206], ["cls.__call__"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.PresetLRScheduler.__call__"], ["    ", "@", "classmethod", "\n", "def", "compute_cov_g", "(", "cls", ",", "g", ",", "layer", ",", "batch_averaged", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param g: gradient\n        :param layer: the corresponding layer\n        :param batch_averaged: if the gradient is already averaged with the batch size?\n        :return:\n        \"\"\"", "\n", "# batch_size = g.size(0)", "\n", "return", "cls", ".", "__call__", "(", "g", ",", "layer", ",", "batch_averaged", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovG.__call__": [[207, 217], ["isinstance", "cls.conv2d", "isinstance", "cls.linear"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovAPatch.conv2d", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovG.linear"], ["", "@", "classmethod", "\n", "def", "__call__", "(", "cls", ",", "g", ",", "layer", ",", "batch_averaged", ")", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "cov_g", "=", "cls", ".", "conv2d", "(", "g", ",", "layer", ",", "batch_averaged", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "cov_g", "=", "cls", ".", "linear", "(", "g", ",", "layer", ",", "batch_averaged", ")", "\n", "", "else", ":", "\n", "            ", "cov_g", "=", "None", "\n", "\n", "", "return", "cov_g", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovG.conv2d": [[218, 234], ["g.view.view.transpose().transpose", "utils.common_utils.try_contiguous", "g.view.view.view", "g.view.view.size", "g.view.view.size", "g.view.view.size", "g.view.view.t", "g.view.view.transpose", "g.view.view.size"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.try_contiguous"], ["", "@", "staticmethod", "\n", "def", "conv2d", "(", "g", ",", "layer", ",", "batch_averaged", ")", ":", "\n", "# g: batch_size * n_filters * out_h * out_w", "\n", "# n_filters is actually the output dimension (analogous to Linear layer)", "\n", "        ", "spatial_size", "=", "g", ".", "size", "(", "2", ")", "*", "g", ".", "size", "(", "3", ")", "\n", "batch_size", "=", "g", ".", "shape", "[", "0", "]", "\n", "g", "=", "g", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "g", "=", "try_contiguous", "(", "g", ")", "\n", "g", "=", "g", ".", "view", "(", "-", "1", ",", "g", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "if", "batch_averaged", ":", "\n", "            ", "g", "=", "g", "*", "batch_size", "\n", "", "g", "=", "g", "*", "spatial_size", "\n", "cov_g", "=", "g", ".", "t", "(", ")", "@", "(", "g", "/", "g", ".", "size", "(", "0", ")", ")", "\n", "\n", "return", "cov_g", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovG.linear": [[235, 245], ["g.size", "g.t", "g.t"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "linear", "(", "g", ",", "layer", ",", "batch_averaged", ")", ":", "\n", "# g: batch_size * out_dim", "\n", "        ", "batch_size", "=", "g", ".", "size", "(", "0", ")", "\n", "\n", "if", "batch_averaged", ":", "\n", "            ", "cov_g", "=", "g", ".", "t", "(", ")", "@", "(", "g", "*", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "cov_g", "=", "g", ".", "t", "(", ")", "@", "(", "g", "/", "batch_size", ")", "\n", "", "return", "cov_g", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovAPatch.conv2d": [[248, 259], ["torch.cat.size", "torch.cat.size", "torch.cat.size", "kfac_utils._extract_channel_patches", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cat.new().fill_", "torch.cat.new().fill_", "torch.cat.new().fill_", "torch.cat.new", "torch.cat.new", "torch.cat.new", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils._extract_channel_patches"], ["    ", "@", "staticmethod", "\n", "def", "conv2d", "(", "a", ",", "layer", ")", ":", "\n", "        ", "batch_size", "=", "a", ".", "size", "(", "0", ")", "\n", "a", "=", "_extract_channel_patches", "(", "a", ",", "layer", ".", "kernel_size", ",", "layer", ".", "stride", ",", "layer", ".", "padding", ")", "\n", "spatial_size", "=", "a", ".", "size", "(", "1", ")", "*", "a", ".", "size", "(", "2", ")", "\n", "a", "=", "a", ".", "view", "(", "-", "1", ",", "a", ".", "size", "(", "-", "1", ")", ")", "\n", "patch_size", "=", "layer", ".", "kernel_size", "[", "0", "]", "*", "layer", ".", "kernel_size", "[", "1", "]", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "            ", "a", "=", "torch", ".", "cat", "(", "[", "a", ",", "a", ".", "new", "(", "a", ".", "size", "(", "0", ")", ",", "1", ")", ".", "fill_", "(", "1.", "/", "patch_size", ")", "]", ",", "1", ")", "\n", "", "a", "=", "a", "/", "spatial_size", "\n", "return", "a", ".", "t", "(", ")", "@", "(", "a", "/", "batch_size", "/", "patch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils._extract_patches": [[8, 26], ["x.view.unfold", "x.view.unfold", "x.view.transpose_().transpose_().contiguous", "x.view.view", "x.view.size", "x.view.size", "x.view.size", "torch.pad", "x.view.transpose_().transpose_", "x.view.size", "x.view.size", "x.view.size", "x.view.transpose_"], "function", ["None"], ["def", "_extract_patches", "(", "x", ",", "kernel_size", ",", "stride", ",", "padding", ")", ":", "\n", "    ", "\"\"\"\n    :param x: The input feature maps.  (batch_size, in_c, h, w)\n    :param kernel_size: the kernel size of the conv filter (tuple of two elements)\n    :param stride: the stride of conv operation  (tuple of two elements)\n    :param padding: number of paddings. be a tuple of two elements\n    :return: (batch_size, out_h, out_w, in_c*kh*kw)\n    \"\"\"", "\n", "if", "padding", "[", "0", "]", "+", "padding", "[", "1", "]", ">", "0", ":", "\n", "        ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "padding", "[", "1", "]", ",", "padding", "[", "1", "]", ",", "padding", "[", "0", "]", ",", "\n", "padding", "[", "0", "]", ")", ")", ".", "data", "# Actually check dims", "\n", "", "x", "=", "x", ".", "unfold", "(", "2", ",", "kernel_size", "[", "0", "]", ",", "stride", "[", "0", "]", ")", "\n", "x", "=", "x", ".", "unfold", "(", "3", ",", "kernel_size", "[", "1", "]", ",", "stride", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "transpose_", "(", "1", ",", "2", ")", ".", "transpose_", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "\n", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ",", "\n", "x", ".", "size", "(", "3", ")", "*", "x", ".", "size", "(", "4", ")", "*", "x", ".", "size", "(", "5", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils._extract_channel_patches": [[28, 44], ["x.view.unfold", "x.view.unfold", "x.view.transpose_().transpose_().transpose_().transpose().contiguous", "x.view.view", "x.view.size", "x.view.size", "x.view.size", "x.view.size", "x.view.size", "x.view.size", "torch.pad", "x.view.transpose_().transpose_().transpose_().transpose", "x.view.transpose_().transpose_().transpose_", "x.view.transpose_().transpose_", "x.view.transpose_"], "function", ["None"], ["", "def", "_extract_channel_patches", "(", "x", ",", "kernel_size", ",", "stride", ",", "padding", ")", ":", "\n", "    ", "\"\"\"\n    :param x: The input feature maps.  (batch_size, in_c, h, w)\n    :param kernel_size: the kernel size of the conv filter (tuple of two elements)\n    :param stride: the stride of conv operation  (tuple of two elements)\n    :param padding: number of paddings. be a tuple of two elements\n    :return: (batch_size, out_h, out_w, in_c*kh*kw)\n    \"\"\"", "\n", "if", "padding", "[", "0", "]", "+", "padding", "[", "1", "]", ">", "0", ":", "\n", "        ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "padding", "[", "1", "]", ",", "padding", "[", "1", "]", ",", "padding", "[", "0", "]", ",", "\n", "padding", "[", "0", "]", ")", ")", ".", "data", "# Actually check dims", "\n", "", "x", "=", "x", ".", "unfold", "(", "2", ",", "kernel_size", "[", "0", "]", ",", "stride", "[", "0", "]", ")", "\n", "x", "=", "x", ".", "unfold", "(", "3", ",", "kernel_size", "[", "1", "]", ",", "stride", "[", "1", "]", ")", "# b * oh * ow * kh * kw * inc", "\n", "x", "=", "x", ".", "transpose_", "(", "1", ",", "2", ")", ".", "transpose_", "(", "2", ",", "3", ")", ".", "transpose_", "(", "3", ",", "4", ")", ".", "transpose", "(", "4", ",", "5", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "x", ".", "size", "(", "4", ")", ",", "x", ".", "size", "(", "5", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.update_running_stat": [[46, 51], ["None"], "function", ["None"], ["", "def", "update_running_stat", "(", "aa", ",", "m_aa", ",", "stat_decay", ")", ":", "\n", "# using inplace operation to save memory!", "\n", "    ", "m_aa", "*=", "stat_decay", "/", "(", "1", "-", "stat_decay", ")", "\n", "m_aa", "+=", "aa", "\n", "m_aa", "*=", "(", "1", "-", "stat_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.fetch_mat_weights": [[53, 81], ["isinstance", "isinstance", "layer.weight.transpose().transpose", "torch.cat.size", "utils.common_utils.try_contiguous", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.size", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer.weight.transpose", "torch.cat", "torch.cat", "torch.cat", "layer.bias.unsqueeze", "layer.bias.unsqueeze", "layer.bias.unsqueeze", "range"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.try_contiguous"], ["", "def", "fetch_mat_weights", "(", "layer", ",", "use_patch", "=", "False", ")", ":", "\n", "# -> output_dium * input_dim (kh*kw*in_c + [1 if with bias])", "\n", "    ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "if", "use_patch", ":", "\n", "            ", "weight", "=", "layer", ".", "weight", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", "# n_out * kh * kw * inc", "\n", "n_out", ",", "k_h", ",", "k_w", ",", "in_c", "=", "weight", ".", "size", "(", ")", "\n", "weight", "=", "try_contiguous", "(", "weight", ")", "\n", "weight", "=", "weight", ".", "view", "(", "-", "1", ",", "weight", ".", "size", "(", "-", "1", ")", ")", "\n", "bias", "=", "0", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                ", "copied_bias", "=", "torch", ".", "cat", "(", "[", "layer", ".", "bias", ".", "unsqueeze", "(", "1", ")", "for", "_", "in", "range", "(", "k_h", "*", "k_w", ")", "]", ",", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "weight", "=", "torch", ".", "cat", "(", "[", "weight", ",", "copied_bias", "]", ",", "1", ")", "# layer.bias.unsqueeze(1)], 1)", "\n", "bias", "=", "1", "\n", "", "weight", "=", "weight", ".", "view", "(", "n_out", ",", "k_h", "*", "k_w", ",", "in_c", "+", "bias", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "layer", ".", "weight", "# n_filters * in_c * kh * kw", "\n", "# weight = weight.transpose(1, 2).transpose(2, 3).contiguous()", "\n", "weight", "=", "weight", ".", "view", "(", "weight", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                ", "weight", "=", "torch", ".", "cat", "(", "[", "weight", ",", "layer", ".", "bias", ".", "unsqueeze", "(", "1", ")", "]", ",", "1", ")", "\n", "", "", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "weight", "=", "layer", ".", "weight", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "            ", "weight", "=", "torch", ".", "cat", "(", "[", "weight", ",", "layer", ".", "bias", ".", "unsqueeze", "(", "1", ")", "]", ",", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.mat_to_weight_and_bias": [[83, 105], ["isinstance", "mat.view", "isinstance"], "function", ["None"], ["", "def", "mat_to_weight_and_bias", "(", "mat", ",", "layer", ")", ":", "\n", "    ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# mat: n_filters * (in_c * kh * kw)", "\n", "        ", "k_h", ",", "k_w", "=", "layer", ".", "kernel_size", "\n", "in_c", "=", "layer", ".", "in_channels", "\n", "out_c", "=", "layer", ".", "out_channels", "\n", "bias", "=", "None", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "mat", "[", ":", ",", "-", "1", "]", "\n", "mat", "=", "mat", "[", ":", ",", ":", "-", "1", "]", "\n", "", "weight", "=", "mat", ".", "view", "(", "out_c", ",", "in_c", ",", "k_h", ",", "k_w", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "in_c", "=", "layer", ".", "in_features", "\n", "out_c", "=", "layer", ".", "out_features", "\n", "bias", "=", "None", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "mat", "[", ":", ",", "-", "1", "]", "\n", "mat", "=", "mat", "[", ":", ",", ":", "-", "1", "]", "\n", "", "weight", "=", "mat", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "weight", ",", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.StairCaseLRScheduler.__init__": [[103, 107], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start_at", ",", "interval", ",", "decay_rate", ")", ":", "\n", "        ", "self", ".", "start_at", "=", "start_at", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "decay_rate", "=", "decay_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.StairCaseLRScheduler.__call__": [[108, 118], ["print"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "optimizer", ",", "iteration", ")", ":", "\n", "        ", "start_at", "=", "self", ".", "start_at", "\n", "interval", "=", "self", ".", "interval", "\n", "decay_rate", "=", "self", ".", "decay_rate", "\n", "if", "(", "start_at", ">=", "0", ")", "and", "(", "iteration", ">=", "start_at", ")", "and", "(", "iteration", "+", "1", ")", "%", "interval", "==", "0", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "*=", "decay_rate", "\n", "print", "(", "'[%d]Decay lr to %f'", "%", "(", "iteration", ",", "param_group", "[", "'lr'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.StairCaseLRScheduler.get_lr": [[119, 124], ["None"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "get_lr", "(", "optimizer", ")", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "lr", "=", "param_group", "[", "'lr'", "]", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.PresetLRScheduler.__init__": [[129, 136], ["print", "pprint.pprint.pprint"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "decay_schedule", ")", ":", "\n", "# decay_schedule is a dictionary", "\n", "# which is for specifying iteration -> lr", "\n", "        ", "self", ".", "decay_schedule", "=", "decay_schedule", "\n", "print", "(", "'=> Using a preset learning rate schedule:'", ")", "\n", "pprint", "(", "decay_schedule", ")", "\n", "self", ".", "for_once", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.PresetLRScheduler.__call__": [[137, 141], ["common_utils.PresetLRScheduler.decay_schedule.get"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "optimizer", ",", "iteration", ")", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "lr", "=", "self", ".", "decay_schedule", ".", "get", "(", "iteration", ",", "param_group", "[", "'lr'", "]", ")", "\n", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.PresetLRScheduler.get_lr": [[142, 147], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_lr", "(", "optimizer", ")", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "lr", "=", "param_group", "[", "'lr'", "]", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.get_logger": [[12, 36], ["logging.getLogger", "logging.getLogger.setLevel", "common_utils.makedirs", "logging.getLogger.info", "time.strftime", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "open", "logging.getLogger.info", "logging.getLogger.info", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "f.read", "open", "logging.getLogger.info", "package_f.read"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.makedirs"], ["def", "get_logger", "(", "name", ",", "logpath", ",", "filepath", ",", "package_files", "=", "[", "]", ",", "\n", "displaying", "=", "True", ",", "saving", "=", "True", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "log_path", "=", "logpath", "+", "name", "+", "time", ".", "strftime", "(", "\"-%Y%m%d-%H%M%S\"", ")", "\n", "makedirs", "(", "log_path", ")", "\n", "if", "saving", ":", "\n", "        ", "info_file_handler", "=", "logging", ".", "FileHandler", "(", "log_path", ")", "\n", "info_file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "info_file_handler", ")", "\n", "", "logger", ".", "info", "(", "filepath", ")", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "logger", ".", "info", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "for", "f", "in", "package_files", ":", "\n", "        ", "logger", ".", "info", "(", "f", ")", "\n", "with", "open", "(", "f", ",", "'r'", ")", "as", "package_f", ":", "\n", "            ", "logger", ".", "info", "(", "package_f", ".", "read", "(", ")", ")", "\n", "", "", "if", "displaying", ":", "\n", "        ", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.makedirs": [[38, 41], ["os.path.exists", "os.makedirs", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.makedirs"], ["", "def", "makedirs", "(", "filename", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.str_to_list": [[43, 49], ["src.split", "converter"], "function", ["None"], ["", "", "def", "str_to_list", "(", "src", ",", "delimiter", ",", "converter", ")", ":", "\n", "    ", "\"\"\"Conver a string to list.\n    \"\"\"", "\n", "src_split", "=", "src", ".", "split", "(", "delimiter", ")", "\n", "res", "=", "[", "converter", "(", "_", ")", "for", "_", "in", "src_split", "]", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.get_config_from_json": [[51, 63], ["easydict.EasyDict", "open", "json.load"], "function", ["None"], ["", "def", "get_config_from_json", "(", "json_file", ")", ":", "\n", "    ", "\"\"\"\n    Get the config from a json file\n    :param json_file:\n    :return: config(namespace) or config(dictionary)\n    \"\"\"", "\n", "# parse the configurations from the config json file provided", "\n", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "config_file", ":", "\n", "        ", "config_dict", "=", "json", ".", "load", "(", "config_file", ")", "\n", "", "config", "=", "edict", "(", "config_dict", ")", "\n", "\n", "return", "config", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.process_config": [[65, 77], ["common_utils.get_config_from_json", "os.path.join", "os.path.join", "json_file.split"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.get_config_from_json"], ["", "def", "process_config", "(", "json_file", ")", ":", "\n", "    ", "\"\"\"Process a json file into a config file.\n    Where we can access the value using .xxx\n    Note: we will need to create a similar directory as the config file.\n    \"\"\"", "\n", "config", ",", "_", "=", "get_config_from_json", "(", "json_file", ")", "\n", "paths", "=", "json_file", ".", "split", "(", "'/'", ")", "[", "1", ":", "-", "1", "]", "\n", "summary_dir", "=", "[", "\"./runs/pruning\"", "]", "+", "paths", "+", "[", "config", ".", "exp_name", ",", "\"summary/\"", "]", "\n", "ckpt_dir", "=", "[", "\"./runs/pruning\"", "]", "+", "paths", "+", "[", "config", ".", "exp_name", ",", "\"checkpoint/\"", "]", "\n", "config", ".", "summary_dir", "=", "os", ".", "path", ".", "join", "(", "*", "summary_dir", ")", "\n", "config", ".", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "*", "ckpt_dir", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.try_contiguous": [[79, 84], ["x.contiguous.is_contiguous", "x.contiguous.contiguous"], "function", ["None"], ["", "def", "try_contiguous", "(", "x", ")", ":", "\n", "    ", "if", "not", "x", ".", "is_contiguous", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.try_cuda": [[86, 90], ["torch.cuda.is_available", "x.cuda.cuda"], "function", ["None"], ["", "def", "try_cuda", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.tensor_to_list": [[92, 97], ["len", "tensor[].item", "common_utils.tensor_to_list", "range", "range"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.tensor_to_list"], ["", "def", "tensor_to_list", "(", "tensor", ")", ":", "\n", "    ", "if", "len", "(", "tensor", ".", "shape", ")", "==", "1", ":", "\n", "        ", "return", "[", "tensor", "[", "_", "]", ".", "item", "(", ")", "for", "_", "in", "range", "(", "tensor", ".", "shape", "[", "0", "]", ")", "]", "\n", "", "else", ":", "\n", "        ", "return", "[", "tensor_to_list", "(", "tensor", "[", "_", "]", ")", "for", "_", "in", "range", "(", "tensor", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.prod": [[152, 161], ["isinstance"], "function", ["None"], ["", "", "", "def", "prod", "(", "l", ")", ":", "\n", "    ", "val", "=", "1", "\n", "if", "isinstance", "(", "l", ",", "list", ")", ":", "\n", "        ", "for", "v", "in", "l", ":", "\n", "            ", "val", "*=", "v", "\n", "", "", "else", ":", "\n", "        ", "val", "=", "val", "*", "l", "\n", "\n", "", "return", "val", "", "", ""]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.data_utils.get_transforms": [[6, 64], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["def", "get_transforms", "(", "dataset", ")", ":", "\n", "    ", "transform_train", "=", "None", "\n", "transform_test", "=", "None", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "\n", "", "if", "dataset", "==", "'cifar100'", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5071", ",", "0.4867", ",", "0.4408", ")", ",", "(", "0.2675", ",", "0.2565", ",", "0.2761", ")", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5071", ",", "0.4867", ",", "0.4408", ")", ",", "(", "0.2675", ",", "0.2565", ",", "0.2761", ")", ")", ",", "\n", "]", ")", "\n", "\n", "", "if", "dataset", "==", "'cinic-10'", ":", "\n", "# cinic_directory = '/path/to/cinic/directory'", "\n", "        ", "cinic_mean", "=", "[", "0.47889522", ",", "0.47227842", ",", "0.43047404", "]", "\n", "cinic_std", "=", "[", "0.24205776", ",", "0.23828046", ",", "0.25874835", "]", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cinic_mean", ",", "cinic_std", ")", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cinic_mean", ",", "cinic_std", ")", "]", ")", "\n", "\n", "", "if", "dataset", "==", "'tiny_imagenet'", ":", "\n", "        ", "tiny_mean", "=", "[", "0.48024578664982126", ",", "0.44807218089384643", ",", "0.3975477478649648", "]", "\n", "tiny_std", "=", "[", "0.2769864069088257", ",", "0.26906448510256", ",", "0.282081906210584", "]", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "64", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "tiny_mean", ",", "tiny_std", ")", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "tiny_mean", ",", "tiny_std", ")", "]", ")", "\n", "\n", "", "assert", "transform_test", "is", "not", "None", "and", "transform_train", "is", "not", "None", ",", "'Error, no dataset %s'", "%", "dataset", "\n", "return", "transform_train", ",", "transform_test", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.data_utils.get_dataloader": [[66, 92], ["data_utils.get_transforms", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.data_utils.get_transforms"], ["", "def", "get_dataloader", "(", "dataset", ",", "train_batch_size", ",", "test_batch_size", ",", "num_workers", "=", "2", ",", "root", "=", "'../data'", ")", ":", "\n", "    ", "transform_train", ",", "transform_test", "=", "get_transforms", "(", "dataset", ")", "\n", "trainset", ",", "testset", "=", "None", ",", "None", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "\n", "", "if", "dataset", "==", "'cifar100'", ":", "\n", "        ", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "root", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "root", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "\n", "", "if", "dataset", "==", "'cinic-10'", ":", "\n", "        ", "trainset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "+", "'/cinic-10/trainval'", ",", "transform", "=", "transform_train", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "+", "'/cinic-10/test'", ",", "transform", "=", "transform_test", ")", "\n", "\n", "", "if", "dataset", "==", "'tiny_imagenet'", ":", "\n", "        ", "trainset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "+", "'/tiny_imagenet/train'", ",", "transform", "=", "transform_train", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "+", "'/tiny_imagenet/val'", ",", "transform", "=", "transform_test", ")", "\n", "\n", "", "assert", "trainset", "is", "not", "None", "and", "testset", "is", "not", "None", ",", "'Error, no dataset %s'", "%", "dataset", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "train_batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ")", "\n", "\n", "return", "trainloader", ",", "testloader", "", "", ""]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.LinearLayerRotation.__init__": [[277, 286], ["torch.Module.__init__", "prune_utils.LinearLayerRotation.rotation_matrix.requires_grad_", "torch.Parameter", "torch.Parameter", "torch.Parameter"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rotation_matrix", ",", "bias", "=", "0", ",", "trainable", "=", "False", ")", ":", "\n", "        ", "super", "(", "LinearLayerRotation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rotation_matrix", "=", "rotation_matrix", "\n", "self", ".", "rotation_matrix", ".", "requires_grad_", "(", "trainable", ")", "\n", "if", "trainable", ":", "\n", "            ", "self", ".", "rotation_matrix", "=", "nn", ".", "Parameter", "(", "self", ".", "rotation_matrix", ")", "\n", "\n", "", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "bias", "=", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.LinearLayerRotation.forward": [[287, 291], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.new().fill_", "torch.cat.new().fill_", "torch.cat.new().fill_", "torch.cat.new", "torch.cat.new", "torch.cat.new", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "bias", "!=", "0", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x", ".", "new", "(", "x", ".", "size", "(", "0", ")", ",", "1", ")", ".", "fill_", "(", "self", ".", "bias", ")", "]", ",", "1", ")", "\n", "", "return", "x", "@", "self", ".", "rotation_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.LinearLayerRotation.parameters": [[292, 294], ["None"], "methods", ["None"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "rotation_matrix", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.LinearLayerRotation.extra_repr": [[295, 299], ["prune_utils.LinearLayerRotation.rotation_matrix.size", "prune_utils.LinearLayerRotation.rotation_matrix.size"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"in_features=%s, out_features=%s, trainable=%s\"", "%", "(", "self", ".", "rotation_matrix", ".", "size", "(", "1", ")", ",", "\n", "self", ".", "rotation_matrix", ".", "size", "(", "0", ")", ",", "\n", "self", ".", "trainable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.ConvLayerRotation.__init__": [[302, 310], ["torch.Module.__init__", "rotation_matrix.unsqueeze().unsqueeze", "prune_utils.ConvLayerRotation.rotation_matrix.requires_grad_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "rotation_matrix.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rotation_matrix", ",", "bias", "=", "0", ",", "trainable", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvLayerRotation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rotation_matrix", "=", "rotation_matrix", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "# out_dim * in_dim", "\n", "self", ".", "rotation_matrix", ".", "requires_grad_", "(", "trainable", ")", "\n", "if", "trainable", ":", "\n", "            ", "self", ".", "rotation_matrix", "=", "nn", ".", "Parameter", "(", "self", ".", "rotation_matrix", ")", "\n", "", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "bias", "=", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.ConvLayerRotation.forward": [[311, 316], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.cat.new().fill_", "torch.cat.new().fill_", "torch.cat.new().fill_", "torch.cat.new", "torch.cat.new", "torch.cat.new", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovAPatch.conv2d", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovAPatch.conv2d", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovAPatch.conv2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: batch_size * in_dim * w * h", "\n", "        ", "if", "self", ".", "bias", "!=", "0", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x", ".", "new", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ".", "fill_", "(", "self", ".", "bias", ")", "]", ",", "1", ")", "\n", "", "return", "F", ".", "conv2d", "(", "x", ",", "self", ".", "rotation_matrix", ",", "None", ",", "_pair", "(", "1", ")", ",", "_pair", "(", "0", ")", ",", "_pair", "(", "1", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.ConvLayerRotation.parameters": [[317, 319], ["None"], "methods", ["None"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "rotation_matrix", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.ConvLayerRotation.extra_repr": [[320, 324], ["prune_utils.ConvLayerRotation.rotation_matrix.size", "prune_utils.ConvLayerRotation.rotation_matrix.size"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"in_channels=%s, out_channels=%s, trainable=%s\"", "%", "(", "self", ".", "rotation_matrix", ".", "size", "(", "1", ")", ",", "\n", "self", ".", "rotation_matrix", ".", "size", "(", "0", ")", ",", "\n", "self", ".", "trainable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_resnet_block_dependencies": [[14, 25], ["isinstance"], "function", ["None"], ["def", "update_resnet_block_dependencies", "(", "prev_modules", ",", "block", ",", "dependencies", ")", ":", "\n", "    ", "for", "m", "in", "prev_modules", ":", "\n", "        ", "assert", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ",", "'Only conv or linear layer can be previous modules.'", "\n", "", "dependencies", "[", "block", ".", "conv1", "]", "=", "prev_modules", "\n", "dependencies", "[", "block", ".", "bn1", "]", "=", "[", "block", ".", "conv1", "]", "\n", "dependencies", "[", "block", ".", "conv2", "]", "=", "[", "block", ".", "conv1", "]", "\n", "dependencies", "[", "block", ".", "bn2", "]", "=", "[", "block", ".", "conv2", "]", "\n", "\n", "if", "block", ".", "downsample", "is", "not", "None", ":", "\n", "        ", "dependencies", "[", "block", ".", "downsample", "[", "0", "]", "]", "=", "prev_modules", "\n", "dependencies", "[", "block", ".", "bn3", "]", "=", "[", "block", ".", "downsample", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_resnet_layer_dependencies": [[27, 37], ["len", "range", "prune_utils.update_resnet_block_dependencies", "prev_modules.append", "prev_modules.extend"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_resnet_block_dependencies"], ["", "", "def", "update_resnet_layer_dependencies", "(", "prev_modules", ",", "layer", ",", "dependencies", ")", ":", "\n", "    ", "num_blocks", "=", "len", "(", "layer", ")", "\n", "for", "block_idx", "in", "range", "(", "num_blocks", ")", ":", "\n", "        ", "block", "=", "layer", "[", "block_idx", "]", "\n", "update_resnet_block_dependencies", "(", "prev_modules", ",", "block", ",", "dependencies", ")", "\n", "prev_modules", "=", "[", "block", ".", "conv2", "]", "\n", "if", "block", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "prev_modules", ".", "append", "(", "block", ".", "downsample", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "prev_modules", ".", "extend", "(", "dependencies", "[", "block", ".", "conv1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_presnet_block_dependencies": [[39, 52], ["isinstance"], "function", ["None"], ["", "", "", "def", "update_presnet_block_dependencies", "(", "prev_modules", ",", "block", ",", "dependencies", ")", ":", "\n", "# TODO: presnet", "\n", "    ", "for", "m", "in", "prev_modules", ":", "\n", "        ", "assert", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ",", "'Only conv or linear layer can be previous modules.'", "\n", "", "dependencies", "[", "block", ".", "bn1", "]", "=", "prev_modules", "\n", "dependencies", "[", "block", ".", "conv1", "]", "=", "prev_modules", "\n", "dependencies", "[", "block", ".", "bn2", "]", "=", "[", "block", ".", "conv1", "]", "\n", "dependencies", "[", "block", ".", "conv2", "]", "=", "[", "block", ".", "conv1", "]", "\n", "dependencies", "[", "block", ".", "bn3", "]", "=", "[", "block", ".", "conv2", "]", "\n", "dependencies", "[", "block", ".", "conv3", "]", "=", "[", "block", ".", "conv2", "]", "\n", "\n", "if", "block", ".", "downsample", "is", "not", "None", ":", "\n", "        ", "dependencies", "[", "block", ".", "downsample", "[", "0", "]", "]", "=", "prev_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_presnet_layer_dependencies": [[54, 65], ["len", "range", "prune_utils.update_presnet_block_dependencies", "prev_modules.append", "prev_modules.extend"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_presnet_block_dependencies"], ["", "", "def", "update_presnet_layer_dependencies", "(", "prev_modules", ",", "layer", ",", "dependencies", ")", ":", "\n", "# TODO: presnet", "\n", "    ", "num_blocks", "=", "len", "(", "layer", ")", "\n", "for", "block_idx", "in", "range", "(", "num_blocks", ")", ":", "\n", "        ", "block", "=", "layer", "[", "block_idx", "]", "\n", "update_presnet_block_dependencies", "(", "prev_modules", ",", "block", ",", "dependencies", ")", "\n", "prev_modules", "=", "[", "block", ".", "conv3", "]", "\n", "if", "block", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "prev_modules", ".", "append", "(", "block", ".", "downsample", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "prev_modules", ".", "extend", "(", "dependencies", "[", "block", ".", "bn1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.get_layer_dependencies": [[67, 140], ["collections.OrderedDict", "model.modules", "isinstance", "prune_utils.update_presnet_layer_dependencies", "prune_utils.update_presnet_layer_dependencies", "prune_utils.update_presnet_layer_dependencies", "isinstance", "prev_modules.append", "prev_modules.append", "prev_modules.append", "prune_utils.update_resnet_layer_dependencies", "prune_utils.update_resnet_layer_dependencies", "prune_utils.update_resnet_layer_dependencies", "prev_modules.append", "prev_modules.append", "prev_modules.append"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_presnet_layer_dependencies", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_presnet_layer_dependencies", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_presnet_layer_dependencies", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_resnet_layer_dependencies", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_resnet_layer_dependencies", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_resnet_layer_dependencies"], ["", "", "", "def", "get_layer_dependencies", "(", "model", ",", "network", ")", ":", "\n", "# Helper function; ad-hoc fix", "\n", "    ", "dependencies", "=", "OrderedDict", "(", ")", "\n", "if", "'vgg'", "in", "network", ":", "\n", "        ", "modules", "=", "model", ".", "modules", "(", ")", "\n", "prev_layers", "=", "[", "]", "\n", "for", "m", "in", "modules", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ")", ")", ":", "\n", "                ", "dependencies", "[", "m", "]", "=", "prev_layers", "\n", "prev_layers", "=", "[", "m", "]", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "dependencies", "[", "m", "]", "=", "prev_layers", "\n", "", "", "", "elif", "'presnet'", "in", "network", ":", "\n", "        ", "dependencies", "[", "model", ".", "conv1", "]", "=", "[", "]", "\n", "prev_modules", "=", "[", "model", ".", "conv1", "]", "\n", "\n", "# update first layer's dependencies", "\n", "update_presnet_layer_dependencies", "(", "prev_modules", ",", "model", ".", "layer1", ",", "dependencies", ")", "\n", "\n", "# update second layer's dependencies", "\n", "prev_modules", "=", "[", "model", ".", "layer1", "[", "-", "1", "]", ".", "conv3", "]", "\n", "if", "model", ".", "layer1", "[", "-", "1", "]", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "prev_modules", ".", "append", "(", "model", ".", "layer1", "[", "-", "1", "]", ".", "downsample", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "prev_modules", "=", "[", "model", ".", "layer1", "[", "-", "1", "]", ".", "conv3", "]", "+", "dependencies", "[", "model", ".", "layer1", "[", "-", "1", "]", ".", "bn1", "]", "\n", "", "update_presnet_layer_dependencies", "(", "prev_modules", ",", "model", ".", "layer2", ",", "dependencies", ")", "\n", "\n", "# update third layer's dependencies", "\n", "prev_modules", "=", "[", "model", ".", "layer2", "[", "-", "1", "]", ".", "conv3", "]", "\n", "if", "model", ".", "layer2", "[", "-", "1", "]", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "prev_modules", ".", "append", "(", "model", ".", "layer2", "[", "-", "1", "]", ".", "downsample", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "prev_modules", "=", "[", "model", ".", "layer2", "[", "-", "1", "]", ".", "conv3", "]", "+", "dependencies", "[", "model", ".", "layer2", "[", "-", "1", "]", ".", "bn1", "]", "\n", "", "update_presnet_layer_dependencies", "(", "prev_modules", ",", "model", ".", "layer3", ",", "dependencies", ")", "\n", "\n", "# update bn and fc layer's dependencies", "\n", "prev_modules", "=", "[", "model", ".", "layer3", "[", "-", "1", "]", ".", "conv3", "]", "\n", "if", "model", ".", "layer3", "[", "-", "1", "]", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "prev_modules", ".", "append", "(", "model", ".", "layer3", "[", "-", "1", "]", ".", "downsample", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "prev_modules", "=", "[", "model", ".", "layer3", "[", "-", "1", "]", ".", "conv3", "]", "+", "dependencies", "[", "model", ".", "layer3", "[", "-", "1", "]", ".", "bn1", "]", "\n", "", "dependencies", "[", "model", ".", "bn", "]", "=", "prev_modules", "\n", "dependencies", "[", "model", ".", "fc", "]", "=", "prev_modules", "\n", "\n", "", "elif", "'resnet'", "in", "network", ":", "\n", "        ", "dependencies", "[", "model", ".", "conv1", "]", "=", "[", "]", "\n", "dependencies", "[", "model", ".", "bn", "]", "=", "[", "model", ".", "conv1", "]", "\n", "\n", "prev_modules", "=", "[", "model", ".", "conv1", "]", "\n", "update_resnet_layer_dependencies", "(", "prev_modules", ",", "model", ".", "layer1", ",", "dependencies", ")", "\n", "\n", "prev_modules", "=", "[", "model", ".", "layer1", "[", "-", "1", "]", ".", "conv2", "]", "\n", "if", "model", ".", "layer1", "[", "-", "1", "]", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "prev_modules", ".", "append", "(", "model", ".", "layer1", "[", "-", "1", "]", ".", "downsample", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "prev_modules", "=", "[", "model", ".", "layer1", "[", "-", "1", "]", ".", "conv2", "]", "+", "dependencies", "[", "model", ".", "layer1", "[", "-", "1", "]", ".", "conv1", "]", "\n", "", "update_resnet_layer_dependencies", "(", "prev_modules", ",", "model", ".", "layer2", ",", "dependencies", ")", "\n", "\n", "prev_modules", "=", "[", "model", ".", "layer2", "[", "-", "1", "]", ".", "conv2", "]", "\n", "if", "model", ".", "layer2", "[", "-", "1", "]", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "prev_modules", ".", "append", "(", "model", ".", "layer2", "[", "-", "1", "]", ".", "downsample", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "prev_modules", "=", "[", "model", ".", "layer2", "[", "-", "1", "]", ".", "conv2", "]", "+", "dependencies", "[", "model", ".", "layer2", "[", "-", "1", "]", ".", "conv1", "]", "\n", "", "update_resnet_layer_dependencies", "(", "prev_modules", ",", "model", ".", "layer3", ",", "dependencies", ")", "\n", "\n", "prev_modules", "=", "[", "model", ".", "layer3", "[", "-", "1", "]", ".", "conv2", "]", "\n", "if", "model", ".", "layer3", "[", "-", "1", "]", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "prev_modules", ".", "append", "(", "model", ".", "layer3", "[", "-", "1", "]", ".", "downsample", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "prev_modules", "=", "[", "model", ".", "layer3", "[", "-", "1", "]", ".", "conv2", "]", "+", "dependencies", "[", "model", ".", "layer3", "[", "-", "1", "]", ".", "conv1", "]", "\n", "", "dependencies", "[", "model", ".", "linear", "]", "=", "prev_modules", "\n", "\n", "", "return", "dependencies", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_indices": [[142, 146], ["prune_utils.get_layer_dependencies", "prune_utils.update_out_indices", "prune_utils.update_in_dinces"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.get_layer_dependencies", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_out_indices", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_in_dinces"], ["", "def", "update_indices", "(", "model", ",", "network", ")", ":", "\n", "    ", "dependencies", "=", "get_layer_dependencies", "(", "model", ",", "network", ")", "\n", "update_out_indices", "(", "model", ",", "dependencies", ")", "\n", "update_in_dinces", "(", "dependencies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_out_indices": [[148, 150], ["None"], "function", ["None"], ["", "def", "update_out_indices", "(", "model", ",", "dependencies", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_in_dinces": [[152, 159], ["dependencies.items", "len", "set", "sorted", "indices.union.union", "list"], "function", ["None"], ["", "def", "update_in_dinces", "(", "dependencies", ")", ":", "\n", "    ", "for", "m", ",", "deps", "in", "dependencies", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "deps", ")", ">", "0", ":", "\n", "            ", "indices", "=", "set", "(", ")", "\n", "for", "d", "in", "deps", ":", "\n", "                ", "indices", "=", "indices", ".", "union", "(", "d", ".", "out_indices", ")", "\n", "", "m", ".", "in_indices", "=", "sorted", "(", "list", "(", "indices", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.gen_network_cfgs": [[188, 202], ["range", "len"], "function", ["None"], ["", "", "", "def", "gen_network_cfgs", "(", "filter_nums", ",", "network", ")", ":", "\n", "# [64, 64, 'M', 128, 128, 'M', 256, 256, 256, 256, 'M', 512, 512, 512, 512, 'M', 512, 512, 512, 512]", "\n", "    ", "if", "network", "==", "'vgg19'", ":", "\n", "        ", "cfg", "=", "[", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "512", "]", "\n", "counts", "=", "0", "\n", "for", "idx", "in", "range", "(", "len", "(", "cfg", ")", ")", ":", "\n", "            ", "c", "=", "cfg", "[", "idx", "]", "\n", "if", "c", "==", "'M'", ":", "\n", "                ", "counts", "+=", "1", "\n", "continue", "\n", "", "cfg", "[", "idx", "]", "=", "filter_nums", "[", "idx", "-", "counts", "]", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.copy_weights": [[204, 213], ["isinstance", "isinstance", "isinstance"], "function", ["None"], ["", "def", "copy_weights", "(", "m0", ",", "m1", ",", ")", ":", "\n", "    ", "if", "isinstance", "(", "m0", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "pass", "\n", "", "elif", "isinstance", "(", "m0", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "pass", "\n", "", "elif", "isinstance", "(", "m0", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.get_threshold": [[215, 220], ["sorted", "int", "len"], "function", ["None"], ["", "", "def", "get_threshold", "(", "values", ",", "percentage", ")", ":", "\n", "    ", "v_sorted", "=", "sorted", "(", "values", ")", "\n", "n", "=", "int", "(", "len", "(", "values", ")", "*", "percentage", ")", "\n", "threshold", "=", "v_sorted", "[", "n", "]", "\n", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.filter_indices": [[222, 231], ["enumerate", "len", "indices.append"], "function", ["None"], ["", "def", "filter_indices", "(", "values", ",", "threshold", ")", ":", "\n", "    ", "indices", "=", "[", "]", "\n", "for", "idx", ",", "v", "in", "enumerate", "(", "values", ")", ":", "\n", "        ", "if", "v", ">", "threshold", ":", "\n", "            ", "indices", ".", "append", "(", "idx", ")", "\n", "", "", "if", "len", "(", "indices", ")", "<=", "1", ":", "\n", "# we make it at least 1 filters in each laer", "\n", "        ", "indices", "=", "[", "0", "]", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.get_rotation_layer_weights": [[233, 242], ["model.modules", "ValueError", "isinstance", "isinstance", "isinstance", "len"], "function", ["None"], ["", "def", "get_rotation_layer_weights", "(", "model", ",", "qm", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "(", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", "\n", "and", "len", "(", "m", ")", "==", "3", "\n", "and", "isinstance", "(", "m", "[", "0", "]", ",", "(", "LinearLayerRotation", ",", "ConvLayerRotation", ")", ")", "\n", "and", "isinstance", "(", "m", "[", "2", "]", ",", "(", "LinearLayerRotation", ",", "ConvLayerRotation", ")", ")", ")", ":", "\n", "            ", "if", "qm", "is", "m", "[", "1", "]", ":", "\n", "                ", "return", "m", "[", "0", "]", ".", "rotation_matrix", ".", "data", ",", "m", "[", "2", "]", ".", "rotation_matrix", ".", "data", "\n", "", "", "", "raise", "ValueError", "(", "'%s not found in the model. Potential bug!'", "%", "qm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict": [[244, 250], ["Q_a.pop", "Q_g.pop"], "function", ["None"], ["", "def", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "n", ")", ":", "\n", "    ", "if", "n", "is", "not", "m", ":", "\n", "        ", "Q_g", "[", "n", "]", "=", "Q_g", "[", "m", "]", "\n", "Q_a", "[", "n", "]", "=", "Q_a", "[", "m", "]", "\n", "Q_a", ".", "pop", "(", "m", ")", "\n", "Q_g", ".", "pop", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.get_block_sum": [[252, 267], ["isinstance", "imps.squeeze().size", "range", "imps.new", "isinstance", "min", "imps[].sum().item", "importances.append", "imps.squeeze", "imps[].sum"], "function", ["None"], ["", "", "def", "get_block_sum", "(", "m", ",", "imps", ")", ":", "\n", "    ", "importances", "=", "[", "]", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "kernel_size", "=", "m", ".", "kernel_size", "\n", "k", "=", "kernel_size", "[", "0", "]", "*", "kernel_size", "[", "1", "]", "\n", "l", "=", "imps", ".", "squeeze", "(", ")", ".", "size", "(", "0", ")", "\n", "bias", "=", "1", "if", "m", ".", "bias", "is", "not", "None", "else", "0", "\n", "assert", "(", "(", "l", "-", "bias", ")", "//", "k", ")", "*", "k", "==", "(", "l", "-", "bias", ")", "\n", "for", "idx", "in", "range", "(", "0", ",", "l", ",", "k", ")", ":", "\n", "            ", "s", "=", "min", "(", "idx", "+", "k", ",", "l", ")", "\n", "s", "=", "imps", "[", "idx", ":", "idx", "+", "k", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "importances", ".", "append", "(", "s", ")", "\n", "", "return", "imps", ".", "new", "(", "importances", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "return", "imps", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.count_module_params": [[269, 274], ["m.weight.view().size", "m.bias.size", "m.weight.view"], "function", ["None"], ["", "", "def", "count_module_params", "(", "m", ")", ":", "\n", "    ", "counts", "=", "m", ".", "weight", ".", "view", "(", "-", "1", ")", ".", "size", "(", "0", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "        ", "counts", "+=", "m", ".", "bias", ".", "size", "(", "0", ")", "\n", "", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer": [[326, 351], ["isinstance", "torch.Linear().cuda", "nn.Conv2d().cuda.weight.data.copy_", "torch.Sequential", "isinstance", "prune_utils.LinearLayerRotation", "prune_utils.LinearLayerRotation", "W_star.transpose().transpose().contiguous.view", "W_star.transpose().transpose().contiguous.transpose().transpose().contiguous", "torch.Conv2d().cuda", "nn.Conv2d().cuda.weight.data.copy_", "torch.Sequential", "torch.Linear", "Q_g.t", "W_star.transpose().transpose().contiguous.size", "prune_utils.ConvLayerRotation", "prune_utils.ConvLayerRotation", "W_star.transpose().transpose().contiguous.size", "W_star.transpose().transpose().contiguous.size", "W_star.transpose().transpose().contiguous.transpose().transpose", "torch.Conv2d", "Q_a.t", "W_star.transpose().transpose().contiguous.size", "W_star.transpose().transpose().contiguous.size", "W_star.transpose().transpose().contiguous.transpose"], "function", ["None"], ["", "", "def", "register_bottleneck_layer", "(", "m", ",", "Q_g", ",", "Q_a", ",", "W_star", ",", "use_patch", ",", "trainable", "=", "False", ")", ":", "\n", "    ", "assert", "use_patch", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "scale", "=", "nn", ".", "Linear", "(", "W_star", ".", "size", "(", "1", ")", ",", "W_star", ".", "size", "(", "0", ")", ",", "bias", "=", "False", ")", ".", "cuda", "(", ")", "\n", "scale", ".", "weight", ".", "data", ".", "copy_", "(", "W_star", ")", "\n", "bias", "=", "1.0", "if", "m", ".", "bias", "is", "not", "None", "else", "0", "\n", "return", "nn", ".", "Sequential", "(", "\n", "LinearLayerRotation", "(", "Q_a", ",", "bias", ",", "trainable", ")", ",", "\n", "scale", ",", "\n", "LinearLayerRotation", "(", "Q_g", ".", "t", "(", ")", ",", "trainable", "=", "trainable", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# if it is a conv layer, W_star should be out_c * in_c * h * w", "\n", "        ", "W_star", "=", "W_star", ".", "view", "(", "W_star", ".", "size", "(", "0", ")", ",", "m", ".", "kernel_size", "[", "0", "]", ",", "m", ".", "kernel_size", "[", "1", "]", ",", "-", "1", ")", "\n", "W_star", "=", "W_star", ".", "transpose", "(", "2", ",", "3", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "scale", "=", "nn", ".", "Conv2d", "(", "W_star", ".", "size", "(", "1", ")", ",", "W_star", ".", "size", "(", "0", ")", ",", "m", ".", "kernel_size", ",", "\n", "m", ".", "stride", ",", "m", ".", "padding", ",", "m", ".", "dilation", ",", "m", ".", "groups", ",", "False", ")", ".", "cuda", "(", ")", "\n", "scale", ".", "weight", ".", "data", ".", "copy_", "(", "W_star", ")", "\n", "patch_size", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "\n", "bias", "=", "1.0", "/", "patch_size", "if", "m", ".", "bias", "is", "not", "None", "else", "0", "\n", "return", "nn", ".", "Sequential", "(", "\n", "ConvLayerRotation", "(", "Q_a", ".", "t", "(", ")", ",", "bias", ",", "trainable", ")", ",", "\n", "scale", ",", "\n", "ConvLayerRotation", "(", "Q_g", ",", "trainable", "=", "trainable", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.normalize_factors": [[354, 362], ["torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace"], "function", ["None"], ["", "", "def", "normalize_factors", "(", "A", ",", "B", ")", ":", "\n", "    ", "eps", "=", "1e-10", "\n", "\n", "trA", "=", "torch", ".", "trace", "(", "A", ")", "+", "eps", "\n", "trB", "=", "torch", ".", "trace", "(", "B", ")", "+", "eps", "\n", "assert", "trA", ">", "0", ",", "'Must PD. A not PD'", "\n", "assert", "trB", ">", "0", ",", "'Must PD. B not PD'", "\n", "return", "A", "*", "(", "trB", "/", "trA", ")", "**", "0.5", ",", "B", "*", "(", "trA", "/", "trB", ")", "**", "0.5", "\n", "", ""]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.network_utils.get_network": [[4, 13], ["VGG", "resnet", "presnet"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet.resnet"], ["def", "get_network", "(", "network", ",", "depth", ",", "dataset", ")", ":", "\n", "    ", "if", "network", "==", "'vgg'", ":", "\n", "        ", "return", "VGG", "(", "depth", "=", "depth", ",", "dataset", "=", "dataset", ")", "\n", "", "elif", "network", "==", "'resnet'", ":", "\n", "        ", "return", "resnet", "(", "depth", "=", "depth", ",", "dataset", "=", "dataset", ")", "\n", "", "elif", "network", "==", "'presnet'", ":", "\n", "        ", "return", "presnet", "(", "depth", "=", "depth", ",", "dataset", "=", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.network_utils.get_bottleneck_builder": [[15, 24], ["None"], "function", ["None"], ["", "", "def", "get_bottleneck_builder", "(", "network", ")", ":", "\n", "    ", "if", "network", "==", "'vgg'", ":", "\n", "        ", "return", "BottleneckVGG", "\n", "", "elif", "network", "==", "'resnet'", ":", "\n", "        ", "return", "BottleneckResNet", "\n", "", "elif", "network", "==", "'presnet'", ":", "\n", "        ", "return", "BottleneckPResNet", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.network_utils.stablize_bn": [[26, 34], ["net.train.train", "enumerate", "inputs.to.to", "net.train."], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_pretrain.train"], ["", "", "def", "stablize_bn", "(", "net", ",", "trainloader", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "\"\"\"Iterate over the dataset for stabilizing the\n    BatchNorm statistics.\n    \"\"\"", "\n", "net", "=", "net", ".", "train", "(", ")", "\n", "for", "batch", ",", "(", "inputs", ",", "_", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "net", "(", "inputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.compute_flops.print_model_param_nums": [[11, 17], ["sum", "print", "torchvision.models.alexnet", "param.nelement", "torchvision.models.alexnet.parameters"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.ConvLayerRotation.parameters"], ["def", "print_model_param_nums", "(", "model", "=", "None", ")", ":", "\n", "    ", "if", "model", "==", "None", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "alexnet", "(", ")", "\n", "", "total", "=", "sum", "(", "[", "param", ".", "nelement", "(", ")", "if", "param", ".", "requires_grad", "else", "0", "for", "param", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "print", "(", "'  + Number of params: %.2fM'", "%", "(", "total", "/", "1e6", ")", ")", "\n", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.compute_flops.print_model_param_flops": [[18, 155], ["compute_flops.print_model_param_flops.foo"], "function", ["None"], ["", "def", "print_model_param_flops", "(", "model", "=", "None", ",", "input_res", "=", "224", ",", "multiply_adds", "=", "True", ",", "cuda", "=", "False", ")", ":", "\n", "\n", "    ", "prods", "=", "{", "}", "\n", "def", "save_hook", "(", "name", ")", ":", "\n", "        ", "def", "hook_per", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "            ", "prods", "[", "name", "]", "=", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", "\n", "", "return", "hook_per", "\n", "\n", "", "list_1", "=", "[", "]", "\n", "def", "simple_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_1", ".", "append", "(", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", ")", "\n", "\n", "", "list_2", "=", "{", "}", "\n", "def", "simple_hook2", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_2", "[", "'names'", "]", "=", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", "\n", "\n", "", "list_conv", "=", "[", "]", "\n", "def", "conv_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "*", "(", "self", ".", "in_channels", "/", "self", ".", "groups", ")", "\n", "bias_ops", "=", "1", "if", "self", ".", "bias", "is", "not", "None", "else", "0", "\n", "\n", "params", "=", "output_channels", "*", "(", "kernel_ops", "+", "bias_ops", ")", "\n", "flops", "=", "(", "kernel_ops", "*", "(", "2", "if", "multiply_adds", "else", "1", ")", "+", "bias_ops", ")", "*", "output_channels", "*", "output_height", "*", "output_width", "*", "batch_size", "\n", "\n", "list_conv", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_conv_rotation", "=", "[", "]", "\n", "def", "conv_rotation_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "input_channels", "\n", "bias_ops", "=", "self", ".", "bias", "if", "self", ".", "bias", "==", "0", "else", "1", "\n", "\n", "params", "=", "output_channels", "*", "kernel_ops", "\n", "flops", "=", "(", "kernel_ops", "*", "(", "2", "if", "multiply_adds", "else", "1", ")", "-", "bias_ops", ")", "*", "output_channels", "*", "output_height", "*", "output_width", "*", "batch_size", "\n", "\n", "list_conv_rotation", ".", "append", "(", "flops", ")", "\n", "\n", "\n", "", "list_linear", "=", "[", "]", "\n", "def", "linear_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", "=", "input", "[", "0", "]", ".", "size", "(", "0", ")", "if", "input", "[", "0", "]", ".", "dim", "(", ")", "==", "2", "else", "1", "\n", "\n", "weight_ops", "=", "self", ".", "weight", ".", "nelement", "(", ")", "*", "(", "2", "if", "multiply_adds", "else", "1", ")", "\n", "bias_ops", "=", "self", ".", "bias", ".", "nelement", "(", ")", "\n", "\n", "flops", "=", "batch_size", "*", "(", "weight_ops", "+", "bias_ops", ")", "\n", "list_linear", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_linear_rotation", "=", "[", "]", "\n", "def", "linear_rotation_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", "=", "input", "[", "0", "]", ".", "size", "(", "0", ")", "if", "input", "[", "0", "]", ".", "dim", "(", ")", "==", "2", "else", "1", "\n", "weight_ops", "=", "self", ".", "rotation_matrix", ".", "nelement", "(", ")", "*", "(", "2", "if", "multiply_adds", "else", "1", ")", "\n", "if", "self", ".", "bias", "!=", "0", ":", "\n", "            ", "weight_ops", "-=", "input", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "", "flops", "=", "batch_size", "*", "weight_ops", "\n", "list_linear_rotation", ".", "append", "(", "flops", ")", "\n", "\n", "\n", "", "list_bn", "=", "[", "]", "\n", "def", "bn_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_bn", ".", "append", "(", "input", "[", "0", "]", ".", "nelement", "(", ")", "*", "2", ")", "\n", "\n", "", "list_relu", "=", "[", "]", "\n", "def", "relu_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_relu", ".", "append", "(", "input", "[", "0", "]", ".", "nelement", "(", ")", ")", "\n", "\n", "", "list_pooling", "=", "[", "]", "\n", "def", "pooling_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "self", ".", "kernel_size", "*", "self", ".", "kernel_size", "\n", "bias_ops", "=", "0", "\n", "params", "=", "0", "\n", "flops", "=", "(", "kernel_ops", "+", "bias_ops", ")", "*", "output_channels", "*", "output_height", "*", "output_width", "*", "batch_size", "\n", "\n", "list_pooling", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_upsample", "=", "[", "]", "\n", "# For bilinear upsample", "\n", "def", "upsample_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "flops", "=", "output_height", "*", "output_width", "*", "output_channels", "*", "batch_size", "*", "12", "\n", "list_upsample", ".", "append", "(", "flops", ")", "\n", "\n", "", "def", "foo", "(", "net", ")", ":", "\n", "        ", "childrens", "=", "list", "(", "net", ".", "children", "(", ")", ")", "\n", "if", "not", "childrens", ":", "\n", "            ", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "conv_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "linear_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "bn_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "ReLU", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "relu_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", "or", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "pooling_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Upsample", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "upsample_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "ConvLayerRotation", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "conv_rotation_hook", ")", "\n", "", "if", "isinstance", "(", "net", ",", "LinearLayerRotation", ")", ":", "\n", "                ", "net", ".", "register_forward_hook", "(", "linear_rotation_hook", ")", "\n", "", "return", "\n", "", "for", "c", "in", "childrens", ":", "\n", "            ", "foo", "(", "c", ")", "\n", "\n", "", "", "if", "model", "==", "None", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "alexnet", "(", ")", "\n", "", "foo", "(", "model", ")", "\n", "input", "=", "Variable", "(", "torch", ".", "rand", "(", "3", ",", "input_res", ",", "input_res", ")", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "True", ")", "\n", "if", "cuda", ":", "\n", "        ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "", "out", "=", "model", "(", "input", ")", "\n", "\n", "rotation_flops", "=", "sum", "(", "list_linear_rotation", ")", "+", "sum", "(", "list_conv_rotation", ")", "\n", "other_flops", "=", "(", "sum", "(", "list_conv", ")", "+", "sum", "(", "list_linear", ")", "+", "sum", "(", "list_bn", ")", "+", "sum", "(", "list_relu", ")", "+", "sum", "(", "list_pooling", ")", "+", "sum", "(", "list_upsample", ")", ")", "\n", "\n", "total_flops", "=", "rotation_flops", "+", "other_flops", "\n", "print", "(", "'  + Number of FLOPs: %.2fG, rotation FLOPs: %.4fG(%.2f%%)'", "%", "(", "total_flops", "/", "1e9", ",", "\n", "rotation_flops", "/", "1e9", ",", "\n", "100.", "*", "rotation_flops", "/", "total_flops", ")", ")", "\n", "def", "_rm_hooks", "(", "model", ")", ":", "\n", "        ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "m", ".", "_forward_hooks", "=", "OrderedDict", "(", ")", "\n", "\n", "", "", "_rm_hooks", "(", "model", ")", "\n", "\n", "return", "total_flops", ",", "rotation_flops", "", "", ""]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.utils.get_mean_and_std": [[16, 29], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.utils.init_params": [[31, 45], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["", "def", "init_params", "(", "net", ")", ":", "\n", "    ", "'''Init layer parameters.'''", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.utils.progress_bar": [[55, 97], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "utils.format_time", "utils.format_time", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.utils.format_time", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.utils.format_time"], ["def", "progress_bar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.utils.format_time": [[99, 130], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "", ""]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.compute_wallclock_time.compute_wallclock_time": [[6, 18], ["torch.no_grad", "torch.cuda.FloatTensor().normal_", "net.cuda.cuda", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.perf_counter", "net.cuda.", "torch.cuda.synchronize", "time.perf_counter", "print", "torch.cuda.FloatTensor"], "function", ["None"], ["def", "compute_wallclock_time", "(", "net", ",", "input_res", ",", "batch_size", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "batch_size", ",", "3", ",", "input_res", ",", "input_res", ")", ".", "normal_", "(", ")", "\n", "net", "=", "net", ".", "cuda", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "a", "=", "time", ".", "perf_counter", "(", ")", "\n", "out", "=", "net", "(", "x", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "# wait for forward to finish", "\n", "b", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "'batch GPU {:.02e}s'", ".", "format", "(", "b", "-", "a", ")", ")", "\n", "", "return", "b", "-", "a", "\n", "", ""]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_OBS_F2.KFACOBSF2Pruner.__init__": [[15, 18], ["pruner.kfac_full_pruner.KFACFullPruner.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "KFACOBSF2Pruner", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "print", "(", "\"Using OBS F2.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_OBS_F2.KFACOBSF2Pruner._get_unit_importance": [[19, 33], ["torch.no_grad", "utils.kfac_utils.fetch_mat_weights", "torch.sum", "kfac_OBS_F2.KFACOBSF2Pruner.Q_g[].t", "torch.diag", "utils.common_utils.tensor_to_list", "out_neuron_imp.size", "torch.diag", "out_neuron_imp.sum"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.fetch_mat_weights", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.tensor_to_list"], ["", "def", "_get_unit_importance", "(", "self", ",", "normalize", ")", ":", "\n", "        ", "eps", "=", "1e-10", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", ":", "\n", "                ", "w", "=", "fetch_mat_weights", "(", "m", ",", "False", ")", "# output_dim * input_dim", "\n", "G_inv", "=", "self", ".", "Q_g", "[", "m", "]", "@", "(", "torch", ".", "diag", "(", "1.0", "/", "(", "self", ".", "d_g", "[", "m", "]", "+", "eps", ")", ")", ")", "@", "self", ".", "Q_g", "[", "m", "]", ".", "t", "(", ")", "\n", "w_imps", "=", "torch", ".", "sum", "(", "w", "**", "2", "@", "self", ".", "m_aa", "[", "m", "]", ",", "1", ")", "# output_dim", "\n", "out_neuron_imp", "=", "w_imps", "/", "torch", ".", "diag", "(", "G_inv", ")", "\n", "self", ".", "W_pruned", "[", "m", "]", "=", "w", "\n", "if", "not", "normalize", ":", "\n", "                    ", "out_imps", "=", "out_neuron_imp", "\n", "", "else", ":", "\n", "                    ", "out_imps", "=", "out_neuron_imp", "/", "out_neuron_imp", ".", "sum", "(", ")", "\n", "", "self", ".", "importances", "[", "m", "]", "=", "(", "tensor_to_list", "(", "out_imps", ")", ",", "out_neuron_imp", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_OBS_F2.KFACOBSF2Pruner._do_surgery": [[34, 52], ["torch.no_grad", "enumerate", "utils.kfac_utils.fetch_mat_weights", "torch.diag", "utils.kfac_utils.mat_to_weight_and_bias", "utils.kfac_utils.fetch_mat_weights.size", "len", "kfac_OBS_F2.KFACOBSF2Pruner.Q_g[].t", "torch.diag", "torch.diag"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.fetch_mat_weights", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.mat_to_weight_and_bias"], ["", "", "", "def", "_do_surgery", "(", "self", ")", ":", "\n", "        ", "eps", "=", "1e-10", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "idx", ",", "m", "in", "enumerate", "(", "self", ".", "modules", ")", ":", "\n", "                ", "w", "=", "fetch_mat_weights", "(", "m", ",", "False", ")", "\n", "if", "w", ".", "size", "(", "0", ")", "==", "len", "(", "m", ".", "out_indices", ")", ":", "\n", "                    ", "continue", "\n", "", "G_inv", "=", "self", ".", "Q_g", "[", "m", "]", "@", "(", "torch", ".", "diag", "(", "1.0", "/", "(", "self", ".", "d_g", "[", "m", "]", "+", "eps", ")", ")", ")", "@", "self", ".", "Q_g", "[", "m", "]", ".", "t", "(", ")", "\n", "G_inv_diag", "=", "torch", ".", "diag", "(", "G_inv", ")", "\n", "G_inv", "[", ":", ",", "m", ".", "out_indices", "]", "=", "0", "\n", "coeff", "=", "G_inv", "@", "torch", ".", "diag", "(", "1.0", "/", "G_inv_diag", ")", "\n", "delta_theta", "=", "-", "coeff", "@", "w", "\n", "\n", "# ==== update weights and bias ======", "\n", "dw", ",", "dbias", "=", "mat_to_weight_and_bias", "(", "delta_theta", ",", "m", ")", "\n", "m", ".", "weight", "+=", "dw", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", "+=", "dbias", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_OBD_F2.KFACOBDF2Pruner.__init__": [[15, 18], ["pruner.kfac_full_pruner.KFACFullPruner.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "KFACOBDF2Pruner", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "print", "(", "\"Using OBD F2.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_OBD_F2.KFACOBDF2Pruner._get_unit_importance": [[19, 31], ["torch.no_grad", "utils.kfac_utils.fetch_mat_weights", "w_imp.sum", "torch.diag", "utils.common_utils.tensor_to_list", "out_neuron_imp.size", "out_neuron_imp.sum"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.fetch_mat_weights", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.tensor_to_list"], ["", "def", "_get_unit_importance", "(", "self", ",", "normalize", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", ":", "\n", "                ", "w", "=", "fetch_mat_weights", "(", "m", ",", "False", ")", "# output_dim * input_dim", "\n", "w_imp", "=", "w", "**", "2", "@", "self", ".", "m_aa", "[", "m", "]", "\n", "out_neuron_imp", "=", "w_imp", ".", "sum", "(", "1", ")", "*", "torch", ".", "diag", "(", "self", ".", "m_gg", "[", "m", "]", ")", "\n", "self", ".", "W_pruned", "[", "m", "]", "=", "w", "\n", "if", "not", "normalize", ":", "\n", "                    ", "imps", "=", "out_neuron_imp", "\n", "", "else", ":", "\n", "                    ", "imps", "=", "out_neuron_imp", "/", "out_neuron_imp", ".", "sum", "(", ")", "\n", "", "self", ".", "importances", "[", "m", "]", "=", "(", "tensor_to_list", "(", "imps", ")", ",", "out_neuron_imp", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_OBD_F2.KFACOBDF2Pruner.make_pruned_model": [[32, 49], ["kfac_OBD_F2.KFACOBDF2Pruner._prepare_model", "kfac_OBD_F2.KFACOBDF2Pruner.init_step", "torch.utils.data.DataLoader", "kfac_OBD_F2.KFACOBDF2Pruner._compute_fisher", "kfac_OBD_F2.KFACOBDF2Pruner._get_unit_importance", "kfac_OBD_F2.KFACOBDF2Pruner._do_prune", "kfac_OBD_F2.KFACOBDF2Pruner._build_pruned_model", "kfac_OBD_F2.KFACOBDF2Pruner._rm_hooks", "kfac_OBD_F2.KFACOBDF2Pruner._clear_buffer", "str"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._prepare_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.init_step", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._compute_fisher", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner._get_unit_importance", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._do_prune", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._build_pruned_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._rm_hooks", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner._clear_buffer"], ["", "", "", "def", "make_pruned_model", "(", "self", ",", "dataloader", ",", "criterion", ",", "device", ",", "fisher_type", ",", "prune_ratio", ",", "normalize", "=", "True", ",", "re_init", "=", "False", ")", ":", "\n", "        ", "self", ".", "_prepare_model", "(", ")", "\n", "self", ".", "init_step", "(", ")", "\n", "\n", "temp_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataloader", ".", "dataset", ",", "batch_size", "=", "64", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "2", ")", "\n", "self", ".", "_compute_fisher", "(", "temp_loader", ",", "criterion", ",", "device", ",", "fisher_type", ")", "\n", "\n", "self", ".", "iter", "+=", "1", "\n", "self", ".", "_get_unit_importance", "(", "normalize", ")", "\n", "self", ".", "_do_prune", "(", "prune_ratio", ",", "re_init", ")", "\n", "self", ".", "_build_pruned_model", "(", "re_init", ")", "\n", "\n", "self", ".", "_rm_hooks", "(", ")", "\n", "# cfg = self._build_pruned_model(re_init)", "\n", "self", ".", "_clear_buffer", "(", ")", "\n", "return", "str", "(", "self", ".", "model", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_svd_pruner.KFACEigenSVDPruner.__init__": [[52, 73], ["pruner.kfac_eigen_pruner.KFACEigenPruner.__init__"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model", ",", "\n", "builder", ",", "\n", "config", ",", "\n", "writer", ",", "\n", "logger", ",", "\n", "prune_ratio_limit", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "fix_rotation", "=", "True", ",", "\n", "use_patch", "=", "False", ",", "\n", "fix_layers", "=", "0", ")", ":", "\n", "        ", "super", "(", "KFACEigenSVDPruner", ",", "self", ")", ".", "__init__", "(", "model", ",", "\n", "builder", ",", "\n", "config", ",", "\n", "writer", ",", "\n", "logger", ",", "\n", "prune_ratio_limit", ",", "\n", "batch_averaged", ",", "\n", "fix_rotation", ",", "\n", "use_patch", ",", "\n", "fix_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_svd_pruner.KFACEigenSVDPruner.make_pruned_model": [[74, 91], ["kfac_eigen_svd_pruner.KFACEigenSVDPruner._prepare_model", "kfac_eigen_svd_pruner.KFACEigenSVDPruner.init_step", "kfac_eigen_svd_pruner.KFACEigenSVDPruner._compute_fisher", "kfac_eigen_svd_pruner.KFACEigenSVDPruner._update_inv", "kfac_eigen_svd_pruner.KFACEigenSVDPruner._get_unit_importance", "kfac_eigen_svd_pruner.KFACEigenSVDPruner._merge_Qs", "kfac_eigen_svd_pruner.KFACEigenSVDPruner._do_prune", "kfac_eigen_svd_pruner.KFACEigenSVDPruner._make_depth_separable", "kfac_eigen_svd_pruner.KFACEigenSVDPruner._rm_hooks", "kfac_eigen_svd_pruner.KFACEigenSVDPruner._build_pruned_model", "print", "kfac_eigen_svd_pruner.KFACEigenSVDPruner._clear_buffer"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._prepare_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.init_step", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._compute_fisher", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._update_inv", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner._get_unit_importance", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner._merge_Qs", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._do_prune", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_svd_pruner.KFACEigenSVDPruner._make_depth_separable", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._rm_hooks", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._build_pruned_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner._clear_buffer"], ["", "def", "make_pruned_model", "(", "self", ",", "dataloader", ",", "criterion", ",", "device", ",", "fisher_type", ",", "prune_ratio", ",", "normalize", "=", "True", ",", "re_init", "=", "False", ")", ":", "\n", "        ", "self", ".", "_prepare_model", "(", ")", "\n", "self", ".", "init_step", "(", ")", "\n", "\n", "self", ".", "_compute_fisher", "(", "dataloader", ",", "criterion", ",", "device", ",", "fisher_type", ")", "\n", "self", ".", "_update_inv", "(", ")", "# eigen decomposition of fisher", "\n", "\n", "self", ".", "_get_unit_importance", "(", "normalize", ")", "\n", "self", ".", "_merge_Qs", "(", ")", "# update the eigen basis", "\n", "\n", "self", ".", "_do_prune", "(", "prune_ratio", ",", "all_keep", "=", "False", ")", "\n", "self", ".", "_make_depth_separable", "(", ")", "\n", "\n", "self", ".", "_rm_hooks", "(", ")", "\n", "self", ".", "_build_pruned_model", "(", "re_init", ")", "\n", "print", "(", "self", ".", "model", ")", "\n", "self", ".", "_clear_buffer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_svd_pruner.KFACEigenSVDPruner._make_depth_separable": [[93, 106], ["enumerate", "isinstance", "min", "kfac_eigen_svd_pruner.get_UDV_decomposition", "pdb.set_trace"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_svd_pruner.get_UDV_decomposition"], ["", "def", "_make_depth_separable", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_inversed", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "self", ".", "remain_modules", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "W_star", "=", "self", ".", "W_star", "[", "m", "]", "# c_out * (kh * kw) * c_in", "\n", "m", ".", "groups", "=", "min", "(", "W_star", ".", "shape", "[", "-", "1", "]", ",", "W_star", ".", "shape", "[", "0", "]", ")", "\n", "U", ",", "W_sep", ",", "V", "=", "get_UDV_decomposition", "(", "W_star", ",", "method", "=", "'als'", ")", "\n", "try", ":", "\n", "                    ", "self", ".", "Q_a", "[", "m", "]", "=", "self", ".", "Q_a", "[", "m", "]", "@", "V", "\n", "self", ".", "Q_g", "[", "m", "]", "=", "self", ".", "Q_g", "[", "m", "]", "@", "U", "\n", "self", ".", "W_star", "[", "m", "]", "=", "W_sep", "\n", "", "except", ":", "\n", "                    ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_svd_pruner.get_UDV_decomposition": [[9, 48], ["method.lower.lower", "torch.no_grad", "torch.no_grad", "W.mean", "torch.svd", "torch.svd", "range", "torch.stack", "torch.stack", "min", "torch.diag().view", "torch.diag().view", "D.append", "min", "time.clock", "sktensor.dtensor", "sktensor.cp_als", "numpy.array", "numpy.array", "print", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "NotImplementedError", "torch.diag", "torch.diag", "W.data.cpu().numpy", "numpy.array", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "W.data.cpu", "torch.FloatTensor().cuda.t", "time.clock"], "function", ["None"], ["def", "get_UDV_decomposition", "(", "W", ",", "method", "=", "'svd'", ")", ":", "\n", "# current implementation is svd", "\n", "    ", "c_out", ",", "khkw", ",", "c_in", "=", "W", ".", "shape", "\n", "method", "=", "method", ".", "lower", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "method", "==", "'svd'", ":", "\n", "            ", "m_W", "=", "W", ".", "mean", "(", "1", ")", "\n", "U", ",", "_", ",", "V", "=", "torch", ".", "svd", "(", "m_W", ")", "\n", "D", "=", "[", "]", "\n", "for", "r", "in", "range", "(", "khkw", ")", ":", "\n", "                ", "W_r", "=", "W", "[", ":", ",", "r", ",", ":", "]", "# c_out * c_in  ->", "\n", "c", "=", "min", "(", "c_out", ",", "c_in", ")", "\n", "D_w", "=", "torch", ".", "diag", "(", "U", ".", "t", "(", ")", "@", "W_r", "@", "V", ")", ".", "view", "(", "c", ",", "1", ")", "\n", "D", ".", "append", "(", "D_w", ")", "\n", "", "S", "=", "torch", ".", "stack", "(", "D", ",", "dim", "=", "1", ")", "\n", "", "elif", "method", "==", "'svd_avg'", ":", "\n", "            ", "pass", "\n", "", "elif", "method", "==", "'als'", ":", "\n", "# m = min(c_out, c_in)", "\n", "# U: c_out * m", "\n", "# S: k^2 * m", "\n", "# V: c_in * m", "\n", "            ", "rank", "=", "min", "(", "c_out", ",", "c_in", ")", "\n", "\n", "tic", "=", "time", ".", "clock", "(", ")", "\n", "T", "=", "dtensor", "(", "W", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "P", ",", "fit", ",", "itr", ",", "exectimes", "=", "cp_als", "(", "T", ",", "rank", ",", "init", "=", "'random'", ")", "\n", "U", "=", "np", ".", "array", "(", "P", ".", "U", "[", "0", "]", ")", "# c_out * rank", "\n", "S", "=", "np", ".", "array", "(", "P", ".", "U", "[", "1", "]", ")", ".", "T", "# k^2 * rank --> rank * k^2", "\n", "V", "=", "np", ".", "array", "(", "P", ".", "U", "[", "2", "]", "*", "P", ".", "lmbda", ")", "# c_in * rank", "\n", "print", "(", "'CP decomposition done. It cost %.5f secs. fit: %f'", "%", "(", "time", ".", "clock", "(", ")", "-", "tic", ",", "fit", "[", "0", "]", ")", ")", "\n", "V", "=", "torch", ".", "FloatTensor", "(", "V", ")", ".", "cuda", "(", ")", "\n", "S", "=", "torch", ".", "FloatTensor", "(", "S", ")", ".", "cuda", "(", ")", "\n", "U", "=", "torch", ".", "FloatTensor", "(", "U", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Method {} not supported!\"", ".", "format", "(", "method", ")", ")", "\n", "\n", "", "", "return", "U", ",", "S", ",", "V", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner.__init__": [[21, 59], ["print", "utils.kfac_utils.ComputeCovG", "utils.kfac_utils.ComputeCovA", "utils.kfac_utils.ComputeCovAPatch"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model", ",", "\n", "builder", ",", "\n", "config", ",", "\n", "writer", ",", "\n", "logger", ",", "\n", "prune_ratio_limit", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "fix_rotation", "=", "True", ",", "\n", "use_patch", "=", "False", ",", "\n", "fix_layers", "=", "0", ")", ":", "\n", "        ", "print", "(", "'Using patch is %s'", "%", "use_patch", ")", "\n", "self", ".", "iter", "=", "0", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "writer", "=", "writer", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "prune_ratio_limit", "=", "prune_ratio_limit", "\n", "self", ".", "CovAHandler", "=", "ComputeCovA", "(", ")", "if", "not", "use_patch", "else", "ComputeCovAPatch", "(", ")", "\n", "self", ".", "CovGHandler", "=", "ComputeCovG", "(", ")", "\n", "self", ".", "batch_averaged", "=", "batch_averaged", "\n", "self", ".", "known_modules", "=", "{", "'Linear'", ",", "'Conv2d'", "}", "\n", "self", ".", "modules", "=", "[", "]", "\n", "self", ".", "grad_outputs", "=", "{", "}", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "builder", "=", "builder", "\n", "self", ".", "fix_layers", "=", "fix_layers", "\n", "# self._prepare_model()", "\n", "self", ".", "steps", "=", "0", "\n", "self", ".", "use_patch", "=", "use_patch", "\n", "self", ".", "m_aa", ",", "self", ".", "m_gg", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "Q_a", ",", "self", ".", "Q_g", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "d_a", ",", "self", ".", "d_g", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "W_star", "=", "{", "}", "\n", "self", ".", "S_l", "=", "None", "\n", "\n", "self", ".", "importances", "=", "{", "}", "\n", "self", ".", "_inversed", "=", "False", "\n", "self", ".", "fix_rotation", "=", "fix_rotation", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner._save_input": [[60, 66], ["kfac_eigen_pruner.KFACEigenPruner.CovAHandler", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "kfac_eigen_pruner.KFACEigenPruner.new().fill_", "kfac_eigen_pruner.KFACEigenPruner.new", "kfac_eigen_pruner.KFACEigenPruner.size"], "methods", ["None"], ["", "def", "_save_input", "(", "self", ",", "module", ",", "input", ")", ":", "\n", "        ", "aa", "=", "self", ".", "CovAHandler", "(", "input", "[", "0", "]", ".", "data", ",", "module", ")", "\n", "# Initialize buffers", "\n", "if", "self", ".", "steps", "==", "0", ":", "\n", "            ", "self", ".", "m_aa", "[", "module", "]", "=", "torch", ".", "diag", "(", "aa", ".", "new", "(", "aa", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "0", ")", ")", "\n", "", "self", ".", "m_aa", "[", "module", "]", "+=", "aa", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner._save_grad_output": [[67, 74], ["kfac_eigen_pruner.KFACEigenPruner.CovGHandler", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "kfac_eigen_pruner.KFACEigenPruner.new().fill_", "kfac_eigen_pruner.KFACEigenPruner.new", "kfac_eigen_pruner.KFACEigenPruner.size"], "methods", ["None"], ["", "def", "_save_grad_output", "(", "self", ",", "module", ",", "grad_input", ",", "grad_output", ")", ":", "\n", "# Accumulate statistics for Fisher matrices", "\n", "        ", "gg", "=", "self", ".", "CovGHandler", "(", "grad_output", "[", "0", "]", ".", "data", ",", "module", ",", "self", ".", "batch_averaged", ")", "\n", "# Initialize buffers", "\n", "if", "self", ".", "steps", "==", "0", ":", "\n", "            ", "self", ".", "m_gg", "[", "module", "]", "=", "torch", ".", "diag", "(", "gg", ".", "new", "(", "gg", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "0", ")", ")", "\n", "", "self", ".", "m_gg", "[", "module", "]", "+=", "gg", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner._merge_Qs": [[75, 86], ["kfac_eigen_pruner.KFACEigenPruner.Q_g.items", "kfac_eigen_pruner.KFACEigenPruner.Q_a.items", "len", "len"], "methods", ["None"], ["", "def", "_merge_Qs", "(", "self", ")", ":", "\n", "        ", "for", "m", ",", "v", "in", "self", ".", "Q_g", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                ", "self", ".", "Q_g", "[", "m", "]", "=", "v", "[", "1", "]", "@", "v", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "Q_g", "[", "m", "]", "=", "v", "[", "0", "]", "\n", "", "", "for", "m", ",", "v", "in", "self", ".", "Q_a", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                ", "self", ".", "Q_a", "[", "m", "]", "=", "v", "[", "1", "]", "@", "v", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "Q_a", "[", "m", "]", "=", "v", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner.make_pruned_model": [[87, 102], ["kfac_eigen_pruner.KFACEigenPruner._prepare_model", "kfac_eigen_pruner.KFACEigenPruner.init_step", "kfac_eigen_pruner.KFACEigenPruner._compute_fisher", "kfac_eigen_pruner.KFACEigenPruner._update_inv", "kfac_eigen_pruner.KFACEigenPruner._get_unit_importance", "kfac_eigen_pruner.KFACEigenPruner._merge_Qs", "kfac_eigen_pruner.KFACEigenPruner._do_prune", "kfac_eigen_pruner.KFACEigenPruner._rm_hooks", "kfac_eigen_pruner.KFACEigenPruner._build_pruned_model", "kfac_eigen_pruner.KFACEigenPruner._clear_buffer"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._prepare_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.init_step", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._compute_fisher", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._update_inv", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner._get_unit_importance", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner._merge_Qs", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._do_prune", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._rm_hooks", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._build_pruned_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner._clear_buffer"], ["", "", "", "def", "make_pruned_model", "(", "self", ",", "dataloader", ",", "criterion", ",", "device", ",", "fisher_type", ",", "prune_ratio", ",", "normalize", "=", "True", ",", "re_init", "=", "False", ")", ":", "\n", "        ", "self", ".", "_prepare_model", "(", ")", "\n", "self", ".", "init_step", "(", ")", "\n", "\n", "self", ".", "_compute_fisher", "(", "dataloader", ",", "criterion", ",", "device", ",", "fisher_type", ")", "\n", "self", ".", "_update_inv", "(", ")", "# eigen decomposition of fisher", "\n", "\n", "self", ".", "_get_unit_importance", "(", "normalize", ")", "\n", "self", ".", "_merge_Qs", "(", ")", "# update the eigen basis", "\n", "\n", "self", ".", "_do_prune", "(", "prune_ratio", ")", "\n", "\n", "self", ".", "_rm_hooks", "(", ")", "\n", "self", ".", "_build_pruned_model", "(", "re_init", ")", "\n", "self", ".", "_clear_buffer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner._prepare_model": [[103, 116], ["print", "print", "kfac_eigen_pruner.KFACEigenPruner.model.modules", "kfac_eigen_pruner.KFACEigenPruner.modules.append", "module.register_forward_pre_hook", "module.register_backward_hook", "print"], "methods", ["None"], ["", "def", "_prepare_model", "(", "self", ")", ":", "\n", "        ", "count", "=", "0", "\n", "print", "(", "self", ".", "model", ")", "\n", "print", "(", "\"=> We keep following layers in KFACPruner. \"", ")", "\n", "for", "module", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "            ", "classname", "=", "module", ".", "__class__", ".", "__name__", "\n", "if", "classname", "in", "self", ".", "known_modules", ":", "\n", "                ", "self", ".", "modules", ".", "append", "(", "module", ")", "\n", "module", ".", "register_forward_pre_hook", "(", "self", ".", "_save_input", ")", "\n", "module", ".", "register_backward_hook", "(", "self", ".", "_save_grad_output", ")", "\n", "print", "(", "'(%s): %s'", "%", "(", "count", ",", "module", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "self", ".", "modules", "=", "self", ".", "modules", "[", "self", ".", "fix_layers", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner._compute_fisher": [[117, 131], ["kfac_eigen_pruner.KFACEigenPruner.model.eval", "kfac_eigen_pruner.KFACEigenPruner.init_step", "tqdm.tqdm.tqdm", "enumerate", "kfac_eigen_pruner.KFACEigenPruner.model", "kfac_eigen_pruner.KFACEigenPruner.step", "len", "inputs.to", "targets.to", "torch.multinomial().squeeze().to", "torch.multinomial().squeeze().to", "torch.multinomial().squeeze().to", "torch.multinomial().squeeze().to", "criterion", "criterion.backward", "criterion", "criterion.backward", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "kfac_eigen_pruner.KFACEigenPruner.cpu"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.init_step", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner.step"], ["", "def", "_compute_fisher", "(", "self", ",", "dataloader", ",", "criterion", ",", "device", "=", "'cuda'", ",", "fisher_type", "=", "'true'", ")", ":", "\n", "        ", "self", ".", "model", "=", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "init_step", "(", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "tqdm", "(", "enumerate", "(", "dataloader", ")", ",", "total", "=", "len", "(", "dataloader", ")", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "self", ".", "model", "(", "inputs", ")", "\n", "if", "fisher_type", "==", "'true'", ":", "\n", "                ", "sampled_y", "=", "torch", ".", "multinomial", "(", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ",", "dim", "=", "1", ")", ",", "1", ")", ".", "squeeze", "(", ")", ".", "to", "(", "device", ")", "\n", "loss_sample", "=", "criterion", "(", "outputs", ",", "sampled_y", ")", "\n", "loss_sample", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "", "self", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner._update_inv": [[132, 164], ["enumerate", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "kfac_eigen_pruner.KFACEigenPruner.d_a[].mul_", "kfac_eigen_pruner.KFACEigenPruner.d_g[].mul_", "kfac_eigen_pruner.KFACEigenPruner.writer.add_histogram", "kfac_eigen_pruner.KFACEigenPruner.Q_a.get", "utils.prune_utils.get_rotation_layer_weights", "prev_Q_a.view().transpose.view().transpose.view().transpose", "prev_Q_g.view.view.view", "kfac_eigen_pruner.KFACEigenPruner.Q_g.get", "prev_Q_g.view.view.size", "prev_Q_g.view.view.size", "prev_Q_a.view().transpose.view().transpose.view", "prev_Q_a.view().transpose.view().transpose.size", "prev_Q_a.view().transpose.view().transpose.size", "kfac_eigen_pruner.KFACEigenPruner.d_g[].view", "kfac_eigen_pruner.KFACEigenPruner.d_a[].view"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.get_rotation_layer_weights"], ["", "", "def", "_update_inv", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "steps", ">", "0", ",", "'At least one step before update inverse!'", "\n", "eps", "=", "1e-10", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "self", ".", "modules", ")", ":", "\n", "            ", "m_aa", ",", "m_gg", "=", "self", ".", "m_aa", "[", "m", "]", ",", "self", ".", "m_gg", "[", "m", "]", "\n", "self", ".", "d_a", "[", "m", "]", ",", "Q_a", "=", "torch", ".", "symeig", "(", "m_aa", ",", "eigenvectors", "=", "True", ")", "\n", "self", ".", "d_g", "[", "m", "]", ",", "Q_g", "=", "torch", ".", "symeig", "(", "m_gg", ",", "eigenvectors", "=", "True", ")", "\n", "\n", "self", ".", "d_a", "[", "m", "]", ".", "mul_", "(", "(", "self", ".", "d_a", "[", "m", "]", ">", "eps", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "d_g", "[", "m", "]", ".", "mul_", "(", "(", "self", ".", "d_g", "[", "m", "]", ">", "eps", ")", ".", "float", "(", ")", ")", "\n", "\n", "# == write summary ==", "\n", "name", "=", "m", ".", "__class__", ".", "__name__", "\n", "eigs", "=", "(", "self", ".", "d_g", "[", "m", "]", ".", "view", "(", "-", "1", ",", "1", ")", "@", "self", ".", "d_a", "[", "m", "]", ".", "view", "(", "1", ",", "-", "1", ")", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "self", ".", "writer", ".", "add_histogram", "(", "'eigen/%s_%d'", "%", "(", "name", ",", "idx", ")", ",", "eigs", ",", "self", ".", "iter", ")", "\n", "\n", "if", "self", ".", "Q_a", ".", "get", "(", "m", ",", "None", ")", "is", "None", ":", "\n", "# print('(%d)Q_a %s is None.' % (idx, m))", "\n", "                ", "self", ".", "Q_a", "[", "m", "]", "=", "[", "Q_a", "]", "# absorb the eigen basis", "\n", "", "else", ":", "\n", "# self.Q_a[m] = [Q_a, self.Q_a[m]]", "\n", "                ", "prev_Q_a", ",", "prev_Q_g", "=", "get_rotation_layer_weights", "(", "self", ".", "model", ",", "m", ")", "\n", "prev_Q_a", "=", "prev_Q_a", ".", "view", "(", "prev_Q_a", ".", "size", "(", "0", ")", ",", "prev_Q_a", ".", "size", "(", "1", ")", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "prev_Q_g", "=", "prev_Q_g", ".", "view", "(", "prev_Q_g", ".", "size", "(", "0", ")", ",", "prev_Q_g", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "Q_a", "[", "m", "]", "=", "[", "Q_a", ",", "prev_Q_a", "]", "\n", "\n", "", "if", "self", ".", "Q_g", ".", "get", "(", "m", ",", "None", ")", "is", "None", ":", "\n", "                ", "self", ".", "Q_g", "[", "m", "]", "=", "[", "Q_g", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "Q_g", "[", "m", "]", "=", "[", "Q_g", ",", "prev_Q_g", "]", "\n", "", "", "self", ".", "_inversed", "=", "True", "\n", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner._get_unit_importance": [[165, 197], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.kfac_utils.fetch_mat_weights", "w_imp.sum.sum.sum", "w_imp.sum.sum.sum", "isinstance", "w_star_g.view", "w_imp.sum.sum.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.common_utils.tensor_to_list", "w_imp.sum.sum.size", "w_imp.sum.sum.size", "utils.kfac_utils.fetch_mat_weights.view", "[].t", "w_star_a.view", "utils.kfac_utils.fetch_mat_weights.size", "len", "utils.kfac_utils.fetch_mat_weights.size", "utils.kfac_utils.fetch_mat_weights.size", "[].t", "kfac_eigen_pruner.KFACEigenPruner.d_g[].unsqueeze", "kfac_eigen_pruner.KFACEigenPruner.d_a[].unsqueeze", "w_imp.sum.sum.sum", "w_imp.sum.sum.sum", "kfac_eigen_pruner.KFACEigenPruner.d_g[].unsqueeze", "kfac_eigen_pruner.KFACEigenPruner.d_a[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.fetch_mat_weights", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.tensor_to_list"], ["", "def", "_get_unit_importance", "(", "self", ",", "normalize", ")", ":", "\n", "        ", "assert", "self", ".", "_inversed", ",", "'Not inversed.'", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", ":", "\n", "                ", "w", "=", "fetch_mat_weights", "(", "m", ",", "self", ".", "use_patch", ")", "# output_dim * input_dim", "\n", "# (Q_a \u2297 Q_g) vec(W) = Q_g.t() @ W @ Q_a", "\n", "if", "self", ".", "use_patch", "and", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "w_star_a", "=", "w", ".", "view", "(", "-", "1", ",", "w", ".", "size", "(", "-", "1", ")", ")", "@", "self", ".", "Q_a", "[", "m", "]", "[", "0", "]", "\n", "w_star_g", "=", "self", ".", "Q_g", "[", "m", "]", "[", "0", "]", ".", "t", "(", ")", "@", "w_star_a", ".", "view", "(", "w", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "w_star", "=", "w_star_g", ".", "view", "(", "w", ".", "size", "(", ")", ")", "\n", "if", "self", ".", "S_l", "is", "None", ":", "\n", "                        ", "w_imp", "=", "w_star", "**", "2", "*", "(", "self", ".", "d_g", "[", "m", "]", ".", "unsqueeze", "(", "1", ")", "@", "self", ".", "d_a", "[", "m", "]", ".", "unsqueeze", "(", "0", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                        ", "w_imp", "=", "w_star", "**", "2", "*", "self", ".", "S_l", "[", "m", "]", "\n", "", "w_imp", "=", "w_imp", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "w_star", "=", "self", ".", "Q_g", "[", "m", "]", "[", "0", "]", ".", "t", "(", ")", "@", "w", "@", "self", ".", "Q_a", "[", "m", "]", "[", "0", "]", "\n", "if", "self", ".", "S_l", "is", "None", ":", "\n", "                        ", "w_imp", "=", "w_star", "**", "2", "*", "(", "self", ".", "d_g", "[", "m", "]", ".", "unsqueeze", "(", "1", ")", "@", "self", ".", "d_a", "[", "m", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "                        ", "w_imp", "=", "w_star", "**", "2", "*", "self", ".", "S_l", "[", "m", "]", "\n", "\n", "", "", "self", ".", "W_star", "[", "m", "]", "=", "w_star", "\n", "in_neuron_imp", "=", "w_imp", ".", "sum", "(", "0", ")", "# get_block_sum(m, w_imp.sum(0))", "\n", "out_neuron_imp", "=", "w_imp", ".", "sum", "(", "1", ")", "# w_imp.sum(1)", "\n", "if", "not", "normalize", ":", "\n", "                    ", "imps", "=", "torch", ".", "cat", "(", "[", "in_neuron_imp", ",", "out_neuron_imp", "]", ")", "\n", "", "else", ":", "\n", "# I found in most cases normalization will harm the performance.", "\n", "                    ", "imps", "=", "torch", ".", "cat", "(", "[", "in_neuron_imp", "/", "in_neuron_imp", ".", "sum", "(", ")", ",", "out_neuron_imp", "/", "out_neuron_imp", ".", "sum", "(", ")", "]", ")", "\n", "", "self", ".", "importances", "[", "m", "]", "=", "(", "tensor_to_list", "(", "imps", ")", ",", "in_neuron_imp", ".", "size", "(", "0", ")", ",", "\n", "out_neuron_imp", ".", "size", "(", "0", ")", ",", "len", "(", "self", ".", "Q_g", "[", "m", "]", ")", "==", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner._do_prune": [[198, 291], ["sorted", "int", "print", "kfac_eigen_pruner.KFACEigenPruner.logger.info", "range", "range", "kfac_eigen_pruner.KFACEigenPruner.W_star[].numel", "print", "len", "utils.prune_utils.get_threshold", "utils.prune_utils.filter_indices", "print", "utils.prune_utils.get_threshold", "utils.prune_utils.filter_indices", "print", "utils.prune_utils.count_module_params", "kfac_eigen_pruner.KFACEigenPruner.W_star[].numel", "len", "kfac_eigen_pruner.KFACEigenPruner.Q_g[].size", "len", "kfac_eigen_pruner.KFACEigenPruner.Q_a[].size", "kfac_eigen_pruner.KFACEigenPruner.Q_g.pop", "kfac_eigen_pruner.KFACEigenPruner.Q_a.pop", "kfac_eigen_pruner.KFACEigenPruner.remain_modules.append", "max", "min", "max", "min", "utils.prune_utils.filter_indices.append", "utils.prune_utils.filter_indices.append", "len", "len", "kfac_eigen_pruner.KFACEigenPruner.W_star[].numel", "kfac_eigen_pruner.KFACEigenPruner.Q_a[].numel", "kfac_eigen_pruner.KFACEigenPruner.Q_g[].numel", "len", "len", "kfac_eigen_pruner.KFACEigenPruner.Q_a[].size", "kfac_eigen_pruner.KFACEigenPruner.Q_g[].size", "kfac_eigen_pruner.KFACEigenPruner.Q_a[].numel", "kfac_eigen_pruner.KFACEigenPruner.Q_g[].numel"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.get_threshold", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.filter_indices", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.get_threshold", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.filter_indices", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.count_module_params"], ["", "", "", "def", "_do_prune", "(", "self", ",", "prune_ratio", ")", ":", "\n", "# get threshold", "\n", "        ", "all_importances", "=", "[", "]", "\n", "for", "m", "in", "self", ".", "modules", ":", "\n", "            ", "imp_m", "=", "self", ".", "importances", "[", "m", "]", "\n", "imps", "=", "imp_m", "[", "0", "]", "\n", "all_importances", "+=", "imps", "\n", "", "all_importances", "=", "sorted", "(", "all_importances", ")", "\n", "idx", "=", "int", "(", "prune_ratio", "*", "len", "(", "all_importances", ")", ")", "\n", "threshold", "=", "all_importances", "[", "idx", "]", "\n", "\n", "# do pruning", "\n", "print", "(", "'=> Conducting network pruning. Max: %.5f, Min: %.5f, Threshold: %.5f'", "%", "(", "max", "(", "all_importances", ")", ",", "\n", "min", "(", "all_importances", ")", ",", "\n", "threshold", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"[Weight Improtances] Max: %.5f, Min: %.5f, Threshold: %.5f.\"", "%", "(", "max", "(", "all_importances", ")", ",", "\n", "min", "(", "all_importances", ")", ",", "\n", "threshold", ")", ")", "\n", "total_remain", "=", "0", "\n", "total_origin", "=", "0", "\n", "fake_remain", "=", "0", "\n", "self", ".", "remain_modules", "=", "[", "]", "\n", "for", "m", "in", "self", ".", "modules", ":", "\n", "            ", "imp_m", "=", "self", ".", "importances", "[", "m", "]", "\n", "imps", ",", "n_c", ",", "n_r", ",", "is_pruned", "=", "imp_m", "[", "0", "]", ",", "imp_m", "[", "1", "]", ",", "imp_m", "[", "2", "]", ",", "imp_m", "[", "3", "]", "\n", "row_indices", "=", "[", "]", "\n", "col_indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_r", ")", ":", "\n", "                ", "if", "imps", "[", "n_c", "+", "i", "]", ">", "threshold", ":", "\n", "                    ", "row_indices", ".", "append", "(", "i", ")", "\n", "", "", "for", "i", "in", "range", "(", "n_c", ")", ":", "\n", "                ", "if", "imps", "[", "i", "]", ">", "threshold", ":", "\n", "                    ", "col_indices", ".", "append", "(", "i", ")", "\n", "\n", "", "", "r_ratio", "=", "1", "-", "len", "(", "row_indices", ")", "/", "n_r", "\n", "c_ratio", "=", "1", "-", "len", "(", "col_indices", ")", "/", "n_c", "\n", "if", "r_ratio", ">", "self", ".", "prune_ratio_limit", ":", "\n", "                ", "r_threshold", "=", "get_threshold", "(", "imps", "[", "n_c", ":", "]", ",", "self", ".", "prune_ratio_limit", ")", "\n", "row_indices", "=", "filter_indices", "(", "imps", "[", "n_c", ":", "]", ",", "r_threshold", ")", "\n", "print", "(", "'* row indices empty!'", ")", "\n", "", "if", "c_ratio", ">", "self", ".", "prune_ratio_limit", ":", "\n", "                ", "c_threshold", "=", "get_threshold", "(", "imps", "[", ":", "n_c", "]", ",", "self", ".", "prune_ratio_limit", ")", "\n", "col_indices", "=", "filter_indices", "(", "imps", "[", ":", "n_c", "]", ",", "c_threshold", ")", "\n", "print", "(", "'* col indices empty!'", ")", "\n", "# assert len(row_indices) > 0 and len(col_indices) > 0, \"Resulted in empty tensor!\"", "\n", "# ===========================================================================", "\n", "# If it is pruned, then we take the size of bottleneck as the layer size.", "\n", "# ===========================================================================", "\n", "", "origin", "=", "count_module_params", "(", "m", ")", "if", "not", "is_pruned", "else", "(", "self", ".", "Q_a", "[", "m", "]", ".", "numel", "(", ")", "+", "self", ".", "Q_g", "[", "m", "]", ".", "numel", "(", ")", "+", "\n", "self", ".", "W_star", "[", "m", "]", ".", "numel", "(", ")", ")", "\n", "\n", "# ===========================================================================", "\n", "# start pruning", "\n", "# ===========================================================================", "\n", "self", ".", "Q_a", "[", "m", "]", "=", "self", ".", "Q_a", "[", "m", "]", "[", ":", ",", "col_indices", "]", "\n", "self", ".", "Q_g", "[", "m", "]", "=", "self", ".", "Q_g", "[", "m", "]", "[", ":", ",", "row_indices", "]", "\n", "# try:", "\n", "self", ".", "W_star", "[", "m", "]", "=", "self", ".", "W_star", "[", "m", "]", "[", "row_indices", ",", ":", "]", "[", "...", ",", "col_indices", "]", "\n", "\n", "# ===========================================================================", "\n", "# get the number of parameters in the pruned bottleneck layer.", "\n", "# ===========================================================================", "\n", "bneck_counts", "=", "(", "self", ".", "Q_a", "[", "m", "]", ".", "numel", "(", ")", "+", "self", ".", "Q_g", "[", "m", "]", ".", "numel", "(", ")", "+", "self", ".", "W_star", "[", "m", "]", ".", "numel", "(", ")", ")", "\n", "total_origin", "+=", "origin", "\n", "exact_ratio", "=", "bneck_counts", "/", "origin", "\n", "\n", "# ===========================================================================", "\n", "# if the bottleneck size is larger than the", "\n", "# original one, we do not conduct pruning.", "\n", "# ===========================================================================", "\n", "if", "exact_ratio", "<=", "1", "or", "(", "exact_ratio", "==", "1", "and", "is_pruned", ")", ":", "\n", "                ", "marker", "=", "'o'", "\n", "total_remain", "+=", "bneck_counts", "\n", "", "else", ":", "\n", "                ", "marker", "=", "'x'", "\n", "total_remain", "+=", "origin", "\n", "\n", "# ============================================================================", "\n", "# fake_reamin is the size of W matrix. Without considering the rotation matrix", "\n", "# ============================================================================", "\n", "", "fake_remain", "+=", "self", ".", "W_star", "[", "m", "]", ".", "numel", "(", ")", "\n", "all_ratio", "=", "(", "len", "(", "col_indices", ")", "*", "len", "(", "row_indices", ")", ")", "/", "(", "self", ".", "Q_a", "[", "m", "]", ".", "size", "(", "0", ")", "*", "self", ".", "Q_g", "[", "m", "]", ".", "size", "(", "0", ")", ")", "\n", "row_ratio", "=", "len", "(", "row_indices", ")", "/", "(", "self", ".", "Q_g", "[", "m", "]", ".", "size", "(", "0", ")", ")", "\n", "col_ratio", "=", "len", "(", "col_indices", ")", "/", "(", "self", ".", "Q_a", "[", "m", "]", ".", "size", "(", "0", ")", ")", "\n", "if", "exact_ratio", ">", "1", ":", "\n", "                ", "self", ".", "Q_g", ".", "pop", "(", "m", ")", "\n", "self", ".", "Q_a", ".", "pop", "(", "m", ")", "\n", "", "print", "(", "'[%s]Pruning: %-3.2f%%(w/o Q), %-3.2f%% | %-3.2f%%(exact), '", "\n", "'%-3.2f%% (w/o Q), %-3.2f%%(out_neuron), %-3.2f%%(in_neuron): %s'", "%", "\n", "(", "marker", ",", "100", "*", "fake_remain", "/", "total_origin", ",", "100", "*", "total_remain", "/", "total_origin", ",", "\n", "100", "*", "exact_ratio", ",", "100", "*", "all_ratio", ",", "100", "*", "row_ratio", ",", "100", "*", "col_ratio", ",", "m", ")", ")", "\n", "if", "exact_ratio", "<=", "1", "or", "(", "exact_ratio", "==", "1", "and", "is_pruned", ")", ":", "\n", "                ", "self", ".", "remain_modules", ".", "append", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner._build_pruned_model": [[292, 299], ["kfac_eigen_pruner.KFACEigenPruner.builder", "kfac_eigen_pruner.KFACEigenPruner.model.register"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.register"], ["", "", "", "def", "_build_pruned_model", "(", "self", ",", "re_init", ")", ":", "\n", "        ", "self", ".", "model", "=", "self", ".", "builder", "(", "self", ".", "model", ",", "self", ".", "fix_rotation", ")", "\n", "self", ".", "model", ".", "register", "(", "self", ".", "remain_modules", ",", "\n", "self", ".", "Q_g", ",", "self", ".", "Q_a", ",", "\n", "self", ".", "W_star", ",", "\n", "self", ".", "use_patch", ",", "\n", "fix_rotation", "=", "not", "self", ".", "fix_rotation", ",", "re_init", "=", "re_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner.init_step": [[300, 302], ["None"], "methods", ["None"], ["", "def", "init_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "steps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner.step": [[303, 305], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "steps", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner._rm_hooks": [[306, 312], ["kfac_eigen_pruner.KFACEigenPruner.model.modules", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["", "def", "_rm_hooks", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", "in", "self", ".", "known_modules", ":", "\n", "                ", "m", ".", "_backward_hooks", "=", "OrderedDict", "(", ")", "\n", "m", ".", "_forward_pre_hooks", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner._clear_buffer": [[313, 323], ["None"], "methods", ["None"], ["", "", "", "def", "_clear_buffer", "(", "self", ")", ":", "\n", "        ", "self", ".", "m_aa", "=", "{", "}", "\n", "self", ".", "m_gg", "=", "{", "}", "\n", "self", ".", "d_a", "=", "{", "}", "\n", "self", ".", "d_g", "=", "{", "}", "\n", "self", ".", "remain_modules", "=", "[", "]", "\n", "self", ".", "modules", "=", "[", "]", "\n", "self", ".", "W_star", "=", "{", "}", "\n", "if", "self", ".", "S_l", "is", "not", "None", ":", "\n", "            ", "self", ".", "S_l", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner.fine_tune_model": [[324, 365], ["kfac_eigen_pruner.KFACEigenPruner.model.train", "optim.SGD", "utils.common_utils.PresetLRScheduler", "range", "print", "utils.network_utils.stablize_bn", "kfac_eigen_pruner.KFACEigenPruner.test_model", "max", "kfac_eigen_pruner.KFACEigenPruner.model.parameters", "int", "int", "kfac_eigen_pruner.KFACEigenPruner.model.train", "utils.common_utils.PresetLRScheduler.", "tqdm.tqdm.tqdm", "kfac_eigen_pruner.KFACEigenPruner.test_model", "max", "enumerate", "optim.SGD.zero_grad", "kfac_eigen_pruner.KFACEigenPruner.model", "criterion", "kfac_eigen_pruner.KFACEigenPruner.writer.add_scalar", "criterion.item", "criterion.backward", "optim.SGD.step", "kfac_eigen_pruner.KFACEigenPruner.max", "targets.size", "predicted.eq().sum().item", "tqdm.tqdm.tqdm.set_description", "utils.common_utils.PresetLRScheduler.get_lr", "len", "inputs.to", "targets.to", "criterion.item", "predicted.eq().sum", "utils.common_utils.PresetLRScheduler.get_lr", "predicted.eq"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_pretrain.train", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.network_utils.stablize_bn", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.test_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.ConvLayerRotation.parameters", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_pretrain.train", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.test_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner.step", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.PresetLRScheduler.get_lr", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.PresetLRScheduler.get_lr"], ["", "", "def", "fine_tune_model", "(", "self", ",", "trainloader", ",", "testloader", ",", "criterion", ",", "optim", ",", "learning_rate", ",", "weight_decay", ",", "nepochs", "=", "10", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "self", ".", "model", "=", "self", ".", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "weight_decay", ")", "\n", "lr_schedule", "=", "{", "0", ":", "learning_rate", ",", "int", "(", "nepochs", "*", "0.5", ")", ":", "learning_rate", "*", "0.1", ",", "int", "(", "nepochs", "*", "0.75", ")", ":", "learning_rate", "*", "0.01", "}", "\n", "lr_scheduler", "=", "PresetLRScheduler", "(", "lr_schedule", ")", "\n", "best_test_acc", ",", "best_test_loss", "=", "0", ",", "100", "\n", "iterations", "=", "0", "\n", "for", "epoch", "in", "range", "(", "nepochs", ")", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "train", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "all_loss", "=", "0", "\n", "lr_scheduler", "(", "optimizer", ",", "epoch", ")", "\n", "desc", "=", "(", "'[LR: %.5f] Loss: %.3f | Acc: %.3f%% (%d/%d)'", "%", "(", "lr_scheduler", ".", "get_lr", "(", "optimizer", ")", ",", "0", ",", "0", ",", "correct", ",", "total", ")", ")", "\n", "prog_bar", "=", "tqdm", "(", "enumerate", "(", "trainloader", ")", ",", "total", "=", "len", "(", "trainloader", ")", ",", "desc", "=", "desc", ",", "leave", "=", "True", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "prog_bar", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "self", ".", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train_%d/loss'", "%", "self", ".", "iter", ",", "loss", ".", "item", "(", ")", ",", "iterations", ")", "\n", "iterations", "+=", "1", "\n", "all_loss", "+=", "loss", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "desc", "=", "(", "'[%d][LR: %.5f, WD: %.5f] Loss: %.3f | Acc: %.3f%% (%d/%d)'", "%", "\n", "(", "epoch", ",", "lr_scheduler", ".", "get_lr", "(", "optimizer", ")", ",", "weight_decay", ",", "all_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "\n", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "prog_bar", ".", "set_description", "(", "desc", ",", "refresh", "=", "True", ")", "\n", "", "test_loss", ",", "test_acc", "=", "self", ".", "test_model", "(", "testloader", ",", "criterion", ",", "device", ")", "\n", "best_test_loss", "=", "best_test_loss", "if", "best_test_acc", ">", "test_acc", "else", "test_loss", "\n", "best_test_acc", "=", "max", "(", "test_acc", ",", "best_test_acc", ")", "\n", "", "print", "(", "'** Finetuning finished. Stabilizing batch norm and test again!'", ")", "\n", "stablize_bn", "(", "self", ".", "model", ",", "trainloader", ")", "\n", "test_loss", ",", "test_acc", "=", "self", ".", "test_model", "(", "testloader", ",", "criterion", ",", "device", ")", "\n", "best_test_loss", "=", "best_test_loss", "if", "best_test_acc", ">", "test_acc", "else", "test_loss", "\n", "best_test_acc", "=", "max", "(", "test_acc", ",", "best_test_acc", ")", "\n", "return", "best_test_loss", ",", "best_test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_eigen_pruner.KFACEigenPruner.test_model": [[366, 388], ["kfac_eigen_pruner.KFACEigenPruner.model.eval", "tqdm.tqdm.tqdm", "enumerate", "kfac_eigen_pruner.KFACEigenPruner.model", "criterion", "criterion.item", "kfac_eigen_pruner.KFACEigenPruner.max", "targets.size", "predicted.eq().sum().item", "tqdm.tqdm.tqdm.set_description", "len", "inputs.to", "targets.to", "predicted.eq().sum", "predicted.eq"], "methods", ["None"], ["", "def", "test_model", "(", "self", ",", "dataloader", ",", "criterion", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "self", ".", "model", "=", "self", ".", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "all_loss", "=", "0", "\n", "desc", "=", "(", "'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "%", "(", "0", ",", "0", ",", "correct", ",", "total", ")", ")", "\n", "prog_bar", "=", "tqdm", "(", "enumerate", "(", "dataloader", ")", ",", "total", "=", "len", "(", "dataloader", ")", ",", "desc", "=", "desc", ",", "leave", "=", "True", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "prog_bar", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "#try:", "\n", "outputs", "=", "self", ".", "model", "(", "inputs", ")", "\n", "#except:", "\n", "#    import pdb; pdb.set_trace()", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "all_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "desc", "=", "(", "'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "%", "\n", "(", "all_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "prog_bar", ".", "set_description", "(", "desc", ",", "refresh", "=", "True", ")", "\n", "", "return", "all_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.__init__": [[21, 60], ["print", "utils.kfac_utils.ComputeCovG", "utils.kfac_utils.ComputeCovA", "utils.kfac_utils.ComputeCovAPatch"], "methods", ["None"], ["        ", "def", "__init__", "(", "self", ",", "\n", "model", ",", "\n", "builder", ",", "\n", "config", ",", "\n", "writer", ",", "\n", "logger", ",", "\n", "prune_ratio_limit", ",", "\n", "network", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "use_patch", "=", "False", ",", "\n", "fix_layers", "=", "0", ")", ":", "\n", "            ", "print", "(", "'Using patch is %s'", "%", "use_patch", ")", "\n", "self", ".", "iter", "=", "0", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "writer", "=", "writer", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "prune_ratio_limit", "=", "prune_ratio_limit", "\n", "self", ".", "network", "=", "network", "\n", "self", ".", "CovAHandler", "=", "ComputeCovA", "(", ")", "if", "not", "use_patch", "else", "ComputeCovAPatch", "(", ")", "\n", "self", ".", "CovGHandler", "=", "ComputeCovG", "(", ")", "\n", "self", ".", "batch_averaged", "=", "batch_averaged", "\n", "self", ".", "known_modules", "=", "{", "'Linear'", ",", "'Conv2d'", "}", "\n", "self", ".", "modules", "=", "[", "]", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "builder", "=", "builder", "\n", "self", ".", "fix_layers", "=", "fix_layers", "\n", "# self._prepare_model()", "\n", "self", ".", "steps", "=", "0", "\n", "self", ".", "use_patch", "=", "False", "# use_patch", "\n", "self", ".", "m_aa", ",", "self", ".", "m_gg", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "Q_a", ",", "self", ".", "Q_g", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "d_a", ",", "self", ".", "d_g", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "W_pruned", "=", "{", "}", "\n", "self", ".", "S_l", "=", "None", "\n", "\n", "self", ".", "importances", "=", "{", "}", "\n", "self", ".", "_inversed", "=", "False", "\n", "self", ".", "_cfgs", "=", "{", "}", "\n", "self", ".", "_indices", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._save_input": [[61, 67], ["kfac_full_pruner.KFACFullPruner.CovAHandler", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "kfac_full_pruner.KFACFullPruner.new().fill_", "kfac_full_pruner.KFACFullPruner.new", "kfac_full_pruner.KFACFullPruner.size"], "methods", ["None"], ["", "def", "_save_input", "(", "self", ",", "module", ",", "input", ")", ":", "\n", "            ", "aa", "=", "self", ".", "CovAHandler", "(", "input", "[", "0", "]", ".", "data", ",", "module", ")", "\n", "# Initialize buffers", "\n", "if", "self", ".", "steps", "==", "0", ":", "\n", "                ", "self", ".", "m_aa", "[", "module", "]", "=", "torch", ".", "diag", "(", "aa", ".", "new", "(", "aa", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "0", ")", ")", "\n", "", "self", ".", "m_aa", "[", "module", "]", "+=", "aa", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._save_grad_output": [[68, 75], ["kfac_full_pruner.KFACFullPruner.CovGHandler", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "kfac_full_pruner.KFACFullPruner.new().fill_", "kfac_full_pruner.KFACFullPruner.new", "kfac_full_pruner.KFACFullPruner.size"], "methods", ["None"], ["", "def", "_save_grad_output", "(", "self", ",", "module", ",", "grad_input", ",", "grad_output", ")", ":", "\n", "# Accumulate statistics for Fisher matrices", "\n", "            ", "gg", "=", "self", ".", "CovGHandler", "(", "grad_output", "[", "0", "]", ".", "data", ",", "module", ",", "self", ".", "batch_averaged", ")", "\n", "# Initialize buffers", "\n", "if", "self", ".", "steps", "==", "0", ":", "\n", "                ", "self", ".", "m_gg", "[", "module", "]", "=", "torch", ".", "diag", "(", "gg", ".", "new", "(", "gg", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "0", ")", ")", "\n", "", "self", ".", "m_gg", "[", "module", "]", "+=", "gg", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.make_pruned_model": [[76, 93], ["kfac_full_pruner.KFACFullPruner._prepare_model", "kfac_full_pruner.KFACFullPruner.init_step", "kfac_full_pruner.KFACFullPruner._compute_fisher", "kfac_full_pruner.KFACFullPruner._update_inv", "kfac_full_pruner.KFACFullPruner._get_unit_importance", "kfac_full_pruner.KFACFullPruner._do_prune", "kfac_full_pruner.KFACFullPruner._build_pruned_model", "kfac_full_pruner.KFACFullPruner._rm_hooks", "kfac_full_pruner.KFACFullPruner._clear_buffer", "print", "str", "kfac_full_pruner.KFACFullPruner._do_surgery"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._prepare_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.init_step", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._compute_fisher", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._update_inv", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner._get_unit_importance", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._do_prune", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._build_pruned_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._rm_hooks", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner._clear_buffer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._do_surgery"], ["", "def", "make_pruned_model", "(", "self", ",", "dataloader", ",", "criterion", ",", "device", ",", "fisher_type", ",", "prune_ratio", ",", "normalize", "=", "True", ",", "re_init", "=", "False", ")", ":", "\n", "            ", "self", ".", "_prepare_model", "(", ")", "\n", "self", ".", "init_step", "(", ")", "\n", "\n", "self", ".", "_compute_fisher", "(", "dataloader", ",", "criterion", ",", "device", ",", "fisher_type", ")", "\n", "self", ".", "_update_inv", "(", ")", "# eigen decomposition of fisher", "\n", "\n", "self", ".", "_get_unit_importance", "(", "normalize", ")", "\n", "self", ".", "_do_prune", "(", "prune_ratio", ",", "re_init", ")", "\n", "if", "not", "re_init", ":", "\n", "                ", "self", ".", "_do_surgery", "(", ")", "\n", "", "self", ".", "_build_pruned_model", "(", "re_init", ")", "\n", "\n", "self", ".", "_rm_hooks", "(", ")", "\n", "self", ".", "_clear_buffer", "(", ")", "\n", "print", "(", "self", ".", "model", ")", "\n", "return", "str", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._prepare_model": [[94, 107], ["print", "print", "kfac_full_pruner.KFACFullPruner.model.modules", "kfac_full_pruner.KFACFullPruner.modules.append", "module.register_forward_pre_hook", "module.register_backward_hook", "print"], "methods", ["None"], ["", "def", "_prepare_model", "(", "self", ")", ":", "\n", "            ", "count", "=", "0", "\n", "print", "(", "self", ".", "model", ")", "\n", "print", "(", "\"=> We keep following layers in KFACPruner. \"", ")", "\n", "for", "module", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "                ", "classname", "=", "module", ".", "__class__", ".", "__name__", "\n", "if", "classname", "in", "self", ".", "known_modules", ":", "\n", "                    ", "self", ".", "modules", ".", "append", "(", "module", ")", "\n", "module", ".", "register_forward_pre_hook", "(", "self", ".", "_save_input", ")", "\n", "module", ".", "register_backward_hook", "(", "self", ".", "_save_grad_output", ")", "\n", "print", "(", "'(%s): %s'", "%", "(", "count", ",", "module", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "self", ".", "modules", "=", "self", ".", "modules", "[", "self", ".", "fix_layers", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._compute_fisher": [[108, 125], ["kfac_full_pruner.KFACFullPruner.model.eval", "kfac_full_pruner.KFACFullPruner.init_step", "tqdm.tqdm.tqdm", "enumerate", "kfac_full_pruner.KFACFullPruner.model", "kfac_full_pruner.KFACFullPruner.step", "len", "inputs.to", "targets.to", "torch.multinomial().squeeze().to", "torch.multinomial().squeeze().to", "torch.multinomial().squeeze().to", "torch.multinomial().squeeze().to", "criterion", "criterion.backward", "criterion", "criterion.backward", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "kfac_full_pruner.KFACFullPruner.cpu"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.init_step", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner.step"], ["", "def", "_compute_fisher", "(", "self", ",", "dataloader", ",", "criterion", ",", "device", "=", "'cuda'", ",", "fisher_type", "=", "'true'", ")", ":", "\n", "            ", "self", ".", "mode", "=", "'basis'", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "init_step", "(", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "tqdm", "(", "enumerate", "(", "dataloader", ")", ",", "total", "=", "len", "(", "dataloader", ")", ")", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "self", ".", "model", "(", "inputs", ")", "\n", "if", "fisher_type", "==", "'true'", ":", "\n", "                    ", "sampled_y", "=", "torch", ".", "multinomial", "(", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ",", "dim", "=", "1", ")", ",", "\n", "1", ")", ".", "squeeze", "(", ")", ".", "to", "(", "device", ")", "\n", "loss_sample", "=", "criterion", "(", "outputs", ",", "sampled_y", ")", "\n", "loss_sample", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "", "self", ".", "step", "(", ")", "\n", "", "self", ".", "mode", "=", "'quite'", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._update_inv": [[126, 139], ["enumerate", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "kfac_full_pruner.KFACFullPruner.d_a[].mul_", "kfac_full_pruner.KFACFullPruner.d_g[].mul_"], "methods", ["None"], ["", "def", "_update_inv", "(", "self", ")", ":", "\n", "            ", "assert", "self", ".", "steps", ">", "0", ",", "'At least one step before update inverse!'", "\n", "eps", "=", "1e-15", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "self", ".", "modules", ")", ":", "\n", "# m_aa, m_gg = normalize_factors(self.m_aa[m], self.m_gg[m])", "\n", "                ", "m_aa", ",", "m_gg", "=", "self", ".", "m_aa", "[", "m", "]", ",", "self", ".", "m_gg", "[", "m", "]", "\n", "self", ".", "d_a", "[", "m", "]", ",", "self", ".", "Q_a", "[", "m", "]", "=", "torch", ".", "symeig", "(", "m_aa", "/", "self", ".", "steps", ",", "eigenvectors", "=", "True", ")", "\n", "self", ".", "d_g", "[", "m", "]", ",", "self", ".", "Q_g", "[", "m", "]", "=", "torch", ".", "symeig", "(", "m_gg", "/", "self", ".", "steps", ",", "eigenvectors", "=", "True", ")", "\n", "self", ".", "d_a", "[", "m", "]", ".", "mul_", "(", "(", "self", ".", "d_a", "[", "m", "]", ">", "eps", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "d_g", "[", "m", "]", ".", "mul_", "(", "(", "self", ".", "d_g", "[", "m", "]", ">", "eps", ")", ".", "float", "(", ")", ")", "\n", "\n", "", "self", ".", "_inversed", "=", "True", "\n", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._get_unit_importance": [[140, 166], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.kfac_utils.fetch_mat_weights", "w_imp.sum", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "utils.common_utils.tensor_to_list", "w_imp.sum.size", "kfac_full_pruner.KFACFullPruner.Q_a[].t", "kfac_full_pruner.KFACFullPruner.Q_g[].t", "w_imp.sum.sum", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag.unsqueeze", "torch.diag.unsqueeze", "torch.diag.unsqueeze", "torch.diag.unsqueeze", "Q_a.t"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.fetch_mat_weights", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.tensor_to_list"], ["", "def", "_get_unit_importance", "(", "self", ",", "normalize", ")", ":", "\n", "            ", "eps", "=", "1e-10", "\n", "assert", "self", ".", "_inversed", ",", "'Not inversed.'", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", ":", "\n", "                    ", "w", "=", "fetch_mat_weights", "(", "m", ",", "False", ")", "# output_dim * input_dim", "\n", "# (Q_a \u2297 Q_g) vec(W) = Q_g.t() @ W @ Q_a", "\n", "if", "self", ".", "S_l", "is", "None", ":", "\n", "                        ", "A_inv", "=", "self", ".", "Q_a", "[", "m", "]", "@", "(", "torch", ".", "diag", "(", "1.0", "/", "(", "self", ".", "d_a", "[", "m", "]", "+", "eps", ")", ")", ")", "@", "self", ".", "Q_a", "[", "m", "]", ".", "t", "(", ")", "\n", "G_inv", "=", "self", ".", "Q_g", "[", "m", "]", "@", "(", "torch", ".", "diag", "(", "1.0", "/", "(", "self", ".", "d_g", "[", "m", "]", "+", "eps", ")", ")", ")", "@", "self", ".", "Q_g", "[", "m", "]", ".", "t", "(", ")", "\n", "A_inv_diag", "=", "torch", ".", "diag", "(", "A_inv", ")", "\n", "G_inv_diag", "=", "torch", ".", "diag", "(", "G_inv", ")", "\n", "w_imp", "=", "w", "**", "2", "/", "(", "G_inv_diag", ".", "unsqueeze", "(", "1", ")", "@", "A_inv_diag", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "                        ", "Q_a", ",", "Q_g", "=", "self", ".", "Q_a", "[", "m", "]", ",", "self", ".", "Q_g", "[", "m", "]", "\n", "S_l", "=", "self", ".", "S_l", "[", "m", "]", "\n", "S_l_inv", "=", "1.0", "/", "(", "S_l", "+", "eps", ")", "\n", "H_inv_diag", "=", "(", "Q_g", "**", "2", ")", "@", "S_l_inv", "@", "(", "Q_a", ".", "t", "(", ")", "**", "2", ")", "# output_dim * input_dim", "\n", "w_imp", "=", "w", "**", "2", "/", "H_inv_diag", "\n", "", "self", ".", "W_pruned", "[", "m", "]", "=", "w", "\n", "out_neuron_imp", "=", "w_imp", ".", "sum", "(", "1", ")", "# w_imp.sum(1)", "\n", "if", "not", "normalize", ":", "\n", "                        ", "out_imps", "=", "out_neuron_imp", "\n", "", "else", ":", "\n", "                        ", "out_imps", "=", "out_neuron_imp", "/", "out_neuron_imp", ".", "sum", "(", ")", "\n", "", "self", ".", "importances", "[", "m", "]", "=", "(", "tensor_to_list", "(", "out_imps", ")", ",", "out_neuron_imp", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._do_surgery": [[167, 197], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "utils.kfac_utils.fetch_mat_weights", "utils.kfac_utils.mat_to_weight_and_bias", "utils.kfac_utils.fetch_mat_weights.size", "len", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "kfac_full_pruner.KFACFullPruner.Q_a[].t", "kfac_full_pruner.KFACFullPruner.Q_g[].t", "Q_a.t", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag.unsqueeze", "torch.diag.unsqueeze", "torch.diag.unsqueeze", "torch.diag.unsqueeze", "Q_a.t", "Q_g.t"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.fetch_mat_weights", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.mat_to_weight_and_bias"], ["", "", "", "def", "_do_surgery", "(", "self", ")", ":", "\n", "            ", "eps", "=", "1e-10", "\n", "assert", "not", "self", ".", "use_patch", ",", "'Will never use patch'", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "idx", ",", "m", "in", "enumerate", "(", "self", ".", "modules", ")", ":", "\n", "                    ", "w", "=", "fetch_mat_weights", "(", "m", ",", "False", ")", "# output_dim * input_dim", "\n", "if", "w", ".", "size", "(", "0", ")", "==", "len", "(", "m", ".", "out_indices", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "self", ".", "S_l", "is", "None", ":", "\n", "                        ", "A_inv", "=", "self", ".", "Q_a", "[", "m", "]", "@", "(", "torch", ".", "diag", "(", "1.0", "/", "(", "self", ".", "d_a", "[", "m", "]", "+", "eps", ")", ")", ")", "@", "self", ".", "Q_a", "[", "m", "]", ".", "t", "(", ")", "\n", "G_inv", "=", "self", ".", "Q_g", "[", "m", "]", "@", "(", "torch", ".", "diag", "(", "1.0", "/", "(", "self", ".", "d_g", "[", "m", "]", "+", "eps", ")", ")", ")", "@", "self", ".", "Q_g", "[", "m", "]", ".", "t", "(", ")", "\n", "A_inv_diag", "=", "torch", ".", "diag", "(", "A_inv", ")", "\n", "G_inv_diag", "=", "torch", ".", "diag", "(", "G_inv", ")", "\n", "coeff", "=", "w", "/", "(", "G_inv_diag", ".", "unsqueeze", "(", "1", ")", "@", "A_inv_diag", ".", "unsqueeze", "(", "0", ")", ")", "\n", "coeff", "[", "m", ".", "out_indices", ",", ":", "]", "=", "0", "\n", "delta_theta", "=", "-", "G_inv", "@", "coeff", "@", "A_inv", "\n", "", "else", ":", "\n", "                        ", "Q_a", ",", "Q_g", "=", "self", ".", "Q_a", "[", "m", "]", ",", "self", ".", "Q_g", "[", "m", "]", "\n", "S_l", "=", "self", ".", "S_l", "[", "m", "]", "\n", "S_l_inv", "=", "1.0", "/", "(", "S_l", "+", "eps", ")", "\n", "H_inv_diag", "=", "(", "Q_g", "**", "2", ")", "@", "S_l_inv", "@", "(", "Q_a", ".", "t", "(", ")", "**", "2", ")", "# output_dim * input_dim", "\n", "coeff", "=", "w", "/", "H_inv_diag", "\n", "coeff", "[", "m", ".", "out_indices", ",", ":", "]", "=", "0", "\n", "delta_theta", "=", "(", "Q_g", ".", "t", "(", ")", "@", "coeff", "@", "Q_a", ")", "/", "S_l_inv", "\n", "delta_theta", "=", "Q_g", "@", "delta_theta", "@", "Q_a", ".", "t", "(", ")", "\n", "# ==== update weights and bias ======", "\n", "", "dw", ",", "dbias", "=", "mat_to_weight_and_bias", "(", "delta_theta", ",", "m", ")", "\n", "m", ".", "weight", "+=", "dw", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                        ", "m", ".", "bias", "+=", "dbias", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._do_prune": [[198, 242], ["sorted", "int", "utils.prune_utils.get_threshold", "len", "print", "print", "kfac_full_pruner.KFACFullPruner.logger.info", "enumerate", "utils.prune_utils.update_indices", "utils.prune_utils.filter_indices", "utils.prune_utils.filter_indices", "len", "utils.prune_utils.get_threshold", "utils.prune_utils.filter_indices", "print", "isinstance", "list", "max", "min", "max", "min", "len", "range", "len", "kfac_full_pruner.KFACFullPruner.W_pruned[].size"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.get_threshold", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_indices", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.filter_indices", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.filter_indices", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.get_threshold", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.filter_indices"], ["", "", "", "", "def", "_do_prune", "(", "self", ",", "prune_ratio", ",", "re_init", ")", ":", "\n", "# get threshold", "\n", "            ", "all_importances", "=", "[", "]", "\n", "for", "m", "in", "self", ".", "modules", ":", "\n", "                ", "imp_m", "=", "self", ".", "importances", "[", "m", "]", "\n", "imps", "=", "imp_m", "[", "0", "]", "\n", "all_importances", "+=", "imps", "\n", "", "all_importances", "=", "sorted", "(", "all_importances", ")", "\n", "idx", "=", "int", "(", "prune_ratio", "*", "len", "(", "all_importances", ")", ")", "\n", "threshold", "=", "all_importances", "[", "idx", "]", "\n", "\n", "threshold_recompute", "=", "get_threshold", "(", "all_importances", ",", "prune_ratio", ")", "\n", "idx_recomputed", "=", "len", "(", "filter_indices", "(", "all_importances", ",", "threshold", ")", ")", "\n", "print", "(", "'=> The threshold is: %.5f (%d), computed by function is: %.5f (%d).'", "%", "(", "threshold", ",", "\n", "idx", ",", "\n", "threshold_recompute", ",", "\n", "idx_recomputed", ")", ")", "\n", "\n", "# do pruning", "\n", "print", "(", "'=> Conducting network pruning. Max: %.5f, Min: %.5f, Threshold: %.5f'", "%", "(", "max", "(", "all_importances", ")", ",", "\n", "min", "(", "all_importances", ")", ",", "\n", "threshold", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"[Weight Importances] Max: %.5f, Min: %.5f, Threshold: %.5f.\"", "%", "(", "max", "(", "all_importances", ")", ",", "\n", "min", "(", "all_importances", ")", ",", "\n", "threshold", ")", ")", "\n", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "self", ".", "modules", ")", ":", "\n", "                ", "imp_m", "=", "self", ".", "importances", "[", "m", "]", "\n", "n_r", "=", "imp_m", "[", "1", "]", "\n", "row_imps", "=", "imp_m", "[", "0", "]", "\n", "row_indices", "=", "filter_indices", "(", "row_imps", ",", "threshold", ")", "\n", "r_ratio", "=", "1", "-", "len", "(", "row_indices", ")", "/", "n_r", "\n", "\n", "# compute row indices (out neurons)", "\n", "if", "r_ratio", ">", "self", ".", "prune_ratio_limit", ":", "\n", "                    ", "r_threshold", "=", "get_threshold", "(", "row_imps", ",", "self", ".", "prune_ratio_limit", ")", "\n", "row_indices", "=", "filter_indices", "(", "row_imps", ",", "r_threshold", ")", "# list(range(self.W_star[m].size(0)))", "\n", "print", "(", "'* row indices empty!'", ")", "\n", "", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "idx", "==", "len", "(", "self", ".", "modules", ")", "-", "1", ":", "\n", "                    ", "row_indices", "=", "list", "(", "range", "(", "self", ".", "W_pruned", "[", "m", "]", ".", "size", "(", "0", ")", ")", ")", "\n", "\n", "", "m", ".", "out_indices", "=", "row_indices", "\n", "m", ".", "in_indices", "=", "None", "\n", "", "update_indices", "(", "self", ".", "model", ",", "self", ".", "network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._build_pruned_model": [[243, 286], ["kfac_full_pruner.KFACFullPruner.model.modules", "isinstance", "kfac_full_pruner.KFACFullPruner.model.apply", "len", "m.bias.data[].clone", "m.running_mean[].clone", "m.running_var[].clone", "isinstance", "[].clone", "len", "len", "isinstance", "list", "[].clone", "len", "len", "range", "list", "m.bias.data[].clone", "m.weight.size", "range", "m.weight.size"], "methods", ["None"], ["", "def", "_build_pruned_model", "(", "self", ",", "re_init", ")", ":", "\n", "            ", "for", "m", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "# m.grad = None", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "idxs", "=", "m", ".", "in_indices", "\n", "m", ".", "num_features", "=", "len", "(", "idxs", ")", "\n", "m", ".", "weight", ".", "data", "=", "m", ".", "weight", ".", "data", "[", "idxs", "]", "\n", "m", ".", "bias", ".", "data", "=", "m", ".", "bias", ".", "data", "[", "idxs", "]", ".", "clone", "(", ")", "\n", "m", ".", "running_mean", "=", "m", ".", "running_mean", "[", "idxs", "]", ".", "clone", "(", ")", "\n", "m", ".", "running_var", "=", "m", ".", "running_var", "[", "idxs", "]", ".", "clone", "(", ")", "\n", "# m.in_indices = None", "\n", "# m.out_indices = None", "\n", "m", ".", "weight", ".", "grad", "=", "None", "\n", "m", ".", "bias", ".", "grad", "=", "None", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "in_indices", "=", "m", ".", "in_indices", "\n", "if", "m", ".", "in_indices", "is", "None", ":", "\n", "                        ", "in_indices", "=", "list", "(", "range", "(", "m", ".", "weight", ".", "size", "(", "1", ")", ")", ")", "\n", "", "m", ".", "weight", ".", "data", "=", "m", ".", "weight", ".", "data", "[", "m", ".", "out_indices", ",", ":", ",", ":", ",", ":", "]", "[", ":", ",", "in_indices", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                        ", "m", ".", "bias", ".", "data", "=", "m", ".", "bias", ".", "data", "[", "m", ".", "out_indices", "]", "\n", "m", ".", "bias", ".", "grad", "=", "None", "\n", "", "m", ".", "in_channels", "=", "len", "(", "in_indices", ")", "\n", "m", ".", "out_channels", "=", "len", "(", "m", ".", "out_indices", ")", "\n", "# m.in_indices = None", "\n", "# m.out_indices = None", "\n", "m", ".", "weight", ".", "grad", "=", "None", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "in_indices", "=", "m", ".", "in_indices", "\n", "if", "m", ".", "in_indices", "is", "None", ":", "\n", "                        ", "in_indices", "=", "list", "(", "range", "(", "m", ".", "weight", ".", "size", "(", "1", ")", ")", ")", "\n", "", "m", ".", "weight", ".", "data", "=", "m", ".", "weight", ".", "data", "[", "m", ".", "out_indices", ",", ":", "]", "[", ":", ",", "in_indices", "]", ".", "clone", "(", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                        ", "m", ".", "bias", ".", "data", "=", "m", ".", "bias", ".", "data", "[", "m", ".", "out_indices", "]", ".", "clone", "(", ")", "\n", "m", ".", "bias", ".", "grad", "=", "None", "\n", "", "m", ".", "in_features", "=", "len", "(", "in_indices", ")", "\n", "m", ".", "out_features", "=", "len", "(", "m", ".", "out_indices", ")", "\n", "# m.in_indices = None", "\n", "# m.out_indices = None", "\n", "m", ".", "weight", ".", "grad", "=", "None", "\n", "", "", "if", "re_init", ":", "\n", "                ", "self", ".", "model", ".", "apply", "(", "_weights_init", ")", "\n", "# import pdb; pdb.set_trace()", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.init_step": [[288, 290], ["None"], "methods", ["None"], ["", "", "def", "init_step", "(", "self", ")", ":", "\n", "            ", "self", ".", "steps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.step": [[291, 293], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "            ", "self", ".", "steps", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._rm_hooks": [[294, 300], ["kfac_full_pruner.KFACFullPruner.model.modules", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["", "def", "_rm_hooks", "(", "self", ")", ":", "\n", "            ", "for", "m", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "                ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", "in", "self", ".", "known_modules", ":", "\n", "                    ", "m", ".", "_backward_hooks", "=", "OrderedDict", "(", ")", "\n", "m", ".", "_forward_pre_hooks", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._clear_buffer": [[301, 311], ["None"], "methods", ["None"], ["", "", "", "def", "_clear_buffer", "(", "self", ")", ":", "\n", "            ", "self", ".", "m_aa", "=", "{", "}", "\n", "self", ".", "m_gg", "=", "{", "}", "\n", "self", ".", "d_a", "=", "{", "}", "\n", "self", ".", "d_g", "=", "{", "}", "\n", "self", ".", "Q_a", "=", "{", "}", "\n", "self", ".", "Q_g", "=", "{", "}", "\n", "self", ".", "modules", "=", "[", "]", "\n", "if", "self", ".", "S_l", "is", "not", "None", ":", "\n", "                ", "self", ".", "S_l", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.fine_tune_model": [[312, 357], ["kfac_full_pruner.KFACFullPruner.model.train", "optim.SGD", "utils.common_utils.PresetLRScheduler", "range", "print", "utils.network_utils.stablize_bn", "kfac_full_pruner.KFACFullPruner.test_model", "max", "kfac_full_pruner.KFACFullPruner.model.parameters", "int", "int", "kfac_full_pruner.KFACFullPruner.model.train", "utils.common_utils.PresetLRScheduler.", "tqdm.tqdm.tqdm", "kfac_full_pruner.KFACFullPruner.test_model", "max", "enumerate", "optim.SGD.zero_grad", "kfac_full_pruner.KFACFullPruner.model", "criterion", "kfac_full_pruner.KFACFullPruner.writer.add_scalar", "criterion.item", "criterion.backward", "optim.SGD.step", "kfac_full_pruner.KFACFullPruner.max", "targets.size", "predicted.eq().sum().item", "tqdm.tqdm.tqdm.set_description", "utils.common_utils.PresetLRScheduler.get_lr", "len", "inputs.to", "targets.to", "criterion.item", "predicted.eq().sum", "utils.common_utils.PresetLRScheduler.get_lr", "predicted.eq"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_pretrain.train", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.network_utils.stablize_bn", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.test_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.ConvLayerRotation.parameters", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.None.main_pretrain.train", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.test_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner.step", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.PresetLRScheduler.get_lr", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.PresetLRScheduler.get_lr"], ["", "", "def", "fine_tune_model", "(", "self", ",", "trainloader", ",", "testloader", ",", "criterion", ",", "optim", ",", "learning_rate", ",", "weight_decay", ",", "nepochs", "=", "10", ",", "\n", "device", "=", "'cuda'", ")", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "weight_decay", ")", "\n", "# optimizer = optim.Adam(self.model.parameters(), weight_decay=5e-4)", "\n", "lr_schedule", "=", "{", "0", ":", "learning_rate", ",", "int", "(", "nepochs", "*", "0.5", ")", ":", "learning_rate", "*", "0.1", ",", "\n", "int", "(", "nepochs", "*", "0.75", ")", ":", "learning_rate", "*", "0.01", "}", "\n", "lr_scheduler", "=", "PresetLRScheduler", "(", "lr_schedule", ")", "\n", "best_test_acc", ",", "best_test_loss", "=", "0", ",", "100", "\n", "iterations", "=", "0", "\n", "for", "epoch", "in", "range", "(", "nepochs", ")", ":", "\n", "                ", "self", ".", "model", "=", "self", ".", "model", ".", "train", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "all_loss", "=", "0", "\n", "lr_scheduler", "(", "optimizer", ",", "epoch", ")", "\n", "desc", "=", "(", "'[LR: %.5f] Loss: %.3f | Acc: %.3f%% (%d/%d)'", "%", "(", "\n", "lr_scheduler", ".", "get_lr", "(", "optimizer", ")", ",", "0", ",", "0", ",", "correct", ",", "total", ")", ")", "\n", "prog_bar", "=", "tqdm", "(", "enumerate", "(", "trainloader", ")", ",", "total", "=", "len", "(", "trainloader", ")", ",", "desc", "=", "desc", ",", "leave", "=", "True", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "prog_bar", ":", "\n", "                    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "self", ".", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train_%d/loss'", "%", "self", ".", "iter", ",", "loss", ".", "item", "(", ")", ",", "iterations", ")", "\n", "iterations", "+=", "1", "\n", "all_loss", "+=", "loss", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "desc", "=", "(", "'[%d][LR: %.5f, WD: %.5f] Loss: %.3f | Acc: %.3f%% (%d/%d)'", "%", "\n", "(", "epoch", ",", "lr_scheduler", ".", "get_lr", "(", "optimizer", ")", ",", "weight_decay", ",", "all_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "\n", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "prog_bar", ".", "set_description", "(", "desc", ",", "refresh", "=", "True", ")", "\n", "", "test_loss", ",", "test_acc", "=", "self", ".", "test_model", "(", "testloader", ",", "criterion", ",", "device", ")", "\n", "best_test_loss", "=", "best_test_loss", "if", "best_test_acc", ">", "test_acc", "else", "test_loss", "\n", "best_test_acc", "=", "max", "(", "test_acc", ",", "best_test_acc", ")", "\n", "", "print", "(", "'** Finetuning finished. Stabilizing batch norm and test again!'", ")", "\n", "stablize_bn", "(", "self", ".", "model", ",", "trainloader", ")", "\n", "test_loss", ",", "test_acc", "=", "self", ".", "test_model", "(", "testloader", ",", "criterion", ",", "device", ")", "\n", "best_test_loss", "=", "best_test_loss", "if", "best_test_acc", ">", "test_acc", "else", "test_loss", "\n", "best_test_acc", "=", "max", "(", "test_acc", ",", "best_test_acc", ")", "\n", "return", "best_test_loss", ",", "best_test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.test_model": [[358, 377], ["kfac_full_pruner.KFACFullPruner.model.eval", "tqdm.tqdm.tqdm", "enumerate", "kfac_full_pruner.KFACFullPruner.model", "criterion", "criterion.item", "kfac_full_pruner.KFACFullPruner.max", "targets.size", "predicted.eq().sum().item", "tqdm.tqdm.tqdm.set_description", "len", "inputs.to", "targets.to", "predicted.eq().sum", "predicted.eq"], "methods", ["None"], ["", "def", "test_model", "(", "self", ",", "dataloader", ",", "criterion", ",", "device", "=", "'cuda'", ")", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "all_loss", "=", "0", "\n", "desc", "=", "(", "'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "%", "(", "0", ",", "0", ",", "correct", ",", "total", ")", ")", "\n", "prog_bar", "=", "tqdm", "(", "enumerate", "(", "dataloader", ")", ",", "total", "=", "len", "(", "dataloader", ")", ",", "desc", "=", "desc", ",", "leave", "=", "True", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "prog_bar", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "self", ".", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "all_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "desc", "=", "(", "'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "%", "\n", "(", "all_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "prog_bar", ".", "set_description", "(", "desc", ",", "refresh", "=", "True", ")", "\n", "", "return", "all_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner.__init__": [[11, 48], ["print", "utils.kfac_utils.ComputeMatGrad"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model", ",", "\n", "builder", ",", "\n", "config", ",", "\n", "writer", ",", "\n", "logger", ",", "\n", "prune_ratio_limit", ",", "\n", "network", ",", "\n", "batch_averaged", "=", "True", ",", "\n", "use_patch", "=", "False", ",", "\n", "fix_layers", "=", "0", ")", ":", "\n", "        ", "print", "(", "'Using patch is %s'", "%", "use_patch", ")", "\n", "self", ".", "iter", "=", "0", "\n", "self", ".", "use_patch", "=", "False", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "writer", "=", "writer", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "prune_ratio_limit", "=", "prune_ratio_limit", "\n", "self", ".", "network", "=", "network", "\n", "self", ".", "MatGradHandler", "=", "ComputeMatGrad", "(", ")", "\n", "\n", "self", ".", "batch_averaged", "=", "batch_averaged", "\n", "self", ".", "known_modules", "=", "{", "'Linear'", ",", "'Conv2d'", "}", "\n", "self", ".", "modules", "=", "[", "]", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "builder", "=", "builder", "\n", "self", ".", "fix_layers", "=", "fix_layers", "\n", "self", ".", "steps", "=", "0", "\n", "self", ".", "W_pruned", "=", "{", "}", "\n", "\n", "self", ".", "importances", "=", "{", "}", "\n", "self", ".", "_inversed", "=", "False", "\n", "self", ".", "_cfgs", "=", "{", "}", "\n", "self", ".", "_indices", "=", "{", "}", "\n", "\n", "self", ".", "A", ",", "self", ".", "DS", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "Fisher", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner._save_input": [[49, 51], ["None"], "methods", ["None"], ["", "def", "_save_input", "(", "self", ",", "module", ",", "input", ")", ":", "\n", "        ", "self", ".", "A", "[", "module", "]", "=", "input", "[", "0", "]", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner._save_grad_output": [[52, 54], ["None"], "methods", ["None"], ["", "def", "_save_grad_output", "(", "self", ",", "module", ",", "grad_input", ",", "grad_output", ")", ":", "\n", "        ", "self", ".", "DS", "[", "module", "]", "=", "grad_output", "[", "0", "]", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner.make_pruned_model": [[55, 72], ["fisher_diag_pruner.FisherDiagPruner._prepare_model", "fisher_diag_pruner.FisherDiagPruner.init_step", "torch.utils.data.DataLoader", "fisher_diag_pruner.FisherDiagPruner._compute_fisher", "fisher_diag_pruner.FisherDiagPruner._get_unit_importance", "fisher_diag_pruner.FisherDiagPruner._do_prune", "fisher_diag_pruner.FisherDiagPruner._build_pruned_model", "fisher_diag_pruner.FisherDiagPruner._rm_hooks", "fisher_diag_pruner.FisherDiagPruner._clear_buffer", "str"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._prepare_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner.init_step", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._compute_fisher", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner._get_unit_importance", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._do_prune", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._build_pruned_model", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.kfac_full_pruner.KFACFullPruner._rm_hooks", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner._clear_buffer"], ["", "def", "make_pruned_model", "(", "self", ",", "dataloader", ",", "criterion", ",", "device", ",", "fisher_type", ",", "prune_ratio", ",", "normalize", "=", "True", ",", "re_init", "=", "False", ")", ":", "\n", "        ", "self", ".", "_prepare_model", "(", ")", "\n", "self", ".", "init_step", "(", ")", "\n", "\n", "temp_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataloader", ".", "dataset", ",", "batch_size", "=", "64", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "2", ")", "\n", "self", ".", "_compute_fisher", "(", "temp_loader", ",", "criterion", ",", "device", ",", "fisher_type", ")", "\n", "\n", "self", ".", "iter", "+=", "1", "\n", "self", ".", "_get_unit_importance", "(", "normalize", ")", "\n", "self", ".", "_do_prune", "(", "prune_ratio", ",", "re_init", ")", "\n", "self", ".", "_build_pruned_model", "(", "re_init", ")", "\n", "\n", "self", ".", "_rm_hooks", "(", ")", "\n", "# cfg = self._build_pruned_model(re_init)", "\n", "self", ".", "_clear_buffer", "(", ")", "\n", "return", "str", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner._get_unit_importance": [[73, 87], ["torch.no_grad", "utils.kfac_utils.fetch_mat_weights", "w_imp.sum", "utils.common_utils.tensor_to_list", "w_imp.sum.size", "w_imp.sum.sum"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.fetch_mat_weights", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.tensor_to_list"], ["", "def", "_get_unit_importance", "(", "self", ",", "normalize", ")", ":", "\n", "        ", "eps", "=", "1e-10", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", ":", "\n", "                ", "w", "=", "fetch_mat_weights", "(", "m", ",", "False", ")", "# output_dim * input_dim", "\n", "F_diag", "=", "(", "self", ".", "Fisher", "[", "m", "]", "/", "self", ".", "steps", "+", "eps", ")", "\n", "w_imp", "=", "w", "**", "2", "*", "F_diag", "\n", "self", ".", "W_pruned", "[", "m", "]", "=", "w", "\n", "out_neuron_imp", "=", "w_imp", ".", "sum", "(", "1", ")", "# w_imp.sum(1)", "\n", "if", "not", "normalize", ":", "\n", "                    ", "imps", "=", "out_neuron_imp", "\n", "", "else", ":", "\n", "                    ", "imps", "=", "out_neuron_imp", "/", "out_neuron_imp", ".", "sum", "(", ")", "\n", "", "self", ".", "importances", "[", "m", "]", "=", "(", "tensor_to_list", "(", "imps", ")", ",", "out_neuron_imp", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner.step": [[88, 101], ["torch.no_grad", "fisher_diag_pruner.FisherDiagPruner.MatGradHandler", "fisher_diag_pruner.FisherDiagPruner.pow_().sum", "DS.size", "fisher_diag_pruner.FisherDiagPruner.new().fill_", "fisher_diag_pruner.FisherDiagPruner.pow_", "fisher_diag_pruner.FisherDiagPruner.new", "fisher_diag_pruner.FisherDiagPruner.size"], "methods", ["None"], ["", "", "", "def", "step", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", ":", "\n", "                ", "A", ",", "DS", "=", "self", ".", "A", "[", "m", "]", ",", "self", ".", "DS", "[", "m", "]", "\n", "grad_mat", "=", "self", ".", "MatGradHandler", "(", "A", ",", "DS", ",", "m", ")", "\n", "if", "self", ".", "batch_averaged", ":", "\n", "                    ", "grad_mat", "*=", "DS", ".", "size", "(", "0", ")", "\n", "", "if", "self", ".", "steps", "==", "0", ":", "\n", "                    ", "self", ".", "Fisher", "[", "m", "]", "=", "grad_mat", ".", "new", "(", "grad_mat", ".", "size", "(", ")", "[", "1", ":", "]", ")", ".", "fill_", "(", "0", ")", "\n", "", "self", ".", "Fisher", "[", "m", "]", "+=", "(", "grad_mat", ".", "pow_", "(", "2", ")", ")", ".", "sum", "(", "0", ")", "\n", "self", ".", "A", "[", "m", "]", "=", "None", "\n", "self", ".", "DS", "[", "m", "]", "=", "None", "\n", "", "", "self", ".", "steps", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.pruner.fisher_diag_pruner.FisherDiagPruner._clear_buffer": [[102, 105], ["None"], "methods", ["None"], ["", "def", "_clear_buffer", "(", "self", ")", ":", "\n", "        ", "self", ".", "Fisher", "=", "{", "}", "\n", "self", ".", "modules", "=", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.vgg.VGG.__init__": [[23, 39], ["torch.Module.__init__", "vgg.VGG.make_layers", "torch.Linear", "torch.Linear", "vgg.VGG.apply"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.vgg.VGG.make_layers"], ["    ", "def", "__init__", "(", "self", ",", "dataset", "=", "'cifar10'", ",", "depth", "=", "19", ",", "init_weights", "=", "True", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "cfg", "is", "None", ":", "\n", "            ", "cfg", "=", "defaultcfg", "[", "depth", "]", "\n", "\n", "", "self", ".", "feature", "=", "self", ".", "make_layers", "(", "cfg", ",", "True", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "if", "dataset", "==", "'cifar10'", "or", "dataset", "==", "'cinic-10'", ":", "\n", "            ", "num_classes", "=", "10", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "            ", "num_classes", "=", "100", "\n", "", "elif", "dataset", "==", "'tiny_imagenet'", ":", "\n", "            ", "num_classes", "=", "200", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "cfg", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "apply", "(", "_weights_init", ")", "\n", "#    self._initialize_weights()", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.vgg.VGG.make_layers": [[41, 55], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "def", "make_layers", "(", "self", ",", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "            ", "if", "v", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "batch_norm", ":", "\n", "                    ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ",", "affine", "=", "_AFFINE", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                    ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.vgg.VGG.forward": [[56, 65], ["vgg.VGG.feature", "x.view.view.view", "vgg.VGG.classifier", "x.view.view.size", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "feature", "(", "x", ")", "\n", "if", "self", ".", "dataset", "==", "'tiny_imagenet'", ":", "\n", "            ", "x", "=", "nn", ".", "AvgPool2d", "(", "4", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.vgg.VGG._initialize_weights": [[66, 80], ["vgg.VGG.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "in_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.vgg.BottleneckVGG.__init__": [[83, 90], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vgg_prev", ",", "fix_rotation", "=", "True", ")", ":", "\n", "        ", "super", "(", "BottleneckVGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "vgg_prev", ".", "dataset", "\n", "self", ".", "feature", "=", "vgg_prev", ".", "feature", "\n", "self", ".", "classifier", "=", "vgg_prev", ".", "classifier", "\n", "self", ".", "fix_rotation", "=", "fix_rotation", "\n", "self", ".", "_is_registered", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.vgg.BottleneckVGG.register": [[91, 109], ["len", "range", "isinstance", "isinstance", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict", "vgg.BottleneckVGG.apply", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict"], ["", "def", "register", "(", "self", ",", "modules", ",", "Q_g", ",", "Q_a", ",", "W_star", ",", "use_patch", ",", "fix_rotation", ",", "re_init", ")", ":", "\n", "        ", "n_seqs", "=", "len", "(", "self", ".", "feature", ")", "\n", "for", "idx", "in", "range", "(", "n_seqs", ")", ":", "\n", "            ", "m", "=", "self", ".", "feature", "[", "idx", "]", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "                ", "m", "=", "m", "[", "1", "]", "\n", "", "if", "m", "in", "modules", ":", "\n", "                ", "self", ".", "feature", "[", "idx", "]", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "self", ".", "feature", "[", "idx", "]", "[", "1", "]", ")", "\n", "", "", "m", "=", "self", ".", "classifier", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "m", "=", "m", "[", "1", "]", "\n", "", "if", "m", "in", "modules", ":", "\n", "            ", "self", ".", "classifier", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "self", ".", "classifier", ")", "\n", "", "self", ".", "_is_registered", "=", "True", "\n", "if", "re_init", ":", "\n", "            ", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.vgg.BottleneckVGG._initialize_weights": [[110, 133], ["vgg.BottleneckVGG.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "m.weight.data.normal_", "m.bias.data.zero_", "isinstance", "isinstance", "print", "m.rotation_matrix.data.normal_", "print", "m.rotation_matrix.data.normal_", "m.rotation_matrix.size", "math.sqrt"], "methods", ["None"], ["", "", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "in_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "LinearLayerRotation", ")", ":", "\n", "                ", "if", "m", ".", "trainable", ":", "\n", "                    ", "print", "(", "'* init Linear rotation'", ")", "\n", "m", ".", "rotation_matrix", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "ConvLayerRotation", ")", ":", "\n", "                ", "if", "m", ".", "trainable", ":", "\n", "                    ", "print", "(", "'* init Conv rotation'", ")", "\n", "n", "=", "1", "*", "m", ".", "rotation_matrix", ".", "size", "(", "1", ")", "\n", "m", ".", "rotation_matrix", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.vgg.BottleneckVGG.forward": [[134, 147], ["len", "range", "x.view", "vgg.BottleneckVGG.classifier", "x.size", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "self", ".", "_is_registered", "\n", "nseq", "=", "len", "(", "self", ".", "feature", ")", "\n", "for", "idx", "in", "range", "(", "nseq", ")", ":", "\n", "            ", "x", "=", "self", ".", "feature", "[", "idx", "]", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "dataset", "==", "'tiny_imagenet'", ":", "\n", "            ", "x", "=", "nn", ".", "AvgPool2d", "(", "4", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "", "out", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet.LambdaLayer.__init__": [[40, 43], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet.LambdaLayer.forward": [[44, 46], ["resnet.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet.BasicBlock.__init__": [[51, 64], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "_AFFINE", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "_AFFINE", ")", "\n", "\n", "self", ".", "downsample", "=", "None", "\n", "self", ".", "bn3", "=", "None", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ",", "affine", "=", "_AFFINE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet.BasicBlock.forward": [[65, 106], ["hasattr", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "indices.append", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn3", "len", "list", "range", "utils.common_utils.try_cuda", "resnet.BasicBlock.conv1", "resnet.BasicBlock.downsample", "indices.append", "indices.append", "set", "set", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "r_indices.append", "o_indices.append", "x.size", "resnet.BasicBlock.size", "resnet.BasicBlock.size", "o_indices.append", "r_indices.append"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.try_cuda"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: batch_size * in_c * h * w", "\n", "        ", "is_pruned", "=", "hasattr", "(", "self", ".", "conv1", ",", "'in_indices'", ")", "\n", "if", "is_pruned", ":", "\n", "            ", "indices", "=", "[", "]", "\n", "indices", ".", "append", "(", "self", ".", "conv2", ".", "out_indices", ")", "\n", "", "residual", "=", "x", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "bn3", "(", "self", ".", "downsample", "(", "x", ")", ")", "\n", "if", "is_pruned", ":", "\n", "                ", "indices", ".", "append", "(", "self", ".", "downsample", "[", "0", "]", ".", "out_indices", ")", "\n", "", "", "elif", "is_pruned", ":", "\n", "            ", "indices", ".", "append", "(", "self", ".", "conv1", ".", "in_indices", ")", "\n", "\n", "", "if", "is_pruned", ":", "\n", "            ", "n_c", "=", "len", "(", "set", "(", "indices", "[", "0", "]", "+", "indices", "[", "1", "]", ")", ")", "\n", "all_indices", "=", "list", "(", "set", "(", "indices", "[", "0", "]", "+", "indices", "[", "1", "]", ")", ")", "\n", "res", "=", "[", "]", "\n", "\n", "r_indices", "=", "[", "]", "\n", "o_indices", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_c", ")", ":", "\n", "                ", "idx", "=", "all_indices", "[", "i", "]", "\n", "if", "idx", "in", "indices", "[", "0", "]", "and", "idx", "in", "indices", "[", "1", "]", ":", "\n", "                    ", "r_indices", ".", "append", "(", "i", ")", "\n", "o_indices", ".", "append", "(", "i", ")", "\n", "", "elif", "idx", "in", "indices", "[", "0", "]", ":", "\n", "                    ", "o_indices", ".", "append", "(", "i", ")", "\n", "", "elif", "idx", "in", "indices", "[", "1", "]", ":", "\n", "                    ", "r_indices", ".", "append", "(", "i", ")", "\n", "", "", "res", "=", "try_cuda", "(", "torch", ".", "zeros", "(", "x", ".", "size", "(", "0", ")", ",", "n_c", ",", "residual", ".", "size", "(", "2", ")", ",", "residual", ".", "size", "(", "3", ")", ")", ")", "\n", "res", "[", ":", ",", "r_indices", ",", ":", ",", ":", "]", "=", "residual", "\n", "res", "[", ":", ",", "o_indices", ",", ":", ",", ":", "]", "+=", "out", "\n", "out", "=", "res", "\n", "", "else", ":", "\n", "            ", "out", "+=", "residual", "\n", "", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet.ResNet.__init__": [[109, 122], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.apply"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.presnet._make_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.presnet._make_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.presnet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "_outputs", "=", "[", "64", ",", "128", ",", "256", "]", "\n", "self", ".", "in_planes", "=", "_outputs", "[", "0", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "_outputs", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "_outputs", "[", "0", "]", ",", "affine", "=", "_AFFINE", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "_outputs", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "_outputs", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "_outputs", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "_outputs", "[", "2", "]", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet.ResNet._make_layer": [[123, 131], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet.ResNet.forward": [[132, 141], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn", "resnet.ResNet.size", "resnet.ResNet.conv1", "resnet.ResNet.size"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovG.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet.BottleneckResNet.__init__": [[156, 167], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net_prev", ",", "fix_rotation", "=", "True", ")", ":", "\n", "        ", "super", "(", "BottleneckResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "net_prev", ".", "conv1", "\n", "self", ".", "bn", "=", "net_prev", ".", "bn", "\n", "self", ".", "layer1", "=", "net_prev", ".", "layer1", "\n", "self", ".", "layer2", "=", "net_prev", ".", "layer2", "\n", "self", ".", "layer3", "=", "net_prev", ".", "layer3", "\n", "self", ".", "linear", "=", "net_prev", ".", "linear", "\n", "\n", "self", ".", "fix_rotation", "=", "fix_rotation", "\n", "self", ".", "_is_registered", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet.BottleneckResNet._update_bottleneck": [[168, 195], ["isinstance", "isinstance", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict", "len", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict"], ["", "def", "_update_bottleneck", "(", "self", ",", "bneck", ",", "modules", ",", "Q_g", ",", "Q_a", ",", "W_star", ",", "use_patch", ",", "fix_rotation", ")", ":", "\n", "        ", "m", "=", "bneck", ".", "conv1", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "m", "=", "m", "[", "1", "]", "\n", "", "if", "m", "in", "modules", ":", "\n", "            ", "bneck", ".", "conv1", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "bneck", ".", "conv1", "[", "1", "]", ")", "\n", "\n", "", "m", "=", "bneck", ".", "conv2", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "m", "=", "m", "[", "1", "]", "\n", "", "if", "m", "in", "modules", ":", "\n", "            ", "bneck", ".", "conv2", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "bneck", ".", "conv2", "[", "1", "]", ")", "\n", "\n", "", "m", "=", "bneck", ".", "downsample", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "m", ")", "==", "1", "and", "m", "[", "0", "]", "in", "modules", ":", "\n", "                ", "m", "=", "m", "[", "0", "]", "\n", "bneck", ".", "downsample", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "bneck", ".", "downsample", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "m", ")", "==", "3", "and", "m", "[", "1", "]", "in", "modules", ":", "\n", "                ", "m", "=", "m", "[", "1", "]", "\n", "bneck", ".", "downsample", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "bneck", ".", "downsample", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "assert", "len", "(", "m", ")", "==", "1", "or", "len", "(", "m", ")", "==", "3", ",", "'Upexpected layer %s'", "%", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet.BottleneckResNet.register": [[196, 217], ["resnet.BottleneckResNet.modules", "isinstance", "isinstance", "isinstance", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict", "resnet.BottleneckResNet.apply", "resnet.BottleneckResNet._update_bottleneck"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet._update_bottleneck"], ["", "", "", "def", "register", "(", "self", ",", "modules", ",", "Q_g", ",", "Q_a", ",", "W_star", ",", "use_patch", ",", "fix_rotation", ",", "re_init", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                ", "self", ".", "_update_bottleneck", "(", "m", ",", "modules", ",", "Q_g", ",", "Q_a", ",", "W_star", ",", "use_patch", ",", "fix_rotation", ")", "\n", "\n", "", "", "m", "=", "self", ".", "conv1", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "m", "=", "m", "[", "1", "]", "\n", "", "if", "m", "in", "modules", ":", "\n", "            ", "self", ".", "conv1", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "self", ".", "conv1", "[", "1", "]", ")", "\n", "\n", "", "m", "=", "self", ".", "linear", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "m", "=", "m", "[", "1", "]", "\n", "", "if", "m", "in", "modules", ":", "\n", "            ", "self", ".", "linear", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "self", ".", "linear", "[", "1", "]", ")", "\n", "", "self", ".", "_is_registered", "=", "True", "\n", "if", "re_init", ":", "\n", "            ", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet.BottleneckResNet.forward": [[218, 228], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.BottleneckResNet.layer1", "resnet.BottleneckResNet.layer2", "resnet.BottleneckResNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.BottleneckResNet.view", "resnet.BottleneckResNet.linear", "resnet.BottleneckResNet.bn", "resnet.BottleneckResNet.size", "resnet.BottleneckResNet.conv1", "resnet.BottleneckResNet.size"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.kfac_utils.ComputeCovG.linear"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "self", ".", "_is_registered", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet._weights_init": [[18, 37], ["isinstance", "isinstance", "torch.kaiming_normal", "isinstance", "m.bias.data.fill_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "print", "torch.kaiming_normal", "print", "torch.kaiming_normal"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "LinearLayerRotation", ")", ":", "\n", "        ", "if", "m", ".", "trainable", ":", "\n", "            ", "print", "(", "'* init Linear rotation'", ")", "\n", "init", ".", "kaiming_normal", "(", "m", ".", "rotation_matrix", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "ConvLayerRotation", ")", ":", "\n", "        ", "if", "m", ".", "trainable", ":", "\n", "            ", "print", "(", "'* init Conv rotation'", ")", "\n", "init", ".", "kaiming_normal", "(", "m", ".", "rotation_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet.resnet": [[143, 153], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet", "(", "depth", "=", "32", ",", "dataset", "=", "'cifar10'", ")", ":", "\n", "    ", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'Depth must be = 6n + 2, got %d'", "%", "depth", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "num_classes", "=", "10", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "        ", "num_classes", "=", "100", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "ResNet", "(", "BasicBlock", ",", "[", "n", "]", "*", "3", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.resnet.test": [[230, 238], ["filter", "print", "print", "net.parameters", "np.prod", "len", "list", "x.data.numpy", "filter", "net.parameters", "len", "p.data.size"], "function", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.ConvLayerRotation.parameters", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.prod", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.ConvLayerRotation.parameters"], ["", "", "def", "test", "(", "net", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "total_params", "=", "0", "\n", "\n", "for", "x", "in", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "net", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "total_params", "+=", "np", ".", "prod", "(", "x", ".", "data", ".", "numpy", "(", ")", ".", "shape", ")", "\n", "", "print", "(", "\"Total number of params\"", ",", "total_params", ")", "\n", "print", "(", "\"Total layers\"", ",", "len", "(", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", "and", "len", "(", "p", ".", "data", ".", "size", "(", ")", ")", ">", "1", ",", "net", ".", "parameters", "(", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.channel_selection.__init__": [[29, 36], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__"], ["def", "__init__", "(", "self", ",", "num_channels", ")", ":", "\n", "        ", "\"\"\"\n        Initialize the `indexes` with all one vector with the length same as the number of channels.\n        During pruning, the places in `indexes` which correpond to the channels to be pruned will be set to 0.\n\t    \"\"\"", "\n", "super", "(", "channel_selection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indexes", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.channel_selection.forward": [[37, 48], ["numpy.squeeze", "numpy.argwhere", "numpy.resize", "presnet.channel_selection.indexes.data.cpu().numpy", "presnet.channel_selection.indexes.data.cpu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "\"\"\"\n        Parameter\n        ---------\n        input_tensor: (N,C,H,W). It should be the output of BatchNorm2d layer.\n\t\t\"\"\"", "\n", "selected_index", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "self", ".", "indexes", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "if", "selected_index", ".", "size", "==", "1", ":", "\n", "            ", "selected_index", "=", "np", ".", "resize", "(", "selected_index", ",", "(", "1", ",", ")", ")", "\n", "", "output", "=", "input_tensor", "[", ":", ",", "selected_index", ",", ":", ",", ":", "]", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.Bottleneck.__init__": [[53, 66], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "presnet.channel_selection", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "cfg", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "select", "=", "channel_selection", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "0", "]", ",", "cfg", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "1", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "1", "]", ",", "cfg", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "cfg", "[", "2", "]", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "cfg", "[", "2", "]", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.Bottleneck.forward": [[67, 118], ["hasattr", "presnet.Bottleneck.bn1", "presnet.Bottleneck.relu", "presnet.Bottleneck.conv1", "presnet.Bottleneck.bn2", "presnet.Bottleneck.relu", "presnet.Bottleneck.conv2", "presnet.Bottleneck.bn3", "presnet.Bottleneck.relu", "presnet.Bottleneck.conv3", "indices.append", "presnet.Bottleneck.downsample", "len", "list", "range", "utils.common_utils.try_cuda", "indices.append", "indices.append", "set", "set", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "r_indices.append", "o_indices.append", "x.size", "presnet.Bottleneck.size", "presnet.Bottleneck.size", "o_indices.append", "r_indices.append"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.common_utils.try_cuda"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "is_pruned", "=", "hasattr", "(", "self", ".", "conv1", ",", "'in_indices'", ")", "\n", "if", "is_pruned", ":", "\n", "            ", "indices", "=", "[", "]", "\n", "indices", ".", "append", "(", "self", ".", "conv3", ".", "out_indices", ")", "\n", "\n", "", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "# out = self.select(out)", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "if", "is_pruned", ":", "\n", "                ", "indices", ".", "append", "(", "self", ".", "downsample", "[", "0", "]", ".", "out_indices", ")", "\n", "", "", "elif", "is_pruned", ":", "\n", "            ", "indices", ".", "append", "(", "self", ".", "conv1", ".", "in_indices", ")", "\n", "\n", "", "if", "is_pruned", ":", "\n", "            ", "n_c", "=", "len", "(", "set", "(", "indices", "[", "0", "]", "+", "indices", "[", "1", "]", ")", ")", "\n", "all_indices", "=", "list", "(", "set", "(", "indices", "[", "0", "]", "+", "indices", "[", "1", "]", ")", ")", "\n", "r_indices", "=", "[", "]", "\n", "o_indices", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_c", ")", ":", "\n", "                ", "idx", "=", "all_indices", "[", "i", "]", "\n", "if", "idx", "in", "indices", "[", "0", "]", "and", "idx", "in", "indices", "[", "1", "]", ":", "\n", "                    ", "r_indices", ".", "append", "(", "i", ")", "\n", "o_indices", ".", "append", "(", "i", ")", "\n", "", "elif", "idx", "in", "indices", "[", "0", "]", ":", "\n", "                    ", "o_indices", ".", "append", "(", "i", ")", "\n", "", "elif", "idx", "in", "indices", "[", "1", "]", ":", "\n", "                    ", "r_indices", ".", "append", "(", "i", ")", "\n", "", "", "res", "=", "try_cuda", "(", "torch", ".", "zeros", "(", "x", ".", "size", "(", "0", ")", ",", "n_c", ",", "residual", ".", "size", "(", "2", ")", ",", "residual", ".", "size", "(", "3", ")", ")", ")", "\n", "res", "[", ":", ",", "r_indices", ",", ":", ",", ":", "]", "=", "residual", "\n", "res", "[", ":", ",", "o_indices", ",", ":", ",", ":", "]", "+=", "out", "\n", "out", "=", "res", "\n", "", "else", ":", "\n", "            ", "out", "+=", "residual", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.presnet.__init__": [[121, 157], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "presnet.presnet._make_layer", "presnet.presnet._make_layer", "presnet.presnet._make_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "presnet.channel_selection", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "presnet.presnet.modules", "torch.Linear", "torch.Linear", "isinstance", "torch.Linear", "torch.Linear", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.presnet._make_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.presnet._make_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.presnet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "164", ",", "dataset", "=", "'cifar10'", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "presnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be 9n+2'", "\n", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "block", "=", "Bottleneck", "\n", "\n", "if", "cfg", "is", "None", ":", "\n", "# Construct config variable.", "\n", "            ", "cfg", "=", "[", "[", "64", ",", "64", ",", "64", "]", ",", "[", "64", ",", "64", ",", "64", "]", "*", "(", "n", "-", "1", ")", ",", "[", "64", ",", "64", ",", "64", "]", ",", "[", "128", ",", "128", ",", "128", "]", "*", "(", "n", "-", "1", ")", ",", "[", "128", ",", "128", ",", "128", "]", ",", "[", "256", ",", "256", ",", "256", "]", "*", "(", "n", "-", "1", ")", ",", "[", "256", "]", "]", "\n", "cfg", "=", "[", "item", "for", "sub_list", "in", "cfg", "for", "item", "in", "sub_list", "]", "\n", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "n", ",", "cfg", "=", "cfg", "[", "0", ":", "3", "*", "n", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "n", ",", "cfg", "=", "cfg", "[", "3", "*", "n", ":", "6", "*", "n", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "n", ",", "cfg", "=", "cfg", "[", "6", "*", "n", ":", "9", "*", "n", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "256", "*", "block", ".", "expansion", ")", "\n", "self", ".", "select", "=", "channel_selection", "(", "256", "*", "block", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "cfg", "[", "-", "1", "]", ",", "10", ")", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "cfg", "[", "-", "1", "]", ",", "100", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "0.5", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.presnet._make_layer": [[158, 173], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "cfg", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", "0", ":", "3", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cfg", "[", "3", "*", "i", ":", "3", "*", "(", "i", "+", "1", ")", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.presnet.forward": [[174, 189], ["presnet.presnet.conv1", "presnet.presnet.layer1", "presnet.presnet.layer2", "presnet.presnet.layer3", "presnet.presnet.bn", "presnet.presnet.relu", "presnet.presnet.avgpool", "presnet.presnet.view", "presnet.presnet.fc", "presnet.presnet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# 32x32", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "# 16x16", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 8x8", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "# x = self.select(x)", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__": [[192, 205], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net_prev", ",", "fix_rotation", "=", "True", ")", ":", "\n", "        ", "super", "(", "BottleneckPResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "net_prev", ".", "conv1", "\n", "\n", "self", ".", "layer1", "=", "net_prev", ".", "layer1", "\n", "self", ".", "layer2", "=", "net_prev", ".", "layer2", "\n", "self", ".", "layer3", "=", "net_prev", ".", "layer3", "\n", "self", ".", "bn", "=", "net_prev", ".", "bn", "\n", "self", ".", "fc", "=", "net_prev", ".", "fc", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "fix_rotation", "=", "fix_rotation", "\n", "self", ".", "_is_registered", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet._update_bottleneck": [[206, 240], ["isinstance", "isinstance", "isinstance", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict", "len", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict"], ["", "def", "_update_bottleneck", "(", "self", ",", "bneck", ",", "modules", ",", "Q_g", ",", "Q_a", ",", "W_star", ",", "use_patch", ",", "fix_rotation", ")", ":", "\n", "        ", "m", "=", "bneck", ".", "conv1", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "m", "=", "m", "[", "1", "]", "\n", "", "if", "m", "in", "modules", ":", "\n", "            ", "bneck", ".", "conv1", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "bneck", ".", "conv1", "[", "1", "]", ")", "\n", "\n", "", "m", "=", "bneck", ".", "conv2", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "m", "=", "m", "[", "1", "]", "\n", "", "if", "m", "in", "modules", ":", "\n", "            ", "bneck", ".", "conv2", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "bneck", ".", "conv2", "[", "1", "]", ")", "\n", "\n", "", "m", "=", "bneck", ".", "conv3", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "m", "=", "m", "[", "1", "]", "\n", "", "if", "m", "in", "modules", ":", "\n", "            ", "bneck", ".", "conv3", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "bneck", ".", "conv3", "[", "1", "]", ")", "\n", "\n", "", "m", "=", "bneck", ".", "downsample", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "m", ")", "==", "1", "and", "m", "[", "0", "]", "in", "modules", ":", "\n", "                ", "m", "=", "m", "[", "0", "]", "\n", "bneck", ".", "downsample", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "bneck", ".", "downsample", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "m", ")", "==", "3", "and", "m", "[", "1", "]", "in", "modules", ":", "\n", "                ", "m", "=", "m", "[", "1", "]", "\n", "bneck", ".", "downsample", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "bneck", ".", "downsample", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "assert", "len", "(", "m", ")", "==", "1", "or", "len", "(", "m", ")", "==", "3", ",", "'Upexpected layer %s'", "%", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.register": [[241, 262], ["presnet.BottleneckPResNet.modules", "isinstance", "isinstance", "isinstance", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict", "utils.prune_utils.register_bottleneck_layer", "utils.prune_utils.update_QQ_dict", "presnet.BottleneckPResNet._update_bottleneck"], "methods", ["home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.register_bottleneck_layer", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.utils.prune_utils.update_QQ_dict", "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet._update_bottleneck"], ["", "", "", "def", "register", "(", "self", ",", "modules", ",", "Q_g", ",", "Q_a", ",", "W_star", ",", "use_patch", ",", "fix_rotation", ",", "re_init", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                ", "self", ".", "_update_bottleneck", "(", "m", ",", "modules", ",", "Q_g", ",", "Q_a", ",", "W_star", ",", "use_patch", ",", "fix_rotation", ")", "\n", "\n", "", "", "m", "=", "self", ".", "conv1", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "m", "=", "m", "[", "1", "]", "\n", "", "if", "m", "in", "modules", ":", "\n", "            ", "self", ".", "conv1", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "self", ".", "conv1", "[", "1", "]", ")", "\n", "\n", "", "m", "=", "self", ".", "fc", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "m", "=", "m", "[", "1", "]", "\n", "", "if", "m", "in", "modules", ":", "\n", "            ", "self", ".", "fc", "=", "register_bottleneck_layer", "(", "m", ",", "Q_g", "[", "m", "]", ",", "Q_a", "[", "m", "]", ",", "W_star", "[", "m", "]", ",", "use_patch", ",", "fix_rotation", ")", "\n", "update_QQ_dict", "(", "Q_g", ",", "Q_a", ",", "m", ",", "self", ".", "fc", "[", "1", "]", ")", "\n", "", "self", ".", "_is_registered", "=", "True", "\n", "if", "re_init", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# self.apply(_weights_init)", "\n"]], "home.repos.pwc.inspect_result.alecwangcq_EigenDamage-Pytorch.models.presnet.BottleneckPResNet.forward": [[264, 280], ["presnet.BottleneckPResNet.conv1", "presnet.BottleneckPResNet.layer1", "presnet.BottleneckPResNet.layer2", "presnet.BottleneckPResNet.layer3", "presnet.BottleneckPResNet.bn", "presnet.BottleneckPResNet.relu", "presnet.BottleneckPResNet.avgpool", "presnet.BottleneckPResNet.view", "presnet.BottleneckPResNet.fc", "presnet.BottleneckPResNet.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "self", ".", "_is_registered", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# 32x32", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "# 16x16", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 8x8", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "# x = self.select(x)", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "", "", "", ""]]}