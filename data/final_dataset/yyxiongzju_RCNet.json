{"home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.add_flops_counting_methods": [[7, 72], ["start_flops_count.__get__", "stop_flops_count.__get__", "reset_flops_count.__get__", "compute_average_flops_cost.__get__", "net_main_module.reset_flops_count", "net_main_module.apply"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.reset_flops_count"], ["def", "add_flops_counting_methods", "(", "net_main_module", ")", ":", "\n", "    ", "\"\"\"Adds flops counting functions to an existing model. After that\n    the flops count should be activated and the model should be run on an input\n    image.\n\n    Example:\n\n    fcn = add_flops_counting_methods(fcn)\n    fcn = fcn.cuda().train()\n    fcn.start_flops_count()\n\n\n    _ = fcn(batch)\n\n    fcn.compute_average_flops_cost() / 1e9 / 2 # Result in GFLOPs per image in batch\n\n    Important: dividing by 2 only works for resnet models -- see below for the details\n    of flops computation.\n\n    Attention: we are counting multiply-add as two flops in this work, because in\n    most resnet models convolutions are bias-free (BN layers act as bias there)\n    and it makes sense to count muliply and add as separate flops therefore.\n    This is why in the above example we divide by 2 in order to be consistent with\n    most modern benchmarks. For example in \"Spatially Adaptive Computatin Time for Residual\n    Networks\" by Figurnov et al multiply-add was counted as two flops.\n\n    This module computes the average flops which is necessary for dynamic networks which\n    have different number of executed layers. For static networks it is enough to run the network\n    once and get statistics (above example).\n\n    Implementation:\n    The module works by adding batch_count to the main module which tracks the sum\n    of all batch sizes that were run through the network.\n\n    Also each convolutional layer of the network tracks the overall number of flops\n    performed.\n\n    The parameters are updated with the help of registered hook-functions which\n    are being called each time the respective layer is executed.\n\n    Parameters\n    ----------\n    net_main_module : torch.nn.Module\n        Main module containing network\n\n    Returns\n    -------\n    net_main_module : torch.nn.Module\n        Updated main module with new methods/attributes that are used\n        to compute flops.\n    \"\"\"", "\n", "\n", "# adding additional methods to the existing module object,", "\n", "# this is done this way so that each function has access to self object", "\n", "net_main_module", ".", "start_flops_count", "=", "start_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "stop_flops_count", "=", "stop_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "reset_flops_count", "=", "reset_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "compute_average_flops_cost", "=", "compute_average_flops_cost", ".", "__get__", "(", "net_main_module", ")", "\n", "\n", "net_main_module", ".", "reset_flops_count", "(", ")", "\n", "\n", "# Adding varialbles necessary for masked flops computation", "\n", "net_main_module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n", "return", "net_main_module", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.compute_average_flops_cost": [[74, 93], ["flops_benchmark..modules", "isinstance"], "function", ["None"], ["", "def", "compute_average_flops_cost", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Returns current mean flops consumption per image.\n\n    \"\"\"", "\n", "\n", "batches_count", "=", "self", ".", "__batch_counter__", "\n", "\n", "flops_sum", "=", "0", "\n", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "\n", "", "", "return", "flops_sum", "/", "batches_count", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.start_flops_count": [[95, 108], ["flops_benchmark.add_batch_counter_hook_function", "flops_benchmark..apply"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.add_batch_counter_hook_function"], ["", "def", "start_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Activates the computation of mean flops consumption per image.\n    Call it before you run the network.\n\n    \"\"\"", "\n", "\n", "add_batch_counter_hook_function", "(", "self", ")", "\n", "\n", "self", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.stop_flops_count": [[110, 123], ["flops_benchmark.remove_batch_counter_hook_function", "flops_benchmark..apply"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.remove_batch_counter_hook_function"], ["", "def", "stop_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Stops computing the mean flops consumption per image.\n    Call whenever you want to pause the computation.\n\n    \"\"\"", "\n", "\n", "remove_batch_counter_hook_function", "(", "self", ")", "\n", "\n", "self", ".", "apply", "(", "remove_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.reset_flops_count": [[125, 137], ["flops_benchmark.add_batch_counter_variables_or_reset", "flops_benchmark..apply"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.add_batch_counter_variables_or_reset"], ["", "def", "reset_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Resets statistics computed so far.\n\n    \"\"\"", "\n", "\n", "add_batch_counter_variables_or_reset", "(", "self", ")", "\n", "\n", "self", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.add_flops_mask": [[139, 145], ["module.apply", "isinstance"], "function", ["None"], ["", "def", "add_flops_mask", "(", "module", ",", "mask", ")", ":", "\n", "    ", "def", "add_flops_mask_func", "(", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "module", ".", "__mask__", "=", "mask", "\n", "\n", "", "", "module", ".", "apply", "(", "add_flops_mask_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.remove_flops_mask": [[147, 149], ["module.apply"], "function", ["None"], ["", "def", "remove_flops_mask", "(", "module", ")", ":", "\n", "    ", "module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.conv_flops_counter_hook": [[154, 186], ["conv_module.__mask__.expand", "conv_module.__mask__.expand.sum"], "function", ["None"], ["", "def", "conv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "# We count multiply-add as 2 flops", "\n", "conv_per_position_flops", "=", "2", "*", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "out_channels", "/", "groups", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "output_height", "*", "output_width", "\n", "\n", "if", "conv_module", ".", "__mask__", "is", "not", "None", ":", "\n", "# (b, 1, h, w)", "\n", "        ", "flops_mask", "=", "conv_module", ".", "__mask__", ".", "expand", "(", "batch_size", ",", "1", ",", "output_height", ",", "output_width", ")", "\n", "active_elements_count", "=", "flops_mask", ".", "sum", "(", ")", "\n", "\n", "", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "bias_flops", "=", "0", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "bias_flops", "=", "out_channels", "*", "active_elements_count", "\n", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.batch_counter_hook": [[188, 195], ["None"], "function", ["None"], ["", "def", "batch_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "\n", "module", ".", "__batch_counter__", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.add_batch_counter_variables_or_reset": [[197, 199], ["None"], "function", ["None"], ["", "def", "add_batch_counter_variables_or_reset", "(", "module", ")", ":", "\n", "    ", "module", ".", "__batch_counter__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.add_batch_counter_hook_function": [[201, 207], ["hasattr", "module.register_forward_hook"], "function", ["None"], ["", "def", "add_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "return", "\n", "\n", "", "handle", "=", "module", ".", "register_forward_hook", "(", "batch_counter_hook", ")", "\n", "module", ".", "__batch_counter_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.remove_batch_counter_hook_function": [[209, 214], ["hasattr", "module.__batch_counter_handle__.remove"], "function", ["None"], ["", "def", "remove_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "module", ".", "__batch_counter_handle__", ".", "remove", "(", ")", "\n", "\n", "del", "module", ".", "__batch_counter_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.add_flops_counter_variable_or_reset": [[216, 219], ["isinstance"], "function", ["None"], ["", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.add_flops_counter_hook_function": [[221, 229], ["isinstance", "hasattr", "module.register_forward_hook"], "function", ["None"], ["", "", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "return", "\n", "\n", "", "handle", "=", "module", ".", "register_forward_hook", "(", "conv_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.remove_flops_counter_hook_function": [[231, 238], ["isinstance", "hasattr", "module.__flops_handle__.remove"], "function", ["None"], ["", "", "def", "remove_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "module", ".", "__flops_handle__", ".", "remove", "(", ")", "\n", "\n", "del", "module", ".", "__flops_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.add_flops_mask_variable_or_reset": [[244, 247], ["isinstance"], "function", ["None"], ["", "", "", "def", "add_flops_mask_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "module", ".", "__mask__", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.flops_benchmark.count_flops": [[249, 262], ["model", "flops_benchmark.add_flops_counting_methods", "net.train.to", "net.train.train", "torch.randn().to", "net.train.start_flops_count", "net.train.", "net.train.compute_average_flops_cost", "torch.randn"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.add_flops_counting_methods", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.train", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.start_flops_count", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.compute_average_flops_cost"], ["", "", "def", "count_flops", "(", "model", ",", "batch_size", ",", "device", ",", "dtype", ",", "input_size", ",", "in_channels", ",", "scale", ",", "*", "params", ")", ":", "\n", "    ", "net", "=", "model", "(", "*", "params", ",", "scale", "=", "scale", ",", "input_size", "=", "input_size", ")", "\n", "# print(net)", "\n", "net", "=", "add_flops_counting_methods", "(", "net", ")", "\n", "\n", "net", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", "\n", "net", "=", "net", ".", "train", "(", ")", "\n", "\n", "batch", "=", "torch", ".", "randn", "(", "batch_size", ",", "in_channels", ",", "input_size", ",", "input_size", ")", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", "\n", "net", ".", "start_flops_count", "(", ")", "\n", "\n", "_", "=", "net", "(", "batch", ")", "\n", "return", "net", ".", "compute_average_flops_cost", "(", ")", "/", "2", "# Result in FLOPs", "\n", "", ""]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.data.inception_preproccess": [[13, 19], ["torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "inception_preproccess", "(", "input_size", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.data.scale_crop": [[22, 32], ["torchvision.transforms.Compose", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize"], "function", ["None"], ["", "def", "scale_crop", "(", "input_size", ",", "scale_size", "=", "None", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "t_list", "=", "[", "\n", "transforms", ".", "CenterCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", ",", "\n", "]", "\n", "if", "scale_size", "!=", "input_size", ":", "\n", "        ", "t_list", "=", "[", "transforms", ".", "Resize", "(", "scale_size", ")", "]", "+", "t_list", "\n", "\n", "", "return", "transforms", ".", "Compose", "(", "t_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.data.get_transform": [[34, 41], ["int", "data.inception_preproccess", "data.scale_crop"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.data.inception_preproccess", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.data.scale_crop"], ["", "def", "get_transform", "(", "augment", "=", "True", ",", "input_size", "=", "224", ")", ":", "\n", "    ", "normalize", "=", "__imagenet_stats", "\n", "scale_size", "=", "int", "(", "input_size", "/", "0.875", ")", "\n", "if", "augment", ":", "\n", "        ", "return", "inception_preproccess", "(", "input_size", "=", "input_size", ",", "normalize", "=", "normalize", ")", "\n", "", "else", ":", "\n", "        ", "return", "scale_crop", "(", "input_size", "=", "input_size", ",", "scale_size", "=", "scale_size", ",", "normalize", "=", "normalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.data.get_loaders": [[43, 53], ["torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.join", "data.get_transform", "os.path.join", "data.get_transform"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.data.get_transform", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.data.get_transform"], ["", "", "def", "get_loaders", "(", "dataroot", ",", "val_batch_size", ",", "train_batch_size", ",", "input_size", ",", "workers", ")", ":", "\n", "    ", "val_data", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'val'", ")", ",", "transform", "=", "get_transform", "(", "False", ",", "input_size", ")", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_data", ",", "batch_size", "=", "val_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "train_data", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'train'", ")", ",", "\n", "transform", "=", "get_transform", "(", "input_size", "=", "input_size", ")", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "train_batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.run.train": [[19, 50], ["model.train", "enumerate", "tqdm.tqdm", "isinstance", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "run.correct", "criterion.item", "scheduler.batch_step", "data.to", "target.to", "tqdm.tqdm.write", "len", "len", "len", "criterion.item", "len"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.train", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.correct"], ["def", "train", "(", "model", ",", "loader", ",", "epoch", ",", "optimizer", ",", "criterion", ",", "device", ",", "dtype", ",", "batch_size", ",", "log_interval", ",", "scheduler", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "correct1", ",", "correct5", "=", "0", ",", "0", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "scheduler", ",", "CyclicLR", ")", ":", "\n", "            ", "scheduler", ".", "batch_step", "(", ")", "\n", "", "data", ",", "target", "=", "data", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", ",", "target", ".", "to", "(", "device", "=", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "corr", "=", "correct", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "correct1", "+=", "corr", "[", "0", "]", "\n", "correct5", "+=", "corr", "[", "1", "]", "\n", "\n", "if", "batch_idx", "%", "log_interval", "==", "0", ":", "\n", "            ", "tqdm", ".", "write", "(", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}. '", "\n", "'Top-1 accuracy: {:.2f}%({:.2f}%). '", "\n", "'Top-5 accuracy: {:.2f}%({:.2f}%).'", ".", "format", "(", "epoch", ",", "batch_idx", ",", "len", "(", "loader", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "loader", ")", ",", "loss", ".", "item", "(", ")", ",", "\n", "100.", "*", "corr", "[", "0", "]", "/", "batch_size", ",", "\n", "100.", "*", "correct1", "/", "(", "batch_size", "*", "(", "batch_idx", "+", "1", ")", ")", ",", "\n", "100.", "*", "corr", "[", "1", "]", "/", "batch_size", ",", "\n", "100.", "*", "correct5", "/", "(", "batch_size", "*", "(", "batch_idx", "+", "1", ")", ")", ")", ")", "\n", "", "", "return", "loss", ".", "item", "(", ")", ",", "correct1", "/", "len", "(", "loader", ".", "dataset", ")", ",", "correct5", "/", "len", "(", "loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.run.test": [[52, 74], ["model.eval", "enumerate", "len", "tqdm.tqdm.write", "tqdm.tqdm", "data.to", "target.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "criterion().item", "run.correct", "int", "len", "int", "len", "len", "len", "len", "len", "criterion"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.correct"], ["", "def", "test", "(", "model", ",", "loader", ",", "criterion", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct1", ",", "correct5", "=", "0", ",", "0", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", ",", "target", ".", "to", "(", "device", "=", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "criterion", "(", "output", ",", "target", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "corr", "=", "correct", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "", "correct1", "+=", "corr", "[", "0", "]", "\n", "correct5", "+=", "corr", "[", "1", "]", "\n", "\n", "", "test_loss", "/=", "len", "(", "loader", ")", "\n", "\n", "tqdm", ".", "write", "(", "\n", "'\\nTest set: Average loss: {:.4f}, Top1: {}/{} ({:.2f}%), '", "\n", "'Top5: {}/{} ({:.2f}%)'", ".", "format", "(", "test_loss", ",", "int", "(", "correct1", ")", ",", "len", "(", "loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct1", "/", "len", "(", "loader", ".", "dataset", ")", ",", "int", "(", "correct5", ")", ",", "\n", "len", "(", "loader", ".", "dataset", ")", ",", "100.", "*", "correct5", "/", "len", "(", "loader", ".", "dataset", ")", ")", ")", "\n", "return", "test_loss", ",", "correct1", "/", "len", "(", "loader", ".", "dataset", ")", ",", "correct5", "/", "len", "(", "loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.run.correct": [[76, 89], ["max", "output.topk", "pred.t().type_as.t().type_as", "pred.t().type_as.eq", "target.view().expand_as", "correct[].view().float().sum().item", "res.append", "pred.t().type_as.t", "target.view", "correct[].view().float().sum", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "correct", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the correct@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", ".", "type_as", "(", "target", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", ".", "item", "(", ")", "\n", "res", ".", "append", "(", "correct_k", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.run.save_checkpoint": [[91, 97], ["os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filepath", "=", "'./'", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "save_path", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "filename", ")", "\n", "best_path", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_path", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "save_path", ",", "best_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.run.find_bounds_clr": [[99, 128], ["model.train", "clr.CyclicLR", "tqdm.trange", "numpy.linspace", "matplotlib.pyplot.plot", "matplotlib.pyplot.show", "matplotlib.pyplot.savefig", "numpy.save", "len", "enumerate", "os.path.join", "os.path.join", "tqdm.tqdm", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "run.correct", "accuracy.append", "clr.CyclicLR.batch_step", "data.to", "target.to"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.train", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.correct"], ["", "", "def", "find_bounds_clr", "(", "model", ",", "loader", ",", "optimizer", ",", "criterion", ",", "device", ",", "dtype", ",", "min_lr", "=", "8e-6", ",", "max_lr", "=", "8e-5", ",", "step_size", "=", "2000", ",", "\n", "mode", "=", "'triangular'", ",", "save_path", "=", "'.'", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "correct1", ",", "correct5", "=", "0", ",", "0", "\n", "scheduler", "=", "CyclicLR", "(", "optimizer", ",", "base_lr", "=", "min_lr", ",", "max_lr", "=", "max_lr", ",", "step_size", "=", "step_size", ",", "mode", "=", "mode", ")", "\n", "epoch_count", "=", "step_size", "//", "len", "(", "loader", ")", "# Assuming step_size is multiple of batch per epoch", "\n", "accuracy", "=", "[", "]", "\n", "for", "_", "in", "trange", "(", "epoch_count", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "            ", "if", "scheduler", "is", "not", "None", ":", "\n", "                ", "scheduler", ".", "batch_step", "(", ")", "\n", "", "data", ",", "target", "=", "data", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", ",", "target", ".", "to", "(", "device", "=", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "corr", "=", "correct", "(", "output", ",", "target", ")", "\n", "accuracy", ".", "append", "(", "corr", "[", "0", "]", "/", "data", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "", "lrs", "=", "np", ".", "linspace", "(", "min_lr", ",", "max_lr", ",", "step_size", ")", "\n", "plt", ".", "plot", "(", "lrs", ",", "accuracy", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'find_bounds_clr.png'", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'acc.npy'", ")", ",", "accuracy", ")", "\n", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.imagenet_arch_evaluations.create_arch4net": [[37, 57], ["range", "len", "cfg.append", "cfg.append", "cfg.append", "cfg.append", "cfg.append", "cfg.append", "print"], "function", ["None"], ["def", "create_arch4net", "(", "bin_setting", ",", "arch_setting", ")", ":", "\n", "    ", "cfg", "=", "[", "(", "1", ",", "16", ",", "1", ",", "1", ",", "1", ",", "1", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bin_setting", ")", ")", ":", "\n", "        ", "if", "bin_setting", "[", "i", "]", "==", "1", ":", "\n", "            ", "cfg", ".", "append", "(", "(", "3", ",", "arch_setting", "[", "i", "]", "[", "0", "]", ",", "arch_setting", "[", "i", "]", "[", "1", "]", ",", "arch_setting", "[", "i", "]", "[", "2", "]", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "bin_setting", "[", "i", "]", "==", "2", ":", "\n", "            ", "cfg", ".", "append", "(", "(", "3", ",", "arch_setting", "[", "i", "]", "[", "0", "]", ",", "arch_setting", "[", "i", "]", "[", "1", "]", ",", "arch_setting", "[", "i", "]", "[", "2", "]", ",", "1", ",", "2", ")", ")", "\n", "", "elif", "bin_setting", "[", "i", "]", "==", "3", ":", "\n", "            ", "cfg", ".", "append", "(", "(", "6", ",", "arch_setting", "[", "i", "]", "[", "0", "]", ",", "arch_setting", "[", "i", "]", "[", "1", "]", ",", "arch_setting", "[", "i", "]", "[", "2", "]", ",", "2", ",", "2", ")", ")", "\n", "", "elif", "bin_setting", "[", "i", "]", "==", "4", ":", "\n", "            ", "cfg", ".", "append", "(", "(", "6", ",", "arch_setting", "[", "i", "]", "[", "0", "]", ",", "arch_setting", "[", "i", "]", "[", "1", "]", ",", "arch_setting", "[", "i", "]", "[", "2", "]", ",", "1", ",", "2", ")", ")", "\n", "", "elif", "bin_setting", "[", "i", "]", "==", "5", ":", "\n", "            ", "cfg", ".", "append", "(", "(", "6", ",", "arch_setting", "[", "i", "]", "[", "0", "]", ",", "arch_setting", "[", "i", "]", "[", "1", "]", ",", "arch_setting", "[", "i", "]", "[", "2", "]", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "bin_setting", "[", "i", "]", "==", "6", ":", "\n", "            ", "cfg", ".", "append", "(", "(", "12", ",", "arch_setting", "[", "i", "]", "[", "0", "]", ",", "arch_setting", "[", "i", "]", "[", "1", "]", ",", "arch_setting", "[", "i", "]", "[", "2", "]", ",", "2", ",", "4", ")", ")", "\n", "", "elif", "bin_setting", "[", "i", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Warnning: no block type matched!\"", ")", "\n", "", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.imagenet_arch_evaluations.main": [[58, 146], ["parser.parse_args", "print", "imagenet_arch_evaluations.create_arch4net", "RCNet", "sum", "print", "print", "print", "data.get_loaders", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.DataParallel.to", "torch.nn.CrossEntropyLoss.to", "os.path.isfile", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "run.test", "print().format", "int", "str", "l.nelement", "flops_benchmark.count_flops", "parser.parse_args.gpus.split", "ValueError", "torch.nn.DataParallel.parameters", "print", "len"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.cifar100_arch_evaluations.create_arch4net", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.data.get_loaders", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.test", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.count_flops"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "gpus", "is", "not", "None", ":", "\n", "        ", "args", ".", "gpus", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "gpus", ".", "split", "(", "','", ")", "]", "\n", "device", "=", "'cuda:'", "+", "str", "(", "args", ".", "gpus", "[", "0", "]", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "", "else", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "\n", "", "if", "args", ".", "type", "==", "'float64'", ":", "\n", "        ", "dtype", "=", "torch", ".", "float64", "\n", "", "elif", "args", ".", "type", "==", "'float32'", ":", "\n", "        ", "dtype", "=", "torch", ".", "float32", "\n", "", "elif", "args", ".", "type", "==", "'float16'", ":", "\n", "        ", "dtype", "=", "torch", ".", "float16", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong type!'", ")", "# TODO int8", "\n", "\n", "\n", "", "arch_setting", "=", "[", "(", "24", ",", "1", ",", "2", ")", ",", "\n", "(", "24", ",", "1", ",", "1", ")", ",", "\n", "(", "24", ",", "1", ",", "1", ")", ",", "\n", "(", "24", ",", "1", ",", "1", ")", ",", "\n", "(", "24", ",", "1", ",", "1", ")", ",", "\n", "(", "24", ",", "1", ",", "1", ")", ",", "\n", "(", "32", ",", "1", ",", "2", ")", ",", "\n", "(", "32", ",", "1", ",", "1", ")", ",", "\n", "(", "32", ",", "1", ",", "1", ")", ",", "\n", "(", "32", ",", "1", ",", "1", ")", ",", "\n", "(", "32", ",", "1", ",", "1", ")", ",", "\n", "(", "32", ",", "1", ",", "1", ")", ",", "\n", "(", "64", ",", "1", ",", "2", ")", ",", "\n", "(", "64", ",", "1", ",", "1", ")", ",", "\n", "(", "64", ",", "1", ",", "1", ")", ",", "\n", "(", "64", ",", "1", ",", "1", ")", ",", "\n", "(", "64", ",", "1", ",", "1", ")", ",", "\n", "(", "64", ",", "1", ",", "1", ")", ",", "\n", "(", "96", ",", "1", ",", "1", ")", ",", "\n", "(", "96", ",", "1", ",", "1", ")", ",", "\n", "(", "96", ",", "1", ",", "1", ")", ",", "\n", "(", "96", ",", "1", ",", "1", ")", ",", "\n", "(", "96", ",", "1", ",", "1", ")", ",", "\n", "(", "96", ",", "1", ",", "1", ")", ",", "\n", "(", "160", ",", "1", ",", "2", ")", ",", "\n", "(", "160", ",", "1", ",", "1", ")", ",", "\n", "(", "160", ",", "1", ",", "1", ")", ",", "\n", "(", "160", ",", "1", ",", "1", ")", ",", "\n", "(", "160", ",", "1", ",", "1", ")", ",", "\n", "(", "160", ",", "1", ",", "1", ")", ",", "\n", "(", "320", ",", "1", ",", "1", ")", ",", "\n", "(", "320", ",", "1", ",", "1", ")", ",", "\n", "(", "320", ",", "1", ",", "1", ")", ",", "\n", "(", "320", ",", "1", ",", "1", ")", ",", "\n", "(", "320", ",", "1", ",", "1", ")", ",", "\n", "(", "320", ",", "1", ",", "1", ")", "]", "\n", "\n", "print", "(", "\"Evaluate RCNet on ImageNet\"", ")", "\n", "bin_setting", "=", "[", "5", ",", "3", ",", "5", ",", "1", ",", "0", ",", "0", ",", "5", ",", "2", ",", "5", ",", "3", ",", "3", ",", "5", ",", "5", ",", "5", ",", "3", ",", "5", ",", "5", ",", "6", ",", "5", ",", "1", ",", "5", ",", "5", ",", "4", ",", "5", ",", "5", ",", "4", ",", "5", ",", "5", ",", "4", ",", "5", ",", "0", ",", "5", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "cfg4net", "=", "create_arch4net", "(", "bin_setting", ",", "arch_setting", ")", "\n", "model", "=", "RCNet", "(", "cfg4net", ")", "\n", "file_handler", "=", "RCNet", "\n", "\n", "num_parameters", "=", "sum", "(", "[", "l", ".", "nelement", "(", ")", "for", "l", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "'number of parameters: {}'", ".", "format", "(", "num_parameters", ")", ")", "\n", "print", "(", "'FLOPs: {}'", ".", "format", "(", "\n", "flops_benchmark", ".", "count_flops", "(", "file_handler", ",", "\n", "args", ".", "batch_size", "//", "len", "(", "args", ".", "gpus", ")", "if", "args", ".", "gpus", "is", "not", "None", "else", "args", ".", "batch_size", ",", "\n", "device", ",", "dtype", ",", "args", ".", "input_size", ",", "3", ",", "args", ".", "scaling", ",", "cfg4net", ")", ")", ")", "\n", "\n", "\n", "train_loader", ",", "test_loader", "=", "get_loaders", "(", "args", ".", "dataroot", ",", "args", ".", "batch_size", ",", "args", ".", "batch_size", ",", "args", ".", "input_size", ",", "\n", "args", ".", "workers", ")", "\n", "# define loss function (criterion)", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "args", ".", "gpus", "is", "not", "None", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "args", ".", "gpus", ")", "\n", "", "model", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", "\n", "criterion", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "load", ")", ":", "\n", "        ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "load", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "load", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "loss", ",", "top1", ",", "top5", "=", "test", "(", "model", ",", "test_loader", ",", "criterion", ",", "device", ",", "dtype", ")", "\n", "print", "(", "\"=> Test loss: {},  Top 1 accu: {}, Top 5 accu: {}\"", ")", ".", "format", "(", "loss", ",", "top1", ",", "top5", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.utils.get_mean_and_std": [[15, 28], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.utils.init_params": [[29, 43], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["", "def", "init_params", "(", "net", ")", ":", "\n", "    ", "'''Init layer parameters.'''", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.utils.progress_bar": [[51, 93], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "utils.format_time", "utils.format_time", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.utils.format_time", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.utils.format_time"], ["def", "progress_bar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.imagenet.utils.format_time": [[94, 125], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "", ""]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.models.rcnet_arch.ShuffleBlock.__init__": [[6, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.models.rcnet_arch.RCNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.models.rcnet_arch.ShuffleBlock.forward": [[10, 15], ["x.size", "x.view().permute().contiguous().view", "x.view().permute().contiguous", "x.view().permute", "x.view", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "int", "(", "C", "//", "g", ")", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.models.rcnet_arch.RCBlock3x3.__init__": [[18, 35], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "rcnet_arch.ShuffleBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.models.rcnet_arch.RCNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ",", "exp_group", "=", "1", ",", "pro_group", "=", "1", ")", ":", "\n", "        ", "super", "(", "RCBlock3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "exp_group", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "pro_group", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "shuffle1", "=", "ShuffleBlock", "(", "groups", "=", "pro_group", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.models.rcnet_arch.RCBlock3x3.forward": [[37, 44], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "rcnet_arch.RCBlock3x3.shuffle1", "rcnet_arch.RCBlock3x3.bn3", "rcnet_arch.RCBlock3x3.bn1", "rcnet_arch.RCBlock3x3.bn2", "rcnet_arch.RCBlock3x3.conv3", "rcnet_arch.RCBlock3x3.conv1", "rcnet_arch.RCBlock3x3.conv2", "rcnet_arch.RCBlock3x3.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "shuffle1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.models.rcnet_arch.RCNet.__init__": [[48, 65], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "layers.append", "rcnet_arch.RCBlock3x3"], "methods", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.models.rcnet_arch.RCNet.__init__"], ["\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ",", "scale", "=", "1.0", ",", "input_size", "=", "224", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "RCNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "in_planes", "=", "32", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", ",", "exp_group", ",", "pro_group", "in", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "RCBlock3x3", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ",", "exp_group", ",", "pro_group", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "\n", "", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "1280", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.models.rcnet_arch.RCNet.forward": [[66, 74], ["torch.relu", "torch.relu", "torch.relu", "rcnet_arch.RCNet.layers", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "rcnet_arch.RCNet.view", "rcnet_arch.RCNet.linear", "rcnet_arch.RCNet.bn1", "rcnet_arch.RCNet.bn2", "rcnet_arch.RCNet.size", "rcnet_arch.RCNet.conv1", "rcnet_arch.RCNet.conv2"], "methods", ["None"], ["self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "7", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.add_flops_counting_methods": [[7, 72], ["start_flops_count.__get__", "stop_flops_count.__get__", "reset_flops_count.__get__", "compute_average_flops_cost.__get__", "net_main_module.reset_flops_count", "net_main_module.apply"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.reset_flops_count"], ["def", "add_flops_counting_methods", "(", "net_main_module", ")", ":", "\n", "    ", "\"\"\"Adds flops counting functions to an existing model. After that\n    the flops count should be activated and the model should be run on an input\n    image.\n\n    Example:\n\n    fcn = add_flops_counting_methods(fcn)\n    fcn = fcn.cuda().train()\n    fcn.start_flops_count()\n\n\n    _ = fcn(batch)\n\n    fcn.compute_average_flops_cost() / 1e9 / 2 # Result in GFLOPs per image in batch\n\n    Important: dividing by 2 only works for resnet models -- see below for the details\n    of flops computation.\n\n    Attention: we are counting multiply-add as two flops in this work, because in\n    most resnet models convolutions are bias-free (BN layers act as bias there)\n    and it makes sense to count muliply and add as separate flops therefore.\n    This is why in the above example we divide by 2 in order to be consistent with\n    most modern benchmarks. For example in \"Spatially Adaptive Computatin Time for Residual\n    Networks\" by Figurnov et al multiply-add was counted as two flops.\n\n    This module computes the average flops which is necessary for dynamic networks which\n    have different number of executed layers. For static networks it is enough to run the network\n    once and get statistics (above example).\n\n    Implementation:\n    The module works by adding batch_count to the main module which tracks the sum\n    of all batch sizes that were run through the network.\n\n    Also each convolutional layer of the network tracks the overall number of flops\n    performed.\n\n    The parameters are updated with the help of registered hook-functions which\n    are being called each time the respective layer is executed.\n\n    Parameters\n    ----------\n    net_main_module : torch.nn.Module\n        Main module containing network\n\n    Returns\n    -------\n    net_main_module : torch.nn.Module\n        Updated main module with new methods/attributes that are used\n        to compute flops.\n    \"\"\"", "\n", "\n", "# adding additional methods to the existing module object,", "\n", "# this is done this way so that each function has access to self object", "\n", "net_main_module", ".", "start_flops_count", "=", "start_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "stop_flops_count", "=", "stop_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "reset_flops_count", "=", "reset_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "compute_average_flops_cost", "=", "compute_average_flops_cost", ".", "__get__", "(", "net_main_module", ")", "\n", "\n", "net_main_module", ".", "reset_flops_count", "(", ")", "\n", "\n", "# Adding varialbles necessary for masked flops computation", "\n", "net_main_module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n", "return", "net_main_module", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.compute_average_flops_cost": [[74, 93], ["flops_benchmark..modules", "isinstance"], "function", ["None"], ["", "def", "compute_average_flops_cost", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Returns current mean flops consumption per image.\n\n    \"\"\"", "\n", "\n", "batches_count", "=", "self", ".", "__batch_counter__", "\n", "\n", "flops_sum", "=", "0", "\n", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "\n", "", "", "return", "flops_sum", "/", "batches_count", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.start_flops_count": [[95, 108], ["flops_benchmark.add_batch_counter_hook_function", "flops_benchmark..apply"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.add_batch_counter_hook_function"], ["", "def", "start_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Activates the computation of mean flops consumption per image.\n    Call it before you run the network.\n\n    \"\"\"", "\n", "\n", "add_batch_counter_hook_function", "(", "self", ")", "\n", "\n", "self", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.stop_flops_count": [[110, 123], ["flops_benchmark.remove_batch_counter_hook_function", "flops_benchmark..apply"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.remove_batch_counter_hook_function"], ["", "def", "stop_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Stops computing the mean flops consumption per image.\n    Call whenever you want to pause the computation.\n\n    \"\"\"", "\n", "\n", "remove_batch_counter_hook_function", "(", "self", ")", "\n", "\n", "self", ".", "apply", "(", "remove_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.reset_flops_count": [[125, 137], ["flops_benchmark.add_batch_counter_variables_or_reset", "flops_benchmark..apply"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.add_batch_counter_variables_or_reset"], ["", "def", "reset_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n\n    Resets statistics computed so far.\n\n    \"\"\"", "\n", "\n", "add_batch_counter_variables_or_reset", "(", "self", ")", "\n", "\n", "self", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.add_flops_mask": [[139, 145], ["module.apply", "isinstance"], "function", ["None"], ["", "def", "add_flops_mask", "(", "module", ",", "mask", ")", ":", "\n", "    ", "def", "add_flops_mask_func", "(", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "module", ".", "__mask__", "=", "mask", "\n", "\n", "", "", "module", ".", "apply", "(", "add_flops_mask_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.remove_flops_mask": [[147, 149], ["module.apply"], "function", ["None"], ["", "def", "remove_flops_mask", "(", "module", ")", ":", "\n", "    ", "module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.conv_flops_counter_hook": [[154, 186], ["conv_module.__mask__.expand", "conv_module.__mask__.expand.sum"], "function", ["None"], ["", "def", "conv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "# We count multiply-add as 2 flops", "\n", "conv_per_position_flops", "=", "2", "*", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "out_channels", "/", "groups", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "output_height", "*", "output_width", "\n", "\n", "if", "conv_module", ".", "__mask__", "is", "not", "None", ":", "\n", "# (b, 1, h, w)", "\n", "        ", "flops_mask", "=", "conv_module", ".", "__mask__", ".", "expand", "(", "batch_size", ",", "1", ",", "output_height", ",", "output_width", ")", "\n", "active_elements_count", "=", "flops_mask", ".", "sum", "(", ")", "\n", "\n", "", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "bias_flops", "=", "0", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "bias_flops", "=", "out_channels", "*", "active_elements_count", "\n", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.batch_counter_hook": [[188, 195], ["None"], "function", ["None"], ["", "def", "batch_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "\n", "module", ".", "__batch_counter__", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.add_batch_counter_variables_or_reset": [[197, 199], ["None"], "function", ["None"], ["", "def", "add_batch_counter_variables_or_reset", "(", "module", ")", ":", "\n", "    ", "module", ".", "__batch_counter__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.add_batch_counter_hook_function": [[201, 207], ["hasattr", "module.register_forward_hook"], "function", ["None"], ["", "def", "add_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "return", "\n", "\n", "", "handle", "=", "module", ".", "register_forward_hook", "(", "batch_counter_hook", ")", "\n", "module", ".", "__batch_counter_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.remove_batch_counter_hook_function": [[209, 214], ["hasattr", "module.__batch_counter_handle__.remove"], "function", ["None"], ["", "def", "remove_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "module", ".", "__batch_counter_handle__", ".", "remove", "(", ")", "\n", "\n", "del", "module", ".", "__batch_counter_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.add_flops_counter_variable_or_reset": [[216, 219], ["isinstance"], "function", ["None"], ["", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.add_flops_counter_hook_function": [[221, 229], ["isinstance", "hasattr", "module.register_forward_hook"], "function", ["None"], ["", "", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "return", "\n", "\n", "", "handle", "=", "module", ".", "register_forward_hook", "(", "conv_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.remove_flops_counter_hook_function": [[231, 238], ["isinstance", "hasattr", "module.__flops_handle__.remove"], "function", ["None"], ["", "", "def", "remove_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "module", ".", "__flops_handle__", ".", "remove", "(", ")", "\n", "\n", "del", "module", ".", "__flops_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.add_flops_mask_variable_or_reset": [[244, 247], ["isinstance"], "function", ["None"], ["", "", "", "def", "add_flops_mask_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "module", ".", "__mask__", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.count_flops": [[249, 262], ["model", "flops_benchmark.add_flops_counting_methods", "net.train.to", "net.train.train", "torch.randn().to", "net.train.start_flops_count", "net.train.", "net.train.compute_average_flops_cost", "torch.randn"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.add_flops_counting_methods", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.train", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.start_flops_count", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.compute_average_flops_cost"], ["", "", "def", "count_flops", "(", "model", ",", "batch_size", ",", "device", ",", "dtype", ",", "input_size", ",", "in_channels", ",", "scale", ",", "*", "params", ")", ":", "\n", "    ", "net", "=", "model", "(", "*", "params", ",", "scale", "=", "scale", ",", "input_size", "=", "input_size", ")", "\n", "# print(net)", "\n", "net", "=", "add_flops_counting_methods", "(", "net", ")", "\n", "\n", "net", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", "\n", "net", "=", "net", ".", "train", "(", ")", "\n", "\n", "batch", "=", "torch", ".", "randn", "(", "batch_size", ",", "in_channels", ",", "input_size", ",", "input_size", ")", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", "\n", "net", ".", "start_flops_count", "(", ")", "\n", "\n", "_", "=", "net", "(", "batch", ")", "\n", "return", "net", ".", "compute_average_flops_cost", "(", ")", "/", "2", "# Result in FLOPs", "\n", "", ""]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.train": [[19, 50], ["model.train", "enumerate", "tqdm.tqdm", "isinstance", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "run.correct", "criterion.item", "scheduler.batch_step", "data.to", "target.to", "tqdm.tqdm.write", "len", "len", "len", "criterion.item", "len"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.train", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.correct"], ["def", "train", "(", "model", ",", "loader", ",", "epoch", ",", "optimizer", ",", "criterion", ",", "device", ",", "dtype", ",", "batch_size", ",", "log_interval", ",", "scheduler", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "correct1", ",", "correct5", "=", "0", ",", "0", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "scheduler", ",", "CyclicLR", ")", ":", "\n", "            ", "scheduler", ".", "batch_step", "(", ")", "\n", "", "data", ",", "target", "=", "data", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", ",", "target", ".", "to", "(", "device", "=", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "corr", "=", "correct", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "correct1", "+=", "corr", "[", "0", "]", "\n", "correct5", "+=", "corr", "[", "1", "]", "\n", "\n", "if", "batch_idx", "%", "log_interval", "==", "0", ":", "\n", "            ", "tqdm", ".", "write", "(", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}. '", "\n", "'Top-1 accuracy: {:.2f}%({:.2f}%). '", "\n", "'Top-5 accuracy: {:.2f}%({:.2f}%).'", ".", "format", "(", "epoch", ",", "batch_idx", ",", "len", "(", "loader", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "loader", ")", ",", "loss", ".", "item", "(", ")", ",", "\n", "100.", "*", "corr", "[", "0", "]", "/", "batch_size", ",", "\n", "100.", "*", "correct1", "/", "(", "batch_size", "*", "(", "batch_idx", "+", "1", ")", ")", ",", "\n", "100.", "*", "corr", "[", "1", "]", "/", "batch_size", ",", "\n", "100.", "*", "correct5", "/", "(", "batch_size", "*", "(", "batch_idx", "+", "1", ")", ")", ")", ")", "\n", "", "", "return", "loss", ".", "item", "(", ")", ",", "correct1", "/", "len", "(", "loader", ".", "dataset", ")", ",", "correct5", "/", "len", "(", "loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.test": [[52, 74], ["model.eval", "enumerate", "len", "tqdm.tqdm.write", "tqdm.tqdm", "data.to", "target.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "criterion().item", "run.correct", "int", "len", "int", "len", "len", "len", "len", "len", "criterion"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.correct"], ["", "def", "test", "(", "model", ",", "loader", ",", "criterion", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct1", ",", "correct5", "=", "0", ",", "0", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", ",", "target", ".", "to", "(", "device", "=", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "criterion", "(", "output", ",", "target", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "corr", "=", "correct", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "", "correct1", "+=", "corr", "[", "0", "]", "\n", "correct5", "+=", "corr", "[", "1", "]", "\n", "\n", "", "test_loss", "/=", "len", "(", "loader", ")", "\n", "\n", "tqdm", ".", "write", "(", "\n", "'\\nTest set: Average loss: {:.4f}, Top1: {}/{} ({:.2f}%), '", "\n", "'Top5: {}/{} ({:.2f}%)'", ".", "format", "(", "test_loss", ",", "int", "(", "correct1", ")", ",", "len", "(", "loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct1", "/", "len", "(", "loader", ".", "dataset", ")", ",", "int", "(", "correct5", ")", ",", "\n", "len", "(", "loader", ".", "dataset", ")", ",", "100.", "*", "correct5", "/", "len", "(", "loader", ".", "dataset", ")", ")", ")", "\n", "return", "test_loss", ",", "correct1", "/", "len", "(", "loader", ".", "dataset", ")", ",", "correct5", "/", "len", "(", "loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.correct": [[76, 89], ["max", "output.topk", "pred.t().type_as.t().type_as", "pred.t().type_as.eq", "target.view().expand_as", "correct[].view().float().sum().item", "res.append", "pred.t().type_as.t", "target.view", "correct[].view().float().sum", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "correct", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the correct@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", ".", "type_as", "(", "target", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", ".", "item", "(", ")", "\n", "res", ".", "append", "(", "correct_k", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.save_checkpoint": [[91, 97], ["os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filepath", "=", "'./'", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "save_path", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "filename", ")", "\n", "best_path", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_path", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "save_path", ",", "best_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.find_bounds_clr": [[99, 128], ["model.train", "clr.CyclicLR", "tqdm.trange", "numpy.linspace", "matplotlib.pyplot.plot", "matplotlib.pyplot.show", "matplotlib.pyplot.savefig", "numpy.save", "len", "enumerate", "os.path.join", "os.path.join", "tqdm.tqdm", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "run.correct", "accuracy.append", "clr.CyclicLR.batch_step", "data.to", "target.to"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.train", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.correct"], ["", "", "def", "find_bounds_clr", "(", "model", ",", "loader", ",", "optimizer", ",", "criterion", ",", "device", ",", "dtype", ",", "min_lr", "=", "8e-6", ",", "max_lr", "=", "8e-5", ",", "step_size", "=", "2000", ",", "\n", "mode", "=", "'triangular'", ",", "save_path", "=", "'.'", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "correct1", ",", "correct5", "=", "0", ",", "0", "\n", "scheduler", "=", "CyclicLR", "(", "optimizer", ",", "base_lr", "=", "min_lr", ",", "max_lr", "=", "max_lr", ",", "step_size", "=", "step_size", ",", "mode", "=", "mode", ")", "\n", "epoch_count", "=", "step_size", "//", "len", "(", "loader", ")", "# Assuming step_size is multiple of batch per epoch", "\n", "accuracy", "=", "[", "]", "\n", "for", "_", "in", "trange", "(", "epoch_count", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "            ", "if", "scheduler", "is", "not", "None", ":", "\n", "                ", "scheduler", ".", "batch_step", "(", ")", "\n", "", "data", ",", "target", "=", "data", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", ",", "target", ".", "to", "(", "device", "=", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "corr", "=", "correct", "(", "output", ",", "target", ")", "\n", "accuracy", ".", "append", "(", "corr", "[", "0", "]", "/", "data", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "", "lrs", "=", "np", ".", "linspace", "(", "min_lr", ",", "max_lr", ",", "step_size", ")", "\n", "plt", ".", "plot", "(", "lrs", ",", "accuracy", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'find_bounds_clr.png'", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'acc.npy'", ")", ",", "accuracy", ")", "\n", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.cifar100_arch_evaluations.create_arch4net": [[48, 68], ["range", "len", "cfg.append", "cfg.append", "cfg.append", "cfg.append", "cfg.append", "cfg.append", "print"], "function", ["None"], ["def", "create_arch4net", "(", "bin_setting", ",", "arch_setting", ")", ":", "\n", "    ", "cfg", "=", "[", "(", "1", ",", "16", ",", "1", ",", "1", ",", "1", ",", "1", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bin_setting", ")", ")", ":", "\n", "        ", "if", "bin_setting", "[", "i", "]", "==", "1", ":", "\n", "            ", "cfg", ".", "append", "(", "(", "3", ",", "arch_setting", "[", "i", "]", "[", "0", "]", ",", "arch_setting", "[", "i", "]", "[", "1", "]", ",", "arch_setting", "[", "i", "]", "[", "2", "]", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "bin_setting", "[", "i", "]", "==", "2", ":", "\n", "            ", "cfg", ".", "append", "(", "(", "3", ",", "arch_setting", "[", "i", "]", "[", "0", "]", ",", "arch_setting", "[", "i", "]", "[", "1", "]", ",", "arch_setting", "[", "i", "]", "[", "2", "]", ",", "1", ",", "2", ")", ")", "\n", "", "elif", "bin_setting", "[", "i", "]", "==", "3", ":", "\n", "            ", "cfg", ".", "append", "(", "(", "6", ",", "arch_setting", "[", "i", "]", "[", "0", "]", ",", "arch_setting", "[", "i", "]", "[", "1", "]", ",", "arch_setting", "[", "i", "]", "[", "2", "]", ",", "2", ",", "2", ")", ")", "\n", "", "elif", "bin_setting", "[", "i", "]", "==", "4", ":", "\n", "            ", "cfg", ".", "append", "(", "(", "6", ",", "arch_setting", "[", "i", "]", "[", "0", "]", ",", "arch_setting", "[", "i", "]", "[", "1", "]", ",", "arch_setting", "[", "i", "]", "[", "2", "]", ",", "1", ",", "2", ")", ")", "\n", "", "elif", "bin_setting", "[", "i", "]", "==", "5", ":", "\n", "            ", "cfg", ".", "append", "(", "(", "6", ",", "arch_setting", "[", "i", "]", "[", "0", "]", ",", "arch_setting", "[", "i", "]", "[", "1", "]", ",", "arch_setting", "[", "i", "]", "[", "2", "]", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "bin_setting", "[", "i", "]", "==", "6", ":", "\n", "            ", "cfg", ".", "append", "(", "(", "12", ",", "arch_setting", "[", "i", "]", "[", "0", "]", ",", "arch_setting", "[", "i", "]", "[", "1", "]", ",", "arch_setting", "[", "i", "]", "[", "2", "]", ",", "2", ",", "4", ")", ")", "\n", "", "elif", "bin_setting", "[", "i", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Warnning: no block type matched!\"", ")", "\n", "", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.cifar100_arch_evaluations.main": [[69, 161], ["parser.parse_args", "print", "cifar100_arch_evaluations.create_arch4net", "RCNet", "sum", "print", "print", "print", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.DataParallel.to", "torch.nn.CrossEntropyLoss.to", "os.path.isfile", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "run.test", "print().format", "int", "str", "l.nelement", "flops_benchmark.count_flops", "parser.parse_args.gpus.split", "ValueError", "torch.nn.DataParallel.parameters", "print", "len"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.cifar100_arch_evaluations.create_arch4net", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.run.test", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.flops_benchmark.count_flops"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "gpus", "is", "not", "None", ":", "\n", "        ", "args", ".", "gpus", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "gpus", ".", "split", "(", "','", ")", "]", "\n", "device", "=", "'cuda:'", "+", "str", "(", "args", ".", "gpus", "[", "0", "]", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "", "else", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "\n", "", "if", "args", ".", "type", "==", "'float64'", ":", "\n", "        ", "dtype", "=", "torch", ".", "float64", "\n", "", "elif", "args", ".", "type", "==", "'float32'", ":", "\n", "        ", "dtype", "=", "torch", ".", "float32", "\n", "", "elif", "args", ".", "type", "==", "'float16'", ":", "\n", "        ", "dtype", "=", "torch", ".", "float16", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong type!'", ")", "# TODO int8", "\n", "\n", "\n", "", "arch_setting", "=", "[", "(", "24", ",", "1", ",", "1", ")", ",", "\n", "(", "24", ",", "1", ",", "1", ")", ",", "\n", "(", "24", ",", "1", ",", "1", ")", ",", "\n", "(", "24", ",", "1", ",", "1", ")", ",", "\n", "(", "24", ",", "1", ",", "1", ")", ",", "\n", "(", "24", ",", "1", ",", "1", ")", ",", "\n", "(", "32", ",", "1", ",", "2", ")", ",", "\n", "(", "32", ",", "1", ",", "1", ")", ",", "\n", "(", "32", ",", "1", ",", "1", ")", ",", "\n", "(", "32", ",", "1", ",", "1", ")", ",", "\n", "(", "32", ",", "1", ",", "1", ")", ",", "\n", "(", "32", ",", "1", ",", "1", ")", ",", "\n", "(", "64", ",", "1", ",", "2", ")", ",", "\n", "(", "64", ",", "1", ",", "1", ")", ",", "\n", "(", "64", ",", "1", ",", "1", ")", ",", "\n", "(", "64", ",", "1", ",", "1", ")", ",", "\n", "(", "64", ",", "1", ",", "1", ")", ",", "\n", "(", "64", ",", "1", ",", "1", ")", ",", "\n", "(", "96", ",", "1", ",", "1", ")", ",", "\n", "(", "96", ",", "1", ",", "1", ")", ",", "\n", "(", "96", ",", "1", ",", "1", ")", ",", "\n", "(", "96", ",", "1", ",", "1", ")", ",", "\n", "(", "96", ",", "1", ",", "1", ")", ",", "\n", "(", "96", ",", "1", ",", "1", ")", ",", "\n", "(", "160", ",", "1", ",", "2", ")", ",", "\n", "(", "160", ",", "1", ",", "1", ")", ",", "\n", "(", "160", ",", "1", ",", "1", ")", ",", "\n", "(", "160", ",", "1", ",", "1", ")", ",", "\n", "(", "160", ",", "1", ",", "1", ")", ",", "\n", "(", "160", ",", "1", ",", "1", ")", ",", "\n", "(", "320", ",", "1", ",", "1", ")", ",", "\n", "(", "320", ",", "1", ",", "1", ")", ",", "\n", "(", "320", ",", "1", ",", "1", ")", ",", "\n", "(", "320", ",", "1", ",", "1", ")", ",", "\n", "(", "320", ",", "1", ",", "1", ")", ",", "\n", "(", "320", ",", "1", ",", "1", ")", "]", "\n", "\n", "\n", "print", "(", "\"Evaluate RCNet on CIFAR100\"", ")", "\n", "bin_setting", "=", "[", "5", ",", "3", ",", "0", ",", "1", ",", "0", ",", "0", ",", "5", ",", "2", ",", "0", ",", "3", ",", "3", ",", "5", ",", "5", ",", "5", ",", "3", ",", "3", ",", "5", ",", "6", ",", "5", ",", "1", ",", "6", ",", "5", ",", "4", ",", "6", ",", "5", ",", "4", ",", "6", ",", "5", ",", "4", ",", "1", ",", "5", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "cfg4net", "=", "create_arch4net", "(", "bin_setting", ",", "arch_setting", ")", "\n", "model", "=", "RCNet", "(", "cfg4net", ")", "\n", "file_handler", "=", "RCNet", "\n", "\n", "num_parameters", "=", "sum", "(", "[", "l", ".", "nelement", "(", ")", "for", "l", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "'number of parameters: {}'", ".", "format", "(", "num_parameters", ")", ")", "\n", "print", "(", "'FLOPs: {}'", ".", "format", "(", "\n", "flops_benchmark", ".", "count_flops", "(", "file_handler", ",", "\n", "args", ".", "batch_size", "//", "len", "(", "args", ".", "gpus", ")", "if", "args", ".", "gpus", "is", "not", "None", "else", "args", ".", "batch_size", ",", "\n", "device", ",", "dtype", ",", "args", ".", "input_size", ",", "3", ",", "args", ".", "scaling", ",", "cfg4net", ")", ")", ")", "\n", "\n", "\n", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "# define loss function (criterion)", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "args", ".", "gpus", "is", "not", "None", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "args", ".", "gpus", ")", "\n", "", "model", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", "\n", "criterion", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", "\n", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "load", ")", ":", "\n", "        ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "load", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "load", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "loss", ",", "top1", ",", "top5", "=", "test", "(", "model", ",", "test_loader", ",", "criterion", ",", "device", ",", "dtype", ")", "\n", "print", "(", "\"=> Test loss: {},  Top 1 accu: {}, Top 5 accu: {}\"", ")", ".", "format", "(", "loss", ",", "top1", ",", "top5", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.utils.get_mean_and_std": [[15, 28], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.utils.init_params": [[29, 43], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["", "def", "init_params", "(", "net", ")", ":", "\n", "    ", "'''Init layer parameters.'''", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.utils.progress_bar": [[51, 93], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "utils.format_time", "utils.format_time", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.utils.format_time", "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.utils.format_time"], ["def", "progress_bar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yyxiongzju_RCNet.cifar100.utils.format_time": [[94, 125], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "", ""]]}