{"home.repos.pwc.inspect_result.maclll_selc.utils.utils.gen_bar_updater": [[14, 22], ["pbar.update"], "function", ["None"], ["def", "gen_bar_updater", "(", "pbar", ")", ":", "\n", "    ", "def", "bar_update", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "        ", "if", "pbar", ".", "total", "is", "None", "and", "total_size", ":", "\n", "            ", "pbar", ".", "total", "=", "total_size", "\n", "", "progress_bytes", "=", "count", "*", "block_size", "\n", "pbar", ".", "update", "(", "progress_bytes", "-", "pbar", ".", "n", ")", "\n", "\n", "", "return", "bar_update", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.utils.utils.check_integrity": [[24, 38], ["hashlib.md5", "hashlib.md5.hexdigest", "os.path.isfile", "os.path.isfile", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["None"], ["", "def", "check_integrity", "(", "fpath", ",", "md5", "=", "None", ")", ":", "\n", "    ", "if", "md5", "is", "None", ":", "\n", "        ", "return", "True", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "\n", "        ", "return", "False", "\n", "", "md5o", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "f", ":", "\n", "# read in 1MB chunks", "\n", "        ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "1024", "*", "1024", ")", ",", "b''", ")", ":", "\n", "            ", "md5o", ".", "update", "(", "chunk", ")", "\n", "", "", "md5c", "=", "md5o", ".", "hexdigest", "(", ")", "\n", "if", "md5c", "!=", "md5", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.utils.utils.makedir_exist_ok": [[40, 51], ["os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "makedir_exist_ok", "(", "dirpath", ")", ":", "\n", "    ", "\"\"\"\n    Python2 support for os.makedirs(.., exist_ok=True)\n    \"\"\"", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirpath", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.utils.utils.download_url": [[53, 89], ["os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "utils.makedir_exist_ok", "os.path.basename", "os.path.basename", "os.path.isfile", "os.path.isfile", "utils.check_integrity", "print", "print", "urllib.request.urlretrieve", "utils.gen_bar_updater", "url.replace.replace", "print", "urllib.request.urlretrieve", "tqdm.tqdm", "utils.gen_bar_updater", "tqdm.tqdm"], "function", ["home.repos.pwc.inspect_result.maclll_selc.utils.utils.makedir_exist_ok", "home.repos.pwc.inspect_result.maclll_selc.utils.utils.check_integrity", "home.repos.pwc.inspect_result.maclll_selc.utils.utils.gen_bar_updater", "home.repos.pwc.inspect_result.maclll_selc.utils.utils.gen_bar_updater"], ["", "", "", "def", "download_url", "(", "url", ",", "root", ",", "filename", "=", "None", ",", "md5", "=", "None", ")", ":", "\n", "    ", "\"\"\"Download a file from a url and place it in root.\n\n    Args:\n        url (str): URL to download file from\n        root (str): Directory to place downloaded file in\n        filename (str): Name to save the file under. If None, use the basename of the URL\n        md5 (str): MD5 checksum of the download. If None, do not check\n    \"\"\"", "\n", "from", "six", ".", "moves", "import", "urllib", "\n", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "if", "not", "filename", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "basename", "(", "url", ")", "\n", "", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "\n", "makedir_exist_ok", "(", "root", ")", "\n", "\n", "# downloads file", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fpath", ")", "and", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "        ", "print", "(", "'Using downloaded and verified file: '", "+", "fpath", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "'Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "url", ",", "fpath", ",", "\n", "reporthook", "=", "gen_bar_updater", "(", "tqdm", "(", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ")", ")", "\n", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "if", "url", "[", ":", "5", "]", "==", "'https'", ":", "\n", "                ", "url", "=", "url", ".", "replace", "(", "'https:'", ",", "'http:'", ")", "\n", "print", "(", "'Failed download. Trying https -> http instead.'", "\n", "' Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "url", ",", "fpath", ",", "\n", "reporthook", "=", "gen_bar_updater", "(", "tqdm", "(", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.utils.utils.list_dir": [[92, 112], ["os.path.expanduser", "os.path.expanduser", "list", "filter", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isdir", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "", "def", "list_dir", "(", "root", ",", "prefix", "=", "False", ")", ":", "\n", "    ", "\"\"\"List all directories at a given root\n\n    Args:\n        root (str): Path to directory whose folders need to be listed\n        prefix (bool, optional): If true, prepends the path to each result, otherwise\n            only returns the name of the directories found\n    \"\"\"", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "directories", "=", "list", "(", "\n", "filter", "(", "\n", "lambda", "p", ":", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "p", ")", ")", ",", "\n", "os", ".", "listdir", "(", "root", ")", "\n", ")", "\n", ")", "\n", "\n", "if", "prefix", "is", "True", ":", "\n", "        ", "directories", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "d", ")", "for", "d", "in", "directories", "]", "\n", "\n", "", "return", "directories", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.utils.utils.list_files": [[114, 136], ["os.path.expanduser", "os.path.expanduser", "list", "filter", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "p.endswith", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "list_files", "(", "root", ",", "suffix", ",", "prefix", "=", "False", ")", ":", "\n", "    ", "\"\"\"List all files ending with a suffix at a given root\n\n    Args:\n        root (str): Path to directory whose folders need to be listed\n        suffix (str or tuple): Suffix of the files to match, e.g. '.png' or ('.jpg', '.png').\n            It uses the Python \"str.endswith\" method and is passed directly\n        prefix (bool, optional): If true, prepends the path to each result, otherwise\n            only returns the name of the files found\n    \"\"\"", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "files", "=", "list", "(", "\n", "filter", "(", "\n", "lambda", "p", ":", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "root", ",", "p", ")", ")", "and", "p", ".", "endswith", "(", "suffix", ")", ",", "\n", "os", ".", "listdir", "(", "root", ")", "\n", ")", "\n", ")", "\n", "\n", "if", "prefix", "is", "True", ":", "\n", "        ", "files", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "d", ")", "for", "d", "in", "files", "]", "\n", "\n", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.utils.utils.check_folder": [[138, 142], ["os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "check_folder", "(", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "return", "save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.utils.utils.init_fn_": [[145, 147], ["numpy.random.seed"], "function", ["None"], ["", "def", "init_fn_", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "77", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.utils.utils.label_noise": [[149, 221], ["numpy.array", "len", "print", "torch.tensor().clone", "torch.tensor().clone", "torch.tensor().clone", "numpy.unique", "range", "print", "eta.topk", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "print", "eta.topk", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "print", "eta.topk", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "len", "len", "numpy.maximum", "numpy.random.binomial", "len", "numpy.random.binomial", "len", "numpy.random.binomial", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.abs", "numpy.abs", "numpy.random.binomial", "float", "numpy.abs", "len", "numpy.abs"], "function", ["None"], ["", "def", "label_noise", "(", "dataset", ",", "eta", ",", "type", ",", "factor", "=", "1.2", ")", ":", "\n", "\n", "    ", "count", "=", "0", "\n", "y_train", "=", "np", ".", "array", "(", "torch", ".", "tensor", "(", "dataset", ".", "targets", ")", ".", "clone", "(", ")", ")", "\n", "classes", "=", "len", "(", "np", ".", "unique", "(", "y_train", ")", ")", "\n", "\n", "if", "classes", "==", "2", ":", "\n", "        ", "eta_u", "=", "eta", "[", ":", ",", "1", "]", "\n", "if", "type", "==", "0", ":", "\n", "            ", "f_us", "=", "2", "*", "eta_u", "*", "(", "eta_u", "-", "1", "/", "2", ")", "**", "2", "\n", "", "if", "type", "==", "1", ":", "\n", "            ", "f_us", "=", "(", "eta_u", ">=", "1", "/", "2", ")", "*", "(", "1", "-", "eta_u", ")", "+", "(", "eta_u", "<", "1", "/", "2", ")", "*", "eta_u", "\n", "", "if", "type", "==", "2", ":", "\n", "            ", "f_us", "=", "-", "2", "*", "(", "eta_u", "-", "1", "/", "2", ")", "**", "2", "+", "1", "/", "2", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "y_train", ")", ")", ":", "\n", "            ", "if", "y_train", "[", "i", "]", "==", "1", ":", "\n", "                ", "y_train", "[", "i", "]", "=", "torch", ".", "tensor", "(", "np", ".", "random", ".", "binomial", "(", "1", ",", "1", "-", "f_us", "[", "i", "]", ",", "1", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "y_train", "[", "i", "]", "==", "0", ":", "\n", "                    ", "count", "+=", "1", "\n", "\n", "", "", "", "", "if", "classes", ">", "2", "and", "type", "==", "0", ":", "\n", "        ", "print", "(", "\">> Using type-I noise <<\"", ")", "\n", "temp", "=", "eta", ".", "topk", "(", "2", ")", "\n", "eta_u", "=", "np", ".", "array", "(", "temp", "[", "0", "]", "[", ":", ",", "0", "]", ")", "\n", "eta_s", "=", "np", ".", "array", "(", "temp", "[", "0", "]", "[", ":", ",", "1", "]", ")", "\n", "u", "=", "np", ".", "array", "(", "temp", "[", "1", "]", "[", ":", ",", "0", "]", ")", "\n", "s", "=", "np", ".", "array", "(", "temp", "[", "1", "]", "[", ":", ",", "1", "]", ")", "\n", "f_us", "=", "-", "(", "1", "/", "2", ")", "*", "(", "eta_u", "-", "eta_s", ")", "**", "2", "+", "1", "/", "2", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "y_train", ")", ")", ":", "\n", "            ", "noise_level", "=", "np", ".", "maximum", "(", "(", "1", "-", "f_us", ")", ",", "0.5", ")", "\n", "noise_ind", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "noise_level", "[", "i", "]", "/", "factor", ",", "1", ")", "\n", "y_train", "[", "i", "]", "=", "noise_ind", "*", "u", "[", "i", "]", "+", "(", "1", "-", "noise_ind", ")", "*", "s", "[", "i", "]", "\n", "if", "not", "y_train", "[", "i", "]", "==", "dataset", ".", "targets", "[", "i", "]", ":", "\n", "                ", "count", "+=", "1", "\n", "\n", "", "", "", "if", "classes", ">", "2", "and", "type", "==", "1", ":", "\n", "        ", "print", "(", "\">> Using type-II noise <<\"", ")", "\n", "temp", "=", "eta", ".", "topk", "(", "2", ")", "\n", "eta_u", "=", "np", ".", "array", "(", "temp", "[", "0", "]", "[", ":", ",", "0", "]", ")", "\n", "eta_s", "=", "np", ".", "array", "(", "temp", "[", "0", "]", "[", ":", ",", "1", "]", ")", "\n", "u", "=", "np", ".", "array", "(", "temp", "[", "1", "]", "[", ":", ",", "0", "]", ")", "\n", "s", "=", "np", ".", "array", "(", "temp", "[", "1", "]", "[", ":", ",", "1", "]", ")", "\n", "f_us", "=", "1", "-", "np", ".", "abs", "(", "eta_u", "-", "eta_s", ")", "**", "3", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "y_train", ")", ")", ":", "\n", "            ", "noise_level", "=", "1", "-", "f_us", "\n", "noise_ind", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "noise_level", "[", "i", "]", "/", "factor", ",", "1", ")", "\n", "y_train", "[", "i", "]", "=", "noise_ind", "*", "u", "[", "i", "]", "+", "(", "1", "-", "noise_ind", ")", "*", "s", "[", "i", "]", "\n", "if", "not", "y_train", "[", "i", "]", "==", "dataset", ".", "targets", "[", "i", "]", ":", "\n", "                ", "count", "+=", "1", "\n", "\n", "", "", "", "if", "classes", ">", "2", "and", "type", "==", "2", ":", "\n", "        ", "print", "(", "\">> Using type-III noise <<\"", ")", "\n", "temp", "=", "eta", ".", "topk", "(", "2", ")", "\n", "eta_u", "=", "np", ".", "array", "(", "temp", "[", "0", "]", "[", ":", ",", "0", "]", ")", "\n", "eta_s", "=", "np", ".", "array", "(", "temp", "[", "0", "]", "[", ":", ",", "1", "]", ")", "\n", "u", "=", "np", ".", "array", "(", "temp", "[", "1", "]", "[", ":", ",", "0", "]", ")", "\n", "s", "=", "np", ".", "array", "(", "temp", "[", "1", "]", "[", ":", ",", "1", "]", ")", "\n", "f_us", "=", "1", "-", "(", "1", "/", "3", ")", "*", "np", ".", "abs", "(", "eta_u", "-", "eta_s", ")", "**", "3", "-", "(", "1", "/", "3", ")", "*", "np", ".", "abs", "(", "eta_u", "-", "eta_s", ")", "**", "2", "-", "(", "1", "/", "3", ")", "*", "np", ".", "abs", "(", "eta_u", "-", "eta_s", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "y_train", ")", ")", ":", "\n", "            ", "noise_level", "=", "1", "-", "f_us", "\n", "noise_ind", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "noise_level", "[", "i", "]", "/", "factor", ",", "1", ")", "\n", "y_train", "[", "i", "]", "=", "noise_ind", "*", "u", "[", "i", "]", "+", "(", "1", "-", "noise_ind", ")", "*", "s", "[", "i", "]", "\n", "if", "not", "y_train", "[", "i", "]", "==", "dataset", ".", "targets", "[", "i", "]", ":", "\n", "                ", "count", "+=", "1", "\n", "\n", "", "", "", "print", "(", "\"Corrupted Size {} | Noisy Level {:.3f}%\"", ".", "format", "(", "count", ",", "count", "/", "float", "(", "len", "(", "y_train", ")", ")", "*", "100", ")", ")", "\n", "\n", "return", "y_train", ",", "f_us", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.utils.utils.eta_approximation": [[223, 289], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "f.parameters", "f.train", "enumerate", "print", "torch.optim.SGD.zero_grad", "f", "torch.nn.CrossEntropyLoss.", "criterion.backward", "torch.optim.SGD.step", "criterion.item", "features.size", "f.max", "predicted.eq().sum().item", "f.eval", "enumerate", "print", "features.to", "labels.to", "torch.softmax", "f", "torch.nn.CrossEntropyLoss.", "criterion.item", "features.size", "f.max", "predicted.eq().sum().item", "predicted.eq().sum", "f.detach().cpu", "features.to", "labels.to", "predicted.eq().sum", "predicted.eq", "f.detach", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_Clothing1M.train"], ["", "def", "eta_approximation", "(", "approximation_args", ")", ":", "\n", "# initialization", "\n", "    ", "train_loader", "=", "approximation_args", "[", "'train_loader'", "]", "\n", "test_loader", "=", "approximation_args", "[", "'test_loader'", "]", "\n", "f", "=", "approximation_args", "[", "'f'", "]", "\n", "n", "=", "approximation_args", "[", "'n'", "]", "\n", "output_dim", "=", "approximation_args", "[", "'output_dim'", "]", "\n", "device", "=", "approximation_args", "[", "'device'", "]", "\n", "n_epochs", "=", "approximation_args", "[", "'n_epochs'", "]", "\n", "lr", "=", "approximation_args", "[", "'lr'", "]", "\n", "\n", "eta", "=", "torch", ".", "zeros", "(", "[", "n", ",", "output_dim", "]", ")", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "f", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ",", "weight_decay", "=", "5e-4", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "n_epochs", ")", ":", "\n", "        ", "train_loss", "=", "0", "\n", "test_loss", "=", "0", "\n", "train_correct", "=", "0", "\n", "test_correct", "=", "0", "\n", "train_total", "=", "0", "\n", "test_total", "=", "0", "\n", "\n", "f", ".", "train", "(", ")", "\n", "for", "_", ",", "(", "features", ",", "labels", ",", "softlabels", ",", "indices", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "if", "features", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "continue", "\n", "\n", "", "features", ",", "labels", "=", "features", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "f", "(", "features", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "train_total", "+=", "features", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "train_correct", "+=", "predicted", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "epoch", "==", "n_epochs", "-", "1", ":", "\n", "                ", "eta", "[", "indices", "]", "=", "F", ".", "softmax", "(", "outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "train_acc", "=", "train_correct", "/", "train_total", "*", "100", "\n", "print", "(", "\"Epoch [{}|{}] \\t Train Acc {:.3f}\"", ".", "format", "(", "epoch", "+", "1", ",", "n_epochs", ",", "train_acc", ")", ")", "\n", "\n", "if", "epoch", "==", "n_epochs", "-", "1", ":", "\n", "            ", "f", ".", "eval", "(", ")", "\n", "for", "_", ",", "(", "features", ",", "labels", ",", "softlabels", ",", "indices", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "                ", "if", "features", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "features", ",", "labels", "=", "features", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "outputs", "=", "f", "(", "features", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "test_total", "+=", "features", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "test_correct", "+=", "predicted", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "test_acc", "=", "test_correct", "/", "test_total", "*", "100", "\n", "print", "(", "\"Final Test Acc {:.3f}\"", ".", "format", "(", "test_acc", ")", ")", "\n", "\n", "", "", "return", "eta", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.utils.utils.lrt_correction": [[291, 319], ["torch.tensor().clone", "torch.tensor().clone", "torch.tensor().clone", "len", "f_x.argmax", "range", "range", "f_x.max", "len", "LR.append", "int", "min", "termcolor.cprint", "torch.tensor", "torch.tensor", "torch.tensor", "float", "len", "int"], "function", ["None"], ["", "def", "lrt_correction", "(", "y_tilde", ",", "f_x", ",", "current_delta", "=", "0.3", ",", "delta_increment", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"\n    Label correction using likelihood ratio test. \n    In effect, it gradually decreases the threshold according to Algorithm 1.\n    \n    current_delta: The initial threshold $\\theta$\n    delta_increment: The step size, corresponding to the $\\beta$ in Algorithm 1.\n    \"\"\"", "\n", "corrected_count", "=", "0", "\n", "y_noise", "=", "torch", ".", "tensor", "(", "y_tilde", ")", ".", "clone", "(", ")", "\n", "n", "=", "len", "(", "y_noise", ")", "\n", "f_m", "=", "f_x", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "y_mle", "=", "f_x", ".", "argmax", "(", "1", ")", "\n", "LR", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "y_noise", ")", ")", ":", "\n", "        ", "LR", ".", "append", "(", "float", "(", "f_x", "[", "i", "]", "[", "int", "(", "y_noise", "[", "i", "]", ")", "]", "/", "f_m", "[", "i", "]", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "int", "(", "len", "(", "y_noise", ")", ")", ")", ":", "\n", "        ", "if", "LR", "[", "i", "]", "<", "current_delta", ":", "\n", "            ", "y_noise", "[", "i", "]", "=", "y_mle", "[", "i", "]", "\n", "corrected_count", "+=", "1", "\n", "\n", "", "", "if", "corrected_count", "<", "0.001", "*", "n", ":", "\n", "        ", "current_delta", "+=", "delta_increment", "\n", "current_delta", "=", "min", "(", "current_delta", ",", "0.9", ")", "\n", "cprint", "(", "\"Update Critical Value -> {}\"", ".", "format", "(", "current_delta", ")", ",", "\"red\"", ")", "\n", "\n", "", "return", "y_noise", ",", "current_delta", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.utils.utils.prob_correction": [[321, 361], ["numpy.random.RandomState", "f_x.cpu().numpy.cpu().numpy", "range", "scipy.special.softmax", "f_x.cpu().numpy.cpu", "numpy.argsort", "numpy.sum", "np.random.RandomState.multinomial", "numpy.where"], "function", ["None"], ["", "def", "prob_correction", "(", "y_noise", ",", "f_x", ",", "random_state", "=", "0", ",", "current_delta", "=", "0.3", ",", "delta_increment", "=", "0.1", ",", "thd", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"\n    Correct the noisy labels in a probabilistic manner.\n\n    f_x: numpy array, [data_num, category_num]\n    current_delta: The initial threshold $\\theta$\n    delta_increment: The step size, corresponding to the $\\beta$ in Algorithm 1.\n    thd: confidence threshold. If the predicted confidence exceeds this threshold, we use label correction based on likelihood ratio test.\n        Otherwise, we use probabilistic label correction. \n    \"\"\"", "\n", "flipper", "=", "np", ".", "random", ".", "RandomState", "(", "random_state", ")", "\n", "f_x", "=", "f_x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "correction_count", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "f_x", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "cur_prob_distri", "=", "f_x", "[", "i", "]", "\n", "cur_prob_distri", "=", "softmax", "(", "cur_prob_distri", ")", "\n", "\n", "top_k_idx", "=", "np", ".", "argsort", "(", "cur_prob_distri", ")", "[", "-", "1", ":", "]", "\n", "top_probs", "=", "cur_prob_distri", "[", "top_k_idx", "]", "\n", "\n", "if", "top_probs", "[", "-", "1", "]", ">=", "thd", ":", "# only flip to the category with max probability", "\n", "            ", "if", "cur_prob_distri", "[", "y_noise", "[", "i", "]", "]", "/", "top_probs", "[", "-", "1", "]", "<", "current_delta", ":", "\n", "                ", "new_label", "=", "top_k_idx", "[", "-", "1", "]", "\n", "correction_count", "+=", "1", "\n", "\n", "y_noise", "[", "i", "]", "=", "new_label", "\n", "", "", "else", ":", "\n", "            ", "top_probs", "=", "top_probs", "/", "np", ".", "sum", "(", "top_probs", ")", "# normalization", "\n", "flipped", "=", "flipper", ".", "multinomial", "(", "1", ",", "top_probs", ",", "1", ")", "[", "0", "]", "\n", "new_label", "=", "np", ".", "where", "(", "flipped", "==", "1", ")", "[", "0", "]", "\n", "new_label", "=", "top_k_idx", "[", "new_label", "[", "0", "]", "]", "# new_label shape [1, ]", "\n", "\n", "y_noise", "[", "i", "]", "=", "new_label", "\n", "\n", "", "", "if", "not", "correction_count", ":", "\n", "        ", "current_delta", "+=", "delta_increment", "\n", "\n", "", "return", "y_noise", ",", "current_delta", "\n", "", ""]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.dataloader_cifar.cifar_dataset.__init__": [[17, 95], ["range", "int", "numpy.concatenate.reshape", "numpy.concatenate.transpose", "os.path.exists", "dataloader_cifar.unpickle", "dataloader_cifar.cifar_dataset.test_data.reshape", "dataloader_cifar.cifar_dataset.test_data.transpose", "range", "numpy.concatenate", "json.load", "list", "random.shuffle", "int", "range", "json.dump", "dataloader_cifar.unpickle", "dataloader_cifar.cifar_dataset.test_data.reshape", "dataloader_cifar.cifar_dataset.test_data.transpose", "dataloader_cifar.unpickle", "numpy.concatenate.append", "dataloader_cifar.unpickle", "open", "range", "open", "int", "json.load.append", "json.load.append", "random.randint", "json.load.append", "random.randint"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.dataloader_cifar.unpickle", "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.dataloader_cifar.unpickle", "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.dataloader_cifar.unpickle", "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.dataloader_cifar.unpickle"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "r", ",", "noise_mode", ",", "root_dir", ",", "transform", ",", "mode", ",", "noise_file", "=", "''", ")", ":", "\n", "\n", "        ", "self", ".", "r", "=", "r", "# noise ratio", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "transition", "=", "{", "0", ":", "0", ",", "2", ":", "0", ",", "4", ":", "7", ",", "7", ":", "7", ",", "1", ":", "1", ",", "9", ":", "1", ",", "3", ":", "5", ",", "5", ":", "3", ",", "6", ":", "6", ",", "\n", "8", ":", "8", "}", "# class transition for asymmetric noise for cifar10", "\n", "# generate asymmetric noise for cifar100", "\n", "self", ".", "transition_cifar100", "=", "{", "}", "\n", "nb_superclasses", "=", "20", "\n", "nb_subclasses", "=", "5", "\n", "base", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "0", "]", "\n", "for", "i", "in", "range", "(", "nb_superclasses", "*", "nb_subclasses", ")", ":", "\n", "            ", "self", ".", "transition_cifar100", "[", "i", "]", "=", "int", "(", "base", "[", "i", "%", "5", "]", "+", "5", "*", "int", "(", "i", "/", "5", ")", ")", "\n", "\n", "", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "dataset", "==", "'cifar10'", ":", "\n", "                ", "test_dic", "=", "unpickle", "(", "'%s/test_batch'", "%", "root_dir", ")", "\n", "self", ".", "test_data", "=", "test_dic", "[", "'data'", "]", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "reshape", "(", "(", "10000", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "self", ".", "test_label", "=", "test_dic", "[", "'labels'", "]", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "                ", "test_dic", "=", "unpickle", "(", "'%s/test'", "%", "root_dir", ")", "\n", "self", ".", "test_data", "=", "test_dic", "[", "'data'", "]", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "reshape", "(", "(", "10000", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "self", ".", "test_label", "=", "test_dic", "[", "'fine_labels'", "]", "\n", "", "", "else", ":", "\n", "            ", "train_data", "=", "[", "]", "\n", "train_label", "=", "[", "]", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "                ", "for", "n", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "                    ", "dpath", "=", "'%s/data_batch_%d'", "%", "(", "root_dir", ",", "n", ")", "\n", "data_dic", "=", "unpickle", "(", "dpath", ")", "\n", "train_data", ".", "append", "(", "data_dic", "[", "'data'", "]", ")", "\n", "train_label", "=", "train_label", "+", "data_dic", "[", "'labels'", "]", "\n", "", "train_data", "=", "np", ".", "concatenate", "(", "train_data", ")", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "                ", "train_dic", "=", "unpickle", "(", "'%s/train'", "%", "root_dir", ")", "\n", "train_data", "=", "train_dic", "[", "'data'", "]", "\n", "train_label", "=", "train_dic", "[", "'fine_labels'", "]", "\n", "# print(train_label)", "\n", "# print(len(train_label))", "\n", "", "train_data", "=", "train_data", ".", "reshape", "(", "(", "50000", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "train_data", "=", "train_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "noise_file", ")", ":", "\n", "                ", "noise_label", "=", "json", ".", "load", "(", "open", "(", "noise_file", ",", "\"r\"", ")", ")", "\n", "", "else", ":", "# inject noise", "\n", "                ", "noise_label", "=", "[", "]", "\n", "idx", "=", "list", "(", "range", "(", "50000", ")", ")", "\n", "random", ".", "shuffle", "(", "idx", ")", "\n", "num_noise", "=", "int", "(", "self", ".", "r", "*", "50000", ")", "\n", "noise_idx", "=", "idx", "[", ":", "num_noise", "]", "\n", "for", "i", "in", "range", "(", "50000", ")", ":", "\n", "                    ", "if", "i", "in", "noise_idx", ":", "\n", "                        ", "if", "noise_mode", "==", "'sym'", "or", "noise_mode", "==", "'IDN'", "or", "noise_mode", "==", "'PMD'", ":", "\n", "                            ", "if", "dataset", "==", "'cifar10'", ":", "\n", "                                ", "noiselabel", "=", "random", ".", "randint", "(", "0", ",", "9", ")", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "                                ", "noiselabel", "=", "random", ".", "randint", "(", "0", ",", "99", ")", "\n", "", "noise_label", ".", "append", "(", "noiselabel", ")", "\n", "", "elif", "noise_mode", "==", "'asym'", ":", "\n", "                            ", "if", "dataset", "==", "'cifar10'", ":", "\n", "                                ", "noiselabel", "=", "self", ".", "transition", "[", "train_label", "[", "i", "]", "]", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "                                ", "noiselabel", "=", "self", ".", "transition_cifar100", "[", "train_label", "[", "i", "]", "]", "\n", "", "noise_label", ".", "append", "(", "noiselabel", ")", "\n", "", "", "else", ":", "\n", "                        ", "noise_label", ".", "append", "(", "train_label", "[", "i", "]", ")", "\n", "# print(\"save noisy labels to %s ...\" % noise_file)", "\n", "", "", "json", ".", "dump", "(", "noise_label", ",", "open", "(", "noise_file", ",", "\"w\"", ")", ")", "\n", "\n", "", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "                ", "self", ".", "train_data", "=", "train_data", "\n", "self", ".", "noise_label", "=", "noise_label", "\n", "self", ".", "clean_label", "=", "train_label", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.dataloader_cifar.cifar_dataset.__getitem__": [[96, 107], ["PIL.Image.fromarray", "dataloader_cifar.cifar_dataset.transform", "PIL.Image.fromarray", "dataloader_cifar.cifar_dataset.transform"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "train_data", "[", "index", "]", ",", "self", ".", "noise_label", "[", "index", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "img", ",", "target", ",", "index", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "test_data", "[", "index", "]", ",", "self", ".", "test_label", "[", "index", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.dataloader_cifar.cifar_dataset.__len__": [[108, 113], ["len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "!=", "'test'", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_data", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.dataloader_cifar.cifar_dataloader.__init__": [[116, 145], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "r", ",", "noise_mode", ",", "batch_size", ",", "num_workers", ",", "root_dir", ",", "noise_file", "=", "''", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "noise_mode", "=", "noise_mode", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "noise_file", "=", "noise_file", "\n", "if", "self", ".", "dataset", "==", "'cifar10'", ":", "\n", "            ", "self", ".", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "self", ".", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'cifar100'", ":", "\n", "            ", "self", ".", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.507", ",", "0.487", ",", "0.441", ")", ",", "(", "0.267", ",", "0.256", ",", "0.276", ")", ")", ",", "\n", "]", ")", "\n", "self", ".", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.507", ",", "0.487", ",", "0.441", ")", ",", "(", "0.267", ",", "0.256", ",", "0.276", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.dataloader_cifar.cifar_dataloader.run": [[147, 178], ["dataloader_cifar.cifar_dataset", "torch.utils.data.DataLoader", "numpy.asarray", "numpy.asarray", "dataloader_cifar.cifar_dataset", "torch.utils.data.DataLoader", "dataloader_cifar.cifar_dataset", "torch.utils.data.DataLoader", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "", "def", "run", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "train_dataset", "=", "cifar_dataset", "(", "dataset", "=", "self", ".", "dataset", ",", "noise_mode", "=", "self", ".", "noise_mode", ",", "r", "=", "self", ".", "r", ",", "\n", "root_dir", "=", "self", ".", "root_dir", ",", "transform", "=", "self", ".", "transform_train", ",", "mode", "=", "\"train\"", ",", "\n", "noise_file", "=", "self", ".", "noise_file", ")", "\n", "trainloader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "return", "trainloader", ",", "np", ".", "asarray", "(", "train_dataset", ".", "noise_label", ")", ",", "np", ".", "asarray", "(", "train_dataset", ".", "clean_label", ")", "\n", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "test_dataset", "=", "cifar_dataset", "(", "dataset", "=", "self", ".", "dataset", ",", "noise_mode", "=", "self", ".", "noise_mode", ",", "r", "=", "self", ".", "r", ",", "\n", "root_dir", "=", "self", ".", "root_dir", ",", "transform", "=", "self", ".", "transform_test", ",", "mode", "=", "'test'", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "test_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "return", "test_loader", "\n", "", "elif", "mode", "==", "'eval_train'", ":", "\n", "            ", "eval_dataset", "=", "cifar_dataset", "(", "dataset", "=", "self", ".", "dataset", ",", "noise_mode", "=", "self", ".", "noise_mode", ",", "r", "=", "self", ".", "r", ",", "\n", "root_dir", "=", "self", ".", "root_dir", ",", "transform", "=", "self", ".", "transform_test", ",", "mode", "=", "'train'", ",", "\n", "noise_file", "=", "self", ".", "noise_file", ")", "\n", "eval_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "eval_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "return", "eval_loader", ",", "np", ".", "asarray", "(", "eval_dataset", ".", "noise_label", ")", ",", "np", ".", "asarray", "(", "eval_dataset", ".", "clean_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.dataloader_cifar.unpickle": [[10, 15], ["open", "cPickle.load"], "function", ["None"], ["def", "unpickle", "(", "file", ")", ":", "\n", "    ", "import", "_pickle", "as", "cPickle", "\n", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "        ", "dict", "=", "cPickle", ".", "load", "(", "fo", ",", "encoding", "=", "'latin1'", ")", "\n", "", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.train_cifar10_with_SELC_IDN_noise.SELCLoss.__init__": [[47, 55], ["super().__init__", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "labels", ",", "num_classes", ",", "es", "=", "10", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", "SELCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "soft_labels", "=", "torch", ".", "zeros", "(", "len", "(", "labels", ")", ",", "num_classes", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "self", ".", "soft_labels", "[", "torch", ".", "arange", "(", "len", "(", "labels", ")", ")", ",", "labels", "]", "=", "1", "\n", "self", ".", "es", "=", "es", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "CEloss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.train_cifar10_with_SELC_IDN_noise.SELCLoss.forward": [[56, 68], ["torch.softmax", "torch.softmax", "torch.softmax", "train_cifar10_with_SELC_IDN_noise.SELCLoss.CEloss", "train_cifar10_with_SELC_IDN_noise.SELCLoss.mean", "torch.softmax", "torch.softmax", "torch.softmax", "selc_loss.mean", "logits.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ",", "index", ",", "epoch", ")", ":", "\n", "        ", "pred", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "if", "epoch", "<=", "self", ".", "es", ":", "\n", "            ", "ce", "=", "self", ".", "CEloss", "(", "logits", ",", "labels", ")", "\n", "return", "ce", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "pred_detach", "=", "F", ".", "softmax", "(", "logits", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "soft_labels", "[", "index", "]", "=", "self", ".", "momentum", "*", "self", ".", "soft_labels", "[", "index", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "pred_detach", "\n", "\n", "selc_loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "log", "(", "pred", ")", "*", "self", ".", "soft_labels", "[", "index", "]", ",", "dim", "=", "1", ")", "\n", "return", "selc_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.train_cifar10_with_SELC_IDN_noise.train": [[100, 134], ["model.train", "enumerate", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "loss_per_batch.append", "pred.eq().sum().item", "acc_train_per_batch.append", "numpy.average", "numpy.average", "data.to", "torch.from_numpy.to", "criterion.item", "model.max", "print", "pred.eq().sum", "len", "criterion.item", "pred.eq", "len", "len", "torch.from_numpy.view_as"], "function", ["home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_Clothing1M.train"], ["def", "train", "(", "args", ",", "model", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "loss_per_batch", "=", "[", "]", "\n", "correct", "=", "0", "\n", "acc_train_per_batch", "=", "[", "]", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "_", ",", "index", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "target", "=", "torch", ".", "from_numpy", "(", "noisy_labels", "[", "index", "]", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "args", ".", "gpuid", ")", ",", "target", ".", "to", "(", "args", ".", "gpuid", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ",", "index", ",", "epoch", ")", "\n", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss_per_batch", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# save accuracy:", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "acc_train_per_batch", ".", "append", "(", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "args", ".", "batch_size", ")", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f} Accuracy: {:.0f}%, Learning rate: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ",", "\n", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "args", ".", "batch_size", ")", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "", "", "loss_per_epoch", "=", "[", "np", ".", "average", "(", "loss_per_batch", ")", "]", "\n", "acc_train_per_epoch", "=", "[", "np", ".", "average", "(", "acc_train_per_batch", ")", "]", "\n", "\n", "return", "loss_per_epoch", ",", "acc_train_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.train_cifar10_with_SELC_IDN_noise.test_cleaning": [[136, 162], ["model.eval", "len", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.average", "numpy.array", "model", "torch.log_softmax", "torch.nll_loss().item", "loss_per_batch.append", "pred.eq().sum().item", "acc_val_per_batch.append", "len", "data.to", "target.to", "torch.nll_loss().item", "F.log_softmax.max", "len", "len", "torch.nll_loss", "pred.eq().sum", "torch.nll_loss", "pred.eq", "target.view_as"], "function", ["None"], ["", "def", "test_cleaning", "(", "test_batch_size", ",", "model", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "loss_per_batch", "=", "[", "]", "\n", "acc_val_per_batch", "=", "[", "]", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "loss_per_batch", ".", "append", "(", "F", ".", "nll_loss", "(", "output", ",", "target", ")", ".", "item", "(", ")", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "acc_val_per_batch", ".", "append", "(", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "test_batch_size", ")", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "loss_per_epoch", "=", "[", "np", ".", "average", "(", "loss_per_batch", ")", "]", "\n", "acc_val_per_epoch", "=", "[", "np", ".", "array", "(", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", "]", "\n", "\n", "return", "loss_per_epoch", ",", "acc_val_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.train_cifar10_with_SELC_IDN_noise.learning_rate": [[184, 191], ["math.pow"], "function", ["None"], ["def", "learning_rate", "(", "lr_init", ",", "epoch", ")", ":", "\n", "    ", "optim_factor", "=", "0", "\n", "if", "(", "epoch", ">", "120", ")", ":", "\n", "        ", "optim_factor", "=", "2", "\n", "", "elif", "(", "epoch", ">", "60", ")", ":", "\n", "        ", "optim_factor", "=", "1", "\n", "", "return", "lr_init", "*", "math", ".", "pow", "(", "0.2", ",", "optim_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.train_cifar_with_SELC_PMD_noise.SELCLoss.__init__": [[46, 54], ["super().__init__", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "labels", ",", "num_classes", ",", "es", "=", "10", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", "SELCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "soft_labels", "=", "torch", ".", "zeros", "(", "len", "(", "labels", ")", ",", "num_classes", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "self", ".", "soft_labels", "[", "torch", ".", "arange", "(", "len", "(", "labels", ")", ")", ",", "labels", "]", "=", "1", "\n", "self", ".", "es", "=", "es", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "CEloss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.train_cifar_with_SELC_PMD_noise.SELCLoss.forward": [[55, 67], ["torch.softmax", "torch.softmax", "torch.softmax", "train_cifar_with_SELC_PMD_noise.SELCLoss.CEloss", "train_cifar_with_SELC_PMD_noise.SELCLoss.mean", "torch.softmax", "torch.softmax", "torch.softmax", "selc_loss.mean", "logits.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ",", "index", ",", "epoch", ")", ":", "\n", "        ", "pred", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "if", "epoch", "<=", "self", ".", "es", ":", "\n", "            ", "ce", "=", "self", ".", "CEloss", "(", "logits", ",", "labels", ")", "\n", "return", "ce", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "pred_detach", "=", "F", ".", "softmax", "(", "logits", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "soft_labels", "[", "index", "]", "=", "self", ".", "momentum", "*", "self", ".", "soft_labels", "[", "index", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "pred_detach", "\n", "\n", "selc_loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "log", "(", "pred", ")", "*", "self", ".", "soft_labels", "[", "index", "]", ",", "dim", "=", "1", ")", "\n", "return", "selc_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.train_cifar_with_SELC_PMD_noise.train": [[100, 134], ["model.train", "enumerate", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "loss_per_batch.append", "pred.eq().sum().item", "acc_train_per_batch.append", "numpy.average", "numpy.average", "data.to", "torch.from_numpy.to", "criterion.item", "output.max", "print", "pred.eq().sum", "len", "criterion.item", "pred.eq", "len", "len", "torch.from_numpy.view_as"], "function", ["home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_Clothing1M.train"], ["def", "train", "(", "args", ",", "model", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "loss_per_batch", "=", "[", "]", "\n", "correct", "=", "0", "\n", "acc_train_per_batch", "=", "[", "]", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "_", ",", "index", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "target", "=", "torch", ".", "from_numpy", "(", "noisy_labels", "[", "index", "]", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "args", ".", "gpuid", ")", ",", "target", ".", "to", "(", "args", ".", "gpuid", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "_", ",", "_", "=", "model", "(", "data", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ",", "index", ",", "epoch", ")", "\n", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss_per_batch", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# save accuracy:", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "acc_train_per_batch", ".", "append", "(", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "args", ".", "batch_size", ")", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f} Accuracy: {:.0f}%, Learning rate: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ",", "\n", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "args", ".", "batch_size", ")", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "", "", "loss_per_epoch", "=", "[", "np", ".", "average", "(", "loss_per_batch", ")", "]", "\n", "acc_train_per_epoch", "=", "[", "np", ".", "average", "(", "acc_train_per_batch", ")", "]", "\n", "\n", "return", "loss_per_epoch", ",", "acc_train_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.train_cifar_with_SELC_PMD_noise.test_cleaning": [[136, 162], ["model.eval", "len", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.average", "numpy.array", "model", "torch.log_softmax", "torch.nll_loss().item", "loss_per_batch.append", "pred.eq().sum().item", "acc_val_per_batch.append", "len", "data.to", "target.to", "torch.nll_loss().item", "F.log_softmax.max", "len", "len", "torch.nll_loss", "pred.eq().sum", "torch.nll_loss", "pred.eq", "target.view_as"], "function", ["None"], ["", "def", "test_cleaning", "(", "test_batch_size", ",", "model", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "loss_per_batch", "=", "[", "]", "\n", "acc_val_per_batch", "=", "[", "]", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", ",", "_", ",", "_", "=", "model", "(", "data", ")", "\n", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "loss_per_batch", ".", "append", "(", "F", ".", "nll_loss", "(", "output", ",", "target", ")", ".", "item", "(", ")", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "acc_val_per_batch", ".", "append", "(", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "test_batch_size", ")", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "loss_per_epoch", "=", "[", "np", ".", "average", "(", "loss_per_batch", ")", "]", "\n", "acc_val_per_epoch", "=", "[", "np", ".", "array", "(", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", "]", "\n", "\n", "return", "loss_per_epoch", ",", "acc_val_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.instance-dependent_noise.train_cifar_with_SELC_PMD_noise.learning_rate": [[184, 191], ["math.pow"], "function", ["None"], ["def", "learning_rate", "(", "lr_init", ",", "epoch", ")", ":", "\n", "    ", "optim_factor", "=", "0", "\n", "if", "(", "epoch", ">", "120", ")", ":", "\n", "        ", "optim_factor", "=", "2", "\n", "", "elif", "(", "epoch", ">", "60", ")", ":", "\n", "        ", "optim_factor", "=", "1", "\n", "", "return", "lr_init", "*", "math", ".", "pow", "(", "0.2", ",", "optim_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.train_cifar_with_SELC.SELCLoss.__init__": [[43, 51], ["super().__init__", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "labels", ",", "num_classes", ",", "es", "=", "10", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", "SELCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "soft_labels", "=", "torch", ".", "zeros", "(", "len", "(", "labels", ")", ",", "num_classes", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "self", ".", "soft_labels", "[", "torch", ".", "arange", "(", "len", "(", "labels", ")", ")", ",", "labels", "]", "=", "1", "\n", "self", ".", "es", "=", "es", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "CEloss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.train_cifar_with_SELC.SELCLoss.forward": [[52, 64], ["torch.softmax", "torch.softmax", "torch.softmax", "train_cifar_with_SELC.SELCLoss.CEloss", "train_cifar_with_SELC.SELCLoss.mean", "torch.softmax", "torch.softmax", "torch.softmax", "selc_loss.mean", "logits.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ",", "index", ",", "epoch", ")", ":", "\n", "        ", "pred", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "if", "epoch", "<=", "self", ".", "es", ":", "\n", "            ", "ce", "=", "self", ".", "CEloss", "(", "logits", ",", "labels", ")", "\n", "return", "ce", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "pred_detach", "=", "F", ".", "softmax", "(", "logits", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "soft_labels", "[", "index", "]", "=", "self", ".", "momentum", "*", "self", ".", "soft_labels", "[", "index", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "pred_detach", "\n", "\n", "selc_loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "log", "(", "pred", ")", "*", "self", ".", "soft_labels", "[", "index", "]", ",", "dim", "=", "1", ")", "\n", "return", "selc_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.train_cifar_with_SELC.train": [[93, 127], ["model.train", "enumerate", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "loss_per_batch.append", "pred.eq().sum().item", "acc_train_per_batch.append", "numpy.average", "numpy.average", "data.to", "target.to", "criterion.item", "output.max", "print", "pred.eq().sum", "len", "criterion.item", "pred.eq", "len", "len", "target.view_as"], "function", ["home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_Clothing1M.train"], ["def", "train", "(", "args", ",", "model", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "loss_per_batch", "=", "[", "]", "\n", "correct", "=", "0", "\n", "acc_train_per_batch", "=", "[", "]", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ",", "index", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "args", ".", "gpuid", ")", ",", "target", ".", "to", "(", "args", ".", "gpuid", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "_", ",", "_", "=", "model", "(", "data", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ",", "index", ",", "epoch", ")", "\n", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss_per_batch", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# save accuracy:", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "acc_train_per_batch", ".", "append", "(", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "args", ".", "batch_size", ")", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f} Accuracy: {:.0f}%, Learning rate: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ",", "\n", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "args", ".", "batch_size", ")", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "", "", "loss_per_epoch", "=", "[", "np", ".", "average", "(", "loss_per_batch", ")", "]", "\n", "acc_train_per_epoch", "=", "[", "np", ".", "average", "(", "acc_train_per_batch", ")", "]", "\n", "\n", "return", "loss_per_epoch", ",", "acc_train_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.train_cifar_with_SELC.test_cleaning": [[129, 155], ["model.eval", "len", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.average", "numpy.array", "model", "torch.log_softmax", "torch.nll_loss().item", "loss_per_batch.append", "pred.eq().sum().item", "acc_val_per_batch.append", "len", "data.to", "target.to", "torch.nll_loss().item", "F.log_softmax.max", "len", "len", "torch.nll_loss", "pred.eq().sum", "torch.nll_loss", "pred.eq", "target.view_as"], "function", ["None"], ["", "def", "test_cleaning", "(", "test_batch_size", ",", "model", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "loss_per_batch", "=", "[", "]", "\n", "acc_val_per_batch", "=", "[", "]", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", ",", "_", ",", "_", "=", "model", "(", "data", ")", "\n", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "loss_per_batch", ".", "append", "(", "F", ".", "nll_loss", "(", "output", ",", "target", ")", ".", "item", "(", ")", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "acc_val_per_batch", ".", "append", "(", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "test_batch_size", ")", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "loss_per_epoch", "=", "[", "np", ".", "average", "(", "loss_per_batch", ")", "]", "\n", "acc_val_per_epoch", "=", "[", "np", ".", "array", "(", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", "]", "\n", "\n", "return", "loss_per_epoch", ",", "acc_val_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.dataloader_cifar.cifar_dataset.__init__": [[17, 95], ["range", "int", "numpy.concatenate.reshape", "numpy.concatenate.transpose", "os.path.exists", "dataloader_cifar.unpickle", "dataloader_cifar.cifar_dataset.test_data.reshape", "dataloader_cifar.cifar_dataset.test_data.transpose", "range", "numpy.concatenate", "json.load", "list", "random.shuffle", "int", "range", "print", "json.dump", "dataloader_cifar.unpickle", "dataloader_cifar.cifar_dataset.test_data.reshape", "dataloader_cifar.cifar_dataset.test_data.transpose", "dataloader_cifar.unpickle", "numpy.concatenate.append", "dataloader_cifar.unpickle", "open", "range", "open", "int", "json.load.append", "json.load.append", "random.randint", "json.load.append", "random.randint"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.dataloader_cifar.unpickle", "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.dataloader_cifar.unpickle", "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.dataloader_cifar.unpickle", "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.dataloader_cifar.unpickle"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "r", ",", "noise_mode", ",", "root_dir", ",", "transform", ",", "mode", ",", "noise_file", "=", "''", ")", ":", "\n", "\n", "        ", "self", ".", "r", "=", "r", "# noise ratio", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "transition", "=", "{", "0", ":", "0", ",", "2", ":", "0", ",", "4", ":", "7", ",", "7", ":", "7", ",", "1", ":", "1", ",", "9", ":", "1", ",", "3", ":", "5", ",", "5", ":", "3", ",", "6", ":", "6", ",", "\n", "8", ":", "8", "}", "# class transition for asymmetric noise for cifar10", "\n", "# generate asymmetric noise for cifar100", "\n", "self", ".", "transition_cifar100", "=", "{", "}", "\n", "nb_superclasses", "=", "20", "\n", "nb_subclasses", "=", "5", "\n", "base", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "0", "]", "\n", "for", "i", "in", "range", "(", "nb_superclasses", "*", "nb_subclasses", ")", ":", "\n", "            ", "self", ".", "transition_cifar100", "[", "i", "]", "=", "int", "(", "base", "[", "i", "%", "5", "]", "+", "5", "*", "int", "(", "i", "/", "5", ")", ")", "\n", "\n", "", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "dataset", "==", "'cifar10'", ":", "\n", "                ", "test_dic", "=", "unpickle", "(", "'%s/test_batch'", "%", "root_dir", ")", "\n", "self", ".", "test_data", "=", "test_dic", "[", "'data'", "]", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "reshape", "(", "(", "10000", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "self", ".", "test_label", "=", "test_dic", "[", "'labels'", "]", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "                ", "test_dic", "=", "unpickle", "(", "'%s/test'", "%", "root_dir", ")", "\n", "self", ".", "test_data", "=", "test_dic", "[", "'data'", "]", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "reshape", "(", "(", "10000", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "self", ".", "test_label", "=", "test_dic", "[", "'fine_labels'", "]", "\n", "", "", "else", ":", "\n", "            ", "train_data", "=", "[", "]", "\n", "train_label", "=", "[", "]", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "                ", "for", "n", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "                    ", "dpath", "=", "'%s/data_batch_%d'", "%", "(", "root_dir", ",", "n", ")", "\n", "data_dic", "=", "unpickle", "(", "dpath", ")", "\n", "train_data", ".", "append", "(", "data_dic", "[", "'data'", "]", ")", "\n", "train_label", "=", "train_label", "+", "data_dic", "[", "'labels'", "]", "\n", "", "train_data", "=", "np", ".", "concatenate", "(", "train_data", ")", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "                ", "train_dic", "=", "unpickle", "(", "'%s/train'", "%", "root_dir", ")", "\n", "train_data", "=", "train_dic", "[", "'data'", "]", "\n", "train_label", "=", "train_dic", "[", "'fine_labels'", "]", "\n", "# print(train_label)", "\n", "# print(len(train_label))", "\n", "", "train_data", "=", "train_data", ".", "reshape", "(", "(", "50000", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "train_data", "=", "train_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "noise_file", ")", ":", "\n", "                ", "noise_label", "=", "json", ".", "load", "(", "open", "(", "noise_file", ",", "\"r\"", ")", ")", "\n", "", "else", ":", "# inject noise", "\n", "                ", "noise_label", "=", "[", "]", "\n", "idx", "=", "list", "(", "range", "(", "50000", ")", ")", "\n", "random", ".", "shuffle", "(", "idx", ")", "\n", "num_noise", "=", "int", "(", "self", ".", "r", "*", "50000", ")", "\n", "noise_idx", "=", "idx", "[", ":", "num_noise", "]", "\n", "for", "i", "in", "range", "(", "50000", ")", ":", "\n", "                    ", "if", "i", "in", "noise_idx", ":", "\n", "                        ", "if", "noise_mode", "==", "'sym'", "or", "noise_mode", "==", "'IDN'", "or", "noise_mode", "==", "'PMD'", ":", "\n", "                            ", "if", "dataset", "==", "'cifar10'", ":", "\n", "                                ", "noiselabel", "=", "random", ".", "randint", "(", "0", ",", "9", ")", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "                                ", "noiselabel", "=", "random", ".", "randint", "(", "0", ",", "99", ")", "\n", "", "noise_label", ".", "append", "(", "noiselabel", ")", "\n", "", "elif", "noise_mode", "==", "'asym'", ":", "\n", "                            ", "if", "dataset", "==", "'cifar10'", ":", "\n", "                                ", "noiselabel", "=", "self", ".", "transition", "[", "train_label", "[", "i", "]", "]", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "                                ", "noiselabel", "=", "self", ".", "transition_cifar100", "[", "train_label", "[", "i", "]", "]", "\n", "", "noise_label", ".", "append", "(", "noiselabel", ")", "\n", "", "", "else", ":", "\n", "                        ", "noise_label", ".", "append", "(", "train_label", "[", "i", "]", ")", "\n", "# print(\"save noisy labels to %s ...\" % noise_file)", "\n", "", "", "json", ".", "dump", "(", "noise_label", ",", "open", "(", "noise_file", ",", "\"w\"", ")", ")", "\n", "\n", "", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "                ", "self", ".", "train_data", "=", "train_data", "\n", "self", ".", "noise_label", "=", "noise_label", "\n", "self", ".", "clean_label", "=", "train_label", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.dataloader_cifar.cifar_dataset.__getitem__": [[96, 107], ["PIL.Image.fromarray", "dataloader_cifar.cifar_dataset.transform", "PIL.Image.fromarray", "dataloader_cifar.cifar_dataset.transform"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "train_data", "[", "index", "]", ",", "self", ".", "noise_label", "[", "index", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "img", ",", "target", ",", "index", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "test_data", "[", "index", "]", ",", "self", ".", "test_label", "[", "index", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.dataloader_cifar.cifar_dataset.__len__": [[108, 113], ["len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "!=", "'test'", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_data", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.dataloader_cifar.cifar_dataloader.__init__": [[116, 145], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "r", ",", "noise_mode", ",", "batch_size", ",", "num_workers", ",", "root_dir", ",", "noise_file", "=", "''", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "noise_mode", "=", "noise_mode", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "noise_file", "=", "noise_file", "\n", "if", "self", ".", "dataset", "==", "'cifar10'", ":", "\n", "            ", "self", ".", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "self", ".", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'cifar100'", ":", "\n", "            ", "self", ".", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.507", ",", "0.487", ",", "0.441", ")", ",", "(", "0.267", ",", "0.256", ",", "0.276", ")", ")", ",", "\n", "]", ")", "\n", "self", ".", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.507", ",", "0.487", ",", "0.441", ")", ",", "(", "0.267", ",", "0.256", ",", "0.276", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.dataloader_cifar.cifar_dataloader.run": [[147, 178], ["dataloader_cifar.cifar_dataset", "torch.utils.data.DataLoader", "numpy.asarray", "numpy.asarray", "dataloader_cifar.cifar_dataset", "torch.utils.data.DataLoader", "dataloader_cifar.cifar_dataset", "torch.utils.data.DataLoader", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "", "def", "run", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "train_dataset", "=", "cifar_dataset", "(", "dataset", "=", "self", ".", "dataset", ",", "noise_mode", "=", "self", ".", "noise_mode", ",", "r", "=", "self", ".", "r", ",", "\n", "root_dir", "=", "self", ".", "root_dir", ",", "transform", "=", "self", ".", "transform_train", ",", "mode", "=", "\"train\"", ",", "\n", "noise_file", "=", "self", ".", "noise_file", ")", "\n", "trainloader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "return", "trainloader", ",", "np", ".", "asarray", "(", "train_dataset", ".", "noise_label", ")", ",", "np", ".", "asarray", "(", "train_dataset", ".", "clean_label", ")", "\n", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "test_dataset", "=", "cifar_dataset", "(", "dataset", "=", "self", ".", "dataset", ",", "noise_mode", "=", "self", ".", "noise_mode", ",", "r", "=", "self", ".", "r", ",", "\n", "root_dir", "=", "self", ".", "root_dir", ",", "transform", "=", "self", ".", "transform_test", ",", "mode", "=", "'test'", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "test_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "return", "test_loader", "\n", "", "elif", "mode", "==", "'eval_train'", ":", "\n", "            ", "eval_dataset", "=", "cifar_dataset", "(", "dataset", "=", "self", ".", "dataset", ",", "noise_mode", "=", "self", ".", "noise_mode", ",", "r", "=", "self", ".", "r", ",", "\n", "root_dir", "=", "self", ".", "root_dir", ",", "transform", "=", "self", ".", "transform_test", ",", "mode", "=", "'train'", ",", "\n", "noise_file", "=", "self", ".", "noise_file", ")", "\n", "eval_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "eval_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "return", "eval_loader", ",", "np", ".", "asarray", "(", "eval_dataset", ".", "noise_label", ")", ",", "np", ".", "asarray", "(", "eval_dataset", ".", "clean_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.dataloader_cifar.unpickle": [[10, 15], ["open", "cPickle.load"], "function", ["None"], ["def", "unpickle", "(", "file", ")", ":", "\n", "    ", "import", "_pickle", "as", "cPickle", "\n", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "        ", "dict", "=", "cPickle", ".", "load", "(", "fo", ",", "encoding", "=", "'latin1'", ")", "\n", "", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.train_cifar_with_SELC+.mixup_data": [[66, 77], ["numpy.random.beta", "x.size", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "function", ["None"], ["def", "mixup_data", "(", "x", ",", "y", ")", ":", "\n", "    ", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "lam", "=", "np", ".", "random", ".", "beta", "(", "args", ".", "alpha", ",", "args", ".", "alpha", ")", "\n", "if", "args", ".", "gpuid", "!=", "-", "1", ":", "\n", "        ", "index", "=", "torch", ".", "randperm", "(", "batch_size", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "index", "=", "torch", ".", "randperm", "(", "batch_size", ")", "\n", "", "mixed_x", "=", "lam", "*", "x", "+", "(", "1", "-", "lam", ")", "*", "x", "[", "index", ",", ":", "]", "\n", "y_a", ",", "y_b", "=", "y", ",", "y", "[", "index", "]", "\n", "\n", "return", "mixed_x", ",", "y_a", ",", "y_b", ",", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.train_cifar_with_SELC+.train": [[79, 119], ["model.train", "enumerate", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "optimizer.zero_grad", "model", "train_cifar_with_SELC+.mixup_data", "model", "loss.backward", "optimizer.step", "loss_per_batch.append", "pred.eq().sum().item", "acc_train_per_batch.append", "numpy.average", "numpy.average", "data.to", "torch.from_numpy.to", "inputs.to", "targets_a.to", "targets_b.to", "loss.item", "output.max", "print", "criterion", "criterion", "pred.eq().sum", "len", "loss.item", "pred.eq", "len", "len", "torch.from_numpy.view_as"], "function", ["home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_Clothing1M.train", "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.train_cifar_with_SELC+.mixup_data"], ["", "def", "train", "(", "args", ",", "model", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "loss_per_batch", "=", "[", "]", "\n", "correct", "=", "0", "\n", "acc_train_per_batch", "=", "[", "]", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "_", ",", "index", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "target", "=", "torch", ".", "from_numpy", "(", "corrected_labels", "[", "index", "]", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "args", ".", "gpuid", ")", ",", "target", ".", "to", "(", "args", ".", "gpuid", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "_", ",", "_", "=", "model", "(", "data", ")", "\n", "\n", "inputs", ",", "targets_a", ",", "targets_b", ",", "lam", "=", "mixup_data", "(", "data", ",", "target", ")", "\n", "inputs", ",", "targets_a", ",", "targets_b", "=", "inputs", ".", "to", "(", "args", ".", "gpuid", ")", ",", "targets_a", ".", "to", "(", "args", ".", "gpuid", ")", ",", "targets_b", ".", "to", "(", "\n", "args", ".", "gpuid", ")", "\n", "output", ",", "_", ",", "_", "=", "model", "(", "inputs", ")", "\n", "\n", "loss", "=", "lam", "*", "criterion", "(", "output", ",", "targets_a", ")", "+", "(", "1", "-", "lam", ")", "*", "criterion", "(", "output", ",", "targets_b", ")", "\n", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss_per_batch", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# save accuracy:", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "acc_train_per_batch", ".", "append", "(", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "args", ".", "batch_size", ")", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f} Accuracy: {:.0f}%, Learning rate: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ",", "\n", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "args", ".", "batch_size", ")", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "", "", "loss_per_epoch", "=", "[", "np", ".", "average", "(", "loss_per_batch", ")", "]", "\n", "acc_train_per_epoch", "=", "[", "np", ".", "average", "(", "acc_train_per_batch", ")", "]", "\n", "\n", "\n", "return", "loss_per_epoch", ",", "acc_train_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.class-conditional_noise.train_cifar_with_SELC+.test_cleaning": [[121, 147], ["model.eval", "len", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.average", "numpy.array", "model", "torch.log_softmax", "torch.nll_loss().item", "loss_per_batch.append", "pred.eq().sum().item", "acc_val_per_batch.append", "len", "data.to", "target.to", "torch.nll_loss().item", "F.log_softmax.max", "len", "len", "torch.nll_loss", "pred.eq().sum", "torch.nll_loss", "pred.eq", "target.view_as"], "function", ["None"], ["", "def", "test_cleaning", "(", "test_batch_size", ",", "model", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "loss_per_batch", "=", "[", "]", "\n", "acc_val_per_batch", "=", "[", "]", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", ",", "_", ",", "_", "=", "model", "(", "data", ")", "\n", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "loss_per_batch", ".", "append", "(", "F", ".", "nll_loss", "(", "output", ",", "target", ")", ".", "item", "(", ")", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "acc_val_per_batch", ".", "append", "(", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "test_batch_size", ")", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "loss_per_epoch", "=", "[", "np", ".", "average", "(", "loss_per_batch", ")", "]", "\n", "acc_val_per_epoch", "=", "[", "np", ".", "array", "(", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", "]", "\n", "\n", "return", "loss_per_epoch", ",", "acc_val_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.dataloader_webvision.imagenet_dataset.__init__": [[10, 24], ["open", "open", "os.path.join", "numpy.sort", "enumerate", "os.path.join", "os.path.join", "os.listdir", "dataloader_webvision.imagenet_dataset.gt_label.readlines", "int", "dataloader_webvision.imagenet_dataset.val_data.append", "one_label.split", "int", "os.path.join", "one_label.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "transform", ",", "num_class", ")", ":", "\n", "# only has label, it is wrong", "\n", "        ", "self", ".", "gt_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'imagenet/ILSVRC2012_devkit_t12/data/ILSVRC2012_validation_ground_truth.txt'", ")", ")", "\n", "# with filename and labels, it is correct", "\n", "self", ".", "gt_label", "=", "open", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'imagenet/ILSVRC2012_devkit_t12/data/val.txt'", ")", ")", "\n", "self", ".", "original_image_filepath", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'imagenet/val/'", ")", "\n", "self", ".", "root", "=", "root_dir", "+", "'imagenet/val/'", "\n", "\n", "imgs", "=", "np", ".", "sort", "(", "os", ".", "listdir", "(", "self", ".", "original_image_filepath", ")", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "val_data", "=", "[", "]", "\n", "for", "index", ",", "one_label", "in", "enumerate", "(", "self", ".", "gt_label", ".", "readlines", "(", ")", ")", ":", "\n", "            ", "if", "int", "(", "one_label", ".", "split", "(", "' '", ")", "[", "1", "]", ")", "<", "num_class", ":", "\n", "                ", "self", ".", "val_data", ".", "append", "(", "[", "int", "(", "one_label", ".", "split", "(", "' '", ")", "[", "1", "]", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "original_image_filepath", ",", "imgs", "[", "index", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.dataloader_webvision.imagenet_dataset.__getitem__": [[26, 32], ["PIL.Image.open().convert", "dataloader_webvision.imagenet_dataset.transform", "PIL.Image.open"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data", "=", "self", ".", "val_data", "[", "index", "]", "\n", "target", "=", "data", "[", "0", "]", "\n", "image", "=", "Image", ".", "open", "(", "data", "[", "1", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "image", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.dataloader_webvision.imagenet_dataset.__len__": [[33, 35], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "val_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.dataloader_webvision.webvision_dataset.__init__": [[38, 69], ["open", "f.readlines", "line.split", "int", "open", "f.readlines", "line.split", "int", "dataloader_webvision.webvision_dataset.val_imgs.append", "train_imgs.append", "dataloader_webvision.webvision_dataset.train_labels_1.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "transform", ",", "mode", ",", "num_class", ")", ":", "\n", "        ", "self", ".", "root", "=", "root_dir", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "with", "open", "(", "self", ".", "root", "+", "'info/val_filelist.txt'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "val_imgs", "=", "[", "]", "\n", "self", ".", "val_labels", "=", "{", "}", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "img", ",", "target", "=", "line", ".", "split", "(", ")", "\n", "target", "=", "int", "(", "target", ")", "\n", "if", "target", "<", "num_class", ":", "\n", "                    ", "self", ".", "val_imgs", ".", "append", "(", "img", ")", "\n", "self", ".", "val_labels", "[", "img", "]", "=", "target", "\n", "", "", "", "else", ":", "\n", "            ", "with", "open", "(", "self", ".", "root", "+", "'info/train_filelist_google.txt'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "train_imgs", "=", "[", "]", "\n", "self", ".", "train_labels", "=", "{", "}", "\n", "self", ".", "train_labels_1", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "img", ",", "target", "=", "line", ".", "split", "(", ")", "\n", "target", "=", "int", "(", "target", ")", "\n", "if", "target", "<", "num_class", ":", "\n", "                    ", "train_imgs", ".", "append", "(", "img", ")", "\n", "self", ".", "train_labels", "[", "img", "]", "=", "target", "\n", "self", ".", "train_labels_1", ".", "append", "(", "target", ")", "\n", "", "", "if", "self", ".", "mode", "==", "'all'", ":", "\n", "                ", "self", ".", "train_imgs", "=", "train_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.dataloader_webvision.webvision_dataset.__getitem__": [[70, 83], ["PIL.Image.open().convert", "dataloader_webvision.webvision_dataset.transform", "PIL.Image.open().convert", "dataloader_webvision.webvision_dataset.transform", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'all'", ":", "\n", "            ", "img_path", "=", "self", ".", "train_imgs", "[", "index", "]", "\n", "target", "=", "self", ".", "train_labels", "[", "img_path", "]", "\n", "image", "=", "Image", ".", "open", "(", "self", ".", "root", "+", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "image", ")", "\n", "return", "img", ",", "target", ",", "index", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "img_path", "=", "self", ".", "val_imgs", "[", "index", "]", "\n", "target", "=", "self", ".", "val_labels", "[", "img_path", "]", "\n", "image", "=", "Image", ".", "open", "(", "self", ".", "root", "+", "'val_images_256/'", "+", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "image", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.dataloader_webvision.webvision_dataset.__len__": [[84, 89], ["len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "!=", "'test'", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_imgs", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "val_imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.dataloader_webvision.webvision_dataloader.__init__": [[92, 120], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "num_class", ",", "num_workers", ",", "root_dir", ")", ":", "\n", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "# self.log = log", "\n", "\n", "self", ".", "transform_samples", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "227", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "self", ".", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "CenterCrop", "(", "227", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "self", ".", "transform_imagenet", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "227", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.dataloader_webvision.webvision_dataloader.run": [[122, 166], ["dataloader_webvision.webvision_dataset", "torch.utils.data.DataLoader", "numpy.asarray", "dataloader_webvision.webvision_dataset", "torch.utils.data.DataLoader", "numpy.asarray", "dataloader_webvision.webvision_dataset", "torch.utils.data.DataLoader", "dataloader_webvision.imagenet_dataset", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "train_dataset", "=", "webvision_dataset", "(", "root_dir", "=", "self", ".", "root_dir", ",", "transform", "=", "self", ".", "transform_train", ",", "mode", "=", "\"all\"", ",", "\n", "num_class", "=", "self", ".", "num_class", ")", "\n", "trainloader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "return", "trainloader", ",", "np", ".", "asarray", "(", "train_dataset", ".", "train_labels_1", ")", "\n", "", "elif", "mode", "==", "'eval_train'", ":", "\n", "            ", "train_dataset", "=", "webvision_dataset", "(", "root_dir", "=", "self", ".", "root_dir", ",", "transform", "=", "self", ".", "transform_samples", ",", "mode", "=", "\"all\"", ",", "\n", "num_class", "=", "self", ".", "num_class", ")", "\n", "trainloader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "return", "trainloader", ",", "np", ".", "asarray", "(", "train_dataset", ".", "train_labels_1", ")", "\n", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "test_dataset", "=", "webvision_dataset", "(", "root_dir", "=", "self", ".", "root_dir", ",", "transform", "=", "self", ".", "transform_test", ",", "mode", "=", "'test'", ",", "\n", "num_class", "=", "self", ".", "num_class", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "test_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "return", "test_loader", "\n", "\n", "\n", "", "elif", "mode", "==", "'imagenet'", ":", "\n", "            ", "imagenet_val", "=", "imagenet_dataset", "(", "root_dir", "=", "self", ".", "root_dir", ",", "transform", "=", "self", ".", "transform_imagenet", ",", "\n", "num_class", "=", "self", ".", "num_class", ")", "\n", "imagenet_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "imagenet_val", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "return", "imagenet_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_animal10N.SELCLoss.__init__": [[26, 34], ["super().__init__", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "labels", ",", "num_classes", ",", "es", "=", "10", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", "SELCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "soft_labels", "=", "torch", ".", "zeros", "(", "len", "(", "labels", ")", ",", "num_classes", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "self", ".", "soft_labels", "[", "torch", ".", "arange", "(", "len", "(", "labels", ")", ")", ",", "labels", "]", "=", "1", "\n", "self", ".", "es", "=", "es", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "CEloss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_animal10N.SELCLoss.forward": [[35, 47], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "train_animal10N.SELCLoss.CEloss", "train_animal10N.SELCLoss.mean", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "selc_loss.mean", "logits.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ",", "index", ",", "epoch", ")", ":", "\n", "        ", "pred", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "if", "epoch", "<=", "self", ".", "es", ":", "\n", "            ", "ce", "=", "self", ".", "CEloss", "(", "logits", ",", "labels", ")", "\n", "return", "ce", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "pred_detach", "=", "F", ".", "softmax", "(", "logits", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "soft_labels", "[", "index", "]", "=", "self", ".", "momentum", "*", "self", ".", "soft_labels", "[", "index", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "pred_detach", "\n", "\n", "selc_loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "log", "(", "pred", ")", "*", "self", ".", "soft_labels", "[", "index", "]", ",", "dim", "=", "1", ")", "\n", "return", "selc_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_animal10N._init_fn": [[21, 23], ["numpy.random.seed"], "function", ["None"], ["def", "_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "77", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_animal10N.main": [[49, 200], ["numpy.random.seed", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torchvision.Compose", "torchvision.Compose", "data_prepare_animal10N.Animal10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data_prepare_animal10N.Animal10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "SELC.utils.utils.check_folder", "os.path.join", "open", "open.write", "open.flush", "SELC.models.vgg.vgg19_bn", "torch.DataParallel", "torch.SGD", "torch.device", "torch.device", "torch.device", "torch.device", "net.to.to", "torch.optim.lr_scheduler.MultiStepLR", "data_prepare_animal10N.Animal10.return_corrupted_label", "train_animal10N.SELCLoss", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "open.close", "len", "len", "time.strftime", "net.to.parameters", "net.to.train", "enumerate", "termcolor.cprint", "termcolor.cprint", "open.write", "open.flush", "lr_scheduler.MultiStepLR.step", "net.to.eval", "termcolor.cprint", "open.write", "open.flush", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "args.__repr__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "net.to.", "SELCLoss.", "optim.SGD.zero_grad", "criterion.backward", "optim.SGD.step", "criterion.item", "images.size", "outputs.max", "predicted.eq().sum().item", "torch.softmax", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "images.size", "images.to", "labels.to", "outputs.detach().cpu", "termcolor.cprint", "net.to.", "images.size", "outputs.max", "predicted.eq().sum().item", "predicted.eq().sum", "open.write", "open.flush", "images.to", "labels.to", "outputs.detach", "predicted.eq().sum", "predicted.eq", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.maclll_selc.utils.utils.check_folder", "home.repos.pwc.inspect_result.maclll_selc.models.vgg.vgg19_bn", "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.data_prepare_animal10N.Animal10.return_corrupted_label", "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_Clothing1M.train"], ["", "", "", "def", "main", "(", "arg_seed", ",", "arg_timestamp", ")", ":", "\n", "    ", "random_seed", "=", "arg_seed", "\n", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "random", ".", "seed", "(", "random_seed", ")", "\n", "torch", ".", "manual_seed", "(", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "random_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "# need to set to True as well", "\n", "\n", "# print('Random Seed {}\\n'.format(arg_seed))", "\n", "\n", "# -- training parameters", "\n", "num_epoch", "=", "args", ".", "epoch", "\n", "milestone", "=", "[", "50", ",", "75", "]", "\n", "batch_size", "=", "args", ".", "batch", "\n", "num_workers", "=", "2", "\n", "\n", "weight_decay", "=", "1e-3", "\n", "gamma", "=", "0.2", "\n", "\n", "lr", "=", "args", ".", "lr", "\n", "start_epoch", "=", "0", "\n", "\n", "# -- specify dataset", "\n", "# data augmentation", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "trainset", "=", "Animal10", "(", "split", "=", "'train'", ",", "data_path", "=", "args", ".", "data_path", ",", "transform", "=", "transform_train", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "\n", "worker_init_fn", "=", "_init_fn", ",", "drop_last", "=", "True", ")", "\n", "\n", "testset", "=", "Animal10", "(", "split", "=", "'test'", ",", "data_path", "=", "args", ".", "data_path", ",", "transform", "=", "transform_test", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", "*", "4", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "num_class", "=", "10", "\n", "\n", "print", "(", "'train data size:'", ",", "len", "(", "trainset", ")", ")", "\n", "print", "(", "'test data size:'", ",", "len", "(", "testset", ")", ")", "\n", "\n", "# -- create log file", "\n", "if", "arg_timestamp", ":", "\n", "        ", "time_stamp", "=", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "\n", "file_name", "=", "'Ours('", "+", "time_stamp", "+", "').txt'", "\n", "", "else", ":", "\n", "        ", "file_name", "=", "'Ours.txt'", "\n", "\n", "", "log_dir", "=", "check_folder", "(", "'logs'", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "file_name", ")", "\n", "saver", "=", "open", "(", "file_name", ",", "\"w\"", ")", "\n", "\n", "saver", ".", "write", "(", "args", ".", "__repr__", "(", ")", "+", "\"\\n\\n\"", ")", "\n", "saver", ".", "flush", "(", ")", "\n", "\n", "# -- set network, optimizer, scheduler, etc", "\n", "net", "=", "vgg19_bn", "(", "num_classes", "=", "num_class", ",", "pretrained", "=", "False", ")", "\n", "net", "=", "nn", ".", "DataParallel", "(", "net", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "net", "=", "net", ".", "to", "(", "device", ")", "\n", "\n", "exp_lr_scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "milestone", ",", "gamma", "=", "gamma", ")", "\n", "# criterion = torch.nn.CrossEntropyLoss()", "\n", "noisy_labels", "=", "trainset", ".", "return_corrupted_label", "(", ")", "\n", "criterion", "=", "SELCLoss", "(", "noisy_labels", ",", "num_class", ",", "args", ".", "es", ",", "args", ".", "alpha", ")", "\n", "\n", "# -- misc", "\n", "iterations", "=", "0", "\n", "f_record", "=", "torch", ".", "zeros", "(", "[", "args", ".", "rollWindow", ",", "len", "(", "trainset", ")", ",", "num_class", "]", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "num_epoch", ")", ":", "\n", "        ", "train_correct", "=", "0", "\n", "train_loss", "=", "0", "\n", "train_total", "=", "0", "\n", "\n", "net", ".", "train", "(", ")", "\n", "\n", "for", "i", ",", "(", "images", ",", "labels", ",", "indices", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "            ", "if", "images", ".", "size", "(", "0", ")", "==", "1", ":", "# when batch size equals 1, skip, due to batch normalization", "\n", "                ", "continue", "\n", "\n", "", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "\n", "outputs", ",", "_", "=", "net", "(", "images", ")", "\n", "# loss = criterion(outputs, labels)", "\n", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ",", "indices", ",", "epoch", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "train_total", "+=", "images", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "train_correct", "+=", "predicted", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "f_record", "[", "epoch", "%", "args", ".", "rollWindow", ",", "indices", "]", "=", "F", ".", "softmax", "(", "outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "dim", "=", "1", ")", "\n", "\n", "iterations", "+=", "1", "\n", "if", "iterations", "%", "100", "==", "0", ":", "\n", "                ", "cur_train_acc", "=", "train_correct", "/", "train_total", "*", "100.", "\n", "cur_train_loss", "=", "train_loss", "/", "train_total", "\n", "cprint", "(", "'epoch: {}\\titerations: {}\\tcurrent train accuracy: {:.4f}\\ttrain loss:{:.4f}'", ".", "format", "(", "\n", "epoch", ",", "iterations", ",", "cur_train_acc", ",", "cur_train_loss", ")", ",", "'yellow'", ")", "\n", "\n", "if", "iterations", "%", "5000", "==", "0", ":", "\n", "                    ", "saver", ".", "write", "(", "'epoch: {}\\titerations: {}\\ttrain accuracy: {}\\ttrain loss: {}\\n'", ".", "format", "(", "\n", "epoch", ",", "iterations", ",", "cur_train_acc", ",", "cur_train_loss", ")", ")", "\n", "saver", ".", "flush", "(", ")", "\n", "\n", "", "", "", "train_acc", "=", "train_correct", "/", "train_total", "*", "100.", "\n", "\n", "cprint", "(", "'epoch: {}'", ".", "format", "(", "epoch", ")", ",", "'yellow'", ")", "\n", "cprint", "(", "'train accuracy: {:.4f}\\ntrain loss: {:.4f}'", ".", "format", "(", "train_acc", ",", "train_loss", ")", ",", "'yellow'", ")", "\n", "saver", ".", "write", "(", "'epoch: {}\\ntrain accuracy: {}\\ntrain loss: {}\\n'", ".", "format", "(", "epoch", ",", "train_acc", ",", "train_loss", ")", ")", "\n", "saver", ".", "flush", "(", ")", "\n", "\n", "exp_lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# testing", "\n", "net", ".", "eval", "(", ")", "\n", "test_total", "=", "0", "\n", "test_correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "images", ",", "labels", ",", "_", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                ", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "\n", "outputs", ",", "_", "=", "net", "(", "images", ")", "\n", "\n", "test_total", "+=", "images", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "test_correct", "+=", "predicted", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "test_acc", "=", "test_correct", "/", "test_total", "*", "100.", "\n", "\n", "", "cprint", "(", "'>> current test accuracy: {:.4f}'", ".", "format", "(", "test_acc", ")", ",", "'cyan'", ")", "\n", "\n", "saver", ".", "write", "(", "'>> current test accuracy: {}\\n'", ".", "format", "(", "test_acc", ")", ")", "\n", "saver", ".", "flush", "(", ")", "\n", "\n", "", "saver", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_webvision.SELCLoss.__init__": [[43, 51], ["super().__init__", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "labels", ",", "num_classes", ",", "es", "=", "10", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", "SELCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "soft_labels", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", "[", "0", "]", ",", "num_classes", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "args", ".", "gpuid", ")", "\n", "self", ".", "soft_labels", "[", "torch", ".", "arange", "(", "labels", ".", "shape", "[", "0", "]", ")", ",", "labels", "]", "=", "1", "\n", "self", ".", "es", "=", "es", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "CELoss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_webvision.SELCLoss.forward": [[52, 64], ["torch.softmax", "torch.softmax", "torch.softmax", "train_webvision.SELCLoss.CELoss", "train_webvision.SELCLoss.mean", "torch.softmax", "torch.softmax", "torch.softmax", "selc_loss.mean", "logits.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ",", "index", ",", "epoch", ")", ":", "\n", "        ", "pred", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "if", "epoch", "<=", "self", ".", "es", ":", "\n", "            ", "ce", "=", "self", ".", "CELoss", "(", "logits", ",", "labels", ")", "\n", "return", "ce", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "pred_detach", "=", "F", ".", "softmax", "(", "logits", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "soft_labels", "[", "index", "]", "=", "self", ".", "momentum", "*", "self", ".", "soft_labels", "[", "index", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "pred_detach", "\n", "\n", "selc_loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "log", "(", "pred", ")", "*", "self", ".", "soft_labels", "[", "index", "]", ",", "dim", "=", "1", ")", "\n", "return", "selc_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_webvision.accuracy": [[66, 81], ["torch.softmax", "max", "target.size", "F.softmax.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].contiguous().view().float().sum", "res.append", "correct[].contiguous().view().float().sum.mul_", "target.view", "correct[].contiguous().view().float", "correct[].contiguous().view", "correct[].contiguous"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "logit", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "output", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_webvision.train": [[83, 127], ["model.train", "enumerate", "optimizer.zero_grad", "model", "criterion.backward", "optimizer.step", "loss_per_batch.append", "pred.eq().sum().item", "acc_train_per_batch.append", "numpy.average", "numpy.average", "data.to", "target.to", "criterion", "criterion", "criterion.item", "output.max", "sys.stdout.write", "print", "output_log.write", "output_log.flush", "pred.eq().sum", "len", "criterion.item", "len", "criterion.item", "pred.eq", "len", "len", "len", "len", "target.view_as"], "function", ["home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_Clothing1M.train"], ["", "def", "train", "(", "log_interval", ",", "batch_size", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "loss_per_batch", "=", "[", "]", "\n", "acc_train_per_batch", "=", "[", "]", "\n", "correct", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ",", "index", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "_", ",", "_", "=", "model", "(", "data", ")", "\n", "\n", "if", "args", ".", "loss", "==", "'SELCLoss'", ":", "\n", "            ", "loss", "=", "criterion", "(", "output", ",", "target", ",", "index", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss_per_batch", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# save accuracy:", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "acc_train_per_batch", ".", "append", "(", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "batch_size", ")", ")", "\n", "\n", "if", "batch_idx", "%", "log_interval", "==", "0", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "print", "(", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f} Accuracy: {:.0f}%, Learning rate: {:.6f}\\n'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ",", "\n", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "batch_size", ")", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "output_log", ".", "write", "(", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f} Accuracy: {:.0f}%, Learning rate: {:.6f}\\n'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ",", "\n", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "batch_size", ")", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "output_log", ".", "flush", "(", ")", "\n", "\n", "", "", "loss_per_epoch", "=", "[", "np", ".", "average", "(", "loss_per_batch", ")", "]", "\n", "acc_train_per_epoch", "=", "[", "np", ".", "average", "(", "acc_train_per_batch", ")", "]", "\n", "\n", "return", "loss_per_epoch", ",", "acc_train_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_webvision.test_cleaning": [[129, 189], ["model.eval", "len", "print", "output_log.write", "output_log.flush", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "float", "float", "float", "float", "numpy.average", "numpy.array", "numpy.array", "model", "train_webvision.accuracy", "train_webvision.accuracy", "accuracy.item", "accuracy.item", "torch.log_softmax", "torch.nll_loss().item", "loss_per_batch.append", "pred.eq().sum().item", "range", "acc_val_per_batch.append", "acc_val_per_batch.append", "data.to", "target.to", "torch.nll_loss().item", "F.log_softmax.max", "torch.topk", "torch.topk", "torch.topk", "pred_topk[].view_as().eq().sum().item", "len", "len", "torch.nll_loss", "pred.eq().sum", "torch.nll_loss", "pred_topk[].view_as().eq().sum", "pred.eq", "target.view_as", "pred_topk[].view_as().eq", "target.view_as", "pred_topk[].view_as"], "function", ["home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_webvision.accuracy", "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_webvision.accuracy"], ["", "def", "test_cleaning", "(", "test_batch_size", ",", "model", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "loss_per_batch", "=", "[", "]", "\n", "acc_val_per_batch", "=", "[", "]", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "correct_topk", "=", "0", "\n", "\n", "test_total", "=", "0", "\n", "test_correct_top1", "=", "0", "\n", "test_correct_top5", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", ",", "_", ",", "_", "=", "model", "(", "data", ")", "\n", "\n", "pred_top5", "=", "accuracy", "(", "output", ",", "target", ",", "(", "5", ",", ")", ")", "\n", "\n", "# print(acc_top5)", "\n", "pred_top1", "=", "accuracy", "(", "output", ",", "target", ",", "(", "1", ",", ")", ")", "\n", "# print(acc_top1)", "\n", "test_total", "+=", "1", "\n", "test_correct_top1", "+=", "pred_top1", ".", "item", "(", ")", "\n", "test_correct_top5", "+=", "pred_top5", ".", "item", "(", ")", "\n", "\n", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "loss_per_batch", ".", "append", "(", "F", ".", "nll_loss", "(", "output", ",", "target", ")", ".", "item", "(", ")", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "k", "=", "5", "\n", "\n", "pred_topk", "=", "torch", ".", "topk", "(", "output", ",", "k", ")", "[", "1", "]", "\n", "# print(pred_topk)", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "                ", "correct_topk", "+=", "(", "pred_topk", "[", ":", ",", "i", "]", ".", "view_as", "(", "pred", ")", ")", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# print(correct_topk)", "\n", "", "acc_val_per_batch", ".", "append", "(", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "test_batch_size", ")", ")", "\n", "acc_val_per_batch", ".", "append", "(", "100.", "*", "correct_topk", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "test_batch_size", ")", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "acc_top1", "=", "float", "(", "test_correct_top1", ")", "/", "float", "(", "test_total", ")", "\n", "acc_top5", "=", "float", "(", "test_correct_top5", ")", "/", "float", "(", "test_total", ")", "\n", "\n", "print", "(", "\n", "'\\nTest set: Average loss: {:.4f}, top 1 Accuracy: {:.2f}% top 5 Accuracy: {:.2f}% \\n'", ".", "format", "(", "\n", "test_loss", ",", "acc_top1", ",", "acc_top5", ")", ")", "\n", "\n", "output_log", ".", "write", "(", "\n", "'\\nTest set: Average loss: {:.4f}, top 1 Accuracy: {:.2f}% top 5 Accuracy: {:.2f}% \\n'", ".", "format", "(", "\n", "test_loss", ",", "acc_top1", ",", "acc_top5", ")", ")", "\n", "output_log", ".", "flush", "(", ")", "\n", "\n", "loss_per_epoch", "=", "[", "np", ".", "average", "(", "loss_per_batch", ")", "]", "\n", "acc_val_per_epoch", "=", "[", "np", ".", "array", "(", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", "]", "\n", "acc_val_per_epoch_topk", "=", "[", "np", ".", "array", "(", "100.", "*", "correct_topk", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", "]", "\n", "\n", "return", "loss_per_epoch", ",", "acc_val_per_epoch", ",", "acc_val_per_epoch_topk", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.data_prepare_animal10N.Animal10.__init__": [[39, 54], ["os.path.join", "data_prepare_animal10N.Animal10.targets.append", "os.listdir", "os.path.isfile", "path.split", "int", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "split", "=", "'train'", ",", "data_path", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "if", "data_path", "is", "None", ":", "\n", "            ", "data_path", "=", "'/data/animal10/raw_image_ver/raw_image'", "\n", "\n", "", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "split", "+", "'ing'", ")", "\n", "\n", "self", ".", "image_files", "=", "[", "f", "for", "f", "in", "listdir", "(", "self", ".", "image_dir", ")", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "f", ")", ")", "]", "\n", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "for", "path", "in", "self", ".", "image_files", ":", "\n", "            ", "label", "=", "path", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "self", ".", "targets", ".", "append", "(", "int", "(", "label", ")", ")", "\n", "\n", "", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.data_prepare_animal10N.Animal10.__getitem__": [[55, 67], ["os.path.join", "PIL.Image.open", "numpy.array().astype", "data_prepare_animal10N.Animal10.transform", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "self", ".", "image_files", "[", "index", "]", ")", "\n", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "label", "=", "self", ".", "targets", "[", "index", "]", "\n", "label", "=", "np", ".", "array", "(", "label", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "return", "image", ",", "torch", ".", "from_numpy", "(", "label", ")", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.data_prepare_animal10N.Animal10.__len__": [[68, 70], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.data_prepare_animal10N.Animal10.update_corrupted_label": [[71, 73], ["None"], "methods", ["None"], ["", "def", "update_corrupted_label", "(", "self", ",", "noise_label", ")", ":", "\n", "        ", "self", ".", "targets", "[", ":", "]", "=", "noise_label", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.data_prepare_animal10N.Animal10.return_corrupted_label": [[74, 76], ["None"], "methods", ["None"], ["", "def", "return_corrupted_label", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.data_prepare_animal10N.resize": [[12, 36], ["isinstance", "img.resize", "min", "int", "int", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.maclll_selc.real-world_noise.data_prepare_animal10N.resize"], ["def", "resize", "(", "img", ",", "size", ",", "max_size", "=", "1000", ")", ":", "\n", "    ", "'''Resize the input PIL image to the given size.\n    Args:\n      img: (PIL.Image) image to be resized.\n      size: (tuple or int)\n        - if is tuple, resize image to the size.\n        - if is int, resize the shorter side to the size while maintaining the aspect ratio.\n      max_size: (int) when size is int, limit the image longer size to max_size.\n                This is essential to limit the usage of GPU memory.\n    Returns:\n      img: (PIL.Image) resized image.\n    '''", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "        ", "size_min", "=", "min", "(", "w", ",", "h", ")", "\n", "sw", "=", "sh", "=", "float", "(", "size", ")", "/", "size_min", "\n", "\n", "ow", "=", "int", "(", "w", "*", "sw", "+", "0.5", ")", "\n", "oh", "=", "int", "(", "h", "*", "sh", "+", "0.5", ")", "\n", "", "else", ":", "\n", "        ", "ow", ",", "oh", "=", "size", "\n", "sw", "=", "float", "(", "ow", ")", "/", "w", "\n", "sh", "=", "float", "(", "oh", ")", "/", "h", "\n", "", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_Clothing1M.SELCLoss.__init__": [[45, 53], ["super().__init__", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "labels", ",", "num_classes", ",", "es", "=", "10", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", "SELCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "soft_labels", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", "[", "0", "]", ",", "num_classes", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "args", ".", "gpuid", ")", "\n", "self", ".", "soft_labels", "[", "torch", ".", "arange", "(", "labels", ".", "shape", "[", "0", "]", ")", ",", "labels", "]", "=", "1", "\n", "self", ".", "es", "=", "es", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "CELoss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_Clothing1M.SELCLoss.forward": [[54, 66], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "train_Clothing1M.SELCLoss.CELoss", "train_Clothing1M.SELCLoss.mean", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "selc_loss.mean", "logits.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ",", "index", ",", "epoch", ")", ":", "\n", "        ", "pred", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "if", "epoch", "<=", "self", ".", "es", ":", "\n", "            ", "ce", "=", "self", ".", "CELoss", "(", "logits", ",", "labels", ")", "\n", "return", "ce", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "pred_detach", "=", "F", ".", "softmax", "(", "logits", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "soft_labels", "[", "index", "]", "=", "self", ".", "momentum", "*", "self", ".", "soft_labels", "[", "index", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "pred_detach", "\n", "\n", "selc_loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "log", "(", "pred", ")", "*", "self", ".", "soft_labels", "[", "index", "]", ",", "dim", "=", "1", ")", "\n", "return", "selc_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_Clothing1M.train": [[68, 107], ["model.train", "enumerate", "optimizer.zero_grad", "model", "criterion.backward", "optimizer.step", "loss_per_batch.append", "pred.eq().sum().item", "acc_train_per_batch.append", "numpy.average", "numpy.average", "data.to", "target.to", "criterion", "criterion", "criterion.item", "output.max", "print", "output_log.write", "output_log.flush", "pred.eq().sum", "len", "criterion.item", "len", "criterion.item", "pred.eq", "len", "len", "len", "len", "target.view_as"], "function", ["home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_Clothing1M.train"], ["", "", "", "def", "train", "(", "args", ",", "model", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "loss_per_batch", "=", "[", "]", "\n", "acc_train_per_batch", "=", "[", "]", "\n", "correct", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ",", "index", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "features", "=", "model", "(", "data", ")", "\n", "if", "args", ".", "loss", "==", "'SELCLoss'", ":", "\n", "            ", "loss", "=", "criterion", "(", "output", ",", "target", ",", "index", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss_per_batch", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# save accuracy:", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "acc_train_per_batch", ".", "append", "(", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "args", ".", "batch_size", ")", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f} Accuracy: {:.0f}%, Learning rate: {:.6f}\\n'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ",", "\n", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "args", ".", "batch_size", ")", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "output_log", ".", "write", "(", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f} Accuracy: {:.0f}%, Learning rate: {:.6f}\\n'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ",", "\n", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "args", ".", "batch_size", ")", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "output_log", ".", "flush", "(", ")", "\n", "\n", "", "", "loss_per_epoch", "=", "[", "np", ".", "average", "(", "loss_per_batch", ")", "]", "\n", "acc_train_per_epoch", "=", "[", "np", ".", "average", "(", "acc_train_per_batch", ")", "]", "\n", "return", "loss_per_epoch", ",", "acc_train_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_Clothing1M.test_cleaning": [[109, 142], ["model.eval", "len", "print", "output_log.write", "output_log.flush", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.average", "numpy.array", "model", "torch.log_softmax", "torch.nll_loss().item", "loss_per_batch.append", "pred.eq().sum().item", "acc_val_per_batch.append", "len", "len", "data.to", "target.to", "torch.nll_loss().item", "F.log_softmax.max", "len", "len", "len", "torch.nll_loss", "pred.eq().sum", "torch.nll_loss", "pred.eq", "target.view_as"], "function", ["None"], ["", "def", "test_cleaning", "(", "test_batch_size", ",", "model", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "loss_per_batch", "=", "[", "]", "\n", "acc_val_per_batch", "=", "[", "]", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", ",", "_", "=", "model", "(", "data", ")", "\n", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "loss_per_batch", ".", "append", "(", "F", ".", "nll_loss", "(", "output", ",", "target", ")", ".", "item", "(", ")", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "acc_val_per_batch", ".", "append", "(", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "test_batch_size", ")", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%).\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "output_log", ".", "write", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%).\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "output_log", ".", "flush", "(", ")", "\n", "\n", "loss_per_epoch", "=", "[", "np", ".", "average", "(", "loss_per_batch", ")", "]", "\n", "acc_val_per_epoch", "=", "[", "np", ".", "array", "(", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", "]", "\n", "\n", "return", "loss_per_epoch", ",", "acc_val_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_Clothing1M.test_val": [[144, 177], ["model.eval", "len", "print", "output_log.write", "output_log.flush", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.average", "numpy.array", "model", "torch.log_softmax", "torch.nll_loss().item", "loss_per_batch.append", "pred.eq().sum().item", "acc_val_per_batch.append", "len", "len", "data.to", "target.to", "torch.nll_loss().item", "F.log_softmax.max", "len", "len", "len", "torch.nll_loss", "pred.eq().sum", "torch.nll_loss", "pred.eq", "target.view_as"], "function", ["None"], ["", "def", "test_val", "(", "val_batch_size", ",", "model", ",", "device", ",", "val_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "loss_per_batch", "=", "[", "]", "\n", "acc_val_per_batch", "=", "[", "]", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", ",", "_", "=", "model", "(", "data", ")", "\n", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "loss_per_batch", ".", "append", "(", "F", ".", "nll_loss", "(", "output", ",", "target", ")", ".", "item", "(", ")", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "acc_val_per_batch", ".", "append", "(", "100.", "*", "correct", "/", "(", "(", "batch_idx", "+", "1", ")", "*", "val_batch_size", ")", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "val_loader", ".", "dataset", ")", "\n", "\n", "print", "(", "'\\nVal set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%).\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "val_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "val_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "output_log", ".", "write", "(", "'\\nVal set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%).\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "val_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "val_loader", ".", "dataset", ")", ")", ")", "\n", "output_log", ".", "flush", "(", ")", "\n", "\n", "loss_per_epoch", "=", "[", "np", ".", "average", "(", "loss_per_batch", ")", "]", "\n", "acc_val_per_epoch", "=", "[", "np", ".", "array", "(", "100.", "*", "correct", "/", "len", "(", "val_loader", ".", "dataset", ")", ")", "]", "\n", "\n", "return", "loss_per_epoch", ",", "acc_val_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.train_Clothing1M.create_model": [[189, 195], ["torchvision.resnet50", "torch.Linear", "torchextractor.Extractor", "model.to.to"], "function", ["None"], ["def", "create_model", "(", ")", ":", "\n", "    ", "model", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "args", ".", "num_class", ")", "\n", "model", "=", "tx", ".", "Extractor", "(", "model", ",", "[", "'avgpool'", "]", ")", "\n", "model", "=", "model", ".", "to", "(", "args", ".", "gpuid", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.dataloader_clothing1M.clothing_dataset.__init__": [[9, 69], ["open", "f.read().splitlines", "open", "f.read().splitlines", "len", "random.shuffle", "torch.zeros", "l.split", "int", "l.split", "int", "open", "f.read().splitlines", "enumerate", "f.read", "f.read", "train_imgs.append", "dataloader_clothing1M.clothing_dataset.train_imgs.append", "dataloader_clothing1M.clothing_dataset.selected_train_labels.append", "open", "f.read().splitlines", "f.read", "len", "dataloader_clothing1M.clothing_dataset.test_imgs.append", "open", "f.read().splitlines", "f.read", "dataloader_clothing1M.clothing_dataset.val_imgs.append", "f.read"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", ",", "mode", ",", "num_samples", "=", "0", ",", "num_class", "=", "14", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "train_labels", "=", "{", "}", "\n", "self", ".", "test_labels", "=", "{", "}", "\n", "self", ".", "val_labels", "=", "{", "}", "\n", "self", ".", "selected_train_labels", "=", "[", "]", "\n", "\n", "with", "open", "(", "'%s/noisy_label_kv.txt'", "%", "self", ".", "root", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "for", "l", "in", "lines", ":", "\n", "                ", "entry", "=", "l", ".", "split", "(", ")", "\n", "img_path", "=", "'%s/'", "%", "self", ".", "root", "+", "entry", "[", "0", "]", "[", "7", ":", "]", "\n", "self", ".", "train_labels", "[", "img_path", "]", "=", "int", "(", "entry", "[", "1", "]", ")", "\n", "", "", "with", "open", "(", "'%s/clean_label_kv.txt'", "%", "self", ".", "root", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "for", "l", "in", "lines", ":", "\n", "                ", "entry", "=", "l", ".", "split", "(", ")", "\n", "img_path", "=", "'%s/'", "%", "self", ".", "root", "+", "entry", "[", "0", "]", "[", "7", ":", "]", "\n", "self", ".", "test_labels", "[", "img_path", "]", "=", "int", "(", "entry", "[", "1", "]", ")", "\n", "\n", "", "", "if", "mode", "==", "'all'", ":", "\n", "            ", "train_imgs", "=", "[", "]", "\n", "with", "open", "(", "'%s/noisy_train_key_list.txt'", "%", "self", ".", "root", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "lines", ")", ":", "\n", "                    ", "img_path", "=", "'%s/'", "%", "self", ".", "root", "+", "l", "[", "7", ":", "]", "\n", "# train_imgs.append(img_path)", "\n", "train_imgs", ".", "append", "(", "(", "i", ",", "img_path", ")", ")", "\n", "# print(train_imgs[:3])", "\n", "", "", "self", ".", "num_raw_example", "=", "len", "(", "train_imgs", ")", "\n", "# print(self.num_raw_example)", "\n", "random", ".", "shuffle", "(", "train_imgs", ")", "#whether shuffle the data", "\n", "class_num", "=", "torch", ".", "zeros", "(", "num_class", ")", "\n", "self", ".", "train_imgs", "=", "[", "]", "\n", "for", "id_raw", ",", "impath", "in", "train_imgs", ":", "\n", "                ", "label", "=", "self", ".", "train_labels", "[", "impath", "]", "\n", "# print('label is {}'.format(label))", "\n", "if", "class_num", "[", "label", "]", "<", "(", "num_samples", "/", "14", ")", "and", "len", "(", "self", ".", "train_imgs", ")", "<", "num_samples", ":", "\n", "                    ", "self", ".", "train_imgs", ".", "append", "(", "(", "id_raw", ",", "impath", ")", ")", "\n", "class_num", "[", "label", "]", "+=", "1", "\n", "self", ".", "selected_train_labels", ".", "append", "(", "label", ")", "\n", "# print(train_imgs[:10])", "\n", "# random.shuffle(self.train_imgs)", "\n", "", "", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "test_imgs", "=", "[", "]", "\n", "with", "open", "(", "'%s/clean_test_key_list.txt'", "%", "self", ".", "root", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "for", "l", "in", "lines", ":", "\n", "                    ", "img_path", "=", "'%s/'", "%", "self", ".", "root", "+", "l", "[", "7", ":", "]", "\n", "self", ".", "test_imgs", ".", "append", "(", "img_path", ")", "\n", "", "", "", "elif", "mode", "==", "'val'", ":", "\n", "            ", "self", ".", "val_imgs", "=", "[", "]", "\n", "with", "open", "(", "'%s/clean_val_key_list.txt'", "%", "self", ".", "root", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "for", "l", "in", "lines", ":", "\n", "                    ", "img_path", "=", "'%s/'", "%", "self", ".", "root", "+", "l", "[", "7", ":", "]", "\n", "self", ".", "val_imgs", ".", "append", "(", "img_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.dataloader_clothing1M.clothing_dataset.__getitem__": [[70, 89], ["PIL.Image.open().convert", "dataloader_clothing1M.clothing_dataset.transform", "PIL.Image.open().convert", "dataloader_clothing1M.clothing_dataset.transform", "PIL.Image.open", "PIL.Image.open().convert", "dataloader_clothing1M.clothing_dataset.transform", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'all'", ":", "\n", "            ", "id_raw", ",", "img_path", "=", "self", ".", "train_imgs", "[", "index", "]", "\n", "target", "=", "self", ".", "train_labels", "[", "img_path", "]", "\n", "image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "image", ")", "\n", "return", "img", ",", "target", ",", "index", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "img_path", "=", "self", ".", "test_imgs", "[", "index", "]", "\n", "target", "=", "self", ".", "test_labels", "[", "img_path", "]", "\n", "image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "image", ")", "\n", "return", "img", ",", "target", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img_path", "=", "self", ".", "val_imgs", "[", "index", "]", "\n", "target", "=", "self", ".", "test_labels", "[", "img_path", "]", "\n", "image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "image", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.dataloader_clothing1M.clothing_dataset.__len__": [[90, 97], ["len", "len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_imgs", ")", "\n", "", "if", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "return", "len", "(", "self", ".", "val_imgs", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.dataloader_clothing1M.clothing_dataloader.__init__": [[100, 122], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "batch_size", ",", "num_batches", ",", "num_workers", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "num_batches", "=", "num_batches", "\n", "self", ".", "root", "=", "root", "\n", "\n", "self", ".", "transform_samples", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.6959", ",", "0.6537", ",", "0.6371", ")", ",", "(", "0.3113", ",", "0.3192", ",", "0.3214", ")", ")", ",", "\n", "]", ")", "\n", "self", ".", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.6959", ",", "0.6537", ",", "0.6371", ")", ",", "(", "0.3113", ",", "0.3192", ",", "0.3214", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.real-world_noise.dataloader_clothing1M.clothing_dataloader.run": [[124, 159], ["dataloader_clothing1M.clothing_dataset", "torch.utils.data.DataLoader", "dataloader_clothing1M.clothing_dataset", "torch.utils.data.DataLoader", "numpy.asarray", "numpy.asarray", "dataloader_clothing1M.clothing_dataset", "torch.utils.data.DataLoader", "dataloader_clothing1M.clothing_dataset", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "train_dataset", "=", "clothing_dataset", "(", "self", ".", "root", ",", "transform", "=", "self", ".", "transform_train", ",", "mode", "=", "'all'", ",", "\n", "num_samples", "=", "self", ".", "num_batches", "*", "self", ".", "batch_size", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "return", "train_loader", ",", "np", ".", "asarray", "(", "train_dataset", ".", "selected_train_labels", ")", "\n", "", "if", "mode", "==", "'eval_train'", ":", "\n", "            ", "train_dataset", "=", "clothing_dataset", "(", "self", ".", "root", ",", "transform", "=", "self", ".", "transform_samples", ",", "mode", "=", "'all'", ",", "\n", "num_samples", "=", "self", ".", "num_batches", "*", "self", ".", "batch_size", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "return", "train_loader", ",", "np", ".", "asarray", "(", "train_dataset", ".", "selected_train_labels", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "test_dataset", "=", "clothing_dataset", "(", "self", ".", "root", ",", "transform", "=", "self", ".", "transform_test", ",", "mode", "=", "'test'", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "test_dataset", ",", "\n", "batch_size", "=", "128", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "return", "test_loader", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "            ", "val_dataset", "=", "clothing_dataset", "(", "self", ".", "root", ",", "transform", "=", "self", ".", "transform_test", ",", "mode", "=", "'val'", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "val_dataset", ",", "\n", "batch_size", "=", "128", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "return", "val_loader", "", "", "", "", ""]], "home.repos.pwc.inspect_result.maclll_selc.models.vgg.VGG.__init__": [[31, 61], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "vgg.VGG._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.maclll_selc.models.vgg.VGG._initialize_weights"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "features", ":", "nn", ".", "Module", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "init_weights", ":", "bool", "=", "True", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "c_linear", "=", "nn", ".", "Linear", "(", "4096", ",", "1", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "7", ",", "7", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "7", "*", "7", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n", "self", ".", "classifier1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "7", "*", "7", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "1", ")", ",", "\n", ")", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.vgg.VGG.forward": [[62, 69], ["vgg.VGG.features", "vgg.VGG.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "vgg.VGG.classifier1", "vgg.VGG.classifier"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.InceptionResNetV2.features"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "c", "=", "self", ".", "classifier1", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.vgg.VGG._initialize_weights": [[70, 82], ["vgg.VGG.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.vgg.make_layers": [[84, 99], ["torch.Sequential", "typing.cast", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "", "", "def", "make_layers", "(", "cfg", ":", "List", "[", "Union", "[", "str", ",", "int", "]", "]", ",", "batch_norm", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "    ", "layers", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "v", "=", "cast", "(", "int", ",", "v", ")", "\n", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.vgg._vgg": [[109, 118], ["vgg.VGG", "vgg.make_layers", "load_state_dict_from_url", "VGG.load_state_dict"], "function", ["home.repos.pwc.inspect_result.maclll_selc.models.vgg.make_layers"], ["def", "_vgg", "(", "arch", ":", "str", ",", "cfg", ":", "str", ",", "batch_norm", ":", "bool", ",", "pretrained", ":", "bool", ",", "progress", ":", "bool", ",", "**", "kwargs", ":", "Any", ")", "->", "VGG", ":", "\n", "    ", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG", "(", "make_layers", "(", "cfgs", "[", "cfg", "]", ",", "batch_norm", "=", "batch_norm", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.vgg.vgg11": [[120, 129], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.maclll_selc.models.vgg._vgg"], ["", "def", "vgg11", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "VGG", ":", "\n", "    ", "r\"\"\"VGG 11-layer model (configuration \"A\") from\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg11'", ",", "'A'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.vgg.vgg11_bn": [[131, 140], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.maclll_selc.models.vgg._vgg"], ["", "def", "vgg11_bn", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "VGG", ":", "\n", "    ", "r\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg11_bn'", ",", "'A'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.vgg.vgg13": [[142, 151], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.maclll_selc.models.vgg._vgg"], ["", "def", "vgg13", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "VGG", ":", "\n", "    ", "r\"\"\"VGG 13-layer model (configuration \"B\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg13'", ",", "'B'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.vgg.vgg13_bn": [[153, 162], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.maclll_selc.models.vgg._vgg"], ["", "def", "vgg13_bn", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "VGG", ":", "\n", "    ", "r\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg13_bn'", ",", "'B'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.vgg.vgg16": [[164, 173], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.maclll_selc.models.vgg._vgg"], ["", "def", "vgg16", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "VGG", ":", "\n", "    ", "r\"\"\"VGG 16-layer model (configuration \"D\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg16'", ",", "'D'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.vgg.vgg16_bn": [[175, 184], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.maclll_selc.models.vgg._vgg"], ["", "def", "vgg16_bn", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "VGG", ":", "\n", "    ", "r\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg16_bn'", ",", "'D'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.vgg.vgg19": [[186, 195], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.maclll_selc.models.vgg._vgg"], ["", "def", "vgg19", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "VGG", ":", "\n", "    ", "r\"\"\"VGG 19-layer model (configuration \"E\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg19'", ",", "'E'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.vgg.vgg19_bn": [[197, 206], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.maclll_selc.models.vgg._vgg"], ["", "def", "vgg19_bn", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "VGG", ":", "\n", "    ", "r\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg19_bn'", ",", "'E'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.maclll_selc.models.wideresnet.wide_basic.__init__": [[22, 34], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.wideresnet.wide_basic.forward": [[36, 42], ["wideresnet.wide_basic.dropout", "wideresnet.wide_basic.conv2", "wideresnet.wide_basic.shortcut", "wideresnet.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wideresnet.wide_basic.bn2", "wideresnet.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.wideresnet.Wide_ResNet.__init__": [[44, 62], ["torch.Module.__init__", "print", "wideresnet.conv3x3", "wideresnet.Wide_ResNet._wide_layer", "wideresnet.Wide_ResNet._wide_layer", "wideresnet.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.maclll_selc.models.resnet.conv3x3", "home.repos.pwc.inspect_result.maclll_selc.models.wideresnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.maclll_selc.models.wideresnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.maclll_selc.models.wideresnet.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", ",", "use_log_softmax", "=", "False", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "use_log_softmax", "=", "use_log_softmax", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.wideresnet.Wide_ResNet._wide_layer": [[63, 72], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.wideresnet.Wide_ResNet.forward": [[73, 87], ["wideresnet.Wide_ResNet.conv1", "wideresnet.Wide_ResNet.layer1", "wideresnet.Wide_ResNet.layer2", "wideresnet.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wideresnet.Wide_ResNet.view", "wideresnet.Wide_ResNet.linear", "wideresnet.Wide_ResNet.bn1", "wideresnet.Wide_ResNet.size", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "if", "self", ".", "use_log_softmax", ":", "\n", "            ", "return", "F", ".", "log_softmax", "(", "out", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "out", "", "", "", "", ""]], "home.repos.pwc.inspect_result.maclll_selc.models.wideresnet.conv3x3": [[9, 11], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.wideresnet.conv_init": [[12, 20], ["classname.find", "torch.xavier_uniform", "torch.constant", "classname.find", "torch.constant", "torch.constant", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.BasicConv2d.__init__": [[10, 20], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ")", "# verify bias false", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ",", "\n", "eps", "=", "0.001", ",", "# value found in tensorflow", "\n", "momentum", "=", "0.1", ",", "# default pytorch value", "\n", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.BasicConv2d.forward": [[21, 26], ["InceptionResNetV2.BasicConv2d.conv", "InceptionResNetV2.BasicConv2d.bn", "InceptionResNetV2.BasicConv2d.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.Mixed_5b.__init__": [[30, 49], ["torch.Module.__init__", "InceptionResNetV2.BasicConv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "torch.AvgPool2d", "torch.AvgPool2d", "InceptionResNetV2.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Mixed_5b", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "branch0", "=", "BasicConv2d", "(", "192", ",", "96", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "BasicConv2d", "(", "192", ",", "48", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BasicConv2d", "(", "48", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "BasicConv2d", "(", "192", ",", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BasicConv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "BasicConv2d", "(", "96", ",", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "\n", "self", ".", "branch3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", ",", "\n", "BasicConv2d", "(", "192", ",", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.Mixed_5b.forward": [[51, 58], ["InceptionResNetV2.Mixed_5b.branch0", "InceptionResNetV2.Mixed_5b.branch1", "InceptionResNetV2.Mixed_5b.branch2", "InceptionResNetV2.Mixed_5b.branch3", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "self", ".", "branch0", "(", "x", ")", "\n", "x1", "=", "self", ".", "branch1", "(", "x", ")", "\n", "x2", "=", "self", ".", "branch2", "(", "x", ")", "\n", "x3", "=", "self", ".", "branch3", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x0", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.Block35.__init__": [[62, 82], ["torch.Module.__init__", "InceptionResNetV2.BasicConv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Block35", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "branch0", "=", "BasicConv2d", "(", "320", ",", "32", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "BasicConv2d", "(", "320", ",", "32", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BasicConv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "BasicConv2d", "(", "320", ",", "32", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BasicConv2d", "(", "32", ",", "48", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "BasicConv2d", "(", "48", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "\n", "self", ".", "conv2d", "=", "nn", ".", "Conv2d", "(", "128", ",", "320", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.Block35.forward": [[83, 92], ["InceptionResNetV2.Block35.branch0", "InceptionResNetV2.Block35.branch1", "InceptionResNetV2.Block35.branch2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "InceptionResNetV2.Block35.conv2d", "InceptionResNetV2.Block35.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "self", ".", "branch0", "(", "x", ")", "\n", "x1", "=", "self", ".", "branch1", "(", "x", ")", "\n", "x2", "=", "self", ".", "branch2", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x0", ",", "x1", ",", "x2", ")", ",", "1", ")", "\n", "out", "=", "self", ".", "conv2d", "(", "out", ")", "\n", "out", "=", "out", "*", "self", ".", "scale", "+", "x", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.Mixed_6a.__init__": [[96, 108], ["torch.Module.__init__", "InceptionResNetV2.BasicConv2d", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Mixed_6a", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "branch0", "=", "BasicConv2d", "(", "320", ",", "384", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "BasicConv2d", "(", "320", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BasicConv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "BasicConv2d", "(", "256", ",", "384", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.Mixed_6a.forward": [[109, 115], ["InceptionResNetV2.Mixed_6a.branch0", "InceptionResNetV2.Mixed_6a.branch1", "InceptionResNetV2.Mixed_6a.branch2", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "self", ".", "branch0", "(", "x", ")", "\n", "x1", "=", "self", ".", "branch1", "(", "x", ")", "\n", "x2", "=", "self", ".", "branch2", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x0", ",", "x1", ",", "x2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.Block17.__init__": [[119, 134], ["torch.Module.__init__", "InceptionResNetV2.BasicConv2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Block17", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "branch0", "=", "BasicConv2d", "(", "1088", ",", "192", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "BasicConv2d", "(", "1088", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BasicConv2d", "(", "128", ",", "160", ",", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "stride", "=", "1", ",", "padding", "=", "(", "0", ",", "3", ")", ")", ",", "\n", "BasicConv2d", "(", "160", ",", "192", ",", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", ")", "\n", "\n", "self", ".", "conv2d", "=", "nn", ".", "Conv2d", "(", "384", ",", "1088", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.Block17.forward": [[135, 143], ["InceptionResNetV2.Block17.branch0", "InceptionResNetV2.Block17.branch1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "InceptionResNetV2.Block17.conv2d", "InceptionResNetV2.Block17.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "self", ".", "branch0", "(", "x", ")", "\n", "x1", "=", "self", ".", "branch1", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x0", ",", "x1", ")", ",", "1", ")", "\n", "out", "=", "self", ".", "conv2d", "(", "out", ")", "\n", "out", "=", "out", "*", "self", ".", "scale", "+", "x", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.Mixed_7a.__init__": [[147, 167], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Mixed_7a", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "branch0", "=", "nn", ".", "Sequential", "(", "\n", "BasicConv2d", "(", "1088", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BasicConv2d", "(", "256", ",", "384", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", ")", "\n", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "BasicConv2d", "(", "1088", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BasicConv2d", "(", "256", ",", "288", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "BasicConv2d", "(", "1088", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BasicConv2d", "(", "256", ",", "288", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "BasicConv2d", "(", "288", ",", "320", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", ")", "\n", "\n", "self", ".", "branch3", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.Mixed_7a.forward": [[168, 175], ["InceptionResNetV2.Mixed_7a.branch0", "InceptionResNetV2.Mixed_7a.branch1", "InceptionResNetV2.Mixed_7a.branch2", "InceptionResNetV2.Mixed_7a.branch3", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "self", ".", "branch0", "(", "x", ")", "\n", "x1", "=", "self", ".", "branch1", "(", "x", ")", "\n", "x2", "=", "self", ".", "branch2", "(", "x", ")", "\n", "x3", "=", "self", ".", "branch3", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x0", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.Block8.__init__": [[179, 196], ["torch.Module.__init__", "InceptionResNetV2.BasicConv2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "1.0", ",", "noReLU", "=", "False", ")", ":", "\n", "        ", "super", "(", "Block8", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "noReLU", "=", "noReLU", "\n", "\n", "self", ".", "branch0", "=", "BasicConv2d", "(", "2080", ",", "192", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "BasicConv2d", "(", "2080", ",", "192", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BasicConv2d", "(", "192", ",", "224", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "(", "0", ",", "1", ")", ")", ",", "\n", "BasicConv2d", "(", "224", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "(", "1", ",", "0", ")", ")", "\n", ")", "\n", "\n", "self", ".", "conv2d", "=", "nn", ".", "Conv2d", "(", "448", ",", "2080", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "if", "not", "self", ".", "noReLU", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.Block8.forward": [[197, 206], ["InceptionResNetV2.Block8.branch0", "InceptionResNetV2.Block8.branch1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "InceptionResNetV2.Block8.conv2d", "InceptionResNetV2.Block8.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "self", ".", "branch0", "(", "x", ")", "\n", "x1", "=", "self", ".", "branch1", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x0", ",", "x1", ")", ",", "1", ")", "\n", "out", "=", "self", ".", "conv2d", "(", "out", ")", "\n", "out", "=", "out", "*", "self", ".", "scale", "+", "x", "\n", "if", "not", "self", ".", "noReLU", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.InceptionResNetV2.__init__": [[210, 278], ["torch.Module.__init__", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "torch.MaxPool2d", "torch.MaxPool2d", "InceptionResNetV2.BasicConv2d", "InceptionResNetV2.BasicConv2d", "torch.MaxPool2d", "torch.MaxPool2d", "InceptionResNetV2.Mixed_5b", "torch.Sequential", "torch.Sequential", "InceptionResNetV2.Mixed_6a", "torch.Sequential", "torch.Sequential", "InceptionResNetV2.Mixed_7a", "torch.Sequential", "torch.Sequential", "InceptionResNetV2.Block8", "InceptionResNetV2.BasicConv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "InceptionResNetV2.Block35", "InceptionResNetV2.Block35", "InceptionResNetV2.Block35", "InceptionResNetV2.Block35", "InceptionResNetV2.Block35", "InceptionResNetV2.Block35", "InceptionResNetV2.Block35", "InceptionResNetV2.Block35", "InceptionResNetV2.Block35", "InceptionResNetV2.Block35", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block17", "InceptionResNetV2.Block8", "InceptionResNetV2.Block8", "InceptionResNetV2.Block8", "InceptionResNetV2.Block8", "InceptionResNetV2.Block8", "InceptionResNetV2.Block8", "InceptionResNetV2.Block8", "InceptionResNetV2.Block8", "InceptionResNetV2.Block8"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "50", ")", ":", "\n", "        ", "super", "(", "InceptionResNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Special attributs", "\n", "self", ".", "input_space", "=", "None", "\n", "self", ".", "input_size", "=", "(", "299", ",", "299", ",", "3", ")", "\n", "self", ".", "mean", "=", "None", "\n", "self", ".", "std", "=", "None", "\n", "# Modules", "\n", "self", ".", "conv2d_1a", "=", "BasicConv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv2d_2a", "=", "BasicConv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv2d_2b", "=", "BasicConv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "maxpool_3a", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv2d_3b", "=", "BasicConv2d", "(", "64", ",", "80", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv2d_4a", "=", "BasicConv2d", "(", "80", ",", "192", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "self", ".", "maxpool_5a", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "mixed_5b", "=", "Mixed_5b", "(", ")", "\n", "self", ".", "repeat", "=", "nn", ".", "Sequential", "(", "\n", "Block35", "(", "scale", "=", "0.17", ")", ",", "\n", "Block35", "(", "scale", "=", "0.17", ")", ",", "\n", "Block35", "(", "scale", "=", "0.17", ")", ",", "\n", "Block35", "(", "scale", "=", "0.17", ")", ",", "\n", "Block35", "(", "scale", "=", "0.17", ")", ",", "\n", "Block35", "(", "scale", "=", "0.17", ")", ",", "\n", "Block35", "(", "scale", "=", "0.17", ")", ",", "\n", "Block35", "(", "scale", "=", "0.17", ")", ",", "\n", "Block35", "(", "scale", "=", "0.17", ")", ",", "\n", "Block35", "(", "scale", "=", "0.17", ")", "\n", ")", "\n", "self", ".", "mixed_6a", "=", "Mixed_6a", "(", ")", "\n", "self", ".", "repeat_1", "=", "nn", ".", "Sequential", "(", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", ",", "\n", "Block17", "(", "scale", "=", "0.10", ")", "\n", ")", "\n", "self", ".", "mixed_7a", "=", "Mixed_7a", "(", ")", "\n", "self", ".", "repeat_2", "=", "nn", ".", "Sequential", "(", "\n", "Block8", "(", "scale", "=", "0.20", ")", ",", "\n", "Block8", "(", "scale", "=", "0.20", ")", ",", "\n", "Block8", "(", "scale", "=", "0.20", ")", ",", "\n", "Block8", "(", "scale", "=", "0.20", ")", ",", "\n", "Block8", "(", "scale", "=", "0.20", ")", ",", "\n", "Block8", "(", "scale", "=", "0.20", ")", ",", "\n", "Block8", "(", "scale", "=", "0.20", ")", ",", "\n", "Block8", "(", "scale", "=", "0.20", ")", ",", "\n", "Block8", "(", "scale", "=", "0.20", ")", "\n", ")", "\n", "self", ".", "block8", "=", "Block8", "(", "noReLU", "=", "True", ")", "\n", "self", ".", "conv2d_7b", "=", "BasicConv2d", "(", "2080", ",", "1536", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "avgpool_1a", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "# nn.AvgPool2d(8, count_include_pad=False)", "\n", "self", ".", "last_linear", "=", "nn", ".", "Linear", "(", "1536", ",", "num_classes", ")", "\n", "self", ".", "conf_linear", "=", "nn", ".", "Linear", "(", "1536", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.InceptionResNetV2.features": [[279, 296], ["InceptionResNetV2.InceptionResNetV2.conv2d_1a", "InceptionResNetV2.InceptionResNetV2.conv2d_2a", "InceptionResNetV2.InceptionResNetV2.conv2d_2b", "InceptionResNetV2.InceptionResNetV2.maxpool_3a", "InceptionResNetV2.InceptionResNetV2.conv2d_3b", "InceptionResNetV2.InceptionResNetV2.conv2d_4a", "InceptionResNetV2.InceptionResNetV2.maxpool_5a", "InceptionResNetV2.InceptionResNetV2.mixed_5b", "InceptionResNetV2.InceptionResNetV2.repeat", "InceptionResNetV2.InceptionResNetV2.mixed_6a", "InceptionResNetV2.InceptionResNetV2.repeat_1", "InceptionResNetV2.InceptionResNetV2.mixed_7a", "InceptionResNetV2.InceptionResNetV2.repeat_2", "InceptionResNetV2.InceptionResNetV2.block8", "InceptionResNetV2.InceptionResNetV2.conv2d_7b"], "methods", ["None"], ["", "def", "features", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv2d_1a", "(", "input", ")", "\n", "x", "=", "self", ".", "conv2d_2a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d_2b", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool_3a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d_3b", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d_4a", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool_5a", "(", "x", ")", "\n", "x", "=", "self", ".", "mixed_5b", "(", "x", ")", "\n", "x", "=", "self", ".", "repeat", "(", "x", ")", "\n", "x", "=", "self", ".", "mixed_6a", "(", "x", ")", "\n", "x", "=", "self", ".", "repeat_1", "(", "x", ")", "\n", "x", "=", "self", ".", "mixed_7a", "(", "x", ")", "\n", "x", "=", "self", ".", "repeat_2", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d_7b", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.InceptionResNetV2.logits": [[297, 303], ["InceptionResNetV2.InceptionResNetV2.avgpool_1a", "x.view.view.view", "InceptionResNetV2.InceptionResNetV2.conf_linear", "InceptionResNetV2.InceptionResNetV2.last_linear", "x.view.view.size"], "methods", ["None"], ["", "def", "logits", "(", "self", ",", "features", ")", ":", "\n", "        ", "x", "=", "self", ".", "avgpool_1a", "(", "features", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "conf", "=", "self", ".", "conf_linear", "(", "x", ")", "\n", "out", "=", "self", ".", "last_linear", "(", "x", ")", "\n", "return", "out", ",", "x", ",", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.InceptionResNetV2.forward": [[304, 308], ["InceptionResNetV2.InceptionResNetV2.features", "InceptionResNetV2.InceptionResNetV2.logits"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.InceptionResNetV2.features", "home.repos.pwc.inspect_result.maclll_selc.models.InceptionResNetV2.InceptionResNetV2.logits"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "input", ")", "\n", "out", ",", "x", ",", "conf", "=", "self", ".", "logits", "(", "x", ")", "\n", "return", "out", ",", "x", ",", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.BasicBlock.__init__": [[23, 35], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.maclll_selc.models.resnet.conv3x3", "home.repos.pwc.inspect_result.maclll_selc.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.BasicBlock.forward": [[37, 43], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.PreActBlock.__init__": [[49, 60], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.maclll_selc.models.resnet.conv3x3", "home.repos.pwc.inspect_result.maclll_selc.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.PreActBlock.forward": [[62, 69], ["torch.relu", "torch.relu", "torch.relu", "resnet.PreActBlock.shortcut", "resnet.PreActBlock.conv1", "resnet.PreActBlock.conv2", "resnet.PreActBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.Bottleneck.__init__": [[74, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.Bottleneck.forward": [[90, 97], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.PreActBottleneck.__init__": [[103, 116], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.PreActBottleneck.forward": [[118, 126], ["torch.relu", "torch.relu", "torch.relu", "resnet.PreActBottleneck.shortcut", "resnet.PreActBottleneck.conv1", "resnet.PreActBottleneck.conv2", "resnet.PreActBottleneck.conv3", "resnet.PreActBottleneck.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.PreActBottleneck.bn2", "resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__": [[129, 141], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.maclll_selc.models.resnet.conv3x3", "home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "64", ")", "# number 1 indicate how many channels", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "c_linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet._make_layer": [[142, 149], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet.forward": [[150, 171], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.c_linear", "resnet.ResNet.linear", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "lin", "=", "0", ",", "lout", "=", "5", ")", ":", "\n", "        ", "out", "=", "x", "\n", "if", "lin", "<", "1", "and", "lout", ">", "-", "1", ":", "\n", "            ", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "", "if", "lin", "<", "2", "and", "lout", ">", "0", ":", "\n", "            ", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "", "if", "lin", "<", "3", "and", "lout", ">", "1", ":", "\n", "            ", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "", "if", "lin", "<", "4", "and", "lout", ">", "2", ":", "\n", "            ", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "", "if", "lin", "<", "5", "and", "lout", ">", "3", ":", "\n", "            ", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "", "if", "lout", ">", "4", ":", "\n", "            ", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feature", "=", "out", "\n", "out_c", "=", "self", ".", "c_linear", "(", "out", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "", "return", "out", ",", "feature", ",", "out_c", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.conv3x3": [[16, 18], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.ResNet34": [[172, 174], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet34", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.PreResNet18": [[175, 177], ["resnet.ResNet"], "function", ["None"], ["", "def", "PreResNet18", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "", "def", "PreResNet34", "(", "num_classes", "=", "10", ")", ":", "\n"]], "home.repos.pwc.inspect_result.maclll_selc.models.resnet.PreResNet34": [[177, 179], ["resnet.ResNet"], "function", ["None"], ["", "def", "PreResNet34", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]]}