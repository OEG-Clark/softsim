{"home.repos.pwc.inspect_result.xlhex_SceneGraphModification.scripts.visualisation.load": [[17, 24], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.load"], ["def", "load", "(", "output_file", ")", ":", "\n", "    ", "with", "open", "(", "output_file", ",", "\"rb\"", ")", "as", "fr", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "yield", "pickle", ".", "load", "(", "fr", ")", "\n", "", "except", "EOFError", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.scripts.visualisation.main": [[26, 95], ["visualisation.load", "enumerate", "visualisation.load", "enumerate", "item.nodes.data", "item.edges.data", "graph_src.append", "item.nodes.data", "item.edges.data", "graph_tgt.append", "open", "int", "os.path.exists", "os.makedirs", "docs.append", "docs.append", "spacy.displacy.render", "os.path.join", "spacy.displacy.render", "os.path.join", "print", "nodes.append", "edges.append", "nodes.append", "edges.append", "queries.append", "args.graph_idx.split", "open", "f.write", "open", "f.write", "line.strip"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.load", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.load"], ["", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "items", "=", "load", "(", "args", ".", "src_graph", ")", "\n", "graph_src", "=", "[", "]", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "items", ")", ":", "\n", "        ", "nodes", "=", "[", "]", "\n", "edges", "=", "[", "]", "\n", "for", "n", "in", "item", ".", "nodes", ".", "data", "(", ")", ":", "\n", "            ", "nodes", ".", "append", "(", "n", "[", "1", "]", "[", "\"feature\"", "]", ")", "\n", "", "for", "e", "in", "item", ".", "edges", ".", "data", "(", ")", ":", "\n", "            ", "edges", ".", "append", "(", "(", "e", "[", "0", "]", ",", "e", "[", "2", "]", "[", "\"feature\"", "]", ",", "e", "[", "1", "]", ")", ")", "\n", "\n", "", "graph_src", ".", "append", "(", "(", "nodes", ",", "edges", ")", ")", "\n", "\n", "", "items", "=", "load", "(", "args", ".", "tgt_graph", ")", "\n", "graph_tgt", "=", "[", "]", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "items", ")", ":", "\n", "        ", "nodes", "=", "[", "]", "\n", "edges", "=", "[", "]", "\n", "# if i > 4: break", "\n", "for", "n", "in", "item", ".", "nodes", ".", "data", "(", ")", ":", "\n", "            ", "nodes", ".", "append", "(", "n", "[", "1", "]", "[", "\"feature\"", "]", ")", "\n", "", "for", "e", "in", "item", ".", "edges", ".", "data", "(", ")", ":", "\n", "            ", "edges", ".", "append", "(", "(", "e", "[", "0", "]", ",", "e", "[", "2", "]", "[", "\"feature\"", "]", ",", "e", "[", "1", "]", ")", ")", "\n", "# edges.append(e[2][\"feature\"])", "\n", "\n", "", "graph_tgt", ".", "append", "(", "(", "nodes", ",", "edges", ")", ")", "\n", "\n", "", "queries", "=", "[", "]", "\n", "\n", "with", "open", "(", "args", ".", "query", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "queries", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "\n", "", "", "interested_idx", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "graph_idx", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "dump_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "dump_dir", ")", "\n", "\n", "", "for", "i", "in", "interested_idx", ":", "\n", "        ", "src_nodes", "=", "graph_src", "[", "i", "]", "[", "0", "]", "\n", "src_edges", "=", "graph_src", "[", "i", "]", "[", "1", "]", "\n", "tgt_nodes", "=", "graph_tgt", "[", "i", "]", "[", "0", "]", "\n", "tgt_edges", "=", "graph_tgt", "[", "i", "]", "[", "1", "]", "\n", "query", "=", "queries", "[", "i", "]", "\n", "\n", "docs", "=", "[", "]", "\n", "\n", "words", "=", "[", "{", "\"text\"", ":", "node", ",", "\"tag\"", ":", "\"\"", "}", "for", "node", "in", "src_nodes", "]", "\n", "arcs", "=", "[", "{", "\"start\"", ":", "arc", "[", "0", "]", ",", "\"end\"", ":", "arc", "[", "2", "]", ",", "\"label\"", ":", "arc", "[", "1", "]", ",", "\"dir\"", ":", "\"left\"", "if", "arc", "[", "1", "]", "==", "\"att\"", "else", "\"right\"", "}", "for", "arc", "in", "src_edges", "]", "\n", "docs", ".", "append", "(", "{", "\"words\"", ":", "words", ",", "\"arcs\"", ":", "arcs", "}", ")", "\n", "\n", "words", "=", "[", "{", "\"text\"", ":", "node", ",", "\"tag\"", ":", "\"\"", "}", "for", "node", "in", "tgt_nodes", "]", "\n", "arcs", "=", "[", "{", "\"start\"", ":", "arc", "[", "0", "]", ",", "\"end\"", ":", "arc", "[", "2", "]", ",", "\"label\"", ":", "arc", "[", "1", "]", ",", "\"dir\"", ":", "\"left\"", "if", "arc", "[", "1", "]", "==", "\"att\"", "else", "\"right\"", "}", "for", "arc", "in", "tgt_edges", "]", "\n", "docs", ".", "append", "(", "{", "\"words\"", ":", "words", ",", "\"arcs\"", ":", "arcs", "}", ")", "\n", "\n", "# output souce graph", "\n", "svg", "=", "displacy", ".", "render", "(", "docs", "[", "0", "]", ",", "style", "=", "\"dep\"", ",", "jupyter", "=", "False", ",", "manual", "=", "True", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dump_dir", ",", "\"{:06}_src.svg\"", ".", "format", "(", "i", ")", ")", "\n", "with", "open", "(", "output_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "svg", ")", "\n", "\n", "# output target graph", "\n", "", "svg", "=", "displacy", ".", "render", "(", "docs", "[", "1", "]", ",", "style", "=", "\"dep\"", ",", "jupyter", "=", "False", ",", "manual", "=", "True", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dump_dir", ",", "\"{:06}_tgt.svg\"", ".", "format", "(", "i", ")", ")", "\n", "with", "open", "(", "output_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "svg", ")", "\n", "\n", "# output modification query", "\n", "", "print", "(", "\"id {}: {}\"", ".", "format", "(", "i", ",", "query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.GraphTrans.__init__": [[44, 76], ["torch.nn.Module.__init__", "models.MultiHeadedAttention", "models.PositionwiseFeedForward", "models.Embeddings", "models.PositionalEncoding", "models.Encoder", "models.Decoder", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "len", "models.EncoderLayer", "c", "c", "node_dict.pad", "edge_dict.pad"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.__init__", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.pad", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.pad"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "node_dict", ",", "edge_dict", ",", "text_dict", ")", ":", "\n", "        ", "\"\"\"\n        Model of graph modification\n\n        args: args from command line\n        node_dict: dictionary of nodes\n        edge_dict: dictionary of edges\n        text_dict: dictionary of queries\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "node_dict", "=", "node_dict", "\n", "self", ".", "edge_dict", "=", "edge_dict", "\n", "self", ".", "text_dict", "=", "text_dict", "\n", "\n", "c", "=", "copy", ".", "deepcopy", "\n", "attn", "=", "MultiHeadedAttention", "(", "args", ".", "encoder_attention_heads", ",", "args", ".", "encoder_embed_dim", ")", "\n", "ff", "=", "PositionwiseFeedForward", "(", "args", ".", "encoder_embed_dim", ",", "args", ".", "encoder_ffn_embed_dim", ",", "args", ".", "dropout", ")", "\n", "# graph encoder", "\n", "self", ".", "node_embeds", "=", "Embeddings", "(", "self", ".", "args", ".", "encoder_embed_dim", ",", "len", "(", "node_dict", ")", ")", "\n", "self", ".", "edge_embeds", "=", "self", ".", "node_embeds", "\n", "\n", "# text encoder", "\n", "self", ".", "text_embeds", "=", "self", ".", "node_embeds", "\n", "self", ".", "position", "=", "PositionalEncoding", "(", "args", ".", "encoder_embed_dim", ",", "args", ".", "dropout", ")", "\n", "self", ".", "enc", "=", "Encoder", "(", "EncoderLayer", "(", "args", ".", "encoder_embed_dim", ",", "c", "(", "attn", ")", ",", "c", "(", "ff", ")", ",", "args", ".", "dropout", ")", ",", "args", ".", "encoder_layers", ")", "\n", "# graph decoder", "\n", "self", ".", "graph_dec", "=", "Decoder", "(", "args", ",", "node_dict", ",", "edge_dict", ",", "self", ".", "node_embeds", ")", "\n", "\n", "# loss", "\n", "self", ".", "node_xent", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ",", "ignore_index", "=", "node_dict", ".", "pad", "(", ")", ")", "\n", "self", ".", "edge_xent", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ",", "ignore_index", "=", "edge_dict", ".", "pad", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.GraphTrans.compute_loss": [[77, 103], ["nodes.contiguous().view.contiguous().view.size", "nodes.contiguous().view.contiguous().view.contiguous().view", "node_outputs.view.view.view", "models.GraphTrans.node_xent", "edges.contiguous().view.contiguous().view.size", "edges.contiguous().view.contiguous().view.contiguous().view", "edge_outputs.view.view.view", "models.GraphTrans.edge_xent", "nodes.contiguous().view.contiguous().view.contiguous", "edges.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "nodes", ",", "node_outputs", ",", "edges", ",", "edge_outputs", ")", ":", "\n", "        ", "\"\"\"\n        Calculate loss\n\n        nodes: ground truths of target nodes: [bsz, len]\n        node_outputs: generated target nodes: [bsz, len]\n\n        edges: ground truths of target nodes: [bsz, len]\n        edge_outputs: generated target nodes: [bsz, len]\n        \"\"\"", "\n", "\n", "# Loss over target nodes", "\n", "bsz", ",", "tgt_len", "=", "nodes", ".", "size", "(", ")", "\n", "nodes", "=", "nodes", ".", "contiguous", "(", ")", ".", "view", "(", "bsz", "*", "tgt_len", ")", "\n", "node_outputs", "=", "node_outputs", ".", "view", "(", "bsz", "*", "tgt_len", ",", "-", "1", ")", "\n", "node_loss", "=", "self", ".", "node_xent", "(", "node_outputs", ",", "nodes", ")", "\n", "\n", "# Loss over target edge", "\n", "num_edge", "=", "edges", ".", "size", "(", "-", "1", ")", "\n", "edges", "=", "edges", ".", "contiguous", "(", ")", ".", "view", "(", "bsz", "*", "num_edge", ")", "\n", "edge_outputs", "=", "edge_outputs", ".", "view", "(", "bsz", "*", "num_edge", ",", "-", "1", ")", "\n", "edge_loss", "=", "self", ".", "edge_xent", "(", "edge_outputs", ",", "edges", ")", "\n", "\n", "sum_loss", "=", "node_loss", "+", "edge_loss", "\n", "\n", "return", "sum_loss", "/", "bsz", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.GraphTrans.encoder": [[104, 161], ["models.GraphTrans.node_embeds", "models.GraphTrans.edge_embeds", "edge_masks.to.to.to", "edge_masks.to.to.clone", "torch.arange", "edge_masks.to.to.unsqueeze", "models.GraphTrans.position", "edge_masks.to.clone.size", "models.GraphTrans.sum", "models.GraphTrans.node_dict.pad", "models.GraphTrans.text_embeds", "models.GraphTrans.text_dict.pad", "models.GraphTrans.enc", "models.GraphTrans.enc", "torch.cat", "torch.cat", "torch.cat", "models.GraphTrans.size", "graph_embed.size", "src_node_masks.unsqueeze().expand", "src_text_mask.unsqueeze().expand", "torch.cat", "models.GraphTrans.enc", "torch.cat", "models.GraphTrans.edge_dict.pad", "models.GraphTrans.edge_dict.index", "src_text_mask.float().unsqueeze", "torch.cat.float", "src_node_masks.unsqueeze", "src_text_mask.unsqueeze", "torch.cat", "src_text_mask.float", "edge_masks.to.clone.to"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.pad", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.pad", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.pad", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.index"], ["", "def", "encoder", "(", "self", ",", "src_graph", ",", "src_text", ")", ":", "\n", "        ", "\"\"\"\n        Graph encoder and query encode\n\n        src_graph: source graphs: {nodes: [bsz, node_size], edges: [bsz, edge_size]}\n        src_text: modification queries: {x: [bsz, query_size]}\n        \"\"\"", "\n", "# graph embed", "\n", "node_embed", "=", "self", ".", "node_embeds", "(", "src_graph", "[", "\"nodes\"", "]", ")", "\n", "edge_embed", "=", "self", ".", "edge_embeds", "(", "src_graph", "[", "\"edges\"", "]", ")", "\n", "edge_masks", "=", "(", "src_graph", "[", "\"edges\"", "]", "!=", "self", ".", "edge_dict", ".", "pad", "(", ")", ")", "*", "(", "src_graph", "[", "\"edges\"", "]", "!=", "self", ".", "edge_dict", ".", "index", "(", "\"<blank>\"", ")", ")", "\n", "edge_masks", "=", "edge_masks", ".", "to", "(", "edge_embed", ")", "\n", "\n", "adj_masks", "=", "edge_masks", ".", "clone", "(", ")", "\n", "diag", "=", "torch", ".", "arange", "(", "adj_masks", ".", "size", "(", "-", "1", ")", ")", "\n", "adj_masks", "[", ":", ",", "diag", ",", "diag", "]", "=", "1", "\n", "\n", "edge_embed", "*=", "edge_masks", ".", "unsqueeze", "(", "-", "1", ")", "\n", "graph_embed", "=", "node_embed", "+", "edge_embed", ".", "sum", "(", "dim", "=", "2", ")", "\n", "src_node_masks", "=", "src_graph", "[", "\"nodes\"", "]", "!=", "self", ".", "node_dict", ".", "pad", "(", ")", "\n", "\n", "# text embed", "\n", "text_embed", "=", "self", ".", "position", "(", "self", ".", "text_embeds", "(", "src_text", "[", "\"x\"", "]", ")", ")", "\n", "src_text_mask", "=", "src_text", "[", "\"x\"", "]", "!=", "self", ".", "text_dict", ".", "pad", "(", ")", "\n", "\n", "# late fusion or naive concatenation", "\n", "if", "self", ".", "args", ".", "modification", "==", "\"late\"", ":", "\n", "            ", "graph_repr", "=", "self", ".", "enc", "(", "graph_embed", ",", "adj_masks", ")", "\n", "\n", "text_repr", "=", "self", ".", "enc", "(", "text_embed", ",", "src_text_mask", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "\n", "src_mems", "=", "torch", ".", "cat", "(", "[", "graph_repr", ",", "text_repr", "]", ",", "dim", "=", "1", ")", "\n", "src_masks", "=", "torch", ".", "cat", "(", "[", "src_node_masks", ",", "src_text_mask", "]", ",", "dim", "=", "1", ")", "\n", "\n", "enc_info", "=", "{", "\"mem\"", ":", "src_mems", ",", "\"mem_masks\"", ":", "src_masks", "}", "\n", "\n", "# early fusion or cross attention", "\n", "", "else", ":", "\n", "            ", "enc_inputs", "=", "torch", ".", "cat", "(", "[", "graph_embed", ",", "text_embed", "]", ",", "dim", "=", "1", ")", "\n", "\n", "bsz", ",", "text_len", ",", "_", "=", "text_embed", ".", "size", "(", ")", "\n", "graph_size", "=", "graph_embed", ".", "size", "(", "1", ")", "\n", "\n", "# masks of self attention from queries to graphs", "\n", "text2graph_masks", "=", "src_node_masks", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bsz", ",", "text_len", ",", "graph_size", ")", "\n", "# masks of self attention from queries and graphs to queries", "\n", "all2text_masks", "=", "src_text_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bsz", ",", "text_len", "+", "graph_size", ",", "text_len", ")", "\n", "# masks of self attention from grahs to graphs, from queries to graphs, and from queries and graphs to queries", "\n", "enc_masks", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "[", "adj_masks", ".", "to", "(", "text2graph_masks", ".", "dtype", ")", ",", "text2graph_masks", "]", ",", "dim", "=", "1", ")", ",", "all2text_masks", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "enc_repr", "=", "self", ".", "enc", "(", "enc_inputs", ",", "enc_masks", ".", "float", "(", ")", ")", "\n", "\n", "mem_masks", "=", "torch", ".", "cat", "(", "[", "src_node_masks", ",", "src_text_mask", "]", ",", "dim", "=", "1", ")", "\n", "\n", "enc_info", "=", "{", "\"mem\"", ":", "enc_repr", ",", "\"mem_masks\"", ":", "mem_masks", "}", "\n", "\n", "", "return", "enc_info", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.GraphTrans.forward": [[162, 170], ["models.GraphTrans.encoder", "models.GraphTrans.graph_dec", "models.GraphTrans.compute_loss"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.GraphTrans.encoder", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.GraphTrans.compute_loss"], ["", "def", "forward", "(", "self", ",", "src_graph", ",", "src_text", ",", "tgt_graph", ")", ":", "\n", "\n", "# graph encoder", "\n", "        ", "enc_info", "=", "self", ".", "encoder", "(", "src_graph", ",", "src_text", ")", "\n", "# graph decoder", "\n", "_", ",", "node_outputs", ",", "_", ",", "edge_outputs", "=", "self", ".", "graph_dec", "(", "enc_info", ",", "tgt_graph", "[", "\"nodes\"", "]", ",", "tgt_graph", "[", "\"edges\"", "]", ")", "\n", "\n", "return", "self", ".", "compute_loss", "(", "tgt_graph", "[", "\"nodes\"", "]", "[", "\"y\"", "]", ",", "node_outputs", ",", "tgt_graph", "[", "\"edges\"", "]", "[", "\"y\"", "]", ",", "edge_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Encoder.__init__": [[175, 179], ["torch.nn.Module.__init__", "models.clones", "models.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.__init__", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.clones"], ["def", "__init__", "(", "self", ",", "layer", ",", "N", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "clones", "(", "layer", ",", "N", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "layer", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Encoder.forward": [[180, 185], ["models.Encoder.norm", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"Pass the input (and mask) through each layer in turn.\"", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "mask", ")", "\n", "", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.LayerNorm.__init__": [[190, 195], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "a_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n", "self", ".", "b_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "features", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.LayerNorm.forward": [[196, 200], ["x.mean", "x.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "self", ".", "a_2", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "+", "self", ".", "b_2", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.SublayerConnection.__init__": [[208, 212], ["torch.nn.Module.__init__", "models.LayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.__init__"], ["def", "__init__", "(", "self", ",", "size", ",", "dropout", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.SublayerConnection.forward": [[213, 216], ["models.SublayerConnection.dropout", "sublayer", "models.SublayerConnection.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sublayer", ")", ":", "\n", "        ", "\"Apply residual connection to any sublayer with the same size.\"", "\n", "return", "x", "+", "self", ".", "dropout", "(", "sublayer", "(", "self", ".", "norm", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.EncoderLayer.__init__": [[221, 227], ["torch.nn.Module.__init__", "models.clones", "models.SublayerConnection"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.__init__", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.clones"], ["def", "__init__", "(", "self", ",", "size", ",", "self_attn", ",", "feed_forward", ",", "dropout", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "self", ".", "feed_forward", "=", "feed_forward", "\n", "self", ".", "sublayer", "=", "clones", "(", "SublayerConnection", "(", "size", ",", "dropout", ")", ",", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.EncoderLayer.forward": [[228, 232], ["models.EncoderLayer.self_attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"Follow Figure 1 (left) for connections.\"", "\n", "x", "=", "self", ".", "sublayer", "[", "0", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "mask", ")", ")", "\n", "return", "self", ".", "sublayer", "[", "1", "]", "(", "x", ",", "self", ".", "feed_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.MultiHeadedAttention.__init__": [[250, 260], ["torch.nn.Module.__init__", "models.clones", "torch.nn.Dropout", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.__init__", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.clones"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "\"Take in model size and number of heads.\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "# We assume d_v always equals d_k", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "linears", "=", "clones", "(", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", ",", "4", ")", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.MultiHeadedAttention.forward": [[261, 281], ["query.size", "models.attention", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose", "zip", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "l"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.attention"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"Implements Figure 2\"", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Same mask applied to all h heads.", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "# 1) Do all the linear projections in batch from d_model => h x d_k ", "\n", "query", ",", "key", ",", "value", "=", "[", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "]", "\n", "\n", "# 2) Apply attention on all the projected vectors in batch. ", "\n", "x", ",", "self", ".", "attn", "=", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "\n", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n", "# 3) \"Concat\" using a view and apply a final linear. ", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.PositionwiseFeedForward.__init__": [[286, 291], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_ff", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ff", ")", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_ff", ",", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.PositionwiseFeedForward.forward": [[292, 294], ["models.PositionwiseFeedForward.w_2", "models.PositionwiseFeedForward.dropout", "torch.nn.functional.relu", "models.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "w_2", "(", "self", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Embeddings.__init__": [[298, 302], ["torch.nn.Module.__init__", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "vocab", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lut", "=", "nn", ".", "Embedding", "(", "vocab", ",", "d_model", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Embeddings.forward": [[303, 305], ["models.Embeddings.lut", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lut", "(", "x", ")", "*", "math", ".", "sqrt", "(", "self", ".", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.PositionalEncoding.__init__": [[310, 323], ["torch.nn.Module.__init__", "torch.nn.Dropout", "torch.zeros", "torch.arange().unsqueeze().to", "torch.exp", "torch.sin", "torch.cos", "pe.unsqueeze.unsqueeze.unsqueeze", "models.PositionalEncoding.register_buffer", "torch.arange().unsqueeze", "torch.arange().to", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "dropout", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "# Compute the positional encodings once in log space.", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "pe", ".", "dtype", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "to", "(", "pe", ".", "dtype", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.PositionalEncoding.forward": [[324, 328], ["models.PositionalEncoding.dropout", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "pe", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", "\n", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Attention.__init__": [[334, 341], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "mem_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "mem_size", "\n", "self", ".", "linear_q", "=", "nn", ".", "Linear", "(", "input_size", ",", "mem_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "linear_c", "=", "nn", ".", "Linear", "(", "mem_size", ",", "mem_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "mem_size", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "linear_out", "=", "nn", ".", "Linear", "(", "mem_size", "+", "input_size", ",", "input_size", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Attention.score": [[342, 355], ["m.size", "q.size", "models.Attention.linear_q().view().expand", "models.Attention.linear_c().view().expand", "torch.tanh", "models.Attention.v().view", "models.Attention.linear_q().view", "models.Attention.linear_c().view", "models.Attention.v", "models.Attention.linear_q", "models.Attention.linear_c"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "q", ",", "m", ")", ":", "\n", "        ", "src_batch", ",", "src_len", ",", "src_dim", "=", "m", ".", "size", "(", ")", "\n", "tgt_batch", ",", "tgt_len", ",", "tgt_dim", "=", "q", ".", "size", "(", ")", "\n", "\n", "bsz", "=", "src_batch", "\n", "dim", "=", "self", ".", "dim", "\n", "\n", "wq", "=", "self", ".", "linear_q", "(", "q", ")", ".", "view", "(", "bsz", ",", "tgt_len", ",", "1", ",", "dim", ")", ".", "expand", "(", "bsz", ",", "tgt_len", ",", "src_len", ",", "dim", ")", "\n", "uh", "=", "self", ".", "linear_c", "(", "m", ")", ".", "view", "(", "bsz", ",", "1", ",", "src_len", ",", "dim", ")", ".", "expand", "(", "bsz", ",", "tgt_len", ",", "src_len", ",", "dim", ")", "\n", "\n", "wquh", "=", "torch", ".", "tanh", "(", "wq", "+", "uh", ")", "\n", "\n", "return", "self", ".", "v", "(", "wquh", ")", ".", "view", "(", "bsz", ",", "tgt_len", ",", "src_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Attention.forward": [[356, 375], ["models.Attention.score", "torch.nn.functional.softmax", "torch.bmm", "models.Attention.linear_out", "sequence_mask.unsqueeze", "models.Attention.masked_fill_", "torch.cat", "mem_masks.dim", "models.sequence_mask", "float", "models.Attention.size"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Attention.score", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.sequence_mask"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "mems", ",", "mem_masks", "=", "None", ")", ":", "\n", "\n", "        ", "align", "=", "self", ".", "score", "(", "inputs", ",", "mems", ")", "\n", "\n", "if", "mem_masks", "is", "not", "None", ":", "\n", "            ", "if", "mem_masks", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "mask", "=", "sequence_mask", "(", "mem_masks", ",", "max_len", "=", "align", ".", "size", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "mem_masks", "\n", "", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "# Make it broadcastable.", "\n", "align", ".", "masked_fill_", "(", "1", "-", "mask", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "", "align_vectors", "=", "F", ".", "softmax", "(", "align", ",", "-", "1", ")", "\n", "\n", "c", "=", "torch", ".", "bmm", "(", "align_vectors", ",", "mems", ")", "\n", "\n", "attn_h", "=", "self", ".", "linear_out", "(", "torch", ".", "cat", "(", "[", "c", ",", "inputs", "]", ",", "-", "1", ")", ")", "\n", "\n", "return", "attn_h", ",", "align_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Decoder.__init__": [[381, 421], ["torch.nn.Module.__init__", "node_dict.pad", "torch.nn.Dropout", "len", "torch.nn.GRU", "models.Attention", "len", "torch.nn.GRU", "models.Attention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.__init__", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.pad"], ["def", "__init__", "(", "self", ",", "args", ",", "node_dict", ",", "edge_dict", ",", "embeds", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "pad_idx", "=", "node_dict", ".", "pad", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", "\n", "\n", "# node-level generation", "\n", "node_types", "=", "len", "(", "node_dict", ")", "\n", "# self.node_embeds = nn.Embedding(node_types, args.node_embed_size, padding_idx=node_dict.pad())", "\n", "self", ".", "node_embeds", "=", "embeds", "\n", "self", ".", "node_RNN", "=", "nn", ".", "GRU", "(", "args", ".", "node_embed_size", ",", "args", ".", "node_hidden_size", ",", "batch_first", "=", "True", ",", "\n", "num_layers", "=", "args", ".", "dec_layers", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "node_att", "=", "Attention", "(", "args", ".", "node_hidden_size", ",", "args", ".", "encoder_embed_dim", ")", "\n", "# self.node_out_proj = nn.Linear(args.node_hidden_size, node_types)", "\n", "if", "args", ".", "node_embed_size", "!=", "args", ".", "encoder_embed_dim", ":", "\n", "            ", "self", ".", "node_input_proj", "=", "nn", ".", "Linear", "(", "args", ".", "encoder_embed_dim", ",", "args", ".", "node_embed_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "node_input_proj", "=", "None", "\n", "", "if", "args", ".", "node_hidden_size", "!=", "args", ".", "encoder_embed_dim", ":", "\n", "            ", "self", ".", "node_out_proj", "=", "nn", ".", "Linear", "(", "args", ".", "node_hidden_size", ",", "args", ".", "encoder_embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "node_out_proj", "=", "None", "\n", "\n", "# edge-level generation", "\n", "", "edge_types", "=", "len", "(", "edge_dict", ")", "\n", "# self.edge_embeds = nn.Embedding(edge_types, args.edge_embed_size, padding_idx=edge_dict.pad())", "\n", "self", ".", "edge_embeds", "=", "embeds", "\n", "self", ".", "edge_RNN", "=", "nn", ".", "GRU", "(", "args", ".", "edge_embed_size", "+", "args", ".", "node_hidden_size", "*", "2", ",", "args", ".", "edge_hidden_size", ",", "batch_first", "=", "True", ",", "\n", "num_layers", "=", "args", ".", "dec_layers", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "edge_att", "=", "Attention", "(", "args", ".", "edge_hidden_size", ",", "args", ".", "encoder_embed_dim", ")", "\n", "# self.edge_out_proj = nn.Linear(args.edge_hidden_size, edge_types)", "\n", "if", "args", ".", "edge_embed_size", "!=", "args", ".", "encoder_embed_dim", ":", "\n", "            ", "self", ".", "edge_input_proj", "=", "nn", ".", "Linear", "(", "args", ".", "encoder_embed_dim", ",", "args", ".", "edge_embed_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "edge_input_proj", "=", "None", "\n", "", "if", "args", ".", "edge_hidden_size", "!=", "args", ".", "encoder_embed_dim", ":", "\n", "            ", "self", ".", "edge_out_proj", "=", "nn", ".", "Linear", "(", "args", ".", "edge_hidden_size", ",", "args", ".", "encoder_embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "edge_out_proj", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Decoder.node_forward": [[422, 449], ["nodes.size", "models.Decoder.node_embeds", "torch.nn.utils.rnn.pack_padded_sequence", "models.Decoder.node_RNN", "models.Decoder.node_att", "torch.nn.functional.linear", "models.Decoder.node_input_proj", "torch.nn.utils.rnn.pad_packed_sequence", "models.Decoder.node_out_proj", "models.Decoder.dropout"], "methods", ["None"], ["", "", "def", "node_forward", "(", "self", ",", "enc_info", ",", "nodes", ",", "nodes_len", ",", "init_hiddens", "=", "None", ")", ":", "\n", "        ", "\"\"\"node-level generation\n\n        enc_info: hidden states of source graphs and source queries\n        nodes: ground truths of target nodes: [bsz, len]\n        nodes_len: masks for target nodes: [bsz, len]\n        init_hiddens: initial hidden states for RNN\n        \"\"\"", "\n", "bsz", ",", "steps", "=", "nodes", ".", "size", "(", ")", "\n", "nodes_embeds", "=", "self", ".", "node_embeds", "(", "nodes", ")", "\n", "if", "self", ".", "node_input_proj", ":", "\n", "            ", "nodes_embeds", "=", "self", ".", "node_input_proj", "(", "nodes_embeds", ")", "\n", "\n", "", "padded_nodes_embeds", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "nodes_embeds", ",", "nodes_len", ",", "batch_first", "=", "True", ")", "\n", "rnn_packed_outputs", ",", "h", "=", "self", ".", "node_RNN", "(", "padded_nodes_embeds", ",", "init_hiddens", ")", "\n", "\n", "rnn_outputs", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "rnn_packed_outputs", ",", "batch_first", "=", "True", ")", "[", "0", "]", "\n", "\n", "context", ",", "_", "=", "self", ".", "node_att", "(", "rnn_outputs", ",", "enc_info", "[", "\"mem\"", "]", ",", "enc_info", "[", "\"mem_masks\"", "]", ")", "\n", "# outputs = self.node_out_proj(self.dropout(context))", "\n", "if", "self", ".", "node_out_proj", ":", "\n", "            ", "outputs", "=", "self", ".", "node_out_proj", "(", "context", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "context", "\n", "", "outputs", "=", "F", ".", "linear", "(", "self", ".", "dropout", "(", "outputs", ")", ",", "self", ".", "node_embeds", ".", "lut", ".", "weight", ")", "\n", "\n", "return", "rnn_outputs", ",", "h", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Decoder.edge_forward": [[450, 480], ["models.Decoder.edge_embeds", "torch.cat", "models.Decoder.edge_RNN", "models.Decoder.edge_att", "torch.nn.functional.linear", "models.Decoder.edge_input_proj", "models.Decoder.edge_out_proj", "models.Decoder.dropout"], "methods", ["None"], ["", "def", "edge_forward", "(", "self", ",", "enc_info", ",", "edges", ",", "src_nodes", ",", "tgt_nodes", ",", "init_hiddens", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Edge-level decoder\n\n        enc_info: hidden states of source graphs and source queries\n        edges: ground truths of edges of target graphs: [bsz, len]\n        src_nodes: source nodes of edges of target graphs   *src node* <-edge-> tgt node\n        tgt_nodes: target nodes of edges of target graphs    src node <-edge-> *tgt node*\n        init_hiddens: initial hidden states for RNN\n        \"\"\"", "\n", "\n", "# embedding", "\n", "edges_embeds", "=", "self", ".", "edge_embeds", "(", "edges", ")", "\n", "if", "self", ".", "edge_input_proj", ":", "\n", "            ", "edges_embeds", "=", "self", ".", "edge_input_proj", "(", "edges_embeds", ")", "\n", "\n", "# rnn", "\n", "", "rnn_inputs", "=", "torch", ".", "cat", "(", "[", "edges_embeds", ",", "src_nodes", ",", "tgt_nodes", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "rnn_outputs", ",", "h", "=", "self", ".", "edge_RNN", "(", "rnn_inputs", ",", "init_hiddens", ")", "\n", "\n", "context", ",", "_", "=", "self", ".", "edge_att", "(", "rnn_outputs", ",", "enc_info", "[", "\"mem\"", "]", ",", "enc_info", "[", "\"mem_masks\"", "]", ")", "\n", "# outputs = self.edge_out_proj(self.dropout(context))", "\n", "if", "self", ".", "edge_out_proj", ":", "\n", "            ", "outputs", "=", "self", ".", "edge_out_proj", "(", "context", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "context", "\n", "", "outputs", "=", "F", ".", "linear", "(", "self", ".", "dropout", "(", "outputs", ")", ",", "self", ".", "edge_embeds", ".", "lut", ".", "weight", ")", "\n", "\n", "return", "rnn_outputs", ",", "h", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Decoder.forward": [[481, 506], ["models.Decoder.node_forward", "node_rnn_outputs.size", "torch.tensor().to", "torch.index_select", "torch.tensor().to", "torch.index_select", "models.Decoder.edge_forward", "functools.reduce", "functools.reduce", "torch.tensor", "torch.tensor", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Decoder.node_forward", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Decoder.edge_forward"], ["", "def", "forward", "(", "self", ",", "enc_info", ",", "nodes", ",", "edges", ")", ":", "\n", "        ", "\"\"\"\n        Graph generator\n        \"\"\"", "\n", "# node-level decoder", "\n", "nodes_lens", "=", "(", "nodes", "[", "\"x\"", "]", "!=", "self", ".", "pad_idx", ")", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "node_rnn_outputs", ",", "_", ",", "node_outputs", "=", "self", ".", "node_forward", "(", "enc_info", ",", "nodes", "[", "\"x\"", "]", ",", "nodes_lens", ")", "\n", "\n", "node_size", "=", "node_rnn_outputs", ".", "size", "(", "1", ")", "\n", "# build indices of source nodes of edges of target graphs", "\n", "src_nodes_indices", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "[", "[", "i", "for", "_", "in", "range", "(", "i", ")", "]", "for", "i", "in", "range", "(", "1", ",", "node_size", "-", "1", ")", "]", ")", "if", "node_size", ">", "2", "else", "[", "]", "\n", "src_nodes_indices", "=", "src_nodes_indices", "+", "[", "src_nodes_indices", "[", "-", "1", "]", "+", "1", "]", "if", "src_nodes_indices", "else", "[", "0", "]", "\n", "src_nodes_indices", "=", "torch", ".", "tensor", "(", "src_nodes_indices", ")", ".", "to", "(", "node_rnn_outputs", ".", "device", ")", "\n", "src_nodes", "=", "torch", ".", "index_select", "(", "node_rnn_outputs", ",", "1", ",", "src_nodes_indices", ")", "\n", "\n", "# build indices of target nodes of edges of target graphs", "\n", "tgt_nodes_indices", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "[", "[", "j", "for", "j", "in", "range", "(", "i", ")", "]", "for", "i", "in", "range", "(", "1", ",", "node_size", "-", "1", ")", "]", ")", "if", "node_size", ">", "2", "else", "[", "]", "\n", "tgt_nodes_indices", "=", "tgt_nodes_indices", "+", "[", "src_nodes_indices", "[", "-", "1", "]", "]", "if", "tgt_nodes_indices", "else", "[", "0", "]", "\n", "tgt_nodes_indices", "=", "torch", ".", "tensor", "(", "tgt_nodes_indices", ")", ".", "to", "(", "node_rnn_outputs", ".", "device", ")", "\n", "tgt_nodes", "=", "torch", ".", "index_select", "(", "node_rnn_outputs", ",", "1", ",", "tgt_nodes_indices", ")", "\n", "\n", "# edge-level decoder", "\n", "edge_rnn_outputs", ",", "_", ",", "edge_outputs", "=", "self", ".", "edge_forward", "(", "enc_info", ",", "edges", "[", "\"x\"", "]", ",", "src_nodes", ",", "tgt_nodes", ")", "\n", "\n", "return", "node_rnn_outputs", ",", "node_outputs", ",", "edge_rnn_outputs", ",", "edge_outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.sequence_mask": [[19, 29], ["lengths.numel", "torch.arange().type_as().repeat().lt", "lengths.max", "lengths.unsqueeze", "torch.arange().type_as().repeat", "torch.arange().type_as", "torch.arange"], "function", ["None"], ["def", "sequence_mask", "(", "lengths", ",", "max_len", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Creates a boolean mask from sequence lengths.\n    \"\"\"", "\n", "batch_size", "=", "lengths", ".", "numel", "(", ")", "\n", "max_len", "=", "max_len", "or", "lengths", ".", "max", "(", ")", "\n", "return", "(", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "device", "=", "lengths", ".", "device", ")", "\n", ".", "type_as", "(", "lengths", ")", "\n", ".", "repeat", "(", "batch_size", ",", "1", ")", "\n", ".", "lt", "(", "lengths", ".", "unsqueeze", "(", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.clones": [[31, 34], ["torch.nn.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "def", "clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "\"Produce N identical layers.\"", "\n", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.gating": [[36, 41], ["query.unsqueeze.unsqueeze", "torch.sigmoid", "torch.sigmoid.unsqueeze"], "function", ["None"], ["", "def", "gating", "(", "linear", ",", "keys", ",", "query", ")", ":", "\n", "    ", "query", "=", "query", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "gates", "=", "torch", ".", "sigmoid", "(", "(", "query", "*", "keys", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "\n", "\n", "return", "gates", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "*", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.attention": [[235, 246], ["query.size", "torch.nn.functional.softmax", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill", "dropout", "torch.matmul", "key.transpose"], "function", ["None"], ["", "", "def", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ")", ":", "\n", "    ", "\"Compute 'Scaled Dot Product Attention'\"", "\n", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.__init__": [[124, 137], ["data_utils.Dictionary.add_symbol", "data_utils.Dictionary.add_symbol", "data_utils.Dictionary.add_symbol", "len"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.add_symbol", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.add_symbol", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.add_symbol"], ["    ", "def", "__init__", "(", "self", ",", "pad", "=", "\"<pad>\"", ",", "eos", "=", "\"</s>\"", ",", "unk", "=", "\"<unk>\"", ")", ":", "\n", "        ", "self", ".", "pad_word", "=", "pad", "\n", "self", ".", "eos_word", "=", "eos", "\n", "self", ".", "unk_word", "=", "unk", "\n", "\n", "self", ".", "symbols", "=", "[", "]", "\n", "self", ".", "indices", "=", "{", "}", "\n", "\n", "self", ".", "pad_index", "=", "self", ".", "add_symbol", "(", "pad", ")", "\n", "self", ".", "unk_index", "=", "self", ".", "add_symbol", "(", "unk", ")", "\n", "self", ".", "eos_index", "=", "self", ".", "add_symbol", "(", "eos", ")", "\n", "\n", "self", ".", "n_specials", "=", "len", "(", "self", ".", "symbols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.__getitem__": [[138, 142], ["len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", "<", "len", "(", "self", ".", "symbols", ")", ":", "\n", "            ", "return", "self", ".", "symbols", "[", "idx", "]", "\n", "", "return", "self", ".", "unk_word", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.__len__": [[143, 145], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "symbols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.index": [[146, 150], ["None"], "methods", ["None"], ["", "def", "index", "(", "self", ",", "sym", ")", ":", "\n", "        ", "if", "sym", "in", "self", ".", "indices", ":", "\n", "            ", "return", "self", ".", "indices", "[", "sym", "]", "\n", "", "return", "self", ".", "unk_index", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.string": [[151, 166], ["torch.is_tensor", "tensor.dim", "data_utils.Dictionary.unk", "data_utils.Dictionary.string.token_string"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.unk"], ["", "def", "string", "(", "self", ",", "tensor", ",", "bpe_symbol", "=", "None", ",", "escape_unk", "=", "False", ")", ":", "\n", "        ", "\"\"\"Helper for converting a tensor of token indices to a string.\n        Can optionally remove BPE symbols or escape <unk> words.\n        \"\"\"", "\n", "if", "torch", ".", "is_tensor", "(", "tensor", ")", "and", "tensor", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "return", "'\\n'", ".", "join", "(", "self", ".", "string", "(", "t", ",", "bpe_symbol", ",", "escape_unk", ")", "for", "t", "in", "tensor", ")", "\n", "\n", "", "def", "token_string", "(", "i", ")", ":", "\n", "            ", "if", "i", "==", "self", ".", "unk", "(", ")", ":", "\n", "                ", "return", "self", ".", "unk_word", "\n", "", "else", ":", "\n", "                ", "return", "self", "[", "i", "]", "\n", "\n", "", "", "sent", "=", "' '", ".", "join", "(", "token_string", "(", "i", ")", "for", "i", "in", "tensor", ")", "\n", "return", "sent", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.add_symbol": [[167, 176], ["len", "data_utils.Dictionary.symbols.append"], "methods", ["None"], ["", "def", "add_symbol", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "word", "in", "self", ".", "indices", ":", "\n", "            ", "idx", "=", "self", ".", "indices", "[", "word", "]", "\n", "", "else", ":", "\n", "            ", "idx", "=", "len", "(", "self", ".", "symbols", ")", "\n", "self", ".", "indices", "[", "word", "]", "=", "idx", "\n", "self", ".", "symbols", ".", "append", "(", "word", ")", "\n", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.pad": [[177, 179], ["None"], "methods", ["None"], ["", "def", "pad", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pad_index", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.unk": [[180, 182], ["None"], "methods", ["None"], ["", "def", "unk", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "unk_index", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.eos": [[183, 185], ["None"], "methods", ["None"], ["", "def", "eos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "eos_index", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.load": [[186, 201], ["cls", "open", "line.strip.strip.strip", "cls.add_symbol"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.add_symbol"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "f", ")", ":", "\n", "        ", "\"\"\"Loads the dictionary from a text file with the format:\n        ```\n        <symbol0> <count0>\n        <symbol1> <count1>\n        ...\n        ```\n        \"\"\"", "\n", "d", "=", "cls", "(", ")", "\n", "with", "open", "(", "f", ")", "as", "reader", ":", "\n", "            ", "for", "line", "in", "reader", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "d", ".", "add_symbol", "(", "line", ")", "\n", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.save": [[202, 208], ["os.path.exists", "open", "f.write", "f.write"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "dict_file", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "dict_file", ")", ":", "\n", "            ", "with", "open", "(", "dict_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "for", "sym", "in", "self", ".", "symbols", "[", "self", ".", "n_specials", ":", "]", ":", "\n", "                    ", "f", ".", "write", "(", "sym", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.encode_line": [[209, 225], ["isinstance", "len", "torch.IntTensor", "enumerate", "line.strip().split", "data_utils.Dictionary.index", "line.strip"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.index"], ["", "", "", "", "def", "encode_line", "(", "self", ",", "line", ",", "append_eos", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "line", ",", "str", ")", ":", "\n", "            ", "words", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "            ", "words", "=", "line", "\n", "", "nwords", "=", "len", "(", "words", ")", "\n", "\n", "ids", "=", "torch", ".", "IntTensor", "(", "nwords", "+", "1", "if", "append_eos", "else", "nwords", ")", "\n", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "            ", "ids", "[", "i", "]", "=", "self", ".", "index", "(", "word", ")", "\n", "\n", "", "if", "append_eos", ":", "\n", "            ", "ids", "[", "nwords", "]", "=", "self", ".", "eos_index", "\n", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.GraphTransReader.__init__": [[231, 244], ["len", "len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "src_graph", ",", "query", ",", "tgt_graph", ",", "pad_idx", ",", "eos_idx", ",", "blank_idx", ",", "stage", "=", "\"train\"", ")", ":", "\n", "        ", "assert", "len", "(", "src_graph", ")", "==", "len", "(", "query", ")", "==", "len", "(", "tgt_graph", ")", "\n", "\n", "self", ".", "pad_idx", "=", "pad_idx", "\n", "self", ".", "eos_idx", "=", "eos_idx", "\n", "self", ".", "blank_idx", "=", "blank_idx", "\n", "self", ".", "stage", "=", "stage", "\n", "\n", "self", ".", "src_graph", "=", "src_graph", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "tgt_graph", "=", "tgt_graph", "\n", "self", ".", "size", "=", "len", "(", "src_graph", ")", "\n", "self", ".", "sizes", "=", "[", "src_graph", ".", "sizes", ",", "query", ".", "sizes", ",", "tgt_graph", ".", "sizes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.GraphTransReader.__getitem__": [[245, 247], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "i", ",", "self", ".", "src_graph", "[", "i", "]", ",", "self", ".", "query", "[", "i", "]", ",", "self", ".", "tgt_graph", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.GraphTransReader.__len__": [[248, 250], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.GraphTransReader.item_size": [[251, 253], ["None"], "methods", ["None"], ["", "def", "item_size", "(", "self", ",", "index", ",", "type", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "sizes", "[", "type", "]", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.GraphTransReader.collate_fn": [[254, 256], ["data_utils.GraphTransReader.collate_fn"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.collate_fn"], ["", "def", "collate_fn", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "collate_fn", "(", "samples", ",", "self", ".", "pad_idx", ",", "self", ".", "eos_idx", ",", "train", "=", "self", ".", "stage", "==", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.BatchSampler.__init__": [[259, 266], ["torch.sort", "range", "len", "s.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sizes", ",", "batch", "=", "32", ")", ":", "\n", "        ", "_", ",", "indices", "=", "torch", ".", "sort", "(", "sizes", ",", "descending", "=", "True", ")", "\n", "s", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "indices", ")", ",", "batch", ")", ":", "\n", "            ", "s", ".", "append", "(", "indices", "[", "i", ":", "i", "+", "batch", "]", ")", "\n", "\n", "", "self", ".", "indices", "=", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.BatchSampler.__iter__": [[267, 269], ["torch.randperm", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "indices", "[", "i", "]", "for", "i", "in", "torch", ".", "randperm", "(", "len", "(", "self", ".", "indices", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.BatchSampler.__len__": [[270, 272], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.GraphReader.__init__": [[278, 285], ["data_utils.GraphReader.read_data", "len"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.TextReader.read_data"], ["def", "__init__", "(", "self", ",", "path", ",", "node_dictionary", ",", "edge_dictionary", ")", ":", "\n", "        ", "self", ".", "nodes_list", "=", "[", "]", "\n", "self", ".", "edges_list", "=", "[", "]", "\n", "self", ".", "graphs", "=", "[", "]", "\n", "self", ".", "sizes", "=", "[", "]", "\n", "self", ".", "read_data", "(", "path", ",", "node_dictionary", ",", "edge_dictionary", ")", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "nodes_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.GraphReader.read_data": [[286, 320], ["data_utils.GraphReader.read_data.load_data"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.load_data"], ["", "def", "read_data", "(", "self", ",", "path", ",", "node_dict", ",", "edge_dict", ")", ":", "\n", "        ", "def", "parse_graph", "(", "g", ",", "node_dict", ",", "edge_dict", ")", ":", "\n", "            ", "\"\"\"\n            convert graph stored in networkx into nodes and edges\n            \"\"\"", "\n", "num_nodes", "=", "g", ".", "number_of_nodes", "(", ")", "\n", "nodes", "=", "[", "node", "[", "-", "1", "]", "[", "\"feature\"", "]", "for", "node", "in", "g", ".", "nodes", ".", "data", "(", ")", "]", "\n", "edges", "=", "[", "[", "\"<blank>\"", "for", "_", "in", "range", "(", "num_nodes", ")", "]", "for", "_", "in", "range", "(", "num_nodes", ")", "]", "\n", "for", "edge", "in", "g", ".", "edges", ".", "data", "(", ")", ":", "\n", "                ", "edges", "[", "edge", "[", "0", "]", "]", "[", "edge", "[", "1", "]", "]", "=", "edge", "[", "2", "]", "[", "\"feature\"", "]", "\n", "edges", "[", "edge", "[", "1", "]", "]", "[", "edge", "[", "0", "]", "]", "=", "edge", "[", "2", "]", "[", "\"feature\"", "]", "\n", "\n", "", "nodes", "=", "node_dict", ".", "encode_line", "(", "nodes", ",", "False", ")", ".", "long", "(", ")", "\n", "edges", "=", "torch", ".", "stack", "(", "[", "edge_dict", ".", "encode_line", "(", "e", ",", "False", ")", "for", "e", "in", "edges", "]", ",", "dim", "=", "0", ")", ".", "to", "(", "nodes", ".", "dtype", ")", "\n", "return", "nodes", ",", "edges", "\n", "\n", "", "def", "load_data", "(", "output_file", ")", ":", "\n", "            ", "with", "open", "(", "output_file", ",", "\"rb\"", ")", "as", "fr", ":", "\n", "                ", "while", "True", ":", "\n", "                    ", "try", ":", "\n", "                        ", "yield", "pickle", ".", "load", "(", "fr", ")", "\n", "", "except", "EOFError", ":", "\n", "                        ", "break", "\n", "\n", "", "", "", "", "graphs", "=", "load_data", "(", "path", ")", "\n", "for", "i", ",", "graph", "in", "enumerate", "(", "graphs", ")", ":", "\n", "# if i > 1000: break", "\n", "            ", "self", ".", "graphs", ".", "append", "(", "graph", ")", "\n", "nodes", ",", "edges", "=", "parse_graph", "(", "graph", ",", "node_dict", ",", "edge_dict", ")", "\n", "self", ".", "nodes_list", ".", "append", "(", "nodes", ")", "\n", "self", ".", "edges_list", ".", "append", "(", "edges", ")", "\n", "self", ".", "sizes", ".", "append", "(", "nodes", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "self", ".", "sizes", "=", "np", ".", "array", "(", "self", ".", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.GraphReader.check_index": [[321, 324], ["IndexError"], "methods", ["None"], ["", "def", "check_index", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "i", "<", "0", "or", "i", ">=", "self", ".", "size", ":", "\n", "            ", "raise", "IndexError", "(", "'index out of range'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.GraphReader.__getitem__": [[325, 328], ["data_utils.GraphReader.check_index"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.TextReader.check_index"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "self", ".", "check_index", "(", "i", ")", "\n", "return", "self", ".", "nodes_list", "[", "i", "]", ",", "self", ".", "edges_list", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.GraphReader.__len__": [[329, 331], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.GraphReader.item_size": [[332, 334], ["None"], "methods", ["None"], ["", "def", "item_size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.TextReader.__init__": [[340, 346], ["data_utils.TextReader.read_data", "len"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.TextReader.read_data"], ["def", "__init__", "(", "self", ",", "path", ",", "dictionary", ")", ":", "\n", "        ", "self", ".", "tokens_list", "=", "[", "]", "\n", "self", ".", "lines", "=", "[", "]", "\n", "self", ".", "sizes", "=", "[", "]", "\n", "self", ".", "read_data", "(", "path", ",", "dictionary", ")", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "tokens_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.TextReader.read_data": [[347, 357], ["numpy.array", "open", "enumerate", "data_utils.TextReader.lines.append", "dictionary.encode_line().long", "data_utils.TextReader.tokens_list.append", "data_utils.TextReader.sizes.append", "line.strip", "dictionary.encode_line().long.size", "dictionary.encode_line"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.encode_line"], ["", "def", "read_data", "(", "self", ",", "path", ",", "dictionary", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "# if i > 1000: break", "\n", "                ", "self", ".", "lines", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "tokens", "=", "dictionary", ".", "encode_line", "(", "line", ")", ".", "long", "(", ")", "\n", "self", ".", "tokens_list", ".", "append", "(", "tokens", ")", "\n", "self", ".", "sizes", ".", "append", "(", "tokens", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "", "self", ".", "sizes", "=", "np", ".", "array", "(", "self", ".", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.TextReader.check_index": [[358, 361], ["IndexError"], "methods", ["None"], ["", "def", "check_index", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "i", "<", "0", "or", "i", ">=", "self", ".", "size", ":", "\n", "            ", "raise", "IndexError", "(", "'index out of range'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.TextReader.__getitem__": [[362, 365], ["data_utils.TextReader.check_index"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.TextReader.check_index"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "self", ".", "check_index", "(", "i", ")", "\n", "return", "self", ".", "tokens_list", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.TextReader.__len__": [[366, 368], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.TextReader.item_size": [[369, 371], ["None"], "methods", ["None"], ["", "def", "item_size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.collate_tokens": [[20, 34], ["values[].new().fill_", "enumerate", "dst.copy_", "values[].new", "dst.numel", "src.numel", "v.dim", "data_utils.collate_tokens.copy_tensor"], "function", ["None"], ["def", "collate_tokens", "(", "values", ",", "pad_idx", ",", "shape", ")", ":", "\n", "    ", "\"\"\"Convert a list of nd tensors into a padded (n+1)d tensor.\"\"\"", "\n", "res", "=", "values", "[", "0", "]", ".", "new", "(", "*", "shape", ")", ".", "fill_", "(", "pad_idx", ")", "\n", "\n", "def", "copy_tensor", "(", "src", ",", "dst", ")", ":", "\n", "        ", "assert", "dst", ".", "numel", "(", ")", "==", "src", ".", "numel", "(", ")", "\n", "dst", ".", "copy_", "(", "src", ")", "\n", "\n", "", "for", "i", ",", "v", "in", "enumerate", "(", "values", ")", ":", "\n", "        ", "if", "v", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "copy_tensor", "(", "v", ",", "res", "[", "i", "]", "[", ":", "len", "(", "v", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "copy_tensor", "(", "v", ",", "res", "[", "i", ",", ":", "v", ".", "size", "(", "0", ")", ",", ":", "v", ".", "size", "(", "1", ")", "]", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.flatten_edge": [[36, 40], ["[].view", "edge.view", "torch.tril().view().nonzero", "torch.tril().view", "torch.tril"], "function", ["None"], ["", "def", "flatten_edge", "(", "edges", ")", ":", "\n", "    ", "flat_edges", "=", "[", "edge", ".", "view", "(", "-", "1", ")", "[", "torch", ".", "tril", "(", "edge", ",", "-", "1", ")", ".", "view", "(", "-", "1", ")", ".", "nonzero", "(", ")", "]", ".", "view", "(", "-", "1", ")", "for", "edge", "in", "edges", "]", "\n", "\n", "return", "flat_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.shift_for_output": [[42, 52], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "n.new().fill_", "n.new().fill_", "e.new().fill_", "e.new().fill_", "n.new", "n.new", "e.new", "e.new"], "function", ["None"], ["", "def", "shift_for_output", "(", "nodes", ",", "edges", ",", "eos_idx", ",", "pad_idx", ")", ":", "\n", "# nodes", "\n", "    ", "nodes_x", "=", "[", "torch", ".", "cat", "(", "[", "n", ".", "new", "(", "1", ")", ".", "fill_", "(", "eos_idx", ")", ",", "n", "]", ")", "for", "n", "in", "nodes", "]", "\n", "nodes_y", "=", "[", "torch", ".", "cat", "(", "[", "n", ",", "n", ".", "new", "(", "1", ")", ".", "fill_", "(", "eos_idx", ")", "]", ")", "for", "n", "in", "nodes", "]", "\n", "\n", "# edges", "\n", "edges_x", "=", "[", "torch", ".", "cat", "(", "[", "e", ".", "new", "(", "1", ")", ".", "fill_", "(", "eos_idx", ")", ",", "e", "]", ")", "for", "e", "in", "edges", "]", "\n", "edges_y", "=", "[", "torch", ".", "cat", "(", "[", "e", ",", "e", ".", "new", "(", "1", ")", ".", "fill_", "(", "eos_idx", ")", "]", ")", "for", "e", "in", "edges", "]", "\n", "\n", "return", "nodes_x", ",", "nodes_y", ",", "edges_x", ",", "edges_y", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.collate_fn": [[54, 118], ["torch.LongTensor", "data_utils.collate_fn.src_graph_batch"], "function", ["None"], ["", "def", "collate_fn", "(", "samples", ",", "pad_idx", ",", "eos_idx", ",", "train", ")", ":", "\n", "\n", "    ", "def", "src_graph_batch", "(", "values", ")", ":", "\n", "        ", "nodes", "=", "[", "s", "[", "0", "]", "for", "s", "in", "values", "]", "\n", "edges", "=", "[", "s", "[", "1", "]", "for", "s", "in", "values", "]", "\n", "\n", "bsz", "=", "len", "(", "nodes", ")", "\n", "max_size", "=", "max", "(", "[", "n", ".", "size", "(", "0", ")", "for", "n", "in", "nodes", "]", ")", "\n", "\n", "nodes_t", "=", "collate_tokens", "(", "nodes", ",", "pad_idx", ",", "(", "bsz", ",", "max_size", ")", ")", "\n", "edges_t", "=", "collate_tokens", "(", "edges", ",", "pad_idx", ",", "(", "bsz", ",", "max_size", ",", "max_size", ")", ")", "\n", "\n", "return", "nodes_t", ",", "edges_t", "\n", "\n", "", "def", "text_batch", "(", "values", ")", ":", "\n", "        ", "tensors", "=", "[", "s", "for", "s", "in", "values", "]", "\n", "\n", "bsz", "=", "len", "(", "tensors", ")", "\n", "max_size", "=", "max", "(", "[", "t", ".", "size", "(", "0", ")", "for", "t", "in", "tensors", "]", ")", "\n", "\n", "tensor", "=", "collate_tokens", "(", "tensors", ",", "pad_idx", ",", "(", "bsz", ",", "max_size", ")", ")", "\n", "\n", "return", "tensor", "\n", "\n", "", "def", "tgt_graph_batch", "(", "values", ")", ":", "\n", "\n", "        ", "nodes", "=", "[", "s", "[", "0", "]", "for", "s", "in", "values", "]", "\n", "edges", "=", "[", "s", "[", "1", "]", "for", "s", "in", "values", "]", "\n", "\n", "edges", "=", "flatten_edge", "(", "edges", ")", "\n", "nodes_x", ",", "nodes_y", ",", "edges_x", ",", "edges_y", "=", "shift_for_output", "(", "nodes", ",", "edges", ",", "eos_idx", ",", "pad_idx", ")", "\n", "\n", "bsz", "=", "len", "(", "nodes", ")", "\n", "\n", "max_size", "=", "max", "(", "[", "n", ".", "size", "(", "0", ")", "for", "n", "in", "nodes_x", "]", ")", "\n", "nodes_x_t", "=", "collate_tokens", "(", "nodes_x", ",", "pad_idx", ",", "(", "bsz", ",", "max_size", ")", ")", "\n", "nodes_y_t", "=", "collate_tokens", "(", "nodes_y", ",", "pad_idx", ",", "(", "bsz", ",", "max_size", ")", ")", "\n", "\n", "max_size", "=", "max", "(", "[", "e", ".", "size", "(", "0", ")", "for", "e", "in", "edges_x", "]", ")", "\n", "edges_x_t", "=", "collate_tokens", "(", "edges_x", ",", "pad_idx", ",", "(", "bsz", ",", "max_size", ")", ")", "\n", "edges_y_t", "=", "collate_tokens", "(", "edges_y", ",", "pad_idx", ",", "(", "bsz", ",", "max_size", ")", ")", "\n", "\n", "return", "nodes_x_t", ",", "nodes_y_t", ",", "edges_x_t", ",", "edges_y_t", "\n", "\n", "", "ids", "=", "torch", ".", "LongTensor", "(", "[", "s", "[", "0", "]", "for", "s", "in", "samples", "]", ")", "\n", "src_nodes", ",", "src_edges", "=", "src_graph_batch", "(", "[", "s", "[", "1", "]", "for", "s", "in", "samples", "]", ")", "\n", "queries", "=", "text_batch", "(", "[", "s", "[", "2", "]", "for", "s", "in", "samples", "]", ")", "\n", "tgt_nodes_x", ",", "tgt_nodes_y", ",", "tgt_edges_x", ",", "tgt_edges_y", "=", "tgt_graph_batch", "(", "[", "s", "[", "3", "]", "for", "s", "in", "samples", "]", ")", "\n", "\n", "return", "{", "\n", "\"ids\"", ":", "ids", ",", "\n", "\"src_graph\"", ":", "{", "\n", "\"nodes\"", ":", "src_nodes", ",", "\n", "\"edges\"", ":", "src_edges", "\n", "}", ",", "\n", "\"src_text\"", ":", "{", "\"x\"", ":", "queries", "}", ",", "\n", "\"tgt_graph\"", ":", "{", "\n", "\"nodes\"", ":", "{", "\n", "\"x\"", ":", "tgt_nodes_x", ",", "\n", "\"y\"", ":", "tgt_nodes_y", "\n", "}", ",", "\n", "\"edges\"", ":", "{", "\n", "\"x\"", ":", "tgt_edges_x", ",", "\n", "\"y\"", ":", "tgt_edges_y", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.build_dictionary_from_text": [[373, 390], ["os.path.exists", "collections.Counter", "open", "open", "line.strip().split.strip().split", "collections.Counter.update", "f.write", "f.write", "collections.Counter.most_common", "collections.Counter.items", "line.strip().split.strip"], "function", ["None"], ["", "", "def", "build_dictionary_from_text", "(", "data_file", ",", "dict_file", ",", "threshold", "=", "0", ",", "max_vocab", "=", "-", "1", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dict_file", ")", ":", "\n", "        ", "c", "=", "Counter", "(", ")", "\n", "with", "open", "(", "data_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "c", ".", "update", "(", "line", ")", "\n", "\n", "", "", "if", "max_vocab", "!=", "-", "1", ":", "\n", "            ", "vocab", "=", "[", "tok", "for", "tok", ",", "_", "in", "c", ".", "most_common", "(", "max_vocab", ")", "]", "\n", "", "else", ":", "\n", "            ", "vocab", "=", "[", "tok", "for", "tok", ",", "count", "in", "c", ".", "items", "(", ")", "if", "count", ">=", "threshold", "]", "\n", "\n", "", "with", "open", "(", "dict_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "for", "v", "in", "vocab", ":", "\n", "                ", "f", ".", "write", "(", "v", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.build_dictionary_from_bin": [[392, 426], ["collections.Counter", "collections.Counter", "os.path.exists", "os.path.exists", "data_utils.build_dictionary_from_bin.load_data"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.load_data"], ["", "", "", "", "def", "build_dictionary_from_bin", "(", "data_files", ",", "node_dict_file", ",", "edge_dict_file", ",", "threshold", "=", "0", ",", "max_vocab", "=", "-", "1", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "node_dict_file", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "edge_dict_file", ")", ":", "\n", "        ", "def", "load_data", "(", "output_file", ")", ":", "\n", "            ", "with", "open", "(", "output_file", ",", "\"rb\"", ")", "as", "fr", ":", "\n", "                ", "while", "True", ":", "\n", "                    ", "try", ":", "\n", "                        ", "yield", "pickle", ".", "load", "(", "fr", ")", "\n", "", "except", "EOFError", ":", "\n", "                        ", "break", "\n", "\n", "", "", "", "", "c_node", "=", "Counter", "(", ")", "\n", "c_edge", "=", "Counter", "(", ")", "\n", "for", "data_file", "in", "data_files", ":", "\n", "            ", "graphs", "=", "load_data", "(", "data_file", ")", "\n", "for", "graph", "in", "graphs", ":", "\n", "                ", "c_node", ".", "update", "(", "[", "node", "[", "-", "1", "]", "[", "\"feature\"", "]", "for", "node", "in", "graph", ".", "nodes", ".", "data", "(", ")", "]", ")", "\n", "c_edge", ".", "update", "(", "[", "edge", "[", "-", "1", "]", "[", "\"feature\"", "]", "for", "edge", "in", "graph", ".", "edges", ".", "data", "(", ")", "]", ")", "\n", "\n", "", "", "if", "max_vocab", "!=", "-", "1", ":", "\n", "            ", "node_vocab", "=", "[", "node", "for", "node", ",", "_", "in", "c_node", ".", "most_common", "(", "max_vocab", ")", "]", "\n", "edge_vocab", "=", "[", "edge", "for", "edge", ",", "_", "in", "c_edge", ".", "most_common", "(", "max_vocab", ")", "]", "\n", "", "else", ":", "\n", "            ", "node_vocab", "=", "[", "node", "for", "node", ",", "count", "in", "c_node", ".", "items", "(", ")", "if", "count", ">=", "threshold", "]", "\n", "edge_vocab", "=", "[", "edge", "for", "edge", ",", "count", "in", "c_edge", ".", "items", "(", ")", "if", "count", ">=", "threshold", "]", "\n", "\n", "", "with", "open", "(", "node_dict_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "for", "v", "in", "node_vocab", ":", "\n", "                ", "f", ".", "write", "(", "v", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "", "with", "open", "(", "edge_dict_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "for", "v", "in", "edge_vocab", ":", "\n", "                ", "f", ".", "write", "(", "v", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.build_dictionary": [[428, 460], ["os.path.exists", "collections.Counter", "data_utils.build_dictionary_from_bin.load_data"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.load_data"], ["", "", "", "", "def", "build_dictionary", "(", "graph_data_files", ",", "text_data_file", ",", "dict_file", ",", "threshold", "=", "0", ",", "max_vocab", "=", "-", "1", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dict_file", ")", ":", "\n", "        ", "def", "load_data", "(", "output_file", ")", ":", "\n", "            ", "with", "open", "(", "output_file", ",", "\"rb\"", ")", "as", "fr", ":", "\n", "                ", "while", "True", ":", "\n", "                    ", "try", ":", "\n", "                        ", "yield", "pickle", ".", "load", "(", "fr", ")", "\n", "", "except", "EOFError", ":", "\n", "                        ", "break", "\n", "\n", "", "", "", "", "tokens", "=", "Counter", "(", ")", "\n", "\n", "for", "data_file", "in", "graph_data_files", ":", "\n", "            ", "graphs", "=", "load_data", "(", "data_file", ")", "\n", "for", "graph", "in", "graphs", ":", "\n", "                ", "tokens", ".", "update", "(", "[", "node", "[", "-", "1", "]", "[", "\"feature\"", "]", "for", "node", "in", "graph", ".", "nodes", ".", "data", "(", ")", "]", ")", "\n", "tokens", ".", "update", "(", "[", "edge", "[", "-", "1", "]", "[", "\"feature\"", "]", "for", "edge", "in", "graph", ".", "edges", ".", "data", "(", ")", "]", ")", "\n", "\n", "", "", "with", "open", "(", "text_data_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "tokens", ".", "update", "(", "line", ")", "\n", "\n", "", "", "if", "max_vocab", "!=", "-", "1", ":", "\n", "            ", "vocab", "=", "[", "node", "for", "node", ",", "_", "in", "tokens", ".", "most_common", "(", "max_vocab", ")", "]", "\n", "", "else", ":", "\n", "            ", "vocab", "=", "[", "node", "for", "node", ",", "count", "in", "tokens", ".", "items", "(", ")", "if", "count", ">=", "threshold", "]", "\n", "\n", "", "with", "open", "(", "dict_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "for", "v", "in", "vocab", ":", "\n", "                ", "f", ".", "write", "(", "v", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.train.load_dict": [[22, 31], ["data_utils.Dictionary().load", "Dictionary().load.add_symbol", "os.path.join", "data_utils.Dictionary"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.load", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.add_symbol"], ["def", "load_dict", "(", "args", ")", ":", "\n", "    ", "\"\"\" Load dictionary \"\"\"", "\n", "node_dict", "=", "Dictionary", "(", ")", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"dict.txt\"", ")", ")", "\n", "\n", "node_dict", ".", "add_symbol", "(", "\"<blank>\"", ")", "\n", "edge_dict", "=", "node_dict", "\n", "text_dict", "=", "node_dict", "\n", "\n", "return", "node_dict", ",", "edge_dict", ",", "text_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.train.load_data": [[33, 45], ["data_utils.GraphReader", "data_utils.TextReader", "data_utils.GraphReader", "data_utils.GraphTransReader", "os.path.join", "os.path.join", "os.path.join", "node_dict.pad", "node_dict.eos", "edge_dict.index"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.pad", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.eos", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.index"], ["", "def", "load_data", "(", "args", ",", "node_dict", ",", "edge_dict", ",", "text_dict", ",", "stage", "=", "\"train\"", ")", ":", "\n", "    ", "\"\"\" Load data\n    stage: train/dev\n    \"\"\"", "\n", "src_graph", "=", "GraphReader", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"{}_src_graph.bin\"", ".", "format", "(", "stage", ")", ")", ",", "node_dict", ",", "edge_dict", ")", "\n", "src_text", "=", "TextReader", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"{}_src_text.txt\"", ".", "format", "(", "stage", ")", ")", ",", "text_dict", ")", "\n", "tgt_graph", "=", "GraphReader", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"{}_tgt_graph.bin\"", ".", "format", "(", "stage", ")", ")", ",", "node_dict", ",", "edge_dict", ")", "\n", "data", "=", "GraphTransReader", "(", "src_graph", ",", "src_text", ",", "tgt_graph", ",", "\n", "node_dict", ".", "pad", "(", ")", ",", "node_dict", ".", "eos", "(", ")", ",", "edge_dict", ".", "index", "(", "\"<blank>\"", ")", ",", "\n", "stage", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.train.validation_acc": [[47, 71], ["model.eval", "time.time", "enumerate", "print", "model.train", "search.greedy_search", "eval_info.format", "utils.move_to_cuda", "time.time"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.greedy_search", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.move_to_cuda"], ["", "def", "validation_acc", "(", "model", ",", "dev_iters", ",", "epoch", ",", "epochs", ",", "node_dict", ",", "edge_dict", ",", "max_nodes", ",", "cuda", ")", ":", "\n", "    ", "\"\"\" Evaluate the model on dev set\"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "eval_st", "=", "time", ".", "time", "(", ")", "\n", "graphs", ",", "graph_corrects", "=", "0", ",", "0", "\n", "\n", "for", "i", ",", "dev_it", "in", "enumerate", "(", "dev_iters", ")", ":", "\n", "        ", "if", "cuda", ":", "\n", "            ", "samples", "=", "move_to_cuda", "(", "dev_it", ")", "\n", "", "else", ":", "\n", "            ", "samples", "=", "dev_it", "\n", "\n", "", "_", ",", "_", ",", "_", ",", "batch_graph_correct", "=", "greedy_search", "(", "model", ",", "samples", "[", "\"src_graph\"", "]", ",", "samples", "[", "\"src_text\"", "]", ",", "samples", "[", "\"tgt_graph\"", "]", ",", "\n", "node_dict", ",", "edge_dict", ",", "max_nodes", ",", "cuda", ")", "\n", "graph_corrects", "+=", "batch_graph_correct", "\n", "graphs", "+=", "1", "\n", "\n", "", "acc", "=", "graph_corrects", "/", "graphs", "\n", "eval_time", "=", "(", "time", ".", "time", "(", ")", "-", "eval_st", ")", "/", "60", "\n", "eval_info", "=", "\"[  Eval {:02}/{:02}]: accuracy={:.4f}  elapse={:.4f} mins\"", "\n", "print", "(", "eval_info", ".", "format", "(", "epoch", "+", "1", ",", "epochs", ",", "acc", ",", "eval_time", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.train.main": [[73, 163], ["utils.get_parser", "utils.get_parser.parse_args", "print", "numpy.random.seed", "torch.manual_seed", "torch.cuda.is_available", "train.load_dict", "train.load_data", "train.load_data", "print", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.GraphTrans", "print", "utils.get_std_opt", "print", "utils.get_std_opt.zero_grad", "utils.load_model", "range", "load_data.item_size", "load_data.item_size", "models.GraphTrans.cuda", "models.GraphTrans.train", "time.time", "train.validation_acc", "utils.save_model", "print", "range", "range", "len", "len", "data_utils.BatchSampler", "data_utils.BatchSampler", "sum", "sum", "models.GraphTrans.", "model.item", "model.backward", "utils.save_model", "train_info.format", "len", "len", "torch.tensor", "torch.tensor", "utils.move_to_cuda", "utils.get_std_opt.clip_grad_norm", "utils.get_std_opt.step", "utils.get_std_opt.zero_grad", "utils.get_std_opt.get_step", "time.time", "utils.get_std_opt.rate", "p.numel", "p.numel", "train.validation_acc", "models.GraphTrans.parameters", "models.GraphTrans.parameters", "utils.save_model"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.get_parser", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.load_dict", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.load_data", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.load_data", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.get_std_opt", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.zero_grad", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.load_model", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.TextReader.item_size", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.TextReader.item_size", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.train.validation_acc", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.save_model", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.save_model", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.move_to_cuda", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.clip_grad_norm", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.step", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.zero_grad", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.get_step", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.rate", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.train.validation_acc", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.save_model"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "node_dict", ",", "edge_dict", ",", "text_dict", "=", "load_dict", "(", "args", ")", "\n", "\n", "train_data", "=", "load_data", "(", "args", ",", "node_dict", ",", "edge_dict", ",", "text_dict", ")", "\n", "dev_data", "=", "load_data", "(", "args", ",", "node_dict", ",", "edge_dict", ",", "text_dict", ",", "stage", "=", "\"dev\"", ")", "\n", "\n", "train_tgt_sizes", "=", "[", "train_data", ".", "item_size", "(", "i", ",", "-", "1", ")", "for", "i", "in", "range", "(", "len", "(", "train_data", ")", ")", "]", "\n", "dev_tgt_sizes", "=", "[", "dev_data", ".", "item_size", "(", "i", ",", "-", "1", ")", "for", "i", "in", "range", "(", "len", "(", "dev_data", ")", ")", "]", "\n", "print", "(", "\" [training]: {} examples\"", ".", "format", "(", "len", "(", "train_data", ")", ")", ")", "\n", "print", "(", "\" [dev     ]: {} examples\"", ".", "format", "(", "len", "(", "dev_data", ")", ")", ")", "\n", "\n", "train_iters", "=", "DataLoader", "(", "train_data", ",", "\n", "batch_sampler", "=", "BatchSampler", "(", "torch", ".", "tensor", "(", "train_tgt_sizes", ")", ",", "batch", "=", "args", ".", "batch_size", ")", ",", "\n", "collate_fn", "=", "train_data", ".", "collate_fn", ")", "\n", "dev_iters", "=", "DataLoader", "(", "dev_data", ",", "\n", "batch_sampler", "=", "BatchSampler", "(", "torch", ".", "tensor", "(", "dev_tgt_sizes", ")", ",", "batch", "=", "1", ")", ",", "\n", "collate_fn", "=", "dev_data", ".", "collate_fn", ")", "\n", "\n", "model", "=", "GraphTrans", "(", "args", ",", "node_dict", ",", "edge_dict", ",", "text_dict", ")", "\n", "print", "(", "'| num. model params: {} (num. trained: {})'", ".", "format", "(", "\n", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ",", "\n", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", ")", ")", "\n", "if", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "opt", "=", "get_std_opt", "(", "args", ",", "model", ")", "\n", "print", "(", "model", ")", "\n", "\n", "# best_val = 9e+99", "\n", "best_val", "=", "0.", "\n", "start_epoch", "=", "0", "\n", "batch_step", "=", "0", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "\n", "saved", "=", "load_model", "(", "args", ",", "model", ",", "optimizer", "=", "opt", ")", "\n", "\n", "# load save model and optimizer from disk", "\n", "if", "saved", ":", "\n", "        ", "best_val", "=", "saved", "[", "\"best_val\"", "]", "\n", "# best_val = 0.", "\n", "start_epoch", "=", "saved", "[", "\"epoch\"", "]", "\n", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "epoch_loss", ",", "epoch_steps", "=", "0.", ",", "0", "\n", "epoch_st", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "train_it", "in", "train_iters", ":", "\n", "            ", "if", "cuda", ":", "\n", "                ", "samples", "=", "move_to_cuda", "(", "train_it", ")", "\n", "", "else", ":", "\n", "                ", "samples", "=", "train_it", "\n", "", "loss", "=", "model", "(", "samples", "[", "\"src_graph\"", "]", ",", "samples", "[", "\"src_text\"", "]", ",", "samples", "[", "\"tgt_graph\"", "]", ")", "\n", "loss", "=", "loss", "/", "args", ".", "accumulation_steps", "# Normalize our loss (if averaged)", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "(", "batch_step", "+", "1", ")", "%", "args", ".", "accumulation_steps", "==", "0", ":", "# Wait for several backward steps", "\n", "                ", "opt", ".", "clip_grad_norm", "(", "args", ".", "clip_norm", ")", "\n", "opt", ".", "step", "(", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "\n", "total_steps", "=", "opt", ".", "get_step", "(", ")", "\n", "\n", "# evaluate the model on dev set", "\n", "if", "total_steps", "%", "args", ".", "eval_step", "==", "0", ":", "\n", "                    ", "val_acc", "=", "validation_acc", "(", "model", ",", "dev_iters", ",", "epoch", ",", "args", ".", "epochs", ",", "node_dict", ",", "edge_dict", ",", "10", ",", "cuda", ")", "\n", "if", "val_acc", ">", "best_val", ":", "\n", "                        ", "save_model", "(", "args", ",", "model", ",", "opt", ",", "epoch", ",", "best_val", ",", "\"best\"", ")", "\n", "best_val", "=", "val_acc", "\n", "\n", "", "", "epoch_steps", "+=", "1", "\n", "", "batch_step", "+=", "1", "\n", "\n", "", "val_acc", "=", "validation_acc", "(", "model", ",", "dev_iters", ",", "epoch", ",", "args", ".", "epochs", ",", "node_dict", ",", "edge_dict", ",", "10", ",", "cuda", ")", "\n", "if", "val_acc", ">", "best_val", ":", "\n", "            ", "save_model", "(", "args", ",", "model", ",", "opt", ",", "epoch", ",", "best_val", ",", "\"best\"", ")", "\n", "best_val", "=", "val_acc", "\n", "\n", "", "save_model", "(", "args", ",", "model", ",", "opt", ",", "epoch", "+", "1", ",", "best_val", ",", "\"last\"", ")", "\n", "epoch_time", "=", "(", "time", ".", "time", "(", ")", "-", "epoch_st", ")", "/", "60", "\n", "train_info", "=", "\"[Train {:02}/{:02}]: total_loss={:.4f} avg_loss={:.4f} total_steps={:05} elapse={:.4f} mins best_val={:.4f} lr={:.4f}\"", "\n", "print", "(", "train_info", ".", "format", "(", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "epoch_loss", ",", "epoch_loss", "/", "epoch_steps", ",", "total_steps", ",", "epoch_time", ",", "best_val", ",", "opt", ".", "rate", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.preprocess.main": [[14, 22], ["os.path.join", "os.path.join", "data_utils.build_dictionary", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.build_dictionary"], ["def", "main", "(", "data_dir", ",", "freq", "=", "3", ")", ":", "\n", "# paths to graphs and queries", "\n", "    ", "graph_paths", "=", "[", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train_src_graph.bin\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train_tgt_graph.bin\"", ")", "]", "\n", "text_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train_src_text.txt\"", ")", "\n", "\n", "dict_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dict.txt\"", ")", "\n", "build_dictionary", "(", "graph_paths", ",", "text_path", ",", "dict_path", ",", "freq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.load_dict": [[25, 33], ["data_utils.Dictionary().load", "Dictionary().load.add_symbol", "os.path.join", "data_utils.Dictionary"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.load", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.add_symbol"], ["def", "load_dict", "(", "args", ")", ":", "\n", "    ", "node_dict", "=", "Dictionary", "(", ")", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"dict.txt\"", ")", ")", "\n", "\n", "node_dict", ".", "add_symbol", "(", "\"<blank>\"", ")", "\n", "edge_dict", "=", "node_dict", "\n", "text_dict", "=", "node_dict", "\n", "\n", "return", "node_dict", ",", "edge_dict", ",", "text_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.load_data": [[35, 44], ["data_utils.GraphReader", "data_utils.TextReader", "data_utils.GraphReader", "data_utils.GraphTransReader", "os.path.join", "os.path.join", "os.path.join", "node_dict.pad", "node_dict.eos", "edge_dict.index"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.pad", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.eos", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.index"], ["", "def", "load_data", "(", "args", ",", "node_dict", ",", "edge_dict", ",", "text_dict", ",", "stage", "=", "\"train\"", ")", ":", "\n", "    ", "src_graph", "=", "GraphReader", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"{}_src_graph.bin\"", ".", "format", "(", "stage", ")", ")", ",", "node_dict", ",", "edge_dict", ")", "\n", "src_text", "=", "TextReader", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"{}_src_text.txt\"", ".", "format", "(", "stage", ")", ")", ",", "text_dict", ")", "\n", "tgt_graph", "=", "GraphReader", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"{}_tgt_graph.bin\"", ".", "format", "(", "stage", ")", ")", ",", "node_dict", ",", "edge_dict", ")", "\n", "data", "=", "GraphTransReader", "(", "src_graph", ",", "src_text", ",", "tgt_graph", ",", "\n", "node_dict", ".", "pad", "(", ")", ",", "node_dict", ".", "eos", "(", ")", ",", "edge_dict", ".", "index", "(", "\"<blank>\"", ")", ",", "\n", "stage", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.decoding": [[46, 106], ["torch.tensor", "torch.tensor", "torch.cat", "len", "torch.tensor", "zip", "input.cuda.cuda", "nodes_len.cuda.cuda", "graph_dec.node_forward", "torch.nn.functional.softmax().argmax", "F.softmax().argmax.view().item", "inputs.append", "h_list.append", "input.cuda.cuda", "functools.reduce", "functools.reduce", "graph_dec.edge_forward", "torch.nn.functional.softmax().argmax", "edges.append", "node_rnn_outputs.new_zeros.append", "torch.cat", "torch.cat.size", "torch.cat.new_zeros", "node_dict.eos", "F.softmax().argmax.view().cpu().item", "node_dict.eos", "torch.nn.functional.softmax", "F.softmax().argmax.view", "edge_dict.eos", "torch.nn.functional.softmax", "range", "range", "edge_dict.eos", "F.softmax().argmax.view().cpu", "node_dict.eos", "range", "range", "F.softmax().argmax.view"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Decoder.node_forward", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.Decoder.edge_forward", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.eos", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.eos", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.eos", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.eos", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.eos"], ["", "def", "decoding", "(", "graph_dec", ",", "enc_info", ",", "node_dict", ",", "edge_dict", ",", "max_nodes", ",", "cuda", ")", ":", "\n", "    ", "step", "=", "0", "\n", "\n", "input", "=", "torch", ".", "tensor", "(", "[", "[", "node_dict", ".", "eos", "(", ")", "]", "]", ")", "\n", "inputs", "=", "[", "]", "\n", "nodes_len", "=", "torch", ".", "tensor", "(", "[", "1", "]", ")", "\n", "if", "cuda", ":", "\n", "        ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "nodes_len", "=", "nodes_len", ".", "cuda", "(", ")", "\n", "\n", "", "h_prev", "=", "None", "\n", "h_list", "=", "[", "]", "\n", "\n", "while", "step", "<", "max_nodes", ":", "\n", "        ", "_", ",", "h_cur", ",", "logits", "=", "graph_dec", ".", "node_forward", "(", "enc_info", ",", "input", ",", "nodes_len", ",", "h_prev", ")", "\n", "\n", "if", "step", "==", "0", ":", "\n", "            ", "logits", "[", ":", ",", ":", ",", "node_dict", ".", "eos", "(", ")", "]", "=", "-", "1e9", "\n", "", "next_input", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "input", "=", "next_input", "\n", "h_prev", "=", "h_cur", "\n", "\n", "new_tok", "=", "next_input", ".", "view", "(", "-", "1", ")", ".", "item", "(", ")", "\n", "if", "new_tok", "==", "node_dict", ".", "eos", "(", ")", ":", "\n", "            ", "break", "\n", "", "inputs", ".", "append", "(", "new_tok", ")", "\n", "h_list", ".", "append", "(", "h_cur", ")", "\n", "\n", "step", "+=", "1", "\n", "\n", "", "node_rnn_outputs", "=", "torch", ".", "cat", "(", "h_list", ",", "dim", "=", "1", ")", "\n", "max_step", "=", "len", "(", "h_list", ")", "\n", "edges", "=", "[", "]", "\n", "h_prev", "=", "None", "\n", "input", "=", "torch", ".", "tensor", "(", "[", "[", "edge_dict", ".", "eos", "(", ")", "]", "]", ")", "\n", "if", "cuda", ":", "\n", "        ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "\n", "", "src_nodes", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "[", "[", "i", "for", "_", "in", "range", "(", "i", ")", "]", "for", "i", "in", "range", "(", "1", ",", "max_step", ")", "]", ")", "if", "max_step", ">", "1", "else", "[", "]", "\n", "tgt_nodes", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "[", "[", "j", "for", "j", "in", "range", "(", "i", ")", "]", "for", "i", "in", "range", "(", "1", ",", "max_step", ")", "]", ")", "if", "max_step", ">", "1", "else", "[", "]", "\n", "\n", "edge_rnn_outputs", "=", "[", "]", "\n", "for", "src", ",", "tgt", "in", "zip", "(", "src_nodes", ",", "tgt_nodes", ")", ":", "\n", "        ", "src_node_states", "=", "node_rnn_outputs", "[", ":", ",", "src", ":", "src", "+", "1", "]", "\n", "tgt_node_states", "=", "node_rnn_outputs", "[", ":", ",", "tgt", ":", "tgt", "+", "1", "]", "\n", "_", ",", "h_cur", ",", "logits", "=", "graph_dec", ".", "edge_forward", "(", "enc_info", ",", "input", ",", "src_node_states", ",", "tgt_node_states", ",", "h_prev", ")", "\n", "logits", "[", ":", ",", ":", ",", "edge_dict", ".", "eos", "(", ")", "]", "=", "-", "1e9", "\n", "next_input", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "input", "=", "next_input", "\n", "edges", ".", "append", "(", "next_input", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "h_prev", "=", "h_cur", "\n", "edge_rnn_outputs", ".", "append", "(", "h_prev", ")", "\n", "\n", "", "if", "edge_rnn_outputs", ":", "\n", "        ", "edge_rnn_outputs", "=", "torch", ".", "cat", "(", "edge_rnn_outputs", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "bsz", "=", "node_rnn_outputs", ".", "size", "(", "0", ")", "\n", "edge_rnn_outputs", "=", "node_rnn_outputs", ".", "new_zeros", "(", "bsz", ",", "0", ",", "graph_dec", ".", "args", ".", "edge_hidden_size", ")", "\n", "\n", "", "return", "inputs", ",", "node_rnn_outputs", ",", "edges", ",", "edge_rnn_outputs", ",", "src_nodes", ",", "tgt_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.greedy_search": [[108, 171], ["model.encoder", "search.decoding", "collections.Counter", "len", "collections.Counter.update", "sum", "collections.Counter", "[].cpu", "zip", "zip", "sum", "i.item", "functools.reduce", "functools.reduce", "edge_dict.index", "tuple", "act_edges.append", "edge_dict.index", "tuple", "pred_edges.append", "sorted", "sorted", "sorted", "sorted", "len", "len", "node_dict.unk", "sorted", "sorted", "range", "range", "range", "range", "node_dict.unk", "edge_dict.unk", "node_dict.unk"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.models.GraphTrans.encoder", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.decoding", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.index", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.index", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.unk", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.unk", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.unk", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.unk"], ["", "def", "greedy_search", "(", "model", ",", "src_graph", ",", "src_text", ",", "tgt_graph", ",", "\n", "node_dict", ",", "edge_dict", ",", "max_nodes", ",", "cuda", ")", ":", "\n", "# graph encoder", "\n", "    ", "enc_info", "=", "model", ".", "encoder", "(", "src_graph", ",", "src_text", ")", "\n", "inputs", ",", "_", ",", "edges", ",", "_", ",", "src_nodes", ",", "tgt_nodes", "=", "decoding", "(", "model", ".", "graph_dec", ",", "enc_info", ",", "\n", "node_dict", ",", "edge_dict", ",", "max_nodes", ",", "cuda", ")", "\n", "\n", "node_c", "=", "Counter", "(", ")", "\n", "act_outputs", "=", "[", "i", ".", "item", "(", ")", "for", "i", "in", "tgt_graph", "[", "\"nodes\"", "]", "[", "\"y\"", "]", "[", "0", "]", "[", ":", "-", "1", "]", "]", "\n", "node_total_num", "=", "len", "(", "act_outputs", ")", "\n", "node_c", ".", "update", "(", "act_outputs", ")", "\n", "for", "node", "in", "inputs", ":", "\n", "# if node in node_c and node_c[node] > 0:", "\n", "        ", "if", "node", "in", "node_c", "and", "node_c", "[", "node", "]", ">", "0", "and", "node", "!=", "node_dict", ".", "unk", "(", ")", ":", "\n", "            ", "node_c", "[", "node", "]", "-=", "1", "\n", "\n", "", "", "node_incorrect", "=", "sum", "(", "[", "node_c", "[", "k", "]", "for", "k", "in", "node_c", "]", ")", "\n", "# print(node_total_num, node_incorrect)", "\n", "#print(node_dict.string(inputs))", "\n", "#print(node_dict.string(tgt_graph[\"nodes\"][\"y\"][0][:-1]))", "\n", "# print(\"*\"*20)", "\n", "# print(edge_dict.string(adj))", "\n", "pred_edges", "=", "[", "]", "\n", "act_edges", "=", "[", "]", "\n", "edge_c", "=", "Counter", "(", ")", "\n", "edge_total_num", "=", "0", "\n", "ref_src_nodes", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "[", "[", "i", "for", "_", "in", "range", "(", "i", ")", "]", "for", "i", "in", "range", "(", "1", ",", "node_total_num", ")", "]", ")", "if", "node_total_num", ">", "1", "else", "[", "]", "\n", "ref_tgt_nodes", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "[", "[", "j", "for", "j", "in", "range", "(", "i", ")", "]", "for", "i", "in", "range", "(", "1", ",", "node_total_num", ")", "]", ")", "if", "node_total_num", ">", "1", "else", "[", "]", "\n", "ref_edges", "=", "tgt_graph", "[", "\"edges\"", "]", "[", "\"y\"", "]", "[", "0", "]", "[", ":", "-", "1", "]", ".", "cpu", "(", ")", "\n", "# ground truth", "\n", "for", "edge", ",", "src", ",", "tgt", "in", "zip", "(", "ref_edges", ",", "ref_src_nodes", ",", "ref_tgt_nodes", ")", ":", "\n", "        ", "if", "edge", "!=", "edge_dict", ".", "index", "(", "\"<blank>\"", ")", ":", "\n", "# arc = tuple(sorted([node_dict[act_outputs[src]], edge_dict[edge], node_dict[act_outputs[tgt]]]))", "\n", "            ", "arc", "=", "tuple", "(", "sorted", "(", "[", "node_dict", "[", "act_outputs", "[", "src", "]", "]", "if", "act_outputs", "[", "src", "]", "!=", "node_dict", ".", "unk", "(", ")", "else", "\"<<unk>>\"", ",", "edge_dict", "[", "edge", "]", "if", "edge", "!=", "edge_dict", ".", "unk", "(", ")", "else", "\"<<unk>>\"", ",", "node_dict", "[", "act_outputs", "[", "tgt", "]", "]", "if", "act_outputs", "[", "tgt", "]", "!=", "node_dict", ".", "unk", "(", ")", "else", "\"<<unk>>\"", "]", ")", ")", "\n", "#arc = (node_dict[act_outpus[src]], edge_dict[edge], node_dict[act_outpus[tgt]])", "\n", "edge_c", "[", "arc", "]", "+=", "1", "\n", "edge_total_num", "+=", "1", "\n", "act_edges", ".", "append", "(", "arc", ")", "\n", "# predicted edges", "\n", "", "", "for", "edge", ",", "src", ",", "tgt", "in", "zip", "(", "edges", ",", "src_nodes", ",", "tgt_nodes", ")", ":", "\n", "        ", "if", "edge", "!=", "edge_dict", ".", "index", "(", "\"<blank>\"", ")", ":", "\n", "            ", "arc", "=", "tuple", "(", "sorted", "(", "[", "node_dict", "[", "inputs", "[", "src", "]", "]", ",", "edge_dict", "[", "edge", "]", ",", "node_dict", "[", "inputs", "[", "tgt", "]", "]", "]", ")", ")", "\n", "#arc = (node_dict[inputs[src]], edge_dict[edge], node_dict[inputs[tgt]])", "\n", "pred_edges", ".", "append", "(", "arc", ")", "\n", "if", "arc", "in", "edge_c", "and", "edge_c", "[", "arc", "]", ">", "0", ":", "\n", "                ", "edge_c", "[", "arc", "]", "-=", "1", "\n", "", "", "", "edge_incorrect", "=", "sum", "(", "[", "edge_c", "[", "k", "]", "for", "k", "in", "edge_c", "]", ")", "\n", "# print(edge_total_num, edge_incorrect)", "\n", "# print(\"-\"*20)", "\n", "# total_num = node_total_num + edge_total_num", "\n", "# incorrect = node_incorrect + edge_incorrect", "\n", "# total_pred = len(inputs) + len(pred_edges)", "\n", "# total_num = edge_total_num", "\n", "# incorrect = edge_incorrect", "\n", "# total_pred = len(pred_edges)", "\n", "node_correct", "=", "node_total_num", "-", "node_incorrect", "\n", "edge_correct", "=", "edge_total_num", "-", "edge_incorrect", "\n", "graph_correct", "=", "0", "\n", "\n", "if", "sorted", "(", "inputs", ")", "==", "sorted", "(", "act_outputs", ")", "and", "sorted", "(", "pred_edges", ")", "==", "sorted", "(", "act_edges", ")", ":", "\n", "        ", "graph_correct", "=", "1", "\n", "\n", "", "return", "(", "node_correct", ",", "edge_correct", ")", ",", "(", "node_total_num", ",", "edge_total_num", ")", ",", "(", "len", "(", "inputs", ")", ",", "len", "(", "pred_edges", ")", ")", ",", "graph_correct", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.main": [[173, 227], ["utils.get_parser", "utils.get_parser.parse_args", "print", "torch.cuda.is_available", "search.load_dict", "search.load_data", "print", "torch.utils.data.DataLoader", "models.GraphTrans", "models.GraphTrans.eval", "utils.load_model", "enumerate", "print", "print", "print", "load_data.item_size", "models.GraphTrans.cuda", "FileNotFoundError", "search.greedy_search", "range", "len", "data_utils.BatchSampler", "utils.move_to_cuda", "len", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.get_parser", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.load_dict", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.load_data", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.load_model", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.TextReader.item_size", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.search.greedy_search", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.move_to_cuda"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", "\"test\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "node_dict", ",", "edge_dict", ",", "text_dict", "=", "load_dict", "(", "args", ")", "\n", "\n", "test_data", "=", "load_data", "(", "args", ",", "node_dict", ",", "edge_dict", ",", "text_dict", ",", "\n", "stage", "=", "\"test\"", ")", "\n", "\n", "test_tgt_sizes", "=", "[", "test_data", ".", "item_size", "(", "i", ",", "-", "1", ")", "for", "i", "in", "range", "(", "len", "(", "test_data", ")", ")", "]", "\n", "print", "(", "\" [test]: {} examples\"", ".", "format", "(", "len", "(", "test_data", ")", ")", ")", "\n", "\n", "test_iters", "=", "DataLoader", "(", "test_data", ",", "\n", "batch_sampler", "=", "BatchSampler", "(", "torch", ".", "tensor", "(", "test_tgt_sizes", ")", ",", "batch", "=", "args", ".", "batch_size", ")", ",", "\n", "collate_fn", "=", "test_data", ".", "collate_fn", ")", "\n", "\n", "model", "=", "GraphTrans", "(", "args", ",", "node_dict", ",", "edge_dict", ",", "text_dict", ")", "\n", "model", ".", "eval", "(", ")", "\n", "if", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "saved", "=", "load_model", "(", "args", ",", "model", ",", "inference", "=", "True", ")", "\n", "if", "not", "saved", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"Checkpoint does not exist\"", ")", "\n", "\n", "", "edges_correct", ",", "edges_num", ",", "edges_pred", "=", "0", ",", "0", ",", "0", "\n", "nodes_correct", ",", "nodes_num", ",", "nodes_pred", "=", "0", ",", "0", ",", "0", "\n", "graphs", ",", "graph_corrects", "=", "0", ",", "0", "\n", "\n", "for", "i", ",", "test_it", "in", "enumerate", "(", "test_iters", ")", ":", "\n", "        ", "if", "cuda", ":", "\n", "            ", "samples", "=", "move_to_cuda", "(", "test_it", ")", "\n", "", "else", ":", "\n", "            ", "samples", "=", "test_it", "\n", "\n", "", "batch_correct", ",", "batch_num", ",", "batch_pred", ",", "batch_graph_correct", "=", "greedy_search", "(", "model", ",", "samples", "[", "\"src_graph\"", "]", ",", "samples", "[", "\"src_text\"", "]", ",", "samples", "[", "\"tgt_graph\"", "]", ",", "\n", "node_dict", ",", "edge_dict", ",", "args", ".", "max_nodes", ",", "cuda", ")", "\n", "\n", "nodes_correct", "+=", "batch_correct", "[", "0", "]", "\n", "nodes_num", "+=", "batch_num", "[", "0", "]", "\n", "nodes_pred", "+=", "batch_pred", "[", "0", "]", "\n", "edges_correct", "+=", "batch_correct", "[", "1", "]", "\n", "edges_num", "+=", "batch_num", "[", "1", "]", "\n", "edges_pred", "+=", "batch_pred", "[", "1", "]", "\n", "graph_corrects", "+=", "batch_graph_correct", "\n", "graphs", "+=", "1", "\n", "\n", "", "print", "(", "\"Node: Recall: {:.2f}({}/{}), Precision: {:.2f}({}/{}) \"", ".", "format", "(", "nodes_correct", "/", "nodes_num", "*", "100", ",", "nodes_correct", ",", "nodes_num", ",", "nodes_correct", "/", "nodes_pred", "*", "100", ",", "nodes_correct", ",", "nodes_pred", ")", ")", "\n", "print", "(", "\"Edge: Recall: {:.2f}({}/{}), Precision: {:.2f}({}/{}) \"", ".", "format", "(", "edges_correct", "/", "edges_num", "*", "100", ",", "edges_correct", ",", "edges_num", ",", "edges_correct", "/", "edges_pred", "*", "100", ",", "edges_correct", ",", "edges_pred", ")", ")", "\n", "print", "(", "\"Accuracy: {:.2f}({}/{})\"", ".", "format", "(", "graph_corrects", "/", "graphs", "*", "100", ",", "graph_corrects", ",", "graphs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.__init__": [[56, 64], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model_size", ",", "factor", ",", "warmup", ",", "optimizer", ",", "params", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "_step", "=", "0", "\n", "self", ".", "warmup", "=", "warmup", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "model_size", "=", "model_size", "\n", "self", ".", "_rate", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.step": [[65, 73], ["utils.NoamOpt.rate", "utils.NoamOpt.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.rate", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.step"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "\"Update parameters and rate\"", "\n", "self", ".", "_step", "+=", "1", "\n", "rate", "=", "self", ".", "rate", "(", ")", "\n", "for", "p", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "p", "[", "'lr'", "]", "=", "rate", "\n", "", "self", ".", "_rate", "=", "rate", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.rate": [[74, 81], ["min"], "methods", ["None"], ["", "def", "rate", "(", "self", ",", "step", "=", "None", ")", ":", "\n", "        ", "\"Implement `lrate` above\"", "\n", "if", "step", "is", "None", ":", "\n", "            ", "step", "=", "self", ".", "_step", "\n", "", "return", "self", ".", "factor", "*", "(", "self", ".", "model_size", "**", "(", "-", "0.5", ")", "*", "\n", "min", "(", "step", "**", "(", "-", "0.5", ")", ",", "step", "*", "self", ".", "warmup", "**", "(", "-", "1.5", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.clip_grad_norm": [[82, 88], ["torch.nn.utils.clip_grad_norm_", "math.sqrt", "sum", "p.grad.data.norm"], "methods", ["None"], ["", "def", "clip_grad_norm", "(", "self", ",", "max_norm", ")", ":", "\n", "        ", "\"\"\"Clips gradient norm.\"\"\"", "\n", "if", "max_norm", ">", "0", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "params", ",", "max_norm", ")", "\n", "", "else", ":", "\n", "            ", "return", "math", ".", "sqrt", "(", "sum", "(", "p", ".", "grad", ".", "data", ".", "norm", "(", ")", "**", "2", "for", "p", "in", "self", ".", "params", "if", "p", ".", "grad", "is", "not", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.zero_grad": [[89, 95], ["utils.NoamOpt.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.zero_grad"], ["", "", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clears the gradients of all optimized parameters.\"\"\"", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "p", ".", "grad", "=", "None", "\n", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.load_opt": [[96, 99], ["utils.NoamOpt.optimizer.load_state_dict"], "methods", ["None"], ["", "def", "load_opt", "(", "self", ",", "ckpt", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "'optimizer'", "]", ")", "\n", "self", ".", "_step", "=", "ckpt", "[", "\"total_step\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.get_opt": [[100, 103], ["utils.NoamOpt.optimizer.state_dict"], "methods", ["None"], ["", "def", "get_opt", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"optimizer\"", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"total_step\"", ":", "self", ".", "_step", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.get_step": [[104, 106], ["None"], "methods", ["None"], ["", "def", "get_step", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_step", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.get_parser": [[15, 52], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", "stage", "=", "\"train\"", ")", ":", "\n", "    ", "\"\"\"Parsing arguments from command line\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "default", "=", "\"data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tensorboad-logdir\"", ",", "default", "=", "\"tblog\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt-dir\"", ",", "default", "=", "\"checkpoint\"", ")", "\n", "# encoder", "\n", "parser", ".", "add_argument", "(", "\"--modification\"", ",", "default", "=", "\"late\"", ",", "choices", "=", "[", "'early'", ",", "'late'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--encoder-attention-heads\"", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--encoder-embed-dim\"", ",", "default", "=", "256", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--encoder-ffn-embed-dim\"", ",", "default", "=", "512", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--encoder-layers\"", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "# decoder", "\n", "parser", ".", "add_argument", "(", "\"--node-embed-size\"", ",", "default", "=", "256", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--node-hidden-size\"", ",", "default", "=", "256", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--dec-layers\"", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--edge-embed-size\"", ",", "default", "=", "256", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--edge-hidden-size\"", ",", "default", "=", "256", ",", "type", "=", "int", ")", "\n", "\n", "# training", "\n", "if", "stage", "==", "\"train\"", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "default", "=", "20", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-step\"", ",", "default", "=", "5000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "default", "=", "1e-2", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup\"", ",", "default", "=", "4000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--clip-norm\"", ",", "default", "=", "25.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--accumulation-steps\"", ",", "default", "=", "9", ",", "type", "=", "int", ")", "\n", "\n", "", "if", "stage", "==", "\"test\"", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--greedy-search'", ",", "action", "=", "'store_true'", ",", "help", "=", "'disable progress bar'", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--max-nodes\"", ",", "default", "=", "15", ",", "type", "=", "int", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.get_std_opt": [[108, 113], ["utils.NoamOpt", "torch.optim.Adam", "model.parameters", "model.parameters"], "function", ["None"], ["", "", "def", "get_std_opt", "(", "args", ",", "model", ")", ":", "\n", "    ", "\"\"\"Build a optimizer\"\"\"", "\n", "return", "NoamOpt", "(", "args", ".", "encoder_embed_dim", ",", "2", ",", "args", ".", "warmup", ",", "\n", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.98", ")", ",", "eps", "=", "1e-9", ")", ",", "\n", "model", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.save_model": [[115, 125], ["os.path.join", "saved.update", "torch.save", "os.path.exists", "os.makedirs", "model.state_dict", "optimizer.get_opt"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.save", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.get_opt"], ["", "def", "save_model", "(", "args", ",", "model", ",", "optimizer", ",", "cur_epoch", ",", "best_val", ",", "type", "=", "\"last\"", ")", ":", "\n", "    ", "\"\"\"Save model and optimizer\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "ckpt_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "ckpt_dir", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "ckpt_dir", ",", "\"{}_model\"", ".", "format", "(", "type", ")", ")", "\n", "\n", "saved", "=", "{", "'epoch'", ":", "cur_epoch", ",", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "'best_val'", ":", "best_val", "}", "\n", "saved", ".", "update", "(", "optimizer", ".", "get_opt", "(", ")", ")", "\n", "\n", "torch", ".", "save", "(", "saved", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.load_model": [[127, 142], ["os.path.exists", "os.path.join", "os.path.join", "torch.load", "model.load_state_dict", "optimizer.load_opt"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.data_utils.Dictionary.load", "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.NoamOpt.load_opt"], ["", "def", "load_model", "(", "args", ",", "model", ",", "inference", "=", "False", ",", "optimizer", "=", "None", ")", ":", "\n", "    ", "\"\"\"Load saved model and optimizer from the specified path\"\"\"", "\n", "if", "inference", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "ckpt_dir", ",", "\"best_model\"", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "ckpt_dir", ",", "\"last_model\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "ckpt", "=", "torch", ".", "load", "(", "path", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", "[", "'model'", "]", ")", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "            ", "optimizer", ".", "load_opt", "(", "ckpt", ")", "\n", "\n", "", "return", "{", "\"best_val\"", ":", "ckpt", "[", "\"best_val\"", "]", ",", "\"epoch\"", ":", "ckpt", "[", "\"epoch\"", "]", "}", "\n", "\n", "", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.apply_to_sample": [[144, 162], ["utils.apply_to_sample._apply"], "function", ["None"], ["", "def", "apply_to_sample", "(", "f", ",", "sample", ")", ":", "\n", "    ", "if", "len", "(", "sample", ")", "==", "0", ":", "\n", "        ", "return", "{", "}", "\n", "\n", "", "def", "_apply", "(", "x", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "            ", "return", "f", "(", "x", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "dict", ")", ":", "\n", "            ", "return", "{", "\n", "key", ":", "_apply", "(", "value", ")", "\n", "for", "key", ",", "value", "in", "x", ".", "items", "(", ")", "\n", "}", "\n", "", "elif", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "return", "[", "_apply", "(", "x", ")", "for", "x", "in", "x", "]", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n", "", "", "return", "_apply", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.move_to_cuda": [[164, 170], ["utils.apply_to_sample", "tensor.cuda"], "function", ["home.repos.pwc.inspect_result.xlhex_SceneGraphModification.code.utils.apply_to_sample"], ["", "def", "move_to_cuda", "(", "sample", ")", ":", "\n", "    ", "\"\"\"Move a minibatch of data fro CPU to GPU\"\"\"", "\n", "def", "_move_to_cuda", "(", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "cuda", "(", ")", "\n", "\n", "", "return", "apply_to_sample", "(", "_move_to_cuda", ",", "sample", ")", "\n", "", ""]]}