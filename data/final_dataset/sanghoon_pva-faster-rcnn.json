{"home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.lib.setup.custom_build_ext.build_extensions": [[107, 110], ["setup.customize_compiler_for_nvcc", "Cython.Distutils.build_ext.build_extensions"], "methods", ["home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.lib.setup.customize_compiler_for_nvcc", "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.lib.setup.custom_build_ext.build_extensions"], ["    ", "def", "build_extensions", "(", "self", ")", ":", "\n", "        ", "customize_compiler_for_nvcc", "(", "self", ".", "compiler", ")", "\n", "build_ext", ".", "build_extensions", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.lib.setup.find_in_path": [[16, 25], ["path.split", "os.path.join", "os.path.exists", "os.path.abspath"], "function", ["None"], ["def", "find_in_path", "(", "name", ",", "path", ")", ":", "\n", "    ", "\"Find a file in a search path\"", "\n", "# Adapted fom", "\n", "# http://code.activestate.com/recipes/52224-find-a-file-given-a-search-path/", "\n", "for", "dir", "in", "path", ".", "split", "(", "os", ".", "pathsep", ")", ":", "\n", "        ", "binpath", "=", "pjoin", "(", "dir", ",", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "binpath", ")", ":", "\n", "            ", "return", "os", ".", "path", ".", "abspath", "(", "binpath", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.lib.setup.locate_cuda": [[27, 58], ["cudaconfig.iteritems", "os.path.join", "os.path.join", "setup.find_in_path", "os.path.dirname", "os.path.join", "os.path.join", "EnvironmentError", "os.path.dirname", "os.path.exists", "EnvironmentError"], "function", ["home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.lib.setup.find_in_path"], ["", "def", "locate_cuda", "(", ")", ":", "\n", "    ", "\"\"\"Locate the CUDA environment on the system\n\n    Returns a dict with keys 'home', 'nvcc', 'include', and 'lib64'\n    and values giving the absolute path to each directory.\n\n    Starts by looking for the CUDAHOME env variable. If not found, everything\n    is based on finding 'nvcc' in the PATH.\n    \"\"\"", "\n", "\n", "# first check if the CUDAHOME env variable is in use", "\n", "if", "'CUDAHOME'", "in", "os", ".", "environ", ":", "\n", "        ", "home", "=", "os", ".", "environ", "[", "'CUDAHOME'", "]", "\n", "nvcc", "=", "pjoin", "(", "home", ",", "'bin'", ",", "'nvcc'", ")", "\n", "", "else", ":", "\n", "# otherwise, search the PATH for NVCC", "\n", "        ", "default_path", "=", "pjoin", "(", "os", ".", "sep", ",", "'usr'", ",", "'local'", ",", "'cuda'", ",", "'bin'", ")", "\n", "nvcc", "=", "find_in_path", "(", "'nvcc'", ",", "os", ".", "environ", "[", "'PATH'", "]", "+", "os", ".", "pathsep", "+", "default_path", ")", "\n", "if", "nvcc", "is", "None", ":", "\n", "            ", "raise", "EnvironmentError", "(", "'The nvcc binary could not be '", "\n", "'located in your $PATH. Either add it to your path, or set $CUDAHOME'", ")", "\n", "", "home", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "nvcc", ")", ")", "\n", "\n", "", "cudaconfig", "=", "{", "'home'", ":", "home", ",", "'nvcc'", ":", "nvcc", ",", "\n", "'include'", ":", "pjoin", "(", "home", ",", "'include'", ")", ",", "\n", "'lib64'", ":", "pjoin", "(", "home", ",", "'lib64'", ")", "}", "\n", "for", "k", ",", "v", "in", "cudaconfig", ".", "iteritems", "(", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "v", ")", ":", "\n", "            ", "raise", "EnvironmentError", "(", "'The CUDA %s path could not be located in %s'", "%", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "", "return", "cudaconfig", "\n", "", "CUDA", "=", "locate_cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.lib.setup.customize_compiler_for_nvcc": [[67, 103], ["setup..src_extensions.append", "setup..set_executable", "os.path.splitext"], "function", ["None"], ["", "def", "customize_compiler_for_nvcc", "(", "self", ")", ":", "\n", "    ", "\"\"\"inject deep into distutils to customize how the dispatch\n    to gcc/nvcc works.\n\n    If you subclass UnixCCompiler, it's not trivial to get your subclass\n    injected in, and still have the right customizations (i.e.\n    distutils.sysconfig.customize_compiler) run on it. So instead of going\n    the OO route, I have this. Note, it's kindof like a wierd functional\n    subclassing going on.\"\"\"", "\n", "\n", "# tell the compiler it can processes .cu", "\n", "self", ".", "src_extensions", ".", "append", "(", "'.cu'", ")", "\n", "\n", "# save references to the default compiler_so and _comple methods", "\n", "default_compiler_so", "=", "self", ".", "compiler_so", "\n", "super", "=", "self", ".", "_compile", "\n", "\n", "# now redefine the _compile method. This gets executed for each", "\n", "# object but distutils doesn't have the ability to change compilers", "\n", "# based on source extension: we add it.", "\n", "def", "_compile", "(", "obj", ",", "src", ",", "ext", ",", "cc_args", ",", "extra_postargs", ",", "pp_opts", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "splitext", "(", "src", ")", "[", "1", "]", "==", "'.cu'", ":", "\n", "# use the cuda for .cu files", "\n", "            ", "self", ".", "set_executable", "(", "'compiler_so'", ",", "CUDA", "[", "'nvcc'", "]", ")", "\n", "# use only a subset of the extra_postargs, which are 1-1 translated", "\n", "# from the extra_compile_args in the Extension class", "\n", "postargs", "=", "extra_postargs", "[", "'nvcc'", "]", "\n", "", "else", ":", "\n", "            ", "postargs", "=", "extra_postargs", "[", "'gcc'", "]", "\n", "\n", "", "super", "(", "obj", ",", "src", ",", "ext", ",", "cc_args", ",", "postargs", ",", "pp_opts", ")", "\n", "# reset the default compiler_so, which we might have changed for cuda", "\n", "self", ".", "compiler_so", "=", "default_compiler_so", "\n", "\n", "# inject our redefined _compile method into the class", "\n", "", "self", ".", "_compile", "=", "_compile", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.utils.timer.Timer.__init__": [[12, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_time", "=", "0.", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.", "\n", "self", ".", "diff", "=", "0.", "\n", "self", ".", "average_time", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.utils.timer.Timer.tic": [[19, 23], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "# using time.time instead of time.clock because time time.clock", "\n", "# does not normalize for multithreading", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.utils.timer.Timer.toc": [[24, 33], ["time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ",", "average", "=", "True", ")", ":", "\n", "        ", "self", ".", "diff", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "self", ".", "total_time", "+=", "self", ".", "diff", "\n", "self", ".", "calls", "+=", "1", "\n", "self", ".", "average_time", "=", "self", ".", "total_time", "/", "self", ".", "calls", "\n", "if", "average", ":", "\n", "            ", "return", "self", ".", "average_time", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "diff", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.utils.blob.im_list_to_blob": [[13, 30], ["numpy.array().max", "len", "numpy.zeros", "xrange", "blob.transpose.transpose", "numpy.array"], "function", ["None"], ["def", "im_list_to_blob", "(", "ims", ")", ":", "\n", "    ", "\"\"\"Convert a list of images into a network input.\n\n    Assumes images are already prepared (means subtracted, BGR order, ...).\n    \"\"\"", "\n", "max_shape", "=", "np", ".", "array", "(", "[", "im", ".", "shape", "for", "im", "in", "ims", "]", ")", ".", "max", "(", "axis", "=", "0", ")", "\n", "num_images", "=", "len", "(", "ims", ")", "\n", "blob", "=", "np", ".", "zeros", "(", "(", "num_images", ",", "max_shape", "[", "0", "]", ",", "max_shape", "[", "1", "]", ",", "3", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "xrange", "(", "num_images", ")", ":", "\n", "        ", "im", "=", "ims", "[", "i", "]", "\n", "blob", "[", "i", ",", "0", ":", "im", ".", "shape", "[", "0", "]", ",", "0", ":", "im", ".", "shape", "[", "1", "]", ",", ":", "]", "=", "im", "\n", "# Move channels (axis 3) to axis 1", "\n", "# Axis order will become: (batch elem, channel, height, width)", "\n", "", "channel_swap", "=", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "blob", "=", "blob", ".", "transpose", "(", "channel_swap", ")", "\n", "return", "blob", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.utils.blob.prep_im_for_blob": [[31, 48], ["cv2.resize.astype", "numpy.min", "numpy.max", "cv2.resize", "float", "float", "numpy.round", "numpy.array", "float", "float", "numpy.floor", "numpy.floor"], "function", ["None"], ["", "def", "prep_im_for_blob", "(", "im", ",", "pixel_means", ",", "target_size", ",", "max_size", ",", "multiple", ")", ":", "\n", "    ", "\"\"\"Mean subtract and scale an image for use in a blob.\"\"\"", "\n", "im", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "im", "-=", "pixel_means", "\n", "im_shape", "=", "im", ".", "shape", "\n", "im_size_min", "=", "np", ".", "min", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_size_max", "=", "np", ".", "max", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_scale", "=", "float", "(", "target_size", ")", "/", "float", "(", "im_size_min", ")", "\n", "# Prevent the biggest axis from being more than MAX_SIZE", "\n", "if", "np", ".", "round", "(", "im_scale", "*", "im_size_max", ")", ">", "max_size", ":", "\n", "        ", "im_scale", "=", "float", "(", "max_size", ")", "/", "float", "(", "im_size_max", ")", "\n", "", "im_scale_x", "=", "np", ".", "floor", "(", "im", ".", "shape", "[", "1", "]", "*", "im_scale", "/", "multiple", ")", "*", "multiple", "/", "im", ".", "shape", "[", "1", "]", "\n", "im_scale_y", "=", "np", ".", "floor", "(", "im", ".", "shape", "[", "0", "]", "*", "im_scale", "/", "multiple", ")", "*", "multiple", "/", "im", ".", "shape", "[", "0", "]", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "None", ",", "None", ",", "fx", "=", "im_scale_x", ",", "fy", "=", "im_scale_y", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "im", ",", "np", ".", "array", "(", "[", "im_scale_x", ",", "im_scale_y", ",", "im_scale_x", ",", "im_scale_y", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.ds_utils.unique_boxes": [[9, 15], ["numpy.array", "numpy.round().dot", "numpy.unique", "numpy.sort", "numpy.round"], "function", ["None"], ["def", "unique_boxes", "(", "boxes", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Return indices of unique boxes.\"\"\"", "\n", "v", "=", "np", ".", "array", "(", "[", "1", ",", "1e3", ",", "1e6", ",", "1e9", "]", ")", "\n", "hashes", "=", "np", ".", "round", "(", "boxes", "*", "scale", ")", ".", "dot", "(", "v", ")", "\n", "_", ",", "index", "=", "np", ".", "unique", "(", "hashes", ",", "return_index", "=", "True", ")", "\n", "return", "np", ".", "sort", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.ds_utils.xywh_to_xyxy": [[16, 19], ["numpy.hstack"], "function", ["None"], ["", "def", "xywh_to_xyxy", "(", "boxes", ")", ":", "\n", "    ", "\"\"\"Convert [x y w h] box format to [x1 y1 x2 y2] format.\"\"\"", "\n", "return", "np", ".", "hstack", "(", "(", "boxes", "[", ":", ",", "0", ":", "2", "]", ",", "boxes", "[", ":", ",", "0", ":", "2", "]", "+", "boxes", "[", ":", ",", "2", ":", "4", "]", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.ds_utils.xyxy_to_xywh": [[20, 23], ["numpy.hstack"], "function", ["None"], ["", "def", "xyxy_to_xywh", "(", "boxes", ")", ":", "\n", "    ", "\"\"\"Convert [x1 y1 x2 y2] box format to [x y w h] format.\"\"\"", "\n", "return", "np", ".", "hstack", "(", "(", "boxes", "[", ":", ",", "0", ":", "2", "]", ",", "boxes", "[", ":", ",", "2", ":", "4", "]", "-", "boxes", "[", ":", ",", "0", ":", "2", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.ds_utils.validate_boxes": [[24, 36], ["None"], "function", ["None"], ["", "def", "validate_boxes", "(", "boxes", ",", "width", "=", "0", ",", "height", "=", "0", ")", ":", "\n", "    ", "\"\"\"Check that a set of boxes are valid.\"\"\"", "\n", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "2", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "assert", "(", "x1", ">=", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "y1", ">=", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "x2", ">=", "x1", ")", ".", "all", "(", ")", "\n", "assert", "(", "y2", ">=", "y1", ")", ".", "all", "(", ")", "\n", "assert", "(", "x2", "<", "width", ")", ".", "all", "(", ")", "\n", "assert", "(", "y2", "<", "height", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.ds_utils.filter_small_boxes": [[37, 42], ["numpy.where"], "function", ["None"], ["", "def", "filter_small_boxes", "(", "boxes", ",", "min_size", ")", ":", "\n", "    ", "w", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "\n", "h", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "\n", "keep", "=", "np", ".", "where", "(", "(", "w", ">=", "min_size", ")", "&", "(", "h", ">", "min_size", ")", ")", "[", "0", "]", "\n", "return", "keep", "\n", "", ""]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.__init__": [[19, 29], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_num_classes", "=", "0", "\n", "self", ".", "_classes", "=", "[", "]", "\n", "self", ".", "_image_index", "=", "[", "]", "\n", "self", ".", "_obj_proposer", "=", "'selective_search'", "\n", "self", ".", "_roidb", "=", "None", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "default_roidb", "\n", "# Use this dict for storing dataset specific config options", "\n", "self", ".", "config", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.name": [[30, 33], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.num_classes": [[34, 37], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.classes": [[38, 41], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.image_index": [[42, 45], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.roidb_handler": [[50, 53], ["None"], "methods", ["None"], ["", "@", "roidb_handler", ".", "setter", "\n", "def", "roidb_handler", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "_roidb_handler", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.set_proposal_method": [[54, 57], ["eval"], "methods", ["None"], ["", "def", "set_proposal_method", "(", "self", ",", "method", ")", ":", "\n", "        ", "method", "=", "eval", "(", "'self.'", "+", "method", "+", "'_roidb'", ")", "\n", "self", ".", "roidb_handler", "=", "method", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.roidb": [[58, 69], ["imdb.imdb.roidb_handler"], "methods", ["home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.roidb_handler"], ["", "@", "property", "\n", "def", "roidb", "(", "self", ")", ":", "\n", "# A roidb is a list of dictionaries, each with the following keys:", "\n", "#   boxes", "\n", "#   gt_overlaps", "\n", "#   gt_classes", "\n", "#   flipped", "\n", "        ", "if", "self", ".", "_roidb", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_roidb", "\n", "", "self", ".", "_roidb", "=", "self", ".", "roidb_handler", "(", ")", "\n", "return", "self", ".", "_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.cache_path": [[70, 76], ["os.abspath", "os.abspath", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["None"], ["", "@", "property", "\n", "def", "cache_path", "(", "self", ")", ":", "\n", "        ", "cache_path", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "'cache'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "cache_path", ")", "\n", "", "return", "cache_path", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.num_images": [[77, 80], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_images", "(", "self", ")", ":", "\n", "      ", "return", "len", "(", "self", ".", "image_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.image_path_at": [[81, 83], ["None"], "methods", ["None"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.default_roidb": [[84, 86], ["None"], "methods", ["None"], ["", "def", "default_roidb", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.evaluate_detections": [[87, 97], ["None"], "methods", ["None"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        all_boxes is a list of length number-of-classes.\n        Each list element is a list of length number-of-images.\n        Each of those list elements is either an empty list []\n        or a numpy array of detection.\n\n        all_boxes[class][image] = [] or np.array of shape #dets x 5\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb._get_widths": [[98, 101], ["xrange", "PIL.Image.open", "imdb.imdb.image_path_at"], "methods", ["home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.image_path_at"], ["", "def", "_get_widths", "(", "self", ")", ":", "\n", "      ", "return", "[", "PIL", ".", "Image", ".", "open", "(", "self", ".", "image_path_at", "(", "i", ")", ")", ".", "size", "[", "0", "]", "\n", "for", "i", "in", "xrange", "(", "self", ".", "num_images", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.append_flipped_images": [[102, 118], ["imdb.imdb._get_widths", "xrange", "[].copy", "boxes[].copy", "boxes[].copy", "imdb.imdb.roidb.append"], "methods", ["home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb._get_widths"], ["", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "        ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "self", ".", "_get_widths", "(", ")", "\n", "for", "i", "in", "xrange", "(", "num_images", ")", ":", "\n", "            ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "'boxes'", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "'boxes'", ":", "boxes", ",", "\n", "'gt_overlaps'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'gt_overlaps'", "]", ",", "\n", "'gt_classes'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'gt_classes'", "]", ",", "\n", "'flipped'", ":", "True", "}", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n", "", "self", ".", "_image_index", "=", "self", ".", "_image_index", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.evaluate_recall": [[119, 208], ["areas.has_key", "numpy.zeros", "xrange", "numpy.sort", "numpy.zeros_like", "enumerate", "numpy.zeros_like.mean", "[].toarray().max", "len", "utils.cython_bbox.bbox_overlaps", "numpy.zeros", "xrange", "numpy.hstack", "numpy.arange", "numpy.where", "numpy.where", "boxes.astype", "gt_boxes.astype", "utils.cython_bbox.bbox_overlaps.argmax", "utils.cython_bbox.bbox_overlaps.max", "utils.cython_bbox.bbox_overlaps.max.argmax", "utils.cython_bbox.bbox_overlaps.max.max", "float", "[].toarray", "numpy.where"], "methods", ["None"], ["", "def", "evaluate_recall", "(", "self", ",", "candidate_boxes", "=", "None", ",", "thresholds", "=", "None", ",", "\n", "area", "=", "'all'", ",", "limit", "=", "None", ")", ":", "\n", "        ", "\"\"\"Evaluate detection proposal recall metrics.\n\n        Returns:\n            results: dictionary of results with keys\n                'ar': average recall\n                'recalls': vector recalls at each IoU overlap threshold\n                'thresholds': vector of IoU overlap thresholds\n                'gt_overlaps': vector of all ground-truth overlaps\n        \"\"\"", "\n", "# Record max overlap value for each gt box", "\n", "# Return vector of overlap values", "\n", "areas", "=", "{", "'all'", ":", "0", ",", "'small'", ":", "1", ",", "'medium'", ":", "2", ",", "'large'", ":", "3", ",", "\n", "'96-128'", ":", "4", ",", "'128-256'", ":", "5", ",", "'256-512'", ":", "6", ",", "'512-inf'", ":", "7", "}", "\n", "area_ranges", "=", "[", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "# all", "\n", "[", "0", "**", "2", ",", "32", "**", "2", "]", ",", "# small", "\n", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "# medium", "\n", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", ",", "# large", "\n", "[", "96", "**", "2", ",", "128", "**", "2", "]", ",", "# 96-128", "\n", "[", "128", "**", "2", ",", "256", "**", "2", "]", ",", "# 128-256", "\n", "[", "256", "**", "2", ",", "512", "**", "2", "]", ",", "# 256-512", "\n", "[", "512", "**", "2", ",", "1e5", "**", "2", "]", ",", "# 512-inf", "\n", "]", "\n", "assert", "areas", ".", "has_key", "(", "area", ")", ",", "'unknown area range: {}'", ".", "format", "(", "area", ")", "\n", "area_range", "=", "area_ranges", "[", "areas", "[", "area", "]", "]", "\n", "gt_overlaps", "=", "np", ".", "zeros", "(", "0", ")", "\n", "num_pos", "=", "0", "\n", "for", "i", "in", "xrange", "(", "self", ".", "num_images", ")", ":", "\n", "# Checking for max_overlaps == 1 avoids including crowd annotations", "\n", "# (...pretty hacking :/)", "\n", "            ", "max_gt_overlaps", "=", "self", ".", "roidb", "[", "i", "]", "[", "'gt_overlaps'", "]", ".", "toarray", "(", ")", ".", "max", "(", "axis", "=", "1", ")", "\n", "gt_inds", "=", "np", ".", "where", "(", "(", "self", ".", "roidb", "[", "i", "]", "[", "'gt_classes'", "]", ">", "0", ")", "&", "\n", "(", "max_gt_overlaps", "==", "1", ")", ")", "[", "0", "]", "\n", "gt_boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_inds", ",", ":", "]", "\n", "gt_areas", "=", "self", ".", "roidb", "[", "i", "]", "[", "'seg_areas'", "]", "[", "gt_inds", "]", "\n", "valid_gt_inds", "=", "np", ".", "where", "(", "(", "gt_areas", ">=", "area_range", "[", "0", "]", ")", "&", "\n", "(", "gt_areas", "<=", "area_range", "[", "1", "]", ")", ")", "[", "0", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", "valid_gt_inds", ",", ":", "]", "\n", "num_pos", "+=", "len", "(", "valid_gt_inds", ")", "\n", "\n", "if", "candidate_boxes", "is", "None", ":", "\n", "# If candidate_boxes is not supplied, the default is to use the", "\n", "# non-ground-truth boxes from this roidb", "\n", "                ", "non_gt_inds", "=", "np", ".", "where", "(", "self", ".", "roidb", "[", "i", "]", "[", "'gt_classes'", "]", "==", "0", ")", "[", "0", "]", "\n", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "'boxes'", "]", "[", "non_gt_inds", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "boxes", "=", "candidate_boxes", "[", "i", "]", "\n", "", "if", "boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "limit", "is", "not", "None", "and", "boxes", ".", "shape", "[", "0", "]", ">", "limit", ":", "\n", "                ", "boxes", "=", "boxes", "[", ":", "limit", ",", ":", "]", "\n", "\n", "", "overlaps", "=", "bbox_overlaps", "(", "boxes", ".", "astype", "(", "np", ".", "float", ")", ",", "\n", "gt_boxes", ".", "astype", "(", "np", ".", "float", ")", ")", "\n", "\n", "_gt_overlaps", "=", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "j", "in", "xrange", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "# find which proposal box maximally covers each gt box", "\n", "                ", "argmax_overlaps", "=", "overlaps", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "# and get the iou amount of coverage for each gt box", "\n", "max_overlaps", "=", "overlaps", ".", "max", "(", "axis", "=", "0", ")", "\n", "# find which gt box is 'best' covered (i.e. 'best' = most iou)", "\n", "gt_ind", "=", "max_overlaps", ".", "argmax", "(", ")", "\n", "gt_ovr", "=", "max_overlaps", ".", "max", "(", ")", "\n", "assert", "(", "gt_ovr", ">=", "0", ")", "\n", "# find the proposal box that covers the best covered gt box", "\n", "box_ind", "=", "argmax_overlaps", "[", "gt_ind", "]", "\n", "# record the iou coverage of this gt box", "\n", "_gt_overlaps", "[", "j", "]", "=", "overlaps", "[", "box_ind", ",", "gt_ind", "]", "\n", "assert", "(", "_gt_overlaps", "[", "j", "]", "==", "gt_ovr", ")", "\n", "# mark the proposal box and the gt box as used", "\n", "overlaps", "[", "box_ind", ",", ":", "]", "=", "-", "1", "\n", "overlaps", "[", ":", ",", "gt_ind", "]", "=", "-", "1", "\n", "# append recorded iou coverage level", "\n", "", "gt_overlaps", "=", "np", ".", "hstack", "(", "(", "gt_overlaps", ",", "_gt_overlaps", ")", ")", "\n", "\n", "", "gt_overlaps", "=", "np", ".", "sort", "(", "gt_overlaps", ")", "\n", "if", "thresholds", "is", "None", ":", "\n", "            ", "step", "=", "0.05", "\n", "thresholds", "=", "np", ".", "arange", "(", "0.5", ",", "0.95", "+", "1e-5", ",", "step", ")", "\n", "", "recalls", "=", "np", ".", "zeros_like", "(", "thresholds", ")", "\n", "# compute recall for each iou threshold", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "recalls", "[", "i", "]", "=", "(", "gt_overlaps", ">=", "t", ")", ".", "sum", "(", ")", "/", "float", "(", "num_pos", ")", "\n", "# ar = 2 * np.trapz(recalls, thresholds)", "\n", "", "ar", "=", "recalls", ".", "mean", "(", ")", "\n", "return", "{", "'ar'", ":", "ar", ",", "'recalls'", ":", "recalls", ",", "'thresholds'", ":", "thresholds", ",", "\n", "'gt_overlaps'", ":", "gt_overlaps", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.create_roidb_from_box_list": [[209, 237], ["xrange", "len", "numpy.zeros", "scipy.sparse.csr_matrix", "roidb.append", "utils.cython_bbox.bbox_overlaps", "utils.cython_bbox.bbox_overlaps.argmax", "utils.cython_bbox.bbox_overlaps.max", "boxes.astype", "gt_boxes.astype", "numpy.where", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "create_roidb_from_box_list", "(", "self", ",", "box_list", ",", "gt_roidb", ")", ":", "\n", "        ", "assert", "len", "(", "box_list", ")", "==", "self", ".", "num_images", ",", "'Number of boxes must match number of ground-truth images'", "\n", "roidb", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "self", ".", "num_images", ")", ":", "\n", "            ", "boxes", "=", "box_list", "[", "i", "]", "\n", "num_boxes", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_boxes", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "gt_roidb", "is", "not", "None", "and", "gt_roidb", "[", "i", "]", "[", "'boxes'", "]", ".", "size", ">", "0", ":", "\n", "                ", "gt_boxes", "=", "gt_roidb", "[", "i", "]", "[", "'boxes'", "]", "\n", "gt_classes", "=", "gt_roidb", "[", "i", "]", "[", "'gt_classes'", "]", "\n", "gt_overlaps", "=", "bbox_overlaps", "(", "boxes", ".", "astype", "(", "np", ".", "float", ")", ",", "\n", "gt_boxes", ".", "astype", "(", "np", ".", "float", ")", ")", "\n", "argmaxes", "=", "gt_overlaps", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "maxes", "=", "gt_overlaps", ".", "max", "(", "axis", "=", "1", ")", "\n", "I", "=", "np", ".", "where", "(", "maxes", ">", "0", ")", "[", "0", "]", "\n", "overlaps", "[", "I", ",", "gt_classes", "[", "argmaxes", "[", "I", "]", "]", "]", "=", "maxes", "[", "I", "]", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "roidb", ".", "append", "(", "{", "\n", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "np", ".", "zeros", "(", "(", "num_boxes", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n", "'flipped'", ":", "False", ",", "\n", "'seg_areas'", ":", "np", ".", "zeros", "(", "(", "num_boxes", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "}", ")", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.merge_roidbs": [[238, 250], ["xrange", "len", "len", "len", "numpy.vstack", "numpy.hstack", "scipy.sparse.vstack", "numpy.hstack"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "merge_roidbs", "(", "a", ",", "b", ")", ":", "\n", "        ", "assert", "len", "(", "a", ")", "==", "len", "(", "b", ")", "\n", "for", "i", "in", "xrange", "(", "len", "(", "a", ")", ")", ":", "\n", "            ", "a", "[", "i", "]", "[", "'boxes'", "]", "=", "np", ".", "vstack", "(", "(", "a", "[", "i", "]", "[", "'boxes'", "]", ",", "b", "[", "i", "]", "[", "'boxes'", "]", ")", ")", "\n", "a", "[", "i", "]", "[", "'gt_classes'", "]", "=", "np", ".", "hstack", "(", "(", "a", "[", "i", "]", "[", "'gt_classes'", "]", ",", "\n", "b", "[", "i", "]", "[", "'gt_classes'", "]", ")", ")", "\n", "a", "[", "i", "]", "[", "'gt_overlaps'", "]", "=", "scipy", ".", "sparse", ".", "vstack", "(", "[", "a", "[", "i", "]", "[", "'gt_overlaps'", "]", ",", "\n", "b", "[", "i", "]", "[", "'gt_overlaps'", "]", "]", ")", "\n", "a", "[", "i", "]", "[", "'seg_areas'", "]", "=", "np", ".", "hstack", "(", "(", "a", "[", "i", "]", "[", "'seg_areas'", "]", ",", "\n", "b", "[", "i", "]", "[", "'seg_areas'", "]", ")", ")", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.imdb.imdb.competition_mode": [[251, 254], ["None"], "methods", ["None"], ["", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "\"\"\"Turn competition mode on or off.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.factory.get_imdb": [[34, 39], ["__sets.has_key", "KeyError"], "function", ["None"], ["", "", "def", "get_imdb", "(", "name", ")", ":", "\n", "    ", "\"\"\"Get an imdb (image database) by name.\"\"\"", "\n", "if", "not", "__sets", ".", "has_key", "(", "name", ")", ":", "\n", "        ", "raise", "KeyError", "(", "'Unknown dataset: {}'", ".", "format", "(", "name", ")", ")", "\n", "", "return", "__sets", "[", "name", "]", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.datasets.factory.list_imdbs": [[40, 43], ["__sets.keys"], "function", ["None"], ["", "def", "list_imdbs", "(", ")", ":", "\n", "    ", "\"\"\"List all registered imdbs.\"\"\"", "\n", "return", "__sets", ".", "keys", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.nms.py_cpu_nms.py_cpu_nms": [[10, 39], ["scores.argsort", "keep.append", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.where"], "function", ["None"], ["def", "py_cpu_nms", "(", "dets", ",", "thresh", ")", ":", "\n", "    ", "\"\"\"Pure Python NMS baseline.\"\"\"", "\n", "x1", "=", "dets", "[", ":", ",", "0", "]", "\n", "y1", "=", "dets", "[", ":", ",", "1", "]", "\n", "x2", "=", "dets", "[", ":", ",", "2", "]", "\n", "y2", "=", "dets", "[", ":", ",", "3", "]", "\n", "scores", "=", "dets", "[", ":", ",", "4", "]", "\n", "\n", "areas", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "keep", "=", "[", "]", "\n", "while", "order", ".", "size", ">", "0", ":", "\n", "        ", "i", "=", "order", "[", "0", "]", "\n", "keep", ".", "append", "(", "i", ")", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "0.0", ",", "xx2", "-", "xx1", "+", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0.0", ",", "yy2", "-", "yy1", "+", "1", ")", "\n", "inter", "=", "w", "*", "h", "\n", "ovr", "=", "inter", "/", "(", "areas", "[", "i", "]", "+", "areas", "[", "order", "[", "1", ":", "]", "]", "-", "inter", ")", "\n", "\n", "inds", "=", "np", ".", "where", "(", "ovr", "<=", "thresh", ")", "[", "0", "]", "\n", "order", "=", "order", "[", "inds", "+", "1", "]", "\n", "\n", "", "return", "keep", "\n", "", ""]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.transform.torch_image_transform_layer.TorchImageTransformLayer.setup": [[28, 44], ["numpy.array", "numpy.array", "fast_rcnn.config.cfg.PIXEL_MEANS[].transpose", "top[].reshape"], "methods", ["home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.transform.torch_image_transform_layer.TorchImageTransformLayer.reshape"], ["    ", "def", "setup", "(", "self", ",", "bottom", ",", "top", ")", ":", "\n", "# (1, 3, 1, 1) shaped arrays", "\n", "        ", "self", ".", "PIXEL_MEANS", "=", "np", ".", "array", "(", "[", "[", "[", "[", "0.48462227599918", "]", "]", ",", "\n", "[", "[", "0.45624044862054", "]", "]", ",", "\n", "[", "[", "0.40588363755159", "]", "]", "]", "]", ")", "\n", "self", ".", "PIXEL_STDS", "=", "np", ".", "array", "(", "[", "[", "[", "[", "0.22889466674951", "]", "]", ",", "\n", "[", "[", "0.22446679341259", "]", "]", ",", "\n", "[", "[", "0.22495548344775", "]", "]", "]", "]", ")", "\n", "# The default (\"old\") pixel means that were already subtracted", "\n", "channel_swap", "=", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "self", ".", "OLD_PIXEL_MEANS", "=", "cfg", ".", "PIXEL_MEANS", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", ".", "transpose", "(", "channel_swap", ")", "\n", "\n", "top", "[", "0", "]", ".", "reshape", "(", "*", "(", "bottom", "[", "0", "]", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.transform.torch_image_transform_layer.TorchImageTransformLayer.forward": [[45, 57], ["top[].reshape"], "methods", ["home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.transform.torch_image_transform_layer.TorchImageTransformLayer.reshape"], ["", "def", "forward", "(", "self", ",", "bottom", ",", "top", ")", ":", "\n", "        ", "ims", "=", "bottom", "[", "0", "]", ".", "data", "\n", "# Invert the channel means that were already subtracted", "\n", "ims", "+=", "self", ".", "OLD_PIXEL_MEANS", "\n", "# 1. Permute BGR to RGB and normalize to [0, 1]", "\n", "ims", "=", "ims", "[", ":", ",", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", "/", "255.0", "\n", "# 2. Remove channel means", "\n", "ims", "-=", "self", ".", "PIXEL_MEANS", "\n", "# 3. Standardize channels", "\n", "ims", "/=", "self", ".", "PIXEL_STDS", "\n", "top", "[", "0", "]", ".", "reshape", "(", "*", "(", "ims", ".", "shape", ")", ")", "\n", "top", "[", "0", "]", ".", "data", "[", "...", "]", "=", "ims", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.transform.torch_image_transform_layer.TorchImageTransformLayer.backward": [[58, 61], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "top", ",", "propagate_down", ",", "bottom", ")", ":", "\n", "        ", "\"\"\"This layer does not propagate gradients.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.transform.torch_image_transform_layer.TorchImageTransformLayer.reshape": [[62, 65], ["None"], "methods", ["None"], ["", "def", "reshape", "(", "self", ",", "bottom", ",", "top", ")", ":", "\n", "        ", "\"\"\"Reshaping happens during the call to forward.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.fast_rcnn.config.get_output_dir": [[224, 237], ["os.abspath", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "get_output_dir", "(", "imdb", ",", "net", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return the directory where experimental artifacts are placed.\n    If the directory does not exist, it is created.\n\n    A canonical path is built using the name from an imdb and a network\n    (if not None).\n    \"\"\"", "\n", "outdir", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "__C", ".", "ROOT_DIR", ",", "'output'", ",", "__C", ".", "EXP_DIR", ",", "imdb", ".", "name", ")", ")", "\n", "if", "net", "is", "not", "None", ":", "\n", "        ", "outdir", "=", "osp", ".", "join", "(", "outdir", ",", "net", ".", "name", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "outdir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "", "return", "outdir", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.fast_rcnn.config._merge_a_into_b": [[238, 269], ["a.iteritems", "type", "type", "b.has_key", "KeyError", "type", "isinstance", "type", "numpy.array", "ValueError", "config._merge_a_into_b", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.fast_rcnn.config._merge_a_into_b"], ["", "def", "_merge_a_into_b", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n    options in b whenever they are also specified in a.\n    \"\"\"", "\n", "if", "type", "(", "a", ")", "is", "not", "edict", ":", "\n", "        ", "return", "\n", "\n", "", "for", "k", ",", "v", "in", "a", ".", "iteritems", "(", ")", ":", "\n", "# a must specify keys that are in b", "\n", "        ", "if", "not", "b", ".", "has_key", "(", "k", ")", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is not a valid config key'", ".", "format", "(", "k", ")", ")", "\n", "\n", "# the types must match, too", "\n", "", "old_type", "=", "type", "(", "b", "[", "k", "]", ")", "\n", "if", "old_type", "is", "not", "type", "(", "v", ")", ":", "\n", "            ", "if", "isinstance", "(", "b", "[", "k", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "v", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "b", "[", "k", "]", ".", "dtype", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "(", "'Type mismatch ({} vs. {}) '", "\n", "'for config key: {}'", ")", ".", "format", "(", "type", "(", "b", "[", "k", "]", ")", ",", "\n", "type", "(", "v", ")", ",", "k", ")", ")", "\n", "\n", "# recursively merge dicts", "\n", "", "", "if", "type", "(", "v", ")", "is", "edict", ":", "\n", "            ", "try", ":", "\n", "                ", "_merge_a_into_b", "(", "a", "[", "k", "]", ",", "b", "[", "k", "]", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'Error under config key: {}'", ".", "format", "(", "k", ")", ")", "\n", "raise", "\n", "", "", "else", ":", "\n", "            ", "b", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.fast_rcnn.config.cfg_from_file": [[270, 277], ["config._merge_a_into_b", "open", "easydict.EasyDict", "yaml.load"], "function", ["home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.fast_rcnn.config._merge_a_into_b"], ["", "", "", "def", "cfg_from_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Load a config file and merge it into the default options.\"\"\"", "\n", "import", "yaml", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "yaml_cfg", "=", "edict", "(", "yaml", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "_merge_a_into_b", "(", "yaml_cfg", ",", "__C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.fast_rcnn.config.cfg_from_list": [[278, 299], ["zip", "k.split", "d.has_key", "len", "d.has_key", "literal_eval", "type", "type", "type", "type"], "function", ["None"], ["", "def", "cfg_from_list", "(", "cfg_list", ")", ":", "\n", "    ", "\"\"\"Set config keys via list (e.g., from command line).\"\"\"", "\n", "from", "ast", "import", "literal_eval", "\n", "assert", "len", "(", "cfg_list", ")", "%", "2", "==", "0", "\n", "for", "k", ",", "v", "in", "zip", "(", "cfg_list", "[", "0", ":", ":", "2", "]", ",", "cfg_list", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "        ", "key_list", "=", "k", ".", "split", "(", "'.'", ")", "\n", "d", "=", "__C", "\n", "for", "subkey", "in", "key_list", "[", ":", "-", "1", "]", ":", "\n", "            ", "assert", "d", ".", "has_key", "(", "subkey", ")", "\n", "d", "=", "d", "[", "subkey", "]", "\n", "", "subkey", "=", "key_list", "[", "-", "1", "]", "\n", "assert", "d", ".", "has_key", "(", "subkey", ")", "\n", "try", ":", "\n", "            ", "value", "=", "literal_eval", "(", "v", ")", "\n", "", "except", ":", "\n", "# handle the case when v is a string literal", "\n", "            ", "value", "=", "v", "\n", "", "assert", "type", "(", "value", ")", "==", "type", "(", "d", "[", "subkey", "]", ")", ",", "'type {} does not match original type {}'", ".", "format", "(", "\n", "type", "(", "value", ")", ",", "type", "(", "d", "[", "subkey", "]", ")", ")", "\n", "d", "[", "subkey", "]", "=", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.fast_rcnn.bbox_transform.bbox_transform": [[10, 29], ["numpy.log", "numpy.log", "numpy.vstack().transpose", "numpy.vstack"], "function", ["None"], ["def", "bbox_transform", "(", "ex_rois", ",", "gt_rois", ")", ":", "\n", "    ", "ex_widths", "=", "ex_rois", "[", ":", ",", "2", "]", "-", "ex_rois", "[", ":", ",", "0", "]", "+", "1.0", "\n", "ex_heights", "=", "ex_rois", "[", ":", ",", "3", "]", "-", "ex_rois", "[", ":", ",", "1", "]", "+", "1.0", "\n", "ex_ctr_x", "=", "ex_rois", "[", ":", ",", "0", "]", "+", "0.5", "*", "ex_widths", "\n", "ex_ctr_y", "=", "ex_rois", "[", ":", ",", "1", "]", "+", "0.5", "*", "ex_heights", "\n", "\n", "gt_widths", "=", "gt_rois", "[", ":", ",", "2", "]", "-", "gt_rois", "[", ":", ",", "0", "]", "+", "1.0", "\n", "gt_heights", "=", "gt_rois", "[", ":", ",", "3", "]", "-", "gt_rois", "[", ":", ",", "1", "]", "+", "1.0", "\n", "gt_ctr_x", "=", "gt_rois", "[", ":", ",", "0", "]", "+", "0.5", "*", "gt_widths", "\n", "gt_ctr_y", "=", "gt_rois", "[", ":", ",", "1", "]", "+", "0.5", "*", "gt_heights", "\n", "\n", "targets_dx", "=", "(", "gt_ctr_x", "-", "ex_ctr_x", ")", "/", "ex_widths", "\n", "targets_dy", "=", "(", "gt_ctr_y", "-", "ex_ctr_y", ")", "/", "ex_heights", "\n", "targets_dw", "=", "np", ".", "log", "(", "gt_widths", "/", "ex_widths", ")", "\n", "targets_dh", "=", "np", ".", "log", "(", "gt_heights", "/", "ex_heights", ")", "\n", "\n", "targets", "=", "np", ".", "vstack", "(", "\n", "(", "targets_dx", ",", "targets_dy", ",", "targets_dw", ",", "targets_dh", ")", ")", ".", "transpose", "(", ")", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.fast_rcnn.bbox_transform.bbox_transform_inv": [[30, 62], ["boxes.astype.astype", "numpy.zeros", "numpy.zeros", "numpy.exp", "numpy.exp"], "function", ["None"], ["", "def", "bbox_transform_inv", "(", "boxes", ",", "deltas", ")", ":", "\n", "    ", "if", "boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "0", ",", "deltas", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "deltas", ".", "dtype", ")", "\n", "\n", "", "boxes", "=", "boxes", ".", "astype", "(", "deltas", ".", "dtype", ",", "copy", "=", "False", ")", "\n", "\n", "widths", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.0", "\n", "heights", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.0", "\n", "ctr_x", "=", "boxes", "[", ":", ",", "0", "]", "+", "0.5", "*", "widths", "\n", "ctr_y", "=", "boxes", "[", ":", ",", "1", "]", "+", "0.5", "*", "heights", "\n", "\n", "dx", "=", "deltas", "[", ":", ",", "0", ":", ":", "4", "]", "\n", "dy", "=", "deltas", "[", ":", ",", "1", ":", ":", "4", "]", "\n", "dw", "=", "deltas", "[", ":", ",", "2", ":", ":", "4", "]", "\n", "dh", "=", "deltas", "[", ":", ",", "3", ":", ":", "4", "]", "\n", "\n", "pred_ctr_x", "=", "dx", "*", "widths", "[", ":", ",", "np", ".", "newaxis", "]", "+", "ctr_x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "pred_ctr_y", "=", "dy", "*", "heights", "[", ":", ",", "np", ".", "newaxis", "]", "+", "ctr_y", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "pred_w", "=", "np", ".", "exp", "(", "dw", ")", "*", "widths", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "pred_h", "=", "np", ".", "exp", "(", "dh", ")", "*", "heights", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "pred_boxes", "=", "np", ".", "zeros", "(", "deltas", ".", "shape", ",", "dtype", "=", "deltas", ".", "dtype", ")", "\n", "# x1", "\n", "pred_boxes", "[", ":", ",", "0", ":", ":", "4", "]", "=", "pred_ctr_x", "-", "0.5", "*", "pred_w", "\n", "# y1", "\n", "pred_boxes", "[", ":", ",", "1", ":", ":", "4", "]", "=", "pred_ctr_y", "-", "0.5", "*", "pred_h", "\n", "# x2", "\n", "pred_boxes", "[", ":", ",", "2", ":", ":", "4", "]", "=", "pred_ctr_x", "+", "0.5", "*", "pred_w", "\n", "# y2", "\n", "pred_boxes", "[", ":", ",", "3", ":", ":", "4", "]", "=", "pred_ctr_y", "+", "0.5", "*", "pred_h", "\n", "\n", "return", "pred_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.fast_rcnn.bbox_transform.clip_boxes": [[63, 77], ["numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.minimum"], "function", ["None"], ["", "def", "clip_boxes", "(", "boxes", ",", "im_shape", ")", ":", "\n", "    ", "\"\"\"\n    Clip boxes to image boundaries.\n    \"\"\"", "\n", "\n", "# x1 >= 0", "\n", "boxes", "[", ":", ",", "0", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "0", ":", ":", "4", "]", ",", "im_shape", "[", "1", "]", "-", "1", ")", ",", "0", ")", "\n", "# y1 >= 0", "\n", "boxes", "[", ":", ",", "1", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "1", ":", ":", "4", "]", ",", "im_shape", "[", "0", "]", "-", "1", ")", ",", "0", ")", "\n", "# x2 < im_shape[1]", "\n", "boxes", "[", ":", ",", "2", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "2", ":", ":", "4", "]", ",", "im_shape", "[", "1", "]", "-", "1", ")", ",", "0", ")", "\n", "# y2 < im_shape[0]", "\n", "boxes", "[", ":", ",", "3", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "3", ":", ":", "4", "]", ",", "im_shape", "[", "0", "]", "-", "1", ")", ",", "0", ")", "\n", "return", "boxes", "\n", "", ""]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.fast_rcnn.nms_wrapper.nms": [[12, 21], ["nms.gpu_nms.gpu_nms", "nms.cpu_nms.cpu_nms"], "function", ["None"], ["def", "nms", "(", "dets", ",", "thresh", ",", "force_cpu", "=", "False", ")", ":", "\n", "    ", "\"\"\"Dispatch to either CPU or GPU NMS implementations.\"\"\"", "\n", "\n", "if", "dets", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "if", "cfg", ".", "USE_GPU_NMS", "and", "not", "force_cpu", ":", "\n", "        ", "return", "gpu_nms", "(", "dets", ",", "thresh", ",", "device_id", "=", "cfg", ".", "GPU_ID", ")", "\n", "", "else", ":", "\n", "        ", "return", "cpu_nms", "(", "dets", ",", "thresh", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.tools.test_net.parse_args": [[21, 59], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.tools.test_net.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test a Fast R-CNN network'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "dest", "=", "'gpu_id'", ",", "help", "=", "'GPU id to use'", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--def'", ",", "dest", "=", "'prototxt'", ",", "\n", "help", "=", "'prototxt file defining the network'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "dest", "=", "'caffemodel'", ",", "\n", "help", "=", "'model to test'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "dest", "=", "'cfg_file'", ",", "\n", "help", "=", "'optional config file'", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--wait'", ",", "dest", "=", "'wait'", ",", "\n", "help", "=", "'wait until net file exists'", ",", "\n", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--imdb'", ",", "dest", "=", "'imdb_name'", ",", "\n", "help", "=", "'dataset to test'", ",", "\n", "default", "=", "'voc_2007_test'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--comp'", ",", "dest", "=", "'comp_mode'", ",", "help", "=", "'competition mode'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--set'", ",", "dest", "=", "'set_cfgs'", ",", "\n", "help", "=", "'set config keys'", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "parser", ".", "add_argument", "(", "'--vis'", ",", "dest", "=", "'vis'", ",", "help", "=", "'visualize detections'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_dets'", ",", "dest", "=", "'max_per_image'", ",", "\n", "help", "=", "'max number of detections per image'", ",", "\n", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sanghoon_pva-faster-rcnn.tools._init_paths.add_path": [[13, 16], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]]}