{"home.repos.pwc.inspect_result.tanmingkui_multiwaybp.multiwaybp-pytorch.options.Option.__init__": [[2, 65], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Option", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#  ------------ General options ----------------------------------------", "\n", "self", ".", "dataPath", "=", "\"/home/dataset/\"", "# path for loading data set", "\n", "self", ".", "dataset", "=", "\"cifar10\"", "# options:  cifar10 | cifar100", "\n", "self", ".", "save_path", "=", "\"./output/\"", "# output model save path", "\n", "self", ".", "nGPU", "=", "1", "# number of GPUs to use by default", "\n", "# self.nGPU = 2  # recommend Resnext use", "\n", "# self.nGPU = 4  # recommend DARTSNet  use", "\n", "self", ".", "GPU", "=", "0", "# default gpu to use, options: range(nGPU)", "\n", "self", ".", "manualSeed", "=", "1", "# add training seed", "\n", "self", ".", "tenCrop", "=", "False", "\n", "\n", "# ------------- Data options -------------------------------------------", "\n", "self", ".", "nThreads", "=", "8", "# number of data loader threads", "\n", "self", ".", "nClasses", "=", "10", "# number of classes in the dataset", "\n", "\n", "# ---------- Optimization options --------------------------------------", "\n", "self", ".", "nEpochs", "=", "400", "# number of total epochs to train", "\n", "self", ".", "batchSize", "=", "128", "# mini-batch size", "\n", "self", ".", "momentum", "=", "0.9", "# momentum", "\n", "self", ".", "weightDecay", "=", "1e-4", "# weight decay 1e-4", "\n", "self", ".", "lr", "=", "0.1", "# initial learning rate", "\n", "self", ".", "lrPolicy", "=", "\"multi_step\"", "# options: multi_step | linear | exp | const | step", "\n", "self", ".", "power", "=", "1", "# power for inv policy (lr_policy)", "\n", "self", ".", "step", "=", "[", "160", ",", "240", "]", "# step for linear or exp learning rate policy", "\n", "self", ".", "decayRate", "=", "0.1", "# lr decay rate", "\n", "self", ".", "endlr", "=", "0.0001", "\n", "\n", "# ---------- Model options ---------------------------------------------", "\n", "self", ".", "netType", "=", "\"PreResNet\"", "\n", "\n", "\n", "# --------- AuxNet options ------------------------------------------------", "\n", "self", ".", "pivotSet", "=", "[", "8", ",", "13", ",", "18", ",", "23", "]", "\n", "self", ".", "optimizerAlgorithm", "=", "\"SGD\"", "\n", "\n", "\n", "# --------- PreResNet options ------------------------------------------------", "\n", "if", "self", ".", "netType", "==", "\"PreResNet\"", ":", "\n", "            ", "self", ".", "depth", "=", "56", "# resnet depth: (n-2)%6==0", "\n", "", "self", ".", "wideFactor", "=", "1", "# wide factor for wide-resnet", "\n", "\n", "# --------- ResNet options ------------------------------------------------", "\n", "if", "self", ".", "netType", "==", "\"ResNet\"", ":", "\n", "            ", "self", ".", "depth", "=", "50", "# options: 18 | 34 | 50 | 101 | 152", "\n", "\n", "# --------- CifarResNeXt options ------------------------------------------------", "\n", "", "if", "self", ".", "netType", "==", "\"CifarResNeXt\"", ":", "\n", "            ", "self", ".", "depth", "=", "29", "\n", "", "self", ".", "cardinality", "=", "8", "\n", "self", ".", "base_width", "=", "64", "\n", "self", ".", "widen_factor", "=", "4", "\n", "\n", "# --------- DARTSNet options ------------------------------------------------", "\n", "self", ".", "init_channels", "=", "36", "\n", "self", ".", "layers", "=", "20", "\n", "self", ".", "auxiliary", "=", "True", "\n", "self", ".", "arch", "=", "'DARTS'", "\n", "\n", "# ---------- Resume or Retrain options ---------------------------------------------", "\n", "self", ".", "resume", "=", "None", "\n", "self", ".", "retrain", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.multiwaybp-pytorch.aux_classifier.AuxClassifier_A.__init__": [[11, 19], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.ReLU", "torch.Linear", "aux_classifier.AuxClassifier_A.fc.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "AuxClassifier_A", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "in_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "num_classes", ")", "\n", "\n", "# init params", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.multiwaybp-pytorch.aux_classifier.AuxClassifier_A.forward": [[20, 29], ["aux_classifier.AuxClassifier_A.bn", "aux_classifier.AuxClassifier_A.relu", "aux_classifier.AuxClassifier_A.mean().mean", "aux_classifier.AuxClassifier_A.fc", "aux_classifier.AuxClassifier_A.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward propagation\n        \"\"\"", "\n", "out", "=", "self", ".", "bn", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "out", ".", "mean", "(", "2", ")", ".", "mean", "(", "2", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.multiwaybp-pytorch.aux_classifier.AuxClassifier_B.__init__": [[38, 46], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.ReLU", "torch.Linear", "aux_classifier.AuxClassifier_B.fc.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ",", "feature_size", ")", ":", "\n", "        ", "super", "(", "AuxClassifier_B", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "in_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", "*", "feature_size", ",", "num_classes", ")", "\n", "\n", "# init params", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.multiwaybp-pytorch.aux_classifier.AuxClassifier_B.forward": [[47, 56], ["aux_classifier.AuxClassifier_B.bn", "aux_classifier.AuxClassifier_B.relu", "aux_classifier.AuxClassifier_B.view", "aux_classifier.AuxClassifier_B.fc", "aux_classifier.AuxClassifier_B.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward propagation\n        \"\"\"", "\n", "out", "=", "self", ".", "bn", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.multiwaybp-pytorch.aux_classifier.AuxClassifier_C.__init__": [[64, 70], ["torch.Module.__init__", "torch.Linear", "aux_classifier.AuxClassifier_C.fc.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "AuxClassifier_C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "num_classes", ")", "\n", "\n", "# init params", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.multiwaybp-pytorch.aux_classifier.AuxClassifier_C.forward": [[71, 78], ["x.mean().mean", "aux_classifier.AuxClassifier_C.fc", "x.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward propagation\n        \"\"\"", "\n", "out", "=", "x", ".", "mean", "(", "2", ")", ".", "mean", "(", "2", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.multiwaybp-pytorch.aux_classifier.AuxClassifier_D.__init__": [[86, 93], ["torch.Module.__init__", "torch.ReLU", "torch.Linear", "aux_classifier.AuxClassifier_D.fc.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "AuxClassifier_D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "num_classes", ")", "\n", "\n", "# init params", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.multiwaybp-pytorch.aux_classifier.AuxClassifier_D.forward": [[94, 102], ["aux_classifier.AuxClassifier_D.relu", "aux_classifier.AuxClassifier_D.mean().mean", "aux_classifier.AuxClassifier_D.fc", "aux_classifier.AuxClassifier_D.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward propagation\n        \"\"\"", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "x", ".", "mean", "(", "2", ")", ".", "mean", "(", "2", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.utils.lr_policy.LRPolicy.__init__": [[14, 20], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lr", ",", "n_epochs", ",", "lr_policy", "=", "\"multi_step\"", ")", ":", "\n", "        ", "self", ".", "lr_policy", "=", "lr_policy", "\n", "self", ".", "params_dict", "=", "{", "}", "\n", "self", ".", "n_epochs", "=", "n_epochs", "\n", "self", ".", "base_lr", "=", "lr", "\n", "self", ".", "lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.utils.lr_policy.LRPolicy.set_params": [[21, 90], ["sorted", "max", "math.floor", "new_step_list.append", "math.pow", "int", "math.pow", "math.pow"], "methods", ["None"], ["", "def", "set_params", "(", "self", ",", "params_dict", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        set parameters of lr policy\n        \"\"\"", "\n", "if", "self", ".", "lr_policy", "==", "\"multi_step\"", ":", "\n", "            ", "\"\"\"\n            params: decay_rate, step\n            \"\"\"", "\n", "self", ".", "params_dict", "[", "'decay_rate'", "]", "=", "params_dict", "[", "'decay_rate'", "]", "\n", "self", ".", "params_dict", "[", "'step'", "]", "=", "sorted", "(", "params_dict", "[", "'step'", "]", ")", "\n", "if", "max", "(", "self", ".", "params_dict", "[", "'step'", "]", ")", "<=", "1", ":", "\n", "                ", "new_step_list", "=", "[", "]", "\n", "for", "ratio", "in", "self", ".", "params_dict", "[", "'step'", "]", ":", "\n", "                    ", "new_step_list", ".", "append", "(", "int", "(", "self", ".", "n_epochs", "*", "ratio", ")", ")", "\n", "", "self", ".", "params_dict", "[", "'step'", "]", "=", "new_step_list", "\n", "\n", "", "", "elif", "self", ".", "lr_policy", "==", "\"step\"", ":", "\n", "            ", "\"\"\"\n            params: end_lr, step\n            step: lr = base_lr*gamma^(floor(iter/step))\n            \"\"\"", "\n", "self", ".", "params_dict", "[", "'end_lr'", "]", "=", "params_dict", "[", "'end_lr'", "]", "\n", "\n", "self", ".", "params_dict", "[", "'step'", "]", "=", "params_dict", "[", "'step'", "]", "\n", "max_iter", "=", "math", ".", "floor", "(", "(", "self", ".", "n_epochs", "-", "1.0", ")", "/", "\n", "self", ".", "params_dict", "[", "'step'", "]", ")", "\n", "\n", "if", "self", ".", "params_dict", "[", "'end_lr'", "]", "==", "-", "1", ":", "\n", "                ", "self", ".", "params_dict", "[", "'gamma'", "]", "=", "params_dict", "[", "'decay_rate'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "params_dict", "[", "'gamma'", "]", "=", "math", ".", "pow", "(", "\n", "self", ".", "params_dict", "[", "'end_lr'", "]", "/", "self", ".", "base_lr", ",", "1.", "/", "max_iter", ")", "\n", "\n", "", "", "elif", "self", ".", "lr_policy", "==", "\"linear\"", ":", "\n", "            ", "\"\"\"\n            params: end_lr, step\n            \"\"\"", "\n", "self", ".", "params_dict", "[", "'end_lr'", "]", "=", "params_dict", "[", "'end_lr'", "]", "\n", "self", ".", "params_dict", "[", "'step'", "]", "=", "params_dict", "[", "'step'", "]", "\n", "\n", "", "elif", "self", ".", "lr_policy", "==", "\"exp\"", ":", "\n", "            ", "\"\"\"\n            params: end_lr\n            exp: lr = base_lr*gamma^iter\n            \"\"\"", "\n", "self", ".", "params_dict", "[", "'end_lr'", "]", "=", "params_dict", "[", "'end_lr'", "]", "\n", "self", ".", "params_dict", "[", "'gamma'", "]", "=", "math", ".", "pow", "(", "\n", "self", ".", "params_dict", "[", "'end_lr'", "]", "/", "self", ".", "base_lr", ",", "1.", "/", "(", "self", ".", "n_epochs", "-", "1", ")", ")", "\n", "\n", "", "elif", "self", ".", "lr_policy", "==", "\"inv\"", ":", "\n", "            ", "\"\"\"\n            params: end_lr\n            inv: lr = base_lr*(1+gamma*iter)^(-power)\n            \"\"\"", "\n", "self", ".", "params_dict", "[", "'end_lr'", "]", "=", "params_dict", "[", "'end_lr'", "]", "\n", "self", ".", "params_dict", "[", "'power'", "]", "=", "params_dict", "[", "'power'", "]", "\n", "self", ".", "params_dict", "[", "'gamma'", "]", "=", "(", "math", ".", "pow", "(", "\n", "self", ".", "base_lr", "/", "self", ".", "params_dict", "[", "'end_lr'", "]", ",", "\n", "1.", "/", "self", ".", "params_dict", "[", "'power'", "]", ")", "-", "1.", ")", "/", "(", "self", ".", "n_epochs", "-", "1.", ")", "\n", "\n", "", "elif", "self", ".", "lr_policy", "==", "\"const\"", ":", "\n", "            ", "\"\"\"\n            no params\n            const: lr = base_lr\n            \"\"\"", "\n", "self", ".", "params_dict", "=", "None", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"invalid lr_policy\"", "+", "self", ".", "lr_policy", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.utils.lr_policy.LRPolicy.get_lr": [[91, 131], ["math.pow", "math.pow", "math.floor", "math.ceil", "math.ceil", "math.pow", "math.pow"], "methods", ["None"], ["", "", "def", "get_lr", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        get current learning rate\n        \"\"\"", "\n", "if", "self", ".", "lr_policy", "==", "\"multi_step\"", ":", "\n", "            ", "gamma", "=", "0", "\n", "for", "step", "in", "self", ".", "params_dict", "[", "'step'", "]", ":", "\n", "                ", "if", "epoch", "+", "1.0", ">", "step", ":", "\n", "                    ", "gamma", "+=", "1", "\n", "", "", "lr", "=", "self", ".", "base_lr", "*", "math", ".", "pow", "(", "self", ".", "params_dict", "[", "'decay_rate'", "]", ",", "gamma", ")", "\n", "\n", "", "elif", "self", ".", "lr_policy", "==", "\"step\"", ":", "\n", "            ", "lr", "=", "self", ".", "base_lr", "*", "math", ".", "pow", "(", "self", ".", "params_dict", "[", "'gamma'", "]", ",", "math", ".", "floor", "(", "\n", "epoch", "*", "1.0", "/", "self", ".", "params_dict", "[", "'step'", "]", ")", ")", "\n", "\n", "", "elif", "self", ".", "lr_policy", "==", "\"linear\"", ":", "\n", "            ", "k", "=", "(", "self", ".", "params_dict", "[", "'end_lr'", "]", "-", "self", ".", "base_lr", ")", "/", "math", ".", "ceil", "(", "self", ".", "n_epochs", "/", "self", ".", "params_dict", "[", "'step'", "]", ")", "\n", "\n", "lr", "=", "k", "*", "math", ".", "ceil", "(", "(", "epoch", "+", "1", ")", "/", "\n", "self", ".", "params_dict", "[", "'step'", "]", ")", "+", "self", ".", "base_lr", "\n", "\n", "", "elif", "self", ".", "lr_policy", "==", "\"inv\"", ":", "\n", "            ", "lr", "=", "self", ".", "base_lr", "*", "math", ".", "pow", "(", "\n", "1", "+", "self", ".", "params_dict", "[", "'gamma'", "]", "*", "epoch", ",", "-", "self", ".", "params_dict", "[", "'power'", "]", ")", "\n", "\n", "", "elif", "self", ".", "lr_policy", "==", "\"exp\"", ":", "\n", "# power = math.floor((epoch + 1) / self.params_dict['step'])", "\n", "# lr = self.base_lr * math.pow(self.params_dict['gamma'], power)", "\n", "            ", "lr", "=", "self", ".", "base_lr", "*", "math", ".", "pow", "(", "self", ".", "params_dict", "[", "'gamma'", "]", ",", "epoch", ")", "\n", "\n", "", "elif", "self", ".", "lr_policy", "==", "\"const\"", ":", "\n", "            ", "lr", "=", "self", ".", "base_lr", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"invalid lr_policy: \"", "+", "self", ".", "lr_policy", "\n", "", "self", ".", "lr", "=", "lr", "\n", "return", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.utils.compute.AverageMeter.__init__": [[79, 81], ["compute.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.AvgrageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.utils.compute.AverageMeter.reset": [[82, 90], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        reset all parameters\n        \"\"\"", "\n", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.utils.compute.AverageMeter.update": [[91, 99], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        update parameters\n        \"\"\"", "\n", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "", "", "", ""]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.utils.compute.compute_tencrop": [[7, 27], ["outputs.sum().squeeze.size", "outputs.sum().squeeze.view", "outputs.sum().squeeze.sum().squeeze", "outputs.sum().squeeze.topk", "pred.t.t", "pred.t.eq().view().float().sum", "float", "outputs.sum().squeeze.topk", "pred.t.t", "pred.t.eq().view().float().sum", "float", "float.cpu().numpy", "float.cpu().numpy", "outputs.sum().squeeze.sum", "pred.t.eq().view().float", "labels.size", "pred.t.eq().view().float", "labels.size", "float.cpu", "float.cpu", "pred.t.eq().view", "pred.t.eq().view", "pred.t.eq", "pred.t.eq", "labels.data.view().expand_as", "labels.data.view().expand_as", "labels.data.view", "labels.data.view"], "function", ["None"], ["def", "compute_tencrop", "(", "outputs", ",", "labels", ")", ":", "\n", "    ", "output_size", "=", "outputs", ".", "size", "(", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "output_size", "[", "0", "]", "/", "10", ",", "10", ",", "output_size", "[", "1", "]", ")", "\n", "outputs", "=", "outputs", ".", "sum", "(", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "# compute top1", "\n", "_", ",", "pred", "=", "outputs", ".", "topk", "(", "1", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "top1_count", "=", "pred", ".", "eq", "(", "labels", ".", "data", ".", "view", "(", "\n", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "top1_error", "=", "100.0", "-", "100.0", "*", "top1_count", "/", "labels", ".", "size", "(", "0", ")", "\n", "top1_error", "=", "float", "(", "top1_error", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# compute top5", "\n", "_", ",", "pred", "=", "outputs", ".", "topk", "(", "5", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "top5_count", "=", "pred", ".", "eq", "(", "labels", ".", "data", ".", "view", "(", "\n", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "top5_error", "=", "100.0", "-", "100.0", "*", "top5_count", "/", "labels", ".", "size", "(", "0", ")", "\n", "top5_error", "=", "float", "(", "top5_error", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "top1_error", ",", "0", ",", "top5_error", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.utils.compute.compute_singlecrop": [[29, 75], ["isinstance", "range", "numpy.array", "numpy.array", "predicted.ne().float().sum", "labels.size", "len", "predicted.ne().float().cpu().sum", "np.array.append", "top1_loss.append", "outputs.data.max", "outputs.data.topk", "pred.t.t", "pred.t.eq().float().sum", "outputs[].data.max", "outputs[].data.topk", "pred.t.t", "pred.t.eq().float().sum", "np.array.append", "predicted.ne().float", "predicted.ne().float().cpu", "pred.t.eq().float", "labels.size", "pred.t.eq().float", "labels.size", "predicted.ne", "predicted.ne().float", "pred.t.eq", "pred.t.eq", "labels.data.view().expand_as", "predicted.ne", "labels.data.view().expand_as", "labels.data.view", "labels.data.view"], "function", ["None"], ["", "def", "compute_singlecrop", "(", "outputs", ",", "labels", ",", "loss", ",", "top5_flag", "=", "False", ",", "mean_flag", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "outputs", ",", "list", ")", ":", "\n", "        ", "top1_loss", "=", "[", "]", "\n", "top1_error", "=", "[", "]", "\n", "top5_error", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "outputs", ")", ")", ":", "\n", "# get index of the max log-probability", "\n", "            ", "predicted", "=", "outputs", "[", "i", "]", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "top1_count", "=", "predicted", ".", "ne", "(", "labels", ".", "data", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "top1_error", ".", "append", "(", "100.0", "*", "top1_count", ")", "\n", "# top1_loss.append(loss[i].data[0])", "\n", "top1_loss", ".", "append", "(", "loss", "[", "i", "]", ".", "item", ")", "\n", "if", "top5_flag", ":", "\n", "                ", "_", ",", "pred", "=", "outputs", "[", "i", "]", ".", "data", ".", "topk", "(", "5", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "top5_count", "=", "pred", ".", "eq", "(", "labels", ".", "data", ".", "view", "(", "\n", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "single_top5", "=", "100.0", "*", "(", "labels", ".", "size", "(", "0", ")", "-", "top5_count", ")", "\n", "top5_error", ".", "append", "(", "single_top5", ")", "\n", "\n", "", "", "top1_error", "=", "np", ".", "array", "(", "top1_error", ")", "\n", "top5_error", "=", "np", ".", "array", "(", "top5_error", ")", "\n", "\n", "", "else", ":", "\n", "# get index of the max log-probability", "\n", "        ", "predicted", "=", "outputs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "top1_count", "=", "predicted", ".", "ne", "(", "labels", ".", "data", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "\n", "top1_error", "=", "top1_count", "*", "100.0", "\n", "top1_loss", "=", "loss", ".", "data", "[", "0", "]", "\n", "\n", "if", "top5_flag", ":", "\n", "            ", "_", ",", "pred", "=", "outputs", ".", "data", ".", "topk", "(", "5", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "top5_count", "=", "pred", ".", "eq", "(", "labels", ".", "data", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "top5_error", "=", "(", "labels", ".", "size", "(", "0", ")", "-", "top5_count", ")", "*", "100.0", "\n", "\n", "", "", "if", "mean_flag", ":", "\n", "        ", "scale", "=", "labels", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "scale", "=", "1.0", "\n", "\n", "", "if", "top5_flag", ":", "\n", "        ", "return", "top1_error", "/", "scale", ",", "top1_loss", ",", "top5_error", "/", "scale", "\n", "", "else", ":", "\n", "        ", "return", "top1_error", "/", "scale", ",", "top1_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.utils.caffe_sgd.caffeSGD.__init__": [[30, 38], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "momentum", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "nesterov", "=", "False", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "\n", "weight_decay", "=", "weight_decay", ",", "nesterov", "=", "nesterov", ")", "\n", "if", "nesterov", "and", "momentum", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Nesterov momentum requires a momentum and zero dampening\"", ")", "\n", "", "super", "(", "caffeSGD", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.utils.caffe_sgd.caffeSGD.__setstate__": [[39, 43], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.utils.caffe_sgd.caffeSGD.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "caffeSGD", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'nesterov'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.utils.caffe_sgd.caffeSGD.step": [[44, 85], ["closure", "p.data.add_", "d_p.add_", "d_p.clone", "d_p.clone.clone", "d_p.clone.clone", "d_p.clone.mul_().add_", "d_p.clone.mul_"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "d_p", "=", "p", ".", "grad", ".", "data", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", ".", "add_", "(", "weight_decay", ",", "p", ".", "data", ")", "\n", "", "if", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "d_p", ".", "clone", "(", ")", "\n", "buf_clone", "=", "buf", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf_clone", "=", "buf", ".", "clone", "(", ")", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "\n", "group", "[", "'lr'", "]", ",", "d_p", ")", "\n", "", "if", "nesterov", ":", "\n", "                        ", "d_p", "=", "buf", "*", "(", "1", "+", "momentum", ")", "-", "buf_clone", "*", "momentum", "\n", "# d_p = d_p.add(momentum, buf)", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "\n", "", "", "p", ".", "data", ".", "add_", "(", "-", "1", ",", "d_p", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.utils.optimize.SVB": [[8, 18], ["isinstance", "layer.weight.data.size", "layer.weight.data.view().cpu", "torch.svd", "torch.svd", "S.clamp.clamp", "torch.mm", "torch.mm", "layer.weight.data.copy_", "torch.mm", "torch.mm", "V.t", "torch.mm.view", "layer.weight.data.view", "torch.diag", "torch.diag"], "function", ["None"], ["def", "SVB", "(", "layer", ")", ":", "\n", "    ", "eps", "=", "5.0", "\n", "# for layer in m.modules():", "\n", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "w_size", "=", "layer", ".", "weight", ".", "data", ".", "size", "(", ")", "\n", "layer_weight", "=", "(", "layer", ".", "weight", ".", "data", ".", "view", "(", "w_size", "[", "0", "]", ",", "-", "1", ")", ")", ".", "cpu", "(", ")", "\n", "U", ",", "S", ",", "V", "=", "torch", ".", "svd", "(", "layer_weight", ")", "\n", "S", "=", "S", ".", "clamp", "(", "1.0", "/", "(", "1", "+", "eps", ")", ",", "1", "+", "eps", ")", "\n", "layer_weight", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "U", ",", "torch", ".", "diag", "(", "S", ")", ")", ",", "V", ".", "t", "(", ")", ")", "\n", "layer", ".", "weight", ".", "data", ".", "copy_", "(", "layer_weight", ".", "view", "(", "w_size", "[", "0", "]", ",", "w_size", "[", "1", "]", ",", "w_size", "[", "2", "]", ",", "w_size", "[", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.utils.optimize.BBN": [[20, 32], ["isinstance", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "layer.weight.data.cpu", "layer.weight.data.cpu.numpy", "layer_weight_cpu.numpy.clip", "layer.weight.data.copy_", "low_bound.numpy", "up_bound.numpy", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "", "def", "BBN", "(", "layer", ")", ":", "\n", "    ", "eps", "=", "1.0", "\n", "# for layer in m.modules():", "\n", "if", "isinstance", "(", "layer", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "std", "=", "torch", ".", "sqrt", "(", "layer", ".", "running_var", "+", "layer", ".", "eps", ")", "\n", "alpha", "=", "torch", ".", "mean", "(", "layer", ".", "weight", ".", "data", "/", "std", ")", "\n", "low_bound", "=", "(", "std", "*", "alpha", "/", "(", "1", "+", "eps", ")", ")", ".", "cpu", "(", ")", "\n", "up_bound", "=", "(", "std", "*", "alpha", "*", "(", "1", "+", "eps", ")", ")", ".", "cpu", "(", ")", "\n", "layer_weight_cpu", "=", "layer", ".", "weight", ".", "data", ".", "cpu", "(", ")", "\n", "layer_weight", "=", "layer_weight_cpu", ".", "numpy", "(", ")", "\n", "layer_weight", ".", "clip", "(", "low_bound", ".", "numpy", "(", ")", ",", "up_bound", ".", "numpy", "(", ")", ")", "\n", "layer", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "Tensor", "(", "layer_weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.dataloader.transform.TenCrop.__init__": [[21, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "normalize", "=", "None", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.dataloader.transform.TenCrop.__call__": [[25, 47], ["img.transpose", "torchvision.CenterCrop", "torchvision.ToTensor", "img_list.append", "img_list.append", "img_list.append", "img_list.append", "img_list.append", "torchvision.CenterCrop.", "image.crop", "image.crop", "image.crop", "image.crop", "torchvision.ToTensor.", "transform.TenCrop.normalize", "torchvision.ToTensor.", "transform.TenCrop.normalize", "torch.cat"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_flip", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "center_crop", "=", "transforms", ".", "CenterCrop", "(", "self", ".", "size", ")", "\n", "img_list", "=", "[", "]", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "for", "image", "in", "[", "img", ",", "img_flip", "]", ":", "\n", "            ", "img_list", ".", "append", "(", "center_crop", "(", "image", ")", ")", "\n", "img_list", ".", "append", "(", "image", ".", "crop", "(", "(", "0", ",", "0", ",", "self", ".", "size", ",", "self", ".", "size", ")", ")", ")", "\n", "img_list", ".", "append", "(", "image", ".", "crop", "(", "(", "w", "-", "self", ".", "size", ",", "0", ",", "w", ",", "self", ".", "size", ")", ")", ")", "\n", "img_list", ".", "append", "(", "image", ".", "crop", "(", "(", "0", ",", "h", "-", "self", ".", "size", ",", "self", ".", "size", ",", "h", ")", ")", ")", "\n", "img_list", ".", "append", "(", "image", ".", "crop", "(", "(", "w", "-", "self", ".", "size", ",", "h", "-", "self", ".", "size", ",", "w", ",", "h", ")", ")", ")", "\n", "", "imgs", "=", "None", "\n", "to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "for", "image", "in", "img_list", ":", "\n", "            ", "if", "imgs", "is", "None", ":", "\n", "                ", "temp_img", "=", "to_tensor", "(", "image", ")", "\n", "imgs", "=", "self", ".", "normalize", "(", "temp_img", ")", "\n", "", "else", ":", "\n", "                ", "temp_img", "=", "to_tensor", "(", "image", ")", "\n", "temp_img", "=", "self", ".", "normalize", "(", "temp_img", ")", "\n", "imgs", "=", "torch", ".", "cat", "(", "(", "imgs", ",", "temp_img", ")", ")", "\n", "", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.dataloader.transform.Lighting.__init__": [[56, 60], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphastd", ",", "eigval", ",", "eigvec", ")", ":", "\n", "        ", "self", ".", "alphastd", "=", "alphastd", "\n", "self", ".", "eigval", "=", "eigval", "\n", "self", ".", "eigvec", "=", "eigvec", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.dataloader.transform.Lighting.__call__": [[61, 72], ["img.new().resize_().normal_", "transform.Lighting.eigvec.type_as().clone().mul().mul().sum().squeeze", "img.add", "transform.Lighting.view().expand_as", "img.new().resize_", "transform.Lighting.eigvec.type_as().clone().mul().mul().sum", "transform.Lighting.view", "img.new", "transform.Lighting.eigvec.type_as().clone().mul().mul", "transform.Lighting.eigval.view().expand", "transform.Lighting.eigvec.type_as().clone().mul", "img.new().resize_().normal_.view().expand", "transform.Lighting.eigval.view", "transform.Lighting.eigvec.type_as().clone", "img.new().resize_().normal_.view", "transform.Lighting.eigvec.type_as"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "alphastd", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "alpha", "=", "img", ".", "new", "(", ")", ".", "resize_", "(", "3", ")", ".", "normal_", "(", "0", ",", "self", ".", "alphastd", ")", "\n", "rgb", "=", "self", ".", "eigvec", ".", "type_as", "(", "img", ")", ".", "clone", "(", ")", ".", "mul", "(", "alpha", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "mul", "(", "self", ".", "eigval", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "img", ".", "add", "(", "rgb", ".", "view", "(", "3", ",", "1", ",", "1", ")", ".", "expand_as", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.dataloader.transform.RandomOrder.__init__": [[79, 81], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.dataloader.transform.RandomOrder.__call__": [[82, 89], ["torch.randperm", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "transforms", "is", "None", ":", "\n", "            ", "return", "img", "\n", "", "order", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "transforms", ")", ")", "\n", "for", "i", "in", "order", ":", "\n", "            ", "img", "=", "self", ".", "transforms", "[", "i", "]", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.dataloader.transform.Grayscale.__call__": [[92, 98], ["img.clone", "gs[].mul_().add_().add_", "gs[].copy_", "gs[].copy_", "gs[].mul_().add_", "gs[].mul_"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "img", ".", "clone", "(", ")", "\n", "gs", "[", "0", "]", ".", "mul_", "(", "0.299", ")", ".", "add_", "(", "0.587", ",", "gs", "[", "1", "]", ")", ".", "add_", "(", "0.114", ",", "gs", "[", "2", "]", ")", "\n", "gs", "[", "1", "]", ".", "copy_", "(", "gs", "[", "0", "]", ")", "\n", "gs", "[", "2", "]", ".", "copy_", "(", "gs", "[", "0", "]", ")", "\n", "return", "gs", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.dataloader.transform.Brightness.__init__": [[101, 103], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.dataloader.transform.Brightness.__call__": [[104, 108], ["img.new().resize_as_().zero_", "random.uniform", "img.lerp", "img.new().resize_as_", "img.new"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "img", ".", "new", "(", ")", ".", "resize_as_", "(", "img", ")", ".", "zero_", "(", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "return", "img", ".", "lerp", "(", "gs", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.dataloader.transform.Contrast.__init__": [[111, 113], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.dataloader.transform.Contrast.__call__": [[114, 119], ["gs.fill_", "random.uniform", "img.lerp", "transform.Grayscale", "gs.mean"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "Grayscale", "(", ")", "(", "img", ")", "\n", "gs", ".", "fill_", "(", "gs", ".", "mean", "(", ")", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "return", "img", ".", "lerp", "(", "gs", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.dataloader.transform.Saturation.__init__": [[122, 124], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.dataloader.transform.Saturation.__call__": [[125, 129], ["random.uniform", "img.lerp", "transform.Grayscale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "Grayscale", "(", ")", "(", "img", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "return", "img", ".", "lerp", "(", "gs", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.dataloader.transform.ColorJitter.__init__": [[132, 140], ["transform.ColorJitter.transforms.append", "transform.ColorJitter.transforms.append", "transform.ColorJitter.transforms.append", "transform.Brightness", "transform.Contrast", "transform.Saturation"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "[", "]", "\n", "if", "brightness", "!=", "0", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "Brightness", "(", "brightness", ")", ")", "\n", "", "if", "contrast", "!=", "0", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "Contrast", "(", "contrast", ")", ")", "\n", "", "if", "saturation", "!=", "0", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "Saturation", "(", "saturation", ")", ")", "\n", "# ---------------------------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.visualization.logger.Logger.__init__": [[20, 23], ["tensorflow.summary.FileWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.visualization.logger.Logger.scalar_summary": [[24, 33], ["tensorflow.Summary", "logger.Logger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "# value_real=value.numpy()", "\n", "# value_real=value.item()", "\n", "# summary = tf.Summary(value=[tf.Summary.Value(tag=tag, simple_value=value_real)])", "\n", "\n", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.visualization.logger.Logger.image_summary": [[34, 56], ["enumerate", "tensorflow.Summary", "logger.Logger.writer.add_summary", "scipy.misc.toimage().save", "tensorflow.Summary.Image", "img_summaries.append", "StringIO", "tensorflow.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.save"], ["", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a list of images.\"\"\"", "\n", "\n", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "            ", "try", ":", "\n", "                ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'%s/%d'", "%", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.visualization.logger.Logger.histo_summary": [[57, 84], ["numpy.histogram", "tensorflow.HistogramProto", "float", "float", "int", "float", "float", "tensorflow.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tensorflow.HistogramProto.bucket_limit.append", "tensorflow.HistogramProto.bucket.append", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ",", "bins", "=", "1000", ")", ":", "\n", "        ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "\n", "# Create a histogram using numpy", "\n", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "values", ",", "bins", "=", "bins", ")", "\n", "\n", "# Fill the fields of the histogram proto", "\n", "hist", "=", "tf", ".", "HistogramProto", "(", ")", "\n", "hist", ".", "min", "=", "float", "(", "np", ".", "min", "(", "values", ")", ")", "\n", "hist", ".", "max", "=", "float", "(", "np", ".", "max", "(", "values", ")", ")", "\n", "hist", ".", "num", "=", "int", "(", "np", ".", "prod", "(", "values", ".", "shape", ")", ")", "\n", "hist", ".", "sum", "=", "float", "(", "np", ".", "sum", "(", "values", ")", ")", "\n", "hist", ".", "sum_squares", "=", "float", "(", "np", ".", "sum", "(", "values", "**", "2", ")", ")", "\n", "\n", "# Drop the start of the first bin", "\n", "bin_edges", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# Add bin edges and counts", "\n", "for", "edge", "in", "bin_edges", ":", "\n", "            ", "hist", ".", "bucket_limit", ".", "append", "(", "edge", ")", "\n", "", "for", "c", "in", "counts", ":", "\n", "            ", "hist", ".", "bucket", ".", "append", "(", "c", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "histo", "=", "hist", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.operations.ReLUConvBN.__init__": [[24, 34], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.op = nn.Sequential(", "\n", "#   nn.ReLU(inplace=False),", "\n", "#   nn.Conv2d(C_in, C_out, kernel_size, stride=stride, padding=padding, bias=False),", "\n", "#   nn.BatchNorm2d(C_out, affine=affine)", "\n", "# )", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv21", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.operations.ReLUConvBN.forward": [[36, 42], ["operations.ReLUConvBN.relu1", "operations.ReLUConvBN.conv21", "operations.ReLUConvBN.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# return self.op(x)", "\n", "    ", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv21", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.operations.DilConv.__init__": [[45, 57], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.op = nn.Sequential(", "\n", "#   nn.ReLU(inplace=False),", "\n", "#   nn.Conv2d(C_in, C_in, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, groups=C_in, bias=False),", "\n", "#   nn.Conv2d(C_in, C_out, kernel_size=1, padding=0, bias=False),", "\n", "#   nn.BatchNorm2d(C_out, affine=affine),", "\n", "#   )", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.operations.DilConv.forward": [[58, 66], ["operations.DilConv.relu", "operations.DilConv.conv1", "operations.DilConv.conv2", "operations.DilConv.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# return self.op(x)", "\n", "    ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "# return self.op(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.operations.SepConv.__init__": [[70, 81], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.operations.SepConv.forward": [[83, 85], ["operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.operations.Identity.__init__": [[89, 91], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.operations.Identity.forward": [[92, 94], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.operations.Zero.__init__": [[98, 101], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["  ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "    ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.operations.Zero.forward": [[102, 106], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "stride", "==", "1", ":", "\n", "      ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.operations.FactorizedReduce.__init__": [[110, 117], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.operations.FactorizedReduce.forward": [[118, 123], ["operations.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "operations.FactorizedReduce.bn", "operations.FactorizedReduce.conv_1", "operations.FactorizedReduce.conv_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.ResNet.BasicBlock.__init__": [[30, 41], ["torch.Module.__init__", "ResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "ResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.conv3x3", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"resnet-basic\"", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "block_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.ResNet.BasicBlock.forward": [[42, 59], ["ResNet.BasicBlock.conv1", "ResNet.BasicBlock.bn1", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.conv2", "ResNet.BasicBlock.bn2", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.ResNet.Bottleneck.__init__": [[64, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"resnet-bottleneck\"", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "block_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.ResNet.Bottleneck.forward": [[79, 101], ["ResNet.Bottleneck.conv1", "ResNet.Bottleneck.bn1", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv2", "ResNet.Bottleneck.bn2", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv3", "ResNet.Bottleneck.bn3", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.ResNet.ResNet.__init__": [[105, 143], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "ResNet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreResNet._make_layer", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreResNet._make_layer", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreResNet._make_layer", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "<", "50", ":", "\n", "            ", "block", "=", "BasicBlock", "\n", "", "else", ":", "\n", "            ", "block", "=", "Bottleneck", "\n", "\n", "", "if", "depth", "==", "18", ":", "\n", "            ", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "", "elif", "depth", "==", "34", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "depth", "==", "50", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "depth", "==", "101", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "", "elif", "depth", "==", "152", ":", "\n", "            ", "layers", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.ResNet.ResNet._make_layer": [[144, 160], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.CifarResNeXt.CifarResNeXt.block", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.CifarResNeXt.CifarResNeXt.block"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.ResNet.ResNet.forward": [[161, 177], ["ResNet.ResNet.conv1", "ResNet.ResNet.bn1", "ResNet.ResNet.relu", "ResNet.ResNet.maxpool", "ResNet.ResNet.layer1", "ResNet.ResNet.layer2", "ResNet.ResNet.layer3", "ResNet.ResNet.layer4", "ResNet.ResNet.avgpool", "ResNet.ResNet.view", "ResNet.ResNet.fc", "ResNet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.ResNet.conv3x3": [[21, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.ResNet.resnet18": [[179, 188], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.ResNet.resnet34": [[190, 199], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.ResNet.resnet50": [[201, 210], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.ResNet.resnet101": [[212, 221], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.ResNet.resnet152": [[223, 232], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DPN.DualPathBlock.__init__": [[36, 57], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "DPN.DualPathBlock.BN_ReLU_Conv", "collections.OrderedDict", "DPN.DualPathBlock.BN_ReLU_Conv", "DPN.DualPathBlock.BN_ReLU_Conv", "DPN.DualPathBlock.BN_ReLU_Conv"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DPN.DualPathBlock.BN_ReLU_Conv", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DPN.DualPathBlock.BN_ReLU_Conv", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DPN.DualPathBlock.BN_ReLU_Conv", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DPN.DualPathBlock.BN_ReLU_Conv"], ["    ", "def", "__init__", "(", "self", ",", "in_chs", ",", "num_1x1_a", ",", "num_3x3_b", ",", "num_1x1_c", ",", "inc", ",", "G", ",", "_type", "=", "'normal'", ")", ":", "\n", "        ", "super", "(", "DualPathBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_1x1_c", "=", "num_1x1_c", "\n", "\n", "if", "_type", "is", "'proj'", ":", "\n", "            ", "key_stride", "=", "1", "\n", "self", ".", "has_proj", "=", "True", "\n", "", "if", "_type", "is", "'down'", ":", "\n", "            ", "key_stride", "=", "2", "\n", "self", ".", "has_proj", "=", "True", "\n", "", "if", "_type", "is", "'normal'", ":", "\n", "            ", "key_stride", "=", "1", "\n", "self", ".", "has_proj", "=", "False", "\n", "\n", "", "if", "self", ".", "has_proj", ":", "\n", "            ", "self", ".", "c1x1_w", "=", "self", ".", "BN_ReLU_Conv", "(", "in_chs", "=", "in_chs", ",", "out_chs", "=", "num_1x1_c", "+", "2", "*", "inc", ",", "kernel_size", "=", "1", ",", "stride", "=", "key_stride", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'c1x1_a'", ",", "self", ".", "BN_ReLU_Conv", "(", "in_chs", "=", "in_chs", ",", "out_chs", "=", "num_1x1_a", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ")", ",", "\n", "(", "'c3x3_b'", ",", "self", ".", "BN_ReLU_Conv", "(", "in_chs", "=", "num_1x1_a", ",", "out_chs", "=", "num_3x3_b", ",", "kernel_size", "=", "3", ",", "stride", "=", "key_stride", ",", "padding", "=", "1", ",", "groups", "=", "G", ")", ")", ",", "\n", "(", "'c1x1_c'", ",", "self", ".", "BN_ReLU_Conv", "(", "in_chs", "=", "num_3x3_b", ",", "out_chs", "=", "num_1x1_c", "+", "inc", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ")", ",", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DPN.DualPathBlock.BN_ReLU_Conv": [[59, 64], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "BN_ReLU_Conv", "(", "self", ",", "in_chs", ",", "out_chs", ",", "kernel_size", ",", "stride", ",", "padding", "=", "0", ",", "groups", "=", "1", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'norm'", ",", "nn", ".", "BatchNorm2d", "(", "in_chs", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "in_chs", ",", "out_chs", ",", "kernel_size", ",", "stride", ",", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", ")", ",", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DPN.DualPathBlock.forward": [[66, 81], ["DPN.DualPathBlock.layers", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DPN.DualPathBlock.c1x1_w"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "data_in", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "if", "isinstance", "(", "x", ",", "list", ")", "else", "x", "\n", "if", "self", ".", "has_proj", ":", "\n", "            ", "data_o", "=", "self", ".", "c1x1_w", "(", "data_in", ")", "\n", "data_o1", "=", "data_o", "[", ":", ",", ":", "self", ".", "num_1x1_c", ",", ":", ",", ":", "]", "\n", "data_o2", "=", "data_o", "[", ":", ",", "self", ".", "num_1x1_c", ":", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "data_o1", "=", "x", "[", "0", "]", "\n", "data_o2", "=", "x", "[", "1", "]", "\n", "\n", "", "out", "=", "self", ".", "layers", "(", "data_in", ")", "\n", "\n", "summ", "=", "data_o1", "+", "out", "[", ":", ",", ":", "self", ".", "num_1x1_c", ",", ":", ",", ":", "]", "\n", "dense", "=", "torch", ".", "cat", "(", "[", "data_o2", ",", "out", "[", ":", ",", "self", ".", "num_1x1_c", ":", ",", ":", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "return", "[", "summ", ",", "dense", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DPN.DPN.__init__": [[85, 141], ["torch.Module.__init__", "collections.OrderedDict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "DPN.DualPathBlock", "range", "int", "DPN.DualPathBlock", "range", "int", "DPN.DualPathBlock", "range", "int", "DPN.DualPathBlock", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "DPN.DualPathBlock", "DPN.DualPathBlock", "DPN.DualPathBlock", "DPN.DualPathBlock"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_init_features", "=", "64", ",", "k_R", "=", "96", ",", "G", "=", "32", ",", "\n", "k_sec", "=", "(", "3", ",", "4", ",", "20", ",", "3", ")", ",", "inc_sec", "=", "(", "16", ",", "32", ",", "24", ",", "128", ")", ",", "num_classes", "=", "1000", ")", ":", "\n", "\n", "        ", "super", "(", "DPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "blocks", "=", "OrderedDict", "(", ")", "\n", "\n", "# conv1", "\n", "blocks", "[", "'conv1'", "]", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "num_init_features", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "# conv2", "\n", "bw", "=", "256", "\n", "inc", "=", "inc_sec", "[", "0", "]", "\n", "R", "=", "int", "(", "(", "k_R", "*", "bw", ")", "/", "256", ")", "\n", "blocks", "[", "'conv2_1'", "]", "=", "DualPathBlock", "(", "num_init_features", ",", "R", ",", "R", ",", "bw", ",", "inc", ",", "G", ",", "'proj'", ")", "\n", "in_chs", "=", "bw", "+", "3", "*", "inc", "\n", "for", "i", "in", "range", "(", "2", ",", "k_sec", "[", "0", "]", "+", "1", ")", ":", "\n", "            ", "blocks", "[", "'conv2_{}'", ".", "format", "(", "i", ")", "]", "=", "DualPathBlock", "(", "in_chs", ",", "R", ",", "R", ",", "bw", ",", "inc", ",", "G", ",", "'normal'", ")", "\n", "in_chs", "+=", "inc", "\n", "\n", "# conv3", "\n", "", "bw", "=", "512", "\n", "inc", "=", "inc_sec", "[", "1", "]", "\n", "R", "=", "int", "(", "(", "k_R", "*", "bw", ")", "/", "256", ")", "\n", "blocks", "[", "'conv3_1'", "]", "=", "DualPathBlock", "(", "in_chs", ",", "R", ",", "R", ",", "bw", ",", "inc", ",", "G", ",", "'down'", ")", "\n", "in_chs", "=", "bw", "+", "3", "*", "inc", "\n", "for", "i", "in", "range", "(", "2", ",", "k_sec", "[", "1", "]", "+", "1", ")", ":", "\n", "            ", "blocks", "[", "'conv3_{}'", ".", "format", "(", "i", ")", "]", "=", "DualPathBlock", "(", "in_chs", ",", "R", ",", "R", ",", "bw", ",", "inc", ",", "G", ",", "'normal'", ")", "\n", "in_chs", "+=", "inc", "\n", "\n", "# conv4", "\n", "", "bw", "=", "1024", "\n", "inc", "=", "inc_sec", "[", "2", "]", "\n", "R", "=", "int", "(", "(", "k_R", "*", "bw", ")", "/", "256", ")", "\n", "blocks", "[", "'conv4_1'", "]", "=", "DualPathBlock", "(", "in_chs", ",", "R", ",", "R", ",", "bw", ",", "inc", ",", "G", ",", "'down'", ")", "\n", "in_chs", "=", "bw", "+", "3", "*", "inc", "\n", "for", "i", "in", "range", "(", "2", ",", "k_sec", "[", "2", "]", "+", "1", ")", ":", "\n", "            ", "blocks", "[", "'conv4_{}'", ".", "format", "(", "i", ")", "]", "=", "DualPathBlock", "(", "in_chs", ",", "R", ",", "R", ",", "bw", ",", "inc", ",", "G", ",", "'normal'", ")", "\n", "in_chs", "+=", "inc", "\n", "\n", "# conv5", "\n", "", "bw", "=", "2048", "\n", "inc", "=", "inc_sec", "[", "3", "]", "\n", "R", "=", "int", "(", "(", "k_R", "*", "bw", ")", "/", "256", ")", "\n", "blocks", "[", "'conv5_1'", "]", "=", "DualPathBlock", "(", "in_chs", ",", "R", ",", "R", ",", "bw", ",", "inc", ",", "G", ",", "'down'", ")", "\n", "in_chs", "=", "bw", "+", "3", "*", "inc", "\n", "for", "i", "in", "range", "(", "2", ",", "k_sec", "[", "3", "]", "+", "1", ")", ":", "\n", "            ", "blocks", "[", "'conv5_{}'", ".", "format", "(", "i", ")", "]", "=", "DualPathBlock", "(", "in_chs", ",", "R", ",", "R", ",", "bw", ",", "inc", ",", "G", ",", "'normal'", ")", "\n", "in_chs", "+=", "inc", "\n", "\n", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "blocks", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "in_chs", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DPN.DPN.forward": [[143, 148], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d().view", "torch.avg_pool2d().view", "torch.avg_pool2d().view", "DPN.DPN.classifier", "DPN.DPN.features", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "torch", ".", "cat", "(", "self", ".", "features", "(", "x", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "features", ",", "kernel_size", "=", "7", ")", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DPN.dpn92": [[11, 13], ["DPN.DPN"], "function", ["None"], ["def", "dpn92", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "return", "DPN", "(", "num_init_features", "=", "64", ",", "k_R", "=", "96", ",", "G", "=", "32", ",", "k_sec", "=", "(", "3", ",", "4", ",", "20", ",", "3", ")", ",", "inc_sec", "=", "(", "16", ",", "32", ",", "24", ",", "128", ")", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DPN.dpn98": [[15, 17], ["DPN.DPN"], "function", ["None"], ["", "def", "dpn98", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "return", "DPN", "(", "num_init_features", "=", "96", ",", "k_R", "=", "160", ",", "G", "=", "40", ",", "k_sec", "=", "(", "3", ",", "6", ",", "20", ",", "3", ")", ",", "inc_sec", "=", "(", "16", ",", "32", ",", "32", ",", "128", ")", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DPN.dpn131": [[19, 21], ["DPN.DPN"], "function", ["None"], ["", "def", "dpn131", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "return", "DPN", "(", "num_init_features", "=", "128", ",", "k_R", "=", "160", ",", "G", "=", "40", ",", "k_sec", "=", "(", "4", ",", "8", ",", "28", ",", "3", ")", ",", "inc_sec", "=", "(", "16", ",", "32", ",", "32", ",", "128", ")", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DPN.dpn107": [[23, 25], ["DPN.DPN"], "function", ["None"], ["", "def", "dpn107", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "return", "DPN", "(", "num_init_features", "=", "128", ",", "k_R", "=", "200", ",", "G", "=", "50", ",", "k_sec", "=", "(", "4", ",", "8", ",", "20", ",", "3", ")", ",", "inc_sec", "=", "(", "20", ",", "64", ",", "64", ",", "128", ")", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.Inception3.__init__": [[11, 45], ["torch.Module.__init__", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.InceptionA", "Inception3.InceptionA", "Inception3.InceptionA", "Inception3.InceptionB", "Inception3.InceptionC", "Inception3.InceptionC", "Inception3.InceptionC", "Inception3.InceptionC", "Inception3.InceptionD", "Inception3.InceptionE", "Inception3.InceptionE", "torch.Linear", "torch.Linear", "torch.Linear", "Inception3.Inception3.modules", "Inception3.InceptionAux", "isinstance", "isinstance", "stats.truncnorm", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "m.weight.data.copy_", "isinstance", "hasattr", "stats.truncnorm.rvs", "m.weight.data.fill_", "m.bias.data.zero_", "m.weight.data.numel"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "aux_logits", "=", "True", ",", "transform_input", "=", "False", ")", ":", "\n", "        ", "super", "(", "Inception3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "aux_logits", "=", "aux_logits", "\n", "self", ".", "transform_input", "=", "transform_input", "\n", "self", ".", "Conv2d_1a_3x3", "=", "BasicConv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "Conv2d_2a_3x3", "=", "BasicConv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "Conv2d_2b_3x3", "=", "BasicConv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "Conv2d_3b_1x1", "=", "BasicConv2d", "(", "64", ",", "80", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "Conv2d_4a_3x3", "=", "BasicConv2d", "(", "80", ",", "192", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "Mixed_5b", "=", "InceptionA", "(", "192", ",", "pool_features", "=", "32", ")", "\n", "self", ".", "Mixed_5c", "=", "InceptionA", "(", "256", ",", "pool_features", "=", "64", ")", "\n", "self", ".", "Mixed_5d", "=", "InceptionA", "(", "288", ",", "pool_features", "=", "64", ")", "\n", "self", ".", "Mixed_6a", "=", "InceptionB", "(", "288", ")", "\n", "self", ".", "Mixed_6b", "=", "InceptionC", "(", "768", ",", "channels_7x7", "=", "128", ")", "\n", "self", ".", "Mixed_6c", "=", "InceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "self", ".", "Mixed_6d", "=", "InceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "self", ".", "Mixed_6e", "=", "InceptionC", "(", "768", ",", "channels_7x7", "=", "192", ")", "\n", "if", "aux_logits", ":", "\n", "            ", "self", ".", "AuxLogits", "=", "InceptionAux", "(", "768", ",", "num_classes", ")", "\n", "", "self", ".", "Mixed_7a", "=", "InceptionD", "(", "768", ")", "\n", "self", ".", "Mixed_7b", "=", "InceptionE", "(", "1280", ")", "\n", "self", ".", "Mixed_7c", "=", "InceptionE", "(", "2048", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "import", "scipy", ".", "stats", "as", "stats", "\n", "stddev", "=", "m", ".", "stddev", "if", "hasattr", "(", "m", ",", "'stddev'", ")", "else", "0.1", "\n", "X", "=", "stats", ".", "truncnorm", "(", "-", "2", ",", "2", ",", "scale", "=", "stddev", ")", "\n", "values", "=", "torch", ".", "Tensor", "(", "X", ".", "rvs", "(", "m", ".", "weight", ".", "data", ".", "numel", "(", ")", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "copy_", "(", "values", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.Inception3.forward": [[46, 103], ["Inception3.Inception3.Conv2d_1a_3x3", "Inception3.Inception3.Conv2d_2a_3x3", "Inception3.Inception3.Conv2d_2b_3x3", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "Inception3.Inception3.Conv2d_3b_1x1", "Inception3.Inception3.Conv2d_4a_3x3", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "Inception3.Inception3.Mixed_5b", "Inception3.Inception3.Mixed_5c", "Inception3.Inception3.Mixed_5d", "Inception3.Inception3.Mixed_6a", "Inception3.Inception3.Mixed_6b", "Inception3.Inception3.Mixed_6c", "Inception3.Inception3.Mixed_6d", "Inception3.Inception3.Mixed_6e", "Inception3.Inception3.Mixed_7a", "Inception3.Inception3.Mixed_7b", "Inception3.Inception3.Mixed_7c", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.dropout", "torch.dropout", "torch.dropout", "x.clone.clone.view", "Inception3.Inception3.fc", "x.clone.clone.clone", "Inception3.Inception3.AuxLogits", "x.clone.clone.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "transform_input", ":", "\n", "            ", "x", "=", "x", ".", "clone", "(", ")", "\n", "x", "[", "0", "]", "=", "x", "[", "0", "]", "*", "(", "0.229", "/", "0.5", ")", "+", "(", "0.485", "-", "0.5", ")", "/", "0.5", "\n", "x", "[", "1", "]", "=", "x", "[", "1", "]", "*", "(", "0.224", "/", "0.5", ")", "+", "(", "0.456", "-", "0.5", ")", "/", "0.5", "\n", "x", "[", "2", "]", "=", "x", "[", "2", "]", "*", "(", "0.225", "/", "0.5", ")", "+", "(", "0.406", "-", "0.5", ")", "/", "0.5", "\n", "# 299 x 299 x 3", "\n", "", "x", "=", "self", ".", "Conv2d_1a_3x3", "(", "x", ")", "\n", "# 149 x 149 x 32", "\n", "x", "=", "self", ".", "Conv2d_2a_3x3", "(", "x", ")", "\n", "# 147 x 147 x 32", "\n", "x", "=", "self", ".", "Conv2d_2b_3x3", "(", "x", ")", "\n", "# 147 x 147 x 64", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "# 73 x 73 x 64", "\n", "x", "=", "self", ".", "Conv2d_3b_1x1", "(", "x", ")", "\n", "# 73 x 73 x 80", "\n", "x", "=", "self", ".", "Conv2d_4a_3x3", "(", "x", ")", "\n", "# 71 x 71 x 192", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "# 35 x 35 x 192", "\n", "x", "=", "self", ".", "Mixed_5b", "(", "x", ")", "\n", "# 35 x 35 x 256", "\n", "x", "=", "self", ".", "Mixed_5c", "(", "x", ")", "\n", "# 35 x 35 x 288", "\n", "x", "=", "self", ".", "Mixed_5d", "(", "x", ")", "\n", "# 35 x 35 x 288", "\n", "x", "=", "self", ".", "Mixed_6a", "(", "x", ")", "\n", "# 17 x 17 x 768", "\n", "x", "=", "self", ".", "Mixed_6b", "(", "x", ")", "\n", "# 17 x 17 x 768", "\n", "x", "=", "self", ".", "Mixed_6c", "(", "x", ")", "\n", "# 17 x 17 x 768", "\n", "x", "=", "self", ".", "Mixed_6d", "(", "x", ")", "\n", "# 17 x 17 x 768", "\n", "x", "=", "self", ".", "Mixed_6e", "(", "x", ")", "\n", "# 17 x 17 x 768", "\n", "if", "self", ".", "training", "and", "self", ".", "aux_logits", ":", "\n", "            ", "aux", "=", "self", ".", "AuxLogits", "(", "x", ")", "\n", "# 17 x 17 x 768", "\n", "", "x", "=", "self", ".", "Mixed_7a", "(", "x", ")", "\n", "# 8 x 8 x 1280", "\n", "x", "=", "self", ".", "Mixed_7b", "(", "x", ")", "\n", "# 8 x 8 x 2048", "\n", "x", "=", "self", ".", "Mixed_7c", "(", "x", ")", "\n", "# 8 x 8 x 2048", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "8", ")", "\n", "# 1 x 1 x 2048", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "# 1 x 1 x 2048", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# 2048", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "# 1000 (num_classes)", "\n", "if", "self", ".", "training", "and", "self", ".", "aux_logits", ":", "\n", "            ", "return", "x", ",", "aux", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.InceptionA.__init__": [[107, 119], ["torch.Module.__init__", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "pool_features", ")", ":", "\n", "        ", "super", "(", "InceptionA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch1x1", "=", "BasicConv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "branch5x5_1", "=", "BasicConv2d", "(", "in_channels", ",", "48", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch5x5_2", "=", "BasicConv2d", "(", "48", ",", "64", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "\n", "self", ".", "branch3x3dbl_1", "=", "BasicConv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_2", "=", "BasicConv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_3", "=", "BasicConv2d", "(", "96", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "branch_pool", "=", "BasicConv2d", "(", "in_channels", ",", "pool_features", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.InceptionA.forward": [[120, 135], ["Inception3.InceptionA.branch1x1", "Inception3.InceptionA.branch5x5_1", "Inception3.InceptionA.branch5x5_2", "Inception3.InceptionA.branch3x3dbl_1", "Inception3.InceptionA.branch3x3dbl_2", "Inception3.InceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "Inception3.InceptionA.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch5x5", "=", "self", ".", "branch5x5_1", "(", "x", ")", "\n", "branch5x5", "=", "self", ".", "branch5x5_2", "(", "branch5x5", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.InceptionB.__init__": [[139, 146], ["torch.Module.__init__", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "InceptionB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch3x3", "=", "BasicConv2d", "(", "in_channels", ",", "384", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "branch3x3dbl_1", "=", "BasicConv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_2", "=", "BasicConv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_3", "=", "BasicConv2d", "(", "96", ",", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.InceptionB.forward": [[147, 158], ["Inception3.InceptionB.branch3x3", "Inception3.InceptionB.branch3x3dbl_1", "Inception3.InceptionB.branch3x3dbl_2", "Inception3.InceptionB.branch3x3dbl_3", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch3x3", "=", "self", ".", "branch3x3", "(", "x", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n", "outputs", "=", "[", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.InceptionC.__init__": [[162, 178], ["torch.Module.__init__", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "channels_7x7", ")", ":", "\n", "        ", "super", "(", "InceptionC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch1x1", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "\n", "c7", "=", "channels_7x7", "\n", "self", ".", "branch7x7_1", "=", "BasicConv2d", "(", "in_channels", ",", "c7", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch7x7_2", "=", "BasicConv2d", "(", "c7", ",", "c7", ",", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "self", ".", "branch7x7_3", "=", "BasicConv2d", "(", "c7", ",", "192", ",", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "\n", "self", ".", "branch7x7dbl_1", "=", "BasicConv2d", "(", "in_channels", ",", "c7", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch7x7dbl_2", "=", "BasicConv2d", "(", "c7", ",", "c7", ",", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "self", ".", "branch7x7dbl_3", "=", "BasicConv2d", "(", "c7", ",", "c7", ",", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "self", ".", "branch7x7dbl_4", "=", "BasicConv2d", "(", "c7", ",", "c7", ",", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "self", ".", "branch7x7dbl_5", "=", "BasicConv2d", "(", "c7", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "\n", "self", ".", "branch_pool", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.InceptionC.forward": [[179, 197], ["Inception3.InceptionC.branch1x1", "Inception3.InceptionC.branch7x7_1", "Inception3.InceptionC.branch7x7_2", "Inception3.InceptionC.branch7x7_3", "Inception3.InceptionC.branch7x7dbl_1", "Inception3.InceptionC.branch7x7dbl_2", "Inception3.InceptionC.branch7x7dbl_3", "Inception3.InceptionC.branch7x7dbl_4", "Inception3.InceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "Inception3.InceptionC.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch7x7", "=", "self", ".", "branch7x7_1", "(", "x", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_2", "(", "branch7x7", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_3", "(", "branch7x7", ")", "\n", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_1", "(", "x", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_2", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_3", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_4", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_5", "(", "branch7x7dbl", ")", "\n", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.InceptionD.__init__": [[201, 210], ["torch.Module.__init__", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "InceptionD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch3x3_1", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3_2", "=", "BasicConv2d", "(", "192", ",", "320", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "branch7x7x3_1", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch7x7x3_2", "=", "BasicConv2d", "(", "192", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "self", ".", "branch7x7x3_3", "=", "BasicConv2d", "(", "192", ",", "192", ",", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "self", ".", "branch7x7x3_4", "=", "BasicConv2d", "(", "192", ",", "192", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.InceptionD.forward": [[211, 223], ["Inception3.InceptionD.branch3x3_1", "Inception3.InceptionD.branch3x3_2", "Inception3.InceptionD.branch7x7x3_1", "Inception3.InceptionD.branch7x7x3_2", "Inception3.InceptionD.branch7x7x3_3", "Inception3.InceptionD.branch7x7x3_4", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "self", ".", "branch3x3_2", "(", "branch3x3", ")", "\n", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_1", "(", "x", ")", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_2", "(", "branch7x7x3", ")", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_3", "(", "branch7x7x3", ")", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_4", "(", "branch7x7x3", ")", "\n", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "outputs", "=", "[", "branch3x3", ",", "branch7x7x3", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.InceptionE.__init__": [[227, 241], ["torch.Module.__init__", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "Inception3.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "InceptionE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch1x1", "=", "BasicConv2d", "(", "in_channels", ",", "320", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "branch3x3_1", "=", "BasicConv2d", "(", "in_channels", ",", "384", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3_2a", "=", "BasicConv2d", "(", "384", ",", "384", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "branch3x3_2b", "=", "BasicConv2d", "(", "384", ",", "384", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ")", "\n", "\n", "self", ".", "branch3x3dbl_1", "=", "BasicConv2d", "(", "in_channels", ",", "448", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_2", "=", "BasicConv2d", "(", "448", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_3a", "=", "BasicConv2d", "(", "384", ",", "384", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "branch3x3dbl_3b", "=", "BasicConv2d", "(", "384", ",", "384", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ")", "\n", "\n", "self", ".", "branch_pool", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.InceptionE.forward": [[242, 265], ["Inception3.InceptionE.branch1x1", "Inception3.InceptionE.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Inception3.InceptionE.branch3x3dbl_1", "Inception3.InceptionE.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "Inception3.InceptionE.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Inception3.InceptionE.branch3x3_2a", "Inception3.InceptionE.branch3x3_2b", "Inception3.InceptionE.branch3x3dbl_3a", "Inception3.InceptionE.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.InceptionAux.__init__": [[269, 276], ["torch.Module.__init__", "Inception3.BasicConv2d", "Inception3.BasicConv2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "InceptionAux", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv0", "=", "BasicConv2d", "(", "in_channels", ",", "128", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv1", "=", "BasicConv2d", "(", "128", ",", "768", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv1", ".", "stddev", "=", "0.01", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "self", ".", "fc", ".", "stddev", "=", "0.001", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.InceptionAux.forward": [[277, 290], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "Inception3.InceptionAux.conv0", "Inception3.InceptionAux.conv1", "Inception3.InceptionAux.view", "Inception3.InceptionAux.fc", "Inception3.InceptionAux.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# 17 x 17 x 768", "\n", "        ", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "5", ",", "stride", "=", "3", ")", "\n", "# 5 x 5 x 768", "\n", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "# 5 x 5 x 128", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# 1 x 1 x 768", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# 768", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "# 1000", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.BasicConv2d.__init__": [[294, 298], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BasicConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ",", "**", "kwargs", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "eps", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.Inception3.BasicConv2d.forward": [[299, 303], ["Inception3.BasicConv2d.conv", "Inception3.BasicConv2d.bn", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.densenet_cifar.BasicBlock.__init__": [[9, 16], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.densenet_cifar.BasicBlock.forward": [[16, 21], ["densenet_cifar.BasicBlock.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "densenet_cifar.BasicBlock.relu", "torch.dropout", "torch.dropout", "torch.dropout", "densenet_cifar.BasicBlock.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "out", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.densenet_cifar.BottleneckBlock.__init__": [[23, 34], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inter_planes", "=", "out_planes", "*", "4", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "inter_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "inter_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "inter_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.densenet_cifar.BottleneckBlock.forward": [[34, 42], ["densenet_cifar.BottleneckBlock.conv1", "densenet_cifar.BottleneckBlock.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "densenet_cifar.BottleneckBlock.relu", "torch.dropout", "torch.dropout", "torch.dropout", "densenet_cifar.BottleneckBlock.relu", "torch.dropout", "torch.dropout", "torch.dropout", "densenet_cifar.BottleneckBlock.bn1", "densenet_cifar.BottleneckBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "inplace", "=", "False", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "self", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "inplace", "=", "False", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "out", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.densenet_cifar.TransitionBlock.__init__": [[44, 51], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "TransitionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.densenet_cifar.TransitionBlock.forward": [[51, 56], ["densenet_cifar.TransitionBlock.conv1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet_cifar.TransitionBlock.relu", "torch.dropout", "torch.dropout", "torch.dropout", "densenet_cifar.TransitionBlock.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "inplace", "=", "False", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.densenet_cifar.DenseBlock.__init__": [[58, 61], ["torch.Module.__init__", "densenet_cifar.DenseBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "growth_rate", ",", "block", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "growth_rate", ",", "nb_layers", ",", "dropRate", ")", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "growth_rate", ",", "nb_layers", ",", "dropRate", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.densenet_cifar.DenseBlock._make_layer": [[61, 66], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.CifarResNeXt.CifarResNeXt.block"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "growth_rate", ",", "nb_layers", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", "+", "i", "*", "growth_rate", ",", "growth_rate", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.densenet_cifar.DenseBlock.forward": [[66, 68], ["densenet_cifar.DenseBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.densenet_cifar.DenseNet_Cifar.__init__": [[70, 111], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet_cifar.DenseBlock", "int", "densenet_cifar.TransitionBlock", "int", "densenet_cifar.DenseBlock", "int", "densenet_cifar.TransitionBlock", "int", "densenet_cifar.DenseBlock", "int", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "densenet_cifar.DenseNet_Cifar.modules", "int", "math.floor", "int", "math.floor", "isinstance", "math.floor", "math.floor", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "growth_rate", "=", "12", ",", "\n", "reduction", "=", "0.5", ",", "bottleneck", "=", "True", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "DenseNet_Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", "=", "2", "*", "growth_rate", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "3", "\n", "if", "bottleneck", "==", "True", ":", "\n", "            ", "n", "=", "n", "/", "2", "\n", "block", "=", "BottleneckBlock", "\n", "", "else", ":", "\n", "            ", "block", "=", "BasicBlock", "\n", "# 1st conv before any dense block", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "DenseBlock", "(", "n", ",", "in_planes", ",", "growth_rate", ",", "block", ",", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "in_planes", "+", "n", "*", "growth_rate", ")", "\n", "self", ".", "trans1", "=", "TransitionBlock", "(", "in_planes", ",", "int", "(", "math", ".", "floor", "(", "in_planes", "*", "reduction", ")", ")", ",", "dropRate", "=", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "math", ".", "floor", "(", "in_planes", "*", "reduction", ")", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "DenseBlock", "(", "n", ",", "in_planes", ",", "growth_rate", ",", "block", ",", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "in_planes", "+", "n", "*", "growth_rate", ")", "\n", "self", ".", "trans2", "=", "TransitionBlock", "(", "in_planes", ",", "int", "(", "math", ".", "floor", "(", "in_planes", "*", "reduction", ")", ")", ",", "dropRate", "=", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "math", ".", "floor", "(", "in_planes", "*", "reduction", ")", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "DenseBlock", "(", "n", ",", "in_planes", ",", "growth_rate", ",", "block", ",", "dropRate", ")", "\n", "in_planes", "=", "int", "(", "in_planes", "+", "n", "*", "growth_rate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_planes", ",", "num_classes", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.densenet_cifar.DenseNet_Cifar.forward": [[112, 121], ["densenet_cifar.DenseNet_Cifar.conv1", "densenet_cifar.DenseNet_Cifar.trans1", "densenet_cifar.DenseNet_Cifar.trans2", "densenet_cifar.DenseNet_Cifar.block3", "densenet_cifar.DenseNet_Cifar.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "densenet_cifar.DenseNet_Cifar.fc", "densenet_cifar.DenseNet_Cifar.block1", "densenet_cifar.DenseNet_Cifar.block2", "densenet_cifar.DenseNet_Cifar.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "block1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "block2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "in_planes", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.CifarResNeXt.ResNeXtBottleneck.__init__": [[28, 55], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "int", "CifarResNeXt.ResNeXtBottleneck.shortcut.add_module", "CifarResNeXt.ResNeXtBottleneck.shortcut.add_module", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "cardinality", ",", "base_width", ",", "widen_factor", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            in_channels: input channel dimensionality\n            out_channels: output channel dimensionality\n            stride: conv stride. Replaces pooling layer.\n            cardinality: num of convolution groups.\n            base_width: base number of channels in each group.\n            widen_factor: factor to reduce the input dimensionality before convolution.\n        \"\"\"", "\n", "super", "(", "ResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width_ratio", "=", "out_channels", "/", "(", "widen_factor", "*", "64.", ")", "\n", "D", "=", "cardinality", "*", "int", "(", "base_width", "*", "width_ratio", ")", "\n", "self", ".", "conv_reduce", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "D", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_reduce", "=", "nn", ".", "BatchNorm2d", "(", "D", ")", "\n", "self", ".", "conv_conv", "=", "nn", ".", "Conv2d", "(", "D", ",", "D", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "D", ")", "\n", "self", ".", "conv_expand", "=", "nn", ".", "Conv2d", "(", "D", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_expand", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "shortcut", ".", "add_module", "(", "'shortcut_conv'", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", ")", "\n", "self", ".", "shortcut", ".", "add_module", "(", "'shortcut_bn'", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.CifarResNeXt.ResNeXtBottleneck.forward": [[56, 65], ["CifarResNeXt.ResNeXtBottleneck.conv_reduce.forward", "torch.relu", "torch.relu", "CifarResNeXt.ResNeXtBottleneck.conv_conv.forward", "torch.relu", "torch.relu", "CifarResNeXt.ResNeXtBottleneck.conv_expand.forward", "CifarResNeXt.ResNeXtBottleneck.bn_expand.forward", "CifarResNeXt.ResNeXtBottleneck.shortcut.forward", "torch.relu", "torch.relu", "CifarResNeXt.ResNeXtBottleneck.bn_reduce.forward", "CifarResNeXt.ResNeXtBottleneck.bn.forward"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.forward", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.forward", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.forward", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.forward", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.forward", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.forward", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bottleneck", "=", "self", ".", "conv_reduce", ".", "forward", "(", "x", ")", "\n", "bottleneck", "=", "F", ".", "relu", "(", "self", ".", "bn_reduce", ".", "forward", "(", "bottleneck", ")", ",", "inplace", "=", "True", ")", "\n", "bottleneck", "=", "self", ".", "conv_conv", ".", "forward", "(", "bottleneck", ")", "\n", "bottleneck", "=", "F", ".", "relu", "(", "self", ".", "bn", ".", "forward", "(", "bottleneck", ")", ",", "inplace", "=", "True", ")", "\n", "bottleneck", "=", "self", ".", "conv_expand", ".", "forward", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "bn_expand", ".", "forward", "(", "bottleneck", ")", "\n", "residual", "=", "self", ".", "shortcut", ".", "forward", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "residual", "+", "bottleneck", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.CifarResNeXt.CifarResNeXt.__init__": [[73, 115], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "CifarResNeXt.CifarResNeXt.block", "CifarResNeXt.CifarResNeXt.block", "CifarResNeXt.CifarResNeXt.block", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "CifarResNeXt.CifarResNeXt.state_dict", "key.split", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "key.split", "CifarResNeXt.CifarResNeXt.state_dict", "CifarResNeXt.CifarResNeXt.state_dict", "CifarResNeXt.CifarResNeXt.state_dict"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.CifarResNeXt.CifarResNeXt.block", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.CifarResNeXt.CifarResNeXt.block", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.CifarResNeXt.CifarResNeXt.block"], ["def", "__init__", "(", "self", ",", "cardinality", ",", "depth", ",", "nlabels", ",", "base_width", ",", "widen_factor", "=", "4", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            cardinality: number of convolution groups.\n            depth: number of layers.\n            nlabels: number of classes\n            base_width: base number of channels in each group.\n            widen_factor: factor to adjust the channel dimensionality\n        \"\"\"", "\n", "super", "(", "CifarResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block_depth", "=", "(", "self", ".", "depth", "-", "2", ")", "//", "9", "\n", "self", ".", "base_width", "=", "base_width", "\n", "self", ".", "widen_factor", "=", "widen_factor", "\n", "self", ".", "nlabels", "=", "nlabels", "\n", "self", ".", "output_size", "=", "64", "\n", "self", ".", "stages", "=", "[", "64", ",", "64", "*", "self", ".", "widen_factor", ",", "128", "*", "self", ".", "widen_factor", ",", "256", "*", "self", ".", "widen_factor", "]", "\n", "\n", "self", ".", "conv_1_3x3", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "stage_1", "=", "self", ".", "block", "(", "'stage_1'", ",", "self", ".", "stages", "[", "0", "]", ",", "self", ".", "stages", "[", "1", "]", ",", "1", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "block", "(", "'stage_2'", ",", "self", ".", "stages", "[", "1", "]", ",", "self", ".", "stages", "[", "2", "]", ",", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "block", "(", "'stage_3'", ",", "self", ".", "stages", "[", "2", "]", ",", "self", ".", "stages", "[", "3", "]", ",", "2", ")", "\n", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "1", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "stages", "[", "3", "]", ",", "nlabels", ")", "\n", "init", ".", "kaiming_normal", "(", "self", ".", "classifier", ".", "weight", ")", "\n", "\n", "for", "key", "in", "self", ".", "state_dict", "(", ")", ":", "\n", "            ", "if", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'weight'", ":", "\n", "                ", "if", "'conv'", "in", "key", ":", "\n", "                    ", "init", ".", "kaiming_normal", "(", "self", ".", "state_dict", "(", ")", "[", "key", "]", ",", "mode", "=", "'fan_out'", ")", "\n", "", "if", "'bn'", "in", "key", ":", "\n", "                    ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "1", "\n", "", "", "elif", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'bias'", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.CifarResNeXt.CifarResNeXt.block": [[116, 139], ["torch.Sequential", "torch.Sequential", "range", "torch.Sequential.add_module", "torch.Sequential.add_module", "CifarResNeXt.ResNeXtBottleneck", "CifarResNeXt.ResNeXtBottleneck"], "methods", ["None"], ["", "", "", "def", "block", "(", "self", ",", "name", ",", "in_channels", ",", "out_channels", ",", "pool_stride", "=", "2", ")", ":", "\n", "        ", "\"\"\" Stack n bottleneck modules where n is inferred from the depth of the network.\n\n        Args:\n            name: string name of the current block.\n            in_channels: number of input channels\n            out_channels: number of output channels\n            pool_stride: factor to reduce the spatial dimensionality in the first bottleneck of the block.\n\n        Returns: a Module consisting of n sequential bottlenecks.\n\n        \"\"\"", "\n", "block", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "bottleneck", "in", "range", "(", "self", ".", "block_depth", ")", ":", "\n", "            ", "name_", "=", "'%s_bottleneck_%d'", "%", "(", "name", ",", "bottleneck", ")", "\n", "if", "bottleneck", "==", "0", ":", "\n", "                ", "block", ".", "add_module", "(", "name_", ",", "ResNeXtBottleneck", "(", "in_channels", ",", "out_channels", ",", "pool_stride", ",", "self", ".", "cardinality", ",", "\n", "self", ".", "base_width", ",", "self", ".", "widen_factor", ")", ")", "\n", "", "else", ":", "\n", "                ", "block", ".", "add_module", "(", "name_", ",", "\n", "ResNeXtBottleneck", "(", "out_channels", ",", "out_channels", ",", "1", ",", "self", ".", "cardinality", ",", "self", ".", "base_width", ",", "\n", "self", ".", "widen_factor", ")", ")", "\n", "", "", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.CifarResNeXt.CifarResNeXt.forward": [[140, 155], ["CifarResNeXt.CifarResNeXt.conv_1_3x3.forward", "CifarResNeXt.CifarResNeXt.bn_1.forward", "CifarResNeXt.CifarResNeXt.relu", "CifarResNeXt.CifarResNeXt.stage_1.forward", "CifarResNeXt.CifarResNeXt.stage_2.forward", "CifarResNeXt.CifarResNeXt.stage_3.forward", "CifarResNeXt.CifarResNeXt.avg_pool", "CifarResNeXt.CifarResNeXt.view", "CifarResNeXt.CifarResNeXt.classifier"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.forward", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.forward", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.forward", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.forward", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_1_3x3", ".", "forward", "(", "x", ")", "\n", "# x = F.relu(self.bn_1.forward(x), inplace=True)", "\n", "x", "=", "self", ".", "bn_1", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "stage_1", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", ".", "forward", "(", "x", ")", "\n", "# x = F.avg_pool2d(x, 8, 1)", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "stages", "[", "3", "]", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.AlexNet.AlexNet.__init__": [[7, 42], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "AlexNet.AlexNet.modules", "torch.Conv2d", "torch.ReLU", "torch.MaxPool2d", "torch.Conv2d", "torch.ReLU", "torch.MaxPool2d", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.MaxPool2d", "torch.Dropout", "torch.Linear", "torch.ReLU", "torch.Dropout", "torch.Linear", "torch.ReLU", "torch.Linear", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.AlexNet.AlexNet.forward": [[43, 48], ["AlexNet.AlexNet.features", "AlexNet.AlexNet.view", "AlexNet.AlexNet.classifier", "AlexNet.AlexNet.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "256", "*", "6", "*", "6", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreBasicBlock.__init__": [[33, 55], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "PreResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "PreResNet.conv3x3"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.conv3x3", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.conv3x3"], ["def", "__init__", "(", "self", ",", "in_plane", ",", "out_plane", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "block_type", "=", "\"both_preact\"", ")", ":", "\n", "        ", "\"\"\"\n        init module and weights\n        :param in_plane: size of input plane\n        :param out_plane: size of output plane\n        :param stride: stride of convolutional layers, default 1\n        :param downsample: down sample type for expand dimension of input feature maps, default None\n        :param block_type: type of blocks, decide position of short cut, both-preact: short cut start from beginning\n        of the first segment, half-preact: short cut start from the position between the first segment and the second\n        one. default: both-preact\n        \"\"\"", "\n", "super", "(", "PreBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "block_type", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_plane", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_plane", ",", "out_plane", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_plane", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "out_plane", ",", "out_plane", ")", "\n", "self", ".", "block_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreBasicBlock.forward": [[56, 84], ["PreResNet.PreBasicBlock.bn1", "PreResNet.PreBasicBlock.relu", "PreResNet.PreBasicBlock.conv1", "PreResNet.PreBasicBlock.bn2", "PreResNet.PreBasicBlock.relu", "PreResNet.PreBasicBlock.conv2", "PreResNet.PreBasicBlock.downsample", "PreResNet.PreBasicBlock.bn1", "PreResNet.PreBasicBlock.relu", "PreResNet.PreBasicBlock.conv1", "PreResNet.PreBasicBlock.bn2", "PreResNet.PreBasicBlock.relu", "PreResNet.PreBasicBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward procedure of residual module\n        :param x: input feature maps\n        :return: output feature maps\n        \"\"\"", "\n", "if", "self", ".", "name", "==", "\"half_preact\"", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "", "elif", "self", ".", "name", "==", "\"both_preact\"", ":", "\n", "            ", "residual", "=", "x", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "\n", "", "out", "=", "x", "+", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreResNet.__init__": [[91, 116], ["torch.Module.__init__", "PreResNet.conv3x3", "PreResNet.PreResNet._make_layer", "PreResNet.PreResNet._make_layer", "PreResNet.PreResNet._make_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "PreResNet.linear", "PreResNet.PreResNet._init_weight"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.conv3x3", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreResNet._make_layer", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreResNet._make_layer", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreResNet._make_layer", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.linear", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreResNet._init_weight"], ["def", "__init__", "(", "self", ",", "depth", ",", "wide_factor", "=", "1", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        init model and weights\n        :param depth: depth of network\n        :param wide_factor: wide factor for deciding width of network, default is 1\n        :param num_classes: number of classes, related to labels. default 10\n        \"\"\"", "\n", "super", "(", "PreResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_plane", "=", "16", "*", "wide_factor", "\n", "self", ".", "depth", "=", "depth", "\n", "n", "=", "(", "depth", "-", "2", ")", "/", "6", "\n", "self", ".", "conv", "=", "conv3x3", "(", "3", ",", "16", "*", "wide_factor", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "PreBasicBlock", ",", "16", "*", "wide_factor", ",", "n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "PreBasicBlock", ",", "32", "*", "wide_factor", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "PreBasicBlock", ",", "64", "*", "wide_factor", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "64", "*", "wide_factor", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "linear", "(", "64", "*", "wide_factor", ",", "num_classes", ")", "\n", "\n", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreResNet._init_weight": [[117, 128], ["PreResNet.PreResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "# init layer parameters", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreResNet._make_layer": [[129, 149], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "PreResNet.conv1x1", "block", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.conv1x1", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.CifarResNeXt.CifarResNeXt.block", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.CifarResNeXt.CifarResNeXt.block"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "out_plane", ",", "n_blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        make residual blocks, including short cut and residual function\n        :param block: type of basic block to build network\n        :param out_plane: size of output plane\n        :param n_blocks: number of blocks on every segment\n        :param stride: stride of convolutional neural network, default 1\n        :return: residual blocks\n        \"\"\"", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "in_plane", "!=", "out_plane", ":", "\n", "            ", "downsample", "=", "conv1x1", "(", "self", ".", "in_plane", ",", "out_plane", ",", "stride", "=", "stride", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "in_plane", ",", "out_plane", ",", "stride", ",", "\n", "downsample", ",", "block_type", "=", "\"half_preact\"", ")", ")", "\n", "self", ".", "in_plane", "=", "out_plane", "\n", "for", "i", "in", "range", "(", "1", ",", "n_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_plane", ",", "out_plane", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.PreResNet.forward": [[150, 166], ["PreResNet.PreResNet.conv", "PreResNet.PreResNet.layer1", "PreResNet.PreResNet.layer2", "PreResNet.PreResNet.layer3", "PreResNet.PreResNet.bn", "PreResNet.PreResNet.relu", "PreResNet.PreResNet.avg_pool", "PreResNet.PreResNet.view", "PreResNet.PreResNet.fc", "PreResNet.PreResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward procedure of model\n        :param x: input feature maps\n        :return: output feature maps\n        \"\"\"", "\n", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "avg_pool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.conv1x1": [[9, 15], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_plane", ",", "out_plane", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    1x1 convolutional layer\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_plane", ",", "out_plane", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.conv3x3": [[17, 21], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.PreResNet.linear": [[23, 25], ["torch.Linear"], "function", ["None"], ["", "def", "linear", "(", "in_features", ",", "out_features", ")", ":", "\n", "    ", "return", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "# both-preact | half-preact", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DARTSNet.Cell.__init__": [[9, 26], ["torch.Module.__init__", "print", "operations.ReLUConvBN", "DARTSNet.Cell._compile", "operations.FactorizedReduce", "operations.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DARTSNet.Cell._compile"], ["    ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "        ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "C_prev_prev", ",", "C_prev", ",", "C", ")", "\n", "\n", "if", "reduction_prev", ":", "\n", "            ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "if", "reduction", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DARTSNet.Cell._compile": [[27, 39], ["len", "torch.ModuleList", "torch.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "        ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "            ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DARTSNet.Cell.forward": [[40, 60], ["DARTSNet.Cell.preprocess0", "DARTSNet.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "op1", "op2", "isinstance", "utils.drop_path", "isinstance", "utils.drop_path"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.drop_path", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "                ", "if", "not", "isinstance", "(", "op1", ",", "Identity", ")", ":", "\n", "                    ", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "                    ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ")", "\n", "", "", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DARTSNet.AuxiliaryHeadCIFAR.__init__": [[63, 77], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DARTSNet.AuxiliaryHeadCIFAR.forward": [[78, 82], ["DARTSNet.AuxiliaryHeadCIFAR.features", "DARTSNet.AuxiliaryHeadCIFAR.classifier", "DARTSNet.AuxiliaryHeadCIFAR.view", "DARTSNet.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DARTSNet.AuxiliaryHeadImageNet.__init__": [[85, 101], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "# NOTE: This batchnorm was omitted in my earlier implementation due to a typo.", "\n", "# Commenting it out for consistency with the experiments in the paper.", "\n", "# nn.BatchNorm2d(768),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DARTSNet.AuxiliaryHeadImageNet.forward": [[102, 106], ["DARTSNet.AuxiliaryHeadImageNet.features", "DARTSNet.AuxiliaryHeadImageNet.classifier", "DARTSNet.AuxiliaryHeadImageNet.view", "DARTSNet.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DARTSNet.DARTSNet.__init__": [[109, 141], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "DARTSNet.Cell", "DARTSNet.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ")", ":", "\n", "        ", "super", "(", "DARTSNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "self", ".", "drop_path_prob", "=", "False", "\n", "stem_multiplier", "=", "3", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DARTSNet.DARTSNet.forward": [[142, 153], ["DARTSNet.DARTSNet.stem", "enumerate", "DARTSNet.DARTSNet.global_pooling", "DARTSNet.DARTSNet.classifier", "DARTSNet.DARTSNet.view", "cell", "DARTSNet.DARTSNet.size", "DARTSNet.DARTSNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DARTSNet.NetworkImageNet.__init__": [[156, 196], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "DARTSNet.Cell", "DARTSNet.AuxiliaryHeadImageNet"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ")", ":", "\n", "        ", "super", "(", "NetworkImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "//", "2", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C", ",", "C", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "True", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadImageNet", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.DARTSNet.NetworkImageNet.forward": [[197, 209], ["DARTSNet.NetworkImageNet.stem0", "DARTSNet.NetworkImageNet.stem1", "enumerate", "DARTSNet.NetworkImageNet.global_pooling", "DARTSNet.NetworkImageNet.classifier", "DARTSNet.NetworkImageNet.view", "cell", "DARTSNet.NetworkImageNet.size", "DARTSNet.NetworkImageNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.AvgrageMeter.__init__": [[11, 13], ["utils.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.AvgrageMeter.reset"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.AvgrageMeter.reset": [[14, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.AvgrageMeter.update": [[19, 23], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.Cutout.__init__": [[41, 43], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.Cutout.__call__": [[44, 60], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.accuracy": [[25, 38], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "  ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "    ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils._data_transforms_cifar10": [[62, 80], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "_data_transforms_cifar10", "(", "args", ")", ":", "\n", "  ", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "if", "args", ".", "cutout", ":", "\n", "    ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "args", ".", "cutout_length", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.count_parameters_in_MB": [[82, 84], ["numpy.sum", "numpy.prod", "v.size", "model.named_parameters"], "function", ["None"], ["", "def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "  ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "name", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "if", "\"auxiliary\"", "not", "in", "name", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.save_checkpoint": [[86, 92], ["os.path.join", "torch.save", "os.path.join", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.save"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "save", ")", ":", "\n", "  ", "filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "    ", "best_filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'model_best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "best_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.save": [[94, 96], ["torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.save"], ["", "", "def", "save", "(", "model", ",", "model_path", ")", ":", "\n", "  ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.load": [[98, 100], ["model.load_state_dict", "torch.load"], "function", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.load"], ["", "def", "load", "(", "model", ",", "model_path", ")", ":", "\n", "  ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.drop_path": [[102, 109], ["torch.autograd.Variable", "x.div_", "x.mul_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor", "x.size"], "function", ["None"], ["", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "  ", "if", "drop_prob", ">", "0.", ":", "\n", "    ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.utils.create_exp_dir": [[111, 121], ["print", "os.path.exists", "os.mkdir", "os.mkdir", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.basename"], "function", ["None"], ["", "def", "create_exp_dir", "(", "path", ",", "scripts_to_save", "=", "None", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "    ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ")", ")", "\n", "for", "script", "in", "scripts_to_save", ":", "\n", "      ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__": [[16, 40], ["torch.Module.__init__", "VGG.VGG.make_layers", "torch.Sequential", "torch.Sequential", "VGG.VGG._initialize_weights", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.__init__", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.make_layers", "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "16", ",", "bn_flag", "=", "False", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "None", "\n", "if", "depth", "==", "11", ":", "\n", "            ", "self", ".", "cfg", "=", "cfg", "[", "'A'", "]", "\n", "", "elif", "depth", "==", "13", ":", "\n", "            ", "self", ".", "cfg", "=", "cfg", "[", "'B'", "]", "\n", "", "elif", "depth", "==", "16", ":", "\n", "            ", "self", ".", "cfg", "=", "cfg", "[", "'D'", "]", "\n", "", "elif", "depth", "==", "19", ":", "\n", "            ", "self", ".", "cfg", "=", "cfg", "[", "'E'", "]", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"invalid depth\"", "\n", "", "self", ".", "features", "=", "self", ".", "make_layers", "(", "self", ".", "cfg", ",", "bn_flag", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "7", "*", "7", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG._initialize_weights": [[41, 55], ["VGG.VGG.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.make_layers": [[56, 70], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "", "def", "make_layers", "(", "self", ",", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "            ", "if", "v", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                    ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                    ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tanmingkui_multiwaybp.official.VGG.VGG.forward": [[71, 76], ["VGG.VGG.features", "VGG.VGG.view", "VGG.VGG.classifier", "VGG.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]]}