{"home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.flow_io.flow_read": [[26, 42], ["open", "numpy.fromfile().reshape", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "flow_read", "(", "filename", ")", ":", "\n", "    ", "\"\"\" Read optical flow from file, return (U,V) tuple. \n    \n    Original code by Deqing Sun, adapted from Daniel Scharstein.\n    \"\"\"", "\n", "f", "=", "open", "(", "filename", ",", "'rb'", ")", "\n", "check", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "assert", "check", "==", "TAG_FLOAT", ",", "' flow_read:: Wrong tag in flow file (should be: {0}, is: {1}). Big-endian machine? '", ".", "format", "(", "TAG_FLOAT", ",", "check", ")", "\n", "width", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "int32", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "height", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "int32", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "size", "=", "width", "*", "height", "\n", "assert", "width", ">", "0", "and", "height", ">", "0", "and", "size", ">", "1", "and", "size", "<", "100000000", ",", "' flow_read:: Wrong input size (width = {0}, height = {1}).'", ".", "format", "(", "width", ",", "height", ")", "\n", "tmp", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "(", "height", ",", "width", "*", "2", ")", ")", "\n", "u", "=", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "]", "\n", "v", "=", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "+", "1", "]", "\n", "return", "u", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.flow_io.flow_write": [[43, 74], ["open", "open.write", "numpy.array().astype().tofile", "numpy.array().astype().tofile", "numpy.zeros", "np.zeros.astype().tofile", "open.close", "numpy.array().astype", "numpy.array().astype", "np.zeros.astype", "numpy.array", "numpy.array", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.Writer.write"], ["", "def", "flow_write", "(", "filename", ",", "uv", ",", "v", "=", "None", ")", ":", "\n", "    ", "\"\"\" Write optical flow to file.\n    \n    If v is None, uv is assumed to contain both u and v channels,\n    stacked in depth.\n\n    Original code by Deqing Sun, adapted from Daniel Scharstein.\n    \"\"\"", "\n", "nBands", "=", "2", "\n", "\n", "if", "v", "is", "None", ":", "\n", "        ", "assert", "(", "uv", ".", "ndim", "==", "3", ")", "\n", "assert", "(", "uv", ".", "shape", "[", "2", "]", "==", "2", ")", "\n", "u", "=", "uv", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "uv", "[", ":", ",", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "u", "=", "uv", "\n", "\n", "", "assert", "(", "u", ".", "shape", "==", "v", ".", "shape", ")", "\n", "height", ",", "width", "=", "u", ".", "shape", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "# write the header", "\n", "f", ".", "write", "(", "TAG_CHAR", ")", "\n", "np", ".", "array", "(", "width", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "np", ".", "array", "(", "height", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "# arrange into matrix form", "\n", "tmp", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", "*", "nBands", ")", ")", "\n", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "]", "=", "u", "\n", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "+", "1", "]", "=", "v", "\n", "tmp", ".", "astype", "(", "np", ".", "float32", ")", ".", "tofile", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo.SequenceFolder.__init__": [[55, 75], ["path.Path", "path.Path", "numpy.genfromtxt().astype().reshape", "sorted", "sorted", "sorted", "sorted", "range", "os.path.join", "path.Path", "path.Path", "path.Path.files", "flo_dir[].files", "flo_dir[].files", "path.Path.files", "sequence_set.append", "path.Path.basename", "os.path.join", "os.path.join", "numpy.genfromtxt().astype", "len", "path.Path.dirname", "path.Path.basename", "path.Path.basename", "path.Path.dirname", "path.Path.dirname", "numpy.genfromtxt"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "transform", ",", "max_num_instances", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "max_num_instances", "=", "max_num_instances", "\n", "\n", "img_dir", "=", "Path", "(", "data_dir", ")", "\n", "seg_dir", "=", "Path", "(", "os", ".", "path", ".", "join", "(", "img_dir", ".", "dirname", "(", ")", ".", "parent", ",", "'segmentation'", ",", "img_dir", ".", "basename", "(", ")", ")", ")", "\n", "flo_dir", "=", "[", "Path", "(", "os", ".", "path", ".", "join", "(", "img_dir", ".", "dirname", "(", ")", ".", "parent", ",", "'flow_f'", ",", "img_dir", ".", "basename", "(", ")", ")", ")", ",", "Path", "(", "os", ".", "path", ".", "join", "(", "img_dir", ".", "dirname", "(", ")", ".", "parent", ",", "'flow_b'", ",", "img_dir", ".", "basename", "(", ")", ")", ")", "]", "\n", "\n", "intrinsics", "=", "np", ".", "genfromtxt", "(", "img_dir", "/", "'cam.txt'", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "(", "3", ",", "3", ")", ")", "\n", "imgs", "=", "sorted", "(", "img_dir", ".", "files", "(", "'*.jpg'", ")", ")", "\n", "flof", "=", "sorted", "(", "flo_dir", "[", "0", "]", ".", "files", "(", "'*.flo'", ")", ")", "# 00: src, 01: tgt", "\n", "flob", "=", "sorted", "(", "flo_dir", "[", "1", "]", ".", "files", "(", "'*.flo'", ")", ")", "# 00: tgt, 01: src", "\n", "segm", "=", "sorted", "(", "seg_dir", ".", "files", "(", "'*.npy'", ")", ")", "\n", "\n", "sequence_set", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "imgs", ")", "-", "1", ")", ":", "\n", "            ", "sample", "=", "{", "'intrinsics'", ":", "intrinsics", ",", "'img0'", ":", "imgs", "[", "i", "]", ",", "'img1'", ":", "imgs", "[", "i", "+", "1", "]", ",", "\n", "'flof'", ":", "flof", "[", "i", "]", ",", "'flob'", ":", "flob", "[", "i", "]", ",", "'seg0'", ":", "segm", "[", "i", "]", ",", "'seg1'", ":", "segm", "[", "i", "+", "1", "]", "}", "# will be processed when getitem() is called", "\n", "sequence_set", ".", "append", "(", "sample", ")", "\n", "", "self", ".", "samples", "=", "sequence_set", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo.SequenceFolder.__getitem__": [[76, 137], ["demo.load_as_float", "demo.load_as_float", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "seg0[].unsqueeze", "seg1[].unsqueeze", "demo.find_noc_masks", "rigid_warp.flow_warp", "rigid_warp.flow_warp", "demo.inst_iou", "demo.inst_iou", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "range", "insts0.append", "insts1.append", "fwd_flows.append", "bwd_flows.append", "demo.SequenceFolder.transform", "demo.recursive_check_nonzero_inst", "demo.load_seg_as_float", "demo.load_seg_as_float", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "flof[].detach().cpu().numpy().transpose", "flob[].detach().cpu().numpy().transpose", "numpy.copy", "numpy.linalg.inv", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "demo.load_flo_as_float", "demo.load_flo_as_float", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "flof[].detach().cpu().numpy", "flob[].detach().cpu().numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "flof[].detach().cpu", "flob[].detach().cpu", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "seg0[].unsqueeze.sum().argsort", "seg1[].unsqueeze.sum().argsort", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "flof[].detach", "flob[].detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "seg0[].unsqueeze.sum", "seg1[].unsqueeze.sum"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.validation_folders.load_as_float", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.validation_folders.load_as_float", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.find_noc_masks", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.inst_iou", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.inst_iou", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.recursive_check_nonzero_inst", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.load_seg_as_float", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.load_seg_as_float", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.load_flo_as_float", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.load_flo_as_float"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "self", ".", "samples", "[", "index", "]", "\n", "img0", "=", "load_as_float", "(", "sample", "[", "'img0'", "]", ")", "\n", "img1", "=", "load_as_float", "(", "sample", "[", "'img1'", "]", ")", "\n", "\n", "flof", "=", "torch", ".", "from_numpy", "(", "load_flo_as_float", "(", "sample", "[", "'flof'", "]", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "flob", "=", "torch", ".", "from_numpy", "(", "load_flo_as_float", "(", "sample", "[", "'flob'", "]", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "seg0", "=", "torch", ".", "from_numpy", "(", "load_seg_as_float", "(", "sample", "[", "'seg0'", "]", ")", ")", "\n", "seg1", "=", "torch", ".", "from_numpy", "(", "load_seg_as_float", "(", "sample", "[", "'seg1'", "]", ")", ")", "\n", "\n", "seg0", "=", "seg0", "[", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "1", ")", ".", "long", "(", ")", ",", "seg0", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ")", ")", ".", "argsort", "(", "descending", "=", "True", ")", "[", ":", "-", "1", "]", "]", ",", "dim", "=", "0", ")", "]", ".", "unsqueeze", "(", "0", ")", "\n", "seg1", "=", "seg1", "[", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "1", ")", ".", "long", "(", ")", ",", "seg1", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ")", ")", ".", "argsort", "(", "descending", "=", "True", ")", "[", ":", "-", "1", "]", "]", ",", "dim", "=", "0", ")", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "insts0", ",", "insts1", "=", "[", "]", ",", "[", "]", "\n", "fwd_flows", ",", "bwd_flows", "=", "[", "]", ",", "[", "]", "\n", "\n", "noc_f", ",", "noc_b", "=", "find_noc_masks", "(", "flof", ",", "flob", ")", "\n", "seg0w", ",", "_", "=", "flow_warp", "(", "seg1", ",", "flof", ")", "\n", "seg1w", ",", "_", "=", "flow_warp", "(", "seg0", ",", "flob", ")", "\n", "\n", "n_inst0", "=", "seg0", ".", "shape", "[", "1", "]", "\n", "n_inst1", "=", "seg1", ".", "shape", "[", "1", "]", "\n", "\n", "### Warp seg0 to seg1. Find IoU between seg1w and seg1. Find the maximum corresponded instance in seg1.", "\n", "iou_01", ",", "ch_01", "=", "inst_iou", "(", "seg1w", ",", "seg1", ",", "valid_mask", "=", "noc_b", ")", "\n", "iou_10", ",", "ch_10", "=", "inst_iou", "(", "seg0w", ",", "seg0", ",", "valid_mask", "=", "noc_f", ")", "\n", "\n", "seg0_re", "=", "torch", ".", "zeros", "(", "self", ".", "max_num_instances", "+", "1", ",", "seg0", ".", "shape", "[", "2", "]", ",", "seg0", ".", "shape", "[", "3", "]", ")", "\n", "seg1_re", "=", "torch", ".", "zeros", "(", "self", ".", "max_num_instances", "+", "1", ",", "seg1", ".", "shape", "[", "2", "]", ",", "seg1", ".", "shape", "[", "3", "]", ")", "\n", "non_overlap_0", "=", "torch", ".", "ones", "(", "[", "seg0", ".", "shape", "[", "2", "]", ",", "seg0", ".", "shape", "[", "3", "]", "]", ")", "\n", "non_overlap_1", "=", "torch", ".", "ones", "(", "[", "seg0", ".", "shape", "[", "2", "]", ",", "seg0", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "num_match", "=", "0", "\n", "for", "ch", "in", "range", "(", "n_inst0", ")", ":", "\n", "            ", "condition1", "=", "(", "ch", "==", "ch_10", "[", "ch_01", "[", "ch", "]", "]", ")", "and", "(", "iou_01", "[", "ch", "]", ">", "0.5", ")", "and", "(", "iou_10", "[", "ch_01", "[", "ch", "]", "]", ">", "0.5", ")", "\n", "condition2", "=", "(", "(", "seg0", "[", "0", ",", "ch", "]", "*", "non_overlap_0", ")", ".", "max", "(", ")", ">", "0", ")", "and", "(", "(", "seg1", "[", "0", ",", "ch_01", "[", "ch", "]", "]", "*", "non_overlap_1", ")", ".", "max", "(", ")", ">", "0", ")", "\n", "if", "condition1", "and", "condition2", "and", "(", "num_match", "<", "self", ".", "max_num_instances", ")", ":", "# matching success!", "\n", "                ", "num_match", "+=", "1", "\n", "seg0_re", "[", "num_match", "]", "=", "seg0", "[", "0", ",", "ch", "]", "*", "non_overlap_0", "\n", "seg1_re", "[", "num_match", "]", "=", "seg1", "[", "0", ",", "ch_01", "[", "ch", "]", "]", "*", "non_overlap_1", "\n", "non_overlap_0", "=", "non_overlap_0", "*", "(", "1", "-", "seg0_re", "[", "num_match", "]", ")", "\n", "non_overlap_1", "=", "non_overlap_1", "*", "(", "1", "-", "seg1_re", "[", "num_match", "]", ")", "\n", "", "", "seg0_re", "[", "0", "]", "=", "num_match", "\n", "seg1_re", "[", "0", "]", "=", "num_match", "\n", "\n", "insts0", ".", "append", "(", "seg0_re", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "insts1", ".", "append", "(", "seg1_re", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "fwd_flows", ".", "append", "(", "flof", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "bwd_flows", ".", "append", "(", "flob", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "imgs", ",", "segs", ",", "intrinsics", "=", "self", ".", "transform", "(", "[", "img0", ",", "img1", "]", ",", "insts0", "+", "insts1", ",", "np", ".", "copy", "(", "sample", "[", "'intrinsics'", "]", ")", ")", "\n", "\n", "img0", "=", "imgs", "[", "0", "]", "\n", "img1", "=", "imgs", "[", "1", "]", "\n", "seg0", "=", "segs", "[", "0", "]", "\n", "seg1", "=", "segs", "[", "1", "]", "\n", "\n", "seg0", ",", "seg1", "=", "recursive_check_nonzero_inst", "(", "seg0", ",", "seg1", ")", "\n", "\n", "return", "img0", ",", "img1", ",", "seg0", ",", "seg1", ",", "intrinsics", ",", "np", ".", "linalg", ".", "inv", "(", "intrinsics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo.SequenceFolder.__len__": [[138, 140], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo.main": [[143, 201], ["print", "parser.parse_args", "print", "custom_transforms.Normalize", "custom_transforms.Compose", "demo.SequenceFolder", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "models.DispResNet().to", "models.EgoPoseNet().to", "models.ObjPoseNet().to", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "demo.demo_visualize", "datetime.datetime.now().strftime", "print", "parser.parse_args.save_path.makedirs_p", "print", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.init_weights", "print", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.init_weights", "print", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.init_weights", "custom_transforms.ArrayToTensor", "len", "models.DispResNet", "models.EgoPoseNet", "models.ObjPoseNet", "datetime.datetime.now", "path.Path"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo.demo_visualize", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.DispResNet.init_weights", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.DispResNet.init_weights", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.DispResNet.init_weights"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'=> PyTorch version: '", "+", "torch", ".", "__version__", "+", "' || CUDA_VISIBLE_DEVICES: '", "+", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", ")", "\n", "\n", "global", "device", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "args", ".", "save_fig", ":", "\n", "        ", "timestamp", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m-%d-%H:%M\"", ")", "\n", "args", ".", "save_path", "=", "'outputs'", "/", "Path", "(", "args", ".", "name", ")", "/", "timestamp", "\n", "print", "(", "'=> will save everything to {}'", ".", "format", "(", "args", ".", "save_path", ")", ")", "\n", "args", ".", "save_path", ".", "makedirs_p", "(", ")", "\n", "\n", "", "print", "(", "\"=> fetching scenes in '{}'\"", ".", "format", "(", "args", ".", "data", ")", ")", "\n", "normalize", "=", "custom_transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "demo_transform", "=", "custom_transforms", ".", "Compose", "(", "[", "\n", "custom_transforms", ".", "ArrayToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "demo_set", "=", "SequenceFolder", "(", "\n", "args", ".", "data", ",", "\n", "transform", "=", "demo_transform", ",", "\n", "max_num_instances", "=", "args", ".", "mni", "\n", ")", "\n", "print", "(", "'=> {} samples found'", ".", "format", "(", "len", "(", "demo_set", ")", ")", ")", "\n", "demo_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "demo_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# create model", "\n", "print", "(", "\"=> creating model\"", ")", "\n", "disp_net", "=", "models", ".", "DispResNet", "(", ")", ".", "to", "(", "device", ")", "\n", "ego_pose_net", "=", "models", ".", "EgoPoseNet", "(", ")", ".", "to", "(", "device", ")", "\n", "obj_pose_net", "=", "models", ".", "ObjPoseNet", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "pretrained_ego_pose", ":", "\n", "        ", "print", "(", "\"=> using pre-trained weights for EgoPoseNet\"", ")", "\n", "weights", "=", "torch", ".", "load", "(", "args", ".", "pretrained_ego_pose", ")", "\n", "ego_pose_net", ".", "load_state_dict", "(", "weights", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "ego_pose_net", ".", "init_weights", "(", ")", "\n", "\n", "", "if", "args", ".", "pretrained_obj_pose", ":", "\n", "        ", "print", "(", "\"=> using pre-trained weights for ObjPoseNet\"", ")", "\n", "weights", "=", "torch", ".", "load", "(", "args", ".", "pretrained_obj_pose", ")", "\n", "obj_pose_net", ".", "load_state_dict", "(", "weights", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "obj_pose_net", ".", "init_weights", "(", ")", "\n", "\n", "", "if", "args", ".", "pretrained_disp", ":", "\n", "        ", "print", "(", "\"=> using pre-trained weights for DispResNet\"", ")", "\n", "weights", "=", "torch", ".", "load", "(", "args", ".", "pretrained_disp", ")", "\n", "disp_net", ".", "load_state_dict", "(", "weights", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "disp_net", ".", "init_weights", "(", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "disp_net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "disp_net", ")", "\n", "ego_pose_net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "ego_pose_net", ")", "\n", "obj_pose_net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "obj_pose_net", ")", "\n", "\n", "demo_visualize", "(", "args", ",", "demo_loader", ",", "disp_net", ",", "ego_pose_net", ",", "obj_pose_net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo.demo_visualize": [[204, 616], ["torch.no_grad", "torch.no_grad", "torch.set_printoptions", "torch.set_printoptions", "numpy.set_printoptions", "disp_net.eval().to", "ego_pose_net.eval().to", "obj_pose_net.eval().to", "numpy.identity", "enumerate", "ref_img.to.to", "tgt_img.to.to", "ref_seg.to.to", "tgt_seg.to.to", "intrinsics.to.to", "intrinsics_inv.to.to", "int", "tgt_seg.to.clone", "list", "ego_pose_net", "ego_pose_net", "rigid_warp.pose_vec2mat().squeeze().cpu().detach().numpy", "numpy.concatenate", "ego_global_mats.append", "demo_utils.compute_batch_bg_warping", "ref_seg[].unsqueeze", "tgt_seg[].unsqueeze", "demo_utils.compute_reverse_warp_ego", "demo_utils.compute_reverse_warp_ego", "obj_pose_net", "obj_pose_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rigid_warp.pose_vec2mat().cpu().detach().numpy", "numpy.concatenate", "demo_utils.compute_batch_obj_warping", "demo_utils.compute_obj_translation", "demo_utils.compute_reverse_warp_obj", "rigid_warp.inverse_warp2", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "dict", "dict", "dict", "dict", "dict", "dict", "rigid_warp.pixel2cam", "rigid_warp.pixel2cam", "rigid_warp.pixel2cam", "range", "range", "zip", "torch.stack().unsqueeze().unsqueeze", "torch.stack().unsqueeze().unsqueeze", "rigid_warp.cam2homo", "r2t_obj_homo.reshape().detach().cpu().numpy", "rigid_warp.cam2homo", "rigid_warp.cam2homo", "r2t_obj_homo_tr.reshape().detach().cpu().numpy", "r2t_obj_homo_tr_gt.reshape().detach().cpu().numpy", "[].detach().cpu().numpy().transpose", "[].detach().cpu().numpy().transpose", "[].detach().cpu().numpy().transpose", "[].repeat().detach().cpu().numpy().transpose", "[].detach().cpu", "numpy.abs().mean", "rigid_warp.pixel2cam.sum", "rigid_warp.pixel2cam.sum", "rigid_warp.pixel2cam.sum", "int", "int", "int", "matplotlib.pyplot.close", "matplotlib.pyplot.figure", "matplotlib.gridspec.GridSpec", "plt.figure.add_subplot", "matplotlib.pyplot.imshow", "matplotlib.pyplot.text", "matplotlib.pyplot.text", "matplotlib.pyplot.text", "matplotlib.pyplot.xlim", "matplotlib.pyplot.ylim", "plt.figure.add_subplot", "matplotlib.pyplot.imshow", "matplotlib.pyplot.text", "matplotlib.pyplot.xlim", "matplotlib.pyplot.ylim", "plt.figure.add_subplot", "matplotlib.pyplot.imshow", "matplotlib.pyplot.text", "matplotlib.pyplot.xlim", "matplotlib.pyplot.ylim", "plt.figure.add_subplot", "matplotlib.pyplot.imshow", "matplotlib.pyplot.text", "matplotlib.pyplot.xlim", "matplotlib.pyplot.ylim", "plt.figure.add_subplot", "matplotlib.pyplot.imshow", "matplotlib.pyplot.text", "matplotlib.pyplot.text", "matplotlib.pyplot.xlim", "matplotlib.pyplot.ylim", "plt.figure.add_subplot", "matplotlib.pyplot.imshow", "matplotlib.pyplot.text", "matplotlib.pyplot.xlim", "matplotlib.pyplot.ylim", "plt.figure.add_subplot", "matplotlib.pyplot.imshow", "matplotlib.pyplot.text", "matplotlib.pyplot.xlim", "matplotlib.pyplot.ylim", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_zlabel", "fig.add_subplot.axes.yaxis.set_ticklabels", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "fig.add_subplot.text", "fig.add_subplot.view_init", "plt.figure.add_subplot", "fig.add_subplot.scatter", "range", "range", "range", "fig.add_subplot.text", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_zlabel", "fig.add_subplot.axes.yaxis.set_ticklabels", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "plt.figure.add_subplot", "fig.add_subplot.axis", "fig.add_subplot.text", "matplotlib.pyplot.tight_layout", "disp_net.eval", "ego_pose_net.eval", "obj_pose_net.eval", "len", "objIDs.append", "demo.inst_iou", "list", "enumerate", "objIDs.append", "itertools.chain.from_iterable", "disp_net", "disp_net", "ref_img.to.repeat", "ref_seg[].unsqueeze", "tgt_img.to.repeat", "tgt_seg[].unsqueeze", "ref_depth.repeat", "ref_seg[].unsqueeze", "tgt_depth.repeat", "tgt_seg[].unsqueeze", "np.identity.reshape().repeat", "intrinsics.to.repeat", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "intrinsics.to.inverse().repeat", "intrinsics.to.inverse().repeat", "intrinsics.to.inverse().repeat", "r2t_obj_3d_locs.append", "rtt_obj_3d_locs.append", "tgt_obj_3d_locs.append", "objOs.append", "len", "objHs_pred.append", "len", "objHs_comp.append", "objHs.append", "intrinsics.to.repeat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.stack().unsqueeze().unsqueeze.reshape", "torch.stack().unsqueeze().unsqueeze.reshape", "r2t_obj_3d_loc_tr.unsqueeze().unsqueeze", "intrinsics.to.repeat", "torch.zeros().cuda", "torch.zeros().cuda", "r2t_obj_3d_loc_tr_gt.unsqueeze().unsqueeze", "intrinsics.to.repeat", "torch.zeros().cuda", "torch.zeros().cuda", "tgt_bg_mask[].repeat().detach().cpu().numpy().transpose", "ref_bg_mask[].repeat().detach().cpu().numpy().transpose", "numpy.zeros", "numpy.zeros", "[].detach().cpu", "[].detach().cpu", "[].detach().cpu.unsqueeze().repeat().numpy", "numpy.abs", "numpy.abs", "numpy.abs", "r2t_filt.sum", "rtt_filt.sum", "tgt_filt.sum", "numpy.expand_dims().repeat", "numpy.expand_dims", "matplotlib.pyplot.grid", "matplotlib.pyplot.grid", "matplotlib.pyplot.grid", "matplotlib.pyplot.grid", "matplotlib.pyplot.grid", "matplotlib.pyplot.grid", "matplotlib.pyplot.text", "matplotlib.pyplot.text", "matplotlib.pyplot.text", "matplotlib.pyplot.text", "matplotlib.pyplot.text", "matplotlib.pyplot.text", "matplotlib.pyplot.text", "matplotlib.pyplot.text", "matplotlib.pyplot.arrow", "matplotlib.pyplot.arrow", "matplotlib.pyplot.text", "matplotlib.pyplot.arrow", "matplotlib.pyplot.arrow", "matplotlib.pyplot.text", "matplotlib.pyplot.arrow", "matplotlib.pyplot.arrow", "matplotlib.pyplot.text", "matplotlib.pyplot.arrow", "matplotlib.pyplot.arrow", "matplotlib.pyplot.text", "matplotlib.pyplot.grid", "matplotlib.pyplot.grid", "fig.add_subplot.text", "fig.add_subplot.text", "fig.add_subplot.text", "fig.add_subplot.text", "fig.add_subplot.text", "fig.add_subplot.text", "numpy.dot", "drawRobotics.drawVector", "len", "len", "numpy.dot", "fig.add_subplot.view_init", "print", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "matplotlib.pyplot.ion", "matplotlib.pyplot.show", "print", "pdb.set_trace", "matplotlib.pyplot.close", "numpy.arange().tolist", "ref_seg.to.cpu", "tgt_seg.clone.cpu", "torch.ones().type_as().cpu", "torch.ones().type_as().cpu", "rigid_warp.pose_vec2mat().squeeze().cpu().detach", "numpy.array().reshape", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "rigid_warp.pose_vec2mat().cpu().detach", "numpy.array().reshape().repeat", "torch.cat.size", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].squeeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "r2t_obj_homo.reshape().detach().cpu", "r2t_obj_homo_tr.reshape().detach().cpu", "r2t_obj_homo_tr_gt.reshape().detach().cpu", "tgt_depth.detach().cpu", "ref_depth.detach().cpu", "[].detach().cpu().numpy", "[].detach().cpu().numpy", "[].detach().cpu().numpy", "[].repeat().detach().cpu().numpy", "[].detach", "numpy.abs", "scipy.stats.zscore", "scipy.stats.zscore", "scipy.stats.zscore", "[].detach().cpu().numpy", "range", "[].detach().cpu().numpy", "range", "[].detach().cpu().numpy", "range", "[].detach().cpu().numpy", "range", "[].detach().cpu().numpy", "range", "[].detach().cpu().numpy", "range", "[].detach().cpu().numpy", "range", "[].detach().cpu().numpy", "range", "[].detach().cpu().numpy", "range", "numpy.stack().transpose", "matplotlib.pyplot.xticks", "matplotlib.pyplot.yticks", "matplotlib.pyplot.xticks", "matplotlib.pyplot.yticks", "matplotlib.pyplot.xticks", "matplotlib.pyplot.yticks", "matplotlib.pyplot.xticks", "matplotlib.pyplot.yticks", "matplotlib.pyplot.xticks", "matplotlib.pyplot.yticks", "float", "ego_pose[].detach().cpu().numpy().round", "matplotlib.pyplot.xticks", "matplotlib.pyplot.yticks", "matplotlib.pyplot.xticks", "matplotlib.pyplot.yticks", "C_r2t.transpose", "C_rtt.transpose", "C_tgt.transpose", "mpl_toolkits.mplot3d.axes3d.Axes3D.get_proj", "numpy.diag", "C_global_tgt.transpose", "len", "drawRobotics.drawPointWithAxis", "fig.add_subplot.text", "drawRobotics.drawPointWithAxis", "mpl_toolkits.mplot3d.axes3d.Axes3D.get_proj", "numpy.diag", "fig.add_subplot.view_init", "fig.add_subplot.view_init", "fig.add_subplot.view_init", "fig.add_subplot.view_init", "fig.add_subplot.view_init", "fig.add_subplot.view_init", "set", "set", "newID.append", "torch.cat.size", "np.identity.reshape", "intrinsics.to.inverse", "intrinsics.to.inverse", "intrinsics.to.inverse", "[].squeeze", "[].squeeze", "torch.zeros", "torch.zeros", "r2t_obj_3d_loc_tr.unsqueeze", "torch.zeros", "torch.zeros", "r2t_obj_3d_loc_tr_gt.unsqueeze", "torch.zeros", "torch.zeros", "tgt_bg_mask[].repeat().detach().cpu().numpy", "ref_bg_mask[].repeat().detach().cpu().numpy", "[].detach", "[].detach", "[].detach().cpu.unsqueeze().repeat", "[].detach().cpu().numpy", "[].detach().cpu().numpy", "[].detach().cpu().numpy", "numpy.expand_dims", "ego_pose[].pow().sum().sqrt", "float", "[].detach().cpu().numpy().round", "float", "[].detach().cpu().numpy().round", "float", "[].detach().cpu().numpy().round", "float", "[].detach().cpu().numpy().round", "float", "[].detach().cpu().numpy().round", "float", "[].detach().cpu().numpy().round", "float", "[].detach().cpu().numpy().round", "float", "[].detach().cpu().numpy().round", "float", "float", "float", "float", "r2t_obj_3d_locs[].detach().cpu().numpy().round", "rtt_obj_3d_locs[].detach().cpu().numpy().round", "tgt_obj_3d_locs[].detach().cpu().numpy().round", "r2t_obj_3d_locs[].detach().cpu().numpy().round", "rtt_obj_3d_locs[].detach().cpu().numpy().round", "tgt_obj_3d_locs[].detach().cpu().numpy().round", "len", "len", "len", "drawRobotics.drawVector", "fig.add_subplot.text", "drawRobotics.drawVector", "ref_seg[].sum", "tgt_seg[].sum", "numpy.arange", "torch.ones().type_as", "torch.ones().type_as", "numpy.arange", "newID.append", "rigid_warp.pose_vec2mat().squeeze().cpu", "numpy.array", "rigid_warp.pose_vec2mat().cpu", "numpy.array().reshape", "coords[].mean().unsqueeze", "coords[].mean().unsqueeze", "coords[].mean().unsqueeze", "[].detach().cpu().numpy", "torch.stack", "torch.stack", "r2t_obj_homo.reshape().detach", "r2t_obj_homo_tr.reshape().detach", "r2t_obj_homo_tr_gt.reshape().detach", "tgt_depth.detach", "ref_depth.detach", "[].detach().cpu", "[].detach().cpu", "[].detach().cpu", "[].repeat().detach().cpu", "[].detach().cpu", "[].detach().cpu", "[].detach().cpu", "[].detach().cpu().numpy", "[].detach().cpu", "[].detach().cpu", "[].detach().cpu", "[].detach().cpu().numpy", "[].detach().cpu", "[].detach().cpu", "[].detach().cpu", "[].detach().cpu().numpy", "numpy.stack", "ego_pose[].detach().cpu().numpy", "obj_pose[].pow().sum().sqrt", "obj_pose[].pow().sum().sqrt", "obj_pose[].pow().sum().sqrt", "obj_pose[].pow().sum().sqrt", "obj_pose[].pow().sum().sqrt", "obj_pose[].pow().sum().sqrt", "obj_pose[].pow().sum().sqrt", "obj_pose[].pow().sum().sqrt", "numpy.linalg.norm().round", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "len", "obj_pose_inv[].detach().cpu().numpy", "tgt_bg_mask[].repeat().detach().cpu", "ref_bg_mask[].repeat().detach().cpu", "[].detach().cpu.unsqueeze", "[].detach().cpu", "[].detach().cpu", "[].detach().cpu", "range", "range", "range", "ego_pose[].pow().sum", "[].detach().cpu().numpy", "tr_fwd[].pow().sum().sqrt", "[].detach().cpu().numpy", "[].detach().cpu().numpy", "tr_fwd[].pow().sum().sqrt", "[].detach().cpu().numpy", "[].detach().cpu().numpy", "tr_fwd[].pow().sum().sqrt", "[].detach().cpu().numpy", "[].detach().cpu().numpy", "tr_fwd[].pow().sum().sqrt", "[].detach().cpu().numpy", "r2t_obj_3d_locs[].detach().cpu().numpy", "rtt_obj_3d_locs[].detach().cpu().numpy", "tgt_obj_3d_locs[].detach().cpu().numpy", "r2t_obj_3d_locs[].detach().cpu().numpy", "rtt_obj_3d_locs[].detach().cpu().numpy", "tgt_obj_3d_locs[].detach().cpu().numpy", "torch.ones", "torch.ones", "int", "rigid_warp.pose_vec2mat().squeeze", "rigid_warp.pose_vec2mat", "numpy.array", "coords[].mean", "coords[].mean", "coords[].mean", "numpy.concatenate().reshape", "[].detach().cpu", "r2t_obj_homo.reshape", "r2t_obj_homo_tr.reshape", "r2t_obj_homo_tr_gt.reshape", "[].detach", "[].detach", "[].detach", "[].repeat().detach", "[].detach", "[].detach", "[].detach", "[].detach().cpu", "[].detach", "[].detach", "[].detach", "[].detach().cpu", "[].detach", "[].detach", "[].detach", "[].detach().cpu", "numpy.ones", "[].detach().cpu().numpy", "ego_pose[].detach().cpu", "obj_pose[].pow().sum", "obj_pose[].pow().sum", "obj_pose[].pow().sum", "obj_pose[].pow().sum", "obj_pose[].pow().sum", "obj_pose[].pow().sum", "obj_pose[].pow().sum", "obj_pose[].pow().sum", "numpy.linalg.norm", "ref_seg.to.size", "ref_seg.to.size", "numpy.concatenate().reshape", "obj_pose_inv[].detach().cpu", "numpy.concatenate().reshape", "tgt_bg_mask[].repeat().detach", "ref_bg_mask[].repeat().detach", "[].detach", "[].detach", "[].detach", "range", "ego_pose[].pow", "[].detach().cpu", "tr_fwd[].pow().sum", "[].detach().cpu", "[].detach().cpu", "tr_fwd[].pow().sum", "[].detach().cpu", "[].detach().cpu", "tr_fwd[].pow().sum", "[].detach().cpu", "[].detach().cpu", "tr_fwd[].pow().sum", "[].detach().cpu", "r2t_obj_3d_locs[].detach().cpu", "rtt_obj_3d_locs[].detach().cpu", "tgt_obj_3d_locs[].detach().cpu", "r2t_obj_3d_locs[].detach().cpu", "rtt_obj_3d_locs[].detach().cpu", "tgt_obj_3d_locs[].detach().cpu", "rigid_warp.pose_vec2mat", "numpy.concatenate", "[].detach", "[].repeat", "[].detach", "[].detach", "[].detach", "[].detach().cpu", "ego_pose[].detach", "obj_pose[].pow", "obj_pose[].pow", "obj_pose[].pow", "obj_pose[].pow", "obj_pose[].pow", "obj_pose[].pow", "obj_pose[].pow", "obj_pose[].pow", "numpy.linalg.norm", "numpy.concatenate", "obj_pose_inv[].detach", "numpy.concatenate", "tgt_bg_mask[].repeat", "ref_bg_mask[].repeat", "r2t_obj_coords[].view", "r2t_obj_coords[].view", "r2t_obj_coords[].view", "rtt_obj_coords[].view", "rtt_obj_coords[].view", "rtt_obj_coords[].view", "tgt_obj_coords[].view", "tgt_obj_coords[].view", "tgt_obj_coords[].view", "[].detach", "tr_fwd[].pow", "[].detach", "[].detach", "tr_fwd[].pow", "[].detach", "[].detach", "tr_fwd[].pow", "[].detach", "[].detach", "tr_fwd[].pow", "[].detach", "r2t_obj_3d_locs[].detach", "rtt_obj_3d_locs[].detach", "tgt_obj_3d_locs[].detach", "r2t_obj_3d_locs[].detach", "rtt_obj_3d_locs[].detach", "tgt_obj_3d_locs[].detach", "obj_loc.detach().cpu().numpy", "numpy.array", "r2t_obj_coords[].view", "rtt_obj_coords[].view", "tgt_obj_coords[].view", "[].detach", "tgt_obj_3d_locs[].detach().cpu().numpy", "numpy.array", "tgt_obj_3d_locs[].detach().cpu().numpy", "numpy.array", "r2t_obj_imgs[].sum", "tgt_obj_img.sum", "r2t_obj_coords[].mean().view", "r2t_obj_coords[].mean().view", "r2t_obj_coords[].mean().view", "r2t_obj_imgs[].sum().view", "rtt_obj_coords[].mean().view", "rtt_obj_coords[].mean().view", "rtt_obj_coords[].mean().view", "rtt_obj_imgs[].sum().view", "tgt_obj_coords[].mean().view", "tgt_obj_coords[].mean().view", "tgt_obj_coords[].mean().view", "tgt_obj_img.sum().view", "obj_loc.detach().cpu", "r2t_obj_coords[].mean().view", "rtt_obj_coords[].mean().view", "tgt_obj_coords[].mean().view", "tgt_obj_3d_locs[].detach().cpu", "tgt_obj_3d_locs[].detach().cpu", "r2t_obj_coords[].mean", "r2t_obj_coords[].mean", "r2t_obj_coords[].mean", "r2t_obj_imgs[].sum", "rtt_obj_coords[].mean", "rtt_obj_coords[].mean", "rtt_obj_coords[].mean", "rtt_obj_imgs[].sum", "tgt_obj_coords[].mean", "tgt_obj_coords[].mean", "tgt_obj_coords[].mean", "tgt_obj_img.sum", "tgt_obj_img.sum().view", "obj_loc.detach", "r2t_obj_coords[].mean", "rtt_obj_coords[].mean", "tgt_obj_coords[].mean", "r2t_obj_coords[].mean().view", "rtt_obj_coords[].mean().view", "tgt_obj_coords[].mean().view", "tgt_obj_3d_locs[].detach", "tgt_obj_3d_locs[].detach", "tgt_obj_img.sum", "r2t_obj_coords[].mean", "rtt_obj_coords[].mean", "tgt_obj_coords[].mean", "tgt_obj_coords[].mean().view", "tgt_obj_coords[].mean"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_batch_bg_warping", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_reverse_warp_ego", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_reverse_warp_ego", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_batch_obj_warping", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_obj_translation", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_reverse_warp_obj", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.inverse_warp2", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pixel2cam", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pixel2cam", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pixel2cam", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.cam2homo", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.cam2homo", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.cam2homo", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.inst_iou", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.drawRobotics.drawVector", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.drawRobotics.drawPointWithAxis", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.drawRobotics.drawPointWithAxis", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.drawRobotics.drawVector", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.drawRobotics.drawVector", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_vec2mat", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_vec2mat"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "demo_visualize", "(", "args", ",", "demo_loader", ",", "disp_net", ",", "ego_pose_net", ",", "obj_pose_net", ")", ":", "\n", "    ", "global", "device", "\n", "torch", ".", "set_printoptions", "(", "sci_mode", "=", "False", ")", "\n", "np", ".", "set_printoptions", "(", "suppress", "=", "True", ")", "\n", "# np.set_printoptions(formatter={'all':lambda x: str(x)})", "\n", "\n", "# switch to eval mode", "\n", "disp_net", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "ego_pose_net", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "obj_pose_net", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "ego_global_mat", "=", "np", ".", "identity", "(", "4", ")", "\n", "ego_global_mats", "=", "[", "ego_global_mat", "]", "\n", "\n", "objOs", ",", "objHs", ",", "objXs", ",", "objYs", ",", "objZs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "objIDs", "=", "[", "]", "\n", "colors", "=", "[", "'yellow'", ",", "'lightskyblue'", ",", "'lime'", ",", "'magenta'", ",", "'orange'", ",", "'coral'", ",", "'gold'", ",", "'cyan'", "]", "\n", "\n", "vidx", "=", "0", "\n", "\n", "for", "i", ",", "(", "ref_img", ",", "tgt_img", ",", "ref_seg", ",", "tgt_seg", ",", "intrinsics", ",", "intrinsics_inv", ")", "in", "enumerate", "(", "demo_loader", ")", ":", "\n", "\n", "        ", "ref_img", "=", "ref_img", ".", "to", "(", "device", ")", "\n", "tgt_img", "=", "tgt_img", ".", "to", "(", "device", ")", "\n", "ref_seg", "=", "ref_seg", ".", "to", "(", "device", ")", "\n", "tgt_seg", "=", "tgt_seg", ".", "to", "(", "device", ")", "\n", "intrinsics", "=", "intrinsics", ".", "to", "(", "device", ")", "\n", "intrinsics_inv", "=", "intrinsics_inv", ".", "to", "(", "device", ")", "\n", "\n", "# input instance masking", "\n", "ref_bg_mask", "=", "1", "-", "(", "ref_seg", "[", ":", ",", "1", ":", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "tgt_bg_mask", "=", "1", "-", "(", "tgt_seg", "[", ":", ",", "1", ":", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "ref_bg_img", "=", "ref_img", "*", "ref_bg_mask", "*", "tgt_bg_mask", "\n", "tgt_bg_img", "=", "tgt_img", "*", "ref_bg_mask", "*", "tgt_bg_mask", "\n", "num_inst", "=", "int", "(", "ref_seg", "[", ":", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "num_insts", "=", "[", "[", "num_inst", "]", ",", "[", "num_inst", "]", "]", "\n", "\n", "# tracking info", "\n", "if", "len", "(", "objIDs", ")", "==", "0", ":", "\n", "            ", "objIDs", ".", "append", "(", "np", ".", "arange", "(", "num_inst", ")", ".", "tolist", "(", ")", ")", "\n", "", "else", ":", "\n", "# -> ref_seg\uc758 \uc778\uc2a4\ud134\uc2a4\ub4e4\uc774 tgt_seg_prev\uc758 \uba87 \ubc88\uc9f8 \ucc44\ub110 \uc778\uc2a4\ud134\uc2a4\uc5d0 \ub9e4\uce6d\ub418\ub294\uac00?", "\n", "            ", "p2c_iou", ",", "p2c_idx", "=", "inst_iou", "(", "ref_seg", ".", "cpu", "(", ")", ",", "tgt_seg_prev", ".", "cpu", "(", ")", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "ref_seg", ".", "size", "(", "2", ")", ",", "ref_seg", ".", "size", "(", "3", ")", ")", ".", "type_as", "(", "ref_seg", ")", ".", "cpu", "(", ")", ")", "\n", "p2c_iou", "=", "p2c_iou", "[", "1", ":", "]", "\n", "p2c_idx", "=", "p2c_idx", "[", "1", ":", "]", "-", "1", "\n", "newColorID", "=", "list", "(", "set", "(", "np", ".", "arange", "(", "len", "(", "colors", ")", ")", ")", "-", "set", "(", "objIDs", "[", "-", "1", "]", ")", ")", "\n", "newID", "=", "[", "]", "\n", "\n", "for", "ii", ",", "iou", "in", "enumerate", "(", "p2c_iou", ")", ":", "\n", "                ", "if", "iou", ">", "0.5", ":", "\n", "                    ", "newID", ".", "append", "(", "objIDs", "[", "-", "1", "]", "[", "int", "(", "p2c_idx", "[", "ii", "]", ")", "]", ")", "\n", "", "elif", "iou", "!=", "iou", ":", "\n", "                    ", "break", ";", "\n", "", "else", ":", "\n", "                    ", "newID", ".", "append", "(", "newColorID", "[", "0", "]", ")", "\n", "newColorID", "=", "newColorID", "[", "1", ":", "]", "\n", "", "", "objIDs", ".", "append", "(", "newID", ")", "\n", "\n", "\n", "", "tgt_seg_prev", "=", "tgt_seg", ".", "clone", "(", ")", "\n", "tgt_seg_prev", "[", "0", ",", "0", "]", "=", "0", "\n", "objIDs_flatten", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "objIDs", ")", ")", "\n", "# pdb.set_trace()", "\n", "'''\n            # plt.close('all')\n            ea1 = 4; ea2 = 5; ii = 1;\n            fig = plt.figure(99, figsize=(20, 10))\n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(tgt_seg_prev[0,0].cpu()); plt.colorbar(); \n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(tgt_seg_prev[0,1].cpu()); plt.colorbar(); \n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(tgt_seg_prev[0,2].cpu()); plt.colorbar(); \n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(tgt_seg_prev[0,3].cpu()); plt.colorbar(); \n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(tgt_seg_prev[0,4].cpu()); plt.colorbar(); \n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(ref_seg[0,0].cpu()); plt.colorbar(); \n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(ref_seg[0,1].cpu()); plt.colorbar(); \n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(ref_seg[0,2].cpu()); plt.colorbar(); \n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(ref_seg[0,3].cpu()); plt.colorbar(); \n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(ref_seg[0,4].cpu()); plt.colorbar(); \n            plt.tight_layout(); plt.ion(); plt.show()\n\n        '''", "\n", "\n", "# compute depth & camera motion", "\n", "ref_depth", "=", "1", "/", "disp_net", "(", "ref_img", ")", "\n", "tgt_depth", "=", "1", "/", "disp_net", "(", "tgt_img", ")", "\n", "ego_pose", "=", "ego_pose_net", "(", "tgt_bg_img", ",", "ref_bg_img", ")", "\n", "ego_pose_inv", "=", "ego_pose_net", "(", "ref_bg_img", ",", "tgt_bg_img", ")", "\n", "# ego_pose = ego_pose_net(tgt_img, ref_img)", "\n", "# ego_pose_inv = ego_pose_net(ref_img, tgt_img)", "\n", "\n", "ego_mat", "=", "pose_vec2mat", "(", "ego_pose", ")", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "ego_mat", "=", "np", ".", "concatenate", "(", "[", "ego_mat", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "reshape", "(", "1", ",", "4", ")", "]", ",", "axis", "=", "0", ")", "\n", "ego_global_mat", "=", "ego_global_mat", "@", "ego_mat", "\n", "ego_global_mats", ".", "append", "(", "ego_global_mat", ")", "\n", "\n", "### Batch-wise computing ###    rtt_Is, rtt_Ms, prj_Ds, cmp_Ds  --> (19.11.18) change from fw to iw for bg regions", "\n", "### Outputs:  warped-masked-bg-img,  valid-bg-mask,  valid-bg-proj-depth,  valid-bg-comp-depth ###", "\n", "### NumScales(1) >> NumRefs(2) >> I-M-D-D(4) >> 2B(fwd/bwd)xCxHxW ###", "\n", "IMDDs", "=", "compute_batch_bg_warping", "(", "tgt_img", ",", "[", "ref_img", ",", "ref_img", "]", ",", "[", "tgt_bg_mask", ",", "tgt_bg_mask", "]", ",", "[", "ref_bg_mask", ",", "ref_bg_mask", "]", ",", "\n", "tgt_depth", ",", "[", "ref_depth", ",", "ref_depth", "]", ",", "[", "ego_pose", ",", "ego_pose", "]", ",", "[", "ego_pose_inv", ",", "ego_pose_inv", "]", ",", "intrinsics", ")", "\n", "\n", "\n", "ref_obj_img", "=", "ref_img", ".", "repeat", "(", "num_inst", ",", "1", ",", "1", ",", "1", ")", "*", "ref_seg", "[", "0", ",", "1", ":", "1", "+", "num_inst", "]", ".", "unsqueeze", "(", "1", ")", "\n", "tgt_obj_img", "=", "tgt_img", ".", "repeat", "(", "num_inst", ",", "1", ",", "1", ",", "1", ")", "*", "tgt_seg", "[", "0", ",", "1", ":", "1", "+", "num_inst", "]", ".", "unsqueeze", "(", "1", ")", "\n", "ref_obj_mask", "=", "ref_seg", "[", "0", ",", "1", ":", "1", "+", "num_inst", "]", ".", "unsqueeze", "(", "1", ")", "\n", "tgt_obj_mask", "=", "tgt_seg", "[", "0", ",", "1", ":", "1", "+", "num_inst", "]", ".", "unsqueeze", "(", "1", ")", "\n", "ref_obj_depth", "=", "ref_depth", ".", "repeat", "(", "num_inst", ",", "1", ",", "1", ",", "1", ")", "*", "ref_seg", "[", "0", ",", "1", ":", "1", "+", "num_inst", "]", ".", "unsqueeze", "(", "1", ")", "\n", "tgt_obj_depth", "=", "tgt_depth", ".", "repeat", "(", "num_inst", ",", "1", ",", "1", ",", "1", ")", "*", "tgt_seg", "[", "0", ",", "1", ":", "1", "+", "num_inst", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "_", ",", "_", ",", "_", ",", "_", ",", "r2t_obj_imgs", ",", "r2t_obj_masks", ",", "_", ",", "r2t_obj_sc_depths", "=", "compute_reverse_warp_ego", "(", "[", "ref_depth", ",", "ref_depth", "]", ",", "[", "ref_obj_img", ",", "ref_obj_img", "]", ",", "[", "ref_obj_mask", ",", "ref_obj_mask", "]", ",", "[", "ego_pose_inv", ",", "ego_pose_inv", "]", ",", "intrinsics", ",", "num_insts", ")", "\n", "_", ",", "_", ",", "_", ",", "_", ",", "t2r_obj_imgs", ",", "t2r_obj_masks", ",", "_", ",", "t2r_obj_sc_depths", "=", "compute_reverse_warp_ego", "(", "[", "tgt_depth", ",", "tgt_depth", "]", ",", "[", "tgt_obj_img", ",", "tgt_obj_img", "]", ",", "[", "tgt_obj_mask", ",", "tgt_obj_mask", "]", ",", "[", "ego_pose", ",", "ego_pose", "]", ",", "intrinsics", ",", "num_insts", ")", "\n", "\n", "obj_pose", "=", "obj_pose_net", "(", "tgt_obj_img", ",", "r2t_obj_imgs", "[", "0", "]", ")", "\n", "obj_pose_inv", "=", "obj_pose_net", "(", "ref_obj_img", ",", "t2r_obj_imgs", "[", "0", "]", ")", "\n", "obj_pose", "=", "torch", ".", "cat", "(", "[", "obj_pose", ",", "torch", ".", "zeros_like", "(", "obj_pose", ")", "]", ",", "dim", "=", "1", ")", "\n", "obj_pose_inv", "=", "torch", ".", "cat", "(", "[", "obj_pose_inv", ",", "torch", ".", "zeros_like", "(", "obj_pose_inv", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "obj_mat", "=", "pose_vec2mat", "(", "obj_pose", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "obj_mat", "=", "np", ".", "concatenate", "(", "[", "obj_mat", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "reshape", "(", "1", ",", "1", ",", "4", ")", ".", "repeat", "(", "obj_pose", ".", "size", "(", "0", ")", ",", "axis", "=", "0", ")", "]", ",", "axis", "=", "1", ")", "\n", "obj_global_mat", "=", "ego_global_mat", ".", "reshape", "(", "1", ",", "4", ",", "4", ")", ".", "repeat", "(", "obj_pose", ".", "size", "(", "0", ")", ",", "axis", "=", "0", ")", "@", "obj_mat", "\n", "\n", "obj_IMDDs", ",", "obj_ovls", "=", "compute_batch_obj_warping", "(", "tgt_img", ",", "[", "ref_img", ",", "ref_img", "]", ",", "[", "tgt_obj_mask", ",", "tgt_obj_mask", "]", ",", "[", "ref_obj_mask", ",", "ref_obj_mask", "]", ",", "tgt_depth", ",", "[", "ref_depth", ",", "ref_depth", "]", ",", "\n", "[", "ego_pose", ",", "ego_pose", "]", ",", "[", "ego_pose_inv", ",", "ego_pose_inv", "]", ",", "[", "obj_pose", ",", "obj_pose", "]", ",", "[", "obj_pose_inv", ",", "obj_pose_inv", "]", ",", "intrinsics", ",", "num_insts", ")", "\n", "\n", "\n", "tr_fwd", ",", "tr_bwd", "=", "compute_obj_translation", "(", "r2t_obj_sc_depths", ",", "t2r_obj_sc_depths", ",", "[", "tgt_obj_depth", ",", "tgt_obj_depth", "]", ",", "[", "ref_obj_depth", ",", "ref_obj_depth", "]", ",", "num_insts", ",", "intrinsics", ")", "\n", "\n", "rtt_obj_imgs", ",", "rtt_obj_masks", ",", "rtt_obj_depths", ",", "rtt_obj_sc_depths", "=", "compute_reverse_warp_obj", "(", "r2t_obj_sc_depths", ",", "r2t_obj_imgs", ",", "r2t_obj_masks", ",", "[", "-", "obj_pose", ",", "-", "obj_pose", "]", ",", "intrinsics", ".", "repeat", "(", "num_inst", ",", "1", ",", "1", ")", ",", "num_insts", ")", "\n", "# pdb.set_trace()", "\n", "'''\n            sq = 0; bb = 0; \n            plt.close('all')\n            plt.figure(1); plt.imshow(r2t_obj_sc_depths[sq][bb,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n            plt.figure(2); plt.imshow(r2t_sc_depths[sq][0,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n            plt.figure(3); plt.imshow(rtt_obj_sc_depths[sq][bb,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n            plt.figure(4); plt.imshow(rtt_obj_sc_depth_2[bb,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n            plt.figure(5); plt.imshow(rev_d2f[bb,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n            plt.figure(6); plt.imshow(d2f[bb,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n            plt.figure(7); plt.imshow(norm[bb,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n            plt.figure(8); plt.imshow(r2t_obj_masks[sq][bb,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n            plt.figure(9); plt.imshow(rtt_obj_masks[sq][bb,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n            plt.figure(10); plt.imshow(rtt_obj_imgs[sq][bb,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n\n        '''", "\n", "\n", "_", ",", "_", ",", "r2t_ego_projected_depth", ",", "r2t_ego_computed_depth", "=", "inverse_warp2", "(", "ref_img", ",", "tgt_depth", ",", "ego_pose", ",", "intrinsics", ",", "ref_depth", ")", "\n", "\n", "\n", "### KITTI ###", "\n", "if", "'kitti'", "in", "args", ".", "data", ":", "\n", "            ", "xlim_1", "=", "0.25", ";", "ylim_1", "=", "0.1", ";", "zlim_1", "=", "1.2", ";", "\n", "xlim_2", "=", "0.25", ";", "ylim_2", "=", "0.1", ";", "zlim_2", "=", "1.2", ";", "\n", "obj_vo_scale", "=", "3.0", "\n", "ego_vo_scale", "=", "0.015", "\n", "\n", "### CS ###", "\n", "", "if", "'cityscapes'", "in", "args", ".", "data", ":", "\n", "            ", "xlim_1", "=", "0.1", ";", "ylim_1", "=", "0.1", ";", "zlim_1", "=", "0.4", ";", "\n", "xlim_2", "=", "0.12", ";", "ylim_2", "=", "0.06", ";", "zlim_2", "=", "0.60", ";", "\n", "obj_vo_scale", "=", "3.0", "\n", "ego_vo_scale", "=", "0.005", "\n", "\n", "\n", "", "ego_init_o", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "reshape", "(", "4", ",", "1", ")", "\n", "ego_init_x", "=", "np", ".", "array", "(", "[", "ego_vo_scale", "*", "1", ",", "0", ",", "0", ",", "1", "]", ")", ".", "reshape", "(", "4", ",", "1", ")", "\n", "ego_init_y", "=", "np", ".", "array", "(", "[", "0", ",", "ego_vo_scale", "*", "1", ",", "0", ",", "1", "]", ")", ".", "reshape", "(", "4", ",", "1", ")", "\n", "ego_init_z", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "ego_vo_scale", "*", "1", ",", "1", "]", ")", ".", "reshape", "(", "4", ",", "1", ")", "\n", "egoOs", "=", "np", ".", "array", "(", "[", "mat", "@", "ego_init_o", "for", "mat", "in", "ego_global_mats", "]", ")", "[", ":", ",", ":", "3", ",", "0", "]", "\n", "egoXs", "=", "np", ".", "array", "(", "[", "mat", "@", "ego_init_x", "for", "mat", "in", "ego_global_mats", "]", ")", "[", ":", ",", ":", "3", ",", "0", "]", "\n", "egoYs", "=", "np", ".", "array", "(", "[", "mat", "@", "ego_init_y", "for", "mat", "in", "ego_global_mats", "]", ")", "[", ":", ",", ":", "3", ",", "0", "]", "\n", "egoZs", "=", "np", ".", "array", "(", "[", "mat", "@", "ego_init_z", "for", "mat", "in", "ego_global_mats", "]", ")", "[", ":", ",", ":", "3", ",", "0", "]", "\n", "\n", "bbox_y", "=", "dict", "(", "boxstyle", "=", "'round'", ",", "facecolor", "=", "'yellow'", ",", "alpha", "=", "0.5", ")", "\n", "bbox_c", "=", "dict", "(", "boxstyle", "=", "'round'", ",", "facecolor", "=", "'coral'", ",", "alpha", "=", "0.5", ")", "\n", "bbox_m", "=", "dict", "(", "boxstyle", "=", "'round'", ",", "facecolor", "=", "'magenta'", ",", "alpha", "=", "0.5", ")", "\n", "bbox_l", "=", "dict", "(", "boxstyle", "=", "'round'", ",", "facecolor", "=", "'lime'", ",", "alpha", "=", "0.5", ")", "\n", "bbox_w", "=", "dict", "(", "boxstyle", "=", "'round'", ",", "facecolor", "=", "'white'", ",", "alpha", "=", "0.5", ")", "\n", "bbox_b", "=", "dict", "(", "boxstyle", "=", "'round'", ",", "facecolor", "=", "'deepskyblue'", ",", "alpha", "=", "0.5", ")", "\n", "# pdb.set_trace()", "\n", "\n", "sq", "=", "0", ";", "bb", "=", "0", ";", "\n", "r2t_objs_coords", "=", "pixel2cam", "(", "r2t_obj_sc_depths", "[", "0", "]", "[", ":", ",", "0", "]", ",", "intrinsics", ".", "inverse", "(", ")", ".", "repeat", "(", "num_inst", ",", "1", ",", "1", ")", ")", "\n", "rtt_objs_coords", "=", "pixel2cam", "(", "rtt_obj_sc_depths", "[", "0", "]", "[", ":", ",", "0", "]", ",", "intrinsics", ".", "inverse", "(", ")", ".", "repeat", "(", "num_inst", ",", "1", ",", "1", ")", ")", "\n", "tgt_objs_coords", "=", "pixel2cam", "(", "tgt_obj_depth", "[", ":", ",", "0", "]", ",", "intrinsics", ".", "inverse", "(", ")", ".", "repeat", "(", "num_inst", ",", "1", ",", "1", ")", ")", "\n", "r2t_obj_3d_locs", "=", "[", "]", "\n", "rtt_obj_3d_locs", "=", "[", "]", "\n", "tgt_obj_3d_locs", "=", "[", "]", "\n", "for", "r2t_obj_coords", "in", "r2t_objs_coords", ":", "r2t_obj_3d_locs", ".", "append", "(", "torch", ".", "cat", "(", "[", "coords", "[", "coords", "!=", "0", "]", ".", "mean", "(", ")", ".", "unsqueeze", "(", "0", ")", "for", "coords", "in", "r2t_obj_coords", "]", ")", ")", "\n", "for", "rtt_obj_coords", "in", "rtt_objs_coords", ":", "rtt_obj_3d_locs", ".", "append", "(", "torch", ".", "cat", "(", "[", "coords", "[", "coords", "!=", "0", "]", ".", "mean", "(", ")", ".", "unsqueeze", "(", "0", ")", "for", "coords", "in", "rtt_obj_coords", "]", ")", ")", "\n", "for", "tgt_obj_coords", "in", "tgt_objs_coords", ":", "tgt_obj_3d_locs", ".", "append", "(", "torch", ".", "cat", "(", "[", "coords", "[", "coords", "!=", "0", "]", ".", "mean", "(", ")", ".", "unsqueeze", "(", "0", ")", "for", "coords", "in", "tgt_obj_coords", "]", ")", ")", "\n", "for", "obj_loc", "in", "tgt_obj_3d_locs", ":", "objOs", ".", "append", "(", "(", "ego_global_mat", "@", "np", ".", "concatenate", "(", "[", "obj_loc", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "np", ".", "array", "(", "[", "1", "]", ")", "]", ")", ".", "reshape", "(", "4", ",", "1", ")", ")", "[", ":", "3", "]", ".", "squeeze", "(", ")", ")", ";", "\n", "objHs_pred", ",", "objHs_comp", "=", "[", "]", ",", "[", "]", "\n", "for", "ii", "in", "range", "(", "len", "(", "obj_pose_inv", ")", ")", ":", "objHs_pred", ".", "append", "(", "(", "ego_global_mat", "@", "np", ".", "concatenate", "(", "[", "tgt_obj_3d_locs", "[", "ii", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "np", ".", "array", "(", "[", "1", "]", ")", "]", ")", ".", "reshape", "(", "4", ",", "1", ")", ")", "[", ":", "3", "]", ".", "squeeze", "(", ")", "+", "obj_vo_scale", "*", "obj_pose_inv", "[", "ii", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", "3", "]", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "obj_pose_inv", ")", ")", ":", "objHs_comp", ".", "append", "(", "(", "ego_global_mat", "@", "np", ".", "concatenate", "(", "[", "tgt_obj_3d_locs", "[", "ii", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "np", ".", "array", "(", "[", "1", "]", ")", "]", ")", ".", "reshape", "(", "4", ",", "1", ")", ")", "[", ":", "3", "]", ".", "squeeze", "(", ")", "-", "obj_vo_scale", "*", "tr_fwd", "[", "0", "]", "[", "ii", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "for", "pred", ",", "comp", "in", "zip", "(", "objHs_pred", ",", "objHs_comp", ")", ":", "objHs", ".", "append", "(", "(", "pred", "+", "comp", ")", "/", "2", ")", "\n", "r2t_obj_3d_loc", "=", "torch", ".", "stack", "(", "r2t_obj_3d_locs", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "r2t_obj_homo", ",", "_", "=", "cam2homo", "(", "r2t_obj_3d_loc", ",", "intrinsics", ".", "repeat", "(", "num_inst", ",", "1", ",", "1", ")", ",", "torch", ".", "zeros", "(", "[", "1", ",", "3", ",", "1", "]", ")", ".", "cuda", "(", ")", ")", "\n", "r2t_obj_tail", "=", "r2t_obj_homo", ".", "reshape", "(", "num_inst", ",", "2", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "r2t_obj_trans", "=", "-", "obj_pose", "[", ":", ",", ":", "3", "]", "\n", "r2t_obj_trans_gt", "=", "-", "tr_fwd", "[", "0", "]", "\n", "r2t_obj_3d_loc_tr", "=", "r2t_obj_3d_loc", ".", "reshape", "(", "num_inst", ",", "3", ")", "+", "r2t_obj_trans", "\n", "r2t_obj_3d_loc_tr_gt", "=", "r2t_obj_3d_loc", ".", "reshape", "(", "num_inst", ",", "3", ")", "+", "r2t_obj_trans_gt", "\n", "r2t_obj_homo_tr", ",", "_", "=", "cam2homo", "(", "r2t_obj_3d_loc_tr", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "intrinsics", ".", "repeat", "(", "num_inst", ",", "1", ",", "1", ")", ",", "torch", ".", "zeros", "(", "[", "1", ",", "3", ",", "1", "]", ")", ".", "cuda", "(", ")", ")", "\n", "r2t_obj_homo_tr_gt", ",", "_", "=", "cam2homo", "(", "r2t_obj_3d_loc_tr_gt", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "intrinsics", ".", "repeat", "(", "num_inst", ",", "1", ",", "1", ")", ",", "torch", ".", "zeros", "(", "[", "1", ",", "3", ",", "1", "]", ")", ".", "cuda", "(", ")", ")", "\n", "r2t_obj_head", "=", "r2t_obj_homo_tr", ".", "reshape", "(", "num_inst", ",", "2", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "r2t_obj_head_gt", "=", "r2t_obj_homo_tr_gt", ".", "reshape", "(", "num_inst", ",", "2", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "arr_scale", "=", "1.5", "\n", "tgt", "=", "(", "tgt_img", "[", "bb", "%", "args", ".", "batch_size", "]", "*", "0.5", "+", "0.5", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "tgt_inst", "=", "1", "-", "tgt_bg_mask", "[", "bb", "]", ".", "repeat", "(", "3", ",", "1", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "tgt_masked", "=", "(", "tgt", "+", "0.2", "*", "tgt_inst", ")", ".", "clip", "(", "max", "=", "1.0", ")", "\n", "ref", "=", "(", "ref_img", "[", "bb", "%", "args", ".", "batch_size", "]", "*", "0.5", "+", "0.5", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "ref_inst", "=", "1", "-", "ref_bg_mask", "[", "bb", "]", ".", "repeat", "(", "3", ",", "1", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "ref_masked", "=", "(", "ref", "+", "0.2", "*", "ref_inst", ")", ".", "clip", "(", "max", "=", "1.0", ")", "\n", "d_tgt", "=", "1", "/", "tgt_depth", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "bb", "%", "args", ".", "batch_size", ",", "0", "]", "\n", "d_ref", "=", "1", "/", "ref_depth", ".", "detach", "(", ")", ".", "cpu", "(", ")", "[", "bb", "%", "args", ".", "batch_size", ",", "0", "]", "\n", "r2t_obj", "=", "(", "r2t_obj_imgs", "[", "0", "]", ".", "sum", "(", "dim", "=", "0", ")", "*", "0.5", "+", "0.5", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "if", "num_inst", "!=", "0", "else", "np", ".", "zeros", "(", "[", "256", ",", "832", ",", "3", "]", ")", "\n", "tgt_obj", "=", "(", "tgt_obj_img", ".", "sum", "(", "dim", "=", "0", ")", "*", "0.5", "+", "0.5", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "if", "num_inst", "!=", "0", "else", "np", ".", "zeros", "(", "[", "256", ",", "832", ",", "3", "]", ")", "\n", "i_w_bg", "=", "(", "IMDDs", "[", "sq", "]", "[", "0", "]", "*", "0.5", "+", "0.5", ")", "[", "bb", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "i_w_obj", "=", "(", "obj_IMDDs", "[", "sq", "]", "[", "0", "]", "*", "0.5", "+", "0.5", ")", "[", "bb", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "i_w", "=", "(", "(", "IMDDs", "[", "sq", "]", "[", "0", "]", "+", "obj_IMDDs", "[", "sq", "]", "[", "0", "]", ")", "*", "0.5", "+", "0.5", ")", "[", "bb", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "m_w", "=", "obj_IMDDs", "[", "sq", "]", "[", "1", "]", "[", "0", "]", ".", "repeat", "(", "3", ",", "1", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "i_w_masked", "=", "i_w", "+", "0.2", "*", "m_w", "\n", "d_diff", "=", "(", "(", "(", "IMDDs", "[", "sq", "]", "[", "3", "]", "+", "obj_IMDDs", "[", "sq", "]", "[", "3", "]", ")", "-", "(", "IMDDs", "[", "sq", "]", "[", "2", "]", "+", "obj_IMDDs", "[", "sq", "]", "[", "2", "]", ")", ")", ".", "abs", "(", ")", "/", "(", "(", "IMDDs", "[", "sq", "]", "[", "3", "]", "+", "obj_IMDDs", "[", "sq", "]", "[", "3", "]", ")", "+", "(", "IMDDs", "[", "sq", "]", "[", "2", "]", "+", "obj_IMDDs", "[", "sq", "]", "[", "2", "]", ")", ")", ".", "abs", "(", ")", ".", "clamp", "(", "min", "=", "1e-3", ")", ")", ".", "clamp", "(", "0", ",", "1", ")", "[", "bb", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "d_diff_ego", "=", "(", "(", "r2t_ego_projected_depth", "-", "r2t_ego_computed_depth", ")", ".", "abs", "(", ")", "/", "(", "r2t_ego_projected_depth", "+", "r2t_ego_computed_depth", ")", ".", "abs", "(", ")", ".", "clamp", "(", "min", "=", "1e-3", ")", ")", ".", "clamp", "(", "0", ",", "1", ")", "[", "bb", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "*", "(", "IMDDs", "[", "sq", "]", "[", "1", "]", "+", "obj_IMDDs", "[", "sq", "]", "[", "1", "]", ")", "[", "bb", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "occ", "=", "1.5", "*", "d_diff", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", ".", "numpy", "(", ")", "\n", "occ", "[", ":", ",", ":", ",", "2", "]", "=", "0", "\n", "occ", "[", "occ", "<", "0.1", "]", "=", "0", "\n", "i_w_occ", "=", "(", "i_w_masked", "+", "occ", ")", ".", "clip", "(", "max", "=", "1.0", ")", "\n", "tgt_diff", "=", "np", ".", "abs", "(", "i_w", "-", "tgt", ")", ".", "mean", "(", "axis", "=", "2", ")", "\n", "th", "=", "5", ";", "samp", "=", "20", ";", "\n", "r2t_obj_coords", "=", "r2t_objs_coords", ".", "sum", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "rtt_obj_coords", "=", "rtt_objs_coords", ".", "sum", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "tgt_obj_coords", "=", "tgt_objs_coords", ".", "sum", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "r2t_filt", "=", "np", ".", "abs", "(", "stats", ".", "zscore", "(", "r2t_obj_coords", "[", "bb", ",", "2", "]", ".", "view", "(", "-", "1", ")", "[", "r2t_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "<", "th", "\n", "rtt_filt", "=", "np", ".", "abs", "(", "stats", ".", "zscore", "(", "rtt_obj_coords", "[", "bb", ",", "2", "]", ".", "view", "(", "-", "1", ")", "[", "rtt_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "<", "th", "\n", "tgt_filt", "=", "np", ".", "abs", "(", "stats", ".", "zscore", "(", "tgt_obj_coords", "[", "bb", ",", "2", "]", ".", "view", "(", "-", "1", ")", "[", "tgt_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "<", "th", "\n", "npts_r2t", "=", "int", "(", "r2t_filt", ".", "sum", "(", ")", ")", "\n", "npts_rtt", "=", "int", "(", "rtt_filt", ".", "sum", "(", ")", ")", "\n", "npts_tgt", "=", "int", "(", "tgt_filt", ".", "sum", "(", ")", ")", "\n", "X_r2t", "=", "r2t_obj_coords", "[", "bb", ",", "0", "]", ".", "view", "(", "-", "1", ")", "[", "r2t_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "r2t_filt", "]", "[", "range", "(", "0", ",", "npts_r2t", ",", "samp", ")", "]", "\n", "Y_r2t", "=", "r2t_obj_coords", "[", "bb", ",", "1", "]", ".", "view", "(", "-", "1", ")", "[", "r2t_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "r2t_filt", "]", "[", "range", "(", "0", ",", "npts_r2t", ",", "samp", ")", "]", "\n", "Z_r2t", "=", "r2t_obj_coords", "[", "bb", ",", "2", "]", ".", "view", "(", "-", "1", ")", "[", "r2t_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "r2t_filt", "]", "[", "range", "(", "0", ",", "npts_r2t", ",", "samp", ")", "]", "\n", "C_r2t", "=", "r2t_obj_imgs", "[", "0", "]", ".", "sum", "(", "dim", "=", "0", ")", ".", "view", "(", "3", ",", "-", "1", ")", "[", ":", ",", "r2t_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "r2t_filt", "]", "[", ":", ",", "range", "(", "0", ",", "npts_r2t", ",", "samp", ")", "]", "*", "0.5", "+", "0.5", "\n", "C_r2t", "[", "0", "]", "=", "1", ";", "C_r2t", "[", "1", "]", "=", "0", ";", "C_r2t", "[", "2", "]", "=", "0", ";", "\n", "X_rtt", "=", "rtt_obj_coords", "[", "bb", ",", "0", "]", ".", "view", "(", "-", "1", ")", "[", "rtt_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "rtt_filt", "]", "[", "range", "(", "0", ",", "npts_rtt", ",", "samp", ")", "]", "\n", "Y_rtt", "=", "rtt_obj_coords", "[", "bb", ",", "1", "]", ".", "view", "(", "-", "1", ")", "[", "rtt_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "rtt_filt", "]", "[", "range", "(", "0", ",", "npts_rtt", ",", "samp", ")", "]", "\n", "Z_rtt", "=", "rtt_obj_coords", "[", "bb", ",", "2", "]", ".", "view", "(", "-", "1", ")", "[", "rtt_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "rtt_filt", "]", "[", "range", "(", "0", ",", "npts_rtt", ",", "samp", ")", "]", "\n", "C_rtt", "=", "rtt_obj_imgs", "[", "0", "]", ".", "sum", "(", "dim", "=", "0", ")", ".", "view", "(", "3", ",", "-", "1", ")", "[", ":", ",", "rtt_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "rtt_filt", "]", "[", ":", ",", "range", "(", "0", ",", "npts_rtt", ",", "samp", ")", "]", "*", "0.5", "+", "0.5", "\n", "C_rtt", "[", "0", "]", "=", "1", ";", "C_rtt", "[", "1", "]", "=", "1", ";", "C_rtt", "[", "2", "]", "=", "0", ";", "\n", "X_tgt", "=", "tgt_obj_coords", "[", "bb", ",", "0", "]", ".", "view", "(", "-", "1", ")", "[", "tgt_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "tgt_filt", "]", "[", "range", "(", "0", ",", "npts_tgt", ",", "samp", ")", "]", "\n", "Y_tgt", "=", "tgt_obj_coords", "[", "bb", ",", "1", "]", ".", "view", "(", "-", "1", ")", "[", "tgt_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "tgt_filt", "]", "[", "range", "(", "0", ",", "npts_tgt", ",", "samp", ")", "]", "\n", "Z_tgt", "=", "tgt_obj_coords", "[", "bb", ",", "2", "]", ".", "view", "(", "-", "1", ")", "[", "tgt_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "tgt_filt", "]", "[", "range", "(", "0", ",", "npts_tgt", ",", "samp", ")", "]", "\n", "C_tgt", "=", "tgt_obj_img", ".", "sum", "(", "dim", "=", "0", ")", ".", "view", "(", "3", ",", "-", "1", ")", "[", ":", ",", "tgt_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "tgt_filt", "]", "[", ":", ",", "range", "(", "0", ",", "npts_tgt", ",", "samp", ")", "]", "*", "0.5", "+", "0.5", "\n", "C_tgt", "[", "0", "]", "=", "0", ";", "C_tgt", "[", "1", "]", "=", "0", ";", "C_tgt", "[", "2", "]", "=", "1", ";", "\n", "XYZ_global_tgt", "=", "np", ".", "expand_dims", "(", "ego_global_mat", ",", "axis", "=", "0", ")", ".", "repeat", "(", "X_tgt", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "@", "np", ".", "expand_dims", "(", "np", ".", "stack", "(", "[", "X_tgt", ",", "Y_tgt", ",", "Z_tgt", ",", "np", ".", "ones", "(", "[", "X_tgt", ".", "shape", "[", "0", "]", "]", ")", "]", ")", ".", "transpose", "(", "1", ",", "0", ")", ",", "axis", "=", "-", "1", ")", "\n", "C_global_tgt", "=", "(", "tgt_obj_img", ".", "sum", "(", "dim", "=", "0", ")", ".", "view", "(", "3", ",", "-", "1", ")", "[", ":", ",", "tgt_obj_coords", "[", "bb", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "tgt_filt", "]", "[", ":", ",", "range", "(", "0", ",", "npts_tgt", ",", "samp", ")", "]", "*", "0.5", "+", "0.5", ")", ".", "clip", "(", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "\n", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "1", ",", "figsize", "=", "(", "1920", "/", "100", ",", "1080", "/", "100", ")", ",", "dpi", "=", "100", ")", "# figsize=(23, 13)", "\n", "gs", "=", "GridSpec", "(", "nrows", "=", "5", ",", "ncols", "=", "6", ")", "\n", "text_xy", "=", "[", "7", ",", "-", "16", "]", "\n", "text_fd", "=", "{", "'family'", ":", "'sans'", ",", "'size'", ":", "13", ",", "'color'", ":", "'black'", ",", "'style'", ":", "'italic'", "}", "\n", "fig", ".", "add_subplot", "(", "gs", "[", "0", ",", "0", ":", "2", "]", ")", "\n", "plt", ".", "imshow", "(", "ref_masked", ",", "vmax", "=", "1", ")", ";", "plt", ".", "text", "(", "text_xy", "[", "0", "]", ",", "text_xy", "[", "1", "]", ",", "\"$I_{t}$\"", ",", "fontdict", "=", "text_fd", ")", ";", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "and", "plt", ".", "yticks", "(", "[", "]", ")", "if", "args", ".", "save_fig", "else", "plt", ".", "grid", "(", "linestyle", "=", "':'", ",", "linewidth", "=", "0.4", ")", "\n", "if", "not", "args", ".", "save_fig", ":", "plt", ".", "grid", "(", "linestyle", "=", "':'", ",", "linewidth", "=", "0.4", ")", ";", "\n", "plt", ".", "text", "(", "55", ",", "-", "29", ",", "\"Scene: {}, Iter: {}\"", ".", "format", "(", "args", ".", "data", ",", "i", ")", ",", "fontsize", "=", "6.5", ")", ";", "\n", "plt", ".", "text", "(", "55", ",", "-", "9", ",", "\"Model: {}\"", ".", "format", "(", "args", ".", "pretrained_disp", ")", ",", "fontsize", "=", "6.5", ")", ";", "\n", "plt", ".", "xlim", "(", "0", ",", "832", "-", "1", ")", ";", "plt", ".", "ylim", "(", "256", "-", "1", ",", "0", ")", ";", "\n", "fig", ".", "add_subplot", "(", "gs", "[", "0", ",", "2", ":", "4", "]", ")", "\n", "plt", ".", "imshow", "(", "d_ref", ",", "cmap", "=", "'turbo'", ",", "vmax", "=", "14", ")", ";", "plt", ".", "text", "(", "text_xy", "[", "0", "]", ",", "text_xy", "[", "1", "]", ",", "\"$D_{t}$\"", ",", "fontdict", "=", "text_fd", ")", ";", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "and", "plt", ".", "yticks", "(", "[", "]", ")", "if", "args", ".", "save_fig", "else", "plt", ".", "grid", "(", "linestyle", "=", "':'", ",", "linewidth", "=", "0.4", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "832", "-", "1", ")", ";", "plt", ".", "ylim", "(", "256", "-", "1", ",", "0", ")", ";", "\n", "fig", ".", "add_subplot", "(", "gs", "[", "1", ",", "0", ":", "2", "]", ")", "\n", "plt", ".", "imshow", "(", "tgt_masked", ",", "vmax", "=", "1", ")", ";", "plt", ".", "text", "(", "text_xy", "[", "0", "]", ",", "text_xy", "[", "1", "]", ",", "\"$I_{t+1}$\"", ",", "fontdict", "=", "text_fd", ")", ";", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "and", "plt", ".", "yticks", "(", "[", "]", ")", "if", "args", ".", "save_fig", "else", "plt", ".", "grid", "(", "linestyle", "=", "':'", ",", "linewidth", "=", "0.4", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "832", "-", "1", ")", ";", "plt", ".", "ylim", "(", "256", "-", "1", ",", "0", ")", ";", "\n", "fig", ".", "add_subplot", "(", "gs", "[", "1", ",", "2", ":", "4", "]", ")", "\n", "plt", ".", "imshow", "(", "d_tgt", ",", "cmap", "=", "'turbo'", ",", "vmax", "=", "14", ")", ";", "plt", ".", "text", "(", "text_xy", "[", "0", "]", ",", "text_xy", "[", "1", "]", ",", "\"$D_{t+1}$\"", ",", "fontdict", "=", "text_fd", ")", ";", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "and", "plt", ".", "yticks", "(", "[", "]", ")", "if", "args", ".", "save_fig", "else", "plt", ".", "grid", "(", "linestyle", "=", "':'", ",", "linewidth", "=", "0.4", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "832", "-", "1", ")", ";", "plt", ".", "ylim", "(", "256", "-", "1", ",", "0", ")", ";", "\n", "fig", ".", "add_subplot", "(", "gs", "[", "2", ",", "0", ":", "2", "]", ")", "\n", "plt", ".", "imshow", "(", "r2t_obj", ",", "vmax", "=", "1", ")", ";", "plt", ".", "text", "(", "text_xy", "[", "0", "]", ",", "text_xy", "[", "1", "]", ",", "\"Ego-warped objects with motion\"", ",", "fontdict", "=", "text_fd", ",", "size", "=", "10", ")", ";", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "and", "plt", ".", "yticks", "(", "[", "]", ")", "if", "args", ".", "save_fig", "else", "plt", ".", "grid", "(", "linestyle", "=", "':'", ",", "linewidth", "=", "0.4", ")", "\n", "plt", ".", "text", "(", "130", ",", "250", ",", "\"*ego speed {:0.4f},  6-DoF {}\"", ".", "format", "(", "float", "(", "ego_pose", "[", "0", ",", ":", "3", "]", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ")", ",", "ego_pose", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontsize", "=", "7", ",", "bbox", "=", "bbox_b", ",", "ha", "=", "'left'", ",", "va", "=", "'bottom'", ")", ";", "\n", "if", "num_inst", ">", "0", ":", "plt", ".", "text", "(", "7", ",", "7", ",", "\"Obj-1: {:0.4f} {}\"", ".", "format", "(", "float", "(", "obj_pose", "[", "0", ",", ":", "3", "]", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ")", ",", "obj_pose", "[", "0", "]", "[", ":", "3", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontsize", "=", "7", ",", "bbox", "=", "bbox_m", ",", "ha", "=", "'left'", ",", "va", "=", "'top'", ")", ";", "\n", "if", "num_inst", ">", "0", "and", "not", "args", ".", "save_fig", ":", "plt", ".", "text", "(", "330", ",", "7", ",", "\"#1: {:0.4f} {}\"", ".", "format", "(", "float", "(", "tr_fwd", "[", "0", "]", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "sqrt", "(", ")", "[", "0", "]", ")", ",", "tr_fwd", "[", "0", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontsize", "=", "7", ",", "bbox", "=", "bbox_c", ",", "ha", "=", "'left'", ",", "va", "=", "'top'", ")", ";", "\n", "if", "num_inst", ">", "1", ":", "plt", ".", "text", "(", "7", ",", "31", ",", "\"Obj-2: {:0.4f} {}\"", ".", "format", "(", "float", "(", "obj_pose", "[", "1", ",", ":", "3", "]", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ")", ",", "obj_pose", "[", "1", "]", "[", ":", "3", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontsize", "=", "7", ",", "bbox", "=", "bbox_m", ",", "ha", "=", "'left'", ",", "va", "=", "'top'", ")", ";", "\n", "if", "num_inst", ">", "1", "and", "not", "args", ".", "save_fig", ":", "plt", ".", "text", "(", "330", ",", "31", ",", "\"#2: {:0.4f} {}\"", ".", "format", "(", "float", "(", "tr_fwd", "[", "0", "]", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "sqrt", "(", ")", "[", "1", "]", ")", ",", "tr_fwd", "[", "0", "]", "[", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontsize", "=", "7", ",", "bbox", "=", "bbox_c", ",", "ha", "=", "'left'", ",", "va", "=", "'top'", ")", ";", "\n", "if", "num_inst", ">", "2", ":", "plt", ".", "text", "(", "7", ",", "55", ",", "\"Obj-3: {:0.4f} {}\"", ".", "format", "(", "float", "(", "obj_pose", "[", "2", ",", ":", "3", "]", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ")", ",", "obj_pose", "[", "2", "]", "[", ":", "3", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontsize", "=", "7", ",", "bbox", "=", "bbox_m", ",", "ha", "=", "'left'", ",", "va", "=", "'top'", ")", ";", "\n", "if", "num_inst", ">", "2", "and", "not", "args", ".", "save_fig", ":", "plt", ".", "text", "(", "330", ",", "55", ",", "\"#3: {:0.4f} {}\"", ".", "format", "(", "float", "(", "tr_fwd", "[", "0", "]", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "sqrt", "(", ")", "[", "2", "]", ")", ",", "tr_fwd", "[", "0", "]", "[", "2", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontsize", "=", "7", ",", "bbox", "=", "bbox_c", ",", "ha", "=", "'left'", ",", "va", "=", "'top'", ")", ";", "\n", "if", "num_inst", ">", "3", ":", "plt", ".", "text", "(", "7", ",", "79", ",", "\"Obj-4: {:0.4f} {}\"", ".", "format", "(", "float", "(", "obj_pose", "[", "3", ",", ":", "3", "]", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ")", ",", "obj_pose", "[", "3", "]", "[", ":", "3", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontsize", "=", "7", ",", "bbox", "=", "bbox_m", ",", "ha", "=", "'left'", ",", "va", "=", "'top'", ")", ";", "\n", "if", "num_inst", ">", "3", "and", "not", "args", ".", "save_fig", ":", "plt", ".", "text", "(", "330", ",", "79", ",", "\"#4: {:0.4f} {}\"", ".", "format", "(", "float", "(", "tr_fwd", "[", "0", "]", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "sqrt", "(", ")", "[", "3", "]", ")", ",", "tr_fwd", "[", "0", "]", "[", "3", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontsize", "=", "7", ",", "bbox", "=", "bbox_c", ",", "ha", "=", "'left'", ",", "va", "=", "'top'", ")", ";", "\n", "if", "num_inst", ">", "0", "and", "not", "args", ".", "save_fig", ":", "plt", ".", "arrow", "(", "r2t_obj_tail", "[", "0", ",", "0", "]", ",", "r2t_obj_tail", "[", "0", ",", "1", "]", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "0", ",", "0", "]", "+", "r2t_obj_head_gt", "[", "0", ",", "0", "]", ")", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "0", ",", "1", "]", "+", "r2t_obj_head_gt", "[", "0", ",", "1", "]", ")", ",", "width", "=", "2", ",", "head_width", "=", "9", ",", "head_length", "=", "9", ",", "color", "=", "'red'", ",", "alpha", "=", "1", ")", ";", "\n", "if", "num_inst", ">", "0", ":", "plt", ".", "arrow", "(", "r2t_obj_tail", "[", "0", ",", "0", "]", ",", "r2t_obj_tail", "[", "0", ",", "1", "]", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "0", ",", "0", "]", "+", "r2t_obj_head", "[", "0", ",", "0", "]", ")", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "0", ",", "1", "]", "+", "r2t_obj_head", "[", "0", ",", "1", "]", ")", ",", "width", "=", "3", ",", "head_width", "=", "10", ",", "head_length", "=", "9", ",", "color", "=", "'magenta'", ",", "alpha", "=", "1", ")", ";", "\n", "if", "num_inst", ">", "0", ":", "plt", ".", "text", "(", "r2t_obj_tail", "[", "0", ",", "0", "]", "-", "30", ",", "r2t_obj_tail", "[", "0", ",", "1", "]", "+", "25", ",", "\"1: {:0.4f}\"", ".", "format", "(", "float", "(", "obj_pose", "[", "0", ",", ":", "3", "]", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ")", ")", ",", "fontsize", "=", "7", ",", "bbox", "=", "bbox_l", ")", ";", "\n", "if", "num_inst", ">", "1", "and", "not", "args", ".", "save_fig", ":", "plt", ".", "arrow", "(", "r2t_obj_tail", "[", "1", ",", "0", "]", ",", "r2t_obj_tail", "[", "1", ",", "1", "]", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "1", ",", "0", "]", "+", "r2t_obj_head_gt", "[", "1", ",", "0", "]", ")", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "1", ",", "1", "]", "+", "r2t_obj_head_gt", "[", "1", ",", "1", "]", ")", ",", "width", "=", "2", ",", "head_width", "=", "9", ",", "head_length", "=", "9", ",", "color", "=", "'red'", ",", "alpha", "=", "1", ")", ";", "\n", "if", "num_inst", ">", "1", ":", "plt", ".", "arrow", "(", "r2t_obj_tail", "[", "1", ",", "0", "]", ",", "r2t_obj_tail", "[", "1", ",", "1", "]", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "1", ",", "0", "]", "+", "r2t_obj_head", "[", "1", ",", "0", "]", ")", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "1", ",", "1", "]", "+", "r2t_obj_head", "[", "1", ",", "1", "]", ")", ",", "width", "=", "3", ",", "head_width", "=", "10", ",", "head_length", "=", "9", ",", "color", "=", "'magenta'", ",", "alpha", "=", "1", ")", ";", "\n", "if", "num_inst", ">", "1", ":", "plt", ".", "text", "(", "r2t_obj_tail", "[", "1", ",", "0", "]", "-", "30", ",", "r2t_obj_tail", "[", "1", ",", "1", "]", "+", "25", ",", "\"2: {:0.4f}\"", ".", "format", "(", "float", "(", "obj_pose", "[", "1", ",", ":", "3", "]", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ")", ")", ",", "fontsize", "=", "7", ",", "bbox", "=", "bbox_l", ")", ";", "\n", "if", "num_inst", ">", "2", "and", "not", "args", ".", "save_fig", ":", "plt", ".", "arrow", "(", "r2t_obj_tail", "[", "2", ",", "0", "]", ",", "r2t_obj_tail", "[", "2", ",", "1", "]", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "2", ",", "0", "]", "+", "r2t_obj_head_gt", "[", "2", ",", "0", "]", ")", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "2", ",", "1", "]", "+", "r2t_obj_head_gt", "[", "2", ",", "1", "]", ")", ",", "width", "=", "2", ",", "head_width", "=", "9", ",", "head_length", "=", "9", ",", "color", "=", "'red'", ",", "alpha", "=", "1", ")", ";", "\n", "if", "num_inst", ">", "2", ":", "plt", ".", "arrow", "(", "r2t_obj_tail", "[", "2", ",", "0", "]", ",", "r2t_obj_tail", "[", "2", ",", "1", "]", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "2", ",", "0", "]", "+", "r2t_obj_head", "[", "2", ",", "0", "]", ")", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "2", ",", "1", "]", "+", "r2t_obj_head", "[", "2", ",", "1", "]", ")", ",", "width", "=", "3", ",", "head_width", "=", "10", ",", "head_length", "=", "9", ",", "color", "=", "'magenta'", ",", "alpha", "=", "1", ")", ";", "\n", "if", "num_inst", ">", "2", ":", "plt", ".", "text", "(", "r2t_obj_tail", "[", "2", ",", "0", "]", "-", "30", ",", "r2t_obj_tail", "[", "2", ",", "1", "]", "+", "25", ",", "\"3: {:0.4f}\"", ".", "format", "(", "float", "(", "obj_pose", "[", "2", ",", ":", "3", "]", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ")", ")", ",", "fontsize", "=", "7", ",", "bbox", "=", "bbox_l", ")", ";", "\n", "if", "num_inst", ">", "3", "and", "not", "args", ".", "save_fig", ":", "plt", ".", "arrow", "(", "r2t_obj_tail", "[", "3", ",", "0", "]", ",", "r2t_obj_tail", "[", "3", ",", "1", "]", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "3", ",", "0", "]", "+", "r2t_obj_head_gt", "[", "3", ",", "0", "]", ")", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "3", ",", "1", "]", "+", "r2t_obj_head_gt", "[", "3", ",", "1", "]", ")", ",", "width", "=", "2", ",", "head_width", "=", "9", ",", "head_length", "=", "9", ",", "color", "=", "'red'", ",", "alpha", "=", "1", ")", ";", "\n", "if", "num_inst", ">", "3", ":", "plt", ".", "arrow", "(", "r2t_obj_tail", "[", "3", ",", "0", "]", ",", "r2t_obj_tail", "[", "3", ",", "1", "]", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "3", ",", "0", "]", "+", "r2t_obj_head", "[", "3", ",", "0", "]", ")", ",", "arr_scale", "*", "(", "-", "r2t_obj_tail", "[", "3", ",", "1", "]", "+", "r2t_obj_head", "[", "3", ",", "1", "]", ")", ",", "width", "=", "3", ",", "head_width", "=", "10", ",", "head_length", "=", "9", ",", "color", "=", "'magenta'", ",", "alpha", "=", "1", ")", ";", "\n", "if", "num_inst", ">", "3", ":", "plt", ".", "text", "(", "r2t_obj_tail", "[", "3", ",", "0", "]", "-", "30", ",", "r2t_obj_tail", "[", "3", ",", "1", "]", "+", "25", ",", "\"4: {:0.4f}\"", ".", "format", "(", "float", "(", "obj_pose", "[", "3", ",", ":", "3", "]", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ")", ")", ",", "fontsize", "=", "7", ",", "bbox", "=", "bbox_l", ")", ";", "\n", "plt", ".", "xlim", "(", "0", ",", "832", "-", "1", ")", ";", "plt", ".", "ylim", "(", "256", "-", "1", ",", "0", ")", ";", "\n", "fig", ".", "add_subplot", "(", "gs", "[", "3", ",", "0", ":", "2", "]", ")", "\n", "plt", ".", "imshow", "(", "i_w_occ", ",", "vmax", "=", "1", ")", ";", "plt", ".", "text", "(", "text_xy", "[", "0", "]", ",", "text_xy", "[", "1", "]", ",", "\"Final synthesis (yellow: dis/occlusion)\"", ",", "fontdict", "=", "text_fd", ",", "size", "=", "10", ")", ";", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "and", "plt", ".", "yticks", "(", "[", "]", ")", "if", "args", ".", "save_fig", "else", "plt", ".", "grid", "(", "linestyle", "=", "':'", ",", "linewidth", "=", "0.4", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "832", "-", "1", ")", ";", "plt", ".", "ylim", "(", "256", "-", "1", ",", "0", ")", ";", "\n", "fig", ".", "add_subplot", "(", "gs", "[", "4", ",", "0", ":", "2", "]", ")", "\n", "plt", ".", "imshow", "(", "tgt_diff", ",", "cmap", "=", "'bone'", ",", "vmax", "=", "0.5", ")", ";", "plt", ".", "text", "(", "text_xy", "[", "0", "]", ",", "text_xy", "[", "1", "]", ",", "\"$I_{diff}$\"", ",", "fontdict", "=", "text_fd", ")", ";", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "and", "plt", ".", "yticks", "(", "[", "]", ")", "if", "args", ".", "save_fig", "else", "plt", ".", "grid", "(", "linestyle", "=", "':'", ",", "linewidth", "=", "0.4", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "832", "-", "1", ")", ";", "plt", ".", "ylim", "(", "256", "-", "1", ",", "0", ")", ";", "\n", "\n", "### 3d plot 1: cam-coord ###", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "gs", "[", "3", ":", "5", ",", "2", ":", "4", "]", ",", "projection", "=", "'3d'", ")", "\n", "ax1_axfont", "=", "{", "'family'", ":", "'sans'", ",", "'size'", ":", "12", ",", "'weight'", ":", "'heavy'", ",", "'style'", ":", "'italic'", ",", "'color'", ":", "'gray'", "}", "\n", "ax1_titlefont", "=", "{", "'family'", ":", "'sans'", ",", "'size'", ":", "12", ",", "'color'", ":", "'black'", ",", "'ha'", ":", "'center'", ",", "'va'", ":", "'bottom'", ",", "'linespacing'", ":", "2", "}", "\n", "ax1_annotfont", "=", "{", "'family'", ":", "'sans'", ",", "'size'", ":", "8", ",", "'color'", ":", "'black'", ",", "'ha'", ":", "'center'", ",", "'va'", ":", "'center'", "}", "\n", "ax1", ".", "scatter", "(", "X_r2t", ",", "Y_r2t", ",", "Z_r2t", ",", "c", "=", "C_r2t", ".", "transpose", "(", "1", ",", "0", ")", ",", "s", "=", "1", ",", "alpha", "=", "0.4", ")", "\n", "ax1", ".", "scatter", "(", "X_rtt", ",", "Y_rtt", ",", "Z_rtt", ",", "c", "=", "C_rtt", ".", "transpose", "(", "1", ",", "0", ")", ",", "s", "=", "1", ",", "alpha", "=", "0.6", ")", "\n", "ax1", ".", "scatter", "(", "X_tgt", ",", "Y_tgt", ",", "Z_tgt", ",", "c", "=", "C_tgt", ".", "transpose", "(", "1", ",", "0", ")", ",", "s", "=", "1", ",", "alpha", "=", "0.4", ")", "\n", "ax1", ".", "set_xlabel", "(", "'X'", ",", "fontdict", "=", "ax1_axfont", ")", ";", "ax1", ".", "set_zlabel", "(", "'Z'", ",", "fontdict", "=", "ax1_axfont", ")", ";", "\n", "ax1", ".", "axes", ".", "yaxis", ".", "set_ticklabels", "(", "[", "]", ")", "\n", "ax1", ".", "set_xlim", "(", "-", "xlim_1", ",", "xlim_1", ")", "\n", "ax1", ".", "set_ylim", "(", "-", "ylim_1", ",", "ylim_1", ")", "\n", "ax1", ".", "set_zlim", "(", "0", ",", "zlim_1", ")", "\n", "ax1", ".", "text", "(", "0", ",", "0", ",", "zlim_1", "*", "1.20", ",", "\"[Top-view] Objects in {$t+1$} frame on camera coordinate\\n(red: ego-warped $t$\u2192$t+1$, yellow: final-warped $t$\u2192$t+1$, blue: $t+1$)\"", ",", "fontdict", "=", "ax1_titlefont", ")", "\n", "if", "num_inst", ">", "0", ":", "ax1", ".", "text", "(", "-", "xlim_1", "/", "2", ",", "0", ",", "zlim_1", "*", "1.10", ",", "\"1: XYZ {}\"", ".", "format", "(", "r2t_obj_3d_locs", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontdict", "=", "ax1_annotfont", ",", "bbox", "=", "bbox_c", ")", ";", "\n", "if", "num_inst", ">", "0", ":", "ax1", ".", "text", "(", "-", "xlim_1", "/", "2", ",", "0", ",", "zlim_1", "*", "1.05", ",", "\"1: XYZ {}\"", ".", "format", "(", "rtt_obj_3d_locs", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontdict", "=", "ax1_annotfont", ",", "bbox", "=", "bbox_y", ")", ";", "\n", "if", "num_inst", ">", "0", ":", "ax1", ".", "text", "(", "-", "xlim_1", "/", "2", ",", "0", ",", "zlim_1", "*", "1.00", ",", "\"1: XYZ {}\"", ".", "format", "(", "tgt_obj_3d_locs", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontdict", "=", "ax1_annotfont", ",", "bbox", "=", "bbox_b", ")", ";", "\n", "if", "num_inst", ">", "1", ":", "ax1", ".", "text", "(", "+", "xlim_1", "/", "2", ",", "0", ",", "zlim_1", "*", "1.10", ",", "\"2: XYZ {}\"", ".", "format", "(", "r2t_obj_3d_locs", "[", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontdict", "=", "ax1_annotfont", ",", "bbox", "=", "bbox_c", ")", ";", "\n", "if", "num_inst", ">", "1", ":", "ax1", ".", "text", "(", "+", "xlim_1", "/", "2", ",", "0", ",", "zlim_1", "*", "1.05", ",", "\"2: XYZ {}\"", ".", "format", "(", "rtt_obj_3d_locs", "[", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontdict", "=", "ax1_annotfont", ",", "bbox", "=", "bbox_y", ")", ";", "\n", "if", "num_inst", ">", "1", ":", "ax1", ".", "text", "(", "+", "xlim_1", "/", "2", ",", "0", ",", "zlim_1", "*", "1.00", ",", "\"2: XYZ {}\"", ".", "format", "(", "tgt_obj_3d_locs", "[", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", ")", ",", "fontdict", "=", "ax1_annotfont", ",", "bbox", "=", "bbox_b", ")", ";", "\n", "ax1", ".", "get_proj", "=", "lambda", ":", "np", ".", "dot", "(", "Axes3D", ".", "get_proj", "(", "ax1", ")", ",", "np", ".", "diag", "(", "[", "2", ",", "1", ",", "2", ",", "1", "]", ")", ")", "\n", "ax1", ".", "view_init", "(", "elev", "=", "0", ",", "azim", "=", "-", "90", ")", "\n", "\n", "### 3d plot 2: world-coord ###", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "gs", "[", "1", ":", "5", ",", "4", ":", "6", "]", ",", "projection", "=", "'3d'", ")", "\n", "ax2_axfont", "=", "{", "'family'", ":", "'sans'", ",", "'size'", ":", "14", ",", "'weight'", ":", "'heavy'", ",", "'style'", ":", "'italic'", ",", "'color'", ":", "'gray'", "}", "\n", "ax2_titlefont", "=", "{", "'family'", ":", "'sans'", ",", "'size'", ":", "12", ",", "'color'", ":", "'black'", ",", "'ha'", ":", "'center'", ",", "'va'", ":", "'center'", "}", "\n", "ax2", ".", "scatter", "(", "XYZ_global_tgt", "[", ":", ",", "0", ",", "0", "]", ",", "XYZ_global_tgt", "[", ":", ",", "1", ",", "0", "]", ",", "XYZ_global_tgt", "[", ":", ",", "2", ",", "0", "]", ",", "c", "=", "C_global_tgt", ".", "transpose", "(", "1", ",", "0", ")", ",", "s", "=", "6", ",", "zorder", "=", "vidx", "+", "1", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "egoOs", ")", "-", "1", ")", ":", "dR", ".", "drawVector", "(", "ax2", ",", "egoOs", "[", "ii", "]", ",", "egoOs", "[", "ii", "+", "1", "]", ",", "mutation_scale", "=", "1", ",", "alpha", "=", "0.5", ",", "arrowstyle", "=", "'-'", ",", "lineStyle", "=", "':'", ",", "lineWidth", "=", "1", ",", "lineColor", "=", "'k'", ",", "zorder", "=", "vidx", "+", "2", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "egoOs", ")", ")", ":", "\n", "            ", "if", "ii", ">=", "len", "(", "egoOs", ")", "-", "1", ":", "\n", "                ", "dR", ".", "drawPointWithAxis", "(", "ax2", ",", "egoOs", "[", "ii", "]", ",", "egoXs", "[", "ii", "]", "-", "egoOs", "[", "ii", "]", ",", "egoYs", "[", "ii", "]", "-", "egoOs", "[", "ii", "]", ",", "egoZs", "[", "ii", "]", "-", "egoOs", "[", "ii", "]", ",", "mutation_scale", "=", "3", ",", "alpha", "=", "1.0", ",", "arrowstyle", "=", "'-'", ",", "lineWidth", "=", "2.0", ",", "vectorLength", "=", "2", ",", "zorder", "=", "vidx", "+", "4", ")", "\n", "ax2", ".", "text", "(", "egoOs", "[", "ii", ",", "0", "]", "-", "xlim_2", "/", "4", ",", "egoOs", "[", "ii", ",", "1", "]", ",", "egoOs", "[", "ii", ",", "2", "]", ",", "\"{:0.4f}\"", ".", "format", "(", "np", ".", "linalg", ".", "norm", "(", "egoOs", "[", "ii", "]", "-", "egoOs", "[", "ii", "-", "1", "]", ")", ".", "round", "(", "4", ")", ")", ",", "fontsize", "=", "8", ",", "bbox", "=", "bbox_w", ",", "zorder", "=", "vidx", "+", "5", ")", ";", "\n", "", "else", ":", "\n", "                ", "dR", ".", "drawPointWithAxis", "(", "ax2", ",", "egoOs", "[", "ii", "]", ",", "egoXs", "[", "ii", "]", "-", "egoOs", "[", "ii", "]", ",", "egoYs", "[", "ii", "]", "-", "egoOs", "[", "ii", "]", ",", "egoZs", "[", "ii", "]", "-", "egoOs", "[", "ii", "]", ",", "mutation_scale", "=", "1", ",", "alpha", "=", "0.4", ",", "arrowstyle", "=", "'-'", ",", "lineWidth", "=", "1.5", ",", "zorder", "=", "vidx", "+", "3", ")", "\n", "", "", "for", "ii", "in", "range", "(", "len", "(", "objOs", ")", ")", ":", "\n", "            ", "if", "ii", ">=", "len", "(", "objOs", ")", "-", "len", "(", "obj_pose", ")", ":", "\n", "                ", "if", "np", ".", "linalg", ".", "norm", "(", "objOs", "[", "ii", "]", "-", "objHs", "[", "ii", "]", ",", "2", ")", "<", "0.1", "and", "np", ".", "linalg", ".", "norm", "(", "objOs", "[", "ii", "]", "-", "objHs", "[", "ii", "]", ",", "2", ")", ">", "0.002", ":", "\n", "                    ", "dR", ".", "drawVector", "(", "ax2", ",", "objOs", "[", "ii", "]", ",", "objHs", "[", "ii", "]", ",", "mutation_scale", "=", "20", ",", "arrowstyle", "=", "'fancy'", ",", "pointEnable", "=", "False", ",", "lineWidth", "=", "0.5", ",", "faceColor", "=", "colors", "[", "objIDs_flatten", "[", "ii", "]", "]", ",", "edgeColor", "=", "'k'", ",", "zorder", "=", "vidx", "+", "20", ")", ";", "\n", "ax2", ".", "text", "(", "objHs", "[", "ii", "]", "[", "0", "]", "-", "xlim_2", "/", "4", ",", "objHs", "[", "ii", "]", "[", "1", "]", ",", "objHs", "[", "ii", "]", "[", "2", "]", ",", "\"{:0.4f}\"", ".", "format", "(", "(", "np", ".", "linalg", ".", "norm", "(", "objOs", "[", "ii", "]", "-", "objHs", "[", "ii", "]", ")", "/", "obj_vo_scale", ")", ".", "round", "(", "4", ")", ")", ",", "fontsize", "=", "8", ",", "bbox", "=", "bbox_w", ",", "zorder", "=", "vidx", "+", "30", ")", ";", "\n", "", "", "else", ":", "\n", "                ", "if", "np", ".", "linalg", ".", "norm", "(", "objOs", "[", "ii", "]", "-", "objHs", "[", "ii", "]", ",", "2", ")", "<", "0.1", "and", "np", ".", "linalg", ".", "norm", "(", "objOs", "[", "ii", "]", "-", "objHs", "[", "ii", "]", ",", "2", ")", ">", "0.002", ":", "\n", "                    ", "dR", ".", "drawVector", "(", "ax2", ",", "objOs", "[", "ii", "]", ",", "objHs", "[", "ii", "]", ",", "mutation_scale", "=", "20", ",", "alpha", "=", "0.3", ",", "arrowstyle", "=", "'fancy'", ",", "pointEnable", "=", "False", ",", "lineWidth", "=", "0.5", ",", "faceColor", "=", "colors", "[", "objIDs_flatten", "[", "ii", "]", "]", ",", "edgeColor", "=", "'k'", ",", "zorder", "=", "vidx", "+", "10", ")", ";", "\n", "", "", "", "ax2", ".", "text", "(", "-", "xlim_2", "*", "0.9", ",", "0", ",", "zlim_2", "*", "0.02", ",", "\"Speed\"", ",", "fontsize", "=", "9", ",", "style", "=", "'italic'", ",", "bbox", "=", "bbox_w", ",", "zorder", "=", "vidx", "+", "25", ")", ";", "\n", "ax2", ".", "set_xlabel", "(", "'X'", ",", "fontdict", "=", "ax2_axfont", ")", ";", "ax2", ".", "set_zlabel", "(", "'Z'", ",", "fontdict", "=", "ax2_axfont", ")", ";", "\n", "ax2", ".", "axes", ".", "yaxis", ".", "set_ticklabels", "(", "[", "]", ")", "\n", "ax2", ".", "set_xlim", "(", "-", "xlim_2", ",", "xlim_2", ")", "\n", "ax2", ".", "set_ylim", "(", "-", "ylim_2", ",", "ylim_2", ")", "\n", "ax2", ".", "set_zlim", "(", "0", ",", "zlim_2", ")", "\n", "ax2", ".", "get_proj", "=", "lambda", ":", "np", ".", "dot", "(", "Axes3D", ".", "get_proj", "(", "ax2", ")", ",", "np", ".", "diag", "(", "[", "1.2", ",", "0.6", ",", "2.4", ",", "1", "]", ")", ")", "\n", "ax2", ".", "xaxis", ".", "_axinfo", "[", "'juggled'", "]", "=", "(", "2", ",", "0", ",", "1", ")", "\n", "ax2", ".", "yaxis", ".", "_axinfo", "[", "'juggled'", "]", "=", "(", "2", ",", "1", ",", "0", ")", "\n", "ax2", ".", "zaxis", ".", "_axinfo", "[", "'juggled'", "]", "=", "(", "0", ",", "2", ",", "1", ")", "\n", "elv", "=", "2", ";", "azm", "=", "1", ";", "\n", "if", "'cityscapes'", "in", "args", ".", "data", ":", "\n", "            ", "ax2", ".", "view_init", "(", "elev", "=", "-", "0.01", "-", "elv", "*", "vidx", ",", "azim", "=", "-", "90", "+", "azm", "*", "vidx", ")", "\n", "# ax2.view_init(elev=-0.01-elv*vidx, azim=-90.01-azm*vidx)", "\n", "", "else", ":", "\n", "            ", "if", "vidx", "<=", "10", ":", "ax2", ".", "view_init", "(", "elev", "=", "-", "0.01", "-", "elv", "*", "vidx", ",", "azim", "=", "-", "90", "+", "azm", "*", "vidx", ")", "# elev: -0~-40, azim: -90~-70", "\n", "if", "10", "<", "vidx", "and", "vidx", "<=", "20", ":", "ax2", ".", "view_init", "(", "elev", "=", "-", "0.01", "-", "elv", "*", "10", "+", "elv", "*", "(", "vidx", "-", "10", ")", ",", "azim", "=", "-", "90", "+", "azm", "*", "10", "-", "azm", "*", "(", "vidx", "-", "10", ")", ")", "# elev: -40~-0, azim: -70~-90", "\n", "if", "20", "<", "vidx", "and", "vidx", "<=", "30", ":", "ax2", ".", "view_init", "(", "elev", "=", "-", "0.01", "-", "elv", "*", "(", "vidx", "-", "20", ")", ",", "azim", "=", "-", "90", "-", "azm", "*", "(", "vidx", "-", "20", ")", ")", "# elev: -0~-40, azim: -90~-110", "\n", "if", "30", "<", "vidx", "and", "vidx", "<=", "40", ":", "ax2", ".", "view_init", "(", "elev", "=", "-", "0.01", "-", "elv", "*", "10", "+", "elv", "*", "(", "vidx", "-", "30", ")", ",", "azim", "=", "-", "90", "-", "azm", "*", "10", "+", "azm", "*", "(", "vidx", "-", "30", ")", ")", "# elev: -40~-0, azim: -110~-90", "\n", "if", "40", "<", "vidx", "and", "vidx", "<=", "50", ":", "ax2", ".", "view_init", "(", "elev", "=", "-", "0.01", "-", "elv", "*", "(", "vidx", "-", "40", ")", ",", "azim", "=", "-", "90", "+", "azm", "*", "(", "vidx", "-", "40", ")", ")", "# elev: -0~-40, azim: -90~-70", "\n", "if", "50", "<", "vidx", "and", "vidx", "<=", "60", ":", "ax2", ".", "view_init", "(", "elev", "=", "-", "0.01", "-", "elv", "*", "10", "+", "elv", "*", "(", "vidx", "-", "50", ")", ",", "azim", "=", "-", "90", "+", "azm", "*", "10", "-", "azm", "*", "(", "vidx", "-", "50", ")", ")", "# elev: -40~-0, azim: -70~-90", "\n", "", "ax2", ".", "dist", "=", "10", "+", "0.1", "*", "vidx", "\n", "ax2_title", "=", "fig", ".", "add_subplot", "(", "gs", "[", "4", ",", "4", ":", "6", "]", ")", "\n", "ax2_title", ".", "axis", "(", "'off'", ")", "\n", "ax2_title", ".", "text", "(", "0.5", ",", "0.5", ",", "'[Top-view] Unified visual odometry on world coordinate'", ",", "fontdict", "=", "ax2_titlefont", ")", "\n", "plt", ".", "tight_layout", "(", ")", ";", "\n", "\n", "\n", "if", "args", ".", "save_fig", ":", "\n", "            ", "print", "(", "'>> Saving image #{:02d}'", ".", "format", "(", "vidx", ")", ")", "\n", "# plt.savefig('{:}/{:}_{:04d}.png'.format(args.save_path, Path(args.data).basename(), i), dpi=100)", "\n", "plt", ".", "savefig", "(", "'{:}/{:04d}.png'", ".", "format", "(", "args", ".", "save_path", ",", "vidx", ")", ",", "dpi", "=", "100", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "ion", "(", ")", ";", "plt", ".", "show", "(", ")", ";", "\n", "print", "(", "'>> Type \\'c\\' to continue'", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n", "", "vidx", "+=", "1", "\n", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo.load_as_float": [[619, 621], ["imageio.imread().astype", "imageio.imread"], "function", ["None"], ["", "def", "load_as_float", "(", "path", ")", ":", "\n", "    ", "return", "imread", "(", "path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo.load_flo_as_float": [[623, 626], ["numpy.array().astype", "numpy.array", "flow_io.flow_read"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.flow_io.flow_read"], ["", "def", "load_flo_as_float", "(", "path", ")", ":", "\n", "    ", "out", "=", "np", ".", "array", "(", "flow_read", "(", "path", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo.load_seg_as_float": [[628, 631], ["numpy.load().astype", "numpy.load"], "function", ["None"], ["", "def", "load_seg_as_float", "(", "path", ")", ":", "\n", "    ", "out", "=", "np", ".", "load", "(", "path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo.L2_norm": [[633, 637], ["torch.norm", "torch.norm", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "L2_norm", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ":", "\n", "    ", "curr_offset", "=", "1e-10", "\n", "l2_norm", "=", "torch", ".", "norm", "(", "torch", ".", "abs", "(", "x", ")", "+", "curr_offset", ",", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "\n", "return", "l2_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo.find_noc_masks": [[639, 661], ["rigid_warp.flow_warp", "rigid_warp.flow_warp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.max", "torch.max", "torch.max", "torch.max", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "demo.L2_norm", "demo.L2_norm", "demo.L2_norm", "demo.L2_norm"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.L2_norm", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.L2_norm", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.L2_norm", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.L2_norm"], ["", "def", "find_noc_masks", "(", "fwd_flow", ",", "bwd_flow", ")", ":", "\n", "    ", "'''\n    fwd_flow: torch.size([1, 2, 256, 832])\n    bwd_flow: torch.size([1, 2, 256, 832])\n    output: torch.size([1, 1, 256, 832]), torch.size([1, 1, 256, 832])\n\n    input shape of flow_warp(): torch.size([bs, 2, 256, 832])\n    '''", "\n", "bwd2fwd_flow", ",", "_", "=", "flow_warp", "(", "bwd_flow", ",", "fwd_flow", ")", "\n", "fwd2bwd_flow", ",", "_", "=", "flow_warp", "(", "fwd_flow", ",", "bwd_flow", ")", "\n", "\n", "fwd_flow_diff", "=", "torch", ".", "abs", "(", "bwd2fwd_flow", "+", "fwd_flow", ")", "\n", "bwd_flow_diff", "=", "torch", ".", "abs", "(", "fwd2bwd_flow", "+", "bwd_flow", ")", "\n", "\n", "fwd_consist_bound", "=", "torch", ".", "max", "(", "0.05", "*", "L2_norm", "(", "fwd_flow", ")", ",", "torch", ".", "Tensor", "(", "[", "3.0", "]", ")", ")", "\n", "bwd_consist_bound", "=", "torch", ".", "max", "(", "0.05", "*", "L2_norm", "(", "bwd_flow", ")", ",", "torch", ".", "Tensor", "(", "[", "3.0", "]", ")", ")", "\n", "\n", "noc_mask_0", "=", "(", "L2_norm", "(", "fwd_flow_diff", ")", "<", "fwd_consist_bound", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "# noc_mask_tgt, torch.Size([1, 1, 256, 832]), torch.float32", "\n", "noc_mask_1", "=", "(", "L2_norm", "(", "bwd_flow_diff", ")", "<", "bwd_consist_bound", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "# noc_mask_src, torch.Size([1, 1, 256, 832]), torch.float32", "\n", "# pdb.set_trace()", "\n", "\n", "return", "noc_mask_0", ",", "noc_mask_1", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo.inst_iou": [[663, 698], ["range", "torch.max", "torch.max", "valid_mask.repeat", "valid_mask.repeat", "torch.cat", "torch.cat", "torch.from_numpy", "torch.from_numpy", "numpy.zeros().astype", "iou_inst.unsqueeze", "numpy.zeros", "seg_src_m[].unsqueeze().repeat", "seg_src_m[].unsqueeze().repeat", "seg_src_m[].unsqueeze", "seg_src_m[].unsqueeze"], "function", ["None"], ["", "def", "inst_iou", "(", "seg_src", ",", "seg_tgt", ",", "valid_mask", ")", ":", "\n", "    ", "'''\n    -> seg_src\uc758 \uc778\uc2a4\ud134\uc2a4\ub4e4\uc774 seg_tgt\uc758 \uba87 \ubc88\uc9f8 \ucc44\ub110 \uc778\uc2a4\ud134\uc2a4\uc5d0 \ub9e4\uce6d\ub418\ub294\uac00?\n\n    seg_src: torch.Size([1, n_inst, 256, 832])\n    seg_tgt:  torch.Size([1, n_inst, 256, 832])\n    valid_mask: torch.Size([1, 1, 256, 832])\n    '''", "\n", "n_inst_src", "=", "seg_src", ".", "shape", "[", "1", "]", "\n", "n_inst_tgt", "=", "seg_tgt", ".", "shape", "[", "1", "]", "\n", "\n", "seg_src_m", "=", "seg_src", "*", "valid_mask", ".", "repeat", "(", "1", ",", "n_inst_src", ",", "1", ",", "1", ")", "\n", "seg_tgt_m", "=", "seg_tgt", "*", "valid_mask", ".", "repeat", "(", "1", ",", "n_inst_tgt", ",", "1", ",", "1", ")", "\n", "# pdb.set_trace()", "\n", "'''\n    plt.figure(1), plt.imshow(seg_src.sum(dim=0).sum(dim=0)), plt.colorbar(), plt.ion(), plt.show()\n    plt.figure(2), plt.imshow(seg_tgt.sum(dim=0).sum(dim=0)),  plt.colorbar(), plt.ion(), plt.show()\n    plt.figure(3), plt.imshow(valid_mask[0,0]),  plt.colorbar(), plt.ion(), plt.show()\n    plt.figure(4), plt.imshow(seg_src_m.sum(dim=0).sum(dim=0)),  plt.colorbar(), plt.ion(), plt.show()\n    '''", "\n", "for", "i", "in", "range", "(", "n_inst_src", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "match_table", "=", "torch", ".", "from_numpy", "(", "np", ".", "zeros", "(", "[", "1", ",", "n_inst_tgt", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "continue", ";", "\n", "\n", "", "overl", "=", "(", "seg_src_m", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "n_inst_tgt", ",", "1", ",", "1", ")", "*", "seg_tgt_m", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "1", ")", ".", "squeeze", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "sum", "(", "1", ")", "\n", "union", "=", "(", "seg_src_m", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "n_inst_tgt", ",", "1", ",", "1", ")", "+", "seg_tgt_m", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "1", ")", ".", "squeeze", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "sum", "(", "1", ")", "\n", "\n", "iou_inst", "=", "overl", "/", "union", "\n", "match_table", "=", "torch", ".", "cat", "(", "(", "match_table", ",", "iou_inst", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "iou", ",", "inst_idx", "=", "torch", ".", "max", "(", "match_table", ",", "dim", "=", "1", ")", "\n", "# pdb.set_trace()", "\n", "\n", "return", "iou", ",", "inst_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo.recursive_check_nonzero_inst": [[700, 725], ["int", "range", "tgt_inst[].mean", "ref_inst[].mean", "tgt_inst[].mean", "tgt_inst[].mean", "demo.recursive_check_nonzero_inst", "ref_inst[].mean", "demo.recursive_check_nonzero_inst", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tgt_inst.size", "tgt_inst.size", "ref_inst.size", "ref_inst.size", "tgt_inst.size", "tgt_inst.size", "ref_inst.size", "ref_inst.size"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.recursive_check_nonzero_inst", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.recursive_check_nonzero_inst"], ["", "def", "recursive_check_nonzero_inst", "(", "tgt_inst", ",", "ref_inst", ")", ":", "\n", "    ", "assert", "(", "tgt_inst", "[", "0", "]", ".", "mean", "(", ")", "==", "ref_inst", "[", "0", "]", ".", "mean", "(", ")", ")", "\n", "n_inst", "=", "int", "(", "tgt_inst", "[", "0", "]", ".", "mean", "(", ")", ")", "\n", "for", "nn", "in", "range", "(", "n_inst", ")", ":", "\n", "        ", "if", "tgt_inst", "[", "nn", "+", "1", "]", ".", "mean", "(", ")", "==", "0", ":", "\n", "            ", "tgt_inst", "[", "0", "]", "-=", "1", "\n", "ref_inst", "[", "0", "]", "-=", "1", "\n", "if", "nn", "+", "1", "==", "n_inst", ":", "\n", "                ", "tgt_inst", "[", "nn", "+", "1", ":", "]", "=", "0", "\n", "ref_inst", "[", "nn", "+", "1", ":", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "tgt_inst", "[", "nn", "+", "1", ":", "]", "=", "torch", ".", "cat", "(", "[", "tgt_inst", "[", "nn", "+", "2", ":", "]", ",", "torch", ".", "zeros", "(", "1", ",", "tgt_inst", ".", "size", "(", "1", ")", ",", "tgt_inst", ".", "size", "(", "2", ")", ")", "]", ",", "dim", "=", "0", ")", "# re-ordering", "\n", "ref_inst", "[", "nn", "+", "1", ":", "]", "=", "torch", ".", "cat", "(", "[", "ref_inst", "[", "nn", "+", "2", ":", "]", ",", "torch", ".", "zeros", "(", "1", ",", "ref_inst", ".", "size", "(", "1", ")", ",", "ref_inst", ".", "size", "(", "2", ")", ")", "]", ",", "dim", "=", "0", ")", "# re-ordering", "\n", "", "return", "recursive_check_nonzero_inst", "(", "tgt_inst", ",", "ref_inst", ")", "\n", "", "if", "ref_inst", "[", "nn", "+", "1", "]", ".", "mean", "(", ")", "==", "0", ":", "\n", "            ", "tgt_inst", "[", "0", "]", "-=", "1", "\n", "ref_inst", "[", "0", "]", "-=", "1", "\n", "if", "nn", "+", "1", "==", "n_inst", ":", "\n", "                ", "tgt_inst", "[", "nn", "+", "1", ":", "]", "=", "0", "\n", "ref_inst", "[", "nn", "+", "1", ":", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "tgt_inst", "[", "nn", "+", "1", ":", "]", "=", "torch", ".", "cat", "(", "[", "tgt_inst", "[", "nn", "+", "2", ":", "]", ",", "torch", ".", "zeros", "(", "1", ",", "tgt_inst", ".", "size", "(", "1", ")", ",", "tgt_inst", ".", "size", "(", "2", ")", ")", "]", ",", "dim", "=", "0", ")", "# re-ordering", "\n", "ref_inst", "[", "nn", "+", "1", ":", "]", "=", "torch", ".", "cat", "(", "[", "ref_inst", "[", "nn", "+", "2", ":", "]", ",", "torch", ".", "zeros", "(", "1", ",", "ref_inst", ".", "size", "(", "1", ")", ",", "ref_inst", ".", "size", "(", "2", ")", ")", "]", ",", "dim", "=", "0", ")", "# re-ordering", "\n", "", "return", "recursive_check_nonzero_inst", "(", "tgt_inst", ",", "ref_inst", ")", "\n", "", "", "return", "tgt_inst", ",", "ref_inst", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.set_id_grid": [[24, 32], ["depth.size", "torch.arange().view().expand().type_as", "torch.arange().view().expand().type_as", "torch.arange().view().expand().type_as", "torch.arange().view().expand().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.stack", "torch.stack", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.ones", "torch.ones", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["def", "set_id_grid", "(", "depth", ")", ":", "\n", "    ", "global", "pixel_coords", "\n", "b", ",", "h", ",", "w", "=", "depth", ".", "size", "(", ")", "\n", "i_range", "=", "torch", ".", "arange", "(", "0", ",", "h", ")", ".", "view", "(", "1", ",", "h", ",", "1", ")", ".", "expand", "(", "1", ",", "h", ",", "w", ")", ".", "type_as", "(", "depth", ")", "# [1, H, W]", "\n", "j_range", "=", "torch", ".", "arange", "(", "0", ",", "w", ")", ".", "view", "(", "1", ",", "1", ",", "w", ")", ".", "expand", "(", "1", ",", "h", ",", "w", ")", ".", "type_as", "(", "depth", ")", "# [1, H, W]", "\n", "ones", "=", "torch", ".", "ones", "(", "1", ",", "h", ",", "w", ")", ".", "type_as", "(", "depth", ")", "\n", "\n", "pixel_coords", "=", "torch", ".", "stack", "(", "(", "j_range", ",", "i_range", ",", "ones", ")", ",", "dim", "=", "1", ")", "# [1, 3, H, W]", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes": [[35, 41], ["enumerate", "all", "size.isdigit", "list", "input.ndimension", "len", "condition.append", "input.size", "input.size", "int"], "function", ["None"], ["", "def", "check_sizes", "(", "input", ",", "input_name", ",", "expected", ")", ":", "\n", "    ", "condition", "=", "[", "input", ".", "ndimension", "(", ")", "==", "len", "(", "expected", ")", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "expected", ")", ":", "\n", "        ", "if", "size", ".", "isdigit", "(", ")", ":", "\n", "            ", "condition", ".", "append", "(", "input", ".", "size", "(", "i", ")", "==", "int", "(", "size", ")", ")", "\n", "", "", "assert", "(", "all", "(", "condition", ")", ")", ",", "\"wrong size for {}, expected {}, got  {}\"", ".", "format", "(", "input_name", ",", "'x'", ".", "join", "(", "expected", ")", ",", "list", "(", "input", ".", "size", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pixel2cam": [[44, 61], ["depth.size", "pixel_coords[].expand().reshape", "rigid_warp.set_id_grid", "depth.unsqueeze", "pixel_coords.size", "pixel_coords[].expand"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.set_id_grid"], ["", "def", "pixel2cam", "(", "depth", ",", "intrinsics_inv", ")", ":", "\n", "    ", "global", "pixel_coords", "\n", "\"\"\"\n    Transform coordinates in the pixel frame to the camera frame.\n    Args:\n        depth: depth maps -- [B, H, W]\n        intrinsics_inv: intrinsics_inv matrix for each element of batch -- [B, 3, 3]\n    Returns:\n        array of (u,v,1) cam coordinates -- [B, 3, H, W]\n    \"\"\"", "\n", "b", ",", "h", ",", "w", "=", "depth", ".", "size", "(", ")", "\n", "if", "(", "pixel_coords", "is", "None", ")", "or", "pixel_coords", ".", "size", "(", "2", ")", "<", "h", ":", "\n", "        ", "set_id_grid", "(", "depth", ")", "\n", "", "current_pixel_coords", "=", "pixel_coords", "[", ":", ",", ":", ",", ":", "h", ",", ":", "w", "]", ".", "expand", "(", "b", ",", "3", ",", "h", ",", "w", ")", ".", "reshape", "(", "b", ",", "3", ",", "-", "1", ")", "# [B, 3, H*W]", "\n", "cam_coords", "=", "(", "intrinsics_inv", "@", "current_pixel_coords", ")", ".", "reshape", "(", "b", ",", "3", ",", "h", ",", "w", ")", "# [B, 3, H, W]", "\n", "\n", "return", "cam_coords", "*", "depth", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.cam2pixel": [[64, 94], ["cam_coords.size", "cam_coords.reshape", "pcoords[].clamp", "torch.stack", "torch.stack", "torch.stack.reshape"], "function", ["None"], ["", "def", "cam2pixel", "(", "cam_coords", ",", "proj_c2p_rot", ",", "proj_c2p_tr", ",", "padding_mode", ")", ":", "\n", "    ", "\"\"\"\n    Transform coordinates in the camera frame to the pixel frame.\n    Args:\n        cam_coords: pixel coordinates defined in the first camera coordinates system -- [B, 4, H, W]    // tgt_depth * K_inv\n        proj_c2p_rot: rotation matrix of cameras -- [B, 3, 4]\n        proj_c2p_tr: translation vectors of cameras -- [B, 3, 1]\n    Returns:\n        array of [-1,1] coordinates -- [B, 2, H, W]\n    \"\"\"", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "cam_coords", ".", "size", "(", ")", "\n", "cam_coords_flat", "=", "cam_coords", ".", "reshape", "(", "b", ",", "3", ",", "-", "1", ")", "# [B, 3, H*W]", "\n", "\n", "if", "proj_c2p_rot", "is", "not", "None", ":", "\n", "        ", "pcoords", "=", "proj_c2p_rot", "@", "cam_coords_flat", "# (K * P) * (D_tgt * K_inv)", "\n", "", "else", ":", "\n", "        ", "pcoords", "=", "cam_coords_flat", "\n", "\n", "", "if", "proj_c2p_tr", "is", "not", "None", ":", "\n", "        ", "pcoords", "=", "pcoords", "+", "proj_c2p_tr", "# [B, 3, H*W]", "\n", "\n", "", "X", "=", "pcoords", "[", ":", ",", "0", "]", "\n", "Y", "=", "pcoords", "[", ":", ",", "1", "]", "\n", "Z", "=", "pcoords", "[", ":", ",", "2", "]", ".", "clamp", "(", "min", "=", "1e-3", ")", "\n", "\n", "X_norm", "=", "2", "*", "(", "X", "/", "Z", ")", "/", "(", "w", "-", "1", ")", "-", "1", "# Normalized, -1 if on extreme left, 1 if on extreme right (x = w-1) [B, H*W]", "\n", "Y_norm", "=", "2", "*", "(", "Y", "/", "Z", ")", "/", "(", "h", "-", "1", ")", "-", "1", "# Idem [B, H*W]", "\n", "\n", "pixel_coords", "=", "torch", ".", "stack", "(", "[", "X_norm", ",", "Y_norm", "]", ",", "dim", "=", "2", ")", "# [B, H*W, 2]", "\n", "return", "pixel_coords", ".", "reshape", "(", "b", ",", "h", ",", "w", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.cam2pixel2": [[97, 139], ["cam_coords.size", "cam_coords.reshape", "pcoords[].clamp", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.reshape", "pcoords[].clamp.reshape", "torch.stack.reshape"], "function", ["None"], ["", "def", "cam2pixel2", "(", "cam_coords", ",", "proj_c2p_rot", ",", "proj_c2p_tr", ",", "padding_mode", ")", ":", "\n", "    ", "\"\"\"\n    Transform coordinates in the camera frame to the pixel frame.\n    Reference: https://github.com/JiawangBian/SC-SfMLearner-Release/blob/master/inverse_warp.py\n    Args:\n        cam_coords: pixel coordinates defined in the first camera coordinates system -- [B, 4, H, W]    // tgt_depth * K_inv\n        proj_c2p_rot: rotation matrix of cameras -- [B, 3, 4]\n        proj_c2p_tr: translation vectors of cameras -- [B, 3, 1]\n    Returns:\n        array of [-1,1] coordinates -- [B, 2, H, W]\n    \"\"\"", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "cam_coords", ".", "size", "(", ")", "\n", "cam_coords_flat", "=", "cam_coords", ".", "reshape", "(", "b", ",", "3", ",", "-", "1", ")", "# [B, 3, H*W]", "\n", "\n", "if", "proj_c2p_rot", "is", "not", "None", ":", "\n", "        ", "pcoords", "=", "proj_c2p_rot", "@", "cam_coords_flat", "# (K * P) * (D_tgt * K_inv)", "\n", "", "else", ":", "\n", "        ", "pcoords", "=", "cam_coords_flat", "\n", "\n", "", "if", "proj_c2p_tr", "is", "not", "None", ":", "\n", "        ", "pcoords", "=", "pcoords", "+", "proj_c2p_tr", "# [B, 3, H*W]", "\n", "\n", "", "X", "=", "pcoords", "[", ":", ",", "0", "]", "\n", "Y", "=", "pcoords", "[", ":", ",", "1", "]", "\n", "Z", "=", "pcoords", "[", ":", ",", "2", "]", ".", "clamp", "(", "min", "=", "1e-3", ")", "\n", "\n", "X_norm", "=", "2", "*", "(", "X", "/", "Z", ")", "/", "(", "w", "-", "1", ")", "-", "1", "# Normalized, -1 if on extreme left, 1 if on extreme right (x = w-1) [B, H*W]", "\n", "Y_norm", "=", "2", "*", "(", "Y", "/", "Z", ")", "/", "(", "h", "-", "1", ")", "-", "1", "# Idem [B, H*W]", "\n", "\n", "if", "padding_mode", "==", "'zeros'", ":", "\n", "        ", "X_mask", "=", "(", "(", "X_norm", ">", "1", ")", "+", "(", "X_norm", "<", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "X_norm", "[", "X_mask", "]", "=", "2", "# make sure that no point in warped image is a combination of im and gray", "\n", "Y_mask", "=", "(", "(", "Y_norm", ">", "1", ")", "+", "(", "Y_norm", "<", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "Y_norm", "[", "Y_mask", "]", "=", "2", "\n", "\n", "", "pixel_coords", "=", "torch", ".", "stack", "(", "[", "X_norm", ",", "Y_norm", "]", ",", "dim", "=", "2", ")", "# [B, H*W, 2]", "\n", "\n", "X_z", "=", "X", "/", "Z", "\n", "Y_z", "=", "Y", "/", "Z", "\n", "pixel_coords2", "=", "torch", ".", "stack", "(", "[", "X_z", ",", "Y_z", "]", ",", "dim", "=", "2", ")", "# [B, H*W, 2]", "\n", "\n", "return", "pixel_coords", ".", "reshape", "(", "b", ",", "h", ",", "w", ",", "2", ")", ",", "Z", ".", "reshape", "(", "b", ",", "1", ",", "h", ",", "w", ")", ",", "pixel_coords2", ".", "reshape", "(", "b", ",", "h", ",", "w", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.cam2homo": [[142, 183], ["cam_coords.size", "cam_coords.view", "pcoords[].clamp", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "valid_points.unsqueeze().float", "proj_c2p_rot.bmm", "torch.stack.view", "torch.stack.view().abs().max", "valid_points.unsqueeze", "torch.stack.view().abs", "torch.stack.view"], "function", ["None"], ["", "def", "cam2homo", "(", "cam_coords", ",", "proj_c2p_rot", ",", "proj_c2p_tr", ",", "padding_mode", "=", "'zeros'", ")", ":", "\n", "    ", "\"\"\"\n    Transform coordinates in the camera frame to the pixel frame.\n    Args:\n        cam_coords: pixel coordinates defined in the first camera coordinates system -- [B, 4, H, W]\n        proj_c2p_rot: rotation matrix of cameras -- [B, 3, 4]\n        proj_c2p_tr: translation vectors of cameras -- [B, 3, 1]\n    Returns:\n        array of [-1,1] coordinates -- [B, 2, H, W]\n    \"\"\"", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "cam_coords", ".", "size", "(", ")", "\n", "cam_coords_flat", "=", "cam_coords", ".", "view", "(", "b", ",", "3", ",", "-", "1", ")", "# [B, 3, H*W]", "\n", "if", "proj_c2p_rot", "is", "not", "None", ":", "\n", "        ", "pcoords", "=", "proj_c2p_rot", ".", "bmm", "(", "cam_coords_flat", ")", "\n", "", "else", ":", "\n", "        ", "pcoords", "=", "cam_coords_flat", "\n", "\n", "", "if", "proj_c2p_tr", "is", "not", "None", ":", "\n", "        ", "pcoords", "=", "pcoords", "+", "proj_c2p_tr", "# [B, 3, H*W]", "\n", "", "X", "=", "pcoords", "[", ":", ",", "0", "]", "\n", "Y", "=", "pcoords", "[", ":", ",", "1", "]", "\n", "Z", "=", "pcoords", "[", ":", ",", "2", "]", ".", "clamp", "(", "min", "=", "1e-3", ")", "\n", "\n", "X_homo", "=", "X", "/", "Z", "# Homogeneous coords X", "\n", "Y_homo", "=", "Y", "/", "Z", "# Homogeneous coords Y", "\n", "pixel_coords_homo", "=", "torch", ".", "stack", "(", "[", "X_homo", ",", "Y_homo", "]", ",", "dim", "=", "2", ")", "# [B, H*W, 2]", "\n", "\n", "X_norm", "=", "2", "*", "(", "X", "/", "Z", ")", "/", "(", "w", "-", "1", ")", "-", "1", "# Normalized, -1 if on extreme left, 1 if on extreme right (x = w-1) [B, H*W]", "\n", "Y_norm", "=", "2", "*", "(", "Y", "/", "Z", ")", "/", "(", "h", "-", "1", ")", "-", "1", "# Idem [B, H*W]", "\n", "if", "padding_mode", "==", "'zeros'", ":", "\n", "        ", "X_mask", "=", "(", "(", "X_norm", ">", "1", ")", "+", "(", "X_norm", "<", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "X_norm", "[", "X_mask", "]", "=", "2", "# make sure that no point in warped image is a combination of im and gray", "\n", "Y_mask", "=", "(", "(", "Y_norm", ">", "1", ")", "+", "(", "Y_norm", "<", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "Y_norm", "[", "Y_mask", "]", "=", "2", "\n", "\n", "", "pixel_coords_norm", "=", "torch", ".", "stack", "(", "[", "X_norm", ",", "Y_norm", "]", ",", "dim", "=", "2", ")", "# [B, H*W, 2]", "\n", "\n", "valid_points", "=", "pixel_coords_norm", ".", "view", "(", "b", ",", "h", ",", "w", ",", "2", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "<=", "1", "\n", "valid_mask", "=", "valid_points", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "\n", "return", "pixel_coords_homo", ".", "view", "(", "b", ",", "h", ",", "w", ",", "2", ")", ",", "valid_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.mat2euler": [[186, 213], ["R.size", "torch.sqrt", "torch.sqrt", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "mat2euler", "(", "R", ")", ":", "\n", "    ", "\"\"\"\n    Convert rotation matrix to euler angles.\n    Reference: https://github.com/pulkitag/pycaffe-utils/blob/master/rot_utils.py#L174\n    Args:\n        Rotation matrix corresponding to the euler angles -- size = [B, 3, 3]\n    Returns:\n        angle: rotation angle along 3 axis (in radians) -- size = [B, 3]\n    \"\"\"", "\n", "bs", "=", "R", ".", "size", "(", "0", ")", "\n", "\n", "sy", "=", "torch", ".", "sqrt", "(", "R", "[", ":", ",", "0", ",", "0", "]", "*", "R", "[", ":", ",", "0", ",", "0", "]", "+", "R", "[", ":", ",", "1", ",", "0", "]", "*", "R", "[", ":", ",", "1", ",", "0", "]", ")", "\n", "singular", "=", "(", "sy", "<", "1e-6", ")", ".", "float", "(", ")", "\n", "\n", "x", "=", "torch", ".", "atan2", "(", "R", "[", ":", ",", "2", ",", "1", "]", ",", "R", "[", ":", ",", "2", ",", "2", "]", ")", "\n", "y", "=", "torch", ".", "atan2", "(", "-", "R", "[", ":", ",", "2", ",", "0", "]", ",", "sy", ")", "\n", "z", "=", "torch", ".", "atan2", "(", "R", "[", ":", ",", "1", ",", "0", "]", ",", "R", "[", ":", ",", "0", ",", "0", "]", ")", "\n", "\n", "xs", "=", "torch", ".", "atan2", "(", "-", "R", "[", ":", ",", "1", ",", "2", "]", ",", "R", "[", ":", ",", "1", ",", "1", "]", ")", "\n", "ys", "=", "torch", ".", "atan2", "(", "-", "R", "[", ":", ",", "2", ",", "0", "]", ",", "sy", ")", "\n", "zs", "=", "R", "[", ":", ",", "1", ",", "0", "]", "*", "0", "\n", "\n", "out_euler_x", "=", "x", "*", "(", "1", "-", "singular", ")", "+", "xs", "*", "singular", "\n", "out_euler_y", "=", "y", "*", "(", "1", "-", "singular", ")", "+", "ys", "*", "singular", "\n", "out_euler_z", "=", "z", "*", "(", "1", "-", "singular", ")", "+", "zs", "*", "singular", "\n", "\n", "return", "torch", ".", "stack", "(", "[", "out_euler_x", ",", "out_euler_y", ",", "out_euler_z", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.euler2mat": [[216, 253], ["angle.size", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.stack().reshape", "torch.stack().reshape", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.stack().reshape", "torch.stack().reshape", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.stack().reshape", "torch.stack().reshape", "z.detach", "zeros.detach", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "euler2mat", "(", "angle", ")", ":", "\n", "    ", "\"\"\"\n    Convert euler angles to rotation matrix.\n    Reference: https://github.com/pulkitag/pycaffe-utils/blob/master/rot_utils.py#L174\n    Args:\n        angle: rotation angle along 3 axis (in radians) -- size = [B, 3]\n    Returns:\n        Rotation matrix corresponding to the euler angles -- size = [B, 3, 3]\n    \"\"\"", "\n", "B", "=", "angle", ".", "size", "(", "0", ")", "\n", "x", ",", "y", ",", "z", "=", "angle", "[", ":", ",", "0", "]", ",", "angle", "[", ":", ",", "1", "]", ",", "angle", "[", ":", ",", "2", "]", "\n", "\n", "cosz", "=", "torch", ".", "cos", "(", "z", ")", "\n", "sinz", "=", "torch", ".", "sin", "(", "z", ")", "\n", "\n", "zeros", "=", "z", ".", "detach", "(", ")", "*", "0", "\n", "ones", "=", "zeros", ".", "detach", "(", ")", "+", "1", "\n", "zmat", "=", "torch", ".", "stack", "(", "[", "cosz", ",", "-", "sinz", ",", "zeros", ",", "\n", "sinz", ",", "cosz", ",", "zeros", ",", "\n", "zeros", ",", "zeros", ",", "ones", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "\n", "cosy", "=", "torch", ".", "cos", "(", "y", ")", "\n", "siny", "=", "torch", ".", "sin", "(", "y", ")", "\n", "\n", "ymat", "=", "torch", ".", "stack", "(", "[", "cosy", ",", "zeros", ",", "siny", ",", "\n", "zeros", ",", "ones", ",", "zeros", ",", "\n", "-", "siny", ",", "zeros", ",", "cosy", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "\n", "cosx", "=", "torch", ".", "cos", "(", "x", ")", "\n", "sinx", "=", "torch", ".", "sin", "(", "x", ")", "\n", "\n", "xmat", "=", "torch", ".", "stack", "(", "[", "ones", ",", "zeros", ",", "zeros", ",", "\n", "zeros", ",", "cosx", ",", "-", "sinx", ",", "\n", "zeros", ",", "sinx", ",", "cosx", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "\n", "rotMat", "=", "xmat", "@", "ymat", "@", "zmat", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.quat2mat": [[256, 278], ["torch.cat", "torch.cat", "quat.size", "torch.stack().reshape", "torch.stack().reshape", "torch.cat.norm", "w.pow", "x.pow", "y.pow", "z.pow", "torch.stack", "torch.stack", "quat[].detach"], "function", ["None"], ["", "def", "quat2mat", "(", "quat", ")", ":", "\n", "    ", "\"\"\"\n    Convert quaternion coefficients to rotation matrix.\n    Args:\n        quat: first three coeff of quaternion of rotation. fourht is then computed to have a norm of 1 -- size = [B, 3]\n    Returns:\n        Rotation matrix corresponding to the quaternion -- size = [B, 3, 3]\n    \"\"\"", "\n", "norm_quat", "=", "torch", ".", "cat", "(", "[", "quat", "[", ":", ",", ":", "1", "]", ".", "detach", "(", ")", "*", "0", "+", "1", ",", "quat", "]", ",", "dim", "=", "1", ")", "\n", "norm_quat", "=", "norm_quat", "/", "norm_quat", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "w", ",", "x", ",", "y", ",", "z", "=", "norm_quat", "[", ":", ",", "0", "]", ",", "norm_quat", "[", ":", ",", "1", "]", ",", "norm_quat", "[", ":", ",", "2", "]", ",", "norm_quat", "[", ":", ",", "3", "]", "\n", "\n", "B", "=", "quat", ".", "size", "(", "0", ")", "\n", "\n", "w2", ",", "x2", ",", "y2", ",", "z2", "=", "w", ".", "pow", "(", "2", ")", ",", "x", ".", "pow", "(", "2", ")", ",", "y", ".", "pow", "(", "2", ")", ",", "z", ".", "pow", "(", "2", ")", "\n", "wx", ",", "wy", ",", "wz", "=", "w", "*", "x", ",", "w", "*", "y", ",", "w", "*", "z", "\n", "xy", ",", "xz", ",", "yz", "=", "x", "*", "y", ",", "x", "*", "z", ",", "y", "*", "z", "\n", "\n", "rotMat", "=", "torch", ".", "stack", "(", "[", "w2", "+", "x2", "-", "y2", "-", "z2", ",", "2", "*", "xy", "-", "2", "*", "wz", ",", "2", "*", "wy", "+", "2", "*", "xz", ",", "\n", "2", "*", "wz", "+", "2", "*", "xy", ",", "w2", "-", "x2", "+", "y2", "-", "z2", ",", "2", "*", "yz", "-", "2", "*", "wx", ",", "\n", "2", "*", "xz", "-", "2", "*", "wy", ",", "2", "*", "wx", "+", "2", "*", "yz", ",", "w2", "-", "x2", "-", "y2", "+", "z2", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_vec2mat": [[281, 297], ["vec[].unsqueeze", "torch.cat", "torch.cat", "rigid_warp.euler2mat", "rigid_warp.quat2mat"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.euler2mat", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.quat2mat"], ["", "def", "pose_vec2mat", "(", "vec", ",", "rotation_mode", "=", "'euler'", ")", ":", "\n", "    ", "\"\"\"\n    Convert 6DoF parameters to transformation matrix.\n    Args:\n        vec: 6DoF parameters in the order of tx, ty, tz, rx, ry, rz -- [B, 6]\n    Returns:\n        A transformation matrix -- [B, 3, 4]\n    \"\"\"", "\n", "translation", "=", "vec", "[", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "-", "1", ")", "# [B, 3, 1]", "\n", "rot", "=", "vec", "[", ":", ",", "3", ":", "]", "\n", "if", "rotation_mode", "==", "'euler'", ":", "\n", "        ", "rot_mat", "=", "euler2mat", "(", "rot", ")", "# [B, 3, 3]", "\n", "", "elif", "rotation_mode", "==", "'quat'", ":", "\n", "        ", "rot_mat", "=", "quat2mat", "(", "rot", ")", "# [B, 3, 3]", "\n", "", "transform_mat", "=", "torch", ".", "cat", "(", "[", "rot_mat", ",", "translation", "]", ",", "dim", "=", "2", ")", "# [B, 3, 4]", "\n", "return", "transform_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_mof2mat_v1": [[300, 323], ["mof.permute().reshape.size", "mof.permute().reshape.permute().reshape", "mof[].unsqueeze", "torch.cat", "torch.cat", "transform_mat.reshape().permute.reshape().permute", "rigid_warp.euler2mat", "mof.permute().reshape.permute", "rigid_warp.quat2mat", "transform_mat.reshape().permute.reshape"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.euler2mat", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.quat2mat"], ["", "def", "pose_mof2mat_v1", "(", "mof", ",", "rotation_mode", "=", "'euler'", ")", ":", "\n", "    ", "\"\"\"\n    ### Out-of-Memory Issue ###\n    Convert 6DoF parameters to transformation matrix.\n    Args:\n        mof: 6DoF parameters in the order of tx, ty, tz, rx, ry, rz -- [B, 6, H, W]\n    Returns:\n        A transformation matrix -- [B, 3, 4, H, W]\n    \"\"\"", "\n", "bs", ",", "_", ",", "hh", ",", "ww", "=", "mof", ".", "size", "(", ")", "\n", "mof", "=", "mof", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "6", ")", "# [B*N, 6]", "\n", "translation", "=", "mof", "[", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "-", "1", ")", "# [B*N, 3, 1]", "\n", "rot", "=", "mof", "[", ":", ",", "3", ":", "]", "# [B*N, 3]", "\n", "\n", "if", "rotation_mode", "==", "'euler'", ":", "\n", "        ", "rot_mat", "=", "euler2mat", "(", "rot", ")", "# [B*N, 3, 3]", "\n", "", "elif", "rotation_mode", "==", "'quat'", ":", "\n", "        ", "rot_mat", "=", "quat2mat", "(", "rot", ")", "# [B*N, 3, 3]", "\n", "\n", "", "transform_mat", "=", "torch", ".", "cat", "(", "[", "rot_mat", ",", "translation", "]", ",", "dim", "=", "2", ")", "# [B*N, 3, 4]", "\n", "transform_mat", "=", "transform_mat", ".", "reshape", "(", "bs", ",", "hh", ",", "ww", ",", "3", ",", "4", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "# [B, 3, 4, H, W]", "\n", "# pdb.set_trace()", "\n", "return", "transform_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_mof2mat": [[326, 347], ["mof.size", "mof[].reshape", "mof[].mean", "quat2mat.reshape().repeat", "torch.cat", "torch.cat", "rigid_warp.euler2mat", "rigid_warp.quat2mat", "quat2mat.reshape"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.euler2mat", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.quat2mat"], ["", "def", "pose_mof2mat", "(", "mof", ",", "rotation_mode", "=", "'euler'", ")", ":", "\n", "    ", "\"\"\"\n    Convert 6DoF parameters to transformation matrix.\n    Args:\n        mof: 6DoF parameters in the order of tx, ty, tz, rx, ry, rz -- [B, 6, H, W]\n    Returns:\n        A transformation matrix -- [B, 3, 4, H, W]\n    \"\"\"", "\n", "bs", ",", "_", ",", "hh", ",", "ww", "=", "mof", ".", "size", "(", ")", "\n", "translation", "=", "mof", "[", ":", ",", ":", "3", "]", ".", "reshape", "(", "bs", ",", "3", ",", "1", ",", "hh", ",", "ww", ")", "# [B, 3, 1, H, W]", "\n", "rot", "=", "mof", "[", ":", ",", "3", ":", "]", ".", "mean", "(", "dim", "=", "[", "2", ",", "3", "]", ")", "# [B*1, 3]", "\n", "\n", "if", "rotation_mode", "==", "'euler'", ":", "\n", "        ", "rot_mat", "=", "euler2mat", "(", "rot", ")", "# [B*1, 3, 3]", "\n", "", "elif", "rotation_mode", "==", "'quat'", ":", "\n", "        ", "rot_mat", "=", "quat2mat", "(", "rot", ")", "# [B*1, 3, 3]", "\n", "\n", "", "rot_mat", "=", "rot_mat", ".", "reshape", "(", "bs", ",", "3", ",", "3", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "hh", ",", "ww", ")", "# [B, 3, 3, H, W]", "\n", "transform_mat", "=", "torch", ".", "cat", "(", "[", "rot_mat", ",", "translation", "]", ",", "dim", "=", "2", ")", "# [B*N, 3, 4]", "\n", "# pdb.set_trace()", "\n", "return", "transform_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.inverse_warp": [[350, 387], ["rigid_warp.check_sizes", "rigid_warp.check_sizes", "rigid_warp.check_sizes", "img.size", "rigid_warp.pixel2cam", "rigid_warp.pose_vec2mat", "rigid_warp.cam2pixel", "intrinsics.inverse", "numpy.array().astype", "torch.grid_sample", "torch.grid_sample", "cam2pixel.abs().max", "numpy.array", "cam2pixel.abs"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pixel2cam", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_vec2mat", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.cam2pixel"], ["", "def", "inverse_warp", "(", "img", ",", "depth", ",", "pose", ",", "intrinsics", ",", "rotation_mode", "=", "'euler'", ",", "padding_mode", "=", "'zeros'", ")", ":", "\n", "    ", "\"\"\"\n    Inverse warp a source image to the target image plane.\n    Args:\n        img: the source image (where to sample pixels) -- [B, 3, H, W]\n        depth: depth map of the target image -- [B, H, W]\n        pose: 6DoF pose parameters from target to source -- [B, 6]\n        intrinsics: camera intrinsic matrix -- [B, 3, 3]\n    Returns:\n        projected_img: Source image warped to the target image plane\n        valid_points: Boolean array indicating point validity\n    \"\"\"", "\n", "# check_sizes(img, 'img', 'B3HW')", "\n", "check_sizes", "(", "depth", ",", "'depth'", ",", "'BHW'", ")", "\n", "check_sizes", "(", "pose", ",", "'pose'", ",", "'B6'", ")", "\n", "check_sizes", "(", "intrinsics", ",", "'intrinsics'", ",", "'B33'", ")", "\n", "\n", "batch_size", ",", "_", ",", "img_height", ",", "img_width", "=", "img", ".", "size", "(", ")", "\n", "\n", "cam_coords", "=", "pixel2cam", "(", "depth", ",", "intrinsics", ".", "inverse", "(", ")", ")", "# [B,3,H,W]", "\n", "\n", "pose_mat", "=", "pose_vec2mat", "(", "pose", ",", "rotation_mode", ")", "# [B,3,4]", "\n", "\n", "# Get projection matrix for tgt camera frame to source pixel frame", "\n", "proj_cam_to_src_pixel", "=", "intrinsics", "@", "pose_mat", "# [B, 3, 4]", "\n", "\n", "rot", ",", "tr", "=", "proj_cam_to_src_pixel", "[", ":", ",", ":", ",", ":", "3", "]", ",", "proj_cam_to_src_pixel", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "src_pixel_coords", "=", "cam2pixel", "(", "cam_coords", ",", "rot", ",", "tr", ",", "padding_mode", ")", "# [B,H,W,2]", "\n", "\n", "if", "np", ".", "array", "(", "torch", ".", "__version__", "[", ":", "3", "]", ")", ".", "astype", "(", "float", ")", ">=", "1.3", ":", "\n", "        ", "projected_img", "=", "F", ".", "grid_sample", "(", "img", ",", "src_pixel_coords", ",", "padding_mode", "=", "padding_mode", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "projected_img", "=", "F", ".", "grid_sample", "(", "img", ",", "src_pixel_coords", ",", "padding_mode", "=", "padding_mode", ")", "\n", "\n", "", "valid_points", "=", "src_pixel_coords", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "<=", "1", "\n", "\n", "return", "projected_img", ",", "valid_points", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.inverse_warp2": [[390, 454], ["rigid_warp.check_sizes", "rigid_warp.check_sizes", "rigid_warp.check_sizes", "rigid_warp.check_sizes", "isinstance", "img.size", "rigid_warp.pixel2cam", "isinstance", "rigid_warp.cam2pixel2", "valid_points.unsqueeze().float", "rigid_warp.check_sizes", "depth.squeeze", "intrinsics.inverse", "enumerate", "rigid_warp.pose_vec2mat", "numpy.array().astype", "torch.grid_sample", "torch.grid_sample", "numpy.array().astype", "torch.grid_sample().clamp", "torch.grid_sample().clamp", "rigid_warp.check_sizes", "rigid_warp.pose_vec2mat", "torch.tensor().type_as().unsqueeze().unsqueeze().repeat", "torch.tensor().type_as().unsqueeze().unsqueeze().repeat", "torch.cat", "torch.cat", "src_pixel_coords.abs().max", "valid_points.unsqueeze", "rigid_warp.pose_vec2mat", "torch.tensor().type_as().unsqueeze().unsqueeze().repeat", "torch.tensor().type_as().unsqueeze().unsqueeze().repeat", "torch.cat", "torch.cat", "numpy.array", "numpy.array", "torch.grid_sample", "torch.grid_sample", "torch.tensor().type_as().unsqueeze().unsqueeze", "torch.tensor().type_as().unsqueeze().unsqueeze", "src_pixel_coords.abs", "torch.tensor().type_as().unsqueeze().unsqueeze", "torch.tensor().type_as().unsqueeze().unsqueeze", "torch.tensor().type_as().unsqueeze", "torch.tensor().type_as().unsqueeze", "torch.tensor().type_as().unsqueeze", "torch.tensor().type_as().unsqueeze", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pixel2cam", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.cam2pixel2", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_vec2mat", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_vec2mat", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_vec2mat"], ["", "def", "inverse_warp2", "(", "img", ",", "depth", ",", "pose", ",", "intrinsics", ",", "ref_depth", ",", "rotation_mode", "=", "'euler'", ",", "padding_mode", "=", "'zeros'", ")", ":", "\n", "    ", "\"\"\"\n    Inverse warp a source image to the target image plane.\n    Reference: https://github.com/JiawangBian/SC-SfMLearner-Release/blob/master/inverse_warp.py\n    Args:\n        img: the source image (where to sample pixels) -- [B, 3, H, W]          // ref_img\n        depth: depth map of the target image -- [B, 1, H, W]                    // tgt_depth\n        ref_depth: the source depth map (where to sample depth) -- [B, 1, H, W] // ref_depth\n        pose: 6DoF pose parameters from target to source -- [B, 6]\n        intrinsics: camera intrinsic matrix -- [B, 3, 3]\n    Returns:\n        projected_img: Source image warped to the target image plane\n        valid_mask: Float array indicating point validity\n    \"\"\"", "\n", "check_sizes", "(", "img", ",", "'img'", ",", "'BCHW'", ")", "\n", "check_sizes", "(", "depth", ",", "'depth'", ",", "'B1HW'", ")", "\n", "check_sizes", "(", "intrinsics", ",", "'intrinsics'", ",", "'B33'", ")", "\n", "check_sizes", "(", "ref_depth", ",", "'ref_depth'", ",", "'B1HW'", ")", "\n", "if", "isinstance", "(", "pose", ",", "list", ")", ":", "\n", "        ", "for", "p_vec", "in", "pose", ":", "\n", "            ", "check_sizes", "(", "p_vec", ",", "'pose'", ",", "'B6'", ")", "\n", "", "", "else", ":", "\n", "        ", "check_sizes", "(", "pose", ",", "'pose'", ",", "'B6'", ")", "\n", "\n", "", "batch_size", ",", "_", ",", "img_height", ",", "img_width", "=", "img", ".", "size", "(", ")", "\n", "\n", "cam_coords", "=", "pixel2cam", "(", "depth", ".", "squeeze", "(", "1", ")", ",", "intrinsics", ".", "inverse", "(", ")", ")", "# D * K_inv * X, [B,3,H,W]", "\n", "\n", "if", "isinstance", "(", "pose", ",", "list", ")", ":", "\n", "        ", "for", "pp", ",", "p_vec", "in", "enumerate", "(", "pose", ")", ":", "\n", "            ", "if", "pp", "==", "0", ":", "\n", "                ", "pose_mat", "=", "pose_vec2mat", "(", "p_vec", ",", "rotation_mode", ")", "# RT, [B,3,4]", "\n", "aux_mat", "=", "torch", ".", "tensor", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "type_as", "(", "pose_mat", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "# [B,1,1]", "\n", "pose_mat", "=", "torch", ".", "cat", "(", "[", "pose_mat", ",", "aux_mat", "]", ",", "dim", "=", "1", ")", "# [B,4,4]", "\n", "continue", ";", "\n", "", "next_mat", "=", "pose_vec2mat", "(", "p_vec", ",", "rotation_mode", ")", "# RT, [B,3,4]", "\n", "aux_mat", "=", "torch", ".", "tensor", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "type_as", "(", "next_mat", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "# [B,1,1]", "\n", "next_mat", "=", "torch", ".", "cat", "(", "[", "next_mat", ",", "aux_mat", "]", ",", "dim", "=", "1", ")", "\n", "pose_mat", "=", "pose_mat", "@", "next_mat", "# [B,4,4]", "\n", "# pose_mat = next_mat @ pose_mat              # [B,4,4]", "\n", "", "pose_mat", "=", "pose_mat", "[", ":", ",", ":", "3", ",", ":", "]", "# RT, [B,3,4]", "\n", "", "else", ":", "\n", "        ", "pose_mat", "=", "pose_vec2mat", "(", "pose", ",", "rotation_mode", ")", "# RT, [B,3,4]", "\n", "\n", "# Get projection matrix for tgt camera frame to source pixel frame", "\n", "", "proj_cam_to_src_pixel", "=", "intrinsics", "@", "pose_mat", "# [B, 3, 4]", "\n", "\n", "rot", ",", "tr", "=", "proj_cam_to_src_pixel", "[", ":", ",", ":", ",", ":", "3", "]", ",", "proj_cam_to_src_pixel", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "src_pixel_coords", ",", "computed_depth", ",", "_", "=", "cam2pixel2", "(", "cam_coords", ",", "rot", ",", "tr", ",", "padding_mode", ")", "# [B,H,W,2]", "\n", "\n", "if", "np", ".", "array", "(", "torch", ".", "__version__", "[", ":", "3", "]", ")", ".", "astype", "(", "float", ")", ">=", "1.3", ":", "\n", "        ", "projected_img", "=", "F", ".", "grid_sample", "(", "img", ",", "src_pixel_coords", ",", "padding_mode", "=", "padding_mode", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "projected_img", "=", "F", ".", "grid_sample", "(", "img", ",", "src_pixel_coords", ",", "padding_mode", "=", "padding_mode", ")", "\n", "\n", "", "valid_points", "=", "src_pixel_coords", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "<=", "1", "\n", "valid_mask", "=", "valid_points", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "\n", "if", "np", ".", "array", "(", "torch", ".", "__version__", "[", ":", "3", "]", ")", ".", "astype", "(", "float", ")", ">=", "1.3", ":", "\n", "        ", "projected_depth", "=", "F", ".", "grid_sample", "(", "ref_depth", ",", "src_pixel_coords", ",", "padding_mode", "=", "padding_mode", ",", "align_corners", "=", "True", ")", ".", "clamp", "(", "min", "=", "1e-3", ")", "\n", "", "else", ":", "\n", "        ", "projected_depth", "=", "F", ".", "grid_sample", "(", "ref_depth", ",", "src_pixel_coords", ",", "padding_mode", "=", "padding_mode", ")", ".", "clamp", "(", "min", "=", "1e-3", ")", "\n", "\n", "", "return", "projected_img", ",", "valid_mask", ",", "projected_depth", ",", "computed_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.transform_scale_consistent_depth": [[457, 482], ["rigid_warp.check_sizes", "rigid_warp.check_sizes", "rigid_warp.check_sizes", "rigid_warp.pixel2cam", "rigid_warp.pose_vec2mat", "rigid_warp.cam2pixel2", "depth.squeeze", "intrinsics.inverse"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pixel2cam", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_vec2mat", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.cam2pixel2"], ["", "def", "transform_scale_consistent_depth", "(", "depth", ",", "pose", ",", "intrinsics", ",", "rotation_mode", "=", "'euler'", ",", "padding_mode", "=", "'zeros'", ")", ":", "\n", "    ", "\"\"\"\n    Transform scale of depth with given pose change.\n    Args:\n        depth: depth map of the target image -- [B, 1, H, W]                    // tgt_depth\n        pose: 6DoF pose parameters from target to source -- [B, 6]              //\n        intrinsics: camera intrinsic matrix -- [B, 3, 3]                        //\n    Returns:\n        scale_transformed_depth: Source depth scaled to the target depth\n    \"\"\"", "\n", "check_sizes", "(", "depth", ",", "'depth'", ",", "'B1HW'", ")", "\n", "check_sizes", "(", "pose", ",", "'pose'", ",", "'B6'", ")", "\n", "check_sizes", "(", "intrinsics", ",", "'intrinsics'", ",", "'B33'", ")", "\n", "\n", "cam_coords", "=", "pixel2cam", "(", "depth", ".", "squeeze", "(", "1", ")", ",", "intrinsics", ".", "inverse", "(", ")", ")", "# D * K_inv * X, [B,3,H,W]", "\n", "pose_mat", "=", "pose_vec2mat", "(", "pose", ",", "rotation_mode", ")", "# RT, [B,3,4]", "\n", "\n", "# Get projection matrix for tgt camera frame to source pixel frame", "\n", "proj_cam_to_src_pixel", "=", "intrinsics", "@", "pose_mat", "# [B, 3, 4]", "\n", "\n", "rot", ",", "tr", "=", "proj_cam_to_src_pixel", "[", ":", ",", ":", ",", ":", "3", "]", ",", "proj_cam_to_src_pixel", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "_", ",", "computed_depth", ",", "_", "=", "cam2pixel2", "(", "cam_coords", ",", "rot", ",", "tr", ",", "padding_mode", ")", "# [B,H,W,2]", "\n", "# pdb.set_trace()", "\n", "\n", "return", "computed_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.depth2flow": [[485, 524], ["rigid_warp.check_sizes", "rigid_warp.check_sizes", "rigid_warp.check_sizes", "depth.size", "rigid_warp.pixel2cam", "rigid_warp.pose_vec2mat", "rigid_warp.cam2homo", "numpy.expand_dims().repeat", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "flow_rigid.permute.permute", "depth.squeeze", "intrinsics.inverse", "torch.zeros().cuda().unsqueeze", "torch.zeros().cuda().unsqueeze", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "t.inverse", "numpy.expand_dims", "torch.from_numpy", "torch.from_numpy", "torch.zeros().cuda", "torch.zeros().cuda", "torch.functional.unbind", "torch.functional.unbind", "numpy.mgrid[].transpose().astype", "torch.zeros", "torch.zeros", "numpy.mgrid[].transpose"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pixel2cam", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_vec2mat", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.cam2homo"], ["", "def", "depth2flow", "(", "depth", ",", "pose", ",", "intrinsics", ",", "reverse_pose", "=", "False", ",", "rotation_mode", "=", "'euler'", ",", "padding_mode", "=", "'zeros'", ")", ":", "\n", "    ", "\"\"\"\n    Depth + Pose => Flow\n\n    Args:\n        img: the source image (where to sample pixels) -- [B, 3, H, W]\n        depth: depth map of the target image -- [B, 1, H, W]\n        pose: 6DoF pose parameters from target to source -- [B, 6]\n        intrinsics: camera intrinsic matrix -- [B, 3, 3]\n    Returns:\n        Source image warped to the target image plane\n    \"\"\"", "\n", "check_sizes", "(", "depth", ",", "'depth'", ",", "'B1HW'", ")", "\n", "check_sizes", "(", "pose", ",", "'pose'", ",", "'B6'", ")", "\n", "check_sizes", "(", "intrinsics", ",", "'intrinsics'", ",", "'B33'", ")", "\n", "\n", "batch_size", ",", "_", ",", "hh", ",", "ww", "=", "depth", ".", "size", "(", ")", "\n", "cam_coords", "=", "pixel2cam", "(", "depth", ".", "squeeze", "(", "1", ")", ",", "intrinsics", ".", "inverse", "(", ")", ")", "# D * K_inv * X, [B,3,H,W]", "\n", "pose_mat", "=", "pose_vec2mat", "(", "pose", ",", "rotation_mode", ")", "# RT, [B,3,4]", "\n", "\n", "if", "reverse_pose", ":", "\n", "        ", "aux_mat", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "4", "]", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "aux_mat", "[", ":", ",", ":", ",", "3", "]", "=", "1", "\n", "pose_mat", "=", "torch", ".", "cat", "(", "[", "pose_mat", ",", "aux_mat", "]", ",", "dim", "=", "1", ")", "# [B, 4, 4]", "\n", "pose_mat", "=", "[", "t", ".", "inverse", "(", ")", "for", "t", "in", "torch", ".", "functional", ".", "unbind", "(", "pose_mat", ")", "]", "\n", "pose_mat", "=", "torch", ".", "stack", "(", "pose_mat", ")", "# [B, 4, 4]", "\n", "pose_mat", "=", "pose_mat", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "\n", "# Get projection matrix for tgt camera frame to source pixel frame", "\n", "", "proj_cam_to_src_pixel", "=", "intrinsics", "@", "pose_mat", "# [B,3,4]", "\n", "rot", ",", "tr", "=", "proj_cam_to_src_pixel", "[", ":", ",", ":", ",", ":", "3", "]", ",", "proj_cam_to_src_pixel", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "flow_grid", ",", "valid_mask", "=", "cam2homo", "(", "cam_coords", ",", "rot", ",", "tr", ",", "padding_mode", ")", "# [B,H,W,2], [B,1,H,W]", "\n", "mgrid_np", "=", "np", ".", "expand_dims", "(", "np", ".", "mgrid", "[", "0", ":", "ww", ",", "0", ":", "hh", "]", ".", "transpose", "(", "2", ",", "1", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "0", ")", ".", "repeat", "(", "batch_size", ",", "axis", "=", "0", ")", "\n", "mgrid", "=", "torch", ".", "from_numpy", "(", "mgrid_np", ")", ".", "cuda", "(", ")", "# [B,H,W,2]", "\n", "\n", "flow_rigid", "=", "flow_grid", "-", "mgrid", "\n", "flow_rigid", "=", "flow_rigid", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "return", "flow_rigid", ",", "valid_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.cam2pix_trans": [[527, 545], ["cam_coords.size", "cam_coords.reshape", "cam_coords_trans[].clamp", "torch.stack", "torch.stack", "pix_coords.reshape", "cam_coords_trans[].clamp.reshape"], "function", ["None"], ["", "def", "cam2pix_trans", "(", "cam_coords", ",", "pose_mat", ",", "intrinsics", ")", ":", "\n", "    ", "b", ",", "_", ",", "h", ",", "w", "=", "cam_coords", ".", "size", "(", ")", "\n", "rot", ",", "tr", "=", "pose_mat", "[", ":", ",", ":", ",", ":", "3", "]", ",", "pose_mat", "[", ":", ",", ":", ",", "-", "1", ":", "]", "# [B, 3, 3], [B, 3, 1]", "\n", "cam_coords_flat", "=", "cam_coords", ".", "reshape", "(", "b", ",", "3", ",", "-", "1", ")", "# [B, 3, H*W]", "\n", "cam_coords_trans", "=", "rot", "@", "cam_coords_flat", "# [B, 3, H*W]", "\n", "cam_coords_trans", "=", "cam_coords_trans", "+", "tr", "# [B, 3, H*W]", "\n", "\n", "X", "=", "cam_coords_trans", "[", ":", ",", "0", "]", "# [B, H*W]", "\n", "Y", "=", "cam_coords_trans", "[", ":", ",", "1", "]", "# [B, H*W]", "\n", "Z", "=", "cam_coords_trans", "[", ":", ",", "2", "]", ".", "clamp", "(", "min", "=", "1e-3", ")", "# [B, H*W]", "\n", "\n", "X_norm", "=", "(", "X", "/", "Z", ")", "# [B, H*W]", "\n", "Y_norm", "=", "(", "Y", "/", "Z", ")", "# [B, H*W]", "\n", "Z_norm", "=", "(", "Z", "/", "Z", ")", "# [B, H*W]", "\n", "P_norm", "=", "torch", ".", "stack", "(", "[", "X_norm", ",", "Y_norm", ",", "Z_norm", "]", ",", "dim", "=", "1", ")", "# [B, 3, H*W]", "\n", "pix_coords", "=", "(", "intrinsics", "@", "P_norm", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "[", ":", ",", ":", ",", ":", "2", "]", "# [B, H*W, 2]", "\n", "\n", "return", "pix_coords", ".", "reshape", "(", "b", ",", "h", ",", "w", ",", "2", ")", ",", "Z", ".", "reshape", "(", "b", ",", "1", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.forward_warp": [[548, 611], ["rigid_warp.check_sizes", "rigid_warp.check_sizes", "rigid_warp.check_sizes", "depth.size", "torch.interpolate().squeeze", "torch.cat", "torch.cat", "rigid_warp.pixel2cam", "rigid_warp.pose_vec2mat", "rigid_warp.cam2pix_trans", "zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor().type_as().unsqueeze().unsqueeze().repeat", "torch.tensor().type_as().unsqueeze().unsqueeze().repeat", "torch.inverse", "torch.inverse", "rigid_warp.mat2euler", "torch.cat", "torch.cat", "rigid_warp.inverse_warp", "iw_val.float().unsqueeze.float().unsqueeze", "depth_w.unsqueeze.unsqueeze", "torch.cat.inverse", "z.reshape", "torch_sparse.coalesce", "depth_w.unsqueeze.append", "torch.stack.append", "torch.cat", "torch.cat", "torch.stack.unsqueeze", "torch.interpolate", "coo.reshape().permute().long", "torch.tensor().type_as().unsqueeze().unsqueeze", "torch.tensor().type_as().unsqueeze().unsqueeze", "iw_val.float().unsqueeze.float", "coo.reshape().permute", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.tensor().type_as().unsqueeze", "torch.tensor().type_as().unsqueeze", "coo.reshape", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.tensor().type_as", "torch.tensor().type_as", "torch.Size", "torch.Size", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.tensor", "torch.tensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.Size", "torch.Size"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pixel2cam", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_vec2mat", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.cam2pix_trans", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.mat2euler", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.inverse_warp"], ["", "def", "forward_warp", "(", "img", ",", "depth", ",", "pose", ",", "intrinsics", ",", "upscale", "=", "None", ",", "rotation_mode", "=", "'euler'", ",", "padding_mode", "=", "'zeros'", ")", ":", "\n", "    ", "\"\"\"\n    Inverse warp a source image to the target image plane.\n    Args:\n        img: the source image (where to sample pixels) -- [B, C, H, W]\n        depth: depth map of the source image -- [B, 1, H, W]\n        pose: 6DoF pose parameters from target to source -- [B, 6]\n        intrinsics: camera intrinsic matrix -- [B, 3, 3]\n    Returns:\n        projected_img: Source image warped to the target image plane\n        valid_points: Boolean array indicating point validity\n        \n        plt.close('all')\n        plt.figure(1); plt.imshow(img[0,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n        plt.figure(2); plt.imshow(img_w[0,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n        plt.figure(3); plt.imshow(depth[0,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n        plt.figure(4); plt.imshow(depth_w[0,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n        plt.figure(5); plt.imshow(fw_val[0,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n        plt.figure(6); plt.imshow(iw_val[0,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n        plt.figure(7); plt.imshow(valid[0,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n\n    \"\"\"", "\n", "check_sizes", "(", "depth", ",", "'depth'", ",", "'B1HW'", ")", "\n", "check_sizes", "(", "pose", ",", "'pose'", ",", "'B6'", ")", "\n", "check_sizes", "(", "intrinsics", ",", "'intrinsics'", ",", "'B33'", ")", "\n", "\n", "bs", ",", "_", ",", "hh", ",", "ww", "=", "depth", ".", "size", "(", ")", "\n", "depth_u", "=", "F", ".", "interpolate", "(", "depth", ",", "scale_factor", "=", "upscale", ")", ".", "squeeze", "(", "1", ")", "\n", "intrinsic_u", "=", "torch", ".", "cat", "(", "(", "intrinsics", "[", ":", ",", "0", ":", "2", "]", "*", "upscale", ",", "intrinsics", "[", ":", ",", "2", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "cam_coords", "=", "pixel2cam", "(", "depth_u", ",", "intrinsic_u", ".", "inverse", "(", ")", ")", "# [B,3,uH,uW]", "\n", "pose_mat", "=", "pose_vec2mat", "(", "pose", ",", "rotation_mode", ")", "# [B,3,4]", "\n", "pcoords", ",", "Z", "=", "cam2pix_trans", "(", "cam_coords", ",", "pose_mat", ",", "intrinsics", ")", "# [B,uH,uW,2], [B,1,uH,uW]", "\n", "\n", "depth_w", ",", "fw_val", "=", "[", "]", ",", "[", "]", "\n", "for", "coo", ",", "z", "in", "zip", "(", "pcoords", ",", "Z", ")", ":", "\n", "        ", "idx", "=", "coo", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "permute", "(", "1", ",", "0", ")", ".", "long", "(", ")", "[", "[", "1", ",", "0", "]", "]", "\n", "val", "=", "z", ".", "reshape", "(", "-", "1", ")", "\n", "idx", "[", "0", "]", "[", "idx", "[", "0", "]", "<", "0", "]", "=", "hh", "\n", "idx", "[", "0", "]", "[", "idx", "[", "0", "]", ">", "hh", "-", "1", "]", "=", "hh", "\n", "idx", "[", "1", "]", "[", "idx", "[", "1", "]", "<", "0", "]", "=", "ww", "\n", "idx", "[", "1", "]", "[", "idx", "[", "1", "]", ">", "ww", "-", "1", "]", "=", "ww", "\n", "_idx", ",", "_val", "=", "coalesce", "(", "idx", ",", "1", "/", "val", ",", "m", "=", "hh", "+", "1", ",", "n", "=", "ww", "+", "1", ",", "op", "=", "'max'", ")", "# Cast an index with maximum-inverse-depth: we do NOT interpolate points! >> errors near boundary", "\n", "depth_w", ".", "append", "(", "1", "/", "torch", ".", "sparse", ".", "FloatTensor", "(", "_idx", ",", "_val", ",", "torch", ".", "Size", "(", "[", "hh", "+", "1", ",", "ww", "+", "1", "]", ")", ")", ".", "to_dense", "(", ")", "[", ":", "-", "1", ",", ":", "-", "1", "]", ")", "\n", "fw_val", ".", "append", "(", "1", "-", "(", "torch", ".", "sparse", ".", "FloatTensor", "(", "_idx", ",", "_val", ",", "torch", ".", "Size", "(", "[", "hh", "+", "1", ",", "ww", "+", "1", "]", ")", ")", ".", "to_dense", "(", ")", "[", ":", "-", "1", ",", ":", "-", "1", "]", "==", "0", ")", ".", "float", "(", ")", ")", "\n", "# pdb.set_trace()", "\n", "", "depth_w", "=", "torch", ".", "stack", "(", "depth_w", ",", "dim", "=", "0", ")", "\n", "fw_val", "=", "torch", ".", "stack", "(", "fw_val", ",", "dim", "=", "0", ")", "\n", "depth_w", "[", "fw_val", "==", "0", "]", "=", "0", "\n", "\n", "aux_mat", "=", "torch", ".", "tensor", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "type_as", "(", "pose_mat", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "bs", ",", "1", ",", "1", ")", "# [B,1,1]", "\n", "pose_mat_inv", "=", "torch", ".", "inverse", "(", "torch", ".", "cat", "(", "[", "pose_mat", ",", "aux_mat", "]", ",", "dim", "=", "1", ")", ")", "# [B,4,4]", "\n", "trans_vec", "=", "pose_mat_inv", "[", ":", ",", ":", "3", ",", "3", "]", "\n", "euler_vec", "=", "mat2euler", "(", "pose_mat_inv", "[", ":", ",", ":", "3", ",", ":", "3", "]", ")", "\n", "pose_inv", "=", "torch", ".", "cat", "(", "[", "trans_vec", ",", "euler_vec", "]", ",", "dim", "=", "1", ")", "\n", "\n", "img_w", ",", "iw_val", "=", "inverse_warp", "(", "img", ",", "depth_w", ",", "pose_inv", ",", "intrinsics", ")", "\n", "iw_val", "=", "iw_val", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "depth_w", "=", "depth_w", ".", "unsqueeze", "(", "1", ")", "\n", "valid", "=", "fw_val", ".", "unsqueeze", "(", "1", ")", "*", "iw_val", "\n", "# pdb.set_trace()", "\n", "\n", "return", "img_w", "*", "valid", ",", "depth_w", "*", "valid", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.cam2pixel_mof": [[614, 682], ["cam_coords.size", "cam_coords.reshape", "proj_c2p_rot.reshape", "proj_c2p_tr.reshape", "pcoords.sum().permute.reshape", "pcoords[].clamp", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "pcoords.sum().permute.sum().permute", "torch.stack.reshape", "pcoords[].clamp.reshape", "torch.stack.reshape", "proj_c2p_rot.reshape.permute", "pcoords.sum().permute.sum"], "function", ["None"], ["", "def", "cam2pixel_mof", "(", "cam_coords", ",", "proj_c2p_rot", ",", "proj_c2p_tr", ",", "padding_mode", ")", ":", "\n", "    ", "\"\"\"\n    Transform coordinates in the camera frame to the pixel frame.\n    Args:\n        cam_coords: pixel coordinates defined in the first camera coordinates system -- [B, 4, H, W]    // tgt_depth * K_inv\n        proj_c2p_rot: rotation matrix of cameras -- [B, 3, 3, H, W]\n        proj_c2p_tr: translation vectors of cameras -- [B, 3, 1, H, W]\n    Returns:\n        array of [-1,1] coordinates -- [B, 2, H, W]\n    \"\"\"", "\n", "bs", ",", "_", ",", "hh", ",", "ww", "=", "cam_coords", ".", "size", "(", ")", "\n", "cam_coords_flat", "=", "cam_coords", ".", "reshape", "(", "bs", ",", "3", ",", "1", ",", "-", "1", ")", "# [B, 3, 1, H*W]", "\n", "c2p_rot_flat", "=", "proj_c2p_rot", ".", "reshape", "(", "bs", ",", "3", ",", "3", ",", "-", "1", ")", "# [B, 3, 3, H*W]", "\n", "c2p_tr_flat", "=", "proj_c2p_tr", ".", "reshape", "(", "bs", ",", "3", ",", "1", ",", "-", "1", ")", "# [B, 3, 1, H*W]", "\n", "\n", "### Rotation ###", "\n", "if", "proj_c2p_rot", "is", "not", "None", ":", "\n", "        ", "pcoords", "=", "c2p_rot_flat", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "*", "cam_coords_flat", "# [B, 3, 3, H*W] // (K * P) * (D_tgt * K_inv)", "\n", "pcoords", "=", "pcoords", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# [B, 3, 1, H*W]", "\n", "", "else", ":", "\n", "        ", "pcoords", "=", "cam_coords_flat", "\n", "# pdb.set_trace()", "\n", "", "'''\n        plt.close('all')\n        bb = 0\n        plt.figure(1); plt.imshow(pcoords[bb,0,0].reshape(hh, ww).detach().cpu()); plt.colorbar(); plt.ion(); plt.show();\n \n    '''", "\n", "\n", "### Translation ###", "\n", "if", "proj_c2p_tr", "is", "not", "None", ":", "\n", "        ", "pcoords", "=", "pcoords", "+", "c2p_tr_flat", "# [B, 3, 1, H*W]", "\n", "\n", "", "pcoords", "=", "pcoords", ".", "reshape", "(", "bs", ",", "3", ",", "-", "1", ")", "\n", "\n", "X", "=", "pcoords", "[", ":", ",", "0", "]", "\n", "Y", "=", "pcoords", "[", ":", ",", "1", "]", "\n", "Z", "=", "pcoords", "[", ":", ",", "2", "]", ".", "clamp", "(", "min", "=", "1e-3", ")", "\n", "\n", "X_norm", "=", "2", "*", "(", "X", "/", "Z", ")", "/", "(", "ww", "-", "1", ")", "-", "1", "# Normalized, -1 if on extreme left, 1 if on extreme right (x = w-1) [B, H*W]", "\n", "Y_norm", "=", "2", "*", "(", "Y", "/", "Z", ")", "/", "(", "hh", "-", "1", ")", "-", "1", "# Idem [B, H*W]", "\n", "if", "padding_mode", "==", "'zeros'", ":", "\n", "        ", "X_mask", "=", "(", "(", "X_norm", ">", "1", ")", "+", "(", "X_norm", "<", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "X_norm", "[", "X_mask", "]", "=", "2", "# make sure that no point in warped image is a combination of im and gray", "\n", "Y_mask", "=", "(", "(", "Y_norm", ">", "1", ")", "+", "(", "Y_norm", "<", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "Y_norm", "[", "Y_mask", "]", "=", "2", "\n", "\n", "", "pixel_coords", "=", "torch", ".", "stack", "(", "[", "X_norm", ",", "Y_norm", "]", ",", "dim", "=", "2", ")", "# [B, H*W, 2]", "\n", "# pdb.set_trace()", "\n", "'''\n        aaa = pixel_coords.reshape(bs, hh, ww, 2)[0,:,:,0]\n        bbb = Z.reshape(bs, 1, hh, ww)[0,0]\n        ccc = X_norm.reshape(bs, 1, hh, ww)[0,0]\n        ddd = Y_norm.reshape(bs, 1, hh, ww)[0,0]\n        plt.figure(1), plt.imshow(aaa.detach().cpu()), plt.colorbar(), plt.ion(), plt.show()\n        plt.figure(2), plt.imshow(bbb.detach().cpu()), plt.colorbar(), plt.ion(), plt.show()\n        plt.figure(3), plt.imshow(ccc.detach().cpu()), plt.colorbar(), plt.ion(), plt.show()\n        plt.figure(4), plt.imshow(ddd.detach().cpu()), plt.colorbar(), plt.ion(), plt.show()\n\n        plt.figure(9), plt.imshow(Z.reshape(bs, 1, hh, ww).detach().cpu().numpy()[0,0]), plt.colorbar(), plt.tight_layout(), plt.ion(), plt.show()\n\n    '''", "\n", "\n", "X_z", "=", "X", "/", "Z", "\n", "Y_z", "=", "Y", "/", "Z", "\n", "pixel_coords2", "=", "torch", ".", "stack", "(", "[", "X_z", ",", "Y_z", "]", ",", "dim", "=", "2", ")", "# [B, H*W, 2]", "\n", "\n", "return", "pixel_coords", ".", "reshape", "(", "bs", ",", "hh", ",", "ww", ",", "2", ")", ",", "Z", ".", "reshape", "(", "bs", ",", "1", ",", "hh", ",", "ww", ")", ",", "pixel_coords2", ".", "reshape", "(", "bs", ",", "hh", ",", "ww", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.inverse_warp_mof": [[685, 746], ["rigid_warp.check_sizes", "rigid_warp.check_sizes", "rigid_warp.check_sizes", "rigid_warp.check_sizes", "rigid_warp.check_sizes", "img.size", "rigid_warp.pixel2cam", "rigid_warp.pose_mof2mat", "transform_field.permute().reshape.permute().reshape", "rot.reshape().permute.reshape().permute", "tr.reshape().permute.reshape().permute", "rigid_warp.cam2pixel_mof", "valid_points.unsqueeze().float", "numpy.expand_dims().repeat", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "depth.squeeze", "intrinsics.inverse", "intrinsics.reshape", "numpy.array().astype", "torch.grid_sample", "torch.grid_sample", "numpy.array().astype", "torch.grid_sample", "torch.grid_sample", "transform_field.permute().reshape.permute", "rot.reshape().permute.reshape", "tr.reshape().permute.reshape", "src_pixel_coords.abs().max", "valid_points.unsqueeze", "numpy.expand_dims", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.mgrid[].transpose().astype", "src_pixel_coords.abs", "numpy.mgrid[].transpose"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.check_sizes", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pixel2cam", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_mof2mat", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.cam2pixel_mof"], ["", "def", "inverse_warp_mof", "(", "img", ",", "depth", ",", "ref_depth", ",", "motion_field", ",", "intrinsics", ",", "padding_mode", "=", "'zeros'", ")", ":", "\n", "    ", "\"\"\"\n    Inverse warp a source image to the target image plane.\n    Args:\n        img: the source image (where to sample pixels) -- [B, 3, H, W]\n        depth: depth map of the target image -- [B, 1, H, W]\n        ref_depth: the source depth map (where to sample depth) -- [B, 1, H, W] \n        motion_field: 6DoF pose parameters from target to source -- [B, 6, H, W]\n        intrinsics: camera intrinsic matrix -- [B, 3, 3]\n    Returns:\n        projected_img: Source image warped to the target image plane\n        valid_mask: Float array indicating point validity\n        projected_depth: sampled depth from source image  \n        computed_depth: computed depth of source image using the target depth\n    \"\"\"", "\n", "check_sizes", "(", "img", ",", "'img'", ",", "'B3HW'", ")", "\n", "check_sizes", "(", "depth", ",", "'depth'", ",", "'B1HW'", ")", "\n", "check_sizes", "(", "ref_depth", ",", "'ref_depth'", ",", "'B1HW'", ")", "\n", "check_sizes", "(", "motion_field", ",", "'motion_field'", ",", "'B6HW'", ")", "\n", "check_sizes", "(", "intrinsics", ",", "'intrinsics'", ",", "'B33'", ")", "\n", "\n", "bs", ",", "_", ",", "hh", ",", "ww", "=", "img", ".", "size", "(", ")", "\n", "\n", "cam_coords", "=", "pixel2cam", "(", "depth", ".", "squeeze", "(", "1", ")", ",", "intrinsics", ".", "inverse", "(", ")", ")", "# [B,3,H,W]", "\n", "\n", "transform_field", "=", "pose_mof2mat", "(", "motion_field", ")", "# [B, 3, 4, 256, 832]", "\n", "transform_field", "=", "transform_field", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", ".", "reshape", "(", "bs", ",", "-", "1", ",", "3", ",", "4", ")", "# [B, N, 3, 4]", "\n", "\n", "# Get projection matrix for tgt camera frame to source pixel frame", "\n", "proj_cam_to_src_pixel", "=", "intrinsics", ".", "reshape", "(", "bs", ",", "1", ",", "3", ",", "3", ")", "@", "transform_field", "# [B, N, 3, 4]", "\n", "\n", "rot", ",", "tr", "=", "proj_cam_to_src_pixel", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ",", "proj_cam_to_src_pixel", "[", ":", ",", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "rot", "=", "rot", ".", "reshape", "(", "bs", ",", "hh", ",", "ww", ",", "3", ",", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "# [8, 3, 3, 256, 832]", "\n", "tr", "=", "tr", ".", "reshape", "(", "bs", ",", "hh", ",", "ww", ",", "3", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "# [8, 3, 1, 256, 832]", "\n", "\n", "# pdb.set_trace()", "\n", "'''\n        plt.close('all')\n        plt.figure(1); plt.imshow(rot[0,0,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show();\n        plt.figure(2); plt.imshow(tr[0,0,0].detach().cpu()); plt.colorbar(); plt.ion(); plt.show();\n\n    '''", "\n", "src_pixel_coords", ",", "computed_depth", ",", "flow_grid", "=", "cam2pixel_mof", "(", "cam_coords", ",", "rot", ",", "tr", ",", "padding_mode", ")", "# [B,H,W,2]", "\n", "if", "np", ".", "array", "(", "torch", ".", "__version__", "[", ":", "3", "]", ")", ".", "astype", "(", "float", ")", ">=", "1.3", ":", "\n", "        ", "projected_img", "=", "F", ".", "grid_sample", "(", "img", ",", "src_pixel_coords", ",", "padding_mode", "=", "padding_mode", ",", "align_corners", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "projected_img", "=", "F", ".", "grid_sample", "(", "img", ",", "src_pixel_coords", ",", "padding_mode", "=", "padding_mode", ")", "\n", "\n", "", "valid_points", "=", "src_pixel_coords", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "<=", "1", "\n", "valid_mask", "=", "valid_points", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "\n", "if", "np", ".", "array", "(", "torch", ".", "__version__", "[", ":", "3", "]", ")", ".", "astype", "(", "float", ")", ">=", "1.3", ":", "\n", "        ", "projected_depth", "=", "F", ".", "grid_sample", "(", "ref_depth", ",", "src_pixel_coords", ",", "padding_mode", "=", "padding_mode", ",", "align_corners", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "projected_depth", "=", "F", ".", "grid_sample", "(", "ref_depth", ",", "src_pixel_coords", ",", "padding_mode", "=", "padding_mode", ")", "\n", "\n", "", "mgrid_np", "=", "np", ".", "expand_dims", "(", "np", ".", "mgrid", "[", "0", ":", "ww", ",", "0", ":", "hh", "]", ".", "transpose", "(", "2", ",", "1", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "0", ")", ".", "repeat", "(", "bs", ",", "axis", "=", "0", ")", "\n", "mgrid", "=", "torch", ".", "from_numpy", "(", "mgrid_np", ")", ".", "cuda", "(", ")", "# [B,H,W,2]", "\n", "flow", "=", "(", "flow_grid", "-", "mgrid", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "return", "projected_img", ",", "valid_mask", ",", "projected_depth", ",", "computed_depth", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp": [[749, 776], ["img.size", "numpy.expand_dims().repeat", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as.add().permute", "grid[].sub().div", "grid[].sub().div", "numpy.array().astype", "torch.grid_sample", "torch.grid_sample", "numpy.expand_dims", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().type_as.add", "grid[].sub", "grid[].sub", "numpy.mgrid[].transpose().astype", "numpy.array", "numpy.mgrid[].transpose", "mgrid.add().permute.abs().max", "mgrid.add().permute.abs"], "function", ["None"], ["", "def", "flow_warp", "(", "img", ",", "flo", ")", ":", "\n", "    ", "'''\n    Simple flow-guided warping operation with grid sampling interpolation.\n    Args:\n        img: b x c x h x w\n        flo: b x c x h x w\n    Returns:\n        img_w: b x c x h x w\n        valid: b x 1 x h x w\n    '''", "\n", "bs", ",", "ch", ",", "gh", ",", "gw", "=", "img", ".", "size", "(", ")", "\n", "mgrid_np", "=", "np", ".", "expand_dims", "(", "np", ".", "mgrid", "[", "0", ":", "gw", ",", "0", ":", "gh", "]", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "0", ")", ".", "repeat", "(", "bs", ",", "axis", "=", "0", ")", "\n", "mgrid", "=", "torch", ".", "from_numpy", "(", "mgrid_np", ")", ".", "type_as", "(", "flo", ")", "\n", "grid", "=", "mgrid", ".", "add", "(", "flo", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# b x 2 x gh x gw", "\n", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "grid", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "sub", "(", "gw", "/", "2", ")", ".", "div", "(", "gw", "/", "2", ")", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "grid", "[", ":", ",", ":", ",", ":", ",", "1", "]", ".", "sub", "(", "gh", "/", "2", ")", ".", "div", "(", "gh", "/", "2", ")", "\n", "\n", "if", "np", ".", "array", "(", "torch", ".", "__version__", "[", ":", "3", "]", ")", ".", "astype", "(", "float", ")", ">=", "1.3", ":", "\n", "        ", "img_w", "=", "F", ".", "grid_sample", "(", "img", ",", "grid", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "img_w", "=", "F", ".", "grid_sample", "(", "img", ",", "grid", ")", "\n", "\n", "", "valid", "=", "(", "grid", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "<=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "# b x 1 x h x w", "\n", "img_w", "[", "(", "valid", "==", "0", ")", ".", "repeat", "(", "1", ",", "ch", ",", "1", ",", "1", ")", "]", "=", "0", "# b x c x h x w", "\n", "\n", "return", "img_w", ",", "valid", "", "", ""]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.custom_transforms_val.Compose.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.custom_transforms_val.Compose.__call__": [[19, 23], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ",", "intrinsics", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "images", ",", "intrinsics", "=", "t", "(", "images", ",", "intrinsics", ")", "\n", "", "return", "images", ",", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.custom_transforms_val.Normalize.__init__": [[26, 29], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.custom_transforms_val.Normalize.__call__": [[30, 35], ["zip", "t.sub_().div_", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ",", "intrinsics", ")", ":", "\n", "        ", "for", "tensor", "in", "images", ":", "\n", "            ", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "                ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "", "", "return", "images", ",", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.custom_transforms_val.ArrayToTensor.__call__": [[40, 49], ["numpy.transpose", "tensors.append", "torch.from_numpy().float", "torch.from_numpy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "images", ",", "intrinsics", ")", ":", "\n", "        ", "tensors", "=", "[", "]", "\n", "# pdb.set_trace()", "\n", "for", "im", "in", "images", ":", "\n", "# put it from HWC to CHW format", "\n", "            ", "im", "=", "np", ".", "transpose", "(", "im", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "# handle numpy array", "\n", "tensors", ".", "append", "(", "torch", ".", "from_numpy", "(", "im", ")", ".", "float", "(", ")", "/", "255", ")", "\n", "", "return", "tensors", ",", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.custom_transforms_val.RandomHorizontalFlip.__call__": [[54, 65], ["random.random", "numpy.copy", "numpy.copy", "numpy.fliplr"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "images", ",", "intrinsics", ")", ":", "\n", "        ", "assert", "intrinsics", "is", "not", "None", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "output_intrinsics", "=", "np", ".", "copy", "(", "intrinsics", ")", "\n", "output_images", "=", "[", "np", ".", "copy", "(", "np", ".", "fliplr", "(", "im", ")", ")", "for", "im", "in", "images", "]", "\n", "w", "=", "output_images", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "output_intrinsics", "[", "0", ",", "2", "]", "=", "w", "-", "output_intrinsics", "[", "0", ",", "2", "]", "\n", "", "else", ":", "\n", "            ", "output_images", "=", "images", "\n", "output_intrinsics", "=", "intrinsics", "\n", "", "return", "output_images", ",", "output_intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.custom_transforms_val.RandomScaleCrop.__call__": [[70, 90], ["numpy.copy", "numpy.random.uniform", "numpy.random.randint", "numpy.random.randint", "int", "int", "scipy.misc.imresize"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "images", ",", "intrinsics", ")", ":", "\n", "        ", "assert", "intrinsics", "is", "not", "None", "\n", "output_intrinsics", "=", "np", ".", "copy", "(", "intrinsics", ")", "\n", "\n", "in_h", ",", "in_w", ",", "_", "=", "images", "[", "0", "]", ".", "shape", "\n", "x_scaling", ",", "y_scaling", "=", "np", ".", "random", ".", "uniform", "(", "1", ",", "1.15", ",", "2", ")", "\n", "scaled_h", ",", "scaled_w", "=", "int", "(", "in_h", "*", "y_scaling", ")", ",", "int", "(", "in_w", "*", "x_scaling", ")", "\n", "\n", "output_intrinsics", "[", "0", "]", "*=", "x_scaling", "\n", "output_intrinsics", "[", "1", "]", "*=", "y_scaling", "\n", "scaled_images", "=", "[", "imresize", "(", "im", ",", "(", "scaled_h", ",", "scaled_w", ")", ")", "for", "im", "in", "images", "]", "\n", "\n", "offset_y", "=", "np", ".", "random", ".", "randint", "(", "scaled_h", "-", "in_h", "+", "1", ")", "\n", "offset_x", "=", "np", ".", "random", ".", "randint", "(", "scaled_w", "-", "in_w", "+", "1", ")", "\n", "cropped_images", "=", "[", "im", "[", "offset_y", ":", "offset_y", "+", "in_h", ",", "offset_x", ":", "offset_x", "+", "in_w", "]", "for", "im", "in", "scaled_images", "]", "\n", "\n", "output_intrinsics", "[", "0", ",", "2", "]", "-=", "offset_x", "\n", "output_intrinsics", "[", "1", ",", "2", "]", "-=", "offset_y", "\n", "\n", "return", "cropped_images", ",", "output_intrinsics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_obj_translation": [[18, 55], ["zip", "enumerate", "torch.cat", "torch.cat", "rigid_warp.pixel2cam", "rigid_warp.pixel2cam", "rigid_warp.pixel2cam", "rigid_warp.pixel2cam", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trans_fwd.append", "trans_bwd.append", "sum", "torch.cat.append", "r2t_obj_depth[].detach", "torch.cat.inverse", "t2r_obj_depth[].detach", "torch.cat.inverse", "tgt_obj_depth[].detach", "torch.cat.inverse", "ref_obj_depth[].detach", "torch.cat.inverse", "sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "intrinsics[].unsqueeze().repeat", "coords[].mean().unsqueeze", "coords[].mean().unsqueeze", "coords[].mean().unsqueeze", "coords[].mean().unsqueeze", "intrinsics[].unsqueeze", "coords[].mean", "coords[].mean", "coords[].mean", "coords[].mean"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pixel2cam", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pixel2cam", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pixel2cam", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pixel2cam"], ["def", "compute_obj_translation", "(", "r2t_obj_depths", ",", "t2r_obj_depths", ",", "tgt_obj_depths", ",", "ref_obj_depths", ",", "num_insts", ",", "intrinsics", ")", ":", "\n", "    ", "trans_fwd", ",", "trans_bwd", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "r2t_obj_depth", ",", "t2r_obj_depth", ",", "tgt_obj_depth", ",", "ref_obj_depth", ",", "num_inst", "in", "zip", "(", "r2t_obj_depths", ",", "t2r_obj_depths", ",", "tgt_obj_depths", ",", "ref_obj_depths", ",", "num_insts", ")", ":", "\n", "\n", "        ", "if", "sum", "(", "num_inst", ")", "==", "0", ":", "\n", "            ", "continue", ";", "\n", "\n", "", "Ks", "=", "[", "]", "\n", "for", "bb", ",", "ni", "in", "enumerate", "(", "num_inst", ")", ":", "\n", "            ", "if", "ni", "==", "0", ":", "continue", ";", "\n", "Ks", ".", "append", "(", "intrinsics", "[", "bb", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "ni", ",", "1", ",", "1", ")", ")", "\n", "", "Ks", "=", "torch", ".", "cat", "(", "Ks", ",", "dim", "=", "0", ")", "\n", "\n", "r2t_obj_coords", "=", "pixel2cam", "(", "r2t_obj_depth", "[", ":", ",", "0", "]", ".", "detach", "(", ")", ",", "Ks", ".", "inverse", "(", ")", ")", "\n", "t2r_obj_coords", "=", "pixel2cam", "(", "t2r_obj_depth", "[", ":", ",", "0", "]", ".", "detach", "(", ")", ",", "Ks", ".", "inverse", "(", ")", ")", "\n", "tgt_obj_coords", "=", "pixel2cam", "(", "tgt_obj_depth", "[", ":", ",", "0", "]", ".", "detach", "(", ")", ",", "Ks", ".", "inverse", "(", ")", ")", "\n", "ref_obj_coords", "=", "pixel2cam", "(", "ref_obj_depth", "[", ":", ",", "0", "]", ".", "detach", "(", ")", ",", "Ks", ".", "inverse", "(", ")", ")", "\n", "\n", "tr_fwd", ",", "tr_bwd", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "ii", "in", "range", "(", "sum", "(", "num_inst", ")", ")", ":", "\n", "            ", "r2t_obj_coord_mean", "=", "torch", ".", "cat", "(", "[", "coords", "[", "coords", "!=", "0", "]", ".", "mean", "(", ")", ".", "unsqueeze", "(", "0", ")", "for", "coords", "in", "r2t_obj_coords", "[", "ii", "]", "]", ")", "\n", "t2r_obj_coord_mean", "=", "torch", ".", "cat", "(", "[", "coords", "[", "coords", "!=", "0", "]", ".", "mean", "(", ")", ".", "unsqueeze", "(", "0", ")", "for", "coords", "in", "t2r_obj_coords", "[", "ii", "]", "]", ")", "\n", "tgt_obj_coord_mean", "=", "torch", ".", "cat", "(", "[", "coords", "[", "coords", "!=", "0", "]", ".", "mean", "(", ")", ".", "unsqueeze", "(", "0", ")", "for", "coords", "in", "tgt_obj_coords", "[", "ii", "]", "]", ")", "\n", "ref_obj_coord_mean", "=", "torch", ".", "cat", "(", "[", "coords", "[", "coords", "!=", "0", "]", ".", "mean", "(", ")", ".", "unsqueeze", "(", "0", ")", "for", "coords", "in", "ref_obj_coords", "[", "ii", "]", "]", ")", "\n", "tr_fwd", ".", "append", "(", "(", "(", "(", "r2t_obj_coord_mean", "-", "tgt_obj_coord_mean", ")", "+", "(", "ref_obj_coord_mean", "-", "t2r_obj_coord_mean", ")", ")", "/", "2", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "tr_bwd", ".", "append", "(", "(", "(", "(", "t2r_obj_coord_mean", "-", "ref_obj_coord_mean", ")", "+", "(", "tgt_obj_coord_mean", "-", "r2t_obj_coord_mean", ")", ")", "/", "2", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "tr_fwd", "=", "torch", ".", "cat", "(", "tr_fwd", ",", "dim", "=", "0", ")", "\n", "tr_bwd", "=", "torch", ".", "cat", "(", "tr_bwd", ",", "dim", "=", "0", ")", "\n", "\n", "trans_fwd", ".", "append", "(", "tr_fwd", ")", "\n", "trans_bwd", ".", "append", "(", "tr_bwd", ")", "\n", "\n", "\n", "", "return", "trans_fwd", ",", "trans_bwd", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_batch_bg_warping": [[58, 95], ["zip", "demo_utils.compute_bg_warping", "demo_utils.compute_bg_warping", "outputs.append", "torch.cat", "torch.cat", "zip"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_bg_warping", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_bg_warping"], ["", "def", "compute_batch_bg_warping", "(", "tgt_img", ",", "ref_imgs", ",", "tgt_bg_masks", ",", "ref_bg_masks", ",", "tgt_depth", ",", "ref_depths", ",", "poses", ",", "poses_inv", ",", "intrinsics", ")", ":", "\n", "    ", "outputs", "=", "[", "]", "\n", "for", "ref_img", ",", "ref_depth", ",", "pose", ",", "pose_inv", ",", "tgt_bg_mask", ",", "ref_bg_mask", "in", "zip", "(", "ref_imgs", ",", "ref_depths", ",", "poses", ",", "poses_inv", ",", "tgt_bg_masks", ",", "ref_bg_masks", ")", ":", "\n", "        ", "'''\n            tgt_img:     ([B, 3, 256, 832])\n            ref_img:     ([B, 3, 256, 832])\n            tgt_depth:   ([B, 1, 256, 832])\n            ref_depth:   ([B, 1, 256, 832])\n            pose:        ([B, 6])\n            pose_inv:    ([B, 6])\n            tgt_bg_mask: ([B, 1, 256, 832])\n            ref_bg_mask: ([B, 1, 256, 832])\n\n            bb = 0\n            plt.close('all')\n            tgt = (tgt_img * 0.5 + 0.5)\n            ref = (ref_img * 0.5 + 0.5)\n            ea1 = 6; ea2 = 1; ii = 1;\n            fig = plt.figure(1, figsize=(9, 13))\n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(tgt.detach().cpu().numpy()[bb].transpose(1,2,0)), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar()\n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(tgt_bg_mask.detach().cpu().numpy()[bb,0]), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar()\n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(ref.detach().cpu().numpy()[bb].transpose(1,2,0)), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar()\n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(ref_bg_mask.detach().cpu().numpy()[bb,0]), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar()\n            fig.tight_layout(), plt.ion(), plt.show()\n            \n        '''", "\n", "### Outputs:  warped-masked-bg-img,  valid-bg-mask,  valid-bg-proj-depth,  valid-bg-comp-depth ###", "\n", "fwd_outputs", "=", "compute_bg_warping", "(", "tgt_img", ",", "ref_img", ",", "tgt_bg_mask", ",", "tgt_depth", ",", "ref_depth", ",", "pose", ",", "pose_inv", ",", "intrinsics", ")", "\n", "bwd_outputs", "=", "compute_bg_warping", "(", "ref_img", ",", "tgt_img", ",", "ref_bg_mask", ",", "ref_depth", ",", "tgt_depth", ",", "pose_inv", ",", "pose", ",", "intrinsics", ")", "\n", "\n", "outputs", ".", "append", "(", "[", "torch", ".", "cat", "(", "[", "fwd", ",", "bwd", "]", ",", "dim", "=", "0", ")", "for", "fwd", ",", "bwd", "in", "zip", "(", "fwd_outputs", ",", "bwd_outputs", ")", "]", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_bg_warping": [[98, 103], ["rigid_warp.inverse_warp2"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.inverse_warp2"], ["", "def", "compute_bg_warping", "(", "tgt_img", ",", "ref_img", ",", "bg_mask", ",", "tgt_depth", ",", "ref_depth", ",", "pose", ",", "pose_inv", ",", "intrinsic", ")", ":", "\n", "    ", "ref_img_warped", ",", "valid_mask", ",", "projected_depth", ",", "computed_depth", "=", "inverse_warp2", "(", "ref_img", ",", "tgt_depth", ",", "pose", ",", "intrinsic", ",", "ref_depth", ")", "\n", "valid_mask", "=", "valid_mask", "*", "bg_mask", "\n", "\n", "return", "ref_img_warped", "*", "valid_mask", ",", "valid_mask", ",", "projected_depth", "*", "valid_mask", ",", "computed_depth", "*", "valid_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_batch_obj_warping": [[106, 140], ["zip", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "demo_utils.compute_obj_warping", "demo_utils.compute_obj_warping", "outputs.append", "ovl_obj.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "tgt_img[].unsqueeze().repeat", "ref_img[].unsqueeze().repeat", "tgt_depth[].unsqueeze().repeat", "ref_depth[].unsqueeze().repeat", "ego_pose[].unsqueeze().repeat", "ego_pose_inv[].unsqueeze().repeat", "intrinsics[].unsqueeze().repeat", "torch.cat", "torch.cat", "zip", "tgt_img[].unsqueeze", "ref_img[].unsqueeze", "tgt_depth[].unsqueeze", "ref_depth[].unsqueeze", "ego_pose[].unsqueeze", "ego_pose_inv[].unsqueeze", "intrinsics[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_obj_warping", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_obj_warping"], ["", "def", "compute_batch_obj_warping", "(", "tgt_img", ",", "ref_imgs", ",", "tgt_obj_masks", ",", "ref_obj_masks", ",", "tgt_depth", ",", "ref_depths", ",", "ego_poses", ",", "ego_poses_inv", ",", "obj_poses", ",", "obj_poses_inv", ",", "intrinsics", ",", "num_insts", ")", ":", "\n", "    ", "outputs", ",", "ovl_obj", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "ref_img", ",", "ref_depth", ",", "tgt_obj_mask", ",", "ref_obj_mask", ",", "ego_pose", ",", "ego_pose_inv", ",", "obj_pose", ",", "obj_pose_inv", ",", "num_inst", "in", "zip", "(", "ref_imgs", ",", "ref_depths", ",", "tgt_obj_masks", ",", "ref_obj_masks", ",", "ego_poses", ",", "ego_poses_inv", ",", "obj_poses", ",", "obj_poses_inv", ",", "num_insts", ")", ":", "\n", "# pdb.set_trace()", "\n", "\n", "        ", "tgt_Is", ",", "ref_Is", ",", "tgt_Ds", ",", "ref_Ds", ",", "ego_Ps", ",", "ego_Ps_inv", ",", "Ks", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "bb", ",", "ni", "in", "enumerate", "(", "num_inst", ")", ":", "\n", "            ", "if", "ni", "==", "0", ":", "continue", ";", "\n", "tgt_Is", ".", "append", "(", "tgt_img", "[", "bb", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "ni", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "ref_Is", ".", "append", "(", "ref_img", "[", "bb", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "ni", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "tgt_Ds", ".", "append", "(", "tgt_depth", "[", "bb", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "ni", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "ref_Ds", ".", "append", "(", "ref_depth", "[", "bb", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "ni", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "ego_Ps", ".", "append", "(", "ego_pose", "[", "bb", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "ni", ",", "1", ")", ")", "\n", "ego_Ps_inv", ".", "append", "(", "ego_pose_inv", "[", "bb", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "ni", ",", "1", ")", ")", "\n", "Ks", ".", "append", "(", "intrinsics", "[", "bb", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "ni", ",", "1", ",", "1", ")", ")", "\n", "", "tgt_Is", "=", "torch", ".", "cat", "(", "tgt_Is", ",", "dim", "=", "0", ")", "\n", "ref_Is", "=", "torch", ".", "cat", "(", "ref_Is", ",", "dim", "=", "0", ")", "\n", "tgt_Ds", "=", "torch", ".", "cat", "(", "tgt_Ds", ",", "dim", "=", "0", ")", "\n", "ref_Ds", "=", "torch", ".", "cat", "(", "ref_Ds", ",", "dim", "=", "0", ")", "\n", "ego_Ps", "=", "torch", ".", "cat", "(", "ego_Ps", ",", "dim", "=", "0", ")", "\n", "ego_Ps_inv", "=", "torch", ".", "cat", "(", "ego_Ps_inv", ",", "dim", "=", "0", ")", "\n", "Ks", "=", "torch", ".", "cat", "(", "Ks", ",", "dim", "=", "0", ")", "\n", "\n", "# (rtt_Is, rtt_Ms, prj_Ds, cmp_Ds), ovl_obj", "\n", "fwd_outputs", ",", "fwd_ovl_obj", "=", "compute_obj_warping", "(", "ref_Is", ",", "ref_obj_mask", ",", "tgt_obj_mask", ",", "ref_Ds", ",", "tgt_Ds", ",", "ego_Ps", ",", "obj_pose", ",", "Ks", ",", "num_inst", ")", "\n", "\n", "bwd_outputs", ",", "bwd_ovl_obj", "=", "compute_obj_warping", "(", "tgt_Is", ",", "tgt_obj_mask", ",", "ref_obj_mask", ",", "tgt_Ds", ",", "ref_Ds", ",", "ego_Ps_inv", ",", "obj_pose_inv", ",", "Ks", ",", "num_inst", ")", "\n", "\n", "outputs", ".", "append", "(", "[", "torch", ".", "cat", "(", "[", "fwd", ",", "bwd", "]", ",", "dim", "=", "0", ")", "for", "fwd", ",", "bwd", "in", "zip", "(", "fwd_outputs", ",", "bwd_outputs", ")", "]", ")", "\n", "ovl_obj", ".", "append", "(", "torch", ".", "cat", "(", "[", "fwd_ovl_obj", ",", "bwd_ovl_obj", "]", ",", "dim", "=", "0", ")", ")", "\n", "\n", "", "return", "outputs", ",", "ovl_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_obj_warping": [[143, 170], ["rigid_warp.inverse_warp2", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "[].sum", "obj_valid_mask[].sum", "[].sum", "[].sum", "[].sum().clamp", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "[].sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "rtt_img_warped.size", "rtt_img_warped.size", "rtt_img_warped.size", "obj_valid_mask.size", "obj_valid_mask.size", "obj_valid_mask.size", "projected_depth.size", "projected_depth.size", "projected_depth.size", "computed_depth.size", "computed_depth.size", "computed_depth.size", "obj_valid_mask.size", "obj_valid_mask.size", "obj_valid_mask.size", "int", "int", "int", "int", "int", "int", "int", "int", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "int", "int", "sum", "sum"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.inverse_warp2"], ["", "def", "compute_obj_warping", "(", "ref_img", ",", "ref_obj_mask", ",", "tgt_obj_mask", ",", "ref_depth", ",", "tgt_depth", ",", "ego_pose", ",", "obj_pose", ",", "intrinsic", ",", "num_inst", ")", ":", "\n", "    ", "rtt_img_warped", ",", "valid_mask", ",", "projected_depth", ",", "computed_depth", "=", "inverse_warp2", "(", "ref_img", ",", "tgt_depth", ",", "[", "ego_pose", ",", "obj_pose", "]", ",", "intrinsic", ",", "ref_depth", ")", "\n", "\n", "obj_valid_mask", "=", "valid_mask", "*", "tgt_obj_mask", "\n", "\n", "rtt_Is", ",", "rtt_Ms", ",", "prj_Ds", ",", "cmp_Ds", ",", "ovl_Ms", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "bb", ",", "ni", "in", "enumerate", "(", "num_inst", ")", ":", "\n", "        ", "if", "ni", "==", "0", ":", "\n", "            ", "rtt_Is", ".", "append", "(", "torch", ".", "zeros", "(", "1", ",", "rtt_img_warped", ".", "size", "(", "1", ")", ",", "rtt_img_warped", ".", "size", "(", "2", ")", ",", "rtt_img_warped", ".", "size", "(", "3", ")", ")", ".", "cuda", "(", ")", ")", "\n", "rtt_Ms", ".", "append", "(", "torch", ".", "zeros", "(", "1", ",", "obj_valid_mask", ".", "size", "(", "1", ")", ",", "obj_valid_mask", ".", "size", "(", "2", ")", ",", "obj_valid_mask", ".", "size", "(", "3", ")", ")", ".", "cuda", "(", ")", ")", "\n", "prj_Ds", ".", "append", "(", "torch", ".", "zeros", "(", "1", ",", "projected_depth", ".", "size", "(", "1", ")", ",", "projected_depth", ".", "size", "(", "2", ")", ",", "projected_depth", ".", "size", "(", "3", ")", ")", ".", "cuda", "(", ")", ")", "\n", "cmp_Ds", ".", "append", "(", "torch", ".", "zeros", "(", "1", ",", "computed_depth", ".", "size", "(", "1", ")", ",", "computed_depth", ".", "size", "(", "2", ")", ",", "computed_depth", ".", "size", "(", "3", ")", ")", ".", "cuda", "(", ")", ")", "\n", "ovl_Ms", ".", "append", "(", "torch", ".", "zeros", "(", "1", ",", "obj_valid_mask", ".", "size", "(", "1", ")", ",", "obj_valid_mask", ".", "size", "(", "2", ")", ",", "obj_valid_mask", ".", "size", "(", "3", ")", ")", ".", "cuda", "(", ")", ")", "\n", "continue", ";", "\n", "", "rtt_Is", ".", "append", "(", "(", "rtt_img_warped", "*", "obj_valid_mask", ")", "[", "int", "(", "sum", "(", "num_inst", "[", ":", "bb", "]", ")", ")", ":", "int", "(", "sum", "(", "num_inst", "[", ":", "bb", "]", ")", "+", "ni", ")", "]", ".", "sum", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", "\n", "rtt_Ms", ".", "append", "(", "obj_valid_mask", "[", "int", "(", "sum", "(", "num_inst", "[", ":", "bb", "]", ")", ")", ":", "int", "(", "sum", "(", "num_inst", "[", ":", "bb", "]", ")", "+", "ni", ")", "]", ".", "sum", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", "\n", "prj_Ds", ".", "append", "(", "(", "projected_depth", "*", "obj_valid_mask", ")", "[", "int", "(", "sum", "(", "num_inst", "[", ":", "bb", "]", ")", ")", ":", "int", "(", "sum", "(", "num_inst", "[", ":", "bb", "]", ")", "+", "ni", ")", "]", ".", "sum", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", "\n", "cmp_Ds", ".", "append", "(", "(", "computed_depth", "*", "obj_valid_mask", ")", "[", "int", "(", "sum", "(", "num_inst", "[", ":", "bb", "]", ")", ")", ":", "int", "(", "sum", "(", "num_inst", "[", ":", "bb", "]", ")", "+", "ni", ")", "]", ".", "sum", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", "\n", "# ovl_Ms.append( ( 1 - (1-r2t_obj_mask) * (1-tgt_obj_mask) * (1-ref_obj_mask) )[int(sum(num_inst[:bb])):int(sum(num_inst[:bb])+ni)].sum(dim=0, keepdim=True).clamp(0,1) )   # ref + r2t + tgt \ubaa8\ub450 \ud569\ud574\uc11c \ub9c8\uc2a4\ud0b9", "\n", "ovl_Ms", ".", "append", "(", "(", "1", "-", "(", "1", "-", "tgt_obj_mask", ")", "*", "(", "1", "-", "ref_obj_mask", ")", ")", "[", "int", "(", "sum", "(", "num_inst", "[", ":", "bb", "]", ")", ")", ":", "int", "(", "sum", "(", "num_inst", "[", ":", "bb", "]", ")", "+", "ni", ")", "]", ".", "sum", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "clamp", "(", "0", ",", "1", ")", ")", "# ref + tgt \ubaa8\ub450 \ud569\ud574\uc11c \ub9c8\uc2a4\ud0b9", "\n", "", "rtt_Is", "=", "torch", ".", "cat", "(", "rtt_Is", ",", "dim", "=", "0", ")", "\n", "rtt_Ms", "=", "torch", ".", "cat", "(", "rtt_Ms", ",", "dim", "=", "0", ")", "\n", "prj_Ds", "=", "torch", ".", "cat", "(", "prj_Ds", ",", "dim", "=", "0", ")", "\n", "cmp_Ds", "=", "torch", ".", "cat", "(", "cmp_Ds", ",", "dim", "=", "0", ")", "\n", "ovl_Ms", "=", "torch", ".", "cat", "(", "ovl_Ms", ",", "dim", "=", "0", ")", "\n", "\n", "return", "(", "rtt_Is", ",", "rtt_Ms", ",", "prj_Ds", ",", "cmp_Ds", ")", ",", "ovl_Ms", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_reverse_warp_ego": [[173, 259], ["flow_reversal.FlowReversal", "zip", "rigid_warp.depth2flow", "flow_reversal.FlowReversal.", "rigid_warp.flow_warp", "w_depths.append", "w_sc_depths.append", "v_masks.append", "r_flows.append", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rigid_warp.flow_warp", "rigid_warp.flow_warp", "w_obj_imgs.append", "w_obj_masks.append", "w_obj_depths.append", "w_obj_sc_depths.append", "norm[].clone", "rigid_warp.transform_scale_consistent_depth", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "v_mask[].unsqueeze().repeat", "rev_d2f[].unsqueeze().repeat", "w_depth[].unsqueeze().repeat", "w_sc_depth[].unsqueeze().repeat", "w_obj_mask.round", "w_obj_mask.round", "w_obj_mask.round", "w_obj_mask.round", "v_mask[].unsqueeze", "rev_d2f[].unsqueeze", "w_depth[].unsqueeze", "w_sc_depth[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.depth2flow", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.transform_scale_consistent_depth"], ["", "def", "compute_reverse_warp_ego", "(", "depths", ",", "obj_imgs", ",", "obj_masks", ",", "ego_poses", ",", "intrinsics", ",", "num_insts", ")", ":", "\n", "    ", "'''\n        (args)\n        depths:     NumSeqs(2) >> B1HW\n        ego_poses:  NumSeqs(2) >> B6\n        intrinsics: B33\n\n        bb = 0\n        plt.close('all')\n        aaa = 1/depths[0].detach().cpu()[bb,0]\n        bbb = d2f.detach().cpu()[bb,0]\n        ccc = rev_d2f.detach().cpu()[bb,0]\n        ddd = r_valid.detach().cpu()[bb,0]\n        eee = w_valid.detach().cpu()[bb,0]\n        fff = v_mask.detach().cpu()[bb,0]\n        ggg = 1/w_depth.detach().cpu()[bb,0]\n        hhh = 1/w_sc_depth.detach().cpu()[bb,0]\n        ea1 = 8; ea2 = 1; ii = 1;\n        fig = plt.figure(1, figsize=(7, 13))\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(aaa), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(bbb), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(ccc), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(ddd), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(eee), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(fff), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(ggg), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(hhh), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.tight_layout(), plt.ion(), plt.show()\n        \n    '''", "\n", "flow_reversal_layer", "=", "FlowReversal", "(", ")", "\n", "w_depths", ",", "w_sc_depths", ",", "v_masks", ",", "r_flows", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "w_obj_imgs", ",", "w_obj_masks", ",", "w_obj_depths", ",", "w_obj_sc_depths", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "depth", ",", "obj_img", ",", "obj_mask", ",", "ego_pose", ",", "num_inst", "in", "zip", "(", "depths", ",", "obj_imgs", ",", "obj_masks", ",", "ego_poses", ",", "num_insts", ")", ":", "\n", "### 1st step: batch-wise  ###", "\n", "        ", "d2f", ",", "_", "=", "depth2flow", "(", "depth", ",", "ego_pose", ",", "intrinsics", ")", "\n", "rev_d2f", ",", "norm", "=", "flow_reversal_layer", "(", "d2f", ",", "d2f", ")", "# torch.Size([4, 2, 256, 832]), torch.Size([4, 2, 256, 832])", "\n", "rev_d2f", "=", "-", "rev_d2f", "\n", "rev_d2f", "[", "norm", ">", "0", "]", "=", "rev_d2f", "[", "norm", ">", "0", "]", "/", "norm", "[", "norm", ">", "0", "]", ".", "clone", "(", ")", "\n", "r_valid", "=", "(", "norm", "!=", "0", ")", ".", "float", "(", ")", ".", "prod", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# torch.Size([4, 1, 256, 832])", "\n", "rev_d2f", "=", "rev_d2f", "*", "r_valid", "# torch.Size([4, 2, 256, 832])", "\n", "w_depth", ",", "w_valid", "=", "flow_warp", "(", "depth", ",", "rev_d2f", ")", "# torch.Size([4, 1, 256, 832]), torch.Size([4, 1, 256, 832])", "\n", "v_mask", "=", "(", "w_valid", "*", "r_valid", ")", ".", "detach", "(", ")", "# torch.Size([4, 1, 256, 832])", "\n", "w_depth", "=", "w_depth", "*", "v_mask", "# torch.Size([4, 1, 256, 832])", "\n", "w_sc_depth", "=", "transform_scale_consistent_depth", "(", "w_depth", ",", "ego_pose", ",", "intrinsics", ")", "*", "v_mask", "# torch.Size([4, 1, 256, 832])", "\n", "\n", "### 1st step outputs ###", "\n", "w_depths", ".", "append", "(", "w_depth", ")", "# NumRefs(2) >> torch.Size([4, 1, 256, 832])", "\n", "w_sc_depths", ".", "append", "(", "w_sc_depth", ")", "# NumRefs(2) >> torch.Size([4, 1, 256, 832])", "\n", "v_masks", ".", "append", "(", "v_mask", ")", "# NumRefs(2) >> torch.Size([4, 1, 256, 832])", "\n", "r_flows", ".", "append", "(", "rev_d2f", ")", "# NumRefs(2) >> torch.Size([4, 2, 256, 832])", "\n", "# pdb.set_trace()", "\n", "\n", "### 2nd step: instance-wise ###", "\n", "Vs", ",", "Fs", ",", "Ds", ",", "Ts", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "bb", ",", "ni", "in", "enumerate", "(", "num_inst", ")", ":", "\n", "            ", "if", "ni", "==", "0", ":", "continue", ";", "\n", "Vs", ".", "append", "(", "v_mask", "[", "bb", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "ni", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "Fs", ".", "append", "(", "rev_d2f", "[", "bb", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "ni", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "Ds", ".", "append", "(", "w_depth", "[", "bb", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "ni", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "Ts", ".", "append", "(", "w_sc_depth", "[", "bb", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "ni", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "", "Vs", "=", "torch", ".", "cat", "(", "Vs", ",", "dim", "=", "0", ")", "\n", "Fs", "=", "torch", ".", "cat", "(", "Fs", ",", "dim", "=", "0", ")", "\n", "Ds", "=", "torch", ".", "cat", "(", "Ds", ",", "dim", "=", "0", ")", "\n", "Ts", "=", "torch", ".", "cat", "(", "Ts", ",", "dim", "=", "0", ")", "\n", "\n", "w_obj_img", ",", "_", "=", "flow_warp", "(", "obj_img", ",", "Fs", ")", "\n", "w_obj_mask", ",", "_", "=", "flow_warp", "(", "obj_mask", ",", "Fs", ")", "\n", "\n", "### 2nd step outputs ###", "\n", "w_obj_imgs", ".", "append", "(", "w_obj_img", "*", "w_obj_mask", ".", "round", "(", ")", "*", "Vs", ")", "# NumRefs(2) >> torch.Size([12, 3, 256, 832])", "\n", "w_obj_masks", ".", "append", "(", "w_obj_mask", ".", "round", "(", ")", "*", "Vs", ")", "# NumRefs(2) >> torch.Size([12, 1, 256, 832])", "\n", "w_obj_depths", ".", "append", "(", "Ds", "*", "w_obj_mask", ".", "round", "(", ")", "*", "Vs", ")", "# NumRefs(2) >> torch.Size([12, 1, 256, 832])", "\n", "w_obj_sc_depths", ".", "append", "(", "Ts", "*", "w_obj_mask", ".", "round", "(", ")", "*", "Vs", ")", "# NumRefs(2) >> torch.Size([12, 1, 256, 832])", "\n", "# pdb.set_trace()", "\n", "\n", "", "return", "w_depths", ",", "w_sc_depths", ",", "v_masks", ",", "r_flows", ",", "w_obj_imgs", ",", "w_obj_masks", ",", "w_obj_depths", ",", "w_obj_sc_depths", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.demo_utils.compute_reverse_warp_obj": [[262, 339], ["flow_reversal.FlowReversal", "zip", "rigid_warp.depth2flow", "flow_reversal.FlowReversal.", "rigid_warp.flow_warp", "rigid_warp.flow_warp", "rigid_warp.flow_warp", "w_obj_imgs.append", "w_obj_masks.append", "w_obj_depths.append", "w_obj_sc_depths.append", "norm[].clone", "rigid_warp.transform_scale_consistent_depth", "w_obj_mask.round", "w_obj_mask.round", "w_obj_mask.round", "w_obj_mask.round"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.depth2flow", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.transform_scale_consistent_depth"], ["", "def", "compute_reverse_warp_obj", "(", "depths", ",", "obj_imgs", ",", "obj_masks", ",", "obj_poses", ",", "intrinsics", ",", "num_insts", ")", ":", "\n", "    ", "'''\n        (args)\n        depths:     NumSeqs(2) >> N1HW\n        obj_poses:  NumSeqs(2) >> N6\n        intrinsics: B33\n\n        bb = 0\n        plt.close('all')\n        aaa = depths[0].detach().cpu()[bb,0]\n        bbb = d2f.detach().cpu()[bb,0]\n        ccc = rev_d2f.detach().cpu()[bb,0]\n        ddd = r_valid.detach().cpu()[bb,0]\n        eee = w_valid.detach().cpu()[bb,0]\n        fff = v_mask.detach().cpu()[bb,0]\n        ggg = w_depth.detach().cpu()[bb,0]\n        hhh = w_sc_depth.detach().cpu()[bb,0]\n        iii = obj_img.detach().cpu()[bb,0]\n        jjj = w_obj_img.detach().cpu()[bb,0]\n        kkk = (w_obj_mask*v_mask).detach().cpu()[bb,0]\n        lll = (w_obj_img*w_obj_mask*v_mask).detach().cpu()[bb,0]\n        ea1 = 12; ea2 = 1; ii = 1;\n        fig = plt.figure(1, figsize=(7, 13))\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(aaa), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(bbb), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(ccc), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(ddd), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(eee), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(fff), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(ggg), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(hhh), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(iii), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(jjj), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(kkk), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.add_subplot(ea1,ea2,ii); ii += 1;\n        plt.imshow(lll), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar();\n        fig.tight_layout(), plt.ion(), plt.show()\n        \n    '''", "\n", "flow_reversal_layer", "=", "FlowReversal", "(", ")", "\n", "w_obj_imgs", ",", "w_obj_masks", ",", "w_obj_depths", ",", "w_obj_sc_depths", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "depth", ",", "obj_img", ",", "obj_mask", ",", "obj_pose", ",", "num_inst", "in", "zip", "(", "depths", ",", "obj_imgs", ",", "obj_masks", ",", "obj_poses", ",", "num_insts", ")", ":", "\n", "### 1st step: instance-wise  ###", "\n", "        ", "d2f", ",", "_", "=", "depth2flow", "(", "depth", ",", "obj_pose", ",", "intrinsics", ")", "\n", "rev_d2f", ",", "norm", "=", "flow_reversal_layer", "(", "d2f", ",", "d2f", ")", "# torch.Size([12, 2, 256, 832]), torch.Size([12, 2, 256, 832])", "\n", "rev_d2f", "=", "-", "rev_d2f", "\n", "rev_d2f", "[", "norm", ">", "0", "]", "=", "rev_d2f", "[", "norm", ">", "0", "]", "/", "norm", "[", "norm", ">", "0", "]", ".", "clone", "(", ")", "\n", "r_valid", "=", "(", "norm", "!=", "0", ")", ".", "float", "(", ")", ".", "prod", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# torch.Size([12, 1, 256, 832])", "\n", "rev_d2f", "=", "rev_d2f", "*", "r_valid", "# torch.Size([12, 2, 256, 832])", "\n", "\n", "w_depth", ",", "w_valid", "=", "flow_warp", "(", "depth", ",", "rev_d2f", ")", "# torch.Size([12, 1, 256, 832]), torch.Size([12, 1, 256, 832])", "\n", "v_mask", "=", "(", "w_valid", "*", "r_valid", ")", ".", "detach", "(", ")", "# torch.Size([12, 1, 256, 832])", "\n", "w_depth", "=", "w_depth", "*", "v_mask", "# torch.Size([12, 1, 256, 832])", "\n", "w_sc_depth", "=", "transform_scale_consistent_depth", "(", "w_depth", ",", "obj_pose", ",", "intrinsics", ")", "*", "v_mask", "# torch.Size([12, 1, 256, 832])", "\n", "\n", "w_obj_img", ",", "_", "=", "flow_warp", "(", "obj_img", ",", "rev_d2f", ")", "\n", "w_obj_mask", ",", "_", "=", "flow_warp", "(", "obj_mask", ",", "rev_d2f", ")", "\n", "\n", "### outputs ###", "\n", "w_obj_imgs", ".", "append", "(", "w_obj_img", "*", "w_obj_mask", ".", "round", "(", ")", "*", "v_mask", ")", "# NumRefs(2) >> torch.Size([12, 3, 256, 832])", "\n", "w_obj_masks", ".", "append", "(", "w_obj_mask", ".", "round", "(", ")", "*", "v_mask", ")", "# NumRefs(2) >> torch.Size([12, 1, 256, 832])", "\n", "w_obj_depths", ".", "append", "(", "w_depth", "*", "w_obj_mask", ".", "round", "(", ")", "*", "v_mask", ")", "# NumRefs(2) >> torch.Size([12, 1, 256, 832])", "\n", "w_obj_sc_depths", ".", "append", "(", "w_sc_depth", "*", "w_obj_mask", ".", "round", "(", ")", "*", "v_mask", ")", "# NumRefs(2) >> torch.Size([12, 1, 256, 832])", "\n", "\n", "", "return", "w_obj_imgs", ",", "w_obj_masks", ",", "w_obj_depths", ",", "w_obj_sc_depths", "\n", "", ""]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.flow_reversal.FlowReversal.__init__": [[12, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.__init__"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "FlowReversal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.flow_reversal.FlowReversal.forward": [[16, 67], ["img.size", "x.repeat.repeat.repeat", "y.repeat.repeat.repeat", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "flow_reversal.FlowReversal.get_gaussian_weights", "flow_reversal.FlowReversal.sample_one", "flow_reversal.FlowReversal.sample_one", "flow_reversal.FlowReversal.sample_one", "flow_reversal.FlowReversal.sample_one"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.flow_reversal.FlowReversal.get_gaussian_weights", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.flow_reversal.FlowReversal.sample_one", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.flow_reversal.FlowReversal.sample_one", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.flow_reversal.FlowReversal.sample_one", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.flow_reversal.FlowReversal.sample_one"], ["", "def", "forward", "(", "self", ",", "img", ",", "flo", ")", ":", "\n", "        ", "\"\"\"\n            -img: image (N, C, H, W)\n            -flo: optical flow (N, 2, H, W)\n            elements of flo is in [0, H] and [0, W] for dx, dy\n\n        \"\"\"", "\n", "\n", "\n", "# (x1, y1)\t\t(x1, y2)", "\n", "# +---------------+", "\n", "# |\t\t\t\t  |", "\n", "# |\to(x, y) \t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# |\t\t\t\t  |", "\n", "# +---------------+", "\n", "# (x2, y1)\t\t(x2, y2)", "\n", "\n", "\n", "N", ",", "C", ",", "_", ",", "_", "=", "img", ".", "size", "(", ")", "\n", "\n", "# translate start-point optical flow to end-point optical flow", "\n", "y", "=", "flo", "[", ":", ",", "0", ":", "1", ":", ",", ":", "]", "\n", "x", "=", "flo", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "C", ",", "1", ",", "1", ")", "\n", "y", "=", "y", ".", "repeat", "(", "1", ",", "C", ",", "1", ",", "1", ")", "\n", "\n", "# Four point of square (x1, y1), (x1, y2), (x2, y1), (y2, y2)", "\n", "x1", "=", "torch", ".", "floor", "(", "x", ")", "\n", "x2", "=", "x1", "+", "1", "\n", "y1", "=", "torch", ".", "floor", "(", "y", ")", "\n", "y2", "=", "y1", "+", "1", "\n", "\n", "# firstly, get gaussian weights", "\n", "w11", ",", "w12", ",", "w21", ",", "w22", "=", "self", ".", "get_gaussian_weights", "(", "x", ",", "y", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ")", "\n", "# pdb.set_trace()", "\n", "\n", "# secondly, sample each weighted corner", "\n", "img11", ",", "o11", "=", "self", ".", "sample_one", "(", "img", ",", "x1", ",", "y1", ",", "w11", ")", "\n", "img12", ",", "o12", "=", "self", ".", "sample_one", "(", "img", ",", "x1", ",", "y2", ",", "w12", ")", "\n", "img21", ",", "o21", "=", "self", ".", "sample_one", "(", "img", ",", "x2", ",", "y1", ",", "w21", ")", "\n", "img22", ",", "o22", "=", "self", ".", "sample_one", "(", "img", ",", "x2", ",", "y2", ",", "w22", ")", "\n", "\n", "\n", "imgw", "=", "img11", "+", "img12", "+", "img21", "+", "img22", "\n", "o", "=", "o11", "+", "o12", "+", "o21", "+", "o22", "\n", "\n", "return", "imgw", ",", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.flow_reversal.FlowReversal.get_gaussian_weights": [[69, 76], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "get_gaussian_weights", "(", "self", ",", "x", ",", "y", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ")", ":", "\n", "        ", "w11", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x1", ")", "**", "2", "+", "(", "y", "-", "y1", ")", "**", "2", ")", ")", "\n", "w12", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x1", ")", "**", "2", "+", "(", "y", "-", "y2", ")", "**", "2", ")", ")", "\n", "w21", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x2", ")", "**", "2", "+", "(", "y", "-", "y1", ")", "**", "2", ")", ")", "\n", "w22", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "x2", ")", "**", "2", "+", "(", "y", "-", "y2", ")", "**", "2", ")", ")", "\n", "\n", "return", "w11", ",", "w12", ",", "w21", ",", "w22", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.flow_reversal.FlowReversal.sample_one": [[78, 121], ["img.size", "shiftx.view", "shifty.view", "[].cuda().long().repeat().view", "[].cuda().long().repeat().view", "weight.view", "img.reshape", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.arange().view().long().cuda().repeat().view", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.masked_select().clone().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "torch.zeros().cuda.put_", "shiftx.view.long", "shifty.view.long", "idxy.lt", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "[].cuda().long().repeat", "[].cuda().long().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "torch.arange().view().long().cuda().repeat", "idxy.ge", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.masked_select().clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idxx.ge", "idxx.lt", "[].cuda().long", "[].cuda().long", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.arange().view().long().cuda", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "[].cuda", "[].cuda", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "sample_one", "(", "self", ",", "img", ",", "shiftx", ",", "shifty", ",", "weight", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            -img (N, C, H, W)\n            -shiftx, shifty (N, c, H, W)\n        \"\"\"", "\n", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "img", ".", "size", "(", ")", "\n", "# pdb.set_trace()", "\n", "\n", "# flatten all (all restored as Tensors)", "\n", "flat_shiftx", "=", "shiftx", ".", "view", "(", "-", "1", ")", "\n", "flat_shifty", "=", "shifty", ".", "view", "(", "-", "1", ")", "\n", "flat_basex", "=", "torch", ".", "arange", "(", "0", ",", "H", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "-", "1", ",", "1", ")", "[", "None", ",", "None", "]", ".", "cuda", "(", ")", ".", "long", "(", ")", ".", "repeat", "(", "N", ",", "C", ",", "1", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "flat_basey", "=", "torch", ".", "arange", "(", "0", ",", "W", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "1", ",", "-", "1", ")", "[", "None", ",", "None", "]", ".", "cuda", "(", ")", ".", "long", "(", ")", ".", "repeat", "(", "N", ",", "C", ",", "H", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "flat_weight", "=", "weight", ".", "view", "(", "-", "1", ")", "\n", "flat_img", "=", "img", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "\n", "# The corresponding positions in I1", "\n", "idxn", "=", "torch", ".", "arange", "(", "0", ",", "N", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ".", "repeat", "(", "1", ",", "C", ",", "H", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "idxc", "=", "torch", ".", "arange", "(", "0", ",", "C", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "1", ",", "C", ",", "1", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ".", "repeat", "(", "N", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "-", "1", ")", "\n", "idxx", "=", "flat_shiftx", ".", "long", "(", ")", "+", "flat_basex", "\n", "idxy", "=", "flat_shifty", ".", "long", "(", ")", "+", "flat_basey", "\n", "\n", "\n", "# recording the inside part the shifted", "\n", "mask", "=", "idxx", ".", "ge", "(", "0", ")", "&", "idxx", ".", "lt", "(", "H", ")", "&", "idxy", ".", "ge", "(", "0", ")", "&", "idxy", ".", "lt", "(", "W", ")", "\n", "\n", "# Mask off points out of boundaries", "\n", "ids", "=", "(", "idxn", "*", "C", "*", "H", "*", "W", "+", "idxc", "*", "H", "*", "W", "+", "idxx", "*", "W", "+", "idxy", ")", "\n", "ids_mask", "=", "torch", ".", "masked_select", "(", "ids", ",", "mask", ")", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# Note here! accmulate fla must be true for proper bp", "\n", "img_warp", "=", "torch", ".", "zeros", "(", "[", "N", "*", "C", "*", "H", "*", "W", ",", "]", ")", ".", "cuda", "(", ")", "\n", "img_warp", ".", "put_", "(", "ids_mask", ",", "torch", ".", "masked_select", "(", "flat_img", "*", "flat_weight", ",", "mask", ")", ",", "accumulate", "=", "True", ")", "\n", "\n", "one_warp", "=", "torch", ".", "zeros", "(", "[", "N", "*", "C", "*", "H", "*", "W", ",", "]", ")", ".", "cuda", "(", ")", "\n", "one_warp", ".", "put_", "(", "ids_mask", ",", "torch", ".", "masked_select", "(", "flat_weight", ",", "mask", ")", ",", "accumulate", "=", "True", ")", "\n", "\n", "\n", "\n", "return", "img_warp", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", ",", "one_warp", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.TermLogger.__init__": [[7, 31], ["blessings.Terminal", "int", "range", "progressbar.ProgressBar", "logger.Writer", "logger.Writer", "logger.Writer", "logger.Writer", "logger.TermLogger.reset_train_bar", "logger.TermLogger.reset_valid_bar", "print", "logger.Writer"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.TermLogger.reset_train_bar", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.TermLogger.reset_valid_bar"], ["    ", "def", "__init__", "(", "self", ",", "n_epochs", ",", "train_size", ",", "valid_size", ")", ":", "\n", "        ", "self", ".", "n_epochs", "=", "n_epochs", "\n", "self", ".", "train_size", "=", "train_size", "\n", "self", ".", "valid_size", "=", "valid_size", "\n", "self", ".", "t", "=", "Terminal", "(", ")", "\n", "s", "=", "10", "\n", "e", "=", "1", "# epoch bar position", "\n", "tr", "=", "3", "# train bar position", "\n", "ts", "=", "6", "# valid bar position", "\n", "value", "=", "self", ".", "t", ".", "height", "\n", "h", "=", "int", "(", "0", "if", "value", "is", "None", "else", "value", ")", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "print", "(", "''", ")", "\n", "", "self", ".", "epoch_bar", "=", "progressbar", ".", "ProgressBar", "(", "max_value", "=", "n_epochs", ",", "fd", "=", "Writer", "(", "self", ".", "t", ",", "(", "0", ",", "h", "-", "s", "+", "e", ")", ")", ")", "\n", "\n", "self", ".", "train_writer", "=", "Writer", "(", "self", ".", "t", ",", "(", "0", ",", "h", "-", "s", "+", "tr", ")", ")", "\n", "self", ".", "train_bar_writer", "=", "Writer", "(", "self", ".", "t", ",", "(", "0", ",", "h", "-", "s", "+", "tr", "+", "1", ")", ")", "\n", "\n", "self", ".", "valid_writer", "=", "Writer", "(", "self", ".", "t", ",", "(", "0", ",", "h", "-", "s", "+", "ts", ")", ")", "\n", "self", ".", "valid_bar_writer", "=", "Writer", "(", "self", ".", "t", ",", "(", "0", ",", "h", "-", "s", "+", "ts", "+", "1", ")", ")", "\n", "\n", "self", ".", "reset_train_bar", "(", ")", "\n", "self", ".", "reset_valid_bar", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.TermLogger.reset_train_bar": [[32, 34], ["progressbar.ProgressBar"], "methods", ["None"], ["", "def", "reset_train_bar", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_bar", "=", "progressbar", ".", "ProgressBar", "(", "max_value", "=", "self", ".", "train_size", ",", "fd", "=", "self", ".", "train_bar_writer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.TermLogger.reset_valid_bar": [[35, 37], ["progressbar.ProgressBar"], "methods", ["None"], ["", "def", "reset_valid_bar", "(", "self", ")", ":", "\n", "        ", "self", ".", "valid_bar", "=", "progressbar", ".", "ProgressBar", "(", "max_value", "=", "self", ".", "valid_size", ",", "fd", "=", "self", ".", "valid_bar_writer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.Writer.__init__": [[46, 53], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "t", ",", "location", ")", ":", "\n", "        ", "\"\"\"\n        Input: location - tuple of ints (x, y), the position\n                        of the bar in the terminal\n        \"\"\"", "\n", "self", ".", "location", "=", "location", "\n", "self", ".", "t", "=", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.Writer.write": [[54, 58], ["logger.Writer.t.location", "sys.stdout.write", "print"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.Writer.write"], ["", "def", "write", "(", "self", ",", "string", ")", ":", "\n", "        ", "with", "self", ".", "t", ".", "location", "(", "*", "self", ".", "location", ")", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "\"\\033[K\"", ")", "\n", "print", "(", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.Writer.flush": [[59, 61], ["None"], "methods", ["None"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.__init__": [[66, 70], ["logger.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "i", "=", "1", ",", "precision", "=", "3", ")", ":", "\n", "        ", "self", ".", "meters", "=", "i", "\n", "self", ".", "precision", "=", "precision", "\n", "self", ".", "reset", "(", "self", ".", "meters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.reset": [[71, 76], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "i", ")", ":", "\n", "        ", "self", ".", "val", "=", "[", "0", "]", "*", "i", "\n", "self", ".", "avg", "=", "[", "0", "]", "*", "i", "\n", "self", ".", "sum", "=", "[", "0", "]", "*", "i", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update": [[77, 86], ["enumerate", "isinstance", "len"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "            ", "val", "=", "[", "val", "]", "\n", "", "assert", "(", "len", "(", "val", ")", "==", "self", ".", "meters", ")", "\n", "self", ".", "count", "+=", "n", "\n", "for", "i", ",", "v", "in", "enumerate", "(", "val", ")", ":", "\n", "            ", "self", ".", "val", "[", "i", "]", "=", "v", "\n", "self", ".", "sum", "[", "i", "]", "+=", "v", "*", "n", "\n", "self", ".", "avg", "[", "i", "]", "=", "self", ".", "sum", "[", "i", "]", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.__repr__": [[87, 91], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "val", "=", "' '", ".", "join", "(", "[", "'{:.{}f}'", ".", "format", "(", "v", ",", "self", ".", "precision", ")", "for", "v", "in", "self", ".", "val", "]", ")", "\n", "avg", "=", "' '", ".", "join", "(", "[", "'{:.{}f}'", ".", "format", "(", "a", ",", "self", ".", "precision", ")", "for", "a", "in", "self", ".", "avg", "]", ")", "\n", "return", "'{} ({})'", ".", "format", "(", "val", ",", "avg", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.main": [[107, 313], ["print", "parser.parse_args", "datetime.datetime.now().strftime", "print", "parser.parse_args.save_path.makedirs_p", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "tensorboardX.SummaryWriter", "custom_transforms.Normalize", "custom_transforms_val.Normalize", "custom_transforms.Compose", "print", "datasets.sequence_folders.SequenceFolder", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "models.DispResNet().to", "models.EgoPoseNet().to", "models.ObjPoseNet().to", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "logger.TermLogger", "logger.TermLogger.epoch_bar.start", "range", "logger.TermLogger.epoch_bar.finish", "custom_transforms_val.Compose", "custom_transforms.Compose", "ValidationSet", "datasets.sequence_folders.SequenceFolder", "len", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.init_weights", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.init_weights", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.init_weights", "optim_params.append", "optim_params.append", "optim_params.append", "optim_params.append", "optim_params.append", "open", "csv.writer", "csv.writer.writerow", "open", "csv.writer", "csv.writer.writerow", "logger.TermLogger.epoch_bar.update", "logger.TermLogger.reset_train_bar", "train.train", "logger.TermLogger.train_writer.write", "logger.TermLogger.reset_valid_bar", "logger.TermLogger.valid_writer.write", "zip", "tensorboardX.SummaryWriter.add_scalar", "min", "utils.save_checkpoint", "datetime.datetime.now", "custom_transforms.RandomHorizontalFlip", "custom_transforms.RandomScaleCrop", "custom_transforms.ArrayToTensor", "len", "len", "models.DispResNet", "models.EgoPoseNet", "models.ObjPoseNet", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "min", "len", "logger.TermLogger.reset_valid_bar", "zip", "logger.TermLogger.valid_writer.write", "train.validate_with_gt", "train.validate_without_gt", "tensorboardX.SummaryWriter.add_scalar", "open", "csv.writer", "csv.writer.writerow", "path.Path", "path.Path", "custom_transforms_val.ArrayToTensor", "custom_transforms.ArrayToTensor", "torch.nn.DataParallel.module.encoder.parameters", "torch.nn.DataParallel.module.decoder.parameters", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "len", "train.validate_with_gt", "train.validate_without_gt", "tensorboardX.SummaryWriter.add_scalar", "torch.nn.DataParallel.module.state_dict", "torch.nn.DataParallel.module.state_dict", "torch.nn.DataParallel.module.state_dict", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.DispResNet.init_weights", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.DispResNet.init_weights", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.DispResNet.init_weights", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.TermLogger.reset_train_bar", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.train", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.Writer.write", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.TermLogger.reset_valid_bar", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.Writer.write", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.utils.save_checkpoint", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.TermLogger.reset_valid_bar", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.Writer.write", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.validate_with_gt", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.validate_without_gt", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.validate_with_gt", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.validate_without_gt"], ["def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'=> PyTorch version: '", "+", "torch", ".", "__version__", "+", "' || CUDA_VISIBLE_DEVICES: '", "+", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", ")", "\n", "\n", "global", "best_error", ",", "n_iter", ",", "device", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "timestamp", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m-%d-%H:%M\"", ")", "\n", "if", "args", ".", "debug_mode", ":", "\n", "        ", "args", ".", "save_path", "=", "'checkpoints'", "/", "Path", "(", "'debug'", ")", "/", "timestamp", "\n", "", "else", ":", "\n", "        ", "args", ".", "save_path", "=", "'checkpoints'", "/", "Path", "(", "args", ".", "name", ")", "/", "timestamp", "\n", "", "print", "(", "'=> will save everything to {}'", ".", "format", "(", "args", ".", "save_path", ")", ")", "\n", "args", ".", "save_path", ".", "makedirs_p", "(", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "tf_writer", "=", "SummaryWriter", "(", "args", ".", "save_path", ")", "\n", "\n", "# Data loading", "\n", "normalize", "=", "custom_transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "normalize_val", "=", "custom_transforms_val", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "\n", "train_transform", "=", "custom_transforms", ".", "Compose", "(", "[", "\n", "custom_transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "custom_transforms", ".", "RandomScaleCrop", "(", ")", ",", "\n", "custom_transforms", ".", "ArrayToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "if", "args", ".", "with_gt", ":", "\n", "        ", "valid_transform", "=", "custom_transforms_val", ".", "Compose", "(", "[", "\n", "custom_transforms_val", ".", "ArrayToTensor", "(", ")", ",", "\n", "normalize_val", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "valid_transform", "=", "custom_transforms", ".", "Compose", "(", "[", "\n", "custom_transforms", ".", "ArrayToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "", "print", "(", "\"=> fetching scenes from '{}'\"", ".", "format", "(", "args", ".", "data", ")", ")", "\n", "train_set", "=", "SequenceFolder", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "train", "=", "True", ",", "\n", "seed", "=", "args", ".", "seed", ",", "\n", "shuffle", "=", "not", "(", "args", ".", "no_shuffle", ")", ",", "\n", "max_num_instances", "=", "args", ".", "mni", ",", "\n", "sequence_length", "=", "args", ".", "sequence_length", ",", "\n", "transform", "=", "train_transform", "\n", ")", "\n", "\n", "# if no GT is available (e.g., Cityscapes), Validation set is the same type as training set to measure photometric loss from warping", "\n", "if", "args", ".", "with_gt", ":", "\n", "        ", "from", "datasets", ".", "validation_folders", "import", "ValidationSet", "\n", "val_set", "=", "ValidationSet", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "transform", "=", "valid_transform", "\n", ")", "\n", "", "else", ":", "\n", "        ", "val_set", "=", "SequenceFolder", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "train", "=", "False", ",", "\n", "seed", "=", "args", ".", "seed", ",", "\n", "shuffle", "=", "not", "(", "args", ".", "no_shuffle", ")", ",", "\n", "max_num_instances", "=", "args", ".", "mni", ",", "\n", "sequence_length", "=", "args", ".", "sequence_length", ",", "\n", "transform", "=", "valid_transform", ",", "\n", "proportion", "=", "0.1", "\n", ")", "\n", "", "print", "(", "'=> {} samples found in training set || {} samples found in validation set'", ".", "format", "(", "len", "(", "train_set", ")", ",", "len", "(", "val_set", ")", ")", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "not", "(", "args", ".", "debug_mode", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "epoch_size", "==", "0", ":", "\n", "        ", "args", ".", "epoch_size", "=", "len", "(", "train_loader", ")", "\n", "\n", "# create model", "\n", "", "print", "(", "\"=> creating model\"", ")", "\n", "\n", "disp_net", "=", "models", ".", "DispResNet", "(", "args", ".", "resnet_layers", ",", "args", ".", "with_pretrain", ")", ".", "to", "(", "device", ")", "\n", "ego_pose_net", "=", "models", ".", "EgoPoseNet", "(", "18", ",", "args", ".", "with_pretrain", ")", ".", "to", "(", "device", ")", "\n", "obj_pose_net", "=", "models", ".", "ObjPoseNet", "(", "18", ",", "args", ".", "with_pretrain", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "pretrained_ego_pose", ":", "\n", "        ", "print", "(", "\"=> using pre-trained weights for EgoPoseNet\"", ")", "\n", "weights", "=", "torch", ".", "load", "(", "args", ".", "pretrained_ego_pose", ")", "\n", "ego_pose_net", ".", "load_state_dict", "(", "weights", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "ego_pose_net", ".", "init_weights", "(", ")", "\n", "\n", "", "if", "args", ".", "pretrained_obj_pose", ":", "\n", "        ", "print", "(", "\"=> using pre-trained weights for ObjPoseNet\"", ")", "\n", "weights", "=", "torch", ".", "load", "(", "args", ".", "pretrained_obj_pose", ")", "\n", "obj_pose_net", ".", "load_state_dict", "(", "weights", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "obj_pose_net", ".", "init_weights", "(", ")", "\n", "\n", "", "if", "args", ".", "pretrained_disp", ":", "\n", "        ", "print", "(", "\"=> using pre-trained weights for DispNet\"", ")", "\n", "weights", "=", "torch", ".", "load", "(", "args", ".", "pretrained_disp", ")", "\n", "if", "args", ".", "resnet_pretrained", ":", "\n", "            ", "disp_net", ".", "load_state_dict", "(", "weights", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "disp_net", ".", "load_state_dict", "(", "weights", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "", "", "else", ":", "\n", "        ", "disp_net", ".", "init_weights", "(", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "disp_net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "disp_net", ")", "\n", "ego_pose_net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "ego_pose_net", ")", "\n", "obj_pose_net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "obj_pose_net", ")", "\n", "\n", "print", "(", "'=> setting adam solver'", ")", "\n", "\n", "optim_params", "=", "[", "]", "\n", "if", "args", ".", "disp_lr", "!=", "0", ":", "\n", "        ", "optim_params", ".", "append", "(", "{", "'params'", ":", "disp_net", ".", "module", ".", "encoder", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "disp_lr", "}", ")", "\n", "optim_params", ".", "append", "(", "{", "'params'", ":", "disp_net", ".", "module", ".", "decoder", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "disp_lr", "}", ")", "\n", "optim_params", ".", "append", "(", "{", "'params'", ":", "disp_net", ".", "module", ".", "obj_height_prior", ",", "'lr'", ":", "args", ".", "disp_lr", "*", "0.1", "}", ")", "\n", "", "if", "args", ".", "ego_lr", "!=", "0", ":", "\n", "        ", "optim_params", ".", "append", "(", "{", "'params'", ":", "ego_pose_net", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "ego_lr", "}", ")", "\n", "", "if", "args", ".", "obj_lr", "!=", "0", ":", "\n", "        ", "optim_params", ".", "append", "(", "{", "'params'", ":", "obj_pose_net", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "obj_lr", "}", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "betas", "=", "(", "args", ".", "momentum", ",", "args", ".", "beta", ")", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "with", "open", "(", "args", ".", "save_path", "/", "args", ".", "log_summary", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "csv_summary", "=", "csv", ".", "writer", "(", "csvfile", ",", "delimiter", "=", "'\\t'", ")", "\n", "csv_summary", ".", "writerow", "(", "[", "'train_loss'", ",", "'validation_loss'", "]", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "save_path", "/", "args", ".", "log_full", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "csv_full", "=", "csv", ".", "writer", "(", "csvfile", ",", "delimiter", "=", "'\\t'", ")", "\n", "csv_full", ".", "writerow", "(", "[", "'photo_loss'", ",", "'geometry_loss'", ",", "'smooth_loss'", ",", "'scale_loss'", ",", "'mof_consistency_loss'", ",", "'height_loss'", ",", "'depth_loss'", ",", "'train_loss'", "]", ")", "\n", "\n", "", "logger", "=", "TermLogger", "(", "n_epochs", "=", "args", ".", "epochs", ",", "train_size", "=", "min", "(", "len", "(", "train_loader", ")", ",", "args", ".", "epoch_size", ")", ",", "valid_size", "=", "len", "(", "val_loader", ")", ")", "\n", "logger", ".", "epoch_bar", ".", "start", "(", ")", "\n", "\n", "\n", "### validation at the beginning ###", "\n", "if", "not", "args", ".", "debug_mode", ":", "\n", "        ", "if", "args", ".", "pretrained_disp", ":", "\n", "            ", "logger", ".", "reset_valid_bar", "(", ")", "\n", "if", "args", ".", "with_gt", ":", "\n", "                ", "errors", ",", "error_names", "=", "validate_with_gt", "(", "args", ",", "val_loader", ",", "disp_net", ",", "0", ",", "logger", ")", "\n", "", "else", ":", "\n", "                ", "errors", ",", "error_names", "=", "validate_without_gt", "(", "args", ",", "val_loader", ",", "disp_net", ",", "ego_pose_net", ",", "obj_pose_net", ",", "0", ",", "logger", ")", "\n", "", "for", "error", ",", "name", "in", "zip", "(", "errors", ",", "error_names", ")", ":", "\n", "                ", "tf_writer", ".", "add_scalar", "(", "name", ",", "error", ",", "0", ")", "\n", "", "error_string", "=", "', '", ".", "join", "(", "'{} : {:.3f}'", ".", "format", "(", "name", ",", "error", ")", "for", "name", ",", "error", "in", "zip", "(", "error_names", ",", "errors", ")", ")", "\n", "logger", ".", "valid_writer", ".", "write", "(", "' * Avg {}'", ".", "format", "(", "error_string", ")", ")", "\n", "\n", "\n", "", "", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "logger", ".", "epoch_bar", ".", "update", "(", "epoch", ")", "\n", "\n", "### train for one epoch ###", "\n", "logger", ".", "reset_train_bar", "(", ")", "\n", "train_loss", "=", "train", "(", "args", ",", "train_loader", ",", "disp_net", ",", "ego_pose_net", ",", "obj_pose_net", ",", "optimizer", ",", "args", ".", "epoch_size", ",", "logger", ",", "tf_writer", ")", "\n", "logger", ".", "train_writer", ".", "write", "(", "' * Avg Loss : {:.3f}'", ".", "format", "(", "train_loss", ")", ")", "\n", "\n", "\n", "### evaluate on validation set ###", "\n", "logger", ".", "reset_valid_bar", "(", ")", "\n", "if", "args", ".", "with_gt", ":", "\n", "            ", "errors", ",", "error_names", "=", "validate_with_gt", "(", "args", ",", "val_loader", ",", "disp_net", ",", "epoch", ",", "logger", ")", "\n", "", "else", ":", "\n", "            ", "errors", ",", "error_names", "=", "validate_without_gt", "(", "args", ",", "val_loader", ",", "disp_net", ",", "ego_pose_net", ",", "obj_pose_net", ",", "epoch", ",", "logger", ")", "\n", "", "error_string", "=", "', '", ".", "join", "(", "'{} : {:.3f}'", ".", "format", "(", "name", ",", "error", ")", "for", "name", ",", "error", "in", "zip", "(", "error_names", ",", "errors", ")", ")", "\n", "logger", ".", "valid_writer", ".", "write", "(", "' * Avg {}'", ".", "format", "(", "error_string", ")", ")", "\n", "\n", "for", "error", ",", "name", "in", "zip", "(", "errors", ",", "error_names", ")", ":", "\n", "            ", "tf_writer", ".", "add_scalar", "(", "name", ",", "error", ",", "epoch", ")", "\n", "\n", "\n", "", "tf_writer", ".", "add_scalar", "(", "'training loss'", ",", "train_loss", ",", "epoch", ")", "\n", "\n", "# Up to you to chose the most relevant error to measure your model's performance, careful some measures are to maximize (such as a1,a2,a3)", "\n", "decisive_error", "=", "errors", "[", "1", "]", "# \"errors[1]\" or \"train_loss\"", "\n", "if", "best_error", "<", "0", ":", "\n", "            ", "best_error", "=", "decisive_error", "\n", "\n", "# remember lowest error and save checkpoint", "\n", "", "is_best", "=", "decisive_error", "<", "best_error", "\n", "best_error", "=", "min", "(", "best_error", ",", "decisive_error", ")", "\n", "save_checkpoint", "(", "\n", "epoch", ",", "\n", "args", ".", "save_freq", ",", "\n", "args", ".", "save_path", ",", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "disp_net", ".", "module", ".", "state_dict", "(", ")", "\n", "}", ",", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "ego_pose_net", ".", "module", ".", "state_dict", "(", ")", "\n", "}", ",", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "obj_pose_net", ".", "module", ".", "state_dict", "(", ")", "\n", "}", ",", "\n", "is_best", ")", "\n", "\n", "with", "open", "(", "args", ".", "save_path", "/", "args", ".", "log_summary", ",", "'a'", ")", "as", "csvfile", ":", "\n", "            ", "csv_summary", "=", "csv", ".", "writer", "(", "csvfile", ",", "delimiter", "=", "'\\t'", ")", "\n", "csv_summary", ".", "writerow", "(", "[", "train_loss", ",", "decisive_error", "]", ")", "\n", "", "", "logger", ".", "epoch_bar", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.train": [[316, 595], ["logger.AverageMeter", "logger.AverageMeter", "logger.AverageMeter", "torch.set_printoptions", "torch.set_printoptions", "torch.set_printoptions", "torch.set_printoptions", "numpy.set_printoptions", "disp_net.train().to", "ego_pose_net.train().to", "obj_pose_net.train().to", "time.time", "logger.train_bar.update", "enumerate", "logger.AverageMeter.update", "tgt_img.to.to", "intrinsics.to.to", "intrinsics_inv.to.to", "train.compute_depth", "train.compute_ego_pose_with_inv", "train.compute_ego_warp", "train.compute_ego_warp", "train.compute_obj_pose_with_inv", "train.compute_motion_field", "loss_functions.compute_photo_and_geometry_loss", "logger.AverageMeter.update", "logger.AverageMeter.update", "time.time", "numpy.isnan", "numpy.isnan", "numpy.isnan", "logger.train_bar.update", "disp_net.train", "ego_pose_net.train", "obj_pose_net.train", "img.to", "img.to", "img.to", "tgt_inst[].int().detach().cpu().numpy().tolist", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "loss_functions.compute_smooth_loss", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "loss_functions.compute_obj_size_constraint_loss", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "loss_functions.compute_mof_consistency_loss", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "loss.item", "optimizer.zero_grad", "loss.backward", "optimizer.step", "loss.detach().cpu().numpy", "pdb.set_trace", "height_prior.detach().cpu().numpy", "pdb.set_trace", "tgt_depth.mean().detach().cpu().numpy", "pdb.set_trace", "open", "csv.writer", "csv.writer.writerow", "logger.train_writer.write", "time.time", "zip", "zip", "sum", "len", "loss_1.item", "loss_2.item", "loss_functions.compute_smooth_loss.item", "loss_functions.compute_obj_size_constraint_loss.item", "loss_functions.compute_mof_consistency_loss.item", "loss_6.item", "loss_7.item", "loss.item", "time.time", "tgt_inst[].int().detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "loss.detach().cpu", "height_prior.detach().cpu", "tgt_depth.mean().detach().cpu", "loss_1.item", "loss_2.item", "loss_functions.compute_smooth_loss.item", "loss_functions.compute_obj_size_constraint_loss.item", "loss_functions.compute_mof_consistency_loss.item", "loss_6.item", "loss_7.item", "loss.item", "img[].sum", "img[].sum", "tgt_inst[].int().detach().cpu", "loss.detach", "height_prior.detach", "tgt_depth.mean().detach", "tgt_inst[].int().detach", "tgt_depth.mean", "tgt_inst[].int"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_depth", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_ego_pose_with_inv", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_ego_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_ego_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_obj_pose_with_inv", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_motion_field", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.compute_photo_and_geometry_loss", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.train", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.train", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.train", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.compute_smooth_loss", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.compute_obj_size_constraint_loss", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.compute_mof_consistency_loss", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.Writer.write"], ["", "def", "train", "(", "args", ",", "train_loader", ",", "disp_net", ",", "ego_pose_net", ",", "obj_pose_net", ",", "optimizer", ",", "epoch_size", ",", "logger", ",", "tf_writer", ")", ":", "\n", "    ", "global", "n_iter", ",", "device", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", "precision", "=", "4", ")", "\n", "torch", ".", "set_printoptions", "(", "sci_mode", "=", "False", ")", "\n", "np", ".", "set_printoptions", "(", "suppress", "=", "True", ")", "\n", "\n", "w1", ",", "w2", ",", "w3", "=", "args", ".", "photo_loss_weight", ",", "args", ".", "geometry_consistency_weight", ",", "args", ".", "smooth_loss_weight", "\n", "w4", ",", "w5", ",", "w6", "=", "args", ".", "scale_loss_weight", ",", "args", ".", "mof_consistency_loss_weight", ",", "args", ".", "height_loss_weight", "\n", "w7", "=", "args", ".", "depth_loss_weight", "\n", "\n", "# switch to train mode", "\n", "disp_net", ".", "train", "(", ")", ".", "to", "(", "device", ")", "\n", "ego_pose_net", ".", "train", "(", ")", ".", "to", "(", "device", ")", "\n", "obj_pose_net", ".", "train", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "train_bar", ".", "update", "(", "0", ")", "\n", "\n", "for", "i", ",", "(", "tgt_img", ",", "ref_imgs", ",", "intrinsics", ",", "intrinsics_inv", ",", "tgt_insts", ",", "ref_insts", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "debug_mode", "and", "i", ">", "5", ":", "break", ";", "\n", "# if i > 5: break;", "\n", "\n", "log_losses", "=", "i", ">", "0", "and", "n_iter", "%", "args", ".", "print_freq", "==", "0", "\n", "\n", "### inputs to GPU ###", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "tgt_img", "=", "tgt_img", ".", "to", "(", "device", ")", "\n", "ref_imgs", "=", "[", "img", ".", "to", "(", "device", ")", "for", "img", "in", "ref_imgs", "]", "\n", "intrinsics", "=", "intrinsics", ".", "to", "(", "device", ")", "\n", "intrinsics_inv", "=", "intrinsics_inv", ".", "to", "(", "device", ")", "\n", "tgt_insts", "=", "[", "img", ".", "to", "(", "device", ")", "for", "img", "in", "tgt_insts", "]", "\n", "ref_insts", "=", "[", "img", ".", "to", "(", "device", ")", "for", "img", "in", "ref_insts", "]", "\n", "\n", "### input instance masking ###", "\n", "tgt_bg_masks", "=", "[", "1", "-", "(", "img", "[", ":", ",", "1", ":", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ">", "0", ")", ".", "float", "(", ")", "for", "img", "in", "tgt_insts", "]", "\n", "ref_bg_masks", "=", "[", "1", "-", "(", "img", "[", ":", ",", "1", ":", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ">", "0", ")", ".", "float", "(", ")", "for", "img", "in", "ref_insts", "]", "\n", "tgt_bg_imgs", "=", "[", "tgt_img", "*", "tgt_mask", "*", "ref_mask", "for", "tgt_mask", ",", "ref_mask", "in", "zip", "(", "tgt_bg_masks", ",", "ref_bg_masks", ")", "]", "\n", "ref_bg_imgs", "=", "[", "ref_img", "*", "tgt_mask", "*", "ref_mask", "for", "ref_img", ",", "tgt_mask", ",", "ref_mask", "in", "zip", "(", "ref_imgs", ",", "tgt_bg_masks", ",", "ref_bg_masks", ")", "]", "\n", "tgt_obj_masks", "=", "[", "1", "-", "mask", "for", "mask", "in", "tgt_bg_masks", "]", "\n", "ref_obj_masks", "=", "[", "1", "-", "mask", "for", "mask", "in", "ref_bg_masks", "]", "\n", "num_insts", "=", "[", "tgt_inst", "[", ":", ",", "0", ",", "0", ",", "0", "]", ".", "int", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "for", "tgt_inst", "in", "tgt_insts", "]", "# Number of instances for each sequence", "\n", "\n", "### object height piror ###", "\n", "height_prior", "=", "disp_net", ".", "module", ".", "obj_height_prior", "\n", "\n", "### compute depth & ego-motion ###", "\n", "tgt_depth", ",", "ref_depths", "=", "compute_depth", "(", "disp_net", ",", "tgt_img", ",", "ref_imgs", ")", "\n", "ego_poses_fwd", ",", "ego_poses_bwd", "=", "compute_ego_pose_with_inv", "(", "ego_pose_net", ",", "tgt_bg_imgs", ",", "ref_bg_imgs", ")", "# [ 2 x ([B, 6]) ]", "\n", "\n", "### Remove ego-motion effct: transformation with ego-motion ###", "\n", "### NumRefs(2) >> Nx(C+mni)xHxW,  {t-1}->{t} | {t+1}->{t} ###", "\n", "r2t_imgs_ego", ",", "r2t_insts_ego", ",", "r2t_depths_ego", ",", "r2t_vals_ego", "=", "compute_ego_warp", "(", "ref_imgs", ",", "ref_insts", ",", "ref_depths", ",", "ego_poses_bwd", ",", "intrinsics", ")", "\n", "### NumRefs(2) >> Nx(C+mni)xHxW,  {t}->{t-1} | {t}->{t+1} ###", "\n", "t2r_imgs_ego", ",", "t2r_insts_ego", ",", "t2r_depths_ego", ",", "t2r_vals_ego", "=", "compute_ego_warp", "(", "[", "tgt_img", ",", "tgt_img", "]", ",", "tgt_insts", ",", "[", "tgt_depth", ",", "tgt_depth", "]", ",", "ego_poses_fwd", ",", "intrinsics", ")", "\n", "# pdb.set_trace() # BREAKPOINT-1", "\n", "# continue;", "\n", "'''\n            sq = 0; bb = 0;\n            colormap = 'turbo'  # turbo, plasma\n            tgt = (tgt_img[bb]*0.5+0.5).detach().cpu().numpy().transpose(1,2,0)\n            ref = (ref_imgs[sq][bb]*0.5+0.5).detach().cpu().numpy().transpose(1,2,0)\n            r2t_val = r2t_vals_ego[sq][bb,0].detach().cpu().numpy()\n            t2r_val = t2r_vals_ego[sq][bb,0].detach().cpu().numpy()\n            r2t = (r2t_imgs_ego[sq][bb]*0.5+0.5).detach().cpu().numpy().transpose(1,2,0)\n            t2r = (t2r_imgs_ego[sq][bb]*0.5+0.5).detach().cpu().numpy().transpose(1,2,0)\n            r2t_inst = r2t_insts_ego[sq][bb,1:].detach().cpu().numpy().transpose(1,2,0)\n            t2r_inst = t2r_insts_ego[sq][bb,1:].detach().cpu().numpy().transpose(1,2,0)\n            tgt_d = 1/tgt_depth[bb,0].detach().cpu().numpy()\n            ref_d = 1/ref_depths[sq][bb,0].detach().cpu().numpy()\n            r2t_d_prev = 1/r2t_depths_ego[0][bb,0].detach().cpu().numpy()\n            r2t_d_next = 1/r2t_depths_ego[1][bb,0].detach().cpu().numpy()\n            r2t_d_prev_err = (tgt_d - r2t_d_prev)\n            r2t_d_next_err = (tgt_d - r2t_d_next)\n            plt.close('all');\n            ea1 = 4; ea2 = 4; ii = 1;\n            fig = plt.figure(1, figsize=(21, 9))\n            fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(ref); plt.colorbar(); plt.text(10, -14, \"ref\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(tgt); plt.colorbar(); plt.text(10, -14, \"tgt\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(r2t_val, vmax=1, vmin=0); plt.colorbar(); plt.text(10, -14, \"r2t_val\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(t2r_val, vmax=1, vmin=0); plt.colorbar(); plt.text(10, -14, \"t2r_val\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(r2t); plt.colorbar(); plt.text(10, -14, \"r2t\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(t2r); plt.colorbar(); plt.text(10, -14, \"t2r\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(ref_d, cmap=colormap); plt.colorbar(); plt.text(10, -14, \"ref_d\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(tgt_d, cmap=colormap); plt.colorbar(); plt.text(10, -14, \"tgt_d\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(r2t_inst); plt.colorbar(); plt.text(10, -14, \"r2t_inst\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(t2r_inst); plt.colorbar(); plt.text(10, -14, \"t2r_inst\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(r2t_d_prev, cmap=colormap); plt.colorbar(); plt.text(10, -14, \"r2t_d_prev\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(r2t_d_next, cmap=colormap); plt.colorbar(); plt.text(10, -14, \"r2t_d_next\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(r2t_d_prev_err, vmax=0.5, vmin=-0.5); plt.colorbar(); plt.text(10, -14, \"r2t_d_prev_err\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(r2t_d_next_err, vmax=0.5, vmin=-0.5); plt.colorbar(); plt.text(10, -14, \"r2t_d_next_err\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            plt.tight_layout(); plt.ion(); plt.show()\n            \n        '''", "\n", "\n", "### Compute object motion ###", "\n", "obj_poses_fwd", ",", "obj_poses_bwd", "=", "compute_obj_pose_with_inv", "(", "obj_pose_net", ",", "tgt_img", ",", "tgt_insts", ",", "r2t_imgs_ego", ",", "r2t_insts_ego", ",", "ref_imgs", ",", "ref_insts", ",", "t2r_imgs_ego", ",", "t2r_insts_ego", ",", "intrinsics", ",", "args", ".", "mni", ",", "num_insts", ")", "\n", "\n", "### Compute composite motion field ###", "\n", "tot_mofs_fwd", ",", "tot_mofs_bwd", "=", "compute_motion_field", "(", "tgt_img", ",", "ego_poses_fwd", ",", "ego_poses_bwd", ",", "obj_poses_fwd", ",", "obj_poses_bwd", ",", "tgt_insts", ",", "ref_insts", ")", "\n", "\n", "### Compute unified projection loss ###", "\n", "loss_1", ",", "loss_2", ",", "r2t_imgs", ",", "t2r_imgs", ",", "r2t_flows", ",", "t2r_flows", ",", "r2t_diffs", ",", "t2r_diffs", ",", "r2t_vals", ",", "t2r_vals", "=", "compute_photo_and_geometry_loss", "(", "tgt_img", ",", "ref_imgs", ",", "intrinsics", ",", "tgt_depth", ",", "ref_depths", ",", "tot_mofs_fwd", ",", "tot_mofs_bwd", ",", "args", ".", "with_ssim", ",", "args", ".", "with_mask", ",", "args", ".", "with_auto_mask", ",", "args", ".", "padding_mode", ",", "args", ".", "with_only_obj", ",", "tgt_obj_masks", ",", "ref_obj_masks", ",", "r2t_vals_ego", ",", "t2r_vals_ego", ")", "\n", "# pdb.set_trace() # BREAKPOINT-2", "\n", "# continue;", "\n", "''' ### dpoint ###\n            sq = 0; bb = 0;\n            colormap = 'turbo'  # turbo, plasma\n            mmax = +0.01; mmin = -0.01;\n            plt.close('all')\n            globals().update(locals())\n            ref = (ref_imgs[sq][bb]*0.5+0.5).detach().cpu().numpy().transpose(1,2,0)\n            tgt = (tgt_img[bb]*0.5+0.5).detach().cpu().numpy().transpose(1,2,0)\n            r2t_ego = (r2t_imgs_ego[sq][bb]*0.5+0.5).detach().cpu().numpy().transpose(1,2,0)\n            t2r_ego = (t2r_imgs_ego[sq][bb]*0.5+0.5).detach().cpu().numpy().transpose(1,2,0)\n            r2t = (r2t_imgs[sq][bb]*0.5+0.5).detach().cpu().numpy().transpose(1,2,0)\n            t2r = (t2r_imgs[sq][bb]*0.5+0.5).detach().cpu().numpy().transpose(1,2,0)\n            err_tgt = np.abs(tgt - r2t).mean(axis=-1)\n            err_ref = np.abs(ref - t2r).mean(axis=-1)\n            diff_tgt = r2t_diffs[sq][bb].detach().cpu().numpy().mean(axis=0)\n            diff_ref = t2r_diffs[sq][bb].detach().cpu().numpy().mean(axis=0)\n            tgtD = (1/tgt_depth[bb,0]).detach().cpu().numpy()\n            refD = (1/ref_depths[sq][bb,0]).detach().cpu().numpy()\n            tgtMOF_tx = tot_mofs_fwd[sq][bb,0].detach().cpu().numpy()\n            tgtMOF_ty = tot_mofs_fwd[sq][bb,1].detach().cpu().numpy()\n            tgtMOF_tz = tot_mofs_fwd[sq][bb,2].detach().cpu().numpy()\n            refMOF_tx = tot_mofs_bwd[sq][bb,0].detach().cpu().numpy()\n            refMOF_ty = tot_mofs_bwd[sq][bb,1].detach().cpu().numpy()\n            refMOF_tz = tot_mofs_bwd[sq][bb,2].detach().cpu().numpy()\n            tgtMOF_tx_obj = tgtMOF_tx - ego_poses_fwd[sq][bb][0].detach().cpu().numpy()\n            tgtMOF_tz_obj = tgtMOF_tz - ego_poses_fwd[sq][bb][2].detach().cpu().numpy()\n            refMOF_tx_obj = refMOF_tx - ego_poses_bwd[sq][bb][0].detach().cpu().numpy()\n            refMOF_tz_obj = refMOF_tz - ego_poses_bwd[sq][bb][2].detach().cpu().numpy()\n            tgtMF_tot = viz_flow(tgtMOF_tx, tgtMOF_tz, scaledown=0.05, output=False)\n            refMF_tot = viz_flow(refMOF_tx, refMOF_tz, scaledown=0.05, output=False)\n            tgtMF_obj = viz_flow(tgtMOF_tx_obj, tgtMOF_tz_obj, scaledown=0.01, output=False)\n            refMF_obj = viz_flow(refMOF_tx_obj, refMOF_tz_obj, scaledown=0.01, output=False)\n            tgt_obj_tx = np.array(list(OrderedDict.fromkeys(tgtMOF_tx_obj.reshape(-1)).keys()))\n            tgt_obj_tz = np.array(list(OrderedDict.fromkeys(tgtMOF_tz_obj.reshape(-1)).keys()))\n            ref_obj_tx = np.array(list(OrderedDict.fromkeys(refMOF_tx_obj.reshape(-1)).keys()))\n            ref_obj_tz = np.array(list(OrderedDict.fromkeys(refMOF_tz_obj.reshape(-1)).keys()))\n            tgtT_obj = [[tx, tz] for tx, tz in zip(tgt_obj_tx, tgt_obj_tz)]\n            refT_obj = [[tx, tz] for tx, tz in zip(ref_obj_tx, ref_obj_tz)]\n            plt.close('all');\n            ea1 = 6; ea2 = 4; ii = 1;\n            fig = plt.figure(1, figsize=(21, 12))   # figsize=(22, 13)\n            gs = GridSpec(nrows=6, ncols=4)\n            fig.add_subplot(gs[0, 0:2]); ii += 2;\n            plt.imshow(ref); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"ref\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(gs[0, 2:4]); ii += 2;\n            plt.imshow(tgt); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"tgt\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(gs[1, 0:2]); ii += 2;\n            plt.imshow(t2r_ego); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"t2r_ego\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(gs[1, 2:4]); ii += 2;b\n            plt.imshow(r2t_ego); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"r2t_ego\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(gs[2, 0:2]); ii += 2;\n            plt.imshow(t2r); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"t2r\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(gs[2, 2:4]); ii += 2;\n            plt.imshow(r2t); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"r2t\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(gs[3, 0:2]); ii += 2;\n            plt.imshow(refD, cmap=colormap); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"refD\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(gs[3, 2:4]); ii += 2;\n            plt.imshow(tgtD, cmap=colormap); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"tgtD\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(tgtMF_tot); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4);\n            plt.text(10, -14, \"tgtMF_tot,  ego (tx, tz): ({:.4f}, {:.4f})\".format(ego_poses_fwd[sq][bb][0], ego_poses_fwd[sq][bb][2]), fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(refMF_tot); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4);\n            plt.text(10, -14, \"refMF_tot,  ego (tx, tz): ({:.4f}, {:.4f})\".format(ego_poses_bwd[sq][bb][0], ego_poses_bwd[sq][bb][2]), fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(tgtMF_obj); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4);\n            plt.text(10, -14, \"tgtMF_obj:\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            [plt.text(140+(ii-1)*200, -14, \"({:.4f}, {:.4f})\".format(tx, tz), fontsize=7, bbox=dict(facecolor='None', edgecolor='None')) for ii, (tx, tz) in enumerate(zip(tgt_obj_tx, tgt_obj_tz)) if ii>0]\n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(refMF_obj); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4);\n            plt.text(10, -14, \"refMF_obj:\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            [plt.text(140+(ii-1)*200, -14, \"({:.4f}, {:.4f})\".format(tx, tz), fontsize=7, bbox=dict(facecolor='None', edgecolor='None')) for ii, (tx, tz) in enumerate(zip(ref_obj_tx, ref_obj_tz)) if ii>0]\n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(err_tgt, cmap='bone', vmax=0.5, vmin=0); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"err_tgt\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            fig.add_subplot(ea1,ea2,ii); ii += 1;\n            plt.imshow(err_ref, cmap='bone', vmax=0.5, vmin=0); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"err_ref\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            plt.tight_layout(); plt.ion(); \n            plt.show()\n\n\n            plt.imshow(tgtMOF_tx, vmax=ego_poses_fwd[sq][bb,0].item()+mmax, vmin=ego_poses_fwd[sq][bb,0].item()+mmin); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"tgtMOF_tx\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            plt.imshow(refMOF_tx, vmax=ego_poses_bwd[sq][bb,0].item()+mmax, vmin=ego_poses_bwd[sq][bb,0].item()+mmin); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"refMOF_tx\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            plt.imshow(tgtMOF_ty, vmax=ego_poses_fwd[sq][bb,1].item()+mmax, vmin=ego_poses_fwd[sq][bb,1].item()+mmin); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"tgtMOF_ty\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            plt.imshow(refMOF_ty, vmax=ego_poses_bwd[sq][bb,1].item()+mmax, vmin=ego_poses_bwd[sq][bb,1].item()+mmin); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"refMOF_ty\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            plt.imshow(tgtMOF_tz, vmax=ego_poses_fwd[sq][bb,2].item()+mmax*2, vmin=ego_poses_fwd[sq][bb,2].item()+mmin*2); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"tgtMOF_tz\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            plt.imshow(refMOF_tz, vmax=ego_poses_bwd[sq][bb,2].item()+mmax*2, vmin=ego_poses_bwd[sq][bb,2].item()+mmin*2); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"refMOF_tz\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            \n            plt.imshow(diff_tgt, cmap='bone', vmax=0.5, vmin=0); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"diff_tgt\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            plt.imshow(diff_ref, cmap='bone', vmax=0.5, vmin=0); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"diff_ref\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n            \n        '''", "\n", "\n", "### Compute depth smoothness loss ###", "\n", "if", "w3", "==", "0", ":", "\n", "            ", "loss_3", "=", "torch", ".", "tensor", "(", ".0", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss_3", "=", "compute_smooth_loss", "(", "tgt_depth", ",", "tgt_img", ",", "ref_depths", ",", "ref_imgs", ")", "\n", "\n", "\n", "### Compute object size constraint loss ###", "\n", "", "if", "w4", "==", "0", ":", "\n", "            ", "loss_4", "=", "torch", ".", "tensor", "(", ".0", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss_4", "=", "compute_obj_size_constraint_loss", "(", "height_prior", ",", "tgt_depth", ",", "tgt_insts", ",", "ref_depths", ",", "ref_insts", ",", "intrinsics", ",", "args", ".", "mni", ",", "num_insts", ")", "\n", "\n", "\n", "### Compute unified motion consistency loss ###", "\n", "", "if", "w5", "==", "0", ":", "\n", "            ", "loss_5", "=", "torch", ".", "tensor", "(", ".0", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss_5", "=", "compute_mof_consistency_loss", "(", "tot_mofs_fwd", ",", "tot_mofs_bwd", ",", "r2t_flows", ",", "t2r_flows", ",", "r2t_diffs", ",", "t2r_diffs", ",", "r2t_vals", ",", "t2r_vals", ",", "alpha", "=", "5", ",", "thresh", "=", "0.1", ")", "\n", "\n", "\n", "### Compute height prior constraint loss ###", "\n", "", "loss_6", "=", "height_prior", "\n", "\n", "\n", "### Compute depth mean constraint loss ###", "\n", "loss_7", "=", "(", "(", "1", "/", "tgt_depth", ")", ".", "mean", "(", ")", "+", "sum", "(", "[", "(", "1", "/", "depth", ")", ".", "mean", "(", ")", "for", "depth", "in", "ref_depths", "]", ")", ")", "/", "(", "1", "+", "len", "(", "ref_depths", ")", ")", "\n", "\n", "\n", "loss", "=", "w1", "*", "loss_1", "+", "w2", "*", "loss_2", "+", "w3", "*", "loss_3", "+", "w4", "*", "loss_4", "+", "w5", "*", "loss_5", "+", "w6", "*", "loss_6", "+", "w7", "*", "loss_7", "\n", "# pdb.set_trace()", "\n", "'''\n            loss_1.item(), loss_2.item(), loss_3.item(), loss_4.item(), loss_5.item()\n            w1*loss_1.item(), w2*loss_2.item(), w3*loss_3.item(), w4*loss_4.item(), w5*loss_5.item()\n            \n            -b 4 -p 1.0 -c 0.5 -s 0.05 -o 0.01 -mc 0.01 -hp 0 -dm 0 -mni 3 \\\n\n        '''", "\n", "\n", "if", "log_losses", ":", "\n", "            ", "tf_writer", ".", "add_scalar", "(", "'photo_loss'", ",", "loss_1", ".", "item", "(", ")", ",", "n_iter", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'geometry_loss'", ",", "loss_2", ".", "item", "(", ")", ",", "n_iter", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'smooth_loss'", ",", "loss_3", ".", "item", "(", ")", ",", "n_iter", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'scale_loss'", ",", "loss_4", ".", "item", "(", ")", ",", "n_iter", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'mof_consistency_loss'", ",", "loss_5", ".", "item", "(", ")", ",", "n_iter", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'height_loss'", ",", "loss_6", ".", "item", "(", ")", ",", "n_iter", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'depth_loss'", ",", "loss_7", ".", "item", "(", ")", ",", "n_iter", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'total_loss'", ",", "loss", ".", "item", "(", ")", ",", "n_iter", ")", "\n", "\n", "### record loss ###", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "args", ".", "batch_size", ")", "\n", "\n", "### compute gradient and do Adam step ###", "\n", "if", "loss", ">", "0", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "### measure elapsed time ###", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "### fail-safe ###", "\n", "if", "np", ".", "isnan", "(", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ":", "pdb", ".", "set_trace", "(", ")", "\n", "if", "np", ".", "isnan", "(", "height_prior", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ":", "pdb", ".", "set_trace", "(", ")", "\n", "if", "np", ".", "isnan", "(", "tgt_depth", ".", "mean", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ":", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "with", "open", "(", "args", ".", "save_path", "/", "args", ".", "log_full", ",", "'a'", ")", "as", "csvfile", ":", "\n", "            ", "csv_full", "=", "csv", ".", "writer", "(", "csvfile", ",", "delimiter", "=", "'\\t'", ")", "\n", "csv_full", ".", "writerow", "(", "[", "loss_1", ".", "item", "(", ")", ",", "loss_2", ".", "item", "(", ")", ",", "loss_3", ".", "item", "(", ")", ",", "loss_4", ".", "item", "(", ")", ",", "loss_5", ".", "item", "(", ")", ",", "loss_6", ".", "item", "(", ")", ",", "loss_7", ".", "item", "(", ")", ",", "loss", ".", "item", "(", ")", "]", ")", "\n", "", "logger", ".", "train_bar", ".", "update", "(", "i", "+", "1", ")", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "train_writer", ".", "write", "(", "'Train: Time {} Data {} Loss {}'", ".", "format", "(", "batch_time", ",", "data_time", ",", "losses", ")", ")", "\n", "", "if", "i", ">=", "epoch_size", "-", "1", ":", "\n", "            ", "break", "\n", "\n", "", "n_iter", "+=", "1", "\n", "\n", "", "return", "losses", ".", "avg", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.validate_without_gt": [[598, 675], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "logger.AverageMeter", "logger.AverageMeter", "disp_net.eval", "ego_pose_net.eval", "obj_pose_net.eval", "time.time", "logger.valid_bar.update", "enumerate", "logger.valid_bar.update", "tgt_img.to.to", "intrinsics.to.to", "intrinsics_inv.to.to", "train.compute_depth", "train.compute_ego_pose_with_inv", "train.compute_ego_warp", "train.compute_ego_warp", "train.compute_obj_pose_with_inv", "train.compute_motion_field", "loss_functions.compute_photo_and_geometry_loss", "loss_functions.compute_smooth_loss", "loss_1.item.item", "loss_2.item.item", "loss_3.item.item", "logger.AverageMeter.update", "logger.AverageMeter.update", "time.time", "logger.valid_bar.update", "len", "img.to", "img.to", "img.to", "tgt_inst[].int().detach().cpu().numpy().tolist", "logger.valid_writer.write", "zip", "zip", "time.time", "tgt_inst[].int().detach().cpu().numpy", "img[].sum", "img[].sum", "tgt_inst[].int().detach().cpu", "tgt_inst[].int().detach", "tgt_inst[].int"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_depth", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_ego_pose_with_inv", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_ego_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_ego_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_obj_pose_with_inv", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_motion_field", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.compute_photo_and_geometry_loss", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.compute_smooth_loss", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.Writer.write"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_without_gt", "(", "args", ",", "val_loader", ",", "disp_net", ",", "ego_pose_net", ",", "obj_pose_net", ",", "epoch", ",", "logger", ")", ":", "\n", "    ", "global", "device", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", "i", "=", "4", ",", "precision", "=", "4", ")", "\n", "\n", "w1", ",", "w2", ",", "w3", "=", "args", ".", "photo_loss_weight", ",", "args", ".", "geometry_consistency_weight", ",", "args", ".", "smooth_loss_weight", "\n", "\n", "# switch to evaluation mode", "\n", "disp_net", ".", "eval", "(", ")", "\n", "ego_pose_net", ".", "eval", "(", ")", "\n", "obj_pose_net", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "valid_bar", ".", "update", "(", "0", ")", "\n", "\n", "# for i, (tgt_img, ref_imgs, intrinsics, intrinsics_inv) in enumerate(val_loader):", "\n", "for", "i", ",", "(", "tgt_img", ",", "ref_imgs", ",", "intrinsics", ",", "intrinsics_inv", ",", "tgt_insts", ",", "ref_insts", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "if", "args", ".", "debug_mode", "and", "i", ">", "5", ":", "break", ";", "\n", "# if i > 5: break;", "\n", "\n", "### inputs to GPU ###", "\n", "tgt_img", "=", "tgt_img", ".", "to", "(", "device", ")", "\n", "ref_imgs", "=", "[", "img", ".", "to", "(", "device", ")", "for", "img", "in", "ref_imgs", "]", "\n", "intrinsics", "=", "intrinsics", ".", "to", "(", "device", ")", "\n", "intrinsics_inv", "=", "intrinsics_inv", ".", "to", "(", "device", ")", "\n", "tgt_insts", "=", "[", "img", ".", "to", "(", "device", ")", "for", "img", "in", "tgt_insts", "]", "\n", "ref_insts", "=", "[", "img", ".", "to", "(", "device", ")", "for", "img", "in", "ref_insts", "]", "\n", "\n", "### input instance masking ###", "\n", "tgt_bg_masks", "=", "[", "1", "-", "(", "img", "[", ":", ",", "1", ":", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ">", "0", ")", ".", "float", "(", ")", "for", "img", "in", "tgt_insts", "]", "\n", "ref_bg_masks", "=", "[", "1", "-", "(", "img", "[", ":", ",", "1", ":", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ">", "0", ")", ".", "float", "(", ")", "for", "img", "in", "ref_insts", "]", "\n", "tgt_bg_imgs", "=", "[", "tgt_img", "*", "tgt_mask", "*", "ref_mask", "for", "tgt_mask", ",", "ref_mask", "in", "zip", "(", "tgt_bg_masks", ",", "ref_bg_masks", ")", "]", "\n", "ref_bg_imgs", "=", "[", "ref_img", "*", "tgt_mask", "*", "ref_mask", "for", "ref_img", ",", "tgt_mask", ",", "ref_mask", "in", "zip", "(", "ref_imgs", ",", "tgt_bg_masks", ",", "ref_bg_masks", ")", "]", "\n", "tgt_obj_masks", "=", "[", "1", "-", "mask", "for", "mask", "in", "tgt_bg_masks", "]", "\n", "ref_obj_masks", "=", "[", "1", "-", "mask", "for", "mask", "in", "ref_bg_masks", "]", "\n", "num_insts", "=", "[", "tgt_inst", "[", ":", ",", "0", ",", "0", ",", "0", "]", ".", "int", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "for", "tgt_inst", "in", "tgt_insts", "]", "# Number of instances for each sequence", "\n", "\n", "### compute depth & ego-motion ###", "\n", "tgt_depth", ",", "ref_depths", "=", "compute_depth", "(", "disp_net", ",", "tgt_img", ",", "ref_imgs", ")", "\n", "ego_poses_fwd", ",", "ego_poses_bwd", "=", "compute_ego_pose_with_inv", "(", "ego_pose_net", ",", "tgt_bg_imgs", ",", "ref_bg_imgs", ")", "# [ 2 x ([B, 6]) ]", "\n", "\n", "### Remove ego-motion effct: transformation with ego-motion ###", "\n", "r2t_imgs_ego", ",", "r2t_insts_ego", ",", "r2t_depths_ego", ",", "r2t_vals_ego", "=", "compute_ego_warp", "(", "ref_imgs", ",", "ref_insts", ",", "ref_depths", ",", "ego_poses_bwd", ",", "intrinsics", ")", "\n", "t2r_imgs_ego", ",", "t2r_insts_ego", ",", "t2r_depths_ego", ",", "t2r_vals_ego", "=", "compute_ego_warp", "(", "[", "tgt_img", ",", "tgt_img", "]", ",", "tgt_insts", ",", "[", "tgt_depth", ",", "tgt_depth", "]", ",", "ego_poses_fwd", ",", "intrinsics", ")", "\n", "\n", "### Compute object motion ###", "\n", "obj_poses_fwd", ",", "obj_poses_bwd", "=", "compute_obj_pose_with_inv", "(", "obj_pose_net", ",", "tgt_img", ",", "tgt_insts", ",", "r2t_imgs_ego", ",", "r2t_insts_ego", ",", "ref_imgs", ",", "ref_insts", ",", "t2r_imgs_ego", ",", "t2r_insts_ego", ",", "intrinsics", ",", "args", ".", "mni", ",", "num_insts", ")", "\n", "\n", "### Compute composite motion field ###", "\n", "tot_mofs_fwd", ",", "tot_mofs_bwd", "=", "compute_motion_field", "(", "tgt_img", ",", "ego_poses_fwd", ",", "ego_poses_bwd", ",", "obj_poses_fwd", ",", "obj_poses_bwd", ",", "tgt_insts", ",", "ref_insts", ")", "\n", "\n", "### Compute unified projection loss ###", "\n", "loss_1", ",", "loss_2", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "compute_photo_and_geometry_loss", "(", "tgt_img", ",", "ref_imgs", ",", "intrinsics", ",", "tgt_depth", ",", "ref_depths", ",", "tot_mofs_fwd", ",", "tot_mofs_bwd", ",", "args", ".", "with_ssim", ",", "args", ".", "with_mask", ",", "args", ".", "with_auto_mask", ",", "args", ".", "padding_mode", ",", "args", ".", "with_only_obj", ",", "tgt_obj_masks", ",", "ref_obj_masks", ",", "r2t_vals_ego", ",", "t2r_vals_ego", ")", "\n", "# pdb.set_trace()", "\n", "\n", "### Compute depth smoothness loss ###", "\n", "loss_3", "=", "compute_smooth_loss", "(", "tgt_depth", ",", "tgt_img", ",", "ref_depths", ",", "ref_imgs", ")", "\n", "\n", "loss_1", "=", "loss_1", ".", "item", "(", ")", "\n", "loss_2", "=", "loss_2", ".", "item", "(", ")", "\n", "loss_3", "=", "loss_3", ".", "item", "(", ")", "\n", "\n", "loss", "=", "w1", "*", "loss_1", "+", "w2", "*", "loss_2", "+", "w3", "*", "loss_3", "\n", "losses", ".", "update", "(", "[", "loss", ",", "loss_1", ",", "loss_2", ",", "loss_3", "]", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "valid_bar", ".", "update", "(", "i", "+", "1", ")", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "valid_writer", ".", "write", "(", "'valid: Time {} Loss {}'", ".", "format", "(", "batch_time", ",", "losses", ")", ")", "\n", "\n", "", "", "logger", ".", "valid_bar", ".", "update", "(", "len", "(", "val_loader", ")", ")", "\n", "return", "losses", ".", "avg", ",", "[", "'Total loss'", ",", "'Photo loss'", ",", "'Geometry loss'", ",", "'Smooth loss'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.validate_with_gt": [[678, 730], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "logger.AverageMeter", "logger.AverageMeter", "logger.AverageMeter", "logger.AverageMeter", "disp_net.module.to.module.to", "disp_net.module.to.eval", "time.time", "logger.valid_bar.update", "enumerate", "logger.valid_bar.update", "tgt_img.to.to", "depth.to.to", "tgt_inst_sum.to.to", "disp_net.module.to.", "loss_functions.compute_errors", "logger.AverageMeter.update", "logger.AverageMeter.update", "logger.AverageMeter.update", "time.time", "logger.valid_bar.update", "len", "len", "len", "len", "logger.AverageMeter.update", "logger.valid_writer.write", "loss_functions.compute_errors", "time.time", "fg_pixs.sum().sum", "vmask.sum().sum", "loss_functions.compute_errors", "fg_pixs.sum", "vmask.sum"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.compute_errors", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.AverageMeter.update", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.logger.Writer.write", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.compute_errors", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.compute_errors"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_with_gt", "(", "args", ",", "val_loader", ",", "disp_net", ",", "epoch", ",", "logger", ")", ":", "\n", "    ", "global", "device_val", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "error_names", "=", "[", "'abs_diff'", ",", "'abs_rel'", ",", "'sq_rel'", ",", "'a1'", ",", "'a2'", ",", "'a3'", "]", "\n", "errors", "=", "AverageMeter", "(", "i", "=", "len", "(", "error_names", ")", ")", "\n", "errors_fg", "=", "AverageMeter", "(", "i", "=", "len", "(", "error_names", ")", ")", "\n", "errors_bg", "=", "AverageMeter", "(", "i", "=", "len", "(", "error_names", ")", ")", "\n", "\n", "# switch to evaluate mode", "\n", "disp_net", "=", "disp_net", ".", "module", ".", "to", "(", "device_val", ")", "\n", "disp_net", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "valid_bar", ".", "update", "(", "0", ")", "\n", "\n", "for", "i", ",", "(", "tgt_img", ",", "depth", ",", "tgt_inst_sum", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "if", "args", ".", "debug_mode", "and", "i", ">", "5", ":", "break", ";", "\n", "# if i > 5: break;", "\n", "\n", "tgt_img", "=", "tgt_img", ".", "to", "(", "device_val", ")", "# B, 3, 256, 832", "\n", "depth", "=", "depth", ".", "to", "(", "device_val", ")", "\n", "tgt_inst_sum", "=", "tgt_inst_sum", ".", "to", "(", "device_val", ")", "\n", "\n", "vmask", "=", "(", "depth", ">", "0", ")", ".", "float", "(", ")", "\n", "fg_pixs", "=", "vmask", "*", "tgt_inst_sum", "\n", "bg_pixs", "=", "vmask", "*", "(", "1", "-", "tgt_inst_sum", ")", "\n", "fg_ratio", "=", "(", "fg_pixs", ".", "sum", "(", "dim", "=", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "/", "vmask", ".", "sum", "(", "dim", "=", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", ".", "mean", "(", ")", "\n", "depth_fg", "=", "depth", "*", "tgt_inst_sum", "\n", "depth_bg", "=", "depth", "*", "(", "1", "-", "tgt_inst_sum", ")", "\n", "\n", "# compute output", "\n", "output_disp", "=", "disp_net", "(", "tgt_img", ")", "\n", "output_depth", "=", "1", "/", "output_disp", "[", ":", ",", "0", "]", "\n", "\n", "error_all", ",", "med_scale", "=", "compute_errors", "(", "depth", ",", "output_depth", ")", "\n", "errors", ".", "update", "(", "error_all", ")", "\n", "\n", "errors_bg", ".", "update", "(", "compute_errors", "(", "depth_bg", ",", "output_depth", ",", "med_scale", ")", "[", "0", "]", ")", "\n", "if", "fg_ratio", ":", "\n", "            ", "errors_fg", ".", "update", "(", "compute_errors", "(", "depth_fg", ",", "output_depth", ",", "med_scale", ")", "[", "0", "]", ")", "\n", "# pdb.set_trace()", "\n", "\n", "# measure elapsed time", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "valid_bar", ".", "update", "(", "i", "+", "1", ")", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "valid_writer", ".", "write", "(", "'valid: Time {} Abs_Rel Error {:.4f} ({:.4f})'", ".", "format", "(", "batch_time", ",", "errors", ".", "val", "[", "1", "]", ",", "errors", ".", "avg", "[", "1", "]", ")", ")", "\n", "", "", "logger", ".", "valid_bar", ".", "update", "(", "len", "(", "val_loader", ")", ")", "\n", "\n", "return", "errors", ".", "avg", ",", "error_names", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_depth": [[737, 745], ["disp_net", "ref_depths.append", "disp_net"], "function", ["None"], ["", "def", "compute_depth", "(", "disp_net", ",", "tgt_img", ",", "ref_imgs", ")", ":", "\n", "    ", "tgt_depth", "=", "1", "/", "disp_net", "(", "tgt_img", ")", "\n", "ref_depths", "=", "[", "]", "\n", "for", "ref_img", "in", "ref_imgs", ":", "\n", "        ", "ref_depth", "=", "1", "/", "disp_net", "(", "ref_img", ")", "\n", "ref_depths", ".", "append", "(", "ref_depth", ")", "\n", "\n", "", "return", "tgt_depth", ",", "ref_depths", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_ego_pose_with_inv": [[747, 755], ["zip", "poses_fwd.append", "poses_bwd.append", "pose_net", "pose_net"], "function", ["None"], ["", "def", "compute_ego_pose_with_inv", "(", "pose_net", ",", "tgt_imgs", ",", "ref_imgs", ")", ":", "\n", "    ", "poses_fwd", "=", "[", "]", "\n", "poses_bwd", "=", "[", "]", "\n", "for", "tgt_img", ",", "ref_img", "in", "zip", "(", "tgt_imgs", ",", "ref_imgs", ")", ":", "\n", "        ", "poses_fwd", ".", "append", "(", "pose_net", "(", "tgt_img", ",", "ref_img", ")", ")", "\n", "poses_bwd", ".", "append", "(", "pose_net", "(", "ref_img", ",", "tgt_img", ")", ")", "\n", "\n", "", "return", "poses_fwd", ",", "poses_bwd", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_ego_warp": [[757, 782], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "w_imgs.append", "w_insts.append", "w_depths.append", "w_vals.append", "rigid_warp.forward_warp", "rigid_warp.forward_warp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "depth.detach", "pose.detach", "w_img_cat[].round"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.forward_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.forward_warp"], ["", "def", "compute_ego_warp", "(", "imgs", ",", "insts", ",", "depths", ",", "poses", ",", "intrinsics", ",", "is_detach", "=", "True", ")", ":", "\n", "    ", "'''\n        Args:\n            imgs:       [[B, 3, 256, 832], [B, 3, 256, 832]]\n            insts:      [[B, 3, 256, 832], [B, 3, 256, 832]]\n            depths:     [[B, 1, 256, 832], [B, 1, 256, 832]]\n            poses:      [[B, 6], [B, 6]]\n            intrinsics: [B, 3, 3]\n        Returns:\n            w_imgs:     [[B, 3, 256, 832], [B, 3, 256, 832]]\n            w_vals:     [[B, 1, 256, 832], [B, 1, 256, 832]]\n    '''", "\n", "w_imgs", ",", "w_insts", ",", "w_depths", ",", "w_vals", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "img", ",", "inst", ",", "depth", ",", "pose", "in", "zip", "(", "imgs", ",", "insts", ",", "depths", ",", "poses", ")", ":", "\n", "        ", "img_cat", "=", "torch", ".", "cat", "(", "[", "img", ",", "inst", "[", ":", ",", "1", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "if", "is_detach", ":", "\n", "            ", "w_img_cat", ",", "w_depth", ",", "w_val", "=", "forward_warp", "(", "img_cat", ",", "depth", ".", "detach", "(", ")", ",", "pose", ".", "detach", "(", ")", ",", "intrinsics", ",", "upscale", "=", "3", ")", "\n", "", "else", ":", "\n", "            ", "w_img_cat", ",", "w_depth", ",", "w_val", "=", "forward_warp", "(", "img_cat", ",", "depth", ",", "pose", ",", "intrinsics", ",", "upscale", "=", "3", ")", "\n", "", "w_imgs", ".", "append", "(", "w_img_cat", "[", ":", ",", ":", "3", "]", ")", "\n", "w_insts", ".", "append", "(", "torch", ".", "cat", "(", "[", "inst", "[", ":", ",", ":", "1", "]", ",", "w_img_cat", "[", ":", ",", "3", ":", "]", ".", "round", "(", ")", "]", ",", "dim", "=", "1", ")", ")", "\n", "w_depths", ".", "append", "(", "w_depth", ")", "\n", "w_vals", ".", "append", "(", "w_val", ")", "\n", "\n", "", "return", "w_imgs", ",", "w_insts", ",", "w_depths", ",", "w_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_obj_pose_with_inv": [[784, 847], ["tgtI.size", "zip", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "obj_poses_fwd.append", "obj_poses_bwd.append", "sum", "tgtI.repeat_interleave", "tgtM[].reshape", "r2tI.repeat_interleave", "r2tM[].reshape", "refI.repeat_interleave", "refM[].reshape", "t2rI.repeat_interleave", "t2rM[].reshape", "pose_net", "pose_net", "torch.zeros().type_as.reshape", "torch.zeros().type_as.reshape", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tgtM[].reshape.mean", "refM[].reshape.mean"], "function", ["None"], ["", "def", "compute_obj_pose_with_inv", "(", "pose_net", ",", "tgtI", ",", "tgtMs", ",", "r2tIs", ",", "r2tMs", ",", "refIs", ",", "refMs", ",", "t2rIs", ",", "t2rMs", ",", "intrinsics", ",", "mni", ",", "num_insts", ")", ":", "\n", "    ", "'''\n        Args:\n            ------------------------------------------------\n            tgtI:  [B, 3, 256, 832]\n            tgtMs: [[B, 1+N, 256, 832], [B, 1+N, 256, 832]]\n            r2tIs: [[B, 3, 256, 832], [B, 3, 256, 832]]\n            r2tMs: [[B, 1+N, 256, 832], [B, 1+N, 256, 832]]\n            ------------------------------------------------\n            refIs: [[B, 3, 256, 832], [B, 3, 256, 832]]\n            refMs: [[B, 1+N, 256, 832], [B, 1+N, 256, 832]]\n            t2rIs: [[B, 3, 256, 832], [B, 3, 256, 832]]\n            t2rMs: [[B, 1+N, 256, 832], [B, 1+N, 256, 832]]\n            ------------------------------------------------\n            intrinsics: [B, 3, 3]\n            num_insts:  [[n1, n2, ...], [n1', n2', ...]]\n        Returns:\n            \"Only translations (tx, ty, tz) are estimated!\"\n            obj_poses_fwd: [[B, N, 3], [B, N, 3]]\n            obj_poses_bwd: [[B, N, 3], [B, N, 3]]\n        \n        plt.close('all')\n        bb = 0\n        plt.figure(1); plt.imshow(tgtI.detach().cpu()[bb,0]); plt.colorbar(); plt.ion(); plt.show();\n\n    '''", "\n", "bs", ",", "_", ",", "hh", ",", "ww", "=", "tgtI", ".", "size", "(", ")", "\n", "\n", "obj_poses_fwd", ",", "obj_poses_bwd", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "tgtM", ",", "r2tI", ",", "r2tM", ",", "refI", ",", "refM", ",", "t2rI", ",", "t2rM", ",", "num_inst", "in", "zip", "(", "tgtMs", ",", "r2tIs", ",", "r2tMs", ",", "refIs", ",", "refMs", ",", "t2rIs", ",", "t2rMs", ",", "num_insts", ")", ":", "\n", "        ", "obj_pose_fwd", "=", "torch", ".", "zeros", "(", "[", "bs", "*", "mni", ",", "3", "]", ")", ".", "type_as", "(", "tgtI", ")", "\n", "obj_pose_bwd", "=", "torch", ".", "zeros", "(", "[", "bs", "*", "mni", ",", "3", "]", ")", ".", "type_as", "(", "tgtI", ")", "\n", "\n", "if", "sum", "(", "num_inst", ")", "!=", "0", ":", "\n", "            ", "tgtI_rep", "=", "tgtI", ".", "repeat_interleave", "(", "mni", ",", "dim", "=", "0", ")", "\n", "tgtM_rep", "=", "tgtM", "[", ":", ",", "1", ":", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "hh", ",", "ww", ")", "\n", "fwdIdx", "=", "(", "tgtM_rep", ".", "mean", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "!=", "0", ")", ".", "detach", "(", ")", "# tgt, judge each channel whether instance exists", "\n", "tgtO", "=", "(", "tgtI_rep", "*", "tgtM_rep", ")", "[", "fwdIdx", "]", "\n", "\n", "r2tI_rep", "=", "r2tI", ".", "repeat_interleave", "(", "mni", ",", "dim", "=", "0", ")", "\n", "r2tM_rep", "=", "r2tM", "[", ":", ",", "1", ":", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "hh", ",", "ww", ")", "\n", "r2tO", "=", "(", "r2tI_rep", "*", "r2tM_rep", ")", "[", "fwdIdx", "]", "\n", "\n", "refI_rep", "=", "refI", ".", "repeat_interleave", "(", "mni", ",", "dim", "=", "0", ")", "\n", "refM_rep", "=", "refM", "[", ":", ",", "1", ":", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "hh", ",", "ww", ")", "\n", "bwdIdx", "=", "(", "refM_rep", ".", "mean", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "!=", "0", ")", ".", "detach", "(", ")", "# ref, judge each channel whether instance exists", "\n", "refO", "=", "(", "refI_rep", "*", "refM_rep", ")", "[", "bwdIdx", "]", "\n", "\n", "t2rI_rep", "=", "t2rI", ".", "repeat_interleave", "(", "mni", ",", "dim", "=", "0", ")", "\n", "t2rM_rep", "=", "t2rM", "[", ":", ",", "1", ":", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "hh", ",", "ww", ")", "\n", "t2rO", "=", "(", "t2rI_rep", "*", "t2rM_rep", ")", "[", "bwdIdx", "]", "\n", "\n", "pose_fwd", "=", "pose_net", "(", "tgtO", ",", "r2tO", ")", "\n", "pose_bwd", "=", "pose_net", "(", "refO", ",", "t2rO", ")", "\n", "obj_pose_fwd", "[", "fwdIdx", "]", "=", "pose_fwd", "\n", "obj_pose_bwd", "[", "bwdIdx", "]", "=", "pose_bwd", "\n", "# pdb.set_trace()", "\n", "\n", "", "obj_poses_fwd", ".", "append", "(", "obj_pose_fwd", ".", "reshape", "(", "bs", ",", "mni", ",", "3", ")", ")", "\n", "obj_poses_bwd", ".", "append", "(", "obj_pose_bwd", ".", "reshape", "(", "bs", ",", "mni", ",", "3", ")", ")", "\n", "\n", "", "return", "obj_poses_fwd", ",", "obj_poses_bwd", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.compute_motion_field": [[849, 887], ["tgt_img.size", "zip", "EP_fwd.reshape().repeat", "EP_bwd.reshape().repeat", "obj_MF_fwd.sum", "obj_MF_bwd.sum", "MFs_fwd.append", "MFs_bwd.append", "print", "tgt_inst[].unsqueeze", "OP_fwd.unsqueeze().unsqueeze", "ref_inst[].unsqueeze", "OP_bwd.unsqueeze().unsqueeze", "EP_fwd.reshape", "EP_bwd.reshape", "datetime.datetime.now().strftime", "OP_fwd.unsqueeze", "OP_bwd.unsqueeze", "tgt_inst[].sum", "ref_inst[].sum", "datetime.datetime.now"], "function", ["None"], ["", "def", "compute_motion_field", "(", "tgt_img", ",", "ego_poses_fwd", ",", "ego_poses_bwd", ",", "obj_poses_fwd", ",", "obj_poses_bwd", ",", "tgt_insts", ",", "ref_insts", ")", ":", "\n", "    ", "'''\n        Args:\n            ego_poses_fwd: [torch.Size([B, 6]), torch.Size([B, 6])]\n            ego_poses_bwd: [torch.Size([B, 6]), torch.Size([B, 6])]\n            obj_poses_fwd: [torch.Size([B, N, 6]), torch.Size([B, N, 6])]\n            obj_poses_bwd: [torch.Size([B, N, 6]), torch.Size([B, N, 6])]\n            tgt_insts: [torch.Size([B, 1+N, 256, 832]), torch.Size([B, 1+N, 256, 832])]\n            ref_insts: [torch.Size([B, 1+N, 256, 832]), torch.Size([B, 1+N, 256, 832])]\n        Returns:\n            MFs_fwd: [ ([B, 6, 256, 832]), ([B, 6, 256, 832]) ]\n            MFs_bwd: [ ([B, 6, 256, 832]), ([B, 6, 256, 832]) ]\n\n        plt.close('all')\n        bb = 0; su = 2;\n        plt.figure(1); plt.imshow(obj_MF_fwd.sum(dim=1, keepdim=False)[bb,su].detach().cpu()); plt.colorbar(); plt.ion(); plt.show()\n\n    '''", "\n", "bs", ",", "_", ",", "hh", ",", "ww", "=", "tgt_img", ".", "size", "(", ")", "\n", "MFs_fwd", ",", "MFs_bwd", "=", "[", "]", ",", "[", "]", "# [ ([B, 6, 256, 832]), ([B, 6, 256, 832]) ]", "\n", "\n", "for", "EP_fwd", ",", "EP_bwd", ",", "OP_fwd", ",", "OP_bwd", ",", "tgt_inst", ",", "ref_inst", "in", "zip", "(", "ego_poses_fwd", ",", "ego_poses_bwd", ",", "obj_poses_fwd", ",", "obj_poses_bwd", ",", "tgt_insts", ",", "ref_insts", ")", ":", "\n", "        ", "if", "(", "tgt_inst", "[", ":", ",", "1", ":", "]", ".", "sum", "(", "dim", "=", "1", ")", ">", "1", ")", ".", "sum", "(", ")", "+", "(", "ref_inst", "[", ":", ",", "1", ":", "]", ".", "sum", "(", "dim", "=", "1", ")", ">", "1", ")", ".", "sum", "(", ")", ":", "\n", "            ", "print", "(", "\"WARNING: overlapped instance region at {}\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m-%d-%H:%M\"", ")", ")", ")", "\n", "\n", "", "MF_fwd", "=", "EP_fwd", ".", "reshape", "(", "bs", ",", "6", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "hh", ",", "ww", ")", "\n", "MF_bwd", "=", "EP_bwd", ".", "reshape", "(", "bs", ",", "6", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "hh", ",", "ww", ")", "\n", "\n", "obj_MF_fwd", "=", "tgt_inst", "[", ":", ",", "1", ":", "]", ".", "unsqueeze", "(", "2", ")", "*", "OP_fwd", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# [bs, mni, 3, hh, ww]", "\n", "obj_MF_bwd", "=", "ref_inst", "[", ":", ",", "1", ":", "]", ".", "unsqueeze", "(", "2", ")", "*", "OP_bwd", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# [bs, mni, 3, hh, ww]", "\n", "\n", "MF_fwd", "[", ":", ",", ":", "3", "]", "+=", "obj_MF_fwd", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "\n", "MF_bwd", "[", ":", ",", ":", "3", "]", "+=", "obj_MF_bwd", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "\n", "\n", "MFs_fwd", ".", "append", "(", "MF_fwd", ")", "\n", "MFs_bwd", ".", "append", "(", "MF_bwd", ")", "\n", "\n", "", "return", "MFs_fwd", ",", "MFs_bwd", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.train.save_image": [[889, 903], ["numpy.shape", "float", "float", "matplotlib.pyplot.figure", "plt.figure.set_size_inches", "matplotlib.pyplot.Axes", "plt.Axes.set_axis_off", "plt.figure.add_axes", "plt.Axes.imshow", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close"], "function", ["None"], ["", "def", "save_image", "(", "data", ",", "cm", ",", "fn", ",", "vmin", "=", "None", ",", "vmax", "=", "None", ")", ":", "\n", "    ", "sizes", "=", "np", ".", "shape", "(", "data", ")", "\n", "height", "=", "float", "(", "sizes", "[", "0", "]", ")", "\n", "width", "=", "float", "(", "sizes", "[", "1", "]", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "fig", ".", "set_size_inches", "(", "width", "/", "height", ",", "1", ",", "forward", "=", "False", ")", "\n", "ax", "=", "plt", ".", "Axes", "(", "fig", ",", "[", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "fig", ".", "add_axes", "(", "ax", ")", "\n", "\n", "ax", ".", "imshow", "(", "data", ",", "cmap", "=", "cm", ",", "vmin", "=", "vmin", ",", "vmax", "=", "vmax", ")", "\n", "plt", ".", "savefig", "(", "fn", ",", "dpi", "=", "height", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.custom_transforms.Compose.__init__": [[21, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.custom_transforms.Compose.__call__": [[24, 28], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ",", "segms", ",", "intrinsics", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "images", ",", "segms", ",", "intrinsics", "=", "t", "(", "images", ",", "segms", ",", "intrinsics", ")", "\n", "", "return", "images", ",", "segms", ",", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.custom_transforms.Normalize.__init__": [[31, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.custom_transforms.Normalize.__call__": [[35, 40], ["zip", "t.sub_().div_", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ",", "segms", ",", "intrinsics", ")", ":", "\n", "        ", "for", "tensor", "in", "images", ":", "\n", "            ", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "                ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "", "", "return", "images", ",", "segms", ",", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.custom_transforms.ArrayToTensor.__call__": [[45, 55], ["numpy.transpose", "img_tensors.append", "numpy.transpose", "seg_tensors.append", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "images", ",", "segms", ",", "intrinsics", ")", ":", "\n", "        ", "img_tensors", "=", "[", "]", "\n", "seg_tensors", "=", "[", "]", "\n", "for", "im", "in", "images", ":", "\n", "            ", "im", "=", "np", ".", "transpose", "(", "im", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# put it from HWC to CHW format", "\n", "img_tensors", ".", "append", "(", "torch", ".", "from_numpy", "(", "im", ")", ".", "float", "(", ")", "/", "255", ")", "# handle numpy array", "\n", "", "for", "im", "in", "segms", ":", "\n", "            ", "im", "=", "np", ".", "transpose", "(", "im", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "seg_tensors", ".", "append", "(", "torch", ".", "from_numpy", "(", "im", ")", ".", "float", "(", ")", ")", "\n", "", "return", "img_tensors", ",", "seg_tensors", ",", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.custom_transforms.RandomHorizontalFlip.__call__": [[60, 74], ["random.random", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.fliplr", "numpy.fliplr"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "images", ",", "segms", ",", "intrinsics", ")", ":", "\n", "        ", "assert", "intrinsics", "is", "not", "None", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "output_intrinsics", "=", "np", ".", "copy", "(", "intrinsics", ")", "\n", "output_images", "=", "[", "np", ".", "copy", "(", "np", ".", "fliplr", "(", "im", ")", ")", "for", "im", "in", "images", "]", "\n", "output_segms", "=", "[", "np", ".", "copy", "(", "np", ".", "fliplr", "(", "im", ")", ")", "for", "im", "in", "segms", "]", "\n", "\n", "w", "=", "output_images", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "output_intrinsics", "[", "0", ",", "2", "]", "=", "w", "-", "output_intrinsics", "[", "0", ",", "2", "]", "\n", "", "else", ":", "\n", "            ", "output_images", "=", "images", "\n", "output_segms", "=", "segms", "\n", "output_intrinsics", "=", "intrinsics", "\n", "", "return", "output_images", ",", "output_segms", ",", "output_intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.custom_transforms.RandomScaleCrop.__call__": [[79, 102], ["numpy.copy", "numpy.random.uniform", "numpy.random.randint", "numpy.random.randint", "int", "int", "scipy.misc.imresize", "cv2.resize"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "images", ",", "segms", ",", "intrinsics", ")", ":", "\n", "        ", "assert", "intrinsics", "is", "not", "None", "\n", "output_intrinsics", "=", "np", ".", "copy", "(", "intrinsics", ")", "\n", "\n", "in_h", ",", "in_w", ",", "_", "=", "images", "[", "0", "]", ".", "shape", "\n", "x_scaling", ",", "y_scaling", "=", "np", ".", "random", ".", "uniform", "(", "1", ",", "1.15", ",", "2", ")", "\n", "scaled_h", ",", "scaled_w", "=", "int", "(", "in_h", "*", "y_scaling", ")", ",", "int", "(", "in_w", "*", "x_scaling", ")", "\n", "\n", "output_intrinsics", "[", "0", "]", "*=", "x_scaling", "\n", "output_intrinsics", "[", "1", "]", "*=", "y_scaling", "\n", "\n", "scaled_images", "=", "[", "imresize", "(", "im", ",", "(", "scaled_h", ",", "scaled_w", ")", ")", "for", "im", "in", "images", "]", "# scipy.misc.imresize\ub294 255 \uc2a4\ucf00\uc77c\ub85c \ubcc0\ud658\ub428!", "\n", "scaled_segms", "=", "[", "cv2", ".", "resize", "(", "im", ",", "(", "scaled_w", ",", "scaled_h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "for", "im", "in", "segms", "]", "# \uc774 \ubd80\ubd84\uc5d0\uc11c 1\ucc44\ub110 \uc138\uadf8\uba3c\ud2b8 [256 x 832 x 1] >> [256 x 832]\ub85c \ubcc0\ud658\ub428!", "\n", "\n", "offset_y", "=", "np", ".", "random", ".", "randint", "(", "scaled_h", "-", "in_h", "+", "1", ")", "\n", "offset_x", "=", "np", ".", "random", ".", "randint", "(", "scaled_w", "-", "in_w", "+", "1", ")", "\n", "cropped_images", "=", "[", "im", "[", "offset_y", ":", "offset_y", "+", "in_h", ",", "offset_x", ":", "offset_x", "+", "in_w", "]", "for", "im", "in", "scaled_images", "]", "\n", "cropped_segms", "=", "[", "im", "[", "offset_y", ":", "offset_y", "+", "in_h", ",", "offset_x", ":", "offset_x", "+", "in_w", "]", "for", "im", "in", "scaled_segms", "]", "\n", "\n", "output_intrinsics", "[", "0", ",", "2", "]", "-=", "offset_x", "\n", "output_intrinsics", "[", "1", ",", "2", "]", "-=", "offset_y", "\n", "\n", "return", "cropped_images", ",", "cropped_segms", ",", "output_intrinsics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.drawRobotics.Arrow3D.__init__": [[8, 11], ["matplotlib.patches.FancyArrowPatch.__init__"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "xs", ",", "ys", ",", "zs", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "FancyArrowPatch", ".", "__init__", "(", "self", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_verts3d", "=", "xs", ",", "ys", ",", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.drawRobotics.Arrow3D.draw": [[12, 17], ["mpl_toolkits.mplot3d.proj3d.proj_transform", "drawRobotics.Arrow3D.set_positions", "matplotlib.patches.FancyArrowPatch.draw"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.drawRobotics.Arrow3D.draw"], ["", "def", "draw", "(", "self", ",", "renderer", ")", ":", "\n", "        ", "xs3d", ",", "ys3d", ",", "zs3d", "=", "self", ".", "_verts3d", "\n", "xs", ",", "ys", ",", "zs", "=", "proj3d", ".", "proj_transform", "(", "xs3d", ",", "ys3d", ",", "zs3d", ",", "renderer", ".", "M", ")", "\n", "self", ".", "set_positions", "(", "(", "xs", "[", "0", "]", ",", "ys", "[", "0", "]", ")", ",", "(", "xs", "[", "1", "]", ",", "ys", "[", "1", "]", ")", ")", "\n", "FancyArrowPatch", ".", "draw", "(", "self", ",", "renderer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.drawRobotics.drawVector": [[19, 60], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "fig.add_artist", "drawRobotics.Arrow3D", "drawRobotics.Arrow3D", "fig.scatter", "fig.plot", "fig.plot", "fig.plot", "fig.text"], "function", ["None"], ["", "", "def", "drawVector", "(", "fig", ",", "pointA", ",", "pointB", ",", "**", "kwargs", ")", ":", "\n", "\t", "ms", "=", "kwargs", ".", "get", "(", "'mutation_scale'", ",", "20", ")", "\n", "alpha", "=", "kwargs", ".", "get", "(", "'alpha'", ",", "1", ")", "\n", "ars", "=", "kwargs", ".", "get", "(", "'arrowstyle'", ",", "'-|>'", ")", "\n", "lc", "=", "kwargs", ".", "get", "(", "'lineColor'", ",", "None", ")", "\n", "fc", "=", "kwargs", ".", "get", "(", "'faceColor'", ",", "'y'", ")", "\n", "ec", "=", "kwargs", ".", "get", "(", "'edgeColor'", ",", "'k'", ")", "\n", "pc", "=", "kwargs", ".", "get", "(", "'projColor'", ",", "'k'", ")", "\n", "pointEnable", "=", "kwargs", ".", "get", "(", "'pointEnable'", ",", "False", ")", "\n", "projOn", "=", "kwargs", ".", "get", "(", "'proj'", ",", "False", ")", "\n", "lineStyle", "=", "kwargs", ".", "get", "(", "'lineStyle'", ",", "'-'", ")", "\n", "annotationString", "=", "kwargs", ".", "get", "(", "'annotationString'", ",", "''", ")", "\n", "lineWidth", "=", "kwargs", ".", "get", "(", "'lineWidth'", ",", "1", ")", "\n", "zorder", "=", "kwargs", ".", "get", "(", "'zorder'", ",", "1", ")", "\n", "\n", "\n", "if", "(", "3", "<=", "pointA", ".", "size", "<=", "4", ")", ":", "\n", "\t\t", "xs", "=", "[", "pointA", "[", "0", "]", ",", "pointB", "[", "0", "]", "]", "\n", "ys", "=", "[", "pointA", "[", "1", "]", ",", "pointB", "[", "1", "]", "]", "\n", "zs", "=", "[", "pointA", "[", "2", "]", ",", "pointB", "[", "2", "]", "]", "\n", "", "else", ":", "\n", "\t\t", "xs", "=", "[", "pointA", "[", "0", ",", "3", "]", ",", "pointB", "[", "0", ",", "3", "]", "]", "\n", "ys", "=", "[", "pointA", "[", "1", ",", "3", "]", ",", "pointB", "[", "1", ",", "3", "]", "]", "\n", "zs", "=", "[", "pointA", "[", "2", ",", "3", "]", ",", "pointB", "[", "2", ",", "3", "]", "]", "\n", "\n", "", "if", "lc", ":", "\n", "\t\t", "out", "=", "Arrow3D", "(", "xs", ",", "ys", ",", "zs", ",", "mutation_scale", "=", "ms", ",", "alpha", "=", "alpha", ",", "arrowstyle", "=", "ars", ",", "color", "=", "lc", ",", "linestyle", "=", "lineStyle", ",", "linewidth", "=", "lineWidth", ",", "zorder", "=", "zorder", ")", "\n", "", "else", ":", "\n", "\t\t", "out", "=", "Arrow3D", "(", "xs", ",", "ys", ",", "zs", ",", "mutation_scale", "=", "ms", ",", "alpha", "=", "alpha", ",", "arrowstyle", "=", "ars", ",", "facecolor", "=", "fc", ",", "edgecolor", "=", "ec", ",", "linestyle", "=", "lineStyle", ",", "linewidth", "=", "lineWidth", ",", "zorder", "=", "zorder", ")", "\n", "", "fig", ".", "add_artist", "(", "out", ")", "\n", "\n", "# if pointEnable: fig.scatter(xs[1], ys[1], zs[1], color='k', s=50)", "\n", "if", "pointEnable", ":", "fig", ".", "scatter", "(", "xs", "[", "0", "]", ",", "ys", "[", "0", "]", ",", "zs", "[", "0", "]", ",", "color", "=", "lc", ",", "s", "=", "20", ",", "zorder", "=", "zorder", ")", "\n", "\n", "if", "projOn", ":", "\n", "\t\t", "fig", ".", "plot", "(", "xs", ",", "ys", ",", "[", "0", ",", "0", "]", ",", "color", "=", "pc", ",", "linestyle", "=", "'--'", ",", "zorder", "=", "zorder", ")", "\n", "fig", ".", "plot", "(", "[", "xs", "[", "0", "]", ",", "xs", "[", "0", "]", "]", ",", "[", "ys", "[", "0", "]", ",", "ys", "[", "0", "]", "]", ",", "[", "0", ",", "zs", "[", "0", "]", "]", ",", "color", "=", "pc", ",", "linestyle", "=", "'--'", ",", "zorder", "=", "zorder", ")", "\n", "fig", ".", "plot", "(", "[", "xs", "[", "1", "]", ",", "xs", "[", "1", "]", "]", ",", "[", "ys", "[", "1", "]", ",", "ys", "[", "1", "]", "]", ",", "[", "0", ",", "zs", "[", "1", "]", "]", ",", "color", "=", "pc", ",", "linestyle", "=", "'--'", ",", "zorder", "=", "zorder", ")", "\n", "\n", "", "if", "annotationString", "!=", "''", ":", "\n", "\t\t", "fig", ".", "text", "(", "xs", "[", "1", "]", ",", "ys", "[", "1", "]", ",", "zs", "[", "1", "]", ",", "annotationString", ",", "size", "=", "15", ",", "color", "=", "'k'", ",", "zorder", "=", "zorder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.drawRobotics.drawPointWithAxis": [[62, 112], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "len", "fig.scatter", "drawRobotics.Arrow3D", "drawRobotics.Arrow3D", "drawRobotics.Arrow3D", "fig.add_artist", "fig.add_artist", "fig.add_artist"], "function", ["None"], ["", "", "def", "drawPointWithAxis", "(", "fig", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t", "ms", "=", "kwargs", ".", "get", "(", "'mutation_scale'", ",", "20", ")", "\n", "alpha", "=", "kwargs", ".", "get", "(", "'alpha'", ",", "1", ")", "\n", "ars", "=", "kwargs", ".", "get", "(", "'arrowstyle'", ",", "'->'", ")", "\n", "pointEnable", "=", "kwargs", ".", "get", "(", "'pointEnable'", ",", "True", ")", "\n", "axisEnable", "=", "kwargs", ".", "get", "(", "'axisEnable'", ",", "True", ")", "\n", "lineStyle", "=", "kwargs", ".", "get", "(", "'lineStyle'", ",", "'-'", ")", "\n", "lineWidth", "=", "kwargs", ".", "get", "(", "'lineWidth'", ",", "1", ")", "\n", "vectorLength", "=", "kwargs", ".", "get", "(", "'vectorLength'", ",", "1", ")", "\n", "zorder", "=", "kwargs", ".", "get", "(", "'zorder'", ",", "1", ")", "\n", "\n", "if", "len", "(", "args", ")", "==", "4", ":", "\n", "\t\t", "ORG", "=", "args", "[", "0", "]", "\n", "hat_X", "=", "args", "[", "1", "]", "\n", "hat_Y", "=", "args", "[", "2", "]", "\n", "hat_Z", "=", "args", "[", "3", "]", "\n", "xs_n", "=", "[", "ORG", "[", "0", "]", ",", "ORG", "[", "0", "]", "+", "hat_X", "[", "0", "]", "*", "vectorLength", "]", "\n", "ys_n", "=", "[", "ORG", "[", "1", "]", ",", "ORG", "[", "1", "]", "+", "hat_X", "[", "1", "]", "*", "vectorLength", "]", "\n", "zs_n", "=", "[", "ORG", "[", "2", "]", ",", "ORG", "[", "2", "]", "+", "hat_X", "[", "2", "]", "*", "vectorLength", "]", "\n", "xs_o", "=", "[", "ORG", "[", "0", "]", ",", "ORG", "[", "0", "]", "+", "hat_Y", "[", "0", "]", "*", "vectorLength", "]", "\n", "ys_o", "=", "[", "ORG", "[", "1", "]", ",", "ORG", "[", "1", "]", "+", "hat_Y", "[", "1", "]", "*", "vectorLength", "]", "\n", "zs_o", "=", "[", "ORG", "[", "2", "]", ",", "ORG", "[", "2", "]", "+", "hat_Y", "[", "2", "]", "*", "vectorLength", "]", "\n", "xs_a", "=", "[", "ORG", "[", "0", "]", ",", "ORG", "[", "0", "]", "+", "hat_Z", "[", "0", "]", "*", "vectorLength", "]", "\n", "ys_a", "=", "[", "ORG", "[", "1", "]", ",", "ORG", "[", "1", "]", "+", "hat_Z", "[", "1", "]", "*", "vectorLength", "]", "\n", "zs_a", "=", "[", "ORG", "[", "2", "]", ",", "ORG", "[", "2", "]", "+", "hat_Z", "[", "2", "]", "*", "vectorLength", "]", "\n", "", "else", ":", "\n", "\t\t", "tmp", "=", "args", "[", "0", "]", "\n", "ORG", "=", "tmp", "[", ":", "3", ",", "3", ":", "]", "\n", "hat_X", "=", "tmp", "[", ":", "3", ",", "0", ":", "1", "]", "\n", "hat_Y", "=", "tmp", "[", ":", "3", ",", "1", ":", "2", "]", "\n", "hat_Z", "=", "tmp", "[", ":", "3", ",", "2", ":", "3", "]", "\n", "xs_n", "=", "[", "ORG", "[", "0", ",", "0", "]", ",", "ORG", "[", "0", ",", "0", "]", "+", "hat_X", "[", "0", ",", "0", "]", "*", "vectorLength", "]", "\n", "ys_n", "=", "[", "ORG", "[", "1", ",", "0", "]", ",", "ORG", "[", "1", ",", "0", "]", "+", "hat_X", "[", "1", ",", "0", "]", "*", "vectorLength", "]", "\n", "zs_n", "=", "[", "ORG", "[", "2", ",", "0", "]", ",", "ORG", "[", "2", ",", "0", "]", "+", "hat_X", "[", "2", ",", "0", "]", "*", "vectorLength", "]", "\n", "xs_o", "=", "[", "ORG", "[", "0", ",", "0", "]", ",", "ORG", "[", "0", ",", "0", "]", "+", "hat_Y", "[", "0", ",", "0", "]", "*", "vectorLength", "]", "\n", "ys_o", "=", "[", "ORG", "[", "1", ",", "0", "]", ",", "ORG", "[", "1", ",", "0", "]", "+", "hat_Y", "[", "1", ",", "0", "]", "*", "vectorLength", "]", "\n", "zs_o", "=", "[", "ORG", "[", "2", ",", "0", "]", ",", "ORG", "[", "2", ",", "0", "]", "+", "hat_Y", "[", "2", ",", "0", "]", "*", "vectorLength", "]", "\n", "xs_a", "=", "[", "ORG", "[", "0", ",", "0", "]", ",", "ORG", "[", "0", ",", "0", "]", "+", "hat_Z", "[", "0", ",", "0", "]", "*", "vectorLength", "]", "\n", "ys_a", "=", "[", "ORG", "[", "1", ",", "0", "]", ",", "ORG", "[", "1", ",", "0", "]", "+", "hat_Z", "[", "1", ",", "0", "]", "*", "vectorLength", "]", "\n", "zs_a", "=", "[", "ORG", "[", "2", ",", "0", "]", ",", "ORG", "[", "2", ",", "0", "]", "+", "hat_Z", "[", "2", ",", "0", "]", "*", "vectorLength", "]", "\n", "\n", "", "if", "pointEnable", ":", "fig", ".", "scatter", "(", "xs_n", "[", "0", "]", ",", "ys_n", "[", "0", "]", ",", "zs_n", "[", "0", "]", ",", "alpha", "=", "alpha", ",", "color", "=", "'k'", ",", "s", "=", "5", ",", "zorder", "=", "zorder", ")", "\n", "\n", "if", "axisEnable", ":", "\n", "\t\t", "n", "=", "Arrow3D", "(", "xs_n", ",", "ys_n", ",", "zs_n", ",", "mutation_scale", "=", "ms", ",", "alpha", "=", "alpha", ",", "arrowstyle", "=", "ars", ",", "color", "=", "'r'", ",", "linestyle", "=", "lineStyle", ",", "linewidth", "=", "lineWidth", ",", "zorder", "=", "zorder", ")", "\n", "o", "=", "Arrow3D", "(", "xs_o", ",", "ys_o", ",", "zs_o", ",", "mutation_scale", "=", "ms", ",", "alpha", "=", "alpha", ",", "arrowstyle", "=", "ars", ",", "color", "=", "'g'", ",", "linestyle", "=", "lineStyle", ",", "linewidth", "=", "lineWidth", ",", "zorder", "=", "zorder", ")", "\n", "a", "=", "Arrow3D", "(", "xs_a", ",", "ys_a", ",", "zs_a", ",", "mutation_scale", "=", "ms", ",", "alpha", "=", "alpha", ",", "arrowstyle", "=", "ars", ",", "color", "=", "'b'", ",", "linestyle", "=", "lineStyle", ",", "linewidth", "=", "lineWidth", ",", "zorder", "=", "zorder", ")", "\n", "fig", ".", "add_artist", "(", "n", ")", "\n", "fig", ".", "add_artist", "(", "o", ")", "\n", "fig", ".", "add_artist", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.drawRobotics.RotX": [[114, 118], ["numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "", "def", "RotX", "(", "phi", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "phi", ")", ",", "-", "np", ".", "sin", "(", "phi", ")", "]", ",", "\n", "[", "0", ",", "np", ".", "sin", "(", "phi", ")", ",", "np", ".", "cos", "(", "phi", ")", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.drawRobotics.RotY": [[120, 124], ["numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "RotY", "(", "theta", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "theta", ")", ",", "0", ",", "np", ".", "sin", "(", "theta", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "theta", ")", ",", "0", ",", "np", ".", "cos", "(", "theta", ")", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.drawRobotics.RotZ": [[126, 130], ["numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "RotZ", "(", "psi", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "psi", ")", ",", "-", "np", ".", "sin", "(", "psi", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "psi", ")", ",", "np", ".", "cos", "(", "psi", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.drawRobotics.D_q": [[132, 137], ["numpy.array"], "function", ["None"], ["", "def", "D_q", "(", "dx", ",", "dy", ",", "dz", ")", ":", "\n", "\t", "return", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "dx", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "dy", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "dz", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.SSIM.__init__": [[26, 38], ["torch.nn.Module.__init__", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mu_x_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "mu_y_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_x_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_y_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_xy_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "\n", "self", ".", "refl", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "\n", "self", ".", "C1", "=", "0.01", "**", "2", "\n", "self", ".", "C2", "=", "0.03", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.SSIM.forward": [[39, 54], ["loss_functions.SSIM.refl", "loss_functions.SSIM.refl", "loss_functions.SSIM.mu_x_pool", "loss_functions.SSIM.mu_y_pool", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "loss_functions.SSIM.sig_x_pool", "loss_functions.SSIM.sig_y_pool", "loss_functions.SSIM.sig_xy_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "self", ".", "refl", "(", "x", ")", "\n", "y", "=", "self", ".", "refl", "(", "y", ")", "\n", "\n", "mu_x", "=", "self", ".", "mu_x_pool", "(", "x", ")", "\n", "mu_y", "=", "self", ".", "mu_y_pool", "(", "y", ")", "\n", "\n", "sigma_x", "=", "self", ".", "sig_x_pool", "(", "x", "**", "2", ")", "-", "mu_x", "**", "2", "\n", "sigma_y", "=", "self", ".", "sig_y_pool", "(", "y", "**", "2", ")", "-", "mu_y", "**", "2", "\n", "sigma_xy", "=", "self", ".", "sig_xy_pool", "(", "x", "*", "y", ")", "-", "mu_x", "*", "mu_y", "\n", "\n", "SSIM_n", "=", "(", "2", "*", "mu_x", "*", "mu_y", "+", "self", ".", "C1", ")", "*", "(", "2", "*", "sigma_xy", "+", "self", ".", "C2", ")", "\n", "SSIM_d", "=", "(", "mu_x", "**", "2", "+", "mu_y", "**", "2", "+", "self", ".", "C1", ")", "*", "(", "sigma_x", "+", "sigma_y", "+", "self", ".", "C2", ")", "\n", "\n", "return", "torch", ".", "clamp", "(", "(", "1", "-", "SSIM_n", "/", "SSIM_d", ")", "/", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.compute_photo_and_geometry_loss": [[61, 91], ["zip", "loss_functions.compute_pairwise_loss", "loss_functions.compute_pairwise_loss", "r2t_imgs.append", "t2r_imgs.append", "r2t_flows.append", "t2r_flows.append", "r2t_diffs.append", "t2r_diffs.append", "r2t_vals.append", "t2r_vals.append", "vmask_fwd.detach", "vmask_bwd.detach"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.compute_pairwise_loss", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.compute_pairwise_loss"], ["def", "compute_photo_and_geometry_loss", "(", "tgt_img", ",", "ref_imgs", ",", "intrinsics", ",", "tgt_depth", ",", "ref_depths", ",", "motion_fields_fwd", ",", "motion_fields_bwd", ",", "with_ssim", ",", "with_mask", ",", "with_auto_mask", ",", "padding_mode", ",", "with_only_obj", ",", "tgt_obj_masks", ",", "ref_obj_masks", ",", "vmasks_fwd", ",", "vmasks_bwd", ")", ":", "\n", "\n", "    ", "photo_loss", "=", "0", "\n", "geometry_loss", "=", "0", "\n", "\n", "r2t_imgs", ",", "t2r_imgs", "=", "[", "]", ",", "[", "]", "\n", "r2t_flows", ",", "t2r_flows", "=", "[", "]", ",", "[", "]", "\n", "r2t_diffs", ",", "t2r_diffs", "=", "[", "]", ",", "[", "]", "\n", "r2t_vals", ",", "t2r_vals", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "ref_img", ",", "ref_depth", ",", "mf_fwd", ",", "mf_bwd", ",", "tgt_obj_mask", ",", "ref_obj_mask", ",", "vmask_fwd", ",", "vmask_bwd", "in", "zip", "(", "ref_imgs", ",", "ref_depths", ",", "motion_fields_fwd", ",", "motion_fields_bwd", ",", "tgt_obj_masks", ",", "ref_obj_masks", ",", "vmasks_fwd", ",", "vmasks_bwd", ")", ":", "\n", "        ", "photo_loss1", ",", "geometry_loss1", ",", "r2t_img", ",", "tgt_comp_depth", ",", "r2t_flow", ",", "r2t_diff", ",", "r2t_val", "=", "compute_pairwise_loss", "(", "tgt_img", ",", "ref_img", ",", "tgt_depth", ",", "ref_depth", ",", "mf_fwd", ",", "intrinsics", ",", "with_ssim", ",", "with_mask", ",", "with_auto_mask", ",", "padding_mode", ",", "with_only_obj", ",", "tgt_obj_mask", ",", "vmask_fwd", ".", "detach", "(", ")", ")", "\n", "photo_loss2", ",", "geometry_loss2", ",", "t2r_img", ",", "ref_comp_depth", ",", "t2r_flow", ",", "t2r_diff", ",", "t2r_val", "=", "compute_pairwise_loss", "(", "ref_img", ",", "tgt_img", ",", "ref_depth", ",", "tgt_depth", ",", "mf_bwd", ",", "intrinsics", ",", "with_ssim", ",", "with_mask", ",", "with_auto_mask", ",", "padding_mode", ",", "with_only_obj", ",", "ref_obj_mask", ",", "vmask_bwd", ".", "detach", "(", ")", ")", "\n", "r2t_imgs", ".", "append", "(", "r2t_img", ")", "\n", "t2r_imgs", ".", "append", "(", "t2r_img", ")", "\n", "r2t_flows", ".", "append", "(", "r2t_flow", ")", "\n", "t2r_flows", ".", "append", "(", "t2r_flow", ")", "\n", "r2t_diffs", ".", "append", "(", "r2t_diff", ")", "\n", "t2r_diffs", ".", "append", "(", "t2r_diff", ")", "\n", "r2t_vals", ".", "append", "(", "r2t_val", ")", "\n", "t2r_vals", ".", "append", "(", "t2r_val", ")", "\n", "\n", "photo_loss", "+=", "(", "photo_loss1", "+", "photo_loss2", ")", "\n", "geometry_loss", "+=", "(", "geometry_loss1", "+", "geometry_loss2", ")", "\n", "\n", "", "return", "photo_loss", ",", "geometry_loss", ",", "r2t_imgs", ",", "t2r_imgs", ",", "r2t_flows", ",", "t2r_flows", ",", "r2t_diffs", ",", "t2r_diffs", ",", "r2t_vals", ",", "t2r_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.compute_pairwise_loss": [[94, 123], ["rigid_warp.inverse_warp_mof", "loss_functions.mean_on_mask", "loss_functions.mean_on_mask", "compute_ssim_loss", "diff_img.mean"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.inverse_warp_mof", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.mean_on_mask", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.mean_on_mask"], ["", "def", "compute_pairwise_loss", "(", "tgt_img", ",", "ref_img", ",", "tgt_depth", ",", "ref_depth", ",", "motion_field", ",", "intrinsic", ",", "with_ssim", ",", "with_mask", ",", "with_auto_mask", ",", "padding_mode", ",", "with_only_obj", ",", "obj_mask", ",", "vmask", ")", ":", "\n", "\n", "    ", "ref_img_warped", ",", "valid_mask", ",", "projected_depth", ",", "computed_depth", ",", "r2t_flow", "=", "inverse_warp_mof", "(", "ref_img", ",", "tgt_depth", ",", "ref_depth", ",", "motion_field", ",", "intrinsic", ",", "padding_mode", ")", "\n", "\n", "diff_img", "=", "(", "tgt_img", "-", "ref_img_warped", ")", ".", "abs", "(", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "diff_depth", "=", "(", "(", "computed_depth", "-", "projected_depth", ")", ".", "abs", "(", ")", "/", "(", "computed_depth", "+", "projected_depth", ")", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n", "if", "with_auto_mask", "==", "True", ":", "\n", "        ", "auto_mask", "=", "(", "diff_img", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "<", "(", "tgt_img", "-", "ref_img", ")", ".", "abs", "(", ")", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", ".", "float", "(", ")", "*", "valid_mask", "\n", "valid_mask", "=", "auto_mask", "\n", "\n", "", "if", "with_ssim", "==", "True", ":", "\n", "        ", "ssim_map", "=", "compute_ssim_loss", "(", "tgt_img", ",", "ref_img_warped", ")", "\n", "diff_img", "=", "(", "0.15", "*", "diff_img", "+", "0.85", "*", "ssim_map", ")", "# hyper-parameter", "\n", "\n", "", "if", "with_mask", "==", "True", ":", "\n", "        ", "weight_mask", "=", "(", "1", "-", "diff_depth", ")", "\n", "diff_img", "=", "diff_img", "*", "weight_mask", "\n", "\n", "", "if", "with_only_obj", "==", "True", ":", "\n", "        ", "valid_mask", "=", "valid_mask", "*", "obj_mask", "\n", "\n", "", "out_val", "=", "valid_mask", "*", "vmask", "\n", "\n", "# compute all loss", "\n", "reconstruction_loss", "=", "mean_on_mask", "(", "diff_img", ",", "out_val", ")", "\n", "geometry_consistency_loss", "=", "mean_on_mask", "(", "diff_depth", ",", "out_val", ")", "\n", "\n", "return", "reconstruction_loss", ",", "geometry_consistency_loss", ",", "ref_img_warped", ",", "computed_depth", ",", "r2t_flow", ",", "diff_depth", ",", "out_val", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.compute_smooth_loss": [[126, 158], ["loss_functions.compute_smooth_loss.get_smooth_loss"], "function", ["None"], ["", "def", "compute_smooth_loss", "(", "tgt_depth", ",", "tgt_img", ",", "ref_depths", ",", "ref_imgs", ")", ":", "\n", "    ", "def", "get_smooth_loss", "(", "disp", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n            Computes the smoothness loss for a disparity image\n            The color image is used for edge-aware smoothness\n        \"\"\"", "\n", "# normalize", "\n", "mean_disp", "=", "disp", ".", "mean", "(", "2", ",", "True", ")", ".", "mean", "(", "3", ",", "True", ")", "\n", "norm_disp", "=", "disp", "/", "(", "mean_disp", "+", "1e-7", ")", "\n", "disp", "=", "norm_disp", "\n", "\n", "grad_disp_x", "=", "torch", ".", "abs", "(", "disp", "-", "torch", ".", "roll", "(", "disp", ",", "1", ",", "dims", "=", "3", ")", ")", "\n", "grad_disp_y", "=", "torch", ".", "abs", "(", "disp", "-", "torch", ".", "roll", "(", "disp", ",", "1", ",", "dims", "=", "2", ")", ")", "\n", "grad_disp_x", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "grad_disp_y", "[", ":", ",", ":", ",", "0", ",", ":", "]", "=", "0", "\n", "\n", "grad_img_x", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "img", "-", "torch", ".", "roll", "(", "img", ",", "1", ",", "dims", "=", "3", ")", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "grad_img_y", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "img", "-", "torch", ".", "roll", "(", "img", ",", "1", ",", "dims", "=", "2", ")", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "grad_img_x", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "grad_img_y", "[", ":", ",", ":", ",", "0", ",", ":", "]", "=", "0", "\n", "\n", "grad_disp_x", "*=", "torch", ".", "exp", "(", "-", "grad_img_x", ")", "\n", "grad_disp_y", "*=", "torch", ".", "exp", "(", "-", "grad_img_y", ")", "\n", "\n", "return", "grad_disp_x", ".", "mean", "(", ")", "+", "grad_disp_y", ".", "mean", "(", ")", "\n", "\n", "", "loss", "=", "get_smooth_loss", "(", "tgt_depth", ",", "tgt_img", ")", "\n", "\n", "for", "ref_depth", ",", "ref_img", "in", "zip", "(", "ref_depths", ",", "ref_imgs", ")", ":", "\n", "        ", "loss", "+=", "get_smooth_loss", "(", "ref_depth", ",", "ref_img", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.compute_obj_size_constraint_loss": [[161, 219], ["tgtD.size", "torch.tensor().cuda", "torch.tensor().cuda", "zip", "torch.tensor", "torch.tensor", "sum", "intrinsics[].repeat_interleave", "tgtD.repeat_interleave", "tgtD.repeat_interleave.mean", "tgtM[].reshape", "numpy.where", "torch.tensor().type_as", "torch.tensor().type_as", "tgtD_avg[].detach", "refD.repeat_interleave", "refD.repeat_interleave.mean", "refM[].reshape", "numpy.where", "torch.tensor().type_as", "torch.tensor().type_as", "refD_avg[].detach", "tgtM[].reshape.sum().clamp", "torch.abs().sum", "torch.abs().sum", "torch.abs().size", "torch.abs().size", "refM[].reshape.sum().clamp", "torch.abs().sum", "torch.abs().sum", "torch.abs().size", "torch.abs().size", "tgtM[].reshape.detach().cpu().numpy", "torch.tensor", "torch.tensor", "refM[].reshape.detach().cpu().numpy", "torch.tensor", "torch.tensor", "tgtM[].reshape.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "refM[].reshape.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "tgtM[].reshape.detach().cpu", "refM[].reshape.detach().cpu", "range", "range", "tgtM[].reshape.detach", "[].max", "[].min", "tgtM[].reshape.size", "refM[].reshape.detach", "[].max", "[].min", "refM[].reshape.size"], "function", ["None"], ["", "def", "compute_obj_size_constraint_loss", "(", "height_prior", ",", "tgtD", ",", "tgtMs", ",", "refDs", ",", "refMs", ",", "intrinsics", ",", "mni", ",", "num_insts", ")", ":", "\n", "    ", "'''\n        Reference: Struct2Depth (AAAI'19), https://github.com/tensorflow/models/blob/archive/research/struct2depth/model.py\n        args:\n            D_avg, D_obj, H_obj, D_app: tensor([d1, d2, d3, ... dn], device='cuda:0')\n            num_inst: [n1, n2, ...]\n            intrinsics.shape: torch.Size([B, 3, 3])\n    '''", "\n", "bs", ",", "_", ",", "hh", ",", "ww", "=", "tgtD", ".", "size", "(", ")", "\n", "\n", "loss", "=", "torch", ".", "tensor", "(", ".0", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "tgtM", ",", "refD", ",", "refM", ",", "num_inst", "in", "zip", "(", "tgtMs", ",", "refDs", ",", "refMs", ",", "num_insts", ")", ":", "\n", "        ", "if", "sum", "(", "num_inst", ")", "!=", "0", ":", "\n", "            ", "fy_rep", "=", "intrinsics", "[", ":", ",", "1", ",", "1", "]", ".", "repeat_interleave", "(", "mni", ",", "dim", "=", "0", ")", "\n", "\n", "### tgt-frame ###", "\n", "tgtD_rep", "=", "tgtD", ".", "repeat_interleave", "(", "mni", ",", "dim", "=", "0", ")", "\n", "tgtD_avg", "=", "tgtD_rep", ".", "mean", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "tgtM_rep", "=", "tgtM", "[", ":", ",", "1", ":", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "hh", ",", "ww", ")", "\n", "tgtD_obj", "=", "(", "tgtD_rep", "*", "tgtM_rep", ")", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "/", "tgtM_rep", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", ".", "clamp", "(", "min", "=", "1e-9", ")", "\n", "tgtM_idx", "=", "np", ".", "where", "(", "tgtM_rep", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "==", "1", ")", "\n", "tgtH_obj", "=", "torch", ".", "tensor", "(", "[", "tgtM_idx", "[", "2", "]", "[", "tgtM_idx", "[", "0", "]", "==", "obj", "]", ".", "max", "(", ")", "-", "tgtM_idx", "[", "2", "]", "[", "tgtM_idx", "[", "0", "]", "==", "obj", "]", ".", "min", "(", ")", "if", "(", "tgtM_idx", "[", "0", "]", "==", "obj", ")", ".", "sum", "(", ")", "!=", "0", "else", "0", "for", "obj", "in", "range", "(", "tgtM_rep", ".", "size", "(", "0", ")", ")", "]", ")", ".", "type_as", "(", "tgtD", ")", "\n", "\n", "tgt_val", "=", "(", "tgtD_obj", ">", "0", ")", "*", "(", "tgtH_obj", ">", "0", ")", "\n", "\n", "tgt_fy", "=", "fy_rep", "[", "tgt_val", "]", "\n", "tgtD_avg", "=", "tgtD_avg", "[", "tgt_val", "]", ".", "detach", "(", ")", "# d_avg.detach() to prevent increasing depth in the sky.", "\n", "# tgtD_avg = tgtD_avg[tgt_val]", "\n", "tgtD_obj", "=", "tgtD_obj", "[", "tgt_val", "]", "\n", "tgtH_obj", "=", "tgtH_obj", "[", "tgt_val", "]", "\n", "tgtD_app", "=", "(", "tgt_fy", "*", "height_prior", ")", "/", "tgtH_obj", "\n", "\n", "loss_tgt", "=", "torch", ".", "abs", "(", "(", "tgtD_obj", "-", "tgtD_app", ")", "/", "tgtD_avg", ")", ".", "sum", "(", ")", "/", "torch", ".", "abs", "(", "(", "tgtD_obj", "-", "tgtD_app", ")", "/", "tgtD_avg", ")", ".", "size", "(", "0", ")", "\n", "\n", "\n", "### ref-frame ###", "\n", "refD_rep", "=", "refD", ".", "repeat_interleave", "(", "mni", ",", "dim", "=", "0", ")", "\n", "refD_avg", "=", "refD_rep", ".", "mean", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "refM_rep", "=", "refM", "[", ":", ",", "1", ":", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "hh", ",", "ww", ")", "\n", "refD_obj", "=", "(", "refD_rep", "*", "refM_rep", ")", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "/", "refM_rep", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", ".", "clamp", "(", "min", "=", "1e-9", ")", "\n", "refM_idx", "=", "np", ".", "where", "(", "refM_rep", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "==", "1", ")", "\n", "refH_obj", "=", "torch", ".", "tensor", "(", "[", "refM_idx", "[", "2", "]", "[", "refM_idx", "[", "0", "]", "==", "obj", "]", ".", "max", "(", ")", "-", "refM_idx", "[", "2", "]", "[", "refM_idx", "[", "0", "]", "==", "obj", "]", ".", "min", "(", ")", "if", "(", "refM_idx", "[", "0", "]", "==", "obj", ")", ".", "sum", "(", ")", "!=", "0", "else", "0", "for", "obj", "in", "range", "(", "refM_rep", ".", "size", "(", "0", ")", ")", "]", ")", ".", "type_as", "(", "refD", ")", "\n", "\n", "ref_val", "=", "(", "refD_obj", ">", "0", ")", "*", "(", "refH_obj", ">", "0", ")", "\n", "\n", "ref_fy", "=", "fy_rep", "[", "ref_val", "]", "\n", "refD_avg", "=", "refD_avg", "[", "ref_val", "]", ".", "detach", "(", ")", "# d_avg.detach() to prevent increasing depth in the sky.", "\n", "# refD_avg = refD_avg[ref_val]", "\n", "refD_obj", "=", "refD_obj", "[", "ref_val", "]", "\n", "refH_obj", "=", "refH_obj", "[", "ref_val", "]", "\n", "refD_app", "=", "(", "ref_fy", "*", "height_prior", ")", "/", "refH_obj", "\n", "\n", "loss_ref", "=", "torch", ".", "abs", "(", "(", "refD_obj", "-", "refD_app", ")", "/", "refD_avg", ")", ".", "sum", "(", ")", "/", "torch", ".", "abs", "(", "(", "refD_obj", "-", "refD_app", ")", "/", "refD_avg", ")", ".", "size", "(", "0", ")", "\n", "\n", "loss", "+=", "1", "/", "2", "*", "(", "loss_tgt", "+", "loss_ref", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.compute_mof_consistency_loss": [[222, 306], ["tgt_mofs[].size", "torch.eye().reshape().repeat().type_as", "torch.eye().reshape().repeat().type_as", "torch.tensor().cuda", "torch.tensor().cuda", "enumerate", "zip", "rigid_warp.pose_mof2mat", "rigid_warp.pose_mof2mat", "tgt_mat[].reshape().permute", "ref_mat[].reshape().permute", "torch.matmul", "torch.matmul", "torch.mean().reshape", "torch.mean().reshape", "torch.mean().reshape", "torch.mean().reshape", "torch.mean().reshape", "torch.mean().reshape", "torch.mean().reshape.mean", "rigid_warp.flow_warp", "rigid_warp.pose_mof2mat", "r2t_mat[].reshape().permute().unsqueeze", "tgt_mat[].reshape().permute().unsqueeze", "torch.pow().sum().reshape", "torch.pow().sum().reshape", "torch.pow().sum().reshape", "torch.pow().sum().reshape", "torch.pow().sum().reshape", "torch.pow().sum().reshape", "loss_functions.mean_on_mask", "torch.eye().reshape().repeat", "torch.eye().reshape().repeat", "torch.tensor", "torch.tensor", "r2t_flow.detach", "torch.matmul", "torch.matmul", "tgt_mat[].reshape", "ref_mat[].reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "r2t_mat[].reshape().permute", "tgt_mat[].reshape().permute", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.eye().reshape", "torch.eye().reshape", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "r2t_mat[].reshape", "tgt_mat[].reshape", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.eye", "torch.eye"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_mof2mat", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_mof2mat", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.pose_mof2mat", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.mean_on_mask"], ["", "def", "compute_mof_consistency_loss", "(", "tgt_mofs", ",", "ref_mofs", ",", "r2t_flows", ",", "t2r_flows", ",", "r2t_diffs", ",", "t2r_diffs", ",", "r2t_vals", ",", "t2r_vals", ",", "alpha", "=", "10", ",", "thresh", "=", "0.1", ")", ":", "\n", "    ", "'''\n        Reference: Depth from Videos in the Wild (ICCV'19)\n        Args:\n            [DIRECTION]\n            tgt_mofs_dir[0]: ref[0] >> tgt\n            tgt_mofs_dir[1]:           tgt << ref[1]\n            [MAGNITUDE]\n            tgt_mofs_mag[0]: ref[0] >> tgt\n            tgt_mofs_mag[1]:           tgt << ref[1]\n    '''", "\n", "bs", ",", "_", ",", "hh", ",", "ww", "=", "tgt_mofs", "[", "0", "]", ".", "size", "(", ")", "\n", "eye", "=", "torch", ".", "eye", "(", "3", ")", ".", "reshape", "(", "1", ",", "1", ",", "3", ",", "3", ")", ".", "repeat", "(", "bs", ",", "hh", "*", "ww", ",", "1", ",", "1", ")", ".", "type_as", "(", "tgt_mofs", "[", "0", "]", ")", "\n", "\n", "loss", "=", "torch", ".", "tensor", "(", ".0", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "enum", ",", "(", "tgt_mof", ",", "ref_mof", ",", "r2t_flow", ",", "t2r_flow", ",", "r2t_diff", ",", "t2r_diff", ",", "r2t_val", ",", "t2r_val", ")", "in", "enumerate", "(", "zip", "(", "tgt_mofs", ",", "ref_mofs", ",", "r2t_flows", ",", "t2r_flows", ",", "r2t_diffs", ",", "t2r_diffs", ",", "r2t_vals", ",", "t2r_vals", ")", ")", ":", "\n", "\n", "        ", "tgt_mat", "=", "pose_mof2mat", "(", "tgt_mof", ")", "\n", "ref_mat", "=", "pose_mof2mat", "(", "ref_mof", ")", "\n", "\n", "### rotation error ###", "\n", "tgt_rot", "=", "tgt_mat", "[", ":", ",", ":", ",", ":", "3", "]", ".", "reshape", "(", "bs", ",", "3", ",", "3", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "ref_rot", "=", "ref_mat", "[", ":", ",", ":", ",", ":", "3", "]", ".", "reshape", "(", "bs", ",", "3", ",", "3", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "rot_unit", "=", "torch", ".", "matmul", "(", "tgt_rot", ",", "ref_rot", ")", "\n", "\n", "rot_err", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "rot_unit", "-", "eye", ",", "2", ")", ",", "dim", "=", "[", "2", ",", "3", "]", ")", ".", "reshape", "(", "bs", ",", "1", ",", "hh", ",", "ww", ")", "\n", "rot1_scale", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "tgt_rot", "-", "eye", ",", "2", ")", ",", "dim", "=", "[", "2", ",", "3", "]", ")", ".", "reshape", "(", "bs", ",", "1", ",", "hh", ",", "ww", ")", "\n", "rot2_scale", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "ref_rot", "-", "eye", ",", "2", ")", ",", "dim", "=", "[", "2", ",", "3", "]", ")", ".", "reshape", "(", "bs", ",", "1", ",", "hh", ",", "ww", ")", "\n", "rot_err", "/=", "(", "1e-24", "+", "rot1_scale", "+", "rot2_scale", ")", "\n", "cost_r", "=", "rot_err", ".", "mean", "(", ")", "\n", "# pdb.set_trace()", "\n", "\n", "### translation error ###", "\n", "r2t_mof", ",", "_", "=", "flow_warp", "(", "ref_mof", ",", "r2t_flow", ".", "detach", "(", ")", ")", "# to be compared with \"tgt_mof\"", "\n", "r2t_mask", "=", "(", "(", "1", "-", "(", "r2t_diff", ">", "thresh", ")", ".", "float", "(", ")", ")", "*", "r2t_val", ")", ".", "detach", "(", ")", "\n", "r2t_mat", "=", "pose_mof2mat", "(", "r2t_mof", ")", "\n", "\n", "r2t_trans", "=", "r2t_mat", "[", ":", ",", ":", ",", "-", "1", "]", ".", "reshape", "(", "bs", ",", "3", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "tgt_trans", "=", "tgt_mat", "[", ":", ",", ":", ",", "-", "1", "]", ".", "reshape", "(", "bs", ",", "3", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "trans_zero", "=", "torch", ".", "matmul", "(", "tgt_rot", ",", "r2t_trans", ")", "+", "tgt_trans", "\n", "trans_zero_norm", "=", "torch", ".", "pow", "(", "trans_zero", ",", "2", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "reshape", "(", "bs", ",", "1", ",", "hh", ",", "ww", ")", "\n", "r2t_trans_norm", "=", "torch", ".", "pow", "(", "r2t_trans", ",", "2", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "reshape", "(", "bs", ",", "1", ",", "hh", ",", "ww", ")", "\n", "tgt_trans_norm", "=", "torch", ".", "pow", "(", "tgt_trans", ",", "2", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "reshape", "(", "bs", ",", "1", ",", "hh", ",", "ww", ")", "\n", "\n", "trans_err", "=", "trans_zero_norm", "/", "(", "1e-24", "+", "r2t_trans_norm", "+", "tgt_trans_norm", ")", "\n", "cost_t", "=", "mean_on_mask", "(", "trans_err", ",", "r2t_mask", ")", "\n", "\n", "loss", "+=", "cost_r", "+", "alpha", "*", "cost_t", "\n", "# pdb.set_trace()", "\n", "\n", "# pdb.set_trace()", "\n", "", "'''\n        r2t_mof, r2t_val0 = flow_warp(ref_mof, r2t_flow)\n        t2r_mof, t2r_val0 = flow_warp(tgt_mof, t2r_flow)\n        tgt_err = (tgt_mof + r2t_mof).abs()\n        ref_err = (ref_mof + t2r_mof).abs()\n        bb = 0\n        vm = 0.02\n        plt.close('all'); ea1 = 7; ea2 = 4; ii = 1;\n        fig = plt.figure(99, figsize=(21, 12))   # figsize=(22, 13)\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(tgt_mof[bb,2].detach().cpu(), vmax=+vm, vmin=-vm); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"tgt_mof\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(ref_mof[bb,2].detach().cpu(), vmax=+vm, vmin=-vm); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"ref_mof\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(r2t_mof[bb,2].detach().cpu(), vmax=+vm, vmin=-vm); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"r2t_mof\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(t2r_mof[bb,2].detach().cpu(), vmax=+vm, vmin=-vm); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"t2r_mof\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(tgt_err[bb,2].detach().cpu(), vmax=+vm, vmin=-vm); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"tgt_err\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(ref_err[bb,2].detach().cpu(), vmax=+vm, vmin=-vm); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"ref_err\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(r2t_diff[bb,0].detach().cpu(), vmax=1, vmin=0); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"r2t_diff\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(t2r_diff[bb,0].detach().cpu(), vmax=1, vmin=0); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"t2r_diff\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(r2t_val[bb,0].detach().cpu(), vmax=1, vmin=0); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"r2t_val\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(r2t_val0[bb,0].detach().cpu(), vmax=1, vmin=0); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"r2t_val0\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(t2r_val[bb,0].detach().cpu(), vmax=1, vmin=0); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"t2r_val\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(t2r_val0[bb,0].detach().cpu(), vmax=1, vmin=0); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"t2r_val0\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(fwd_mask[bb,0].detach().cpu(), vmax=1, vmin=0); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"fwd_mask\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(bwd_mask[bb,0].detach().cpu(), vmax=1, vmin=0); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"bwd_mask\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(fwd_val[bb,0].detach().cpu(), vmax=1, vmin=0); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"fwd_val\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(r2t_mask[bb,0].detach().cpu(), vmax=1, vmin=0); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"r2t_mask\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(rot_err[bb,0].detach().cpu() ); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"rot_err\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        fig.add_subplot(ea1,ea2,ii); ii += 1; plt.imshow(trans_err[bb,0].detach().cpu(), vmax=0.1, vmin=0 ); plt.colorbar(); plt.grid(linestyle=':', linewidth=0.4); plt.text(10, -14, \"trans_err\", fontsize=7, bbox=dict(facecolor='None', edgecolor='None'));\n        plt.tight_layout(); plt.ion(); plt.show()\n\n    '''", "\n", "return", "loss", "/", "(", "enum", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.mean_on_mask": [[312, 321], ["valid_mask.expand_as", "valid_mask.expand_as.sum", "torch.tensor().cuda", "torch.tensor().cuda", "valid_mask.expand_as.sum", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "mean_on_mask", "(", "diff", ",", "valid_mask", ")", ":", "\n", "    ", "'''\n        compute mean value given a binary mask\n    '''", "\n", "mask", "=", "valid_mask", ".", "expand_as", "(", "diff", ")", "\n", "if", "mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", ".0", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "diff", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.loss_functions.compute_errors": [[324, 363], ["torch.no_grad", "torch.no_grad", "gt.size", "zip", "int", "int", "int", "int", "current_pred[].clamp", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "gt.size", "gt.size", "gt.size", "gt.size", "torch.median", "torch.median", "torch.median", "torch.median", "torch.abs", "torch.abs", "metric.item"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "compute_errors", "(", "gt", ",", "pred", ",", "med_scale", "=", "None", ")", ":", "\n", "    ", "abs_diff", ",", "abs_rel", ",", "sq_rel", ",", "a1", ",", "a2", ",", "a3", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "batch_size", "=", "gt", ".", "size", "(", "0", ")", "\n", "\n", "'''\n        crop used by Garg ECCV16 to reprocude Eigen NIPS14 results\n        construct a mask of False values, with the same size as target\n        and then set to True values inside the crop\n    '''", "\n", "crop_mask", "=", "gt", "[", "0", "]", "!=", "gt", "[", "0", "]", "\n", "y1", ",", "y2", "=", "int", "(", "0.40810811", "*", "gt", ".", "size", "(", "1", ")", ")", ",", "int", "(", "0.99189189", "*", "gt", ".", "size", "(", "1", ")", ")", "\n", "x1", ",", "x2", "=", "int", "(", "0.03594771", "*", "gt", ".", "size", "(", "2", ")", ")", ",", "int", "(", "0.96405229", "*", "gt", ".", "size", "(", "2", ")", ")", "\n", "crop_mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "1", "\n", "max_depth", "=", "80", "\n", "\n", "for", "current_gt", ",", "current_pred", "in", "zip", "(", "gt", ",", "pred", ")", ":", "\n", "        ", "valid", "=", "(", "current_gt", ">", "0", ")", "&", "(", "current_gt", "<", "max_depth", ")", "\n", "valid", "=", "valid", "&", "crop_mask", "\n", "\n", "valid_gt", "=", "current_gt", "[", "valid", "]", "\n", "valid_pred", "=", "current_pred", "[", "valid", "]", ".", "clamp", "(", "1e-3", ",", "max_depth", ")", "\n", "\n", "if", "med_scale", "is", "None", ":", "\n", "            ", "med_scale", "=", "torch", ".", "median", "(", "valid_gt", ")", "/", "torch", ".", "median", "(", "valid_pred", ")", "\n", "\n", "", "valid_pred", "=", "valid_pred", "*", "med_scale", "\n", "\n", "thresh", "=", "torch", ".", "max", "(", "(", "valid_gt", "/", "valid_pred", ")", ",", "(", "valid_pred", "/", "valid_gt", ")", ")", "\n", "a1", "+=", "(", "thresh", "<", "1.25", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "a2", "+=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "a3", "+=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "abs_diff", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "valid_gt", "-", "valid_pred", ")", ")", "\n", "abs_rel", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "valid_gt", "-", "valid_pred", ")", "/", "valid_gt", ")", "\n", "\n", "sq_rel", "+=", "torch", ".", "mean", "(", "(", "(", "valid_gt", "-", "valid_pred", ")", "**", "2", ")", "/", "valid_gt", ")", "\n", "\n", "", "return", "[", "metric", ".", "item", "(", ")", "/", "batch_size", "for", "metric", "in", "[", "abs_diff", ",", "abs_rel", ",", "sq_rel", ",", "a1", ",", "a2", ",", "a3", "]", "]", ",", "med_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.utils.viz_flow": [[12, 56], ["utils.makecolorwheel", "numpy.sqrt", "fk.astype", "numpy.zeros", "range", "np.zeros.astype", "print", "numpy.log", "print", "numpy.arctan2", "numpy.floor().astype", "print", "numpy.max", "numpy.max", "numpy.floor", "numpy.max"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.utils.makecolorwheel"], ["def", "viz_flow", "(", "u", ",", "v", ",", "logscale", "=", "True", ",", "scaledown", "=", "6", ",", "output", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    topleft is zero, u is horiz, v is vertical\n    red is 3 o'clock, yellow is 6, light blue is 9, blue/purple is 12\n    \"\"\"", "\n", "colorwheel", "=", "makecolorwheel", "(", ")", "\n", "ncols", "=", "colorwheel", ".", "shape", "[", "0", "]", "\n", "\n", "radius", "=", "np", ".", "sqrt", "(", "u", "**", "2", "+", "v", "**", "2", ")", "\n", "if", "output", ":", "\n", "        ", "print", "(", "\"Maximum flow magnitude: %04f\"", "%", "np", ".", "max", "(", "radius", ")", ")", "\n", "", "if", "logscale", ":", "\n", "        ", "radius", "=", "np", ".", "log", "(", "radius", "+", "1", ")", "\n", "if", "output", ":", "\n", "            ", "print", "(", "\"Maximum flow magnitude (after log): %0.4f\"", "%", "np", ".", "max", "(", "radius", ")", ")", "\n", "", "", "radius", "=", "radius", "/", "scaledown", "\n", "if", "output", ":", "\n", "        ", "print", "(", "\"Maximum flow magnitude (after scaledown): %0.4f\"", "%", "np", ".", "max", "(", "radius", ")", ")", "\n", "", "rot", "=", "np", ".", "arctan2", "(", "-", "v", ",", "-", "u", ")", "/", "np", ".", "pi", "\n", "\n", "fk", "=", "(", "rot", "+", "1", ")", "/", "2", "*", "(", "ncols", "-", "1", ")", "# -1~1 maped to 0~ncols", "\n", "k0", "=", "fk", ".", "astype", "(", "np", ".", "uint8", ")", "# 0, 1, 2, ..., ncols", "\n", "\n", "k1", "=", "k0", "+", "1", "\n", "k1", "[", "k1", "==", "ncols", "]", "=", "0", "\n", "\n", "f", "=", "fk", "-", "k0", "\n", "\n", "ncolors", "=", "colorwheel", ".", "shape", "[", "1", "]", "\n", "img", "=", "np", ".", "zeros", "(", "u", ".", "shape", "+", "(", "ncolors", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "ncolors", ")", ":", "\n", "        ", "tmp", "=", "colorwheel", "[", ":", ",", "i", "]", "\n", "col0", "=", "tmp", "[", "k0", "]", "\n", "col1", "=", "tmp", "[", "k1", "]", "\n", "col", "=", "(", "1", "-", "f", ")", "*", "col0", "+", "f", "*", "col1", "\n", "\n", "idx", "=", "radius", "<=", "1", "\n", "# increase saturation with radius", "\n", "col", "[", "idx", "]", "=", "1", "-", "radius", "[", "idx", "]", "*", "(", "1", "-", "col", "[", "idx", "]", ")", "\n", "# out of range    ", "\n", "col", "[", "~", "idx", "]", "*=", "0.75", "\n", "img", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "floor", "(", "255", "*", "col", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "return", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.utils.makecolorwheel": [[58, 102], ["numpy.zeros", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "makecolorwheel", "(", ")", ":", "\n", "# Create a colorwheel for visualization", "\n", "    ", "RY", "=", "15", "\n", "YG", "=", "6", "\n", "GC", "=", "4", "\n", "CB", "=", "11", "\n", "BM", "=", "13", "\n", "MR", "=", "6", "\n", "\n", "ncols", "=", "RY", "+", "YG", "+", "GC", "+", "CB", "+", "BM", "+", "MR", "\n", "\n", "colorwheel", "=", "np", ".", "zeros", "(", "(", "ncols", ",", "3", ")", ")", "\n", "\n", "col", "=", "0", "\n", "# RY", "\n", "colorwheel", "[", "0", ":", "RY", ",", "0", "]", "=", "1", "\n", "colorwheel", "[", "0", ":", "RY", ",", "1", "]", "=", "np", ".", "arange", "(", "0", ",", "1", ",", "1.", "/", "RY", ")", "\n", "col", "+=", "RY", "\n", "\n", "# YG", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "0", "]", "=", "np", ".", "arange", "(", "1", ",", "0", ",", "-", "1.", "/", "YG", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "1", "]", "=", "1", "\n", "col", "+=", "YG", "\n", "\n", "# GC", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "1", "]", "=", "1", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "2", "]", "=", "np", ".", "arange", "(", "0", ",", "1", ",", "1.", "/", "GC", ")", "\n", "col", "+=", "GC", "\n", "\n", "# CB", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "1", "]", "=", "np", ".", "arange", "(", "1", ",", "0", ",", "-", "1.", "/", "CB", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "2", "]", "=", "1", "\n", "col", "+=", "CB", "\n", "\n", "# BM", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "2", "]", "=", "1", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "0", "]", "=", "np", ".", "arange", "(", "0", ",", "1", ",", "1.", "/", "BM", ")", "\n", "col", "+=", "BM", "\n", "\n", "# MR", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "2", "]", "=", "np", ".", "arange", "(", "1", ",", "0", ",", "-", "1.", "/", "MR", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "0", "]", "=", "1", "\n", "\n", "return", "colorwheel", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.utils.high_res_colormap": [[104, 113], ["numpy.linspace", "low_res_cmap", "numpy.linspace", "numpy.stack", "matplotlib.colors.ListedColormap", "numpy.interp", "range"], "function", ["None"], ["", "def", "high_res_colormap", "(", "low_res_cmap", ",", "resolution", "=", "1000", ",", "max_value", "=", "1", ")", ":", "\n", "# Construct the list colormap, with interpolated values for higer resolution", "\n", "# For a linear segmented colormap, you can just specify the number of point in", "\n", "# cm.get_cmap(name, lutsize) with the parameter lutsize", "\n", "    ", "x", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "low_res_cmap", ".", "N", ")", "\n", "low_res", "=", "low_res_cmap", "(", "x", ")", "\n", "new_x", "=", "np", ".", "linspace", "(", "0", ",", "max_value", ",", "resolution", ")", "\n", "high_res", "=", "np", ".", "stack", "(", "[", "np", ".", "interp", "(", "new_x", ",", "x", ",", "low_res", "[", ":", ",", "i", "]", ")", "for", "i", "in", "range", "(", "low_res", ".", "shape", "[", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "return", "ListedColormap", "(", "high_res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.utils.opencv_rainbow": [[115, 126], ["matplotlib.colors.LinearSegmentedColormap.from_list"], "function", ["None"], ["", "def", "opencv_rainbow", "(", "resolution", "=", "1000", ")", ":", "\n", "# Construct the opencv equivalent of Rainbow", "\n", "    ", "opencv_rainbow_data", "=", "(", "\n", "(", "0.000", ",", "(", "1.00", ",", "0.00", ",", "0.00", ")", ")", ",", "\n", "(", "0.400", ",", "(", "1.00", ",", "1.00", ",", "0.00", ")", ")", ",", "\n", "(", "0.600", ",", "(", "0.00", ",", "1.00", ",", "0.00", ")", ")", ",", "\n", "(", "0.800", ",", "(", "0.00", ",", "0.00", ",", "1.00", ")", ")", ",", "\n", "(", "1.000", ",", "(", "0.60", ",", "0.00", ",", "1.00", ")", ")", "\n", ")", "\n", "\n", "return", "LinearSegmentedColormap", ".", "from_list", "(", "'opencv_rainbow'", ",", "opencv_rainbow_data", ",", "resolution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.utils.tensor2array": [[133, 146], ["tensor.detach().cpu.detach().cpu", "tensor.detach().cpu.max().item", "array.transpose.transpose", "tensor.detach().cpu.detach", "tensor.detach().cpu.ndimension", "tensor.detach().cpu.size", "tensor.detach().cpu.squeeze().numpy", "tensor.detach().cpu.ndimension", "tensor.detach().cpu.max", "tensor.detach().cpu.size", "tensor.detach().cpu.squeeze", "tensor.detach().cpu.numpy"], "function", ["None"], ["def", "tensor2array", "(", "tensor", ",", "max_value", "=", "None", ",", "colormap", "=", "'rainbow'", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "if", "max_value", "is", "None", ":", "\n", "        ", "max_value", "=", "tensor", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "", "if", "tensor", ".", "ndimension", "(", ")", "==", "2", "or", "tensor", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "        ", "norm_array", "=", "tensor", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "/", "max_value", "\n", "array", "=", "COLORMAPS", "[", "colormap", "]", "(", "norm_array", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "array", "=", "array", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "elif", "tensor", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "        ", "assert", "(", "tensor", ".", "size", "(", "0", ")", "==", "3", ")", "\n", "array", "=", "0.5", "+", "tensor", ".", "numpy", "(", ")", "*", "0.5", "\n", "", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.utils.save_checkpoint": [[148, 161], ["zip", "torch.save", "zip", "torch.save", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "epoch", ",", "save_freq", ",", "save_path", ",", "dispnet_state", ",", "ego_pose_state", ",", "obj_pose_state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "file_prefixes", "=", "[", "'dispnet'", ",", "'ego_pose'", ",", "'obj_pose'", "]", "\n", "states", "=", "[", "dispnet_state", ",", "ego_pose_state", ",", "obj_pose_state", "]", "\n", "for", "(", "prefix", ",", "state", ")", "in", "zip", "(", "file_prefixes", ",", "states", ")", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "save_path", "/", "'{}_{}'", ".", "format", "(", "prefix", ",", "filename", ")", ")", "\n", "\n", "", "if", "epoch", "%", "save_freq", "==", "0", ":", "\n", "        ", "for", "(", "prefix", ",", "state", ")", "in", "zip", "(", "file_prefixes", ",", "states", ")", ":", "\n", "            ", "torch", ".", "save", "(", "state", ",", "save_path", "/", "'{}_{}_{}'", ".", "format", "(", "prefix", ",", "epoch", ",", "filename", ")", ")", "\n", "\n", "", "", "if", "is_best", ":", "\n", "        ", "for", "prefix", "in", "file_prefixes", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "save_path", "/", "'{}_{}'", ".", "format", "(", "prefix", ",", "filename", ")", ",", "save_path", "/", "'{}_model_best.pth.tar'", ".", "format", "(", "prefix", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.SequenceFolder.__init__": [[147, 161], ["numpy.random.seed", "random.seed", "path.Path", "sequence_folders.SequenceFolder.crawl_folders", "int", "math.floor", "open", "len"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.validation_folders.crawl_folders"], ["def", "__init__", "(", "self", ",", "root", ",", "train", ",", "seed", "=", "None", ",", "shuffle", "=", "True", ",", "max_num_instances", "=", "20", ",", "sequence_length", "=", "3", ",", "transform", "=", "None", ",", "proportion", "=", "1", ",", "begin_idx", "=", "None", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "self", ".", "root", "=", "Path", "(", "root", ")", "\n", "scene_list_path", "=", "self", ".", "root", "/", "'train.txt'", "if", "train", "else", "self", ".", "root", "/", "'val.txt'", "\n", "self", ".", "scenes", "=", "[", "self", ".", "root", "/", "'image'", "/", "folder", "[", ":", "-", "1", "]", "for", "folder", "in", "open", "(", "scene_list_path", ")", "]", "\n", "self", ".", "is_shuffle", "=", "shuffle", "\n", "self", ".", "crawl_folders", "(", "sequence_length", ")", "\n", "self", ".", "mni", "=", "max_num_instances", "\n", "self", ".", "transform", "=", "transform", "\n", "split_index", "=", "int", "(", "math", ".", "floor", "(", "len", "(", "self", ".", "samples", ")", "*", "proportion", ")", ")", "\n", "self", ".", "samples", "=", "self", ".", "samples", "[", ":", "split_index", "]", "\n", "if", "begin_idx", ":", "\n", "            ", "self", ".", "samples", "=", "self", ".", "samples", "[", "begin_idx", ":", "]", "\n", "# pdb.set_trace()", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.SequenceFolder.crawl_folders": [[164, 196], ["list", "list.pop", "range", "path.Path", "path.Path", "path.Path", "numpy.genfromtxt().astype().reshape", "sorted", "sorted", "sorted", "sorted", "range", "random.shuffle", "scene.files", "path.Path.files", "path.Path.files", "path.Path.files", "len", "range", "sequence_set.append", "numpy.genfromtxt().astype", "len", "sample[].append", "sample[].append", "sample[].append", "sample[].append", "scene.split", "scene.split", "scene.split", "path.Path.dirname", "path.Path.dirname", "path.Path.dirname", "numpy.genfromtxt"], "methods", ["None"], ["", "", "def", "crawl_folders", "(", "self", ",", "sequence_length", ")", ":", "\n", "        ", "sequence_set", "=", "[", "]", "\n", "demi_length", "=", "(", "sequence_length", "-", "1", ")", "//", "2", "\n", "shifts", "=", "list", "(", "range", "(", "-", "demi_length", ",", "demi_length", "+", "1", ")", ")", "\n", "shifts", ".", "pop", "(", "demi_length", ")", "\n", "for", "scene", "in", "self", ".", "scenes", ":", "\n", "            ", "sceneff", "=", "Path", "(", "Path", ".", "dirname", "(", "scene", ")", ".", "parent", "+", "'/flow_f/'", "+", "scene", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "scenefb", "=", "Path", "(", "Path", ".", "dirname", "(", "scene", ")", ".", "parent", "+", "'/flow_b/'", "+", "scene", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "scenei", "=", "Path", "(", "Path", ".", "dirname", "(", "scene", ")", ".", "parent", "+", "'/segmentation/'", "+", "scene", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "intrinsics", "=", "np", ".", "genfromtxt", "(", "scene", "/", "'cam.txt'", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "(", "3", ",", "3", ")", ")", "\n", "\n", "imgs", "=", "sorted", "(", "scene", ".", "files", "(", "'*.jpg'", ")", ")", "\n", "flof", "=", "sorted", "(", "sceneff", ".", "files", "(", "'*.flo'", ")", ")", "# 00: src, 01: tgt", "\n", "flob", "=", "sorted", "(", "scenefb", ".", "files", "(", "'*.flo'", ")", ")", "# 00: tgt, 01: src", "\n", "segm", "=", "sorted", "(", "scenei", ".", "files", "(", "'*.npy'", ")", ")", "\n", "\n", "if", "len", "(", "imgs", ")", "<", "sequence_length", ":", "\n", "                ", "continue", "\n", "", "for", "i", "in", "range", "(", "demi_length", ",", "len", "(", "imgs", ")", "-", "demi_length", ")", ":", "\n", "                ", "sample", "=", "{", "'intrinsics'", ":", "intrinsics", ",", "'tgt'", ":", "imgs", "[", "i", "]", ",", "'ref_imgs'", ":", "[", "]", ",", "\n", "'flow_fs'", ":", "[", "]", ",", "'flow_bs'", ":", "[", "]", ",", "'tgt_seg'", ":", "segm", "[", "i", "]", ",", "'ref_segs'", ":", "[", "]", "}", "# ('tgt_insts':[], 'ref_insts':[]) will be processed when getitem() is called", "\n", "for", "j", "in", "shifts", ":", "\n", "                    ", "sample", "[", "'ref_imgs'", "]", ".", "append", "(", "imgs", "[", "i", "+", "j", "]", ")", "\n", "sample", "[", "'ref_segs'", "]", ".", "append", "(", "segm", "[", "i", "+", "j", "]", ")", "\n", "", "for", "j", "in", "range", "(", "-", "demi_length", ",", "1", ")", ":", "\n", "                    ", "sample", "[", "'flow_fs'", "]", ".", "append", "(", "flof", "[", "i", "+", "j", "]", ")", "\n", "sample", "[", "'flow_bs'", "]", ".", "append", "(", "flob", "[", "i", "+", "j", "]", ")", "\n", "", "sequence_set", ".", "append", "(", "sample", ")", "\n", "# pdb.set_trace()", "\n", "", "", "if", "self", ".", "is_shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "sequence_set", ")", "\n", "", "self", ".", "samples", "=", "sequence_set", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.SequenceFolder.__getitem__": [[198, 302], ["sequence_folders.load_as_float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "sequence_folders.load_as_float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "sequence_folders.load_seg_as_float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "sequence_folders.find_noc_masks", "rigid_warp.flow_warp", "rigid_warp.flow_warp", "sequence_folders.inst_iou", "sequence_folders.inst_iou", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "range", "sequence_folders.SequenceFolder.transform", "numpy.copy", "len", "sequence_folders.recursive_check_nonzero_inst", "pdb.set_trace", "pdb.set_trace", "pdb.set_trace", "pdb.set_trace", "[].mean", "[].mean().mean().nonzero().size", "pdb.set_trace", "[].mean", "[].mean().mean().nonzero().size", "pdb.set_trace", "[].mean", "[].mean().mean().nonzero().size", "pdb.set_trace", "[].mean", "[].mean().mean().nonzero().size", "pdb.set_trace", "numpy.linalg.inv", "sequence_folders.load_flo_as_float", "sequence_folders.load_flo_as_float", "sequence_folders.load_seg_as_float", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "zip", "flow_fs[].unsqueeze", "flow_bs[].unsqueeze", "ref_segs[].unsqueeze", "torch.from_numpy.unsqueeze", "torch.from_numpy.unsqueeze", "torch.from_numpy.unsqueeze", "torch.from_numpy.unsqueeze", "torch.from_numpy.unsqueeze", "torch.from_numpy.unsqueeze", "torch.from_numpy.unsqueeze", "torch.from_numpy.unsqueeze", "ref_segs[].unsqueeze", "flow_fs[].unsqueeze", "flow_bs[].unsqueeze", "pdb.set_trace", "pdb.set_trace", "tgt_insts.append", "ref_insts.append", "tgt_insts.append", "ref_insts.append", "numpy.copy", "[].mean", "[].mean", "[].mean", "[].mean", "[].mean", "[].mean", "[].mean", "[].mean", "torch.from_numpy.sum().argsort", "torch.from_numpy.sum().argsort", "torch.from_numpy.sum().argsort", "torch.from_numpy.sum().argsort", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "len", "seg0_re[].mean", "seg0_re[].mean", "seg1_re[].mean", "seg1_re[].mean", "len", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "torch.zeros.detach().cpu().numpy().transpose", "int", "int", "[].mean().mean().nonzero", "[].mean().mean().nonzero", "[].mean().mean().nonzero", "[].mean().mean().nonzero", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ref_seg.sum().argsort", "torch.from_numpy.sum", "torch.from_numpy.sum", "torch.from_numpy.sum", "torch.from_numpy.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "[].mean().mean", "[].mean().mean", "[].mean().mean", "[].mean().mean", "ref_seg.sum", "len", "len", "int", "int", "int", "int", "int", "int", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "[].mean", "[].mean", "[].mean", "[].mean", "[].mean", "[].mean", "[].mean", "[].mean", "seg0_re[].mean", "seg1_re[].mean", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.validation_folders.load_as_float", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.validation_folders.load_as_float", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.load_seg_as_float", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.find_noc_masks", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.inst_iou", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.inst_iou", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.recursive_check_nonzero_inst", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.load_flo_as_float", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.load_flo_as_float", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.load_seg_as_float"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "self", ".", "samples", "[", "index", "]", "\n", "tgt_img", "=", "load_as_float", "(", "sample", "[", "'tgt'", "]", ")", "\n", "ref_imgs", "=", "[", "load_as_float", "(", "ref_img", ")", "for", "ref_img", "in", "sample", "[", "'ref_imgs'", "]", "]", "\n", "\n", "flow_fs", "=", "[", "torch", ".", "from_numpy", "(", "load_flo_as_float", "(", "flow_f", ")", ")", "for", "flow_f", "in", "sample", "[", "'flow_fs'", "]", "]", "\n", "flow_bs", "=", "[", "torch", ".", "from_numpy", "(", "load_flo_as_float", "(", "flow_b", ")", ")", "for", "flow_b", "in", "sample", "[", "'flow_bs'", "]", "]", "\n", "\n", "tgt_seg", "=", "torch", ".", "from_numpy", "(", "load_seg_as_float", "(", "sample", "[", "'tgt_seg'", "]", ")", ")", "\n", "ref_segs", "=", "[", "torch", ".", "from_numpy", "(", "load_seg_as_float", "(", "ref_seg", ")", ")", "for", "ref_seg", "in", "sample", "[", "'ref_segs'", "]", "]", "\n", "\n", "tgt_sort", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "1", ")", ".", "long", "(", ")", ",", "tgt_seg", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ")", ")", ".", "argsort", "(", "descending", "=", "True", ")", "[", ":", "-", "1", "]", "]", ",", "dim", "=", "0", ")", "\n", "ref_sorts", "=", "[", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "1", ")", ".", "long", "(", ")", ",", "ref_seg", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ")", ")", ".", "argsort", "(", "descending", "=", "True", ")", "[", ":", "-", "1", "]", "]", ",", "dim", "=", "0", ")", "for", "ref_seg", "in", "ref_segs", "]", "\n", "tgt_seg", "=", "tgt_seg", "[", "tgt_sort", "]", "\n", "ref_segs", "=", "[", "ref_seg", "[", "ref_sort", "]", "for", "ref_seg", ",", "ref_sort", "in", "zip", "(", "ref_segs", ",", "ref_sorts", ")", "]", "\n", "\n", "tgt_insts", "=", "[", "]", "\n", "ref_insts", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "ref_imgs", ")", ")", ":", "\n", "            ", "noc_f", ",", "noc_b", "=", "find_noc_masks", "(", "flow_fs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "flow_bs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "if", "i", "<", "len", "(", "ref_imgs", ")", "/", "2", ":", "# first half            ", "\n", "                ", "seg0", "=", "ref_segs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "\n", "seg1", "=", "tgt_seg", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "# second half", "\n", "                ", "seg0", "=", "tgt_seg", ".", "unsqueeze", "(", "0", ")", "\n", "seg1", "=", "ref_segs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "seg0w", ",", "_", "=", "flow_warp", "(", "seg1", ",", "flow_fs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "seg1w", ",", "_", "=", "flow_warp", "(", "seg0", ",", "flow_bs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "n_inst0", "=", "seg0", ".", "shape", "[", "1", "]", "\n", "n_inst1", "=", "seg1", ".", "shape", "[", "1", "]", "\n", "\n", "### Warp seg0 to seg1. Find IoU between seg1w and seg1. Find the maximum corresponded instance in seg1.", "\n", "iou_01", ",", "ch_01", "=", "inst_iou", "(", "seg1w", ",", "seg1", ",", "valid_mask", "=", "noc_b", ")", "\n", "iou_10", ",", "ch_10", "=", "inst_iou", "(", "seg0w", ",", "seg0", ",", "valid_mask", "=", "noc_f", ")", "\n", "\n", "seg0_re", "=", "torch", ".", "zeros", "(", "self", ".", "mni", "+", "1", ",", "seg0", ".", "shape", "[", "2", "]", ",", "seg0", ".", "shape", "[", "3", "]", ")", "\n", "seg1_re", "=", "torch", ".", "zeros", "(", "self", ".", "mni", "+", "1", ",", "seg1", ".", "shape", "[", "2", "]", ",", "seg1", ".", "shape", "[", "3", "]", ")", "\n", "non_overlap_0", "=", "torch", ".", "ones", "(", "[", "seg0", ".", "shape", "[", "2", "]", ",", "seg0", ".", "shape", "[", "3", "]", "]", ")", "\n", "non_overlap_1", "=", "torch", ".", "ones", "(", "[", "seg0", ".", "shape", "[", "2", "]", ",", "seg0", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "num_match", "=", "0", "\n", "for", "ch", "in", "range", "(", "n_inst0", ")", ":", "\n", "                ", "condition1", "=", "(", "ch", "==", "ch_10", "[", "ch_01", "[", "ch", "]", "]", ")", "and", "(", "iou_01", "[", "ch", "]", ">", "0.5", ")", "and", "(", "iou_10", "[", "ch_01", "[", "ch", "]", "]", ">", "0.5", ")", "\n", "condition2", "=", "(", "(", "seg0", "[", "0", ",", "ch", "]", "*", "non_overlap_0", ")", ".", "max", "(", ")", ">", "0", ")", "and", "(", "(", "seg1", "[", "0", ",", "ch_01", "[", "ch", "]", "]", "*", "non_overlap_1", ")", ".", "max", "(", ")", ">", "0", ")", "\n", "if", "condition1", "and", "condition2", "and", "(", "num_match", "<", "self", ".", "mni", ")", ":", "# matching success!", "\n", "                    ", "num_match", "+=", "1", "\n", "seg0_re", "[", "num_match", "]", "=", "seg0", "[", "0", ",", "ch", "]", "*", "non_overlap_0", "\n", "seg1_re", "[", "num_match", "]", "=", "seg1", "[", "0", ",", "ch_01", "[", "ch", "]", "]", "*", "non_overlap_1", "\n", "non_overlap_0", "=", "non_overlap_0", "*", "(", "1", "-", "seg0_re", "[", "num_match", "]", ")", "\n", "non_overlap_1", "=", "non_overlap_1", "*", "(", "1", "-", "seg1_re", "[", "num_match", "]", ")", "\n", "", "", "seg0_re", "[", "0", "]", "=", "num_match", "\n", "seg1_re", "[", "0", "]", "=", "num_match", "\n", "# pdb.set_trace()", "\n", "\n", "if", "seg0_re", "[", "0", "]", ".", "mean", "(", ")", "!=", "0", "and", "seg0_re", "[", "int", "(", "seg0_re", "[", "0", "]", ".", "mean", "(", ")", ")", "]", ".", "mean", "(", ")", "==", "0", ":", "pdb", ".", "set_trace", "(", ")", "\n", "if", "seg1_re", "[", "0", "]", ".", "mean", "(", ")", "!=", "0", "and", "seg1_re", "[", "int", "(", "seg1_re", "[", "0", "]", ".", "mean", "(", ")", ")", "]", ".", "mean", "(", ")", "==", "0", ":", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "if", "i", "<", "len", "(", "ref_imgs", ")", "/", "2", ":", "# first half", "\n", "                ", "tgt_insts", ".", "append", "(", "seg1_re", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "ref_insts", ".", "append", "(", "seg0_re", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "else", ":", "# second half", "\n", "                ", "tgt_insts", ".", "append", "(", "seg0_re", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "ref_insts", ".", "append", "(", "seg1_re", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "# pdb.set_trace()", "\n", "", "", "'''\n        plt.close('all')\n        plt.figure(1), plt.imshow(tgt_insts[0].sum(dim=0)), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar(), plt.ion(), plt.show()\n        plt.figure(2), plt.imshow(tgt_insts[1].sum(dim=0)), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar(), plt.ion(), plt.show()\n        plt.figure(3), plt.imshow(ref_insts[0].sum(dim=0)), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar(), plt.ion(), plt.show()\n        plt.figure(4), plt.imshow(ref_insts[1].sum(dim=0)), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar(), plt.ion(), plt.show()\n        \n        '''", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "imgs", ",", "segms", ",", "intrinsics", "=", "self", ".", "transform", "(", "[", "tgt_img", "]", "+", "ref_imgs", ",", "tgt_insts", "+", "ref_insts", ",", "np", ".", "copy", "(", "sample", "[", "'intrinsics'", "]", ")", ")", "\n", "tgt_img", "=", "imgs", "[", "0", "]", "\n", "ref_imgs", "=", "imgs", "[", "1", ":", "]", "\n", "tgt_insts", "=", "segms", "[", ":", "int", "(", "len", "(", "ref_imgs", ")", "/", "2", "+", "1", ")", "]", "\n", "ref_insts", "=", "segms", "[", "int", "(", "len", "(", "ref_imgs", ")", "/", "2", "+", "1", ")", ":", "]", "\n", "\n", "", "else", ":", "\n", "            ", "intrinsics", "=", "np", ".", "copy", "(", "sample", "[", "'intrinsics'", "]", ")", "\n", "\n", "### While passing through RandomScaleCrop(), instances could be flied-out and become zero-mask. -> Need filtering!", "\n", "", "for", "sq", "in", "range", "(", "len", "(", "ref_imgs", ")", ")", ":", "\n", "            ", "tgt_insts", "[", "sq", "]", ",", "ref_insts", "[", "sq", "]", "=", "recursive_check_nonzero_inst", "(", "tgt_insts", "[", "sq", "]", ",", "ref_insts", "[", "sq", "]", ")", "\n", "\n", "\n", "", "if", "tgt_insts", "[", "0", "]", "[", "0", "]", ".", "mean", "(", ")", "!=", "0", "and", "tgt_insts", "[", "0", "]", "[", "int", "(", "tgt_insts", "[", "0", "]", "[", "0", "]", ".", "mean", "(", ")", ")", "]", ".", "mean", "(", ")", "==", "0", ":", "pdb", ".", "set_trace", "(", ")", "\n", "if", "tgt_insts", "[", "1", "]", "[", "0", "]", ".", "mean", "(", ")", "!=", "0", "and", "tgt_insts", "[", "1", "]", "[", "int", "(", "tgt_insts", "[", "1", "]", "[", "0", "]", ".", "mean", "(", ")", ")", "]", ".", "mean", "(", ")", "==", "0", ":", "pdb", ".", "set_trace", "(", ")", "\n", "if", "ref_insts", "[", "0", "]", "[", "0", "]", ".", "mean", "(", ")", "!=", "0", "and", "ref_insts", "[", "0", "]", "[", "int", "(", "ref_insts", "[", "0", "]", "[", "0", "]", ".", "mean", "(", ")", ")", "]", ".", "mean", "(", ")", "==", "0", ":", "pdb", ".", "set_trace", "(", ")", "\n", "if", "ref_insts", "[", "1", "]", "[", "0", "]", ".", "mean", "(", ")", "!=", "0", "and", "ref_insts", "[", "1", "]", "[", "int", "(", "ref_insts", "[", "1", "]", "[", "0", "]", ".", "mean", "(", ")", ")", "]", ".", "mean", "(", ")", "==", "0", ":", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "if", "tgt_insts", "[", "0", "]", "[", "0", "]", ".", "mean", "(", ")", "!=", "tgt_insts", "[", "0", "]", "[", "1", ":", "]", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "nonzero", "(", ")", ".", "size", "(", "0", ")", ":", "pdb", ".", "set_trace", "(", ")", "\n", "if", "tgt_insts", "[", "1", "]", "[", "0", "]", ".", "mean", "(", ")", "!=", "tgt_insts", "[", "1", "]", "[", "1", ":", "]", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "nonzero", "(", ")", ".", "size", "(", "0", ")", ":", "pdb", ".", "set_trace", "(", ")", "\n", "if", "ref_insts", "[", "0", "]", "[", "0", "]", ".", "mean", "(", ")", "!=", "ref_insts", "[", "0", "]", "[", "1", ":", "]", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "nonzero", "(", ")", ".", "size", "(", "0", ")", ":", "pdb", ".", "set_trace", "(", ")", "\n", "if", "ref_insts", "[", "1", "]", "[", "0", "]", ".", "mean", "(", ")", "!=", "ref_insts", "[", "1", "]", "[", "1", ":", "]", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "nonzero", "(", ")", ".", "size", "(", "0", ")", ":", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "# pdb.set_trace()", "\n", "return", "tgt_img", ",", "ref_imgs", ",", "intrinsics", ",", "np", ".", "linalg", ".", "inv", "(", "intrinsics", ")", ",", "tgt_insts", ",", "ref_insts", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.SequenceFolder.__len__": [[303, 305], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.load_as_float": [[24, 26], ["imageio.imread().astype", "imageio.imread"], "function", ["None"], ["def", "load_as_float", "(", "path", ")", ":", "\n", "    ", "return", "imread", "(", "path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.load_flo_as_float": [[28, 31], ["numpy.array().astype", "numpy.array", "flow_io.flow_read"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.flow_io.flow_read"], ["", "def", "load_flo_as_float", "(", "path", ")", ":", "\n", "    ", "out", "=", "np", ".", "array", "(", "flow_read", "(", "path", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.load_seg_as_float": [[33, 36], ["numpy.load().astype", "numpy.load"], "function", ["None"], ["", "def", "load_seg_as_float", "(", "path", ")", ":", "\n", "    ", "out", "=", "np", ".", "load", "(", "path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.L2_norm": [[38, 42], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "L2_norm", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ":", "\n", "    ", "curr_offset", "=", "1e-10", "\n", "l2_norm", "=", "torch", ".", "norm", "(", "torch", ".", "abs", "(", "x", ")", "+", "curr_offset", ",", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "\n", "return", "l2_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.find_noc_masks": [[44, 66], ["rigid_warp.flow_warp", "rigid_warp.flow_warp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "sequence_folders.L2_norm", "sequence_folders.L2_norm", "sequence_folders.L2_norm", "sequence_folders.L2_norm"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.None.rigid_warp.flow_warp", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.L2_norm", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.L2_norm", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.L2_norm", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.L2_norm"], ["", "def", "find_noc_masks", "(", "fwd_flow", ",", "bwd_flow", ")", ":", "\n", "    ", "'''\n    fwd_flow: torch.size([1, 2, 256, 832])\n    bwd_flow: torch.size([1, 2, 256, 832])\n    output: torch.size([1, 1, 256, 832]), torch.size([1, 1, 256, 832])\n\n    input shape of flow_warp(): torch.size([bs, 2, 256, 832])\n    '''", "\n", "bwd2fwd_flow", ",", "_", "=", "flow_warp", "(", "bwd_flow", ",", "fwd_flow", ")", "\n", "fwd2bwd_flow", ",", "_", "=", "flow_warp", "(", "fwd_flow", ",", "bwd_flow", ")", "\n", "\n", "fwd_flow_diff", "=", "torch", ".", "abs", "(", "bwd2fwd_flow", "+", "fwd_flow", ")", "\n", "bwd_flow_diff", "=", "torch", ".", "abs", "(", "fwd2bwd_flow", "+", "bwd_flow", ")", "\n", "\n", "fwd_consist_bound", "=", "torch", ".", "max", "(", "0.05", "*", "L2_norm", "(", "fwd_flow", ")", ",", "torch", ".", "Tensor", "(", "[", "3.0", "]", ")", ")", "\n", "bwd_consist_bound", "=", "torch", ".", "max", "(", "0.05", "*", "L2_norm", "(", "bwd_flow", ")", ",", "torch", ".", "Tensor", "(", "[", "3.0", "]", ")", ")", "\n", "\n", "noc_mask_0", "=", "(", "L2_norm", "(", "fwd_flow_diff", ")", "<", "fwd_consist_bound", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "# noc_mask_tgt, torch.Size([1, 1, 256, 832]), torch.float32", "\n", "noc_mask_1", "=", "(", "L2_norm", "(", "bwd_flow_diff", ")", "<", "bwd_consist_bound", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "# noc_mask_src, torch.Size([1, 1, 256, 832]), torch.float32", "\n", "# pdb.set_trace()", "\n", "\n", "return", "noc_mask_0", ",", "noc_mask_1", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.inst_iou": [[68, 104], ["range", "torch.max", "torch.max", "torch.max", "torch.max", "valid_mask.repeat", "valid_mask.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.zeros().astype", "iou_inst.unsqueeze", "numpy.zeros", "seg_src_m[].unsqueeze().repeat", "seg_src_m[].unsqueeze().repeat", "seg_src_m[].unsqueeze", "seg_src_m[].unsqueeze"], "function", ["None"], ["", "def", "inst_iou", "(", "seg_src", ",", "seg_tgt", ",", "valid_mask", ")", ":", "\n", "    ", "'''\n    => Which channel instance of seg_tgt does the instances of seg_src match?\n    => seg_src\uc758 \uc778\uc2a4\ud134\uc2a4\ub4e4\uc774 seg_tgt\uc758 \uba87 \ubc88\uc9f8 \ucc44\ub110 \uc778\uc2a4\ud134\uc2a4\uc5d0 \ub9e4\uce6d\ub418\ub294\uac00?\n\n    seg_src: torch.Size([1, n_inst, 256, 832])\n    seg_tgt:  torch.Size([1, n_inst, 256, 832])\n    valid_mask: torch.Size([1, 1, 256, 832])\n    '''", "\n", "n_inst_src", "=", "seg_src", ".", "shape", "[", "1", "]", "\n", "n_inst_tgt", "=", "seg_tgt", ".", "shape", "[", "1", "]", "\n", "\n", "seg_src_m", "=", "seg_src", "*", "valid_mask", ".", "repeat", "(", "1", ",", "n_inst_src", ",", "1", ",", "1", ")", "\n", "seg_tgt_m", "=", "seg_tgt", "*", "valid_mask", ".", "repeat", "(", "1", ",", "n_inst_tgt", ",", "1", ",", "1", ")", "\n", "# pdb.set_trace()", "\n", "'''\n    plt.figure(1), plt.imshow(seg_src.sum(dim=0).sum(dim=0)), plt.colorbar(), plt.ion(), plt.show()\n    plt.figure(2), plt.imshow(seg_tgt.sum(dim=0).sum(dim=0)),  plt.colorbar(), plt.ion(), plt.show()\n    plt.figure(3), plt.imshow(valid_mask[0,0]),  plt.colorbar(), plt.ion(), plt.show()\n    plt.figure(4), plt.imshow(seg_src_m.sum(dim=0).sum(dim=0)),  plt.colorbar(), plt.ion(), plt.show()\n    '''", "\n", "for", "i", "in", "range", "(", "n_inst_src", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "match_table", "=", "torch", ".", "from_numpy", "(", "np", ".", "zeros", "(", "[", "1", ",", "n_inst_tgt", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "continue", ";", "\n", "\n", "", "overl", "=", "(", "seg_src_m", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "n_inst_tgt", ",", "1", ",", "1", ")", "*", "seg_tgt_m", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "1", ")", ".", "squeeze", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "sum", "(", "1", ")", "\n", "union", "=", "(", "seg_src_m", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "n_inst_tgt", ",", "1", ",", "1", ")", "+", "seg_tgt_m", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "1", ")", ".", "squeeze", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "sum", "(", "1", ")", "\n", "\n", "iou_inst", "=", "overl", "/", "union", "\n", "match_table", "=", "torch", ".", "cat", "(", "(", "match_table", ",", "iou_inst", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "iou", ",", "inst_idx", "=", "torch", ".", "max", "(", "match_table", ",", "dim", "=", "1", ")", "\n", "# pdb.set_trace()", "\n", "\n", "return", "iou", ",", "inst_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.recursive_check_nonzero_inst": [[106, 131], ["int", "range", "tgt_inst[].mean", "ref_inst[].mean", "tgt_inst[].mean", "tgt_inst[].mean", "sequence_folders.recursive_check_nonzero_inst", "ref_inst[].mean", "sequence_folders.recursive_check_nonzero_inst", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tgt_inst.size", "tgt_inst.size", "ref_inst.size", "ref_inst.size", "tgt_inst.size", "tgt_inst.size", "ref_inst.size", "ref_inst.size"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.recursive_check_nonzero_inst", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.sequence_folders.recursive_check_nonzero_inst"], ["", "def", "recursive_check_nonzero_inst", "(", "tgt_inst", ",", "ref_inst", ")", ":", "\n", "    ", "assert", "(", "tgt_inst", "[", "0", "]", ".", "mean", "(", ")", "==", "ref_inst", "[", "0", "]", ".", "mean", "(", ")", ")", "\n", "n_inst", "=", "int", "(", "tgt_inst", "[", "0", "]", ".", "mean", "(", ")", ")", "\n", "for", "nn", "in", "range", "(", "n_inst", ")", ":", "\n", "        ", "if", "tgt_inst", "[", "nn", "+", "1", "]", ".", "mean", "(", ")", "==", "0", ":", "\n", "            ", "tgt_inst", "[", "0", "]", "-=", "1", "\n", "ref_inst", "[", "0", "]", "-=", "1", "\n", "if", "nn", "+", "1", "==", "n_inst", ":", "\n", "                ", "tgt_inst", "[", "nn", "+", "1", ":", "]", "=", "0", "\n", "ref_inst", "[", "nn", "+", "1", ":", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "tgt_inst", "[", "nn", "+", "1", ":", "]", "=", "torch", ".", "cat", "(", "[", "tgt_inst", "[", "nn", "+", "2", ":", "]", ",", "torch", ".", "zeros", "(", "1", ",", "tgt_inst", ".", "size", "(", "1", ")", ",", "tgt_inst", ".", "size", "(", "2", ")", ")", "]", ",", "dim", "=", "0", ")", "# re-ordering", "\n", "ref_inst", "[", "nn", "+", "1", ":", "]", "=", "torch", ".", "cat", "(", "[", "ref_inst", "[", "nn", "+", "2", ":", "]", ",", "torch", ".", "zeros", "(", "1", ",", "ref_inst", ".", "size", "(", "1", ")", ",", "ref_inst", ".", "size", "(", "2", ")", ")", "]", ",", "dim", "=", "0", ")", "# re-ordering", "\n", "", "return", "recursive_check_nonzero_inst", "(", "tgt_inst", ",", "ref_inst", ")", "\n", "", "if", "ref_inst", "[", "nn", "+", "1", "]", ".", "mean", "(", ")", "==", "0", ":", "\n", "            ", "tgt_inst", "[", "0", "]", "-=", "1", "\n", "ref_inst", "[", "0", "]", "-=", "1", "\n", "if", "nn", "+", "1", "==", "n_inst", ":", "\n", "                ", "tgt_inst", "[", "nn", "+", "1", ":", "]", "=", "0", "\n", "ref_inst", "[", "nn", "+", "1", ":", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "tgt_inst", "[", "nn", "+", "1", ":", "]", "=", "torch", ".", "cat", "(", "[", "tgt_inst", "[", "nn", "+", "2", ":", "]", ",", "torch", ".", "zeros", "(", "1", ",", "tgt_inst", ".", "size", "(", "1", ")", ",", "tgt_inst", ".", "size", "(", "2", ")", ")", "]", ",", "dim", "=", "0", ")", "# re-ordering", "\n", "ref_inst", "[", "nn", "+", "1", ":", "]", "=", "torch", ".", "cat", "(", "[", "ref_inst", "[", "nn", "+", "2", ":", "]", ",", "torch", ".", "zeros", "(", "1", ",", "ref_inst", ".", "size", "(", "1", ")", ",", "ref_inst", ".", "size", "(", "2", ")", ")", "]", ",", "dim", "=", "0", ")", "# re-ordering", "\n", "", "return", "recursive_check_nonzero_inst", "(", "tgt_inst", ",", "ref_inst", ")", "\n", "", "", "return", "tgt_inst", ",", "ref_inst", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.validation_folders.ValidationSet.__init__": [[54, 60], ["path.Path", "validation_folders.crawl_folders", "open"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.validation_folders.crawl_folders"], ["def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "Path", "(", "root", ")", "\n", "scene_list_path", "=", "self", ".", "root", "/", "'val.txt'", "\n", "self", ".", "scenes", "=", "[", "self", ".", "root", "/", "'image'", "/", "folder", "[", ":", "-", "1", "]", "for", "folder", "in", "open", "(", "scene_list_path", ")", "]", "\n", "self", ".", "imgs", ",", "self", ".", "depth", ",", "self", ".", "segs", "=", "crawl_folders", "(", "self", ".", "scenes", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.validation_folders.ValidationSet.__getitem__": [[61, 77], ["validation_folders.load_as_float", "numpy.load().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "seg.sum().clamp.sum().clamp.sum().clamp", "numpy.load().astype", "validation_folders.ValidationSet.transform", "numpy.load", "seg.sum().clamp.sum().clamp.sum", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.validation_folders.load_as_float"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "load_as_float", "(", "self", ".", "imgs", "[", "index", "]", ")", "# H x W x 3", "\n", "depth", "=", "np", ".", "load", "(", "self", ".", "depth", "[", "index", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "# H x W", "\n", "seg", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "self", ".", "segs", "[", "index", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "# N x H X W", "\n", "\n", "# # Re-ordering segmentation by each mask size", "\n", "# seg_sort = torch.cat([torch.zeros(1).long(), seg.sum(dim=(1,2)).argsort(descending=True)[:-1]], dim=0)", "\n", "# seg = seg[seg_sort]", "\n", "\n", "# Sum segmentation for every mask", "\n", "seg", "=", "seg", ".", "sum", "(", "dim", "=", "0", ",", "keepdim", "=", "False", ")", ".", "clamp", "(", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "# H x W", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", ",", "_", "=", "self", ".", "transform", "(", "[", "img", "]", ",", "None", ")", "\n", "img", "=", "img", "[", "0", "]", "\n", "", "return", "img", ",", "depth", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.validation_folders.ValidationSet.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.validation_folders.crawl_folders": [[16, 34], ["sorted", "imgs.extend", "folder.files", "dd.isfile", "depth.append", "ss.isfile", "segs.append", "img.dirname", "str", "str", "folder.basename", "folder.dirname"], "function", ["None"], ["def", "crawl_folders", "(", "folders_list", ")", ":", "\n", "        ", "imgs", "=", "[", "]", "\n", "depth", "=", "[", "]", "\n", "segs", "=", "[", "]", "\n", "for", "folder", "in", "folders_list", ":", "\n", "            ", "current_imgs", "=", "sorted", "(", "folder", ".", "files", "(", "'*.jpg'", ")", ")", "\n", "imgs", ".", "extend", "(", "current_imgs", ")", "\n", "for", "img", "in", "current_imgs", ":", "\n", "# Fetch depth file", "\n", "                ", "dd", "=", "img", ".", "dirname", "(", ")", "/", "(", "img", ".", "name", "[", ":", "-", "4", "]", "+", "'.npy'", ")", "\n", "assert", "(", "dd", ".", "isfile", "(", ")", ")", ",", "\"depth file {} not found\"", ".", "format", "(", "str", "(", "dd", ")", ")", "\n", "depth", ".", "append", "(", "dd", ")", "\n", "# Fetch segmentation file", "\n", "ss", "=", "folder", ".", "dirname", "(", ")", ".", "parent", "/", "'segmentation'", "/", "folder", ".", "basename", "(", ")", "/", "(", "img", ".", "name", "[", ":", "-", "4", "]", "+", "'.npy'", ")", "\n", "assert", "(", "ss", ".", "isfile", "(", ")", ")", ",", "\"segmentation file {} not found\"", ".", "format", "(", "str", "(", "ss", ")", ")", "\n", "segs", ".", "append", "(", "ss", ")", "\n", "\n", "", "", "return", "imgs", ",", "depth", ",", "segs", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.datasets.validation_folders.load_as_float": [[36, 38], ["imageio.imread().astype", "imageio.imread"], "function", ["None"], ["", "def", "load_as_float", "(", "path", ")", ":", "\n", "    ", "return", "imread", "(", "path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.ObjPoseNet.PoseDecoder.__init__": [[17, 37], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "ObjPoseNet.PoseDecoder.convs_pose.append", "ObjPoseNet.PoseDecoder.convs_pose.append", "ObjPoseNet.PoseDecoder.convs_pose.append", "torch.ReLU", "torch.ReLU", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "list"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch_enc", ",", "num_input_features", "=", "1", ",", "num_frames_to_predict_for", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PoseDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_ch_enc", "=", "num_ch_enc", "\n", "self", ".", "num_input_features", "=", "num_input_features", "\n", "\n", "if", "num_frames_to_predict_for", "is", "None", ":", "\n", "            ", "num_frames_to_predict_for", "=", "num_input_features", "-", "1", "\n", "", "self", ".", "num_frames_to_predict_for", "=", "num_frames_to_predict_for", "\n", "\n", "self", ".", "conv_squeeze", "=", "nn", ".", "Conv2d", "(", "self", ".", "num_ch_enc", "[", "-", "1", "]", ",", "256", ",", "1", ")", "\n", "\n", "self", ".", "convs_pose", "=", "[", "]", "\n", "self", ".", "convs_pose", ".", "append", "(", "nn", ".", "Conv2d", "(", "num_input_features", "*", "256", ",", "256", ",", "3", ",", "stride", ",", "1", ")", ")", "\n", "self", ".", "convs_pose", ".", "append", "(", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "stride", ",", "1", ")", ")", "\n", "self", ".", "convs_pose", ".", "append", "(", "nn", ".", "Conv2d", "(", "256", ",", "3", "*", "num_frames_to_predict_for", ",", "1", ")", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "convs_pose", "=", "nn", ".", "ModuleList", "(", "list", "(", "self", ".", "convs_pose", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.ObjPoseNet.PoseDecoder.forward": [[38, 55], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "ObjPoseNet.PoseDecoder.mean", "ObjPoseNet.PoseDecoder.relu", "ObjPoseNet.PoseDecoder.view", "ObjPoseNet.PoseDecoder.conv_squeeze", "ObjPoseNet.PoseDecoder.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_features", ")", ":", "\n", "        ", "last_features", "=", "[", "f", "[", "-", "1", "]", "for", "f", "in", "input_features", "]", "\n", "\n", "cat_features", "=", "[", "self", ".", "relu", "(", "self", ".", "conv_squeeze", "(", "f", ")", ")", "for", "f", "in", "last_features", "]", "\n", "cat_features", "=", "torch", ".", "cat", "(", "cat_features", ",", "1", ")", "\n", "\n", "out", "=", "cat_features", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "out", "=", "self", ".", "convs_pose", "[", "i", "]", "(", "out", ")", "\n", "if", "i", "!=", "2", ":", "\n", "                ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "", "out", "=", "out", ".", "mean", "(", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "pose", "=", "0.01", "*", "out", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.ObjPoseNet.ObjPoseNet.__init__": [[60, 64], ["torch.Module.__init__", "resnet_encoder.ResnetEncoder", "ObjPoseNet.PoseDecoder"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", "=", "18", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "ObjPoseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "ResnetEncoder", "(", "num_layers", "=", "num_layers", ",", "pretrained", "=", "pretrained", ",", "num_input_images", "=", "2", ")", "\n", "self", ".", "decoder", "=", "PoseDecoder", "(", "self", ".", "encoder", ".", "num_ch_enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.ObjPoseNet.ObjPoseNet.init_weights": [[65, 67], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.ObjPoseNet.ObjPoseNet.forward": [[68, 73], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "ObjPoseNet.ObjPoseNet.encoder", "ObjPoseNet.ObjPoseNet.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "img1", ",", "img2", "]", ",", "1", ")", "\n", "features", "=", "self", ".", "encoder", "(", "x", ")", "\n", "pose", "=", "self", ".", "decoder", "(", "[", "features", "]", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.EgoPoseNet.PoseDecoder.__init__": [[17, 37], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "EgoPoseNet.PoseDecoder.convs_pose.append", "EgoPoseNet.PoseDecoder.convs_pose.append", "EgoPoseNet.PoseDecoder.convs_pose.append", "torch.ReLU", "torch.ReLU", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "list"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch_enc", ",", "num_input_features", "=", "1", ",", "num_frames_to_predict_for", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PoseDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_ch_enc", "=", "num_ch_enc", "\n", "self", ".", "num_input_features", "=", "num_input_features", "\n", "\n", "if", "num_frames_to_predict_for", "is", "None", ":", "\n", "            ", "num_frames_to_predict_for", "=", "num_input_features", "-", "1", "\n", "", "self", ".", "num_frames_to_predict_for", "=", "num_frames_to_predict_for", "\n", "\n", "self", ".", "conv_squeeze", "=", "nn", ".", "Conv2d", "(", "self", ".", "num_ch_enc", "[", "-", "1", "]", ",", "256", ",", "1", ")", "\n", "\n", "self", ".", "convs_pose", "=", "[", "]", "\n", "self", ".", "convs_pose", ".", "append", "(", "nn", ".", "Conv2d", "(", "num_input_features", "*", "256", ",", "256", ",", "3", ",", "stride", ",", "1", ")", ")", "\n", "self", ".", "convs_pose", ".", "append", "(", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "stride", ",", "1", ")", ")", "\n", "self", ".", "convs_pose", ".", "append", "(", "nn", ".", "Conv2d", "(", "256", ",", "6", "*", "num_frames_to_predict_for", ",", "1", ")", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "convs_pose", "=", "nn", ".", "ModuleList", "(", "list", "(", "self", ".", "convs_pose", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.EgoPoseNet.PoseDecoder.forward": [[38, 55], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "EgoPoseNet.PoseDecoder.mean", "EgoPoseNet.PoseDecoder.relu", "EgoPoseNet.PoseDecoder.view", "EgoPoseNet.PoseDecoder.conv_squeeze", "EgoPoseNet.PoseDecoder.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_features", ")", ":", "\n", "        ", "last_features", "=", "[", "f", "[", "-", "1", "]", "for", "f", "in", "input_features", "]", "\n", "\n", "cat_features", "=", "[", "self", ".", "relu", "(", "self", ".", "conv_squeeze", "(", "f", ")", ")", "for", "f", "in", "last_features", "]", "\n", "cat_features", "=", "torch", ".", "cat", "(", "cat_features", ",", "1", ")", "\n", "\n", "out", "=", "cat_features", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "out", "=", "self", ".", "convs_pose", "[", "i", "]", "(", "out", ")", "\n", "if", "i", "!=", "2", ":", "\n", "                ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "", "out", "=", "out", ".", "mean", "(", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "pose", "=", "0.01", "*", "out", ".", "view", "(", "-", "1", ",", "6", ")", "\n", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.EgoPoseNet.EgoPoseNet.__init__": [[60, 64], ["torch.Module.__init__", "resnet_encoder.ResnetEncoder", "EgoPoseNet.PoseDecoder"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", "=", "18", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "EgoPoseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "ResnetEncoder", "(", "num_layers", "=", "num_layers", ",", "pretrained", "=", "pretrained", ",", "num_input_images", "=", "2", ")", "\n", "self", ".", "decoder", "=", "PoseDecoder", "(", "self", ".", "encoder", ".", "num_ch_enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.EgoPoseNet.EgoPoseNet.init_weights": [[65, 67], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.EgoPoseNet.EgoPoseNet.forward": [[68, 73], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "EgoPoseNet.EgoPoseNet.encoder", "EgoPoseNet.EgoPoseNet.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "img1", ",", "img2", "]", ",", "1", ")", "\n", "features", "=", "self", ".", "encoder", "(", "x", ")", "\n", "pose", "=", "self", ".", "decoder", "(", "[", "features", "]", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.ConvBlock.__init__": [[19, 24], ["torch.Module.__init__", "DispResNet.Conv3x3", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "Conv3x3", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "nonlin", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.ConvBlock.forward": [[25, 29], ["DispResNet.ConvBlock.conv", "DispResNet.ConvBlock.nonlin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "nonlin", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.Conv3x3.__init__": [[33, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "use_refl", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "use_refl", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "1", ")", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_channels", ")", ",", "int", "(", "out_channels", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.Conv3x3.forward": [[42, 46], ["DispResNet.Conv3x3.pad", "DispResNet.Conv3x3.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pad", "(", "x", ")", "\n", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.DispDecoder.__init__": [[55, 96], ["range", "torch.Module.__init__", "numpy.array", "range", "enumerate", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Softplus", "torch.Softplus", "torch.Softplus", "DispResNet.DispDecoder.upconvs0.append", "DispResNet.DispDecoder.upconvs1.append", "DispResNet.DispDecoder.dispconvs.append", "DispResNet.ConvBlock", "DispResNet.ConvBlock", "DispResNet.Conv3x3", "range"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch_enc", ",", "scales", "=", "range", "(", "4", ")", ",", "num_output_channels", "=", "1", ",", "use_skips", "=", "True", ")", ":", "\n", "        ", "super", "(", "DispDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_output_channels", "=", "num_output_channels", "\n", "self", ".", "use_skips", "=", "use_skips", "\n", "self", ".", "upsample_mode", "=", "'nearest'", "\n", "self", ".", "scales", "=", "scales", "\n", "\n", "self", ".", "num_ch_enc", "=", "num_ch_enc", "\n", "self", ".", "num_ch_dec", "=", "np", ".", "array", "(", "[", "16", ",", "32", ",", "64", ",", "128", ",", "256", "]", ")", "\n", "\n", "# decoder", "\n", "self", ".", "upconvs0", "=", "[", "]", "\n", "self", ".", "upconvs1", "=", "[", "]", "\n", "self", ".", "dispconvs", "=", "[", "]", "\n", "self", ".", "i_to_scaleIdx_conversion", "=", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "4", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "# upconv_0", "\n", "            ", "num_ch_in", "=", "self", ".", "num_ch_enc", "[", "-", "1", "]", "if", "i", "==", "4", "else", "self", ".", "num_ch_dec", "[", "i", "+", "1", "]", "\n", "num_ch_out", "=", "self", ".", "num_ch_dec", "[", "i", "]", "\n", "self", ".", "upconvs0", ".", "append", "(", "ConvBlock", "(", "num_ch_in", ",", "num_ch_out", ")", ")", "\n", "\n", "# upconv_1", "\n", "num_ch_in", "=", "self", ".", "num_ch_dec", "[", "i", "]", "\n", "if", "self", ".", "use_skips", "and", "i", ">", "0", ":", "\n", "                ", "num_ch_in", "+=", "self", ".", "num_ch_enc", "[", "i", "-", "1", "]", "\n", "", "num_ch_out", "=", "self", ".", "num_ch_dec", "[", "i", "]", "\n", "self", ".", "upconvs1", ".", "append", "(", "ConvBlock", "(", "num_ch_in", ",", "num_ch_out", ")", ")", "\n", "\n", "", "for", "cnt", ",", "s", "in", "enumerate", "(", "self", ".", "scales", ")", ":", "\n", "            ", "self", ".", "dispconvs", ".", "append", "(", "Conv3x3", "(", "self", ".", "num_ch_dec", "[", "s", "]", ",", "self", ".", "num_output_channels", ")", ")", "\n", "\n", "if", "s", "in", "range", "(", "4", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "self", ".", "i_to_scaleIdx_conversion", "[", "s", "]", "=", "cnt", "\n", "\n", "", "", "self", ".", "upconvs0", "=", "nn", ".", "ModuleList", "(", "self", ".", "upconvs0", ")", "\n", "self", ".", "upconvs1", "=", "nn", ".", "ModuleList", "(", "self", ".", "upconvs1", ")", "\n", "self", ".", "dispconvs", "=", "nn", ".", "ModuleList", "(", "self", ".", "dispconvs", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "softplus", "=", "nn", ".", "Softplus", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.DispDecoder.init_weights": [[97, 99], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.DispDecoder.forward": [[100, 120], ["enumerate", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DispResNet.upsample", "DispResNet.DispDecoder.outputs.append", "DispResNet.DispDecoder.softplus"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.upsample"], ["", "def", "forward", "(", "self", ",", "input_features", ")", ":", "\n", "\n", "        ", "self", ".", "outputs", "=", "[", "]", "\n", "\n", "# decoder", "\n", "x", "=", "input_features", "[", "-", "1", "]", "\n", "\n", "for", "cnt", ",", "i", "in", "enumerate", "(", "range", "(", "4", ",", "-", "1", ",", "-", "1", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "upconvs0", "[", "cnt", "]", "(", "x", ")", "\n", "x", "=", "[", "upsample", "(", "x", ")", "]", "\n", "if", "self", ".", "use_skips", "and", "i", ">", "0", ":", "\n", "                ", "x", "+=", "[", "input_features", "[", "i", "-", "1", "]", "]", "\n", "", "x", "=", "torch", ".", "cat", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "upconvs1", "[", "cnt", "]", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "scales", ":", "\n", "                ", "idx", "=", "self", ".", "i_to_scaleIdx_conversion", "[", "i", "]", "\n", "self", ".", "outputs", ".", "append", "(", "self", ".", "softplus", "(", "self", ".", "dispconvs", "[", "idx", "]", "(", "x", ")", ")", ")", "\n", "\n", "", "", "self", ".", "outputs", "=", "self", ".", "outputs", "[", ":", ":", "-", "1", "]", "\n", "return", "self", ".", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.DispResNet.__init__": [[124, 130], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "resnet_encoder.ResnetEncoder", "DispResNet.DispDecoder", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", "=", "18", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "DispResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "obj_height_prior", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.02", ")", ")", "\n", "\n", "self", ".", "encoder", "=", "ResnetEncoder", "(", "num_layers", "=", "num_layers", ",", "pretrained", "=", "pretrained", ",", "num_input_images", "=", "1", ")", "\n", "self", ".", "decoder", "=", "DispDecoder", "(", "self", ".", "encoder", ".", "num_ch_enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.DispResNet.init_weights": [[131, 133], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.DispResNet.forward": [[134, 139], ["DispResNet.DispResNet.encoder", "DispResNet.DispResNet.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "encoder", "(", "x", ")", "\n", "outputs", "=", "self", ".", "decoder", "(", "features", ")", "\n", "\n", "return", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.DispResNet.upsample": [[47, 51], ["torch.interpolate"], "function", ["None"], ["", "", "def", "upsample", "(", "x", ")", ":", "\n", "    ", "\"\"\"Upsample input tensor by a factor of 2\n    \"\"\"", "\n", "return", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResNetMultiImageInput.__init__": [[21, 40], ["torchvision.ResNet.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_encoder.ResNetMultiImageInput._make_layer", "resnet_encoder.ResNetMultiImageInput._make_layer", "resnet_encoder.ResNetMultiImageInput._make_layer", "resnet_encoder.ResNetMultiImageInput._make_layer", "resnet_encoder.ResNetMultiImageInput.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.__init__"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "num_input_images", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResNetMultiImageInput", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "num_input_images", "*", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.__init__": [[65, 86], ["torch.Module.__init__", "numpy.array", "ValueError", "resnet_encoder.resnet_multiimage_input"], "methods", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.__init__", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.resnet_multiimage_input"], ["def", "__init__", "(", "self", ",", "num_layers", ",", "pretrained", ",", "num_input_images", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResnetEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_ch_enc", "=", "np", ".", "array", "(", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", "\n", "\n", "resnets", "=", "{", "18", ":", "models", ".", "resnet18", ",", "\n", "34", ":", "models", ".", "resnet34", ",", "\n", "50", ":", "models", ".", "resnet50", ",", "\n", "101", ":", "models", ".", "resnet101", ",", "\n", "152", ":", "models", ".", "resnet152", "}", "\n", "\n", "if", "num_layers", "not", "in", "resnets", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} is not a valid number of resnet layers\"", ".", "format", "(", "num_layers", ")", ")", "\n", "\n", "", "if", "num_input_images", ">", "1", ":", "\n", "            ", "self", ".", "encoder", "=", "resnet_multiimage_input", "(", "num_layers", ",", "pretrained", ",", "num_input_images", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "resnets", "[", "num_layers", "]", "(", "pretrained", ")", "\n", "\n", "", "if", "num_layers", ">", "34", ":", "\n", "            ", "self", ".", "num_ch_enc", "[", "1", ":", "]", "*=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.ResnetEncoder.forward": [[87, 99], ["resnet_encoder.ResnetEncoder.encoder.conv1", "resnet_encoder.ResnetEncoder.encoder.bn1", "resnet_encoder.ResnetEncoder.features.append", "resnet_encoder.ResnetEncoder.features.append", "resnet_encoder.ResnetEncoder.features.append", "resnet_encoder.ResnetEncoder.features.append", "resnet_encoder.ResnetEncoder.features.append", "resnet_encoder.ResnetEncoder.encoder.relu", "resnet_encoder.ResnetEncoder.encoder.layer1", "resnet_encoder.ResnetEncoder.encoder.layer2", "resnet_encoder.ResnetEncoder.encoder.layer3", "resnet_encoder.ResnetEncoder.encoder.layer4", "resnet_encoder.ResnetEncoder.encoder.maxpool"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "self", ".", "features", "=", "[", "]", "\n", "x", "=", "input_image", "\n", "x", "=", "self", ".", "encoder", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "encoder", ".", "bn1", "(", "x", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "relu", "(", "x", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer1", "(", "self", ".", "encoder", ".", "maxpool", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer2", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer3", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer4", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "self", ".", "features", "", "", "", ""]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.models.resnet_encoder.resnet_multiimage_input": [[42, 60], ["resnet_encoder.ResNetMultiImageInput", "torch.load_url", "ResNetMultiImageInput.load_state_dict", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "", "", "", "def", "resnet_multiimage_input", "(", "num_layers", ",", "pretrained", "=", "False", ",", "num_input_images", "=", "1", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet model.\n    Args:\n        num_layers (int): Number of resnet layers. Must be 18 or 50\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        num_input_images (int): Number of frames stacked as input\n    \"\"\"", "\n", "assert", "num_layers", "in", "[", "18", ",", "50", "]", ",", "\"Can only run with 18 or 50 layer resnet\"", "\n", "blocks", "=", "{", "18", ":", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "50", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", "}", "[", "num_layers", "]", "\n", "block_type", "=", "{", "18", ":", "models", ".", "resnet", ".", "BasicBlock", ",", "50", ":", "models", ".", "resnet", ".", "Bottleneck", "}", "[", "num_layers", "]", "\n", "model", "=", "ResNetMultiImageInput", "(", "block_type", ",", "blocks", ",", "num_input_images", "=", "num_input_images", ")", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "loaded", "=", "model_zoo", ".", "load_url", "(", "models", ".", "resnet", ".", "model_urls", "[", "'resnet{}'", ".", "format", "(", "num_layers", ")", "]", ")", "\n", "loaded", "[", "'conv1.weight'", "]", "=", "torch", ".", "cat", "(", "\n", "[", "loaded", "[", "'conv1.weight'", "]", "]", "*", "num_input_images", ",", "1", ")", "/", "num_input_images", "\n", "model", ".", "load_state_dict", "(", "loaded", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.compute_errors": [[13, 30], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "np.sqrt.mean", "np.sqrt.mean", "numpy.log", "numpy.log", "numpy.abs"], "function", ["None"], ["def", "compute_errors", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "thresh", "=", "np", ".", "maximum", "(", "(", "gt", "/", "pred", ")", ",", "(", "pred", "/", "gt", ")", ")", "\n", "a1", "=", "(", "thresh", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "rmse", "=", "(", "gt", "-", "pred", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "gt", ")", "-", "np", ".", "log", "(", "pred", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "gt", "-", "pred", ")", "/", "gt", ")", "\n", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "gt", "-", "pred", ")", "**", "2", ")", "/", "gt", ")", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.load_gt_disp_kitti": [[40, 47], ["range", "cv2.imread", "gt_disparities.append", "cv2.imread.astype", "str().zfill", "str"], "function", ["None"], ["def", "load_gt_disp_kitti", "(", "path", ")", ":", "\n", "    ", "gt_disparities", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "200", ")", ":", "\n", "        ", "disp", "=", "cv2", ".", "imread", "(", "path", "+", "\"/training/disp_noc_0/\"", "+", "str", "(", "i", ")", ".", "zfill", "(", "6", ")", "+", "\"_10.png\"", ",", "-", "1", ")", "\n", "disp", "=", "disp", ".", "astype", "(", "np", ".", "float32", ")", "/", "256", "\n", "gt_disparities", ".", "append", "(", "disp", ")", "\n", "", "return", "gt_disparities", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.convert_disps_to_depths_kitti": [[48, 70], ["range", "len", "pred_disparities_resized.append", "gt_depths.append", "pred_depths.append", "cv2.resize"], "function", ["None"], ["", "def", "convert_disps_to_depths_kitti", "(", "gt_disparities", ",", "pred_disparities", ")", ":", "\n", "    ", "gt_depths", "=", "[", "]", "\n", "pred_depths", "=", "[", "]", "\n", "pred_disparities_resized", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_disparities", ")", ")", ":", "\n", "        ", "gt_disp", "=", "gt_disparities", "[", "i", "]", "\n", "height", ",", "width", "=", "gt_disp", ".", "shape", "\n", "\n", "pred_disp", "=", "pred_disparities", "[", "i", "]", "\n", "pred_disp", "=", "width", "*", "cv2", ".", "resize", "(", "pred_disp", ",", "(", "width", ",", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "pred_disparities_resized", ".", "append", "(", "pred_disp", ")", "\n", "\n", "mask", "=", "gt_disp", ">", "0", "\n", "\n", "gt_depth", "=", "width_to_focal", "[", "width", "]", "*", "0.54", "/", "(", "gt_disp", "+", "(", "1.0", "-", "mask", ")", ")", "\n", "pred_depth", "=", "width_to_focal", "[", "width", "]", "*", "0.54", "/", "pred_disp", "\n", "\n", "gt_depths", ".", "append", "(", "gt_depth", ")", "\n", "pred_depths", ".", "append", "(", "pred_depth", ")", "\n", "", "return", "gt_depths", ",", "pred_depths", ",", "pred_disparities_resized", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.read_text_lines": [[75, 81], ["open", "open.readlines", "open.close", "l.rstrip"], "function", ["None"], ["", "def", "read_text_lines", "(", "file_path", ")", ":", "\n", "    ", "f", "=", "open", "(", "file_path", ",", "'r'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "lines", "=", "[", "l", ".", "rstrip", "(", ")", "for", "l", "in", "lines", "]", "\n", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.read_file_data": [[82, 113], ["filename.split", "os.path.isfile", "filename.split", "gt_files.append", "gt_calib.append", "im_sizes.append", "im_files.append", "cams.append", "print", "cv2.imread"], "function", ["None"], ["", "def", "read_file_data", "(", "files", ",", "data_root", ")", ":", "\n", "    ", "gt_files", "=", "[", "]", "\n", "gt_calib", "=", "[", "]", "\n", "im_sizes", "=", "[", "]", "\n", "im_files", "=", "[", "]", "\n", "cams", "=", "[", "]", "\n", "num_probs", "=", "0", "\n", "for", "filename", "in", "files", ":", "\n", "        ", "filename", "=", "filename", ".", "split", "(", ")", "[", "0", "]", "\n", "splits", "=", "filename", ".", "split", "(", "'/'", ")", "\n", "# camera_id = filename[-1]   # 2 is left, 3 is right", "\n", "date", "=", "splits", "[", "0", "]", "\n", "im_id", "=", "splits", "[", "4", "]", "[", ":", "10", "]", "\n", "file_root", "=", "'{}/{}'", "\n", "\n", "im", "=", "filename", "\n", "# pdb.set_trace()", "\n", "vel", "=", "'{}/{}/velodyne_points/data/{}.bin'", ".", "format", "(", "splits", "[", "0", "]", ",", "splits", "[", "1", "]", ",", "im_id", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "data_root", "+", "im", ")", ":", "\n", "            ", "gt_files", ".", "append", "(", "data_root", "+", "vel", ")", "\n", "gt_calib", ".", "append", "(", "data_root", "+", "date", "+", "'/'", ")", "\n", "im_sizes", ".", "append", "(", "cv2", ".", "imread", "(", "data_root", "+", "im", ")", ".", "shape", "[", ":", "2", "]", ")", "\n", "im_files", ".", "append", "(", "data_root", "+", "im", ")", "\n", "cams", ".", "append", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "num_probs", "+=", "1", "\n", "print", "(", "'{} missing'", ".", "format", "(", "data_root", "+", "im", ")", ")", "\n", "# print(num_probs, 'files missing')", "\n", "\n", "", "", "return", "gt_files", ",", "gt_calib", ",", "im_sizes", ",", "im_files", ",", "cams", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.load_velodyne_points": [[114, 119], ["numpy.fromfile().reshape", "numpy.fromfile"], "function", ["None"], ["", "def", "load_velodyne_points", "(", "file_name", ")", ":", "\n", "# adapted from https://github.com/hunse/kitti", "\n", "    ", "points", "=", "np", ".", "fromfile", "(", "file_name", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "points", "[", ":", ",", "3", "]", "=", "1.0", "# homogeneous", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.lin_interp": [[121, 130], ["LinearNDInterpolator", "numpy.meshgrid", "LinearNDInterpolator.reshape", "numpy.arange", "numpy.arange", "numpy.vstack", "LinearNDInterpolator.", "I.flatten", "J.flatten"], "function", ["None"], ["", "def", "lin_interp", "(", "shape", ",", "xyd", ")", ":", "\n", "# taken from https://github.com/hunse/kitti", "\n", "    ", "m", ",", "n", "=", "shape", "\n", "ij", ",", "d", "=", "xyd", "[", ":", ",", "1", ":", ":", "-", "1", "]", ",", "xyd", "[", ":", ",", "2", "]", "\n", "f", "=", "LinearNDInterpolator", "(", "ij", ",", "d", ",", "fill_value", "=", "0", ")", "\n", "J", ",", "I", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "n", ")", ",", "np", ".", "arange", "(", "m", ")", ")", "\n", "IJ", "=", "np", ".", "vstack", "(", "[", "I", ".", "flatten", "(", ")", ",", "J", ".", "flatten", "(", ")", "]", ")", ".", "T", "\n", "disparity", "=", "f", "(", "IJ", ")", ".", "reshape", "(", "shape", ")", "\n", "return", "disparity", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.read_calib_file": [[132, 152], ["set", "open", "f.readlines", "line.split", "value.strip.strip", "set.issuperset", "numpy.array().astype", "numpy.array", "value.strip.split"], "function", ["None"], ["", "def", "read_calib_file", "(", "path", ")", ":", "\n", "# taken from https://github.com/hunse/kitti", "\n", "    ", "float_chars", "=", "set", "(", "\"0123456789.e+- \"", ")", "\n", "data", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "value", "=", "value", ".", "strip", "(", ")", "\n", "data", "[", "key", "]", "=", "value", "\n", "# pdb.set_trace()", "\n", "if", "float_chars", ".", "issuperset", "(", "value", ")", ":", "\n", "# try to cast to float array", "\n", "                ", "try", ":", "\n", "# data[key] = np.array(map(float, value.split(' ')))", "\n", "                    ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "value", ".", "split", "(", "' '", ")", ")", ".", "astype", "(", "float", ")", "\n", "", "except", "ValueError", ":", "\n", "# casting error: data[key] already eq. value, so pass", "\n", "                    ", "pass", "\n", "\n", "", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.get_focal_length_baseline": [[154, 171], ["depth_evaluation_utils.read_calib_file", "cam2cam[].reshape", "cam2cam[].reshape"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.read_calib_file"], ["", "def", "get_focal_length_baseline", "(", "calib_dir", ",", "cam", "=", "2", ")", ":", "\n", "    ", "cam2cam", "=", "read_calib_file", "(", "calib_dir", "+", "'calib_cam_to_cam.txt'", ")", "\n", "P2_rect", "=", "cam2cam", "[", "'P_rect_02'", "]", ".", "reshape", "(", "3", ",", "4", ")", "\n", "P3_rect", "=", "cam2cam", "[", "'P_rect_03'", "]", ".", "reshape", "(", "3", ",", "4", ")", "\n", "\n", "# cam 2 is left of camera 0  -6cm", "\n", "# cam 3 is to the right  +54cm", "\n", "b2", "=", "P2_rect", "[", "0", ",", "3", "]", "/", "-", "P2_rect", "[", "0", ",", "0", "]", "\n", "b3", "=", "P3_rect", "[", "0", ",", "3", "]", "/", "-", "P3_rect", "[", "0", ",", "0", "]", "\n", "baseline", "=", "b3", "-", "b2", "\n", "\n", "if", "cam", "==", "2", ":", "\n", "        ", "focal_length", "=", "P2_rect", "[", "0", ",", "0", "]", "\n", "", "elif", "cam", "==", "3", ":", "\n", "        ", "focal_length", "=", "P3_rect", "[", "0", ",", "0", "]", "\n", "\n", "", "return", "focal_length", ",", "baseline", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.sub2ind": [[173, 176], ["None"], "function", ["None"], ["", "def", "sub2ind", "(", "matrixSize", ",", "rowSub", ",", "colSub", ")", ":", "\n", "    ", "m", ",", "n", "=", "matrixSize", "\n", "return", "rowSub", "*", "(", "n", "-", "1", ")", "+", "colSub", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.generate_depth_map": [[177, 234], ["depth_evaluation_utils.read_calib_file", "depth_evaluation_utils.read_calib_file", "numpy.hstack", "numpy.vstack", "numpy.eye", "cam2cam[].reshape", "cam2cam[].reshape", "numpy.dot", "depth_evaluation_utils.load_velodyne_points", "numpy.zeros", "depth_evaluation_utils.sub2ind", "numpy.dot", "numpy.dot", "numpy.round", "numpy.round", "int", "int", "velo_pts_im[].min", "depth_evaluation_utils.lin_interp", "velo2cam[].reshape", "numpy.array", "collections.Counter().items", "numpy.where", "velo_pts_im[].astype", "velo_pts_im[].astype", "collections.Counter", "str"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.read_calib_file", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.read_calib_file", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.load_velodyne_points", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.sub2ind", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.lin_interp"], ["", "def", "generate_depth_map", "(", "calib_dir", ",", "velo_file_name", ",", "im_shape", ",", "cam", "=", "2", ",", "interp", "=", "False", ",", "vel_depth", "=", "False", ")", ":", "\n", "# load calibration files", "\n", "    ", "cam2cam", "=", "read_calib_file", "(", "calib_dir", "+", "'calib_cam_to_cam.txt'", ")", "\n", "velo2cam", "=", "read_calib_file", "(", "calib_dir", "+", "'calib_velo_to_cam.txt'", ")", "\n", "# pdb.set_trace()", "\n", "velo2cam", "=", "np", ".", "hstack", "(", "(", "velo2cam", "[", "'R'", "]", ".", "reshape", "(", "3", ",", "3", ")", ",", "velo2cam", "[", "'T'", "]", "[", "...", ",", "np", ".", "newaxis", "]", ")", ")", "\n", "velo2cam", "=", "np", ".", "vstack", "(", "(", "velo2cam", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1.0", "]", ")", ")", ")", "\n", "\n", "# compute projection matrix velodyne->image plane", "\n", "R_cam2rect", "=", "np", ".", "eye", "(", "4", ")", "\n", "R_cam2rect", "[", ":", "3", ",", ":", "3", "]", "=", "cam2cam", "[", "'R_rect_00'", "]", ".", "reshape", "(", "3", ",", "3", ")", "\n", "P_rect", "=", "cam2cam", "[", "'P_rect_0'", "+", "str", "(", "cam", ")", "]", ".", "reshape", "(", "3", ",", "4", ")", "\n", "P_velo2im", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "P_rect", ",", "R_cam2rect", ")", ",", "velo2cam", ")", "\n", "\n", "# load velodyne points and remove all behind image plane (approximation)", "\n", "# each row of the velodyne data is forward, left, up, reflectance", "\n", "velo", "=", "load_velodyne_points", "(", "velo_file_name", ")", "\n", "velo", "=", "velo", "[", "velo", "[", ":", ",", "0", "]", ">=", "0", ",", ":", "]", "\n", "\n", "# project the points to the camera", "\n", "velo_pts_im", "=", "np", ".", "dot", "(", "P_velo2im", ",", "velo", ".", "T", ")", ".", "T", "\n", "velo_pts_im", "[", ":", ",", ":", "2", "]", "=", "velo_pts_im", "[", ":", ",", ":", "2", "]", "/", "velo_pts_im", "[", ":", ",", "2", "]", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "if", "vel_depth", ":", "\n", "        ", "velo_pts_im", "[", ":", ",", "2", "]", "=", "velo", "[", ":", ",", "0", "]", "\n", "\n", "# check if in bounds", "\n", "# use minus 1 to get the exact same value as KITTI matlab code", "\n", "", "velo_pts_im", "[", ":", ",", "0", "]", "=", "np", ".", "round", "(", "velo_pts_im", "[", ":", ",", "0", "]", ")", "-", "1", "\n", "velo_pts_im", "[", ":", ",", "1", "]", "=", "np", ".", "round", "(", "velo_pts_im", "[", ":", ",", "1", "]", ")", "-", "1", "\n", "val_inds", "=", "(", "velo_pts_im", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "velo_pts_im", "[", ":", ",", "1", "]", ">=", "0", ")", "\n", "val_inds", "=", "val_inds", "&", "(", "velo_pts_im", "[", ":", ",", "0", "]", "<", "im_shape", "[", "1", "]", ")", "&", "(", "velo_pts_im", "[", ":", ",", "1", "]", "<", "im_shape", "[", "0", "]", ")", "\n", "velo_pts_im", "=", "velo_pts_im", "[", "val_inds", ",", ":", "]", "\n", "\n", "# project to image", "\n", "depth", "=", "np", ".", "zeros", "(", "(", "im_shape", ")", ")", "\n", "depth", "[", "velo_pts_im", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", ",", "velo_pts_im", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "]", "=", "velo_pts_im", "[", ":", ",", "2", "]", "\n", "\n", "# find the duplicate points and choose the closest depth", "\n", "inds", "=", "sub2ind", "(", "depth", ".", "shape", ",", "velo_pts_im", "[", ":", ",", "1", "]", ",", "velo_pts_im", "[", ":", ",", "0", "]", ")", "\n", "# pdb.set_trace()", "\n", "\n", "# dupe_inds = [item for item, count in Counter(inds).iteritems() if count > 1]", "\n", "dupe_inds", "=", "[", "item", "for", "item", ",", "count", "in", "Counter", "(", "inds", ")", ".", "items", "(", ")", "if", "count", ">", "1", "]", "\n", "for", "dd", "in", "dupe_inds", ":", "\n", "        ", "pts", "=", "np", ".", "where", "(", "inds", "==", "dd", ")", "[", "0", "]", "\n", "x_loc", "=", "int", "(", "velo_pts_im", "[", "pts", "[", "0", "]", ",", "0", "]", ")", "\n", "y_loc", "=", "int", "(", "velo_pts_im", "[", "pts", "[", "0", "]", ",", "1", "]", ")", "\n", "depth", "[", "y_loc", ",", "x_loc", "]", "=", "velo_pts_im", "[", "pts", ",", "2", "]", ".", "min", "(", ")", "\n", "", "depth", "[", "depth", "<", "0", "]", "=", "0", "\n", "\n", "if", "interp", ":", "\n", "# interpolate the depth map to fill in holes", "\n", "        ", "depth_interp", "=", "lin_interp", "(", "im_shape", ",", "velo_pts_im", ")", "\n", "return", "depth", ",", "depth_interp", "\n", "", "else", ":", "\n", "        ", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.eval_depth.main": [[26, 78], ["numpy.load", "depth_evaluation_utils.read_text_lines", "depth_evaluation_utils.read_file_data", "len", "print", "tqdm.tqdm", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "print", "tqdm.tqdm", "print", "print", "range", "pred_depths_resized.append", "depth_evaluation_utils.generate_depth_map", "gt_depths.append", "range", "numpy.copy", "numpy.logical_and", "numpy.array().astype", "numpy.zeros", "numpy.logical_and", "depth_evaluation_utils.compute_errors", "cv2.resize", "depth_evaluation_utils.generate_depth_map.astype", "numpy.median", "numpy.median", "np.zeros.mean", "np.zeros.mean", "np.zeros.mean", "np.zeros.mean", "np.zeros.mean", "np.zeros.mean", "np.zeros.mean", "numpy.array"], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.read_text_lines", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.read_file_data", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.generate_depth_map", "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.depth_evaluation_utils.compute_errors"], ["def", "main", "(", ")", ":", "\n", "    ", "pred_depths", "=", "np", ".", "load", "(", "args", ".", "pred_file", ")", "\n", "test_files", "=", "read_text_lines", "(", "args", ".", "test_file_list", ")", "\n", "gt_files", ",", "gt_calib", ",", "im_sizes", ",", "im_files", ",", "cams", "=", "read_file_data", "(", "test_files", ",", "args", ".", "kitti_dir", ")", "\n", "num_test", "=", "len", "(", "im_files", ")", "\n", "gt_depths", "=", "[", "]", "\n", "pred_depths_resized", "=", "[", "]", "\n", "\n", "print", "(", "'=> Prepare predicted depth and GT'", ")", "\n", "for", "t_id", "in", "tqdm", "(", "range", "(", "num_test", ")", ")", ":", "\n", "        ", "camera_id", "=", "cams", "[", "t_id", "]", "# 2 is left, 3 is right", "\n", "pred_depths_resized", ".", "append", "(", "cv2", ".", "resize", "(", "pred_depths", "[", "t_id", "]", ",", "(", "im_sizes", "[", "t_id", "]", "[", "1", "]", ",", "im_sizes", "[", "t_id", "]", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", ")", "\n", "depth", "=", "generate_depth_map", "(", "gt_calib", "[", "t_id", "]", ",", "gt_files", "[", "t_id", "]", ",", "im_sizes", "[", "t_id", "]", ",", "camera_id", ",", "False", ",", "True", ")", "\n", "gt_depths", ".", "append", "(", "depth", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "pred_depths", "=", "pred_depths_resized", "\n", "\n", "rms", "=", "np", ".", "zeros", "(", "num_test", ",", "np", ".", "float32", ")", "\n", "log_rms", "=", "np", ".", "zeros", "(", "num_test", ",", "np", ".", "float32", ")", "\n", "abs_rel", "=", "np", ".", "zeros", "(", "num_test", ",", "np", ".", "float32", ")", "\n", "sq_rel", "=", "np", ".", "zeros", "(", "num_test", ",", "np", ".", "float32", ")", "\n", "a1", "=", "np", ".", "zeros", "(", "num_test", ",", "np", ".", "float32", ")", "\n", "a2", "=", "np", ".", "zeros", "(", "num_test", ",", "np", ".", "float32", ")", "\n", "a3", "=", "np", ".", "zeros", "(", "num_test", ",", "np", ".", "float32", ")", "\n", "\n", "print", "(", "'=> Compute results'", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "num_test", ")", ")", ":", "\n", "        ", "gt_depth", "=", "gt_depths", "[", "i", "]", "\n", "pred_depth", "=", "np", ".", "copy", "(", "pred_depths", "[", "i", "]", ")", "\n", "\n", "mask", "=", "np", ".", "logical_and", "(", "gt_depth", ">", "args", ".", "min_depth", ",", "\n", "gt_depth", "<", "args", ".", "max_depth", ")", "\n", "# crop used by Garg ECCV16 to reprocude Eigen NIPS14 results", "\n", "# if used on gt_size 370x1224 produces a crop of [-218, -3, 44, 1180]", "\n", "gt_height", ",", "gt_width", "=", "gt_depth", ".", "shape", "\n", "crop", "=", "np", ".", "array", "(", "[", "0.40810811", "*", "gt_height", ",", "0.99189189", "*", "gt_height", ",", "\n", "0.03594771", "*", "gt_width", ",", "0.96405229", "*", "gt_width", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "crop_mask", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "crop_mask", "[", "crop", "[", "0", "]", ":", "crop", "[", "1", "]", ",", "crop", "[", "2", "]", ":", "crop", "[", "3", "]", "]", "=", "1", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "crop_mask", ")", "\n", "\n", "# Scale matching", "\n", "scalor", "=", "np", ".", "median", "(", "gt_depth", "[", "mask", "]", ")", "/", "np", ".", "median", "(", "pred_depth", "[", "mask", "]", ")", "\n", "pred_depth", "[", "mask", "]", "*=", "scalor", "\n", "\n", "pred_depth", "[", "pred_depth", "<", "args", ".", "min_depth", "]", "=", "args", ".", "min_depth", "\n", "pred_depth", "[", "pred_depth", ">", "args", ".", "max_depth", "]", "=", "args", ".", "max_depth", "\n", "abs_rel", "[", "i", "]", ",", "sq_rel", "[", "i", "]", ",", "rms", "[", "i", "]", ",", "log_rms", "[", "i", "]", ",", "a1", "[", "i", "]", ",", "a2", "[", "i", "]", ",", "a3", "[", "i", "]", "=", "compute_errors", "(", "gt_depth", "[", "mask", "]", ",", "pred_depth", "[", "mask", "]", ")", "\n", "\n", "", "print", "(", "\"{:>10}, {:>10}, {:>10}, {:>10}, {:>10}, {:>10}, {:>10}\"", ".", "format", "(", "'abs_rel'", ",", "'sq_rel'", ",", "'rms'", ",", "'log_rms'", ",", "'a1'", ",", "'a2'", ",", "'a3'", ")", ")", "\n", "print", "(", "\"{:10.4f}, {:10.4f}, {:10.4f}, {:10.4f}, {:10.4f}, {:10.4f}, {:10.4f}\"", ".", "format", "(", "abs_rel", ".", "mean", "(", ")", ",", "sq_rel", ".", "mean", "(", ")", ",", "rms", ".", "mean", "(", ")", ",", "log_rms", ".", "mean", "(", ")", ",", "a1", ".", "mean", "(", ")", ",", "a2", ".", "mean", "(", ")", ",", "a3", ".", "mean", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.save_depth.load_tensor_image": [[33, 41], ["imageio.imread().astype", "numpy.transpose", "skimage.transform.resize.astype", "imageio.imread", "skimage.transform.resize", "torch.from_numpy().unsqueeze", "torch.from_numpy"], "function", ["None"], ["def", "load_tensor_image", "(", "filename", ",", "args", ")", ":", "\n", "    ", "img", "=", "imread", "(", "filename", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "if", "(", "not", "args", ".", "no_resize", ")", "and", "(", "h", "!=", "args", ".", "img_height", "or", "w", "!=", "args", ".", "img_width", ")", ":", "\n", "        ", "img", "=", "imresize", "(", "img", ",", "(", "args", ".", "img_height", ",", "args", ".", "img_width", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "tensor_img", "=", "(", "(", "torch", ".", "from_numpy", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", "/", "255", "-", "0.5", ")", "/", "0.5", ")", ".", "to", "(", "device", ")", "\n", "return", "tensor_img", ",", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.save_depth.main": [[42, 84], ["torch.no_grad", "parser.parse_args", "print", "print", "sys.path.insert", "models.DispResNet().to", "torch.load", "models.DispResNet().to.load_state_dict", "models.DispResNet().to.eval", "path.Path", "print", "path.Path", "path.Path.makedirs_p", "tqdm.tqdm", "numpy.save", "os.path.join", "open", "list", "range", "save_depth.load_tensor_image", "datetime.datetime.now().strftime", "models.DispResNet", "f.read().splitlines", "len", "len", "models.DispResNet().to.cpu().numpy", "numpy.zeros", "datetime.datetime.now", "f.read", "models.DispResNet().to.cpu", "len", "models.DispResNet().to."], "function", ["home.repos.pwc.inspect_result.SeokjuLee_Insta-DM.kitti_eval.save_depth.load_tensor_image"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "\"=> Tested at {}\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m-%d-%H:%M\"", ")", ")", ")", "\n", "\n", "print", "(", "'=> Load dispnet model from {}'", ".", "format", "(", "args", ".", "pretrained_dispnet", ")", ")", "\n", "\n", "sys", ".", "path", ".", "insert", "(", "1", ",", "os", ".", "path", ".", "join", "(", "sys", ".", "path", "[", "0", "]", ",", "'..'", ")", ")", "\n", "import", "models", "\n", "\n", "disp_net", "=", "models", ".", "DispResNet", "(", ")", ".", "to", "(", "device", ")", "\n", "weights", "=", "torch", ".", "load", "(", "args", ".", "pretrained_dispnet", ")", "\n", "disp_net", ".", "load_state_dict", "(", "weights", "[", "'state_dict'", "]", ")", "\n", "disp_net", ".", "eval", "(", ")", "\n", "\n", "dataset_dir", "=", "Path", "(", "args", ".", "dataset_dir", ")", "\n", "with", "open", "(", "args", ".", "dataset_list", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "test_files", "=", "list", "(", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", ")", "\n", "", "print", "(", "'=> {} files to test'", ".", "format", "(", "len", "(", "test_files", ")", ")", ")", "\n", "\n", "output_dir", "=", "Path", "(", "args", ".", "output_dir", ")", "\n", "output_dir", ".", "makedirs_p", "(", ")", "\n", "\n", "for", "j", "in", "tqdm", "(", "range", "(", "len", "(", "test_files", ")", ")", ")", ":", "\n", "        ", "tgt_img", ",", "ori_img", "=", "load_tensor_image", "(", "dataset_dir", "+", "test_files", "[", "j", "]", ",", "args", ")", "\n", "pred_disp", "=", "disp_net", "(", "tgt_img", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", "\n", "# pdb.set_trace()", "\n", "'''\n            fig = plt.figure(9, figsize=(8, 10))\n            fig.add_subplot(2,1,1)\n            plt.imshow(ori_img.transpose(1,2,0)/255, vmin=0, vmax=1), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar()\n            fig.add_subplot(2,1,2)\n            plt.imshow(pred_disp), plt.grid(linestyle=':', linewidth=0.4), plt.colorbar()\n            fig.tight_layout(), plt.ion(), plt.show()\n        '''", "\n", "\n", "if", "j", "==", "0", ":", "\n", "            ", "predictions", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_files", ")", ",", "*", "pred_disp", ".", "shape", ")", ")", "\n", "", "predictions", "[", "j", "]", "=", "1", "/", "pred_disp", "\n", "\n", "", "np", ".", "save", "(", "output_dir", "/", "'predictions.npy'", ",", "predictions", ")", "\n", "\n"]]}