{"home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.batch_generator.BatchGenerator.__init__": [[15, 31], ["os.path.join", "range", "os.path.exists", "os.makedirs", "tensorflow.examples.tutorials.mnist.input_data.read_data_sets", "cv2.imread", "batch_generator.BatchGenerator.img_list.append", "cv2.imread.astype", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "read_dir", "=", "None", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", ";", "\n", "self", ".", "mnist", "=", "False", ";", "\n", "if", "(", "self", ".", "mnist", ")", ":", "\n", "            ", "data_directory", "=", "os", ".", "path", ".", "join", "(", "read_dir", ",", "\"mnist\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_directory", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "data_directory", ")", "\n", "", "self", ".", "train_data", "=", "mnist", ".", "input_data", ".", "read_data_sets", "(", "data_directory", ",", "one_hot", "=", "True", ")", ".", "train", "# binarized (0-1) mnist data", "\n", "", "else", ":", "\n", "            ", "self", ".", "img_list", "=", "[", "]", ";", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                ", "img_path", "=", "'./texture/simple/'", "+", "str", "(", "i", ")", "+", "'.jpg'", ";", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ",", "0", ")", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "\n", "\n", "self", ".", "img_list", ".", "append", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.batch_generator.BatchGenerator.next": [[32, 80], ["batch_generator.BatchGenerator.train_data.next_batch", "numpy.zeros", "numpy.zeros", "numpy.random.randint", "numpy.random.rand", "range", "numpy.random.seed", "len", "img_x.flatten", "img_y.flatten", "int", "int", "print", "print", "numpy.subtract"], "methods", ["None"], ["", "", "", "def", "next", "(", "self", ",", "direction", "=", "const", ".", "Direction", ".", "UP", ",", "debug", "=", "False", ")", ":", "\n", "        ", "if", "(", "self", ".", "mnist", ")", ":", "\n", "            ", "xtrain", ",", "_", "=", "self", ".", "train_data", ".", "next_batch", "(", "self", ".", "batch_size", ")", "# xtrain is (batch_size x img_size)", "\n", "", "else", ":", "\n", "            ", "img_dims", "=", "const", ".", "A", ";", "\n", "xtrain", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "img_dims", "*", "img_dims", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ytrain", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "img_dims", "*", "img_dims", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "(", "debug", ")", ":", "\n", "                ", "np", ".", "random", ".", "seed", "(", "10", ")", ";", "\n", "\n", "", "ran_imgs", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "img_list", ")", ",", "size", "=", "self", ".", "batch_size", ")", ";", "\n", "\n", "pts", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "batch_size", ",", "2", ")", "\n", "#pts = np.ones((self.batch_size,2))* 0.2;", "\n", "#print('direction ', direction, const.Direction.UP.value)", "\n", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "                ", "current_img", "=", "self", ".", "img_list", "[", "ran_imgs", "[", "i", "]", "]", "\n", "\n", "row", ",", "col", "=", "img_dims", "+", "pts", "[", "i", ",", "0", ":", "2", "]", "*", "np", ".", "subtract", "(", "current_img", ".", "shape", ",", "(", "3", "*", "img_dims", ",", "3", "*", "img_dims", ")", ")", "\n", "row", ",", "col", "=", "int", "(", "row", ")", ",", "int", "(", "col", ")", "\n", "\n", "#print(row,col,current_img.shape)", "\n", "\n", "if", "(", "row", "+", "img_dims", ">", "current_img", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "print", "(", "'Something is bad'", ")", ";", "\n", "\n", "", "if", "(", "col", "+", "img_dims", ">", "current_img", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "print", "(", "'Something is bad'", ")", ";", "\n", "\n", "", "img_x", "=", "current_img", "[", "row", ":", "row", "+", "img_dims", ",", "col", ":", "col", "+", "img_dims", "]", ";", "\n", "\n", "if", "direction", "==", "const", ".", "Direction", ".", "UP", ".", "value", ":", "\n", "                    ", "img_y", "=", "current_img", "[", "row", "-", "img_dims", ":", "row", ",", "col", ":", "col", "+", "img_dims", "]", ";", "\n", "", "elif", "direction", "==", "const", ".", "Direction", ".", "DOWN", ".", "value", ":", "\n", "                    ", "img_y", "=", "current_img", "[", "row", "+", "img_dims", ":", "row", "+", "2", "*", "img_dims", ",", "col", ":", "col", "+", "img_dims", "]", ";", "\n", "#print(np.subtract(current_img.shape, (2 * img_dims, 2 * img_dims)))", "\n", "#print(row + img_dims, row + 2* img_dims)", "\n", "#print(row,col,current_img.shape)", "\n", "#print(img_y.shape)", "\n", "", "elif", "direction", "==", "const", ".", "Direction", ".", "RIGHT", ".", "value", ":", "\n", "                    ", "img_y", "=", "current_img", "[", "row", ":", "row", "+", "img_dims", ",", "col", "+", "img_dims", ":", "col", "+", "2", "*", "img_dims", "]", ";", "\n", "", "elif", "direction", "==", "const", ".", "Direction", ".", "LEFT", ".", "value", ":", "\n", "                    ", "img_y", "=", "current_img", "[", "row", ":", "row", "+", "img_dims", ",", "col", "-", "img_dims", ":", "col", "]", ";", "\n", "\n", "", "xtrain", "[", "i", ",", ":", "]", "=", "img_x", ".", "flatten", "(", ")", ";", "\n", "ytrain", "[", "i", ",", ":", "]", "=", "img_y", ".", "flatten", "(", ")", ";", "\n", "#print('Generating texture');", "\n", "", "", "return", "xtrain", ",", "xtrain", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw.linear": [[52, 61], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.constant_initializer", "x.get_shape"], "function", ["None"], ["def", "linear", "(", "x", ",", "output_dim", ")", ":", "\n", "    ", "\"\"\"\n    affine transformation Wx+b\n    assumes x.shape = (batch_size, num_features)\n    \"\"\"", "\n", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "[", "x", ".", "get_shape", "(", ")", "[", "1", "]", ",", "output_dim", "]", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "output_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "return", "tf", ".", "matmul", "(", "x", ",", "w", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw.filterbank": [[63, 78], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.exp", "tensorflow.exp", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.range", "tensorflow.range", "tensorflow.range", "tensorflow.square", "tensorflow.square", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "function", ["None"], ["", "def", "filterbank", "(", "gx", ",", "gy", ",", "sigma2", ",", "delta", ",", "N", ")", ":", "\n", "    ", "grid_i", "=", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "tf", ".", "range", "(", "N", ")", ",", "tf", ".", "float32", ")", ",", "[", "1", ",", "-", "1", "]", ")", "\n", "mu_x", "=", "gx", "+", "(", "grid_i", "-", "N", "/", "2", "-", "0.5", ")", "*", "delta", "# eq 19", "\n", "mu_y", "=", "gy", "+", "(", "grid_i", "-", "N", "/", "2", "-", "0.5", ")", "*", "delta", "# eq 20", "\n", "a", "=", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "tf", ".", "range", "(", "A", ")", ",", "tf", ".", "float32", ")", ",", "[", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "b", "=", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "tf", ".", "range", "(", "B", ")", ",", "tf", ".", "float32", ")", ",", "[", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "mu_x", "=", "tf", ".", "reshape", "(", "mu_x", ",", "[", "-", "1", ",", "N", ",", "1", "]", ")", "\n", "mu_y", "=", "tf", ".", "reshape", "(", "mu_y", ",", "[", "-", "1", ",", "N", ",", "1", "]", ")", "\n", "sigma2", "=", "tf", ".", "reshape", "(", "sigma2", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "Fx", "=", "tf", ".", "exp", "(", "-", "tf", ".", "square", "(", "(", "a", "-", "mu_x", ")", "/", "(", "2", "*", "sigma2", ")", ")", ")", "# 2*sigma2?", "\n", "Fy", "=", "tf", ".", "exp", "(", "-", "tf", ".", "square", "(", "(", "b", "-", "mu_y", ")", "/", "(", "2", "*", "sigma2", ")", ")", ")", "# batch x N x B", "\n", "# normalize, sum over A and B dims", "\n", "Fx", "=", "Fx", "/", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "Fx", ",", "2", ",", "keep_dims", "=", "True", ")", ",", "eps", ")", "\n", "Fy", "=", "Fy", "/", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "Fy", ",", "2", ",", "keep_dims", "=", "True", ")", ",", "eps", ")", "\n", "return", "Fx", ",", "Fy", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw.attn_window": [[80, 90], ["tensorflow.split", "tensorflow.exp", "tensorflow.variable_scope", "draw.linear", "tensorflow.exp", "draw.filterbank", "tensorflow.exp", "max"], "function", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.linear", "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.filterbank"], ["", "def", "attn_window", "(", "scope", ",", "h_dec", ",", "N", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "DO_SHARE", ")", ":", "\n", "        ", "params", "=", "linear", "(", "h_dec", ",", "5", ")", "\n", "# gx_, gy_, log_sigma2, log_delta, log_gamma=tf.split(1, 5, params)", "\n", "", "gx_", ",", "gy_", ",", "log_sigma2", ",", "log_delta", ",", "log_gamma", "=", "tf", ".", "split", "(", "params", ",", "5", ",", "1", ")", "\n", "gx", "=", "(", "A", "+", "1", ")", "/", "2", "*", "(", "gx_", "+", "1", ")", "\n", "gy", "=", "(", "B", "+", "1", ")", "/", "2", "*", "(", "gy_", "+", "1", ")", "\n", "sigma2", "=", "tf", ".", "exp", "(", "log_sigma2", ")", "\n", "delta", "=", "(", "max", "(", "A", ",", "B", ")", "-", "1", ")", "/", "(", "N", "-", "1", ")", "*", "tf", ".", "exp", "(", "log_delta", ")", "# batch x N", "\n", "return", "filterbank", "(", "gx", ",", "gy", ",", "sigma2", ",", "delta", ",", "N", ")", "+", "(", "tf", ".", "exp", "(", "log_gamma", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw.read_no_attn": [[93, 95], ["tensorflow.concat"], "function", ["None"], ["", "def", "read_no_attn", "(", "x", ",", "x_hat", ",", "h_dec_prev", ")", ":", "\n", "    ", "return", "tf", ".", "concat", "(", "[", "x", ",", "x_hat", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw.read_attn": [[97, 109], ["draw.attn_window", "draw.read_attn.filter_img"], "function", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.attn_window"], ["", "def", "read_attn", "(", "x", ",", "x_hat", ",", "h_dec_prev", ")", ":", "\n", "    ", "Fx", ",", "Fy", ",", "gamma", "=", "attn_window", "(", "\"read\"", ",", "h_dec_prev", ",", "read_n", ")", "\n", "\n", "def", "filter_img", "(", "img", ",", "Fx", ",", "Fy", ",", "gamma", ",", "N", ")", ":", "\n", "        ", "Fxt", "=", "tf", ".", "transpose", "(", "Fx", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "img", "=", "tf", ".", "reshape", "(", "img", ",", "[", "-", "1", ",", "B", ",", "A", "]", ")", "\n", "glimpse", "=", "tf", ".", "matmul", "(", "Fy", ",", "tf", ".", "matmul", "(", "img", ",", "Fxt", ")", ")", "\n", "glimpse", "=", "tf", ".", "reshape", "(", "glimpse", ",", "[", "-", "1", ",", "N", "*", "N", "]", ")", "\n", "return", "glimpse", "*", "tf", ".", "reshape", "(", "gamma", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "", "x", "=", "filter_img", "(", "x", ",", "Fx", ",", "Fy", ",", "gamma", ",", "read_n", ")", "# batch x (read_n*read_n)", "\n", "x_hat", "=", "filter_img", "(", "x_hat", ",", "Fx", ",", "Fy", ",", "gamma", ",", "read_n", ")", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "x_hat", "]", ",", "1", ")", "# concat along feature axis", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw.encode": [[115, 124], ["tensorflow.variable_scope", "lstm_enc"], "function", ["None"], ["def", "encode", "(", "state", ",", "input", ")", ":", "\n", "    ", "\"\"\"\n    run LSTM\n    state = previous encoder state\n    input = cat(read, h_dec_prev)\n    returns: (output,  new_state)\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\"encoder\"", ",", "reuse", "=", "DO_SHARE", ")", ":", "\n", "        ", "return", "lstm_enc", "(", "input", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw.sampleQ": [[128, 139], ["tensorflow.variable_scope", "draw.linear", "tensorflow.variable_scope", "draw.linear", "tensorflow.exp"], "function", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.linear", "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.linear"], ["", "", "def", "sampleQ", "(", "h_enc", ")", ":", "\n", "    ", "\"\"\"\n    Samples Zt ~ normrnd(mu,sigma) via reparameterization trick for normal dist\n    mu is (batch, z_size)\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\"mu\"", ",", "reuse", "=", "DO_SHARE", ")", ":", "\n", "        ", "mu", "=", "linear", "(", "h_enc", ",", "z_size", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"sigma\"", ",", "reuse", "=", "DO_SHARE", ")", ":", "\n", "        ", "logsigma", "=", "linear", "(", "h_enc", ",", "z_size", ")", "\n", "sigma", "=", "tf", ".", "exp", "(", "logsigma", ")", "\n", "", "return", "(", "mu", "+", "sigma", "*", "e", ",", "mu", ",", "logsigma", ",", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw.decode": [[142, 145], ["tensorflow.variable_scope", "lstm_dec"], "function", ["None"], ["", "def", "decode", "(", "state", ",", "input", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"decoder\"", ",", "reuse", "=", "DO_SHARE", ")", ":", "\n", "        ", "return", "lstm_dec", "(", "input", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw.write_no_attn": [[148, 151], ["tensorflow.variable_scope", "draw.linear"], "function", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.linear"], ["", "", "def", "write_no_attn", "(", "h_dec", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"write\"", ",", "reuse", "=", "DO_SHARE", ")", ":", "\n", "        ", "return", "linear", "(", "h_dec", ",", "img_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw.write_attn": [[153, 164], ["tensorflow.reshape", "draw.attn_window", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.variable_scope", "draw.linear", "tensorflow.matmul", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.attn_window", "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.linear"], ["", "", "def", "write_attn", "(", "h_dec", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"writeW\"", ",", "reuse", "=", "DO_SHARE", ")", ":", "\n", "        ", "w", "=", "linear", "(", "h_dec", ",", "write_size", ")", "# batch x (write_n*write_n)", "\n", "", "N", "=", "write_n", "\n", "w", "=", "tf", ".", "reshape", "(", "w", ",", "[", "batch_size", ",", "N", ",", "N", "]", ")", "\n", "Fx", ",", "Fy", ",", "gamma", "=", "attn_window", "(", "\"write\"", ",", "h_dec", ",", "write_n", ")", "\n", "Fyt", "=", "tf", ".", "transpose", "(", "Fy", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "wr", "=", "tf", ".", "matmul", "(", "Fyt", ",", "tf", ".", "matmul", "(", "w", ",", "Fx", ")", ")", "\n", "wr", "=", "tf", ".", "reshape", "(", "wr", ",", "[", "batch_size", ",", "B", "*", "A", "]", ")", "\n", "# gamma = tf.tile(gamma, [1, B*A])", "\n", "return", "wr", "*", "tf", ".", "reshape", "(", "1.0", "/", "gamma", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw.binary_crossentropy": [[196, 198], ["tensorflow.log", "tensorflow.log"], "function", ["None"], ["", "def", "binary_crossentropy", "(", "t", ",", "o", ")", ":", "\n", "    ", "return", "-", "(", "t", "*", "tf", ".", "log", "(", "o", "+", "eps", ")", "+", "(", "1.0", "-", "t", ")", "*", "tf", ".", "log", "(", "1.0", "-", "o", "+", "eps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_synthesis.generateTile": [[19, 61], ["enumerate", "range", "in_img.flatten", "numpy.repeat", "sess.run", "numpy.array", "numpy.reshape", "cv2.imwrite", "cv2.imwrite", "numpy.exp", "str", "str", "str"], "function", ["None"], ["def", "generateTile", "(", "output_img", ",", "radius", ",", "dir", ",", "texture_list", "=", "[", "0", "]", ",", "input_img_col_shift", "=", "0", ")", ":", "\n", "    ", "generate_gif", "=", "False", ";", "\n", "if", "(", "dir", "==", "const", ".", "Direction", ".", "RIGHT", ")", ":", "\n", "        ", "col_offest", "=", "1", ";", "\n", "row_offest", "=", "0", ";", "\n", "", "elif", "(", "dir", "==", "const", ".", "Direction", ".", "LEFT", ")", ":", "\n", "        ", "col_offest", "=", "-", "1", ";", "\n", "row_offest", "=", "0", ";", "\n", "", "elif", "(", "dir", "==", "const", ".", "Direction", ".", "UP", ")", ":", "\n", "        ", "col_offest", "=", "0", ";", "\n", "row_offest", "=", "-", "1", ";", "\n", "", "elif", "(", "dir", "==", "const", ".", "Direction", ".", "DOWN", ")", ":", "\n", "        ", "col_offest", "=", "0", ";", "\n", "row_offest", "=", "1", ";", "\n", "\n", "", "gif_step", "=", "0", "\n", "for", "idx", ",", "texture_id", "in", "enumerate", "(", "texture_list", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "radius", ")", ":", "\n", "            ", "in_offset", "=", "[", "const", ".", "B", "*", "(", "radius", "+", "i", "*", "row_offest", ")", ",", "const", ".", "B", "*", "(", "radius", "+", "i", "*", "col_offest", "+", "input_img_col_shift", ")", "]", "\n", "\n", "out_offest", "=", "[", "const", ".", "B", "*", "(", "radius", "+", "(", "i", "+", "1", ")", "*", "row_offest", ")", ",", "const", ".", "B", "*", "(", "radius", "+", "(", "i", "+", "1", ")", "*", "col_offest", "+", "input_img_col_shift", ")", "]", "\n", "\n", "in_img", "=", "output_img", "[", "in_offset", "[", "0", "]", ":", "in_offset", "[", "0", "]", "+", "const", ".", "B", ",", "in_offset", "[", "1", "]", ":", "in_offset", "[", "1", "]", "+", "const", ".", "B", ",", ":", ",", "idx", "]", ";", "\n", "\n", "row_img", "=", "in_img", ".", "flatten", "(", ")", ";", "\n", "row_img", "=", "row_img", "[", "np", ".", "newaxis", ",", ":", "]", ";", "\n", "row_img", "=", "np", ".", "repeat", "(", "row_img", ",", "const", ".", "batch_size", ",", "0", ")", "\n", "## Need to update the model to take variable batch size", "\n", "feed_dict", "=", "{", "model", ".", "x", ":", "row_img", "}", "\n", "canvases", "=", "sess", ".", "run", "(", "model", ".", "cs", ",", "feed_dict", ")", "# generate some examples", "\n", "canvases", "=", "np", ".", "array", "(", "canvases", ")", "# T x batch x img_size", "\n", "\n", "y_recons", "=", "1.0", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "canvases", ")", ")", "# x_recons = sigmoid(canvas)", "\n", "\n", "out_img", "=", "np", ".", "reshape", "(", "y_recons", "[", "-", "1", ",", "texture_id", ",", ":", "]", ",", "(", "B", ",", "B", ",", "const", ".", "num_channels", ")", ")", "\n", "#cv2.imwrite('./test/out_real.png',out_img * 255)", "\n", "output_img", "[", "out_offest", "[", "0", "]", ":", "out_offest", "[", "0", "]", "+", "B", ",", "out_offest", "[", "1", "]", ":", "out_offest", "[", "1", "]", "+", "B", ",", ":", ",", "idx", "]", "=", "out_img", ";", "\n", "\n", "cv2", ".", "imwrite", "(", "'./test/'", "+", "str", "(", "texture_id", ")", "+", "'_reconstructed.png'", ",", "output_img", "[", ":", ",", ":", ",", ":", ",", "idx", "]", "*", "255", ")", "\n", "if", "(", "generate_gif", ")", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "'./test/'", "+", "str", "(", "generateTile", ".", "gif_step", ")", "+", "\"_\"", "+", "str", "(", "texture_id", ")", "+", "'_reconstructed.png'", ",", "output_img", "[", ":", ",", ":", ",", ":", ",", "idx", "]", "*", "255", ")", "\n", "generateTile", ".", "gif_step", "+=", "1", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_loss.TextureLoss.__init__": [[9, 30], ["pickle.load", "pickle.load", "centroids.astype.astype.astype", "filter_kernel.reshape().astype.reshape().astype.reshape().astype", "tensorflow.convert_to_tensor", "open", "open", "filter_kernel.reshape().astype.reshape().astype.reshape"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filter_file_path", ",", "centroids_file_path", ",", "num_bins", ",", "\n", "batch_sz", ")", ":", "\n", "        ", "\"\"\"\n        filter_file_path: path to pickled LM filter\n        centroids_file_path: path to pickled filter response centroids\n        num_bins: number of bins for the output texture histogram\n        batch_sz: mini_batch size\n        \"\"\"", "\n", "self", ".", "num_bins", "=", "num_bins", "\n", "self", ".", "batch_sz", "=", "batch_sz", "\n", "\n", "# Load filters", "\n", "filter_kernel", "=", "pkl", ".", "load", "(", "open", "(", "filter_file_path", ",", "'rb'", ")", ")", "\n", "centroids", "=", "pkl", ".", "load", "(", "open", "(", "centroids_file_path", ",", "'rb'", ")", ")", "\n", "centroids", "=", "centroids", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Change LM filter to 4D (for convolution)", "\n", "filter_kernel", "=", "filter_kernel", ".", "reshape", "(", "(", "49", ",", "49", ",", "1", ",", "48", ")", ")", ".", "astype", "(", "\n", "np", ".", "float32", ")", "\n", "self", ".", "filter_tf", "=", "tf", ".", "convert_to_tensor", "(", "filter_kernel", ")", "\n", "self", ".", "centroids_numpy", "=", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_loss.TextureLoss.gaussian_loss": [[31, 33], ["tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "gaussian_loss", "(", "self", ",", "t", ",", "o", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "l2_loss", "(", "o", "-", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_loss.TextureLoss.mean_color_loss": [[34, 40], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "mean_color_loss", "(", "self", ",", "t", ",", "o", ")", ":", "\n", "#print('mean shape ', o.shape)", "\n", "        ", "reduced_o", "=", "tf", ".", "reduce_sum", "(", "o", ",", "axis", "=", "1", ")", ";", "\n", "reduced_t", "=", "tf", ".", "reduce_sum", "(", "t", ",", "axis", "=", "1", ")", ";", "\n", "#print('reduced_img  shape ', reduced_img .shape)", "\n", "return", "tf", ".", "nn", ".", "l2_loss", "(", "reduced_o", "-", "reduced_t", ")", "\n", "#return tf.nn.l2_loss(o - t)", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_loss.TextureLoss.binary_crossentropy": [[41, 44], ["tensorflow.log", "tensorflow.log"], "methods", ["None"], ["", "def", "binary_crossentropy", "(", "self", ",", "t", ",", "o", ")", ":", "\n", "        ", "return", "-", "(", "t", "*", "tf", ".", "log", "(", "o", "+", "const", ".", "eps", ")", "+", "(", "\n", "1.0", "-", "t", ")", "*", "tf", ".", "log", "(", "1.0", "-", "o", "+", "const", ".", "eps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_loss.TextureLoss.texture_filter_bank_loss": [[45, 69], ["tensorflow.reshape", "tensorflow.reshape", "texture_loss.im2filter_response", "texture_loss.im2filter_response", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_loss.im2filter_response", "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_loss.im2filter_response"], ["", "def", "texture_filter_bank_loss", "(", "self", ",", "y", ",", "y_gt", ")", ":", "\n", "\n", "        ", "y", "=", "tf", ".", "reshape", "(", "y", ",", "[", "self", ".", "batch_sz", ",", "28", ",", "28", ",", "1", "]", ")", "\n", "y_gt", "=", "tf", ".", "reshape", "(", "y_gt", ",", "[", "self", ".", "batch_sz", ",", "28", ",", "28", ",", "1", "]", ")", "\n", "\n", "y_filter_response", "=", "im2filter_response", "(", "y", ",", "self", ".", "filter_tf", ")", "\n", "y_gt_filter_response", "=", "im2filter_response", "(", "y_gt", ",", "self", ".", "filter_tf", ")", "\n", "l2_loss2", "=", "tf", ".", "nn", ".", "l2_loss", "(", "y_filter_response", "-", "y_gt_filter_response", ")", "\n", "#print('Loss shape ',tf.shape(l2_loss2))", "\n", "# y_hist = filter_response2histogram(", "\n", "#     y_filter_response, self.centroids_numpy, self.num_bins,", "\n", "#     self.batch_sz)", "\n", "# y_gt_hist = filter_response2histogram(", "\n", "#     y_gt_filter_response, self.centroids_numpy, self.num_bins,", "\n", "#     self.batch_sz)", "\n", "#", "\n", "# # l2_loss = tf.reduce_mean(tf.nn.l2_loss(y_hist - y_gt_hist))", "\n", "# #self.hist = y_hist;", "\n", "# #l2_loss = tf.nn.l2_loss(y_hist - y_gt_hist)", "\n", "#", "\n", "# #l2_loss = tf.reduce_sum(tf.abs(y_hist - y_gt_hist))", "\n", "# equ = tf.equal(y_hist , y_gt_hist);", "\n", "#l2_loss = -tf.reduce_sum(equ )", "\n", "return", "l2_loss2", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_loss.im2filter_response": [[71, 98], ["tensorflow.nn.moments", "imgs.get_shape", "print", "tensorflow.nn.conv2d", "tensorflow.norm", "tensorflow.log", "tensorflow.multiply", "tensorflow.divide", "tensorflow.sqrt", "slice", "slice"], "function", ["None"], ["", "", "def", "im2filter_response", "(", "imgs", ",", "filter_kernel_4d", ")", ":", "\n", "    ", "\"\"\"\n    constructs texture filter response for a mini-batch of grayscale images\n    imgs: NxHxWx1 batch of *GRAYSCALE* images\n    filter_kernel: 4-D filter kernel [height x width x 1 x num_channels]\n    returns NxHxWxC tensor of C-channels of filter responses\n    \"\"\"", "\n", "# normalize each image", "\n", "means", ",", "variances", "=", "tf", ".", "nn", ".", "moments", "(", "imgs", ",", "axes", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keep_dims", "=", "True", ")", "\n", "imgs", "=", "(", "imgs", "-", "means", ")", "/", "tf", ".", "sqrt", "(", "variances", ")", "\n", "\n", "# Flip kernels so to convert Tf's cross-correlation to actual convolution!", "\n", "flip", "=", "[", "slice", "(", "None", ",", "None", ",", "-", "1", ")", ",", "slice", "(", "None", ",", "None", ",", "-", "1", ")", "]", "\n", "filter_kernel_4d", "=", "filter_kernel_4d", "[", "flip", "]", "\n", "\n", "# num_channels = filter_kernel_4d.get_shape()[-1]", "\n", "mini_batch_shape", "=", "imgs", ".", "get_shape", "(", ")", "\n", "print", "(", "mini_batch_shape", ")", "\n", "# [n_batch, height, width, _] = mini_batch_shape", "\n", "\n", "response", "=", "tf", ".", "nn", ".", "conv2d", "(", "imgs", ",", "filter_kernel_4d", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ")", "\n", "response_norm", "=", "tf", ".", "norm", "(", "response", ",", "axis", "=", "3", ",", "keep_dims", "=", "True", ")", "# NxHxWx1", "\n", "sc", "=", "tf", ".", "log", "(", "1", "+", "(", "response_norm", "/", "0.03", ")", ")", "\n", "\n", "numerator", "=", "tf", ".", "multiply", "(", "response", ",", "sc", ")", "\n", "return", "tf", ".", "divide", "(", "numerator", ",", "response_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_loss.filter_response2histogram": [[100, 143], ["tensorflow.convert_to_tensor", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.square", "tensorflow.reduce_sum", "tensorflow.argmin", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.histogram_fixed_width", "tensorflow.reshape", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.range"], "function", ["None"], ["", "def", "filter_response2histogram", "(", "filter_responses", ",", "training_class_centroids", ",", "\n", "num_bins", ",", "batch_sz", ")", ":", "\n", "    ", "\"\"\"\n    Builds texture descriptor (normalized histogram) from filter response\n    filter_responses: NxHxWxC tensor where C is number of filter channels\n    training_class_centroids: NxC NumPy array. N is # of centroids\n    num_bins: number of bins in the output histogram (MUST be a divisor of\n    the number of centroids)\n    batch_sz: mini_batch size\n    \"\"\"", "\n", "\n", "# 1) Compute KNN for each pixel in each image in the mini_batch", "\n", "\n", "num_centroids", ",", "response_sz", "=", "training_class_centroids", ".", "shape", "\n", "training_class_centroids", "=", "tf", ".", "convert_to_tensor", "(", "training_class_centroids", ")", "\n", "\n", "queries", "=", "tf", ".", "reshape", "(", "filter_responses", ",", "[", "batch_sz", ",", "-", "1", ",", "1", ",", "response_sz", "]", ")", "\n", "centroids", "=", "tf", ".", "reshape", "(", "training_class_centroids", ",", "[", "1", ",", "1", ",", "num_centroids", ",", "-", "1", "]", ")", "\n", "\n", "diff", "=", "tf", ".", "square", "(", "queries", "-", "centroids", ")", "\n", "dist", "=", "tf", ".", "reduce_sum", "(", "diff", ",", "axis", "=", "3", ")", "\n", "# knn = tf.argmin(dist, axis=2, output_type=tf.int32)  #TF v1.4", "\n", "knn", "=", "tf", ".", "argmin", "(", "dist", ",", "axis", "=", "2", ")", "\n", "knn", "=", "tf", ".", "cast", "(", "knn", ",", "tf", ".", "float32", ")", "\n", "\n", "# 2) Compute a histogram for each image. NxNUM_BINS", "\n", "\n", "# The following is a work around to compute separate histograms for", "\n", "# each image in the mini_batch", "\n", "batch_shifter", "=", "tf", ".", "range", "(", "0", ",", "batch_sz", ",", "dtype", "=", "tf", ".", "float32", ")", "*", "num_centroids", "\n", "batch_shifter", "=", "tf", ".", "expand_dims", "(", "batch_shifter", ",", "-", "1", ")", "# for broadcasting", "\n", "knn", "=", "knn", "+", "batch_shifter", "\n", "histograms_flattened", "=", "tf", ".", "histogram_fixed_width", "(", "\n", "knn", ",", "[", "0.0", ",", "num_centroids", "*", "batch_sz", "*", "1.0", "]", ",", "num_bins", "*", "batch_sz", ")", "\n", "histograms", "=", "tf", ".", "reshape", "(", "histograms_flattened", ",", "[", "batch_sz", ",", "-", "1", "]", ")", "\n", "histograms", "=", "tf", ".", "cast", "(", "histograms", ",", "tf", ".", "float32", ")", "\n", "\n", "# 3) Normalize each histogram by dividing it by its sum", "\n", "\n", "hist_sums", "=", "tf", ".", "reduce_sum", "(", "histograms", ",", "axis", "=", "1", ",", "keep_dims", "=", "True", ")", "\n", "normalized_histograms", "=", "histograms", "/", "hist_sums", "\n", "\n", "return", "normalized_histograms", "\n", "", ""]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.plot_data.xrecons_grid": [[16, 39], ["int", "X.reshape.reshape", "range", "numpy.sqrt", "numpy.ones", "range"], "function", ["None"], ["", "def", "xrecons_grid", "(", "X", ",", "B", ",", "A", ")", ":", "\n", "        ", "\"\"\"\n        plots canvas for single time step\n        X is x_recons, (batch_size x img_size)\n        assumes features = BxA images\n        batch is assumed to be a square number\n        \"\"\"", "\n", "padsize", "=", "1", "\n", "padval", "=", ".5", "\n", "ph", "=", "B", "+", "2", "*", "padsize", "\n", "pw", "=", "A", "+", "2", "*", "padsize", "\n", "batch_size", "=", "X", ".", "shape", "[", "0", "]", "\n", "N", "=", "int", "(", "np", ".", "sqrt", "(", "batch_size", ")", ")", "\n", "X", "=", "X", ".", "reshape", "(", "(", "N", ",", "N", ",", "B", ",", "A", ")", ")", "\n", "img", "=", "np", ".", "ones", "(", "(", "N", "*", "ph", ",", "N", "*", "pw", ")", ")", "*", "padval", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "                        ", "startr", "=", "i", "*", "ph", "+", "padsize", "\n", "endr", "=", "startr", "+", "B", "\n", "startc", "=", "j", "*", "pw", "+", "padsize", "\n", "endc", "=", "startc", "+", "A", "\n", "img", "[", "startr", ":", "endr", ",", "startc", ":", "endc", "]", "=", "X", "[", "i", ",", "j", ",", ":", ",", ":", "]", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_figure.generateTile": [[18, 55], ["enumerate", "range", "in_img.flatten", "numpy.repeat", "sess.run", "numpy.array", "cv2.imwrite", "numpy.reshape", "numpy.exp", "str", "str"], "function", ["None"], ["def", "generateTile", "(", "output_img", ",", "radius", ",", "dir", ",", "texture_list", "=", "[", "0", "]", ",", "input_img_col_shift", "=", "0", ")", ":", "\n", "    ", "if", "(", "dir", "==", "const", ".", "Direction", ".", "RIGHT", ")", ":", "\n", "        ", "col_offest", "=", "1", ";", "\n", "row_offest", "=", "0", ";", "\n", "", "elif", "(", "dir", "==", "const", ".", "Direction", ".", "LEFT", ")", ":", "\n", "        ", "col_offest", "=", "-", "1", ";", "\n", "row_offest", "=", "0", ";", "\n", "", "elif", "(", "dir", "==", "const", ".", "Direction", ".", "UP", ")", ":", "\n", "        ", "col_offest", "=", "0", ";", "\n", "row_offest", "=", "-", "1", ";", "\n", "", "elif", "(", "dir", "==", "const", ".", "Direction", ".", "DOWN", ")", ":", "\n", "        ", "col_offest", "=", "0", ";", "\n", "row_offest", "=", "1", ";", "\n", "\n", "", "for", "idx", ",", "texture_id", "in", "enumerate", "(", "texture_list", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "radius", ")", ":", "\n", "            ", "in_offset", "=", "[", "const", ".", "B", "*", "(", "radius", "+", "i", "*", "row_offest", ")", ",", "const", ".", "B", "*", "(", "radius", "+", "i", "*", "col_offest", "+", "input_img_col_shift", ")", "]", "\n", "out_offest", "=", "[", "const", ".", "B", "*", "(", "radius", "+", "(", "i", "+", "1", ")", "*", "row_offest", ")", ",", "const", ".", "B", "*", "(", "radius", "+", "(", "i", "+", "1", ")", "*", "col_offest", "+", "input_img_col_shift", ")", "]", "\n", "\n", "in_img", "=", "output_img", "[", "in_offset", "[", "0", "]", ":", "in_offset", "[", "0", "]", "+", "const", ".", "B", ",", "in_offset", "[", "1", "]", ":", "in_offset", "[", "1", "]", "+", "const", ".", "B", ",", "idx", "]", ";", "\n", "\n", "row_img", "=", "in_img", ".", "flatten", "(", ")", ";", "\n", "row_img", "=", "row_img", "[", "np", ".", "newaxis", ",", ":", "]", ";", "\n", "row_img", "=", "np", ".", "repeat", "(", "row_img", ",", "100", ",", "0", ")", "\n", "## Need to update the model to take variable batch size", "\n", "feed_dict", "=", "{", "model", ".", "x", ":", "row_img", ",", "model", ".", "y", ":", "row_img", "}", "\n", "canvases", "=", "sess", ".", "run", "(", "model", ".", "cs", ",", "feed_dict", ")", "# generate some examples", "\n", "canvases", "=", "np", ".", "array", "(", "canvases", ")", "# T x batch x img_size", "\n", "T", ",", "batch_size", ",", "img_size", "=", "canvases", ".", "shape", "\n", "y_recons", "=", "1.0", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "canvases", ")", ")", "# x_recons = sigmoid(canvas)", "\n", "#print(texture_id)", "\n", "#print(y_recons[-1,texture_id,:].shape)", "\n", "out_img", "=", "np", ".", "reshape", "(", "y_recons", "[", "-", "1", ",", "texture_id", ",", ":", "]", ",", "(", "B", ",", "B", ")", ")", "*", "255", "\n", "#print(out_img.shape)", "\n", "#print(output_img[out_offest[0]:out_offest[0]+B,out_offest[1]:out_offest[1]+B,idx].shape)", "\n", "output_img", "[", "out_offest", "[", "0", "]", ":", "out_offest", "[", "0", "]", "+", "B", ",", "out_offest", "[", "1", "]", ":", "out_offest", "[", "1", "]", "+", "B", ",", "idx", "]", "=", "out_img", ";", "\n", "cv2", ".", "imwrite", "(", "'./test/'", "+", "str", "(", "texture_id", ")", "+", "'myattn_deploy3_'", "+", "str", "(", "i", ")", "+", "'real.png'", ",", "output_img", "[", ":", ",", ":", ",", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_descriptor_main.toy_example": [[13, 49], ["skimage.io.imread", "skimage.io.imread", "skimage.color.rgb2gray", "skimage.color.rgb2gray", "img1.reshape().astype.reshape().astype", "img2.reshape().astype.reshape().astype", "numpy.stack", "pickle.load", "pickle.load", "lm_centroids.astype.astype", "filter_kernel.reshape().astype.reshape().astype", "texture_loss.im2filter_response", "texture_loss.filter_response2histogram", "print", "open", "open", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.Session", "sess.run", "img1.reshape().astype.reshape", "img2.reshape().astype.reshape", "filter_kernel.reshape().astype.reshape"], "function", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_loss.im2filter_response", "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_loss.filter_response2histogram"], ["def", "toy_example", "(", ")", ":", "\n", "# Load images and convert to grayscale", "\n", "    ", "img1", "=", "skimage", ".", "io", ".", "imread", "(", "'texture/trivial/0.jpg'", ")", "\n", "# img2 = skimage.io.imread('texture/trivial/1.jpg')", "\n", "img2", "=", "skimage", ".", "io", ".", "imread", "(", "'texture/trivial/0.jpg'", ")", "\n", "img1", "=", "rgb2gray", "(", "img1", ")", "\n", "img2", "=", "rgb2gray", "(", "img2", ")", "\n", "img1", "=", "img1", "[", "0", ":", "50", ",", "0", ":", "50", "]", "\n", "img2", "=", "img2", "[", "0", ":", "50", ",", "0", ":", "50", "]", "\n", "\n", "# Construct mini-batch", "\n", "img1", "=", "img1", ".", "reshape", "(", "img1", ".", "shape", "+", "(", "1", ",", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img2", "=", "img2", ".", "reshape", "(", "img2", ".", "shape", "+", "(", "1", ",", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mini_batch", "=", "np", ".", "stack", "(", "(", "img1", ",", "img2", ")", ")", "\n", "\n", "# Load filters", "\n", "filter_kernel", "=", "pkl", ".", "load", "(", "open", "(", "'filters/np_LM_filter_p2.pkl'", ",", "'rb'", ")", ")", "\n", "lm_centroids", "=", "pkl", ".", "load", "(", "open", "(", "'filters/np_centroids_p2.pkl'", ",", "'rb'", ")", ")", "\n", "lm_centroids", "=", "lm_centroids", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Change filters to 4D (for convolution)", "\n", "filter_kernel", "=", "filter_kernel", ".", "reshape", "(", "(", "49", ",", "49", ",", "1", ",", "48", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Build operations", "\n", "filter_response_op", "=", "im2filter_response", "(", "\n", "tf", ".", "convert_to_tensor", "(", "mini_batch", ")", ",", "tf", ".", "convert_to_tensor", "(", "filter_kernel", ")", ")", "\n", "\n", "# centroids_op = tf.convert_to_tensor(lm_centroids)", "\n", "num_bins", "=", "20", "\n", "hists_op", "=", "filter_response2histogram", "(", "filter_response_op", ",", "lm_centroids", ",", "\n", "num_bins", ",", "2", ")", "\n", "\n", "# Run im2filter_response in tensorflow", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "filter_response", ",", "hists", "=", "sess", ".", "run", "(", "[", "filter_response_op", ",", "hists_op", "]", ")", "\n", "", "print", "(", "hists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_descriptor_main.debug_descriptor": [[51, 93], ["os.join", "tensorflow.InteractiveSession", "glob.glob", "scipy.savemat", "tf.InteractiveSession.close", "skimage.io.imread", "skimage.color.rgb2gray", "skimage.color.rgb2gray.reshape().astype", "tensorflow.convert_to_tensor", "pickle.load", "pickle.load", "lm_centroids.astype.astype", "filter_kernel.reshape().astype.reshape().astype", "tensorflow.convert_to_tensor", "texture_loss.im2filter_response", "texture_loss.filter_response2histogram", "tf.InteractiveSession.run", "hists_all.append", "open", "open", "tensorflow.convert_to_tensor", "numpy.squeeze", "skimage.color.rgb2gray.reshape", "filter_kernel.reshape().astype.reshape"], "function", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_loss.im2filter_response", "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_loss.filter_response2histogram"], ["", "def", "debug_descriptor", "(", "input_path", ",", "file_ext", ",", "num_bins", ")", ":", "\n", "    ", "path", "=", "osp", ".", "join", "(", "input_path", ",", "'*.%s'", "%", "file_ext", ")", "\n", "output_path", "=", "'data/debug_histograms.mat'", "\n", "\n", "hists_all", "=", "[", "]", "\n", "sess", "=", "tf", ".", "InteractiveSession", "(", ")", "\n", "for", "f", "in", "glob", ".", "glob", "(", "path", ")", ":", "\n", "        ", "img", "=", "skimage", ".", "io", ".", "imread", "(", "f", ")", "\n", "img", "=", "rgb2gray", "(", "img", ")", "\n", "# img = img[0:50, 0:50]", "\n", "assert", "img", ".", "shape", "[", "0", "]", "<", "100", "and", "img", ".", "shape", "[", "1", "]", "<", "100", ",", "(", "\n", "\"Image size is too big and might cause memory problems in KNN\"", ")", "\n", "\n", "# Reshape to 1xHxWx1 (a mini_batch of size 1)", "\n", "mini_batch", "=", "img", ".", "reshape", "(", "(", "1", ",", ")", "+", "img", ".", "shape", "+", "(", "1", ",", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mini_batch", "=", "tf", ".", "convert_to_tensor", "(", "mini_batch", ")", "\n", "\n", "# Load filters", "\n", "filter_kernel", "=", "pkl", ".", "load", "(", "open", "(", "'filters/np_LM_filter_p2.pkl'", ",", "'rb'", ")", ")", "\n", "lm_centroids", "=", "pkl", ".", "load", "(", "open", "(", "'filters/np_centroids_p2.pkl'", ",", "'rb'", ")", ")", "\n", "lm_centroids", "=", "lm_centroids", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Change filters to 4D (for convolution)", "\n", "filter_kernel", "=", "filter_kernel", ".", "reshape", "(", "(", "49", ",", "49", ",", "1", ",", "48", ")", ")", ".", "astype", "(", "\n", "np", ".", "float32", ")", "\n", "filter_kernel_tf", "=", "tf", ".", "convert_to_tensor", "(", "filter_kernel", ")", "\n", "\n", "# Build operations", "\n", "filter_response_op", "=", "im2filter_response", "(", "\n", "mini_batch", ",", "tf", ".", "convert_to_tensor", "(", "filter_kernel_tf", ")", ")", "\n", "\n", "hists_op", "=", "filter_response2histogram", "(", "filter_response_op", ",", "lm_centroids", ",", "\n", "num_bins", ",", "1", ")", "\n", "\n", "# Run im2filter_response in tensorflow", "\n", "hist", "=", "sess", ".", "run", "(", "hists_op", ")", "\n", "hists_all", ".", "append", "(", "np", ".", "squeeze", "(", "hist", ")", ")", "\n", "\n", "", "hist_dict", "=", "{", "'histograms'", ":", "hists_all", "}", "\n", "sio", ".", "savemat", "(", "output_path", ",", "hist_dict", ")", "\n", "\n", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_descriptor_main.main": [[95, 103], ["texture_descriptor_main.debug_descriptor"], "function", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.texture_descriptor_main.debug_descriptor"], ["", "def", "main", "(", "_", ")", ":", "\n", "# toy_example()", "\n", "    ", "dataset_path", "=", "'texture/trivial'", "\n", "file_ext", "=", "'jpg'", "\n", "num_bins", "=", "200", "\n", "# this function will save a file 'data/debug_histograms.mat' with the", "\n", "# histograms of all images in dataset_path", "\n", "debug_descriptor", "(", "dataset_path", ",", "file_ext", ",", "num_bins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.__init__": [[17, 77], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.random_normal", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.zeros", "draw_model.DrawModel._lstm_enc.zero_state", "draw_model.DrawModel._lstm_dec.zero_state", "range", "range", "tensorflow.add_n", "tensorflow.reduce_mean", "read", "draw_model.DrawModel.encode", "draw_model.DrawModel.sampleQ", "draw_model.DrawModel.decode", "tensorflow.square", "tensorflow.square", "tensorflow.zeros", "tensorflow.sigmoid", "tensorflow.concat", "write", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.encode", "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.sampleQ", "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.decode"], ["def", "__init__", "(", "self", ",", "read_attn", ",", "write_attn", ")", ":", "\n", "        ", "self", ".", "_DO_SHARE", "=", "None", "# workaround for variable_scope(reuse = True)", "\n", "self", ".", "_read_size", "=", "2", "*", "const", ".", "read_n", "*", "const", ".", "read_n", "if", "read_attn", "else", "2", "*", "const", ".", "img_size", "\n", "self", ".", "_write_size", "=", "const", ".", "write_n", "*", "const", ".", "write_n", "if", "write_attn", "else", "const", ".", "img_size", "\n", "self", ".", "_batch_size", "=", "const", ".", "batch_size", "\n", "DO_SHARE", "=", "None", "# workaround for variable_scope(reuse = True)", "\n", "\n", "# x is our input (batch_size * img_size)", "\n", "self", ".", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "const", ".", "batch_size", ",", "const", ".", "img_size", ")", ")", "\n", "self", ".", "y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "const", ".", "batch_size", ",", "const", ".", "img_size", ")", ")", "\n", "self", ".", "_e", "=", "tf", ".", "random_normal", "(", "(", "const", ".", "batch_size", ",", "const", ".", "z_size", ")", ",", "mean", "=", "0", ",", "stddev", "=", "1", ")", "# Qsampler noise", "\n", "self", ".", "_lstm_enc", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "const", ".", "enc_size", ",", "state_is_tuple", "=", "True", ")", "# encoder Op", "\n", "self", ".", "_lstm_dec", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "const", ".", "dec_size", ",", "state_is_tuple", "=", "True", ")", "# decoder Op", "\n", "read", "=", "self", ".", "read_attn", "if", "read_attn", "else", "self", ".", "read_no_attn", "\n", "write", "=", "self", ".", "write_attn", "if", "write_attn", "else", "self", ".", "write_no_attn", "\n", "\n", "# ==STATE VARIABLES== #", "\n", "\n", "self", ".", "cs", "=", "[", "0", "]", "*", "const", ".", "T", "# sequence of canvases", "\n", "\n", "# gaussian params generated by SampleQ. We will need these for computing loss.", "\n", "mus", ",", "logsigmas", ",", "sigmas", "=", "[", "0", "]", "*", "const", ".", "T", ",", "[", "0", "]", "*", "const", ".", "T", ",", "[", "0", "]", "*", "const", ".", "T", "\n", "\n", "self", ".", "mus", "=", "mus", "\n", "self", ".", "logsigmas", "=", "logsigmas", "\n", "self", ".", "sigmas", "=", "sigmas", "\n", "\n", "# initial states", "\n", "h_dec_prev", "=", "tf", ".", "zeros", "(", "(", "const", ".", "batch_size", ",", "const", ".", "dec_size", ")", ")", "\n", "enc_state", "=", "self", ".", "_lstm_enc", ".", "zero_state", "(", "const", ".", "batch_size", ",", "tf", ".", "float32", ")", "\n", "dec_state", "=", "self", ".", "_lstm_dec", ".", "zero_state", "(", "const", ".", "batch_size", ",", "tf", ".", "float32", ")", "\n", "\n", "# ==DRAW MODEL== #", "\n", "\n", "# construct the unrolled computational graph", "\n", "for", "t", "in", "range", "(", "const", ".", "T", ")", ":", "\n", "            ", "c_prev", "=", "tf", ".", "zeros", "(", "(", "const", ".", "batch_size", ",", "const", ".", "img_size", ")", ")", "if", "t", "==", "0", "else", "self", ".", "cs", "[", "t", "-", "1", "]", "\n", "x_hat", "=", "self", ".", "y", "-", "tf", ".", "sigmoid", "(", "c_prev", ")", "# error image", "\n", "r", "=", "read", "(", "self", ".", "x", ",", "x_hat", ",", "h_dec_prev", ")", "\n", "h_enc", ",", "enc_state", "=", "self", ".", "encode", "(", "enc_state", ",", "tf", ".", "concat", "(", "[", "r", ",", "h_dec_prev", "]", ",", "1", ")", ")", "\n", "z", ",", "mus", "[", "t", "]", ",", "logsigmas", "[", "t", "]", ",", "sigmas", "[", "t", "]", "=", "self", ".", "sampleQ", "(", "h_enc", ")", "\n", "h_dec", ",", "dec_state", "=", "self", ".", "decode", "(", "dec_state", ",", "z", ")", "\n", "self", ".", "cs", "[", "t", "]", "=", "c_prev", "+", "write", "(", "h_dec", ")", "# store results", "\n", "h_dec_prev", "=", "h_dec", "\n", "self", ".", "_DO_SHARE", "=", "True", "# from now on, share variables", "\n", "\n", "\n", "\n", "", "kl_terms", "=", "[", "0", "]", "*", "const", ".", "T", "\n", "for", "t", "in", "range", "(", "const", ".", "T", ")", ":", "\n", "            ", "mu2", "=", "tf", ".", "square", "(", "mus", "[", "t", "]", ")", "\n", "sigma2", "=", "tf", ".", "square", "(", "sigmas", "[", "t", "]", ")", "\n", "logsigma", "=", "logsigmas", "[", "t", "]", "\n", "\n", "# each kl term is (1xminibatch)", "\n", "kl_terms", "[", "t", "]", "=", "0.5", "*", "tf", ".", "reduce_sum", "(", "mu2", "+", "sigma2", "-", "2", "*", "logsigma", ",", "1", ")", "-", ".5", "\n", "\n", "# this is 1xminibatch, corresponding to summing kl_terms from 1:T", "\n", "", "KL", "=", "tf", ".", "add_n", "(", "kl_terms", ")", "\n", "self", ".", "Lz", "=", "tf", ".", "reduce_mean", "(", "KL", ")", "# average over minibatches", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.linear": [[80, 89], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.constant_initializer", "x_var.get_shape"], "methods", ["None"], ["", "def", "linear", "(", "self", ",", "x_var", ",", "output_dim", ")", ":", "\n", "        ", "\"\"\"\n        affine transformation Wx+b\n        assumes x.shape = (batch_size, num_features)\n        \"\"\"", "\n", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "[", "x_var", ".", "get_shape", "(", ")", "[", "1", "]", ",", "output_dim", "]", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "output_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "return", "tf", ".", "matmul", "(", "x_var", ",", "w", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.filterbank": [[90, 105], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.exp", "tensorflow.exp", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.range", "tensorflow.range", "tensorflow.range", "tensorflow.square", "tensorflow.square", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "filterbank", "(", "self", ",", "gx", ",", "gy", ",", "sigma2", ",", "delta", ",", "N", ")", ":", "\n", "        ", "grid_i", "=", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "tf", ".", "range", "(", "N", ")", ",", "tf", ".", "float32", ")", ",", "[", "1", ",", "-", "1", "]", ")", "\n", "mu_x", "=", "gx", "+", "(", "grid_i", "-", "N", "/", "2", "-", "0.5", ")", "*", "delta", "# eq 19", "\n", "mu_y", "=", "gy", "+", "(", "grid_i", "-", "N", "/", "2", "-", "0.5", ")", "*", "delta", "# eq 20", "\n", "a", "=", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "tf", ".", "range", "(", "const", ".", "A", ")", ",", "tf", ".", "float32", ")", ",", "[", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "b", "=", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "tf", ".", "range", "(", "const", ".", "B", ")", ",", "tf", ".", "float32", ")", ",", "[", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "mu_x", "=", "tf", ".", "reshape", "(", "mu_x", ",", "[", "-", "1", ",", "N", ",", "1", "]", ")", "\n", "mu_y", "=", "tf", ".", "reshape", "(", "mu_y", ",", "[", "-", "1", ",", "N", ",", "1", "]", ")", "\n", "sigma2", "=", "tf", ".", "reshape", "(", "sigma2", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "Fx", "=", "tf", ".", "exp", "(", "-", "tf", ".", "square", "(", "(", "a", "-", "mu_x", ")", "/", "(", "2", "*", "sigma2", ")", ")", ")", "# 2*sigma2?", "\n", "Fy", "=", "tf", ".", "exp", "(", "-", "tf", ".", "square", "(", "(", "b", "-", "mu_y", ")", "/", "(", "2", "*", "sigma2", ")", ")", ")", "# batch x N x B", "\n", "# normalize, sum over A and B dims", "\n", "Fx", "=", "Fx", "/", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "Fx", ",", "2", ",", "keep_dims", "=", "True", ")", ",", "const", ".", "eps", ")", "\n", "Fy", "=", "Fy", "/", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "Fy", ",", "2", ",", "keep_dims", "=", "True", ")", ",", "const", ".", "eps", ")", "\n", "return", "Fx", ",", "Fy", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.attn_window": [[106, 116], ["tensorflow.split", "tensorflow.exp", "tensorflow.variable_scope", "draw_model.DrawModel.linear", "tensorflow.exp", "draw_model.DrawModel.filterbank", "tensorflow.exp", "max"], "methods", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.linear", "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.filterbank"], ["", "def", "attn_window", "(", "self", ",", "scope", ",", "h_dec", ",", "N", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "self", ".", "_DO_SHARE", ")", ":", "\n", "            ", "params", "=", "self", ".", "linear", "(", "h_dec", ",", "5", ")", "\n", "# gx_, gy_, log_sigma2, log_delta, log_gamma=tf.split(1, 5, params)", "\n", "", "gx_", ",", "gy_", ",", "log_sigma2", ",", "log_delta", ",", "log_gamma", "=", "tf", ".", "split", "(", "params", ",", "5", ",", "1", ")", "\n", "gx", "=", "(", "const", ".", "A", "+", "1", ")", "/", "2", "*", "(", "gx_", "+", "1", ")", "\n", "gy", "=", "(", "const", ".", "B", "+", "1", ")", "/", "2", "*", "(", "gy_", "+", "1", ")", "\n", "sigma2", "=", "tf", ".", "exp", "(", "log_sigma2", ")", "\n", "delta", "=", "(", "max", "(", "const", ".", "A", ",", "const", ".", "B", ")", "-", "1", ")", "/", "(", "N", "-", "1", ")", "*", "tf", ".", "exp", "(", "log_delta", ")", "# batch x N", "\n", "return", "self", ".", "filterbank", "(", "gx", ",", "gy", ",", "sigma2", ",", "delta", ",", "N", ")", "+", "(", "tf", ".", "exp", "(", "log_gamma", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.read_no_attn": [[118, 120], ["tensorflow.concat"], "methods", ["None"], ["", "def", "read_no_attn", "(", "self", ",", "x", ",", "x_hat", ",", "h_dec_prev", ")", ":", "\n", "        ", "return", "tf", ".", "concat", "(", "[", "x", ",", "x_hat", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.read_attn": [[121, 134], ["draw_model.DrawModel.attn_window", "draw_model.DrawModel.read_attn.filter_img"], "methods", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.attn_window"], ["", "def", "read_attn", "(", "self", ",", "x", ",", "x_hat", ",", "h_dec_prev", ")", ":", "\n", "        ", "Fx", ",", "Fy", ",", "gamma", "=", "self", ".", "attn_window", "(", "\"read\"", ",", "h_dec_prev", ",", "const", ".", "read_n", ")", "\n", "\n", "def", "filter_img", "(", "img", ",", "Fx", ",", "Fy", ",", "gamma", ",", "N", ")", ":", "\n", "            ", "Fxt", "=", "tf", ".", "transpose", "(", "Fx", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "img", "=", "tf", ".", "reshape", "(", "img", ",", "[", "-", "1", ",", "const", ".", "B", ",", "const", ".", "A", "]", ")", "\n", "glimpse", "=", "tf", ".", "matmul", "(", "Fy", ",", "tf", ".", "matmul", "(", "img", ",", "Fxt", ")", ")", "\n", "glimpse", "=", "tf", ".", "reshape", "(", "glimpse", ",", "[", "-", "1", ",", "N", "*", "N", "]", ")", "\n", "return", "glimpse", "*", "tf", ".", "reshape", "(", "gamma", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "", "x", "=", "filter_img", "(", "x", ",", "Fx", ",", "Fy", ",", "gamma", ",", "const", ".", "read_n", ")", "# batch x (read_n*read_n)", "\n", "x_hat", "=", "filter_img", "(", "x_hat", ",", "Fx", ",", "Fy", ",", "gamma", ",", "const", ".", "read_n", ")", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "x_hat", "]", ",", "1", ")", "# concat along feature axis", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.encode": [[138, 147], ["tensorflow.variable_scope", "draw_model.DrawModel._lstm_enc"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "state", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        run LSTM\n        state = previous encoder state\n        input = cat(read, h_dec_prev)\n        returns: (output,  new_state)\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\"encoder\"", ",", "reuse", "=", "self", ".", "_DO_SHARE", ")", ":", "\n", "            ", "return", "self", ".", "_lstm_enc", "(", "input", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.sampleQ": [[150, 161], ["tensorflow.variable_scope", "draw_model.DrawModel.linear", "tensorflow.variable_scope", "draw_model.DrawModel.linear", "tensorflow.exp"], "methods", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.linear", "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.linear"], ["", "", "def", "sampleQ", "(", "self", ",", "h_enc", ")", ":", "\n", "        ", "\"\"\"\n        Samples Zt ~ normrnd(mu,sigma) via reparameterization trick for normal dist\n        mu is (batch, z_size)\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\"mu\"", ",", "reuse", "=", "self", ".", "_DO_SHARE", ")", ":", "\n", "            ", "mu", "=", "self", ".", "linear", "(", "h_enc", ",", "const", ".", "z_size", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"sigma\"", ",", "reuse", "=", "self", ".", "_DO_SHARE", ")", ":", "\n", "            ", "logsigma", "=", "self", ".", "linear", "(", "h_enc", ",", "const", ".", "z_size", ")", "\n", "sigma", "=", "tf", ".", "exp", "(", "logsigma", ")", "\n", "", "return", "(", "mu", "+", "sigma", "*", "self", ".", "_e", ",", "mu", ",", "logsigma", ",", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.decode": [[163, 166], ["tensorflow.variable_scope", "draw_model.DrawModel._lstm_dec"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "state", ",", "input", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"decoder\"", ",", "reuse", "=", "self", ".", "_DO_SHARE", ")", ":", "\n", "            ", "return", "self", ".", "_lstm_dec", "(", "input", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.write_no_attn": [[168, 171], ["tensorflow.variable_scope", "draw_model.DrawModel.linear"], "methods", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.linear"], ["", "", "def", "write_no_attn", "(", "self", ",", "h_dec", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"write\"", ",", "reuse", "=", "self", ".", "_DO_SHARE", ")", ":", "\n", "            ", "return", "self", ".", "linear", "(", "h_dec", ",", "const", ".", "img_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.write_attn": [[172, 183], ["tensorflow.reshape", "draw_model.DrawModel.attn_window", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.variable_scope", "draw_model.DrawModel.linear", "tensorflow.matmul", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.attn_window", "home.repos.pwc.inspect_result.MoustafaMeshry_draw.None.draw_model.DrawModel.linear"], ["", "", "def", "write_attn", "(", "self", ",", "h_dec", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"writeW\"", ",", "reuse", "=", "self", ".", "_DO_SHARE", ")", ":", "\n", "            ", "w", "=", "self", ".", "linear", "(", "h_dec", ",", "self", ".", "_write_size", ")", "# batch x (write_n*write_n)", "\n", "", "N", "=", "const", ".", "write_n", "\n", "w", "=", "tf", ".", "reshape", "(", "w", ",", "[", "self", ".", "_batch_size", ",", "N", ",", "N", "]", ")", "\n", "Fx", ",", "Fy", ",", "gamma", "=", "self", ".", "attn_window", "(", "\"write\"", ",", "h_dec", ",", "const", ".", "write_n", ")", "\n", "Fyt", "=", "tf", ".", "transpose", "(", "Fy", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "wr", "=", "tf", ".", "matmul", "(", "Fyt", ",", "tf", ".", "matmul", "(", "w", ",", "Fx", ")", ")", "\n", "wr", "=", "tf", ".", "reshape", "(", "wr", ",", "[", "self", ".", "_batch_size", ",", "const", ".", "B", "*", "const", ".", "A", "]", ")", "\n", "# gamma = tf.tile(gamma, [1, B*A])", "\n", "return", "wr", "*", "tf", ".", "reshape", "(", "1.0", "/", "gamma", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n"]]}