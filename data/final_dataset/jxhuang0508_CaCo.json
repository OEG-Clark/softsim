{"home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.calc_prototype.Class_Features.__init__": [[73, 77], ["numpy.zeros", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "numbers", "=", "19", ")", ":", "\n", "        ", "self", ".", "class_numbers", "=", "numbers", "\n", "self", ".", "class_features", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "class_numbers", ")", "]", "\n", "self", ".", "num", "=", "np", ".", "zeros", "(", "numbers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.calc_prototype.Class_Features.calculate_mean_vector_by_output": [[78, 100], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.argmax", "model.process_label", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "range", "model.process_label.float", "range", "feat_cls.size", "vectors.append", "ids.append", "[].item", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.process_label"], ["", "def", "calculate_mean_vector_by_output", "(", "self", ",", "feat_cls", ",", "outputs", ",", "model", ")", ":", "\n", "        ", "outputs_softmax", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "outputs_argmax", "=", "outputs_softmax", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "outputs_argmax", "=", "model", ".", "process_label", "(", "outputs_argmax", ".", "float", "(", ")", ")", "\n", "outputs_pred", "=", "outputs_argmax", "\n", "scale_factor", "=", "F", ".", "adaptive_avg_pool2d", "(", "outputs_pred", ",", "1", ")", "\n", "vectors", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "feat_cls", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "self", ".", "class_numbers", ")", ":", "\n", "                ", "if", "scale_factor", "[", "n", "]", "[", "t", "]", ".", "item", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "(", "outputs_pred", "[", "n", "]", "[", "t", "]", ">", "0", ")", ".", "sum", "(", ")", "<", "10", ":", "\n", "                    ", "continue", "\n", "", "s", "=", "feat_cls", "[", "n", "]", "*", "outputs_pred", "[", "n", "]", "[", "t", "]", "\n", "# if (torch.sum(outputs_pred[n][t] * labels_expanded[n][t]).item() < 30):", "\n", "#     continue", "\n", "s", "=", "F", ".", "adaptive_avg_pool2d", "(", "s", ",", "1", ")", "/", "scale_factor", "[", "n", "]", "[", "t", "]", "\n", "# self.update_cls_feature(vector=s, id=t)", "\n", "vectors", ".", "append", "(", "s", ")", "\n", "ids", ".", "append", "(", "t", ")", "\n", "", "", "return", "vectors", ",", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.calc_prototype.Class_Features.calculate_mean_vector": [[101, 127], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.argmax", "model.process_label", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "range", "model.process_label.float", "model.process_label", "range", "feat_cls.size", "vectors.append", "ids.append", "[].item", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.process_label", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.process_label"], ["", "def", "calculate_mean_vector", "(", "self", ",", "feat_cls", ",", "outputs", ",", "labels_val", "=", "None", ",", "model", "=", "None", ")", ":", "\n", "        ", "outputs_softmax", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "outputs_argmax", "=", "outputs_softmax", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "outputs_argmax", "=", "model", ".", "process_label", "(", "outputs_argmax", ".", "float", "(", ")", ")", "\n", "if", "labels_val", "is", "None", ":", "\n", "            ", "outputs_pred", "=", "outputs_argmax", "\n", "", "else", ":", "\n", "            ", "labels_expanded", "=", "model", ".", "process_label", "(", "labels_val", ")", "\n", "outputs_pred", "=", "labels_expanded", "*", "outputs_argmax", "\n", "", "scale_factor", "=", "F", ".", "adaptive_avg_pool2d", "(", "outputs_pred", ",", "1", ")", "\n", "vectors", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "feat_cls", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "self", ".", "class_numbers", ")", ":", "\n", "                ", "if", "scale_factor", "[", "n", "]", "[", "t", "]", ".", "item", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "(", "outputs_pred", "[", "n", "]", "[", "t", "]", ">", "0", ")", ".", "sum", "(", ")", "<", "10", ":", "\n", "                    ", "continue", "\n", "", "s", "=", "feat_cls", "[", "n", "]", "*", "outputs_pred", "[", "n", "]", "[", "t", "]", "\n", "# if (torch.sum(outputs_pred[n][t] * labels_expanded[n][t]).item() < 30):", "\n", "#     continue", "\n", "s", "=", "F", ".", "adaptive_avg_pool2d", "(", "s", ",", "1", ")", "/", "scale_factor", "[", "n", "]", "[", "t", "]", "\n", "# self.update_cls_feature(vector=s, id=t)", "\n", "vectors", ".", "append", "(", "s", ")", "\n", "ids", ".", "append", "(", "t", ")", "\n", "", "", "return", "vectors", ",", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.calc_prototype.calc_prototype": [[19, 71], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "torch.device", "torch.device", "torch.device", "data.create_dataset", "calc_prototype.Class_Features", "range", "torch.save", "torch.save", "torch.save", "models.adaptation_modelv2.CustomModel", "tqdm.tqdm", "os.path.join", "os.path.join", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "data.create_dataset.source_train_loader.next", "source_data[].to", "source_data[].to", "data_i[].to", "data_i[].to", "adaptation_modelv2.CustomModel.eval", "os.path.dirname", "os.path.dirname", "torch.no_grad", "torch.no_grad", "torch.no_grad", "source_data[].to.size", "source_data[].to.reshape().float", "torch.interpolate", "calc_prototype.Class_Features.calculate_mean_vector", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "calc_prototype.Class_Features.calculate_mean_vector", "range", "adaptation_modelv2.CustomModel.BaseNet_DP", "len", "adaptation_modelv2.CustomModel.update_objective_SingleVector", "adaptation_modelv2.CustomModel.BaseNet_DP", "len", "adaptation_modelv2.CustomModel.update_objective_SingleVector", "source_data[].to.reshape", "vectors[].detach().cpu().numpy", "vectors[].detach().cpu", "out[].size", "vectors[].detach().cpu", "vectors[].detach", "vectors[].detach"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.create_dataset", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.calculate_mean_vector", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.calculate_mean_vector", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.update_objective_SingleVector", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.update_objective_SingleVector"], ["def", "calc_prototype", "(", "opt", ",", "logger", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "## create dataset", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "datasets", "=", "create_dataset", "(", "opt", ",", "logger", ")", "\n", "\n", "if", "opt", ".", "model_name", "==", "'deeplabv2'", ":", "\n", "        ", "model", "=", "adaptation_modelv2", ".", "CustomModel", "(", "opt", ",", "logger", ")", "\n", "\n", "", "class_features", "=", "Class_Features", "(", "numbers", "=", "opt", ".", "n_class", ")", "\n", "\n", "# begin training", "\n", "model", ".", "iter", "=", "0", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "epochs", ")", ":", "\n", "        ", "for", "data_i", "in", "tqdm", "(", "datasets", ".", "target_train_loader", ")", ":", "\n", "            ", "model", ".", "iter", "+=", "1", "\n", "i", "=", "model", ".", "iter", "\n", "source_data", "=", "datasets", ".", "source_train_loader", ".", "next", "(", ")", "\n", "images", "=", "source_data", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "source_data", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "\n", "target_image", "=", "data_i", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "target_label", "=", "data_i", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "if", "opt", ".", "source", ":", "#source", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "if", "opt", ".", "model_name", "==", "'deeplabv2'", ":", "\n", "                        ", "out", "=", "model", ".", "BaseNet_DP", "(", "images", ",", "ssl", "=", "True", ")", "\n", "", "batch", ",", "w", ",", "h", "=", "labels", ".", "size", "(", ")", "\n", "newlabels", "=", "labels", ".", "reshape", "(", "[", "batch", ",", "1", ",", "w", ",", "h", "]", ")", ".", "float", "(", ")", "\n", "newlabels", "=", "F", ".", "interpolate", "(", "newlabels", ",", "size", "=", "out", "[", "'feat'", "]", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "vectors", ",", "ids", "=", "class_features", ".", "calculate_mean_vector", "(", "out", "[", "'feat'", "]", ",", "out", "[", "'out'", "]", ",", "newlabels", ",", "model", ")", "\n", "for", "t", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "                        ", "model", ".", "update_objective_SingleVector", "(", "ids", "[", "t", "]", ",", "vectors", "[", "t", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "'mean'", ")", "\n", "", "", "", "else", ":", "#target", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "if", "opt", ".", "model_name", "==", "'deeplabv2'", ":", "\n", "                        ", "out", "=", "model", ".", "BaseNet_DP", "(", "target_image", ",", "ssl", "=", "True", ")", "\n", "", "vectors", ",", "ids", "=", "class_features", ".", "calculate_mean_vector", "(", "out", "[", "'feat'", "]", ",", "out", "[", "'out'", "]", ",", "model", "=", "model", ")", "\n", "#vectors, ids = class_features.calculate_mean_vector_by_output(feat_cls, output, model)", "\n", "for", "t", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "                        ", "model", ".", "update_objective_SingleVector", "(", "ids", "[", "t", "]", ",", "vectors", "[", "t", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "'mean'", ")", "\n", "\n", "", "", "", "", "", "if", "opt", ".", "source", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "opt", ".", "resume_path", ")", ",", "\"prototypes_on_{}_from_{}\"", ".", "format", "(", "opt", ".", "src_dataset", ",", "opt", ".", "model_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "opt", ".", "resume_path", ")", ",", "\"prototypes_on_{}_from_{}\"", ".", "format", "(", "opt", ".", "tgt_dataset", ",", "opt", ".", "model_name", ")", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "objective_vectors", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.calc_prototype.get_logger": [[128, 137], ["logging.getLogger", "os.path.join", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel"], "function", ["None"], ["", "", "def", "get_logger", "(", "logdir", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'ptsemseg'", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'run.log'", ")", "\n", "hdlr", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(levelname)s %(message)s'", ")", "\n", "hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "hdlr", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.generate_pseudo_label.test": [[20, 35], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "torch.device", "torch.device", "torch.device", "data.create_dataset", "generate_pseudo_label.validation", "models.adaptation_modelv2.CustomModel", "adaptation_modelv2.CustomModel.BaseNet.load_state_dict", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.create_dataset", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.test.validation"], ["def", "test", "(", "opt", ",", "logger", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "## create dataset", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "datasets", "=", "create_dataset", "(", "opt", ",", "logger", ")", "\n", "\n", "if", "opt", ".", "model_name", "==", "'deeplabv2'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "opt", ".", "resume_path", ")", "[", "'ResNet101'", "]", "[", "\"model_state\"", "]", "\n", "model", "=", "adaptation_modelv2", ".", "CustomModel", "(", "opt", ",", "logger", ")", "\n", "model", ".", "BaseNet", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.generate_pseudo_label.validation": [[36, 42], ["model.eval", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.no_grad", "torch.no_grad", "torch.no_grad", "generate_pseudo_label.validate"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.test.validate"], ["", "def", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "opt", ")", ":", "\n", "    ", "_k", "=", "-", "1", "\n", "model", ".", "eval", "(", "logger", "=", "logger", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "validate", "(", "datasets", ".", "target_train_loader", ",", "device", ",", "model", ",", "opt", ")", "\n", "#validate(datasets.target_valid_loader, device, model, opt)", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.generate_pseudo_label.label2rgb": [[44, 51], ["range", "torch.stack().float", "torch.stack().float", "torch.stack().float", "func", "torch.stack().float.append", "label[].cpu().numpy", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.stack", "torch.stack", "torch.stack", "label[].cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "", "def", "label2rgb", "(", "func", ",", "label", ")", ":", "\n", "    ", "rgbs", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rgb", "=", "func", "(", "label", "[", "k", ",", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rgbs", ".", "append", "(", "torch", ".", "from_numpy", "(", "rgb", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "rgbs", "=", "torch", ".", "stack", "(", "rgbs", ",", "dim", "=", "0", ")", ".", "float", "(", ")", "\n", "return", "rgbs", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.generate_pseudo_label.validate": [[52, 86], ["os.path.join", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "tqdm.tqdm", "os.path.exists", "os.makedirs", "data_i[].to", "data_i[].to", "model.BaseNet_DP", "torch.softmax", "range", "out[].max", "range", "os.path.basename", "numpy.save", "model.BaseNet_DP", "torch.interpolate", "torch.interpolate", "label2rgb().float", "os.path.basename", "PIL.Image.fromarray().save", "PIL.Image.fromarray().save", "numpy.save", "os.path.join", "threshold_arg[].cpu().numpy", "utils.fliplr", "torch.nn.Softmax.", "torch.nn.Softmax.", "os.path.join", "os.path.join", "os.path.join", "confidence[].cpu().numpy().astype", "os.path.basename.replace", "utils.fliplr", "generate_pseudo_label.label2rgb", "PIL.Image.fromarray", "PIL.Image.fromarray", "os.path.basename.replace", "threshold_arg[].cpu", "data_i[].to.size", "data_i[].to.size", "pseudo[].cpu().numpy().astype", "pseudo_rgb[].permute().cpu().numpy().astype", "confidence[].cpu().numpy", "pseudo[].cpu().numpy", "pseudo_rgb[].permute().cpu().numpy", "confidence[].cpu", "pseudo[].cpu", "pseudo_rgb[].permute().cpu", "pseudo_rgb[].permute"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.generate_pseudo_label.label2rgb"], ["", "def", "validate", "(", "valid_loader", ",", "device", ",", "model", ",", "opt", ")", ":", "\n", "    ", "ori_LP", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "opt", ".", "save_path", ",", "opt", ".", "name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ori_LP", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ori_LP", ")", "\n", "\n", "", "sm", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "for", "data_i", "in", "tqdm", "(", "valid_loader", ")", ":", "\n", "        ", "images_val", "=", "data_i", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "labels_val", "=", "data_i", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "filename", "=", "data_i", "[", "'img_path'", "]", "\n", "\n", "out", "=", "model", ".", "BaseNet_DP", "(", "images_val", ")", "\n", "\n", "if", "opt", ".", "soft", ":", "\n", "            ", "threshold_arg", "=", "F", ".", "softmax", "(", "out", "[", "'out'", "]", ",", "dim", "=", "1", ")", "\n", "for", "k", "in", "range", "(", "labels_val", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "name", "=", "os", ".", "path", ".", "basename", "(", "filename", "[", "k", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "ori_LP", ",", "name", ".", "replace", "(", "'.png'", ",", "'.npy'", ")", ")", ",", "threshold_arg", "[", "k", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "opt", ".", "flip", ":", "\n", "                ", "flip_out", "=", "model", ".", "BaseNet_DP", "(", "fliplr", "(", "images_val", ")", ")", "\n", "flip_out", "[", "'out'", "]", "=", "F", ".", "interpolate", "(", "sm", "(", "flip_out", "[", "'out'", "]", ")", ",", "size", "=", "images_val", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "out", "[", "'out'", "]", "=", "F", ".", "interpolate", "(", "sm", "(", "out", "[", "'out'", "]", ")", ",", "size", "=", "images_val", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "out", "[", "'out'", "]", "=", "(", "out", "[", "'out'", "]", "+", "fliplr", "(", "flip_out", "[", "'out'", "]", ")", ")", "/", "2", "\n", "\n", "", "confidence", ",", "pseudo", "=", "out", "[", "'out'", "]", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "#entropy = -(out['out']*torch.log(out['out']+1e-6)).sum(1, keepdim=True)", "\n", "pseudo_rgb", "=", "label2rgb", "(", "valid_loader", ".", "dataset", ".", "decode_segmap", ",", "pseudo", ")", ".", "float", "(", ")", "*", "255", "\n", "for", "k", "in", "range", "(", "labels_val", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "name", "=", "os", ".", "path", ".", "basename", "(", "filename", "[", "k", "]", ")", "\n", "Image", ".", "fromarray", "(", "pseudo", "[", "k", ",", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "ori_LP", ",", "name", ")", ")", "\n", "Image", ".", "fromarray", "(", "pseudo_rgb", "[", "k", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "ori_LP", ",", "name", "[", ":", "-", "4", "]", "+", "'_color.png'", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "ori_LP", ",", "name", ".", "replace", "(", "'.png'", ",", "'_conf.npy'", ")", ")", ",", "confidence", "[", "k", ",", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", ")", "\n", "#np.save(os.path.join(ori_LP, name.replace('.png', '_entropy.npy')), entropy[k, 0].cpu().numpy().astype(np.float16))", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.generate_pseudo_label.get_logger": [[88, 97], ["logging.getLogger", "os.path.join", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel"], "function", ["None"], ["", "", "", "", "def", "get_logger", "(", "logdir", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'ptsemseg'", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'run.log'", ")", "\n", "hdlr", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(levelname)s %(message)s'", ")", "\n", "hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "hdlr", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.runningScore.__init__": [[11, 14], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "n_classes", ",", "n_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.runningScore._fast_hist": [[15, 22], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "methods", ["None"], ["", "def", "_fast_hist", "(", "self", ",", "label_true", ",", "label_pred", ",", "n_class", ")", ":", "\n", "        ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "n_class", ")", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "n_class", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "label_pred", "[", "mask", "]", ",", "\n", "minlength", "=", "n_class", "**", "2", ",", "\n", ")", ".", "reshape", "(", "n_class", ",", "n_class", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.runningScore.update": [[23, 27], ["zip", "metrics.runningScore._fast_hist", "lt.flatten", "lp.flatten"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.runningScore._fast_hist"], ["", "def", "update", "(", "self", ",", "label_trues", ",", "label_preds", ")", ":", "\n", "        ", "for", "lt", ",", "lp", "in", "zip", "(", "label_trues", ",", "label_preds", ")", ":", "\n", "            ", "self", ".", "confusion_matrix", "+=", "self", ".", "_fast_hist", "(", "\n", "lt", ".", "flatten", "(", ")", ",", "lp", ".", "flatten", "(", ")", ",", "self", ".", "n_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.runningScore.get_scores": [[29, 54], ["numpy.nanmean", "numpy.nanmean", "dict", "numpy.diag().sum", "hist.sum", "numpy.diag", "hist.sum", "numpy.diag", "hist.sum", "hist.sum", "zip", "numpy.diag", "range", "numpy.diag", "hist.sum", "hist.sum"], "methods", ["None"], ["", "", "def", "get_scores", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns accuracy score evaluation result.\n            - overall accuracy\n            - mean accuracy\n            - mean IU\n            - fwavacc\n        \"\"\"", "\n", "hist", "=", "self", ".", "confusion_matrix", "\n", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "mean_iu", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "cls_iu", "=", "dict", "(", "zip", "(", "range", "(", "self", ".", "n_classes", ")", ",", "iu", ")", ")", "\n", "\n", "return", "(", "\n", "{", "\n", "\"Overall Acc: \\t\"", ":", "acc", ",", "\n", "\"Mean Acc : \\t\"", ":", "acc_cls", ",", "\n", "\"FreqW Acc : \\t\"", ":", "fwavacc", ",", "\n", "\"Mean IoU : \\t\"", ":", "mean_iu", ",", "\n", "}", ",", "\n", "cls_iu", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.runningScore.reset": [[56, 58], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_classes", ",", "self", ".", "n_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.averageMeter.__init__": [[63, 65], ["metrics.averageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.averageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.averageMeter.reset": [[66, 71], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.averageMeter.update": [[72, 77], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.train.train": [[21, 110], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "torch.device", "torch.device", "torch.device", "data.create_dataset", "print", "metrics.runningScore", "metrics.averageMeter", "os.path.join", "range", "models.adaptation_modelv2.CustomModel", "torch.load", "torch.load", "torch.load", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.join", "data_i[].to", "data_i[].to", "data_i[].to", "data.create_dataset.source_train_loader.next", "source_data[].to", "source_data[].to", "source_data[].to", "time.time", "adaptation_modelv2.CustomModel.train", "adaptation_modelv2.CustomModel.optimizer_zerograd", "metrics.averageMeter.update", "adaptation_modelv2.CustomModel.scheduler_step", "os.path.dirname", "torch.Tensor", "torch.Tensor", "torch.Tensor", "data_i[].to", "data_i[].to", "adaptation_modelv2.CustomModel.freeze_bn_apply", "adaptation_modelv2.CustomModel.step_adv", "print", "logger.info", "metrics.averageMeter.reset", "train.validation", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "logger.info", "data_i.keys", "data_i.keys", "adaptation_modelv2.CustomModel.step", "adaptation_modelv2.CustomModel.step_distillation", "time.time", "fmt_str.format", "fmt_str.format", "fmt_str.format"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.create_dataset", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.train", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.optimizer_zerograd", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.averageMeter.update", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.scheduler_step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.freeze_bn_apply", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step_adv", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.averageMeter.reset", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.test.validation", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step_distillation"], ["def", "train", "(", "opt", ",", "logger", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "## create dataset", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "#'cuda:0'", "\n", "datasets", "=", "create_dataset", "(", "opt", ",", "logger", ")", "\n", "\n", "if", "opt", ".", "model_name", "==", "'deeplabv2'", ":", "\n", "        ", "model", "=", "adaptation_modelv2", ".", "CustomModel", "(", "opt", ",", "logger", ")", "\n", "\n", "", "print", "(", "'backbone_flag'", ")", "\n", "\n", "# Setup Metrics", "\n", "running_metrics_val", "=", "runningScore", "(", "opt", ".", "n_class", ")", "\n", "time_meter", "=", "averageMeter", "(", ")", "\n", "\n", "# load category anchors", "\n", "if", "opt", ".", "stage", "==", "'stage1'", ":", "\n", "        ", "objective_vectors", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "opt", ".", "resume_path", ")", ",", "'prototypes_on_{}_from_{}'", ".", "format", "(", "opt", ".", "tgt_dataset", ",", "opt", ".", "model_name", ")", ")", ")", "\n", "model", ".", "objective_vectors", "=", "torch", ".", "Tensor", "(", "objective_vectors", ")", ".", "to", "(", "0", ")", "\n", "\n", "# begin training", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "logdir", ",", "\"from_{}_to_{}_on_{}_current_model.pkl\"", ".", "format", "(", "opt", ".", "src_dataset", ",", "opt", ".", "tgt_dataset", ",", "opt", ".", "model_name", ")", ")", "\n", "model", ".", "iter", "=", "0", "\n", "start_epoch", "=", "0", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "opt", ".", "epochs", ")", ":", "\n", "        ", "for", "data_i", "in", "datasets", ".", "target_train_loader", ":", "\n", "            ", "target_image", "=", "data_i", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "target_imageS", "=", "data_i", "[", "'img_strong'", "]", ".", "to", "(", "device", ")", "\n", "target_params", "=", "data_i", "[", "'params'", "]", "\n", "target_image_full", "=", "data_i", "[", "'img_full'", "]", ".", "to", "(", "device", ")", "\n", "target_weak_params", "=", "data_i", "[", "'weak_params'", "]", "\n", "\n", "#target_label", "\n", "# target_label = data_i['label'].to(device)", "\n", "\n", "target_lp", "=", "data_i", "[", "'lp'", "]", ".", "to", "(", "device", ")", "if", "'lp'", "in", "data_i", ".", "keys", "(", ")", "else", "None", "\n", "target_lpsoft", "=", "data_i", "[", "'lpsoft'", "]", ".", "to", "(", "device", ")", "if", "'lpsoft'", "in", "data_i", ".", "keys", "(", ")", "else", "None", "\n", "source_data", "=", "datasets", ".", "source_train_loader", ".", "next", "(", ")", "\n", "\n", "model", ".", "iter", "+=", "1", "\n", "i", "=", "model", ".", "iter", "\n", "images", "=", "source_data", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "source_data", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "source_imageS", "=", "source_data", "[", "'img_strong'", "]", ".", "to", "(", "device", ")", "\n", "source_params", "=", "source_data", "[", "'params'", "]", "\n", "\n", "start_ts", "=", "time", ".", "time", "(", ")", "\n", "\n", "model", ".", "train", "(", "logger", "=", "logger", ")", "\n", "if", "opt", ".", "freeze_bn", ":", "\n", "                ", "model", ".", "freeze_bn_apply", "(", ")", "\n", "", "model", ".", "optimizer_zerograd", "(", ")", "\n", "\n", "if", "opt", ".", "stage", "==", "'warm_up'", ":", "\n", "                ", "loss_GTA", ",", "loss_G", ",", "loss_D", "=", "model", ".", "step_adv", "(", "images", ",", "labels", ",", "target_image", ",", "target_lp", ",", "source_imageS", ",", "source_params", ")", "\n", "# loss_GTA, loss_G, loss_D = model.step_adv(images, labels, target_image, source_imageS, source_params, target_label)", "\n", "", "elif", "opt", ".", "stage", "==", "'stage1'", ":", "\n", "                ", "loss", ",", "loss_CTS", ",", "loss_consist", "=", "model", ".", "step", "(", "images", ",", "labels", ",", "target_image", ",", "target_imageS", ",", "target_params", ",", "target_lp", ",", "\n", "target_lpsoft", ",", "target_image_full", ",", "target_weak_params", ")", "\n", "", "else", ":", "\n", "                ", "loss_GTA", ",", "loss", "=", "model", ".", "step_distillation", "(", "images", ",", "labels", ",", "target_image", ",", "target_imageS", ",", "target_params", ",", "target_lp", ")", "\n", "\n", "", "time_meter", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_ts", ")", "\n", "\n", "#print(i)", "\n", "if", "(", "i", "+", "1", ")", "%", "opt", ".", "print_interval", "==", "0", ":", "\n", "                ", "if", "opt", ".", "stage", "==", "'warm_up'", ":", "\n", "                    ", "fmt_str", "=", "\"Epochs [{:d}/{:d}] Iter [{:d}/{:d}]  loss_GTA: {:.4f}  loss_G: {:.4f}  loss_D: {:.4f} Time/Image: {:.4f}\"", "\n", "print_str", "=", "fmt_str", ".", "format", "(", "epoch", "+", "1", ",", "opt", ".", "epochs", ",", "i", "+", "1", ",", "opt", ".", "train_iters", ",", "loss_GTA", ",", "loss_G", ",", "loss_D", ",", "time_meter", ".", "avg", "/", "opt", ".", "bs", ")", "\n", "", "elif", "opt", ".", "stage", "==", "'stage1'", ":", "\n", "                    ", "fmt_str", "=", "\"Epochs [{:d}/{:d}] Iter [{:d}/{:d}]  loss: {:.4f}  loss_CTS: {:.4f}  loss_consist: {:.4f} Time/Image: {:.4f}\"", "\n", "print_str", "=", "fmt_str", ".", "format", "(", "epoch", "+", "1", ",", "opt", ".", "epochs", ",", "i", "+", "1", ",", "opt", ".", "train_iters", ",", "loss", ",", "loss_CTS", ",", "loss_consist", ",", "time_meter", ".", "avg", "/", "opt", ".", "bs", ")", "\n", "", "else", ":", "\n", "                    ", "fmt_str", "=", "\"Epochs [{:d}/{:d}] Iter [{:d}/{:d}]  loss_GTA: {:.4f}  loss: {:.4f} Time/Image: {:.4f}\"", "\n", "print_str", "=", "fmt_str", ".", "format", "(", "epoch", "+", "1", ",", "opt", ".", "epochs", ",", "i", "+", "1", ",", "opt", ".", "train_iters", ",", "loss_GTA", ",", "loss", ",", "time_meter", ".", "avg", "/", "opt", ".", "bs", ")", "\n", "", "print", "(", "print_str", ")", "\n", "logger", ".", "info", "(", "print_str", ")", "\n", "time_meter", ".", "reset", "(", ")", "\n", "\n", "# evaluation", "\n", "", "if", "(", "i", "+", "1", ")", "%", "opt", ".", "val_interval", "==", "0", ":", "\n", "                ", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "running_metrics_val", ",", "iters", "=", "model", ".", "iter", ",", "opt", "=", "opt", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "logger", ".", "info", "(", "'Best iou until now is {}'", ".", "format", "(", "model", ".", "best_iou", ")", ")", "\n", "\n", "", "model", ".", "scheduler_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.train.validation": [[111, 172], ["model.eval", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "running_metrics_val.get_scores", "score.items", "class_iou.items", "running_metrics_val.reset", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "os.path.join", "torch.save", "torch.save", "torch.save", "logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train.validate", "print", "logger.info", "logger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "os.path.join", "torch.save", "torch.save", "torch.save", "param_group.get", "net.state_dict", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.runningScore.get_scores", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.averageMeter.reset", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.test.validate", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.get"], ["", "", "", "def", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "running_metrics_val", ",", "iters", ",", "opt", "=", "None", ")", ":", "\n", "    ", "iters", "=", "iters", "\n", "_k", "=", "-", "1", "\n", "for", "v", "in", "model", ".", "optimizers", ":", "\n", "        ", "_k", "+=", "1", "\n", "for", "param_group", "in", "v", ".", "param_groups", ":", "\n", "            ", "_learning_rate", "=", "param_group", ".", "get", "(", "'lr'", ")", "\n", "", "logger", ".", "info", "(", "\"learning rate is {} for {} net\"", ".", "format", "(", "_learning_rate", ",", "model", ".", "nets", "[", "_k", "]", ".", "__class__", ".", "__name__", ")", ")", "\n", "", "model", ".", "eval", "(", "logger", "=", "logger", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "val_datset", "=", "datasets", ".", "target_valid_loader", "\n", "#val_datset = datasets.target_train_loader", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "validate", "(", "val_datset", ",", "device", ",", "model", ",", "running_metrics_val", ")", "\n", "\n", "", "score", ",", "class_iou", "=", "running_metrics_val", ".", "get_scores", "(", ")", "\n", "for", "k", ",", "v", "in", "score", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "k", ",", "v", ")", "\n", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "class_iou", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "running_metrics_val", ".", "reset", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "state", "=", "{", "}", "\n", "_k", "=", "-", "1", "\n", "for", "net", "in", "model", ".", "nets", ":", "\n", "        ", "_k", "+=", "1", "\n", "new_state", "=", "{", "\n", "\"model_state\"", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "#\"optimizer_state\": model.optimizers[_k].state_dict(),", "\n", "#\"scheduler_state\": model.schedulers[_k].state_dict(),  ", "\n", "\"objective_vectors\"", ":", "model", ".", "objective_vectors", ",", "\n", "}", "\n", "state", "[", "net", ".", "__class__", ".", "__name__", "]", "=", "new_state", "\n", "", "state", "[", "'iter'", "]", "=", "iters", "+", "1", "\n", "state", "[", "'best_iou'", "]", "=", "score", "[", "\"Mean IoU : \\t\"", "]", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "logdir", ",", "\"from_{}_to_{}_on_{}_current_model.pkl\"", ".", "format", "(", "opt", ".", "src_dataset", ",", "opt", ".", "tgt_dataset", ",", "opt", ".", "model_name", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_path", ")", "\n", "\n", "if", "score", "[", "\"Mean IoU : \\t\"", "]", ">=", "model", ".", "best_iou", ":", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "best_iou", "=", "score", "[", "\"Mean IoU : \\t\"", "]", "\n", "state", "=", "{", "}", "\n", "_k", "=", "-", "1", "\n", "for", "net", "in", "model", ".", "nets", ":", "\n", "            ", "_k", "+=", "1", "\n", "new_state", "=", "{", "\n", "\"model_state\"", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "#\"optimizer_state\": model.optimizers[_k].state_dict(),", "\n", "#\"scheduler_state\": model.schedulers[_k].state_dict(),     ", "\n", "\"objective_vectors\"", ":", "model", ".", "objective_vectors", ",", "\n", "}", "\n", "state", "[", "net", ".", "__class__", ".", "__name__", "]", "=", "new_state", "\n", "", "state", "[", "'iter'", "]", "=", "iters", "+", "1", "\n", "state", "[", "'best_iou'", "]", "=", "model", ".", "best_iou", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "logdir", ",", "\"from_{}_to_{}_on_{}_best_model.pkl\"", ".", "format", "(", "opt", ".", "src_dataset", ",", "opt", ".", "tgt_dataset", ",", "opt", ".", "model_name", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_path", ")", "\n", "return", "score", "[", "\"Mean IoU : \\t\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.train.validate": [[173, 187], ["tqdm.tqdm", "data_i[].to", "data_i[].to", "model.BaseNet_DP", "torch.interpolate", "[].cpu().numpy", "data_i[].to.data.cpu().numpy", "running_metrics_val.update", "[].cpu", "data_i[].to.data.cpu", "data_i[].to.size", "F.interpolate.data.max"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.averageMeter.update"], ["", "", "def", "validate", "(", "valid_loader", ",", "device", ",", "model", ",", "running_metrics_val", ")", ":", "\n", "    ", "for", "data_i", "in", "tqdm", "(", "valid_loader", ")", ":", "\n", "\n", "        ", "images_val", "=", "data_i", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "labels_val", "=", "data_i", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "\n", "out", "=", "model", ".", "BaseNet_DP", "(", "images_val", ")", "\n", "\n", "outputs", "=", "F", ".", "interpolate", "(", "out", "[", "'out'", "]", ",", "size", "=", "images_val", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "#val_loss = loss_fn(input=outputs, target=labels_val)", "\n", "\n", "pred", "=", "outputs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt", "=", "labels_val", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "running_metrics_val", ".", "update", "(", "gt", ",", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.parser_train.parser_": [[7, 73], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "parser_", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'root path'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "type", "=", "str", ",", "default", "=", "'deeplabv2'", ",", "help", "=", "'deeplabv2'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'gta2city'", ",", "help", "=", "'pretrain source model'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ")", "\n", "parser", ".", "add_argument", "(", "'--bs'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_bn'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "84", ")", "\n", "parser", ".", "add_argument", "(", "'--train_iters'", ",", "type", "=", "int", ",", "default", "=", "90000", ")", "\n", "parser", ".", "add_argument", "(", "'--moving_prototype'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--bn'", ",", "type", "=", "str", ",", "default", "=", "'sync_bn'", ",", "help", "=", "'sync_bn|bn|gn|adabn'", ")", "\n", "#training", "\n", "parser", ".", "add_argument", "(", "'--no_resume'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1337", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--stage'", ",", "type", "=", "str", ",", "default", "=", "'stage1'", ",", "help", "=", "'warm_up|stage1|stage2|stage3'", ")", "\n", "parser", ".", "add_argument", "(", "'--finetune'", ",", "action", "=", "'store_true'", ")", "\n", "#model", "\n", "parser", ".", "add_argument", "(", "'--resume_path'", ",", "type", "=", "str", ",", "default", "=", "'pretrained/warmup/from_gta5_to_cityscapes_on_deeplab101_best_model_warmup.pkl'", ",", "help", "=", "'resume model path'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use ema model'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema_bn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'add extra bn for ema model'", ")", "\n", "parser", ".", "add_argument", "(", "\"--student_init\"", ",", "default", "=", "'stage1'", ",", "type", "=", "str", ",", "help", "=", "\"stage1|imagenet|simclr\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--proto_momentum\"", ",", "default", "=", "0.0001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--bn_clr\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"if true, add a bn layer for the output of simclr model\"", ")", "\n", "#data", "\n", "parser", ".", "add_argument", "(", "'--src_dataset'", ",", "type", "=", "str", ",", "default", "=", "'gta5'", ",", "help", "=", "'gta5|synthia'", ")", "\n", "parser", ".", "add_argument", "(", "'--tgt_dataset'", ",", "type", "=", "str", ",", "default", "=", "'cityscapes'", ",", "help", "=", "'cityscapes'", ")", "\n", "parser", ".", "add_argument", "(", "'--src_rootpath'", ",", "type", "=", "str", ",", "default", "=", "'Dataset/GTA5'", ")", "\n", "parser", ".", "add_argument", "(", "'--tgt_rootpath'", ",", "type", "=", "str", ",", "default", "=", "'Dataset/cityscapes'", ")", "\n", "parser", ".", "add_argument", "(", "'--path_LP'", ",", "type", "=", "str", ",", "default", "=", "'Pseudo/pretrain_warmup/LP0.95'", ",", "help", "=", "'path of probability-based PLA'", ")", "\n", "parser", ".", "add_argument", "(", "'--path_soft'", ",", "type", "=", "str", ",", "default", "=", "'Pseudo/pretrain_warmup_soft/LP0.0'", ",", "help", "=", "'soft pseudo label for rectification'", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_thred\"", ",", "default", "=", "0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--used_save_pseudo'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if True used saved pseudo label'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_droplast'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--resize'", ",", "type", "=", "int", ",", "default", "=", "2200", ",", "help", "=", "'resize long size'", ")", "\n", "parser", ".", "add_argument", "(", "'--rcrop'", ",", "type", "=", "str", ",", "default", "=", "'896,512'", ",", "help", "=", "'rondom crop size'", ")", "\n", "parser", ".", "add_argument", "(", "'--hflip'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'random flip probility'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--n_class'", ",", "type", "=", "int", ",", "default", "=", "19", ",", "help", "=", "'19|16|13'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "6", ")", "\n", "#loss", "\n", "parser", ".", "add_argument", "(", "'--gan'", ",", "type", "=", "str", ",", "default", "=", "'LS'", ",", "help", "=", "'Vanilla|LS'", ")", "\n", "parser", ".", "add_argument", "(", "'--adv'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'loss weight of adv loss, only use when stage=warm_up'", ")", "\n", "parser", ".", "add_argument", "(", "'--S_pseudo_src'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'loss weight of pseudo label for strong augmentation of source'", ")", "\n", "parser", ".", "add_argument", "(", "\"--rce\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"if true, use symmetry cross entropy loss\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--rce_alpha\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "\"loss weight for symmetry cross entropy loss\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--rce_beta\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "\"loss weight for symmetry cross entropy loss\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--regular_w\"", ",", "default", "=", "0", ",", "type", "=", "float", ",", "help", "=", "'loss weight for regular term'", ")", "\n", "parser", ".", "add_argument", "(", "\"--regular_type\"", ",", "default", "=", "'MRKLD'", ",", "type", "=", "str", ",", "help", "=", "'MRENT|MRKLD'", ")", "\n", "parser", ".", "add_argument", "(", "'--proto_consistW'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'loss weight for proto_consist'", ")", "\n", "parser", ".", "add_argument", "(", "\"--distillation\"", ",", "default", "=", "0", ",", "type", "=", "float", ",", "help", "=", "\"kl loss weight\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--S_pseudo'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'loss weight of pseudo label for strong augmentation'", ")", "\n", "\n", "#print", "\n", "parser", ".", "add_argument", "(", "'--print_interval'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'print loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_interval'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'validate model iter'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--noshuffle'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not use shuffle'", ")", "\n", "parser", ".", "add_argument", "(", "'--noaug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not use data augmentation'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--proto_rectify'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--proto_temperature'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "#stage2", "\n", "parser", ".", "add_argument", "(", "\"--threshold\"", ",", "default", "=", "-", "1", ",", "type", "=", "float", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.parser_train.relative_path_to_absolute_path": [[74, 83], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "int", "int", "opt.rcrop.split", "opt.rcrop.split"], "function", ["None"], ["", "def", "relative_path_to_absolute_path", "(", "opt", ")", ":", "\n", "    ", "opt", ".", "rcrop", "=", "[", "int", "(", "opt", ".", "rcrop", ".", "split", "(", "','", ")", "[", "0", "]", ")", ",", "int", "(", "opt", ".", "rcrop", ".", "split", "(", "','", ")", "[", "1", "]", ")", "]", "\n", "opt", ".", "resume_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "opt", ".", "resume_path", ")", "\n", "opt", ".", "src_rootpath", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "opt", ".", "src_rootpath", ")", "\n", "opt", ".", "tgt_rootpath", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "opt", ".", "tgt_rootpath", ")", "\n", "opt", ".", "path_LP", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "opt", ".", "path_LP", ")", "\n", "opt", ".", "path_soft", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "opt", ".", "path_soft", ")", "\n", "opt", ".", "logdir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "'logs'", ",", "opt", ".", "name", ")", "\n", "return", "opt", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.test.test": [[18, 35], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "torch.device", "torch.device", "data.create_dataset", "metrics.runningScore", "test.validation", "models.adaptation_modelv2.CustomModel", "adaptation_modelv2.CustomModel.BaseNet.load_state_dict", "torch.cuda.is_available", "torch.cuda.is_available", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.create_dataset", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.test.validation"], ["def", "test", "(", "opt", ",", "logger", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "## create dataset", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "datasets", "=", "create_dataset", "(", "opt", ",", "logger", ")", "\n", "\n", "if", "opt", ".", "model_name", "==", "'deeplabv2'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "opt", ".", "resume_path", ")", "[", "'ResNet101'", "]", "[", "\"model_state\"", "]", "\n", "model", "=", "adaptation_modelv2", ".", "CustomModel", "(", "opt", ",", "logger", ")", "\n", "model", ".", "BaseNet", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "", "running_metrics_val", "=", "runningScore", "(", "opt", ".", "n_class", ")", "\n", "\n", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "running_metrics_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.test.validation": [[36, 55], ["model.eval", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "running_metrics_val.get_scores", "score.items", "class_iou.items", "running_metrics_val.reset", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.no_grad", "torch.no_grad", "test.validate", "print", "logger.info", "logger.info"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.runningScore.get_scores", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.averageMeter.reset", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.test.validate"], ["", "def", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "running_metrics_val", ")", ":", "\n", "    ", "_k", "=", "-", "1", "\n", "model", ".", "eval", "(", "logger", "=", "logger", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "validate", "(", "datasets", ".", "target_valid_loader", ",", "device", ",", "model", ",", "running_metrics_val", ")", "\n", "\n", "", "score", ",", "class_iou", "=", "running_metrics_val", ".", "get_scores", "(", ")", "\n", "for", "k", ",", "v", "in", "score", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "k", ",", "v", ")", "\n", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "class_iou", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "running_metrics_val", ".", "reset", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "score", "[", "\"Mean IoU : \\t\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.test.validate": [[56, 69], ["torch.nn.Softmax", "torch.nn.Softmax", "tqdm.tqdm", "data_i[].to", "data_i[].to", "model.BaseNet_DP", "torch.interpolate", "[].cpu().numpy", "data_i[].to.data.cpu().numpy", "running_metrics_val.update", "[].cpu", "data_i[].to.data.cpu", "data_i[].to.size", "F.interpolate.data.max"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.averageMeter.update"], ["", "def", "validate", "(", "valid_loader", ",", "device", ",", "model", ",", "running_metrics_val", ")", ":", "\n", "    ", "sm", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "for", "data_i", "in", "tqdm", "(", "valid_loader", ")", ":", "\n", "        ", "images_val", "=", "data_i", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "labels_val", "=", "data_i", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "\n", "outs", "=", "model", ".", "BaseNet_DP", "(", "images_val", ")", "\n", "#outputs = F.interpolate(sm(outs['out']), size=images_val.size()[2:], mode='bilinear', align_corners=True)", "\n", "outputs", "=", "F", ".", "interpolate", "(", "outs", "[", "'out'", "]", ",", "size", "=", "images_val", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "pred", "=", "outputs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt", "=", "labels_val", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "running_metrics_val", ".", "update", "(", "gt", ",", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.test.get_logger": [[70, 79], ["logging.getLogger", "os.path.join", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel"], "function", ["None"], ["", "", "def", "get_logger", "(", "logdir", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'ptsemseg'", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'run.log'", ")", "\n", "hdlr", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(levelname)s %(message)s'", ")", "\n", "hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "hdlr", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.utils.get_logger": [[11, 22], ["logging.getLogger", "[].replace", "ts.replace().replace.replace().replace", "os.path.join", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "ts.replace().replace.replace", "str().split", "str", "datetime.datetime.now"], "function", ["None"], ["def", "get_logger", "(", "logdir", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'ptsemseg'", ")", "\n", "ts", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "ts", "=", "ts", ".", "replace", "(", "\":\"", ",", "\"_\"", ")", ".", "replace", "(", "\"-\"", ",", "\"_\"", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'run_{}.log'", ".", "format", "(", "ts", ")", ")", "\n", "hdlr", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(levelname)s %(message)s'", ")", "\n", "hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "hdlr", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.utils.fliplr": [[23, 28], ["torch.arange().long().cuda", "img.index_select", "torch.arange().long", "torch.arange", "img.size"], "function", ["None"], ["", "def", "fliplr", "(", "img", ")", ":", "\n", "    ", "'''flip horizontal'''", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "img", ".", "size", "(", "3", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "# N x C x H x W", "\n", "img_flip", "=", "img", ".", "index_select", "(", "3", ",", "inv_idx", ")", "\n", "return", "img_flip", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.discriminator.FCDiscriminator.__init__": [[14, 23], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", "=", "64", ")", ":", "\n", "        ", "super", "(", "FCDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "*", "2", ",", "planes", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "planes", "*", "4", ",", "planes", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "planes", "*", "8", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.discriminator.FCDiscriminator.forward": [[24, 35], ["discriminator.FCDiscriminator.conv1", "discriminator.FCDiscriminator.relu", "discriminator.FCDiscriminator.conv2", "discriminator.FCDiscriminator.relu", "discriminator.FCDiscriminator.conv3", "discriminator.FCDiscriminator.relu", "discriminator.FCDiscriminator.conv4", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.discriminator.FCDiscriminator_low.__init__": [[41, 49], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", "=", "64", ")", ":", "\n", "        ", "super", "(", "FCDiscriminator_low", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "*", "2", ",", "planes", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "planes", "*", "4", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.discriminator.FCDiscriminator_low.forward": [[50, 59], ["discriminator.FCDiscriminator_low.conv1", "discriminator.FCDiscriminator_low.relu", "discriminator.FCDiscriminator_low.conv2", "discriminator.FCDiscriminator_low.relu", "discriminator.FCDiscriminator_low.conv3", "discriminator.FCDiscriminator_low.leaky_relu", "discriminator.FCDiscriminator_low.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.discriminator.FCDiscriminator_out.__init__": [[65, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", "=", "64", ")", ":", "\n", "        ", "super", "(", "FCDiscriminator_out", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "*", "2", ",", "planes", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "planes", "*", "4", ",", "planes", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "planes", "*", "8", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.discriminator.FCDiscriminator_out.forward": [[75, 86], ["discriminator.FCDiscriminator_out.conv1", "discriminator.FCDiscriminator_out.relu", "discriminator.FCDiscriminator_out.conv2", "discriminator.FCDiscriminator_out.relu", "discriminator.FCDiscriminator_out.conv3", "discriminator.FCDiscriminator_out.relu", "discriminator.FCDiscriminator_out.conv4", "discriminator.FCDiscriminator_out.leaky_relu", "discriminator.FCDiscriminator_out.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.discriminator.FCDiscriminator_class.__init__": [[115, 128], ["torch.Module.__init__", "discriminator.FCDiscriminator_class.DISCRIMINATOR"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["", "", "def", "__init__", "(", "self", ",", "inplanes", ",", "midplanes", ",", "planes", "=", "32", ")", ":", "\n", "        ", "'''\n        midplanes: channel size after reduction\n        '''", "\n", "\n", "super", "(", "FCDiscriminator_class", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplace", "=", "inplanes", "\n", "self", ".", "midplanes", "=", "midplanes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "source_unique", "=", "[", "]", "\n", "self", ".", "target_unique", "=", "[", "]", "\n", "self", ".", "common_unique", "=", "[", "]", "\n", "self", ".", "discriminator", "=", "self", ".", "DISCRIMINATOR", "(", "inplanes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.discriminator.FCDiscriminator_class.forward": [[148, 152], ["discriminator.FCDiscriminator_class.discriminator"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "discriminator", "(", "x", ")", "\n", "pass", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.discriminator.FCDiscriminator_class.calc_common_unique": [[188, 196], ["range", "discriminator.FCDiscriminator_class.common_unique.append"], "methods", ["None"], ["", "def", "calc_common_unique", "(", "self", ",", "source_unique", ",", "target_unique", ")", ":", "\n", "        ", "self", ".", "source_unique", "=", "source_unique", "\n", "self", ".", "target_unique", "=", "target_unique", "\n", "self", ".", "common_unique", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "19", ")", ":", "\n", "            ", "if", "(", "i", "in", "self", ".", "source_unique", ")", "and", "(", "i", "in", "self", ".", "target_unique", ")", ":", "\n", "                ", "self", ".", "common_unique", ".", "append", "(", "i", ")", "\n", "", "", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.discriminator.FCDiscriminator_class.calc_valid_unique": [[197, 202], ["range", "discriminator.FCDiscriminator_class.valid_unique.append"], "methods", ["None"], ["", "def", "calc_valid_unique", "(", "self", ",", "classes_list", ")", ":", "\n", "        ", "self", ".", "valid_unique", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "19", ")", ":", "\n", "            ", "if", "(", "i", "in", "classes_list", ")", ":", "\n", "                ", "self", ".", "valid_unique", ".", "append", "(", "i", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.BasicBlock.__init__": [[32, 41], ["torch.Module.__init__", "deeplabv2.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplabv2.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.conv3x3", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.BasicBlock.forward": [[42, 59], ["deeplabv2.BasicBlock.conv1", "deeplabv2.BasicBlock.bn1", "deeplabv2.BasicBlock.relu", "deeplabv2.BasicBlock.conv2", "deeplabv2.BasicBlock.bn2", "deeplabv2.BasicBlock.relu", "deeplabv2.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.Bottleneck.__init__": [[64, 84], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "# for i in self.bn1.parameters():", "\n", "#     i.requires_grad = False", "\n", "\n", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "# for i in self.bn2.parameters():", "\n", "#     i.requires_grad = False", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "# for i in self.bn3.parameters():", "\n", "#     i.requires_grad = False", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.Bottleneck.forward": [[85, 106], ["deeplabv2.Bottleneck.conv1", "deeplabv2.Bottleneck.bn1", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.conv2", "deeplabv2.Bottleneck.bn2", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.conv3", "deeplabv2.Bottleneck.bn3", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.Classifier_Module.__init__": [[109, 118], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "deeplabv2.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.Classifier_Module.forward": [[119, 124], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.SEBlock.__init__": [[126, 134], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "r", "=", "16", ")", ":", "\n", "        ", "super", "(", "SEBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "global_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "se", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "inplanes", ",", "inplanes", "//", "r", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "inplanes", "//", "r", ",", "inplanes", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.SEBlock.forward": [[135, 140], ["deeplabv2.SEBlock.global_pool", "xx.view.view.view", "deeplabv2.SEBlock.se().unsqueeze().unsqueeze", "x.mul", "xx.view.view.size", "xx.view.view.size", "deeplabv2.SEBlock.se().unsqueeze", "deeplabv2.SEBlock.se"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "xx", "=", "self", ".", "global_pool", "(", "x", ")", "\n", "xx", "=", "xx", ".", "view", "(", "xx", ".", "size", "(", "0", ")", ",", "xx", ".", "size", "(", "1", ")", ")", "\n", "se_weight", "=", "self", ".", "se", "(", "xx", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "x", ".", "mul", "(", "se_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.Classifier_Module2.__init__": [[142, 196], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "deeplabv2.Classifier_Module2.conv2d_list.append", "zip", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deeplabv2.Classifier_Module2.conv2d_list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "isinstance", "isinstance", "isinstance", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplabv2.SEBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "isinstance", "isinstance", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ",", "droprate", "=", "0.1", ",", "use_se", "=", "True", ")", ":", "\n", "        ", "super", "(", "Classifier_Module2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", ")", "\n", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "#self.conv2d_list.append(", "\n", "#    nn.BatchNorm2d(inplanes))", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "*", "[", "\n", "#nn.ReflectionPad2d(padding),", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", ")", "\n", "\n", "", "if", "use_se", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "*", "[", "SEBlock", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", "]", ")", "\n", "\n", "", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "Dropout2d", "(", "droprate", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", "]", ")", "\n", "\n", "##########init#######", "\n", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "bottleneck", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "head", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.Classifier_Module2.forward": [[197, 212], ["range", "deeplabv2.Classifier_Module2.bottleneck", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplabv2.Classifier_Module2.head", "len"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "get_feat", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", ")", ",", "1", ")", "\n", "", "out", "=", "self", ".", "bottleneck", "(", "out", ")", "\n", "if", "get_feat", ":", "\n", "            ", "out_dict", "=", "{", "}", "\n", "out", "=", "self", ".", "head", "[", "0", "]", "(", "out", ")", "\n", "out_dict", "[", "'feat'", "]", "=", "out", "\n", "out", "=", "self", ".", "head", "[", "1", "]", "(", "out", ")", "\n", "out_dict", "[", "'out'", "]", "=", "out", "\n", "return", "out_dict", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "head", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.ResNet101.__init__": [[214, 244], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplabv2.ResNet101._make_layer", "deeplabv2.ResNet101._make_layer", "deeplabv2.ResNet101._make_layer", "deeplabv2.ResNet101._make_layer", "deeplabv2.ResNet101._make_pred_layer", "deeplabv2.ResNet101.modules", "BatchNorm", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.ResNetMulti._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "BatchNorm", ",", "bn_clr", "=", "False", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "bn_clr", "=", "bn_clr", "\n", "super", "(", "ResNet101", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "# for i in self.bn1.parameters():", "\n", "#     i.requires_grad = False", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "#self.layer5 = self._make_pred_layer(Classifier_Module, 2048, [6, 12, 18, 24], [6, 12, 18, 24], num_classes)", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module2", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "if", "self", ".", "bn_clr", ":", "\n", "            ", "self", ".", "bn_pretrain", "=", "BatchNorm", "(", "2048", ",", "affine", "=", "affine_par", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#        for i in m.parameters():", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.ResNet101._make_layer": [[247, 263], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "# for i in downsample._modules['1'].parameters():", "\n", "#     i.requires_grad = False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.ResNet101._make_pred_layer": [[264, 266], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.ResNet101.forward": [[267, 291], ["deeplabv2.ResNet101.size", "deeplabv2.ResNet101.conv1", "deeplabv2.ResNet101.bn1", "deeplabv2.ResNet101.relu", "deeplabv2.ResNet101.maxpool", "deeplabv2.ResNet101.layer1", "deeplabv2.ResNet101.layer2", "deeplabv2.ResNet101.layer3", "deeplabv2.ResNet101.layer4", "deeplabv2.ResNet101.layer5", "deeplabv2.ResNet101.bn_pretrain"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "ssl", "=", "False", ",", "lbl", "=", "None", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "self", ".", "bn_clr", ":", "\n", "            ", "x", "=", "self", ".", "bn_pretrain", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "layer5", "(", "x", ",", "get_feat", "=", "True", ")", "\n", "# out = dict()", "\n", "# out['feat'] = x", "\n", "# x = self.layer5(x)", "\n", "\n", "# if not ssl:", "\n", "#     x = nn.functional.upsample(x, (h, w), mode='bilinear', align_corners=True)", "\n", "#     if lbl is not None:", "\n", "#         self.loss = self.CrossEntropy2d(x, lbl)    ", "\n", "# out['out'] = x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.ResNet101.get_1x_lr_params": [[292, 310], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params", "(", "self", ")", ":", "\n", "\n", "        ", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.ResNet101.get_10x_lr_params": [[311, 321], ["b.append", "range", "b.append", "deeplabv2.ResNet101.layer5.parameters", "len", "deeplabv2.ResNet101.bn_pretrain.parameters"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "\n", "        ", "b", "=", "[", "]", "\n", "if", "self", ".", "bn_clr", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "bn_pretrain", ".", "parameters", "(", ")", ")", "\n", "", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.ResNet101.optim_parameters": [[322, 325], ["deeplabv2.ResNet101.get_1x_lr_params", "deeplabv2.ResNet101.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.ResNet101.get_1x_lr_params", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.ResNet101.adjust_learning_rate": [[326, 331], ["len", "float"], "methods", ["None"], ["", "def", "adjust_learning_rate", "(", "self", ",", "args", ",", "optimizer", ",", "i", ")", ":", "\n", "        ", "lr", "=", "args", ".", "learning_rate", "*", "(", "(", "1", "-", "float", "(", "i", ")", "/", "args", ".", "num_steps", ")", "**", "(", "args", ".", "power", ")", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.ResNet101.CrossEntropy2d": [[332, 348], ["predict[].view.size", "predict[].view.transpose().transpose().contiguous", "predict[].view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "predict[].view.dim", "target.dim", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "target.data.dim", "Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predict[].view.transpose().transpose", "predict[].view.transpose", "target_mask.view().repeat", "target_mask.view"], "methods", ["None"], ["", "", "def", "CrossEntropy2d", "(", "self", ",", "predict", ",", "target", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "assert", "not", "target", ".", "requires_grad", "\n", "assert", "predict", ".", "dim", "(", ")", "==", "4", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "\n", "assert", "predict", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "assert", "predict", ".", "size", "(", "2", ")", "==", "target", ".", "size", "(", "1", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "2", ")", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "assert", "predict", ".", "size", "(", "3", ")", "==", "target", ".", "size", "(", "2", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "3", ")", ",", "target", ".", "size", "(", "3", ")", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "predict", ".", "size", "(", ")", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "255", ")", "\n", "target", "=", "target", "[", "target_mask", "]", "\n", "if", "not", "target", ".", "data", ".", "dim", "(", ")", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "predict", "=", "predict", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "predict", "=", "predict", "[", "target_mask", ".", "view", "(", "n", ",", "h", ",", "w", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "c", ")", "]", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "predict", ",", "target", ",", "weight", "=", "weight", ",", "size_average", "=", "size_average", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.outS": [[15, 21], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.conv3x3": [[23, 27], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.freeze_bn_func": [[349, 354], ["isinstance", "isinstance", "m.__class__.__name__.find"], "function", ["None"], ["", "", "def", "freeze_bn_func", "(", "m", ")", ":", "\n", "    ", "if", "m", ".", "__class__", ".", "__name__", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", "or", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.Deeplab": [[355, 377], ["deeplabv2.ResNet101", "ResNet101.state_dict", "model_zoo.load_url.items", "model.state_dict.update", "ResNet101.load_state_dict", "ResNet101.apply", "torch.load_url", "torch.load", "torch.load", "torch.load", "torch.load", "ResNet101.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_proda_finetune.metrics.averageMeter.update"], ["", "", "def", "Deeplab", "(", "BatchNorm", ",", "num_classes", "=", "21", ",", "freeze_bn", "=", "False", ",", "restore_from", "=", "None", ",", "initialization", "=", "None", ",", "bn_clr", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet101", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "BatchNorm", ",", "bn_clr", "=", "bn_clr", ")", "\n", "if", "freeze_bn", ":", "\n", "        ", "model", ".", "apply", "(", "freeze_bn_func", ")", "\n", "", "if", "initialization", "is", "None", ":", "\n", "        ", "pretrain_dict", "=", "model_zoo", ".", "load_url", "(", "'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth'", ")", "\n", "", "else", ":", "\n", "        ", "pretrain_dict", "=", "torch", ".", "load", "(", "initialization", ")", "[", "'state_dict'", "]", "\n", "", "model_dict", "=", "{", "}", "\n", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "state_dict", ":", "\n", "            ", "model_dict", "[", "k", "]", "=", "v", "\n", "", "", "state_dict", ".", "update", "(", "model_dict", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "if", "restore_from", "is", "not", "None", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "restore_from", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'ResNet101'", "]", "[", "\"model_state\"", "]", ")", "\n", "#model.load_state_dict(checkpoint['ema'])", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.feat_prototype_distance_module.__init__": [[17, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "feat_prototype_distance_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.feat_prototype_distance_module.forward": [[20, 27], ["range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "objective_vectors[].reshape().expand", "objective_vectors[].reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat", ",", "objective_vectors", ",", "class_numbers", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "feat", ".", "shape", "\n", "feat_proto_distance", "=", "-", "torch", ".", "ones", "(", "(", "N", ",", "class_numbers", ",", "H", ",", "W", ")", ")", ".", "to", "(", "feat", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "class_numbers", ")", ":", "\n", "#feat_proto_distance[:, i, :, :] = torch.norm(torch.Tensor(self.objective_vectors[i]).reshape(-1,1,1).expand(-1, H, W).to(feat.device) - feat, 2, dim=1,)", "\n", "            ", "feat_proto_distance", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "torch", ".", "norm", "(", "objective_vectors", "[", "0", ",", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "H", ",", "W", ")", "-", "feat", ",", "2", ",", "dim", "=", "1", ",", ")", "\n", "", "return", "feat_proto_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.__init__": [[29, 112], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "logger.info", "adaptation_modelv2.CustomModel.nets.extend", "adaptation_modelv2.CustomModel.optimizers.extend", "utils.get_scheduler", "adaptation_modelv2.CustomModel.schedulers.extend", "adaptation_modelv2.CustomModel.init_device", "adaptation_modelv2.CustomModel.init_device", "adaptation_modelv2.CustomModel.nets_DP.append", "models.deeplabv2.Deeplab", "models.discriminator.FCDiscriminator", "adaptation_modelv2.CustomModel.init_device", "adaptation_modelv2.CustomModel.nets.extend", "adaptation_modelv2.CustomModel.nets_DP.append", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "adaptation_modelv2.CustomModel.optimizers.extend", "utils.get_scheduler", "adaptation_modelv2.CustomModel.schedulers.extend", "optimizer_cls", "optimizer_cls", "models.deeplabv2.Deeplab", "adaptation_modelv2.CustomModel.BaseNet_ema.load_state_dict", "models.deeplabv2.Deeplab", "adaptation_modelv2.CustomModel.teacher.eval", "adaptation_modelv2.CustomModel.init_device", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "adaptation_modelv2.feat_prototype_distance_module", "adaptation_modelv2.CustomModel.init_device", "NotImplementedError", "models.deeplabv2.Deeplab", "models.deeplabv2.Deeplab", "adaptation_modelv2.CustomModel.net_D.parameters", "adaptation_modelv2.CustomModel.BaseNet.parameters", "adaptation_modelv2.CustomModel.BaseNet.state_dict().copy", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "os.path.join", "adaptation_modelv2.CustomModel.BaseNet.get_1x_lr_params", "adaptation_modelv2.CustomModel.BaseNet.get_10x_lr_params", "adaptation_modelv2.CustomModel.BaseNet.state_dict"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.get_scheduler", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.init_device", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.init_device", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.Deeplab", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.init_device", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.get_scheduler", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.Deeplab", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.Deeplab", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.init_device", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.init_device", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.Deeplab", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.Deeplab", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.deeplabv2.ResNet101.get_1x_lr_params", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_10x_lr_params"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "logger", ",", "isTrain", "=", "True", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "class_numbers", "=", "opt", ".", "n_class", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "best_iou", "=", "-", "100", "\n", "self", ".", "nets", "=", "[", "]", "\n", "self", ".", "nets_DP", "=", "[", "]", "\n", "self", ".", "default_gpu", "=", "0", "\n", "self", ".", "objective_vectors", "=", "torch", ".", "zeros", "(", "[", "self", ".", "class_numbers", ",", "256", "]", ")", "\n", "self", ".", "objective_vectors_num", "=", "torch", ".", "zeros", "(", "[", "self", ".", "class_numbers", "]", ")", "\n", "\n", "if", "opt", ".", "bn", "==", "'sync_bn'", ":", "\n", "            ", "BatchNorm", "=", "SynchronizedBatchNorm2d", "\n", "", "elif", "opt", ".", "bn", "==", "'bn'", ":", "\n", "            ", "BatchNorm", "=", "nn", ".", "BatchNorm2d", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'batch norm choice {} is not implemented'", ".", "format", "(", "opt", ".", "bn", ")", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "no_resume", ":", "\n", "            ", "restore_from", "=", "None", "\n", "", "else", ":", "\n", "            ", "restore_from", "=", "opt", ".", "resume_path", "\n", "self", ".", "best_iou", "=", "0", "\n", "", "if", "self", ".", "opt", ".", "student_init", "==", "'imagenet'", ":", "\n", "            ", "self", ".", "BaseNet", "=", "Deeplab", "(", "BatchNorm", ",", "num_classes", "=", "self", ".", "class_numbers", ",", "freeze_bn", "=", "False", ",", "restore_from", "=", "restore_from", ")", "\n", "", "elif", "self", ".", "opt", ".", "student_init", "==", "'simclr'", ":", "\n", "            ", "self", ".", "BaseNet", "=", "Deeplab", "(", "BatchNorm", ",", "num_classes", "=", "self", ".", "class_numbers", ",", "freeze_bn", "=", "False", ",", "restore_from", "=", "restore_from", ",", "\n", "initialization", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root", ",", "'pretrained/simclr/r101_1x_sk0.pth'", ")", ",", "bn_clr", "=", "opt", ".", "bn_clr", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "BaseNet", "=", "Deeplab", "(", "BatchNorm", ",", "num_classes", "=", "self", ".", "class_numbers", ",", "freeze_bn", "=", "False", ",", "restore_from", "=", "restore_from", ")", "\n", "\n", "", "logger", ".", "info", "(", "'the backbone is {}'", ".", "format", "(", "opt", ".", "model_name", ")", ")", "\n", "\n", "self", ".", "nets", ".", "extend", "(", "[", "self", ".", "BaseNet", "]", ")", "\n", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "optimizer_cls", "=", "torch", ".", "optim", ".", "SGD", "\n", "optimizer_params", "=", "{", "'lr'", ":", "opt", ".", "lr", ",", "'weight_decay'", ":", "2e-4", ",", "'momentum'", ":", "0.9", "}", "\n", "\n", "if", "self", ".", "opt", ".", "stage", "==", "'warm_up'", ":", "\n", "            ", "self", ".", "net_D", "=", "FCDiscriminator", "(", "inplanes", "=", "self", ".", "class_numbers", ")", "\n", "self", ".", "net_D_DP", "=", "self", ".", "init_device", "(", "self", ".", "net_D", ",", "gpu_id", "=", "self", ".", "default_gpu", ",", "whether_DP", "=", "True", ")", "\n", "self", ".", "nets", ".", "extend", "(", "[", "self", ".", "net_D", "]", ")", "\n", "self", ".", "nets_DP", ".", "append", "(", "self", ".", "net_D_DP", ")", "\n", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "net_D", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "self", ".", "optimizers", ".", "extend", "(", "[", "self", ".", "optimizer_D", "]", ")", "\n", "self", ".", "DSchedule", "=", "get_scheduler", "(", "self", ".", "optimizer_D", ",", "opt", ")", "\n", "self", ".", "schedulers", ".", "extend", "(", "[", "self", ".", "DSchedule", "]", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "finetune", "or", "self", ".", "opt", ".", "stage", "==", "'warm_up'", ":", "\n", "            ", "self", ".", "BaseOpti", "=", "optimizer_cls", "(", "[", "{", "'params'", ":", "self", ".", "BaseNet", ".", "get_1x_lr_params", "(", ")", ",", "'lr'", ":", "optimizer_params", "[", "'lr'", "]", "}", ",", "\n", "{", "'params'", ":", "self", ".", "BaseNet", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "optimizer_params", "[", "'lr'", "]", "*", "10", "}", "]", ",", "**", "optimizer_params", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "BaseOpti", "=", "optimizer_cls", "(", "self", ".", "BaseNet", ".", "parameters", "(", ")", ",", "**", "optimizer_params", ")", "\n", "", "self", ".", "optimizers", ".", "extend", "(", "[", "self", ".", "BaseOpti", "]", ")", "\n", "\n", "self", ".", "BaseSchedule", "=", "get_scheduler", "(", "self", ".", "BaseOpti", ",", "opt", ")", "\n", "self", ".", "schedulers", ".", "extend", "(", "[", "self", ".", "BaseSchedule", "]", ")", "\n", "\n", "if", "self", ".", "opt", ".", "ema", ":", "\n", "            ", "self", ".", "BaseNet_ema", "=", "Deeplab", "(", "BatchNorm", ",", "num_classes", "=", "self", ".", "class_numbers", ",", "freeze_bn", "=", "False", ",", "restore_from", "=", "restore_from", ",", "bn_clr", "=", "opt", ".", "ema_bn", ")", "\n", "self", ".", "BaseNet_ema", ".", "load_state_dict", "(", "self", ".", "BaseNet", ".", "state_dict", "(", ")", ".", "copy", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "distillation", ">", "0", ":", "\n", "            ", "self", ".", "teacher", "=", "Deeplab", "(", "BatchNorm", ",", "num_classes", "=", "self", ".", "class_numbers", ",", "freeze_bn", "=", "False", ",", "restore_from", "=", "opt", ".", "resume_path", ",", "bn_clr", "=", "opt", ".", "ema_bn", ")", "\n", "self", ".", "teacher", ".", "eval", "(", ")", "\n", "self", ".", "teacher_DP", "=", "self", ".", "init_device", "(", "self", ".", "teacher", ",", "gpu_id", "=", "self", ".", "default_gpu", ",", "whether_DP", "=", "True", ")", "\n", "\n", "\n", "", "self", ".", "adv_source_label", "=", "0", "\n", "self", ".", "adv_target_label", "=", "1", "\n", "if", "self", ".", "opt", ".", "gan", "==", "'Vanilla'", ":", "\n", "            ", "self", ".", "bceloss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "size_average", "=", "True", ")", "\n", "", "elif", "self", ".", "opt", ".", "gan", "==", "'LS'", ":", "\n", "            ", "self", ".", "bceloss", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "", "self", ".", "feat_prototype_distance_DP", "=", "self", ".", "init_device", "(", "feat_prototype_distance_module", "(", ")", ",", "gpu_id", "=", "self", ".", "default_gpu", ",", "whether_DP", "=", "True", ")", "\n", "\n", "self", ".", "BaseNet_DP", "=", "self", ".", "init_device", "(", "self", ".", "BaseNet", ",", "gpu_id", "=", "self", ".", "default_gpu", ",", "whether_DP", "=", "True", ")", "\n", "self", ".", "nets_DP", ".", "append", "(", "self", ".", "BaseNet_DP", ")", "\n", "if", "self", ".", "opt", ".", "ema", ":", "\n", "            ", "self", ".", "BaseNet_ema_DP", "=", "self", ".", "init_device", "(", "self", ".", "BaseNet_ema", ",", "gpu_id", "=", "self", ".", "default_gpu", ",", "whether_DP", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.calculate_mean_vector": [[113, 142], ["torch.softmax", "torch.softmax", "torch.softmax", "conf.ge", "torch.softmax.argmax", "adaptation_modelv2.CustomModel.process_label", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "range", "torch.softmax.max", "adaptation_modelv2.CustomModel.float", "adaptation_modelv2.CustomModel.process_label", "range", "feat_cls.size", "vectors.append", "ids.append", "[].item", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.process_label", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.process_label"], ["", "", "def", "calculate_mean_vector", "(", "self", ",", "feat_cls", ",", "outputs", ",", "labels", "=", "None", ",", "thresh", "=", "None", ")", ":", "\n", "        ", "outputs_softmax", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "if", "thresh", "is", "None", ":", "\n", "            ", "thresh", "=", "-", "1", "\n", "", "conf", "=", "outputs_softmax", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "mask", "=", "conf", ".", "ge", "(", "thresh", ")", "\n", "outputs_argmax", "=", "outputs_softmax", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "outputs_argmax", "=", "self", ".", "process_label", "(", "outputs_argmax", ".", "float", "(", ")", ")", "\n", "if", "labels", "is", "None", ":", "\n", "            ", "outputs_pred", "=", "outputs_argmax", "\n", "", "else", ":", "\n", "            ", "labels_expanded", "=", "self", ".", "process_label", "(", "labels", ")", "\n", "outputs_pred", "=", "labels_expanded", "*", "outputs_argmax", "\n", "", "scale_factor", "=", "F", ".", "adaptive_avg_pool2d", "(", "outputs_pred", "*", "mask", ",", "1", ")", "\n", "vectors", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "feat_cls", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "self", ".", "class_numbers", ")", ":", "\n", "                ", "if", "scale_factor", "[", "n", "]", "[", "t", "]", ".", "item", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "(", "outputs_pred", "[", "n", "]", "[", "t", "]", ">", "0", ")", ".", "sum", "(", ")", "<", "10", ":", "\n", "                    ", "continue", "\n", "", "s", "=", "feat_cls", "[", "n", "]", "*", "outputs_pred", "[", "n", "]", "[", "t", "]", "*", "mask", "[", "n", "]", "\n", "# scale = torch.sum(outputs_pred[n][t]) / labels.shape[2] / labels.shape[3] * 2", "\n", "# s = normalisation_pooling()(s, scale)", "\n", "s", "=", "F", ".", "adaptive_avg_pool2d", "(", "s", ",", "1", ")", "/", "scale_factor", "[", "n", "]", "[", "t", "]", "\n", "vectors", ".", "append", "(", "s", ")", "\n", "ids", ".", "append", "(", "t", ")", "\n", "", "", "return", "vectors", ",", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step_adv": [[143, 188], ["adaptation_modelv2.CustomModel.net_D.parameters", "adaptation_modelv2.CustomModel.BaseOpti.zero_grad", "adaptation_modelv2.CustomModel.BaseNet_DP", "torch.interpolate", "torch.interpolate", "torch.interpolate", "adaptation_modelv2.CustomModel.net_D_DP", "torch.interpolate().long", "torch.interpolate().long", "torch.interpolate().long", "torch.interpolate", "torch.interpolate", "torch.interpolate", "utils.cross_entropy2d", "loss_G.backward", "adaptation_modelv2.CustomModel.BaseOpti.step", "adaptation_modelv2.CustomModel.net_D.parameters", "adaptation_modelv2.CustomModel.optimizer_D.zero_grad", "adaptation_modelv2.CustomModel.net_D_DP", "adaptation_modelv2.CustomModel.net_D_DP", "loss_D.backward", "adaptation_modelv2.CustomModel.optimizer_D.step", "adaptation_modelv2.CustomModel.BaseNet_DP", "torch.interpolate", "torch.interpolate", "torch.interpolate", "adaptation_modelv2.CustomModel.label_strong_T().to", "utils.cross_entropy2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "adaptation_modelv2.CustomModel.BaseNet_DP", "torch.interpolate", "torch.interpolate", "torch.interpolate", "utils.cross_entropy2d", "torch.softmax", "torch.softmax", "torch.softmax", "adaptation_modelv2.CustomModel.bceloss", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "adaptation_modelv2.CustomModel.bceloss", "adaptation_modelv2.CustomModel.bceloss", "utils.cross_entropy2d.item", "loss_adv_G.item", "loss_D.item", "source_label.unsqueeze().float", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate().long.reshape", "torch.interpolate.detach", "torch.interpolate.detach", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "adaptation_modelv2.CustomModel.label_strong_T", "adaptation_modelv2.CustomModel.squeeze", "target_x.size", "target_lp.unsqueeze().float", "source_label.unsqueeze", "source_output[].size", "torch.interpolate.clone().float", "source_x.size", "source_x.size", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "target_lp.unsqueeze", "torch.interpolate.clone", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "adaptation_modelv2.CustomModel.data.size", "adaptation_modelv2.CustomModel.data.size", "adaptation_modelv2.CustomModel.data.size"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.cross_entropy2d", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.cross_entropy2d", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.cross_entropy2d", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.label_strong_T"], ["", "def", "step_adv", "(", "self", ",", "source_x", ",", "source_label", ",", "target_x", ",", "target_lp", ",", "source_imageS", ",", "source_params", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "net_D", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "BaseOpti", ".", "zero_grad", "(", ")", "\n", "\n", "if", "self", ".", "opt", ".", "S_pseudo_src", ">", "0", ":", "\n", "            ", "source_output", "=", "self", ".", "BaseNet_DP", "(", "source_imageS", ")", "\n", "source_label_d4", "=", "F", ".", "interpolate", "(", "source_label", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ",", "size", "=", "source_output", "[", "'out'", "]", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "source_labelS", "=", "self", ".", "label_strong_T", "(", "source_label_d4", ".", "clone", "(", ")", ".", "float", "(", ")", ",", "source_params", ",", "padding", "=", "250", ",", "scale", "=", "4", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "loss_", "=", "cross_entropy2d", "(", "input", "=", "source_output", "[", "'out'", "]", ",", "target", "=", "source_labelS", ".", "squeeze", "(", "1", ")", ")", "\n", "loss_GTA", "=", "loss_", "*", "self", ".", "opt", ".", "S_pseudo_src", "\n", "source_outputUp", "=", "F", ".", "interpolate", "(", "source_output", "[", "'out'", "]", ",", "size", "=", "source_x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "source_output", "=", "self", ".", "BaseNet_DP", "(", "source_x", ",", "ssl", "=", "True", ")", "\n", "source_outputUp", "=", "F", ".", "interpolate", "(", "source_output", "[", "'out'", "]", ",", "size", "=", "source_x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "loss_GTA", "=", "cross_entropy2d", "(", "input", "=", "source_outputUp", ",", "target", "=", "source_label", ",", "size_average", "=", "True", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "target_output", "=", "self", ".", "BaseNet_DP", "(", "target_x", ",", "ssl", "=", "True", ")", "\n", "target_outputUp", "=", "F", ".", "interpolate", "(", "target_output", "[", "'out'", "]", ",", "size", "=", "target_x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "target_D_out", "=", "self", ".", "net_D_DP", "(", "F", ".", "softmax", "(", "target_outputUp", ",", "dim", "=", "1", ")", ")", "\n", "loss_adv_G", "=", "self", ".", "bceloss", "(", "target_D_out", ",", "torch", ".", "FloatTensor", "(", "target_D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "adv_source_label", ")", ".", "to", "(", "target_D_out", ".", "device", ")", ")", "*", "self", ".", "opt", ".", "adv", "\n", "loss_G", "=", "loss_adv_G", "+", "loss_GTA", "\n", "\n", "#target pseudo label", "\n", "threshold_arg", "=", "F", ".", "interpolate", "(", "target_lp", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ",", "scale_factor", "=", "0.25", ")", ".", "long", "(", ")", "\n", "target_out", "=", "F", ".", "interpolate", "(", "target_output", "[", "'out'", "]", ",", "size", "=", "threshold_arg", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "batch", ",", "_", ",", "w", ",", "h", "=", "threshold_arg", ".", "shape", "\n", "loss_target", "=", "cross_entropy2d", "(", "input", "=", "target_out", ",", "target", "=", "threshold_arg", ".", "reshape", "(", "[", "batch", ",", "w", ",", "h", "]", ")", ",", "size_average", "=", "True", ",", "reduction", "=", "'mean'", ")", "\n", "loss_G", "=", "loss_G", "+", "loss_target", "\n", "#            ", "\n", "loss_G", ".", "backward", "(", ")", "\n", "self", ".", "BaseOpti", ".", "step", "(", ")", "\n", "\n", "for", "param", "in", "self", ".", "net_D", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "source_D_out", "=", "self", ".", "net_D_DP", "(", "F", ".", "softmax", "(", "source_outputUp", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", ")", "\n", "target_D_out", "=", "self", ".", "net_D_DP", "(", "F", ".", "softmax", "(", "target_outputUp", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_D", "=", "self", ".", "bceloss", "(", "source_D_out", ",", "torch", ".", "FloatTensor", "(", "source_D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "adv_source_label", ")", ".", "to", "(", "source_D_out", ".", "device", ")", ")", "+", "self", ".", "bceloss", "(", "target_D_out", ",", "torch", ".", "FloatTensor", "(", "target_D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "adv_target_label", ")", ".", "to", "(", "target_D_out", ".", "device", ")", ")", "\n", "loss_D", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "return", "loss_GTA", ".", "item", "(", ")", ",", "loss_adv_G", ".", "item", "(", ")", ",", "loss_D", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.svmin": [[189, 211], ["torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample.", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample.", "print", "print", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "adaptation_modelv2.CustomModel.l1_loss", "print", "numpy.random.randint", "target_x.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "adaptation_modelv2.CustomModel.BaseNet_DP", "round", "round"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.l1_loss"], ["", "def", "svmin", "(", "self", ",", "target_x", ",", "target_outputUp", ")", ":", "\n", "        ", "scale_ratio", "=", "np", ".", "random", ".", "randint", "(", "100.0", "*", "0.8", ",", "100.0", "*", "1.2", ")", "/", "100.0", "\n", "input_size_target", "=", "target_x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "scaled_size_target", "=", "(", "round", "(", "input_size_target", "[", "0", "]", "*", "scale_ratio", "/", "8", ")", "*", "8", ",", "round", "(", "input_size_target", "[", "1", "]", "*", "scale_ratio", "/", "8", ")", "*", "8", ")", "\n", "interp_target_sc", "=", "nn", ".", "Upsample", "(", "size", "=", "scaled_size_target", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "images_sc", "=", "interp_target_sc", "(", "target_x", ")", "\n", "\n", "#no gradient", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "target_output_sc", "=", "self", ".", "BaseNet_DP", "(", "images_sc", ",", "ssl", "=", "True", ")", "\n", "\n", "", "interp_target_sc2ori", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "target_outputUp", ".", "shape", "[", "-", "2", "]", ",", "target_outputUp", ".", "shape", "[", "-", "1", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "pred_trg_main_sc2ori", "=", "interp_target_sc2ori", "(", "target_output_sc", "[", "'out'", "]", ")", "\n", "print", "(", "'ratio:'", ",", "scale_ratio", ",", "images_sc", ".", "shape", ")", "\n", "print", "(", "'output_shape_ori:'", ",", "target_outputUp", ".", "shape", ",", "'augshape:'", ",", "target_output_sc", "[", "'out'", "]", ".", "shape", ",", "'scaled_shape'", ",", "pred_trg_main_sc2ori", ".", "shape", ")", "\n", "out_trg_main_sc2ori", "=", "F", ".", "softmax", "(", "pred_trg_main_sc2ori", ",", "dim", "=", "1", ")", "\n", "target_predictUp", "=", "F", ".", "softmax", "(", "target_outputUp", ",", "dim", "=", "1", ")", "\n", "\n", "loss_svmin", "=", "self", ".", "l1_loss", "(", "out_trg_main_sc2ori", ",", "target_predictUp", ")", "\n", "print", "(", "'loss_svmin:'", ",", "loss_svmin", ")", "\n", "\n", "return", "loss_svmin", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.l1_loss": [[212, 216], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "l1_loss", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "abs", "(", "input", "-", "target", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step": [[217, 304], ["adaptation_modelv2.CustomModel.BaseNet_DP", "torch.interpolate", "torch.interpolate", "torch.interpolate", "utils.cross_entropy2d", "utils.cross_entropy2d.backward", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "utils.cross_entropy2d", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to.backward", "torch.Tensor().to.backward", "torch.Tensor().to.backward", "adaptation_modelv2.CustomModel.BaseOpti.step", "adaptation_modelv2.CustomModel.BaseOpti.zero_grad", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate().long", "torch.interpolate().long", "torch.interpolate().long", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "adaptation_modelv2.CustomModel.BaseNet_DP", "adaptation_modelv2.CustomModel.BaseNet_DP", "adaptation_modelv2.CustomModel.get_prototype_weight", "adaptation_modelv2.CustomModel.label_strong_T().to", "adaptation_modelv2.CustomModel.label_strong_T().to", "adaptation_modelv2.CustomModel.rce", "adaptation_modelv2.CustomModel.regular_loss", "adaptation_modelv2.CustomModel.full2weak", "adaptation_modelv2.CustomModel.feat_prototype_distance", "adaptation_modelv2.CustomModel.label_strong_T", "torch.softmax", "torch.softmax", "torch.softmax", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "adaptation_modelv2.CustomModel.objective_vectors.expand", "adaptation_modelv2.CustomModel.feat_prototype_distance_DP", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div", "adaptation_modelv2.CustomModel.calculate_mean_vector", "range", "zip", "zip", "torch.Tensor().to.item", "torch.Tensor().to.item", "torch.Tensor().to.item", "utils.cross_entropy2d.item", "torch.kl_div.item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "adaptation_modelv2.CustomModel.BaseNet_ema_DP", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "rectified.max", "rectified.sum", "rectified.max", "torch.interpolate().long.reshape", "torch.interpolate().long.reshape().clone", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "adaptation_modelv2.CustomModel.BaseNet_DP", "mask.sum", "ema_out[].detach", "ema_out[].detach", "len", "adaptation_modelv2.CustomModel.update_objective_SingleVector", "adaptation_modelv2.CustomModel.BaseNet.parameters", "adaptation_modelv2.CustomModel.BaseNet_ema.parameters", "adaptation_modelv2.CustomModel.BaseNet.buffers", "adaptation_modelv2.CustomModel.BaseNet_ema.buffers", "buffer_q.data.clone", "source_x.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "adaptation_modelv2.CustomModel.label_strong_T", "adaptation_modelv2.CustomModel.label_strong_T", "ema_vectors[].detach", "target_lp.unsqueeze().float", "int", "int", "int", "int", "torch.interpolate().long.clone().float", "cluster_arg.clone().float", "torch.interpolate().long.reshape", "param_k.data.clone", "param_q.data.clone", "target_lp.unsqueeze", "torch.interpolate().long.clone", "cluster_arg.clone"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.cross_entropy2d", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.cross_entropy2d", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.get_prototype_weight", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.rce", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.regular_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.full2weak", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.feat_prototype_distance", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.label_strong_T", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.calculate_mean_vector", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.update_objective_SingleVector", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.label_strong_T", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.label_strong_T"], ["", "def", "step", "(", "self", ",", "source_x", ",", "source_label", ",", "target_x", ",", "target_imageS", "=", "None", ",", "target_params", "=", "None", ",", "target_lp", "=", "None", ",", "\n", "target_lpsoft", "=", "None", ",", "target_image_full", "=", "None", ",", "target_weak_params", "=", "None", ")", ":", "\n", "\n", "        ", "source_out", "=", "self", ".", "BaseNet_DP", "(", "source_x", ",", "ssl", "=", "True", ")", "\n", "source_outputUp", "=", "F", ".", "interpolate", "(", "source_out", "[", "'out'", "]", ",", "size", "=", "source_x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "loss_GTA", "=", "cross_entropy2d", "(", "input", "=", "source_outputUp", ",", "target", "=", "source_label", ")", "\n", "loss_GTA", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "opt", ".", "proto_rectify", ":", "\n", "            ", "threshold_arg", "=", "F", ".", "interpolate", "(", "target_lpsoft", ",", "scale_factor", "=", "0.25", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "threshold_arg", "=", "F", ".", "interpolate", "(", "target_lp", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ",", "scale_factor", "=", "0.25", ")", ".", "long", "(", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "ema", ":", "\n", "            ", "ema_input", "=", "target_image_full", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "ema_out", "=", "self", ".", "BaseNet_ema_DP", "(", "ema_input", ")", "\n", "", "ema_out", "[", "'feat'", "]", "=", "F", ".", "interpolate", "(", "ema_out", "[", "'feat'", "]", ",", "size", "=", "(", "int", "(", "ema_input", ".", "shape", "[", "2", "]", "/", "4", ")", ",", "int", "(", "ema_input", ".", "shape", "[", "3", "]", "/", "4", ")", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "ema_out", "[", "'out'", "]", "=", "F", ".", "interpolate", "(", "ema_out", "[", "'out'", "]", ",", "size", "=", "(", "int", "(", "ema_input", ".", "shape", "[", "2", "]", "/", "4", ")", ",", "int", "(", "ema_input", ".", "shape", "[", "3", "]", "/", "4", ")", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "", "target_out", "=", "self", ".", "BaseNet_DP", "(", "target_imageS", ")", "if", "self", ".", "opt", ".", "S_pseudo", ">", "0", "else", "self", ".", "BaseNet_DP", "(", "target_x", ")", "\n", "target_out", "[", "'out'", "]", "=", "F", ".", "interpolate", "(", "target_out", "[", "'out'", "]", ",", "size", "=", "threshold_arg", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "target_out", "[", "'feat'", "]", "=", "F", ".", "interpolate", "(", "target_out", "[", "'feat'", "]", ",", "size", "=", "threshold_arg", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "loss", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "to", "(", "self", ".", "default_gpu", ")", "\n", "batch", ",", "_", ",", "w", ",", "h", "=", "threshold_arg", ".", "shape", "\n", "if", "self", ".", "opt", ".", "proto_rectify", ":", "\n", "            ", "weights", "=", "self", ".", "get_prototype_weight", "(", "ema_out", "[", "'feat'", "]", ",", "target_weak_params", "=", "target_weak_params", ")", "\n", "rectified", "=", "weights", "*", "threshold_arg", "\n", "threshold_arg", "=", "rectified", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "rectified", "=", "rectified", "/", "rectified", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "argmax", "=", "rectified", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "threshold_arg", "[", "argmax", "<", "self", ".", "opt", ".", "train_thred", "]", "=", "250", "\n", "", "if", "self", ".", "opt", ".", "S_pseudo", ">", "0", ":", "\n", "            ", "threshold_argS", "=", "self", ".", "label_strong_T", "(", "threshold_arg", ".", "clone", "(", ")", ".", "float", "(", ")", ",", "target_params", ",", "padding", "=", "250", ",", "scale", "=", "4", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "cluster_argS", "=", "self", ".", "label_strong_T", "(", "cluster_arg", ".", "clone", "(", ")", ".", "float", "(", ")", ",", "target_params", ",", "padding", "=", "250", ",", "scale", "=", "4", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "threshold_arg", "=", "threshold_argS", "\n", "\n", "", "loss_CTS", "=", "cross_entropy2d", "(", "input", "=", "target_out", "[", "'out'", "]", ",", "target", "=", "threshold_arg", ".", "reshape", "(", "[", "batch", ",", "w", ",", "h", "]", ")", ")", "\n", "\n", "if", "self", ".", "opt", ".", "rce", ":", "\n", "            ", "rce", "=", "self", ".", "rce", "(", "target_out", "[", "'out'", "]", ",", "threshold_arg", ".", "reshape", "(", "[", "batch", ",", "w", ",", "h", "]", ")", ".", "clone", "(", ")", ")", "\n", "loss_CTS", "=", "self", ".", "opt", ".", "rce_alpha", "*", "loss_CTS", "+", "self", ".", "opt", ".", "rce_beta", "*", "rce", "\n", "\n", "", "if", "self", ".", "opt", ".", "regular_w", ">", "0", ":", "\n", "            ", "regular_loss", "=", "self", ".", "regular_loss", "(", "target_out", "[", "'out'", "]", ")", "\n", "loss_CTS", "=", "loss_CTS", "+", "regular_loss", "*", "self", ".", "opt", ".", "regular_w", "\n", "\n", "", "cluster_argS", "=", "None", "\n", "loss_consist", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "to", "(", "self", ".", "default_gpu", ")", "\n", "if", "self", ".", "opt", ".", "proto_consistW", ">", "0", ":", "\n", "            ", "ema2weak_feat", "=", "self", ".", "full2weak", "(", "ema_out", "[", "'feat'", "]", ",", "target_weak_params", ")", "#N*256*H*W", "\n", "ema2weak_feat_proto_distance", "=", "self", ".", "feat_prototype_distance", "(", "ema2weak_feat", ")", "#N*19*H*W", "\n", "ema2strong_feat_proto_distance", "=", "self", ".", "label_strong_T", "(", "ema2weak_feat_proto_distance", ",", "target_params", ",", "padding", "=", "250", ",", "scale", "=", "4", ")", "\n", "mask", "=", "(", "ema2strong_feat_proto_distance", "!=", "250", ")", ".", "float", "(", ")", "\n", "teacher", "=", "F", ".", "softmax", "(", "-", "ema2strong_feat_proto_distance", "*", "self", ".", "opt", ".", "proto_temperature", ",", "dim", "=", "1", ")", "\n", "\n", "targetS_out", "=", "target_out", "if", "self", ".", "opt", ".", "S_pseudo", ">", "0", "else", "self", ".", "BaseNet_DP", "(", "target_imageS", ")", "\n", "targetS_out", "[", "'out'", "]", "=", "F", ".", "interpolate", "(", "targetS_out", "[", "'out'", "]", ",", "size", "=", "threshold_arg", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "targetS_out", "[", "'feat'", "]", "=", "F", ".", "interpolate", "(", "targetS_out", "[", "'feat'", "]", ",", "size", "=", "threshold_arg", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "prototype_tmp", "=", "self", ".", "objective_vectors", ".", "expand", "(", "4", ",", "-", "1", ",", "-", "1", ")", "#gpu memory limitation", "\n", "strong_feat_proto_distance", "=", "self", ".", "feat_prototype_distance_DP", "(", "targetS_out", "[", "'feat'", "]", ",", "prototype_tmp", ",", "self", ".", "class_numbers", ")", "\n", "student", "=", "F", ".", "log_softmax", "(", "-", "strong_feat_proto_distance", "*", "self", ".", "opt", ".", "proto_temperature", ",", "dim", "=", "1", ")", "\n", "\n", "loss_consist", "=", "F", ".", "kl_div", "(", "student", ",", "teacher", ",", "reduction", "=", "'none'", ")", "\n", "loss_consist", "=", "(", "loss_consist", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "loss", "=", "loss", "+", "self", ".", "opt", ".", "proto_consistW", "*", "loss_consist", "\n", "\n", "", "loss", "=", "loss", "+", "loss_CTS", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "BaseOpti", ".", "step", "(", ")", "\n", "self", ".", "BaseOpti", ".", "zero_grad", "(", ")", "\n", "\n", "if", "self", ".", "opt", ".", "moving_prototype", ":", "#update prototype", "\n", "            ", "ema_vectors", ",", "ema_ids", "=", "self", ".", "calculate_mean_vector", "(", "ema_out", "[", "'feat'", "]", ".", "detach", "(", ")", ",", "ema_out", "[", "'out'", "]", ".", "detach", "(", ")", ")", "\n", "for", "t", "in", "range", "(", "len", "(", "ema_ids", ")", ")", ":", "\n", "                ", "self", ".", "update_objective_SingleVector", "(", "ema_ids", "[", "t", "]", ",", "ema_vectors", "[", "t", "]", ".", "detach", "(", ")", ",", "start_mean", "=", "False", ")", "\n", "\n", "", "", "if", "self", ".", "opt", ".", "ema", ":", "#update ema model", "\n", "            ", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "BaseNet", ".", "parameters", "(", ")", ",", "self", ".", "BaseNet_ema", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "param_k", ".", "data", "=", "param_k", ".", "data", ".", "clone", "(", ")", "*", "0.999", "+", "param_q", ".", "data", ".", "clone", "(", ")", "*", "(", "1.", "-", "0.999", ")", "\n", "", "for", "buffer_q", ",", "buffer_k", "in", "zip", "(", "self", ".", "BaseNet", ".", "buffers", "(", ")", ",", "self", ".", "BaseNet_ema", ".", "buffers", "(", ")", ")", ":", "\n", "                ", "buffer_k", ".", "data", "=", "buffer_q", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "", "return", "loss", ".", "item", "(", ")", ",", "loss_CTS", ".", "item", "(", ")", ",", "loss_consist", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.regular_loss": [[305, 313], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log_softmax.sum"], "methods", ["None"], ["", "def", "regular_loss", "(", "self", ",", "activation", ")", ":", "\n", "        ", "logp", "=", "F", ".", "log_softmax", "(", "activation", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "opt", ".", "regular_type", "==", "'MRENT'", ":", "\n", "            ", "p", "=", "F", ".", "softmax", "(", "activation", ",", "dim", "=", "1", ")", "\n", "loss", "=", "(", "p", "*", "logp", ")", ".", "sum", "(", ")", "/", "(", "p", ".", "shape", "[", "0", "]", "*", "p", ".", "shape", "[", "2", "]", "*", "p", ".", "shape", "[", "3", "]", ")", "\n", "", "elif", "self", ".", "opt", ".", "regular_type", "==", "'MRKLD'", ":", "\n", "            ", "loss", "=", "-", "logp", ".", "sum", "(", ")", "/", "(", "logp", ".", "shape", "[", "0", "]", "*", "logp", ".", "shape", "[", "1", "]", "*", "logp", ".", "shape", "[", "2", "]", "*", "logp", ".", "shape", "[", "3", "]", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.rce": [[314, 323], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.nn.functional.one_hot().float().to", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "torch.clamp.permute", "torch.clamp.permute", "torch.clamp.permute", "mask.sum", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "rce", "(", "self", ",", "pred", ",", "labels", ")", ":", "\n", "        ", "pred", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "pred", "=", "torch", ".", "clamp", "(", "pred", ",", "min", "=", "1e-7", ",", "max", "=", "1.0", ")", "\n", "mask", "=", "(", "labels", "!=", "250", ")", ".", "float", "(", ")", "\n", "labels", "[", "labels", "==", "250", "]", "=", "self", ".", "class_numbers", "\n", "label_one_hot", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "labels", ",", "self", ".", "class_numbers", "+", "1", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "default_gpu", ")", "\n", "label_one_hot", "=", "torch", ".", "clamp", "(", "label_one_hot", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ",", "min", "=", "1e-4", ",", "max", "=", "1.0", ")", "\n", "rce", "=", "-", "(", "torch", ".", "sum", "(", "pred", "*", "torch", ".", "log", "(", "label_one_hot", ")", ",", "dim", "=", "1", ")", "*", "mask", ")", ".", "sum", "(", ")", "/", "(", "mask", ".", "sum", "(", ")", "+", "1e-6", ")", "\n", "return", "rce", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step_distillation": [[324, 360], ["adaptation_modelv2.CustomModel.BaseNet_DP", "torch.interpolate", "torch.interpolate", "torch.interpolate", "utils.cross_entropy2d", "utils.cross_entropy2d.backward", "torch.interpolate().long", "torch.interpolate().long", "torch.interpolate().long", "torch.interpolate", "torch.interpolate", "torch.interpolate", "utils.cross_entropy2d", "utils.cross_entropy2d.backward", "adaptation_modelv2.CustomModel.BaseOpti.step", "adaptation_modelv2.CustomModel.BaseOpti.zero_grad", "adaptation_modelv2.CustomModel.label_strong_T().to", "adaptation_modelv2.CustomModel.BaseNet_DP", "adaptation_modelv2.CustomModel.BaseNet_DP", "adaptation_modelv2.CustomModel.rce", "torch.softmax", "torch.softmax", "torch.softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div", "utils.cross_entropy2d.item", "utils.cross_entropy2d.item", "torch.interpolate", "torch.interpolate", "torch.interpolate", "adaptation_modelv2.CustomModel.reshape", "adaptation_modelv2.CustomModel.reshape().clone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "adaptation_modelv2.CustomModel.teacher_DP", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.softmax", "torch.softmax", "torch.softmax", "mask.sum", "source_x.size", "target_lp.unsqueeze().float", "adaptation_modelv2.CustomModel.label_strong_T", "adaptation_modelv2.CustomModel.clone().float", "adaptation_modelv2.CustomModel.reshape", "target_lp.unsqueeze", "adaptation_modelv2.CustomModel.clone"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.cross_entropy2d", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.cross_entropy2d", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.rce", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.label_strong_T"], ["", "def", "step_distillation", "(", "self", ",", "source_x", ",", "source_label", ",", "target_x", ",", "target_imageS", "=", "None", ",", "target_params", "=", "None", ",", "target_lp", "=", "None", ")", ":", "\n", "\n", "        ", "source_out", "=", "self", ".", "BaseNet_DP", "(", "source_x", ",", "ssl", "=", "True", ")", "\n", "source_outputUp", "=", "F", ".", "interpolate", "(", "source_out", "[", "'out'", "]", ",", "size", "=", "source_x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "loss_GTA", "=", "cross_entropy2d", "(", "input", "=", "source_outputUp", ",", "target", "=", "source_label", ")", "\n", "loss_GTA", ".", "backward", "(", ")", "\n", "\n", "threshold_arg", "=", "F", ".", "interpolate", "(", "target_lp", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ",", "scale_factor", "=", "0.25", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "opt", ".", "S_pseudo", ">", "0", ":", "\n", "            ", "threshold_arg", "=", "self", ".", "label_strong_T", "(", "threshold_arg", ".", "clone", "(", ")", ".", "float", "(", ")", ",", "target_params", ",", "padding", "=", "250", ",", "scale", "=", "4", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "target_out", "=", "self", ".", "BaseNet_DP", "(", "target_imageS", ")", "\n", "", "else", ":", "\n", "            ", "target_out", "=", "self", ".", "BaseNet_DP", "(", "target_x", ")", "\n", "", "target_out", "[", "'out'", "]", "=", "F", ".", "interpolate", "(", "target_out", "[", "'out'", "]", ",", "size", "=", "threshold_arg", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "batch", ",", "_", ",", "w", ",", "h", "=", "threshold_arg", ".", "shape", "\n", "loss", "=", "cross_entropy2d", "(", "input", "=", "target_out", "[", "'out'", "]", ",", "target", "=", "threshold_arg", ".", "reshape", "(", "[", "batch", ",", "w", ",", "h", "]", ")", ",", "size_average", "=", "True", ",", "reduction", "=", "'mean'", ")", "\n", "if", "self", ".", "opt", ".", "rce", ":", "\n", "            ", "rce", "=", "self", ".", "rce", "(", "target_out", "[", "'out'", "]", ",", "threshold_arg", ".", "reshape", "(", "[", "batch", ",", "w", ",", "h", "]", ")", ".", "clone", "(", ")", ")", "\n", "loss", "=", "self", ".", "opt", ".", "rce_alpha", "*", "loss", "+", "self", ".", "opt", ".", "rce_beta", "*", "rce", "\n", "\n", "", "if", "self", ".", "opt", ".", "distillation", ">", "0", ":", "\n", "            ", "student", "=", "F", ".", "softmax", "(", "target_out", "[", "'out'", "]", ",", "dim", "=", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "teacher_out", "=", "self", ".", "teacher_DP", "(", "target_imageS", ")", "\n", "teacher_out", "[", "'out'", "]", "=", "F", ".", "interpolate", "(", "teacher_out", "[", "'out'", "]", ",", "size", "=", "threshold_arg", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "teacher", "=", "F", ".", "softmax", "(", "teacher_out", "[", "'out'", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "loss_kd", "=", "F", ".", "kl_div", "(", "student", ",", "teacher", ",", "reduction", "=", "'none'", ")", "\n", "mask", "=", "(", "teacher", "!=", "250", ")", ".", "float", "(", ")", "\n", "loss_kd", "=", "(", "loss_kd", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "loss", "=", "loss", "+", "self", ".", "opt", ".", "distillation", "*", "loss_kd", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "BaseOpti", ".", "step", "(", ")", "\n", "self", ".", "BaseOpti", ".", "zero_grad", "(", ")", "\n", "return", "loss_GTA", ".", "item", "(", ")", ",", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.full2weak": [[361, 375], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate", "torch.interpolate", "torch.interpolate", "tmp.append", "int", "int", "int", "int", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "feat_.index_select.index_select.index_select", "int", "int", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "feat_.index_select.index_select.size"], "methods", ["None"], ["", "def", "full2weak", "(", "self", ",", "feat", ",", "target_weak_params", ")", ":", "\n", "        ", "tmp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "feat", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "h", ",", "w", "=", "target_weak_params", "[", "'RandomSized'", "]", "[", "0", "]", "[", "i", "]", ",", "target_weak_params", "[", "'RandomSized'", "]", "[", "1", "]", "[", "i", "]", "\n", "feat_", "=", "F", ".", "interpolate", "(", "feat", "[", "i", ":", "i", "+", "1", "]", ",", "size", "=", "[", "int", "(", "h", "/", "4", ")", ",", "int", "(", "w", "/", "4", ")", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "y1", ",", "y2", ",", "x1", ",", "x2", "=", "target_weak_params", "[", "'RandomCrop'", "]", "[", "0", "]", "[", "i", "]", ",", "target_weak_params", "[", "'RandomCrop'", "]", "[", "1", "]", "[", "i", "]", ",", "target_weak_params", "[", "'RandomCrop'", "]", "[", "2", "]", "[", "i", "]", ",", "target_weak_params", "[", "'RandomCrop'", "]", "[", "3", "]", "[", "i", "]", "\n", "y1", ",", "th", ",", "x1", ",", "tw", "=", "int", "(", "y1", "/", "4", ")", ",", "int", "(", "(", "y2", "-", "y1", ")", "/", "4", ")", ",", "int", "(", "x1", "/", "4", ")", ",", "int", "(", "(", "x2", "-", "x1", ")", "/", "4", ")", "\n", "feat_", "=", "feat_", "[", ":", ",", ":", ",", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "if", "target_weak_params", "[", "'RandomHorizontallyFlip'", "]", "[", "i", "]", ":", "\n", "                ", "inv_idx", "=", "torch", ".", "arange", "(", "feat_", ".", "size", "(", "3", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", ".", "to", "(", "feat_", ".", "device", ")", "\n", "feat_", "=", "feat_", ".", "index_select", "(", "3", ",", "inv_idx", ")", "\n", "", "tmp", ".", "append", "(", "feat_", ")", "\n", "", "feat", "=", "torch", ".", "cat", "(", "tmp", ",", "0", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.feat_prototype_distance": [[376, 383], ["range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "adaptation_modelv2.CustomModel.objective_vectors[].reshape().expand", "adaptation_modelv2.CustomModel.objective_vectors[].reshape"], "methods", ["None"], ["", "def", "feat_prototype_distance", "(", "self", ",", "feat", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "feat", ".", "shape", "\n", "feat_proto_distance", "=", "-", "torch", ".", "ones", "(", "(", "N", ",", "self", ".", "class_numbers", ",", "H", ",", "W", ")", ")", ".", "to", "(", "feat", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "class_numbers", ")", ":", "\n", "#feat_proto_distance[:, i, :, :] = torch.norm(torch.Tensor(self.objective_vectors[i]).reshape(-1,1,1).expand(-1, H, W).to(feat.device) - feat, 2, dim=1,)", "\n", "            ", "feat_proto_distance", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "torch", ".", "norm", "(", "self", ".", "objective_vectors", "[", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "H", ",", "W", ")", "-", "feat", ",", "2", ",", "dim", "=", "1", ",", ")", "\n", "", "return", "feat_proto_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.get_prototype_weight": [[384, 392], ["adaptation_modelv2.CustomModel.full2weak", "adaptation_modelv2.CustomModel.feat_prototype_distance", "adaptation_modelv2.CustomModel.min", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.full2weak", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.feat_prototype_distance"], ["", "def", "get_prototype_weight", "(", "self", ",", "feat", ",", "label", "=", "None", ",", "target_weak_params", "=", "None", ")", ":", "\n", "        ", "feat", "=", "self", ".", "full2weak", "(", "feat", ",", "target_weak_params", ")", "\n", "feat_proto_distance", "=", "self", ".", "feat_prototype_distance", "(", "feat", ")", "\n", "feat_nearest_proto_distance", ",", "feat_nearest_proto", "=", "feat_proto_distance", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "feat_proto_distance", "=", "feat_proto_distance", "-", "feat_nearest_proto_distance", "\n", "weight", "=", "F", ".", "softmax", "(", "-", "feat_proto_distance", "*", "self", ".", "opt", ".", "proto_temperature", ",", "dim", "=", "1", ")", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.label_strong_T": [[393, 411], ["range", "params.items", "label[].clone().flip", "param[].item", "data.randaugment.affine_sample", "label[].clone", "param[].item", "int", "param[].item", "label[].clone", "isinstance", "int", "int", "int", "int", "param[].item", "[].item", "[].item", "[].item", "[].item"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.affine_sample"], ["", "def", "label_strong_T", "(", "self", ",", "label", ",", "params", ",", "padding", ",", "scale", "=", "1", ")", ":", "\n", "        ", "label", "=", "label", "+", "1", "\n", "for", "i", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "(", "Tform", ",", "param", ")", "in", "params", ".", "items", "(", ")", ":", "\n", "                ", "if", "Tform", "==", "'Hflip'", "and", "param", "[", "i", "]", ".", "item", "(", ")", "==", "1", ":", "\n", "                    ", "label", "[", "i", "]", "=", "label", "[", "i", "]", ".", "clone", "(", ")", ".", "flip", "(", "-", "1", ")", "\n", "", "elif", "(", "Tform", "==", "'ShearX'", "or", "Tform", "==", "'ShearY'", "or", "Tform", "==", "'TranslateX'", "or", "Tform", "==", "'TranslateY'", "or", "Tform", "==", "'Rotate'", ")", "and", "param", "[", "i", "]", ".", "item", "(", ")", "!=", "1e4", ":", "\n", "                    ", "v", "=", "int", "(", "param", "[", "i", "]", ".", "item", "(", ")", "//", "scale", ")", "if", "Tform", "==", "'TranslateX'", "or", "Tform", "==", "'TranslateY'", "else", "param", "[", "i", "]", ".", "item", "(", ")", "\n", "label", "[", "i", ":", "i", "+", "1", "]", "=", "affine_sample", "(", "label", "[", "i", ":", "i", "+", "1", "]", ".", "clone", "(", ")", ",", "v", ",", "Tform", ")", "\n", "", "elif", "Tform", "==", "'CutoutAbs'", "and", "isinstance", "(", "param", ",", "list", ")", ":", "\n", "                    ", "x0", "=", "int", "(", "param", "[", "0", "]", "[", "i", "]", ".", "item", "(", ")", "//", "scale", ")", "\n", "y0", "=", "int", "(", "param", "[", "1", "]", "[", "i", "]", ".", "item", "(", ")", "//", "scale", ")", "\n", "x1", "=", "int", "(", "param", "[", "2", "]", "[", "i", "]", ".", "item", "(", ")", "//", "scale", ")", "\n", "y1", "=", "int", "(", "param", "[", "3", "]", "[", "i", "]", ".", "item", "(", ")", "//", "scale", ")", "\n", "label", "[", "i", ",", ":", ",", "y0", ":", "y1", ",", "x0", ":", "x1", "]", "=", "0", "\n", "", "", "", "label", "[", "label", "==", "0", "]", "=", "padding", "+", "1", "# for strong augmentation, constant padding", "\n", "label", "=", "label", "-", "1", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.process_label": [[412, 418], ["label.size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "pred1.scatter_.scatter_.scatter_", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.where.long", "torch.where.long", "torch.where.long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "process_label", "(", "self", ",", "label", ")", ":", "\n", "        ", "batch", ",", "channel", ",", "w", ",", "h", "=", "label", ".", "size", "(", ")", "\n", "pred1", "=", "torch", ".", "zeros", "(", "batch", ",", "self", ".", "class_numbers", "+", "1", ",", "w", ",", "h", ")", ".", "to", "(", "self", ".", "default_gpu", ")", "\n", "id", "=", "torch", ".", "where", "(", "label", "<", "self", ".", "class_numbers", ",", "label", ",", "torch", ".", "Tensor", "(", "[", "self", ".", "class_numbers", "]", ")", ".", "to", "(", "self", ".", "default_gpu", ")", ")", "\n", "pred1", "=", "pred1", ".", "scatter_", "(", "1", ",", "id", ".", "long", "(", ")", ",", "1", ")", "\n", "return", "pred1", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.freeze_bn_apply": [[419, 424], ["net.apply", "net.apply"], "methods", ["None"], ["", "def", "freeze_bn_apply", "(", "self", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "nets", ":", "\n", "            ", "net", ".", "apply", "(", "freeze_bn", ")", "\n", "", "for", "net", "in", "self", ".", "nets_DP", ":", "\n", "            ", "net", ".", "apply", "(", "freeze_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.scheduler_step": [[425, 428], ["scheduler.step"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step"], ["", "", "def", "scheduler_step", "(", "self", ")", ":", "\n", "        ", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.optimizer_zerograd": [[429, 432], ["optimizer.zero_grad"], "methods", ["None"], ["", "", "def", "optimizer_zerograd", "(", "self", ")", ":", "\n", "        ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.init_device": [[434, 443], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "models.sync_batchnorm.DataParallelWithCallback.to", "models.sync_batchnorm.DataParallelWithCallback", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "range", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "methods", ["None"], ["", "", "def", "init_device", "(", "self", ",", "net", ",", "gpu_id", "=", "None", ",", "whether_DP", "=", "False", ")", ":", "\n", "        ", "gpu_id", "=", "gpu_id", "or", "self", ".", "default_gpu", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu_id", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "net", "=", "net", ".", "to", "(", "device", ")", "\n", "# if torch.cuda.is_available():", "\n", "if", "whether_DP", ":", "\n", "#net = DataParallelWithCallback(net, device_ids=[0])", "\n", "            ", "net", "=", "DataParallelWithCallback", "(", "net", ",", "device_ids", "=", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval": [[444, 459], ["net.eval", "net.eval", "net.eval", "logger.info", "logger"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval"], ["", "def", "eval", "(", "self", ",", "net", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"Make specific models eval mode during test time\"\"\"", "\n", "# if issubclass(net, nn.Module) or issubclass(net, BaseModel):", "\n", "if", "net", "==", "None", ":", "\n", "            ", "for", "net", "in", "self", ".", "nets", ":", "\n", "                ", "net", ".", "eval", "(", ")", "\n", "", "for", "net", "in", "self", ".", "nets_DP", ":", "\n", "                ", "net", ".", "eval", "(", ")", "\n", "", "if", "logger", "!=", "None", ":", "\n", "                ", "logger", ".", "info", "(", "\"Successfully set the model eval mode\"", ")", "\n", "", "", "else", ":", "\n", "            ", "net", ".", "eval", "(", ")", "\n", "if", "logger", "!=", "None", ":", "\n", "                ", "logger", "(", "\"Successfully set {} eval mode\"", ".", "format", "(", "net", ".", "__class__", ".", "__name__", ")", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.train": [[460, 469], ["net.train", "net.train", "net.train"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.train", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.train", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.train"], ["", "def", "train", "(", "self", ",", "net", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "if", "net", "==", "None", ":", "\n", "            ", "for", "net", "in", "self", ".", "nets", ":", "\n", "                ", "net", ".", "train", "(", ")", "\n", "", "for", "net", "in", "self", ".", "nets_DP", ":", "\n", "                ", "net", ".", "train", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "net", ".", "train", "(", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.update_objective_SingleVector": [[470, 487], ["vector.sum().item", "min", "adaptation_modelv2.CustomModel.objective_vectors_num[].item", "min", "NotImplementedError", "vector.sum", "vector.squeeze", "vector.squeeze"], "methods", ["None"], ["", "def", "update_objective_SingleVector", "(", "self", ",", "id", ",", "vector", ",", "name", "=", "'moving_average'", ",", "start_mean", "=", "True", ")", ":", "\n", "        ", "if", "vector", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "if", "start_mean", "and", "self", ".", "objective_vectors_num", "[", "id", "]", ".", "item", "(", ")", "<", "100", ":", "\n", "            ", "name", "=", "'mean'", "\n", "", "if", "name", "==", "'moving_average'", ":", "\n", "            ", "self", ".", "objective_vectors", "[", "id", "]", "=", "self", ".", "objective_vectors", "[", "id", "]", "*", "(", "1", "-", "self", ".", "opt", ".", "proto_momentum", ")", "+", "self", ".", "opt", ".", "proto_momentum", "*", "vector", ".", "squeeze", "(", ")", "\n", "self", ".", "objective_vectors_num", "[", "id", "]", "+=", "1", "\n", "self", ".", "objective_vectors_num", "[", "id", "]", "=", "min", "(", "self", ".", "objective_vectors_num", "[", "id", "]", ",", "3000", ")", "\n", "", "elif", "name", "==", "'mean'", ":", "\n", "            ", "self", ".", "objective_vectors", "[", "id", "]", "=", "self", ".", "objective_vectors", "[", "id", "]", "*", "self", ".", "objective_vectors_num", "[", "id", "]", "+", "vector", ".", "squeeze", "(", ")", "\n", "self", ".", "objective_vectors_num", "[", "id", "]", "+=", "1", "\n", "self", ".", "objective_vectors", "[", "id", "]", "=", "self", ".", "objective_vectors", "[", "id", "]", "/", "self", ".", "objective_vectors_num", "[", "id", "]", "\n", "self", ".", "objective_vectors_num", "[", "id", "]", "=", "min", "(", "self", ".", "objective_vectors_num", "[", "id", "]", ",", "3000", ")", "\n", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'no such updating way of objective vectors {}'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.ConstantLR.__init__": [[17, 19], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(levelname)s %(message)s'", ")", "\n", "hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "hdlr", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.ConstantLR.get_lr": [[20, 22], ["None"], "methods", ["None"], ["logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.PolynomialLR.__init__": [[25, 31], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["inv_idx", "=", "torch", ".", "arange", "(", "img", ".", "size", "(", "3", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "# N x C x H x W", "\n", "img_flip", "=", "img", ".", "index_select", "(", "3", ",", "inv_idx", ")", "\n", "return", "img_flip", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.PolynomialLR.get_lr": [[32, 39], ["max", "float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.WarmUpLR.__init__": [[41, 48], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], []], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.WarmUpLR.get_lr": [[49, 65], ["utils.WarmUpLR.scheduler.get_lr", "float", "KeyError"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.WarmUpLR.get_lr"], []], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.get_scheduler": [[9, 14], ["utils.PolynomialLR"], "function", ["None"], ["import", "torch", "\n", "\n", "def", "get_logger", "(", "logdir", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'ptsemseg'", ")", "\n", "ts", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "ts", "=", "ts", ".", "replace", "(", "\":\"", ",", "\"_\"", ")", ".", "replace", "(", "\"-\"", ",", "\"_\"", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.cross_entropy2d": [[66, 86], ["F.interpolate.size", "target.size", "torch.interpolate", "NotImplementedError", "torch.nll_loss", "torch.cross_entropy"], "function", ["None"], []], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.utils.freeze_bn": [[87, 93], ["isinstance", "isinstance", "m.eval", "m.__class__.__name__.find"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval"], []], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[59, 63], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 45], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.replicate.patch_replication_callback": [[65, 89], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.SyncMaster.__init__": [[66, 75], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.SyncMaster.__getstate__": [[76, 78], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.SyncMaster.__setstate__": [[79, 81], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.SyncMaster.register_slave": [[82, 96], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n        Args:\n            identifier: an identifier, usually is the device id.\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.SyncMaster.run_master": [[97, 126], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n        Returns: the message to be sent back to the master device.\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.SyncMaster.nr_slaves": [[127, 130], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[24, 29], ["unittest.TorchTestCase.assertTrue", "unittest.as_numpy", "unittest.as_numpy", "numpy.allclose", "numpy.abs().max", "numpy.abs().max", "numpy.abs", "numpy.abs", "numpy.fmax"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.unittest.as_numpy", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.unittest.as_numpy"], ["    ", "def", "assertTensorClose", "(", "self", ",", "a", ",", "b", ",", "atol", "=", "1e-3", ",", "rtol", "=", "1e-3", ")", ":", "\n", "        ", "npa", ",", "npb", "=", "as_numpy", "(", "a", ")", ",", "as_numpy", "(", "b", ")", "\n", "self", ".", "assertTrue", "(", "\n", "np", ".", "allclose", "(", "npa", ",", "npb", ",", "atol", "=", "atol", ")", ",", "\n", "'Tensor close check failed\\n{}\\n{}\\nadiff={}, rdiff={}'", ".", "format", "(", "a", ",", "b", ",", "np", ".", "abs", "(", "npa", "-", "npb", ")", ".", "max", "(", ")", ",", "np", ".", "abs", "(", "(", "npa", "-", "npb", ")", "/", "np", ".", "fmax", "(", "npa", ",", "1e-5", ")", ")", ".", "max", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.unittest.as_numpy": [[17, 21], ["isinstance", "v.cpu().numpy", "v.cpu"], "function", ["None"], ["def", "as_numpy", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "Variable", ")", ":", "\n", "        ", "v", "=", "v", ".", "data", "\n", "", "return", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[39, 47], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "comm.SyncMaster"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ")", "\n", "\n", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[48, 79], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[80, 89], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[90, 112], ["sorted", "sum", "torch.nn.parallel._functions.ReduceAddCoalesced.apply", "torch.nn.parallel._functions.ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "torch.nn.parallel._functions.Broadcast.apply", "torch.nn.parallel._functions.Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[113, 126], ["bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[173, 178], ["super()._check_input_dim", "ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm1d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[225, 230], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm2d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[278, 283], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm3d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._sum_ft": [[24, 27], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.batchnorm._unsqueeze_ft": [[29, 32], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dementions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.RandAugmentPC.__init__": [[212, 218], ["randaugment.my_augment_pool"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.my_augment_pool"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "m", ")", ":", "\n", "        ", "assert", "n", ">=", "1", "\n", "assert", "1", "<=", "m", "<=", "10", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "augment_pool", "=", "my_augment_pool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.RandAugmentPC.__call__": [[219, 227], ["random.choices", "randaugment.CutoutAbs", "numpy.random.uniform", "op", "random.random"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.CutoutAbs"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_pool", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "max_v", ",", "bias", "in", "ops", ":", "\n", "            ", "prob", "=", "np", ".", "random", ".", "uniform", "(", "0.2", ",", "0.8", ")", "\n", "if", "random", ".", "random", "(", ")", "+", "prob", ">=", "1", ":", "\n", "                ", "img", "=", "op", "(", "img", ",", "v", "=", "self", ".", "m", ",", "max_v", "=", "max_v", ",", "bias", "=", "bias", ")", "\n", "", "", "img", "=", "CutoutAbs", "(", "img", ",", "16", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.RandAugmentMC.__init__": [[230, 236], ["randaugment.fixmatch_augment_pool"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.fixmatch_augment_pool"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "m", ")", ":", "\n", "        ", "assert", "n", ">=", "1", "\n", "assert", "1", "<=", "m", "<=", "10", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "augment_pool", "=", "fixmatch_augment_pool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.RandAugmentMC.__call__": [[237, 257], ["random.random", "img.transpose.transpose.transpose", "random.choices", "randaugment.CutoutAbs", "numpy.random.randint", "random.random", "op", "min"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.CutoutAbs"], ["", "def", "__call__", "(", "self", ",", "img", ",", "type", "=", "'crc'", ")", ":", "\n", "        ", "aug_type", "=", "{", "'Hflip'", ":", "False", ",", "'ShearX'", ":", "1e4", ",", "'ShearY'", ":", "1e4", ",", "'TranslateX'", ":", "1e4", ",", "'TranslateY'", ":", "1e4", ",", "'Rotate'", ":", "1e4", ",", "'CutoutAbs'", ":", "1e4", "}", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "#aug_type.append(['Hflip', True])", "\n", "aug_type", "[", "'Hflip'", "]", "=", "True", "\n", "", "if", "type", "==", "'cr'", "or", "type", "==", "'crc'", ":", "\n", "            ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_pool", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "max_v", ",", "bias", "in", "ops", ":", "\n", "                ", "v", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "m", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                    ", "img", ",", "params", "=", "op", "(", "img", ",", "v", "=", "v", ",", "max_v", "=", "max_v", ",", "bias", "=", "bias", ")", "\n", "if", "op", ".", "__name__", "in", "[", "'ShearX'", ",", "'ShearY'", ",", "'TranslateX'", ",", "'TranslateY'", ",", "'Rotate'", "]", ":", "\n", "#aug_type.append([op.__name__, params])", "\n", "                        ", "aug_type", "[", "op", ".", "__name__", "]", "=", "params", "\n", "", "", "", "", "if", "type", "==", "'cc'", "or", "type", "==", "'crc'", ":", "\n", "            ", "img", ",", "params", "=", "CutoutAbs", "(", "img", ",", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "//", "3", ")", "\n", "#aug_type.append([CutoutAbs.__name__, params])", "\n", "aug_type", "[", "'CutoutAbs'", "]", "=", "params", "\n", "", "return", "img", ",", "aug_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.AutoContrast": [[18, 20], ["PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast"], "function", ["None"], ["def", "AutoContrast", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "autocontrast", "(", "img", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Brightness": [[22, 25], ["randaugment._float_parameter", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Brightness", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Brightness", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Brightness", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Brightness"], ["", "def", "Brightness", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "v", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Color": [[27, 30], ["randaugment._float_parameter", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Color", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Color", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Color", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Color"], ["", "def", "Color", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "v", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Contrast": [[32, 35], ["randaugment._float_parameter", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Contrast", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Contrast", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Contrast", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Contrast"], ["", "def", "Contrast", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "v", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Cutout": [[37, 43], ["int", "randaugment.CutoutAbs", "randaugment._float_parameter", "min"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.CutoutAbs", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._float_parameter"], ["", "def", "Cutout", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "if", "v", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "v", "=", "int", "(", "v", "*", "min", "(", "img", ".", "size", ")", ")", "\n", "return", "CutoutAbs", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.CutoutAbs": [[45, 59], ["numpy.random.uniform", "numpy.random.uniform", "int", "int", "int", "int", "img.copy.copy", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "max", "max", "min", "min", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw"], "function", ["None"], ["", "def", "CutoutAbs", "(", "img", ",", "v", ",", "**", "kwarg", ")", ":", "\n", "    ", "w", ",", "h", "=", "img", ".", "size", "\n", "x0", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "w", ")", "\n", "y0", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "h", ")", "\n", "x0", "=", "int", "(", "max", "(", "0", ",", "x0", "-", "v", "/", "2.", ")", ")", "\n", "y0", "=", "int", "(", "max", "(", "0", ",", "y0", "-", "v", "/", "2.", ")", ")", "\n", "x1", "=", "int", "(", "min", "(", "w", ",", "x0", "+", "v", ")", ")", "\n", "y1", "=", "int", "(", "min", "(", "h", ",", "y0", "+", "v", ")", ")", "\n", "xy", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "# gray", "\n", "color", "=", "(", "127", ",", "127", ",", "127", ")", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "PIL", ".", "ImageDraw", ".", "Draw", "(", "img", ")", ".", "rectangle", "(", "xy", ",", "color", ")", "\n", "return", "img", ",", "xy", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Equalize": [[61, 63], ["PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize"], "function", ["None"], ["", "def", "Equalize", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "equalize", "(", "img", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Identity": [[65, 67], ["None"], "function", ["None"], ["", "def", "Identity", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "img", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Invert": [[69, 71], ["PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert"], "function", ["None"], ["", "def", "Invert", "(", "img", ",", "**", "kwarg", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "invert", "(", "img", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Posterize": [[73, 76], ["randaugment._int_parameter", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._int_parameter"], ["", "def", "Posterize", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageOps", ".", "posterize", "(", "img", ",", "v", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Rotate": [[105, 110], ["randaugment._int_parameter", "random.random", "img.rotate"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._int_parameter"], ["", "def", "Rotate", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "rotate", "(", "v", ",", "resample", "=", "Image", ".", "BILINEAR", ",", "fillcolor", "=", "(", "127", ",", "127", ",", "127", ")", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Sharpness": [[111, 114], ["randaugment._float_parameter", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Sharpness", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Sharpness", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Sharpness", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Sharpness"], ["", "def", "Sharpness", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "v", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.ShearX": [[116, 121], ["randaugment._float_parameter", "random.random", "img.transform"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform"], ["", "def", "ShearX", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "v", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "resample", "=", "Image", ".", "BILINEAR", ",", "fillcolor", "=", "(", "127", ",", "127", ",", "127", ")", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.ShearY": [[123, 128], ["randaugment._float_parameter", "random.random", "img.transform"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform"], ["", "def", "ShearY", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "v", ",", "1", ",", "0", ")", ",", "resample", "=", "Image", ".", "BILINEAR", ",", "fillcolor", "=", "(", "127", ",", "127", ",", "127", ")", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.Solarize": [[130, 133], ["randaugment._int_parameter", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._int_parameter"], ["", "def", "Solarize", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "256", "-", "v", ")", ",", "256", "-", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.SolarizeAdd": [[135, 145], ["numpy.array().astype", "numpy.clip", "img_np.astype.astype", "PIL.Image.fromarray", "randaugment._int_parameter", "random.random", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "numpy.array"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._int_parameter"], ["", "def", "SolarizeAdd", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ",", "threshold", "=", "128", ")", ":", "\n", "    ", "v", "=", "_int_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "img_np", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "img_np", "=", "img_np", "+", "v", "\n", "img_np", "=", "np", ".", "clip", "(", "img_np", ",", "0", ",", "255", ")", "\n", "img_np", "=", "img_np", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_np", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "threshold", ")", ",", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.TranslateX": [[147, 153], ["int", "randaugment._float_parameter", "random.random", "img.transform"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform"], ["", "def", "TranslateX", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "int", "(", "v", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ",", "resample", "=", "Image", ".", "BILINEAR", ",", "fillcolor", "=", "(", "127", ",", "127", ",", "127", ")", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.TranslateY": [[155, 161], ["int", "randaugment._float_parameter", "random.random", "img.transform"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._float_parameter", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform"], ["", "def", "TranslateY", "(", "img", ",", "v", ",", "max_v", ",", "bias", "=", "0", ")", ":", "\n", "    ", "v", "=", "_float_parameter", "(", "v", ",", "max_v", ")", "+", "bias", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "int", "(", "v", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ",", "resample", "=", "Image", ".", "BILINEAR", ",", "fillcolor", "=", "(", "127", ",", "127", ",", "127", ")", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._float_parameter": [[163, 165], ["float"], "function", ["None"], ["", "def", "_float_parameter", "(", "v", ",", "max_v", ")", ":", "\n", "    ", "return", "float", "(", "v", ")", "*", "max_v", "/", "PARAMETER_MAX", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment._int_parameter": [[167, 169], ["int"], "function", ["None"], ["", "def", "_int_parameter", "(", "v", ",", "max_v", ")", ":", "\n", "    ", "return", "int", "(", "v", "*", "max_v", "/", "PARAMETER_MAX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.fixmatch_augment_pool": [[171, 188], ["None"], "function", ["None"], ["", "def", "fixmatch_augment_pool", "(", ")", ":", "\n", "# FixMatch paper", "\n", "    ", "augs", "=", "[", "(", "AutoContrast", ",", "None", ",", "None", ")", ",", "\n", "(", "Brightness", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Color", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Contrast", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "Equalize", ",", "None", ",", "None", ")", ",", "\n", "(", "Identity", ",", "None", ",", "None", ")", ",", "\n", "(", "Posterize", ",", "4", ",", "4", ")", ",", "\n", "(", "Rotate", ",", "30", ",", "0", ")", ",", "\n", "(", "Sharpness", ",", "0.9", ",", "0.05", ")", ",", "\n", "(", "ShearX", ",", "0.3", ",", "0", ")", ",", "\n", "(", "ShearY", ",", "0.3", ",", "0", ")", ",", "\n", "(", "Solarize", ",", "256", ",", "0", ")", ",", "\n", "(", "TranslateX", ",", "0.3", ",", "0", ")", ",", "\n", "(", "TranslateY", ",", "0.3", ",", "0", ")", "]", "\n", "return", "augs", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.my_augment_pool": [[190, 209], ["None"], "function", ["None"], ["", "def", "my_augment_pool", "(", ")", ":", "\n", "# Test", "\n", "    ", "augs", "=", "[", "(", "AutoContrast", ",", "None", ",", "None", ")", ",", "\n", "(", "Brightness", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "Color", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "Contrast", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "Cutout", ",", "0.2", ",", "0", ")", ",", "\n", "(", "Equalize", ",", "None", ",", "None", ")", ",", "\n", "(", "Invert", ",", "None", ",", "None", ")", ",", "\n", "(", "Posterize", ",", "4", ",", "4", ")", ",", "\n", "(", "Rotate", ",", "30", ",", "0", ")", ",", "\n", "(", "Sharpness", ",", "1.8", ",", "0.1", ")", ",", "\n", "(", "ShearX", ",", "0.3", ",", "0", ")", ",", "\n", "(", "ShearY", ",", "0.3", ",", "0", ")", ",", "\n", "(", "Solarize", ",", "256", ",", "0", ")", ",", "\n", "(", "SolarizeAdd", ",", "110", ",", "0", ")", ",", "\n", "(", "TranslateX", ",", "0.45", ",", "0", ")", ",", "\n", "(", "TranslateY", ",", "0.45", ",", "0", ")", "]", "\n", "return", "augs", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.randaugment.affine_sample": [[258, 284], ["torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.affine_grid().to", "torch.grid_sample", "numpy.array().astype", "numpy.array().astype", "torch.Tensor", "torch.Tensor", "torch.affine_grid", "numpy.array", "numpy.array().astype", "tensor.size", "numpy.array", "numpy.array().astype", "numpy.array", "numpy.array().astype", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.array", "numpy.sin", "numpy.array"], "function", ["None"], ["", "", "def", "affine_sample", "(", "tensor", ",", "v", ",", "type", ")", ":", "\n", "# tensor: B*C*H*W", "\n", "# v: scalar, translation param", "\n", "    ", "if", "type", "==", "'Rotate'", ":", "\n", "        ", "theta", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "v", "/", "180", "*", "np", ".", "pi", ")", ",", "-", "np", ".", "sin", "(", "v", "/", "180", "*", "np", ".", "pi", ")", ",", "0", "]", ",", "[", "np", ".", "sin", "(", "v", "/", "180", "*", "np", ".", "pi", ")", ",", "np", ".", "cos", "(", "v", "/", "180", "*", "np", ".", "pi", ")", ",", "0", "]", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "", "elif", "type", "==", "'ShearX'", ":", "\n", "        ", "theta", "=", "np", ".", "array", "(", "[", "[", "1", ",", "v", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "", "elif", "type", "==", "'ShearY'", ":", "\n", "        ", "theta", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "v", ",", "1", ",", "0", "]", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "", "elif", "type", "==", "'TranslateX'", ":", "\n", "        ", "theta", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "v", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "", "elif", "type", "==", "'TranslateY'", ":", "\n", "        ", "theta", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "v", "]", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "", "H", "=", "tensor", ".", "shape", "[", "2", "]", "\n", "W", "=", "tensor", ".", "shape", "[", "3", "]", "\n", "theta", "[", "0", ",", "1", "]", "=", "theta", "[", "0", ",", "1", "]", "*", "H", "/", "W", "\n", "theta", "[", "1", ",", "0", "]", "=", "theta", "[", "1", ",", "0", "]", "*", "W", "/", "H", "\n", "if", "type", "!=", "'Rotate'", ":", "\n", "        ", "theta", "[", "0", ",", "2", "]", "=", "theta", "[", "0", ",", "2", "]", "*", "2", "/", "H", "+", "theta", "[", "0", ",", "0", "]", "+", "theta", "[", "0", ",", "1", "]", "-", "1", "\n", "theta", "[", "1", ",", "2", "]", "=", "theta", "[", "1", ",", "2", "]", "*", "2", "/", "H", "+", "theta", "[", "1", ",", "0", "]", "+", "theta", "[", "1", ",", "1", "]", "-", "1", "\n", "\n", "", "theta", "=", "torch", ".", "Tensor", "(", "theta", ")", ".", "unsqueeze", "(", "0", ")", "\n", "grid", "=", "F", ".", "affine_grid", "(", "theta", ",", "tensor", ".", "size", "(", ")", ")", ".", "to", "(", "tensor", ".", "device", ")", "\n", "tensor_t", "=", "F", ".", "grid_sample", "(", "tensor", ",", "grid", ",", "mode", "=", "'nearest'", ")", "\n", "return", "tensor_t", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.base_dataset.BaseDataset.__init__": [[24, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the class; save the options in the class\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.base_dataset.BaseDataset.modify_commandline_options": [[32, 44], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n        \"\"\"", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.base_dataset.BaseDataset.__len__": [[45, 49], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the total number of images in the dataset.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.base_dataset.BaseDataset.__getitem__": [[50, 61], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return a data point and its metadata information.\n\n        Parameters:\n            index - - a random integer for data indexing\n\n        Returns:\n            a dictionary of data with their names. It ususally contains the data itself and its metadata information.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.base_dataset.get_transform": [[63, 103], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.Grayscale", "torchvision.Resize", "torchvision.RandomCrop", "transform_list.append", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomCrop", "transform_list.append", "torchvision.Lambda", "transform_list.append", "torchvision.Lambda", "transform_list.append", "transform_list.append", "ValueError", "base_dataset.__scale_width", "torchvision.RandomCrop", "torchvision.Lambda", "base_dataset.__scale_width", "base_dataset.__adjust"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.base_dataset.__adjust"], ["", "", "def", "get_transform", "(", "opt", ",", "grayscale", "=", "False", ",", "convert", "=", "True", ",", "crop", "=", "True", ",", "flip", "=", "True", ")", ":", "\n", "    ", "\"\"\"Create a torchvision transformation function\n\n    The type of transformation is defined by option (e.g., [opt.preprocess], [opt.load_size], [opt.crop_size])\n    and can be overwritten by arguments such as [convert], [crop], and [flip]\n\n    Parameters:\n        opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        grayscale (bool)   -- if convert input RGB image to a grayscale image\n        convert (bool)     -- if convert an image to a tensor array betwen [-1, 1]\n        crop    (bool)     -- if apply cropping\n        flip    (bool)     -- if apply horizontal flippling\n    \"\"\"", "\n", "transform_list", "=", "[", "]", "\n", "if", "grayscale", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Grayscale", "(", "1", ")", ")", "\n", "", "if", "opt", ".", "preprocess", "==", "'resize_and_crop'", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "load_size", ",", "opt", ".", "load_size", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "Image", ".", "BICUBIC", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "crop_size", ")", ")", "\n", "", "elif", "opt", ".", "preprocess", "==", "'crop'", "and", "crop", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "crop_size", ")", ")", "\n", "", "elif", "opt", ".", "preprocess", "==", "'scale_width'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "crop_size", ")", ")", ")", "\n", "", "elif", "opt", ".", "preprocess", "==", "'scale_width_and_crop'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "load_size", ")", ")", ")", "\n", "if", "crop", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "crop_size", ")", ")", "\n", "", "", "elif", "opt", ".", "preprocess", "==", "'none'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__adjust", "(", "img", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'--preprocess %s is not a valid option.'", "%", "opt", ".", "preprocess", ")", "\n", "\n", "", "if", "not", "opt", ".", "no_flip", "and", "flip", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "", "if", "convert", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.base_dataset.__adjust": [[105, 130], ["img.resize", "base_dataset.__print_size_warning"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.base_dataset.__print_size_warning"], ["", "def", "__adjust", "(", "img", ")", ":", "\n", "    ", "\"\"\"Modify the width and height to be multiple of 4.\n\n    Parameters:\n        img (PIL image) -- input image\n\n    Returns a modified image whose width and height are mulitple of 4.\n\n    the size needs to be a multiple of 4,\n    because going through generator network may change img size\n    and eventually cause size mismatch error\n    \"\"\"", "\n", "ow", ",", "oh", "=", "img", ".", "size", "\n", "mult", "=", "4", "\n", "if", "ow", "%", "mult", "==", "0", "and", "oh", "%", "mult", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "(", "ow", "-", "1", ")", "//", "mult", "\n", "w", "=", "(", "w", "+", "1", ")", "*", "mult", "\n", "h", "=", "(", "oh", "-", "1", ")", "//", "mult", "\n", "h", "=", "(", "h", "+", "1", ")", "*", "mult", "\n", "\n", "if", "ow", "!=", "w", "or", "oh", "!=", "h", ":", "\n", "        ", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", "\n", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.base_dataset.__scale_width": [[132, 160], ["int", "img.resize", "base_dataset.__print_size_warning"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.base_dataset.__print_size_warning"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ")", ":", "\n", "    ", "\"\"\"Resize images so that the width of the output image is the same as a target width\n\n    Parameters:\n        img (PIL image)    -- input image\n        target_width (int) -- target image width\n\n    Returns a modified image whose width matches the target image width;\n\n    the size needs to be a multiple of 4,\n    because going through generator network may change img size\n    and eventually cause size mismatch error\n    \"\"\"", "\n", "ow", ",", "oh", "=", "img", ".", "size", "\n", "\n", "mult", "=", "4", "\n", "assert", "target_width", "%", "mult", "==", "0", ",", "\"the target width needs to be multiple of %d.\"", "%", "mult", "\n", "if", "(", "ow", "==", "target_width", "and", "oh", "%", "mult", "==", "0", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "target_height", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "m", "=", "(", "target_height", "-", "1", ")", "//", "mult", "\n", "h", "=", "(", "m", "+", "1", ")", "*", "mult", "\n", "\n", "if", "target_height", "!=", "h", ":", "\n", "        ", "__print_size_warning", "(", "target_width", ",", "target_height", ",", "w", ",", "h", ")", "\n", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.base_dataset.__print_size_warning": [[162, 170], ["hasattr", "print"], "function", ["None"], ["", "def", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ":", "\n", "    ", "\"\"\"Print warning information about image size(only print once)\"\"\"", "\n", "if", "not", "hasattr", "(", "__print_size_warning", ",", "'has_printed'", ")", ":", "\n", "        ", "print", "(", "\"The image size needs to be a multiple of 4. \"", "\n", "\"The loaded image size was (%d, %d), so it was adjusted to \"", "\n", "\"(%d, %d). This adjustment will be done to all images \"", "\n", "\"whose sizes are not multiples of 4\"", "%", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ")", "\n", "__print_size_warning", ".", "has_printed", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.synthia_dataset.Synthia_loader.__init__": [[21, 69], ["data.randaugment.RandAugmentMC", "os.path.join", "os.path.join", "numpy.zeros", "os.listdir", "range", "dict", "imageio.plugins.freeimage.download", "print", "len", "synthia_dataset.Synthia_loader.ids.append", "zip", "len", "Exception", "os.path.join", "range", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ",", "logger", ",", "augmentations", "=", "None", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "src_rootpath", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "randaug", "=", "RandAugmentMC", "(", "2", ",", "10", ")", "\n", "self", ".", "n_classes", "=", "opt", ".", "n_class", "\n", "self", ".", "img_size", "=", "(", "1280", ",", "760", ")", "\n", "\n", "self", ".", "mean", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "#TODO:  calculating the mean value of rgb channels on GTA5", "\n", "self", ".", "image_base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'RGB'", ")", "\n", "self", ".", "label_base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'GT/LABELS'", ")", "\n", "self", ".", "distribute", "=", "np", ".", "zeros", "(", "self", ".", "n_classes", ",", "dtype", "=", "float", ")", "\n", "ids", "=", "os", ".", "listdir", "(", "self", ".", "image_base_path", ")", "\n", "self", ".", "ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "            ", "self", ".", "ids", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "label_base_path", ",", "ids", "[", "i", "]", ")", ")", "\n", "\n", "", "if", "self", ".", "n_classes", "==", "19", ":", "\n", "            ", "self", ".", "valid_classes", "=", "[", "3", ",", "4", ",", "2", ",", "21", ",", "5", ",", "7", ",", "15", ",", "9", ",", "6", ",", "16", ",", "1", ",", "10", ",", "17", ",", "8", ",", "18", ",", "19", ",", "20", ",", "12", ",", "11", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"Road\"", ",", "\"Sidewalk\"", ",", "\"Building\"", ",", "\"Wall\"", ",", "\n", "\"Fence\"", ",", "\"Pole\"", ",", "\"Traffic_light\"", ",", "\"Traffic_sign\"", ",", "\"Vegetation\"", ",", "\n", "\"Terrain\"", ",", "\"sky\"", ",", "\"Pedestrian\"", ",", "\"Rider\"", ",", "\"Car\"", ",", "\n", "\"Truck\"", ",", "\"Bus\"", ",", "\"Train\"", ",", "\"Motorcycle\"", ",", "\"Bicycle\"", ",", "\n", "]", "\n", "", "elif", "self", ".", "n_classes", "==", "16", ":", "\n", "            ", "self", ".", "valid_classes", "=", "[", "3", ",", "4", ",", "2", ",", "21", ",", "5", ",", "7", ",", "15", ",", "9", ",", "6", ",", "1", ",", "10", ",", "17", ",", "8", ",", "19", ",", "12", ",", "11", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"Road\"", ",", "\"Sidewalk\"", ",", "\"Building\"", ",", "\"Wall\"", ",", "\n", "\"Fence\"", ",", "\"Pole\"", ",", "\"Traffic_light\"", ",", "\"Traffic_sign\"", ",", "\"Vegetation\"", ",", "\n", "\"sky\"", ",", "\"Pedestrian\"", ",", "\"Rider\"", ",", "\"Car\"", ",", "\"Bus\"", ",", "\n", "\"Motorcycle\"", ",", "\"Bicycle\"", ",", "\n", "]", "\n", "", "elif", "self", ".", "n_classes", "==", "13", ":", "\n", "            ", "self", ".", "valid_classes", "=", "[", "3", ",", "4", ",", "2", ",", "15", ",", "9", ",", "6", ",", "1", ",", "10", ",", "17", ",", "8", ",", "19", ",", "12", ",", "11", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"Road\"", ",", "\"Sidewalk\"", ",", "\"Building\"", ",", "\"Traffic_light\"", ",", "\n", "\"Traffic_sign\"", ",", "\"Vegetation\"", ",", "\"sky\"", ",", "\"Pedestrian\"", ",", "\"Rider\"", ",", "\n", "\"Car\"", ",", "\"Bus\"", ",", "\"Motorcycle\"", ",", "\"Bicycle\"", ",", "\n", "]", "\n", "\n", "", "self", ".", "ignore_index", "=", "250", "\n", "self", ".", "class_map", "=", "dict", "(", "zip", "(", "self", ".", "valid_classes", ",", "range", "(", "self", ".", "n_classes", ")", ")", ")", "\n", "imageio", ".", "plugins", ".", "freeimage", ".", "download", "(", ")", "\n", "\n", "if", "len", "(", "self", ".", "ids", ")", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"No files found in %s\"", "%", "(", "self", ".", "image_base_path", ")", "\n", ")", "\n", "\n", "", "print", "(", "\"Found {} images\"", ".", "format", "(", "len", "(", "self", ".", "ids", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.synthia_dataset.Synthia_loader.__len__": [[70, 72], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.synthia_dataset.Synthia_loader.__getitem__": [[73, 109], ["os.path.join", "PIL.Image.open", "PIL.Image.fromarray", "numpy.asarray.resize", "synthia_dataset.Synthia_loader.resize", "numpy.asarray", "numpy.asarray", "synthia_dataset.Synthia_loader.encode_segmap", "synthia_dataset.Synthia_loader.transform", "numpy.asarray", "numpy.array", "synthia_dataset.Synthia_loader.augmentations", "synthia_dataset.Synthia_loader.randaug", "synthia_dataset.Synthia_loader.transform", "id.split", "imageio.imread", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.encode_segmap", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"__getitem__\n        \n        param: index\n        \"\"\"", "\n", "id", "=", "self", ".", "ids", "[", "index", "]", "\n", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_base_path", ",", "id", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "lbl_path", "=", "id", "\n", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "lbl", "=", "np", ".", "asarray", "(", "imageio", ".", "imread", "(", "lbl_path", ",", "format", "=", "'PNG-FI'", ")", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "lbl", "=", "Image", ".", "fromarray", "(", "lbl", ")", "\n", "\n", "img", "=", "img", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "BILINEAR", ")", "\n", "lbl", "=", "lbl", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "NEAREST", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# lbl = lbl.convert('L')", "\n", "lbl", "=", "np", ".", "asarray", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "lbl", "=", "self", ".", "encode_segmap", "(", "np", ".", "array", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "\n", "input_dict", "=", "{", "}", "\n", "if", "self", ".", "augmentations", "!=", "None", ":", "\n", "            ", "img", ",", "lbl", ",", "_", ",", "_", ",", "_", "=", "self", ".", "augmentations", "(", "img", ",", "lbl", ")", "\n", "img_strong", ",", "params", "=", "self", ".", "randaug", "(", "Image", ".", "fromarray", "(", "img", ")", ")", "\n", "img_strong", ",", "_", "=", "self", ".", "transform", "(", "img_strong", ",", "lbl", ")", "\n", "input_dict", "[", "'img_strong'", "]", "=", "img_strong", "\n", "input_dict", "[", "'params'", "]", "=", "params", "\n", "\n", "", "img", ",", "lbl", "=", "self", ".", "transform", "(", "img", ",", "lbl", ")", "\n", "\n", "input_dict", "[", "'img'", "]", "=", "img", "\n", "input_dict", "[", "'label'", "]", "=", "lbl", "\n", "input_dict", "[", "'img_path'", "]", "=", "self", ".", "ids", "[", "index", "]", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.synthia_dataset.Synthia_loader.encode_segmap": [[111, 116], ["list", "numpy.ones", "synthia_dataset.Synthia_loader.class_map.items"], "methods", ["None"], ["", "def", "encode_segmap", "(", "self", ",", "lbl", ")", ":", "\n", "        ", "label_copy", "=", "250", "*", "np", ".", "ones", "(", "lbl", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "k", ",", "v", "in", "list", "(", "self", ".", "class_map", ".", "items", "(", ")", ")", ":", "\n", "            ", "label_copy", "[", "lbl", "==", "k", "]", "=", "v", "\n", "", "return", "label_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.synthia_dataset.Synthia_loader.transform": [[132, 164], ["numpy.array", "torch.from_numpy().float.astype", "torch.from_numpy().float.transpose", "numpy.unique", "numpy.array", "torch.from_numpy().long.astype", "torch.from_numpy().long.astype", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float.astype", "numpy.all", "print", "numpy.all", "print", "ValueError", "numpy.unique", "torch.from_numpy", "torch.from_numpy", "numpy.unique", "numpy.unique"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "\"\"\"transform\n\n        img, lbl\n        \"\"\"", "\n", "# img = m.imresize(", "\n", "#     img, self.img_size,", "\n", "# )", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "# img = img[:, :, ::-1] # RGB -> BGR", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img", "-=", "self", ".", "mean", "\n", "img", "=", "img", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "classes", "=", "np", ".", "unique", "(", "lbl", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ")", "\n", "lbl", "=", "lbl", ".", "astype", "(", "float", ")", "\n", "# lbl = m.imresize(lbl, self.img_size, \"nearest\", mode='F')", "\n", "lbl", "=", "lbl", ".", "astype", "(", "int", ")", "\n", "\n", "if", "not", "np", ".", "all", "(", "classes", "==", "np", ".", "unique", "(", "lbl", ")", ")", ":", "\n", "            ", "print", "(", "\"WARN: resizing labels yielded fewer classes\"", ")", "#TODO: compare the original and processed ones", "\n", "\n", "", "if", "not", "np", ".", "all", "(", "np", ".", "unique", "(", "lbl", "[", "lbl", "!=", "self", ".", "ignore_index", "]", ")", "<", "self", ".", "n_classes", ")", ":", "\n", "            ", "print", "(", "\"after det\"", ",", "classes", ",", "np", ".", "unique", "(", "lbl", ")", ")", "\n", "raise", "ValueError", "(", "\"Segmentation map contained invalid class values\"", ")", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "lbl", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "long", "(", ")", "\n", "\n", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.synthia_dataset.Synthia_loader.get_cls_num_list": [[165, 167], ["None"], "methods", ["None"], ["", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.gta5_dataset.GTA5_loader.__init__": [[51, 92], ["torch.utils.data.randaugment.RandAugmentMC", "os.path.join", "os.path.join", "scipy.loadmat", "scipy.loadmat", "range", "dict", "print", "os.path.join", "numpy.concatenate", "len", "gta5_dataset.GTA5_loader.ids.append", "zip", "len", "Exception", "os.path.join", "range", "len", "str().zfill", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ",", "logger", ",", "augmentations", "=", "None", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "src_rootpath", "\n", "self", ".", "split", "=", "'all'", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "randaug", "=", "RandAugmentMC", "(", "2", ",", "10", ")", "\n", "self", ".", "n_classes", "=", "19", "\n", "self", ".", "img_size", "=", "(", "1914", ",", "1052", ")", "\n", "\n", "self", ".", "mean", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "#TODO:  calculating the mean value of rgb channels on GTA5", "\n", "self", ".", "image_base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'images'", ")", "\n", "self", ".", "label_base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'labels'", ")", "\n", "splits", "=", "io", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'split.mat'", ")", ")", "\n", "if", "self", ".", "split", "==", "'all'", ":", "\n", "            ", "ids", "=", "np", ".", "concatenate", "(", "(", "splits", "[", "'trainIds'", "]", "[", ":", ",", "0", "]", ",", "splits", "[", "'valIds'", "]", "[", ":", ",", "0", "]", ",", "splits", "[", "'testIds'", "]", "[", ":", ",", "0", "]", ")", ")", "\n", "", "elif", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "ids", "=", "splits", "[", "'trainIds'", "]", "[", ":", ",", "0", "]", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "ids", "=", "splits", "[", "'valIds'", "]", "[", ":", "200", ",", "0", "]", "\n", "", "elif", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "ids", "=", "splits", "[", "'testIds'", "]", "[", ":", ",", "0", "]", "\n", "", "self", ".", "ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "            ", "self", ".", "ids", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "label_base_path", ",", "str", "(", "i", "+", "1", ")", ".", "zfill", "(", "5", ")", "+", "'.png'", ")", ")", "\n", "\n", "\n", "", "self", ".", "void_classes", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", "10", ",", "14", ",", "15", ",", "16", ",", "18", ",", "29", ",", "30", ",", "34", ",", "-", "1", "]", "\n", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"road\"", ",", "\"sidewalk\"", ",", "\"building\"", ",", "\"wall\"", ",", "\"fence\"", ",", "\"pole\"", ",", "\"traffic_light\"", ",", "\n", "\"traffic_sign\"", ",", "\"vegetation\"", ",", "\"terrain\"", ",", "\"sky\"", ",", "\"person\"", ",", "\"rider\"", ",", "\"car\"", ",", "\"truck\"", ",", "\"bus\"", ",", "\"train\"", ",", "\n", "\"motorcycle\"", ",", "\"bicycle\"", ",", "]", "\n", "\n", "self", ".", "ignore_index", "=", "250", "\n", "self", ".", "class_map", "=", "dict", "(", "zip", "(", "self", ".", "valid_classes", ",", "range", "(", "19", ")", ")", ")", "\n", "\n", "if", "len", "(", "self", ".", "ids", ")", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"No files for style=[%s] found in %s\"", "%", "(", "self", ".", "split", ",", "self", ".", "image_base_path", ")", "\n", ")", "\n", "\n", "", "print", "(", "\"Found {} {} images\"", ".", "format", "(", "len", "(", "self", ".", "ids", ")", ",", "self", ".", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.gta5_dataset.GTA5_loader.__len__": [[93, 95], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.gta5_dataset.GTA5_loader.__getitem__": [[96, 134], ["PIL.Image.open", "PIL.Image.open", "numpy.asarray.resize", "gta5_dataset.GTA5_loader.resize", "numpy.asarray", "numpy.asarray", "gta5_dataset.GTA5_loader.encode_segmap", "gta5_dataset.GTA5_loader.transform", "os.path.join", "os.path.join", "os.path.join", "numpy.array", "gta5_dataset.GTA5_loader.augmentations", "gta5_dataset.GTA5_loader.randaug", "gta5_dataset.GTA5_loader.transform", "PIL.Image.fromarray", "id.split"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.encode_segmap", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"__getitem__\n        \n        param: index\n        \"\"\"", "\n", "id", "=", "self", ".", "ids", "[", "index", "]", "\n", "if", "self", ".", "split", "!=", "'all'", "and", "self", ".", "split", "!=", "'val'", ":", "\n", "            ", "filename", "=", "'{:05d}.png'", ".", "format", "(", "id", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_base_path", ",", "filename", ")", "\n", "lbl_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "label_base_path", ",", "filename", ")", "\n", "", "else", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_base_path", ",", "id", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "lbl_path", "=", "id", "\n", "\n", "", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "lbl", "=", "Image", ".", "open", "(", "lbl_path", ")", "\n", "\n", "img", "=", "img", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "BILINEAR", ")", "\n", "lbl", "=", "lbl", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "NEAREST", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "lbl", "=", "np", ".", "asarray", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "lbl", "=", "self", ".", "encode_segmap", "(", "np", ".", "array", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "\n", "input_dict", "=", "{", "}", "\n", "if", "self", ".", "augmentations", "!=", "None", ":", "\n", "            ", "img", ",", "lbl", ",", "_", ",", "_", ",", "_", "=", "self", ".", "augmentations", "(", "img", ",", "lbl", ")", "\n", "img_strong", ",", "params", "=", "self", ".", "randaug", "(", "Image", ".", "fromarray", "(", "img", ")", ")", "\n", "img_strong", ",", "_", "=", "self", ".", "transform", "(", "img_strong", ",", "lbl", ")", "\n", "input_dict", "[", "'img_strong'", "]", "=", "img_strong", "\n", "input_dict", "[", "'params'", "]", "=", "params", "\n", "\n", "", "img", ",", "lbl", "=", "self", ".", "transform", "(", "img", ",", "lbl", ")", "\n", "\n", "input_dict", "[", "'img'", "]", "=", "img", "\n", "input_dict", "[", "'label'", "]", "=", "lbl", "\n", "input_dict", "[", "'img_path'", "]", "=", "self", ".", "ids", "[", "index", "]", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.gta5_dataset.GTA5_loader.encode_segmap": [[136, 142], ["None"], "methods", ["None"], ["", "def", "encode_segmap", "(", "self", ",", "lbl", ")", ":", "\n", "        ", "for", "_i", "in", "self", ".", "void_classes", ":", "\n", "            ", "lbl", "[", "lbl", "==", "_i", "]", "=", "self", ".", "ignore_index", "\n", "", "for", "_i", "in", "self", ".", "valid_classes", ":", "\n", "            ", "lbl", "[", "lbl", "==", "_i", "]", "=", "self", ".", "class_map", "[", "_i", "]", "\n", "", "return", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.gta5_dataset.GTA5_loader.decode_segmap": [[143, 157], ["temp.copy", "temp.copy", "temp.copy", "range", "numpy.zeros"], "methods", ["None"], ["", "def", "decode_segmap", "(", "self", ",", "temp", ")", ":", "\n", "        ", "r", "=", "temp", ".", "copy", "(", ")", "\n", "g", "=", "temp", ".", "copy", "(", ")", "\n", "b", "=", "temp", ".", "copy", "(", ")", "\n", "for", "l", "in", "range", "(", "0", ",", "self", ".", "n_classes", ")", ":", "\n", "            ", "r", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "0", "]", "\n", "g", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "1", "]", "\n", "b", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "2", "]", "\n", "\n", "", "rgb", "=", "np", ".", "zeros", "(", "(", "temp", ".", "shape", "[", "0", "]", ",", "temp", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "rgb", "[", ":", ",", ":", ",", "0", "]", "=", "r", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "1", "]", "=", "g", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "b", "/", "255.0", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.gta5_dataset.GTA5_loader.transform": [[158, 187], ["numpy.array", "torch.from_numpy().float.astype", "torch.from_numpy().float.transpose", "numpy.unique", "numpy.array", "torch.from_numpy().long.astype", "torch.from_numpy().long.astype", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float.astype", "numpy.all", "print", "numpy.all", "print", "ValueError", "numpy.unique", "torch.from_numpy", "torch.from_numpy", "numpy.unique", "numpy.unique"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "\"\"\"transform\n\n        img, lbl\n        \"\"\"", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "# img = img[:, :, ::-1] # RGB -> BGR", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img", "-=", "self", ".", "mean", "\n", "img", "=", "img", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "classes", "=", "np", ".", "unique", "(", "lbl", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ")", "\n", "lbl", "=", "lbl", ".", "astype", "(", "float", ")", "\n", "# lbl = m.imresize(lbl, self.img_size, \"nearest\", mode='F')", "\n", "lbl", "=", "lbl", ".", "astype", "(", "int", ")", "\n", "\n", "if", "not", "np", ".", "all", "(", "classes", "==", "np", ".", "unique", "(", "lbl", ")", ")", ":", "\n", "            ", "print", "(", "\"WARN: resizing labels yielded fewer classes\"", ")", "#TODO: compare the original and processed ones", "\n", "\n", "", "if", "not", "np", ".", "all", "(", "np", ".", "unique", "(", "lbl", "[", "lbl", "!=", "self", ".", "ignore_index", "]", ")", "<", "self", ".", "n_classes", ")", ":", "\n", "            ", "print", "(", "\"after det\"", ",", "classes", ",", "np", ".", "unique", "(", "lbl", ")", ")", "\n", "raise", "ValueError", "(", "\"Segmentation map contained invalid class values\"", ")", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "lbl", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "long", "(", ")", "\n", "\n", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.gta5_dataset.GTA5_loader.get_cls_num_list": [[188, 202], ["numpy.array"], "methods", ["None"], ["", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "cls_num_list", "=", "np", ".", "array", "(", "[", "16139327127", ",", "4158369631", ",", "8495419275", ",", "927064742", ",", "318109335", ",", "\n", "532432540", ",", "67453231", ",", "40526481", ",", "3818867486", ",", "1081467674", ",", "\n", "6800402117", ",", "182228033", ",", "15360044", ",", "1265024472", ",", "567736474", ",", "\n", "184854135", ",", "32542442", ",", "15832619", ",", "2721193", "]", ")", "\n", "# cls_num_list = np.zeros(self.n_classes, dtype=np.int64)", "\n", "# for n in range(len(self.ids)):", "\n", "#     lbl = Image.open(self.ids[n])", "\n", "#     lbl = lbl.resize(self.img_size, Image.NEAREST)", "\n", "#     lbl = np.asarray(lbl, dtype=np.uint8)", "\n", "#     lbl = self.encode_segmap(np.array(lbl, dtype=np.uint8))", "\n", "#     for i in range(self.n_classes):", "\n", "#         cls_num_list[i] += (lbl == i).sum()", "\n", "return", "cls_num_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.Compose.__init__": [[17, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "augmentations", ")", ":", "\n", "        ", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "PIL2Numpy", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.Compose.__call__": [[21, 47], ["isinstance", "PIL.Image.fromarray", "PIL.Image.fromarray", "print", "a", "PIL.Image.fromarray", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array", "torch.interpolate", "torch.interpolate", "torch.from_numpy.unsqueeze", "torch.from_numpy.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "mask1", "=", "None", ",", "lpsoft", "=", "None", ")", ":", "\n", "        ", "params", "=", "{", "}", "\n", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "img", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "\"RGB\"", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ",", "mode", "=", "\"L\"", ")", "\n", "if", "mask1", "is", "not", "None", ":", "\n", "                ", "mask1", "=", "Image", ".", "fromarray", "(", "mask1", ",", "mode", "=", "\"L\"", ")", "\n", "", "if", "lpsoft", "is", "not", "None", ":", "\n", "                ", "lpsoft", "=", "torch", ".", "from_numpy", "(", "lpsoft", ")", "\n", "lpsoft", "=", "F", ".", "interpolate", "(", "lpsoft", ".", "unsqueeze", "(", "0", ")", ",", "size", "=", "[", "img", ".", "size", "[", "1", "]", ",", "img", ".", "size", "[", "0", "]", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "[", "0", "]", "\n", "", "self", ".", "PIL2Numpy", "=", "True", "\n", "\n", "", "if", "img", ".", "size", "!=", "mask", ".", "size", ":", "\n", "            ", "print", "(", "img", ".", "size", ",", "mask", ".", "size", ")", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "if", "mask1", "is", "not", "None", ":", "\n", "            ", "assert", "(", "img", ".", "size", "==", "mask1", ".", "size", ")", "\n", "", "for", "a", "in", "self", ".", "augmentations", ":", "\n", "            ", "img", ",", "mask", ",", "mask1", ",", "lpsoft", ",", "params", "=", "a", "(", "img", ",", "mask", ",", "mask1", ",", "lpsoft", ",", "params", ")", "\n", "# print(img.size)", "\n", "\n", "", "if", "self", ".", "PIL2Numpy", ":", "\n", "            ", "img", ",", "mask", "=", "np", ".", "array", "(", "img", ")", ",", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "mask1", "is", "not", "None", ":", "\n", "                ", "mask1", "=", "np", ".", "array", "(", "mask1", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "", "return", "img", ",", "mask", ",", "mask1", ",", "lpsoft", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.RandomCrop.__init__": [[50, 56], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.RandomCrop.__call__": [[57, 109], ["random.randint", "random.randint", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "torch.interpolate", "torch.interpolate", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "lpsoft.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "mask1", "=", "None", ",", "lpsoft", "=", "None", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "if", "mask1", "is", "not", "None", ":", "\n", "                ", "mask1", "=", "ImageOps", ".", "expand", "(", "mask1", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "if", "mask1", "is", "not", "None", ":", "\n", "            ", "assert", "(", "img", ".", "size", "==", "mask1", ".", "size", ")", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "tw", ",", "th", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", "<", "tw", "or", "h", "<", "th", ":", "\n", "            ", "if", "lpsoft", "is", "not", "None", ":", "\n", "                ", "lpsoft", "=", "F", ".", "interpolate", "(", "lpsoft", ".", "unsqueeze", "(", "0", ")", ",", "size", "=", "[", "th", ",", "tw", "]", ",", "mode", "=", "'bolinear'", ",", "align_corners", "=", "True", ")", "[", "0", "]", "\n", "", "if", "mask1", "is", "not", "None", ":", "\n", "                ", "return", "(", "\n", "img", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", "mask1", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", "lpsoft", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "return", "(", "\n", "img", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", "None", ",", "\n", "lpsoft", "\n", ")", "\n", "\n", "", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "params", "[", "'RandomCrop'", "]", "=", "(", "y1", ",", "y1", "+", "th", ",", "x1", ",", "x1", "+", "tw", ")", "\n", "if", "lpsoft", "is", "not", "None", ":", "\n", "            ", "lpsoft", "=", "lpsoft", "[", ":", ",", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "", "if", "mask1", "is", "not", "None", ":", "\n", "            ", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask1", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "lpsoft", ",", "\n", "params", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "None", ",", "\n", "lpsoft", ",", "\n", "params", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.AdjustGamma.__init__": [[113, 115], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ")", ":", "\n", "        ", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.AdjustGamma.__call__": [[116, 119], ["torchvision.adjust_gamma", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_gamma", "(", "img", ",", "random", ".", "uniform", "(", "1", ",", "1", "+", "self", ".", "gamma", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.AdjustSaturation.__init__": [[122, 124], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "saturation", ")", ":", "\n", "        ", "self", ".", "saturation", "=", "saturation", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.AdjustSaturation.__call__": [[125, 130], ["torchvision.adjust_saturation", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_saturation", "(", "img", ",", "\n", "random", ".", "uniform", "(", "1", "-", "self", ".", "saturation", ",", "\n", "1", "+", "self", ".", "saturation", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.AdjustHue.__init__": [[133, 135], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "hue", ")", ":", "\n", "        ", "self", ".", "hue", "=", "hue", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.AdjustHue.__call__": [[136, 140], ["torchvision.adjust_hue", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_hue", "(", "img", ",", "random", ".", "uniform", "(", "-", "self", ".", "hue", ",", "\n", "self", ".", "hue", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.AdjustBrightness.__init__": [[143, 145], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "bf", ")", ":", "\n", "        ", "self", ".", "bf", "=", "bf", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.AdjustBrightness.__call__": [[146, 151], ["torchvision.adjust_brightness", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_brightness", "(", "img", ",", "\n", "random", ".", "uniform", "(", "1", "-", "self", ".", "bf", ",", "\n", "1", "+", "self", ".", "bf", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.AdjustContrast.__init__": [[153, 155], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cf", ")", ":", "\n", "        ", "self", ".", "cf", "=", "cf", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.AdjustContrast.__call__": [[156, 161], ["torchvision.adjust_contrast", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_contrast", "(", "img", ",", "\n", "random", ".", "uniform", "(", "1", "-", "self", ".", "cf", ",", "\n", "1", "+", "self", ".", "cf", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.CenterCrop.__init__": [[163, 168], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.CenterCrop.__call__": [[169, 178], ["int", "int", "round", "round", "img.crop", "mask.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.RandomHorizontallyFlip.__init__": [[182, 184], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.RandomHorizontallyFlip.__call__": [[185, 210], ["random.random", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "lpsoft.index_select.index_select.index_select", "img.transpose", "mask.transpose", "mask1.transpose", "img.transpose", "mask.transpose", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "lpsoft.index_select.index_select.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "mask1", "=", "None", ",", "lpsoft", "=", "None", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "params", "[", "'RandomHorizontallyFlip'", "]", "=", "True", "\n", "if", "lpsoft", "is", "not", "None", ":", "\n", "                ", "inv_idx", "=", "torch", ".", "arange", "(", "lpsoft", ".", "size", "(", "2", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "# C x H x W", "\n", "lpsoft", "=", "lpsoft", ".", "index_select", "(", "2", ",", "inv_idx", ")", "\n", "", "if", "mask1", "is", "not", "None", ":", "\n", "                ", "return", "(", "\n", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "mask1", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "lpsoft", ",", "\n", "params", "\n", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "\n", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "None", ",", "\n", "lpsoft", ",", "\n", "params", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "params", "[", "'RandomHorizontallyFlip'", "]", "=", "False", "\n", "", "return", "img", ",", "mask", ",", "mask1", ",", "lpsoft", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.RandomVerticallyFlip.__init__": [[213, 215], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.RandomVerticallyFlip.__call__": [[216, 223], ["random.random", "img.transpose", "mask.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "(", "\n", "img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", ",", "\n", "mask", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", ",", "\n", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.FreeScale.__init__": [[226, 228], ["tuple", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "reversed", "(", "size", ")", ")", "# size: (h, w)", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.FreeScale.__call__": [[229, 234], ["img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "(", "\n", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.RandomTranslate.__init__": [[238, 240], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "offset", ")", ":", "\n", "        ", "self", ".", "offset", "=", "offset", "# tuple (delta_x, delta_y)", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.RandomTranslate.__call__": [[241, 281], ["int", "int", "torchvision.crop", "torchvision.pad", "torchvision.affine", "abs", "abs", "abs", "random.random", "random.random", "abs", "abs", "abs"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "x_offset", "=", "int", "(", "2", "*", "(", "random", ".", "random", "(", ")", "-", "0.5", ")", "*", "self", ".", "offset", "[", "0", "]", ")", "\n", "y_offset", "=", "int", "(", "2", "*", "(", "random", ".", "random", "(", ")", "-", "0.5", ")", "*", "self", ".", "offset", "[", "1", "]", ")", "\n", "\n", "x_crop_offset", "=", "x_offset", "\n", "y_crop_offset", "=", "y_offset", "\n", "if", "x_offset", "<", "0", ":", "\n", "            ", "x_crop_offset", "=", "0", "\n", "", "if", "y_offset", "<", "0", ":", "\n", "            ", "y_crop_offset", "=", "0", "\n", "\n", "", "cropped_img", "=", "tf", ".", "crop", "(", "img", ",", "\n", "y_crop_offset", ",", "\n", "x_crop_offset", ",", "\n", "img", ".", "size", "[", "1", "]", "-", "abs", "(", "y_offset", ")", ",", "\n", "img", ".", "size", "[", "0", "]", "-", "abs", "(", "x_offset", ")", ")", "\n", "\n", "if", "x_offset", ">=", "0", "and", "y_offset", ">=", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "0", ",", "0", ",", "x_offset", ",", "y_offset", ")", "\n", "\n", "", "elif", "x_offset", ">=", "0", "and", "y_offset", "<", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "0", ",", "abs", "(", "y_offset", ")", ",", "x_offset", ",", "0", ")", "\n", "\n", "", "elif", "x_offset", "<", "0", "and", "y_offset", ">=", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "abs", "(", "x_offset", ")", ",", "0", ",", "0", ",", "y_offset", ")", "\n", "\n", "", "elif", "x_offset", "<", "0", "and", "y_offset", "<", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "abs", "(", "x_offset", ")", ",", "abs", "(", "y_offset", ")", ",", "0", ",", "0", ")", "\n", "\n", "", "return", "(", "\n", "tf", ".", "pad", "(", "cropped_img", ",", "\n", "padding_tuple", ",", "\n", "padding_mode", "=", "'reflect'", ")", ",", "\n", "tf", ".", "affine", "(", "mask", ",", "\n", "translate", "=", "(", "-", "x_offset", ",", "-", "y_offset", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "0.0", ",", "\n", "shear", "=", "0.0", ",", "\n", "fillcolor", "=", "250", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.RandomRotate.__init__": [[284, 286], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.RandomRotate.__call__": [[287, 304], ["torchvision.affine", "torchvision.affine", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "return", "(", "\n", "tf", ".", "affine", "(", "img", ",", "\n", "translate", "=", "(", "0", ",", "0", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "rotate_degree", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ",", "\n", "fillcolor", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "shear", "=", "0.0", ")", ",", "\n", "tf", ".", "affine", "(", "mask", ",", "\n", "translate", "=", "(", "0", ",", "0", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "rotate_degree", ",", "\n", "resample", "=", "Image", ".", "NEAREST", ",", "\n", "fillcolor", "=", "250", ",", "\n", "shear", "=", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.Scale.__init__": [[308, 310], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.Scale.__call__": [[311, 329], ["int", "int", "img.resize", "mask.resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", ">=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", ">=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", ">", "h", ":", "\n", "            ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.RandomSizedCrop.__init__": [[386, 388], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.RandomSizedCrop.__call__": [[389, 419], ["range", "augmentations.Scale", "augmentations.CenterCrop", "CenterCrop.", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "mask.crop.crop.crop", "Scale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize", "mask.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.45", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "img", ".", "size", "==", "(", "w", ",", "h", ")", "\n", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "\n", "# Fallback", "\n", "", "", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "crop", "=", "CenterCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "*", "scale", "(", "img", ",", "mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.RandomSized.__init__": [[422, 426], ["augmentations.Scale", "augmentations.RandomCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "self", ".", "crop", "=", "RandomCrop", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.RandomSized.__call__": [[427, 449], ["int", "int", "img.resize", "mask.resize", "mask1.resize.resize.resize", "random.uniform", "torch.interpolate", "torch.interpolate", "lpsoft.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "mask1", "=", "None", ",", "lpsoft", "=", "None", ",", "params", "=", "None", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "if", "mask1", "is", "not", "None", ":", "\n", "            ", "assert", "(", "img", ".", "size", "==", "mask1", ".", "size", ")", "\n", "\n", "", "prop", "=", "1.0", "*", "img", ".", "size", "[", "0", "]", "/", "img", ".", "size", "[", "1", "]", "\n", "w", "=", "int", "(", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "*", "self", ".", "size", ")", "\n", "#w = self.size", "\n", "h", "=", "int", "(", "w", "/", "prop", ")", "\n", "params", "[", "'RandomSized'", "]", "=", "(", "h", ",", "w", ")", "\n", "# h = int(random.uniform(0.5, 2) * self.size[1])", "\n", "\n", "img", ",", "mask", "=", "(", "\n", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "if", "mask1", "is", "not", "None", ":", "\n", "            ", "mask1", "=", "mask1", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "if", "lpsoft", "is", "not", "None", ":", "\n", "            ", "lpsoft", "=", "F", ".", "interpolate", "(", "lpsoft", ".", "unsqueeze", "(", "0", ")", ",", "size", "=", "[", "h", ",", "w", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "[", "0", "]", "\n", "\n", "", "return", "img", ",", "mask", ",", "mask1", ",", "lpsoft", ",", "params", "\n", "# return self.crop(*self.scale(img, mask))", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.MyScale": [[331, 349], ["isinstance", "Image.fromarray.resize", "Image.fromarray.resize", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "", "def", "MyScale", "(", "img", ",", "lbl", ",", "size", ")", ":", "\n", "    ", "\"\"\"scale\n\n    img, lbl, longer size\n    \"\"\"", "\n", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "_lbl", "=", "Image", ".", "fromarray", "(", "lbl", ")", "\n", "", "else", ":", "\n", "        ", "_img", "=", "img", "\n", "_lbl", "=", "lbl", "\n", "", "assert", "_img", ".", "size", "==", "_lbl", ".", "size", "\n", "# prop = 1.0 * _img.size[0]/_img.size[1]", "\n", "w", ",", "h", "=", "size", "\n", "# h = int(size / prop)", "\n", "_img", "=", "_img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "_lbl", "=", "_lbl", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "return", "np", ".", "array", "(", "_img", ")", ",", "np", ".", "array", "(", "_lbl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.Flip": [[350, 364], ["isinstance", "PIL.Image.fromarray", "PIL.Image.fromarray", "random.random", "numpy.array", "numpy.array", "Image.fromarray.transpose", "Image.fromarray.transpose"], "function", ["None"], ["", "def", "Flip", "(", "img", ",", "lbl", ",", "prop", ")", ":", "\n", "    ", "\"\"\"\n    flip img and lbl with probablity prop\n    \"\"\"", "\n", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "_lbl", "=", "Image", ".", "fromarray", "(", "lbl", ")", "\n", "", "else", ":", "\n", "        ", "_img", "=", "img", "\n", "_lbl", "=", "lbl", "\n", "", "if", "random", ".", "random", "(", ")", "<", "prop", ":", "\n", "        ", "_img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "_lbl", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "", "return", "np", ".", "array", "(", "_img", ")", ",", "np", ".", "array", "(", "_lbl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.augmentations.MyRotate": [[365, 384], ["isinstance", "Image.fromarray.rotate", "Image.fromarray.rotate", "PIL.Image.fromarray", "PIL.Image.fromarray", "random.random", "random.random", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "MyRotate", "(", "img", ",", "lbl", ",", "degree", ")", ":", "\n", "    ", "\"\"\"\n    img, lbl, degree\n    randomly rotate clockwise or anti-clockwise\n    \"\"\"", "\n", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "_lbl", "=", "Image", ".", "fromarray", "(", "lbl", ")", "\n", "", "else", ":", "\n", "        ", "_img", "=", "img", "\n", "_lbl", "=", "lbl", "\n", "", "_degree", "=", "random", ".", "random", "(", ")", "*", "degree", "\n", "\n", "flags", "=", "-", "1", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "flags", "=", "1", "\n", "", "_img", "=", "_img", ".", "rotate", "(", "_degree", "*", "flags", ")", "\n", "_lbl", "=", "_lbl", ".", "rotate", "(", "_degree", "*", "flags", ")", "\n", "return", "np", ".", "array", "(", "_img", ")", ",", "np", ".", "array", "(", "_lbl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.CustomDatasetDataLoader.__init__": [[61, 117], ["__init__.find_dataset_using_name", "find_dataset_using_name.", "logger.info", "print", "__init__.find_dataset_using_name", "find_dataset_using_name.", "logger.info", "print", "data.DataProvider.DataProvider", "torch.utils.data.DataLoader", "__init__.find_dataset_using_name", "find_dataset_using_name.", "logger.info", "print", "torch.utils.data.DataLoader", "__init__.get_composed_augmentations", "__init__.get_composed_augmentations", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.get_composed_augmentations", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.get_composed_augmentations"], []], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.CustomDatasetDataLoader.load_data": [[119, 121], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.find_dataset_using_name": [[12, 33], ["importlib.import_module", "importlib.import_module.__dict__.items", "NotImplementedError", "issubclass", "_name.lower", "target_dataset_name.lower"], "function", ["None"], ["from", ".", "replicate", "import", "DataParallelWithCallback", ",", "patch_replication_callback", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.get_option_setter": [[35, 39], ["__init__.find_dataset_using_name"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.create_dataset": [[41, 54], ["__init__.CustomDatasetDataLoader", "__init__.CustomDatasetDataLoader.load_data"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.CustomDatasetDataLoader.load_data"], []], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.__init__.get_composed_augmentations": [[55, 59], ["Compose", "RandomSized", "RandomCrop", "RandomHorizontallyFlip"], "function", ["None"], []], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.__init__": [[72, 133], ["torch.utils.data.randaugment.RandAugmentMC", "numpy.array", "os.path.join", "os.path.join", "sorted", "dict", "print", "cityscapes_dataset.recursive_glob", "dict", "zip", "Exception", "zip", "dict", "range", "range", "range", "zip", "dict", "len", "range", "zip", "range"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.recursive_glob"], ["def", "__init__", "(", "self", ",", "opt", ",", "logger", ",", "augmentations", "=", "None", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "\"\"\"__init__\n\n        :param opt: parameters of dataset\n        :param writer: save the result of experiment\n        :param logger: logging file\n        :param augmentations: \n        \"\"\"", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "tgt_rootpath", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "randaug", "=", "RandAugmentMC", "(", "2", ",", "10", ")", "\n", "self", ".", "n_classes", "=", "opt", ".", "n_class", "\n", "self", ".", "img_size", "=", "(", "2048", ",", "1024", ")", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "self", ".", "mean_rgb", "[", "'cityscapes'", "]", ")", "\n", "self", ".", "files", "=", "{", "}", "\n", "self", ".", "paired_files", "=", "{", "}", "\n", "\n", "self", ".", "images_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"leftImg8bit\"", ",", "self", ".", "split", ")", "\n", "self", ".", "annotations_base", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "\"gtFine\"", ",", "self", ".", "split", "\n", ")", "\n", "\n", "self", ".", "files", "=", "sorted", "(", "recursive_glob", "(", "rootdir", "=", "self", ".", "images_base", ",", "suffix", "=", "\".png\"", ")", ")", "#find all files from rootdir and subfolders with suffix = \".png\"", "\n", "\n", "#self.void_classes = [0, 1, 2, 3, 4, 5, 6, 9, 10, 14, 15, 16, 18, 29, 30, -1]", "\n", "if", "self", ".", "n_classes", "==", "19", ":", "\n", "            ", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"road\"", ",", "\"sidewalk\"", ",", "\"building\"", ",", "\"wall\"", ",", "\n", "\"fence\"", ",", "\"pole\"", ",", "\"traffic_light\"", ",", "\"traffic_sign\"", ",", "\"vegetation\"", ",", "\n", "\"terrain\"", ",", "\"sky\"", ",", "\"person\"", ",", "\"rider\"", ",", "\"car\"", ",", "\n", "\"truck\"", ",", "\"bus\"", ",", "\"train\"", ",", "\"motorcycle\"", ",", "\"bicycle\"", ",", "\n", "]", "\n", "self", ".", "to19", "=", "dict", "(", "zip", "(", "range", "(", "19", ")", ",", "range", "(", "19", ")", ")", ")", "\n", "", "elif", "self", ".", "n_classes", "==", "16", ":", "\n", "            ", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "23", ",", "24", ",", "25", ",", "26", ",", "28", ",", "32", ",", "33", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"road\"", ",", "\"sidewalk\"", ",", "\"building\"", ",", "\"wall\"", ",", "\n", "\"fence\"", ",", "\"pole\"", ",", "\"traffic_light\"", ",", "\"traffic_sign\"", ",", "\"vegetation\"", ",", "\n", "\"sky\"", ",", "\"person\"", ",", "\"rider\"", ",", "\"car\"", ",", "\"bus\"", ",", "\n", "\"motorcycle\"", ",", "\"bicycle\"", ",", "\n", "]", "\n", "self", ".", "to19", "=", "dict", "(", "zip", "(", "range", "(", "16", ")", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "10", ",", "11", ",", "12", ",", "13", ",", "15", ",", "17", ",", "18", "]", ")", ")", "\n", "", "elif", "self", ".", "n_classes", "==", "13", ":", "\n", "            ", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "19", ",", "20", ",", "21", ",", "23", ",", "24", ",", "25", ",", "26", ",", "28", ",", "32", ",", "33", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"road\"", ",", "\"sidewalk\"", ",", "\"building\"", ",", "\"traffic_light\"", ",", "\n", "\"traffic_sign\"", ",", "\"vegetation\"", ",", "\"sky\"", ",", "\"person\"", ",", "\"rider\"", ",", "\n", "\"car\"", ",", "\"bus\"", ",", "\"motorcycle\"", ",", "\"bicycle\"", ",", "\n", "]", "\n", "self", ".", "to19", "=", "dict", "(", "zip", "(", "range", "(", "13", ")", ",", "[", "0", ",", "1", ",", "2", ",", "6", ",", "7", ",", "8", ",", "10", ",", "11", ",", "12", ",", "13", ",", "15", ",", "17", ",", "18", "]", ")", ")", "\n", "\n", "", "self", ".", "ignore_index", "=", "250", "\n", "self", ".", "class_map", "=", "dict", "(", "zip", "(", "self", ".", "valid_classes", ",", "range", "(", "self", ".", "n_classes", ")", ")", ")", "#zip: return tuples", "\n", "\n", "if", "not", "self", ".", "files", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"No files for split=[%s] found in %s\"", "%", "(", "self", ".", "split", ",", "self", ".", "images_base", ")", "\n", ")", "\n", "\n", "", "print", "(", "\"Found %d %s images\"", "%", "(", "len", "(", "self", ".", "files", ")", ",", "self", ".", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.__len__": [[134, 137], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"__len__\"\"\"", "\n", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.__getitem__": [[138, 197], ["cityscapes_dataset.Cityscapes_loader.files[].rstrip", "os.path.join", "PIL.Image.open", "PIL.Image.open", "numpy.array.resize", "cityscapes_dataset.Cityscapes_loader.resize", "numpy.array", "numpy.array", "cityscapes_dataset.Cityscapes_loader.encode_segmap", "numpy.array.copy().astype", "img_full.transpose.transpose.transpose", "cityscapes_dataset.Cityscapes_loader.transform", "torch.from_numpy().float", "numpy.array", "img_full.transpose.transpose.astype", "cityscapes_dataset.Cityscapes_loader.augmentations", "cityscapes_dataset.Cityscapes_loader.randaug", "cityscapes_dataset.Cityscapes_loader.transform", "cityscapes_dataset.Cityscapes_loader.split", "numpy.array.copy", "numpy.load", "os.path.join", "PIL.Image.open", "numpy.array.resize", "numpy.array", "PIL.Image.fromarray", "torch.from_numpy", "input_dict.items", "os.path.basename", "os.path.join", "os.path.basename", "numpy.load", "os.path.basename().replace", "os.path.join", "os.path.basename().replace", "os.path.basename", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.encode_segmap", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"__getitem__\n\n        :param index:\n        \"\"\"", "\n", "img_path", "=", "self", ".", "files", "[", "index", "]", ".", "rstrip", "(", ")", "\n", "lbl_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "annotations_base", ",", "\n", "img_path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "2", "]", ",", "\n", "os", ".", "path", ".", "basename", "(", "img_path", ")", "[", ":", "-", "15", "]", "+", "\"gtFine_labelIds.png\"", ",", "\n", ")", "\n", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "lbl", "=", "Image", ".", "open", "(", "lbl_path", ")", "\n", "img", "=", "img", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "BILINEAR", ")", "\n", "lbl", "=", "lbl", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "lbl", "=", "self", ".", "encode_segmap", "(", "np", ".", "array", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "\n", "img_full", "=", "img", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img_full", "-=", "self", ".", "mean", "\n", "img_full", "=", "img_full", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "img_full", "=", "img_full", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "lp", ",", "lpsoft", ",", "weak_params", "=", "None", ",", "None", ",", "None", "\n", "if", "self", ".", "split", "==", "'train'", "and", "self", ".", "opt", ".", "used_save_pseudo", ":", "\n", "            ", "if", "self", ".", "opt", ".", "proto_rectify", ":", "\n", "                ", "lpsoft", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "path_soft", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", ".", "replace", "(", "'.png'", ",", "'.npy'", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "lp_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "path_LP", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "\n", "lp", "=", "Image", ".", "open", "(", "lp_path", ")", "\n", "lp", "=", "lp", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "NEAREST", ")", "\n", "lp", "=", "np", ".", "array", "(", "lp", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "self", ".", "opt", ".", "threshold", "and", "self", ".", "opt", ".", "threshold", ">", "0", ":", "\n", "                    ", "conf", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "path_LP", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", ".", "replace", "(", "'.png'", ",", "'_conf.npy'", ")", ")", ")", "\n", "lp", "[", "conf", "<=", "self", ".", "opt", ".", "threshold", "]", "=", "250", "\n", "\n", "", "", "", "input_dict", "=", "{", "}", "\n", "if", "self", ".", "augmentations", "!=", "None", ":", "\n", "            ", "img", ",", "lbl", ",", "lp", ",", "lpsoft", ",", "weak_params", "=", "self", ".", "augmentations", "(", "img", ",", "lbl", ",", "lp", ",", "lpsoft", ")", "\n", "img_strong", ",", "params", "=", "self", ".", "randaug", "(", "Image", ".", "fromarray", "(", "img", ")", ")", "\n", "img_strong", ",", "_", ",", "_", "=", "self", ".", "transform", "(", "img_strong", ",", "lbl", ")", "\n", "input_dict", "[", "'img_strong'", "]", "=", "img_strong", "\n", "input_dict", "[", "'params'", "]", "=", "params", "\n", "\n", "", "img", ",", "lbl_", ",", "lp", "=", "self", ".", "transform", "(", "img", ",", "lbl", ",", "lp", ")", "\n", "\n", "input_dict", "[", "'img'", "]", "=", "img", "\n", "input_dict", "[", "'img_full'", "]", "=", "torch", ".", "from_numpy", "(", "img_full", ")", ".", "float", "(", ")", "\n", "input_dict", "[", "'label'", "]", "=", "lbl_", "\n", "input_dict", "[", "'lp'", "]", "=", "lp", "\n", "input_dict", "[", "'lpsoft'", "]", "=", "lpsoft", "\n", "input_dict", "[", "'weak_params'", "]", "=", "weak_params", "#full2weak", "\n", "input_dict", "[", "'img_path'", "]", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "input_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "input_dict", ".", "items", "(", ")", "if", "v", "is", "not", "None", "}", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform": [[198, 240], ["numpy.array", "torch.from_numpy().float.astype", "torch.from_numpy().float.transpose", "numpy.unique", "numpy.array", "torch.from_numpy().long.astype", "torch.from_numpy().long.astype", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float.astype", "numpy.all", "print", "print", "ValueError", "numpy.unique", "numpy.array", "torch.from_numpy().long", "numpy.all", "numpy.unique", "torch.from_numpy", "torch.from_numpy", "numpy.unique", "torch.from_numpy", "numpy.unique"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ",", "lbl", ",", "lp", "=", "None", ",", "check", "=", "True", ")", ":", "\n", "        ", "\"\"\"transform\n\n        :param img:\n        :param lbl:\n        \"\"\"", "\n", "# img = m.imresize(", "\n", "#     img, (self.img_size[0], self.img_size[1])", "\n", "# )  # uint8 with RGB mode", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "# img = img[:, :, ::-1]  # RGB -> BGR", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img", "-=", "self", ".", "mean", "\n", "img", "=", "img", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "# NHWC -> NCHW", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "classes", "=", "np", ".", "unique", "(", "lbl", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ")", "\n", "lbl", "=", "lbl", ".", "astype", "(", "float", ")", "\n", "# lbl = m.imresize(lbl, (self.img_size[0], self.img_size[1]), \"nearest\", mode=\"F\")", "\n", "lbl", "=", "lbl", ".", "astype", "(", "int", ")", "\n", "\n", "if", "not", "np", ".", "all", "(", "classes", "==", "np", ".", "unique", "(", "lbl", ")", ")", ":", "\n", "            ", "print", "(", "\"WARN: resizing labels yielded fewer classes\"", ")", "#TODO: compare the original and processed ones", "\n", "\n", "", "if", "check", "and", "not", "np", ".", "all", "(", "np", ".", "unique", "(", "lbl", "[", "lbl", "!=", "self", ".", "ignore_index", "]", ")", "<", "self", ".", "n_classes", ")", ":", "#todo: understanding the meaning ", "\n", "            ", "print", "(", "\"after det\"", ",", "classes", ",", "np", ".", "unique", "(", "lbl", ")", ")", "\n", "raise", "ValueError", "(", "\"Segmentation map contained invalid class values\"", ")", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "lbl", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "long", "(", ")", "\n", "\n", "if", "lp", "is", "not", "None", ":", "\n", "            ", "classes", "=", "np", ".", "unique", "(", "lp", ")", "\n", "lp", "=", "np", ".", "array", "(", "lp", ")", "\n", "# if not np.all(np.unique(lp[lp != self.ignore_index]) < self.n_classes):", "\n", "#     raise ValueError(\"lp Segmentation map contained invalid class values\")", "\n", "\n", "lp", "=", "torch", ".", "from_numpy", "(", "lp", ")", ".", "long", "(", ")", "\n", "\n", "", "return", "img", ",", "lbl", ",", "lp", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.decode_segmap": [[241, 255], ["temp.copy", "temp.copy", "temp.copy", "range", "numpy.zeros"], "methods", ["None"], ["", "def", "decode_segmap", "(", "self", ",", "temp", ")", ":", "\n", "        ", "r", "=", "temp", ".", "copy", "(", ")", "\n", "g", "=", "temp", ".", "copy", "(", ")", "\n", "b", "=", "temp", ".", "copy", "(", ")", "\n", "for", "l", "in", "range", "(", "0", ",", "self", ".", "n_classes", ")", ":", "\n", "            ", "r", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "self", ".", "to19", "[", "l", "]", "]", "[", "0", "]", "\n", "g", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "self", ".", "to19", "[", "l", "]", "]", "[", "1", "]", "\n", "b", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "self", ".", "to19", "[", "l", "]", "]", "[", "2", "]", "\n", "\n", "", "rgb", "=", "np", ".", "zeros", "(", "(", "temp", ".", "shape", "[", "0", "]", ",", "temp", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "rgb", "[", ":", ",", ":", ",", "0", "]", "=", "r", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "1", "]", "=", "g", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "b", "/", "255.0", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.encode_segmap": [[256, 262], ["list", "numpy.ones", "cityscapes_dataset.Cityscapes_loader.class_map.items"], "methods", ["None"], ["", "def", "encode_segmap", "(", "self", ",", "mask", ")", ":", "\n", "# Put all void classes to zero", "\n", "        ", "label_copy", "=", "250", "*", "np", ".", "ones", "(", "mask", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "k", ",", "v", "in", "list", "(", "self", ".", "class_map", ".", "items", "(", ")", ")", ":", "\n", "            ", "label_copy", "[", "mask", "==", "k", "]", "=", "v", "\n", "", "return", "label_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.get_cls_num_list": [[263, 269], ["numpy.array"], "methods", ["None"], ["", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "cls_num_list", "=", "np", ".", "array", "(", "[", "1557726944", ",", "254364912", ",", "673500400", ",", "18431664", ",", "14431392", ",", "\n", "29361440", ",", "7038112", ",", "7352368", ",", "477239920", ",", "40134240", ",", "\n", "211669120", ",", "36057968", ",", "865184", ",", "264786464", ",", "17128544", ",", "\n", "2385680", ",", "943312", ",", "504112", ",", "2174560", "]", ")", "\n", "return", "cls_num_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.recursive_glob": [[19, 29], ["os.path.join", "os.walk", "filename.endswith"], "function", ["None"], ["def", "recursive_glob", "(", "rootdir", "=", "\".\"", ",", "suffix", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Performs recursive glob with given suffix and rootdir \n        :param rootdir is the root directory\n        :param suffix is the suffix to be searched\n    \"\"\"", "\n", "return", "[", "\n", "os", ".", "path", ".", "join", "(", "looproot", ",", "filename", ")", "\n", "for", "looproot", ",", "_", ",", "filenames", "in", "os", ".", "walk", "(", "rootdir", ")", "#os.walk: traversal all files in rootdir and its subfolders", "\n", "for", "filename", "in", "filenames", "\n", "if", "filename", ".", "endswith", "(", "suffix", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.__init__": [[11, 19], ["DataProvider.DataProvider.build"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.build"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "**", "kw", ")", ":", "\n", "        ", "self", ".", "args", "=", "kw", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "DataLoader", "=", "None", "#data.DataLoader(self.dataset, **self.args)", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "build", "(", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.build": [[20, 23], ["torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "enumerate"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "DataLoader", "=", "data", ".", "DataLoader", "(", "self", ".", "dataset", ",", "**", "self", ".", "args", ")", "\n", "self", ".", "DataLoader", "=", "enumerate", "(", "self", ".", "DataLoader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.__next__": [[24, 41], ["DataProvider.DataProvider.build", "DataProvider.DataProvider.DataLoader.__next__", "DataProvider.DataProvider.build", "DataProvider.DataProvider.DataLoader.__next__"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.build", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.__next__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.build", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.__next__"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "DataLoader", "==", "None", ":", "\n", "            ", "self", ".", "build", "(", ")", "\n", "\n", "", "try", ":", "\n", "            ", "_", ",", "batch", "=", "self", ".", "DataLoader", ".", "__next__", "(", ")", "\n", "# img, label = batch", "\n", "self", ".", "iteration", "+=", "1", "\n", "return", "batch", "\n", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "epoch", "+=", "1", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "build", "(", ")", "\n", "_", ",", "batch", "=", "self", ".", "DataLoader", ".", "__next__", "(", ")", "\n", "# img, label = batch", "\n", "return", "batch", "\n", "", "", "next", "=", "__next__", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.__iter__": [[43, 45], ["None"], "methods", ["None"], ["def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.AD_Trainer.__init__": [[64, 160], ["print", "torch.Module.__init__", "trainer_caco.AD_Trainer.G.load_state_dict", "model.deeplab_advent_caco.get_deeplab_v2", "trainer_caco.AD_Trainer.G_ma.load_state_dict", "model.deeplab_advent_caco.get_deeplab_v2", "trainer_caco.AD_Trainer.G_source.load_state_dict", "model.ms_discriminator.MsImageDis().cuda", "model.ms_discriminator.MsImageDis().cuda", "trainer_caco.AD_Trainer.D1.apply", "trainer_caco.AD_Trainer.D2.apply", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "trainer_caco.AD_Trainer.G.cuda", "trainer_caco.AD_Trainer.G_ma.cuda", "trainer_caco.AD_Trainer.G_source.cuda", "trainer_caco.AD_Trainer.D1.cuda", "trainer_caco.AD_Trainer.D2.cuda", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "model.deeplab_advent_caco.get_deeplab_v2", "trainer_caco.AD_Trainer.G.state_dict().copy", "trainer_caco.AD_Trainer.G.state_dict().copy", "trainer_caco.AD_Trainer.G.state_dict().copy", "trainer_caco.weights_init", "trainer_caco.weights_init", "print", "apex.parallel.convert_syncbn_model", "apex.parallel.convert_syncbn_model", "apex.parallel.convert_syncbn_model", "trainer_caco.AD_Trainer.G.optim_parameters", "trainer_caco.AD_Trainer.D1.parameters", "trainer_caco.AD_Trainer.D2.parameters", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "amp.initialize", "amp.initialize", "amp.initialize", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "i.split", "model.ms_discriminator.MsImageDis", "model.ms_discriminator.MsImageDis", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "trainer_caco.AD_Trainer.G.state_dict", "trainer_caco.AD_Trainer.G.state_dict", "trainer_caco.AD_Trainer.G.state_dict", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "print", "print", "print", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.get_deeplab_v2", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.get_deeplab_v2", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.get_deeplab_v2", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.weights_init", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.weights_init", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.optim_parameters"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "print", "(", "'trainer_caco'", ")", "\n", "super", "(", "AD_Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fp16", "=", "args", ".", "fp16", "\n", "self", ".", "class_balance", "=", "args", ".", "class_balance", "\n", "self", ".", "often_balance", "=", "args", ".", "often_balance", "\n", "self", ".", "num_classes", "=", "args", ".", "num_classes", "\n", "self", ".", "class_weight", "=", "torch", ".", "FloatTensor", "(", "self", ".", "num_classes", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "+", "1", "\n", "self", ".", "often_weight", "=", "torch", ".", "FloatTensor", "(", "self", ".", "num_classes", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "+", "1", "\n", "self", ".", "multi_gpu", "=", "args", ".", "multi_gpu", "\n", "self", ".", "only_hard_label", "=", "args", ".", "only_hard_label", "\n", "if", "args", ".", "model", "==", "'DeepLab'", ":", "\n", "# self.G = DeeplabMulti(num_classes=args.num_classes, use_se = args.use_se, train_bn = args.train_bn, norm_style = args.norm_style, droprate = args.droprate)", "\n", "            ", "self", ".", "G", "=", "get_deeplab_v2", "(", "num_classes", "=", "self", ".", "num_classes", ",", "multi_level", "=", "True", ")", "\n", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "                ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "args", ".", "restore_from", ")", "\n", "", "else", ":", "\n", "                ", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "\n", "", "new_params", "=", "self", ".", "G", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "# Scale.layer5.conv2d_list.3.weight", "\n", "                ", "i_parts", "=", "i", ".", "split", "(", "'.'", ")", "\n", "# print i_parts", "\n", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "                    ", "if", "i_parts", "[", "1", "]", "!=", "'fc'", "and", "i_parts", "[", "1", "]", "!=", "'layer5'", ":", "\n", "                        ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "print", "(", "'%s is loaded from pre-trained weight.\\n'", "%", "i_parts", "[", "1", ":", "]", ")", "\n", "", "", "else", ":", "\n", "#new_params['.'.join(i_parts[1:])] = saved_state_dict[i]", "\n", "                    ", "if", "i_parts", "[", "0", "]", "==", "'module'", ":", "\n", "                        ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "print", "(", "'%s is loaded from pre-trained weight.\\n'", "%", "i_parts", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "                        ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "0", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "print", "(", "'%s is loaded from pre-trained weight.\\n'", "%", "i_parts", "[", "0", ":", "]", ")", "\n", "", "", "", "", "self", ".", "G", ".", "load_state_dict", "(", "new_params", ")", "\n", "\n", "self", ".", "G_ma", "=", "get_deeplab_v2", "(", "num_classes", "=", "self", ".", "num_classes", ",", "multi_level", "=", "True", ")", "\n", "self", ".", "G_ma", ".", "load_state_dict", "(", "self", ".", "G", ".", "state_dict", "(", ")", ".", "copy", "(", ")", ")", "\n", "self", ".", "G_source", "=", "get_deeplab_v2", "(", "num_classes", "=", "self", ".", "num_classes", ",", "multi_level", "=", "True", ")", "\n", "self", ".", "G_source", ".", "load_state_dict", "(", "self", ".", "G", ".", "state_dict", "(", ")", ".", "copy", "(", ")", ")", "\n", "\n", "self", ".", "D1", "=", "MsImageDis", "(", "input_dim", "=", "args", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "self", ".", "D2", "=", "MsImageDis", "(", "input_dim", "=", "args", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "self", ".", "D1", ".", "apply", "(", "weights_init", "(", "'gaussian'", ")", ")", "\n", "self", ".", "D2", ".", "apply", "(", "weights_init", "(", "'gaussian'", ")", ")", "\n", "\n", "if", "self", ".", "multi_gpu", "and", "args", ".", "sync_bn", ":", "\n", "            ", "print", "(", "\"using apex synced BN\"", ")", "\n", "self", ".", "G", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "self", ".", "G", ")", "\n", "self", ".", "G_ma", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "self", ".", "G_ma", ")", "\n", "self", ".", "G_source", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "self", ".", "G_source", ")", "\n", "\n", "\n", "", "self", ".", "gen_opt", "=", "optim", ".", "SGD", "(", "self", ".", "G", ".", "optim_parameters", "(", "args", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "True", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "self", ".", "dis1_opt", "=", "optim", ".", "Adam", "(", "self", ".", "D1", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_D", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "\n", "self", ".", "dis2_opt", "=", "optim", ".", "Adam", "(", "self", ".", "D2", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_D", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "\n", "self", ".", "seg_loss", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ")", "\n", "self", ".", "kl_loss", "=", "nn", ".", "KLDivLoss", "(", "size_average", "=", "False", ")", "\n", "self", ".", "sm", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "log_sm", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "sm", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "G", "=", "self", ".", "G", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "G_ma", "=", "self", ".", "G_ma", ".", "cuda", "(", ")", "\n", "self", ".", "G_source", "=", "self", ".", "G_source", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "D1", "=", "self", ".", "D1", ".", "cuda", "(", ")", "\n", "self", ".", "D2", "=", "self", ".", "D2", ".", "cuda", "(", ")", "\n", "self", ".", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "args", ".", "crop_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "args", ".", "crop_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "lambda_seg", "=", "args", ".", "lambda_seg", "\n", "self", ".", "max_value", "=", "args", ".", "max_value", "\n", "self", ".", "lambda_me_target", "=", "args", ".", "lambda_me_target", "\n", "self", ".", "lambda_kl_target", "=", "args", ".", "lambda_kl_target", "\n", "self", ".", "lambda_adv_target1", "=", "args", ".", "lambda_adv_target1", "\n", "self", ".", "lambda_adv_target2", "=", "args", ".", "lambda_adv_target2", "\n", "self", ".", "class_w", "=", "torch", ".", "FloatTensor", "(", "self", ".", "num_classes", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "+", "1", "\n", "if", "args", ".", "fp16", ":", "\n", "# Name the FP16_Optimizer instance to replace the existing optimizer", "\n", "            ", "assert", "torch", ".", "backends", ".", "cudnn", ".", "enabled", ",", "\"fp16 mode requires cudnn backend to be enabled.\"", "\n", "self", ".", "G", ",", "self", ".", "gen_opt", "=", "amp", ".", "initialize", "(", "self", ".", "G", ",", "self", ".", "gen_opt", ",", "opt_level", "=", "\"O1\"", ")", "\n", "\n", "self", ".", "D1", ",", "self", ".", "dis1_opt", "=", "amp", ".", "initialize", "(", "self", ".", "D1", ",", "self", ".", "dis1_opt", ",", "opt_level", "=", "\"O1\"", ")", "\n", "self", ".", "D2", ",", "self", ".", "dis2_opt", "=", "amp", ".", "initialize", "(", "self", ".", "D2", ",", "self", ".", "dis2_opt", ",", "opt_level", "=", "\"O1\"", ")", "\n", "\n", "", "self", ".", "queue", "=", "torch", ".", "zeros", "(", "1", ",", "2048", ",", "args", ".", "num_classes", ",", "100", ")", "\n", "self", ".", "PL_queue", "=", "torch", ".", "ones", "(", "1", ",", "args", ".", "num_classes", ",", "100", ",", "dtype", "=", "torch", ".", "int64", ")", "*", "(", "-", "1", ")", "\n", "self", ".", "queue_prob", "=", "torch", ".", "zeros", "(", "1", ",", "args", ".", "num_classes", ",", "args", ".", "num_classes", ",", "100", ")", "\n", "self", ".", "move_momentum", "=", "0.999", "\n", "self", ".", "args_backup", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.AD_Trainer.update_class_criterion": [[161, 178], ["torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "range", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "update_class_criterion", "(", "self", ",", "labels", ")", ":", "\n", "            ", "weight", "=", "torch", ".", "FloatTensor", "(", "self", ".", "num_classes", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "\n", "weight", "+=", "1", "\n", "count", "=", "torch", ".", "FloatTensor", "(", "self", ".", "num_classes", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "\n", "often", "=", "torch", ".", "FloatTensor", "(", "self", ".", "num_classes", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "\n", "often", "+=", "1", "\n", "n", ",", "h", ",", "w", "=", "labels", ".", "shape", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "count", "[", "i", "]", "=", "torch", ".", "sum", "(", "labels", "==", "i", ")", "\n", "if", "count", "[", "i", "]", "<", "64", "*", "64", "*", "n", ":", "#small objective", "\n", "                    ", "weight", "[", "i", "]", "=", "self", ".", "max_value", "\n", "", "", "if", "self", ".", "often_balance", ":", "\n", "                ", "often", "[", "count", "==", "0", "]", "=", "self", ".", "max_value", "\n", "\n", "", "self", ".", "often_weight", "=", "0.9", "*", "self", ".", "often_weight", "+", "0.1", "*", "often", "\n", "self", ".", "class_weight", "=", "weight", "*", "self", ".", "often_weight", "\n", "return", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "self", ".", "class_weight", ",", "ignore_index", "=", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.AD_Trainer.update_label": [[179, 190], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "print", "nn.CrossEntropyLoss.data.cpu().numpy", "numpy.percentile", "trainer_caco.AD_Trainer.seg_loss", "nn.CrossEntropyLoss.data.cpu"], "methods", ["None"], ["", "def", "update_label", "(", "self", ",", "labels", ",", "prediction", ")", ":", "\n", "            ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "self", ".", "class_weight", ",", "ignore_index", "=", "255", ",", "reduction", "=", "'none'", ")", "\n", "#criterion = self.seg_loss", "\n", "loss", "=", "criterion", "(", "prediction", ",", "labels", ")", "\n", "print", "(", "'original loss: %f'", "%", "self", ".", "seg_loss", "(", "prediction", ",", "labels", ")", ")", "\n", "#mm = torch.median(loss)", "\n", "loss_data", "=", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mm", "=", "np", ".", "percentile", "(", "loss_data", "[", ":", "]", ",", "self", ".", "only_hard_label", ")", "\n", "#print(m.data.cpu(), mm)", "\n", "labels", "[", "loss", "<", "mm", "]", "=", "255", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.AD_Trainer.update_cross_entropy": [[191, 196], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "update_cross_entropy", "(", "self", ",", "labels", ",", "pred1", ")", ":", "\n", "            ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "self", ".", "class_weight", ",", "ignore_index", "=", "255", ",", "reduction", "=", "'none'", ")", "\n", "loss", "=", "criterion", "(", "pred1", ",", "labels", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.AD_Trainer.entropy_cal": [[197, 205], ["v.dim", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2"], "methods", ["None"], ["", "def", "entropy_cal", "(", "self", ",", "v", ")", ":", "\n", "        ", "\"\"\"\n            Entropy loss for probabilistic prediction vectors\n            input: batch_size x channels x h x w\n            output: batch_size x 1 x h x w\n        \"\"\"", "\n", "assert", "v", ".", "dim", "(", ")", "==", "4", "\n", "return", "-", "torch", ".", "mul", "(", "v", ",", "torch", ".", "log2", "(", "v", "+", "1e-30", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.AD_Trainer.queue_update": [[206, 240], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "[].unsqueeze", "[].unsqueeze", "PL_queue[].unsqueeze().unsqueeze", "torch.interpolate.clone().type().unsqueeze", "range", "range", "f_src_main[].unsqueeze", "labels[].unsqueeze", "range", "PL_queue[].unsqueeze", "torch.interpolate.clone().type", "[].sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "queue.view", "queue_prob.view", "[].sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.interpolate.clone", "f_src_main.view", "f_src_main[].unsqueeze.view", "PL_queue.squeeze().view", "PL_queue.squeeze().view", "torch.interpolate.squeeze().squeeze().view", "PL_queue.squeeze", "PL_queue.squeeze", "labels[].unsqueeze.squeeze().squeeze().view", "torch.interpolate.squeeze().squeeze", "labels[].unsqueeze.squeeze().squeeze", "torch.interpolate.squeeze", "labels[].unsqueeze.squeeze"], "methods", ["None"], ["", "def", "queue_update", "(", "self", ",", "queue", ",", "PL_queue", ",", "queue_prob", ",", "f_src_main", ",", "labels", ")", ":", "\n", "        ", "labels", "=", "(", "F", ".", "interpolate", "(", "labels", ".", "clone", "(", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "unsqueeze", "(", "1", ")", ",", "size", "=", "f_src_main", ".", "shape", "[", "2", ":", "4", "]", ",", "mode", "=", "'nearest'", ")", ")", "\n", "\n", "if", "f_src_main", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "args_backup", ".", "num_classes", ")", ":", "\n", "                ", "if", "[", "labels", "==", "i", "]", "[", "0", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "queue", "[", "0", ",", ":", ",", "i", ",", "0", "]", "=", "torch", ".", "mean", "(", "f_src_main", ".", "view", "(", "f_src_main", ".", "shape", "[", "0", "]", ",", "f_src_main", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "[", ":", ",", ":", ",", "labels", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ".", "view", "(", "-", "1", ")", "==", "i", "]", ",", "dim", "=", "2", ")", "\n", "queue_prob", "[", "0", ",", ":", ",", "i", ",", "0", "]", "=", "0.0", "\n", "queue_prob", "[", "0", ",", "i", ",", "i", ",", "0", "]", "=", "1.0", "\n", "PL_queue", "[", "0", ",", "i", ",", "0", "]", "=", "i", "\n", "\n", "queue", "[", "0", ",", ":", ",", "i", ",", ":", "]", "=", "torch", ".", "roll", "(", "queue", "[", "0", ",", ":", ",", "i", ",", ":", "]", ",", "-", "1", ",", "1", ")", "\n", "queue_prob", "[", "0", ",", ":", ",", "i", ",", ":", "]", "=", "torch", ".", "roll", "(", "queue_prob", "[", "0", ",", ":", ",", "i", ",", ":", "]", ",", "-", "1", ",", "1", ")", "\n", "PL_queue", "[", "0", ",", "i", ",", ":", "]", "=", "torch", ".", "roll", "(", "PL_queue", "[", "0", ",", "i", ",", ":", "]", ",", "-", "1", ",", "0", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "batch_id", "in", "range", "(", "f_src_main", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "f_src_main_single", "=", "f_src_main", "[", "batch_id", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "\n", "labels_single", "=", "labels", "[", "batch_id", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "args_backup", ".", "num_classes", ")", ":", "\n", "                    ", "if", "[", "labels_single", "==", "i", "]", "[", "0", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                        ", "queue", "[", "0", ",", ":", ",", "i", ",", "0", "]", "=", "torch", ".", "mean", "(", "f_src_main_single", ".", "view", "(", "f_src_main_single", ".", "shape", "[", "0", "]", ",", "f_src_main_single", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "[", ":", ",", ":", ",", "labels_single", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ".", "view", "(", "-", "1", ")", "==", "i", "]", ",", "dim", "=", "2", ")", "\n", "queue_prob", "[", "0", ",", ":", ",", "i", ",", "0", "]", "=", "0.0", "\n", "queue_prob", "[", "0", ",", "i", ",", "i", ",", "0", "]", "=", "1.0", "\n", "PL_queue", "[", "0", ",", "i", ",", "0", "]", "=", "i", "\n", "\n", "queue", "[", "0", ",", ":", ",", "i", ",", ":", "]", "=", "torch", ".", "roll", "(", "queue", "[", "0", ",", ":", ",", "i", ",", ":", "]", ",", "-", "1", ",", "1", ")", "\n", "queue_prob", "[", "0", ",", ":", ",", "i", ",", ":", "]", "=", "torch", ".", "roll", "(", "queue_prob", "[", "0", ",", ":", ",", "i", ",", ":", "]", ",", "-", "1", ",", "1", ")", "\n", "PL_queue", "[", "0", ",", "i", ",", ":", "]", "=", "torch", ".", "roll", "(", "PL_queue", "[", "0", ",", "i", ",", ":", "]", ",", "-", "1", ",", "0", ")", "\n", "\n", "", "", "", "", "queue_train", "=", "queue", ".", "view", "(", "queue", ".", "shape", "[", "0", "]", ",", "queue", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "[", ":", ",", ":", ",", "PL_queue", ".", "squeeze", "(", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "-", "1", "]", ".", "unsqueeze", "(", "3", ")", "\n", "queue_prob_train", "=", "queue_prob", ".", "view", "(", "queue_prob", ".", "shape", "[", "0", "]", ",", "queue_prob", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "[", ":", ",", ":", ",", "PL_queue", ".", "squeeze", "(", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "-", "1", "]", ".", "unsqueeze", "(", "3", ")", "\n", "PL_queue_train", "=", "PL_queue", "[", "PL_queue", "!=", "-", "1", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", "\n", "return", "queue", ",", "PL_queue", ",", "queue_prob", ",", "queue_train", ",", "PL_queue_train", ",", "queue_prob_train", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.AD_Trainer.gen_update": [[241, 331], ["zip", "zip", "trainer_caco.AD_Trainer.gen_opt.zero_grad", "trainer_caco.AD_Trainer.G", "trainer_caco.AD_Trainer.interp", "trainer_caco.AD_Trainer.interp", "trainer_caco.AD_Trainer.update_cross_entropy", "trainer_caco.AD_Trainer.update_cross_entropy", "trainer_caco.CaContrast_cal", "print", "print", "trainer_caco.AD_Trainer.G", "trainer_caco.AD_Trainer.interp_target", "trainer_caco.AD_Trainer.interp_target", "trainer_caco.AD_Trainer.gen_opt.step", "trainer_caco.AD_Trainer.seg_loss", "trainer_caco.AD_Trainer.G.parameters", "trainer_caco.AD_Trainer.G_ma.parameters", "trainer_caco.AD_Trainer.G.buffers", "trainer_caco.AD_Trainer.G_ma.buffers", "buffer_q.data.clone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer_caco.AD_Trainer.G_ma", "trainer_caco.AD_Trainer.queue_update", "trainer_caco.AD_Trainer.update_class_criterion", "label_label_aug1.detach().clone", "PL_queue_train.cuda().detach().clone", "queue_train.cuda().detach().clone", "queue_prob_train.cuda().detach().clone", "trainer_caco.AD_Trainer.D1.module.calc_gen_loss", "trainer_caco.AD_Trainer.D2.module.calc_gen_loss", "trainer_caco.AD_Trainer.D1.calc_gen_loss", "trainer_caco.AD_Trainer.D2.calc_gen_loss", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "print", "loss.backward", "print", "print", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer_caco.AD_Trainer.sm", "amp.scale_loss", "scaled_loss.backward", "param_k.data.clone", "param_q.data.clone", "numpy.unique", "[].sum", "label_label_aug1.detach", "PL_queue_train.cuda().detach", "queue_train.cuda().detach", "queue_prob_train.cuda().detach", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "trainer_caco.AD_Trainer.kl_loss", "trainer_caco.AD_Trainer.kl_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "trainer_caco.AD_Trainer.log_sm", "trainer_caco.AD_Trainer.log_sm", "PL_queue_train.cuda", "queue_train.cuda", "queue_prob_train.cuda", "trainer_caco.AD_Trainer.sm", "trainer_caco.AD_Trainer.sm", "trainer_caco.AD_Trainer.log_sm"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.AD_Trainer.update_cross_entropy", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.AD_Trainer.update_cross_entropy", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.CaContrast_cal", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.queue_update", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.AD_Trainer.update_class_criterion", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_gen_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_gen_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_gen_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_gen_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward"], ["", "def", "gen_update", "(", "self", ",", "images", ",", "images_t", ",", "labels", ",", "labels_t", ",", "i_iter", ",", "image_aug1", ",", "label_label_aug1", ")", ":", "\n", "            ", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "G", ".", "parameters", "(", ")", ",", "self", ".", "G_ma", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "param_k", ".", "data", "=", "param_k", ".", "data", ".", "clone", "(", ")", "*", "self", ".", "move_momentum", "+", "param_q", ".", "data", ".", "clone", "(", ")", "*", "(", "1.", "-", "self", ".", "move_momentum", ")", "\n", "", "for", "buffer_q", ",", "buffer_k", "in", "zip", "(", "self", ".", "G", ".", "buffers", "(", ")", ",", "self", ".", "G_ma", ".", "buffers", "(", ")", ")", ":", "\n", "                ", "buffer_k", ".", "data", "=", "buffer_q", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "self", ".", "gen_opt", ".", "zero_grad", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "                ", "pred1_ma", ",", "pred2_ma", ",", "_", ",", "feature_2_ma", "=", "self", ".", "G_ma", "(", "images", ")", "\n", "self", ".", "queue", ",", "self", ".", "PL_queue", ",", "self", ".", "queue_prob", ",", "queue_train", ",", "PL_queue_train", ",", "queue_prob_train", "=", "self", ".", "queue_update", "(", "self", ".", "queue", ",", "self", ".", "PL_queue", ",", "self", ".", "queue_prob", ",", "feature_2_ma", ",", "label_label_aug1", ")", "\n", "\n", "if", "i_iter", "%", "100", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "                    ", "print", "(", "np", ".", "unique", "(", "PL_queue_train", ")", ")", "\n", "print", "(", "[", "PL_queue_train", "!=", "-", "1", "]", "[", "0", "]", ".", "sum", "(", ")", ")", "\n", "\n", "# pred1, pred2 = self.G(images)", "\n", "", "", "pred1", ",", "pred2", ",", "_", ",", "feature_2", "=", "self", ".", "G", "(", "image_aug1", ")", "\n", "pred1", "=", "self", ".", "interp", "(", "pred1", ")", "\n", "pred2", "=", "self", ".", "interp", "(", "pred2", ")", "\n", "\n", "if", "self", ".", "class_balance", ":", "\n", "                ", "self", ".", "seg_loss", "=", "self", ".", "update_class_criterion", "(", "label_label_aug1", ")", "\n", "\n", "", "loss_seg1", "=", "self", ".", "update_cross_entropy", "(", "label_label_aug1", ",", "pred1", ")", "\n", "loss_seg2", "=", "self", ".", "update_cross_entropy", "(", "label_label_aug1", ",", "pred2", ")", "\n", "loss_fea1", "=", "CaContrast_cal", "(", "label_label_aug1", ".", "detach", "(", ")", ".", "clone", "(", ")", ",", "feature_2", ",", "\n", "PL_queue_train", ".", "cuda", "(", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", ",", "queue_train", ".", "cuda", "(", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", ",", "\n", "queue_prob_train", ".", "cuda", "(", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", ",", "self", ".", "args_backup", ")", "\n", "print", "(", "loss_fea1", ")", "\n", "print", "(", "'update caco------------------------------------------------------------'", ")", "\n", "loss", "=", "loss_seg2", "+", "self", ".", "lambda_seg", "*", "loss_seg1", "+", "self", ".", "lambda_seg", "*", "loss_fea1", "\n", "\n", "pred_target1", ",", "pred_target2", ",", "_", ",", "_", "=", "self", ".", "G", "(", "images_t", ")", "\n", "pred_target1", "=", "self", ".", "interp_target", "(", "pred_target1", ")", "\n", "pred_target2", "=", "self", ".", "interp_target", "(", "pred_target2", ")", "\n", "\n", "if", "self", ".", "multi_gpu", ":", "\n", "#if self.lambda_adv_target1 > 0 and self.lambda_adv_target2 > 0:", "\n", "                ", "loss_adv_target1", "=", "self", ".", "D1", ".", "module", ".", "calc_gen_loss", "(", "self", ".", "D1", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target1", ",", "dim", "=", "1", ")", ")", "\n", "loss_adv_target2", "=", "self", ".", "D2", ".", "module", ".", "calc_gen_loss", "(", "self", ".", "D2", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target2", ",", "dim", "=", "1", ")", ")", "\n", "#else:", "\n", "#    print('skip the discriminator')", "\n", "#    loss_adv_target1, loss_adv_target2 = 0, 0 ", "\n", "", "else", ":", "\n", "#if self.lambda_adv_target1 > 0 and self.lambda_adv_target2 > 0:", "\n", "                ", "loss_adv_target1", "=", "self", ".", "D1", ".", "calc_gen_loss", "(", "self", ".", "D1", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target1", ",", "dim", "=", "1", ")", ")", "\n", "loss_adv_target2", "=", "self", ".", "D2", ".", "calc_gen_loss", "(", "self", ".", "D2", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target2", ",", "dim", "=", "1", ")", ")", "\n", "#else:", "\n", "#loss_adv_target1 = 0.0 #torch.tensor(0).cuda() ", "\n", "#loss_adv_target2 = 0.0 #torch.tensor(0).cuda()", "\n", "\n", "", "loss", "+=", "self", ".", "lambda_adv_target1", "*", "loss_adv_target1", "+", "self", ".", "lambda_adv_target2", "*", "loss_adv_target2", "\n", "\n", "if", "i_iter", "<", "15000", ":", "\n", "                ", "self", ".", "lambda_kl_target_copy", "=", "0", "\n", "self", ".", "lambda_me_target_copy", "=", "0", "\n", "", "else", ":", "\n", "                ", "self", ".", "lambda_kl_target_copy", "=", "self", ".", "lambda_kl_target", "\n", "self", ".", "lambda_me_target_copy", "=", "self", ".", "lambda_me_target", "\n", "\n", "", "loss_me", "=", "0.0", "\n", "if", "self", ".", "lambda_me_target_copy", ">", "0", ":", "\n", "                ", "confidence_map", "=", "torch", ".", "sum", "(", "self", ".", "sm", "(", "0.5", "*", "pred_target1", "+", "pred_target2", ")", "**", "2", ",", "1", ")", ".", "detach", "(", ")", "\n", "loss_me", "=", "-", "torch", ".", "mean", "(", "confidence_map", "*", "torch", ".", "sum", "(", "self", ".", "sm", "(", "0.5", "*", "pred_target1", "+", "pred_target2", ")", "*", "self", ".", "log_sm", "(", "0.5", "*", "pred_target1", "+", "pred_target2", ")", ",", "1", ")", ")", "\n", "loss", "+=", "self", ".", "lambda_me_target", "*", "loss_me", "\n", "\n", "", "loss_kl", "=", "0.0", "\n", "if", "self", ".", "lambda_kl_target_copy", ">", "0", ":", "\n", "                ", "n", ",", "c", ",", "h", ",", "w", "=", "pred_target1", ".", "shape", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#pred_target1_flip, pred_target2_flip = self.G(fliplr(images_t))", "\n", "#pred_target1_flip = self.interp_target(pred_target1_flip)", "\n", "#pred_target2_flip = self.interp_target(pred_target2_flip)", "\n", "                    ", "mean_pred", "=", "self", ".", "sm", "(", "0.5", "*", "pred_target1", "+", "pred_target2", ")", "#+ self.sm(fliplr(0.5*pred_target1_flip + pred_target2_flip)) ) /2", "\n", "", "loss_kl", "=", "(", "self", ".", "kl_loss", "(", "self", ".", "log_sm", "(", "pred_target2", ")", ",", "mean_pred", ")", "+", "self", ".", "kl_loss", "(", "self", ".", "log_sm", "(", "pred_target1", ")", ",", "mean_pred", ")", ")", "/", "(", "n", "*", "h", "*", "w", ")", "\n", "#loss_kl = (self.kl_loss(self.log_sm(pred_target2) , self.sm(pred_target1) ) ) / (n*h*w) + (self.kl_loss(self.log_sm(pred_target1) , self.sm(pred_target2)) ) / (n*h*w)", "\n", "print", "(", "loss_kl", ")", "\n", "loss", "+=", "self", ".", "lambda_kl_target", "*", "loss_kl", "\n", "\n", "", "if", "self", ".", "fp16", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "self", ".", "gen_opt", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "", "self", ".", "gen_opt", ".", "step", "(", ")", "\n", "\n", "val_loss", "=", "self", ".", "seg_loss", "(", "pred_target2", ",", "labels_t", ")", "\n", "\n", "return", "loss_seg1", ",", "loss_seg2", ",", "loss_adv_target1", ",", "loss_adv_target2", ",", "loss_me", ",", "loss_kl", ",", "pred1", ",", "pred2", ",", "pred_target1", ",", "pred_target2", ",", "val_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.AD_Trainer.dis_update": [[332, 357], ["trainer_caco.AD_Trainer.dis1_opt.zero_grad", "trainer_caco.AD_Trainer.dis2_opt.zero_grad", "pred1.detach.detach.detach", "pred2.detach.detach.detach", "pred_target1.detach.detach.detach", "pred_target2.detach.detach.detach", "trainer_caco.AD_Trainer.dis1_opt.step", "trainer_caco.AD_Trainer.dis2_opt.step", "trainer_caco.AD_Trainer.D1.module.calc_dis_loss", "trainer_caco.AD_Trainer.D2.module.calc_dis_loss", "trainer_caco.AD_Trainer.D1.calc_dis_loss", "trainer_caco.AD_Trainer.D2.calc_dis_loss", "loss.backward", "amp.scale_loss", "scaled_loss.backward", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_dis_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_dis_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_dis_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_dis_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward"], ["", "def", "dis_update", "(", "self", ",", "pred1", ",", "pred2", ",", "pred_target1", ",", "pred_target2", ")", ":", "\n", "            ", "self", ".", "dis1_opt", ".", "zero_grad", "(", ")", "\n", "self", ".", "dis2_opt", ".", "zero_grad", "(", ")", "\n", "pred1", "=", "pred1", ".", "detach", "(", ")", "\n", "pred2", "=", "pred2", ".", "detach", "(", ")", "\n", "pred_target1", "=", "pred_target1", ".", "detach", "(", ")", "\n", "pred_target2", "=", "pred_target2", ".", "detach", "(", ")", "\n", "\n", "if", "self", ".", "multi_gpu", ":", "\n", "                ", "loss_D1", ",", "reg1", "=", "self", ".", "D1", ".", "module", ".", "calc_dis_loss", "(", "self", ".", "D1", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target1", ",", "dim", "=", "1", ")", ",", "input_real", "=", "F", ".", "softmax", "(", "0.5", "*", "pred1", "+", "pred2", ",", "dim", "=", "1", ")", ")", "\n", "loss_D2", ",", "reg2", "=", "self", ".", "D2", ".", "module", ".", "calc_dis_loss", "(", "self", ".", "D2", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target2", ",", "dim", "=", "1", ")", ",", "input_real", "=", "F", ".", "softmax", "(", "0.5", "*", "pred1", "+", "pred2", ",", "dim", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_D1", ",", "reg1", "=", "self", ".", "D1", ".", "calc_dis_loss", "(", "self", ".", "D1", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target1", ",", "dim", "=", "1", ")", ",", "input_real", "=", "F", ".", "softmax", "(", "0.5", "*", "pred1", "+", "pred2", ",", "dim", "=", "1", ")", ")", "\n", "loss_D2", ",", "reg2", "=", "self", ".", "D2", ".", "calc_dis_loss", "(", "self", ".", "D2", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target2", ",", "dim", "=", "1", ")", ",", "input_real", "=", "F", ".", "softmax", "(", "0.5", "*", "pred1", "+", "pred2", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "loss", "=", "loss_D1", "+", "loss_D2", "\n", "if", "self", ".", "fp16", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "[", "self", ".", "dis1_opt", ",", "self", ".", "dis2_opt", "]", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "\n", "", "self", ".", "dis1_opt", ".", "step", "(", ")", "\n", "self", ".", "dis2_opt", ".", "step", "(", ")", "\n", "return", "loss_D1", ",", "loss_D2", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.weights_init": [[25, 46], ["hasattr", "torch.normal_", "hasattr", "torch.constant_", "classname.find", "classname.find", "torch.xavier_normal_", "torch.kaiming_normal_", "math.sqrt", "torch.orthogonal_", "math.sqrt"], "function", ["None"], ["", "def", "weights_init", "(", "init_type", "=", "'gaussian'", ")", ":", "\n", "    ", "def", "init_fun", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "(", "classname", ".", "find", "(", "'Conv'", ")", "==", "0", "or", "classname", ".", "find", "(", "'Linear'", ")", "==", "0", ")", "and", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "# print m.__class__.__name__", "\n", "            ", "if", "init_type", "==", "'gaussian'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "", "elif", "init_type", "==", "'default'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "assert", "0", ",", "\"Unsupported initialization: {}\"", ".", "format", "(", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "", "return", "init_fun", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.train_bn": [[47, 51], ["classname.find", "m.train"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.train"], ["", "def", "train_bn", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.inplace_relu": [[52, 56], ["classname.find"], "function", ["None"], ["", "", "def", "inplace_relu", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'ReLU'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "inplace", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.fliplr": [[57, 62], ["torch.arange().long().cuda", "torch.arange().long().cuda", "torch.arange().long().cuda", "torch.arange().long().cuda", "torch.arange().long().cuda", "img.index_select", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "img.size"], "function", ["None"], ["", "", "def", "fliplr", "(", "img", ")", ":", "\n", "    ", "'''flip horizontal'''", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "img", ".", "size", "(", "3", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "# N x C x H x W", "\n", "img_flip", "=", "img", ".", "index_select", "(", "3", ",", "inv_idx", ")", "\n", "return", "img_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.CaContrast_cal": [[359, 381], ["torch.normalize", "feature.view().transpose().unsqueeze.transpose().unsqueeze", "CaContrast", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.interpolate().view", "labels.clone().type().view.clone().type().view", "trainer_caco.entropy_cal", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "reli.view.view", "feature.view().transpose().unsqueeze.view().transpose().unsqueeze", "feature.view().transpose().unsqueeze.contiguous().view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.normalize", "feature_ma.transpose().unsqueeze.transpose().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.log2", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "label_label_aug1.view.view", "feature.view().transpose().unsqueeze.transpose", "feature_ma.transpose().unsqueeze.contiguous().view", "torch.interpolate", "labels.clone().type().view.clone().type", "entropy_cal.clone().view", "feature.view().transpose().unsqueeze.view().transpose", "feature.view().transpose().unsqueeze.contiguous", "feature_ma.transpose().unsqueeze.transpose", "label_label_aug1.view.clone().type().unsqueeze", "feature_ma.transpose().unsqueeze.contiguous", "labels.clone().type().view.clone", "entropy_cal.clone", "feature.view().transpose().unsqueeze.view", "label_label_aug1.view.clone().type", "label_label_aug1.view.clone"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.entropy_cal"], ["", "", "def", "CaContrast_cal", "(", "label_label_aug1", ",", "feature", ",", "labels", ",", "feature_ma", ",", "pred1_ma", ",", "cfg", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "label_label_aug1", "=", "(", "F", ".", "interpolate", "(", "label_label_aug1", ".", "clone", "(", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "unsqueeze", "(", "1", ")", ",", "size", "=", "feature", ".", "shape", "[", "2", ":", "4", "]", ",", "mode", "=", "'nearest'", ")", ")", ".", "view", "(", "label_label_aug1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "labels", "=", "(", "labels", ".", "clone", "(", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "ent_ma", "=", "entropy_cal", "(", "pred1_ma", ")", "\n", "ent_ma", "=", "torch", ".", "sum", "(", "(", "ent_ma", ".", "clone", "(", ")", ")", ".", "view", "(", "ent_ma", ".", "shape", "[", "0", "]", ",", "ent_ma", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "/", "np", ".", "log2", "(", "cfg", ".", "num_classes", ")", "\n", "reli", "=", "torch", ".", "clamp", "(", "(", "1", "-", "ent_ma", "+", "0.1", ")", ",", "min", "=", "1.0", "-", "0.1", ",", "max", "=", "1.0", "+", "0.1", ")", "\n", "reli", "=", "reli", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "", "if", "feature", ".", "shape", "[", "0", "]", "!=", "1", ":", "\n", "        ", "feature", "=", "feature", ".", "view", "(", "feature", ".", "shape", "[", "0", "]", ",", "feature", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "label_label_aug1", "=", "label_label_aug1", ".", "view", "(", "feature", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "", "", "feature", "=", "F", ".", "normalize", "(", "feature", ".", "contiguous", "(", ")", ".", "view", "(", "feature", ".", "shape", "[", "0", "]", ",", "feature", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "feature", "=", "feature", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "feature_ma", "=", "F", ".", "normalize", "(", "feature_ma", ".", "contiguous", "(", ")", ".", "view", "(", "feature_ma", ".", "shape", "[", "0", "]", ",", "feature_ma", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "feature_ma", "=", "feature_ma", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "", "loss", "=", "CaContrast", "(", "features", "=", "feature", ",", "labels", "=", "label_label_aug1", ",", "features_2", "=", "feature_ma", ",", "labels_2", "=", "labels", ",", "reliability", "=", "reli", ",", "cfg", "=", "cfg", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_caco.entropy_cal": [[383, 391], ["v.dim", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2"], "function", ["None"], ["", "def", "entropy_cal", "(", "v", ")", ":", "\n", "    ", "\"\"\"\n        Entropy loss for probabilistic prediction vectors\n        input: batch_size x channels x h x w\n        output: batch_size x 1 x h x w\n    \"\"\"", "\n", "assert", "v", ".", "dim", "(", ")", "==", "4", "\n", "return", "-", "torch", ".", "mul", "(", "v", ",", "torch", ".", "log2", "(", "v", "+", "1e-30", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_caco.colorize_mask": [[54, 60], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_caco.get_arguments": [[61, 89], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"Model Choice (DeeplabMulti/DeeplabVGG/Oracle).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the Cityscapes dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batchsize\"", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose evaluation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "type", "=", "str", ",", "default", "=", "SAVE_PATH", ",", "\n", "help", "=", "\"Path to save result.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_caco.save": [[90, 98], ["evaluate_cityscapes_advent_caco.colorize_mask", "PIL.Image.fromarray", "Image.fromarray.save", "colorize_mask.save", "name.split"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.colorize_mask", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save"], ["", "def", "save", "(", "output_name", ")", ":", "\n", "    ", "output", ",", "name", "=", "output_name", "\n", "output_col", "=", "colorize_mask", "(", "output", ")", "\n", "output", "=", "Image", ".", "fromarray", "(", "output", ")", "\n", "\n", "output", ".", "save", "(", "'%s'", "%", "(", "name", ")", ")", "\n", "output_col", ".", "save", "(", "'%s_color.png'", "%", "(", "name", ".", "split", "(", "'.jpg'", ")", "[", "0", "]", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_caco.save_heatmap": [[99, 107], ["matplotlib.figure", "matplotlib.axis", "matplotlib.imshow", "plt.figure.savefig", "name.split"], "function", ["None"], ["", "def", "save_heatmap", "(", "output_name", ")", ":", "\n", "    ", "output", ",", "name", "=", "output_name", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "heatmap", "=", "plt", ".", "imshow", "(", "output", ",", "cmap", "=", "'viridis'", ")", "\n", "#fig.colorbar(heatmap)", "\n", "fig", ".", "savefig", "(", "'%s_heatmap.png'", "%", "(", "name", ".", "split", "(", "'.jpg'", ")", "[", "0", "]", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_caco.save_scoremap": [[108, 116], ["matplotlib.figure", "matplotlib.axis", "matplotlib.imshow", "plt.figure.savefig", "name.split"], "function", ["None"], ["", "def", "save_scoremap", "(", "output_name", ")", ":", "\n", "    ", "output", ",", "name", "=", "output_name", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "heatmap", "=", "plt", ".", "imshow", "(", "output", ",", "cmap", "=", "'viridis'", ")", "\n", "#fig.colorbar(heatmap)", "\n", "fig", ".", "savefig", "(", "'%s_scoremap.png'", "%", "(", "name", ".", "split", "(", "'.jpg'", ")", "[", "0", "]", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_caco.main": [[117, 255], ["evaluate_cityscapes_advent_caco.get_arguments", "os.path.join", "print", "print", "os.path.basename", "model.deeplab_vgg.DeeplabVGG.eval", "model.deeplab_vgg.DeeplabVGG.cuda", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.KLDivLoss", "enumerate", "os.path.dirname", "open", "yaml.load", "os.path.dirname", "os.path.exists", "os.makedirs", "model.deeplab_advent_no_p.get_deeplab_v2", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "torch.load", "model.deeplab_vgg.DeeplabVGG.load_state_dict", "dataset.cityscapes_dataset.cityscapesDataSet", "dataset.cityscapes_dataset.cityscapesDataSet", "dataset.cityscapes_dataset.cityscapesDataSet", "packaging.version.parse", "packaging.version.parse", "torch.Upsample", "torch.Upsample", "zip", "image.cuda", "image2.cuda", "print", "interp().cpu().data.numpy.transpose", "numpy.asarray", "numpy.asarray", "range", "model.deeplab.Res_Deeplab", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "model.deeplab_vgg.DeeplabVGG.load_state_dict", "numpy.max", "numpy.argmax", "output_iterator.append", "heatmap_iterator.append", "scoremap_iterator.append", "multiprocessing.Pool", "p.map", "p.map", "p.map", "model.deeplab_vgg.DeeplabVGG", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "interp().cpu().data.numpy.cpu().data.numpy", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "heatmap_batch.cpu().data.numpy.cpu().data.numpy", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.cpu().data.numpy", "name[].split", "zip", "zip", "zip", "round", "round", "round", "round", "round", "round", "round", "round", "torch.nn.Softmax.", "utils.tool.fliplr", "utils.tool.fliplr", "utils.tool.fliplr", "torch.nn.Softmax.", "torch.nn.Softmax.", "utils.tool.fliplr", "utils.tool.fliplr", "utils.tool.fliplr", "torch.nn.Softmax.", "nn.KLDivLoss.", "torch.autograd.Variable().cuda", "numpy.max", "torch.nn.LogSoftmax.", "torch.nn.Softmax.", "numpy.max", "interp().cpu().data.numpy.cpu", "heatmap_batch.cpu().data.numpy.cpu", "torch.autograd.Variable", "nn.Upsample.cpu", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.scripts.train_caco.get_arguments", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.get_deeplab_v2", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.Res_Deeplab", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "args", "=", "get_arguments", "(", ")", "\n", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "restore_from", ")", ",", "'opts.yaml'", ")", "\n", "with", "open", "(", "config_path", ",", "'r'", ")", "as", "stream", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "stream", ")", "\n", "\n", "", "args", ".", "model", "=", "config", "[", "'model'", "]", "\n", "print", "(", "'ModelType:%s'", "%", "args", ".", "model", ")", "\n", "print", "(", "'NormType:%s'", "%", "config", "[", "'norm_style'", "]", ")", "\n", "gpu0", "=", "args", ".", "gpu", "\n", "batchsize", "=", "args", ".", "batchsize", "\n", "\n", "model_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "restore_from", ")", ")", "\n", "args", ".", "save", "+=", "model_name", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "'DeepLab'", ":", "\n", "# model = DeeplabMulti(num_classes=args.num_classes, use_se = config['use_se'], train_bn = False, norm_style = config['norm_style'])", "\n", "        ", "model", "=", "get_deeplab_v2", "(", "num_classes", "=", "19", ",", "multi_level", "=", "True", ")", "\n", "", "elif", "args", ".", "model", "==", "'Oracle'", ":", "\n", "        ", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "==", "RESTORE_FROM", ":", "\n", "            ", "args", ".", "restore_from", "=", "RESTORE_FROM_ORC", "\n", "", "", "elif", "args", ".", "model", "==", "'DeeplabVGG'", ":", "\n", "        ", "model", "=", "DeeplabVGG", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "==", "RESTORE_FROM", ":", "\n", "            ", "args", ".", "restore_from", "=", "RESTORE_FROM_VGG", "\n", "\n", "", "", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "        ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "args", ".", "restore_from", ")", "\n", "", "else", ":", "\n", "        ", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "\n", "", "try", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "", "except", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "#model = torch.nn.DataParallel(model)", "\n", "", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "gpu0", ")", "\n", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "512", ",", "1024", ")", ",", "resize_size", "=", "(", "1024", ",", "512", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "scale", "=", "1.20", "\n", "testloader2", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "round", "(", "512", "*", "scale", ")", ",", "round", "(", "1024", "*", "scale", ")", ")", ",", "resize_size", "=", "(", "round", "(", "1024", "*", "scale", ")", ",", "round", "(", "512", "*", "scale", ")", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "scale", "=", "0.9", "\n", "testloader3", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "round", "(", "512", "*", "scale", ")", ",", "round", "(", "1024", "*", "scale", ")", ")", ",", "resize_size", "=", "(", "round", "(", "1024", "*", "scale", ")", ",", "round", "(", "512", "*", "scale", ")", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "\n", "if", "version", ".", "parse", "(", "torch", ".", "__version__", ")", ">=", "version", ".", "parse", "(", "'0.4.0'", ")", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "sm", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "log_sm", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "kl_distance", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'none'", ")", "\n", "\n", "for", "index", ",", "img_data", "in", "enumerate", "(", "zip", "(", "testloader", ",", "testloader2", ",", "testloader3", ")", ")", ":", "\n", "        ", "batch", ",", "batch2", ",", "batch3", "=", "img_data", "\n", "image", ",", "_", ",", "_", ",", "name", "=", "batch", "\n", "image2", ",", "_", ",", "_", ",", "name2", "=", "batch2", "\n", "# image3, _, _, name3 = batch3", "\n", "\n", "inputs", "=", "image", ".", "cuda", "(", ")", "\n", "inputs2", "=", "image2", ".", "cuda", "(", ")", "\n", "# inputs3 = image3.cuda()", "\n", "print", "(", "'\\r>>>>Extracting feature...%03d/%03d'", "%", "(", "index", "*", "batchsize", ",", "NUM_STEPS", ")", ",", "end", "=", "''", ")", "\n", "if", "args", ".", "model", "==", "'DeepLab'", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output1", ",", "output2", "=", "model", "(", "inputs", ")", "\n", "output_batch", "=", "interp", "(", "sm", "(", "0.0001", "*", "output1", "+", "output2", ")", ")", "\n", "heatmap_output1", ",", "heatmap_output2", "=", "output1", ",", "output2", "\n", "#output_batch = interp(sm(output1))", "\n", "#output_batch = interp(sm(output2))", "\n", "output1", ",", "output2", "=", "model", "(", "fliplr", "(", "inputs", ")", ")", "\n", "output1", ",", "output2", "=", "fliplr", "(", "output1", ")", ",", "fliplr", "(", "output2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.0001", "*", "output1", "+", "output2", ")", ")", "\n", "heatmap_output1", ",", "heatmap_output2", "=", "heatmap_output1", "+", "output1", ",", "heatmap_output2", "+", "output2", "\n", "#output_batch += interp(sm(output1))", "\n", "#output_batch += interp(sm(output2))", "\n", "del", "output1", ",", "output2", ",", "inputs", "\n", "\n", "output1", ",", "output2", "=", "model", "(", "inputs2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.0001", "*", "output1", "+", "output2", ")", ")", "\n", "#output_batch += interp(sm(output1))", "\n", "#output_batch += interp(sm(output2))", "\n", "output1", ",", "output2", "=", "model", "(", "fliplr", "(", "inputs2", ")", ")", "\n", "output1", ",", "output2", "=", "fliplr", "(", "output1", ")", ",", "fliplr", "(", "output2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.0001", "*", "output1", "+", "output2", ")", ")", "\n", "#output_batch += interp(sm(output1))", "\n", "#output_batch += interp(sm(output2))", "\n", "del", "output1", ",", "output2", ",", "inputs2", "\n", "output_batch", "=", "output_batch", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "heatmap_batch", "=", "torch", ".", "sum", "(", "kl_distance", "(", "log_sm", "(", "heatmap_output1", ")", ",", "sm", "(", "heatmap_output2", ")", ")", ",", "dim", "=", "1", ")", "\n", "heatmap_batch", "=", "torch", ".", "log", "(", "1", "+", "10", "*", "heatmap_batch", ")", "# for visualization", "\n", "heatmap_batch", "=", "heatmap_batch", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "# output1, output2 = model(inputs3)", "\n", "# output_batch += interp(sm(0.0001 * output1 + output2)).cpu().data.numpy()", "\n", "# output1, output2 = model(fliplr(inputs3))", "\n", "# output1, output2 = fliplr(output1), fliplr(output2)", "\n", "# output_batch += interp(sm(0.0001 * output1 + output2)).cpu().data.numpy()", "\n", "# del output1, output2, inputs3", "\n", "", "", "elif", "args", ".", "model", "==", "'DeeplabVGG'", "or", "args", ".", "model", "==", "'Oracle'", ":", "\n", "            ", "output_batch", "=", "model", "(", "Variable", "(", "image", ")", ".", "cuda", "(", ")", ")", "\n", "output_batch", "=", "interp", "(", "output_batch", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "output_batch", "=", "output_batch", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "scoremap_batch", "=", "np", ".", "asarray", "(", "np", ".", "max", "(", "output_batch", ",", "axis", "=", "3", ")", ")", "\n", "output_batch", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output_batch", ",", "axis", "=", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "output_iterator", "=", "[", "]", "\n", "heatmap_iterator", "=", "[", "]", "\n", "scoremap_iterator", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "output_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "output_iterator", ".", "append", "(", "output_batch", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "heatmap_iterator", ".", "append", "(", "heatmap_batch", "[", "i", ",", ":", ",", ":", "]", "/", "np", ".", "max", "(", "heatmap_batch", "[", "i", ",", ":", ",", ":", "]", ")", ")", "\n", "scoremap_iterator", ".", "append", "(", "1", "-", "scoremap_batch", "[", "i", ",", ":", ",", ":", "]", "/", "np", ".", "max", "(", "scoremap_batch", "[", "i", ",", ":", ",", ":", "]", ")", ")", "\n", "name_tmp", "=", "name", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "name", "[", "i", "]", "=", "'%s/%s'", "%", "(", "args", ".", "save", ",", "name_tmp", ")", "\n", "", "with", "Pool", "(", "4", ")", "as", "p", ":", "\n", "            ", "p", ".", "map", "(", "save", ",", "zip", "(", "output_iterator", ",", "name", ")", ")", "\n", "p", ".", "map", "(", "save_heatmap", ",", "zip", "(", "heatmap_iterator", ",", "name", ")", ")", "\n", "p", ".", "map", "(", "save_scoremap", ",", "zip", "(", "scoremap_iterator", ",", "name", ")", ")", "\n", "\n", "", "del", "output_batch", "\n", "\n", "\n", "", "return", "args", ".", "save", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.AD_Trainer.__init__": [[60, 135], ["torch.Module.__init__", "trainer_base.AD_Trainer.G.load_state_dict", "model.ms_discriminator.MsImageDis().cuda", "model.ms_discriminator.MsImageDis().cuda", "trainer_base.AD_Trainer.D1.apply", "trainer_base.AD_Trainer.D2.apply", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "trainer_base.AD_Trainer.G.cuda", "trainer_base.AD_Trainer.D1.cuda", "trainer_base.AD_Trainer.D2.cuda", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "model.deeplab_advent.get_deeplab_v2", "trainer_base.AD_Trainer.G.state_dict().copy", "trainer_base.weights_init", "trainer_base.weights_init", "print", "apex.parallel.convert_syncbn_model", "trainer_base.AD_Trainer.G.optim_parameters", "trainer_base.AD_Trainer.D1.parameters", "trainer_base.AD_Trainer.D2.parameters", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "amp.initialize", "amp.initialize", "amp.initialize", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "i.split", "model.ms_discriminator.MsImageDis", "model.ms_discriminator.MsImageDis", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "trainer_base.AD_Trainer.G.state_dict", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "print", "print", "print", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.get_deeplab_v2", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.weights_init", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.weights_init", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.optim_parameters"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "AD_Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fp16", "=", "args", ".", "fp16", "\n", "self", ".", "class_balance", "=", "args", ".", "class_balance", "\n", "self", ".", "often_balance", "=", "args", ".", "often_balance", "\n", "self", ".", "num_classes", "=", "args", ".", "num_classes", "\n", "self", ".", "class_weight", "=", "torch", ".", "FloatTensor", "(", "self", ".", "num_classes", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "+", "1", "\n", "self", ".", "often_weight", "=", "torch", ".", "FloatTensor", "(", "self", ".", "num_classes", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "+", "1", "\n", "self", ".", "multi_gpu", "=", "args", ".", "multi_gpu", "\n", "self", ".", "only_hard_label", "=", "args", ".", "only_hard_label", "\n", "self", ".", "threshold_t", "=", "20", "\n", "if", "args", ".", "model", "==", "'DeepLab'", ":", "\n", "# self.G = DeeplabMulti(num_classes=args.num_classes, use_se = args.use_se, train_bn = args.train_bn, norm_style = args.norm_style, droprate = args.droprate)", "\n", "            ", "self", ".", "G", "=", "get_deeplab_v2", "(", "num_classes", "=", "19", ",", "multi_level", "=", "True", ")", "\n", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "                ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "args", ".", "restore_from", ")", "\n", "", "else", ":", "\n", "                ", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "\n", "", "new_params", "=", "self", ".", "G", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "# Scale.layer5.conv2d_list.3.weight", "\n", "                ", "i_parts", "=", "i", ".", "split", "(", "'.'", ")", "\n", "# print i_parts", "\n", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "                    ", "if", "i_parts", "[", "1", "]", "!=", "'fc'", "and", "i_parts", "[", "1", "]", "!=", "'layer5'", ":", "\n", "                        ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "print", "(", "'%s is loaded from pre-trained weight.\\n'", "%", "i_parts", "[", "1", ":", "]", ")", "\n", "", "", "else", ":", "\n", "#new_params['.'.join(i_parts[1:])] = saved_state_dict[i]", "\n", "                    ", "if", "i_parts", "[", "0", "]", "==", "'module'", ":", "\n", "                        ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "print", "(", "'%s is loaded from pre-trained weight.\\n'", "%", "i_parts", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "                        ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "0", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "print", "(", "'%s is loaded from pre-trained weight.\\n'", "%", "i_parts", "[", "0", ":", "]", ")", "\n", "", "", "", "", "self", ".", "G", ".", "load_state_dict", "(", "new_params", ")", "\n", "\n", "self", ".", "D1", "=", "MsImageDis", "(", "input_dim", "=", "args", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "self", ".", "D2", "=", "MsImageDis", "(", "input_dim", "=", "args", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "self", ".", "D1", ".", "apply", "(", "weights_init", "(", "'gaussian'", ")", ")", "\n", "self", ".", "D2", ".", "apply", "(", "weights_init", "(", "'gaussian'", ")", ")", "\n", "\n", "if", "self", ".", "multi_gpu", "and", "args", ".", "sync_bn", ":", "\n", "            ", "print", "(", "\"using apex synced BN\"", ")", "\n", "self", ".", "G", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "self", ".", "G", ")", "\n", "\n", "", "self", ".", "gen_opt", "=", "optim", ".", "SGD", "(", "self", ".", "G", ".", "optim_parameters", "(", "args", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "True", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "self", ".", "dis1_opt", "=", "optim", ".", "Adam", "(", "self", ".", "D1", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_D", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "\n", "self", ".", "dis2_opt", "=", "optim", ".", "Adam", "(", "self", ".", "D2", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_D", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "\n", "self", ".", "seg_loss", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ")", "\n", "self", ".", "kl_loss", "=", "nn", ".", "KLDivLoss", "(", "size_average", "=", "False", ")", "\n", "self", ".", "sm", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "log_sm", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "G", "=", "self", ".", "G", ".", "cuda", "(", ")", "\n", "self", ".", "D1", "=", "self", ".", "D1", ".", "cuda", "(", ")", "\n", "self", ".", "D2", "=", "self", ".", "D2", ".", "cuda", "(", ")", "\n", "self", ".", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "args", ".", "crop_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "args", ".", "crop_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "lambda_seg", "=", "args", ".", "lambda_seg", "\n", "self", ".", "max_value", "=", "args", ".", "max_value", "\n", "self", ".", "lambda_me_target", "=", "args", ".", "lambda_me_target", "\n", "self", ".", "lambda_kl_target", "=", "args", ".", "lambda_kl_target", "\n", "self", ".", "lambda_adv_target1", "=", "args", ".", "lambda_adv_target1", "\n", "self", ".", "lambda_adv_target2", "=", "args", ".", "lambda_adv_target2", "\n", "self", ".", "class_w", "=", "torch", ".", "FloatTensor", "(", "self", ".", "num_classes", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "+", "1", "\n", "if", "args", ".", "fp16", ":", "\n", "            ", "assert", "torch", ".", "backends", ".", "cudnn", ".", "enabled", ",", "\"fp16 mode requires cudnn backend to be enabled.\"", "\n", "self", ".", "G", ",", "self", ".", "gen_opt", "=", "amp", ".", "initialize", "(", "self", ".", "G", ",", "self", ".", "gen_opt", ",", "opt_level", "=", "\"O1\"", ")", "\n", "self", ".", "D1", ",", "self", ".", "dis1_opt", "=", "amp", ".", "initialize", "(", "self", ".", "D1", ",", "self", ".", "dis1_opt", ",", "opt_level", "=", "\"O1\"", ")", "\n", "self", ".", "D2", ",", "self", ".", "dis2_opt", "=", "amp", ".", "initialize", "(", "self", ".", "D2", ",", "self", ".", "dis2_opt", ",", "opt_level", "=", "\"O1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.AD_Trainer.update_class_criterion": [[136, 155], ["torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "print", "range", "print", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "def", "update_class_criterion", "(", "self", ",", "labels", ")", ":", "\n", "            ", "weight", "=", "torch", ".", "FloatTensor", "(", "self", ".", "num_classes", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "\n", "weight", "+=", "1", "\n", "count", "=", "torch", ".", "FloatTensor", "(", "self", ".", "num_classes", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "\n", "often", "=", "torch", ".", "FloatTensor", "(", "self", ".", "num_classes", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "\n", "often", "+=", "1", "\n", "print", "(", "labels", ".", "shape", ")", "\n", "n", ",", "h", ",", "w", "=", "labels", ".", "shape", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "count", "[", "i", "]", "=", "torch", ".", "sum", "(", "labels", "==", "i", ")", "\n", "if", "count", "[", "i", "]", "<", "64", "*", "64", "*", "n", ":", "\n", "                    ", "weight", "[", "i", "]", "=", "self", ".", "max_value", "\n", "", "", "if", "self", ".", "often_balance", ":", "\n", "                ", "often", "[", "count", "==", "0", "]", "=", "self", ".", "max_value", "\n", "\n", "", "self", ".", "often_weight", "=", "0.9", "*", "self", ".", "often_weight", "+", "0.1", "*", "often", "\n", "self", ".", "class_weight", "=", "weight", "*", "self", ".", "often_weight", "\n", "print", "(", "self", ".", "class_weight", ")", "\n", "return", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "self", ".", "class_weight", ",", "ignore_index", "=", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.AD_Trainer.update_label": [[156, 164], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "print", "nn.CrossEntropyLoss.data.cpu().numpy", "numpy.percentile", "trainer_base.AD_Trainer.seg_loss", "nn.CrossEntropyLoss.data.cpu"], "methods", ["None"], ["", "def", "update_label", "(", "self", ",", "labels", ",", "prediction", ")", ":", "\n", "            ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "self", ".", "class_weight", ",", "ignore_index", "=", "255", ",", "reduction", "=", "'none'", ")", "\n", "loss", "=", "criterion", "(", "prediction", ",", "labels", ")", "\n", "print", "(", "'original loss: %f'", "%", "self", ".", "seg_loss", "(", "prediction", ",", "labels", ")", ")", "\n", "loss_data", "=", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mm", "=", "np", ".", "percentile", "(", "loss_data", "[", ":", "]", ",", "self", ".", "only_hard_label", ")", "\n", "labels", "[", "loss", "<", "mm", "]", "=", "255", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.AD_Trainer.threshold_percent": [[165, 172], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "nn.CrossEntropyLoss.data.cpu().numpy", "numpy.percentile", "nn.CrossEntropyLoss.data.cpu"], "methods", ["None"], ["", "def", "threshold_percent", "(", "self", ",", "labels", ",", "prediction", ")", ":", "\n", "            ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ",", "reduction", "=", "'none'", ")", "\n", "loss", "=", "criterion", "(", "prediction", ",", "labels", ")", "\n", "loss_data", "=", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "thres_p", "=", "np", ".", "percentile", "(", "loss_data", "[", ":", "]", ",", "self", ".", "threshold_t", ")", "\n", "labels", "[", "loss", ">", "thres_p", "]", "=", "255", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.AD_Trainer.gen_update": [[173, 247], ["trainer_base.AD_Trainer.gen_opt.zero_grad", "trainer_base.AD_Trainer.G", "trainer_base.AD_Trainer.interp", "trainer_base.AD_Trainer.interp", "trainer_base.AD_Trainer.threshold_percent", "trainer_base.AD_Trainer.threshold_percent", "trainer_base.AD_Trainer.seg_loss", "trainer_base.AD_Trainer.seg_loss", "trainer_base.AD_Trainer.G", "trainer_base.AD_Trainer.interp_target", "trainer_base.AD_Trainer.interp_target", "trainer_base.AD_Trainer.gen_opt.step", "trainer_base.AD_Trainer.seg_loss", "labels.clone", "labels.clone", "trainer_base.AD_Trainer.D1.module.calc_gen_loss", "trainer_base.AD_Trainer.D2.module.calc_gen_loss", "trainer_base.AD_Trainer.D1.calc_gen_loss", "trainer_base.AD_Trainer.D2.calc_gen_loss", "numpy.clip", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "print", "loss.backward", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer_base.AD_Trainer.sm", "amp.scale_loss", "scaled_loss.backward", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "trainer_base.AD_Trainer.kl_loss", "trainer_base.AD_Trainer.kl_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "trainer_base.AD_Trainer.log_sm", "trainer_base.AD_Trainer.log_sm", "trainer_base.AD_Trainer.sm", "trainer_base.AD_Trainer.sm", "trainer_base.AD_Trainer.log_sm"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.AD_Trainer.threshold_percent", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.AD_Trainer.threshold_percent", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_gen_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_gen_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_gen_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_gen_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward"], ["", "def", "gen_update", "(", "self", ",", "images", ",", "images_t", ",", "labels", ",", "labels_t", ",", "i_iter", ")", ":", "\n", "            ", "self", ".", "gen_opt", ".", "zero_grad", "(", ")", "\n", "\n", "pred1", ",", "pred2", "=", "self", ".", "G", "(", "images", ")", "\n", "pred1", "=", "self", ".", "interp", "(", "pred1", ")", "\n", "pred2", "=", "self", ".", "interp", "(", "pred2", ")", "\n", "labels1", "=", "self", ".", "threshold_percent", "(", "labels", ".", "clone", "(", ")", ",", "pred1", ")", "\n", "labels2", "=", "self", ".", "threshold_percent", "(", "labels", ".", "clone", "(", ")", ",", "pred2", ")", "\n", "loss_seg1", "=", "self", ".", "seg_loss", "(", "pred1", ",", "labels1", ")", "\n", "loss_seg2", "=", "self", ".", "seg_loss", "(", "pred2", ",", "labels2", ")", "\n", "\n", "loss", "=", "loss_seg2", "+", "self", ".", "lambda_seg", "*", "loss_seg1", "\n", "\n", "pred_target1", ",", "pred_target2", "=", "self", ".", "G", "(", "images_t", ")", "\n", "pred_target1", "=", "self", ".", "interp_target", "(", "pred_target1", ")", "\n", "pred_target2", "=", "self", ".", "interp_target", "(", "pred_target2", ")", "\n", "\n", "if", "self", ".", "multi_gpu", ":", "\n", "#if self.lambda_adv_target1 > 0 and self.lambda_adv_target2 > 0:", "\n", "                ", "loss_adv_target1", "=", "self", ".", "D1", ".", "module", ".", "calc_gen_loss", "(", "self", ".", "D1", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target1", ",", "dim", "=", "1", ")", ")", "\n", "loss_adv_target2", "=", "self", ".", "D2", ".", "module", ".", "calc_gen_loss", "(", "self", ".", "D2", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target2", ",", "dim", "=", "1", ")", ")", "\n", "#else:", "\n", "#    print('skip the discriminator')", "\n", "#    loss_adv_target1, loss_adv_target2 = 0, 0 ", "\n", "", "else", ":", "\n", "#if self.lambda_adv_target1 > 0 and self.lambda_adv_target2 > 0:", "\n", "                ", "loss_adv_target1", "=", "self", ".", "D1", ".", "calc_gen_loss", "(", "self", ".", "D1", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target1", ",", "dim", "=", "1", ")", ")", "\n", "loss_adv_target2", "=", "self", ".", "D2", ".", "calc_gen_loss", "(", "self", ".", "D2", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target2", ",", "dim", "=", "1", ")", ")", "\n", "#else:", "\n", "#loss_adv_target1 = 0.0 #torch.tensor(0).cuda() ", "\n", "#loss_adv_target2 = 0.0 #torch.tensor(0).cuda()", "\n", "\n", "", "loss", "+=", "self", ".", "lambda_adv_target1", "*", "loss_adv_target1", "+", "self", ".", "lambda_adv_target2", "*", "loss_adv_target2", "\n", "\n", "\n", "if", "i_iter", "<", "15000", ":", "\n", "                ", "self", ".", "lambda_kl_target_copy", "=", "0", "\n", "self", ".", "lambda_me_target_copy", "=", "0", "\n", "", "else", ":", "\n", "                ", "self", ".", "lambda_kl_target_copy", "=", "self", ".", "lambda_kl_target", "\n", "self", ".", "lambda_me_target_copy", "=", "self", ".", "lambda_me_target", "\n", "\n", "", "if", "i_iter", "%", "10000", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "                ", "self", ".", "threshold_t", "=", "self", ".", "threshold_t", "+", "10", "\n", "self", ".", "threshold_t", "=", "np", ".", "clip", "(", "self", ".", "threshold_t", ",", "0", ",", "100", ")", "\n", "", "loss_me", "=", "0.0", "\n", "if", "self", ".", "lambda_me_target_copy", ">", "0", ":", "\n", "                ", "confidence_map", "=", "torch", ".", "sum", "(", "self", ".", "sm", "(", "0.5", "*", "pred_target1", "+", "pred_target2", ")", "**", "2", ",", "1", ")", ".", "detach", "(", ")", "\n", "loss_me", "=", "-", "torch", ".", "mean", "(", "confidence_map", "*", "torch", ".", "sum", "(", "self", ".", "sm", "(", "0.5", "*", "pred_target1", "+", "pred_target2", ")", "*", "self", ".", "log_sm", "(", "0.5", "*", "pred_target1", "+", "pred_target2", ")", ",", "1", ")", ")", "\n", "loss", "+=", "self", ".", "lambda_me_target", "*", "loss_me", "\n", "\n", "", "loss_kl", "=", "0.0", "\n", "if", "self", ".", "lambda_kl_target_copy", ">", "0", ":", "\n", "                ", "n", ",", "c", ",", "h", ",", "w", "=", "pred_target1", ".", "shape", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#pred_target1_flip, pred_target2_flip = self.G(fliplr(images_t))", "\n", "#pred_target1_flip = self.interp_target(pred_target1_flip)", "\n", "#pred_target2_flip = self.interp_target(pred_target2_flip)", "\n", "                    ", "mean_pred", "=", "self", ".", "sm", "(", "0.5", "*", "pred_target1", "+", "pred_target2", ")", "#+ self.sm(fliplr(0.5*pred_target1_flip + pred_target2_flip)) ) /2", "\n", "", "loss_kl", "=", "(", "self", ".", "kl_loss", "(", "self", ".", "log_sm", "(", "pred_target2", ")", ",", "mean_pred", ")", "+", "self", ".", "kl_loss", "(", "self", ".", "log_sm", "(", "pred_target1", ")", ",", "mean_pred", ")", ")", "/", "(", "n", "*", "h", "*", "w", ")", "\n", "#loss_kl = (self.kl_loss(self.log_sm(pred_target2) , self.sm(pred_target1) ) ) / (n*h*w) + (self.kl_loss(self.log_sm(pred_target1) , self.sm(pred_target2)) ) / (n*h*w)", "\n", "print", "(", "loss_kl", ")", "\n", "loss", "+=", "self", ".", "lambda_kl_target", "*", "loss_kl", "\n", "\n", "", "if", "self", ".", "fp16", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "self", ".", "gen_opt", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "", "self", ".", "gen_opt", ".", "step", "(", ")", "\n", "\n", "val_loss", "=", "self", ".", "seg_loss", "(", "pred_target2", ",", "labels_t", ")", "\n", "\n", "return", "loss_seg1", ",", "loss_seg2", ",", "loss_adv_target1", ",", "loss_adv_target2", ",", "loss_me", ",", "loss_kl", ",", "pred1", ",", "pred2", ",", "pred_target1", ",", "pred_target2", ",", "val_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.AD_Trainer.dis_update": [[248, 273], ["trainer_base.AD_Trainer.dis1_opt.zero_grad", "trainer_base.AD_Trainer.dis2_opt.zero_grad", "pred1.detach.detach.detach", "pred2.detach.detach.detach", "pred_target1.detach.detach.detach", "pred_target2.detach.detach.detach", "trainer_base.AD_Trainer.dis1_opt.step", "trainer_base.AD_Trainer.dis2_opt.step", "trainer_base.AD_Trainer.D1.module.calc_dis_loss", "trainer_base.AD_Trainer.D2.module.calc_dis_loss", "trainer_base.AD_Trainer.D1.calc_dis_loss", "trainer_base.AD_Trainer.D2.calc_dis_loss", "loss.backward", "amp.scale_loss", "scaled_loss.backward", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_dis_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_dis_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_dis_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_dis_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward"], ["", "def", "dis_update", "(", "self", ",", "pred1", ",", "pred2", ",", "pred_target1", ",", "pred_target2", ")", ":", "\n", "            ", "self", ".", "dis1_opt", ".", "zero_grad", "(", ")", "\n", "self", ".", "dis2_opt", ".", "zero_grad", "(", ")", "\n", "pred1", "=", "pred1", ".", "detach", "(", ")", "\n", "pred2", "=", "pred2", ".", "detach", "(", ")", "\n", "pred_target1", "=", "pred_target1", ".", "detach", "(", ")", "\n", "pred_target2", "=", "pred_target2", ".", "detach", "(", ")", "\n", "\n", "if", "self", ".", "multi_gpu", ":", "\n", "                ", "loss_D1", ",", "reg1", "=", "self", ".", "D1", ".", "module", ".", "calc_dis_loss", "(", "self", ".", "D1", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target1", ",", "dim", "=", "1", ")", ",", "input_real", "=", "F", ".", "softmax", "(", "0.5", "*", "pred1", "+", "pred2", ",", "dim", "=", "1", ")", ")", "\n", "loss_D2", ",", "reg2", "=", "self", ".", "D2", ".", "module", ".", "calc_dis_loss", "(", "self", ".", "D2", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target2", ",", "dim", "=", "1", ")", ",", "input_real", "=", "F", ".", "softmax", "(", "0.5", "*", "pred1", "+", "pred2", ",", "dim", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_D1", ",", "reg1", "=", "self", ".", "D1", ".", "calc_dis_loss", "(", "self", ".", "D1", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target1", ",", "dim", "=", "1", ")", ",", "input_real", "=", "F", ".", "softmax", "(", "0.5", "*", "pred1", "+", "pred2", ",", "dim", "=", "1", ")", ")", "\n", "loss_D2", ",", "reg2", "=", "self", ".", "D2", ".", "calc_dis_loss", "(", "self", ".", "D2", ",", "input_fake", "=", "F", ".", "softmax", "(", "pred_target2", ",", "dim", "=", "1", ")", ",", "input_real", "=", "F", ".", "softmax", "(", "0.5", "*", "pred1", "+", "pred2", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "loss", "=", "loss_D1", "+", "loss_D2", "\n", "if", "self", ".", "fp16", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "[", "self", ".", "dis1_opt", ",", "self", ".", "dis2_opt", "]", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "\n", "", "self", ".", "dis1_opt", ".", "step", "(", ")", "\n", "self", ".", "dis2_opt", ".", "step", "(", ")", "\n", "return", "loss_D1", ",", "loss_D2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.weights_init": [[21, 42], ["hasattr", "torch.normal_", "hasattr", "torch.constant_", "classname.find", "classname.find", "torch.xavier_normal_", "torch.kaiming_normal_", "math.sqrt", "torch.orthogonal_", "math.sqrt"], "function", ["None"], ["", "def", "weights_init", "(", "init_type", "=", "'gaussian'", ")", ":", "\n", "    ", "def", "init_fun", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "(", "classname", ".", "find", "(", "'Conv'", ")", "==", "0", "or", "classname", ".", "find", "(", "'Linear'", ")", "==", "0", ")", "and", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "# print m.__class__.__name__", "\n", "            ", "if", "init_type", "==", "'gaussian'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "", "elif", "init_type", "==", "'default'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "assert", "0", ",", "\"Unsupported initialization: {}\"", ".", "format", "(", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "", "return", "init_fun", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.train_bn": [[43, 47], ["classname.find", "m.train"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.train"], ["", "def", "train_bn", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.inplace_relu": [[48, 52], ["classname.find"], "function", ["None"], ["", "", "def", "inplace_relu", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'ReLU'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "inplace", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.fliplr": [[53, 58], ["torch.arange().long().cuda", "torch.arange().long().cuda", "torch.arange().long().cuda", "torch.arange().long().cuda", "torch.arange().long().cuda", "img.index_select", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "img.size"], "function", ["None"], ["", "", "def", "fliplr", "(", "img", ")", ":", "\n", "    ", "'''flip horizontal'''", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "img", ".", "size", "(", "3", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "# N x C x H x W", "\n", "img_flip", "=", "img", ".", "index_select", "(", "3", ",", "inv_idx", ")", "\n", "return", "img_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.train_ft_base.get_arguments": [[74, 178], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--autoaug\"", ",", "type", "=", "bool", ",", "default", "=", "AUTOAUG", ",", "help", "=", "\"use augmentation or not\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--autoaug_target\"", ",", "type", "=", "bool", ",", "default", "=", "AUTOAUG_TARGET", ",", "help", "=", "\"use augmentation or not\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"available options : DeepLab\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--target\"", ",", "type", "=", "str", ",", "default", "=", "TARGET", ",", "\n", "help", "=", "\"available options : cityscapes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "BATCH_SIZE", ",", "\n", "help", "=", "\"Number of images sent to the network in one step.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--iter-size\"", ",", "type", "=", "int", ",", "default", "=", "ITER_SIZE", ",", "\n", "help", "=", "\"Accumulate gradients for ITER_SIZE iterations.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-workers\"", ",", "type", "=", "int", ",", "default", "=", "NUM_WORKERS", ",", "\n", "help", "=", "\"number of workers for multithread dataloading.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--droprate\"", ",", "type", "=", "float", ",", "default", "=", "DROPRATE", ",", "\n", "help", "=", "\"DropRate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of source images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--crop-size\"", ",", "type", "=", "str", ",", "default", "=", "CROP_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of source images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY_TARGET", ",", "\n", "help", "=", "\"Path to the directory containing the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH_TARGET", ",", "\n", "help", "=", "\"Path to the file listing the images in the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size-target\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE_TARGET", ",", "\n", "help", "=", "\"Comma-separated string with height and width of target images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--is-training\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to updates the running means and variances during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE", ",", "\n", "help", "=", "\"Base learning rate for training with polynomial decay.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate-D\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE_D", ",", "\n", "help", "=", "\"Base learning rate for discriminator.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-seg\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_SEG", ",", "\n", "help", "=", "\"lambda_seg.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-adv-target1\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_ADV_TARGET1", ",", "\n", "help", "=", "\"lambda_adv for adversarial training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-adv-target2\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_ADV_TARGET2", ",", "\n", "help", "=", "\"lambda_adv for adversarial training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-me-target\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_ME_TARGET", ",", "\n", "help", "=", "\"lambda_me for minimize cross entropy loss on target.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-kl-target\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_KL_TARGET", ",", "\n", "help", "=", "\"lambda_me for minimize kl loss on target.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "MOMENTUM", ",", "\n", "help", "=", "\"Momentum component of the optimiser.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max-value\"", ",", "type", "=", "float", ",", "default", "=", "MAX_VALUE", ",", "\n", "help", "=", "\"Max Value of Class Weight.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--norm-style\"", ",", "type", "=", "str", ",", "default", "=", "NORM_STYLE", ",", "\n", "help", "=", "\"Norm Style in the final classifier.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--not-restore-last\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to not restore last (FC) layers.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS", ",", "\n", "help", "=", "\"Number of training steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps-stop\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS_STOP", ",", "\n", "help", "=", "\"Number of training steps for early stopping.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--power\"", ",", "type", "=", "float", ",", "default", "=", "POWER", ",", "\n", "help", "=", "\"Decay parameter to compute the learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-mirror\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly mirror the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-scale\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly scale the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fp16\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Use FP16.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-seed\"", ",", "type", "=", "int", ",", "default", "=", "RANDOM_SEED", ",", "\n", "help", "=", "\"Random seed to have reproducible results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-num-images\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_NUM_IMAGES", ",", "\n", "help", "=", "\"How many images to save.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-pred-every\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_PRED_EVERY", ",", "\n", "help", "=", "\"Save summaries and checkpoint every often.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--snapshot-dir\"", ",", "type", "=", "str", ",", "default", "=", "SNAPSHOT_DIR", ",", "\n", "help", "=", "\"Where to save snapshots of the model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight-decay\"", ",", "type", "=", "float", ",", "default", "=", "WEIGHT_DECAY", ",", "\n", "help", "=", "\"Regularisation parameter for L2-loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warm-up\"", ",", "type", "=", "float", ",", "default", "=", "WARM_UP", ",", "help", "=", "'warm up iteration'", ")", "\n", "parser", ".", "add_argument", "(", "\"--threshold\"", ",", "type", "=", "float", ",", "default", "=", "THRESHOLD", ",", "help", "=", "'warm up iteration'", ")", "\n", "parser", ".", "add_argument", "(", "\"--cpu\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"choose to use cpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--class-balance\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"class balance.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use-se\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"use se block.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--only-hard-label\"", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "\"class balance.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_bn\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"train batch normalization.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sync_bn\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"sync batch normalization.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--often-balance\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"balance the apperance times.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu-ids\"", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'choose gpus'", ")", "\n", "parser", ".", "add_argument", "(", "\"--tensorboard\"", ",", "action", "=", "'store_false'", ",", "help", "=", "\"choose whether to use tensorboard.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--log-dir\"", ",", "type", "=", "str", ",", "default", "=", "LOG_DIR", ",", "\n", "help", "=", "\"Path to the directory of log.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose adaptation set.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.train_ft_base.main": [[190, 344], ["map", "map", "map", "args.gpu_ids.split", "len", "print", "torch.utils.data.DataLoader", "enumerate", "torch.utils.data.DataLoader", "enumerate", "range", "args.input_size.split", "args.crop_size.split", "args.input_size_target.split", "int", "trainer_base.AD_Trainer", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "trainer_base.AD_Trainer", "dataset.cityscapes_pseudo_dataset.cityscapes_pseudo_DataSet", "dataset.cityscapes_dataset.cityscapesDataSet", "tensorboardX.SummaryWriter", "utils.tool.adjust_learning_rate", "range", "print", "print", "tensorboardX.SummaryWriter.close", "gpu_ids.append", "os.path.basename", "os.path.basename", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "enumerate.__next__", "enumerate.__next__", "images.cuda.cuda", "labels.long().cuda.long().cuda", "images_t.cuda.cuda", "labels_t.long().cuda.long().cuda", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "utils.tool.Timer", "trainer_base.AD_Trainer.gen_update", "scalar_info.items", "trainer_base.AD_Trainer.G.state_dict", "os.join", "trainer_base.AD_Trainer.D1.state_dict", "os.join", "trainer_base.AD_Trainer.D2.state_dict", "os.join", "trainer_base.AD_Trainer.G.state_dict", "os.join", "trainer_base.AD_Trainer.D1.state_dict", "os.join", "trainer_base.AD_Trainer.D2.state_dict", "os.join", "labels.long().cuda.long", "labels_t.long().cuda.long", "loss_seg1.item", "loss_seg2.item", "trainer_base.AD_Trainer.dis_update", "loss_D1.item", "loss_D2.item", "tensorboardX.SummaryWriter.add_scalar", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.adjust_learning_rate", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.__next__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.__next__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.AD_Trainer.gen_update", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.AD_Trainer.dis_update"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the training.\"\"\"", "\n", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size", ".", "split", "(", "','", ")", ")", "\n", "args", ".", "input_size", "=", "(", "w", ",", "h", ")", "\n", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "crop_size", ".", "split", "(", "','", ")", ")", "\n", "args", ".", "crop_size", "=", "(", "h", ",", "w", ")", "\n", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size_target", ".", "split", "(", "','", ")", ")", "\n", "args", ".", "input_size_target", "=", "(", "w", ",", "h", ")", "\n", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "\n", "str_ids", "=", "args", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "        ", "gid", "=", "int", "(", "str_id", ")", "\n", "if", "gid", ">=", "0", ":", "\n", "            ", "gpu_ids", ".", "append", "(", "gid", ")", "\n", "\n", "", "", "num_gpu", "=", "len", "(", "gpu_ids", ")", "\n", "args", ".", "multi_gpu", "=", "False", "\n", "if", "num_gpu", ">", "1", ":", "\n", "        ", "args", ".", "multi_gpu", "=", "True", "\n", "Trainer", "=", "AD_Trainer", "(", "args", ")", "\n", "Trainer", ".", "G", "=", "torch", ".", "nn", ".", "DataParallel", "(", "Trainer", ".", "G", ",", "gpu_ids", ")", "\n", "Trainer", ".", "D1", "=", "torch", ".", "nn", ".", "DataParallel", "(", "Trainer", ".", "D1", ",", "gpu_ids", ")", "\n", "Trainer", ".", "D2", "=", "torch", ".", "nn", ".", "DataParallel", "(", "Trainer", ".", "D2", ",", "gpu_ids", ")", "\n", "", "else", ":", "\n", "        ", "Trainer", "=", "AD_Trainer", "(", "args", ")", "\n", "\n", "", "print", "(", "Trainer", ")", "\n", "\n", "trainloader", "=", "data", ".", "DataLoader", "(", "\n", "cityscapes_pseudo_DataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "resize_size", "=", "args", ".", "input_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "scale", "=", "True", ",", "mirror", "=", "True", ",", "mean", "=", "IMG_MEAN", ",", "\n", "set", "=", "'train'", ",", "autoaug", "=", "args", ".", "autoaug", ",", "threshold", "=", "args", ".", "threshold", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "\n", "targetloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir_target", ",", "args", ".", "data_list_target", ",", "\n", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "resize_size", "=", "args", ".", "input_size_target", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "scale", "=", "False", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ",", "\n", "set", "=", "args", ".", "set", ",", "autoaug", "=", "args", ".", "autoaug_target", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "\n", "# set up tensor board", "\n", "if", "args", ".", "tensorboard", ":", "\n", "        ", "args", ".", "log_dir", "+=", "'/'", "+", "os", ".", "path", ".", "basename", "(", "args", ".", "snapshot_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "log_dir", ")", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "args", ".", "log_dir", ")", "\n", "\n", "", "for", "i_iter", "in", "range", "(", "args", ".", "num_steps", ")", ":", "\n", "\n", "        ", "loss_seg_value1", "=", "0", "\n", "loss_adv_target_value1", "=", "0", "\n", "loss_D_value1", "=", "0", "\n", "\n", "loss_seg_value2", "=", "0", "\n", "loss_adv_target_value2", "=", "0", "\n", "loss_D_value2", "=", "0", "\n", "\n", "\n", "adjust_learning_rate", "(", "Trainer", ".", "gen_opt", ",", "i_iter", ",", "args", ")", "\n", "#adjust_learning_rate_D(Trainer.dis1_opt, i_iter, args)", "\n", "#adjust_learning_rate_D(Trainer.dis2_opt, i_iter, args)", "\n", "\n", "for", "sub_i", "in", "range", "(", "args", ".", "iter_size", ")", ":", "\n", "\n", "# train G", "\n", "\n", "# train with source", "\n", "\n", "            ", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "_", ",", "batch_t", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "\n", "images", ",", "labels", ",", "_", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "images_t", ",", "labels_t", ",", "_", ",", "_", "=", "batch_t", "\n", "images_t", "=", "images_t", ".", "cuda", "(", ")", "\n", "labels_t", "=", "labels_t", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "with", "Timer", "(", "\"Elapsed time in update: %f\"", ")", ":", "\n", "                ", "loss_seg1", ",", "loss_seg2", ",", "loss_adv_target1", ",", "loss_adv_target2", ",", "loss_me", ",", "loss_kl", ",", "pred1", ",", "pred2", ",", "pred_target1", ",", "pred_target2", ",", "val_loss", "=", "Trainer", ".", "gen_update", "(", "images", ",", "images_t", ",", "labels", ",", "labels_t", ",", "i_iter", ")", "\n", "loss_seg_value1", "+=", "loss_seg1", ".", "item", "(", ")", "/", "args", ".", "iter_size", "\n", "loss_seg_value2", "+=", "loss_seg2", ".", "item", "(", ")", "/", "args", ".", "iter_size", "\n", "loss_adv_target_value1", "+=", "loss_adv_target1", "/", "args", ".", "iter_size", "\n", "loss_adv_target_value2", "+=", "loss_adv_target2", "/", "args", ".", "iter_size", "\n", "loss_me_value", "=", "loss_me", "\n", "\n", "if", "args", ".", "lambda_adv_target1", ">", "0", "and", "args", ".", "lambda_adv_target2", ">", "0", ":", "\n", "                    ", "loss_D1", ",", "loss_D2", "=", "Trainer", ".", "dis_update", "(", "pred1", ",", "pred2", ",", "pred_target1", ",", "pred_target2", ")", "\n", "loss_D_value1", "+=", "loss_D1", ".", "item", "(", ")", "\n", "loss_D_value2", "+=", "loss_D2", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                    ", "loss_D_value1", "=", "0", "\n", "loss_D_value2", "=", "0", "\n", "\n", "", "", "", "del", "pred1", ",", "pred2", ",", "pred_target1", ",", "pred_target2", "\n", "\n", "if", "args", ".", "tensorboard", ":", "\n", "            ", "scalar_info", "=", "{", "\n", "'loss_seg1'", ":", "loss_seg_value1", ",", "\n", "'loss_seg2'", ":", "loss_seg_value2", ",", "\n", "'loss_adv_target1'", ":", "loss_adv_target_value1", ",", "\n", "'loss_adv_target2'", ":", "loss_adv_target_value2", ",", "\n", "'loss_me_target'", ":", "loss_me_value", ",", "\n", "'loss_kl_target'", ":", "loss_kl", ",", "\n", "'loss_D1'", ":", "loss_D_value1", ",", "\n", "'loss_D2'", ":", "loss_D_value2", ",", "\n", "'val_loss'", ":", "val_loss", ",", "\n", "}", "\n", "\n", "if", "i_iter", "%", "100", "==", "0", ":", "\n", "                ", "for", "key", ",", "val", "in", "scalar_info", ".", "items", "(", ")", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "key", ",", "val", ",", "i_iter", ")", "\n", "\n", "", "", "", "print", "(", "'exp = {}'", ".", "format", "(", "args", ".", "snapshot_dir", ")", ")", "\n", "print", "(", "\n", "'\\033[1m iter = %8d/%8d \\033[0m loss_seg1 = %.3f loss_seg2 = %.3f loss_me = %.3f  loss_kl = %.3f loss_adv1 = %.3f, loss_adv2 = %.3f loss_D1 = %.3f loss_D2 = %.3f, val_loss=%.3f'", "%", "(", "i_iter", ",", "args", ".", "num_steps", ",", "loss_seg_value1", ",", "loss_seg_value2", ",", "loss_me_value", ",", "loss_kl", ",", "loss_adv_target_value1", ",", "loss_adv_target_value2", ",", "loss_D_value1", ",", "loss_D_value2", ",", "val_loss", ")", ")", "\n", "\n", "# clear loss", "\n", "del", "loss_seg1", ",", "loss_seg2", ",", "loss_adv_target1", ",", "loss_adv_target2", ",", "loss_me", ",", "loss_kl", ",", "val_loss", "\n", "\n", "if", "i_iter", ">=", "args", ".", "num_steps_stop", "-", "1", ":", "\n", "            ", "print", "(", "'save model ...'", ")", "\n", "torch", ".", "save", "(", "Trainer", ".", "G", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps_stop", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "Trainer", ".", "D1", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps_stop", ")", "+", "'_D1.pth'", ")", ")", "\n", "torch", ".", "save", "(", "Trainer", ".", "D2", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps_stop", ")", "+", "'_D2.pth'", ")", ")", "\n", "break", "\n", "\n", "", "if", "i_iter", "%", "args", ".", "save_pred_every", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "torch", ".", "save", "(", "Trainer", ".", "G", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "Trainer", ".", "D1", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'_D1.pth'", ")", ")", "\n", "torch", ".", "save", "(", "Trainer", ".", "D2", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'_D2.pth'", ")", ")", "\n", "\n", "", "", "if", "args", ".", "tensorboard", ":", "\n", "        ", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.generate_plabel_cityscapes_advent_caco.colorize_mask": [[58, 64], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.generate_plabel_cityscapes_advent_caco.get_arguments": [[65, 93], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"Model Choice (DeeplabMulti/DeeplabVGG/Oracle).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the Cityscapes dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batchsize\"", ",", "type", "=", "int", ",", "default", "=", "12", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose evaluation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "type", "=", "str", ",", "default", "=", "SAVE_PATH", ",", "\n", "help", "=", "\"Path to save result.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.generate_plabel_cityscapes_advent_caco.save_heatmap": [[94, 102], ["matplotlib.figure", "matplotlib.axis", "matplotlib.imshow", "plt.figure.colorbar", "plt.figure.savefig", "name.split"], "function", ["None"], ["", "def", "save_heatmap", "(", "output_name", ")", ":", "\n", "    ", "output", ",", "name", "=", "output_name", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "heatmap", "=", "plt", ".", "imshow", "(", "output", ",", "cmap", "=", "'viridis'", ")", "\n", "fig", ".", "colorbar", "(", "heatmap", ")", "\n", "fig", ".", "savefig", "(", "'%s_heatmap.png'", "%", "(", "name", ".", "split", "(", "'.jpg'", ")", "[", "0", "]", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.generate_plabel_cityscapes_advent_caco.main": [[103, 231], ["generate_plabel_cityscapes_advent_caco.get_arguments", "os.path.join", "print", "print", "os.path.basename", "model.deeplab_vgg.DeeplabVGG.eval", "model.deeplab_vgg.DeeplabVGG.cuda", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.KLDivLoss", "print", "enumerate", "os.path.dirname", "open", "yaml.load", "os.path.dirname", "os.path.exists", "os.makedirs", "model.deeplab_advent_no_p.get_deeplab_v2", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "torch.load", "model.deeplab_vgg.DeeplabVGG.load_state_dict", "dataset.cityscapes_dataset.cityscapesDataSet", "dataset.cityscapes_dataset.cityscapesDataSet", "packaging.version.parse", "packaging.version.parse", "torch.Upsample", "torch.Upsample", "zip", "print", "image.cuda", "image2.cuda", "print", "interp().cpu().data.numpy.transpose", "numpy.max", "numpy.asarray", "range", "model.deeplab.Res_Deeplab", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "model.deeplab_vgg.DeeplabVGG.load_state_dict", "numpy.argmax", "generate_plabel_cityscapes_advent_caco.colorize_mask", "PIL.Image.fromarray", "Image.fromarray.save", "print", "colorize_mask.save", "matplotlib.figure", "matplotlib.axis", "matplotlib.imshow", "plt.figure.colorbar", "plt.figure.savefig", "model.deeplab_vgg.DeeplabVGG", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "torch.sum", "torch.sum", "torch.sum", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "interp().cpu().data.numpy.cpu().data.numpy", "heatmap_batch.cpu().data.numpy.cpu().data.numpy", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.cpu().data.numpy", "name[].split", "name[].split", "os.path.isdir", "os.mkdir", "numpy.max", "round", "round", "round", "round", "torch.nn.Softmax.", "nn.KLDivLoss.", "utils.tool.fliplr", "utils.tool.fliplr", "utils.tool.fliplr", "torch.nn.Softmax.", "torch.nn.Softmax.", "utils.tool.fliplr", "utils.tool.fliplr", "utils.tool.fliplr", "torch.nn.Softmax.", "torch.autograd.Variable().cuda", "torch.nn.LogSoftmax.", "torch.nn.Softmax.", "interp().cpu().data.numpy.cpu", "heatmap_batch.cpu().data.numpy.cpu", "torch.autograd.Variable", "nn.Upsample.cpu", "name_tmp.split", "name_tmp.split", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.scripts.train_caco.get_arguments", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.get_deeplab_v2", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.Res_Deeplab", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.colorize_mask", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "\n", "args", "=", "get_arguments", "(", ")", "\n", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "restore_from", ")", ",", "'opts.yaml'", ")", "\n", "with", "open", "(", "config_path", ",", "'r'", ")", "as", "stream", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "stream", ")", "\n", "\n", "", "args", ".", "model", "=", "config", "[", "'model'", "]", "\n", "print", "(", "'ModelType:%s'", "%", "args", ".", "model", ")", "\n", "print", "(", "'NormType:%s'", "%", "config", "[", "'norm_style'", "]", ")", "\n", "gpu0", "=", "args", ".", "gpu", "\n", "batchsize", "=", "args", ".", "batchsize", "\n", "\n", "model_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "restore_from", ")", ")", "\n", "#args.save += model_name", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "'DeepLab'", ":", "\n", "# model = DeeplabMulti(num_classes=args.num_classes, use_se = config['use_se'], train_bn = False, norm_style = config['norm_style'])", "\n", "        ", "model", "=", "get_deeplab_v2", "(", "num_classes", "=", "19", ",", "multi_level", "=", "True", ")", "\n", "", "elif", "args", ".", "model", "==", "'Oracle'", ":", "\n", "        ", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "==", "RESTORE_FROM", ":", "\n", "            ", "args", ".", "restore_from", "=", "RESTORE_FROM_ORC", "\n", "", "", "elif", "args", ".", "model", "==", "'DeeplabVGG'", ":", "\n", "        ", "model", "=", "DeeplabVGG", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "==", "RESTORE_FROM", ":", "\n", "            ", "args", ".", "restore_from", "=", "RESTORE_FROM_VGG", "\n", "\n", "", "", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "        ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "args", ".", "restore_from", ")", "\n", "", "else", ":", "\n", "        ", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "\n", "", "try", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "", "except", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "gpu0", ")", "\n", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "512", ",", "1024", ")", ",", "resize_size", "=", "(", "1024", ",", "512", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "scale", "=", "1.20", "\n", "testloader2", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "round", "(", "512", "*", "scale", ")", ",", "round", "(", "1024", "*", "scale", ")", ")", ",", "resize_size", "=", "(", "round", "(", "1024", "*", "scale", ")", ",", "round", "(", "512", "*", "scale", ")", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "\n", "if", "version", ".", "parse", "(", "torch", ".", "__version__", ")", ">=", "version", ".", "parse", "(", "'0.4.0'", ")", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "sm", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "log_sm", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "kl_distance", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'none'", ")", "\n", "\n", "print", "(", "'without aux'", ")", "\n", "\n", "for", "index", ",", "img_data", "in", "enumerate", "(", "zip", "(", "testloader", ",", "testloader2", ")", ")", ":", "\n", "        ", "batch", ",", "batch2", "=", "img_data", "\n", "image", ",", "_", ",", "_", ",", "name", "=", "batch", "\n", "image2", ",", "_", ",", "_", ",", "name2", "=", "batch2", "\n", "print", "(", "image", ".", "shape", ")", "\n", "\n", "inputs", "=", "image", ".", "cuda", "(", ")", "\n", "inputs2", "=", "image2", ".", "cuda", "(", ")", "\n", "print", "(", "'\\r>>>>Extracting feature...%04d/%04d'", "%", "(", "index", "*", "batchsize", ",", "NUM_STEPS", ")", ",", "end", "=", "''", ")", "\n", "if", "args", ".", "model", "==", "'DeepLab'", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output1", ",", "output2", "=", "model", "(", "inputs", ")", "\n", "output_batch", "=", "interp", "(", "sm", "(", "0.0001", "*", "output1", "+", "output2", ")", ")", "\n", "\n", "heatmap_batch", "=", "torch", ".", "sum", "(", "kl_distance", "(", "log_sm", "(", "output1", ")", ",", "sm", "(", "output2", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "output1", ",", "output2", "=", "model", "(", "fliplr", "(", "inputs", ")", ")", "\n", "output1", ",", "output2", "=", "fliplr", "(", "output1", ")", ",", "fliplr", "(", "output2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.0001", "*", "output1", "+", "output2", ")", ")", "\n", "del", "output1", ",", "output2", ",", "inputs", "\n", "\n", "output1", ",", "output2", "=", "model", "(", "inputs2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.0001", "*", "output1", "+", "output2", ")", ")", "\n", "output1", ",", "output2", "=", "model", "(", "fliplr", "(", "inputs2", ")", ")", "\n", "output1", ",", "output2", "=", "fliplr", "(", "output1", ")", ",", "fliplr", "(", "output2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.0001", "*", "output1", "+", "output2", ")", ")", "\n", "del", "output1", ",", "output2", ",", "inputs2", "\n", "output_batch", "=", "output_batch", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "heatmap_batch", "=", "heatmap_batch", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "", "elif", "args", ".", "model", "==", "'DeeplabVGG'", "or", "args", ".", "model", "==", "'Oracle'", ":", "\n", "            ", "output_batch", "=", "model", "(", "Variable", "(", "image", ")", ".", "cuda", "(", ")", ")", "\n", "output_batch", "=", "interp", "(", "output_batch", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "#output_batch = output_batch.transpose(0,2,3,1)", "\n", "#output_batch = np.asarray(np.argmax(output_batch, axis=3), dtype=np.uint8)", "\n", "", "output_batch", "=", "output_batch", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "score_batch", "=", "np", ".", "max", "(", "output_batch", ",", "axis", "=", "3", ")", "\n", "output_batch", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output_batch", ",", "axis", "=", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "#output_batch[score_batch<3.2] = 255  #3.2 = 4*0.8", "\n", "for", "i", "in", "range", "(", "output_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "output", "=", "output_batch", "[", "i", ",", ":", ",", ":", "]", "\n", "output_col", "=", "colorize_mask", "(", "output", ")", "\n", "output", "=", "Image", ".", "fromarray", "(", "output", ")", "\n", "\n", "name_tmp", "=", "name", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "dir_name", "=", "name", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "save_path", "=", "args", ".", "save", "+", "'/'", "+", "dir_name", "\n", "#save_path = re.replace(save_path, 'leftImg8bit', 'pseudo')", "\n", "#print(save_path)", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "", "output", ".", "save", "(", "'%s/%s'", "%", "(", "save_path", ",", "name_tmp", ")", ")", "\n", "print", "(", "'%s/%s'", "%", "(", "save_path", ",", "name_tmp", ")", ")", "\n", "output_col", ".", "save", "(", "'%s/%s_color.png'", "%", "(", "save_path", ",", "name_tmp", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "\n", "heatmap_tmp", "=", "heatmap_batch", "[", "i", ",", ":", ",", ":", "]", "/", "np", ".", "max", "(", "heatmap_batch", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "heatmap", "=", "plt", ".", "imshow", "(", "heatmap_tmp", ",", "cmap", "=", "'viridis'", ")", "\n", "fig", ".", "colorbar", "(", "heatmap", ")", "\n", "fig", ".", "savefig", "(", "'%s/%s_heatmap.png'", "%", "(", "save_path", ",", "name_tmp", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "\n", "", "", "return", "args", ".", "save", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou_best.fast_hist": [[9, 12], ["numpy.bincount().reshape", "numpy.bincount", "a[].astype"], "function", ["None"], ["def", "fast_hist", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "k", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou_best.per_class_iu": [[14, 16], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou_best.label_mapping": [[18, 23], ["numpy.copy", "range", "numpy.array", "len"], "function", ["None"], ["", "def", "label_mapping", "(", "input", ",", "mapping", ")", ":", "\n", "    ", "output", "=", "np", ".", "copy", "(", "input", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "mapping", ")", ")", ":", "\n", "        ", "output", "[", "input", "==", "mapping", "[", "ind", "]", "[", "0", "]", "]", "=", "mapping", "[", "ind", "]", "[", "1", "]", "\n", "", "return", "np", ".", "array", "(", "output", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou_best.compute_mIoU": [[25, 69], ["numpy.int", "print", "numpy.array", "numpy.array", "numpy.zeros", "os.path.join", "os.path.join", "open().read().splitlines", "open().read().splitlines", "range", "compute_iou_best.per_class_iu", "range", "print", "open", "open.write", "open.close", "open", "json.load", "os.path.join", "os.path.join", "len", "numpy.array", "numpy.array", "compute_iou_best.label_mapping", "compute_iou_best.fast_hist", "print", "str", "os.join", "os.path.join", "open().read", "open().read", "PIL.Image.open", "PIL.Image.open", "len", "len", "print", "label_mapping.flatten", "np.array.flatten", "print", "str", "round", "x.split", "len", "label_mapping.flatten", "np.array.flatten", "str", "str", "round", "open", "open", "len", "len", "len", "round", "round", "numpy.nanmean", "label_mapping.flatten", "np.array.flatten", "numpy.mean", "numpy.nanmean", "compute_iou_best.per_class_iu"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.per_class_iu", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.label_mapping", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.fast_hist", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.per_class_iu"], ["", "def", "compute_mIoU", "(", "gt_dir", ",", "pred_dir", ",", "devkit_dir", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    Compute IoU given the predicted colorized images and \n    \"\"\"", "\n", "with", "open", "(", "join", "(", "devkit_dir", ",", "'info.json'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "      ", "info", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "print", "(", "(", "'Num classes'", ",", "num_classes", ")", ")", "\n", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "mapping", "=", "np", ".", "array", "(", "info", "[", "'label2train'", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "\n", "image_path_list", "=", "join", "(", "devkit_dir", ",", "'val.txt'", ")", "\n", "label_path_list", "=", "join", "(", "devkit_dir", ",", "'label.txt'", ")", "\n", "gt_imgs", "=", "open", "(", "label_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "gt_imgs", "=", "[", "join", "(", "gt_dir", ",", "x", ")", "for", "x", "in", "gt_imgs", "]", "\n", "pred_imgs", "=", "open", "(", "image_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "pred_imgs", "=", "[", "join", "(", "pred_dir", ",", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "for", "x", "in", "pred_imgs", "]", "\n", "\n", "for", "ind", "in", "range", "(", "len", "(", "gt_imgs", ")", ")", ":", "\n", "        ", "pred", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "label_mapping", "(", "label", ",", "mapping", ")", "\n", "if", "len", "(", "label", ".", "shape", ")", "==", "3", "and", "label", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "            ", "label", "=", "label", "[", ":", ",", ":", ",", "0", "]", "\n", "", "if", "len", "(", "label", ".", "flatten", "(", ")", ")", "!=", "len", "(", "pred", ".", "flatten", "(", ")", ")", ":", "\n", "            ", "print", "(", "(", "'Skipping: len(gt) = {:d}, len(pred) = {:d}, {:s}, {:s}'", ".", "format", "(", "len", "(", "label", ".", "flatten", "(", ")", ")", ",", "len", "(", "pred", ".", "flatten", "(", ")", ")", ",", "gt_imgs", "[", "ind", "]", ",", "pred_imgs", "[", "ind", "]", ")", ")", ")", "\n", "continue", "\n", "", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "pred", ".", "flatten", "(", ")", ",", "num_classes", ")", "\n", "if", "ind", ">", "0", "and", "ind", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "ind", ",", "len", "(", "gt_imgs", ")", ",", "100", "*", "np", ".", "mean", "(", "per_class_iu", "(", "hist", ")", ")", ")", ")", ")", "\n", "\n", "", "", "mIoUs", "=", "per_class_iu", "(", "hist", ")", "\n", "scores", "=", "''", "\n", "for", "ind_class", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "print", "(", "(", "'===>'", "+", "name_classes", "[", "ind_class", "]", "+", "':\\t'", "+", "str", "(", "round", "(", "mIoUs", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", ")", "\n", "scores", "=", "scores", "+", "str", "(", "round", "(", "mIoUs", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", "+", "','", "\n", "", "print", "(", "(", "'===> mIoU: '", "+", "str", "(", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", ")", ")", ")", "\n", "scores", "=", "scores", "+", "str", "(", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", ")", "\n", "\n", "test_log", "=", "open", "(", "osp", ".", "join", "(", "'./result'", ",", "'test_log.txt'", ")", ",", "'a'", ")", "\n", "test_log", ".", "write", "(", "scores", "+", "\"\\n\"", ")", "\n", "test_log", ".", "close", "(", ")", "\n", "return", "mIoUs", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou_best.main": [[71, 73], ["compute_iou_best.compute_mIoU"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.compute_mIoU"], ["", "def", "main", "(", "args", ")", ":", "\n", "   ", "compute_mIoU", "(", "args", ".", "gt_dir", ",", "args", ".", "pred_dir", ",", "args", ".", "devkit_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.train_ft_advent_caco.get_arguments": [[75, 179], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--autoaug\"", ",", "type", "=", "bool", ",", "default", "=", "AUTOAUG", ",", "help", "=", "\"use augmentation or not\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--autoaug_target\"", ",", "type", "=", "bool", ",", "default", "=", "AUTOAUG_TARGET", ",", "help", "=", "\"use augmentation or not\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"available options : DeepLab\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--target\"", ",", "type", "=", "str", ",", "default", "=", "TARGET", ",", "\n", "help", "=", "\"available options : cityscapes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "BATCH_SIZE", ",", "\n", "help", "=", "\"Number of images sent to the network in one step.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--iter-size\"", ",", "type", "=", "int", ",", "default", "=", "ITER_SIZE", ",", "\n", "help", "=", "\"Accumulate gradients for ITER_SIZE iterations.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-workers\"", ",", "type", "=", "int", ",", "default", "=", "NUM_WORKERS", ",", "\n", "help", "=", "\"number of workers for multithread dataloading.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--droprate\"", ",", "type", "=", "float", ",", "default", "=", "DROPRATE", ",", "\n", "help", "=", "\"DropRate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of source images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--crop-size\"", ",", "type", "=", "str", ",", "default", "=", "CROP_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of source images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY_TARGET", ",", "\n", "help", "=", "\"Path to the directory containing the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH_TARGET", ",", "\n", "help", "=", "\"Path to the file listing the images in the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size-target\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE_TARGET", ",", "\n", "help", "=", "\"Comma-separated string with height and width of target images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--is-training\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to updates the running means and variances during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE", ",", "\n", "help", "=", "\"Base learning rate for training with polynomial decay.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate-D\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE_D", ",", "\n", "help", "=", "\"Base learning rate for discriminator.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-seg\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_SEG", ",", "\n", "help", "=", "\"lambda_seg.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-adv-target1\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_ADV_TARGET1", ",", "\n", "help", "=", "\"lambda_adv for adversarial training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-adv-target2\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_ADV_TARGET2", ",", "\n", "help", "=", "\"lambda_adv for adversarial training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-me-target\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_ME_TARGET", ",", "\n", "help", "=", "\"lambda_me for minimize cross entropy loss on target.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-kl-target\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_KL_TARGET", ",", "\n", "help", "=", "\"lambda_me for minimize kl loss on target.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "MOMENTUM", ",", "\n", "help", "=", "\"Momentum component of the optimiser.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max-value\"", ",", "type", "=", "float", ",", "default", "=", "MAX_VALUE", ",", "\n", "help", "=", "\"Max Value of Class Weight.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--norm-style\"", ",", "type", "=", "str", ",", "default", "=", "NORM_STYLE", ",", "\n", "help", "=", "\"Norm Style in the final classifier.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--not-restore-last\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to not restore last (FC) layers.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS", ",", "\n", "help", "=", "\"Number of training steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps-stop\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS_STOP", ",", "\n", "help", "=", "\"Number of training steps for early stopping.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--power\"", ",", "type", "=", "float", ",", "default", "=", "POWER", ",", "\n", "help", "=", "\"Decay parameter to compute the learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-mirror\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly mirror the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-scale\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly scale the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fp16\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Use FP16.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-seed\"", ",", "type", "=", "int", ",", "default", "=", "RANDOM_SEED", ",", "\n", "help", "=", "\"Random seed to have reproducible results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-num-images\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_NUM_IMAGES", ",", "\n", "help", "=", "\"How many images to save.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-pred-every\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_PRED_EVERY", ",", "\n", "help", "=", "\"Save summaries and checkpoint every often.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--snapshot-dir\"", ",", "type", "=", "str", ",", "default", "=", "SNAPSHOT_DIR", ",", "\n", "help", "=", "\"Where to save snapshots of the model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight-decay\"", ",", "type", "=", "float", ",", "default", "=", "WEIGHT_DECAY", ",", "\n", "help", "=", "\"Regularisation parameter for L2-loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warm-up\"", ",", "type", "=", "float", ",", "default", "=", "WARM_UP", ",", "help", "=", "'warm up iteration'", ")", "\n", "parser", ".", "add_argument", "(", "\"--threshold\"", ",", "type", "=", "float", ",", "default", "=", "THRESHOLD", ",", "help", "=", "'warm up iteration'", ")", "\n", "parser", ".", "add_argument", "(", "\"--cpu\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"choose to use cpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--class-balance\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"class balance.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use-se\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"use se block.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--only-hard-label\"", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "\"class balance.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_bn\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"train batch normalization.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sync_bn\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"sync batch normalization.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--often-balance\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"balance the apperance times.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu-ids\"", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'choose gpus'", ")", "\n", "parser", ".", "add_argument", "(", "\"--tensorboard\"", ",", "action", "=", "'store_false'", ",", "help", "=", "\"choose whether to use tensorboard.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--log-dir\"", ",", "type", "=", "str", ",", "default", "=", "LOG_DIR", ",", "\n", "help", "=", "\"Path to the directory of log.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose adaptation set.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.train_ft_advent_caco.main": [[191, 360], ["map", "map", "map", "args.gpu_ids.split", "len", "print", "torch.utils.data.DataLoader", "enumerate", "torch.utils.data.DataLoader", "enumerate", "range", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "args.input_size.split", "args.crop_size.split", "args.input_size_target.split", "int", "trainer_caco.AD_Trainer", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "trainer_caco.AD_Trainer", "dataset.cityscapes_pseudo_dataset.cityscapes_pseudo_DataSet", "dataset.cityscapes_dataset.cityscapesDataSet", "tensorboardX.SummaryWriter", "utils.tool.adjust_learning_rate", "range", "print", "print", "tensorboardX.SummaryWriter.close", "numpy.random.seed", "gpu_ids.append", "os.path.basename", "os.path.basename", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "enumerate.__next__", "enumerate.__next__", "images.cuda.cuda", "image_aug1.cuda.cuda", "labels.long().cuda.long().cuda", "label_label_aug1.long().cuda.long().cuda", "images_t.cuda.cuda", "labels_t.long().cuda.long().cuda", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "utils.tool.Timer", "trainer_caco.AD_Trainer.gen_update", "scalar_info.items", "trainer_caco.AD_Trainer.G.state_dict", "os.join", "trainer_caco.AD_Trainer.D1.state_dict", "os.join", "trainer_caco.AD_Trainer.D2.state_dict", "os.join", "trainer_caco.AD_Trainer.G.state_dict", "os.join", "trainer_caco.AD_Trainer.D1.state_dict", "os.join", "trainer_caco.AD_Trainer.D2.state_dict", "os.join", "labels.long().cuda.long", "label_label_aug1.long().cuda.long", "labels_t.long().cuda.long", "loss_seg1.item", "loss_seg2.item", "trainer_caco.AD_Trainer.dis_update", "loss_D1.item", "loss_D2.item", "tensorboardX.SummaryWriter.add_scalar", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.adjust_learning_rate", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.__next__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.__next__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.AD_Trainer.gen_update", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.trainer_base.AD_Trainer.dis_update"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the training.\"\"\"", "\n", "\n", "# INIT", "\n", "_init_fn", "=", "None", "\n", "if", "args", ".", "random_seed", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "args", ".", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "random_seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "random_seed", ")", "\n", "\n", "def", "_init_fn", "(", "worker_id", ")", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "args", ".", "random_seed", "+", "worker_id", ")", "\n", "\n", "", "", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size", ".", "split", "(", "','", ")", ")", "\n", "args", ".", "input_size", "=", "(", "w", ",", "h", ")", "\n", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "crop_size", ".", "split", "(", "','", ")", ")", "\n", "args", ".", "crop_size", "=", "(", "h", ",", "w", ")", "\n", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size_target", ".", "split", "(", "','", ")", ")", "\n", "args", ".", "input_size_target", "=", "(", "w", ",", "h", ")", "\n", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "\n", "str_ids", "=", "args", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "        ", "gid", "=", "int", "(", "str_id", ")", "\n", "if", "gid", ">=", "0", ":", "\n", "            ", "gpu_ids", ".", "append", "(", "gid", ")", "\n", "\n", "", "", "num_gpu", "=", "len", "(", "gpu_ids", ")", "\n", "args", ".", "multi_gpu", "=", "False", "\n", "if", "num_gpu", ">", "1", ":", "\n", "        ", "args", ".", "multi_gpu", "=", "True", "\n", "Trainer", "=", "AD_Trainer", "(", "args", ")", "\n", "Trainer", ".", "G", "=", "torch", ".", "nn", ".", "DataParallel", "(", "Trainer", ".", "G", ",", "gpu_ids", ")", "\n", "Trainer", ".", "D1", "=", "torch", ".", "nn", ".", "DataParallel", "(", "Trainer", ".", "D1", ",", "gpu_ids", ")", "\n", "Trainer", ".", "D2", "=", "torch", ".", "nn", ".", "DataParallel", "(", "Trainer", ".", "D2", ",", "gpu_ids", ")", "\n", "", "else", ":", "\n", "        ", "Trainer", "=", "AD_Trainer", "(", "args", ")", "\n", "\n", "", "print", "(", "Trainer", ")", "\n", "\n", "trainloader", "=", "data", ".", "DataLoader", "(", "\n", "cityscapes_pseudo_DataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "resize_size", "=", "args", ".", "input_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "scale", "=", "True", ",", "mirror", "=", "True", ",", "mean", "=", "IMG_MEAN", ",", "\n", "set", "=", "'train'", ",", "autoaug", "=", "args", ".", "autoaug", ",", "threshold", "=", "args", ".", "threshold", ")", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "worker_init_fn", "=", "_init_fn", ")", "\n", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "\n", "targetloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir_target", ",", "args", ".", "data_list_target", ",", "\n", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "resize_size", "=", "args", ".", "input_size_target", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "scale", "=", "False", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ",", "\n", "set", "=", "args", ".", "set", ",", "autoaug", "=", "args", ".", "autoaug_target", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "\n", "# set up tensor board", "\n", "if", "args", ".", "tensorboard", ":", "\n", "        ", "args", ".", "log_dir", "+=", "'/'", "+", "os", ".", "path", ".", "basename", "(", "args", ".", "snapshot_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "log_dir", ")", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "args", ".", "log_dir", ")", "\n", "\n", "", "for", "i_iter", "in", "range", "(", "args", ".", "num_steps", ")", ":", "\n", "\n", "        ", "loss_seg_value1", "=", "0", "\n", "loss_adv_target_value1", "=", "0", "\n", "loss_D_value1", "=", "0", "\n", "\n", "loss_seg_value2", "=", "0", "\n", "loss_adv_target_value2", "=", "0", "\n", "loss_D_value2", "=", "0", "\n", "\n", "\n", "adjust_learning_rate", "(", "Trainer", ".", "gen_opt", ",", "i_iter", ",", "args", ")", "\n", "#adjust_learning_rate_D(Trainer.dis1_opt, i_iter, args)", "\n", "#adjust_learning_rate_D(Trainer.dis2_opt, i_iter, args)", "\n", "\n", "for", "sub_i", "in", "range", "(", "args", ".", "iter_size", ")", ":", "\n", "\n", "# train G", "\n", "\n", "# train with source", "\n", "\n", "            ", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "_", ",", "batch_t", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "\n", "images", ",", "labels", ",", "_", ",", "_", ",", "image_aug1", ",", "label_label_aug1", "=", "batch", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "image_aug1", "=", "image_aug1", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "label_label_aug1", "=", "label_label_aug1", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "images_t", ",", "labels_t", ",", "_", ",", "_", "=", "batch_t", "\n", "images_t", "=", "images_t", ".", "cuda", "(", ")", "\n", "labels_t", "=", "labels_t", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "with", "Timer", "(", "\"Elapsed time in update: %f\"", ")", ":", "\n", "                ", "loss_seg1", ",", "loss_seg2", ",", "loss_adv_target1", ",", "loss_adv_target2", ",", "loss_me", ",", "loss_kl", ",", "pred1", ",", "pred2", ",", "pred_target1", ",", "pred_target2", ",", "val_loss", "=", "Trainer", ".", "gen_update", "(", "images", ",", "images_t", ",", "labels", ",", "labels_t", ",", "i_iter", ",", "image_aug1", ",", "label_label_aug1", ")", "\n", "loss_seg_value1", "+=", "loss_seg1", ".", "item", "(", ")", "/", "args", ".", "iter_size", "\n", "loss_seg_value2", "+=", "loss_seg2", ".", "item", "(", ")", "/", "args", ".", "iter_size", "\n", "loss_adv_target_value1", "+=", "loss_adv_target1", "/", "args", ".", "iter_size", "\n", "loss_adv_target_value2", "+=", "loss_adv_target2", "/", "args", ".", "iter_size", "\n", "loss_me_value", "=", "loss_me", "\n", "\n", "if", "args", ".", "lambda_adv_target1", ">", "0", "and", "args", ".", "lambda_adv_target2", ">", "0", ":", "\n", "                    ", "loss_D1", ",", "loss_D2", "=", "Trainer", ".", "dis_update", "(", "pred1", ",", "pred2", ",", "pred_target1", ",", "pred_target2", ")", "\n", "loss_D_value1", "+=", "loss_D1", ".", "item", "(", ")", "\n", "loss_D_value2", "+=", "loss_D2", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                    ", "loss_D_value1", "=", "0", "\n", "loss_D_value2", "=", "0", "\n", "\n", "", "", "", "del", "pred1", ",", "pred2", ",", "pred_target1", ",", "pred_target2", "\n", "\n", "if", "args", ".", "tensorboard", ":", "\n", "            ", "scalar_info", "=", "{", "\n", "'loss_seg1'", ":", "loss_seg_value1", ",", "\n", "'loss_seg2'", ":", "loss_seg_value2", ",", "\n", "'loss_adv_target1'", ":", "loss_adv_target_value1", ",", "\n", "'loss_adv_target2'", ":", "loss_adv_target_value2", ",", "\n", "'loss_me_target'", ":", "loss_me_value", ",", "\n", "'loss_kl_target'", ":", "loss_kl", ",", "\n", "'loss_D1'", ":", "loss_D_value1", ",", "\n", "'loss_D2'", ":", "loss_D_value2", ",", "\n", "'val_loss'", ":", "val_loss", ",", "\n", "}", "\n", "\n", "if", "i_iter", "%", "100", "==", "0", ":", "\n", "                ", "for", "key", ",", "val", "in", "scalar_info", ".", "items", "(", ")", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "key", ",", "val", ",", "i_iter", ")", "\n", "\n", "", "", "", "print", "(", "'exp = {}'", ".", "format", "(", "args", ".", "snapshot_dir", ")", ")", "\n", "print", "(", "\n", "'\\033[1m iter = %8d/%8d \\033[0m loss_seg1 = %.3f loss_seg2 = %.3f loss_me = %.3f  loss_kl = %.3f loss_adv1 = %.3f, loss_adv2 = %.3f loss_D1 = %.3f loss_D2 = %.3f, val_loss=%.3f'", "%", "(", "i_iter", ",", "args", ".", "num_steps", ",", "loss_seg_value1", ",", "loss_seg_value2", ",", "loss_me_value", ",", "loss_kl", ",", "loss_adv_target_value1", ",", "loss_adv_target_value2", ",", "loss_D_value1", ",", "loss_D_value2", ",", "val_loss", ")", ")", "\n", "\n", "# clear loss", "\n", "del", "loss_seg1", ",", "loss_seg2", ",", "loss_adv_target1", ",", "loss_adv_target2", ",", "loss_me", ",", "loss_kl", ",", "val_loss", "\n", "\n", "if", "i_iter", ">=", "args", ".", "num_steps_stop", "-", "1", ":", "\n", "            ", "print", "(", "'save model ...'", ")", "\n", "torch", ".", "save", "(", "Trainer", ".", "G", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps_stop", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "Trainer", ".", "D1", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps_stop", ")", "+", "'_D1.pth'", ")", ")", "\n", "torch", ".", "save", "(", "Trainer", ".", "D2", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps_stop", ")", "+", "'_D2.pth'", ")", ")", "\n", "break", "\n", "\n", "", "if", "i_iter", "%", "args", ".", "save_pred_every", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "torch", ".", "save", "(", "Trainer", ".", "G", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "Trainer", ".", "D1", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'_D1.pth'", ")", ")", "\n", "torch", ".", "save", "(", "Trainer", ".", "D2", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'_D2.pth'", ")", ")", "\n", "\n", "", "", "if", "args", ".", "tensorboard", ":", "\n", "        ", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.fast_hist": [[8, 11], ["numpy.bincount().reshape", "numpy.bincount", "a[].astype"], "function", ["None"], ["def", "fast_hist", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "k", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.per_class_iu": [[13, 15], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.label_mapping": [[17, 22], ["numpy.copy", "range", "numpy.array", "len"], "function", ["None"], ["", "def", "label_mapping", "(", "input", ",", "mapping", ")", ":", "\n", "    ", "output", "=", "np", ".", "copy", "(", "input", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "mapping", ")", ")", ":", "\n", "        ", "output", "[", "input", "==", "mapping", "[", "ind", "]", "[", "0", "]", "]", "=", "mapping", "[", "ind", "]", "[", "1", "]", "\n", "", "return", "np", ".", "array", "(", "output", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.compute_mIoU": [[24, 61], ["numpy.int", "print", "numpy.array", "numpy.array", "numpy.zeros", "os.path.join", "os.path.join", "open().read().splitlines", "open().read().splitlines", "range", "compute_iou.per_class_iu", "range", "print", "open", "json.load", "os.path.join", "os.path.join", "len", "numpy.array", "numpy.array", "compute_iou.label_mapping", "compute_iou.fast_hist", "print", "os.path.join", "open().read", "open().read", "PIL.Image.open", "PIL.Image.open", "len", "len", "print", "label_mapping.flatten", "np.array.flatten", "print", "str", "x.split", "len", "label_mapping.flatten", "np.array.flatten", "str", "round", "open", "open", "len", "len", "len", "round", "label_mapping.flatten", "np.array.flatten", "numpy.mean", "numpy.nanmean", "compute_iou.per_class_iu"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.per_class_iu", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.label_mapping", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.fast_hist", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.per_class_iu"], ["", "def", "compute_mIoU", "(", "gt_dir", ",", "pred_dir", ",", "devkit_dir", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    Compute IoU given the predicted colorized images and \n    \"\"\"", "\n", "with", "open", "(", "join", "(", "devkit_dir", ",", "'info.json'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "      ", "info", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "print", "(", "(", "'Num classes'", ",", "num_classes", ")", ")", "\n", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "mapping", "=", "np", ".", "array", "(", "info", "[", "'label2train'", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "\n", "image_path_list", "=", "join", "(", "devkit_dir", ",", "'val.txt'", ")", "\n", "label_path_list", "=", "join", "(", "devkit_dir", ",", "'label.txt'", ")", "\n", "gt_imgs", "=", "open", "(", "label_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "gt_imgs", "=", "[", "join", "(", "gt_dir", ",", "x", ")", "for", "x", "in", "gt_imgs", "]", "\n", "pred_imgs", "=", "open", "(", "image_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "pred_imgs", "=", "[", "join", "(", "pred_dir", ",", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "for", "x", "in", "pred_imgs", "]", "\n", "\n", "for", "ind", "in", "range", "(", "len", "(", "gt_imgs", ")", ")", ":", "\n", "        ", "pred", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "label_mapping", "(", "label", ",", "mapping", ")", "\n", "if", "len", "(", "label", ".", "shape", ")", "==", "3", "and", "label", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "            ", "label", "=", "label", "[", ":", ",", ":", ",", "0", "]", "\n", "", "if", "len", "(", "label", ".", "flatten", "(", ")", ")", "!=", "len", "(", "pred", ".", "flatten", "(", ")", ")", ":", "\n", "            ", "print", "(", "(", "'Skipping: len(gt) = {:d}, len(pred) = {:d}, {:s}, {:s}'", ".", "format", "(", "len", "(", "label", ".", "flatten", "(", ")", ")", ",", "len", "(", "pred", ".", "flatten", "(", ")", ")", ",", "gt_imgs", "[", "ind", "]", ",", "pred_imgs", "[", "ind", "]", ")", ")", ")", "\n", "continue", "\n", "", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "pred", ".", "flatten", "(", ")", ",", "num_classes", ")", "\n", "if", "ind", ">", "0", "and", "ind", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "ind", ",", "len", "(", "gt_imgs", ")", ",", "100", "*", "np", ".", "mean", "(", "per_class_iu", "(", "hist", ")", ")", ")", ")", ")", "\n", "\n", "", "", "mIoUs", "=", "per_class_iu", "(", "hist", ")", "\n", "for", "ind_class", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "print", "(", "(", "'===>'", "+", "name_classes", "[", "ind_class", "]", "+", "':\\t'", "+", "str", "(", "round", "(", "mIoUs", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", ")", "\n", "", "print", "(", "(", "'===> mIoU: '", "+", "str", "(", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", ")", ")", ")", "\n", "return", "mIoUs", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.main": [[63, 65], ["compute_iou.compute_mIoU"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.compute_iou.compute_mIoU"], ["", "def", "main", "(", "args", ")", ":", "\n", "   ", "compute_mIoU", "(", "args", ".", "gt_dir", ",", "args", ".", "pred_dir", ",", "args", ".", "devkit_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.generate_plabel_cityscapes.colorize_mask": [[56, 62], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.generate_plabel_cityscapes.get_arguments": [[63, 91], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"Model Choice (DeeplabMulti/DeeplabVGG/Oracle).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the Cityscapes dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batchsize\"", ",", "type", "=", "int", ",", "default", "=", "12", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose evaluation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "type", "=", "str", ",", "default", "=", "SAVE_PATH", ",", "\n", "help", "=", "\"Path to save result.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.generate_plabel_cityscapes.save_heatmap": [[92, 100], ["matplotlib.figure", "matplotlib.axis", "matplotlib.imshow", "plt.figure.colorbar", "plt.figure.savefig", "name.split"], "function", ["None"], ["", "def", "save_heatmap", "(", "output_name", ")", ":", "\n", "    ", "output", ",", "name", "=", "output_name", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "heatmap", "=", "plt", ".", "imshow", "(", "output", ",", "cmap", "=", "'viridis'", ")", "\n", "fig", ".", "colorbar", "(", "heatmap", ")", "\n", "fig", ".", "savefig", "(", "'%s_heatmap.png'", "%", "(", "name", ".", "split", "(", "'.jpg'", ")", "[", "0", "]", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.generate_plabel_cityscapes.main": [[101, 226], ["generate_plabel_cityscapes.get_arguments", "os.path.join", "print", "print", "os.path.basename", "model.deeplab_vgg.DeeplabVGG.eval", "model.deeplab_vgg.DeeplabVGG.cuda", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.KLDivLoss", "enumerate", "os.path.dirname", "open", "yaml.load", "os.path.dirname", "os.path.exists", "os.makedirs", "model.deeplab_multi.DeeplabMulti", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "torch.load", "model.deeplab_vgg.DeeplabVGG.load_state_dict", "dataset.cityscapes_dataset.cityscapesDataSet", "dataset.cityscapes_dataset.cityscapesDataSet", "packaging.version.parse", "packaging.version.parse", "torch.Upsample", "torch.Upsample", "zip", "print", "image.cuda", "image2.cuda", "print", "interp().cpu().data.numpy.transpose", "numpy.max", "numpy.asarray", "range", "model.deeplab.Res_Deeplab", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "model.deeplab_vgg.DeeplabVGG.load_state_dict", "numpy.argmax", "generate_plabel_cityscapes.colorize_mask", "PIL.Image.fromarray", "Image.fromarray.save", "print", "colorize_mask.save", "matplotlib.figure", "matplotlib.axis", "matplotlib.imshow", "plt.figure.colorbar", "plt.figure.savefig", "model.deeplab_vgg.DeeplabVGG", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "torch.sum", "torch.sum", "torch.sum", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "interp().cpu().data.numpy.cpu().data.numpy", "heatmap_batch.cpu().data.numpy.cpu().data.numpy", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.cpu().data.numpy", "name[].split", "name[].split", "os.path.isdir", "os.mkdir", "numpy.max", "round", "round", "round", "round", "torch.nn.Softmax.", "nn.KLDivLoss.", "utils.tool.fliplr", "utils.tool.fliplr", "utils.tool.fliplr", "torch.nn.Softmax.", "torch.nn.Softmax.", "utils.tool.fliplr", "utils.tool.fliplr", "utils.tool.fliplr", "torch.nn.Softmax.", "torch.autograd.Variable().cuda", "torch.nn.LogSoftmax.", "torch.nn.Softmax.", "interp().cpu().data.numpy.cpu", "heatmap_batch.cpu().data.numpy.cpu", "torch.autograd.Variable", "nn.Upsample.cpu", "name_tmp.split", "name_tmp.split", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.scripts.train_caco.get_arguments", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.DeeplabMulti", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.Res_Deeplab", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.colorize_mask", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "\n", "args", "=", "get_arguments", "(", ")", "\n", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "restore_from", ")", ",", "'opts.yaml'", ")", "\n", "with", "open", "(", "config_path", ",", "'r'", ")", "as", "stream", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "stream", ")", "\n", "\n", "", "args", ".", "model", "=", "config", "[", "'model'", "]", "\n", "print", "(", "'ModelType:%s'", "%", "args", ".", "model", ")", "\n", "print", "(", "'NormType:%s'", "%", "config", "[", "'norm_style'", "]", ")", "\n", "gpu0", "=", "args", ".", "gpu", "\n", "batchsize", "=", "args", ".", "batchsize", "\n", "\n", "model_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "restore_from", ")", ")", "\n", "#args.save += model_name", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "'DeepLab'", ":", "\n", "        ", "model", "=", "DeeplabMulti", "(", "num_classes", "=", "args", ".", "num_classes", ",", "use_se", "=", "config", "[", "'use_se'", "]", ",", "train_bn", "=", "False", ",", "norm_style", "=", "config", "[", "'norm_style'", "]", ")", "\n", "", "elif", "args", ".", "model", "==", "'Oracle'", ":", "\n", "        ", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "==", "RESTORE_FROM", ":", "\n", "            ", "args", ".", "restore_from", "=", "RESTORE_FROM_ORC", "\n", "", "", "elif", "args", ".", "model", "==", "'DeeplabVGG'", ":", "\n", "        ", "model", "=", "DeeplabVGG", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "==", "RESTORE_FROM", ":", "\n", "            ", "args", ".", "restore_from", "=", "RESTORE_FROM_VGG", "\n", "\n", "", "", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "        ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "args", ".", "restore_from", ")", "\n", "", "else", ":", "\n", "        ", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "\n", "", "try", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "", "except", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "gpu0", ")", "\n", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "512", ",", "1024", ")", ",", "resize_size", "=", "(", "1024", ",", "512", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "scale", "=", "1.25", "\n", "testloader2", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "round", "(", "512", "*", "scale", ")", ",", "round", "(", "1024", "*", "scale", ")", ")", ",", "resize_size", "=", "(", "round", "(", "1024", "*", "scale", ")", ",", "round", "(", "512", "*", "scale", ")", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "\n", "if", "version", ".", "parse", "(", "torch", ".", "__version__", ")", ">=", "version", ".", "parse", "(", "'0.4.0'", ")", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "sm", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "log_sm", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "kl_distance", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'none'", ")", "\n", "\n", "for", "index", ",", "img_data", "in", "enumerate", "(", "zip", "(", "testloader", ",", "testloader2", ")", ")", ":", "\n", "        ", "batch", ",", "batch2", "=", "img_data", "\n", "image", ",", "_", ",", "_", ",", "name", "=", "batch", "\n", "image2", ",", "_", ",", "_", ",", "name2", "=", "batch2", "\n", "print", "(", "image", ".", "shape", ")", "\n", "\n", "inputs", "=", "image", ".", "cuda", "(", ")", "\n", "inputs2", "=", "image2", ".", "cuda", "(", ")", "\n", "print", "(", "'\\r>>>>Extracting feature...%04d/%04d'", "%", "(", "index", "*", "batchsize", ",", "NUM_STEPS", ")", ",", "end", "=", "''", ")", "\n", "if", "args", ".", "model", "==", "'DeepLab'", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output1", ",", "output2", "=", "model", "(", "inputs", ")", "\n", "output_batch", "=", "interp", "(", "sm", "(", "0.5", "*", "output1", "+", "output2", ")", ")", "\n", "\n", "heatmap_batch", "=", "torch", ".", "sum", "(", "kl_distance", "(", "log_sm", "(", "output1", ")", ",", "sm", "(", "output2", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "output1", ",", "output2", "=", "model", "(", "fliplr", "(", "inputs", ")", ")", "\n", "output1", ",", "output2", "=", "fliplr", "(", "output1", ")", ",", "fliplr", "(", "output2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.5", "*", "output1", "+", "output2", ")", ")", "\n", "del", "output1", ",", "output2", ",", "inputs", "\n", "\n", "output1", ",", "output2", "=", "model", "(", "inputs2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.5", "*", "output1", "+", "output2", ")", ")", "\n", "output1", ",", "output2", "=", "model", "(", "fliplr", "(", "inputs2", ")", ")", "\n", "output1", ",", "output2", "=", "fliplr", "(", "output1", ")", ",", "fliplr", "(", "output2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.5", "*", "output1", "+", "output2", ")", ")", "\n", "del", "output1", ",", "output2", ",", "inputs2", "\n", "output_batch", "=", "output_batch", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "heatmap_batch", "=", "heatmap_batch", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "", "elif", "args", ".", "model", "==", "'DeeplabVGG'", "or", "args", ".", "model", "==", "'Oracle'", ":", "\n", "            ", "output_batch", "=", "model", "(", "Variable", "(", "image", ")", ".", "cuda", "(", ")", ")", "\n", "output_batch", "=", "interp", "(", "output_batch", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "#output_batch = output_batch.transpose(0,2,3,1)", "\n", "#output_batch = np.asarray(np.argmax(output_batch, axis=3), dtype=np.uint8)", "\n", "", "output_batch", "=", "output_batch", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "score_batch", "=", "np", ".", "max", "(", "output_batch", ",", "axis", "=", "3", ")", "\n", "output_batch", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output_batch", ",", "axis", "=", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "#output_batch[score_batch<3.2] = 255  #3.2 = 4*0.8", "\n", "for", "i", "in", "range", "(", "output_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "output", "=", "output_batch", "[", "i", ",", ":", ",", ":", "]", "\n", "output_col", "=", "colorize_mask", "(", "output", ")", "\n", "output", "=", "Image", ".", "fromarray", "(", "output", ")", "\n", "\n", "name_tmp", "=", "name", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "dir_name", "=", "name", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "save_path", "=", "args", ".", "save", "+", "'/'", "+", "dir_name", "\n", "#save_path = re.replace(save_path, 'leftImg8bit', 'pseudo')", "\n", "#print(save_path)", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "", "output", ".", "save", "(", "'%s/%s'", "%", "(", "save_path", ",", "name_tmp", ")", ")", "\n", "print", "(", "'%s/%s'", "%", "(", "save_path", ",", "name_tmp", ")", ")", "\n", "output_col", ".", "save", "(", "'%s/%s_color.png'", "%", "(", "save_path", ",", "name_tmp", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "\n", "heatmap_tmp", "=", "heatmap_batch", "[", "i", ",", ":", ",", ":", "]", "/", "np", ".", "max", "(", "heatmap_batch", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "heatmap", "=", "plt", ".", "imshow", "(", "heatmap_tmp", ",", "cmap", "=", "'viridis'", ")", "\n", "fig", ".", "colorbar", "(", "heatmap", ")", "\n", "fig", ".", "savefig", "(", "'%s/%s_heatmap.png'", "%", "(", "save_path", ",", "name_tmp", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "\n", "", "", "return", "args", ".", "save", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes.colorize_mask": [[52, 58], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes.get_arguments": [[59, 87], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"Model Choice (DeeplabMulti/DeeplabVGG/Oracle).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the Cityscapes dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batchsize\"", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose evaluation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "type", "=", "str", ",", "default", "=", "SAVE_PATH", ",", "\n", "help", "=", "\"Path to save result.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes.save": [[88, 96], ["evaluate_cityscapes.colorize_mask", "PIL.Image.fromarray", "Image.fromarray.save", "colorize_mask.save", "name.split"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.colorize_mask", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save"], ["", "def", "save", "(", "output_name", ")", ":", "\n", "    ", "output", ",", "name", "=", "output_name", "\n", "output_col", "=", "colorize_mask", "(", "output", ")", "\n", "output", "=", "Image", ".", "fromarray", "(", "output", ")", "\n", "\n", "output", ".", "save", "(", "'%s'", "%", "(", "name", ")", ")", "\n", "output_col", ".", "save", "(", "'%s_color.png'", "%", "(", "name", ".", "split", "(", "'.jpg'", ")", "[", "0", "]", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes.save_heatmap": [[97, 105], ["matplotlib.figure", "matplotlib.axis", "matplotlib.imshow", "plt.figure.savefig", "name.split"], "function", ["None"], ["", "def", "save_heatmap", "(", "output_name", ")", ":", "\n", "    ", "output", ",", "name", "=", "output_name", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "heatmap", "=", "plt", ".", "imshow", "(", "output", ",", "cmap", "=", "'viridis'", ")", "\n", "#fig.colorbar(heatmap)", "\n", "fig", ".", "savefig", "(", "'%s_heatmap.png'", "%", "(", "name", ".", "split", "(", "'.jpg'", ")", "[", "0", "]", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes.save_scoremap": [[106, 114], ["matplotlib.figure", "matplotlib.axis", "matplotlib.imshow", "plt.figure.savefig", "name.split"], "function", ["None"], ["", "def", "save_scoremap", "(", "output_name", ")", ":", "\n", "    ", "output", ",", "name", "=", "output_name", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "heatmap", "=", "plt", ".", "imshow", "(", "output", ",", "cmap", "=", "'viridis'", ")", "\n", "#fig.colorbar(heatmap)", "\n", "fig", ".", "savefig", "(", "'%s_scoremap.png'", "%", "(", "name", ".", "split", "(", "'.jpg'", ")", "[", "0", "]", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes.main": [[115, 252], ["evaluate_cityscapes.get_arguments", "os.path.join", "print", "print", "os.path.basename", "model.deeplab_vgg.DeeplabVGG.eval", "model.deeplab_vgg.DeeplabVGG.cuda", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.KLDivLoss", "enumerate", "os.path.dirname", "open", "yaml.load", "os.path.dirname", "os.path.exists", "os.makedirs", "model.deeplab_multi.DeeplabMulti", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "torch.load", "model.deeplab_vgg.DeeplabVGG.load_state_dict", "dataset.cityscapes_dataset.cityscapesDataSet", "dataset.cityscapes_dataset.cityscapesDataSet", "dataset.cityscapes_dataset.cityscapesDataSet", "packaging.version.parse", "packaging.version.parse", "torch.Upsample", "torch.Upsample", "zip", "image.cuda", "image2.cuda", "print", "interp().cpu().data.numpy.transpose", "numpy.asarray", "numpy.asarray", "range", "model.deeplab.Res_Deeplab", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "model.deeplab_vgg.DeeplabVGG.load_state_dict", "numpy.max", "numpy.argmax", "output_iterator.append", "heatmap_iterator.append", "scoremap_iterator.append", "multiprocessing.Pool", "p.map", "p.map", "p.map", "model.deeplab_vgg.DeeplabVGG", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "interp().cpu().data.numpy.cpu().data.numpy", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "heatmap_batch.cpu().data.numpy.cpu().data.numpy", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.cpu().data.numpy", "name[].split", "zip", "zip", "zip", "round", "round", "round", "round", "round", "round", "round", "round", "torch.nn.Softmax.", "utils.tool.fliplr", "utils.tool.fliplr", "utils.tool.fliplr", "torch.nn.Softmax.", "torch.nn.Softmax.", "utils.tool.fliplr", "utils.tool.fliplr", "utils.tool.fliplr", "torch.nn.Softmax.", "nn.KLDivLoss.", "torch.autograd.Variable().cuda", "numpy.max", "torch.nn.LogSoftmax.", "torch.nn.Softmax.", "numpy.max", "interp().cpu().data.numpy.cpu", "heatmap_batch.cpu().data.numpy.cpu", "torch.autograd.Variable", "nn.Upsample.cpu", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.scripts.train_caco.get_arguments", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.DeeplabMulti", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.Res_Deeplab", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "args", "=", "get_arguments", "(", ")", "\n", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "restore_from", ")", ",", "'opts.yaml'", ")", "\n", "with", "open", "(", "config_path", ",", "'r'", ")", "as", "stream", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "stream", ")", "\n", "\n", "", "args", ".", "model", "=", "config", "[", "'model'", "]", "\n", "print", "(", "'ModelType:%s'", "%", "args", ".", "model", ")", "\n", "print", "(", "'NormType:%s'", "%", "config", "[", "'norm_style'", "]", ")", "\n", "gpu0", "=", "args", ".", "gpu", "\n", "batchsize", "=", "args", ".", "batchsize", "\n", "\n", "model_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "restore_from", ")", ")", "\n", "args", ".", "save", "+=", "model_name", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "'DeepLab'", ":", "\n", "        ", "model", "=", "DeeplabMulti", "(", "num_classes", "=", "args", ".", "num_classes", ",", "use_se", "=", "config", "[", "'use_se'", "]", ",", "train_bn", "=", "False", ",", "norm_style", "=", "config", "[", "'norm_style'", "]", ")", "\n", "", "elif", "args", ".", "model", "==", "'Oracle'", ":", "\n", "        ", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "==", "RESTORE_FROM", ":", "\n", "            ", "args", ".", "restore_from", "=", "RESTORE_FROM_ORC", "\n", "", "", "elif", "args", ".", "model", "==", "'DeeplabVGG'", ":", "\n", "        ", "model", "=", "DeeplabVGG", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "==", "RESTORE_FROM", ":", "\n", "            ", "args", ".", "restore_from", "=", "RESTORE_FROM_VGG", "\n", "\n", "", "", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "        ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "args", ".", "restore_from", ")", "\n", "", "else", ":", "\n", "        ", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "\n", "", "try", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "", "except", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "#model = torch.nn.DataParallel(model)", "\n", "", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "gpu0", ")", "\n", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "512", ",", "1024", ")", ",", "resize_size", "=", "(", "1024", ",", "512", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "scale", "=", "1.25", "\n", "testloader2", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "round", "(", "512", "*", "scale", ")", ",", "round", "(", "1024", "*", "scale", ")", ")", ",", "resize_size", "=", "(", "round", "(", "1024", "*", "scale", ")", ",", "round", "(", "512", "*", "scale", ")", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "scale", "=", "0.9", "\n", "testloader3", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "round", "(", "512", "*", "scale", ")", ",", "round", "(", "1024", "*", "scale", ")", ")", ",", "resize_size", "=", "(", "round", "(", "1024", "*", "scale", ")", ",", "round", "(", "512", "*", "scale", ")", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "\n", "if", "version", ".", "parse", "(", "torch", ".", "__version__", ")", ">=", "version", ".", "parse", "(", "'0.4.0'", ")", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "sm", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "log_sm", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "kl_distance", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'none'", ")", "\n", "\n", "for", "index", ",", "img_data", "in", "enumerate", "(", "zip", "(", "testloader", ",", "testloader2", ",", "testloader3", ")", ")", ":", "\n", "        ", "batch", ",", "batch2", ",", "batch3", "=", "img_data", "\n", "image", ",", "_", ",", "_", ",", "name", "=", "batch", "\n", "image2", ",", "_", ",", "_", ",", "name2", "=", "batch2", "\n", "#image3, _, _, name3 = batch3", "\n", "\n", "inputs", "=", "image", ".", "cuda", "(", ")", "\n", "inputs2", "=", "image2", ".", "cuda", "(", ")", "\n", "#inputs3 = Variable(image3).cuda()", "\n", "print", "(", "'\\r>>>>Extracting feature...%03d/%03d'", "%", "(", "index", "*", "batchsize", ",", "NUM_STEPS", ")", ",", "end", "=", "''", ")", "\n", "if", "args", ".", "model", "==", "'DeepLab'", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output1", ",", "output2", "=", "model", "(", "inputs", ")", "\n", "output_batch", "=", "interp", "(", "sm", "(", "0.5", "*", "output1", "+", "output2", ")", ")", "\n", "heatmap_output1", ",", "heatmap_output2", "=", "output1", ",", "output2", "\n", "#output_batch = interp(sm(output1))", "\n", "#output_batch = interp(sm(output2))", "\n", "output1", ",", "output2", "=", "model", "(", "fliplr", "(", "inputs", ")", ")", "\n", "output1", ",", "output2", "=", "fliplr", "(", "output1", ")", ",", "fliplr", "(", "output2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.5", "*", "output1", "+", "output2", ")", ")", "\n", "heatmap_output1", ",", "heatmap_output2", "=", "heatmap_output1", "+", "output1", ",", "heatmap_output2", "+", "output2", "\n", "#output_batch += interp(sm(output1))", "\n", "#output_batch += interp(sm(output2))", "\n", "del", "output1", ",", "output2", ",", "inputs", "\n", "\n", "output1", ",", "output2", "=", "model", "(", "inputs2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.5", "*", "output1", "+", "output2", ")", ")", "\n", "#output_batch += interp(sm(output1))", "\n", "#output_batch += interp(sm(output2))", "\n", "output1", ",", "output2", "=", "model", "(", "fliplr", "(", "inputs2", ")", ")", "\n", "output1", ",", "output2", "=", "fliplr", "(", "output1", ")", ",", "fliplr", "(", "output2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.5", "*", "output1", "+", "output2", ")", ")", "\n", "#output_batch += interp(sm(output1))", "\n", "#output_batch += interp(sm(output2))", "\n", "del", "output1", ",", "output2", ",", "inputs2", "\n", "output_batch", "=", "output_batch", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "heatmap_batch", "=", "torch", ".", "sum", "(", "kl_distance", "(", "log_sm", "(", "heatmap_output1", ")", ",", "sm", "(", "heatmap_output2", ")", ")", ",", "dim", "=", "1", ")", "\n", "heatmap_batch", "=", "torch", ".", "log", "(", "1", "+", "10", "*", "heatmap_batch", ")", "# for visualization", "\n", "heatmap_batch", "=", "heatmap_batch", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "#output1, output2 = model(inputs3)", "\n", "#output_batch += interp(sm(0.5* output1 + output2)).cpu().data.numpy()", "\n", "#output1, output2 = model(fliplr(inputs3))", "\n", "#output1, output2 = fliplr(output1), fliplr(output2)", "\n", "#output_batch += interp(sm(0.5 * output1 + output2)).cpu().data.numpy()", "\n", "#del output1, output2, inputs3", "\n", "", "", "elif", "args", ".", "model", "==", "'DeeplabVGG'", "or", "args", ".", "model", "==", "'Oracle'", ":", "\n", "            ", "output_batch", "=", "model", "(", "Variable", "(", "image", ")", ".", "cuda", "(", ")", ")", "\n", "output_batch", "=", "interp", "(", "output_batch", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "output_batch", "=", "output_batch", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "scoremap_batch", "=", "np", ".", "asarray", "(", "np", ".", "max", "(", "output_batch", ",", "axis", "=", "3", ")", ")", "\n", "output_batch", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output_batch", ",", "axis", "=", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "output_iterator", "=", "[", "]", "\n", "heatmap_iterator", "=", "[", "]", "\n", "scoremap_iterator", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "output_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "output_iterator", ".", "append", "(", "output_batch", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "heatmap_iterator", ".", "append", "(", "heatmap_batch", "[", "i", ",", ":", ",", ":", "]", "/", "np", ".", "max", "(", "heatmap_batch", "[", "i", ",", ":", ",", ":", "]", ")", ")", "\n", "scoremap_iterator", ".", "append", "(", "1", "-", "scoremap_batch", "[", "i", ",", ":", ",", ":", "]", "/", "np", ".", "max", "(", "scoremap_batch", "[", "i", ",", ":", ",", ":", "]", ")", ")", "\n", "name_tmp", "=", "name", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "name", "[", "i", "]", "=", "'%s/%s'", "%", "(", "args", ".", "save", ",", "name_tmp", ")", "\n", "", "with", "Pool", "(", "4", ")", "as", "p", ":", "\n", "            ", "p", ".", "map", "(", "save", ",", "zip", "(", "output_iterator", ",", "name", ")", ")", "\n", "p", ".", "map", "(", "save_heatmap", ",", "zip", "(", "heatmap_iterator", ",", "name", ")", ")", "\n", "p", ".", "map", "(", "save_scoremap", ",", "zip", "(", "scoremap_iterator", ",", "name", ")", ")", "\n", "\n", "", "del", "output_batch", "\n", "\n", "\n", "", "return", "args", ".", "save", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.colorize_mask": [[54, 60], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.get_arguments": [[61, 89], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"Model Choice (DeeplabMulti/DeeplabVGG/Oracle).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the Cityscapes dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batchsize\"", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose evaluation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "type", "=", "str", ",", "default", "=", "SAVE_PATH", ",", "\n", "help", "=", "\"Path to save result.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save": [[90, 98], ["evaluate_cityscapes_advent_best.colorize_mask", "PIL.Image.fromarray", "Image.fromarray.save", "colorize_mask.save", "name.split"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.colorize_mask", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save"], ["", "def", "save", "(", "output_name", ")", ":", "\n", "    ", "output", ",", "name", "=", "output_name", "\n", "output_col", "=", "colorize_mask", "(", "output", ")", "\n", "output", "=", "Image", ".", "fromarray", "(", "output", ")", "\n", "\n", "output", ".", "save", "(", "'%s'", "%", "(", "name", ")", ")", "\n", "output_col", ".", "save", "(", "'%s_color.png'", "%", "(", "name", ".", "split", "(", "'.jpg'", ")", "[", "0", "]", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save_heatmap": [[99, 107], ["matplotlib.figure", "matplotlib.axis", "matplotlib.imshow", "plt.figure.savefig", "name.split"], "function", ["None"], ["", "def", "save_heatmap", "(", "output_name", ")", ":", "\n", "    ", "output", ",", "name", "=", "output_name", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "heatmap", "=", "plt", ".", "imshow", "(", "output", ",", "cmap", "=", "'viridis'", ")", "\n", "#fig.colorbar(heatmap)", "\n", "fig", ".", "savefig", "(", "'%s_heatmap.png'", "%", "(", "name", ".", "split", "(", "'.jpg'", ")", "[", "0", "]", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save_scoremap": [[108, 116], ["matplotlib.figure", "matplotlib.axis", "matplotlib.imshow", "plt.figure.savefig", "name.split"], "function", ["None"], ["", "def", "save_scoremap", "(", "output_name", ")", ":", "\n", "    ", "output", ",", "name", "=", "output_name", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "heatmap", "=", "plt", ".", "imshow", "(", "output", ",", "cmap", "=", "'viridis'", ")", "\n", "#fig.colorbar(heatmap)", "\n", "fig", ".", "savefig", "(", "'%s_scoremap.png'", "%", "(", "name", ".", "split", "(", "'.jpg'", ")", "[", "0", "]", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.main": [[117, 255], ["evaluate_cityscapes_advent_best.get_arguments", "os.path.join", "print", "print", "os.path.basename", "model.deeplab_vgg.DeeplabVGG.eval", "model.deeplab_vgg.DeeplabVGG.cuda", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.KLDivLoss", "enumerate", "os.path.dirname", "open", "yaml.load", "os.path.dirname", "os.path.exists", "os.makedirs", "model.deeplab_advent_test.get_deeplab_v2", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "torch.load", "model.deeplab_vgg.DeeplabVGG.load_state_dict", "dataset.cityscapes_dataset.cityscapesDataSet", "dataset.cityscapes_dataset.cityscapesDataSet", "dataset.cityscapes_dataset.cityscapesDataSet", "packaging.version.parse", "packaging.version.parse", "torch.Upsample", "torch.Upsample", "zip", "image.cuda", "image2.cuda", "print", "interp().cpu().data.numpy.transpose", "numpy.asarray", "numpy.asarray", "range", "model.deeplab.Res_Deeplab", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "model.deeplab_vgg.DeeplabVGG.load_state_dict", "numpy.max", "numpy.argmax", "output_iterator.append", "heatmap_iterator.append", "scoremap_iterator.append", "multiprocessing.Pool", "p.map", "p.map", "p.map", "model.deeplab_vgg.DeeplabVGG", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.", "interp().cpu().data.numpy.cpu().data.numpy", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "heatmap_batch.cpu().data.numpy.cpu().data.numpy", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.cpu().data.numpy", "name[].split", "zip", "zip", "zip", "round", "round", "round", "round", "round", "round", "round", "round", "torch.nn.Softmax.", "utils.tool.fliplr", "utils.tool.fliplr", "utils.tool.fliplr", "torch.nn.Softmax.", "torch.nn.Softmax.", "utils.tool.fliplr", "utils.tool.fliplr", "utils.tool.fliplr", "torch.nn.Softmax.", "nn.KLDivLoss.", "torch.autograd.Variable().cuda", "numpy.max", "torch.nn.LogSoftmax.", "torch.nn.Softmax.", "numpy.max", "interp().cpu().data.numpy.cpu", "heatmap_batch.cpu().data.numpy.cpu", "torch.autograd.Variable", "nn.Upsample.cpu", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.scripts.train_caco.get_arguments", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.eval", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.get_deeplab_v2", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.Res_Deeplab", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "args", "=", "get_arguments", "(", ")", "\n", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "restore_from", ")", ",", "'opts.yaml'", ")", "\n", "with", "open", "(", "config_path", ",", "'r'", ")", "as", "stream", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "stream", ")", "\n", "\n", "", "args", ".", "model", "=", "config", "[", "'model'", "]", "\n", "print", "(", "'ModelType:%s'", "%", "args", ".", "model", ")", "\n", "print", "(", "'NormType:%s'", "%", "config", "[", "'norm_style'", "]", ")", "\n", "gpu0", "=", "args", ".", "gpu", "\n", "batchsize", "=", "args", ".", "batchsize", "\n", "\n", "model_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "restore_from", ")", ")", "\n", "args", ".", "save", "+=", "model_name", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "'DeepLab'", ":", "\n", "# model = DeeplabMulti(num_classes=args.num_classes, use_se = config['use_se'], train_bn = False, norm_style = config['norm_style'])", "\n", "        ", "model", "=", "get_deeplab_v2", "(", "num_classes", "=", "19", ",", "multi_level", "=", "True", ")", "\n", "", "elif", "args", ".", "model", "==", "'Oracle'", ":", "\n", "        ", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "==", "RESTORE_FROM", ":", "\n", "            ", "args", ".", "restore_from", "=", "RESTORE_FROM_ORC", "\n", "", "", "elif", "args", ".", "model", "==", "'DeeplabVGG'", ":", "\n", "        ", "model", "=", "DeeplabVGG", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "==", "RESTORE_FROM", ":", "\n", "            ", "args", ".", "restore_from", "=", "RESTORE_FROM_VGG", "\n", "\n", "", "", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "        ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "args", ".", "restore_from", ")", "\n", "", "else", ":", "\n", "        ", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "\n", "", "try", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "", "except", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "#model = torch.nn.DataParallel(model)", "\n", "", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "gpu0", ")", "\n", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "512", ",", "1024", ")", ",", "resize_size", "=", "(", "1024", ",", "512", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "scale", "=", "1.20", "\n", "testloader2", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "round", "(", "512", "*", "scale", ")", ",", "round", "(", "1024", "*", "scale", ")", ")", ",", "resize_size", "=", "(", "round", "(", "1024", "*", "scale", ")", ",", "round", "(", "512", "*", "scale", ")", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "scale", "=", "0.9", "\n", "testloader3", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "round", "(", "512", "*", "scale", ")", ",", "round", "(", "1024", "*", "scale", ")", ")", ",", "resize_size", "=", "(", "round", "(", "1024", "*", "scale", ")", ",", "round", "(", "512", "*", "scale", ")", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "\n", "if", "version", ".", "parse", "(", "torch", ".", "__version__", ")", ">=", "version", ".", "parse", "(", "'0.4.0'", ")", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "sm", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "log_sm", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "kl_distance", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'none'", ")", "\n", "\n", "for", "index", ",", "img_data", "in", "enumerate", "(", "zip", "(", "testloader", ",", "testloader2", ",", "testloader3", ")", ")", ":", "\n", "        ", "batch", ",", "batch2", ",", "batch3", "=", "img_data", "\n", "image", ",", "_", ",", "_", ",", "name", "=", "batch", "\n", "image2", ",", "_", ",", "_", ",", "name2", "=", "batch2", "\n", "#image3, _, _, name3 = batch3", "\n", "\n", "inputs", "=", "image", ".", "cuda", "(", ")", "\n", "inputs2", "=", "image2", ".", "cuda", "(", ")", "\n", "#inputs3 = Variable(image3).cuda()", "\n", "print", "(", "'\\r>>>>Extracting feature...%03d/%03d'", "%", "(", "index", "*", "batchsize", ",", "NUM_STEPS", ")", ",", "end", "=", "''", ")", "\n", "if", "args", ".", "model", "==", "'DeepLab'", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output1", ",", "output2", "=", "model", "(", "inputs", ")", "\n", "output_batch", "=", "interp", "(", "sm", "(", "0.5", "*", "output1", "+", "output2", ")", ")", "\n", "heatmap_output1", ",", "heatmap_output2", "=", "output1", ",", "output2", "\n", "#output_batch = interp(sm(output1))", "\n", "#output_batch = interp(sm(output2))", "\n", "output1", ",", "output2", "=", "model", "(", "fliplr", "(", "inputs", ")", ")", "\n", "output1", ",", "output2", "=", "fliplr", "(", "output1", ")", ",", "fliplr", "(", "output2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.5", "*", "output1", "+", "output2", ")", ")", "\n", "heatmap_output1", ",", "heatmap_output2", "=", "heatmap_output1", "+", "output1", ",", "heatmap_output2", "+", "output2", "\n", "#output_batch += interp(sm(output1))", "\n", "#output_batch += interp(sm(output2))", "\n", "del", "output1", ",", "output2", ",", "inputs", "\n", "\n", "output1", ",", "output2", "=", "model", "(", "inputs2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.5", "*", "output1", "+", "output2", ")", ")", "\n", "#output_batch += interp(sm(output1))", "\n", "#output_batch += interp(sm(output2))", "\n", "output1", ",", "output2", "=", "model", "(", "fliplr", "(", "inputs2", ")", ")", "\n", "output1", ",", "output2", "=", "fliplr", "(", "output1", ")", ",", "fliplr", "(", "output2", ")", "\n", "output_batch", "+=", "interp", "(", "sm", "(", "0.5", "*", "output1", "+", "output2", ")", ")", "\n", "#output_batch += interp(sm(output1))", "\n", "#output_batch += interp(sm(output2))", "\n", "del", "output1", ",", "output2", ",", "inputs2", "\n", "output_batch", "=", "output_batch", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "heatmap_batch", "=", "torch", ".", "sum", "(", "kl_distance", "(", "log_sm", "(", "heatmap_output1", ")", ",", "sm", "(", "heatmap_output2", ")", ")", ",", "dim", "=", "1", ")", "\n", "heatmap_batch", "=", "torch", ".", "log", "(", "1", "+", "10", "*", "heatmap_batch", ")", "# for visualization", "\n", "heatmap_batch", "=", "heatmap_batch", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "#output1, output2 = model(inputs3)", "\n", "#output_batch += interp(sm(0.5* output1 + output2)).cpu().data.numpy()", "\n", "#output1, output2 = model(fliplr(inputs3))", "\n", "#output1, output2 = fliplr(output1), fliplr(output2)", "\n", "#output_batch += interp(sm(0.5 * output1 + output2)).cpu().data.numpy()", "\n", "#del output1, output2, inputs3", "\n", "", "", "elif", "args", ".", "model", "==", "'DeeplabVGG'", "or", "args", ".", "model", "==", "'Oracle'", ":", "\n", "            ", "output_batch", "=", "model", "(", "Variable", "(", "image", ")", ".", "cuda", "(", ")", ")", "\n", "output_batch", "=", "interp", "(", "output_batch", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "output_batch", "=", "output_batch", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "scoremap_batch", "=", "np", ".", "asarray", "(", "np", ".", "max", "(", "output_batch", ",", "axis", "=", "3", ")", ")", "\n", "output_batch", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output_batch", ",", "axis", "=", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "output_iterator", "=", "[", "]", "\n", "heatmap_iterator", "=", "[", "]", "\n", "scoremap_iterator", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "output_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "output_iterator", ".", "append", "(", "output_batch", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "heatmap_iterator", ".", "append", "(", "heatmap_batch", "[", "i", ",", ":", ",", ":", "]", "/", "np", ".", "max", "(", "heatmap_batch", "[", "i", ",", ":", ",", ":", "]", ")", ")", "\n", "scoremap_iterator", ".", "append", "(", "1", "-", "scoremap_batch", "[", "i", ",", ":", ",", ":", "]", "/", "np", ".", "max", "(", "scoremap_batch", "[", "i", ",", ":", ",", ":", "]", ")", ")", "\n", "name_tmp", "=", "name", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "name", "[", "i", "]", "=", "'%s/%s'", "%", "(", "args", ".", "save", ",", "name_tmp", ")", "\n", "", "with", "Pool", "(", "4", ")", "as", "p", ":", "\n", "            ", "p", ".", "map", "(", "save", ",", "zip", "(", "output_iterator", ",", "name", ")", ")", "\n", "p", ".", "map", "(", "save_heatmap", ",", "zip", "(", "heatmap_iterator", ",", "name", ")", ")", "\n", "p", ".", "map", "(", "save_scoremap", ",", "zip", "(", "scoremap_iterator", ",", "name", ")", ")", "\n", "\n", "", "del", "output_batch", "\n", "\n", "\n", "", "return", "args", ".", "save", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.Timer.__init__": [[43, 46], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "msg", "=", "msg", "\n", "self", ".", "start_time", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.Timer.__enter__": [[47, 49], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.Timer.__exit__": [[50, 52], ["print", "time.time"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "exc_tb", ")", ":", "\n", "        ", "print", "(", "self", ".", "msg", "%", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.lr_poly": [[4, 6], ["float"], "function", ["None"], ["def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.lr_step": [[7, 16], ["None"], "function", ["None"], ["", "def", "lr_step", "(", "base_lr", ",", "iter", ")", ":", "\n", "    ", "lr", "=", "base_lr", "\n", "if", "iter", ">", "40000", ":", "\n", "        ", "lr", "=", "base_lr", "*", "0.5", "\n", "", "if", "iter", ">", "60000", ":", "\n", "        ", "lr", "=", "base_lr", "*", "0.5", "*", "0.5", "\n", "", "if", "iter", ">", "70000", ":", "\n", "        ", "lr", "=", "base_lr", "*", "0.5", "*", "0.5", "*", "0.5", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.adjust_learning_rate": [[17, 27], ["print", "tool.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "args", ")", ":", "\n", "    ", "if", "i_iter", "<", "args", ".", "warm_up", ":", "\n", "        ", "lr", "=", "args", ".", "learning_rate", "*", "(", "0.1", "+", "0.9", "*", "i_iter", "/", "args", ".", "warm_up", ")", "\n", "", "else", ":", "\n", "        ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "#lr = lr_step(args.learning_rate, i_iter)", "\n", "", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "print", "(", "'-------lr_G: %f-------'", "%", "lr", ")", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.adjust_learning_rate_D": [[29, 32], ["tool.lr_poly"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.lr_poly"], ["", "", "def", "adjust_learning_rate_D", "(", "optimizer", ",", "i_iter", ",", "args", ")", ":", "\n", "    ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate_D", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "#if len(optimizer.param_groups) > 1:", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.fliplr": [[36, 41], ["torch.arange().long().cuda", "img.index_select", "torch.arange().long", "torch.arange", "img.size"], "function", ["None"], ["", "def", "fliplr", "(", "img", ")", ":", "\n", "    ", "'''flip horizontal'''", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "img", ".", "size", "(", "3", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "# N x C x H x W", "\n", "img_flip", "=", "img", ".", "index_select", "(", "3", ",", "inv_idx", ")", "\n", "return", "img_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.loss.CrossEntropy2d.__init__": [[9, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "super", "(", "CrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.loss.CrossEntropy2d.forward": [[14, 37], ["predict[].view.size", "predict[].view.transpose().transpose().contiguous", "predict[].view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "predict[].view.dim", "target.dim", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "target.data.dim", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predict[].view.transpose().transpose", "predict[].view.transpose", "target_mask.view().repeat", "target_mask.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Args:\n                predict:(n, c, h, w)\n                target:(n, h, w)\n                weight (Tensor, optional): a manual rescaling weight given to each class.\n                                           If given, has to be a Tensor of size \"nclasses\"\n        \"\"\"", "\n", "assert", "not", "target", ".", "requires_grad", "\n", "assert", "predict", ".", "dim", "(", ")", "==", "4", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "\n", "assert", "predict", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "assert", "predict", ".", "size", "(", "2", ")", "==", "target", ".", "size", "(", "1", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "2", ")", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "assert", "predict", ".", "size", "(", "3", ")", "==", "target", ".", "size", "(", "2", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "3", ")", ",", "target", ".", "size", "(", "3", ")", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "predict", ".", "size", "(", ")", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "self", ".", "ignore_label", ")", "\n", "target", "=", "target", "[", "target_mask", "]", "\n", "if", "not", "target", ".", "data", ".", "dim", "(", ")", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "predict", "=", "predict", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "predict", "=", "predict", "[", "target_mask", ".", "view", "(", "n", ",", "h", ",", "w", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "c", ")", "]", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "predict", ",", "target", ",", "weight", "=", "weight", ",", "size_average", "=", "self", ".", "size_average", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.loss.CaContrast_loss.__init__": [[43, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "temperature", "=", "0.07", ",", "contrast_mode", "=", "'one'", ",", "\n", "base_temperature", "=", "0.07", ")", ":", "\n", "        ", "super", "(", "CaContrast_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "contrast_mode", "=", "contrast_mode", "\n", "self", ".", "base_temperature", "=", "base_temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.loss.CaContrast_loss.forward": [[50, 144], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "mask.float().to.float().to.repeat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "loss.view().mean.view().mean.view().mean", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "len", "ValueError", "len", "ValueError", "len", "features.view.view.view", "len", "features_2.view.view.view", "ValueError", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "logits_max.detach", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "ValueError", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "loss.view().mean.view().mean.view", "str", "labels.contiguous().view.contiguous().view.contiguous().view", "labels_2.contiguous().view.contiguous().view.contiguous().view", "reliability.unsqueeze().repeat", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "mask.float().to.float().to.float().to", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "ValueError", "ValueError", "exp_logits.sum", "labels.contiguous().view.contiguous().view.contiguous", "labels_2.contiguous().view.contiguous().view.contiguous", "reliability.unsqueeze", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "mask.float().to.float().to.float", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "labels_2.contiguous().view.contiguous().view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "labels", "=", "None", ",", "mask", "=", "None", ",", "features_2", "=", "None", ",", "labels_2", "=", "None", ",", "reliability", "=", "None", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            features: hidden vector of shape [bsz, n_samples, n_views, ...].\n            labels: ground truth of shape [bsz, n_samples].\n            mask: contrastive mask of shape [bsz, n_samples, n_samples], mask_{i,j}=1 if sample j\n                has the same class as sample i. Can be asymmetric.\n            features_2: historical features\n            labels_2: corresponding labels\n            reliability: logits_mask_score of shape [bsz, n_samples]\n            cfg: configure file\n        Returns:\n            A loss scalar.\n        \"\"\"", "\n", "device", "=", "(", "torch", ".", "device", "(", "'cuda:'", "+", "str", "(", "cfg", ".", "gpu_ids", "[", "0", "]", ")", ")", "\n", "if", "features", ".", "is_cuda", "\n", "else", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "if", "len", "(", "features", ".", "shape", ")", "<", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'`features` needs to be [bsz, n_samples, n_views, ...],'", "\n", "'at least 4 dimensions are required'", ")", "\n", "", "if", "len", "(", "features_2", ".", "shape", ")", "<", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'`features` needs to be [bsz, n_samples, n_views, ...],'", "\n", "'at least 4 dimensions are required'", ")", "\n", "", "if", "len", "(", "features", ".", "shape", ")", ">", "4", ":", "\n", "            ", "features", "=", "features", ".", "view", "(", "features", ".", "shape", "[", "0", "]", ",", "features", ".", "shape", "[", "1", "]", ",", "features", ".", "shape", "[", "2", "]", ",", "-", "1", ")", "\n", "", "if", "len", "(", "features_2", ".", "shape", ")", ">", "4", ":", "\n", "            ", "features_2", "=", "features_2", ".", "view", "(", "features_2", ".", "shape", "[", "0", "]", ",", "features_2", ".", "shape", "[", "1", "]", ",", "features_2", ".", "shape", "[", "2", "]", ",", "-", "1", ")", "\n", "\n", "", "n_samples", "=", "features", ".", "shape", "[", "1", "]", "\n", "if", "labels", "is", "not", "None", "and", "mask", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot define both `labels` and `mask`'", ")", "\n", "", "elif", "labels", "is", "None", "and", "mask", "is", "None", ":", "\n", "# [bsz, bsz]", "\n", "            ", "mask", "=", "torch", ".", "eye", "(", "n_samples", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "labels", "is", "not", "None", ":", "\n", "            ", "labels", "=", "labels", ".", "contiguous", "(", ")", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "1", ")", "\n", "labels_2", "=", "labels_2", ".", "contiguous", "(", ")", ".", "view", "(", "labels_2", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "1", ")", "\n", "if", "labels", ".", "shape", "[", "1", "]", "!=", "n_samples", ":", "\n", "                ", "raise", "ValueError", "(", "'Num of labels does not match num of features'", ")", "\n", "", "if", "labels_2", ".", "shape", "[", "1", "]", "!=", "features_2", ".", "shape", "[", "1", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'Num of labels does not match num of features'", ")", "\n", "# [bsz, bsz]", "\n", "", "reliability_mask", "=", "reliability", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "n_samples", ",", "1", ")", "\n", "mask", "=", "torch", ".", "eq", "(", "labels", ",", "labels_2", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "# [bsz, bsz]", "\n", "            ", "mask", "=", "mask", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "", "contrast_count", "=", "features_2", ".", "shape", "[", "2", "]", "\n", "contrast_feature", "=", "torch", ".", "cat", "(", "torch", ".", "unbind", "(", "features_2", ",", "dim", "=", "2", ")", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "contrast_mode", "==", "'one'", ":", "\n", "            ", "anchor_feature", "=", "features", "[", ":", ",", ":", ",", "0", "]", "\n", "anchor_count", "=", "1", "\n", "", "elif", "self", ".", "contrast_mode", "==", "'all'", ":", "\n", "            ", "anchor_feature", "=", "contrast_feature", "\n", "anchor_count", "=", "contrast_count", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown mode: {}'", ".", "format", "(", "self", ".", "contrast_mode", ")", ")", "\n", "\n", "# compute logits", "\n", "", "anchor_dot_contrast", "=", "torch", ".", "div", "(", "\n", "torch", ".", "matmul", "(", "anchor_feature", ",", "contrast_feature", ".", "transpose", "(", "1", ",", "2", ")", ")", ",", "\n", "self", ".", "temperature", ")", "\n", "# for numerical stability", "\n", "logits_max", ",", "_", "=", "torch", ".", "max", "(", "anchor_dot_contrast", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "logits", "=", "anchor_dot_contrast", "-", "logits_max", ".", "detach", "(", ")", "\n", "\n", "# tile mask", "\n", "mask", "=", "mask", ".", "repeat", "(", "1", ",", "anchor_count", ",", "contrast_count", ")", "\n", "\n", "# mask-out self-contrast cases", "\n", "# logits_mask = torch.scatter(", "\n", "#     torch.ones_like(mask),", "\n", "#     2,", "\n", "#     torch.arange(n_samples * anchor_count).view(1, -1, 1).repeat(features.shape[0], 1, 1).to(device),", "\n", "#     0", "\n", "# )", "\n", "logits_mask", "=", "torch", ".", "ones_like", "(", "mask", ")", "\n", "mask", "=", "mask", "*", "logits_mask", "\n", "\n", "# compute log_prob", "\n", "exp_logits", "=", "torch", ".", "exp", "(", "logits", ")", "*", "logits_mask", "*", "reliability_mask", "\n", "log_prob", "=", "logits", "-", "torch", ".", "log", "(", "exp_logits", ".", "sum", "(", "2", ",", "keepdim", "=", "True", ")", "+", "1e-20", ")", "+", "torch", ".", "log", "(", "reliability_mask", "+", "1e-20", ")", "\n", "\n", "# compute mean of log-likelihood over positive", "\n", "mean_log_prob_pos", "=", "(", "mask", "*", "log_prob", ")", ".", "sum", "(", "2", ")", "/", "mask", ".", "shape", "[", "2", "]", "\n", "\n", "# loss", "\n", "loss", "=", "-", "(", "self", ".", "temperature", "/", "self", ".", "base_temperature", ")", "*", "mean_log_prob_pos", "\n", "loss", "=", "loss", ".", "view", "(", "features", ".", "shape", "[", "0", "]", ",", "anchor_count", ",", "n_samples", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.autoaugment.ImageNetPolicy.__init__": [[19, 50], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.4", ",", "\"posterize\"", ",", "8", ",", "0.6", ",", "\"rotate\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"posterize\"", ",", "7", ",", "0.6", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"posterize\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"rotate\"", ",", "3", ",", "0.6", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "8", ",", "0.4", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "0.4", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"rotate\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.0", ",", "\"equalize\"", ",", "7", ",", "0.8", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "1.0", ",", "\"color\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"color\"", ",", "8", ",", "0.8", ",", "\"solarize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"sharpness\"", ",", "7", ",", "0.6", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"shearX\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "0", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.autoaugment.ImageNetPolicy.__call__": [[53, 56], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.autoaugment.ImageNetPolicy.__repr__": [[57, 59], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment ImageNet Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.autoaugment.CIFAR10Policy.__init__": [[74, 105], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.1", ",", "\"invert\"", ",", "7", ",", "0.2", ",", "\"contrast\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"rotate\"", ",", "2", ",", "0.3", ",", "\"translateX\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"sharpness\"", ",", "1", ",", "0.9", ",", "\"sharpness\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"autocontrast\"", ",", "8", ",", "0.9", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "\"shearY\"", ",", "7", ",", "0.3", ",", "\"posterize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "3", ",", "0.6", ",", "\"brightness\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"sharpness\"", ",", "9", ",", "0.7", ",", "\"brightness\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.5", ",", "\"equalize\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"contrast\"", ",", "7", ",", "0.6", ",", "\"sharpness\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "\"color\"", ",", "7", ",", "0.5", ",", "\"translateX\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"equalize\"", ",", "7", ",", "0.4", ",", "\"autocontrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"translateY\"", ",", "3", ",", "0.2", ",", "\"sharpness\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"brightness\"", ",", "6", ",", "0.2", ",", "\"color\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"solarize\"", ",", "2", ",", "0.0", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "0", ",", "0.6", ",", "\"autocontrast\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "8", ",", "0.8", ",", "\"equalize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"color\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"autocontrast\"", ",", "4", ",", "0.2", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"brightness\"", ",", "3", ",", "0.7", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"solarize\"", ",", "5", ",", "0.9", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"translateY\"", ",", "9", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"autocontrast\"", ",", "2", ",", "0.8", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.1", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"translateY\"", ",", "9", ",", "0.9", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.autoaugment.CIFAR10Policy.__call__": [[108, 111], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.autoaugment.CIFAR10Policy.__repr__": [[112, 114], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment CIFAR10 Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.autoaugment.SVHNPolicy.__init__": [[129, 160], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.2", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "1", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.8", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.4", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "5", ",", "0.2", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "6", ",", "0.8", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "3", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.3", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"translateY\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "4", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"contrast\"", ",", "3", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"invert\"", ",", "5", ",", "0.0", ",", "\"translateY\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearY\"", ",", "6", ",", "0.4", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"shearY\"", ",", "7", ",", "0.9", ",", "\"translateX\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"shearX\"", ",", "6", ",", "0.6", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "\"solarize\"", ",", "2", ",", "0.6", ",", "\"translateY\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "4", ",", "0.8", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "9", ",", "0.8", ",", "\"translateY\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "5", ",", "0.7", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "2", ",", "0.1", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.autoaugment.SVHNPolicy.__call__": [[163, 166], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.autoaugment.SVHNPolicy.__repr__": [[167, 169], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment SVHN Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.autoaugment.SubPolicy.__init__": [[172, 233], ["numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.round().astype", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "img.convert().rotate", "PIL.Image.composite().convert", "img.transform", "img.transform", "img.transform", "img.transform", "autoaugment.SubPolicy.__init__.rotate_with_fill"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform"], ["    ", "def", "__init__", "(", "self", ",", "p1", ",", "operation1", ",", "magnitude_idx1", ",", "p2", ",", "operation2", ",", "magnitude_idx2", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "ranges", "=", "{", "\n", "\"shearX\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"shearY\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"translateX\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"translateY\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"rotate\"", ":", "np", ".", "linspace", "(", "0", ",", "30", ",", "10", ")", ",", "\n", "\"color\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"posterize\"", ":", "np", ".", "round", "(", "np", ".", "linspace", "(", "8", ",", "4", ",", "10", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "\"solarize\"", ":", "np", ".", "linspace", "(", "256", ",", "0", ",", "10", ")", ",", "\n", "\"contrast\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"sharpness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"brightness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"autocontrast\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"equalize\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"invert\"", ":", "[", "0", "]", "*", "10", "\n", "}", "\n", "\n", "# from https://stackoverflow.com/questions/5252170/specify-image-filling-color-when-rotating-in-python-with-pil-and-setting-expand", "\n", "def", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ":", "\n", "            ", "rot", "=", "img", ".", "convert", "(", "\"RGBA\"", ")", ".", "rotate", "(", "magnitude", ")", "\n", "return", "Image", ".", "composite", "(", "rot", ",", "Image", ".", "new", "(", "\"RGBA\"", ",", "rot", ".", "size", ",", "(", "128", ",", ")", "*", "4", ")", ",", "rot", ")", ".", "convert", "(", "img", ".", "mode", ")", "\n", "\n", "", "func", "=", "{", "\n", "\"shearX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"shearY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"translateX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "magnitude", "*", "img", ".", "size", "[", "0", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"translateY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "magnitude", "*", "img", ".", "size", "[", "1", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"rotate\"", ":", "lambda", "img", ",", "magnitude", ":", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ",", "\n", "# \"rotate\": lambda img, magnitude: img.rotate(magnitude * random.choice([-1, 1])),", "\n", "\"color\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"posterize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "posterize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"solarize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "solarize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"contrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"sharpness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"brightness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"autocontrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "autocontrast", "(", "img", ")", ",", "\n", "\"equalize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "equalize", "(", "img", ")", ",", "\n", "\"invert\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "invert", "(", "img", ")", "\n", "}", "\n", "\n", "# self.name = \"{}_{:.2f}_and_{}_{:.2f}\".format(", "\n", "#     operation1, ranges[operation1][magnitude_idx1],", "\n", "#     operation2, ranges[operation2][magnitude_idx2])", "\n", "self", ".", "p1", "=", "p1", "\n", "self", ".", "operation1", "=", "func", "[", "operation1", "]", "\n", "self", ".", "magnitude1", "=", "ranges", "[", "operation1", "]", "[", "magnitude_idx1", "]", "\n", "self", ".", "p2", "=", "p2", "\n", "self", ".", "operation2", "=", "func", "[", "operation2", "]", "\n", "self", ".", "magnitude2", "=", "ranges", "[", "operation2", "]", "[", "magnitude_idx2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.autoaugment.SubPolicy.__call__": [[235, 239], ["random.random", "autoaugment.SubPolicy.operation1", "random.random", "autoaugment.SubPolicy.operation2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p1", ":", "img", "=", "self", ".", "operation1", "(", "img", ",", "self", ".", "magnitude1", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p2", ":", "img", "=", "self", ".", "operation2", "(", "img", ",", "self", ".", "magnitude2", ")", "\n", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.loss_caco.CrossEntropy2d.__init__": [[9, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "super", "(", "CrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.loss_caco.CrossEntropy2d.forward": [[14, 37], ["predict[].view.size", "predict[].view.transpose().transpose().contiguous", "predict[].view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "predict[].view.dim", "target.dim", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "target.data.dim", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predict[].view.transpose().transpose", "predict[].view.transpose", "target_mask.view().repeat", "target_mask.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Args:\n                predict:(n, c, h, w)\n                target:(n, h, w)\n                weight (Tensor, optional): a manual rescaling weight given to each class.\n                                           If given, has to be a Tensor of size \"nclasses\"\n        \"\"\"", "\n", "assert", "not", "target", ".", "requires_grad", "\n", "assert", "predict", ".", "dim", "(", ")", "==", "4", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "\n", "assert", "predict", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "assert", "predict", ".", "size", "(", "2", ")", "==", "target", ".", "size", "(", "1", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "2", ")", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "assert", "predict", ".", "size", "(", "3", ")", "==", "target", ".", "size", "(", "2", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "3", ")", ",", "target", ".", "size", "(", "3", ")", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "predict", ".", "size", "(", ")", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "self", ".", "ignore_label", ")", "\n", "target", "=", "target", "[", "target_mask", "]", "\n", "if", "not", "target", ".", "data", ".", "dim", "(", ")", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "predict", "=", "predict", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "predict", "=", "predict", "[", "target_mask", ".", "view", "(", "n", ",", "h", ",", "w", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "c", ")", "]", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "predict", ",", "target", ",", "weight", "=", "weight", ",", "size_average", "=", "self", ".", "size_average", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.loss_caco.CaContrast_loss.__init__": [[40, 46], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "temperature", "=", "0.07", ",", "contrast_mode", "=", "'one'", ",", "\n", "base_temperature", "=", "0.07", ")", ":", "\n", "        ", "super", "(", "CaContrast_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "contrast_mode", "=", "contrast_mode", "\n", "self", ".", "base_temperature", "=", "base_temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.loss_caco.CaContrast_loss.forward": [[47, 141], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "mask.float().to.float().to.repeat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "loss.view().mean.view().mean.view().mean", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "len", "ValueError", "len", "ValueError", "len", "features.view.view.view", "len", "features_2.view.view.view", "ValueError", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "logits_max.detach", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "ValueError", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "loss.view().mean.view().mean.view", "str", "labels.contiguous().view.contiguous().view.contiguous().view", "labels_2.contiguous().view.contiguous().view.contiguous().view", "reliability.unsqueeze().repeat", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "mask.float().to.float().to.float().to", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "ValueError", "ValueError", "exp_logits.sum", "labels.contiguous().view.contiguous().view.contiguous", "labels_2.contiguous().view.contiguous().view.contiguous", "reliability.unsqueeze", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "mask.float().to.float().to.float", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "labels_2.contiguous().view.contiguous().view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "labels", "=", "None", ",", "mask", "=", "None", ",", "features_2", "=", "None", ",", "labels_2", "=", "None", ",", "reliability", "=", "None", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            features: hidden vector of shape [bsz, n_samples, n_views, ...].\n            labels: ground truth of shape [bsz, n_samples].\n            mask: contrastive mask of shape [bsz, n_samples, n_samples], mask_{i,j}=1 if sample j\n                has the same class as sample i. Can be asymmetric.\n            features_2: historical features\n            labels_2: corresponding labels\n            reliability: logits_mask_score of shape [bsz, n_samples]\n            cfg: configure file\n        Returns:\n            A loss scalar.\n        \"\"\"", "\n", "device", "=", "(", "torch", ".", "device", "(", "'cuda:'", "+", "str", "(", "cfg", ".", "GPU_ID", ")", ")", "\n", "if", "features", ".", "is_cuda", "\n", "else", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "if", "len", "(", "features", ".", "shape", ")", "<", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'`features` needs to be [bsz, n_samples, n_views, ...],'", "\n", "'at least 4 dimensions are required'", ")", "\n", "", "if", "len", "(", "features_2", ".", "shape", ")", "<", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'`features` needs to be [bsz, n_samples, n_views, ...],'", "\n", "'at least 4 dimensions are required'", ")", "\n", "", "if", "len", "(", "features", ".", "shape", ")", ">", "4", ":", "\n", "            ", "features", "=", "features", ".", "view", "(", "features", ".", "shape", "[", "0", "]", ",", "features", ".", "shape", "[", "1", "]", ",", "features", ".", "shape", "[", "2", "]", ",", "-", "1", ")", "\n", "", "if", "len", "(", "features_2", ".", "shape", ")", ">", "4", ":", "\n", "            ", "features_2", "=", "features_2", ".", "view", "(", "features_2", ".", "shape", "[", "0", "]", ",", "features_2", ".", "shape", "[", "1", "]", ",", "features_2", ".", "shape", "[", "2", "]", ",", "-", "1", ")", "\n", "\n", "", "n_samples", "=", "features", ".", "shape", "[", "1", "]", "\n", "if", "labels", "is", "not", "None", "and", "mask", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot define both `labels` and `mask`'", ")", "\n", "", "elif", "labels", "is", "None", "and", "mask", "is", "None", ":", "\n", "# [bsz, bsz]", "\n", "            ", "mask", "=", "torch", ".", "eye", "(", "n_samples", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "labels", "is", "not", "None", ":", "\n", "            ", "labels", "=", "labels", ".", "contiguous", "(", ")", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "1", ")", "\n", "labels_2", "=", "labels_2", ".", "contiguous", "(", ")", ".", "view", "(", "labels_2", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "1", ")", "\n", "if", "labels", ".", "shape", "[", "1", "]", "!=", "n_samples", ":", "\n", "                ", "raise", "ValueError", "(", "'Num of labels does not match num of features'", ")", "\n", "", "if", "labels_2", ".", "shape", "[", "1", "]", "!=", "features_2", ".", "shape", "[", "1", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'Num of labels does not match num of features'", ")", "\n", "# [bsz, bsz]", "\n", "", "reliability_mask", "=", "reliability", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "n_samples", ",", "1", ")", "\n", "mask", "=", "torch", ".", "eq", "(", "labels", ",", "labels_2", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "# [bsz, bsz]", "\n", "            ", "mask", "=", "mask", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "", "contrast_count", "=", "features_2", ".", "shape", "[", "2", "]", "\n", "contrast_feature", "=", "torch", ".", "cat", "(", "torch", ".", "unbind", "(", "features_2", ",", "dim", "=", "2", ")", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "contrast_mode", "==", "'one'", ":", "\n", "            ", "anchor_feature", "=", "features", "[", ":", ",", ":", ",", "0", "]", "\n", "anchor_count", "=", "1", "\n", "", "elif", "self", ".", "contrast_mode", "==", "'all'", ":", "\n", "            ", "anchor_feature", "=", "contrast_feature", "\n", "anchor_count", "=", "contrast_count", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown mode: {}'", ".", "format", "(", "self", ".", "contrast_mode", ")", ")", "\n", "\n", "# compute logits", "\n", "", "anchor_dot_contrast", "=", "torch", ".", "div", "(", "\n", "torch", ".", "matmul", "(", "anchor_feature", ",", "contrast_feature", ".", "transpose", "(", "1", ",", "2", ")", ")", ",", "\n", "self", ".", "temperature", ")", "\n", "# for numerical stability", "\n", "logits_max", ",", "_", "=", "torch", ".", "max", "(", "anchor_dot_contrast", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "logits", "=", "anchor_dot_contrast", "-", "logits_max", ".", "detach", "(", ")", "\n", "\n", "# tile mask", "\n", "mask", "=", "mask", ".", "repeat", "(", "1", ",", "anchor_count", ",", "contrast_count", ")", "\n", "\n", "# mask-out self-contrast cases", "\n", "# logits_mask = torch.scatter(", "\n", "#     torch.ones_like(mask),", "\n", "#     2,", "\n", "#     torch.arange(n_samples * anchor_count).view(1, -1, 1).repeat(features.shape[0], 1, 1).to(device),", "\n", "#     0", "\n", "# )", "\n", "logits_mask", "=", "torch", ".", "ones_like", "(", "mask", ")", "\n", "mask", "=", "mask", "*", "logits_mask", "\n", "\n", "# compute log_prob", "\n", "exp_logits", "=", "torch", ".", "exp", "(", "logits", ")", "*", "logits_mask", "*", "reliability_mask", "\n", "log_prob", "=", "logits", "-", "torch", ".", "log", "(", "exp_logits", ".", "sum", "(", "2", ",", "keepdim", "=", "True", ")", "+", "1e-20", ")", "+", "torch", ".", "log", "(", "reliability_mask", "+", "1e-20", ")", "\n", "\n", "# compute mean of log-likelihood over positive", "\n", "mean_log_prob_pos", "=", "(", "mask", "*", "log_prob", ")", ".", "sum", "(", "2", ")", "/", "mask", ".", "shape", "[", "2", "]", "\n", "\n", "# loss", "\n", "loss", "=", "-", "(", "self", ".", "temperature", "/", "self", ".", "base_temperature", ")", "*", "mean_log_prob_pos", "\n", "loss", "=", "loss", ".", "view", "(", "features", ".", "shape", "[", "0", "]", ",", "anchor_count", ",", "n_samples", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.autoaugment.ImageNetPolicy.__init__": [[19, 50], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.4", ",", "\"posterize\"", ",", "8", ",", "0.6", ",", "\"rotate\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"posterize\"", ",", "7", ",", "0.6", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"posterize\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"rotate\"", ",", "3", ",", "0.6", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "8", ",", "0.4", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "0.4", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"rotate\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.0", ",", "\"equalize\"", ",", "7", ",", "0.8", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "1.0", ",", "\"color\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"color\"", ",", "8", ",", "0.8", ",", "\"solarize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"sharpness\"", ",", "7", ",", "0.6", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"shearX\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "0", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.autoaugment.ImageNetPolicy.__call__": [[53, 56], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.autoaugment.ImageNetPolicy.__repr__": [[57, 59], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment ImageNet Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.autoaugment.CIFAR10Policy.__init__": [[74, 105], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.1", ",", "\"invert\"", ",", "7", ",", "0.2", ",", "\"contrast\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"rotate\"", ",", "2", ",", "0.3", ",", "\"translateX\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"sharpness\"", ",", "1", ",", "0.9", ",", "\"sharpness\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"autocontrast\"", ",", "8", ",", "0.9", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "\"shearY\"", ",", "7", ",", "0.3", ",", "\"posterize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "3", ",", "0.6", ",", "\"brightness\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"sharpness\"", ",", "9", ",", "0.7", ",", "\"brightness\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.5", ",", "\"equalize\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"contrast\"", ",", "7", ",", "0.6", ",", "\"sharpness\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "\"color\"", ",", "7", ",", "0.5", ",", "\"translateX\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"equalize\"", ",", "7", ",", "0.4", ",", "\"autocontrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"translateY\"", ",", "3", ",", "0.2", ",", "\"sharpness\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"brightness\"", ",", "6", ",", "0.2", ",", "\"color\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"solarize\"", ",", "2", ",", "0.0", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "0", ",", "0.6", ",", "\"autocontrast\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "8", ",", "0.8", ",", "\"equalize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"color\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"autocontrast\"", ",", "4", ",", "0.2", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"brightness\"", ",", "3", ",", "0.7", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"solarize\"", ",", "5", ",", "0.9", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"translateY\"", ",", "9", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"autocontrast\"", ",", "2", ",", "0.8", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.1", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"translateY\"", ",", "9", ",", "0.9", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.autoaugment.CIFAR10Policy.__call__": [[108, 111], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.autoaugment.CIFAR10Policy.__repr__": [[112, 114], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment CIFAR10 Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.autoaugment.SVHNPolicy.__init__": [[129, 160], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.2", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "1", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.8", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.4", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "5", ",", "0.2", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "6", ",", "0.8", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "3", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.3", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"translateY\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "4", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"contrast\"", ",", "3", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"invert\"", ",", "5", ",", "0.0", ",", "\"translateY\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearY\"", ",", "6", ",", "0.4", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"shearY\"", ",", "7", ",", "0.9", ",", "\"translateX\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"shearX\"", ",", "6", ",", "0.6", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "\"solarize\"", ",", "2", ",", "0.6", ",", "\"translateY\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "4", ",", "0.8", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "9", ",", "0.8", ",", "\"translateY\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "5", ",", "0.7", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "2", ",", "0.1", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.autoaugment.SVHNPolicy.__call__": [[163, 166], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.autoaugment.SVHNPolicy.__repr__": [[167, 169], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment SVHN Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.autoaugment.SubPolicy.__init__": [[172, 233], ["numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.round().astype", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "img.convert().rotate", "PIL.Image.composite().convert", "img.transform", "img.transform", "img.transform", "img.transform", "autoaugment.SubPolicy.__init__.rotate_with_fill"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.cityscapes_dataset.Cityscapes_loader.transform"], ["    ", "def", "__init__", "(", "self", ",", "p1", ",", "operation1", ",", "magnitude_idx1", ",", "p2", ",", "operation2", ",", "magnitude_idx2", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "ranges", "=", "{", "\n", "\"shearX\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"shearY\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"translateX\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"translateY\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"rotate\"", ":", "np", ".", "linspace", "(", "0", ",", "30", ",", "10", ")", ",", "\n", "\"color\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"posterize\"", ":", "np", ".", "round", "(", "np", ".", "linspace", "(", "8", ",", "4", ",", "10", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "\"solarize\"", ":", "np", ".", "linspace", "(", "256", ",", "0", ",", "10", ")", ",", "\n", "\"contrast\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"sharpness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"brightness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"autocontrast\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"equalize\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"invert\"", ":", "[", "0", "]", "*", "10", "\n", "}", "\n", "\n", "# from https://stackoverflow.com/questions/5252170/specify-image-filling-color-when-rotating-in-python-with-pil-and-setting-expand", "\n", "def", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ":", "\n", "            ", "rot", "=", "img", ".", "convert", "(", "\"RGBA\"", ")", ".", "rotate", "(", "magnitude", ")", "\n", "return", "Image", ".", "composite", "(", "rot", ",", "Image", ".", "new", "(", "\"RGBA\"", ",", "rot", ".", "size", ",", "(", "128", ",", ")", "*", "4", ")", ",", "rot", ")", ".", "convert", "(", "img", ".", "mode", ")", "\n", "\n", "", "func", "=", "{", "\n", "\"shearX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"shearY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"translateX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "magnitude", "*", "img", ".", "size", "[", "0", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"translateY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "magnitude", "*", "img", ".", "size", "[", "1", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"rotate\"", ":", "lambda", "img", ",", "magnitude", ":", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ",", "\n", "# \"rotate\": lambda img, magnitude: img.rotate(magnitude * random.choice([-1, 1])),", "\n", "\"color\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"posterize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "posterize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"solarize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "solarize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"contrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"sharpness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"brightness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"autocontrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "autocontrast", "(", "img", ")", ",", "\n", "\"equalize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "equalize", "(", "img", ")", ",", "\n", "\"invert\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "invert", "(", "img", ")", "\n", "}", "\n", "\n", "# self.name = \"{}_{:.2f}_and_{}_{:.2f}\".format(", "\n", "#     operation1, ranges[operation1][magnitude_idx1],", "\n", "#     operation2, ranges[operation2][magnitude_idx2])", "\n", "self", ".", "p1", "=", "p1", "\n", "self", ".", "operation1", "=", "func", "[", "operation1", "]", "\n", "self", ".", "magnitude1", "=", "ranges", "[", "operation1", "]", "[", "magnitude_idx1", "]", "\n", "self", ".", "p2", "=", "p2", "\n", "self", ".", "operation2", "=", "func", "[", "operation2", "]", "\n", "self", ".", "magnitude2", "=", "ranges", "[", "operation2", "]", "[", "magnitude_idx2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.autoaugment.SubPolicy.__call__": [[235, 239], ["random.random", "autoaugment.SubPolicy.operation1", "random.random", "autoaugment.SubPolicy.operation2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p1", ":", "img", "=", "self", ".", "operation1", "(", "img", ",", "self", ".", "magnitude1", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p2", ":", "img", "=", "self", ".", "operation2", "(", "img", ",", "self", ".", "magnitude2", ")", "\n", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.gta5_dataset.GTA5DataSet.__init__": [[17, 47], ["i_id.strip", "os.join", "os.join", "os.join", "os.join", "gta5_dataset.GTA5DataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["from", "torch", ".", "utils", "import", "data", "\n", "\n", "from", "data", "import", "BaseDataset", "\n", "from", "data", ".", "randaugment", "import", "RandAugmentMC", "\n", "\n", "class", "GTA5_loader", "(", "BaseDataset", ")", ":", "\n", "    ", "\"\"\"\n    GTA5    synthetic dataset\n    for domain adaptation to Cityscapes\n    \"\"\"", "\n", "\n", "colors", "=", "[", "# [  0,   0,   0],", "\n", "[", "128", ",", "64", ",", "128", "]", ",", "\n", "[", "244", ",", "35", ",", "232", "]", ",", "\n", "[", "70", ",", "70", ",", "70", "]", ",", "\n", "[", "102", ",", "102", ",", "156", "]", ",", "\n", "[", "190", ",", "153", ",", "153", "]", ",", "\n", "[", "153", ",", "153", ",", "153", "]", ",", "\n", "[", "250", ",", "170", ",", "30", "]", ",", "\n", "[", "220", ",", "220", ",", "0", "]", ",", "\n", "[", "107", ",", "142", ",", "35", "]", ",", "\n", "[", "152", ",", "251", ",", "152", "]", ",", "\n", "[", "0", ",", "130", ",", "180", "]", ",", "\n", "[", "220", ",", "20", ",", "60", "]", ",", "\n", "[", "255", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "142", "]", ",", "\n", "[", "0", ",", "0", ",", "70", "]", ",", "\n", "[", "0", ",", "60", ",", "100", "]", ",", "\n", "[", "0", ",", "80", ",", "100", "]", ",", "\n", "[", "0", ",", "0", ",", "230", "]", ",", "\n", "[", "119", ",", "11", ",", "32", "]", ",", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.gta5_dataset.GTA5DataSet.__len__": [[49, 51], ["len"], "methods", ["None"], ["\n", "label_colours", "=", "dict", "(", "zip", "(", "range", "(", "19", ")", ",", "colors", ")", ")", "\n", "def", "__init__", "(", "self", ",", "opt", ",", "logger", ",", "augmentations", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.gta5_dataset.GTA5DataSet.__getitem__": [[53, 105], ["PIL.Image.open().convert", "PIL.Image.open", "numpy.asarray", "numpy.asarray", "list", "numpy.flip.transpose", "print", "range", "numpy.flip.resize", "label.resize.resize.resize", "numpy.flip.resize", "label.resize.resize.resize", "dataset.autoaugment.ImageNetPolicy", "dataset.autoaugment.ImageNetPolicy.", "numpy.ones", "gta5_dataset.GTA5DataSet.id_to_trainid.items", "random.randint", "random.randint", "numpy.unique", "numpy.flip", "numpy.flip", "numpy.flip.copy", "numpy.flip.copy", "numpy.array", "PIL.Image.open", "len", "print", "random.random", "random.random", "round", "round", "round", "round"], "methods", ["None"], ["self", ".", "root", "=", "opt", ".", "src_rootpath", "\n", "self", ".", "split", "=", "'all'", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "randaug", "=", "RandAugmentMC", "(", "2", ",", "10", ")", "\n", "self", ".", "n_classes", "=", "19", "\n", "self", ".", "img_size", "=", "(", "1914", ",", "1052", ")", "\n", "\n", "self", ".", "mean", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "#TODO:  calculating the mean value of rgb channels on GTA5", "\n", "self", ".", "image_base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'images'", ")", "\n", "self", ".", "label_base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'labels'", ")", "\n", "splits", "=", "io", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'split.mat'", ")", ")", "\n", "if", "self", ".", "split", "==", "'all'", ":", "\n", "            ", "ids", "=", "np", ".", "concatenate", "(", "(", "splits", "[", "'trainIds'", "]", "[", ":", ",", "0", "]", ",", "splits", "[", "'valIds'", "]", "[", ":", ",", "0", "]", ",", "splits", "[", "'testIds'", "]", "[", ":", ",", "0", "]", ")", ")", "\n", "", "elif", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "ids", "=", "splits", "[", "'trainIds'", "]", "[", ":", ",", "0", "]", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "ids", "=", "splits", "[", "'valIds'", "]", "[", ":", "200", ",", "0", "]", "\n", "", "elif", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "ids", "=", "splits", "[", "'testIds'", "]", "[", ":", ",", "0", "]", "\n", "", "self", ".", "ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "            ", "self", ".", "ids", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "label_base_path", ",", "str", "(", "i", "+", "1", ")", ".", "zfill", "(", "5", ")", "+", "'.png'", ")", ")", "\n", "\n", "\n", "", "self", ".", "void_classes", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", "10", ",", "14", ",", "15", ",", "16", ",", "18", ",", "29", ",", "30", ",", "34", ",", "-", "1", "]", "\n", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\"unlabelled\"", ",", "\"road\"", ",", "\"sidewalk\"", ",", "\"building\"", ",", "\"wall\"", ",", "\"fence\"", ",", "\"pole\"", ",", "\"traffic_light\"", ",", "\n", "\"traffic_sign\"", ",", "\"vegetation\"", ",", "\"terrain\"", ",", "\"sky\"", ",", "\"person\"", ",", "\"rider\"", ",", "\"car\"", ",", "\"truck\"", ",", "\"bus\"", ",", "\"train\"", ",", "\n", "\"motorcycle\"", ",", "\"bicycle\"", ",", "]", "\n", "\n", "self", ".", "ignore_index", "=", "250", "\n", "self", ".", "class_map", "=", "dict", "(", "zip", "(", "self", ".", "valid_classes", ",", "range", "(", "19", ")", ")", ")", "\n", "\n", "if", "len", "(", "self", ".", "ids", ")", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"No files for style=[%s] found in %s\"", "%", "(", "self", ".", "split", ",", "self", ".", "image_base_path", ")", "\n", ")", "\n", "\n", "", "print", "(", "\"Found {} {} images\"", ".", "format", "(", "len", "(", "self", ".", "ids", ")", ",", "self", ".", "split", ")", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"__getitem__\n        \n        param: index\n        \"\"\"", "\n", "id", "=", "self", ".", "ids", "[", "index", "]", "\n", "if", "self", ".", "split", "!=", "'all'", "and", "self", ".", "split", "!=", "'val'", ":", "\n", "            ", "filename", "=", "'{:05d}.png'", ".", "format", "(", "id", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_base_path", ",", "filename", ")", "\n", "lbl_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "label_base_path", ",", "filename", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.cityscapes_train_dataset.cityscapesDataSet.__init__": [[17, 58], ["i_id.strip", "os.join", "os.join", "os.join", "os.join", "cityscapes_train_dataset.cityscapesDataSet.files.append", "open", "int", "numpy.ceil", "name.replace", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "resize_size", "=", "(", "1024", ",", "512", ")", ",", "crop_size", "=", "(", "512", ",", "1024", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ",", "set", "=", "'train'", ",", "autoaug", "=", "False", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "self", ".", "resize_size", "=", "resize_size", "\n", "self", ".", "autoaug", "=", "autoaug", "\n", "self", ".", "h", "=", "crop_size", "[", "0", "]", "\n", "self", ".", "w", "=", "crop_size", "[", "1", "]", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "set", "=", "set", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "\n", "#https://github.com/mcordts/cityscapesScripts/blob/master/cityscapesscripts/helpers/labels.py", "\n", "'''\n        project Cityscapes to Oxford Robot\n        7 road -> 8;  8 sidewalk -> 7; building 11 -> 6; wall 12 -> 255;\n        fence 13 -> 255; pole 17-> 255: light 19 -> 5; sign 20->4;\n        vegetation -> 255; terrain -> 255; sky 23 -> 0; person 24 -> 1 ;\n        rider 25 -> 1 ; car 26 -> 3; truck 27 ->3; bus 28 ->3; train 31->255;\n        motorcycle 32->2 ; bike 33 -> 2;\n\n        '''", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "8", ",", "8", ":", "7", ",", "11", ":", "6", ",", "\n", "19", ":", "5", ",", "20", ":", "4", ",", "23", ":", "0", ",", "24", ":", "1", ",", "25", ":", "1", ",", "\n", "26", ":", "3", ",", "27", ":", "3", ",", "28", ":", "3", ",", "32", ":", "2", ",", "33", ":", "2", "}", "\n", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"leftImg8bit/%s/%s\"", "%", "(", "self", ".", "set", ",", "name", ")", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"gtFine/%s/%s\"", "%", "(", "self", ".", "set", ",", "name", ".", "replace", "(", "'leftImg8bit'", ",", "'gtFine_labelIds'", ")", ")", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.cityscapes_train_dataset.cityscapesDataSet.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.cityscapes_train_dataset.cityscapesDataSet.__getitem__": [[63, 96], ["list", "numpy.flip.transpose", "random.randint", "random.randint", "PIL.Image.open().convert", "PIL.Image.open", "numpy.flip.resize", "label.resize", "dataset.autoaugment.ImageNetPolicy", "dataset.autoaugment.ImageNetPolicy.", "numpy.asarray", "numpy.asarray", "numpy.ones", "cityscapes_train_dataset.cityscapesDataSet.id_to_trainid.items", "numpy.flip", "numpy.flip", "numpy.flip.copy", "numpy.flip.copy", "numpy.array", "random.random", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "#tt = time.time()", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "image", ",", "label", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", ",", "Image", ".", "open", "(", "datafiles", "[", "\"label\"", "]", ")", "\n", "# resize", "\n", "image", ",", "label", "=", "image", ".", "resize", "(", "self", ".", "resize_size", ",", "Image", ".", "BICUBIC", ")", ",", "label", ".", "resize", "(", "self", ".", "resize_size", ",", "Image", ".", "NEAREST", ")", "\n", "if", "self", ".", "autoaug", ":", "\n", "            ", "policy", "=", "ImageNetPolicy", "(", ")", "\n", "image", "=", "policy", "(", "image", ")", "\n", "\n", "", "image", ",", "label", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", ",", "np", ".", "asarray", "(", "label", ",", "np", ".", "uint8", ")", "\n", "\n", "# re-assign labels to match the format of Cityscapes", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "k", ",", "v", "in", "list", "(", "self", ".", "id_to_trainid", ".", "items", "(", ")", ")", ":", "\n", "            ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "\n", "", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "image", ".", "shape", "[", "1", "]", "-", "self", ".", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "image", ".", "shape", "[", "2", "]", "-", "self", ".", "w", ")", "\n", "image", "=", "image", "[", ":", ",", "x1", ":", "x1", "+", "self", ".", "h", ",", "y1", ":", "y1", "+", "self", ".", "w", "]", "\n", "label_copy", "=", "label_copy", "[", "x1", ":", "x1", "+", "self", ".", "h", ",", "y1", ":", "y1", "+", "self", ".", "w", "]", "\n", "\n", "if", "self", ".", "is_mirror", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "image", "=", "np", ".", "flip", "(", "image", ",", "axis", "=", "2", ")", "\n", "label_copy", "=", "np", ".", "flip", "(", "label_copy", ",", "axis", "=", "1", ")", "\n", "#print('Time used: {} sec'.format(time.time()-tt))", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.cityscapes_dataset.cityscapesDataSet.__init__": [[19, 51], ["i_id.strip", "os.join", "os.join", "os.join", "os.join", "cityscapes_dataset.cityscapesDataSet.files.append", "open", "int", "numpy.ceil", "name.replace", "float", "len"], "methods", ["None"], ["def", "recursive_glob", "(", "rootdir", "=", "\".\"", ",", "suffix", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Performs recursive glob with given suffix and rootdir \n        :param rootdir is the root directory\n        :param suffix is the suffix to be searched\n    \"\"\"", "\n", "return", "[", "\n", "os", ".", "path", ".", "join", "(", "looproot", ",", "filename", ")", "\n", "for", "looproot", ",", "_", ",", "filenames", "in", "os", ".", "walk", "(", "rootdir", ")", "#os.walk: traversal all files in rootdir and its subfolders", "\n", "for", "filename", "in", "filenames", "\n", "if", "filename", ".", "endswith", "(", "suffix", ")", "\n", "]", "\n", "\n", "", "class", "Cityscapes_loader", "(", "BaseDataset", ")", ":", "\n", "    ", "\"\"\"cityscapesLoader\n\n    https://www.cityscapes-dataset.com\n\n    Data is derived from CityScapes, and can be downloaded from here:\n    https://www.cityscapes-dataset.com/downloads/\n\n    Many Thanks to @fvisin for the loader repo:\n    https://github.com/fvisin/dataset_loaders/blob/master/dataset_loaders/images/cityscapes.py\n    \"\"\"", "\n", "\n", "colors", "=", "[", "# [  0,   0,   0],", "\n", "[", "128", ",", "64", ",", "128", "]", ",", "\n", "[", "244", ",", "35", ",", "232", "]", ",", "\n", "[", "70", ",", "70", ",", "70", "]", ",", "\n", "[", "102", ",", "102", ",", "156", "]", ",", "\n", "[", "190", ",", "153", ",", "153", "]", ",", "\n", "[", "153", ",", "153", ",", "153", "]", ",", "\n", "[", "250", ",", "170", ",", "30", "]", ",", "\n", "[", "220", ",", "220", ",", "0", "]", ",", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.cityscapes_dataset.cityscapesDataSet.__len__": [[53, 55], ["len"], "methods", ["None"], ["[", "152", ",", "251", ",", "152", "]", ",", "\n", "[", "0", ",", "130", ",", "180", "]", ",", "\n", "[", "220", ",", "20", ",", "60", "]", ",", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.cityscapes_dataset.cityscapesDataSet.__getitem__": [[56, 89], ["list", "numpy.flip.transpose", "random.randint", "random.randint", "PIL.Image.open().convert", "PIL.Image.open", "numpy.flip.resize", "label.resize", "dataset.autoaugment.ImageNetPolicy", "dataset.autoaugment.ImageNetPolicy.", "numpy.asarray", "numpy.asarray", "numpy.ones", "cityscapes_dataset.cityscapesDataSet.id_to_trainid.items", "numpy.flip", "numpy.flip", "numpy.flip.copy", "numpy.flip.copy", "numpy.array", "random.random", "PIL.Image.open"], "methods", ["None"], ["[", "255", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "142", "]", ",", "\n", "[", "0", ",", "0", ",", "70", "]", ",", "\n", "[", "0", ",", "60", ",", "100", "]", ",", "\n", "[", "0", ",", "80", ",", "100", "]", ",", "\n", "[", "0", ",", "0", ",", "230", "]", ",", "\n", "[", "119", ",", "11", ",", "32", "]", ",", "\n", "]", "\n", "\n", "label_colours", "=", "dict", "(", "zip", "(", "range", "(", "19", ")", ",", "colors", ")", ")", "\n", "\n", "mean_rgb", "=", "{", "\n", "\"pascal\"", ":", "[", "103.939", ",", "116.779", ",", "123.68", "]", ",", "\n", "\"cityscapes\"", ":", "[", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "}", "# pascal mean for PSPNet and ICNet pre-trained model", "\n", "\n", "def", "__init__", "(", "self", ",", "opt", ",", "logger", ",", "augmentations", "=", "None", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "\"\"\"__init__\n\n        :param opt: parameters of dataset\n        :param writer: save the result of experiment\n        :param logger: logging file\n        :param augmentations: \n        \"\"\"", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "tgt_rootpath", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "randaug", "=", "RandAugmentMC", "(", "2", ",", "10", ")", "\n", "self", ".", "n_classes", "=", "opt", ".", "n_class", "\n", "self", ".", "img_size", "=", "(", "2048", ",", "1024", ")", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "self", ".", "mean_rgb", "[", "'cityscapes'", "]", ")", "\n", "self", ".", "files", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.cityscapes_pseudo_dataset.cityscapes_pseudo_DataSet.__init__": [[19, 55], ["i_id.strip", "os.join", "os.join", "os.join", "os.join", "cityscapes_pseudo_dataset.cityscapes_pseudo_DataSet.files.append", "open", "int", "os.join", "os.join", "os.join", "os.join", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "resize_size", "=", "(", "1024", ",", "512", ")", ",", "crop_size", "=", "(", "512", ",", "1024", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "False", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ",", "set", "=", "'val'", ",", "autoaug", "=", "False", ",", "synthia", "=", "False", ",", "threshold", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "self", ".", "resize_size", "=", "resize_size", "\n", "self", ".", "autoaug", "=", "autoaug", "\n", "self", ".", "h", "=", "crop_size", "[", "0", "]", "\n", "self", ".", "w", "=", "crop_size", "[", "1", "]", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "set", "=", "set", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "\n", "#https://github.com/mcordts/cityscapesScripts/blob/master/cityscapesscripts/helpers/labels.py", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"leftImg8bit/%s/%s\"", "%", "(", "self", ".", "set", ",", "name", ")", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"pseudo_FULL/%s/%s\"", "%", "(", "self", ".", "set", ",", "name", ")", ")", "\n", "if", "threshold", "!=", "1.0", ":", "\n", "                ", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"pseudo_%.1f/%s/%s\"", "%", "(", "threshold", ",", "self", ".", "set", ",", "name", ")", ")", "\n", "", "if", "synthia", ":", "\n", "                ", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"pseudo_SYNTHIA/%s/%s\"", "%", "(", "self", ".", "set", ",", "name", ")", ")", "\n", "", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.cityscapes_pseudo_dataset.cityscapes_pseudo_DataSet.__len__": [[57, 59], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.dataset.cityscapes_pseudo_dataset.cityscapes_pseudo_DataSet.__getitem__": [[60, 149], ["PIL.Image.open().convert", "PIL.Image.open", "numpy.flip.resize", "numpy.asarray.resize", "numpy.asarray", "numpy.asarray", "numpy.flip.transpose", "numpy.flip.resize", "numpy.asarray.resize", "dataset.autoaugment.ImageNetPolicy", "dataset.autoaugment.ImageNetPolicy.", "numpy.asarray", "numpy.asarray", "numpy.flip.transpose", "range", "range", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip.copy", "numpy.flip.copy", "numpy.array", "numpy.flip.copy", "numpy.flip.copy", "PIL.Image.open", "random.randint", "random.randint", "numpy.unique", "random.randint", "random.randint", "math.floor", "math.floor", "numpy.unique", "random.random", "random.random", "round", "round", "round", "round", "len", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "label", "=", "Image", ".", "open", "(", "datafiles", "[", "\"label\"", "]", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "random_scale", "=", "0.8", "+", "random", ".", "random", "(", ")", "*", "0.4", "# 0.8 - 1.2", "\n", "image_aug1", "=", "image", ".", "resize", "(", "(", "round", "(", "self", ".", "resize_size", "[", "0", "]", "*", "random_scale", ")", ",", "round", "(", "self", ".", "resize_size", "[", "1", "]", "*", "random_scale", ")", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "label_aug1", "=", "label", ".", "resize", "(", "(", "round", "(", "self", ".", "resize_size", "[", "0", "]", "*", "random_scale", ")", ",", "round", "(", "self", ".", "resize_size", "[", "1", "]", "*", "random_scale", ")", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "image", "=", "image", ".", "resize", "(", "(", "self", ".", "resize_size", "[", "0", "]", ",", "self", ".", "resize_size", "[", "1", "]", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "label", "=", "label", ".", "resize", "(", "(", "self", ".", "resize_size", "[", "0", "]", ",", "self", ".", "resize_size", "[", "1", "]", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "if", "self", ".", "autoaug", ":", "\n", "            ", "policy", "=", "ImageNetPolicy", "(", ")", "\n", "image_aug1", "=", "policy", "(", "image_aug1", ")", "\n", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "uint8", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "image_aug1", "=", "np", ".", "asarray", "(", "image_aug1", ",", "np", ".", "float32", ")", "\n", "label_aug1", "=", "np", ".", "asarray", "(", "label_aug1", ",", "np", ".", "uint8", ")", "\n", "\n", "# re-assign labels to match the format of Cityscapes", "\n", "#label_copy = 255 * np.ones(label.shape, dtype=np.float32)", "\n", "#for k, v in list(self.id_to_trainid.items()):", "\n", "#    label_copy[label == k] = v", "\n", "", "label_copy", "=", "label", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "label_label_aug1", "=", "label_aug1", "\n", "\n", "", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "image_aug1", "=", "image_aug1", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image_aug1", "-=", "self", ".", "mean", "\n", "image_aug1", "=", "image_aug1", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "scale", ":", "\n", "#print(image.shape, label.shape)", "\n", "            ", "for", "i", "in", "range", "(", "10", ")", ":", "#find hard samples", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "image", ".", "shape", "[", "1", "]", "-", "self", ".", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "image", ".", "shape", "[", "2", "]", "-", "self", ".", "w", ")", "\n", "tmp_label_copy", "=", "label_copy", "[", "x1", ":", "x1", "+", "self", ".", "h", ",", "y1", ":", "y1", "+", "self", ".", "w", "]", "\n", "tmp_image", "=", "image", "[", ":", ",", "x1", ":", "x1", "+", "self", ".", "h", ",", "y1", ":", "y1", "+", "self", ".", "w", "]", "\n", "u", "=", "np", ".", "unique", "(", "tmp_label_copy", ")", "\n", "if", "len", "(", "u", ")", ">", "10", ":", "\n", "                    ", "break", "\n", "#else:", "\n", "#print('Cityscape-Pseudo: Too young too naive for %d times!'%i)", "\n", "", "", "image", "=", "tmp_image", "\n", "label_copy", "=", "tmp_label_copy", "\n", "", "else", ":", "\n", "#print(image_aug1.shape, label.shape)", "\n", "            ", "for", "i", "in", "range", "(", "10", ")", ":", "#find hard samples", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "image_aug1", ".", "shape", "[", "1", "]", "-", "self", ".", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "image_aug1", ".", "shape", "[", "2", "]", "-", "self", ".", "w", ")", "\n", "tmp_label_label_aug1", "=", "label_label_aug1", "[", "x1", ":", "x1", "+", "self", ".", "h", ",", "y1", ":", "y1", "+", "self", ".", "w", "]", "\n", "tmp_image_aug1", "=", "image_aug1", "[", ":", ",", "x1", ":", "x1", "+", "self", ".", "h", ",", "y1", ":", "y1", "+", "self", ".", "w", "]", "\n", "\n", "\n", "x1_not_scale", "=", "math", ".", "floor", "(", "x1", "*", "(", "(", "self", ".", "resize_size", "[", "1", "]", "-", "self", ".", "h", ")", "/", "(", "image_aug1", ".", "shape", "[", "1", "]", "-", "self", ".", "h", ")", ")", ")", "\n", "y1_not_scale", "=", "math", ".", "floor", "(", "y1", "*", "(", "(", "self", ".", "resize_size", "[", "0", "]", "-", "self", ".", "w", ")", "/", "(", "image_aug1", ".", "shape", "[", "2", "]", "-", "self", ".", "w", ")", ")", ")", "\n", "tmp_label_copy", "=", "label_copy", "[", "x1_not_scale", ":", "x1_not_scale", "+", "self", ".", "h", ",", "y1_not_scale", ":", "y1_not_scale", "+", "self", ".", "w", "]", "\n", "tmp_image", "=", "image", "[", ":", ",", "x1_not_scale", ":", "x1_not_scale", "+", "self", ".", "h", ",", "y1_not_scale", ":", "y1_not_scale", "+", "self", ".", "w", "]", "\n", "\n", "u", "=", "np", ".", "unique", "(", "tmp_label_label_aug1", ")", "\n", "if", "len", "(", "u", ")", ">", "10", ":", "\n", "                    ", "break", "\n", "#else:", "\n", "#print('Cityscape-Pseudo: Too young too naive for %d times!'%i)", "\n", "", "", "image", "=", "tmp_image", "\n", "label_copy", "=", "tmp_label_copy", "\n", "image_aug1", "=", "tmp_image_aug1", "\n", "label_label_aug1", "=", "tmp_label_label_aug1", "\n", "\n", "", "if", "self", ".", "is_mirror", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "image", "=", "np", ".", "flip", "(", "image", ",", "axis", "=", "2", ")", "\n", "label_copy", "=", "np", ".", "flip", "(", "label_copy", ",", "axis", "=", "1", ")", "\n", "\n", "image_aug1", "=", "np", ".", "flip", "(", "image_aug1", ",", "axis", "=", "2", ")", "\n", "label_label_aug1", "=", "np", ".", "flip", "(", "label_label_aug1", ",", "axis", "=", "1", ")", "\n", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", ",", "image_aug1", ".", "copy", "(", ")", ",", "label_label_aug1", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.discriminator.FCDiscriminator.__init__": [[7, 17], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["import", "numpy", "as", "np", "\n", "\n", "class", "FCDiscriminator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    inplanes, planes. Patch-gan\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", "=", "64", ")", ":", "\n", "        ", "super", "(", "FCDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.discriminator.FCDiscriminator.forward": [[21, 35], ["discriminator.FCDiscriminator.conv1", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.conv2", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.conv3", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.conv4", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.classifier"], "methods", ["None"], ["self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "planes", "*", "8", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.BasicBlock.__init__": [[25, 34], ["torch.Module.__init__", "deeplab.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplab.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.conv3x3", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.BasicBlock.forward": [[35, 52], ["deeplab.BasicBlock.conv1", "deeplab.BasicBlock.bn1", "deeplab.BasicBlock.relu", "deeplab.BasicBlock.conv2", "deeplab.BasicBlock.bn2", "deeplab.BasicBlock.relu", "deeplab.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.Bottleneck.__init__": [[57, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn3.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.Bottleneck.forward": [[79, 100], ["deeplab.Bottleneck.conv1", "deeplab.Bottleneck.bn1", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.conv2", "deeplab.Bottleneck.bn2", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.conv3", "deeplab.Bottleneck.bn3", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.Classifier_Module.__init__": [[103, 111], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "deeplab.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "nn", ".", "Conv2d", "(", "2048", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.Classifier_Module.forward": [[112, 117], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.ResNet.__init__": [[121, 144], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.ResNet.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_pred_layer", "deeplab.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.ResNetMulti._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#        for i in m.parameters():", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.ResNet._make_layer": [[147, 163], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.ResNet._make_pred_layer": [[163, 165], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.ResNet.forward": [[166, 178], ["deeplab.ResNet.conv1", "deeplab.ResNet.bn1", "deeplab.ResNet.relu", "deeplab.ResNet.maxpool", "deeplab.ResNet.layer1", "deeplab.ResNet.layer2", "deeplab.ResNet.layer3", "deeplab.ResNet.layer4", "deeplab.ResNet.layer5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.ResNet.get_1x_lr_params_NOscale": [[179, 203], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for \n        the last classification layer. Note that for each batchnorm layer, \n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return \n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.ResNet.get_10x_lr_params": [[204, 215], ["b.append", "range", "deeplab.ResNet.layer5.parameters", "len"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.ResNet.optim_parameters": [[218, 221], ["deeplab.ResNet.get_1x_lr_params_NOscale", "deeplab.ResNet.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.ResNetMulti.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.outS": [[9, 15], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.conv3x3": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab.Res_Deeplab": [[223, 226], ["deeplab.ResNet"], "function", ["None"], ["", "", "def", "Res_Deeplab", "(", "num_classes", "=", "21", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.SEBlock.__init__": [[35, 43], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "r", "=", "16", ")", ":", "\n", "        ", "super", "(", "SEBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "global_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "se", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "inplanes", ",", "inplanes", "//", "r", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "inplanes", "//", "r", ",", "inplanes", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.SEBlock.forward": [[44, 49], ["deeplab_multi.SEBlock.global_pool", "xx.view.view.view", "deeplab_multi.SEBlock.se().unsqueeze().unsqueeze", "x.mul", "xx.view.view.size", "xx.view.view.size", "deeplab_multi.SEBlock.se().unsqueeze", "deeplab_multi.SEBlock.se"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "xx", "=", "self", ".", "global_pool", "(", "x", ")", "\n", "xx", "=", "xx", ".", "view", "(", "xx", ".", "size", "(", "0", ")", ",", "xx", ".", "size", "(", "1", ")", ")", "\n", "se_weight", "=", "self", ".", "se", "(", "xx", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "x", ".", "mul", "(", "se_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.BasicBlock.__init__": [[53, 62], ["torch.Module.__init__", "deeplab_multi.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplab_multi.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.conv3x3", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.BasicBlock.forward": [[63, 80], ["deeplab_multi.BasicBlock.conv1", "deeplab_multi.BasicBlock.bn1", "deeplab_multi.BasicBlock.relu", "deeplab_multi.BasicBlock.conv2", "deeplab_multi.BasicBlock.bn2", "deeplab_multi.BasicBlock.relu", "deeplab_multi.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.Bottleneck.__init__": [[85, 105], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab_multi.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab_multi.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab_multi.Bottleneck.bn3.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "train_bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "train_bn", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "train_bn", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "train_bn", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.Bottleneck.forward": [[106, 127], ["deeplab_multi.Bottleneck.conv1", "deeplab_multi.Bottleneck.bn1", "deeplab_multi.Bottleneck.relu", "deeplab_multi.Bottleneck.conv2", "deeplab_multi.Bottleneck.bn2", "deeplab_multi.Bottleneck.relu", "deeplab_multi.Bottleneck.conv3", "deeplab_multi.Bottleneck.bn3", "deeplab_multi.Bottleneck.relu", "deeplab_multi.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.Classifier_Module.__init__": [[130, 184], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "deeplab_multi.Classifier_Module.conv2d_list.append", "zip", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deeplab_multi.Classifier_Module.conv2d_list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "isinstance", "isinstance", "isinstance", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "deeplab_multi.NormLayer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplab_multi.SEBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "deeplab_multi.NormLayer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "deeplab_multi.NormLayer", "isinstance", "isinstance", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "deeplab_multi.NormLayer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.NormLayer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.NormLayer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.NormLayer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.NormLayer"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ",", "norm_style", "=", "'bn'", ",", "droprate", "=", "0.1", ",", "use_se", "=", "False", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "NormLayer", "(", "256", ",", "norm_style", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", ")", "\n", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "#self.conv2d_list.append(", "\n", "#    nn.BatchNorm2d(inplanes))", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "*", "[", "\n", "#nn.ReflectionPad2d(padding),", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ",", "\n", "NormLayer", "(", "256", ",", "norm_style", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", ")", "\n", "\n", "", "if", "use_se", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "*", "[", "SEBlock", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "NormLayer", "(", "512", ",", "norm_style", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "NormLayer", "(", "512", ",", "norm_style", ")", "]", ")", "\n", "\n", "", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "Dropout2d", "(", "droprate", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", "]", ")", "\n", "\n", "##########init#######", "\n", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "bottleneck", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "head", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.Classifier_Module.forward": [[185, 192], ["range", "deeplab_multi.Classifier_Module.bottleneck", "deeplab_multi.Classifier_Module.head", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", ")", ",", "1", ")", "\n", "", "out", "=", "self", ".", "bottleneck", "(", "out", ")", "\n", "out", "=", "self", ".", "head", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.ResNetMulti.__init__": [[195, 212], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab_multi.ResNetMulti.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplab_multi.ResNetMulti._make_layer", "deeplab_multi.ResNetMulti._make_layer", "deeplab_multi.ResNetMulti._make_layer", "deeplab_multi.ResNetMulti._make_layer", "deeplab_multi.ResNetMulti._make_pred_layer", "deeplab_multi.ResNetMulti._make_pred_layer"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.ResNetMulti._make_pred_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.ResNetMulti._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "use_se", "=", "False", ",", "train_bn", "=", "False", ",", "norm_style", "=", "'bn'", ",", "droprate", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "train_bn", "=", "train_bn", "\n", "super", "(", "ResNetMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "self", ".", "train_bn", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ",", "norm_style", ",", "droprate", ",", "use_se", ")", "\n", "self", ".", "layer6", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "1024", "+", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ",", "norm_style", ",", "droprate", ",", "use_se", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.ResNetMulti._make_layer": [[223, 239], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "self", ".", "train_bn", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ",", "train_bn", "=", "self", ".", "train_bn", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ",", "downsample", "=", "None", ",", "train_bn", "=", "self", ".", "train_bn", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.ResNetMulti._make_pred_layer": [[240, 242], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ",", "norm_style", ",", "droprate", ",", "use_se", ")", ":", "\n", "        ", "return", "block", "(", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ",", "norm_style", ",", "droprate", ",", "use_se", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.ResNetMulti.forward": [[243, 258], ["deeplab_multi.ResNetMulti.conv1", "deeplab_multi.ResNetMulti.bn1", "deeplab_multi.ResNetMulti.relu", "deeplab_multi.ResNetMulti.maxpool", "deeplab_multi.ResNetMulti.layer1", "deeplab_multi.ResNetMulti.layer2", "deeplab_multi.ResNetMulti.layer3", "deeplab_multi.ResNetMulti.layer5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplab_multi.ResNetMulti.layer6", "deeplab_multi.ResNetMulti.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer5", "(", "x", ")", "\n", "\n", "x2", "=", "torch", ".", "cat", "(", "(", "self", ".", "layer4", "(", "x", ")", ",", "x", ")", ",", "1", ")", "\n", "x2", "=", "self", ".", "layer6", "(", "x2", ")", "\n", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.ResNetMulti.get_1x_lr_params_NOscale": [[259, 282], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.ResNetMulti.get_10x_lr_params": [[283, 295], ["b.append", "b.append", "range", "deeplab_multi.ResNetMulti.layer5.parameters", "deeplab_multi.ResNetMulti.layer6.parameters", "len"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.ResNetMulti.optim_parameters": [[296, 299], ["deeplab_multi.ResNetMulti.get_1x_lr_params_NOscale", "deeplab_multi.ResNetMulti.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.ResNetMulti.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.outS": [[10, 16], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.conv3x3": [[18, 22], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.NormLayer": [[23, 33], ["torch.BatchNorm2d", "torch.InstanceNorm2d", "torch.LayerNorm", "torch.GroupNorm"], "function", ["None"], ["", "def", "NormLayer", "(", "norm_dim", ",", "norm_style", "=", "'bn'", ")", ":", "\n", "    ", "if", "norm_style", "==", "'bn'", ":", "\n", "        ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm_style", "==", "'in'", ":", "\n", "        ", "norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "norm_dim", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_style", "==", "'ln'", ":", "\n", "        ", "norm_layer", "=", "nn", ".", "LayerNorm", "(", "norm_dim", ",", "elementwise_affine", "=", "True", ")", "\n", "", "elif", "norm_style", "==", "'gn'", ":", "\n", "        ", "norm_layer", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "norm_dim", ",", "affine", "=", "True", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_multi.DeeplabMulti": [[301, 304], ["deeplab_multi.ResNetMulti"], "function", ["None"], ["", "", "def", "DeeplabMulti", "(", "num_classes", "=", "21", ",", "use_se", "=", "False", ",", "train_bn", "=", "False", ",", "norm_style", "=", "'bn'", ",", "droprate", "=", "0.1", ")", ":", "\n", "    ", "model", "=", "ResNetMulti", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "use_se", "=", "use_se", ",", "train_bn", "=", "train_bn", ",", "norm_style", "=", "norm_style", ",", "droprate", "=", "droprate", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_vgg.Classifier_Module.__init__": [[8, 16], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "zip", "deeplab_vgg.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dims_in", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "nn", ".", "Conv2d", "(", "dims_in", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_vgg.Classifier_Module.forward": [[17, 22], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_vgg.DeeplabVGG.__init__": [[25, 46], ["torch.nn.Module.__init__", "torchvision.models.vgg16", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "deeplab_vgg.Classifier_Module", "torchvision.models.vgg16.load_state_dict", "list", "list", "torch.load", "torchvision.models.vgg16.features.children", "torchvision.models.vgg16.classifier.children", "torch.nn.ReLU", "torch.nn.ReLU", "list", "list", "range", "range", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "vgg16_caffe_path", "=", "None", ",", "pretrained", "=", "False", ")", ":", "\n", "        ", "super", "(", "DeeplabVGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg", "=", "models", ".", "vgg16", "(", ")", "\n", "if", "pretrained", ":", "\n", "            ", "vgg", ".", "load_state_dict", "(", "torch", ".", "load", "(", "vgg16_caffe_path", ")", ")", "\n", "\n", "", "features", ",", "classifier", "=", "list", "(", "vgg", ".", "features", ".", "children", "(", ")", ")", ",", "list", "(", "vgg", ".", "classifier", ".", "children", "(", ")", ")", "\n", "\n", "#remove pool4/pool5", "\n", "features", "=", "nn", ".", "Sequential", "(", "*", "(", "features", "[", "i", "]", "for", "i", "in", "list", "(", "range", "(", "23", ")", ")", "+", "list", "(", "range", "(", "24", ",", "30", ")", ")", ")", ")", "\n", "\n", "for", "i", "in", "[", "23", ",", "25", ",", "27", "]", ":", "\n", "            ", "features", "[", "i", "]", ".", "dilation", "=", "(", "2", ",", "2", ")", "\n", "features", "[", "i", "]", ".", "padding", "=", "(", "2", ",", "2", ")", "\n", "\n", "", "fc6", "=", "nn", ".", "Conv2d", "(", "512", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ",", "dilation", "=", "4", ")", "\n", "fc7", "=", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ",", "dilation", "=", "4", ")", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "(", "[", "features", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "features", ")", ")", "]", "+", "[", "fc6", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "fc7", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "Classifier_Module", "(", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_vgg.DeeplabVGG.forward": [[48, 52], ["deeplab_vgg.DeeplabVGG.features", "deeplab_vgg.DeeplabVGG.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_vgg.DeeplabVGG.optim_parameters": [[53, 55], ["deeplab_vgg.DeeplabVGG.parameters"], "methods", ["None"], ["", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "self", ".", "parameters", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.Bottleneck.__init__": [[9, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent.Bottleneck.bn3.parameters", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# change", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "padding", "=", "dilation", "\n", "# change", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.Bottleneck.forward": [[31, 47], ["deeplab_advent.Bottleneck.conv1", "deeplab_advent.Bottleneck.bn1", "deeplab_advent.Bottleneck.relu", "deeplab_advent.Bottleneck.conv2", "deeplab_advent.Bottleneck.bn2", "deeplab_advent.Bottleneck.relu", "deeplab_advent.Bottleneck.conv3", "deeplab_advent.Bottleneck.bn3", "deeplab_advent.Bottleneck.relu", "deeplab_advent.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.ClassifierModule.__init__": [[50, 60], ["torch.Module.__init__", "torch.ModuleList", "zip", "deeplab_advent.ClassifierModule.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "ClassifierModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.ClassifierModule.forward": [[61, 66], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.GradScale.__init__": [[74, 76], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.GradScale.forward": [[77, 79], ["x.view_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.GradScale.backward": [[80, 82], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "return", "(", "grad_output", "*", "self", ".", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.MLP2d.__init__": [[89, 97], ["torch.Module.__init__", "deeplab_advent.conv1x1", "torch.BatchNorm2d", "torch.ReLU", "deeplab_advent.conv1x1"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.conv1x1", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "inner_dim", "=", "4096", ",", "out_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "MLP2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "linear1", "=", "conv1x1", "(", "in_dim", ",", "inner_dim", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inner_dim", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "linear2", "=", "conv1x1", "(", "inner_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.MLP2d.forward": [[98, 107], ["deeplab_advent.MLP2d.linear1", "deeplab_advent.MLP2d.bn1", "deeplab_advent.MLP2d.relu1", "deeplab_advent.MLP2d.linear2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x = grad_scale(x)", "\n", "        ", "x", "=", "self", ".", "linear1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "linear2", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.ResNetMulti.__init__": [[116, 142], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent.ResNetMulti.bn1.parameters", "torch.ReLU", "torch.MaxPool2d", "deeplab_advent.ResNetMulti._make_layer", "deeplab_advent.ResNetMulti._make_layer", "deeplab_advent.ResNetMulti._make_layer", "deeplab_advent.ResNetMulti._make_layer", "deeplab_advent.ClassifierModule", "deeplab_advent.Proj_Head", "deeplab_advent.ResNetMulti.modules", "deeplab_advent.ClassifierModule", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.Proj_Head"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "multi_level", ")", ":", "\n", "        ", "self", ".", "multi_level", "=", "multi_level", "\n", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "self", ".", "layer5", "=", "ClassifierModule", "(", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "", "self", ".", "layer6", "=", "ClassifierModule", "(", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "self", ".", "projector_1", "=", "Proj_Head", "(", "in_dim", "=", "1024", ")", "\n", "# self.projector_2 = Proj_Head()", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.ResNetMulti._make_layer": [[143, 163], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "(", "stride", "!=", "1", "\n", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "\n", "or", "dilation", "==", "2", "\n", "or", "dilation", "==", "4", ")", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.ResNetMulti.forward": [[164, 183], ["deeplab_advent.ResNetMulti.conv1", "deeplab_advent.ResNetMulti.bn1", "deeplab_advent.ResNetMulti.relu", "deeplab_advent.ResNetMulti.maxpool", "deeplab_advent.ResNetMulti.layer1", "deeplab_advent.ResNetMulti.layer2", "deeplab_advent.ResNetMulti.layer3", "deeplab_advent.ResNetMulti.layer4", "deeplab_advent.ResNetMulti.layer6", "deeplab_advent.ResNetMulti.layer5", "deeplab_advent.ResNetMulti.projector_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "x1", "=", "self", ".", "layer5", "(", "x", ")", "# produce segmap 1", "\n", "feature_1", "=", "self", ".", "projector_1", "(", "x", ")", "# feature map", "\n", "", "else", ":", "\n", "            ", "x1", "=", "None", "\n", "# feature_1 = None", "\n", "", "x2", "=", "self", ".", "layer4", "(", "x", ")", "\n", "# feature_2 = self.projector_2(x2) # feature map", "\n", "x2", "=", "self", ".", "layer6", "(", "x2", ")", "# produce segmap 2", "\n", "# return x1, x2, feature_1, feature_2", "\n", "return", "x1", ",", "x2", ",", "feature_1", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.ResNetMulti.get_1x_lr_params_no_scale": [[184, 207], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_no_scale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.ResNetMulti.get_10x_lr_params": [[208, 223], ["b.append", "range", "b.append", "b.append", "deeplab_advent.ResNetMulti.layer6.parameters", "len", "deeplab_advent.ResNetMulti.layer5.parameters", "deeplab_advent.ResNetMulti.projector_1.parameters"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "projector_1", ".", "parameters", "(", ")", ")", "\n", "", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "# b.append(self.projector_2.parameters())", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.ResNetMulti.optim_parameters": [[224, 227], ["deeplab_advent.ResNetMulti.get_1x_lr_params_no_scale", "deeplab_advent.ResNetMulti.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_1x_lr_params_no_scale", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_no_scale", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.conv1x1": [[68, 71], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.grad_scale": [[84, 86], ["deeplab_advent.GradScale"], "function", ["None"], ["", "", "def", "grad_scale", "(", "x", ",", "lambd", "=", "0.1", ")", ":", "\n", "    ", "return", "GradScale", "(", "lambd", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.Proj_Head": [[111, 113], ["deeplab_advent.MLP2d"], "function", ["None"], ["", "", "def", "Proj_Head", "(", "in_dim", "=", "1024", ",", "inner_dim", "=", "2048", ",", "out_dim", "=", "128", ")", ":", "\n", "    ", "return", "MLP2d", "(", "in_dim", ",", "inner_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent.get_deeplab_v2": [[229, 232], ["deeplab_advent.ResNetMulti"], "function", ["None"], ["", "", "def", "get_deeplab_v2", "(", "num_classes", "=", "19", ",", "multi_level", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNetMulti", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "multi_level", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.__init__": [[46, 69], ["torch.nn.Module.__init__", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "ms_discriminator.MsImageDis.one_cnn", "ms_discriminator.MsImageDis._make_net", "ms_discriminator.MsImageDis.apply", "ms_discriminator.MsImageDis.cnns.append", "ms_discriminator.weights_init"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.one_cnn", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis._make_net", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "19", ")", ":", "\n", "        ", "super", "(", "MsImageDis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_layer", "=", "2", "#params['n_layer']", "\n", "self", ".", "gan_type", "=", "'lsgan'", "#params['gan_type']", "\n", "self", ".", "dim", "=", "32", "#params['dim']", "\n", "self", ".", "norm", "=", "'none'", "#params['norm']", "\n", "self", ".", "activ", "=", "'lrelu'", "#params['activ']", "\n", "self", ".", "num_scales", "=", "3", "\n", "self", ".", "pad_type", "=", "'reflect'", "#params['pad_type']", "\n", "self", ".", "LAMBDA", "=", "0.01", "\n", "self", ".", "non_local", "=", "0", "\n", "self", ".", "n_res", "=", "4", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "fp16", "=", "False", "\n", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "if", "not", "self", ".", "gan_type", "==", "'wgan'", ":", "\n", "            ", "self", ".", "cnns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_scales", ")", ":", "\n", "                ", "Dis", "=", "self", ".", "_make_net", "(", ")", "\n", "Dis", ".", "apply", "(", "weights_init", "(", "'gaussian'", ")", ")", "\n", "self", ".", "cnns", ".", "append", "(", "Dis", ")", "\n", "", "", "else", ":", "\n", "             ", "self", ".", "cnn", "=", "self", ".", "one_cnn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis._make_net": [[70, 91], ["range", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "min", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.NonlocalBlock", "ms_discriminator.ResBlock", "ms_discriminator.NonlocalBlock"], "methods", ["None"], ["", "", "def", "_make_net", "(", "self", ")", ":", "\n", "        ", "dim", "=", "self", ".", "dim", "\n", "cnn_x", "=", "[", "]", "\n", "#cnn_x += [Conv2dBlock(self.input_dim, dim, 1, 1, 0, norm=self.norm, activation=self.activ, pad_type=self.pad_type)]", "\n", "cnn_x", "+=", "[", "Conv2dBlock", "(", "self", ".", "input_dim", ",", "dim", ",", "3", ",", "2", ",", "1", ",", "norm", "=", "self", ".", "norm", ",", "activation", "=", "self", ".", "activ", ",", "pad_type", "=", "self", ".", "pad_type", ")", "]", "\n", "cnn_x", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "self", ".", "norm", ",", "activation", "=", "self", ".", "activ", ",", "pad_type", "=", "self", ".", "pad_type", ")", "]", "\n", "cnn_x", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "2", ",", "1", ",", "norm", "=", "self", ".", "norm", ",", "activation", "=", "self", ".", "activ", ",", "pad_type", "=", "self", ".", "pad_type", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layer", "-", "1", ")", ":", "\n", "            ", "dim2", "=", "min", "(", "dim", "*", "2", ",", "512", ")", "\n", "cnn_x", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "self", ".", "norm", ",", "activation", "=", "self", ".", "activ", ",", "pad_type", "=", "self", ".", "pad_type", ")", "]", "\n", "cnn_x", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim2", ",", "3", ",", "2", ",", "1", ",", "norm", "=", "self", ".", "norm", ",", "activation", "=", "self", ".", "activ", ",", "pad_type", "=", "self", ".", "pad_type", ")", "]", "\n", "dim", "=", "dim2", "\n", "", "if", "self", ".", "non_local", ">", "1", ":", "\n", "            ", "cnn_x", "+=", "[", "NonlocalBlock", "(", "dim", ")", "]", "\n", "", "for", "i", "in", "range", "(", "self", ".", "n_res", ")", ":", "\n", "            ", "cnn_x", "+=", "[", "ResBlock", "(", "dim", ",", "norm", "=", "self", ".", "norm", ",", "activation", "=", "self", ".", "activ", ",", "pad_type", "=", "self", ".", "pad_type", ",", "res_type", "=", "'basic'", ")", "]", "\n", "", "if", "self", ".", "non_local", ">", "0", ":", "\n", "            ", "cnn_x", "+=", "[", "NonlocalBlock", "(", "dim", ")", "]", "\n", "", "cnn_x", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "1", ",", "1", ",", "1", ",", "0", ")", "]", "\n", "cnn_x", "=", "nn", ".", "Sequential", "(", "*", "cnn_x", ")", "\n", "return", "cnn_x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.one_cnn": [[92, 103], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "ms_discriminator.Conv2dBlock", "min", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "ms_discriminator.Conv2dBlock"], "methods", ["None"], ["", "def", "one_cnn", "(", "self", ")", ":", "\n", "        ", "dim", "=", "self", ".", "dim", "\n", "cnn_x", "=", "[", "]", "\n", "cnn_x", "+=", "[", "Conv2dBlock", "(", "self", ".", "input_dim", ",", "dim", ",", "4", ",", "2", ",", "1", ",", "norm", "=", "'none'", ",", "activation", "=", "self", ".", "activ", ",", "pad_type", "=", "self", ".", "pad_type", ")", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "dim2", "=", "min", "(", "dim", "*", "2", ",", "512", ")", "\n", "cnn_x", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim2", ",", "4", ",", "2", ",", "1", ",", "norm", "=", "self", ".", "norm", ",", "activation", "=", "self", ".", "activ", ",", "pad_type", "=", "self", ".", "pad_type", ")", "]", "\n", "dim", "=", "dim2", "\n", "", "cnn_x", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "1", ",", "(", "4", ",", "2", ")", ",", "1", ",", "0", ")", "]", "\n", "cnn_x", "=", "nn", ".", "Sequential", "(", "*", "cnn_x", ")", "\n", "return", "cnn_x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.forward": [[104, 114], ["ms_discriminator.MsImageDis.cnn", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze.append", "torch.squeeze.append", "torch.squeeze.append", "ms_discriminator.MsImageDis.downsample", "model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "gan_type", "==", "'wgan'", ":", "\n", "            ", "outputs", "=", "[", "]", "\n", "for", "model", "in", "self", ".", "cnns", ":", "\n", "                ", "outputs", ".", "append", "(", "model", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "", "else", ":", "\n", "             ", "outputs", "=", "self", ".", "cnn", "(", "x", ")", "\n", "outputs", "=", "torch", ".", "squeeze", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_dis_loss": [[115, 149], ["input_real.requires_grad_", "model.forward", "model.forward", "enumerate", "zip", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "ms_discriminator.MsImageDis.compute_grad2().mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "ms_discriminator.MsImageDis.compute_grad2().mean", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "ms_discriminator.MsImageDis.compute_grad2", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "ms_discriminator.MsImageDis.compute_grad2().mean", "ms_discriminator.MsImageDis.compute_grad2", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ms_discriminator.MsImageDis.compute_grad2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.forward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.forward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.compute_grad2", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.compute_grad2", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.compute_grad2"], ["", "def", "calc_dis_loss", "(", "self", ",", "model", ",", "input_fake", ",", "input_real", ")", ":", "\n", "# calculate the loss to train D", "\n", "        ", "input_real", ".", "requires_grad_", "(", ")", "\n", "outs0", "=", "model", ".", "forward", "(", "input_fake", ")", "\n", "outs1", "=", "model", ".", "forward", "(", "input_real", ")", "\n", "loss", "=", "0", "\n", "reg", "=", "0", "\n", "Drift", "=", "0.001", "\n", "LAMBDA", "=", "self", ".", "LAMBDA", "\n", "\n", "if", "self", ".", "gan_type", "==", "'wgan'", ":", "\n", "            ", "loss", "+=", "torch", ".", "mean", "(", "outs0", ")", "-", "torch", ".", "mean", "(", "outs1", ")", "\n", "# progressive gan", "\n", "loss", "+=", "Drift", "*", "(", "torch", ".", "sum", "(", "outs0", "**", "2", ")", "+", "torch", ".", "sum", "(", "outs1", "**", "2", ")", ")", "\n", "reg", "+=", "LAMBDA", "*", "self", ".", "compute_grad2", "(", "outs1", ",", "input_real", ")", ".", "mean", "(", ")", "# I suggest Lambda=0.1 for wgan", "\n", "loss", "=", "loss", "+", "reg", "\n", "return", "loss", ",", "reg", "\n", "\n", "", "for", "it", ",", "(", "out0", ",", "out1", ")", "in", "enumerate", "(", "zip", "(", "outs0", ",", "outs1", ")", ")", ":", "\n", "            ", "if", "self", ".", "gan_type", "==", "'lsgan'", ":", "\n", "                ", "loss", "+=", "torch", ".", "mean", "(", "(", "out0", "-", "0", ")", "**", "2", ")", "+", "torch", ".", "mean", "(", "(", "out1", "-", "1", ")", "**", "2", ")", "\n", "# regularization", "\n", "reg", "+=", "LAMBDA", "*", "self", ".", "compute_grad2", "(", "out1", ",", "input_real", ")", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "gan_type", "==", "'nsgan'", ":", "\n", "                ", "all0", "=", "Variable", "(", "torch", ".", "zeros_like", "(", "out0", ".", "data", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "all1", "=", "Variable", "(", "torch", ".", "ones_like", "(", "out1", ".", "data", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "loss", "+=", "torch", ".", "mean", "(", "F", ".", "binary_cross_entropy", "(", "F", ".", "sigmoid", "(", "out0", ")", ",", "all0", ")", "+", "\n", "F", ".", "binary_cross_entropy", "(", "F", ".", "sigmoid", "(", "out1", ")", ",", "all1", ")", ")", "\n", "reg", "+=", "LAMBDA", "*", "self", ".", "compute_grad2", "(", "F", ".", "sigmoid", "(", "out1", ")", ",", "input_real", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "assert", "0", ",", "\"Unsupported GAN type: {}\"", ".", "format", "(", "self", ".", "gan_type", ")", "\n", "\n", "", "", "loss", "=", "loss", "+", "reg", "\n", "return", "loss", ",", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.calc_gen_loss": [[150, 170], ["model.forward", "enumerate", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.forward"], ["", "def", "calc_gen_loss", "(", "self", ",", "model", ",", "input_fake", ")", ":", "\n", "# calculate the loss to train G", "\n", "        ", "outs0", "=", "model", ".", "forward", "(", "input_fake", ")", "\n", "loss", "=", "0", "\n", "Drift", "=", "0.001", "\n", "if", "self", ".", "gan_type", "==", "'wgan'", ":", "\n", "            ", "loss", "+=", "-", "torch", ".", "mean", "(", "outs0", ")", "\n", "# progressive gan", "\n", "loss", "+=", "Drift", "*", "torch", ".", "sum", "(", "outs0", "**", "2", ")", "\n", "return", "loss", "\n", "\n", "", "for", "it", ",", "(", "out0", ")", "in", "enumerate", "(", "outs0", ")", ":", "\n", "            ", "if", "self", ".", "gan_type", "==", "'lsgan'", ":", "\n", "                ", "loss", "+=", "torch", ".", "mean", "(", "(", "out0", "-", "1", ")", "**", "2", ")", "*", "2", "# LSGAN", "\n", "", "elif", "self", ".", "gan_type", "==", "'nsgan'", ":", "\n", "                ", "all1", "=", "Variable", "(", "torch", ".", "ones_like", "(", "out0", ".", "data", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "loss", "+=", "torch", ".", "mean", "(", "F", ".", "binary_cross_entropy", "(", "F", ".", "sigmoid", "(", "out0", ")", ",", "all1", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "0", ",", "\"Unsupported GAN type: {}\"", ".", "format", "(", "self", ".", "gan_type", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MsImageDis.compute_grad2": [[171, 181], ["x_in.size", "grad_dout.pow", "grad_dout.pow.view().sum", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "grad_dout.pow.size", "x_in.size", "grad_dout.pow.view", "d_out.sum"], "methods", ["None"], ["", "def", "compute_grad2", "(", "self", ",", "d_out", ",", "x_in", ")", ":", "\n", "        ", "batch_size", "=", "x_in", ".", "size", "(", "0", ")", "\n", "grad_dout", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "d_out", ".", "sum", "(", ")", ",", "inputs", "=", "x_in", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", "\n", ")", "[", "0", "]", "\n", "grad_dout2", "=", "grad_dout", ".", "pow", "(", "2", ")", "\n", "assert", "(", "grad_dout2", ".", "size", "(", ")", "==", "x_in", ".", "size", "(", ")", ")", "\n", "reg", "=", "grad_dout2", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "\n", "return", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.StyleEncoder.__init__": [[188, 203], ["torch.nn.Module.__init__", "range", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_downsample", ",", "input_dim", ",", "dim", ",", "style_dim", ",", "norm", ",", "activ", ",", "pad_type", ")", ":", "\n", "        ", "super", "(", "StyleEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "[", "]", "\n", "# Here I change the stride to 2. ", "\n", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "input_dim", ",", "dim", ",", "3", ",", "2", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "2", "*", "dim", ",", "3", ",", "2", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "dim", "*=", "2", "\n", "", "for", "i", "in", "range", "(", "n_downsample", "-", "2", ")", ":", "\n", "            ", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "2", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "", "self", ".", "model", "+=", "[", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "]", "# global average pooling", "\n", "self", ".", "model", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "style_dim", ",", "1", ",", "1", ",", "0", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ")", "\n", "self", ".", "output_dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.StyleEncoder.forward": [[204, 206], ["ms_discriminator.StyleEncoder.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.ContentEncoder.__init__": [[208, 229], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.ResBlocks", "ms_discriminator.ASPP", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_downsample", ",", "n_res", ",", "input_dim", ",", "dim", ",", "norm", ",", "activ", ",", "pad_type", ",", "dropout", ",", "tanh", "=", "False", ",", "res_type", "=", "'basic'", ")", ":", "\n", "        ", "super", "(", "ContentEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "[", "]", "\n", "# Here I change the stride to 2.", "\n", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "input_dim", ",", "dim", ",", "3", ",", "2", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "2", "*", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "dim", "*=", "2", "# 32dim", "\n", "# downsampling blocks", "\n", "for", "i", "in", "range", "(", "n_downsample", "-", "1", ")", ":", "\n", "            ", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "2", "*", "dim", ",", "3", ",", "2", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "dim", "*=", "2", "\n", "# residual blocks", "\n", "", "self", ".", "model", "+=", "[", "ResBlocks", "(", "n_res", ",", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ",", "res_type", "=", "res_type", ")", "]", "\n", "# 64 -> 128", "\n", "self", ".", "model", "+=", "[", "ASPP", "(", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "dim", "*=", "2", "\n", "if", "tanh", ":", "\n", "            ", "self", ".", "model", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ")", "\n", "self", ".", "output_dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.ContentEncoder.forward": [[230, 232], ["ms_discriminator.ContentEncoder.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.ContentEncoder_ImageNet.__init__": [[234, 240], ["torch.nn.Module.__init__", "torchvision.models.resnet50"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_downsample", ",", "n_res", ",", "input_dim", ",", "dim", ",", "norm", ",", "activ", ",", "pad_type", ")", ":", "\n", "        ", "super", "(", "ContentEncoder_ImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "# remove the final downsample", "\n", "self", ".", "model", ".", "layer4", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "model", ".", "layer4", "[", "0", "]", ".", "conv2", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "# (256,128) ----> (16,8)", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.ContentEncoder_ImageNet.forward": [[242, 252], ["ms_discriminator.ContentEncoder_ImageNet.model.conv1", "ms_discriminator.ContentEncoder_ImageNet.model.bn1", "ms_discriminator.ContentEncoder_ImageNet.model.relu", "ms_discriminator.ContentEncoder_ImageNet.model.maxpool", "ms_discriminator.ContentEncoder_ImageNet.model.layer1", "ms_discriminator.ContentEncoder_ImageNet.model.layer2", "ms_discriminator.ContentEncoder_ImageNet.model.layer3", "ms_discriminator.ContentEncoder_ImageNet.model.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.Decoder.__init__": [[254, 273], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "ms_discriminator.ResBlocks", "print", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.NonlocalBlock", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "ms_discriminator.Conv2dBlock"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_upsample", ",", "n_res", ",", "dim", ",", "output_dim", ",", "dropout", "=", "0", ",", "res_norm", "=", "'adain'", ",", "activ", "=", "'relu'", ",", "pad_type", "=", "'zero'", ",", "res_type", "=", "'basic'", ",", "non_local", "=", "False", ",", "fp16", "=", "False", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "dim", "\n", "self", ".", "model", "=", "[", "]", "\n", "self", ".", "model", "+=", "[", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "]", "\n", "self", ".", "model", "+=", "[", "ResBlocks", "(", "n_res", ",", "dim", ",", "res_norm", ",", "activ", ",", "pad_type", "=", "pad_type", ",", "res_type", "=", "res_type", ")", "]", "\n", "# non-local", "\n", "if", "non_local", ">", "0", ":", "\n", "            ", "self", ".", "model", "+=", "[", "NonlocalBlock", "(", "dim", ")", "]", "\n", "print", "(", "'use non-local!'", ")", "\n", "", "for", "i", "in", "range", "(", "n_upsample", ")", ":", "\n", "            ", "self", ".", "model", "+=", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "Conv2dBlock", "(", "dim", ",", "dim", "//", "2", ",", "5", ",", "1", ",", "2", ",", "norm", "=", "'ln'", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ",", "fp16", "=", "fp16", ")", "]", "\n", "dim", "//=", "2", "\n", "# use reflection padding in the last conv layer", "\n", "", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "'none'", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "'none'", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "output_dim", ",", "1", ",", "1", ",", "0", ",", "norm", "=", "'none'", ",", "activation", "=", "'none'", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.Decoder.forward": [[274, 277], ["ms_discriminator.Decoder.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.ResBlocks.__init__": [[282, 289], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "ms_discriminator.ResBlock"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "dim", ",", "norm", "=", "'in'", ",", "activation", "=", "'relu'", ",", "pad_type", "=", "'zero'", ",", "res_type", "=", "'basic'", ")", ":", "\n", "        ", "super", "(", "ResBlocks", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "[", "]", "\n", "self", ".", "res_type", "=", "res_type", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "self", ".", "model", "+=", "[", "ResBlock", "(", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ",", "res_type", "=", "res_type", ")", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.ResBlocks.forward": [[290, 292], ["ms_discriminator.ResBlocks.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MLP.__init__": [[294, 303], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "ms_discriminator.LinearBlock", "ms_discriminator.LinearBlock", "ms_discriminator.LinearBlock"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "dim", ",", "n_blk", ",", "norm", "=", "'in'", ",", "activ", "=", "'relu'", ")", ":", "\n", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "[", "]", "\n", "self", ".", "model", "+=", "[", "LinearBlock", "(", "input_dim", ",", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ")", "]", "\n", "for", "i", "in", "range", "(", "n_blk", "-", "2", ")", ":", "\n", "            ", "self", ".", "model", "+=", "[", "LinearBlock", "(", "dim", ",", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ")", "]", "\n", "", "self", ".", "model", "+=", "[", "LinearBlock", "(", "dim", ",", "output_dim", ",", "norm", "=", "'none'", ",", "activation", "=", "'none'", ")", "]", "# no output activations", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.MLP.forward": [[304, 306], ["ms_discriminator.MLP.model", "x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.Deconv.__init__": [[309, 317], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ")", ":", "\n", "        ", "super", "(", "Deconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model", "=", "[", "]", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "input_dim", ",", "output_dim", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "2", ")", "]", "\n", "model", "+=", "[", "nn", ".", "InstanceNorm2d", "(", "output_dim", ")", "]", "\n", "model", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "output_dim", ",", "output_dim", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.Deconv.forward": [[317, 319], ["ms_discriminator.Deconv.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.ResBlock.__init__": [[324, 349], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "ms_discriminator.NonlocalBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.Series2dBlock", "ms_discriminator.Series2dBlock", "ms_discriminator.Parallel2dBlock", "ms_discriminator.Parallel2dBlock"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "norm", ",", "activation", "=", "'relu'", ",", "pad_type", "=", "'zero'", ",", "res_type", "=", "'basic'", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "]", "\n", "if", "res_type", "==", "'basic'", "or", "res_type", "==", "'nonlocal'", ":", "\n", "            ", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "'none'", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "", "elif", "res_type", "==", "'slim'", ":", "\n", "            ", "dim_half", "=", "dim", "//", "2", "\n", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim_half", ",", "1", ",", "1", ",", "0", ",", "norm", "=", "'in'", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "model", "+=", "[", "Conv2dBlock", "(", "dim_half", ",", "dim_half", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "model", "+=", "[", "Conv2dBlock", "(", "dim_half", ",", "dim_half", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "model", "+=", "[", "Conv2dBlock", "(", "dim_half", ",", "dim", ",", "1", ",", "1", ",", "0", ",", "norm", "=", "'in'", ",", "activation", "=", "'none'", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "", "elif", "res_type", "==", "'series'", ":", "\n", "            ", "model", "+=", "[", "Series2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "model", "+=", "[", "Series2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "'none'", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "", "elif", "res_type", "==", "'parallel'", ":", "\n", "            ", "model", "+=", "[", "Parallel2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "model", "+=", "[", "Parallel2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "'none'", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "", "else", ":", "\n", "            ", "(", "'unkown block type'", ")", "\n", "", "self", ".", "res_type", "=", "res_type", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "if", "res_type", "==", "'nonlocal'", ":", "\n", "            ", "self", ".", "nonloc", "=", "NonlocalBlock", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.ResBlock.forward": [[350, 357], ["ms_discriminator.ResBlock.model", "ms_discriminator.ResBlock.nonloc"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "res_type", "==", "'nonlocal'", ":", "\n", "            ", "x", "=", "self", ".", "nonloc", "(", "x", ")", "\n", "", "residual", "=", "x", "\n", "out", "=", "self", ".", "model", "(", "x", ")", "\n", "out", "+=", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.NonlocalBlock.__init__": [[359, 369], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "norm", "=", "'in'", ")", ":", "\n", "        ", "super", "(", "NonlocalBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "\n", "self", ".", "query_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "key_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "value_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "#", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.NonlocalBlock.forward": [[369, 389], ["x.size", "ms_discriminator.NonlocalBlock.query_conv().view().permute", "ms_discriminator.NonlocalBlock.key_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "ms_discriminator.NonlocalBlock.softmax", "ms_discriminator.NonlocalBlock.value_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "ms_discriminator.NonlocalBlock.permute", "ms_discriminator.NonlocalBlock.query_conv().view", "ms_discriminator.NonlocalBlock.key_conv", "ms_discriminator.NonlocalBlock.value_conv", "ms_discriminator.NonlocalBlock.query_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X C X W X H)\n            returns :\n                out : self attention value + input feature \n                attention: B X N X N (N is Width*Height)\n        \"\"\"", "\n", "m_batchsize", ",", "C", ",", "width", ",", "height", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "self", ".", "query_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# B X CX(N)", "\n", "proj_key", "=", "self", ".", "key_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "# B X C x (*W*H)", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "# transpose check", "\n", "attention", "=", "self", ".", "softmax", "(", "energy", ")", "# BX (N) X (N) ", "\n", "proj_value", "=", "self", ".", "value_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "# B X C X N", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "proj_value", ",", "attention", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "C", ",", "width", ",", "height", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.ASPP.__init__": [[392, 413], ["torch.nn.Module.__init__", "ms_discriminator.Conv2dBlock", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock", "ms_discriminator.Conv2dBlock"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "norm", "=", "'in'", ",", "activation", "=", "'relu'", ",", "pad_type", "=", "'zero'", ")", ":", "\n", "        ", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dim_part", "=", "dim", "//", "2", "\n", "self", ".", "conv1", "=", "Conv2dBlock", "(", "dim", ",", "dim_part", ",", "1", ",", "1", ",", "0", ",", "norm", "=", "norm", ",", "activation", "=", "'none'", ",", "pad_type", "=", "pad_type", ")", "\n", "\n", "self", ".", "conv6", "=", "[", "]", "\n", "self", ".", "conv6", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim_part", ",", "1", ",", "1", ",", "0", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "self", ".", "conv6", "+=", "[", "Conv2dBlock", "(", "dim_part", ",", "dim_part", ",", "3", ",", "1", ",", "3", ",", "norm", "=", "norm", ",", "activation", "=", "'none'", ",", "pad_type", "=", "pad_type", ",", "dilation", "=", "3", ")", "]", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "conv6", ")", "\n", "\n", "self", ".", "conv12", "=", "[", "]", "\n", "self", ".", "conv12", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim_part", ",", "1", ",", "1", ",", "0", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "self", ".", "conv12", "+=", "[", "Conv2dBlock", "(", "dim_part", ",", "dim_part", ",", "3", ",", "1", ",", "6", ",", "norm", "=", "norm", ",", "activation", "=", "'none'", ",", "pad_type", "=", "pad_type", ",", "dilation", "=", "6", ")", "]", "\n", "self", ".", "conv12", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "conv12", ")", "\n", "\n", "self", ".", "conv18", "=", "[", "]", "\n", "self", ".", "conv18", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim_part", ",", "1", ",", "1", ",", "0", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "self", ".", "conv18", "+=", "[", "Conv2dBlock", "(", "dim_part", ",", "dim_part", ",", "3", ",", "1", ",", "9", ",", "norm", "=", "norm", ",", "activation", "=", "'none'", ",", "pad_type", "=", "pad_type", ",", "dilation", "=", "9", ")", "]", "\n", "self", ".", "conv18", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "conv18", ")", "\n", "\n", "self", ".", "fuse", "=", "Conv2dBlock", "(", "4", "*", "dim_part", ",", "2", "*", "dim", ",", "1", ",", "1", ",", "0", ",", "norm", "=", "norm", ",", "activation", "=", "'none'", ",", "pad_type", "=", "pad_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.ASPP.forward": [[414, 422], ["ms_discriminator.ASPP.conv1", "ms_discriminator.ASPP.conv6", "ms_discriminator.ASPP.conv12", "ms_discriminator.ASPP.conv18", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ms_discriminator.ASPP.fuse"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "conv6", "=", "self", ".", "conv6", "(", "x", ")", "\n", "conv12", "=", "self", ".", "conv12", "(", "x", ")", "\n", "conv18", "=", "self", ".", "conv18", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "conv1", ",", "conv6", ",", "conv12", ",", "conv18", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "fuse", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.Conv2dBlock.__init__": [[425, 476], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "SpectralNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "ms_discriminator.LayerNorm", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.PReLU", "ms_discriminator.AdaptiveInstanceNorm2d", "torch.nn.SELU", "torch.nn.SELU", "torch.nn.SELU", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "0", ",", "norm", "=", "'none'", ",", "activation", "=", "'relu'", ",", "pad_type", "=", "'zero'", ",", "dilation", "=", "1", ",", "fp16", "=", "False", ")", ":", "\n", "        ", "super", "(", "Conv2dBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_bias", "=", "True", "\n", "# initialize padding", "\n", "\n", "#if pad_type == 'reflect':", "\n", "#    self.pad = nn.ReflectionPad2d(padding)", "\n", "#elif pad_type == 'replicate':", "\n", "#    self.pad = nn.ReplicationPad2d(padding)", "\n", "#elif pad_type == 'zero':", "\n", "#    self.pad = nn.ZeroPad2d(padding)", "\n", "#else:", "\n", "#    assert 0, \"Unsupported padding type: {}\".format(pad_type)", "\n", "\n", "# initialize normalization", "\n", "norm_dim", "=", "output_dim", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'ln'", ":", "\n", "            ", "self", ".", "norm", "=", "LayerNorm", "(", "norm_dim", ",", "fp16", "=", "fp16", ")", "\n", "", "elif", "norm", "==", "'adain'", ":", "\n", "            ", "self", ".", "norm", "=", "AdaptiveInstanceNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'none'", "or", "norm", "==", "'sn'", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported normalization: {}\"", ".", "format", "(", "norm", ")", "\n", "\n", "# initialize activation", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'lrelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'selu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'none'", ":", "\n", "            ", "self", ".", "activation", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported activation: {}\"", ".", "format", "(", "activation", ")", "\n", "\n", "# initialize convolution", "\n", "", "if", "norm", "==", "'sn'", ":", "\n", "            ", "self", ".", "conv", "=", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "dilation", "=", "dilation", ",", "bias", "=", "self", ".", "use_bias", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "padding", "=", "1", ",", "dilation", "=", "dilation", ",", "bias", "=", "self", ".", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.Conv2dBlock.forward": [[477, 484], ["ms_discriminator.Conv2dBlock.conv", "ms_discriminator.Conv2dBlock.norm", "ms_discriminator.Conv2dBlock.activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.Series2dBlock.__init__": [[488, 537], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReplicationPad2d", "torch.nn.ReplicationPad2d", "torch.nn.ReplicationPad2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "ms_discriminator.LayerNorm", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.PReLU", "ms_discriminator.AdaptiveInstanceNorm2d", "torch.nn.SELU", "torch.nn.SELU", "torch.nn.SELU", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "0", ",", "norm", "=", "'none'", ",", "activation", "=", "'relu'", ",", "pad_type", "=", "'zero'", ")", ":", "\n", "        ", "super", "(", "Series2dBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_bias", "=", "True", "\n", "# initialize padding", "\n", "if", "pad_type", "==", "'reflect'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "padding", ")", "\n", "", "elif", "pad_type", "==", "'replicate'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReplicationPad2d", "(", "padding", ")", "\n", "", "elif", "pad_type", "==", "'zero'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "padding", ")", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported padding type: {}\"", ".", "format", "(", "pad_type", ")", "\n", "\n", "# initialize normalization", "\n", "", "norm_dim", "=", "output_dim", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'ln'", ":", "\n", "            ", "self", ".", "norm", "=", "LayerNorm", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'adain'", ":", "\n", "            ", "self", ".", "norm", "=", "AdaptiveInstanceNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'none'", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported normalization: {}\"", ".", "format", "(", "norm", ")", "\n", "\n", "# initialize activation", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'lrelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'selu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'none'", ":", "\n", "            ", "self", ".", "activation", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported activation: {}\"", ".", "format", "(", "activation", ")", "\n", "\n", "# initialize convolution", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "bias", "=", "self", ".", "use_bias", ")", "\n", "\n", "self", ".", "instance_norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.Series2dBlock.forward": [[538, 545], ["ms_discriminator.Series2dBlock.conv", "ms_discriminator.Series2dBlock.instance_norm", "ms_discriminator.Series2dBlock.pad", "ms_discriminator.Series2dBlock.norm", "ms_discriminator.Series2dBlock.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "self", ".", "pad", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "+", "x", "\n", "x", "=", "self", ".", "instance_norm", "(", "x", ")", "\n", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.Parallel2dBlock.__init__": [[547, 596], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReplicationPad2d", "torch.nn.ReplicationPad2d", "torch.nn.ReplicationPad2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "ms_discriminator.LayerNorm", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.PReLU", "ms_discriminator.AdaptiveInstanceNorm2d", "torch.nn.SELU", "torch.nn.SELU", "torch.nn.SELU", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "0", ",", "norm", "=", "'none'", ",", "activation", "=", "'relu'", ",", "pad_type", "=", "'zero'", ")", ":", "\n", "        ", "super", "(", "Parallel2dBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_bias", "=", "True", "\n", "# initialize padding", "\n", "if", "pad_type", "==", "'reflect'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "padding", ")", "\n", "", "elif", "pad_type", "==", "'replicate'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReplicationPad2d", "(", "padding", ")", "\n", "", "elif", "pad_type", "==", "'zero'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "padding", ")", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported padding type: {}\"", ".", "format", "(", "pad_type", ")", "\n", "\n", "# initialize normalization", "\n", "", "norm_dim", "=", "output_dim", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'ln'", ":", "\n", "            ", "self", ".", "norm", "=", "LayerNorm", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'adain'", ":", "\n", "            ", "self", ".", "norm", "=", "AdaptiveInstanceNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'none'", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported normalization: {}\"", ".", "format", "(", "norm", ")", "\n", "\n", "# initialize activation", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'lrelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'selu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'none'", ":", "\n", "            ", "self", ".", "activation", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported activation: {}\"", ".", "format", "(", "activation", ")", "\n", "\n", "# initialize convolution", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "bias", "=", "self", ".", "use_bias", ")", "\n", "\n", "self", ".", "instance_norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.Parallel2dBlock.forward": [[597, 603], ["ms_discriminator.Parallel2dBlock.instance_norm", "ms_discriminator.Parallel2dBlock.conv", "ms_discriminator.Parallel2dBlock.norm", "ms_discriminator.Parallel2dBlock.activation", "ms_discriminator.Parallel2dBlock.pad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "self", ".", "pad", "(", "x", ")", ")", "+", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "instance_norm", "(", "x", ")", "\n", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.LinearBlock.__init__": [[605, 639], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.InstanceNorm1d", "torch.nn.InstanceNorm1d", "torch.nn.InstanceNorm1d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "ms_discriminator.LayerNorm", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.SELU", "torch.nn.SELU", "torch.nn.SELU", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "norm", "=", "'none'", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "LinearBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "use_bias", "=", "True", "\n", "# initialize fully connected layer", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "use_bias", ")", "\n", "\n", "# initialize normalization", "\n", "norm_dim", "=", "output_dim", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'ln'", ":", "\n", "            ", "self", ".", "norm", "=", "LayerNorm", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'none'", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported normalization: {}\"", ".", "format", "(", "norm", ")", "\n", "\n", "# initialize activation", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'lrelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'selu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'none'", ":", "\n", "            ", "self", ".", "activation", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported activation: {}\"", ".", "format", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.LinearBlock.forward": [[640, 650], ["ms_discriminator.LinearBlock.fc", "ms_discriminator.LinearBlock.unsqueeze", "ms_discriminator.LinearBlock.norm", "ms_discriminator.LinearBlock.view", "ms_discriminator.LinearBlock.activation", "ms_discriminator.LinearBlock.size", "ms_discriminator.LinearBlock.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "norm", ":", "\n", "#reshape input", "\n", "            ", "out", "=", "out", ".", "unsqueeze", "(", "1", ")", "\n", "out", "=", "self", ".", "norm", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "out", "=", "self", ".", "activation", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.AdaptiveInstanceNorm2d.__init__": [[655, 666], ["torch.nn.Module.__init__", "ms_discriminator.AdaptiveInstanceNorm2d.register_buffer", "ms_discriminator.AdaptiveInstanceNorm2d.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "AdaptiveInstanceNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "# weight and bias are dynamically assigned", "\n", "self", ".", "weight", "=", "None", "\n", "self", ".", "bias", "=", "None", "\n", "# just dummy buffers, not used", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.AdaptiveInstanceNorm2d.forward": [[667, 679], ["ms_discriminator.AdaptiveInstanceNorm2d.running_mean.repeat().type_as", "ms_discriminator.AdaptiveInstanceNorm2d.running_var.repeat().type_as", "x.contiguous().view", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm.view", "x.size", "x.size", "ms_discriminator.AdaptiveInstanceNorm2d.running_mean.repeat", "ms_discriminator.AdaptiveInstanceNorm2d.running_var.repeat", "x.contiguous", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "self", ".", "weight", "is", "not", "None", "and", "self", ".", "bias", "is", "not", "None", ",", "\"Please assign weight and bias before calling AdaIN!\"", "\n", "b", ",", "c", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "running_mean", "=", "self", ".", "running_mean", ".", "repeat", "(", "b", ")", ".", "type_as", "(", "x", ")", "\n", "running_var", "=", "self", ".", "running_var", ".", "repeat", "(", "b", ")", ".", "type_as", "(", "x", ")", "\n", "# Apply instance norm", "\n", "x_reshaped", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "b", "*", "c", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "out", "=", "F", ".", "batch_norm", "(", "\n", "x_reshaped", ",", "running_mean", ",", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "True", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "return", "out", ".", "view", "(", "b", ",", "c", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.AdaptiveInstanceNorm2d.__repr__": [[680, 682], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "str", "(", "self", ".", "num_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.LayerNorm.__init__": [[685, 694], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "affine", "=", "True", ",", "fp16", "=", "False", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "fp16", "=", "fp16", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ".", "uniform_", "(", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.LayerNorm.forward": [[694, 710], ["x.type", "x.view().float().mean().view", "x.view().float().std().view", "x.view().mean().view.half", "x.view().std().view.half", "x.view().mean().view", "x.view().std().view", "ms_discriminator.LayerNorm.beta.view", "x.dim", "x.view().float().mean", "x.view().float().std", "x.view().mean", "x.view().std", "ms_discriminator.LayerNorm.gamma.view", "x.dim", "x.view().float", "x.view().float", "x.view", "x.view", "x.size", "x.size", "x.view", "x.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shape", "=", "[", "-", "1", "]", "+", "[", "1", "]", "*", "(", "x", ".", "dim", "(", ")", "-", "1", ")", "\n", "if", "x", ".", "type", "(", ")", "==", "'torch.cuda.HalfTensor'", ":", "# For Safety", "\n", "            ", "mean", "=", "x", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "view", "(", "*", "shape", ")", "\n", "std", "=", "x", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "std", "(", ")", ".", "view", "(", "*", "shape", ")", "\n", "mean", "=", "mean", ".", "half", "(", ")", "\n", "std", "=", "std", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "mean", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "mean", "(", "1", ")", ".", "view", "(", "*", "shape", ")", "\n", "std", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "std", "(", "1", ")", ".", "view", "(", "*", "shape", ")", "\n", "\n", "", "x", "=", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "shape", "=", "[", "1", ",", "-", "1", "]", "+", "[", "1", "]", "*", "(", "x", ".", "dim", "(", ")", "-", "2", ")", "\n", "x", "=", "x", "*", "self", ".", "gamma", ".", "view", "(", "*", "shape", ")", "+", "self", ".", "beta", ".", "view", "(", "*", "shape", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.ms_discriminator.weights_init": [[17, 38], ["hasattr", "torch.normal_", "hasattr", "torch.constant_", "classname.find", "classname.find", "torch.xavier_normal_", "torch.kaiming_normal_", "math.sqrt", "torch.orthogonal_", "math.sqrt"], "function", ["None"], ["", "def", "weights_init", "(", "init_type", "=", "'gaussian'", ")", ":", "\n", "    ", "def", "init_fun", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "(", "classname", ".", "find", "(", "'Conv'", ")", "==", "0", "or", "classname", ".", "find", "(", "'Linear'", ")", "==", "0", ")", "and", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "# print m.__class__.__name__", "\n", "            ", "if", "init_type", "==", "'gaussian'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "", "elif", "init_type", "==", "'default'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "assert", "0", ",", "\"Unsupported initialization: {}\"", ".", "format", "(", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "", "return", "init_fun", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_no_p.Bottleneck.__init__": [[9, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent_no_p.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent_no_p.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent_no_p.Bottleneck.bn3.parameters", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# change", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "padding", "=", "dilation", "\n", "# change", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_no_p.Bottleneck.forward": [[31, 47], ["deeplab_advent_no_p.Bottleneck.conv1", "deeplab_advent_no_p.Bottleneck.bn1", "deeplab_advent_no_p.Bottleneck.relu", "deeplab_advent_no_p.Bottleneck.conv2", "deeplab_advent_no_p.Bottleneck.bn2", "deeplab_advent_no_p.Bottleneck.relu", "deeplab_advent_no_p.Bottleneck.conv3", "deeplab_advent_no_p.Bottleneck.bn3", "deeplab_advent_no_p.Bottleneck.relu", "deeplab_advent_no_p.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_no_p.ClassifierModule.__init__": [[50, 60], ["torch.Module.__init__", "torch.ModuleList", "zip", "deeplab_advent_no_p.ClassifierModule.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "ClassifierModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_no_p.ClassifierModule.forward": [[61, 66], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_no_p.ResNetMulti.__init__": [[69, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent_no_p.ResNetMulti.bn1.parameters", "torch.ReLU", "torch.MaxPool2d", "deeplab_advent_no_p.ResNetMulti._make_layer", "deeplab_advent_no_p.ResNetMulti._make_layer", "deeplab_advent_no_p.ResNetMulti._make_layer", "deeplab_advent_no_p.ResNetMulti._make_layer", "deeplab_advent_no_p.ClassifierModule", "deeplab_advent_no_p.ResNetMulti.modules", "deeplab_advent_no_p.ClassifierModule", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "multi_level", ")", ":", "\n", "        ", "self", ".", "multi_level", "=", "multi_level", "\n", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "self", ".", "layer5", "=", "ClassifierModule", "(", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "", "self", ".", "layer6", "=", "ClassifierModule", "(", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_no_p.ResNetMulti._make_layer": [[94, 114], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "(", "stride", "!=", "1", "\n", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "\n", "or", "dilation", "==", "2", "\n", "or", "dilation", "==", "4", ")", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_no_p.ResNetMulti.forward": [[115, 130], ["deeplab_advent_no_p.ResNetMulti.conv1", "deeplab_advent_no_p.ResNetMulti.bn1", "deeplab_advent_no_p.ResNetMulti.relu", "deeplab_advent_no_p.ResNetMulti.maxpool", "deeplab_advent_no_p.ResNetMulti.layer1", "deeplab_advent_no_p.ResNetMulti.layer2", "deeplab_advent_no_p.ResNetMulti.layer3", "deeplab_advent_no_p.ResNetMulti.layer4", "deeplab_advent_no_p.ResNetMulti.layer6", "deeplab_advent_no_p.ResNetMulti.layer5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "x1", "=", "self", ".", "layer5", "(", "x", ")", "# produce segmap 1", "\n", "", "else", ":", "\n", "            ", "x1", "=", "None", "\n", "", "x2", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer6", "(", "x2", ")", "# produce segmap 2", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_no_p.ResNetMulti.get_1x_lr_params_no_scale": [[131, 154], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_no_scale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_no_p.ResNetMulti.get_10x_lr_params": [[155, 168], ["b.append", "range", "b.append", "deeplab_advent_no_p.ResNetMulti.layer6.parameters", "len", "deeplab_advent_no_p.ResNetMulti.layer5.parameters"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_no_p.ResNetMulti.optim_parameters": [[169, 172], ["deeplab_advent_no_p.ResNetMulti.get_1x_lr_params_no_scale", "deeplab_advent_no_p.ResNetMulti.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_1x_lr_params_no_scale", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_no_scale", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_no_p.get_deeplab_v2": [[174, 177], ["deeplab_advent_no_p.ResNetMulti"], "function", ["None"], ["", "", "def", "get_deeplab_v2", "(", "num_classes", "=", "19", ",", "multi_level", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNetMulti", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "multi_level", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.Bottleneck.__init__": [[9, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent_caco.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent_caco.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent_caco.Bottleneck.bn3.parameters", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# change", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "padding", "=", "dilation", "\n", "# change", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.Bottleneck.forward": [[31, 47], ["deeplab_advent_caco.Bottleneck.conv1", "deeplab_advent_caco.Bottleneck.bn1", "deeplab_advent_caco.Bottleneck.relu", "deeplab_advent_caco.Bottleneck.conv2", "deeplab_advent_caco.Bottleneck.bn2", "deeplab_advent_caco.Bottleneck.relu", "deeplab_advent_caco.Bottleneck.conv3", "deeplab_advent_caco.Bottleneck.bn3", "deeplab_advent_caco.Bottleneck.relu", "deeplab_advent_caco.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.ClassifierModule.__init__": [[50, 60], ["torch.Module.__init__", "torch.ModuleList", "zip", "deeplab_advent_caco.ClassifierModule.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "ClassifierModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.ClassifierModule.forward": [[61, 66], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.GradScale.__init__": [[74, 76], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.GradScale.forward": [[77, 79], ["x.view_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.GradScale.backward": [[80, 82], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "return", "(", "grad_output", "*", "self", ".", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.MLP2d.__init__": [[89, 97], ["torch.Module.__init__", "deeplab_advent_caco.conv1x1", "torch.BatchNorm2d", "torch.ReLU", "deeplab_advent_caco.conv1x1"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.conv1x1", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "inner_dim", "=", "4096", ",", "out_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "MLP2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "linear1", "=", "conv1x1", "(", "in_dim", ",", "inner_dim", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inner_dim", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "linear2", "=", "conv1x1", "(", "inner_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.MLP2d.forward": [[98, 106], ["deeplab_advent_caco.MLP2d.linear1", "deeplab_advent_caco.MLP2d.bn1", "deeplab_advent_caco.MLP2d.relu1", "deeplab_advent_caco.MLP2d.linear2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "linear2", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.ResNetMulti.__init__": [[113, 138], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent_caco.ResNetMulti.bn1.parameters", "torch.ReLU", "torch.MaxPool2d", "deeplab_advent_caco.ResNetMulti._make_layer", "deeplab_advent_caco.ResNetMulti._make_layer", "deeplab_advent_caco.ResNetMulti._make_layer", "deeplab_advent_caco.ResNetMulti._make_layer", "deeplab_advent_caco.ClassifierModule", "deeplab_advent_caco.Proj_Head", "deeplab_advent_caco.ResNetMulti.modules", "deeplab_advent_caco.ClassifierModule", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.Proj_Head"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "multi_level", ")", ":", "\n", "        ", "self", ".", "multi_level", "=", "multi_level", "\n", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "self", ".", "layer5", "=", "ClassifierModule", "(", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "", "self", ".", "layer6", "=", "ClassifierModule", "(", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "self", ".", "projector_1", "=", "Proj_Head", "(", "in_dim", "=", "1024", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.ResNetMulti._make_layer": [[139, 159], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "(", "stride", "!=", "1", "\n", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "\n", "or", "dilation", "==", "2", "\n", "or", "dilation", "==", "4", ")", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.ResNetMulti.forward": [[160, 179], ["deeplab_advent_caco.ResNetMulti.conv1", "deeplab_advent_caco.ResNetMulti.bn1", "deeplab_advent_caco.ResNetMulti.relu", "deeplab_advent_caco.ResNetMulti.maxpool", "deeplab_advent_caco.ResNetMulti.layer1", "deeplab_advent_caco.ResNetMulti.layer2", "deeplab_advent_caco.ResNetMulti.layer3", "deeplab_advent_caco.ResNetMulti.layer4", "deeplab_advent_caco.ResNetMulti.layer6", "deeplab_advent_caco.ResNetMulti.layer5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "x1", "=", "self", ".", "layer5", "(", "x", ")", "# produce segmap 1", "\n", "feature_1", "=", "x", "# feature map", "\n", "", "else", ":", "\n", "            ", "x1", "=", "None", "\n", "# feature_1 = None", "\n", "", "x2", "=", "self", ".", "layer4", "(", "x", ")", "\n", "feature_2", "=", "x2", "# feature map", "\n", "x2", "=", "self", ".", "layer6", "(", "x2", ")", "# produce segmap 2", "\n", "# return x1, x2, feature_1, feature_2", "\n", "return", "x1", ",", "x2", ",", "feature_1", ",", "feature_2", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.ResNetMulti.get_1x_lr_params_no_scale": [[180, 203], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_no_scale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.ResNetMulti.get_10x_lr_params": [[204, 219], ["b.append", "range", "b.append", "b.append", "deeplab_advent_caco.ResNetMulti.layer6.parameters", "len", "deeplab_advent_caco.ResNetMulti.layer5.parameters", "deeplab_advent_caco.ResNetMulti.projector_1.parameters"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "projector_1", ".", "parameters", "(", ")", ")", "\n", "", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "# b.append(self.projector_2.parameters())", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.ResNetMulti.optim_parameters": [[220, 223], ["deeplab_advent_caco.ResNetMulti.get_1x_lr_params_no_scale", "deeplab_advent_caco.ResNetMulti.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_1x_lr_params_no_scale", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_no_scale", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.conv1x1": [[68, 71], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.grad_scale": [[84, 86], ["deeplab_advent_caco.GradScale"], "function", ["None"], ["", "", "def", "grad_scale", "(", "x", ",", "lambd", "=", "0.1", ")", ":", "\n", "    ", "return", "GradScale", "(", "lambd", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.Proj_Head": [[108, 110], ["deeplab_advent_caco.MLP2d"], "function", ["None"], ["", "", "def", "Proj_Head", "(", "in_dim", "=", "1024", ",", "inner_dim", "=", "2048", ",", "out_dim", "=", "128", ")", ":", "\n", "    ", "return", "MLP2d", "(", "in_dim", ",", "inner_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_caco.get_deeplab_v2": [[225, 228], ["deeplab_advent_caco.ResNetMulti"], "function", ["None"], ["", "", "def", "get_deeplab_v2", "(", "num_classes", "=", "19", ",", "multi_level", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNetMulti", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "multi_level", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.Bottleneck.__init__": [[9, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent_test.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent_test.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent_test.Bottleneck.bn3.parameters", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# change", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "padding", "=", "dilation", "\n", "# change", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.Bottleneck.forward": [[31, 47], ["deeplab_advent_test.Bottleneck.conv1", "deeplab_advent_test.Bottleneck.bn1", "deeplab_advent_test.Bottleneck.relu", "deeplab_advent_test.Bottleneck.conv2", "deeplab_advent_test.Bottleneck.bn2", "deeplab_advent_test.Bottleneck.relu", "deeplab_advent_test.Bottleneck.conv3", "deeplab_advent_test.Bottleneck.bn3", "deeplab_advent_test.Bottleneck.relu", "deeplab_advent_test.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.ClassifierModule.__init__": [[50, 60], ["torch.Module.__init__", "torch.ModuleList", "zip", "deeplab_advent_test.ClassifierModule.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "ClassifierModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.ClassifierModule.forward": [[61, 66], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.__init__": [[74, 76], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.forward": [[77, 79], ["x.view_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward": [[80, 82], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "return", "(", "grad_output", "*", "self", ".", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.MLP2d.__init__": [[89, 97], ["torch.Module.__init__", "deeplab_advent_test.conv1x1", "torch.BatchNorm2d", "torch.ReLU", "deeplab_advent_test.conv1x1"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.conv1x1", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "inner_dim", "=", "4096", ",", "out_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "MLP2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "linear1", "=", "conv1x1", "(", "in_dim", ",", "inner_dim", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inner_dim", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "linear2", "=", "conv1x1", "(", "inner_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.MLP2d.forward": [[98, 106], ["deeplab_advent_test.MLP2d.linear1", "deeplab_advent_test.MLP2d.bn1", "deeplab_advent_test.MLP2d.relu1", "deeplab_advent_test.MLP2d.linear2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "linear2", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.ResNetMulti.__init__": [[112, 137], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "deeplab_advent_test.ResNetMulti.bn1.parameters", "torch.ReLU", "torch.MaxPool2d", "deeplab_advent_test.ResNetMulti._make_layer", "deeplab_advent_test.ResNetMulti._make_layer", "deeplab_advent_test.ResNetMulti._make_layer", "deeplab_advent_test.ResNetMulti._make_layer", "deeplab_advent_test.ClassifierModule", "deeplab_advent_test.Proj_Head", "deeplab_advent_test.ResNetMulti.modules", "deeplab_advent_test.ClassifierModule", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.Proj_Head"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "multi_level", ")", ":", "\n", "        ", "self", ".", "multi_level", "=", "multi_level", "\n", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "self", ".", "layer5", "=", "ClassifierModule", "(", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "", "self", ".", "layer6", "=", "ClassifierModule", "(", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "self", ".", "projector_1", "=", "Proj_Head", "(", "in_dim", "=", "1024", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.ResNetMulti._make_layer": [[138, 158], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "(", "stride", "!=", "1", "\n", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "\n", "or", "dilation", "==", "2", "\n", "or", "dilation", "==", "4", ")", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.ResNetMulti.forward": [[159, 175], ["deeplab_advent_test.ResNetMulti.conv1", "deeplab_advent_test.ResNetMulti.bn1", "deeplab_advent_test.ResNetMulti.relu", "deeplab_advent_test.ResNetMulti.maxpool", "deeplab_advent_test.ResNetMulti.layer1", "deeplab_advent_test.ResNetMulti.layer2", "deeplab_advent_test.ResNetMulti.layer3", "deeplab_advent_test.ResNetMulti.layer4", "deeplab_advent_test.ResNetMulti.layer6", "deeplab_advent_test.ResNetMulti.layer5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "x1", "=", "self", ".", "layer5", "(", "x", ")", "# produce segmap 1", "\n", "", "else", ":", "\n", "            ", "x1", "=", "None", "\n", "# feature_1 = None", "\n", "", "x2", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer6", "(", "x2", ")", "# produce segmap 2", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.ResNetMulti.get_1x_lr_params_no_scale": [[176, 199], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_no_scale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.ResNetMulti.get_10x_lr_params": [[200, 215], ["b.append", "range", "b.append", "b.append", "deeplab_advent_test.ResNetMulti.layer6.parameters", "len", "deeplab_advent_test.ResNetMulti.layer5.parameters", "deeplab_advent_test.ResNetMulti.projector_1.parameters"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "projector_1", ".", "parameters", "(", ")", ")", "\n", "", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "# b.append(self.projector_2.parameters())", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.ResNetMulti.optim_parameters": [[216, 219], ["deeplab_advent_test.ResNetMulti.get_1x_lr_params_no_scale", "deeplab_advent_test.ResNetMulti.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_1x_lr_params_no_scale", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_no_scale", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.conv1x1": [[68, 71], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.grad_scale": [[84, 86], ["deeplab_advent_test.GradScale"], "function", ["None"], ["", "", "def", "grad_scale", "(", "x", ",", "lambd", "=", "0.1", ")", ":", "\n", "    ", "return", "GradScale", "(", "lambd", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.Proj_Head": [[107, 109], ["deeplab_advent_test.MLP2d"], "function", ["None"], ["", "", "def", "Proj_Head", "(", "in_dim", "=", "1024", ",", "inner_dim", "=", "2048", ",", "out_dim", "=", "128", ")", ":", "\n", "    ", "return", "MLP2d", "(", "in_dim", ",", "inner_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.get_deeplab_v2": [[221, 224], ["deeplab_advent_test.ResNetMulti"], "function", ["None"], ["", "", "def", "get_deeplab_v2", "(", "num_classes", "=", "19", ",", "multi_level", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNetMulti", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "multi_level", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.Bottleneck.__init__": [[9, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "deeplabv2.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.BatchNorm2d", "deeplabv2.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.BatchNorm2d", "deeplabv2.Bottleneck.bn3.parameters", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["import", "numpy", "as", "np", "\n", "from", "models", ".", "sync_batchnorm", ".", "batchnorm", "import", "SynchronizedBatchNorm2d", "\n", "\n", "affine_par", "=", "True", "\n", "\n", "\n", "def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n", "\n", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "\n", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.Bottleneck.forward": [[31, 47], ["deeplabv2.Bottleneck.conv1", "deeplabv2.Bottleneck.bn1", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.conv2", "deeplabv2.Bottleneck.bn2", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.conv3", "deeplabv2.Bottleneck.bn3", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.downsample"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.ClassifierModule.__init__": [[50, 60], ["torch.Module.__init__", "torch.ModuleList", "zip", "deeplabv2.ClassifierModule.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.ClassifierModule.forward": [[61, 66], ["range", "len"], "methods", ["None"], ["", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.ResNetMulti.__init__": [[69, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "deeplabv2.ResNetMulti.bn1.parameters", "torch.ReLU", "torch.MaxPool2d", "deeplabv2.ResNetMulti._make_layer", "deeplabv2.ResNetMulti._make_layer", "deeplabv2.ResNetMulti._make_layer", "deeplabv2.ResNetMulti._make_layer", "deeplabv2.ClassifierModule", "deeplabv2.ResNetMulti.modules", "deeplabv2.ClassifierModule", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer"], ["#     i.requires_grad = False", "\n", "\n", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "# for i in self.bn2.parameters():", "\n", "#     i.requires_grad = False", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "# for i in self.bn3.parameters():", "\n", "#     i.requires_grad = False", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.ResNetMulti._make_layer": [[94, 114], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Classifier_Module", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.ResNetMulti.forward": [[115, 130], ["deeplabv2.ResNetMulti.conv1", "deeplabv2.ResNetMulti.bn1", "deeplabv2.ResNetMulti.relu", "deeplabv2.ResNetMulti.maxpool", "deeplabv2.ResNetMulti.layer1", "deeplabv2.ResNetMulti.layer2", "deeplabv2.ResNetMulti.layer3", "deeplabv2.ResNetMulti.layer4", "deeplabv2.ResNetMulti.layer6", "deeplabv2.ResNetMulti.layer5"], "methods", ["None"], ["\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n", "", "", "", "class", "SEBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "r", "=", "16", ")", ":", "\n", "        ", "super", "(", "SEBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "global_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "se", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "inplanes", ",", "inplanes", "//", "r", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.ResNetMulti.get_1x_lr_params_no_scale": [[131, 154], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "inplanes", "//", "r", ",", "inplanes", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "xx", "=", "self", ".", "global_pool", "(", "x", ")", "\n", "xx", "=", "xx", ".", "view", "(", "xx", ".", "size", "(", "0", ")", ",", "xx", ".", "size", "(", "1", ")", ")", "\n", "se_weight", "=", "self", ".", "se", "(", "xx", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "x", ".", "mul", "(", "se_weight", ")", "\n", "\n", "", "", "class", "Classifier_Module2", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ",", "droprate", "=", "0.1", ",", "use_se", "=", "True", ")", ":", "\n", "        ", "super", "(", "Classifier_Module2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", ")", "\n", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "#self.conv2d_list.append(", "\n", "#    nn.BatchNorm2d(inplanes))", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.ResNetMulti.get_10x_lr_params": [[155, 168], ["b.append", "range", "b.append", "deeplabv2.ResNetMulti.layer6.parameters", "len", "deeplabv2.ResNetMulti.layer5.parameters"], "methods", ["None"], ["nn", ".", "Sequential", "(", "*", "[", "\n", "#nn.ReflectionPad2d(padding),", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", ")", "\n", "\n", "", "if", "use_se", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "*", "[", "SEBlock", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.ResNetMulti.optim_parameters": [[169, 172], ["deeplabv2.ResNetMulti.get_1x_lr_params_no_scale", "deeplabv2.ResNetMulti.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_1x_lr_params_no_scale", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_10x_lr_params"], ["\n", "", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "Dropout2d", "(", "droprate", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.get_deeplab_v2": [[174, 177], ["deeplabv2.ResNetMulti"], "function", ["None"], ["for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.Bottleneck.__init__": [[9, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "deeplabv2_f.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.BatchNorm2d", "deeplabv2_f.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.BatchNorm2d", "deeplabv2_f.Bottleneck.bn3.parameters", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# change", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "padding", "=", "dilation", "\n", "# change", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.Bottleneck.forward": [[31, 47], ["deeplabv2_f.Bottleneck.conv1", "deeplabv2_f.Bottleneck.bn1", "deeplabv2_f.Bottleneck.relu", "deeplabv2_f.Bottleneck.conv2", "deeplabv2_f.Bottleneck.bn2", "deeplabv2_f.Bottleneck.relu", "deeplabv2_f.Bottleneck.conv3", "deeplabv2_f.Bottleneck.bn3", "deeplabv2_f.Bottleneck.relu", "deeplabv2_f.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ClassifierModule.__init__": [[50, 60], ["torch.Module.__init__", "torch.ModuleList", "zip", "deeplabv2_f.ClassifierModule.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "ClassifierModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ClassifierModule.forward": [[61, 66], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__": [[69, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "deeplabv2_f.ResNetMulti.bn1.parameters", "torch.ReLU", "torch.MaxPool2d", "deeplabv2_f.ResNetMulti._make_layer", "deeplabv2_f.ResNetMulti._make_layer", "deeplabv2_f.ResNetMulti._make_layer", "deeplabv2_f.ResNetMulti._make_layer", "deeplabv2_f.ClassifierModule", "deeplabv2_f.ResNetMulti.modules", "deeplabv2_f.ClassifierModule", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.__init__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "multi_level", ")", ":", "\n", "        ", "self", ".", "multi_level", "=", "multi_level", "\n", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "self", ".", "layer5", "=", "ClassifierModule", "(", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "", "self", ".", "layer6", "=", "ClassifierModule", "(", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti._make_layer": [[94, 114], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "(", "stride", "!=", "1", "\n", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "\n", "or", "dilation", "==", "2", "\n", "or", "dilation", "==", "4", ")", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.forward": [[115, 133], ["deeplabv2_f.ResNetMulti.conv1", "deeplabv2_f.ResNetMulti.bn1", "deeplabv2_f.ResNetMulti.relu", "deeplabv2_f.ResNetMulti.maxpool", "deeplabv2_f.ResNetMulti.layer1", "deeplabv2_f.ResNetMulti.layer2", "deeplabv2_f.ResNetMulti.layer3", "deeplabv2_f.ResNetMulti.layer4", "deeplabv2_f.ResNetMulti.layer6", "deeplabv2_f.ResNetMulti.layer5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "x1", "=", "self", ".", "layer5", "(", "x", ")", "# produce segmap 1", "\n", "f1", "=", "x", "\n", "", "else", ":", "\n", "            ", "x1", "=", "None", "\n", "f1", "=", "None", "\n", "", "x2", "=", "self", ".", "layer4", "(", "x", ")", "\n", "f2", "=", "x2", "\n", "x2", "=", "self", ".", "layer6", "(", "x2", ")", "# produce segmap 2", "\n", "return", "x1", ",", "x2", ",", "f1", ",", "f2", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_1x_lr_params_no_scale": [[134, 157], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_no_scale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_10x_lr_params": [[158, 171], ["b.append", "range", "b.append", "deeplabv2_f.ResNetMulti.layer6.parameters", "len", "deeplabv2_f.ResNetMulti.layer5.parameters"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.optim_parameters": [[172, 175], ["deeplabv2_f.ResNetMulti.get_1x_lr_params_no_scale", "deeplabv2_f.ResNetMulti.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_1x_lr_params_no_scale", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "lr", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_no_scale", "(", ")", ",", "'lr'", ":", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "lr", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.get_deeplab_v2_f": [[177, 180], ["deeplabv2_f.ResNetMulti"], "function", ["None"], ["", "", "def", "get_deeplab_v2_f", "(", "num_classes", "=", "19", ",", "multi_level", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNetMulti", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "multi_level", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.scripts.train.get_arguments": [[23, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["torch", ".", "cuda", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "## create dataset", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "#'cuda:0'", "\n", "datasets", "=", "create_dataset", "(", "opt", ",", "logger", ")", "\n", "\n", "if", "opt", ".", "model_name", "==", "'deeplabv2'", ":", "\n", "        ", "model", "=", "adaptation_modelv2", ".", "CustomModel", "(", "opt", ",", "logger", ")", "\n", "\n", "", "print", "(", "'backbone_flag'", ")", "\n", "\n", "# Setup Metrics", "\n", "running_metrics_val", "=", "runningScore", "(", "opt", ".", "n_class", ")", "\n", "time_meter", "=", "averageMeter", "(", ")", "\n", "\n", "# load category anchors", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.scripts.train.main": [[41, 141], ["train.get_arguments", "print", "print", "advent.domain_adaptation.config.cfg_from_file", "print", "pprint.pprint", "os.exists", "print", "advent.dataset.gta5.GTA5DataSet", "torch.utils.data.DataLoader", "advent.dataset.cityscapes.CityscapesDataSet", "torch.utils.data.DataLoader", "caco.domain_adaptation.train_UDA.train_domain_adaptation", "os.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "torch.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "os.environ.get", "os.environ.get", "advent.model.deeplabv2.get_deeplab_v2", "torch.load", "NotImplementedError", "open", "yaml.dump", "os.join", "numpy.random.seed", "advent.model.deeplabv2.get_deeplab_v2.state_dict().copy", "advent.model.deeplabv2.get_deeplab_v2.load_state_dict", "advent.model.deeplabv2.get_deeplab_v2.load_state_dict", "os.join", "i.split", "advent.model.deeplabv2.get_deeplab_v2.state_dict"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.scripts.train_caco.get_arguments", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.config.cfg_from_file", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.train_domain_adaptation", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.get_deeplab_v2"], ["        ", "objective_vectors", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "opt", ".", "resume_path", ")", ",", "'prototypes_on_{}_from_{}'", ".", "format", "(", "opt", ".", "tgt_dataset", ",", "opt", ".", "model_name", ")", ")", ")", "\n", "model", ".", "objective_vectors", "=", "torch", ".", "Tensor", "(", "objective_vectors", ")", ".", "to", "(", "0", ")", "\n", "\n", "# begin training", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "logdir", ",", "\"from_{}_to_{}_on_{}_current_model.pkl\"", ".", "format", "(", "opt", ".", "src_dataset", ",", "opt", ".", "tgt_dataset", ",", "opt", ".", "model_name", ")", ")", "\n", "model", ".", "iter", "=", "0", "\n", "start_epoch", "=", "0", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "opt", ".", "epochs", ")", ":", "\n", "        ", "for", "data_i", "in", "datasets", ".", "target_train_loader", ":", "\n", "            ", "target_image", "=", "data_i", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "target_imageS", "=", "data_i", "[", "'img_strong'", "]", ".", "to", "(", "device", ")", "\n", "target_params", "=", "data_i", "[", "'params'", "]", "\n", "target_image_full", "=", "data_i", "[", "'img_full'", "]", ".", "to", "(", "device", ")", "\n", "target_weak_params", "=", "data_i", "[", "'weak_params'", "]", "\n", "\n", "#target_label", "\n", "# target_label = data_i['label'].to(device)", "\n", "\n", "target_lp", "=", "data_i", "[", "'lp'", "]", ".", "to", "(", "device", ")", "if", "'lp'", "in", "data_i", ".", "keys", "(", ")", "else", "None", "\n", "target_lpsoft", "=", "data_i", "[", "'lpsoft'", "]", ".", "to", "(", "device", ")", "if", "'lpsoft'", "in", "data_i", ".", "keys", "(", ")", "else", "None", "\n", "source_data", "=", "datasets", ".", "source_train_loader", ".", "next", "(", ")", "\n", "\n", "model", ".", "iter", "+=", "1", "\n", "i", "=", "model", ".", "iter", "\n", "images", "=", "source_data", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "source_data", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "source_imageS", "=", "source_data", "[", "'img_strong'", "]", ".", "to", "(", "device", ")", "\n", "source_params", "=", "source_data", "[", "'params'", "]", "\n", "\n", "start_ts", "=", "time", ".", "time", "(", ")", "\n", "\n", "model", ".", "train", "(", "logger", "=", "logger", ")", "\n", "if", "opt", ".", "freeze_bn", ":", "\n", "                ", "model", ".", "freeze_bn_apply", "(", ")", "\n", "", "model", ".", "optimizer_zerograd", "(", ")", "\n", "\n", "if", "opt", ".", "stage", "==", "'warm_up'", ":", "\n", "                ", "loss_GTA", ",", "loss_G", ",", "loss_D", "=", "model", ".", "step_adv", "(", "images", ",", "labels", ",", "target_image", ",", "target_lp", ",", "source_imageS", ",", "source_params", ")", "\n", "# loss_GTA, loss_G, loss_D = model.step_adv(images, labels, target_image, source_imageS, source_params, target_label)", "\n", "", "elif", "opt", ".", "stage", "==", "'stage1'", ":", "\n", "                ", "loss", ",", "loss_CTS", ",", "loss_consist", "=", "model", ".", "step", "(", "images", ",", "labels", ",", "target_image", ",", "target_imageS", ",", "target_params", ",", "target_lp", ",", "\n", "target_lpsoft", ",", "target_image_full", ",", "target_weak_params", ")", "\n", "", "else", ":", "\n", "                ", "loss_GTA", ",", "loss", "=", "model", ".", "step_distillation", "(", "images", ",", "labels", ",", "target_image", ",", "target_imageS", ",", "target_params", ",", "target_lp", ")", "\n", "\n", "", "time_meter", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_ts", ")", "\n", "\n", "#print(i)", "\n", "if", "(", "i", "+", "1", ")", "%", "opt", ".", "print_interval", "==", "0", ":", "\n", "                ", "if", "opt", ".", "stage", "==", "'warm_up'", ":", "\n", "                    ", "fmt_str", "=", "\"Epochs [{:d}/{:d}] Iter [{:d}/{:d}]  loss_GTA: {:.4f}  loss_G: {:.4f}  loss_D: {:.4f} Time/Image: {:.4f}\"", "\n", "print_str", "=", "fmt_str", ".", "format", "(", "epoch", "+", "1", ",", "opt", ".", "epochs", ",", "i", "+", "1", ",", "opt", ".", "train_iters", ",", "loss_GTA", ",", "loss_G", ",", "loss_D", ",", "time_meter", ".", "avg", "/", "opt", ".", "bs", ")", "\n", "", "elif", "opt", ".", "stage", "==", "'stage1'", ":", "\n", "                    ", "fmt_str", "=", "\"Epochs [{:d}/{:d}] Iter [{:d}/{:d}]  loss: {:.4f}  loss_CTS: {:.4f}  loss_consist: {:.4f} Time/Image: {:.4f}\"", "\n", "print_str", "=", "fmt_str", ".", "format", "(", "epoch", "+", "1", ",", "opt", ".", "epochs", ",", "i", "+", "1", ",", "opt", ".", "train_iters", ",", "loss", ",", "loss_CTS", ",", "loss_consist", ",", "time_meter", ".", "avg", "/", "opt", ".", "bs", ")", "\n", "", "else", ":", "\n", "                    ", "fmt_str", "=", "\"Epochs [{:d}/{:d}] Iter [{:d}/{:d}]  loss_GTA: {:.4f}  loss: {:.4f} Time/Image: {:.4f}\"", "\n", "print_str", "=", "fmt_str", ".", "format", "(", "epoch", "+", "1", ",", "opt", ".", "epochs", ",", "i", "+", "1", ",", "opt", ".", "train_iters", ",", "loss_GTA", ",", "loss", ",", "time_meter", ".", "avg", "/", "opt", ".", "bs", ")", "\n", "", "print", "(", "print_str", ")", "\n", "logger", ".", "info", "(", "print_str", ")", "\n", "time_meter", ".", "reset", "(", ")", "\n", "\n", "# evaluation", "\n", "", "if", "(", "i", "+", "1", ")", "%", "opt", ".", "val_interval", "==", "0", ":", "\n", "                ", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "running_metrics_val", ",", "iters", "=", "model", ".", "iter", ",", "opt", "=", "opt", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "logger", ".", "info", "(", "'Best iou until now is {}'", ".", "format", "(", "model", ".", "best_iou", ")", ")", "\n", "\n", "", "model", ".", "scheduler_step", "(", ")", "\n", "\n", "", "", "", "def", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "running_metrics_val", ",", "iters", ",", "opt", "=", "None", ")", ":", "\n", "    ", "iters", "=", "iters", "\n", "_k", "=", "-", "1", "\n", "for", "v", "in", "model", ".", "optimizers", ":", "\n", "        ", "_k", "+=", "1", "\n", "for", "param_group", "in", "v", ".", "param_groups", ":", "\n", "            ", "_learning_rate", "=", "param_group", ".", "get", "(", "'lr'", ")", "\n", "", "logger", ".", "info", "(", "\"learning rate is {} for {} net\"", ".", "format", "(", "_learning_rate", ",", "model", ".", "nets", "[", "_k", "]", ".", "__class__", ".", "__name__", ")", ")", "\n", "", "model", ".", "eval", "(", "logger", "=", "logger", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "val_datset", "=", "datasets", ".", "target_valid_loader", "\n", "#val_datset = datasets.target_train_loader", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "validate", "(", "val_datset", ",", "device", ",", "model", ",", "running_metrics_val", ")", "\n", "\n", "", "score", ",", "class_iou", "=", "running_metrics_val", ".", "get_scores", "(", ")", "\n", "for", "k", ",", "v", "in", "score", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "k", ",", "v", ")", "\n", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "class_iou", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "running_metrics_val", ".", "reset", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "state", "=", "{", "}", "\n", "_k", "=", "-", "1", "\n", "for", "net", "in", "model", ".", "nets", ":", "\n", "        ", "_k", "+=", "1", "\n", "new_state", "=", "{", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.scripts.test.get_arguments": [[19, 29], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["    ", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "## create dataset", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "datasets", "=", "create_dataset", "(", "opt", ",", "logger", ")", "\n", "\n", "if", "opt", ".", "model_name", "==", "'deeplabv2'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "opt", ".", "resume_path", ")", "[", "'ResNet101'", "]", "[", "\"model_state\"", "]", "\n", "model", "=", "adaptation_modelv2", ".", "CustomModel", "(", "opt", ",", "logger", ")", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.scripts.test.main": [[31, 78], ["caco.domain_adaptation.config.cfg_from_file", "print", "pprint.pprint", "len", "range", "advent.dataset.cityscapes.CityscapesDataSet", "torch.utils.data.DataLoader", "advent.domain_adaptation.eval_UDA.evaluate_domain_adaptation", "os.join", "os.makedirs", "os.makedirs", "models.append", "os.environ.get", "os.environ.get", "advent.model.deeplabv2.get_deeplab_v2", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.config.cfg_from_file", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2.get_deeplab_v2"], ["\n", "", "running_metrics_val", "=", "runningScore", "(", "opt", ".", "n_class", ")", "\n", "\n", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "running_metrics_val", ")", "\n", "\n", "", "def", "validation", "(", "model", ",", "logger", ",", "datasets", ",", "device", ",", "running_metrics_val", ")", ":", "\n", "    ", "_k", "=", "-", "1", "\n", "model", ".", "eval", "(", "logger", "=", "logger", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "validate", "(", "datasets", ".", "target_valid_loader", ",", "device", ",", "model", ",", "running_metrics_val", ")", "\n", "\n", "", "score", ",", "class_iou", "=", "running_metrics_val", ".", "get_scores", "(", ")", "\n", "for", "k", ",", "v", "in", "score", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "k", ",", "v", ")", "\n", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "class_iou", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "running_metrics_val", ".", "reset", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "score", "[", "\"Mean IoU : \\t\"", "]", "\n", "\n", "", "def", "validate", "(", "valid_loader", ",", "device", ",", "model", ",", "running_metrics_val", ")", ":", "\n", "    ", "sm", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "for", "data_i", "in", "tqdm", "(", "valid_loader", ")", ":", "\n", "        ", "images_val", "=", "data_i", "[", "'img'", "]", ".", "to", "(", "device", ")", "\n", "labels_val", "=", "data_i", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "\n", "outs", "=", "model", ".", "BaseNet_DP", "(", "images_val", ")", "\n", "#outputs = F.interpolate(sm(outs['out']), size=images_val.size()[2:], mode='bilinear', align_corners=True)", "\n", "outputs", "=", "F", ".", "interpolate", "(", "outs", "[", "'out'", "]", ",", "size", "=", "images_val", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "pred", "=", "outputs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt", "=", "labels_val", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "running_metrics_val", ".", "update", "(", "gt", ",", "pred", ")", "\n", "\n", "", "", "def", "get_logger", "(", "logdir", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'ptsemseg'", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'run.log'", ")", "\n", "hdlr", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(levelname)s %(message)s'", ")", "\n", "hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "hdlr", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "return", "logger", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.scripts.train_caco.get_arguments": [[24, 40], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Code for domain adaptation (DA) training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'optional config file'", ",", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-train\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"not fixing random seed.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tensorboard\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"visualize training loss with tensorboardX.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--viz-every-iter\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"visualize results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--exp-suffix\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"optional experiment suffix\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.scripts.train_caco.main": [[42, 137], ["train_caco.get_arguments", "print", "print", "caco.domain_adaptation.config.cfg_from_file", "print", "pprint.pprint", "os.exists", "print", "advent.dataset.gta5.GTA5DataSet", "torch.utils.data.DataLoader", "advent.dataset.cityscapes.CityscapesDataSet", "torch.utils.data.DataLoader", "caco.domain_adaptation.train_UDA_f.train_domain_adaptation", "os.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "torch.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "os.environ.get", "os.environ.get", "caco.model.deeplabv2_f.get_deeplab_v2_f", "torch.load", "NotImplementedError", "open", "yaml.dump", "os.join", "numpy.random.seed", "caco.model.deeplabv2_f.get_deeplab_v2_f.state_dict().copy", "caco.model.deeplabv2_f.get_deeplab_v2_f.load_state_dict", "caco.model.deeplabv2_f.get_deeplab_v2_f.load_state_dict", "os.join", "i.split", "str", "caco.model.deeplabv2_f.get_deeplab_v2_f.state_dict"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.scripts.train_caco.get_arguments", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.config.cfg_from_file", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.train_domain_adaptation", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.get_deeplab_v2_f"], ["", "def", "main", "(", ")", ":", "\n", "# LOAD ARGS", "\n", "    ", "args", "=", "get_arguments", "(", ")", "\n", "print", "(", "'Called with args:'", ")", "\n", "print", "(", "args", ")", "\n", "\n", "assert", "args", ".", "cfg", "is", "not", "None", ",", "'Missing cfg file'", "\n", "cfg_from_file", "(", "args", ".", "cfg", ")", "\n", "# auto-generate exp name if not specified", "\n", "if", "cfg", ".", "EXP_NAME", "==", "''", ":", "\n", "        ", "cfg", ".", "EXP_NAME", "=", "f'{cfg.SOURCE}2{cfg.TARGET}_{cfg.TRAIN.MODEL}_{cfg.TRAIN.DA_METHOD}'", "\n", "\n", "", "if", "args", ".", "exp_suffix", ":", "\n", "        ", "cfg", ".", "EXP_NAME", "+=", "f'_{args.exp_suffix}'", "\n", "# auto-generate snapshot path if not specified", "\n", "", "if", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", "==", "''", ":", "\n", "        ", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", "=", "osp", ".", "join", "(", "cfg", ".", "EXP_ROOT_SNAPSHOT", ",", "cfg", ".", "EXP_NAME", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ",", "exist_ok", "=", "True", ")", "\n", "# tensorboard", "\n", "", "if", "args", ".", "tensorboard", ":", "\n", "        ", "if", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", "==", "''", ":", "\n", "            ", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", "=", "osp", ".", "join", "(", "cfg", ".", "EXP_ROOT_LOGS", ",", "'tensorboard'", ",", "cfg", ".", "EXP_NAME", ")", "\n", "", "os", ".", "makedirs", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ",", "exist_ok", "=", "True", ")", "\n", "if", "args", ".", "viz_every_iter", "is", "not", "None", ":", "\n", "            ", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "=", "args", ".", "viz_every_iter", "\n", "", "", "else", ":", "\n", "        ", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", "=", "''", "\n", "", "print", "(", "'Using config:'", ")", "\n", "pprint", ".", "pprint", "(", "cfg", ")", "\n", "\n", "# INIT", "\n", "_init_fn", "=", "None", "\n", "if", "not", "args", ".", "random_train", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", ")", "\n", "np", ".", "random", ".", "seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", ")", "\n", "random", ".", "seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", ")", "\n", "\n", "def", "_init_fn", "(", "worker_id", ")", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", "+", "worker_id", ")", "\n", "\n", "", "", "if", "os", ".", "environ", ".", "get", "(", "'ADVENT_DRY_RUN'", ",", "'0'", ")", "==", "'1'", ":", "\n", "        ", "return", "\n", "\n", "# LOAD SEGMENTATION NET", "\n", "", "assert", "osp", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "RESTORE_FROM", ")", ",", "f'Missing init model {cfg.TRAIN.RESTORE_FROM}'", "\n", "if", "cfg", ".", "TRAIN", ".", "MODEL", "==", "'DeepLabv2'", ":", "\n", "        ", "model", "=", "get_deeplab_v2", "(", "num_classes", "=", "cfg", ".", "NUM_CLASSES", ",", "multi_level", "=", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ")", "\n", "saved_state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "TRAIN", ".", "RESTORE_FROM", ",", "map_location", "=", "(", "'cuda:'", "+", "str", "(", "cfg", ".", "GPU_ID", ")", ")", ")", "\n", "if", "'DeepLab_resnet_pretrained_imagenet'", "in", "cfg", ".", "TRAIN", ".", "RESTORE_FROM", ":", "\n", "            ", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "                ", "i_parts", "=", "i", ".", "split", "(", "'.'", ")", "\n", "if", "not", "i_parts", "[", "1", "]", "==", "'layer5'", ":", "\n", "                    ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "new_params", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported {cfg.TRAIN.MODEL}\"", ")", "\n", "", "print", "(", "'Model loaded'", ")", "\n", "\n", "# DATALOADERS", "\n", "source_dataset", "=", "GTA5DataSet", "(", "root", "=", "cfg", ".", "DATA_DIRECTORY_SOURCE", ",", "\n", "list_path", "=", "cfg", ".", "DATA_LIST_SOURCE", ",", "\n", "set", "=", "cfg", ".", "TRAIN", ".", "SET_SOURCE", ",", "\n", "max_iters", "=", "cfg", ".", "TRAIN", ".", "MAX_ITERS", "*", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_SOURCE", ",", "\n", "crop_size", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", ",", "\n", "mean", "=", "cfg", ".", "TRAIN", ".", "IMG_MEAN", ")", "\n", "source_loader", "=", "data", ".", "DataLoader", "(", "source_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_SOURCE", ",", "\n", "num_workers", "=", "cfg", ".", "NUM_WORKERS", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "worker_init_fn", "=", "_init_fn", ")", "\n", "\n", "target_dataset", "=", "CityscapesDataSet", "(", "root", "=", "cfg", ".", "DATA_DIRECTORY_TARGET", ",", "\n", "list_path", "=", "cfg", ".", "DATA_LIST_TARGET", ",", "\n", "set", "=", "cfg", ".", "TRAIN", ".", "SET_TARGET", ",", "\n", "info_path", "=", "cfg", ".", "TRAIN", ".", "INFO_TARGET", ",", "\n", "max_iters", "=", "cfg", ".", "TRAIN", ".", "MAX_ITERS", "*", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_TARGET", ",", "\n", "crop_size", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", ",", "\n", "mean", "=", "cfg", ".", "TRAIN", ".", "IMG_MEAN", ")", "\n", "target_loader", "=", "data", ".", "DataLoader", "(", "target_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_TARGET", ",", "\n", "num_workers", "=", "cfg", ".", "NUM_WORKERS", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "worker_init_fn", "=", "_init_fn", ")", "\n", "\n", "with", "open", "(", "osp", ".", "join", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ",", "'train_cfg.yml'", ")", ",", "'w'", ")", "as", "yaml_file", ":", "\n", "        ", "yaml", ".", "dump", "(", "cfg", ",", "yaml_file", ",", "default_flow_style", "=", "False", ")", "\n", "\n", "# UDA TRAINING", "\n", "", "train_domain_adaptation", "(", "model", ",", "source_loader", ",", "target_loader", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.train_domain_adaptation": [[29, 34], ["train_UDA_f.train_caco", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.train_caco"], ["def", "train_domain_adaptation", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "if", "cfg", ".", "TRAIN", ".", "DA_METHOD", "==", "'caco'", ":", "\n", "        ", "train_caco", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported DA method {cfg.TRAIN.DA_METHOD}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.train_caco": [[36, 228], ["os.path.exists", "os.path.exists", "model.train", "model.to", "caco.model.deeplabv2_f.get_deeplab_v2_f", "caco.model.deeplabv2_f.get_deeplab_v2_f.load_state_dict", "caco.model.deeplabv2_f.get_deeplab_v2_f.train", "caco.model.deeplabv2_f.get_deeplab_v2_f.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "torch.SGD", "torch.Adam", "torch.Adam", "torch.nn.Upsample", "torch.nn.Upsample", "enumerate", "enumerate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tqdm.tqdm", "tensorboardX.SummaryWriter", "model.state_dict().copy", "model.optim_parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "range", "zip", "zip", "optim.SGD.zero_grad", "optim.Adam.zero_grad", "optim.Adam.zero_grad", "advent.utils.func.adjust_learning_rate", "advent.utils.func.adjust_learning_rate_discriminator", "advent.utils.func.adjust_learning_rate_discriminator", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "enumerate.__next__", "model", "nn.Upsample.", "advent.utils.func.loss_calc", "loss.backward", "enumerate.__next__", "train_UDA_f.data_aug", "model", "torch.nn.Upsample", "nn.Upsample.", "torch.softmax", "torch.softmax", "dict", "nn.Upsample.", "train_UDA_f.loss_caco_cal", "nn.Upsample.", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.bce_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optim.SGD.step", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "pred_src_main.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss.backward", "interp_target.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss.backward", "optim.Adam.step", "train_UDA_f.print_losses", "sys.stdout.flush", "model.parameters", "caco.model.deeplabv2_f.get_deeplab_v2_f.parameters", "model.buffers", "caco.model.deeplabv2_f.get_deeplab_v2_f.buffers", "buffer_q.data.clone", "images_source.cuda", "nn.Upsample.", "advent.utils.func.loss_calc", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "caco.model.deeplabv2_f.get_deeplab_v2_f.", "train_UDA_f.queue_update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "images.cuda", "data_aug.cuda", "nn.Upsample.", "torch.softmax", "torch.softmax", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.Upsample", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.nn.Upsample", "nn.Upsample.", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.bce_loss", "advent.utils.func.prob_2_entropy", "model.parameters", "pred_src_aux.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss.backward", "advent.utils.func.prob_2_entropy", "interp_target.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss.backward", "advent.utils.func.prob_2_entropy", "optim.Adam.step", "print", "print", "pathlib.Path", "torch.save", "torch.save", "torch.save", "torch.save", "model.state_dict", "images.cuda", "torch.softmax", "pred_trg_aux_pooled.detach().clone", "pred_trg_main_pooled.detach().clone", "advent.utils.func.prob_2_entropy", "torch.softmax", "advent.utils.func.prob_2_entropy", "torch.softmax", "advent.utils.func.prob_2_entropy", "torch.softmax", "model.state_dict", "param_k.data.clone", "param_q.data.clone", "torch.softmax", "nn.Upsample.", "torch.softmax", "torch.softmax", "torch.softmax", "pred_trg_aux_pooled.detach", "pred_trg_main_pooled.detach", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.train", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.get_deeplab_v2_f", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.train", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.train", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.train", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.optim_parameters", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.adjust_learning_rate", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.__next__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.__next__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.data_aug", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.loss_caco_cal", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.print_losses", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.queue_update", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save"], ["", "", "def", "train_caco", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "input_size_source", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", "\n", "input_size_target", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "\n", "device", "=", "cfg", ".", "GPU_ID", "\n", "num_classes", "=", "cfg", ".", "NUM_CLASSES", "\n", "viz_tensorboard", "=", "os", ".", "path", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "if", "viz_tensorboard", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "model_ema", "=", "get_deeplab_v2_f", "(", "num_classes", "=", "cfg", ".", "NUM_CLASSES", ",", "multi_level", "=", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ")", "\n", "model_ema", ".", "load_state_dict", "(", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", ")", "\n", "model_ema", ".", "train", "(", ")", "\n", "model_ema", ".", "to", "(", "device", ")", "\n", "\n", "d_aux", "=", "get_fc_discriminator", "(", "num_classes", "=", "num_classes", ")", "\n", "d_aux", ".", "train", "(", ")", "\n", "d_aux", ".", "to", "(", "device", ")", "\n", "\n", "d_main", "=", "get_fc_discriminator", "(", "num_classes", "=", "num_classes", ")", "\n", "d_main", ".", "train", "(", ")", "\n", "d_main", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "optimizer_d_aux", "=", "optim", ".", "Adam", "(", "d_aux", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ",", "\n", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "optimizer_d_main", "=", "optim", ".", "Adam", "(", "d_main", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ",", "\n", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_source", "[", "1", "]", ",", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "source_label", "=", "0", "\n", "target_label", "=", "1", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "\n", "# PL_queue: [1, 19, M=100], queue: [1, 2048, 19, M=100], queue_prob: [1, 19, 19, M=100]", "\n", "queue", "=", "torch", ".", "zeros", "(", "1", ",", "2048", ",", "cfg", ".", "NUM_CLASSES", ",", "cfg", ".", "TRAIN", ".", "dict_len", ")", "\n", "PL_queue", "=", "torch", ".", "ones", "(", "1", ",", "cfg", ".", "NUM_CLASSES", ",", "cfg", ".", "TRAIN", ".", "dict_len", ",", "dtype", "=", "torch", ".", "int64", ")", "*", "(", "-", "1", ")", "\n", "queue_prob", "=", "torch", ".", "zeros", "(", "1", ",", "cfg", ".", "NUM_CLASSES", ",", "cfg", ".", "NUM_CLASSES", ",", "cfg", ".", "TRAIN", ".", "dict_len", ")", "\n", "\n", "for", "i_iter", "in", "tqdm", "(", "range", "(", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "+", "1", ")", ")", ":", "\n", "        ", "for", "param_q", ",", "param_k", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "model_ema", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", ".", "clone", "(", ")", "*", "cfg", ".", "TRAIN", ".", "move_momentum", "+", "param_q", ".", "data", ".", "clone", "(", ")", "*", "(", "1.", "-", "cfg", ".", "TRAIN", ".", "move_momentum", ")", "\n", "", "for", "buffer_q", ",", "buffer_k", "in", "zip", "(", "model", ".", "buffers", "(", ")", ",", "model_ema", ".", "buffers", "(", ")", ")", ":", "\n", "            ", "buffer_k", ".", "data", "=", "buffer_q", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_d_aux", ".", "zero_grad", "(", ")", "\n", "optimizer_d_main", ".", "zero_grad", "(", ")", "\n", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ")", "\n", "adjust_learning_rate_discriminator", "(", "optimizer_d_aux", ",", "i_iter", ",", "cfg", ")", "\n", "adjust_learning_rate_discriminator", "(", "optimizer_d_main", ",", "i_iter", ",", "cfg", ")", "\n", "\n", "for", "param", "in", "d_aux", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "d_main", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "images_source", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "pred_src_aux_pooled", ",", "pred_src_main_pooled", ",", "_", ",", "f_src_main", "=", "model", "(", "images_source", ".", "cuda", "(", "device", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_src_aux", "=", "interp", "(", "pred_src_aux_pooled", ")", "\n", "loss_seg_src_aux", "=", "loss_calc", "(", "pred_src_aux", ",", "labels", ",", "device", ")", "\n", "", "else", ":", "\n", "            ", "loss_seg_src_aux", "=", "0", "\n", "", "pred_src_main", "=", "interp", "(", "pred_src_main_pooled", ")", "\n", "loss_seg_src_main", "=", "loss_calc", "(", "pred_src_main", ",", "labels", ",", "device", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_MAIN", "*", "loss_seg_src_main", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_AUX", "*", "loss_seg_src_aux", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "images", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pred_trg_aux_pooled", ",", "pred_trg_main_pooled", ",", "_", ",", "f_trg_main", "=", "model_ema", "(", "images", ".", "cuda", "(", "device", ")", ")", "\n", "queue", ",", "PL_queue", ",", "queue_prob", ",", "queue_train", ",", "PL_queue_train", ",", "queue_prob_train", "=", "queue_update", "(", "queue", ",", "PL_queue", ",", "queue_prob", ",", "f_src_main", ",", "labels", ",", "f_trg_main", ",", "F", ".", "softmax", "(", "pred_trg_main_pooled", ")", ",", "cfg", ")", "\n", "\n", "# CaCo flow.", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pred_trg_aux_pooled_ref", ",", "pred_trg_main_pooled_ref", "=", "pred_trg_aux_pooled", ".", "detach", "(", ")", ".", "clone", "(", ")", ",", "pred_trg_main_pooled", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "", "images_target_aug", "=", "data_aug", "(", "images", ".", "cuda", "(", "device", ")", ",", "cfg", ")", "\n", "pred_trg_aux_aug", ",", "pred_trg_main_aug", ",", "_", ",", "f_trg_main_aug", "=", "model", "(", "images_target_aug", ".", "cuda", "(", "device", ")", ")", "\n", "interp_aug_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "pred_trg_main_pooled_ref", ".", "shape", "[", "-", "2", "]", ",", "pred_trg_main_pooled_ref", ".", "shape", "[", "-", "1", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "pred_trg_main_aug_pooled", "=", "interp_aug_target", "(", "pred_trg_main_aug", ")", "\n", "out_trg_main_aug_pooled", "=", "F", ".", "softmax", "(", "pred_trg_main_aug_pooled", ")", "\n", "out_trg_main_pooled_ref", "=", "F", ".", "softmax", "(", "pred_trg_main_pooled_ref", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_trg_aux_aug_pooled", "=", "interp_aug_target", "(", "pred_trg_aux_aug", ")", "\n", "out_trg_aux_aug_pooled", "=", "F", ".", "softmax", "(", "pred_trg_aux_aug_pooled", ")", "\n", "out_trg_aux_pooled_ref", "=", "F", ".", "softmax", "(", "pred_trg_aux_pooled_ref", ")", "\n", "\n", "", "out_trg_d", "=", "dict", "(", ")", "\n", "out_trg_d", "[", "'out_trg_main_aug_pooled'", "]", "=", "out_trg_main_aug_pooled", "\n", "out_trg_d", "[", "'out_trg_main_pooled_ref'", "]", "=", "out_trg_main_pooled_ref", "\n", "out_trg_d", "[", "'out_trg_aux_aug_pooled'", "]", "=", "out_trg_aux_aug_pooled", "\n", "out_trg_d", "[", "'out_trg_aux_pooled_ref'", "]", "=", "out_trg_aux_pooled_ref", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "interp_aug_target_pl", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "pred_trg_main_pooled", ".", "shape", "[", "-", "2", "]", ",", "pred_trg_main_pooled", ".", "shape", "[", "-", "1", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "PL_trg_pred", "=", "(", "1.0", "*", "F", ".", "softmax", "(", "pred_trg_main_pooled", ")", "+", "0.0", "*", "(", "interp_aug_target_pl", "(", "F", ".", "softmax", "(", "pred_trg_main_aug", ")", ")", ")", ")", "\n", "PL_trg", "=", "torch", ".", "argmax", "(", "PL_trg_pred", ",", "dim", "=", "1", ")", "\n", "interp_aug_target_f", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "f_trg_main", ".", "shape", "[", "-", "2", "]", ",", "f_trg_main", ".", "shape", "[", "-", "1", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "f_trg_main_aug", "=", "interp_aug_target_f", "(", "f_trg_main_aug", ")", "\n", "\n", "loss_caco", "=", "loss_caco_cal", "(", "out_trg_d", ",", "PL_trg", ",", "f_trg_main_aug", ",", "PL_queue_train", ",", "queue_train", ",", "queue_prob_train", ",", "cfg", ")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_trg_aux_aug_ori", "=", "interp_target", "(", "pred_trg_aux_aug_pooled", ")", "\n", "d_out_aux_aug", "=", "d_aux", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_aux_aug_ori", ")", ")", ")", "\n", "loss_adv_trg_aux_aug", "=", "bce_loss", "(", "d_out_aux_aug", ",", "source_label", ")", "\n", "", "else", ":", "\n", "            ", "loss_adv_trg_aux_aug", "=", "0", "\n", "", "pred_trg_main_aug_ori", "=", "interp_target", "(", "pred_trg_main_aug_pooled", ")", "\n", "d_out_main_aug", "=", "d_main", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_main_aug_ori", ")", ")", ")", "\n", "loss_adv_trg_main_aug", "=", "bce_loss", "(", "d_out_main_aug", ",", "source_label", ")", "\n", "\n", "loss", "=", "0", "*", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_ADV_MAIN", "*", "loss_adv_trg_main_aug", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_ADV_AUX", "*", "loss_adv_trg_aux_aug", ")", "+", "loss_caco", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "1", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "# Train discriminator networks", "\n", "# enable training mode on discriminator networks", "\n", "for", "param", "in", "d_aux", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "d_main", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "# train with source", "\n", "", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_src_aux", "=", "pred_src_aux", ".", "detach", "(", ")", "\n", "d_out_aux", "=", "d_aux", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_src_aux", ")", ")", ")", "\n", "loss_d_aux", "=", "bce_loss", "(", "d_out_aux", ",", "source_label", ")", "\n", "loss_d_aux", "=", "loss_d_aux", "/", "2", "\n", "loss_d_aux", ".", "backward", "(", ")", "\n", "", "pred_src_main", "=", "pred_src_main", ".", "detach", "(", ")", "\n", "d_out_main", "=", "d_main", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_src_main", ")", ")", ")", "\n", "loss_d_main", "=", "bce_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "loss_d_main", "=", "loss_d_main", "/", "2", "\n", "loss_d_main", ".", "backward", "(", ")", "\n", "\n", "# train with target", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_trg_aux", "=", "pred_trg_aux_aug_ori", ".", "detach", "(", ")", "\n", "d_out_aux", "=", "d_aux", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_aux", ")", ")", ")", "\n", "loss_d_aux", "=", "bce_loss", "(", "d_out_aux", ",", "target_label", ")", "\n", "loss_d_aux", "=", "loss_d_aux", "/", "2", "\n", "loss_d_aux", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss_d_aux", "=", "0", "\n", "", "pred_trg_main", "=", "pred_trg_main_aug_ori", ".", "detach", "(", ")", "\n", "d_out_main", "=", "d_main", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_main", ")", ")", ")", "\n", "loss_d_main", "=", "bce_loss", "(", "d_out_main", ",", "target_label", ")", "\n", "loss_d_main", "=", "loss_d_main", "/", "2", "\n", "loss_d_main", ".", "backward", "(", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "optimizer_d_aux", ".", "step", "(", ")", "\n", "", "optimizer_d_main", ".", "step", "(", ")", "\n", "\n", "current_losses", "=", "{", "\n", "'loss_seg_src_main'", ":", "loss_seg_src_main", ",", "\n", "'loss_caco'", ":", "loss_caco", "}", "\n", "print_losses", "(", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "SAVE_PRED_EVERY", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "print", "(", "'exp ='", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "snapshot_dir", "=", "Path", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}.pth'", ")", "\n", "\n", "if", "i_iter", ">=", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "-", "1", ":", "\n", "                ", "break", "\n", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.l1_loss": [[230, 234], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "", "def", "l1_loss", "(", "input", ",", "target", ")", ":", "\n", "    ", "loss", "=", "torch", ".", "abs", "(", "input", "-", "target", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.draw_in_tensorboard": [[236, 252], ["torchvision.utils.make_grid", "writer.add_image", "torchvision.utils.make_grid", "writer.add_image", "torch.softmax().cpu().data[].numpy().transpose", "numpy.sum", "torchvision.utils.make_grid", "writer.add_image", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "images[].clone().cpu", "numpy.array().transpose", "torch.softmax().cpu().data[].numpy", "numpy.multiply", "numpy.log2", "numpy.log2", "images[].clone", "numpy.array", "advent.utils.viz_segmask.colorize_mask().convert", "torch.softmax().cpu", "advent.utils.viz_segmask.colorize_mask", "numpy.asarray", "torch.softmax", "numpy.argmax", "torch.softmax().cpu().data[].numpy().transpose", "torch.softmax().cpu().data[].numpy", "torch.softmax().cpu", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.colorize_mask"], ["", "def", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_main", ",", "num_classes", ",", "type_", ")", ":", "\n", "    ", "grid_image", "=", "make_grid", "(", "images", "[", ":", "3", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "3", ",", "normalize", "=", "True", ")", "\n", "writer", ".", "add_image", "(", "f'Image - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n", "grid_image", "=", "make_grid", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "colorize_mask", "(", "np", ".", "asarray", "(", "\n", "np", ".", "argmax", "(", "F", ".", "softmax", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "\n", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "3", ",", "\n", "normalize", "=", "False", ",", "range", "=", "(", "0", ",", "255", ")", ")", "\n", "writer", ".", "add_image", "(", "f'Prediction - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n", "output_sm", "=", "F", ".", "softmax", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output_ent", "=", "np", ".", "sum", "(", "-", "np", ".", "multiply", "(", "output_sm", ",", "np", ".", "log2", "(", "output_sm", ")", ")", ",", "axis", "=", "2", ",", "\n", "keepdims", "=", "False", ")", "\n", "grid_image", "=", "make_grid", "(", "torch", ".", "from_numpy", "(", "output_ent", ")", ",", "3", ",", "normalize", "=", "True", ",", "\n", "range", "=", "(", "0", ",", "np", ".", "log2", "(", "num_classes", ")", ")", ")", "\n", "writer", ".", "add_image", "(", "f'Entropy - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.print_losses": [[254, 260], ["current_losses.items", "tqdm.tqdm.write", "list_strings.append", "train_UDA_f.to_numpy"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.to_numpy"], ["", "def", "print_losses", "(", "current_losses", ",", "i_iter", ")", ":", "\n", "    ", "list_strings", "=", "[", "]", "\n", "for", "loss_name", ",", "loss_value", "in", "current_losses", ".", "items", "(", ")", ":", "\n", "        ", "list_strings", ".", "append", "(", "f'{loss_name} = {to_numpy(loss_value):.3f} '", ")", "\n", "", "full_string", "=", "' '", ".", "join", "(", "list_strings", ")", "\n", "tqdm", ".", "write", "(", "f'iter = {i_iter} {full_string}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.log_losses_tensorboard": [[262, 265], ["current_losses.items", "writer.add_scalar", "train_UDA_f.to_numpy"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.to_numpy"], ["", "def", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", ":", "\n", "    ", "for", "loss_name", ",", "loss_value", "in", "current_losses", ".", "items", "(", ")", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "f'data/{loss_name}'", ",", "to_numpy", "(", "loss_value", ")", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.to_numpy": [[267, 272], ["isinstance", "tensor.data.cpu().numpy", "tensor.data.cpu"], "function", ["None"], ["", "", "def", "to_numpy", "(", "tensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "tensor", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "return", "tensor", "\n", "", "else", ":", "\n", "        ", "return", "tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.loss_caco_cal": [[274, 290], ["train_UDA_f.l1_loss", "train_UDA_f.CaContrast_cal", "train_UDA_f.l1_loss", "PL_trg.detach().clone", "PL_queue_train.cuda().detach().clone", "queue_train.cuda().detach().clone", "queue_prob_train.cuda().detach().clone", "[].sum", "print", "int", "PL_trg.detach", "PL_queue_train.cuda().detach", "queue_train.cuda().detach", "queue_prob_train.cuda().detach", "[].sum", "PL_queue_train.cuda", "queue_train.cuda", "queue_prob_train.cuda"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.l1_loss", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.CaContrast_cal", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.l1_loss"], ["", "", "def", "loss_caco_cal", "(", "out_trg_d", ",", "PL_trg", ",", "f_trg_main_aug", ",", "PL_queue_train", ",", "queue_train", ",", "queue_prob_train", ",", "cfg", ")", ":", "\n", "    ", "loss_caco_o_main", "=", "l1_loss", "(", "out_trg_d", "[", "'out_trg_main_aug_pooled'", "]", ",", "out_trg_d", "[", "'out_trg_main_pooled_ref'", "]", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "        ", "loss_caco_o_aux", "=", "l1_loss", "(", "out_trg_d", "[", "'out_trg_aux_aug_pooled'", "]", ",", "out_trg_d", "[", "'out_trg_aux_pooled_ref'", "]", ")", "\n", "", "else", ":", "\n", "        ", "loss_caco_o_aux", "=", "0", "\n", "", "loss_caco_o", "=", "loss_caco_o_main", "+", "loss_caco_o_aux", "\n", "loss_caco_f", "=", "CaContrast_cal", "(", "PL_trg", ".", "detach", "(", ")", ".", "clone", "(", ")", ",", "f_trg_main_aug", ",", "\n", "PL_queue_train", ".", "cuda", "(", "cfg", ".", "GPU_ID", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", ",", "queue_train", ".", "cuda", "(", "cfg", ".", "GPU_ID", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", ",", "\n", "queue_prob_train", ".", "cuda", "(", "cfg", ".", "GPU_ID", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", ",", "cfg", ")", "\n", "\n", "if", "[", "PL_queue_train", "!=", "-", "1", "]", "[", "0", "]", ".", "sum", "(", ")", "!=", "cfg", ".", "NUM_CLASSES", "*", "cfg", ".", "TRAIN", ".", "dict_len", ":", "\n", "        ", "print", "(", "'dict is loading.....  '", ",", "int", "(", "[", "PL_queue_train", "!=", "-", "1", "]", "[", "0", "]", ".", "sum", "(", ")", ")", ",", "'/1900'", ")", "\n", "loss_caco_f", "=", "0", "\n", "", "loss_caco", "=", "loss_caco_o", "+", "cfg", ".", "TRAIN", ".", "featurec", "*", "loss_caco_f", "\n", "return", "loss_caco", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.CaContrast_cal": [[292, 312], ["torch.normalize", "feature.transpose().unsqueeze.transpose().unsqueeze", "CaContrast", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.interpolate().view", "labels.clone().type().view.clone().type().view", "train_UDA_f.entropy_cal", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "reli.view.view", "feature.transpose().unsqueeze.view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.normalize", "feature_ma.transpose().unsqueeze.transpose().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.log2", "feature.transpose().unsqueeze.transpose", "feature_ma.transpose().unsqueeze.view", "torch.interpolate", "labels.clone().type().view.clone().type", "entropy_cal.clone().view", "feature_ma.transpose().unsqueeze.transpose", "F.interpolate().view.clone().type().unsqueeze", "labels.clone().type().view.clone", "entropy_cal.clone", "F.interpolate().view.clone().type", "F.interpolate().view.clone"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.entropy_cal"], ["", "def", "CaContrast_cal", "(", "label_label_aug1", ",", "feature", ",", "labels", ",", "feature_ma", ",", "pred1_ma", ",", "cfg", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# [bsz, n_samples]", "\n", "        ", "label_label_aug1", "=", "(", "F", ".", "interpolate", "(", "label_label_aug1", ".", "clone", "(", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "unsqueeze", "(", "1", ")", ",", "size", "=", "feature", ".", "shape", "[", "2", ":", "4", "]", ",", "mode", "=", "'nearest'", ")", ")", ".", "view", "(", "label_label_aug1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "labels", "=", "(", "labels", ".", "clone", "(", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "ent_ma", "=", "entropy_cal", "(", "pred1_ma", ")", "\n", "ent_ma", "=", "torch", ".", "sum", "(", "(", "ent_ma", ".", "clone", "(", ")", ")", ".", "view", "(", "ent_ma", ".", "shape", "[", "0", "]", ",", "ent_ma", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "/", "np", ".", "log2", "(", "cfg", ".", "NUM_CLASSES", ")", "\n", "reli", "=", "torch", ".", "clamp", "(", "(", "1", "-", "ent_ma", "+", "cfg", ".", "TRAIN", ".", "ent_clamp", ")", ",", "min", "=", "1.0", "-", "cfg", ".", "TRAIN", ".", "ent_clamp", ",", "max", "=", "1.0", "+", "cfg", ".", "TRAIN", ".", "ent_clamp", ")", "\n", "reli", "=", "reli", ".", "view", "(", "label_label_aug1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "# [bsz, n_samples, n_views, ...]", "\n", "", "feature", "=", "F", ".", "normalize", "(", "feature", ".", "view", "(", "feature", ".", "shape", "[", "0", "]", ",", "feature", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "feature", "=", "feature", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "feature_ma", "=", "F", ".", "normalize", "(", "feature_ma", ".", "view", "(", "feature_ma", ".", "shape", "[", "0", "]", ",", "feature_ma", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "feature_ma", "=", "feature_ma", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "", "loss", "=", "CaContrast", "(", "features", "=", "feature", ",", "labels", "=", "label_label_aug1", ",", "features_2", "=", "feature_ma", ",", "labels_2", "=", "labels", ",", "reliability", "=", "reli", ",", "cfg", "=", "cfg", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.entropy_cal": [[314, 322], ["v.dim", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.log2", "torch.log2", "torch.log2", "torch.log2"], "function", ["None"], ["", "def", "entropy_cal", "(", "v", ")", ":", "\n", "    ", "\"\"\"\n        Entropy loss for probabilistic prediction vectors\n        input: batch_size x channels x h x w\n        output: batch_size x 1 x h x w\n    \"\"\"", "\n", "assert", "v", ".", "dim", "(", ")", "==", "4", "\n", "return", "-", "torch", ".", "mul", "(", "v", ",", "torch", ".", "log2", "(", "v", "+", "1e-30", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.queue_update": [[324, 353], ["torch.interpolate", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "torch.argmax().unsqueeze", "range", "[].unsqueeze", "[].unsqueeze", "PL_queue[].unsqueeze().unsqueeze", "F.interpolate.clone().type().unsqueeze", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "[].sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "[].sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "PL_queue[].unsqueeze", "F.interpolate.clone().type", "[].unsqueeze", "queue.view", "queue_prob.view", "f_src_main.view", "f_trg_main.view", "pred_trg_main_pooled.view", "F.interpolate.clone", "torch.max", "torch.max", "torch.max", "torch.max", "PL_queue.squeeze().view", "PL_queue.squeeze().view", "F.interpolate.squeeze().squeeze().view", "torch.argmax().unsqueeze.squeeze().squeeze().view", "torch.argmax().unsqueeze.squeeze().squeeze().view", "PL_queue.squeeze", "PL_queue.squeeze", "F.interpolate.squeeze().squeeze", "torch.argmax().unsqueeze.squeeze().squeeze", "torch.argmax().unsqueeze.squeeze().squeeze", "F.interpolate.squeeze", "torch.argmax().unsqueeze.squeeze", "torch.argmax().unsqueeze.squeeze"], "function", ["None"], ["", "def", "queue_update", "(", "queue", ",", "PL_queue", ",", "queue_prob", ",", "f_src_main", ",", "labels", ",", "f_trg_main", ",", "pred_trg_main_pooled", ",", "cfg", ")", ":", "\n", "    ", "labels", "=", "(", "F", ".", "interpolate", "(", "labels", ".", "clone", "(", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "unsqueeze", "(", "1", ")", ",", "size", "=", "f_src_main", ".", "shape", "[", "2", ":", "4", "]", ",", "mode", "=", "'nearest'", ")", ")", "\n", "labels_trg", "=", "torch", ".", "argmax", "(", "pred_trg_main_pooled", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "labels_trg", "[", "torch", ".", "max", "(", "pred_trg_main_pooled", ",", "dim", "=", "1", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", "<", "0.9", "]", "=", "255", "\n", "\n", "for", "i", "in", "range", "(", "cfg", ".", "NUM_CLASSES", ")", ":", "\n", "        ", "if", "[", "labels", "==", "i", "]", "[", "0", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "queue", "[", "0", ",", ":", ",", "i", ",", "0", "]", "=", "torch", ".", "mean", "(", "f_src_main", ".", "view", "(", "f_src_main", ".", "shape", "[", "0", "]", ",", "f_src_main", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "[", ":", ",", ":", ",", "labels", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ".", "view", "(", "-", "1", ")", "==", "i", "]", ",", "dim", "=", "2", ")", "\n", "queue_prob", "[", "0", ",", ":", ",", "i", ",", "0", "]", "=", "0.0", "\n", "queue_prob", "[", "0", ",", "i", ",", "i", ",", "0", "]", "=", "1.0", "\n", "PL_queue", "[", "0", ",", "i", ",", "0", "]", "=", "i", "\n", "\n", "queue", "[", "0", ",", ":", ",", "i", ",", ":", "]", "=", "torch", ".", "roll", "(", "queue", "[", "0", ",", ":", ",", "i", ",", ":", "]", ",", "-", "1", ",", "1", ")", "\n", "queue_prob", "[", "0", ",", ":", ",", "i", ",", ":", "]", "=", "torch", ".", "roll", "(", "queue_prob", "[", "0", ",", ":", ",", "i", ",", ":", "]", ",", "-", "1", ",", "1", ")", "\n", "PL_queue", "[", "0", ",", "i", ",", ":", "]", "=", "torch", ".", "roll", "(", "PL_queue", "[", "0", ",", "i", ",", ":", "]", ",", "-", "1", ",", "0", ")", "\n", "\n", "", "if", "[", "labels_trg", "==", "i", "]", "[", "0", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "queue", "[", "0", ",", ":", ",", "i", ",", "0", "]", "=", "torch", ".", "mean", "(", "f_trg_main", ".", "view", "(", "f_trg_main", ".", "shape", "[", "0", "]", ",", "f_trg_main", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "[", ":", ",", ":", ",", "labels_trg", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ".", "view", "(", "-", "1", ")", "==", "i", "]", ",", "dim", "=", "2", ")", "\n", "queue_prob", "[", "0", ",", ":", ",", "i", ",", "0", "]", "=", "torch", ".", "mean", "(", "pred_trg_main_pooled", ".", "view", "(", "pred_trg_main_pooled", ".", "shape", "[", "0", "]", ",", "pred_trg_main_pooled", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "[", ":", ",", ":", ",", "labels_trg", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ".", "view", "(", "-", "1", ")", "==", "i", "]", ",", "dim", "=", "2", ")", "\n", "PL_queue", "[", "0", ",", "i", ",", "0", "]", "=", "i", "\n", "\n", "queue", "[", "0", ",", ":", ",", "i", ",", ":", "]", "=", "torch", ".", "roll", "(", "queue", "[", "0", ",", ":", ",", "i", ",", ":", "]", ",", "-", "1", ",", "1", ")", "\n", "queue_prob", "[", "0", ",", ":", ",", "i", ",", ":", "]", "=", "torch", ".", "roll", "(", "queue_prob", "[", "0", ",", ":", ",", "i", ",", ":", "]", ",", "-", "1", ",", "1", ")", "\n", "PL_queue", "[", "0", ",", "i", ",", ":", "]", "=", "torch", ".", "roll", "(", "PL_queue", "[", "0", ",", "i", ",", ":", "]", ",", "-", "1", ",", "0", ")", "\n", "\n", "", "", "queue_train", "=", "queue", ".", "view", "(", "queue", ".", "shape", "[", "0", "]", ",", "queue", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "[", ":", ",", ":", ",", "PL_queue", ".", "squeeze", "(", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "-", "1", "]", ".", "unsqueeze", "(", "3", ")", "\n", "queue_prob_train", "=", "queue_prob", ".", "view", "(", "queue_prob", ".", "shape", "[", "0", "]", ",", "queue_prob", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "[", ":", ",", ":", ",", "PL_queue", ".", "squeeze", "(", "0", ")", ".", "view", "(", "-", "1", ")", "!=", "-", "1", "]", ".", "unsqueeze", "(", "3", ")", "\n", "PL_queue_train", "=", "PL_queue", "[", "PL_queue", "!=", "-", "1", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", "\n", "return", "queue", ",", "PL_queue", ",", "queue_prob", ",", "queue_train", ",", "PL_queue_train", ",", "queue_prob_train", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA_f.data_aug": [[355, 361], ["torch.nn.Upsample", "nn.Upsample.", "numpy.random.randint", "round", "round"], "function", ["None"], ["", "def", "data_aug", "(", "input_images", ",", "cfg", ")", ":", "\n", "    ", "scale_ratio", "=", "np", ".", "random", ".", "randint", "(", "100.0", "*", "cfg", ".", "TRAIN", ".", "SCALING_RATIO", "[", "0", "]", ",", "100.0", "*", "cfg", ".", "TRAIN", ".", "SCALING_RATIO", "[", "1", "]", ")", "/", "100.0", "\n", "scaled_size_target", "=", "(", "round", "(", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "[", "1", "]", "*", "scale_ratio", "/", "8", ")", "*", "8", ",", "round", "(", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "[", "0", "]", "*", "scale_ratio", "/", "8", ")", "*", "8", ")", "\n", "interp_target_sc", "=", "nn", ".", "Upsample", "(", "size", "=", "scaled_size_target", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "output_images", "=", "interp_target_sc", "(", "input_images", ")", "\n", "return", "output_images", "\n", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.config._merge_a_into_b": [[105, 136], ["a.items", "type", "type", "KeyError", "type", "isinstance", "type", "numpy.array", "ValueError", "config._merge_a_into_b", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.config._merge_a_into_b"], ["def", "_merge_a_into_b", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n    options in b whenever they are also specified in a.\n    \"\"\"", "\n", "if", "type", "(", "a", ")", "is", "not", "EasyDict", ":", "\n", "        ", "return", "\n", "\n", "", "for", "k", ",", "v", "in", "a", ".", "items", "(", ")", ":", "\n", "# a must specify keys that are in b", "\n", "# if not b.has_key(k):", "\n", "        ", "if", "k", "not", "in", "b", ":", "\n", "            ", "raise", "KeyError", "(", "f'{k} is not a valid config key'", ")", "\n", "\n", "# the types must match, too", "\n", "", "old_type", "=", "type", "(", "b", "[", "k", "]", ")", "\n", "if", "old_type", "is", "not", "type", "(", "v", ")", ":", "\n", "            ", "if", "isinstance", "(", "b", "[", "k", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "v", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "b", "[", "k", "]", ".", "dtype", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f'Type mismatch ({type(b[k])} vs. {type(v)}) '", "\n", "f'for config key: {k}'", ")", "\n", "\n", "# recursively merge dicts", "\n", "", "", "if", "type", "(", "v", ")", "is", "EasyDict", ":", "\n", "            ", "try", ":", "\n", "                ", "_merge_a_into_b", "(", "a", "[", "k", "]", ",", "b", "[", "k", "]", ")", "\n", "", "except", "Exception", ":", "\n", "                ", "print", "(", "f'Error under config key: {k}'", ")", "\n", "raise", "\n", "", "", "else", ":", "\n", "            ", "b", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.config.cfg_from_file": [[138, 143], ["easydict.EasyDict", "config._merge_a_into_b", "advent.utils.serialization.yaml_load"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.config._merge_a_into_b"], ["", "", "", "def", "cfg_from_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Load a config file and merge it into the default options.\n    \"\"\"", "\n", "yaml_cfg", "=", "EasyDict", "(", "yaml_load", "(", "filename", ")", ")", "\n", "_merge_a_into_b", "(", "yaml_cfg", ",", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.draw_in_tensorboard": [[37, 53], ["torchvision.utils.make_grid", "writer.add_image", "torchvision.utils.make_grid", "writer.add_image", "torch.softmax().cpu().data[].numpy().transpose", "numpy.sum", "torchvision.utils.make_grid", "writer.add_image", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "images[].clone().cpu", "numpy.array().transpose", "torch.softmax().cpu().data[].numpy", "numpy.multiply", "numpy.log2", "numpy.log2", "images[].clone", "numpy.array", "advent.utils.viz_segmask.colorize_mask().convert", "torch.softmax().cpu", "advent.utils.viz_segmask.colorize_mask", "numpy.asarray", "torch.softmax", "numpy.argmax", "torch.softmax().cpu().data[].numpy().transpose", "torch.softmax().cpu().data[].numpy", "torch.softmax().cpu", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.colorize_mask"], ["def", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_main", ",", "num_classes", ",", "type_", ")", ":", "\n", "    ", "grid_image", "=", "make_grid", "(", "images", "[", ":", "3", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "3", ",", "normalize", "=", "True", ")", "\n", "writer", ".", "add_image", "(", "f'Image - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n", "grid_image", "=", "make_grid", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "colorize_mask", "(", "np", ".", "asarray", "(", "\n", "np", ".", "argmax", "(", "F", ".", "softmax", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "\n", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "3", ",", "\n", "normalize", "=", "False", ",", "range", "=", "(", "0", ",", "255", ")", ")", "\n", "writer", ".", "add_image", "(", "f'Prediction - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n", "output_sm", "=", "F", ".", "softmax", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output_ent", "=", "np", ".", "sum", "(", "-", "np", ".", "multiply", "(", "output_sm", ",", "np", ".", "log2", "(", "output_sm", ")", ")", ",", "axis", "=", "2", ",", "\n", "keepdims", "=", "False", ")", "\n", "grid_image", "=", "make_grid", "(", "torch", ".", "from_numpy", "(", "output_ent", ")", ",", "3", ",", "normalize", "=", "True", ",", "\n", "range", "=", "(", "0", ",", "np", ".", "log2", "(", "num_classes", ")", ")", ")", "\n", "writer", ".", "add_image", "(", "f'Entropy - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.train_source_only": [[55, 169], ["os.path.exists", "os.path.exists", "model.train", "model.to", "torch.SGD", "torch.nn.Upsample", "torch.nn.Upsample", "enumerate", "open", "tqdm.tqdm", "tensorboardX.SummaryWriter", "model.optim_parameters", "os.join", "range", "optim.SGD.zero_grad", "advent.utils.func.adjust_learning_rate", "enumerate.__next__", "numpy.random.choice", "model", "nn.Upsample.", "advent.utils.func.loss_calc", "loss.backward", "optim.SGD.step", "sys.stdout.flush", "images_source.cuda", "nn.Upsample.", "advent.utils.func.loss_calc", "train_UDA.print_losses", "open.write", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "train_UDA.log_losses_tensorboard", "model.state_dict", "os.join", "train_UDA.draw_in_tensorboard", "train_UDA.draw_in_tensorboard"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.train", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplabv2_f.ResNetMulti.optim_parameters", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.utils.tool.adjust_learning_rate", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.data.DataProvider.DataProvider.__next__", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.model.deeplab_advent_test.GradScale.backward", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.models.adaptation_modelv2.CustomModel.step", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.print_losses", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.caco_vanilla_finetune.evaluate_cityscapes_advent_best.save", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.log_losses_tensorboard", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.draw_in_tensorboard", "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.draw_in_tensorboard"], ["", "def", "train_source_only", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "''' UDA training with minEnt\n    '''", "\n", "# Create the model and start the training.", "\n", "input_size_source", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", "\n", "input_size_target", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "\n", "device", "=", "cfg", ".", "GPU_ID", "\n", "num_classes", "=", "cfg", ".", "NUM_CLASSES", "\n", "viz_tensorboard", "=", "os", ".", "path", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "if", "viz_tensorboard", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "\n", "# SEGMNETATION NETWORK", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# OPTIMIZERS", "\n", "# segnet's optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "# interpolate output segmaps", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_source", "[", "1", "]", ",", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "# targetloader_iter = enumerate(targetloader)", "\n", "\n", "loss_log", "=", "open", "(", "osp", ".", "join", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ",", "'loss_log.txt'", ")", ",", "'w'", ")", "\n", "\n", "for", "i_iter", "in", "tqdm", "(", "range", "(", "cfg", ".", "TRAIN", ".", "EARLY_STOP", ")", ")", ":", "\n", "\n", "# reset optimizers", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# adapt LR if needed", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ")", "\n", "\n", "# UDA Training", "\n", "# train on source", "\n", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "images_source", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "# shuffle rgb", "\n", "rgb_shuffle_choice", "=", "np", ".", "random", ".", "choice", "(", "3", ")", "\n", "if", "rgb_shuffle_choice", "==", "0", ":", "\n", "            ", "images_source", "[", "0", ",", "0", "]", ",", "images_source", "[", "0", ",", "1", "]", ",", "images_source", "[", "0", ",", "2", "]", "=", "images_source", "[", "0", ",", "0", "]", ",", "images_source", "[", "0", ",", "1", "]", ",", "images_source", "[", "0", ",", "2", "]", "\n", "", "elif", "rgb_shuffle_choice", "==", "1", ":", "\n", "            ", "images_source", "[", "0", ",", "0", "]", ",", "images_source", "[", "0", ",", "1", "]", ",", "images_source", "[", "0", ",", "2", "]", "=", "images_source", "[", "0", ",", "2", "]", ",", "images_source", "[", "0", ",", "0", "]", ",", "images_source", "[", "0", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "images_source", "[", "0", ",", "0", "]", ",", "images_source", "[", "0", ",", "1", "]", ",", "images_source", "[", "0", ",", "2", "]", "=", "images_source", "[", "0", ",", "1", "]", ",", "images_source", "[", "0", ",", "2", "]", ",", "images_source", "[", "0", ",", "0", "]", "\n", "\n", "", "pred_src_aux", ",", "pred_src_main", "=", "model", "(", "images_source", ".", "cuda", "(", "device", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_src_aux", "=", "interp", "(", "pred_src_aux", ")", "\n", "loss_seg_src_aux", "=", "loss_calc", "(", "pred_src_aux", ",", "labels", ",", "device", ")", "\n", "", "else", ":", "\n", "            ", "loss_seg_src_aux", "=", "0", "\n", "", "pred_src_main", "=", "interp", "(", "pred_src_main", ")", "\n", "loss_seg_src_main", "=", "loss_calc", "(", "pred_src_main", ",", "labels", ",", "device", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_MAIN", "*", "loss_seg_src_main", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_AUX", "*", "loss_seg_src_aux", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# # adversarial training with minent", "\n", "# _, batch = targetloader_iter.__next__()", "\n", "# images, _, _, _ = batch", "\n", "# pred_trg_aux, pred_trg_main = model(images.cuda(device))", "\n", "# pred_trg_aux = interp_target(pred_trg_aux)", "\n", "# pred_trg_main = interp_target(pred_trg_main)", "\n", "# pred_prob_trg_aux = F.softmax(pred_trg_aux)", "\n", "# pred_prob_trg_main = F.softmax(pred_trg_main)", "\n", "#", "\n", "# loss_target_entp_aux = entropy_loss(pred_prob_trg_aux)", "\n", "# loss_target_entp_main = entropy_loss(pred_prob_trg_main)", "\n", "# loss = (cfg.TRAIN.LAMBDA_ENT_AUX * loss_target_entp_aux", "\n", "#         + cfg.TRAIN.LAMBDA_ENT_MAIN * loss_target_entp_main)", "\n", "# loss.backward()", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "current_losses", "=", "{", "'loss_seg_src_aux'", ":", "loss_seg_src_aux", ",", "\n", "'loss_seg_src_main'", ":", "loss_seg_src_main", ",", "\n", "'loss_ent_aux'", ":", "0", ",", "\n", "'loss_ent_main'", ":", "0", "}", "\n", "\n", "# print_losses(current_losses, i_iter)", "\n", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "SAVE_PRED_EVERY", "==", "0", ":", "\n", "            ", "loss_in_text", "=", "print_losses", "(", "current_losses", ",", "i_iter", ")", "\n", "loss_log", ".", "write", "(", "loss_in_text", "+", "\"\\n\"", ")", "\n", "print", "(", "'taking snapshot ...'", ")", "\n", "print", "(", "'exp ='", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "osp", ".", "join", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ",", "f'model_{i_iter}.pth'", ")", ")", "\n", "if", "i_iter", ">=", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "-", "1", ":", "\n", "                ", "break", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# Visualize with tensorboard", "\n", "if", "viz_tensorboard", ":", "\n", "            ", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "==", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "-", "1", ":", "\n", "                ", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_trg_main", ",", "num_classes", ",", "'T'", ")", "\n", "draw_in_tensorboard", "(", "writer", ",", "images_source", ",", "i_iter", ",", "pred_src_main", ",", "num_classes", ",", "'S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.print_losses": [[171, 178], ["current_losses.items", "tqdm.tqdm.write", "list_strings.append", "train_UDA.to_numpy"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.to_numpy"], ["", "", "", "", "def", "print_losses", "(", "current_losses", ",", "i_iter", ")", ":", "\n", "    ", "list_strings", "=", "[", "]", "\n", "for", "loss_name", ",", "loss_value", "in", "current_losses", ".", "items", "(", ")", ":", "\n", "        ", "list_strings", ".", "append", "(", "f'{loss_name} = {to_numpy(loss_value):.3f} '", ")", "\n", "", "full_string", "=", "' '", ".", "join", "(", "list_strings", ")", "\n", "tqdm", ".", "write", "(", "f'iter = {i_iter} {full_string}'", ")", "\n", "return", "f'iter = {i_iter} {full_string}'", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.log_losses_tensorboard": [[180, 183], ["current_losses.items", "writer.add_scalar", "train_UDA.to_numpy"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.to_numpy"], ["", "def", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", ":", "\n", "    ", "for", "loss_name", ",", "loss_value", "in", "current_losses", ".", "items", "(", ")", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "f'data/{loss_name}'", ",", "to_numpy", "(", "loss_value", ")", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.to_numpy": [[185, 190], ["isinstance", "tensor.data.cpu().numpy", "tensor.data.cpu"], "function", ["None"], ["", "", "def", "to_numpy", "(", "tensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "tensor", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "return", "tensor", "\n", "", "else", ":", "\n", "        ", "return", "tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.train_domain_adaptation": [[192, 197], ["train_UDA.train_source_only", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.jxhuang0508_CaCo.domain_adaptation.train_UDA.train_source_only"], ["", "", "def", "train_domain_adaptation", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ",", "_init_fn", ")", ":", "\n", "    ", "if", "cfg", ".", "TRAIN", ".", "DA_METHOD", "==", "'source_only'", ":", "\n", "        ", "train_source_only", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported DA method {cfg.TRAIN.DA_METHOD}\"", ")", "\n", "\n"]]}