{"home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.plot_mix_temperature.main": [[19, 48], ["main.build_mera", "utils.get_last_checkpoint_step", "utils.load_checkpoint", "main.build_mera.train", "torch.distributions.laplace.Laplace", "torch.distributions.laplace.Laplace.sample", "torch.distributions.laplace.Laplace", "torch.distributions.laplace.Laplace.sample", "z.to.to", "x.permute().detach().cpu().numpy", "matplotlib.pyplot.subplots", "range", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.savefig", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.no_grad", "main.build_mera.inverse", "range", "x.permute().detach().cpu", "numpy.exp", "ax.imshow", "ax.axis", "math.sqrt", "math.sqrt", "x.permute().detach", "x.permute"], "function", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.main.build_mera", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.get_last_checkpoint_step", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.load_checkpoint", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.sample", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.sample", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.flow.Flow.inverse"], ["def", "main", "(", ")", ":", "\n", "    ", "flow", "=", "build_mera", "(", ")", "\n", "last_epoch", "=", "utils", ".", "get_last_checkpoint_step", "(", ")", "\n", "utils", ".", "load_checkpoint", "(", "last_epoch", ",", "flow", ")", "\n", "flow", ".", "train", "(", "False", ")", "\n", "\n", "shape", "=", "(", "16", ",", "args", ".", "nchannels", ",", "args", ".", "L", ",", "args", ".", "L", ")", "\n", "prior_low", "=", "Laplace", "(", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "T_low", "/", "sqrt", "(", "2", ")", ")", ")", "\n", "z", "=", "prior_low", ".", "sample", "(", "shape", ")", "\n", "prior_high", "=", "Laplace", "(", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "T_high", "/", "sqrt", "(", "2", ")", ")", ")", "\n", "z_high", "=", "prior_high", ".", "sample", "(", "shape", ")", "\n", "k", "=", "2", "**", "level_cutoff", "\n", "z", "[", ":", ",", ":", ",", ":", ":", "k", ",", ":", ":", "k", "]", "=", "z_high", "[", ":", ",", ":", ",", ":", ":", "k", ",", ":", ":", "k", "]", "\n", "z", "=", "z", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "x", ",", "_", "=", "flow", ".", "inverse", "(", "z", ")", "\n", "\n", "", "samples", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "samples", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "samples", ")", ")", "\n", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "4", ",", "4", ",", "figsize", "=", "(", "4", ",", "4", ")", ",", "sharex", "=", "True", ",", "sharey", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "            ", "ax", "=", "axes", "[", "i", ",", "j", "]", "\n", "ax", ".", "imshow", "(", "samples", "[", "j", "*", "4", "+", "i", "]", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "'./mix_T.pdf'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.main.get_prior": [[22, 34], ["sources.Laplace.to", "sources.Gaussian", "sources.Laplace", "ValueError", "math.sqrt"], "function", ["None"], ["def", "get_prior", "(", "temperature", "=", "1", ")", ":", "\n", "    ", "if", "args", ".", "prior", "==", "'gaussian'", ":", "\n", "        ", "prior", "=", "sources", ".", "Gaussian", "(", "[", "args", ".", "nchannels", ",", "args", ".", "L", ",", "args", ".", "L", "]", ",", "\n", "scale", "=", "temperature", ")", "\n", "", "elif", "args", ".", "prior", "==", "'laplace'", ":", "\n", "# Set scale = 1/sqrt(2) to make var = 1", "\n", "        ", "prior", "=", "sources", ".", "Laplace", "(", "[", "args", ".", "nchannels", ",", "args", ".", "L", ",", "args", ".", "L", "]", ",", "\n", "scale", "=", "temperature", "/", "sqrt", "(", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unknown prior: {args.prior}'", ")", "\n", "", "prior", "=", "prior", ".", "to", "(", "args", ".", "device", ")", "\n", "return", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.main.build_rnvp": [[36, 60], ["layers.RNVP", "layers.ResNetReshape", "layers.ResNetReshape", "range", "range", "args.args.nchannels", "args.args.kernel_size"], "function", ["None"], ["", "def", "build_rnvp", "(", "nchannels", ",", "kernel_size", ",", "nlayers", ",", "nresblocks", ",", "nmlp", ",", "nhidden", ")", ":", "\n", "    ", "core_size", "=", "nchannels", "*", "kernel_size", "**", "2", "\n", "widths", "=", "[", "core_size", "]", "+", "[", "nhidden", "]", "*", "nmlp", "+", "[", "core_size", "]", "\n", "net", "=", "layers", ".", "RNVP", "(", "\n", "[", "\n", "layers", ".", "ResNetReshape", "(", "\n", "nresblocks", ",", "\n", "widths", ",", "\n", "final_scale", "=", "True", ",", "\n", "final_tanh", "=", "True", ",", "\n", ")", "for", "_", "in", "range", "(", "nlayers", ")", "\n", "]", ",", "\n", "[", "\n", "layers", ".", "ResNetReshape", "(", "\n", "nresblocks", ",", "\n", "widths", ",", "\n", "final_scale", "=", "True", ",", "\n", "final_tanh", "=", "False", ",", "\n", ")", "for", "_", "in", "range", "(", "nlayers", ")", "\n", "]", ",", "\n", "nchannels", ",", "\n", "kernel_size", ",", "\n", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.main.build_arflow": [[62, 87], ["layers.ARFlowReshape", "layers.MaskedResNet", "layers.MaskedResNet", "range", "range", "args.args.nchannels", "args.args.kernel_size"], "function", ["None"], ["", "def", "build_arflow", "(", "nchannels", ",", "kernel_size", ",", "nlayers", ",", "nresblocks", ",", "nmlp", ",", "nhidden", ")", ":", "\n", "    ", "assert", "nhidden", "%", "kernel_size", "**", "2", "==", "0", "\n", "channels", "=", "[", "nchannels", "]", "+", "[", "nhidden", "//", "kernel_size", "**", "2", "]", "*", "nmlp", "+", "[", "nchannels", "]", "\n", "width", "=", "kernel_size", "**", "2", "\n", "net", "=", "layers", ".", "ARFlowReshape", "(", "\n", "[", "\n", "layers", ".", "MaskedResNet", "(", "\n", "nresblocks", ",", "\n", "channels", ",", "\n", "width", ",", "\n", "final_scale", "=", "True", ",", "\n", "final_tanh", "=", "True", ",", "\n", ")", "for", "_", "in", "range", "(", "nlayers", ")", "\n", "]", ",", "\n", "[", "\n", "layers", ".", "MaskedResNet", "(", "\n", "nresblocks", ",", "\n", "channels", ",", "\n", "width", ",", "\n", "final_scale", "=", "True", ",", "\n", "final_tanh", "=", "False", ",", "\n", ")", "for", "_", "in", "range", "(", "nlayers", ")", "\n", "]", ",", "\n", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.main.build_mera": [[89, 121], ["main.get_prior", "range", "layers.MERA", "flow.to.to", "_layers.append", "main.build_rnvp", "_layers.append", "ValueError", "main.build_arflow"], "function", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.main.get_prior", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.main.build_rnvp", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.main.build_arflow"], ["", "def", "build_mera", "(", ")", ":", "\n", "    ", "prior", "=", "get_prior", "(", ")", "\n", "\n", "_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "depth", ")", ":", "\n", "        ", "if", "args", ".", "subnet", "==", "'rnvp'", ":", "\n", "            ", "_layers", ".", "append", "(", "\n", "build_rnvp", "(", "\n", "args", ".", "nchannels", ",", "\n", "args", ".", "kernel_size", ",", "\n", "args", ".", "nlayers_list", "[", "i", "]", ",", "\n", "args", ".", "nresblocks_list", "[", "i", "]", ",", "\n", "args", ".", "nmlp_list", "[", "i", "]", ",", "\n", "args", ".", "nhidden_list", "[", "i", "]", ",", "\n", ")", ")", "\n", "", "elif", "args", ".", "subnet", "==", "'ar'", ":", "\n", "            ", "_layers", ".", "append", "(", "\n", "build_arflow", "(", "\n", "args", ".", "nchannels", ",", "\n", "args", ".", "kernel_size", ",", "\n", "args", ".", "nlayers_list", "[", "i", "]", ",", "\n", "args", ".", "nresblocks_list", "[", "i", "]", ",", "\n", "args", ".", "nmlp_list", "[", "i", "]", ",", "\n", "args", ".", "nhidden_list", "[", "i", "]", ",", "\n", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unknown subnet: {args.subnet}'", ")", "\n", "\n", "", "", "flow", "=", "layers", ".", "MERA", "(", "_layers", ",", "args", ".", "L", ",", "args", ".", "kernel_size", ",", "prior", ")", "\n", "flow", "=", "flow", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.main.do_plot": [[123, 149], ["flow.train", "flow.sample", "utils.my_log", "utils.logit_transform", "torch.clamp", "sample.permute().detach().cpu().numpy.permute().detach().cpu().numpy", "utils_support.plot_samples_np", "fig.suptitle", "utils_support.my_tight_layout", "utils.ensure_dir", "fig.savefig", "fig.clf", "matplotlib.pyplot.close", "flow.train", "sample.permute().detach().cpu().numpy.min().item", "sample.permute().detach().cpu().numpy.max().item", "sample.permute().detach().cpu().numpy.mean().item", "sample.permute().detach().cpu().numpy.std().item", "sample.permute().detach().cpu().numpy.permute().detach().cpu", "sample.permute().detach().cpu().numpy.min", "sample.permute().detach().cpu().numpy.max", "sample.permute().detach().cpu().numpy.mean", "sample.permute().detach().cpu().numpy.std", "sample.permute().detach().cpu().numpy.permute().detach", "sample.permute().detach().cpu().numpy.permute"], "function", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.sample", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.my_log", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.data_utils.logit_transform", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.utils_support.plot_samples_np", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.utils_support.my_tight_layout", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.ensure_dir"], ["", "def", "do_plot", "(", "flow", ",", "epoch_idx", ")", ":", "\n", "    ", "flow", ".", "train", "(", "False", ")", "\n", "\n", "# When using multiple GPUs, each GPU samples batch_size / device_count", "\n", "sample", ",", "_", "=", "flow", ".", "sample", "(", "args", ".", "batch_size", "//", "args", ".", "device_count", ")", "\n", "my_log", "(", "'plot min {:.3g} max {:.3g} mean {:.3g} std {:.3g}'", ".", "format", "(", "\n", "sample", ".", "min", "(", ")", ".", "item", "(", ")", ",", "\n", "sample", ".", "max", "(", ")", ".", "item", "(", ")", ",", "\n", "sample", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "sample", ".", "std", "(", ")", ".", "item", "(", ")", ",", "\n", ")", ")", "\n", "sample", ",", "_", "=", "utils", ".", "logit_transform", "(", "sample", ",", "inverse", "=", "True", ")", "\n", "sample", "=", "torch", ".", "clamp", "(", "sample", ",", "0", ",", "1", ")", "\n", "sample", "=", "sample", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "fig", ",", "axes", "=", "plot_samples_np", "(", "sample", ")", "\n", "\n", "fig", ".", "suptitle", "(", "f'{args.data}/{args.net_name}/epoch{epoch_idx}'", ")", "\n", "my_tight_layout", "(", "fig", ")", "\n", "plot_filename", "=", "f'{args.plot_filename}/epoch{epoch_idx}.pdf'", "\n", "utils", ".", "ensure_dir", "(", "plot_filename", ")", "\n", "fig", ".", "savefig", "(", "plot_filename", ",", "bbox_inches", "=", "'tight'", ")", "\n", "fig", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "flow", ".", "train", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.main.main": [[151, 242], ["time.time", "utils.init_out_dir", "utils.get_last_checkpoint_step", "utils.print_args", "main.build_mera", "utils.data_parallel_wrap.train", "utils.my_log", "utils.my_log", "torch.optim.AdamW", "utils.load_dataset", "torch.utils.data.DataLoader", "utils.my_log", "utils.my_log", "time.time", "range", "exit", "utils.my_log", "utils.clear_log", "utils.data_parallel_wrap", "utils.load_checkpoint", "time.time", "enumerate", "torch.cuda.device_count", "utils.data_parallel_wrap.parameters", "torch.optim.AdamW.zero_grad", "x.to.to", "utils.logit_transform", "utils.data_parallel_wrap.log_prob", "loss.mean", "loss.std", "utils.check_nan", "loss.mean.backward", "torch.optim.AdamW.step", "torch.save", "utils.get_nparams", "utils.get_nparams", "torch.nn.utils.clip_grad_norm_", "utils.my_log", "utils.data_parallel_wrap.state_dict", "torch.optim.AdamW.state_dict", "os.remove", "torch.no_grad", "main.do_plot", "math.log", "loss.mean.item", "math.log", "loss.mean.item", "loss.std.item", "time.time"], "function", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.init_out_dir", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.get_last_checkpoint_step", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.print_args", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.main.build_mera", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.my_log", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.my_log", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.data_utils.load_dataset", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.my_log", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.my_log", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.my_log", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.clear_log", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.data_parallel_wrap", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.load_checkpoint", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.data_utils.logit_transform", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.log_prob", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.check_nan", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.get_nparams", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.get_nparams", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.my_log", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.main.do_plot"], ["", "def", "main", "(", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "utils", ".", "init_out_dir", "(", ")", "\n", "last_epoch", "=", "utils", ".", "get_last_checkpoint_step", "(", ")", "\n", "if", "last_epoch", ">=", "args", ".", "epoch", ":", "\n", "        ", "exit", "(", ")", "\n", "", "if", "last_epoch", ">=", "0", ":", "\n", "        ", "my_log", "(", "f'\\nCheckpoint found: {last_epoch}\\n'", ")", "\n", "", "else", ":", "\n", "        ", "utils", ".", "clear_log", "(", ")", "\n", "", "utils", ".", "print_args", "(", ")", "\n", "\n", "flow", "=", "build_mera", "(", ")", "\n", "flow", ".", "train", "(", "True", ")", "\n", "my_log", "(", "'nparams in each RG layer: {}'", ".", "format", "(", "\n", "[", "utils", ".", "get_nparams", "(", "layer", ")", "for", "layer", "in", "flow", ".", "layers", "]", ")", ")", "\n", "my_log", "(", "f'Total nparams: {utils.get_nparams(flow)}'", ")", "\n", "\n", "# Use multiple GPUs", "\n", "if", "args", ".", "cuda", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "flow", "=", "utils", ".", "data_parallel_wrap", "(", "flow", ")", "\n", "\n", "", "params", "=", "[", "x", "for", "x", "in", "flow", ".", "parameters", "(", ")", "if", "x", ".", "requires_grad", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "params", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "if", "last_epoch", ">=", "0", ":", "\n", "        ", "utils", ".", "load_checkpoint", "(", "last_epoch", ",", "flow", ",", "optimizer", ")", "\n", "\n", "", "train_set", ",", "_", ",", "_", "=", "utils", ".", "load_dataset", "(", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_set", ",", "\n", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "init_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "my_log", "(", "f'init_time = {init_time:.3f}'", ")", "\n", "\n", "my_log", "(", "'Training...'", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch_idx", "in", "range", "(", "last_epoch", "+", "1", ",", "args", ".", "epoch", "+", "1", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "x", "=", "x", ".", "to", "(", "args", ".", "device", ")", "\n", "x", ",", "ldj_logit", "=", "utils", ".", "logit_transform", "(", "x", ")", "\n", "log_prob", "=", "flow", ".", "log_prob", "(", "x", ")", "\n", "loss", "=", "-", "(", "log_prob", "+", "ldj_logit", ")", "/", "(", "args", ".", "nchannels", "*", "args", ".", "L", "**", "2", ")", "\n", "loss_mean", "=", "loss", ".", "mean", "(", ")", "\n", "loss_std", "=", "loss", ".", "std", "(", ")", "\n", "\n", "utils", ".", "check_nan", "(", "loss_mean", ")", "\n", "\n", "loss_mean", ".", "backward", "(", ")", "\n", "if", "args", ".", "clip_grad", ":", "\n", "                ", "clip_grad_norm_", "(", "params", ",", "args", ".", "clip_grad", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "args", ".", "print_step", "and", "batch_idx", "%", "args", ".", "print_step", "==", "0", ":", "\n", "                ", "bit_per_dim", "=", "(", "loss_mean", ".", "item", "(", ")", "+", "log", "(", "256", ")", ")", "/", "log", "(", "2", ")", "\n", "my_log", "(", "\n", "'epoch {} batch {} bpp {:.8g} loss {:.8g} +- {:.8g} time {:.3f}'", "\n", ".", "format", "(", "\n", "epoch_idx", ",", "\n", "batch_idx", ",", "\n", "bit_per_dim", ",", "\n", "loss_mean", ".", "item", "(", ")", ",", "\n", "loss_std", ".", "item", "(", ")", ",", "\n", "time", ".", "time", "(", ")", "-", "start_time", ",", "\n", ")", ")", "\n", "\n", "", "", "if", "(", "args", ".", "out_filename", "and", "args", ".", "save_epoch", "\n", "and", "epoch_idx", "%", "args", ".", "save_epoch", "==", "0", ")", ":", "\n", "            ", "state", "=", "{", "\n", "'flow'", ":", "flow", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "f'{args.out_filename}_save/{epoch_idx}.state'", ")", "\n", "\n", "last_epoch", "=", "epoch_idx", "-", "args", ".", "save_epoch", "\n", "if", "(", "last_epoch", ">", "0", "and", "args", ".", "keep_epoch", "\n", "and", "last_epoch", "%", "args", ".", "keep_epoch", "!=", "0", ")", ":", "\n", "                ", "os", ".", "remove", "(", "f'{args.out_filename}_save/{last_epoch}.state'", ")", "\n", "\n", "", "", "if", "(", "args", ".", "plot_filename", "and", "args", ".", "plot_epoch", "\n", "and", "epoch_idx", "%", "args", ".", "plot_epoch", "==", "0", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "do_plot", "(", "flow", ",", "epoch_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.utils_support.parse_run_row": [[23, 41], ["re.compile().match", "float", "RunRow", "re.compile().match.group", "math.isinf", "math.isnan", "re.compile", "int", "int", "float", "float", "float", "re.compile().match.group", "re.compile().match.group", "re.compile().match.group", "re.compile().match.group", "re.compile().match.group"], "function", ["None"], ["def", "parse_run_row", "(", "s", ")", ":", "\n", "    ", "match", "=", "re", ".", "compile", "(", "\n", "r'epoch (?P<epoch>.*?) batch (?P<batch>.*?) (bpp (?P<bpp>.*?) )?loss (?P<loss>.*?) \\+- (?P<loss_std>.*?) time (?P<time>.*)'", "\n", ")", ".", "match", "(", "s", ")", "\n", "if", "not", "match", ":", "\n", "        ", "return", "None", "\n", "\n", "", "loss", "=", "float", "(", "match", ".", "group", "(", "'loss'", ")", ")", "\n", "if", "isinf", "(", "loss", ")", "or", "isnan", "(", "loss", ")", ":", "\n", "        ", "return", "None", "\n", "\n", "", "return", "RunRow", "(", "\n", "epoch", "=", "int", "(", "match", ".", "group", "(", "'epoch'", ")", ")", ",", "\n", "batch", "=", "int", "(", "match", ".", "group", "(", "'batch'", ")", ")", ",", "\n", "bpp", "=", "float", "(", "match", ".", "group", "(", "'bpp'", ")", ")", ",", "\n", "loss", "=", "loss", ",", "\n", "loss_std", "=", "float", "(", "match", ".", "group", "(", "'loss_std'", ")", ")", ",", "\n", "time", "=", "float", "(", "match", ".", "group", "(", "'time'", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.utils_support.read_log": [[44, 86], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "Run", "open", "re.compile().match", "utils_support.parse_run_row", "int", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "re.compile", "re.compile().match.group"], "function", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.utils_support.parse_run_row"], ["", "def", "read_log", "(", "filename", ")", ":", "\n", "    ", "step", "=", "-", "1", "\n", "steps", "=", "[", "]", "\n", "bpps", "=", "[", "]", "\n", "losses", "=", "[", "]", "\n", "loss_stds", "=", "[", "]", "\n", "nparams", "=", "0", "\n", "last_time", "=", "None", "\n", "time_sum", "=", "0", "\n", "step_sum", "=", "0", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "match", "=", "re", ".", "compile", "(", "r'.*parameters: (.*)'", ")", ".", "match", "(", "line", ")", "\n", "if", "match", ":", "\n", "                ", "nparams", "=", "int", "(", "match", ".", "group", "(", "1", ")", ")", "\n", "continue", "\n", "\n", "", "run_row", "=", "parse_run_row", "(", "line", ")", "\n", "if", "run_row", ":", "\n", "                ", "step", "+=", "1", "\n", "steps", ".", "append", "(", "step", ")", "\n", "bpps", ".", "append", "(", "run_row", ".", "bpp", ")", "\n", "losses", ".", "append", "(", "run_row", ".", "loss", ")", "\n", "loss_stds", ".", "append", "(", "run_row", ".", "loss_std", ")", "\n", "\n", "time", "=", "run_row", ".", "time", "\n", "if", "last_time", "is", "None", ":", "\n", "                    ", "last_time", "=", "time", "\n", "", "elif", "time", "<", "last_time", "or", "time", ">", "last_time", "+", "60", ":", "\n", "                    ", "last_time", "=", "None", "\n", "", "else", ":", "\n", "                    ", "time_sum", "+=", "time", "-", "last_time", "\n", "step_sum", "+=", "1", "\n", "last_time", "=", "time", "\n", "\n", "", "", "", "", "steps", "=", "np", ".", "array", "(", "steps", ",", "dtype", "=", "int", ")", "\n", "bpps", "=", "np", ".", "array", "(", "bpps", ")", "\n", "losses", "=", "np", ".", "array", "(", "losses", ")", "\n", "loss_stds", "=", "np", ".", "array", "(", "loss_stds", ")", "\n", "time_per_step", "=", "time_sum", "/", "step_sum", "\n", "\n", "return", "Run", "(", "steps", ",", "bpps", ",", "losses", ",", "loss_stds", ",", "nparams", ",", "time_per_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.utils_support.ema": [[88, 95], ["numpy.empty_like", "range"], "function", ["None"], ["", "def", "ema", "(", "steps", ",", "losses", ",", "alpha", ")", ":", "\n", "    ", "out", "=", "np", ".", "empty_like", "(", "losses", ")", "\n", "out", "[", "0", "]", "=", "losses", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "losses", ".", "size", ")", ":", "\n", "        ", "a", "=", "alpha", "**", "(", "steps", "[", "i", "]", "-", "steps", "[", "i", "-", "1", "]", ")", "\n", "out", "[", "i", "]", "=", "a", "*", "out", "[", "i", "-", "1", "]", "+", "(", "1", "-", "a", ")", "*", "losses", "[", "i", "]", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.utils_support.get_loss": [[97, 105], ["utils_support.read_log", "ema.min", "utils_support.ema"], "function", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.utils_support.read_log", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.utils_support.ema"], ["", "def", "get_loss", "(", "filename", ",", "alpha", "=", "0", ")", ":", "\n", "    ", "run", "=", "read_log", "(", "filename", ")", "\n", "steps", "=", "run", ".", "steps", "\n", "losses", "=", "run", ".", "losses", "\n", "if", "alpha", ">", "0", ":", "\n", "        ", "losses", "=", "ema", "(", "steps", ",", "losses", ",", "alpha", ")", "\n", "", "loss", "=", "losses", ".", "min", "(", ")", "\n", "return", "run", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.utils_support.my_tight_layout": [[108, 113], ["distutils.version.LooseVersion", "distutils.version.LooseVersion", "fig.tight_layout", "fig.tight_layout"], "function", ["None"], ["", "def", "my_tight_layout", "(", "fig", ")", ":", "\n", "    ", "if", "LooseVersion", "(", "matplotlib", ".", "__version__", ")", ">=", "LooseVersion", "(", "'3.3'", ")", ":", "\n", "        ", "fig", ".", "tight_layout", "(", ")", "\n", "", "else", ":", "\n", "        ", "fig", ".", "tight_layout", "(", "rect", "=", "(", "0", ",", "0", ",", "1", ",", "0.97", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.utils_support.plot_samples_np": [[116, 140], ["matplotlib.pyplot.subplots", "range", "int", "range", "math.sqrt", "ax.imshow", "ax.axis", "img.repeat.repeat"], "function", ["None"], ["", "", "def", "plot_samples_np", "(", "samples", ",", "array_h", "=", "None", ",", "array_w", "=", "None", ",", "fig_scale", "=", "1", ")", ":", "\n", "    ", "if", "array_h", "is", "None", "and", "array_w", "is", "None", ":", "\n", "# array_h * array_w may be less than samples.shape[0]", "\n", "        ", "array_h", "=", "array_w", "=", "int", "(", "sqrt", "(", "samples", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "array_h", "*", "array_w", "==", "samples", ".", "shape", "[", "0", "]", "\n", "\n", "", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "array_h", ",", "\n", "array_w", ",", "\n", "figsize", "=", "(", "array_w", "*", "fig_scale", ",", "\n", "array_h", "*", "fig_scale", ")", ",", "\n", "sharex", "=", "True", ",", "\n", "sharey", "=", "True", ",", "\n", "squeeze", "=", "False", ")", "\n", "for", "i", "in", "range", "(", "array_h", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "array_w", ")", ":", "\n", "            ", "img", "=", "samples", "[", "j", "*", "array_h", "+", "i", "]", "\n", "if", "img", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "                ", "img", "=", "img", ".", "repeat", "(", "3", ",", "axis", "=", "-", "1", ")", "\n", "", "ax", "=", "axes", "[", "i", ",", "j", "]", "\n", "ax", ".", "imshow", "(", "img", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "\n", "", "", "return", "fig", ",", "axes", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.utils_support.plot_one_sample_np": [[142, 156], ["skimage.img_as_ubyte.permute().detach().cpu().numpy", "skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "skimage.img_as_ubyte", "skimage.img_as_ubyte", "skimage.img_as_ubyte", "utils.ensure_dir", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "len", "skimage.img_as_ubyte.permute().detach().cpu", "numpy.exp", "skimage.img_as_ubyte.permute().detach", "skimage.img_as_ubyte.permute"], "function", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.ensure_dir"], ["", "def", "plot_one_sample_np", "(", "filename", ",", "sample", ",", "L", ")", ":", "\n", "    ", "if", "len", "(", "sample", ".", "shape", ")", "==", "4", ":", "\n", "        ", "sample", "=", "sample", "[", "0", "]", "\n", "", "sample", "=", "sample", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sample", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "sample", ")", ")", "\n", "sample", "=", "skimage", ".", "transform", ".", "resize", "(", "\n", "sample", ",", "\n", "(", "L", ",", "L", ")", ",", "\n", "order", "=", "0", ",", "\n", "anti_aliasing", "=", "False", ",", "\n", ")", "\n", "sample", "=", "skimage", ".", "img_as_ubyte", "(", "sample", ")", "\n", "utils", ".", "ensure_dir", "(", "filename", ")", "\n", "skimage", ".", "io", ".", "imsave", "(", "filename", ",", "sample", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.args.get_net_name": [[190, 201], ["net_name.format.format", "vars"], "function", ["None"], ["", "def", "get_net_name", "(", ")", ":", "\n", "    ", "net_name", "=", "''", "\n", "if", "args", ".", "prior", "!=", "'gaussian'", ":", "\n", "        ", "net_name", "+=", "'{prior}_'", "\n", "", "if", "args", ".", "subnet", "!=", "'rnvp'", ":", "\n", "        ", "net_name", "+=", "'{subnet}_'", "\n", "", "if", "args", ".", "kernel_size", "!=", "4", ":", "\n", "        ", "net_name", "+=", "'ks{kernel_size}_'", "\n", "", "net_name", "+=", "'nl{nlayers}_nr{nresblocks}_nm{nmlp}_nh{nhidden}'", "\n", "net_name", "=", "net_name", ".", "format", "(", "**", "vars", "(", "args", ")", ")", "\n", "return", "net_name", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.args.str_to_int_list": [[225, 234], ["s.split", "int", "int"], "function", ["None"], ["def", "str_to_int_list", "(", "s", ",", "depth", ")", ":", "\n", "    ", "if", "','", "in", "s", ":", "\n", "        ", "out", "=", "[", "]", "\n", "for", "x", "in", "s", ".", "split", "(", "','", ")", ":", "\n", "            ", "x", "=", "int", "(", "x", ")", "\n", "out", "+=", "[", "x", ",", "x", "]", "\n", "", "return", "out", "\n", "", "else", ":", "\n", "        ", "return", "[", "int", "(", "s", ")", "]", "*", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.test_latent_corr.corrcoef": [[12, 24], ["torch.diag", "torch.sqrt", "x.mean", "torch.sqrt.expand_as", "torch.sqrt.expand_as().t", "x.t", "torch.sqrt.expand_as"], "function", ["None"], ["def", "corrcoef", "(", "x", ")", ":", "\n", "    ", "n", "=", "x", ".", "shape", "[", "1", "]", "\n", "x", "=", "x", "-", "x", ".", "mean", "(", "dim", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "c", "=", "x", "@", "x", ".", "t", "(", ")", "/", "(", "n", "-", "1", ")", "\n", "\n", "# normalize covariance matrix", "\n", "d", "=", "torch", ".", "diag", "(", "c", ")", "\n", "stddev", "=", "torch", ".", "sqrt", "(", "d", ")", "\n", "c", "=", "c", "/", "stddev", ".", "expand_as", "(", "c", ")", "\n", "c", "=", "c", "/", "stddev", ".", "expand_as", "(", "c", ")", ".", "t", "(", ")", "\n", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.test_latent_corr.main": [[26, 53], ["utils.get_last_checkpoint_step", "print", "main.build_mera", "utils.load_checkpoint", "utils.load_dataset", "torch.utils.data.DataLoader", "enumerate", "torch.cat", "test_latent_corr.corrcoef", "print", "torch.save", "print", "x.to.to", "main.build_mera.forward", "z[].reshape", "zs.append"], "function", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.get_last_checkpoint_step", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.main.build_mera", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.load_checkpoint", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.data_utils.load_dataset", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.code.test_latent_corr.corrcoef", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.flow.Flow.forward"], ["", "def", "main", "(", ")", ":", "\n", "    ", "last_epoch", "=", "utils", ".", "get_last_checkpoint_step", "(", ")", "\n", "print", "(", "f'Checkpoint found: {last_epoch}'", ")", "\n", "flow", "=", "build_mera", "(", ")", "\n", "utils", ".", "load_checkpoint", "(", "last_epoch", ",", "flow", ")", "\n", "\n", "train_set", ",", "_", ",", "_", "=", "utils", ".", "load_dataset", "(", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_set", ",", "\n", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "zs", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "batch_idx", ">=", "10", ":", "\n", "            ", "break", "\n", "", "print", "(", "batch_idx", ")", "\n", "\n", "x", "=", "x", ".", "to", "(", "args", ".", "device", ")", "\n", "z", ",", "_", "=", "flow", ".", "forward", "(", "x", ")", "\n", "z", "=", "z", "[", ":", ",", ":", ",", ":", ":", "8", ",", ":", ":", "8", "]", ".", "reshape", "(", "z", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "zs", ".", "append", "(", "z", ")", "\n", "", "z", "=", "torch", ".", "cat", "(", "zs", ")", "\n", "corr", "=", "corrcoef", "(", "z", ".", "T", ")", "\n", "print", "(", "corr", ")", "\n", "torch", ".", "save", "(", "corr", ",", "'corr.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.msds.generate_msds1.generate": [[11, 56], ["os.makedirs", "numpy.empty", "range", "PIL.Image.new", "range", "Image.new.save", "h5py.File", "f.create_dataset", "range", "random.randint", "random.randint", "random.randint", "PIL.Image.new", "PIL.ImageDraw.Draw", "ImageDraw.Draw.ellipse", "item.rotate.rotate", "Image.new.paste", "random.random", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint"], "function", ["None"], ["def", "generate", "(", "dir_name", ",", "num_imgs", ")", ":", "\n", "# `torchvision.datasets.ImageFolder` requires a subfolder", "\n", "    ", "os", ".", "makedirs", "(", "f'./msds1/{dir_name}/0'", ",", "exist_ok", "=", "True", ")", "\n", "\n", "labels", "=", "np", ".", "empty", "(", "(", "num_imgs", ",", "4", ",", "4", ",", "6", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "count", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "item_color", "=", "(", "\n", "randint", "(", "0", ",", "191", ")", "+", "32", ",", "\n", "randint", "(", "0", ",", "191", ")", "+", "32", ",", "\n", "randint", "(", "0", ",", "191", ")", "+", "32", ",", "\n", ")", "\n", "\n", "img", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "32", ",", "32", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "                ", "item", "=", "Image", ".", "new", "(", "'RGBA'", ",", "(", "8", ",", "8", ")", ",", "(", "255", ",", "255", ",", "255", ",", "0", ")", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "item", ")", "\n", "\n", "now_color", "=", "(", "\n", "item_color", "[", "0", "]", "+", "randint", "(", "-", "32", ",", "32", ")", ",", "\n", "item_color", "[", "1", "]", "+", "randint", "(", "-", "32", ",", "32", ")", ",", "\n", "item_color", "[", "2", "]", "+", "randint", "(", "-", "32", ",", "32", ")", ",", "\n", "255", ",", "\n", ")", "\n", "draw", ".", "ellipse", "(", "(", "1", ",", "3", ",", "7", ",", "5", ")", ",", "now_color", ")", "\n", "now_angle", "=", "random", "(", ")", "*", "180", "\n", "item", "=", "item", ".", "rotate", "(", "now_angle", ",", "\n", "resample", "=", "Image", ".", "Resampling", ".", "BICUBIC", ")", "\n", "\n", "now_pos", "=", "(", "\n", "i", "*", "8", "+", "randint", "(", "-", "1", ",", "1", ")", ",", "\n", "j", "*", "8", "+", "randint", "(", "-", "1", ",", "1", ")", ",", "\n", ")", "\n", "img", ".", "paste", "(", "item", ",", "now_pos", ",", "mask", "=", "item", ")", "\n", "\n", "label", "=", "now_pos", "+", "(", "now_angle", ",", ")", "+", "now_color", "[", ":", "3", "]", "\n", "labels", "[", "count", ",", "i", ",", "j", ",", ":", "]", "=", "label", "\n", "\n", "", "", "img", ".", "save", "(", "f'./msds1/{dir_name}/0/{count:05d}.png'", ",", "compress_level", "=", "1", ")", "\n", "\n", "", "with", "h5py", ".", "File", "(", "f'./msds1/{dir_name}_labels.hdf5'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "create_dataset", "(", "'labels'", ",", "\n", "data", "=", "labels", ",", "\n", "compression", "=", "'gzip'", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.msds.generate_msds1.main": [[58, 61], ["generate_msds1.generate", "generate_msds1.generate"], "function", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.msds.generate_msds2.generate", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.msds.generate_msds2.generate"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "generate", "(", "'train'", ",", "9", "*", "10", "**", "4", ")", "\n", "generate", "(", "'test'", ",", "10", "**", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.msds.generate_msds2.generate": [[11, 52], ["os.makedirs", "numpy.empty", "range", "PIL.Image.new", "range", "Image.new.save", "h5py.File", "f.create_dataset", "random.random", "range", "PIL.Image.new", "PIL.ImageDraw.Draw", "ImageDraw.Draw.ellipse", "item.rotate.rotate", "Image.new.paste", "random.randint", "random.randint", "random.randint", "random.random", "random.randint", "random.randint"], "function", ["None"], ["def", "generate", "(", "dir_name", ",", "num_imgs", ")", ":", "\n", "# `torchvision.datasets.ImageFolder` requires a subfolder", "\n", "    ", "os", ".", "makedirs", "(", "f'./msds2/{dir_name}/0'", ",", "exist_ok", "=", "True", ")", "\n", "\n", "labels", "=", "np", ".", "empty", "(", "(", "num_imgs", ",", "4", ",", "4", ",", "6", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "count", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "item_angle", "=", "random", "(", ")", "*", "180", "\n", "\n", "img", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "32", ",", "32", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "                ", "item", "=", "Image", ".", "new", "(", "'RGBA'", ",", "(", "8", ",", "8", ")", ",", "(", "255", ",", "255", ",", "255", ",", "0", ")", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "item", ")", "\n", "\n", "now_color", "=", "(", "\n", "randint", "(", "0", ",", "255", ")", ",", "\n", "randint", "(", "0", ",", "255", ")", ",", "\n", "randint", "(", "0", ",", "255", ")", ",", "\n", "255", ",", "\n", ")", "\n", "draw", ".", "ellipse", "(", "(", "1", ",", "3", ",", "7", ",", "5", ")", ",", "now_color", ")", "\n", "now_angle", "=", "item_angle", "+", "random", "(", ")", "*", "45", "\n", "item", "=", "item", ".", "rotate", "(", "now_angle", ",", "\n", "resample", "=", "Image", ".", "Resampling", ".", "BICUBIC", ")", "\n", "\n", "now_pos", "=", "(", "\n", "i", "*", "8", "+", "randint", "(", "-", "1", ",", "1", ")", ",", "\n", "j", "*", "8", "+", "randint", "(", "-", "1", ",", "1", ")", ",", "\n", ")", "\n", "img", ".", "paste", "(", "item", ",", "now_pos", ",", "mask", "=", "item", ")", "\n", "\n", "label", "=", "now_pos", "+", "(", "now_angle", ",", ")", "+", "now_color", "[", ":", "3", "]", "\n", "labels", "[", "count", ",", "i", ",", "j", ",", ":", "]", "=", "label", "\n", "\n", "", "", "img", ".", "save", "(", "f'./msds2/{dir_name}/0/{count:05d}.png'", ",", "compress_level", "=", "1", ")", "\n", "\n", "", "with", "h5py", ".", "File", "(", "f'./msds2/{dir_name}_labels.hdf5'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "create_dataset", "(", "'labels'", ",", "\n", "data", "=", "labels", ",", "\n", "compression", "=", "'gzip'", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.msds.generate_msds2.main": [[54, 57], ["generate_msds2.generate", "generate_msds2.generate"], "function", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.msds.generate_msds2.generate", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.msds.generate_msds2.generate"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "generate", "(", "'train'", ",", "9", "*", "10", "**", "4", ")", "\n", "generate", "(", "'test'", ",", "10", "**", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.data_utils.DataInfo.__init__": [[16, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "channel", ",", "size", ")", ":", "\n", "        ", "\"\"\"Instantiates a DataInfo.\n\n        Args:\n            name: name of dataset.\n            channel: number of image channels.\n            size: height and width of an image.\n        \"\"\"", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "channel", "=", "channel", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.data_utils.MSDSDataset.__init__": [[30, 35], ["torchvision.datasets.VisionDataset.__init__", "h5py.File", "torch.from_numpy", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "with", "h5py", ".", "File", "(", "f'{root}_labels.hdf5'", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "labels", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "f", "[", "'labels'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.data_utils.MSDSDataset.__getitem__": [[36, 43], ["data_utils.MSDSDataset.transform", "open", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# Open path as file to avoid ResourceWarning", "\n", "        ", "with", "open", "(", "f'{self.root}/0/{index:05}.png'", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.data_utils.MSDSDataset.__len__": [[44, 46], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "labels", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.data_utils.load_dataset": [[48, 138], ["data_utils.DataInfo", "os.path.join", "torchvision.transforms.Compose", "torchvision.datasets.CelebA", "torchvision.datasets.CelebA", "data_utils.DataInfo", "os.path.join", "torchvision.transforms.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torchvision.transforms.CenterCrop", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "data_utils.DataInfo", "os.path.join", "torchvision.transforms.ToTensor", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.transforms.Pad", "torchvision.transforms.ToTensor", "data_utils.DataInfo", "os.path.join", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torch.utils.data.random_split", "data_utils.DataInfo", "torchvision.transforms.ToTensor", "data_utils.MSDSDataset", "data_utils.MSDSDataset", "torchvision.transforms.CenterCrop", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torch.Generator().manual_seed", "os.path.join", "os.path.join", "data_utils.DataInfo", "torchvision.transforms.ToTensor", "data_utils.MSDSDataset", "data_utils.MSDSDataset", "ValueError", "os.path.join", "os.path.join", "torch.Generator"], "function", ["None"], ["", "", "def", "load_dataset", "(", ")", ":", "\n", "    ", "\"\"\"Load dataset.\n\n    Returns:\n        a torch dataset and its associated information.\n    \"\"\"", "\n", "if", "args", ".", "data", "==", "'celeba32'", ":", "\n", "        ", "data_info", "=", "DataInfo", "(", "args", ".", "data", ",", "3", ",", "32", ")", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'celeba'", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "CenterCrop", "(", "148", ")", ",", "\n", "transforms", ".", "Resize", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "train_set", "=", "datasets", ".", "CelebA", "(", "root", ",", "\n", "split", "=", "'train'", ",", "\n", "transform", "=", "transform", ",", "\n", "download", "=", "True", ")", "\n", "test_set", "=", "datasets", ".", "CelebA", "(", "root", ",", "\n", "split", "=", "'test'", ",", "\n", "transform", "=", "transform", ",", "\n", "download", "=", "True", ")", "\n", "\n", "", "elif", "args", ".", "data", "==", "'mnist32'", ":", "\n", "        ", "data_info", "=", "DataInfo", "(", "args", ".", "data", ",", "1", ",", "32", ")", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'mnist'", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Pad", "(", "2", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "train_set", "=", "datasets", ".", "MNIST", "(", "root", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "transform", ",", "\n", "download", "=", "True", ")", "\n", "test_set", "=", "datasets", ".", "MNIST", "(", "root", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "transform", ",", "\n", "download", "=", "True", ")", "\n", "\n", "", "elif", "args", ".", "data", "==", "'cifar10'", ":", "\n", "        ", "data_info", "=", "DataInfo", "(", "args", ".", "data", ",", "3", ",", "32", ")", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'cifar10'", ")", "\n", "transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "train_set", "=", "datasets", ".", "CIFAR10", "(", "root", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "transform", ",", "\n", "download", "=", "True", ")", "\n", "test_set", "=", "datasets", ".", "CIFAR10", "(", "root", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "transform", ",", "\n", "download", "=", "True", ")", "\n", "\n", "", "elif", "args", ".", "data", "==", "'chair600'", ":", "\n", "        ", "data_info", "=", "DataInfo", "(", "args", ".", "data", ",", "3", ",", "32", ")", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'chair600'", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "CenterCrop", "(", "300", ")", ",", "\n", "transforms", ".", "Resize", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "train_set", "=", "datasets", ".", "ImageFolder", "(", "root", ",", "transform", "=", "transform", ")", "\n", "train_set", ",", "test_set", "=", "data", ".", "random_split", "(", "\n", "train_set", ",", "[", "77730", ",", "8636", "]", ",", "\n", "generator", "=", "torch", ".", "Generator", "(", ")", ".", "manual_seed", "(", "0", ")", ")", "\n", "\n", "", "elif", "args", ".", "data", "==", "'msds1'", ":", "\n", "        ", "data_info", "=", "DataInfo", "(", "args", ".", "data", ",", "3", ",", "32", ")", "\n", "transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "train_set", "=", "MSDSDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'msds1/train'", ")", ",", "\n", "transform", "=", "transform", ")", "\n", "test_set", "=", "MSDSDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'msds1/test'", ")", ",", "\n", "transform", "=", "transform", ")", "\n", "\n", "", "elif", "args", ".", "data", "==", "'msds2'", ":", "\n", "        ", "data_info", "=", "DataInfo", "(", "args", ".", "data", ",", "3", ",", "32", ")", "\n", "transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "train_set", "=", "MSDSDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'msds2/train'", ")", ",", "\n", "transform", "=", "transform", ")", "\n", "test_set", "=", "MSDSDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'msds2/test'", ")", ",", "\n", "transform", "=", "transform", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unknown data: {args.data}'", ")", "\n", "\n", "", "assert", "data_info", ".", "channel", "==", "args", ".", "nchannels", "\n", "assert", "data_info", ".", "size", "==", "args", ".", "L", "\n", "\n", "return", "train_set", ",", "test_set", ",", "data_info", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.data_utils.get_data_batch": [[140, 148], ["data_utils.load_dataset", "torch.utils.data.DataLoader", "iter", "next"], "function", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.data_utils.load_dataset"], ["", "def", "get_data_batch", "(", ")", ":", "\n", "    ", "train_set", ",", "_", ",", "_", "=", "load_dataset", "(", ")", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "train_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ")", "\n", "dataiter", "=", "iter", "(", "train_loader", ")", "\n", "sample", ",", "_", "=", "next", "(", "dataiter", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.data_utils.logit_transform": [[150, 208], ["torch.tensor", "ldj.view().sum.view().sum", "torch.tensor", "ldj.view().sum.view().sum", "torch.nn.functional.softplus", "torch.rand_like", "torch.log", "torch.log", "torch.nn.functional.softplus", "math.log", "math.log", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "ldj.view().sum.view", "torch.exp", "math.log", "math.log", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "ldj.view().sum.view"], "function", ["None"], ["", "def", "logit_transform", "(", "x", ",", "dequant", "=", "True", ",", "constraint", "=", "0.9", ",", "inverse", "=", "False", ")", ":", "\n", "    ", "\"\"\"Transforms data from [0, 1] into unbounded space.\n\n    Restricts data into [0.05, 0.95].\n    Calculates logit(restricted x).\n\n    Args:\n        x: input tensor.\n        dequant: whether to do dequantization\n        constraint: data constraint before logit.\n        inverse: True if transform data back to [0, 1].\n    Returns:\n        transformed tensor and log-determinant of Jacobian from the transform.\n    \"\"\"", "\n", "if", "inverse", ":", "\n", "        ", "logit_x", "=", "x", "\n", "\n", "# Log-determinant of Jacobian from the transform", "\n", "pre_logit_scale", "=", "torch", ".", "tensor", "(", "log", "(", "constraint", ")", "-", "log", "(", "1", "-", "constraint", ")", ")", "\n", "ldj", "=", "(", "F", ".", "softplus", "(", "logit_x", ")", "+", "F", ".", "softplus", "(", "-", "logit_x", ")", "-", "\n", "F", ".", "softplus", "(", "-", "pre_logit_scale", ")", ")", "\n", "ldj", "=", "ldj", ".", "view", "(", "ldj", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "# Inverse logit transform", "\n", "x", "=", "1", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "logit_x", ")", ")", "# [0.05, 0.95]", "\n", "\n", "# Unrestrict data", "\n", "x", "*=", "2", "# [0.1, 1.9]", "\n", "x", "-=", "1", "# [-0.9, 0.9]", "\n", "x", "/=", "constraint", "# [-1, 1]", "\n", "x", "+=", "1", "# [0, 2]", "\n", "x", "/=", "2", "# [0, 1]", "\n", "\n", "return", "x", ",", "ldj", "\n", "\n", "", "else", ":", "\n", "        ", "if", "dequant", ":", "\n", "# Dequantization", "\n", "            ", "noise", "=", "torch", ".", "rand_like", "(", "x", ")", "\n", "x", "=", "(", "x", "*", "255", "+", "noise", ")", "/", "256", "\n", "\n", "# Restrict data", "\n", "", "x", "*=", "2", "# [0, 2]", "\n", "x", "-=", "1", "# [-1, 1]", "\n", "x", "*=", "constraint", "# [-0.9, 0.9]", "\n", "x", "+=", "1", "# [0.1, 1.9]", "\n", "x", "/=", "2", "# [0.05, 0.95]", "\n", "\n", "# Logit transform", "\n", "logit_x", "=", "torch", ".", "log", "(", "x", ")", "-", "torch", ".", "log", "(", "1", "-", "x", ")", "\n", "\n", "# Log-determinant of Jacobian from the transform", "\n", "pre_logit_scale", "=", "torch", ".", "tensor", "(", "log", "(", "constraint", ")", "-", "log", "(", "1", "-", "constraint", ")", ")", "\n", "ldj", "=", "(", "F", ".", "softplus", "(", "logit_x", ")", "+", "F", ".", "softplus", "(", "-", "logit_x", ")", "-", "\n", "F", ".", "softplus", "(", "-", "pre_logit_scale", ")", ")", "\n", "ldj", "=", "ldj", ".", "view", "(", "ldj", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "return", "logit_x", ",", "ldj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.im2col.dispatch": [[4, 10], ["x[].reshape"], "function", ["None"], ["def", "dispatch", "(", "i", ",", "j", ",", "x", ")", ":", "\n", "# i, j are indices of elements being processed", "\n", "# dim(i) = (num_RG_blocks, K*K)", "\n", "# dim(x_) = (B, C, num_RG_blocks, K*K)", "\n", "    ", "x_", "=", "x", "[", ":", ",", ":", ",", "i", ",", "j", "]", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "i", ".", "shape", "[", "0", "]", ",", "i", ".", "shape", "[", "1", "]", ")", "\n", "return", "x", ",", "x_", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.im2col.collect": [[12, 16], ["x.clone.clone", "x_.reshape"], "function", ["None"], ["", "def", "collect", "(", "i", ",", "j", ",", "x", ",", "x_", ")", ":", "\n", "    ", "x", "=", "x", ".", "clone", "(", ")", "\n", "x", "[", ":", ",", ":", ",", "i", ",", "j", "]", "=", "x_", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "i", ".", "shape", "[", "0", "]", ",", "i", ".", "shape", "[", "1", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.im2col.stackRGblock": [[18, 28], ["int", "x.reshape.permute", "x.reshape.reshape", "math.sqrt"], "function", ["None"], ["", "def", "stackRGblock", "(", "x", ")", ":", "\n", "# x should be dispatched", "\n", "# dim(x) = (B, C, num_RG_blocks, K*K)", "\n", "# -> (B, num_RG_blocks, C, K*K)", "\n", "# -> (B*num_RG_blocks, C, K, K)", "\n", "    ", "_", ",", "C", ",", "_", ",", "KK", "=", "x", ".", "shape", "\n", "K", "=", "int", "(", "sqrt", "(", "KK", ")", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "C", ",", "K", ",", "K", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.im2col.unstackRGblock": [[30, 38], ["x.permute.reshape", "x.permute.permute"], "function", ["None"], ["", "def", "unstackRGblock", "(", "x", ",", "batch_size", ")", ":", "\n", "# dim(x) = (B*num_RG_blocks, C, K, K)", "\n", "# -> (B, num_RG_blocks, C, K*K)", "\n", "# -> (B, C, num_RG_blocks, K*K)", "\n", "    ", "_", ",", "C", ",", "KH", ",", "KW", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "C", ",", "KH", "*", "KW", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.DataParallelWrapper.__init__": [[111, 116], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "default_func_name", "=", "'forward'", "\n", "self", ".", "func_name", "=", "self", ".", "default_func_name", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.DataParallelWrapper.forward": [[117, 119], ["getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "net", ",", "self", ".", "func_name", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.check_nan": [[14, 17], ["torch.isnan().sum().item", "torch.isnan().sum", "torch.isnan"], "function", ["None"], ["def", "check_nan", "(", "x", ")", ":", "\n", "    ", "assert", "torch", ".", "isnan", "(", "x", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "0", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.ensure_dir": [[19, 26], ["os.path.dirname", "os.makedirs", "args.args.out_filename"], "function", ["None"], ["", "def", "ensure_dir", "(", "filename", ")", ":", "\n", "    ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "filename", ")", "\n", "if", "dirname", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.init_out_dir": [[28, 34], ["__init__.ensure_dir", "__init__.ensure_dir"], "function", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.ensure_dir", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.ensure_dir"], ["", "", "", "def", "init_out_dir", "(", ")", ":", "\n", "    ", "if", "not", "args", ".", "out_filename", ":", "\n", "        ", "return", "\n", "", "ensure_dir", "(", "args", ".", "out_filename", ")", "\n", "if", "args", ".", "save_epoch", ":", "\n", "        ", "ensure_dir", "(", "args", ".", "out_filename", "+", "'_save/'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.clear_log": [[36, 39], ["open().close", "open"], "function", ["None"], ["", "", "def", "clear_log", "(", ")", ":", "\n", "    ", "if", "args", ".", "out_filename", ":", "\n", "        ", "open", "(", "args", ".", "out_filename", "+", "'.log'", ",", "'w'", ")", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.my_log": [[41, 47], ["print", "open", "f.write"], "function", ["None"], ["", "", "def", "my_log", "(", "s", ")", ":", "\n", "    ", "if", "args", ".", "out_filename", ":", "\n", "        ", "with", "open", "(", "args", ".", "out_filename", "+", "'.log'", ",", "'a'", ",", "newline", "=", "'\\n'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "s", "+", "'\\n'", ")", "\n", "", "", "if", "not", "args", ".", "no_stdout", ":", "\n", "        ", "print", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.print_args": [[49, 53], ["args.args._get_kwargs", "print_fn", "print_fn"], "function", ["None"], ["", "", "def", "print_args", "(", "print_fn", "=", "my_log", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "args", ".", "_get_kwargs", "(", ")", ":", "\n", "        ", "print_fn", "(", "f'{k} = {v}'", ")", "\n", "", "print_fn", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.parse_checkpoint_name": [[55, 60], ["os.path.basename", "filename.replace.replace", "int"], "function", ["None"], ["", "def", "parse_checkpoint_name", "(", "filename", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "filename", "=", "filename", ".", "replace", "(", "'.state'", ",", "''", ")", "\n", "step", "=", "int", "(", "filename", ")", "\n", "return", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.get_last_checkpoint_step": [[62, 70], ["glob.glob", "max", "__init__.parse_checkpoint_name"], "function", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.parse_checkpoint_name"], ["", "def", "get_last_checkpoint_step", "(", ")", ":", "\n", "    ", "if", "not", "(", "args", ".", "out_filename", "and", "args", ".", "save_epoch", ")", ":", "\n", "        ", "return", "-", "1", "\n", "", "filename_list", "=", "glob", "(", "f'{args.out_filename}_save/*.state'", ")", "\n", "if", "not", "filename_list", ":", "\n", "        ", "return", "-", "1", "\n", "", "step", "=", "max", "(", "parse_checkpoint_name", "(", "x", ")", "for", "x", "in", "filename_list", ")", "\n", "return", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.load_checkpoint": [[72, 96], ["torch.load", "torch.load.get", "list", "isinstance", "flow.load_state_dict", "flow_state.keys", "torch.load.get", "optimizer.load_state_dict", "key.startswith", "key.startswith"], "function", ["None"], ["", "def", "load_checkpoint", "(", "epoch", ",", "flow", ",", "optimizer", "=", "None", ")", ":", "\n", "    ", "state", "=", "torch", ".", "load", "(", "f'{args.out_filename}_save/{epoch}.state'", ",", "\n", "map_location", "=", "args", ".", "device", ")", "\n", "\n", "if", "state", ".", "get", "(", "'flow'", ")", ":", "\n", "        ", "flow_state", "=", "state", "[", "'flow'", "]", "\n", "", "else", ":", "\n", "        ", "flow_state", "=", "state", "\n", "\n", "", "keys", "=", "list", "(", "flow_state", ".", "keys", "(", ")", ")", "\n", "if", "isinstance", "(", "flow", ",", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "for", "key", "in", "keys", ":", "\n", "            ", "if", "not", "key", ".", "startswith", "(", "'module.net.'", ")", ":", "\n", "                ", "flow_state", "[", "'module.net.'", "+", "key", "]", "=", "flow_state", "[", "key", "]", "\n", "", "", "", "else", ":", "\n", "        ", "for", "key", "in", "keys", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'module.net.'", ")", ":", "\n", "                ", "flow_state", "[", "key", "[", "11", ":", "]", "]", "=", "flow_state", "[", "key", "]", "\n", "\n", "", "", "", "flow", ".", "load_state_dict", "(", "flow_state", ",", "strict", "=", "False", ")", "\n", "\n", "if", "optimizer", "is", "not", "None", "and", "state", ".", "get", "(", "'optimizer'", ")", ":", "\n", "# Learning rate is not saved in the state", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "state", "[", "'optimizer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.clip": [[98, 102], ["x.clone.clone", "x.clone.abs"], "function", ["None"], ["", "", "def", "clip", "(", "x", ",", "threshold", "=", "1e-4", ")", ":", "\n", "    ", "x", "=", "x", ".", "clone", "(", ")", "\n", "x", "[", "x", ".", "abs", "(", ")", "<", "threshold", "]", "=", "0", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.get_nparams": [[104, 107], ["sum", "int", "numpy.prod", "net.parameters"], "function", ["None"], ["", "def", "get_nparams", "(", "net", ")", ":", "\n", "    ", "return", "sum", "(", "\n", "int", "(", "np", ".", "prod", "(", "p", ".", "shape", ")", ")", "for", "p", "in", "net", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.__init__.data_parallel_wrap": [[121, 138], ["torch.nn.DataParallel", "__init__.data_parallel_wrap.wrap_func"], "function", ["None"], ["", "", "def", "data_parallel_wrap", "(", "net", ")", ":", "\n", "    ", "net", "=", "nn", ".", "DataParallel", "(", "DataParallelWrapper", "(", "net", ")", ")", "\n", "wrapper", "=", "net", ".", "module", "\n", "\n", "def", "wrap_func", "(", "func_name", ")", ":", "\n", "        ", "def", "func", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "wrapper", ".", "func_name", "=", "func_name", "\n", "out", "=", "net", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "wrapper", ".", "func_name", "=", "wrapper", ".", "default_func_name", "\n", "return", "out", "\n", "\n", "", "return", "func", "\n", "\n", "", "net", ".", "sample", "=", "wrap_func", "(", "'sample'", ")", "\n", "net", ".", "log_prob", "=", "wrap_func", "(", "'log_prob'", ")", "\n", "\n", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.swish.Swish.__init__": [[6, 10], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.swish.Swish.forward": [[11, 13], ["torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "self", ".", "scale", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.swish.Swish.extra_repr": [[14, 16], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "(", "f'num_features={self.num_features}'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.masked_resnet.MaskedLinear.__init__": [[16, 28], ["torch.nn.Linear.__init__", "torch.ones", "torch.cat", "torch.cat", "masked_resnet.MaskedLinear.register_buffer", "torch.tril", "torch.triu"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "width", ",", "bias", ",", "exclusive", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", "*", "width", ",", "out_channels", "*", "width", ",", "bias", ")", "\n", "self", ".", "exclusive", "=", "exclusive", "\n", "\n", "mask", "=", "torch", ".", "ones", "(", "[", "width", "]", "*", "2", ")", "\n", "if", "self", ".", "exclusive", ":", "\n", "            ", "mask", "=", "1", "-", "torch", ".", "triu", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "torch", ".", "tril", "(", "mask", ")", "\n", "", "mask", "=", "torch", ".", "cat", "(", "[", "mask", "]", "*", "in_channels", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "[", "mask", "]", "*", "out_channels", ",", "dim", "=", "0", ")", "\n", "self", ".", "register_buffer", "(", "'mask'", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.masked_resnet.MaskedLinear.forward": [[29, 31], ["torch.nn.functional.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "linear", "(", "x", ",", "self", ".", "mask", "*", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.masked_resnet.MaskedLinear.extra_repr": [[32, 35], ["super().extra_repr"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.scale.Scale.extra_repr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "(", "super", "(", ")", ".", "extra_repr", "(", ")", "+", "\n", "', exclusive={exclusive}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.masked_resnet.MaskedResNet.__init__": [[38, 58], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "scale.Scale", "torch.nn.Tanh", "masked_resnet.MaskedResNet.build_res_block", "range"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.resnet.ResNet.build_res_block"], ["    ", "def", "__init__", "(", "self", ",", "num_res_blocks", ",", "channels", ",", "width", ",", "final_scale", ",", "\n", "final_tanh", ")", ":", "\n", "        ", "assert", "channels", "[", "0", "]", "==", "channels", "[", "-", "1", "]", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "res_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "self", ".", "build_res_block", "(", "channels", ",", "width", ")", "\n", "for", "_", "in", "range", "(", "num_res_blocks", ")", "\n", "]", ")", "\n", "\n", "if", "final_scale", ":", "\n", "            ", "self", ".", "scale", "=", "Scale", "(", "channels", "[", "-", "1", "]", "*", "width", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale", "=", "None", "\n", "\n", "", "if", "final_tanh", ":", "\n", "            ", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tanh", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.masked_resnet.MaskedResNet.build_linear": [[59, 83], ["masked_resnet.MaskedLinear", "math.sqrt", "torch.nn.init.uniform_", "torch.sqrt", "torch.nn.init.zeros_", "MaskedLinear.mask.mean"], "methods", ["None"], ["", "", "def", "build_linear", "(", "self", ",", "in_channels", ",", "out_channels", ",", "width", ",", "exclusive", ")", ":", "\n", "        ", "linear", "=", "MaskedLinear", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "width", ",", "\n", "bias", "=", "True", ",", "\n", "exclusive", "=", "exclusive", ")", "\n", "\n", "# 2.81 is the gain for swish", "\n", "bound", "=", "sqrt", "(", "2.81", "*", "3", "/", "(", "in_channels", "*", "width", ")", ")", "\n", "init", ".", "uniform_", "(", "linear", ".", "weight", ",", "-", "bound", ",", "bound", ")", "\n", "\n", "# Correction to Xavier initialization", "\n", "# We cannot make a row in weight to be all 0,", "\n", "# otherwise weight_norm() will produce nan", "\n", "linear", ".", "weight", ".", "data", "*=", "torch", ".", "sqrt", "(", "\n", "(", "linear", ".", "mask", "+", "1e-7", ")", "/", "\n", "(", "linear", ".", "mask", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-7", ")", ")", "\n", "\n", "init", ".", "zeros_", "(", "linear", ".", "bias", ")", "\n", "\n", "# TODO: weight norm with mask", "\n", "# linear = weight_norm(linear)", "\n", "\n", "return", "linear", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.masked_resnet.MaskedResNet.build_res_block": [[84, 94], ["range", "torch.nn.Sequential", "layers.append", "layers.append", "len", "swish.Swish", "masked_resnet.MaskedResNet.build_linear"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.resnet.ResNet.build_linear"], ["", "def", "build_res_block", "(", "self", ",", "channels", ",", "width", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "channels", ")", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Swish", "(", "channels", "[", "i", "]", "*", "width", ")", ")", "\n", "layers", ".", "append", "(", "\n", "self", ".", "build_linear", "(", "channels", "[", "i", "]", ",", "\n", "channels", "[", "i", "+", "1", "]", ",", "\n", "width", ",", "\n", "exclusive", "=", "(", "i", "==", "0", ")", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.masked_resnet.MaskedResNet.forward": [[95, 103], ["masked_resnet.MaskedResNet.scale", "masked_resnet.MaskedResNet.tanh", "math.sqrt", "res_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "res_block", "in", "self", ".", "res_blocks", ":", "\n", "            ", "x", "=", "(", "x", "+", "res_block", "(", "x", ")", ")", "/", "sqrt", "(", "2", ")", "\n", "", "if", "self", ".", "scale", ":", "\n", "            ", "x", "=", "self", ".", "scale", "(", "x", ")", "\n", "", "if", "self", ".", "tanh", ":", "\n", "            ", "x", "=", "self", ".", "tanh", "(", "x", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.scale.Scale.__init__": [[6, 15], ["torch.nn.Module.__init__", "torch.nn.Parameter", "scale.Scale.register_buffer", "scale.Scale.register_buffer", "torch.zeros", "torch.zeros", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "# Zero init to avoid value explosion", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "\n", "# For debug", "\n", "self", ".", "register_buffer", "(", "'saved_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'saved_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.scale.Scale.forward": [[16, 21], ["torch.no_grad", "x.mean", "x.var"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "saved_mean", "=", "x", ".", "mean", "(", "dim", "=", "0", ")", "\n", "self", ".", "saved_var", "=", "x", ".", "var", "(", "dim", "=", "0", ")", "\n", "", "return", "self", ".", "scale", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.scale.Scale.extra_repr": [[22, 24], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "(", "f'num_features={self.num_features}'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.mera.MERA.__init__": [[39, 42], ["mera.mera_indices", "hierarchy.HierarchyBijector.__init__"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.mera.mera_indices", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layers", ",", "L", ",", "kernel_size", ",", "prior", "=", "None", ")", ":", "\n", "        ", "indexI", ",", "indexJ", "=", "mera_indices", "(", "L", ",", "kernel_size", ")", "\n", "super", "(", ")", ".", "__init__", "(", "indexI", ",", "indexJ", ",", "layers", ",", "prior", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.mera.get_indices": [[8, 21], ["numpy.repeat", "numpy.tile", "numpy.repeat", "numpy.tile", "np.repeat.reshape", "i1.reshape", "np.tile.reshape", "j1.reshape", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "i.transpose", "j.transpose"], "function", ["None"], ["def", "get_indices", "(", "shape", ",", "height", ",", "width", ",", "stride", ",", "dialation", ",", "offset", ")", ":", "\n", "    ", "H", ",", "W", "=", "shape", "\n", "out_height", "=", "(", "H", "-", "dialation", "*", "(", "height", "-", "1", ")", "-", "1", ")", "//", "stride", "+", "1", "\n", "out_width", "=", "(", "W", "-", "dialation", "*", "(", "width", "-", "1", ")", "-", "1", ")", "//", "stride", "+", "1", "\n", "\n", "i0", "=", "np", ".", "repeat", "(", "np", ".", "arange", "(", "height", ")", "*", "dialation", ",", "width", ")", "\n", "i1", "=", "stride", "*", "np", ".", "repeat", "(", "np", ".", "arange", "(", "out_height", ")", ",", "out_width", ")", "\n", "j0", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "width", ")", "*", "dialation", ",", "height", ")", "\n", "j1", "=", "stride", "*", "np", ".", "tile", "(", "np", ".", "arange", "(", "out_width", ")", ",", "out_height", ")", "\n", "i", "=", "i0", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "i1", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "j", "=", "j0", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "j1", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "return", "(", "i", ".", "transpose", "(", "1", ",", "0", ")", "+", "offset", ")", "%", "H", ",", "(", "j", ".", "transpose", "(", "1", ",", "0", ")", "+", "offset", ")", "%", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.mera.mera_indices": [[23, 36], ["int", "range", "index_list.append", "index_list.append", "math.log", "mera.get_indices", "mera.get_indices"], "function", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.mera.get_indices", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.mera.get_indices"], ["", "def", "mera_indices", "(", "L", ",", "kernel_size", ")", ":", "\n", "    ", "index_list", "=", "[", "]", "\n", "depth", "=", "int", "(", "log", "(", "L", "/", "kernel_size", ",", "2", ")", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "        ", "index_list", ".", "append", "(", "\n", "get_indices", "(", "[", "L", ",", "L", "]", ",", "kernel_size", ",", "kernel_size", ",", "kernel_size", "*", "2", "**", "i", ",", "\n", "2", "**", "i", ",", "0", ")", ")", "\n", "index_list", ".", "append", "(", "\n", "get_indices", "(", "[", "L", ",", "L", "]", ",", "kernel_size", ",", "kernel_size", ",", "kernel_size", "*", "2", "**", "i", ",", "\n", "2", "**", "i", ",", "kernel_size", "*", "2", "**", "i", "//", "2", ")", ")", "\n", "", "indexI", "=", "[", "item", "[", "0", "]", "for", "item", "in", "index_list", "]", "\n", "indexJ", "=", "[", "item", "[", "1", "]", "for", "item", "in", "index_list", "]", "\n", "return", "indexI", ",", "indexJ", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.hierarchy.HierarchyBijector.__init__": [[9, 16], ["flow.Flow.__init__", "torch.nn.ModuleList", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__"], ["    ", "def", "__init__", "(", "self", ",", "indexI", ",", "indexJ", ",", "layers", ",", "prior", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "prior", ")", "\n", "assert", "len", "(", "layers", ")", "==", "len", "(", "indexI", ")", "\n", "assert", "len", "(", "layers", ")", "==", "len", "(", "indexJ", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "self", ".", "indexI", "=", "indexI", "\n", "self", ".", "indexJ", "=", "indexJ", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.hierarchy.HierarchyBijector.forward": [[17, 35], ["utils.collect.new_zeros", "zip", "utils.dispatch", "utils.stackRGblock", "layer.forward", "utils.unstackRGblock", "utils.collect", "log_prob.view().sum", "log_prob.view"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.im2col.dispatch", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.im2col.stackRGblock", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.flow.Flow.forward", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.im2col.unstackRGblock", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.im2col.collect"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# dim(x) = (B, C, H, W)", "\n", "        ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "ldj", "=", "x", ".", "new_zeros", "(", "batch_size", ")", "\n", "for", "layer", ",", "indexI", ",", "indexJ", "in", "zip", "(", "self", ".", "layers", ",", "self", ".", "indexI", ",", "\n", "self", ".", "indexJ", ")", ":", "\n", "            ", "x", ",", "x_", "=", "utils", ".", "dispatch", "(", "indexI", ",", "indexJ", ",", "x", ")", "\n", "# dim(x_) = (B, C, num_RG_blocks, K*K)", "\n", "x_", "=", "utils", ".", "stackRGblock", "(", "x_", ")", "\n", "# dim(x_) = (B*num_RG_blocks, C, K, K)", "\n", "\n", "x_", ",", "log_prob", "=", "layer", ".", "forward", "(", "x_", ")", "\n", "ldj", "=", "ldj", "+", "log_prob", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "x_", "=", "utils", ".", "unstackRGblock", "(", "x_", ",", "batch_size", ")", "\n", "x", "=", "utils", ".", "collect", "(", "indexI", ",", "indexJ", ",", "x", ",", "x_", ")", "\n", "\n", "", "return", "x", ",", "ldj", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.hierarchy.HierarchyBijector.inverse": [[36, 51], ["utils.collect.new_zeros", "reversed", "list", "utils.dispatch", "utils.stackRGblock", "layer.inverse", "utils.unstackRGblock", "utils.collect", "zip", "log_prob.view().sum", "log_prob.view"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.im2col.dispatch", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.im2col.stackRGblock", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.flow.Flow.inverse", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.im2col.unstackRGblock", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.utils.im2col.collect"], ["", "def", "inverse", "(", "self", ",", "z", ")", ":", "\n", "        ", "batch_size", "=", "z", ".", "shape", "[", "0", "]", "\n", "inv_ldj", "=", "z", ".", "new_zeros", "(", "batch_size", ")", "\n", "for", "layer", ",", "indexI", ",", "indexJ", "in", "reversed", "(", "\n", "list", "(", "zip", "(", "self", ".", "layers", ",", "self", ".", "indexI", ",", "self", ".", "indexJ", ")", ")", ")", ":", "\n", "            ", "z", ",", "z_", "=", "utils", ".", "dispatch", "(", "indexI", ",", "indexJ", ",", "z", ")", "\n", "z_", "=", "utils", ".", "stackRGblock", "(", "z_", ")", "\n", "\n", "z_", ",", "log_prob", "=", "layer", ".", "inverse", "(", "z_", ")", "\n", "inv_ldj", "=", "inv_ldj", "+", "log_prob", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "z_", "=", "utils", ".", "unstackRGblock", "(", "z_", ",", "batch_size", ")", "\n", "z", "=", "utils", ".", "collect", "(", "indexI", ",", "indexJ", ",", "z", ",", "z_", ")", "\n", "\n", "", "return", "z", ",", "inv_ldj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.resnet.ResNet.__init__": [[12, 29], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "scale.Scale", "torch.nn.Tanh", "resnet.ResNet.build_res_block", "range"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.resnet.ResNet.build_res_block"], ["    ", "def", "__init__", "(", "self", ",", "num_res_blocks", ",", "widths", ",", "final_scale", ",", "final_tanh", ")", ":", "\n", "        ", "assert", "widths", "[", "0", "]", "==", "widths", "[", "-", "1", "]", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "res_blocks", "=", "nn", ".", "ModuleList", "(", "\n", "[", "self", ".", "build_res_block", "(", "widths", ")", "for", "_", "in", "range", "(", "num_res_blocks", ")", "]", ")", "\n", "\n", "if", "final_scale", ":", "\n", "            ", "self", ".", "scale", "=", "Scale", "(", "widths", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale", "=", "None", "\n", "\n", "", "if", "final_tanh", ":", "\n", "            ", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tanh", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.resnet.ResNet.build_linear": [[30, 38], ["torch.nn.Linear", "math.sqrt", "torch.nn.init.uniform_", "torch.nn.init.zeros_", "torch.nn.utils.weight_norm"], "methods", ["None"], ["", "", "def", "build_linear", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "linear", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "# 2.81 is the gain for swish", "\n", "bound", "=", "sqrt", "(", "2.81", "*", "3", "/", "in_features", ")", "\n", "init", ".", "uniform_", "(", "linear", ".", "weight", ",", "-", "bound", ",", "bound", ")", "\n", "init", ".", "zeros_", "(", "linear", ".", "bias", ")", "\n", "linear", "=", "weight_norm", "(", "linear", ")", "\n", "return", "linear", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.resnet.ResNet.build_res_block": [[39, 45], ["range", "torch.nn.Sequential", "layers.append", "layers.append", "len", "swish.Swish", "resnet.ResNet.build_linear"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.resnet.ResNet.build_linear"], ["", "def", "build_res_block", "(", "self", ",", "widths", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "widths", ")", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Swish", "(", "widths", "[", "i", "]", ")", ")", "\n", "layers", ".", "append", "(", "self", ".", "build_linear", "(", "widths", "[", "i", "]", ",", "widths", "[", "i", "+", "1", "]", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.resnet.ResNet.forward": [[46, 54], ["resnet.ResNet.scale", "resnet.ResNet.tanh", "math.sqrt", "res_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "res_block", "in", "self", ".", "res_blocks", ":", "\n", "            ", "x", "=", "(", "x", "+", "res_block", "(", "x", ")", ")", "/", "sqrt", "(", "2", ")", "\n", "", "if", "self", ".", "scale", ":", "\n", "            ", "x", "=", "self", ".", "scale", "(", "x", ")", "\n", "", "if", "self", ".", "tanh", ":", "\n", "            ", "x", "=", "self", ".", "tanh", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.resnet.ResNetReshape.__init__": [[57, 59], ["resnet.ResNet.__init__"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.resnet.ResNetReshape.forward": [[60, 66], ["x.view.view.view", "resnet.ResNet.forward", "x.view.view.view"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.flow.Flow.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shape", "=", "x", ".", "shape", "# (B*num_RG_blocks, C, K, K)", "\n", "x", "=", "x", ".", "view", "(", "shape", "[", "0", "]", ",", "-", "1", ")", "# (B*num_RG_blocks, C*K*K)", "\n", "x", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "shape", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.rnvp.RNVP.__init__": [[26, 40], ["flow.Flow.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "rnvp.generate_masks", "rnvp.RNVP.register_buffer", "rnvp.RNVP.register_buffer", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.rnvp.generate_masks"], ["    ", "def", "__init__", "(", "self", ",", "\n", "s_layers", ",", "\n", "t_layers", ",", "\n", "num_channels", ",", "\n", "kernel_size", ",", "\n", "prior", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "prior", ")", "\n", "assert", "len", "(", "s_layers", ")", "==", "len", "(", "t_layers", ")", "\n", "self", ".", "s_layers", "=", "nn", ".", "ModuleList", "(", "s_layers", ")", "\n", "self", ".", "t_layers", "=", "nn", ".", "ModuleList", "(", "t_layers", ")", "\n", "\n", "mask_left", ",", "mask_right", "=", "generate_masks", "(", "num_channels", ",", "kernel_size", ")", "\n", "self", ".", "register_buffer", "(", "'mask_left'", ",", "mask_left", ")", "\n", "self", ".", "register_buffer", "(", "'mask_right'", ",", "mask_right", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.rnvp.RNVP._forward": [[41, 49], ["s.sum", "rnvp.my_checkpoint", "rnvp.my_checkpoint", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.rnvp.my_checkpoint", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.rnvp.my_checkpoint"], ["", "def", "_forward", "(", "self", ",", "x", ",", "s_layer", ",", "t_layer", ",", "mask", ",", "inv_mask", ")", ":", "\n", "# x.shape = (B, C, W, H)", "\n", "        ", "mask_x", "=", "mask", "*", "x", "\n", "s", "=", "inv_mask", "*", "my_checkpoint", "(", "self", ",", "s_layer", ",", "mask_x", ")", "\n", "t", "=", "inv_mask", "*", "my_checkpoint", "(", "self", ",", "t_layer", ",", "mask_x", ")", "\n", "z", "=", "mask_x", "+", "inv_mask", "*", "(", "x", "*", "torch", ".", "exp", "(", "s", ")", "+", "t", ")", "\n", "ldj", "=", "s", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "return", "z", ",", "ldj", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.rnvp.RNVP._inverse": [[50, 58], ["s_layer", "t_layer", "s.sum", "torch.exp"], "methods", ["None"], ["", "def", "_inverse", "(", "self", ",", "z", ",", "s_layer", ",", "t_layer", ",", "mask", ",", "inv_mask", ")", ":", "\n", "# z.shape = (B, C, W, H)", "\n", "        ", "mask_z", "=", "mask", "*", "z", "\n", "s", "=", "inv_mask", "*", "s_layer", "(", "mask_z", ")", "\n", "t", "=", "inv_mask", "*", "t_layer", "(", "mask_z", ")", "\n", "x", "=", "mask_z", "+", "inv_mask", "*", "(", "z", "-", "t", ")", "*", "torch", ".", "exp", "(", "-", "s", ")", "\n", "inv_ldj", "=", "-", "s", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "return", "x", ",", "inv_ldj", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.rnvp.RNVP.forward": [[60, 70], ["x.new_zeros", "zip", "rnvp.RNVP._forward", "rnvp.RNVP._forward"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.rnvp.RNVP._forward", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.rnvp.RNVP._forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ldj", "=", "x", ".", "new_zeros", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "for", "s_layer", ",", "t_layer", "in", "zip", "(", "self", ".", "s_layers", ",", "self", ".", "t_layers", ")", ":", "\n", "            ", "x", ",", "ldj_", "=", "self", ".", "_forward", "(", "x", ",", "s_layer", ",", "t_layer", ",", "self", ".", "mask_left", ",", "\n", "self", ".", "mask_right", ")", "\n", "ldj", "=", "ldj", "+", "ldj_", "\n", "x", ",", "ldj_", "=", "self", ".", "_forward", "(", "x", ",", "s_layer", ",", "t_layer", ",", "self", ".", "mask_right", ",", "\n", "self", ".", "mask_left", ")", "\n", "ldj", "=", "ldj", "+", "ldj_", "\n", "", "return", "x", ",", "ldj", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.rnvp.RNVP.inverse": [[71, 82], ["z.new_zeros", "reversed", "list", "rnvp.RNVP._inverse", "rnvp.RNVP._inverse", "zip"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.rnvp.RNVP._inverse", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.rnvp.RNVP._inverse"], ["", "def", "inverse", "(", "self", ",", "z", ")", ":", "\n", "        ", "inv_ldj", "=", "z", ".", "new_zeros", "(", "z", ".", "shape", "[", "0", "]", ")", "\n", "for", "s_layer", ",", "t_layer", "in", "reversed", "(", "\n", "list", "(", "zip", "(", "self", ".", "s_layers", ",", "self", ".", "t_layers", ")", ")", ")", ":", "\n", "            ", "z", ",", "inv_ldj_", "=", "self", ".", "_inverse", "(", "z", ",", "s_layer", ",", "t_layer", ",", "self", ".", "mask_right", ",", "\n", "self", ".", "mask_left", ")", "\n", "inv_ldj", "=", "inv_ldj", "+", "inv_ldj_", "\n", "z", ",", "inv_ldj_", "=", "self", ".", "_inverse", "(", "z", ",", "s_layer", ",", "t_layer", ",", "self", ".", "mask_left", ",", "\n", "self", ".", "mask_right", ")", "\n", "inv_ldj", "=", "inv_ldj", "+", "inv_ldj_", "\n", "", "return", "z", ",", "inv_ldj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.rnvp.my_checkpoint": [[10, 15], ["torch.utils.checkpoint.checkpoint", "func"], "function", ["None"], ["def", "my_checkpoint", "(", "module", ",", "func", ",", "x", ")", ":", "\n", "    ", "if", "module", ".", "training", "and", "x", ".", "requires_grad", ":", "\n", "        ", "return", "checkpoint", "(", "func", ",", "x", ",", "preserve_rng_state", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "return", "func", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.rnvp.generate_masks": [[17, 23], ["torch.zeros", "torch.ones_like"], "function", ["None"], ["", "", "def", "generate_masks", "(", "num_channels", ",", "kernel_size", ")", ":", "\n", "    ", "left", "=", "torch", ".", "zeros", "(", "[", "num_channels", ",", "kernel_size", ",", "kernel_size", "]", ")", "\n", "left", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "=", "1", "\n", "left", "[", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", "=", "1", "\n", "right", "=", "torch", ".", "ones_like", "(", "left", ")", "-", "left", "\n", "return", "left", ",", "right", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.arflow.ARFlow.__init__": [[11, 16], ["flow.Flow.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__"], ["    ", "def", "__init__", "(", "self", ",", "s_layers", ",", "t_layers", ",", "prior", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "prior", ")", "\n", "assert", "len", "(", "s_layers", ")", "==", "len", "(", "t_layers", ")", "\n", "self", ".", "s_layers", "=", "nn", ".", "ModuleList", "(", "s_layers", ")", "\n", "self", ".", "t_layers", "=", "nn", ".", "ModuleList", "(", "t_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.arflow.ARFlow.forward": [[17, 27], ["x.new_zeros", "zip", "s_layer", "t_layer", "s_layer.sum", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x.shape = (B, C*W*H)", "\n", "        ", "ldj", "=", "x", ".", "new_zeros", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "for", "s_layer", ",", "t_layer", "in", "zip", "(", "self", ".", "s_layers", ",", "self", ".", "t_layers", ")", ":", "\n", "            ", "s", "=", "s_layer", "(", "x", ")", "\n", "t", "=", "t_layer", "(", "x", ")", "\n", "x", "=", "x", "*", "torch", ".", "exp", "(", "s", ")", "+", "t", "\n", "ldj_", "=", "s", ".", "sum", "(", "dim", "=", "1", ")", "\n", "ldj", "=", "ldj", "+", "ldj_", "\n", "", "return", "x", ",", "ldj", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.arflow.ARFlow.inverse": [[28, 45], ["z.new_zeros", "reversed", "list", "torch.zeros_like", "range", "zip", "s_layer", "t_layer", "s_layer.sum", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "inverse", "(", "self", ",", "z", ")", ":", "\n", "# z.shape = (B, C*W*H)", "\n", "        ", "core_size", "=", "z", ".", "shape", "[", "1", "]", "\n", "inv_ldj", "=", "z", ".", "new_zeros", "(", "z", ".", "shape", "[", "0", "]", ")", "\n", "for", "s_layer", ",", "t_layer", "in", "reversed", "(", "\n", "list", "(", "zip", "(", "self", ".", "s_layers", ",", "self", ".", "t_layers", ")", ")", ")", ":", "\n", "            ", "mask_z", "=", "torch", ".", "zeros_like", "(", "z", ")", "\n", "for", "i", "in", "range", "(", "core_size", ")", ":", "\n", "                ", "s", "=", "s_layer", "(", "mask_z", ")", "\n", "t", "=", "t_layer", "(", "mask_z", ")", "\n", "if", "i", "==", "core_size", "-", "1", ":", "\n", "                    ", "z", "=", "(", "z", "-", "t", ")", "*", "torch", ".", "exp", "(", "-", "s", ")", "\n", "", "else", ":", "\n", "                    ", "mask_z", "[", ":", ",", "i", "]", "=", "(", "z", "[", ":", ",", "i", "]", "-", "t", "[", ":", ",", "i", "]", ")", "*", "torch", ".", "exp", "(", "-", "s", "[", ":", ",", "i", "]", ")", "\n", "", "", "inv_ldj_", "=", "-", "s", ".", "sum", "(", "dim", "=", "1", ")", "\n", "inv_ldj", "=", "inv_ldj", "+", "inv_ldj_", "\n", "", "return", "z", ",", "inv_ldj", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.arflow.ARFlowReshape.__init__": [[48, 50], ["arflow.ARFlow.__init__"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.arflow.ARFlowReshape.forward": [[51, 57], ["x.view.view.view", "arflow.ARFlow.forward", "z.view.view.view"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.flow.Flow.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shape", "=", "x", ".", "shape", "# (B*num_RG_blocks, C, K, K)", "\n", "x", "=", "x", ".", "view", "(", "shape", "[", "0", "]", ",", "-", "1", ")", "# (B*num_RG_blocks, C*K*K)", "\n", "z", ",", "ldj", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "z", "=", "z", ".", "view", "(", "shape", ")", "\n", "return", "z", ",", "ldj", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.arflow.ARFlowReshape.inverse": [[58, 64], ["z.view.view.view", "arflow.ARFlow.forward", "x.view.view.view"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.flow.Flow.forward"], ["", "def", "inverse", "(", "self", ",", "z", ")", ":", "\n", "        ", "shape", "=", "z", ".", "shape", "# (B*num_RG_blocks, C, K, K)", "\n", "z", "=", "z", ".", "view", "(", "shape", "[", "0", "]", ",", "-", "1", ")", "# (B*num_RG_blocks, C*K*K)", "\n", "x", ",", "inv_ldj", "=", "super", "(", ")", ".", "forward", "(", "z", ")", "\n", "x", "=", "x", ".", "view", "(", "shape", ")", "\n", "return", "x", ",", "inv_ldj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.flow.Flow.__init__": [[5, 8], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__"], ["    ", "def", "__init__", "(", "self", ",", "prior", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prior", "=", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.flow.Flow.forward": [[9, 11], ["NotImplementedError", "str", "type"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "str", "(", "type", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.flow.Flow.inverse": [[12, 14], ["NotImplementedError", "str", "type"], "methods", ["None"], ["", "def", "inverse", "(", "self", ",", "z", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "str", "(", "type", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.flow.Flow.sample": [[15, 23], ["prior.sample", "prior.log_prob", "flow.Flow.inverse"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.sample", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.log_prob", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.flow.Flow.inverse"], ["", "def", "sample", "(", "self", ",", "batch_size", ",", "prior", "=", "None", ")", ":", "\n", "        ", "if", "prior", "is", "None", ":", "\n", "            ", "prior", "=", "self", ".", "prior", "\n", "", "assert", "prior", "is", "not", "None", "\n", "z", "=", "prior", ".", "sample", "(", "batch_size", ")", "\n", "logp", "=", "prior", ".", "log_prob", "(", "z", ")", "\n", "x", ",", "logp_", "=", "self", ".", "inverse", "(", "z", ")", "\n", "return", "x", ",", "logp", "-", "logp_", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.flow.Flow.log_prob": [[24, 29], ["flow.Flow.forward", "flow.Flow.prior.log_prob"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.layers.flow.Flow.forward", "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", ",", "logp", "=", "self", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "prior", "is", "not", "None", ":", "\n", "            ", "logp", "=", "logp", "+", "self", ".", "prior", ".", "log_prob", "(", "z", ")", "\n", "", "return", "logp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.laplace.Laplace.__init__": [[7, 11], ["source.Source.__init__", "laplace.Laplace.register_buffer", "torch.tensor", "torch.get_default_dtype"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nvars", ",", "scale", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "nvars", ")", "\n", "self", ".", "register_buffer", "(", "\n", "'scale'", ",", "torch", ".", "tensor", "(", "scale", ",", "dtype", "=", "torch", ".", "get_default_dtype", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.laplace.Laplace.sample": [[12, 19], ["torch.finfo", "laplace.Laplace.scale.new_empty().uniform_", "torch.log1p", "laplace.Laplace.scale.new_empty", "laplace.Laplace.sign", "laplace.Laplace.abs"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "shape", "=", "[", "batch_size", "]", "+", "self", ".", "nvars", "\n", "# uniform_(a, b) is in [a, b), so we need eps", "\n", "finfo", "=", "torch", ".", "finfo", "(", "self", ".", "scale", ".", "dtype", ")", "\n", "u", "=", "self", ".", "scale", ".", "new_empty", "(", "shape", ")", ".", "uniform_", "(", "finfo", ".", "eps", "-", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "scale", "*", "u", ".", "sign", "(", ")", "*", "torch", ".", "log1p", "(", "-", "u", ".", "abs", "(", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.laplace.Laplace.log_prob": [[20, 24], ["out.view().sum.view().sum.view().sum", "torch.log", "out.view().sum.view().sum.view", "torch.abs"], "methods", ["None"], ["", "def", "log_prob", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "-", "torch", ".", "abs", "(", "x", ")", "/", "self", ".", "scale", "-", "torch", ".", "log", "(", "2", "*", "self", ".", "scale", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.source.Source.__init__": [[5, 8], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nvars", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nvars", "=", "nvars", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.source.Source.sample": [[9, 11], ["NotImplementedError", "str", "type"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "str", "(", "type", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.source.Source.log_prob": [[12, 14], ["NotImplementedError", "str", "type"], "methods", ["None"], ["", "def", "log_prob", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "str", "(", "type", "(", "self", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__": [[9, 13], ["source.Source.__init__", "gaussian.Gaussian.register_buffer", "torch.tensor", "torch.get_default_dtype"], "methods", ["home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nvars", ",", "scale", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "nvars", ")", "\n", "self", ".", "register_buffer", "(", "\n", "'scale'", ",", "torch", ".", "tensor", "(", "scale", ",", "dtype", "=", "torch", ".", "get_default_dtype", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.sample": [[14, 19], ["gaussian.Gaussian.scale.new_empty().normal_", "gaussian.Gaussian.scale.new_empty"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "shape", "=", "[", "batch_size", "]", "+", "self", ".", "nvars", "\n", "out", "=", "self", ".", "scale", ".", "new_empty", "(", "shape", ")", ".", "normal_", "(", ")", "\n", "out", "=", "out", "*", "self", ".", "scale", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyehu_RG-Flow.sources.gaussian.Gaussian.log_prob": [[20, 25], ["out.view().sum.view().sum.view().sum", "torch.log", "math.log", "out.view().sum.view().sum.view"], "methods", ["None"], ["", "def", "log_prob", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "(", "-", "0.5", "*", "(", "x", "/", "self", ".", "scale", ")", "**", "2", "-", "torch", ".", "log", "(", "self", ".", "scale", ")", "-", "\n", "0.5", "*", "log", "(", "2", "*", "pi", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "out", "\n", "", "", ""]]}