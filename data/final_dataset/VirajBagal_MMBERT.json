{"home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.LabelSmoothing.__init__": [[179, 183], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "smoothing", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.LabelSmoothing.forward": [[184, 200], ["x.float.float.float", "target.float.float.float", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.sum.sum.sum", "loss.mean", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "x", "=", "x", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", "*", "target", "\n", "nll_loss", "=", "nll_loss", ".", "sum", "(", "-", "1", ")", "\n", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "x", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.VQAMed.__init__": [[215, 222], ["transformers.BertTokenizer.from_pretrained"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "df", ",", "imgsize", ",", "tfm", ",", "args", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "df", "=", "df", "\n", "self", ".", "tfm", "=", "tfm", "\n", "self", ".", "size", "=", "imgsize", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.VQAMed.__len__": [[223, 225], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.VQAMed.__getitem__": [[226, 248], ["cv2.imread", "utils.encode_text", "utils.VQAMed.tokenizer.tokenize", "utils.onehot", "utils.VQAMed.tfm", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.encode_text", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.onehot"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "path", "=", "self", ".", "df", ".", "loc", "[", "idx", ",", "'img_id'", "]", "\n", "question", "=", "self", ".", "df", ".", "loc", "[", "idx", ",", "'question'", "]", "\n", "\n", "answer", "=", "self", ".", "df", ".", "loc", "[", "idx", ",", "'answer'", "]", "\n", "\n", "if", "self", ".", "mode", "==", "'eval'", ":", "\n", "            ", "tok_ques", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "question", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "smoothing", ":", "\n", "            ", "answer", "=", "onehot", "(", "self", ".", "args", ".", "num_classes", ",", "answer", ")", "\n", "\n", "", "img", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "\n", "\n", "if", "self", ".", "tfm", ":", "\n", "            ", "img", "=", "self", ".", "tfm", "(", "img", ")", "\n", "\n", "", "tokens", ",", "segment_ids", ",", "input_mask", "=", "encode_text", "(", "question", ",", "self", ".", "tokenizer", ",", "self", ".", "args", ")", "\n", "\n", "\n", "return", "img", ",", "torch", ".", "tensor", "(", "tokens", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "segment_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "input_mask", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "answer", ",", "dtype", "=", "torch", ".", "long", ")", ",", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.VQAMed_Binary.__init__": [[251, 258], ["transformers.BertTokenizer.from_pretrained"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "df", ",", "imgsize", ",", "tfm", ",", "args", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "df", "=", "df", ".", "values", "\n", "self", ".", "tfm", "=", "tfm", "\n", "self", ".", "size", "=", "imgsize", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.VQAMed_Binary.__len__": [[259, 261], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.VQAMed_Binary.__getitem__": [[262, 293], ["cv2.imread", "utils.encode_text", "utils.VQAMed_Binary.tokenizer.tokenize", "utils.onehot", "utils.VQAMed_Binary.tfm", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.encode_text", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.onehot"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "path", "=", "self", ".", "df", "[", "idx", ",", "0", "]", "\n", "\n", "question", "=", "self", ".", "df", "[", "idx", ",", "1", "]", "\n", "\n", "if", "self", ".", "mode", "!=", "'test'", ":", "\n", "            ", "answer", "=", "self", ".", "df", "[", "idx", ",", "3", "]", "\n", "\n", "", "if", "self", ".", "mode", "==", "'eval'", ":", "\n", "            ", "tok_ques", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "question", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "smoothing", ":", "\n", "            ", "answer", "=", "onehot", "(", "self", ".", "args", ".", "num_classes", ",", "answer", ")", "\n", "\n", "", "img", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "\n", "\n", "if", "self", ".", "tfm", ":", "\n", "            ", "img", "=", "self", ".", "tfm", "(", "image", "=", "img", ")", "[", "'image'", "]", "\n", "\n", "", "tokens", ",", "segment_ids", ",", "input_mask", "=", "encode_text", "(", "question", ",", "self", ".", "tokenizer", ",", "self", ".", "args", ")", "\n", "\n", "if", "self", ".", "args", ".", "smoothing", ":", "\n", "            ", "return", "img", ",", "torch", ".", "tensor", "(", "tokens", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "segment_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "input_mask", ",", "dtype", "=", "torch", ".", "long", ")", ",", "answer", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "                ", "return", "img", ",", "torch", ".", "tensor", "(", "tokens", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "segment_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "input_mask", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "answer", ",", "dtype", "=", "torch", ".", "long", ")", ",", "path", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "                ", "return", "img", ",", "torch", ".", "tensor", "(", "tokens", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "segment_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "input_mask", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "                ", "return", "img", ",", "torch", ".", "tensor", "(", "tokens", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "segment_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "input_mask", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "answer", ",", "dtype", "=", "torch", ".", "long", ")", ",", "tok_ques", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.Model_Keyword.__init__": [[297, 304], ["torch.Module.__init__", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Model_Keyword", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "pretrainedmodels", ".", "__dict__", "[", "'se_resnext50_32x4d'", "]", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", "\n", "last_in", "=", "self", ".", "model", ".", "last_linear", ".", "in_features", "\n", "self", ".", "model", ".", "last_linear", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "3", ",", "last_in", ")", "\n", "self", ".", "last_layer", "=", "nn", ".", "Linear", "(", "2", "*", "last_in", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.Model_Keyword.forward": [[305, 315], ["utils.Model_Keyword.model", "utils.Model_Keyword.embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.Model_Keyword.last_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "keyword", ")", ":", "\n", "\n", "        ", "img_feat", "=", "self", ".", "model", "(", "img", ")", "\n", "key_feat", "=", "self", ".", "embed", "(", "keyword", ")", "\n", "\n", "feat", "=", "torch", ".", "cat", "(", "[", "img_feat", ",", "key_feat", "]", ",", "-", "1", ")", "\n", "\n", "logits", "=", "self", ".", "last_layer", "(", "feat", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.Embeddings.__init__": [[325, 334], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Embeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "args", ".", "vocab_size", ",", "128", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "word_embeddings_2", "=", "nn", ".", "Linear", "(", "128", ",", "args", ".", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "args", ".", "max_position_embeddings", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "type_embeddings", "=", "nn", ".", "Embedding", "(", "3", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "args", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "len", "=", "args", ".", "max_position_embeddings", "\n", "", "def", "forward", "(", "self", ",", "input_ids", ",", "segment_ids", ",", "position_ids", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.Embeddings.forward": [[334, 350], ["utils.Embeddings.word_embeddings", "utils.Embeddings.word_embeddings_2", "utils.Embeddings.position_embeddings", "utils.Embeddings.type_embeddings", "utils.Embeddings.LayerNorm", "utils.Embeddings.dropout", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.arange.unsqueeze().expand_as", "torch.arange.unsqueeze().expand_as", "torch.arange.unsqueeze().expand_as", "torch.arange.unsqueeze().expand_as", "torch.arange.unsqueeze().expand_as", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "segment_ids", ",", "position_ids", "=", "None", ")", ":", "\n", "        ", "if", "position_ids", "is", "None", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "position_ids", "=", "torch", ".", "arange", "(", "self", ".", "len", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "position_ids", "=", "torch", ".", "arange", "(", "self", ".", "len", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "words_embeddings", "=", "self", ".", "word_embeddings_2", "(", "words_embeddings", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "type_embeddings", "(", "segment_ids", ")", "\n", "embeddings", "=", "words_embeddings", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.Transfer.__init__": [[353, 388], ["torch.Module.__init__", "torchvision.models.resnet152", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Transfer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "num_vis", "=", "args", ".", "num_vis", "\n", "self", ".", "model", "=", "models", ".", "resnet152", "(", "pretrained", "=", "True", ")", "\n", "# for p in self.parameters():", "\n", "#     p.requires_grad=False", "\n", "\n", "if", "self", ".", "num_vis", "==", "5", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2048", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap2", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "1024", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap3", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "512", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap4", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "256", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap5", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "64", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap7", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "elif", "self", ".", "num_vis", "==", "3", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2048", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap2", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "1024", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap3", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "512", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap4", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2048", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap2", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.Transfer.forward": [[389, 438], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.Transfer.conv2", "utils.Transfer.gap2().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.Transfer.conv3", "utils.Transfer.gap3().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.Transfer.conv4", "utils.Transfer.gap4().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.Transfer.conv5", "utils.Transfer.gap5().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.Transfer.conv7", "utils.Transfer.gap7().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.Transfer.conv2", "utils.Transfer.gap2().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.Transfer.conv3", "utils.Transfer.gap3().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.Transfer.conv4", "utils.Transfer.gap4().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.Transfer.conv2", "utils.Transfer.gap2().view", "list", "torch.Sequential.", "list", "torch.Sequential.", "list", "torch.Sequential.", "list", "torch.Sequential.", "list", "torch.Sequential.", "list", "torch.Sequential.", "list", "torch.Sequential.", "list", "torch.Sequential.", "list", "torch.Sequential.", "utils.Transfer.model.children", "utils.Transfer.gap2", "utils.Transfer.model.children", "utils.Transfer.gap3", "utils.Transfer.model.children", "utils.Transfer.gap4", "utils.Transfer.model.children", "utils.Transfer.gap5", "utils.Transfer.model.children", "utils.Transfer.gap7", "utils.Transfer.mean", "utils.Transfer.mean", "utils.Transfer.mean", "utils.Transfer.mean", "utils.Transfer.mean", "utils.Transfer.model.children", "utils.Transfer.gap2", "utils.Transfer.model.children", "utils.Transfer.gap3", "utils.Transfer.model.children", "utils.Transfer.gap4", "utils.Transfer.mean", "utils.Transfer.mean", "utils.Transfer.mean", "utils.Transfer.model.children", "utils.Transfer.gap2", "utils.Transfer.mean", "utils.Transfer.relu", "utils.Transfer.relu", "utils.Transfer.relu", "utils.Transfer.relu", "utils.Transfer.relu", "utils.Transfer.relu", "utils.Transfer.relu", "utils.Transfer.relu", "utils.Transfer.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "self", ".", "num_vis", "==", "5", ":", "\n", "            ", "modules2", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", "\n", "fix2", "=", "nn", ".", "Sequential", "(", "*", "modules2", ")", "\n", "inter_2", "=", "self", ".", "conv2", "(", "fix2", "(", "img", ")", ")", "\n", "v_2", "=", "self", ".", "gap2", "(", "self", ".", "relu", "(", "inter_2", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "modules3", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "3", "]", "\n", "fix3", "=", "nn", ".", "Sequential", "(", "*", "modules3", ")", "\n", "inter_3", "=", "self", ".", "conv3", "(", "fix3", "(", "img", ")", ")", "\n", "v_3", "=", "self", ".", "gap3", "(", "self", ".", "relu", "(", "inter_3", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "modules4", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "4", "]", "\n", "fix4", "=", "nn", ".", "Sequential", "(", "*", "modules4", ")", "\n", "inter_4", "=", "self", ".", "conv4", "(", "fix4", "(", "img", ")", ")", "\n", "v_4", "=", "self", ".", "gap4", "(", "self", ".", "relu", "(", "inter_4", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "modules5", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "5", "]", "\n", "fix5", "=", "nn", ".", "Sequential", "(", "*", "modules5", ")", "\n", "inter_5", "=", "self", ".", "conv5", "(", "fix5", "(", "img", ")", ")", "\n", "v_5", "=", "self", ".", "gap5", "(", "self", ".", "relu", "(", "inter_5", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "modules7", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "7", "]", "\n", "fix7", "=", "nn", ".", "Sequential", "(", "*", "modules7", ")", "\n", "inter_7", "=", "self", ".", "conv7", "(", "fix7", "(", "img", ")", ")", "\n", "v_7", "=", "self", ".", "gap7", "(", "self", ".", "relu", "(", "inter_7", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "\n", "return", "v_2", ",", "v_3", ",", "v_4", ",", "v_5", ",", "v_7", ",", "[", "inter_2", ".", "mean", "(", "1", ")", ",", "inter_3", ".", "mean", "(", "1", ")", ",", "inter_4", ".", "mean", "(", "1", ")", ",", "inter_5", ".", "mean", "(", "1", ")", ",", "inter_7", ".", "mean", "(", "1", ")", "]", "\n", "\n", "", "if", "self", ".", "num_vis", "==", "3", ":", "\n", "            ", "modules2", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", "\n", "fix2", "=", "nn", ".", "Sequential", "(", "*", "modules2", ")", "\n", "inter_2", "=", "self", ".", "conv2", "(", "fix2", "(", "img", ")", ")", "\n", "v_2", "=", "self", ".", "gap2", "(", "self", ".", "relu", "(", "inter_2", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "modules3", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "3", "]", "\n", "fix3", "=", "nn", ".", "Sequential", "(", "*", "modules3", ")", "\n", "inter_3", "=", "self", ".", "conv3", "(", "fix3", "(", "img", ")", ")", "\n", "v_3", "=", "self", ".", "gap3", "(", "self", ".", "relu", "(", "inter_3", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "modules4", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "4", "]", "\n", "fix4", "=", "nn", ".", "Sequential", "(", "*", "modules4", ")", "\n", "inter_4", "=", "self", ".", "conv4", "(", "fix4", "(", "img", ")", ")", "\n", "v_4", "=", "self", ".", "gap4", "(", "self", ".", "relu", "(", "inter_4", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "\n", "return", "v_2", ",", "v_3", ",", "v_4", ",", "[", "inter_2", ".", "mean", "(", "1", ")", ",", "inter_3", ".", "mean", "(", "1", ")", ",", "inter_4", ".", "mean", "(", "1", ")", "]", "\n", "\n", "", "else", ":", "\n", "            ", "modules2", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", "\n", "fix2", "=", "nn", ".", "Sequential", "(", "*", "modules2", ")", "\n", "inter_2", "=", "self", ".", "conv2", "(", "fix2", "(", "img", ")", ")", "\n", "v_2", "=", "self", ".", "gap2", "(", "self", ".", "relu", "(", "inter_2", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "\n", "return", "v_2", ",", "[", "inter_2", ".", "mean", "(", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.MultiHeadedSelfAttention.__init__": [[440, 448], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "MultiHeadedSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj_q", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "proj_k", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "proj_v", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "args", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "scores", "=", "None", "\n", "self", ".", "n_heads", "=", "args", ".", "heads", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.MultiHeadedSelfAttention.forward": [[448, 460], ["utils.MultiHeadedSelfAttention.drop", "utils.MultiHeadedSelfAttention.merge_last", "utils.MultiHeadedSelfAttention.proj_q", "utils.MultiHeadedSelfAttention.proj_k", "utils.MultiHeadedSelfAttention.proj_v", "utils.MultiHeadedSelfAttention.split_last().transpose", "numpy.sqrt", "mask[].float", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "k.transpose", "k.size", "utils.MultiHeadedSelfAttention.split_last"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.MultiHeadedSelfAttention.merge_last", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.MultiHeadedSelfAttention.split_last"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "q", ",", "k", ",", "v", "=", "self", ".", "proj_q", "(", "x", ")", ",", "self", ".", "proj_k", "(", "x", ")", ",", "self", ".", "proj_v", "(", "x", ")", "\n", "q", ",", "k", ",", "v", "=", "(", "self", ".", "split_last", "(", "x", ",", "(", "self", ".", "n_heads", ",", "-", "1", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "for", "x", "in", "[", "q", ",", "k", ",", "v", "]", ")", "\n", "scores", "=", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "/", "np", ".", "sqrt", "(", "k", ".", "size", "(", "-", "1", ")", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", ".", "float", "(", ")", "\n", "scores", "-=", "10000.0", "*", "(", "1.0", "-", "mask", ")", "\n", "", "scores", "=", "self", ".", "drop", "(", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", ")", "\n", "h", "=", "(", "scores", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "h", "=", "self", ".", "merge_last", "(", "h", ",", "2", ")", "\n", "self", ".", "scores", "=", "scores", "\n", "return", "h", ",", "scores", "\n", "", "def", "split_last", "(", "self", ",", "x", ",", "shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.MultiHeadedSelfAttention.split_last": [[460, 466], ["list", "x.view", "list.count", "int", "list.index", "x.size", "x.size", "numpy.prod"], "methods", ["None"], ["", "def", "split_last", "(", "self", ",", "x", ",", "shape", ")", ":", "\n", "        ", "shape", "=", "list", "(", "shape", ")", "\n", "assert", "shape", ".", "count", "(", "-", "1", ")", "<=", "1", "\n", "if", "-", "1", "in", "shape", ":", "\n", "            ", "shape", "[", "shape", ".", "index", "(", "-", "1", ")", "]", "=", "int", "(", "x", ".", "size", "(", "-", "1", ")", "/", "-", "np", ".", "prod", "(", "shape", ")", ")", "\n", "", "return", "x", ".", "view", "(", "*", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", ",", "*", "shape", ")", "\n", "", "def", "merge_last", "(", "self", ",", "x", ",", "n_dims", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.MultiHeadedSelfAttention.merge_last": [[466, 470], ["x.size", "x.view", "len"], "methods", ["None"], ["", "def", "merge_last", "(", "self", ",", "x", ",", "n_dims", ")", ":", "\n", "        ", "s", "=", "x", ".", "size", "(", ")", "\n", "assert", "n_dims", ">", "1", "and", "n_dims", "<", "len", "(", "s", ")", "\n", "return", "x", ".", "view", "(", "*", "s", "[", ":", "-", "n_dims", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.PositionWiseFeedForward.__init__": [[472, 476], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "PositionWiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", "*", "4", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", "*", "4", ",", "args", ".", "hidden_size", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.PositionWiseFeedForward.forward": [[476, 478], ["utils.PositionWiseFeedForward.fc2", "utils.gelu", "utils.PositionWiseFeedForward.fc1"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.gelu"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fc2", "(", "gelu", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.BertLayer.__init__": [[480, 504], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "utils.PositionWiseFeedForward", "utils.MultiHeadedSelfAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "utils.MultiHeadedSelfAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "utils.MultiHeadedSelfAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "utils.PositionWiseFeedForward", "range", "range", "utils.PositionWiseFeedForward", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "utils.MultiHeadedSelfAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "utils.PositionWiseFeedForward", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "share", "=", "'all'", ",", "norm", "=", "'pre'", ")", ":", "\n", "        ", "super", "(", "BertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "share", "=", "share", "\n", "self", ".", "norm_pos", "=", "norm", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "args", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "args", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "args", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout", "(", "args", ".", "hidden_dropout_prob", ")", "\n", "if", "self", ".", "share", "==", "'ffn'", ":", "\n", "            ", "self", ".", "attention", "=", "nn", ".", "ModuleList", "(", "[", "MultiHeadedSelfAttention", "(", "args", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "proj", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "feedforward", "=", "PositionWiseFeedForward", "(", "args", ")", "\n", "", "elif", "self", ".", "share", "==", "'att'", ":", "\n", "            ", "self", ".", "attention", "=", "MultiHeadedSelfAttention", "(", "args", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "feedforward", "=", "nn", ".", "ModuleList", "(", "[", "PositionWiseFeedForward", "(", "args", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "", "elif", "self", ".", "share", "==", "'all'", ":", "\n", "            ", "self", ".", "attention", "=", "MultiHeadedSelfAttention", "(", "args", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "feedforward", "=", "PositionWiseFeedForward", "(", "args", ")", "\n", "", "elif", "self", ".", "share", "==", "'none'", ":", "\n", "            ", "self", ".", "attention", "=", "nn", ".", "ModuleList", "(", "[", "MultiHeadedSelfAttention", "(", "args", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "proj", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "feedforward", "=", "nn", ".", "ModuleList", "(", "[", "PositionWiseFeedForward", "(", "args", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "", "", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "layer_num", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.BertLayer.forward": [[504, 529], ["isinstance", "isinstance", "isinstance", "utils.BertLayer.norm1", "isinstance", "utils.BertLayer.norm2", "utils.BertLayer.proj", "utils.BertLayer.drop1", "utils.BertLayer.feedforward", "utils.BertLayer.drop2", "utils.BertLayer.proj", "utils.BertLayer.feedforward", "utils.BertLayer.norm1", "utils.BertLayer.attention", "utils.BertLayer.norm1", "utils.BertLayer.norm1", "utils.BertLayer.attention", "utils.BertLayer.drop1", "utils.BertLayer.drop2", "utils.BertLayer.norm1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "layer_num", ")", ":", "\n", "        ", "if", "self", ".", "norm_pos", "==", "'pre'", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "attention", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "attn_output", ",", "attn_scores", "=", "self", ".", "attention", "[", "layer_num", "]", "(", "self", ".", "norm1", "(", "hidden_states", ")", ",", "attention_mask", ")", "\n", "h", "=", "self", ".", "proj", "[", "layer_num", "]", "(", "attn_output", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "self", ".", "proj", "(", "self", ".", "attention", "(", "self", ".", "norm1", "(", "hidden_states", ")", ",", "attention_mask", ")", ")", "\n", "", "out", "=", "hidden_states", "+", "self", ".", "drop1", "(", "h", ")", "\n", "if", "isinstance", "(", "self", ".", "feedforward", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "h", "=", "self", ".", "feedforward", "[", "layer_num", "]", "(", "self", ".", "norm1", "(", "out", ")", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "self", ".", "feedforward", "(", "self", ".", "norm1", "(", "out", ")", ")", "\n", "", "out", "=", "out", "+", "self", ".", "drop2", "(", "h", ")", "\n", "", "if", "self", ".", "norm_pos", "==", "'post'", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "attention", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "h", "=", "self", ".", "proj", "[", "layer_num", "]", "(", "self", ".", "attention", "[", "layer_num", "]", "(", "hidden_states", ",", "attention_mask", ")", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "self", ".", "proj", "(", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ")", ")", "\n", "", "out", "=", "self", ".", "norm1", "(", "hidden_states", "+", "self", ".", "drop1", "(", "h", ")", ")", "\n", "if", "isinstance", "(", "self", ".", "feedforward", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "h", "=", "self", ".", "feedforward", "[", "layer_num", "]", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "self", ".", "feedforward", "(", "out", ")", "\n", "", "out", "=", "self", ".", "norm2", "(", "out", "+", "self", ".", "drop2", "(", "h", ")", ")", "\n", "", "return", "out", ",", "attn_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.Transformer.__init__": [[531, 541], ["torch.Module.__init__", "transformers.BertModel.from_pretrained", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.Transfer", "utils.BertLayer", "list", "transformers.BertModel.from_pretrained.children"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "base_model", "=", "BertModel", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "bert_model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "base_model", ".", "children", "(", ")", ")", "[", "0", ":", "]", ")", "\n", "self", ".", "bert_embedding", "=", "bert_model", "[", "0", "]", "\n", "# self.embed = Embeddings(args)", "\n", "self", ".", "num_vis", "=", "args", ".", "num_vis", "\n", "self", ".", "trans", "=", "Transfer", "(", "args", ")", "\n", "self", ".", "blocks", "=", "BertLayer", "(", "args", ",", "share", "=", "'none'", ",", "norm", "=", "'pre'", ")", "\n", "self", ".", "n_layers", "=", "args", ".", "n_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.Transformer.forward": [[542, 586], ["utils.Transformer.bert_embedding", "range", "utils.Transformer.trans", "range", "range", "range", "range", "range", "utils.Transformer.blocks", "hidden_states.append", "all_attn_scores.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "utils.Transformer.trans", "utils.Transformer.trans", "len", "len", "len", "len", "len", "range", "range", "range", "range", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "input_ids", ",", "token_type_ids", ",", "mask", ")", ":", "\n", "\n", "        ", "if", "self", ".", "num_vis", "==", "5", ":", "\n", "            ", "v_2", ",", "v_3", ",", "v_4", ",", "v_5", ",", "v_7", ",", "intermediate", "=", "self", ".", "trans", "(", "img", ")", "\n", "", "elif", "self", ".", "num_vis", "==", "3", ":", "\n", "            ", "v_2", ",", "v_3", ",", "v_4", ",", "intermediate", "=", "self", ".", "trans", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "v_2", ",", "intermediate", "=", "self", ".", "trans", "(", "img", ")", "\n", "# h = self.embed(input_ids, token_type_ids)", "\n", "", "h", "=", "self", ".", "bert_embedding", "(", "input_ids", "=", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "position_ids", "=", "None", ")", "\n", "\n", "if", "self", ".", "num_vis", "==", "5", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "                ", "h", "[", "i", "]", "[", "1", "]", "=", "v_2", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "                ", "h", "[", "i", "]", "[", "2", "]", "=", "v_3", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "                ", "h", "[", "i", "]", "[", "3", "]", "=", "v_4", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "                ", "h", "[", "i", "]", "[", "4", "]", "=", "v_5", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "                ", "h", "[", "i", "]", "[", "5", "]", "=", "v_7", "[", "i", "]", "\n", "\n", "", "", "elif", "self", ".", "num_vis", "==", "3", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "                ", "h", "[", "i", "]", "[", "1", "]", "=", "v_2", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "                ", "h", "[", "i", "]", "[", "2", "]", "=", "v_3", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "                ", "h", "[", "i", "]", "[", "3", "]", "=", "v_4", "[", "i", "]", "\n", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "                ", "h", "[", "i", "]", "[", "1", "]", "=", "v_2", "[", "i", "]", "\n", "\n", "\n", "", "", "hidden_states", "=", "[", "]", "\n", "all_attn_scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "h", ",", "attn_scores", "=", "self", ".", "blocks", "(", "h", ",", "mask", ",", "i", ")", "\n", "hidden_states", ".", "append", "(", "h", ")", "\n", "all_attn_scores", ".", "append", "(", "attn_scores", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "hidden_states", ",", "0", ")", ",", "torch", ".", "stack", "(", "all_attn_scores", ",", "0", ")", ",", "intermediate", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.Model.__init__": [[589, 598], ["torch.Module.__init__", "utils.Transformer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "transformer", "=", "Transformer", "(", "args", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "activ1", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "args", ".", "hidden_size", ",", "eps", "=", "1e-12", ",", "elementwise_affine", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "vocab_size", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "img", ",", "input_ids", ",", "segment_ids", ",", "input_mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.Model.forward": [[598, 603], ["utils.Model.transformer", "utils.Model.activ1", "utils.Model.classifier", "utils.Model.fc1", "h[].mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "input_ids", ",", "segment_ids", ",", "input_mask", ")", ":", "\n", "        ", "h", ",", "attn_scores", ",", "intermediate", "=", "self", ".", "transformer", "(", "img", ",", "input_ids", ",", "segment_ids", ",", "input_mask", ")", "\n", "pooled_h", "=", "self", ".", "activ1", "(", "self", ".", "fc1", "(", "h", "[", "-", "1", "]", ".", "mean", "(", "1", ")", ")", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_h", ")", "\n", "return", "logits", ",", "attn_scores", ",", "intermediate", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.seed_everything": [[26, 35], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["def", "seed_everything", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.make_df": [[38, 50], ["os.listdir", "pandas.concat", "pandas.read_csv", "df_list.append", "os.path.join", "p.split", "p.split"], "function", ["None"], ["", "def", "make_df", "(", "file_path", ")", ":", "\n", "    ", "paths", "=", "os", ".", "listdir", "(", "file_path", ")", "\n", "\n", "df_list", "=", "[", "]", "\n", "\n", "for", "p", "in", "paths", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "file_path", ",", "p", ")", ",", "sep", "=", "'|'", ",", "names", "=", "[", "'img_id'", ",", "'question'", ",", "'answer'", "]", ")", "\n", "df", "[", "'category'", "]", "=", "p", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "df", "[", "'mode'", "]", "=", "p", ".", "split", "(", "'_'", ")", "[", "2", "]", "[", ":", "-", "4", "]", "\n", "df_list", ".", "append", "(", "df", ")", "\n", "\n", "", "return", "pd", ".", "concat", "(", "df_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.load_data": [[51, 80], ["pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "traindf[].apply", "valdf[].apply", "testdf[].apply", "traindf[].str.lower", "valdf[].str.lower", "testdf[].str.lower", "traindf[].str.lower", "valdf[].str.lower", "testdf[].str.lower", "traindf[].reset_index.sample", "valdf.sample.sample", "testdf.sample.sample", "os.path.join", "os.path.join", "os.path.join", "traindf[].reset_index", "os.path.join", "os.path.join", "os.path.join", "traindf[].isin"], "function", ["None"], ["", "def", "load_data", "(", "args", ",", "remove", "=", "None", ")", ":", "\n", "\n", "    ", "traindf", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'traindf.csv'", ")", ")", "\n", "valdf", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'valdf.csv'", ")", ")", "\n", "testdf", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'testdf.csv'", ")", ")", "\n", "\n", "if", "remove", "is", "not", "None", ":", "\n", "        ", "traindf", "=", "traindf", "[", "~", "traindf", "[", "'img_id'", "]", ".", "isin", "(", "remove", ")", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "", "traindf", "[", "'img_id'", "]", "=", "traindf", "[", "'img_id'", "]", ".", "apply", "(", "lambda", "x", ":", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'train_images'", ",", "x", "+", "'.jpg'", ")", ")", "\n", "valdf", "[", "'img_id'", "]", "=", "valdf", "[", "'img_id'", "]", ".", "apply", "(", "lambda", "x", ":", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'val_images'", ",", "x", "+", "'.jpg'", ")", ")", "\n", "testdf", "[", "'img_id'", "]", "=", "testdf", "[", "'img_id'", "]", ".", "apply", "(", "lambda", "x", ":", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'test_images'", ",", "x", "+", "'.jpg'", ")", ")", "\n", "# testdf['img_id'] = testdf['img_id'].apply(lambda x: os.path.join(args.data_dir, x + '.jpg'))", "\n", "\n", "traindf", "[", "'category'", "]", "=", "traindf", "[", "'category'", "]", ".", "str", ".", "lower", "(", ")", "\n", "valdf", "[", "'category'", "]", "=", "valdf", "[", "'category'", "]", ".", "str", ".", "lower", "(", ")", "\n", "testdf", "[", "'category'", "]", "=", "testdf", "[", "'category'", "]", ".", "str", ".", "lower", "(", ")", "\n", "\n", "\n", "traindf", "[", "'answer'", "]", "=", "traindf", "[", "'answer'", "]", ".", "str", ".", "lower", "(", ")", "\n", "valdf", "[", "'answer'", "]", "=", "valdf", "[", "'answer'", "]", ".", "str", ".", "lower", "(", ")", "\n", "testdf", "[", "'answer'", "]", "=", "testdf", "[", "'answer'", "]", ".", "str", ".", "lower", "(", ")", "\n", "\n", "traindf", "=", "traindf", ".", "sample", "(", "frac", "=", "args", ".", "train_pct", ")", "\n", "valdf", "=", "valdf", ".", "sample", "(", "frac", "=", "args", ".", "valid_pct", ")", "\n", "testdf", "=", "testdf", ".", "sample", "(", "frac", "=", "args", ".", "test_pct", ")", "\n", "\n", "\n", "return", "traindf", ",", "valdf", ",", "testdf", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.load_2020_data": [[81, 148], ["pandas.read_csv", "traindf[].reset_index", "traindf[].reset_index", "pandas.read_csv", "valdf[].reset_index", "valdf[].reset_index", "pandas.read_csv", "traindf[].apply", "valdf[].apply", "testdf[].apply", "list", "utils.load_data", "pandas.concat", "df2019[].str.lower", "print", "df2019[].reset_index.drop", "df2019[].reset_index", "pandas.concat().reset_index", "pandas.concat", "print", "traindf[].map", "valdf[].map", "traindf[].map", "valdf[].map", "testdf[].map", "len", "print", "print", "print", "print", "os.path.join", "os.path.join", "os.path.join", "set", "len", "df[].unique", "pandas.concat", "enumerate", "ans2idx.items", "enumerate", "key2idx.items", "list", "list", "sorted", "sorted", "traindf[].unique", "valdf[].unique", "df2019[].isin", "df[].unique", "df[].unique", "traindf[].isin", "traindf[].isin", "valdf[].isin", "valdf[].isin"], "function", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.load_data"], ["", "def", "load_2020_data", "(", "args", ")", ":", "\n", "\n", "    ", "remove_train2020", "=", "[", "'synpic52595'", ",", "'synpic61281'", ",", "'synpic43628'", ",", "'synpic15348'", ",", "'synpic35145'", ",", "'synpic20101'", ",", "'synpic20412'", ",", "'synpic45126'", ",", "'synpic26398'", ",", "'synpic15349'", ",", "'synpic37214'", ",", "'synpic52598'", ",", "'synpic46660'", ",", "'synpic36320'", ",", "'synpic34054'", ",", "'synpic58686'", ",", "'synpic15888'", ",", "'synpic19909'", ",", "'synpic24243'", ",", "'synpic39311'", ",", "'synpic18484'", ",", "'synpic24871'", ",", "'synpic31586'", ",", "'synpic47242'", ",", "'synpic36969'", ",", "'synpic21626'", ",", "'synpic22983'", ",", "'synpic40377'", ",", "'synpic48870'", ",", "'synpic43583'", ",", "'synpic45128'", ",", "'synpic32198'", ",", "'synpic31080'", ",", "'synpic45115'", ",", "'synpic28125'", ",", "'synpic45123'", ",", "'synpic23844'", ",", "'synpic17714'", ",", "'synpic52608'", ",", "'synpic52601'", ",", "'synpic47246'", ",", "'synpic15351'", ",", "'synpic46658'", ",", "'synpic45039'", ",", "'synpic31101'", ",", "'synpic52611'", ",", "'synpic31083'", ",", "'synpic49269'", ",", "'synpic23197'", ",", "'synpic27940'", ",", "'synpic37880'", "]", "\n", "remove_val2020", "=", "[", "'synpic48867'", ",", "'synpic22792'", ",", "'synpic20410'", ",", "'synpic52301'", ",", "'synpic52606'", ",", "'synpic41310'", ",", "'synpic21537'", ",", "'synpic28001'", ",", "'synpic21967'", ",", "'synpic45120'", ",", "'synpic45129'", ",", "'synpic30873'", ",", "'synpic20402'", "]", "\n", "remove_train2019", "=", "[", "'synpic21456'", ",", "'synpic21845'", ",", "'synpic47995'", ",", "'synpic48869'", ",", "'synpic52613'", ",", "'synpic31716'", ",", "'synpic27917'", ",", "'synpic39365'", ",", "'synpic19434'", ",", "'synpic52600'", ",", "'synpic56649'", ",", "'synpic52603'", ",", "'synpic52610'", ",", "'synpic46659'", ",", "'synpic19533'", "]", "\n", "\n", "\n", "traindf", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "datapath2020", ",", "'VQAMed2020-VQAnswering-TrainingSet'", ",", "'train.csv'", ")", ")", "\n", "traindf", "=", "traindf", "[", "~", "traindf", "[", "'imgid'", "]", ".", "isin", "(", "remove_train2020", ")", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "traindf", "=", "traindf", "[", "~", "traindf", "[", "'answer'", "]", ".", "isin", "(", "[", "'yes'", ",", "'no'", "]", ")", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "valdf", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "datapath2020", ",", "'VQAMed2020-VQAnswering-TrainingSet'", ",", "'val.csv'", ")", ")", "\n", "valdf", "=", "valdf", "[", "~", "valdf", "[", "'imgid'", "]", ".", "isin", "(", "remove_val2020", ")", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "valdf", "=", "valdf", "[", "~", "valdf", "[", "'answer'", "]", ".", "isin", "(", "[", "'yes'", ",", "'no'", "]", ")", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "testdf", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "datapath2020", ",", "'VQAMed2020-VQAnswering-TrainingSet'", ",", "'test.csv'", ")", ")", "\n", "\n", "traindf", "[", "'imgid'", "]", "=", "traindf", "[", "'imgid'", "]", ".", "apply", "(", "lambda", "x", ":", "args", ".", "datapath2020", "+", "'/VQAMed2020-VQAnswering-TrainingSet/VQAnswering_2020_Train_images/'", "+", "x", "+", "'_224.jpg'", ")", "\n", "valdf", "[", "'imgid'", "]", "=", "valdf", "[", "'imgid'", "]", ".", "apply", "(", "lambda", "x", ":", "args", ".", "datapath2020", "+", "'/VQAMed2020-VQAnswering-ValidationSet/VQAnswering_2020_Val_images/'", "+", "x", "+", "'_224.jpg'", ")", "\n", "testdf", "[", "'imgid'", "]", "=", "testdf", "[", "'imgid'", "]", ".", "apply", "(", "lambda", "x", ":", "args", ".", "testpath", "+", "'/Task1-2020-VQAnswering-Test-Images/'", "+", "x", "+", "'_224.jpg'", ")", "\n", "\n", "\n", "\n", "classes2020", "=", "list", "(", "set", "(", "list", "(", "traindf", "[", "'answer'", "]", ".", "unique", "(", ")", ")", "+", "list", "(", "valdf", "[", "'answer'", "]", ".", "unique", "(", ")", ")", ")", ")", "\n", "\n", "train19", ",", "val19", ",", "test19", "=", "load_data", "(", "args", ",", "remove", "=", "remove_train2019", ")", "\n", "\n", "df2019", "=", "pd", ".", "concat", "(", "[", "train19", ",", "val19", ",", "test19", "]", ")", "\n", "df2019", "[", "'category'", "]", "=", "df2019", "[", "'category'", "]", ".", "str", ".", "lower", "(", ")", "\n", "\n", "print", "(", "'Shape of 2019 data: '", ",", "len", "(", "df2019", ")", ")", "\n", "df2019", "=", "df2019", ".", "drop", "(", "[", "'category'", ",", "'mode'", "]", ",", "axis", "=", "1", ")", "\n", "df2019", "[", "'keyword'", "]", "=", "'abnorm'", "\n", "\n", "df2019", "=", "df2019", "[", "df2019", "[", "'answer'", "]", ".", "isin", "(", "classes2020", ")", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "df2019", ".", "columns", "=", "[", "'imgid'", ",", "'question'", ",", "'answer'", ",", "'keyword'", "]", "\n", "traindf", "=", "pd", ".", "concat", "(", "[", "traindf", ",", "df2019", "]", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "df", "=", "pd", ".", "concat", "(", "[", "traindf", ",", "valdf", "]", ",", "ignore_index", "=", "True", ")", "\n", "ans2idx", "=", "{", "ans", ":", "idx", "for", "idx", ",", "ans", "in", "enumerate", "(", "sorted", "(", "df", "[", "'answer'", "]", ".", "unique", "(", ")", ")", ")", "}", "\n", "idx2ans", "=", "{", "idx", ":", "ans", "for", "ans", ",", "idx", "in", "ans2idx", ".", "items", "(", ")", "}", "\n", "\n", "print", "(", "df", "[", "'keyword'", "]", ".", "unique", "(", ")", ")", "\n", "key2idx", "=", "{", "ans", ":", "idx", "for", "idx", ",", "ans", "in", "enumerate", "(", "sorted", "(", "df", "[", "'keyword'", "]", ".", "unique", "(", ")", ")", ")", "}", "\n", "idx2key", "=", "{", "idx", ":", "ans", "for", "ans", ",", "idx", "in", "key2idx", ".", "items", "(", ")", "}", "\n", "\n", "traindf", "[", "'answer'", "]", "=", "traindf", "[", "'answer'", "]", ".", "map", "(", "ans2idx", ")", "\n", "valdf", "[", "'answer'", "]", "=", "valdf", "[", "'answer'", "]", ".", "map", "(", "ans2idx", ")", "\n", "\n", "traindf", "[", "'keyword'", "]", "=", "traindf", "[", "'keyword'", "]", ".", "map", "(", "key2idx", ")", "\n", "valdf", "[", "'keyword'", "]", "=", "valdf", "[", "'keyword'", "]", ".", "map", "(", "key2idx", ")", "\n", "testdf", "[", "'keyword'", "]", "=", "testdf", "[", "'keyword'", "]", ".", "map", "(", "key2idx", ")", "\n", "\n", "num_classes", "=", "len", "(", "ans2idx", ")", "\n", "print", "(", "'Number of classes: '", ",", "num_classes", ")", "\n", "\n", "print", "(", "'Shape of training set: '", ",", "traindf", ".", "shape", ")", "\n", "print", "(", "'Shape of val set: '", ",", "valdf", ".", "shape", ")", "\n", "print", "(", "'Shape of test set: '", ",", "testdf", ".", "shape", ")", "\n", "\n", "return", "traindf", ",", "valdf", ",", "testdf", ",", "idx2ans", ",", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.gelu": [[152, 154], ["torch.erf", "torch.erf", "torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.encode_text": [[156, 171], ["tokens.extend", "segment_ids.extend", "input_mask.extend", "tokenizer.encode", "len", "len", "range", "len", "len"], "function", ["None"], ["", "def", "encode_text", "(", "caption", ",", "tokenizer", ",", "args", ")", ":", "\n", "    ", "part1", "=", "[", "0", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "#get token ids and remove [CLS] and [SEP] token id", "\n", "part2", "=", "tokenizer", ".", "encode", "(", "caption", ")", "[", "1", ":", "-", "1", "]", "\n", "\n", "tokens", "=", "[", "tokenizer", ".", "cls_token_id", "]", "+", "part1", "+", "[", "tokenizer", ".", "sep_token_id", "]", "+", "part2", "[", ":", "args", ".", "max_position_embeddings", "-", "8", "]", "+", "[", "tokenizer", ".", "sep_token_id", "]", "\n", "segment_ids", "=", "[", "0", "]", "*", "(", "len", "(", "part1", ")", "+", "2", ")", "+", "[", "1", "]", "*", "(", "len", "(", "part2", "[", ":", "args", ".", "max_position_embeddings", "-", "8", "]", ")", "+", "1", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "tokens", ")", "\n", "n_pad", "=", "args", ".", "max_position_embeddings", "-", "len", "(", "tokens", ")", "\n", "tokens", ".", "extend", "(", "[", "0", "]", "*", "n_pad", ")", "\n", "segment_ids", ".", "extend", "(", "[", "0", "]", "*", "n_pad", ")", "\n", "input_mask", ".", "extend", "(", "[", "0", "]", "*", "n_pad", ")", "\n", "\n", "\n", "return", "tokens", ",", "segment_ids", ",", "input_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.onehot": [[172, 176], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "onehot", "(", "size", ",", "target", ")", ":", "\n", "    ", "vec", "=", "torch", ".", "zeros", "(", "size", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "vec", "[", "target", "]", "=", "1.", "\n", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.crop": [[201, 212], ["min"], "function", ["None"], ["", "", "", "def", "crop", "(", "img", ")", ":", "\n", "    ", "c_y", ",", "c_x", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "c_y", "=", "c_y", "//", "2", "\n", "c_x", "=", "c_x", "//", "2", "\n", "shorter", "=", "min", "(", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "if", "img", ".", "shape", "[", "0", "]", "<=", "img", ".", "shape", "[", "1", "]", ":", "\n", "        ", "img", "=", "img", "[", "c_y", "-", "shorter", "//", "2", ":", "c_y", "+", "(", "shorter", "-", "shorter", "//", "2", ")", "-", "20", ",", "c_x", "-", "shorter", "//", "2", ":", "c_x", "+", "(", "shorter", "-", "shorter", "//", "2", ")", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "img", "=", "img", "[", "c_y", "-", "shorter", "//", "2", ":", "c_y", "+", "(", "shorter", "-", "shorter", "//", "2", ")", ",", "c_x", "-", "shorter", "//", "2", ":", "c_x", "+", "(", "shorter", "-", "shorter", "//", "2", ")", ",", ":", "]", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.calculate_bleu_score": [[318, 321], ["numpy.asarray", "numpy.mean", "nltk.translate.bleu_score.sentence_bleu", "idx2ans[].split", "zip", "idx2ans[].split"], "function", ["None"], ["", "", "def", "calculate_bleu_score", "(", "preds", ",", "targets", ",", "idx2ans", ")", ":", "\n", "  ", "bleu_per_answer", "=", "np", ".", "asarray", "(", "[", "sentence_bleu", "(", "[", "idx2ans", "[", "target", "]", ".", "split", "(", ")", "]", ",", "idx2ans", "[", "pred", "]", ".", "split", "(", ")", ",", "weights", "=", "[", "1", "]", ")", "for", "pred", ",", "target", "in", "zip", "(", "preds", ",", "targets", ")", "]", ")", "\n", "return", "np", ".", "mean", "(", "bleu_per_answer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.train_one_epoch": [[609, 671], ["model.train", "tqdm.tqdm", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "utils.calculate_bleu_score", "question_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "optimizer.zero_grad", "logits.softmax().argmax().detach", "torch.cat().cpu().numpy.append", "IMGIDS.append", "loss_func.detach().cpu().numpy", "train_loss.append", "tqdm.tqdm.set_description", "numpy.mean", "img.to", "question_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "target.to", "model", "loss_func", "scaler.scale", "loss_func.backward", "scaler.step", "scaler.update", "loss_func.backward", "optimizer.step", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "loss_func", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "target.argmax", "logits.softmax().argmax", "loss_func.detach().cpu", "model.parameters", "model.parameters", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logits.softmax", "loss_func.detach"], "function", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.loss_func", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.loss_func"], ["", "", "def", "train_one_epoch", "(", "loader", ",", "model", ",", "optimizer", ",", "criterion", ",", "device", ",", "scaler", ",", "args", ",", "idx2ans", ")", ":", "\n", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "[", "]", "\n", "IMGIDS", "=", "[", "]", "\n", "PREDS", "=", "[", "]", "\n", "TARGETS", "=", "[", "]", "\n", "bar", "=", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", "\n", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ",", "imgid", ")", "in", "bar", ":", "\n", "\n", "        ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "question_token", "=", "question_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "loss_func", "=", "criterion", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "target", ")", "\n", "", "", "else", ":", "\n", "            ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "target", ")", "\n", "\n", "", "if", "args", ".", "mixed_precision", ":", "\n", "            ", "scaler", ".", "scale", "(", "loss", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip", ":", "\n", "                ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "\n", "", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip", ":", "\n", "                ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "args", ".", "smoothing", ":", "\n", "            ", "TARGETS", ".", "append", "(", "target", ".", "argmax", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "TARGETS", ".", "append", "(", "target", ")", "\n", "\n", "", "pred", "=", "logits", ".", "softmax", "(", "1", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "IMGIDS", ".", "append", "(", "imgid", ")", "\n", "\n", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "train_loss", ".", "append", "(", "loss_np", ")", "\n", "bar", ".", "set_description", "(", "'train_loss: %.5f'", "%", "(", "loss_np", ")", ")", "\n", "\n", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "IMGIDS", "=", "[", "i", "for", "sub", "in", "IMGIDS", "for", "i", "in", "sub", "]", "\n", "\n", "acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "bleu", "=", "calculate_bleu_score", "(", "PREDS", ",", "TARGETS", ",", "idx2ans", ")", "\n", "\n", "return", "np", ".", "mean", "(", "train_loss", ")", ",", "PREDS", ",", "acc", ",", "bleu", ",", "IMGIDS", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.validate": [[672, 746], ["model.eval", "tqdm.tqdm", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.mean", "utils.calculate_bleu_score", "utils.calculate_bleu_score", "utils.calculate_bleu_score", "utils.calculate_bleu_score", "utils.calculate_bleu_score", "utils.calculate_bleu_score", "utils.calculate_bleu_score", "question_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "criterion.detach().cpu().numpy", "logits.softmax().argmax().detach", "torch.cat().cpu().numpy.append", "np.mean.append", "tqdm.tqdm.set_description", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "img.to", "question_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "target.to", "model", "criterion", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "criterion", "criterion.detach().cpu", "logits.softmax().argmax", "target.argmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "criterion.detach", "logits.softmax"], "function", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score"], ["", "def", "validate", "(", "loader", ",", "model", ",", "criterion", ",", "device", ",", "scaler", ",", "args", ",", "val_df", ",", "idx2ans", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "val_loss", "=", "[", "]", "\n", "\n", "PREDS", "=", "[", "]", "\n", "TARGETS", "=", "[", "]", "\n", "bar", "=", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ",", "_", ")", "in", "bar", ":", "\n", "\n", "            ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "question_token", "=", "question_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                    ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "", "", "else", ":", "\n", "                ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "\n", "", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred", "=", "logits", ".", "softmax", "(", "1", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "\n", "if", "args", ".", "smoothing", ":", "\n", "                ", "TARGETS", ".", "append", "(", "target", ".", "argmax", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "TARGETS", ".", "append", "(", "target", ")", "\n", "\n", "", "val_loss", ".", "append", "(", "loss_np", ")", "\n", "\n", "bar", ".", "set_description", "(", "'val_loss: %.5f'", "%", "(", "loss_np", ")", ")", "\n", "\n", "", "val_loss", "=", "np", ".", "mean", "(", "val_loss", ")", "\n", "\n", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# Calculate total and category wise accuracy", "\n", "if", "args", ".", "category", ":", "\n", "        ", "acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "bleu", "=", "calculate_bleu_score", "(", "PREDS", ",", "TARGETS", ",", "idx2ans", ")", "\n", "", "else", ":", "\n", "        ", "total_acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "binary_acc", "=", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'binary'", "]", "==", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'binary'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "plane_acc", "=", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'plane'", "]", "==", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'plane'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "organ_acc", "=", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'organ'", "]", "==", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'organ'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "modality_acc", "=", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'modality'", "]", "==", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'modality'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "abnorm_acc", "=", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'abnormality'", "]", "==", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'abnormality'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "\n", "acc", "=", "{", "'val_total_acc'", ":", "np", ".", "round", "(", "total_acc", ",", "4", ")", ",", "'val_binary_acc'", ":", "np", ".", "round", "(", "binary_acc", ",", "4", ")", ",", "'val_plane_acc'", ":", "np", ".", "round", "(", "plane_acc", ",", "4", ")", ",", "'val_organ_acc'", ":", "np", ".", "round", "(", "organ_acc", ",", "4", ")", ",", "\n", "'val_modality_acc'", ":", "np", ".", "round", "(", "modality_acc", ",", "4", ")", ",", "'val_abnorm_acc'", ":", "np", ".", "round", "(", "abnorm_acc", ",", "4", ")", "}", "\n", "\n", "# add bleu score code", "\n", "total_bleu", "=", "calculate_bleu_score", "(", "PREDS", ",", "TARGETS", ",", "idx2ans", ")", "\n", "plane_bleu", "=", "calculate_bleu_score", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'plane'", "]", ",", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'plane'", "]", ",", "idx2ans", ")", "\n", "binary_bleu", "=", "calculate_bleu_score", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'binary'", "]", ",", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'binary'", "]", ",", "idx2ans", ")", "\n", "organ_bleu", "=", "calculate_bleu_score", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'organ'", "]", ",", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'organ'", "]", ",", "idx2ans", ")", "\n", "modality_bleu", "=", "calculate_bleu_score", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'modality'", "]", ",", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'modality'", "]", ",", "idx2ans", ")", "\n", "abnorm_bleu", "=", "calculate_bleu_score", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'abnormality'", "]", ",", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'abnormality'", "]", ",", "idx2ans", ")", "\n", "\n", "\n", "bleu", "=", "{", "'val_total_bleu'", ":", "np", ".", "round", "(", "total_bleu", ",", "4", ")", ",", "'val_binary_bleu'", ":", "np", ".", "round", "(", "binary_bleu", ",", "4", ")", ",", "'val_plane_bleu'", ":", "np", ".", "round", "(", "plane_bleu", ",", "4", ")", ",", "'val_organ_bleu'", ":", "np", ".", "round", "(", "organ_bleu", ",", "4", ")", ",", "\n", "'val_modality_bleu'", ":", "np", ".", "round", "(", "modality_bleu", ",", "4", ")", ",", "'val_abnorm_bleu'", ":", "np", ".", "round", "(", "abnorm_bleu", ",", "4", ")", "}", "\n", "\n", "", "return", "val_loss", ",", "PREDS", ",", "acc", ",", "bleu", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.test": [[747, 818], ["model.eval", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "numpy.mean", "utils.calculate_bleu_score", "utils.calculate_bleu_score", "utils.calculate_bleu_score", "utils.calculate_bleu_score", "utils.calculate_bleu_score", "utils.calculate_bleu_score", "utils.calculate_bleu_score", "question_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "criterion.detach().cpu().numpy", "np.mean.append", "logits.softmax().argmax().detach", "torch.cat().cpu().numpy.append", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "img.to", "question_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "target.to", "model", "criterion", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "criterion", "criterion.detach().cpu", "logits.softmax().argmax", "target.argmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "criterion.detach", "logits.softmax"], "function", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score"], ["", "def", "test", "(", "loader", ",", "model", ",", "criterion", ",", "device", ",", "scaler", ",", "args", ",", "val_df", ",", "idx2ans", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "PREDS", "=", "[", "]", "\n", "TARGETS", "=", "[", "]", "\n", "\n", "test_loss", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ",", "_", ")", "in", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", ":", "\n", "\n", "            ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "question_token", "=", "question_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                    ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "", "", "else", ":", "\n", "                ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "\n", "", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "test_loss", ".", "append", "(", "loss_np", ")", "\n", "\n", "pred", "=", "logits", ".", "softmax", "(", "1", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "\n", "if", "args", ".", "smoothing", ":", "\n", "                ", "TARGETS", ".", "append", "(", "target", ".", "argmax", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "TARGETS", ".", "append", "(", "target", ")", "\n", "\n", "", "", "test_loss", "=", "np", ".", "mean", "(", "test_loss", ")", "\n", "\n", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "category", ":", "\n", "        ", "acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "bleu", "=", "calculate_bleu_score", "(", "PREDS", ",", "TARGETS", ",", "idx2ans", ")", "\n", "", "else", ":", "\n", "        ", "total_acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "binary_acc", "=", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'binary'", "]", "==", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'binary'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "plane_acc", "=", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'plane'", "]", "==", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'plane'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "organ_acc", "=", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'organ'", "]", "==", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'organ'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "modality_acc", "=", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'modality'", "]", "==", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'modality'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "abnorm_acc", "=", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'abnormality'", "]", "==", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'abnormality'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "\n", "acc", "=", "{", "'total_acc'", ":", "np", ".", "round", "(", "total_acc", ",", "4", ")", ",", "'binary_acc'", ":", "np", ".", "round", "(", "binary_acc", ",", "4", ")", ",", "'plane_acc'", ":", "np", ".", "round", "(", "plane_acc", ",", "4", ")", ",", "'organ_acc'", ":", "np", ".", "round", "(", "organ_acc", ",", "4", ")", ",", "\n", "'modality_acc'", ":", "np", ".", "round", "(", "modality_acc", ",", "4", ")", ",", "'abnorm_acc'", ":", "np", ".", "round", "(", "abnorm_acc", ",", "4", ")", "}", "\n", "\n", "# add bleu score code", "\n", "total_bleu", "=", "calculate_bleu_score", "(", "PREDS", ",", "TARGETS", ",", "idx2ans", ")", "\n", "binary_bleu", "=", "calculate_bleu_score", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'binary'", "]", ",", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'binary'", "]", ",", "idx2ans", ")", "\n", "plane_bleu", "=", "calculate_bleu_score", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'plane'", "]", ",", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'plane'", "]", ",", "idx2ans", ")", "\n", "organ_bleu", "=", "calculate_bleu_score", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'organ'", "]", ",", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'organ'", "]", ",", "idx2ans", ")", "\n", "modality_bleu", "=", "calculate_bleu_score", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'modality'", "]", ",", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'modality'", "]", ",", "idx2ans", ")", "\n", "abnorm_bleu", "=", "calculate_bleu_score", "(", "PREDS", "[", "val_df", "[", "'category'", "]", "==", "'abnormality'", "]", ",", "TARGETS", "[", "val_df", "[", "'category'", "]", "==", "'abnormality'", "]", ",", "idx2ans", ")", "\n", "\n", "\n", "bleu", "=", "{", "'total_bleu'", ":", "np", ".", "round", "(", "total_bleu", ",", "4", ")", ",", "'binary_bleu'", ":", "np", ".", "round", "(", "binary_bleu", ",", "4", ")", ",", "'plane_bleu'", ":", "np", ".", "round", "(", "plane_bleu", ",", "4", ")", ",", "'organ_bleu'", ":", "np", ".", "round", "(", "organ_bleu", ",", "4", ")", ",", "\n", "'modality_bleu'", ":", "np", ".", "round", "(", "modality_bleu", ",", "4", ")", ",", "'abnorm_bleu'", ":", "np", ".", "round", "(", "abnorm_bleu", ",", "4", ")", "}", "\n", "\n", "\n", "", "return", "test_loss", ",", "PREDS", ",", "acc", ",", "bleu", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.final_test": [[819, 847], ["numpy.concatenate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "question_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "enumerate", "np.concatenate.append", "img.to", "question_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "target.to", "model", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "logits.detach().cpu().numpy", "len", "logits.detach().cpu().numpy", "len", "logits.detach().cpu", "logits.detach().cpu", "logits.detach", "logits.detach"], "function", ["None"], ["", "def", "final_test", "(", "loader", ",", "all_models", ",", "device", ",", "args", ",", "val_df", ",", "idx2ans", ")", ":", "\n", "\n", "    ", "PREDS", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ")", "in", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", ":", "\n", "\n", "            ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "question_token", "=", "question_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "\n", "for", "i", ",", "model", "in", "enumerate", "(", "all_models", ")", ":", "\n", "                ", "if", "args", ".", "mixed_precision", ":", "\n", "                    ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                        ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "", "", "else", ":", "\n", "                    ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "pred", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "len", "(", "all_models", ")", "\n", "", "else", ":", "\n", "                    ", "pred", "+=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "len", "(", "all_models", ")", "\n", "\n", "", "", "PREDS", ".", "append", "(", "pred", ")", "\n", "\n", "", "", "PREDS", "=", "np", ".", "concatenate", "(", "PREDS", ")", "\n", "\n", "return", "PREDS", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.test2020": [[848, 879], ["model.eval", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "question_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "logits.softmax().argmax().detach", "torch.cat().cpu().numpy.append", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "img.to", "question_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "model", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "logits.softmax().argmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logits.softmax"], "function", ["None"], ["", "def", "test2020", "(", "loader", ",", "model", ",", "device", ",", "args", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "PREDS", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "in", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", ":", "\n", "\n", "            ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", "\n", "question_token", "=", "question_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                    ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "# logits = model(img)", "\n", "", "", "else", ":", "\n", "                ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "# logits = model(img)", "\n", "\n", "\n", "", "pred", "=", "logits", ".", "softmax", "(", "1", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "\n", "\n", "", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "return", "PREDS", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.validate2020": [[881, 933], ["model.eval", "tqdm.tqdm", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "utils.calculate_bleu_score", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.mean", "question_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "criterion.detach().cpu().numpy", "logits.softmax().argmax().detach", "torch.cat().cpu().numpy.append", "np.mean.append", "tqdm.tqdm.set_description", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "img.to", "question_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "target.to", "model", "criterion", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "criterion", "criterion.detach().cpu", "logits.softmax().argmax", "target.argmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "criterion.detach", "logits.softmax"], "function", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score"], ["", "def", "validate2020", "(", "loader", ",", "model", ",", "criterion", ",", "device", ",", "scaler", ",", "args", ",", "val_df", ",", "idx2ans", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "val_loss", "=", "[", "]", "\n", "\n", "PREDS", "=", "[", "]", "\n", "TARGETS", "=", "[", "]", "\n", "bar", "=", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ",", "_", ")", "in", "bar", ":", "\n", "\n", "            ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "question_token", "=", "question_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                    ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "", "", "else", ":", "\n", "                ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "\n", "", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred", "=", "logits", ".", "softmax", "(", "1", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "\n", "if", "args", ".", "smoothing", ":", "\n", "                ", "TARGETS", ".", "append", "(", "target", ".", "argmax", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "TARGETS", ".", "append", "(", "target", ")", "\n", "\n", "", "val_loss", ".", "append", "(", "loss_np", ")", "\n", "\n", "bar", ".", "set_description", "(", "'val_loss: %.5f'", "%", "(", "loss_np", ")", ")", "\n", "\n", "", "val_loss", "=", "np", ".", "mean", "(", "val_loss", ")", "\n", "\n", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "bleu", "=", "calculate_bleu_score", "(", "PREDS", ",", "TARGETS", ",", "idx2ans", ")", "\n", "\n", "\n", "\n", "return", "val_loss", ",", "PREDS", ",", "acc", ",", "bleu", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.val_img_only": [[934, 986], ["model.eval", "tqdm.tqdm", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "utils.calculate_bleu_score", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.mean", "criterion.detach().cpu().numpy", "model.softmax().argmax().detach", "torch.cat().cpu().numpy.append", "np.mean.append", "tqdm.tqdm.set_description", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "img.to", "question_token.to", "segment_ids.to", "attention_mask.to", "target.to", "model", "criterion", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "criterion", "criterion.detach().cpu", "model.softmax().argmax", "target.argmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "criterion.detach", "model.softmax"], "function", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score"], ["", "def", "val_img_only", "(", "loader", ",", "model", ",", "criterion", ",", "device", ",", "scaler", ",", "args", ",", "val_df", ",", "idx2ans", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "val_loss", "=", "[", "]", "\n", "\n", "PREDS", "=", "[", "]", "\n", "TARGETS", "=", "[", "]", "\n", "bar", "=", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ",", "_", ")", "in", "bar", ":", "\n", "\n", "            ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "# question_token = question_token.squeeze(1)", "\n", "# attention_mask = attention_mask.squeeze(1)", "\n", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                    ", "logits", "=", "model", "(", "img", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "", "", "else", ":", "\n", "                ", "logits", "=", "model", "(", "img", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "\n", "", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred", "=", "logits", ".", "softmax", "(", "1", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "\n", "if", "args", ".", "smoothing", ":", "\n", "                ", "TARGETS", ".", "append", "(", "target", ".", "argmax", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "TARGETS", ".", "append", "(", "target", ")", "\n", "\n", "", "val_loss", ".", "append", "(", "loss_np", ")", "\n", "\n", "bar", ".", "set_description", "(", "'val_loss: %.5f'", "%", "(", "loss_np", ")", ")", "\n", "\n", "", "val_loss", "=", "np", ".", "mean", "(", "val_loss", ")", "\n", "\n", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "bleu", "=", "calculate_bleu_score", "(", "PREDS", ",", "TARGETS", ",", "idx2ans", ")", "\n", "\n", "\n", "\n", "return", "val_loss", ",", "PREDS", ",", "acc", ",", "bleu", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.test_img_only": [[987, 1026], ["model.eval", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "utils.calculate_bleu_score", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "numpy.mean", "model.softmax().argmax().detach", "criterion.detach().cpu().numpy", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "np.mean.append", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "img.to", "question_token.to", "segment_ids.to", "attention_mask.to", "target.to", "model", "criterion", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "criterion", "model.softmax().argmax", "criterion.detach().cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.softmax", "criterion.detach"], "function", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score"], ["", "def", "test_img_only", "(", "loader", ",", "model", ",", "criterion", ",", "device", ",", "scaler", ",", "args", ",", "test_df", ",", "idx2ans", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "TARGETS", "=", "[", "]", "\n", "PREDS", "=", "[", "]", "\n", "test_loss", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ",", "_", ")", "in", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", ":", "\n", "\n", "            ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "# question_token = question_token.squeeze(1)", "\n", "# attention_mask = attention_mask.squeeze(1)", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                    ", "logits", "=", "model", "(", "img", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "", "", "else", ":", "\n", "                ", "logits", "=", "model", "(", "img", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "\n", "", "pred", "=", "logits", ".", "softmax", "(", "1", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "TARGETS", ".", "append", "(", "target", ")", "\n", "test_loss", ".", "append", "(", "loss_np", ")", "\n", "\n", "", "test_loss", "=", "np", ".", "mean", "(", "test_loss", ")", "\n", "\n", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "bleu", "=", "calculate_bleu_score", "(", "PREDS", ",", "TARGETS", ",", "idx2ans", ")", "\n", "\n", "return", "test_loss", ",", "PREDS", ",", "acc", ",", "bleu", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.train_img_only": [[1029, 1091], ["model.train", "tqdm.tqdm", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "utils.calculate_bleu_score", "optimizer.zero_grad", "model.softmax().argmax().detach", "torch.cat().cpu().numpy.append", "IMGIDS.append", "loss_func.detach().cpu().numpy", "train_loss.append", "tqdm.tqdm.set_description", "numpy.mean", "img.to", "question_token.to", "segment_ids.to", "attention_mask.to", "target.to", "model", "loss_func", "scaler.scale", "loss_func.backward", "scaler.step", "scaler.update", "loss_func.backward", "optimizer.step", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "loss_func", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "target.argmax", "model.softmax().argmax", "loss_func.detach().cpu", "model.parameters", "model.parameters", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.softmax", "loss_func.detach"], "function", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.loss_func", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.loss_func"], ["", "def", "train_img_only", "(", "loader", ",", "model", ",", "optimizer", ",", "criterion", ",", "device", ",", "scaler", ",", "args", ",", "idx2ans", ")", ":", "\n", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "[", "]", "\n", "PREDS", "=", "[", "]", "\n", "TARGETS", "=", "[", "]", "\n", "IMGIDS", "=", "[", "]", "\n", "bar", "=", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", "\n", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ",", "imgid", ")", "in", "bar", ":", "\n", "\n", "        ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "# question_token = question_token.squeeze(1)", "\n", "# attention_mask = attention_mask.squeeze(1)", "\n", "loss_func", "=", "criterion", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                ", "logits", "=", "model", "(", "img", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "target", ")", "\n", "", "", "else", ":", "\n", "            ", "logits", "=", "model", "(", "img", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "target", ")", "\n", "\n", "", "if", "args", ".", "mixed_precision", ":", "\n", "            ", "scaler", ".", "scale", "(", "loss", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip", ":", "\n", "                ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "\n", "", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip", ":", "\n", "                ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "args", ".", "smoothing", ":", "\n", "            ", "TARGETS", ".", "append", "(", "target", ".", "argmax", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "TARGETS", ".", "append", "(", "target", ")", "\n", "\n", "", "pred", "=", "logits", ".", "softmax", "(", "1", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "\n", "IMGIDS", ".", "append", "(", "imgid", ")", "\n", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "train_loss", ".", "append", "(", "loss_np", ")", "\n", "bar", ".", "set_description", "(", "'train_loss: %.5f'", "%", "(", "loss_np", ")", ")", "\n", "\n", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "IMGIDS", "=", "[", "i", "for", "sub", "in", "IMGIDS", "for", "i", "in", "sub", "]", "\n", "\n", "acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "bleu", "=", "calculate_bleu_score", "(", "PREDS", ",", "TARGETS", ",", "idx2ans", ")", "\n", "\n", "return", "np", ".", "mean", "(", "train_loss", ")", ",", "PREDS", ",", "acc", ",", "bleu", ",", "IMGIDS", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.train_binary": [[1092, 1155], ["model.train", "tqdm.tqdm", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "question_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "optimizer.zero_grad", "logits.softmax().argmax().detach", "torch.cat().cpu().numpy.append", "IMGIDS.append", "loss_func.detach().cpu().numpy", "train_loss.append", "tqdm.tqdm.set_description", "numpy.mean", "img.to", "question_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "target.to", "model", "loss_func", "scaler.scale", "loss_func.backward", "scaler.step", "scaler.update", "loss_func.backward", "optimizer.step", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "loss_func", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "target.argmax", "logits.softmax().argmax", "loss_func.detach().cpu", "model.parameters", "model.parameters", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logits.softmax", "loss_func.detach"], "function", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.loss_func", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.loss_func"], ["", "def", "train_binary", "(", "loader", ",", "model", ",", "optimizer", ",", "criterion", ",", "device", ",", "scaler", ",", "args", ",", "idx2ans", ")", ":", "\n", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "[", "]", "\n", "PREDS", "=", "[", "]", "\n", "TARGETS", "=", "[", "]", "\n", "IMGIDS", "=", "[", "]", "\n", "bar", "=", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", "\n", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ",", "imgid", ")", "in", "bar", ":", "\n", "\n", "        ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "question_token", "=", "question_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "loss_func", "=", "criterion", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "# logits = model(img)", "\n", "                ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "target", ")", "\n", "", "", "else", ":", "\n", "# logits = model(img)", "\n", "            ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "target", ")", "\n", "\n", "", "if", "args", ".", "mixed_precision", ":", "\n", "            ", "scaler", ".", "scale", "(", "loss", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip", ":", "\n", "                ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "\n", "", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip", ":", "\n", "                ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "args", ".", "smoothing", ":", "\n", "            ", "TARGETS", ".", "append", "(", "target", ".", "argmax", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "TARGETS", ".", "append", "(", "target", ")", "\n", "\n", "", "pred", "=", "logits", ".", "softmax", "(", "1", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "\n", "IMGIDS", ".", "append", "(", "imgid", ")", "\n", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "train_loss", ".", "append", "(", "loss_np", ")", "\n", "bar", ".", "set_description", "(", "'train_loss: %.5f'", "%", "(", "loss_np", ")", ")", "\n", "\n", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "IMGIDS", "=", "[", "i", "for", "sub", "in", "IMGIDS", "for", "i", "in", "sub", "]", "\n", "\n", "acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "\n", "return", "np", ".", "mean", "(", "train_loss", ")", ",", "PREDS", ",", "acc", ",", "IMGIDS", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqamed2019.utils.val_binary": [[1156, 1207], ["model.eval", "tqdm.tqdm", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.mean", "question_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "criterion.detach().cpu().numpy", "logits.softmax().argmax().detach", "torch.cat().cpu().numpy.append", "np.mean.append", "tqdm.tqdm.set_description", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "img.to", "question_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "target.to", "model", "criterion", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "criterion", "criterion.detach().cpu", "logits.softmax().argmax", "target.argmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "criterion.detach", "logits.softmax"], "function", ["None"], ["", "def", "val_binary", "(", "loader", ",", "model", ",", "criterion", ",", "device", ",", "scaler", ",", "args", ",", "val_df", ",", "idx2ans", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "val_loss", "=", "[", "]", "\n", "\n", "PREDS", "=", "[", "]", "\n", "TARGETS", "=", "[", "]", "\n", "bar", "=", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ",", "_", ")", "in", "bar", ":", "\n", "\n", "            ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "question_token", "=", "question_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "# logits = model(img)", "\n", "                    ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "", "", "else", ":", "\n", "# logits = model(img)", "\n", "                ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "\n", "", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred", "=", "logits", ".", "softmax", "(", "1", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "\n", "if", "args", ".", "smoothing", ":", "\n", "                ", "TARGETS", ".", "append", "(", "target", ".", "argmax", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "TARGETS", ".", "append", "(", "target", ")", "\n", "\n", "", "val_loss", ".", "append", "(", "loss_np", ")", "\n", "\n", "bar", ".", "set_description", "(", "'val_loss: %.5f'", "%", "(", "loss_np", ")", ")", "\n", "\n", "", "val_loss", "=", "np", ".", "mean", "(", "val_loss", ")", "\n", "\n", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "\n", "return", "val_loss", ",", "PREDS", ",", "acc", "", "", ""]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.LabelSmoothing.__init__": [[103, 107], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "smoothing", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.LabelSmoothing.forward": [[108, 124], ["x.float.float.float", "target.float.float.float", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.sum.sum.sum", "loss.mean", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "x", "=", "x", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", "*", "target", "\n", "nll_loss", "=", "nll_loss", ".", "sum", "(", "-", "1", ")", "\n", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "x", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.VQAMed.__init__": [[127, 133], ["transformers.BertTokenizer.from_pretrained"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "df", ",", "tfm", ",", "args", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "df", "=", "df", ".", "values", "\n", "self", ".", "tfm", "=", "tfm", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.VQAMed.__len__": [[134, 136], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.VQAMed.__getitem__": [[137, 159], ["PIL.Image.open", "utils_vqarad.encode_text", "utils_vqarad.VQAMed.tokenizer.tokenize", "utils_vqarad.VQAMed.tfm", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.encode_text"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "path", "=", "self", ".", "df", "[", "idx", ",", "1", "]", "\n", "question", "=", "self", ".", "df", "[", "idx", ",", "6", "]", "\n", "answer", "=", "self", ".", "df", "[", "idx", ",", "3", "]", "\n", "\n", "if", "self", ".", "mode", "==", "'eval'", ":", "\n", "            ", "tok_ques", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "question", ")", "\n", "\n", "", "img", "=", "Image", ".", "open", "(", "path", ")", "\n", "\n", "\n", "if", "self", ".", "tfm", ":", "\n", "            ", "img", "=", "self", ".", "tfm", "(", "img", ")", "\n", "\n", "\n", "", "tokens", ",", "segment_ids", ",", "input_mask", "=", "encode_text", "(", "question", ",", "self", ".", "tokenizer", ",", "self", ".", "args", ")", "\n", "\n", "\n", "if", "self", ".", "mode", "!=", "'eval'", ":", "\n", "            ", "return", "img", ",", "torch", ".", "tensor", "(", "tokens", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "segment_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "input_mask", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "answer", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "torch", ".", "tensor", "(", "tokens", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "segment_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "input_mask", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "answer", ",", "dtype", "=", "torch", ".", "long", ")", ",", "tok_ques", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.Embeddings.__init__": [[173, 182], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Embeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "args", ".", "vocab_size", ",", "128", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "word_embeddings_2", "=", "nn", ".", "Linear", "(", "128", ",", "args", ".", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "args", ".", "max_position_embeddings", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "type_embeddings", "=", "nn", ".", "Embedding", "(", "3", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "args", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "len", "=", "args", ".", "max_position_embeddings", "\n", "", "def", "forward", "(", "self", ",", "input_ids", ",", "segment_ids", ",", "position_ids", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.Embeddings.forward": [[182, 198], ["utils_vqarad.Embeddings.word_embeddings", "utils_vqarad.Embeddings.word_embeddings_2", "utils_vqarad.Embeddings.position_embeddings", "utils_vqarad.Embeddings.type_embeddings", "utils_vqarad.Embeddings.LayerNorm", "utils_vqarad.Embeddings.dropout", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.arange.unsqueeze().expand_as", "torch.arange.unsqueeze().expand_as", "torch.arange.unsqueeze().expand_as", "torch.arange.unsqueeze().expand_as", "torch.arange.unsqueeze().expand_as", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "segment_ids", ",", "position_ids", "=", "None", ")", ":", "\n", "        ", "if", "position_ids", "is", "None", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "position_ids", "=", "torch", ".", "arange", "(", "self", ".", "len", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "position_ids", "=", "torch", ".", "arange", "(", "self", ".", "len", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "words_embeddings", "=", "self", ".", "word_embeddings_2", "(", "words_embeddings", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "type_embeddings", "(", "segment_ids", ")", "\n", "embeddings", "=", "words_embeddings", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.Transfer.__init__": [[201, 219], ["torch.Module.__init__", "torchvision.models.resnet152", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Transfer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "model", "=", "models", ".", "resnet152", "(", "pretrained", "=", "True", ")", "\n", "# for p in self.parameters():", "\n", "#     p.requires_grad=False", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2048", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap2", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "1024", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap3", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "512", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap4", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "256", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap5", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "64", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap7", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.Transfer.forward": [[219, 236], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils_vqarad.Transfer.gap2().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils_vqarad.Transfer.gap3().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils_vqarad.Transfer.gap4().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils_vqarad.Transfer.gap5().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils_vqarad.Transfer.gap7().view", "list", "list", "list", "list", "list", "utils_vqarad.Transfer.model.children", "utils_vqarad.Transfer.gap2", "utils_vqarad.Transfer.model.children", "utils_vqarad.Transfer.gap3", "utils_vqarad.Transfer.model.children", "utils_vqarad.Transfer.gap4", "utils_vqarad.Transfer.model.children", "utils_vqarad.Transfer.gap5", "utils_vqarad.Transfer.model.children", "utils_vqarad.Transfer.gap7", "utils_vqarad.Transfer.relu", "utils_vqarad.Transfer.relu", "utils_vqarad.Transfer.relu", "utils_vqarad.Transfer.relu", "utils_vqarad.Transfer.relu", "utils_vqarad.Transfer.conv2", "utils_vqarad.Transfer.conv3", "utils_vqarad.Transfer.conv4", "utils_vqarad.Transfer.conv5", "utils_vqarad.Transfer.conv7", "torch.Sequential.", "torch.Sequential.", "torch.Sequential.", "torch.Sequential.", "torch.Sequential."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "modules2", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", "\n", "fix2", "=", "nn", ".", "Sequential", "(", "*", "modules2", ")", "\n", "v_2", "=", "self", ".", "gap2", "(", "self", ".", "relu", "(", "self", ".", "conv2", "(", "fix2", "(", "img", ")", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "modules3", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "3", "]", "\n", "fix3", "=", "nn", ".", "Sequential", "(", "*", "modules3", ")", "\n", "v_3", "=", "self", ".", "gap3", "(", "self", ".", "relu", "(", "self", ".", "conv3", "(", "fix3", "(", "img", ")", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "modules4", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "4", "]", "\n", "fix4", "=", "nn", ".", "Sequential", "(", "*", "modules4", ")", "\n", "v_4", "=", "self", ".", "gap4", "(", "self", ".", "relu", "(", "self", ".", "conv4", "(", "fix4", "(", "img", ")", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "modules5", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "5", "]", "\n", "fix5", "=", "nn", ".", "Sequential", "(", "*", "modules5", ")", "\n", "v_5", "=", "self", ".", "gap5", "(", "self", ".", "relu", "(", "self", ".", "conv5", "(", "fix5", "(", "img", ")", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "modules7", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "7", "]", "\n", "fix7", "=", "nn", ".", "Sequential", "(", "*", "modules7", ")", "\n", "v_7", "=", "self", ".", "gap7", "(", "self", ".", "relu", "(", "self", ".", "conv7", "(", "fix7", "(", "img", ")", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "return", "v_2", ",", "v_3", ",", "v_4", ",", "v_5", ",", "v_7", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.MultiHeadedSelfAttention.__init__": [[238, 246], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "MultiHeadedSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj_q", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "proj_k", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "proj_v", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "args", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "scores", "=", "None", "\n", "self", ".", "n_heads", "=", "args", ".", "heads", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.MultiHeadedSelfAttention.forward": [[246, 258], ["utils_vqarad.MultiHeadedSelfAttention.drop", "utils_vqarad.MultiHeadedSelfAttention.merge_last", "utils_vqarad.MultiHeadedSelfAttention.proj_q", "utils_vqarad.MultiHeadedSelfAttention.proj_k", "utils_vqarad.MultiHeadedSelfAttention.proj_v", "utils_vqarad.MultiHeadedSelfAttention.split_last().transpose", "numpy.sqrt", "mask[].float", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "k.transpose", "k.size", "utils_vqarad.MultiHeadedSelfAttention.split_last"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.MultiHeadedSelfAttention.merge_last", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.MultiHeadedSelfAttention.split_last"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "q", ",", "k", ",", "v", "=", "self", ".", "proj_q", "(", "x", ")", ",", "self", ".", "proj_k", "(", "x", ")", ",", "self", ".", "proj_v", "(", "x", ")", "\n", "q", ",", "k", ",", "v", "=", "(", "self", ".", "split_last", "(", "x", ",", "(", "self", ".", "n_heads", ",", "-", "1", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "for", "x", "in", "[", "q", ",", "k", ",", "v", "]", ")", "\n", "scores", "=", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "/", "np", ".", "sqrt", "(", "k", ".", "size", "(", "-", "1", ")", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", ".", "float", "(", ")", "\n", "scores", "-=", "10000.0", "*", "(", "1.0", "-", "mask", ")", "\n", "", "scores", "=", "self", ".", "drop", "(", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", ")", "\n", "h", "=", "(", "scores", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "h", "=", "self", ".", "merge_last", "(", "h", ",", "2", ")", "\n", "self", ".", "scores", "=", "scores", "\n", "return", "h", ",", "scores", "\n", "", "def", "split_last", "(", "self", ",", "x", ",", "shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.MultiHeadedSelfAttention.split_last": [[258, 264], ["list", "x.view", "list.count", "int", "list.index", "x.size", "x.size", "numpy.prod"], "methods", ["None"], ["", "def", "split_last", "(", "self", ",", "x", ",", "shape", ")", ":", "\n", "        ", "shape", "=", "list", "(", "shape", ")", "\n", "assert", "shape", ".", "count", "(", "-", "1", ")", "<=", "1", "\n", "if", "-", "1", "in", "shape", ":", "\n", "            ", "shape", "[", "shape", ".", "index", "(", "-", "1", ")", "]", "=", "int", "(", "x", ".", "size", "(", "-", "1", ")", "/", "-", "np", ".", "prod", "(", "shape", ")", ")", "\n", "", "return", "x", ".", "view", "(", "*", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", ",", "*", "shape", ")", "\n", "", "def", "merge_last", "(", "self", ",", "x", ",", "n_dims", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.MultiHeadedSelfAttention.merge_last": [[264, 268], ["x.size", "x.view", "len"], "methods", ["None"], ["", "def", "merge_last", "(", "self", ",", "x", ",", "n_dims", ")", ":", "\n", "        ", "s", "=", "x", ".", "size", "(", ")", "\n", "assert", "n_dims", ">", "1", "and", "n_dims", "<", "len", "(", "s", ")", "\n", "return", "x", ".", "view", "(", "*", "s", "[", ":", "-", "n_dims", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.PositionWiseFeedForward.__init__": [[270, 274], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "PositionWiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", "*", "4", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", "*", "4", ",", "args", ".", "hidden_size", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.PositionWiseFeedForward.forward": [[274, 276], ["utils_vqarad.PositionWiseFeedForward.fc2", "utils_vqarad.gelu", "utils_vqarad.PositionWiseFeedForward.fc1"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.gelu"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fc2", "(", "gelu", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.BertLayer.__init__": [[278, 302], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "utils_vqarad.PositionWiseFeedForward", "utils_vqarad.MultiHeadedSelfAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "utils_vqarad.MultiHeadedSelfAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "utils_vqarad.MultiHeadedSelfAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "utils_vqarad.PositionWiseFeedForward", "range", "range", "utils_vqarad.PositionWiseFeedForward", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "utils_vqarad.MultiHeadedSelfAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "utils_vqarad.PositionWiseFeedForward", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "share", "=", "'all'", ",", "norm", "=", "'pre'", ")", ":", "\n", "        ", "super", "(", "BertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "share", "=", "share", "\n", "self", ".", "norm_pos", "=", "norm", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "args", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "args", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "args", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout", "(", "args", ".", "hidden_dropout_prob", ")", "\n", "if", "self", ".", "share", "==", "'ffn'", ":", "\n", "            ", "self", ".", "attention", "=", "nn", ".", "ModuleList", "(", "[", "MultiHeadedSelfAttention", "(", "args", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "proj", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "feedforward", "=", "PositionWiseFeedForward", "(", "args", ")", "\n", "", "elif", "self", ".", "share", "==", "'att'", ":", "\n", "            ", "self", ".", "attention", "=", "MultiHeadedSelfAttention", "(", "args", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "feedforward", "=", "nn", ".", "ModuleList", "(", "[", "PositionWiseFeedForward", "(", "args", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "", "elif", "self", ".", "share", "==", "'all'", ":", "\n", "            ", "self", ".", "attention", "=", "MultiHeadedSelfAttention", "(", "args", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "feedforward", "=", "PositionWiseFeedForward", "(", "args", ")", "\n", "", "elif", "self", ".", "share", "==", "'none'", ":", "\n", "            ", "self", ".", "attention", "=", "nn", ".", "ModuleList", "(", "[", "MultiHeadedSelfAttention", "(", "args", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "proj", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "feedforward", "=", "nn", ".", "ModuleList", "(", "[", "PositionWiseFeedForward", "(", "args", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "", "", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "layer_num", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.BertLayer.forward": [[302, 327], ["isinstance", "isinstance", "isinstance", "utils_vqarad.BertLayer.norm1", "isinstance", "utils_vqarad.BertLayer.norm2", "utils_vqarad.BertLayer.proj", "utils_vqarad.BertLayer.drop1", "utils_vqarad.BertLayer.feedforward", "utils_vqarad.BertLayer.drop2", "utils_vqarad.BertLayer.proj", "utils_vqarad.BertLayer.feedforward", "utils_vqarad.BertLayer.norm1", "utils_vqarad.BertLayer.attention", "utils_vqarad.BertLayer.norm1", "utils_vqarad.BertLayer.norm1", "utils_vqarad.BertLayer.attention", "utils_vqarad.BertLayer.drop1", "utils_vqarad.BertLayer.drop2", "utils_vqarad.BertLayer.norm1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "layer_num", ")", ":", "\n", "        ", "if", "self", ".", "norm_pos", "==", "'pre'", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "attention", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "attn_output", ",", "attn_scores", "=", "self", ".", "attention", "[", "layer_num", "]", "(", "self", ".", "norm1", "(", "hidden_states", ")", ",", "attention_mask", ")", "\n", "h", "=", "self", ".", "proj", "[", "layer_num", "]", "(", "attn_output", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "self", ".", "proj", "(", "self", ".", "attention", "(", "self", ".", "norm1", "(", "hidden_states", ")", ",", "attention_mask", ")", ")", "\n", "", "out", "=", "hidden_states", "+", "self", ".", "drop1", "(", "h", ")", "\n", "if", "isinstance", "(", "self", ".", "feedforward", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "h", "=", "self", ".", "feedforward", "[", "layer_num", "]", "(", "self", ".", "norm1", "(", "out", ")", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "self", ".", "feedforward", "(", "self", ".", "norm1", "(", "out", ")", ")", "\n", "", "out", "=", "out", "+", "self", ".", "drop2", "(", "h", ")", "\n", "", "if", "self", ".", "norm_pos", "==", "'post'", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "attention", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "h", "=", "self", ".", "proj", "[", "layer_num", "]", "(", "self", ".", "attention", "[", "layer_num", "]", "(", "hidden_states", ",", "attention_mask", ")", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "self", ".", "proj", "(", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ")", ")", "\n", "", "out", "=", "self", ".", "norm1", "(", "hidden_states", "+", "self", ".", "drop1", "(", "h", ")", ")", "\n", "if", "isinstance", "(", "self", ".", "feedforward", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "h", "=", "self", ".", "feedforward", "[", "layer_num", "]", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "self", ".", "feedforward", "(", "out", ")", "\n", "", "out", "=", "self", ".", "norm2", "(", "out", "+", "self", ".", "drop2", "(", "h", ")", ")", "\n", "", "return", "out", ",", "attn_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.Transformer.__init__": [[329, 338], ["torch.Module.__init__", "transformers.BertModel.from_pretrained", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils_vqarad.Transfer", "utils_vqarad.BertLayer", "list", "transformers.BertModel.from_pretrained.children"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "base_model", "=", "BertModel", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "bert_model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "base_model", ".", "children", "(", ")", ")", "[", "0", ":", "]", ")", "\n", "self", ".", "bert_embedding", "=", "bert_model", "[", "0", "]", "\n", "# self.embed = Embeddings(args)", "\n", "self", ".", "trans", "=", "Transfer", "(", "args", ")", "\n", "self", ".", "blocks", "=", "BertLayer", "(", "args", ",", "share", "=", "'none'", ",", "norm", "=", "'pre'", ")", "\n", "self", ".", "n_layers", "=", "args", ".", "n_layers", "\n", "", "def", "forward", "(", "self", ",", "img", ",", "input_ids", ",", "token_type_ids", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.Transformer.forward": [[338, 361], ["utils_vqarad.Transformer.trans", "utils_vqarad.Transformer.bert_embedding", "range", "range", "range", "range", "range", "range", "len", "len", "len", "len", "len", "utils_vqarad.Transformer.blocks", "hidden_states.append", "all_attn_scores.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "input_ids", ",", "token_type_ids", ",", "mask", ")", ":", "\n", "        ", "v_2", ",", "v_3", ",", "v_4", ",", "v_5", ",", "v_7", "=", "self", ".", "trans", "(", "img", ")", "\n", "# h = self.embed(input_ids, token_type_ids)", "\n", "h", "=", "self", ".", "bert_embedding", "(", "input_ids", "=", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "position_ids", "=", "None", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "            ", "h", "[", "i", "]", "[", "1", "]", "=", "v_2", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "            ", "h", "[", "i", "]", "[", "2", "]", "=", "v_3", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "            ", "h", "[", "i", "]", "[", "3", "]", "=", "v_4", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "            ", "h", "[", "i", "]", "[", "4", "]", "=", "v_5", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "            ", "h", "[", "i", "]", "[", "5", "]", "=", "v_7", "[", "i", "]", "\n", "\n", "", "hidden_states", "=", "[", "]", "\n", "all_attn_scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "h", ",", "attn_scores", "=", "self", ".", "blocks", "(", "h", ",", "mask", ",", "i", ")", "\n", "hidden_states", ".", "append", "(", "h", ")", "\n", "all_attn_scores", ".", "append", "(", "attn_scores", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "hidden_states", ",", "0", ")", ",", "torch", ".", "stack", "(", "all_attn_scores", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.Model.__init__": [[364, 373], ["torch.Module.__init__", "utils_vqarad.Transformer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "transformer", "=", "Transformer", "(", "args", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "activ1", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "args", ".", "hidden_size", ",", "eps", "=", "1e-12", ",", "elementwise_affine", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "vocab_size", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "img", ",", "input_ids", ",", "segment_ids", ",", "input_mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.Model.forward": [[373, 378], ["utils_vqarad.Model.transformer", "utils_vqarad.Model.activ1", "utils_vqarad.Model.classifier", "utils_vqarad.Model.fc1", "h.mean().mean", "h.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "input_ids", ",", "segment_ids", ",", "input_mask", ")", ":", "\n", "        ", "h", ",", "attn_scores", "=", "self", ".", "transformer", "(", "img", ",", "input_ids", ",", "segment_ids", ",", "input_mask", ")", "\n", "pooled_h", "=", "self", ".", "activ1", "(", "self", ".", "fc1", "(", "h", ".", "mean", "(", "0", ")", ".", "mean", "(", "1", ")", ")", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_h", ")", "\n", "return", "logits", ",", "attn_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.seed_everything": [[26, 35], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["def", "seed_everything", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.make_df": [[38, 50], ["os.listdir", "pandas.concat", "pandas.read_csv", "df_list.append", "os.path.join", "p.split", "p.split"], "function", ["None"], ["", "def", "make_df", "(", "file_path", ")", ":", "\n", "    ", "paths", "=", "os", ".", "listdir", "(", "file_path", ")", "\n", "\n", "df_list", "=", "[", "]", "\n", "\n", "for", "p", "in", "paths", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "file_path", ",", "p", ")", ",", "sep", "=", "'|'", ",", "names", "=", "[", "'img_id'", ",", "'question'", ",", "'answer'", "]", ")", "\n", "df", "[", "'category'", "]", "=", "p", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "df", "[", "'mode'", "]", "=", "p", ".", "split", "(", "'_'", ")", "[", "2", "]", "[", ":", "-", "4", "]", "\n", "df_list", ".", "append", "(", "df", ")", "\n", "\n", "", "return", "pd", ".", "concat", "(", "df_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.load_data": [[51, 73], ["open", "open", "json.load", "json.load", "pandas.DataFrame", "pandas.DataFrame", "traindf[].apply", "testdf[].apply", "traindf[].str.lower", "testdf[].str.lower", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "load_data", "(", "args", ")", ":", "\n", "\n", "    ", "train_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'trainset.json'", ")", ",", ")", "\n", "test_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'testset.json'", ")", ",", ")", "\n", "\n", "train_data", "=", "json", ".", "load", "(", "train_file", ")", "\n", "test_data", "=", "json", ".", "load", "(", "test_file", ")", "\n", "\n", "traindf", "=", "pd", ".", "DataFrame", "(", "train_data", ")", "\n", "traindf", "[", "'mode'", "]", "=", "'train'", "\n", "testdf", "=", "pd", ".", "DataFrame", "(", "test_data", ")", "\n", "testdf", "[", "'mode'", "]", "=", "'test'", "\n", "\n", "traindf", "[", "'image_name'", "]", "=", "traindf", "[", "'image_name'", "]", ".", "apply", "(", "lambda", "x", ":", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'images'", ",", "x", ")", ")", "\n", "testdf", "[", "'image_name'", "]", "=", "testdf", "[", "'image_name'", "]", ".", "apply", "(", "lambda", "x", ":", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'images'", ",", "x", ")", ")", "\n", "\n", "traindf", "[", "'question_type'", "]", "=", "traindf", "[", "'question_type'", "]", ".", "str", ".", "lower", "(", ")", "\n", "testdf", "[", "'question_type'", "]", "=", "testdf", "[", "'question_type'", "]", ".", "str", ".", "lower", "(", ")", "\n", "\n", "\n", "\n", "return", "traindf", ",", "testdf", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.gelu": [[76, 78], ["torch.erf", "torch.erf", "torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.encode_text": [[80, 95], ["tokens.extend", "segment_ids.extend", "input_mask.extend", "tokenizer.encode", "len", "len", "range", "len", "len"], "function", ["None"], ["", "def", "encode_text", "(", "caption", ",", "tokenizer", ",", "args", ")", ":", "\n", "    ", "part1", "=", "[", "0", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "#get token ids and remove [CLS] and [SEP] token id", "\n", "part2", "=", "tokenizer", ".", "encode", "(", "caption", ")", "[", "1", ":", "-", "1", "]", "\n", "\n", "tokens", "=", "[", "tokenizer", ".", "cls_token_id", "]", "+", "part1", "+", "[", "tokenizer", ".", "sep_token_id", "]", "+", "part2", "[", ":", "args", ".", "max_position_embeddings", "-", "8", "]", "+", "[", "tokenizer", ".", "sep_token_id", "]", "\n", "segment_ids", "=", "[", "0", "]", "*", "(", "len", "(", "part1", ")", "+", "2", ")", "+", "[", "1", "]", "*", "(", "len", "(", "part2", "[", ":", "args", ".", "max_position_embeddings", "-", "8", "]", ")", "+", "1", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "tokens", ")", "\n", "n_pad", "=", "args", ".", "max_position_embeddings", "-", "len", "(", "tokens", ")", "\n", "tokens", ".", "extend", "(", "[", "0", "]", "*", "n_pad", ")", "\n", "segment_ids", ".", "extend", "(", "[", "0", "]", "*", "n_pad", ")", "\n", "input_mask", ".", "extend", "(", "[", "0", "]", "*", "n_pad", ")", "\n", "\n", "\n", "return", "tokens", ",", "segment_ids", ",", "input_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.onehot": [[96, 100], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "onehot", "(", "size", ",", "target", ")", ":", "\n", "    ", "vec", "=", "torch", ".", "zeros", "(", "size", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "vec", "[", "target", "]", "=", "1.", "\n", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.calculate_bleu_score": [[164, 169], ["numpy.asarray", "numpy.mean", "nltk.translate.bleu_score.sentence_bleu", "idx2ans[].split", "zip", "idx2ans[].split"], "function", ["None"], ["", "", "", "def", "calculate_bleu_score", "(", "preds", ",", "targets", ",", "idx2ans", ")", ":", "\n", "\n", "    ", "bleu_per_answer", "=", "np", ".", "asarray", "(", "[", "sentence_bleu", "(", "[", "idx2ans", "[", "target", "]", ".", "split", "(", ")", "]", ",", "idx2ans", "[", "pred", "]", ".", "split", "(", ")", ",", "weights", "=", "[", "1", "]", ")", "for", "pred", ",", "target", "in", "zip", "(", "preds", ",", "targets", ")", "]", ")", "\n", "\n", "return", "np", ".", "mean", "(", "bleu_per_answer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.train_one_epoch": [[382, 446], ["model.train", "tqdm.tqdm", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "question_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "optimizer.zero_grad", "logits.softmax().argmax().detach", "torch.cat().cpu().numpy.append", "loss_func.detach().cpu().numpy", "train_loss.append", "tqdm.tqdm.set_description", "numpy.round", "numpy.round", "numpy.round", "numpy.mean", "img.to", "question_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "target.to", "model", "loss_func", "scaler.scale", "loss_func.backward", "scaler.step", "scaler.update", "loss_func.backward", "optimizer.step", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "loss_func", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "logits.softmax().argmax", "target.argmax", "loss_func.detach().cpu", "model.parameters", "model.parameters", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logits.softmax", "loss_func.detach"], "function", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.loss_func", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.loss_func"], ["", "", "def", "train_one_epoch", "(", "loader", ",", "model", ",", "optimizer", ",", "criterion", ",", "device", ",", "scaler", ",", "args", ",", "train_df", ",", "idx2ans", ")", ":", "\n", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "[", "]", "\n", "\n", "PREDS", "=", "[", "]", "\n", "TARGETS", "=", "[", "]", "\n", "\n", "bar", "=", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", "\n", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ")", "in", "bar", ":", "\n", "\n", "        ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "question_token", "=", "question_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "loss_func", "=", "criterion", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                ", "logits", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "target", ")", "\n", "", "", "else", ":", "\n", "            ", "logits", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "target", ")", "\n", "\n", "", "if", "args", ".", "mixed_precision", ":", "\n", "            ", "scaler", ".", "scale", "(", "loss", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip", ":", "\n", "                ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "\n", "", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip", ":", "\n", "                ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "pred", "=", "logits", ".", "softmax", "(", "1", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "if", "args", ".", "smoothing", ":", "\n", "            ", "TARGETS", ".", "append", "(", "target", ".", "argmax", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "TARGETS", ".", "append", "(", "target", ")", "\n", "\n", "", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "train_loss", ".", "append", "(", "loss_np", ")", "\n", "bar", ".", "set_description", "(", "'train_loss: %.5f'", "%", "(", "loss_np", ")", ")", "\n", "\n", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "total_acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "closed_acc", "=", "(", "PREDS", "[", "train_df", "[", "'answer_type'", "]", "==", "'CLOSED'", "]", "==", "TARGETS", "[", "train_df", "[", "'answer_type'", "]", "==", "'CLOSED'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "open_acc", "=", "(", "PREDS", "[", "train_df", "[", "'answer_type'", "]", "==", "'OPEN'", "]", "==", "TARGETS", "[", "train_df", "[", "'answer_type'", "]", "==", "'OPEN'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "\n", "acc", "=", "{", "'total_acc'", ":", "np", ".", "round", "(", "total_acc", ",", "4", ")", ",", "'closed_acc'", ":", "np", ".", "round", "(", "closed_acc", ",", "4", ")", ",", "'open_acc'", ":", "np", ".", "round", "(", "open_acc", ",", "4", ")", "}", "\n", "\n", "\n", "return", "np", ".", "mean", "(", "train_loss", ")", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.validate": [[447, 506], ["model.eval", "tqdm.tqdm", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "utils_vqarad.calculate_bleu_score", "utils_vqarad.calculate_bleu_score", "utils_vqarad.calculate_bleu_score", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.mean", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "question_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "criterion.detach().cpu().numpy", "logits.softmax().argmax().detach", "torch.cat().cpu().numpy.append", "np.mean.append", "tqdm.tqdm.set_description", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "img.to", "question_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "target.to", "model", "criterion", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "criterion", "criterion.detach().cpu", "logits.softmax().argmax", "target.argmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "criterion.detach", "logits.softmax"], "function", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score"], ["", "def", "validate", "(", "loader", ",", "model", ",", "criterion", ",", "device", ",", "scaler", ",", "args", ",", "val_df", ",", "idx2ans", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "val_loss", "=", "[", "]", "\n", "\n", "PREDS", "=", "[", "]", "\n", "TARGETS", "=", "[", "]", "\n", "bar", "=", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ")", "in", "bar", ":", "\n", "\n", "            ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "question_token", "=", "question_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                    ", "logits", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "", "", "else", ":", "\n", "                ", "logits", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "\n", "", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred", "=", "logits", ".", "softmax", "(", "1", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "\n", "if", "args", ".", "smoothing", ":", "\n", "                ", "TARGETS", ".", "append", "(", "target", ".", "argmax", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "TARGETS", ".", "append", "(", "target", ")", "\n", "\n", "", "val_loss", ".", "append", "(", "loss_np", ")", "\n", "\n", "bar", ".", "set_description", "(", "'val_loss: %.5f'", "%", "(", "loss_np", ")", ")", "\n", "\n", "", "val_loss", "=", "np", ".", "mean", "(", "val_loss", ")", "\n", "\n", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "total_acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "closed_acc", "=", "(", "PREDS", "[", "val_df", "[", "'answer_type'", "]", "==", "'CLOSED'", "]", "==", "TARGETS", "[", "val_df", "[", "'answer_type'", "]", "==", "'CLOSED'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "open_acc", "=", "(", "PREDS", "[", "val_df", "[", "'answer_type'", "]", "==", "'OPEN'", "]", "==", "TARGETS", "[", "val_df", "[", "'answer_type'", "]", "==", "'OPEN'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "\n", "acc", "=", "{", "'total_acc'", ":", "np", ".", "round", "(", "total_acc", ",", "4", ")", ",", "'closed_acc'", ":", "np", ".", "round", "(", "closed_acc", ",", "4", ")", ",", "'open_acc'", ":", "np", ".", "round", "(", "open_acc", ",", "4", ")", "}", "\n", "\n", "# add bleu score code", "\n", "total_bleu", "=", "calculate_bleu_score", "(", "PREDS", ",", "TARGETS", ",", "idx2ans", ")", "\n", "closed_bleu", "=", "calculate_bleu_score", "(", "PREDS", "[", "val_df", "[", "'answer_type'", "]", "==", "'CLOSED'", "]", ",", "TARGETS", "[", "val_df", "[", "'answer_type'", "]", "==", "'CLOSED'", "]", ",", "idx2ans", ")", "\n", "open_bleu", "=", "calculate_bleu_score", "(", "PREDS", "[", "val_df", "[", "'answer_type'", "]", "==", "'OPEN'", "]", ",", "TARGETS", "[", "val_df", "[", "'answer_type'", "]", "==", "'OPEN'", "]", ",", "idx2ans", ")", "\n", "\n", "bleu", "=", "{", "'total_bleu'", ":", "np", ".", "round", "(", "total_bleu", ",", "4", ")", ",", "'closed_bleu'", ":", "np", ".", "round", "(", "closed_bleu", ",", "4", ")", ",", "'open_bleu'", ":", "np", ".", "round", "(", "open_bleu", ",", "4", ")", "}", "\n", "\n", "return", "val_loss", ",", "PREDS", ",", "acc", ",", "bleu", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.test": [[507, 560], ["model.eval", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "numpy.mean", "numpy.round", "numpy.round", "numpy.round", "question_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "criterion.detach().cpu().numpy", "np.mean.append", "logits.softmax().argmax().detach", "torch.cat().cpu().numpy.append", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "img.to", "question_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "target.to", "model", "criterion", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "criterion", "criterion.detach().cpu", "logits.softmax().argmax", "target.argmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "criterion.detach", "logits.softmax"], "function", ["None"], ["", "def", "test", "(", "loader", ",", "model", ",", "criterion", ",", "device", ",", "scaler", ",", "args", ",", "val_df", ",", "idx2ans", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "PREDS", "=", "[", "]", "\n", "TARGETS", "=", "[", "]", "\n", "\n", "test_loss", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ")", "in", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", ":", "\n", "\n", "            ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "question_token", "=", "question_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                    ", "logits", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "", "", "else", ":", "\n", "                ", "logits", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "\n", "", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "test_loss", ".", "append", "(", "loss_np", ")", "\n", "\n", "pred", "=", "logits", ".", "softmax", "(", "1", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "\n", "if", "args", ".", "smoothing", ":", "\n", "                ", "TARGETS", ".", "append", "(", "target", ".", "argmax", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "TARGETS", ".", "append", "(", "target", ")", "\n", "\n", "", "", "test_loss", "=", "np", ".", "mean", "(", "test_loss", ")", "\n", "\n", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "total_acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "closed_acc", "=", "(", "PREDS", "[", "val_df", "[", "'answer_type'", "]", "==", "'CLOSED'", "]", "==", "TARGETS", "[", "val_df", "[", "'answer_type'", "]", "==", "'CLOSED'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "open_acc", "=", "(", "PREDS", "[", "val_df", "[", "'answer_type'", "]", "==", "'OPEN'", "]", "==", "TARGETS", "[", "val_df", "[", "'answer_type'", "]", "==", "'OPEN'", "]", ")", ".", "mean", "(", ")", "*", "100.", "\n", "\n", "acc", "=", "{", "'total_acc'", ":", "np", ".", "round", "(", "total_acc", ",", "4", ")", ",", "'closed_acc'", ":", "np", ".", "round", "(", "closed_acc", ",", "4", ")", ",", "'open_acc'", ":", "np", ".", "round", "(", "open_acc", ",", "4", ")", "}", "\n", "\n", "\n", "\n", "\n", "return", "test_loss", ",", "PREDS", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.vqarad.utils_vqarad.final_test": [[561, 589], ["numpy.concatenate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "question_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "enumerate", "np.concatenate.append", "img.to", "question_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "target.to", "model", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "logits.detach().cpu().numpy", "len", "logits.detach().cpu().numpy", "len", "logits.detach().cpu", "logits.detach().cpu", "logits.detach", "logits.detach"], "function", ["None"], ["", "def", "final_test", "(", "loader", ",", "all_models", ",", "device", ",", "args", ",", "val_df", ",", "idx2ans", ")", ":", "\n", "\n", "    ", "PREDS", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ")", "in", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", ":", "\n", "\n", "            ", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "question_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "question_token", "=", "question_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "\n", "for", "i", ",", "model", "in", "enumerate", "(", "all_models", ")", ":", "\n", "                ", "if", "args", ".", "mixed_precision", ":", "\n", "                    ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                        ", "logits", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "", "", "else", ":", "\n", "                    ", "logits", ",", "_", "=", "model", "(", "img", ",", "question_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "pred", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "len", "(", "all_models", ")", "\n", "", "else", ":", "\n", "                    ", "pred", "+=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "len", "(", "all_models", ")", "\n", "\n", "", "", "PREDS", ".", "append", "(", "pred", ")", "\n", "\n", "", "", "PREDS", "=", "np", ".", "concatenate", "(", "PREDS", ")", "\n", "\n", "return", "PREDS", "", "", ""]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCO.__init__": [[327, 335], ["transformers.BertTokenizer.from_pretrained"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "df", ",", "tfm", ",", "keys", ",", "mode", ")", ":", "\n", "        ", "self", ".", "df", "=", "df", ".", "values", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "path", "=", "args", ".", "data_dir", "\n", "self", ".", "tfm", "=", "tfm", "\n", "self", ".", "keys", "=", "keys", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCO.__len__": [[336, 338], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCO.__getitem__": [[339, 357], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open().convert", "roco_utils.ROCO.df[].strip", "roco_utils.encode_text", "roco_utils.ROCO.tfm", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.encode_text"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "name", "=", "self", ".", "df", "[", "idx", ",", "1", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "self", ".", "mode", ",", "'radiology'", ",", "'images'", ",", "name", ")", "\n", "\n", "\n", "img", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "tfm", ":", "\n", "            ", "img", "=", "self", ".", "tfm", "(", "img", ")", "\n", "\n", "", "caption", "=", "self", ".", "df", "[", "idx", ",", "2", "]", ".", "strip", "(", ")", "\n", "\n", "\n", "tokens", ",", "segment_ids", ",", "input_mask", ",", "targets", "=", "encode_text", "(", "caption", ",", "self", ".", "tokenizer", ",", "self", ".", "keys", ",", "self", ".", "args", ")", "\n", "\n", "\n", "return", "img", ",", "tokens", ",", "segment_ids", ",", "input_mask", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModule.__init__": [[362, 366], ["pytorch_lightning.LightningDataModule.__init__"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "ROCOModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModule.setup": [[367, 387], ["roco_utils.load_mlm_data", "train[].reset_index", "torchvision.Compose", "torchvision.Compose", "roco_utils.ROCO", "roco_utils.ROCO", "roco_utils.ROCO", "torchvision.Resize", "torchvision.RandomResizedCrop", "torchvision.RandomRotation", "torchvision.ColorJitter", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.load_mlm_data"], ["", "def", "setup", "(", "self", ",", "stage", "=", "None", ")", ":", "\n", "\n", "        ", "train", ",", "val", ",", "test", "=", "load_mlm_data", "(", "self", ".", "args", ")", "\n", "\n", "train", "=", "train", "[", "train", "[", "'name'", "]", "!=", "'PMC4240561_MA-68-291-g002.jpg'", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "train_tfm", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "0.95", ",", "1.05", ")", ",", "ratio", "=", "(", "0.95", ",", "1.05", ")", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "5", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.05", ",", "contrast", "=", "0.05", ",", "saturation", "=", "0.05", ",", "hue", "=", "0.05", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "\n", "val_tfm", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "\n", "self", ".", "train", "=", "ROCO", "(", "self", ".", "args", ",", "train", ",", "train_tfm", ",", "'train'", ")", "\n", "self", ".", "val", "=", "ROCO", "(", "self", ".", "args", ",", "val", ",", "val_tfm", ",", "'validation'", ")", "\n", "self", ".", "test", "=", "ROCO", "(", "self", ".", "args", ",", "test", ",", "val_tfm", ",", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModule.train_dataloader": [[388, 390], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "train", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "self", ".", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModule.val_dataloader": [[391, 393], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "val", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "self", ".", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModule.test_dataloader": [[394, 396], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "test", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "self", ".", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.__init__": [[400, 405], ["pytorch_lightning.LightningModule.__init__"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "model", ")", ":", "\n", "        ", "super", "(", "ROCOModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.training_step": [[406, 416], ["roco_utils.ROCOModel.shared_step", "pytorch_lightning.TrainResult", "pytorch_lightning.TrainResult.log_dict"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.shared_step"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "\n", "        ", "loss", ",", "acc", "=", "self", ".", "shared_step", "(", "batch", ",", "batch_idx", ")", "\n", "result", "=", "pl", ".", "TrainResult", "(", "loss", ")", "\n", "\n", "container", "=", "{", "'train_loss'", ":", "loss", ",", "'train_acc'", ":", "acc", "}", "\n", "\n", "result", ".", "log_dict", "(", "container", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", "prog_bar", "=", "True", ",", "logger", "=", "True", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.validation_step": [[417, 426], ["roco_utils.ROCOModel.shared_step", "pytorch_lightning.EvalResult", "pytorch_lightning.EvalResult.log_dict"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.shared_step"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "\n", "        ", "loss", ",", "acc", "=", "self", ".", "shared_step", "(", "batch", ",", "batch_idx", ")", "\n", "result", "=", "pl", ".", "EvalResult", "(", "checkpoint_on", "=", "loss", ")", "\n", "\n", "container", "=", "{", "'val_loss'", ":", "loss", ",", "'val_acc'", ":", "acc", "}", "\n", "result", ".", "log_dict", "(", "container", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", "prog_bar", "=", "True", ",", "logger", "=", "True", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.shared_step": [[427, 445], ["caption_token.squeeze.squeeze.squeeze", "attention_mask.squeeze.squeeze.squeeze", "roco_utils.ROCOModel.model", "logits[].argmax", "logits.log_softmax.log_softmax.log_softmax", "roco_utils.ROCOModel.loss_func", "logits.log_softmax.log_softmax.permute"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.loss_func"], ["", "def", "shared_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "\n", "        ", "img", ",", "caption_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "batch", "\n", "caption_token", "=", "caption_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "\n", "logits", "=", "self", ".", "model", "(", "img", ",", "caption_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "\n", "bool_label", "=", "target", ">", "0", "\n", "pred", "=", "logits", "[", "bool_label", ",", ":", "]", ".", "argmax", "(", "1", ")", "\n", "valid_labels", "=", "target", "[", "bool_label", "]", "\n", "\n", "logits", "=", "logits", ".", "log_softmax", "(", "-", "1", ")", "# (bs x seq_len x vocab_size)", "\n", "\n", "loss", "=", "self", ".", "loss_func", "(", "logits", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "target", ")", "\n", "acc", "=", "(", "pred", "==", "valid_labels", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "mean", "(", ")", "*", "100.", "\n", "\n", "return", "loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.configure_optimizers": [[446, 450], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "roco_utils.ROCOModel.model.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "\n", "return", "[", "optimizer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.loss_func": [[451, 453], ["torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss"], "methods", ["None"], ["", "def", "loss_func", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "nn", ".", "NLLLoss", "(", ")", "(", "pred", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Embeddings.__init__": [[462, 471], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Embeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "args", ".", "vocab_size", ",", "128", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "word_embeddings_2", "=", "nn", ".", "Linear", "(", "128", ",", "args", ".", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "args", ".", "max_position_embeddings", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "type_embeddings", "=", "nn", ".", "Embedding", "(", "3", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "args", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "len", "=", "args", ".", "max_position_embeddings", "\n", "", "def", "forward", "(", "self", ",", "input_ids", ",", "segment_ids", ",", "position_ids", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Embeddings.forward": [[471, 487], ["roco_utils.Embeddings.word_embeddings", "roco_utils.Embeddings.word_embeddings_2", "roco_utils.Embeddings.position_embeddings", "roco_utils.Embeddings.type_embeddings", "roco_utils.Embeddings.LayerNorm", "roco_utils.Embeddings.dropout", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.arange.unsqueeze().expand_as", "torch.arange.unsqueeze().expand_as", "torch.arange.unsqueeze().expand_as", "torch.arange.unsqueeze().expand_as", "torch.arange.unsqueeze().expand_as", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "segment_ids", ",", "position_ids", "=", "None", ")", ":", "\n", "        ", "if", "position_ids", "is", "None", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "position_ids", "=", "torch", ".", "arange", "(", "self", ".", "len", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "position_ids", "=", "torch", ".", "arange", "(", "self", ".", "len", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "words_embeddings", "=", "self", ".", "word_embeddings_2", "(", "words_embeddings", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "type_embeddings", "(", "segment_ids", ")", "\n", "embeddings", "=", "words_embeddings", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Transfer.__init__": [[490, 508], ["torch.Module.__init__", "torchvision.models.resnet152", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Transfer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "model", "=", "models", ".", "resnet152", "(", "pretrained", "=", "True", ")", "\n", "# for p in self.parameters():", "\n", "#     p.requires_grad=False", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2048", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap2", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "1024", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap3", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "512", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap4", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "256", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap5", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "64", ",", "args", ".", "hidden_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gap7", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Transfer.forward": [[508, 525], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "roco_utils.Transfer.gap2().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "roco_utils.Transfer.gap3().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "roco_utils.Transfer.gap4().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "roco_utils.Transfer.gap5().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "roco_utils.Transfer.gap7().view", "list", "list", "list", "list", "list", "roco_utils.Transfer.model.children", "roco_utils.Transfer.gap2", "roco_utils.Transfer.model.children", "roco_utils.Transfer.gap3", "roco_utils.Transfer.model.children", "roco_utils.Transfer.gap4", "roco_utils.Transfer.model.children", "roco_utils.Transfer.gap5", "roco_utils.Transfer.model.children", "roco_utils.Transfer.gap7", "roco_utils.Transfer.relu", "roco_utils.Transfer.relu", "roco_utils.Transfer.relu", "roco_utils.Transfer.relu", "roco_utils.Transfer.relu", "roco_utils.Transfer.conv2", "roco_utils.Transfer.conv3", "roco_utils.Transfer.conv4", "roco_utils.Transfer.conv5", "roco_utils.Transfer.conv7", "torch.Sequential.", "torch.Sequential.", "torch.Sequential.", "torch.Sequential.", "torch.Sequential."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "modules2", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", "\n", "fix2", "=", "nn", ".", "Sequential", "(", "*", "modules2", ")", "\n", "v_2", "=", "self", ".", "gap2", "(", "self", ".", "relu", "(", "self", ".", "conv2", "(", "fix2", "(", "img", ")", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "modules3", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "3", "]", "\n", "fix3", "=", "nn", ".", "Sequential", "(", "*", "modules3", ")", "\n", "v_3", "=", "self", ".", "gap3", "(", "self", ".", "relu", "(", "self", ".", "conv3", "(", "fix3", "(", "img", ")", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "modules4", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "4", "]", "\n", "fix4", "=", "nn", ".", "Sequential", "(", "*", "modules4", ")", "\n", "v_4", "=", "self", ".", "gap4", "(", "self", ".", "relu", "(", "self", ".", "conv4", "(", "fix4", "(", "img", ")", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "modules5", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "5", "]", "\n", "fix5", "=", "nn", ".", "Sequential", "(", "*", "modules5", ")", "\n", "v_5", "=", "self", ".", "gap5", "(", "self", ".", "relu", "(", "self", ".", "conv5", "(", "fix5", "(", "img", ")", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "modules7", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "7", "]", "\n", "fix7", "=", "nn", ".", "Sequential", "(", "*", "modules7", ")", "\n", "v_7", "=", "self", ".", "gap7", "(", "self", ".", "relu", "(", "self", ".", "conv7", "(", "fix7", "(", "img", ")", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", "\n", "return", "v_2", ",", "v_3", ",", "v_4", ",", "v_5", ",", "v_7", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.MultiHeadedSelfAttention.__init__": [[527, 535], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "MultiHeadedSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj_q", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "proj_k", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "proj_v", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "args", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "scores", "=", "None", "\n", "self", ".", "n_heads", "=", "args", ".", "heads", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.MultiHeadedSelfAttention.forward": [[535, 547], ["roco_utils.MultiHeadedSelfAttention.drop", "roco_utils.MultiHeadedSelfAttention.merge_last", "roco_utils.MultiHeadedSelfAttention.proj_q", "roco_utils.MultiHeadedSelfAttention.proj_k", "roco_utils.MultiHeadedSelfAttention.proj_v", "roco_utils.MultiHeadedSelfAttention.split_last().transpose", "numpy.sqrt", "mask[].float", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "k.transpose", "k.size", "roco_utils.MultiHeadedSelfAttention.split_last"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.MultiHeadedSelfAttention.merge_last", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.MultiHeadedSelfAttention.split_last"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "q", ",", "k", ",", "v", "=", "self", ".", "proj_q", "(", "x", ")", ",", "self", ".", "proj_k", "(", "x", ")", ",", "self", ".", "proj_v", "(", "x", ")", "\n", "q", ",", "k", ",", "v", "=", "(", "self", ".", "split_last", "(", "x", ",", "(", "self", ".", "n_heads", ",", "-", "1", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "for", "x", "in", "[", "q", ",", "k", ",", "v", "]", ")", "\n", "scores", "=", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "/", "np", ".", "sqrt", "(", "k", ".", "size", "(", "-", "1", ")", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", ".", "float", "(", ")", "\n", "scores", "-=", "10000.0", "*", "(", "1.0", "-", "mask", ")", "\n", "", "scores", "=", "self", ".", "drop", "(", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", ")", "\n", "h", "=", "(", "scores", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "h", "=", "self", ".", "merge_last", "(", "h", ",", "2", ")", "\n", "self", ".", "scores", "=", "scores", "\n", "return", "h", "\n", "", "def", "split_last", "(", "self", ",", "x", ",", "shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.MultiHeadedSelfAttention.split_last": [[547, 553], ["list", "x.view", "list.count", "int", "list.index", "x.size", "x.size", "numpy.prod"], "methods", ["None"], ["", "def", "split_last", "(", "self", ",", "x", ",", "shape", ")", ":", "\n", "        ", "shape", "=", "list", "(", "shape", ")", "\n", "assert", "shape", ".", "count", "(", "-", "1", ")", "<=", "1", "\n", "if", "-", "1", "in", "shape", ":", "\n", "            ", "shape", "[", "shape", ".", "index", "(", "-", "1", ")", "]", "=", "int", "(", "x", ".", "size", "(", "-", "1", ")", "/", "-", "np", ".", "prod", "(", "shape", ")", ")", "\n", "", "return", "x", ".", "view", "(", "*", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", ",", "*", "shape", ")", "\n", "", "def", "merge_last", "(", "self", ",", "x", ",", "n_dims", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.MultiHeadedSelfAttention.merge_last": [[553, 557], ["x.size", "x.view", "len"], "methods", ["None"], ["", "def", "merge_last", "(", "self", ",", "x", ",", "n_dims", ")", ":", "\n", "        ", "s", "=", "x", ".", "size", "(", ")", "\n", "assert", "n_dims", ">", "1", "and", "n_dims", "<", "len", "(", "s", ")", "\n", "return", "x", ".", "view", "(", "*", "s", "[", ":", "-", "n_dims", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.PositionWiseFeedForward.__init__": [[559, 563], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "PositionWiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", "*", "4", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", "*", "4", ",", "args", ".", "hidden_size", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.PositionWiseFeedForward.forward": [[563, 565], ["roco_utils.PositionWiseFeedForward.fc2", "roco_utils.gelu", "roco_utils.PositionWiseFeedForward.fc1"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.gelu"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fc2", "(", "gelu", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.BertLayer.__init__": [[567, 591], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "roco_utils.PositionWiseFeedForward", "roco_utils.MultiHeadedSelfAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "roco_utils.MultiHeadedSelfAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "roco_utils.MultiHeadedSelfAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "roco_utils.PositionWiseFeedForward", "range", "range", "roco_utils.PositionWiseFeedForward", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "roco_utils.MultiHeadedSelfAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "roco_utils.PositionWiseFeedForward", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "share", "=", "'all'", ",", "norm", "=", "'pre'", ")", ":", "\n", "        ", "super", "(", "BertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "share", "=", "share", "\n", "self", ".", "norm_pos", "=", "norm", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "args", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "args", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "args", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout", "(", "args", ".", "hidden_dropout_prob", ")", "\n", "if", "self", ".", "share", "==", "'ffn'", ":", "\n", "            ", "self", ".", "attention", "=", "nn", ".", "ModuleList", "(", "[", "MultiHeadedSelfAttention", "(", "args", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "proj", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "feedforward", "=", "PositionWiseFeedForward", "(", "args", ")", "\n", "", "elif", "self", ".", "share", "==", "'att'", ":", "\n", "            ", "self", ".", "attention", "=", "MultiHeadedSelfAttention", "(", "args", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "feedforward", "=", "nn", ".", "ModuleList", "(", "[", "PositionWiseFeedForward", "(", "args", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "", "elif", "self", ".", "share", "==", "'all'", ":", "\n", "            ", "self", ".", "attention", "=", "MultiHeadedSelfAttention", "(", "args", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "feedforward", "=", "PositionWiseFeedForward", "(", "args", ")", "\n", "", "elif", "self", ".", "share", "==", "'none'", ":", "\n", "            ", "self", ".", "attention", "=", "nn", ".", "ModuleList", "(", "[", "MultiHeadedSelfAttention", "(", "args", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "proj", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "feedforward", "=", "nn", ".", "ModuleList", "(", "[", "PositionWiseFeedForward", "(", "args", ")", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "", "", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "layer_num", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.BertLayer.forward": [[591, 615], ["isinstance", "isinstance", "isinstance", "roco_utils.BertLayer.norm1", "isinstance", "roco_utils.BertLayer.norm2", "roco_utils.BertLayer.proj", "roco_utils.BertLayer.drop1", "roco_utils.BertLayer.feedforward", "roco_utils.BertLayer.drop2", "roco_utils.BertLayer.proj", "roco_utils.BertLayer.feedforward", "roco_utils.BertLayer.attention", "roco_utils.BertLayer.norm1", "roco_utils.BertLayer.norm1", "roco_utils.BertLayer.attention", "roco_utils.BertLayer.drop1", "roco_utils.BertLayer.drop2", "roco_utils.BertLayer.norm1", "roco_utils.BertLayer.norm1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "layer_num", ")", ":", "\n", "        ", "if", "self", ".", "norm_pos", "==", "'pre'", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "attention", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "h", "=", "self", ".", "proj", "[", "layer_num", "]", "(", "self", ".", "attention", "[", "layer_num", "]", "(", "self", ".", "norm1", "(", "hidden_states", ")", ",", "attention_mask", ")", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "self", ".", "proj", "(", "self", ".", "attention", "(", "self", ".", "norm1", "(", "hidden_states", ")", ",", "attention_mask", ")", ")", "\n", "", "out", "=", "hidden_states", "+", "self", ".", "drop1", "(", "h", ")", "\n", "if", "isinstance", "(", "self", ".", "feedforward", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "h", "=", "self", ".", "feedforward", "[", "layer_num", "]", "(", "self", ".", "norm1", "(", "out", ")", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "self", ".", "feedforward", "(", "self", ".", "norm1", "(", "out", ")", ")", "\n", "", "out", "=", "out", "+", "self", ".", "drop2", "(", "h", ")", "\n", "", "if", "self", ".", "norm_pos", "==", "'post'", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "attention", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "h", "=", "self", ".", "proj", "[", "layer_num", "]", "(", "self", ".", "attention", "[", "layer_num", "]", "(", "hidden_states", ",", "attention_mask", ")", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "self", ".", "proj", "(", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ")", ")", "\n", "", "out", "=", "self", ".", "norm1", "(", "hidden_states", "+", "self", ".", "drop1", "(", "h", ")", ")", "\n", "if", "isinstance", "(", "self", ".", "feedforward", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "h", "=", "self", ".", "feedforward", "[", "layer_num", "]", "(", "out", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "self", ".", "feedforward", "(", "out", ")", "\n", "", "out", "=", "self", ".", "norm2", "(", "out", "+", "self", ".", "drop2", "(", "h", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Transformer.__init__": [[617, 626], ["torch.Module.__init__", "transformers.BertModel.from_pretrained", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "roco_utils.Transfer", "roco_utils.BertLayer", "list", "transformers.BertModel.from_pretrained.children"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "base_model", "=", "BertModel", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "bert_model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "base_model", ".", "children", "(", ")", ")", "[", "0", ":", "]", ")", "\n", "self", ".", "bert_embedding", "=", "bert_model", "[", "0", "]", "\n", "#         self.embed = Embeddings(args)", "\n", "self", ".", "trans", "=", "Transfer", "(", "args", ")", "\n", "self", ".", "blocks", "=", "BertLayer", "(", "args", ",", "share", "=", "'none'", ",", "norm", "=", "'pre'", ")", "\n", "self", ".", "n_layers", "=", "args", ".", "n_layers", "\n", "", "def", "forward", "(", "self", ",", "img", ",", "input_ids", ",", "token_type_ids", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Transformer.forward": [[626, 643], ["roco_utils.Transformer.trans", "roco_utils.Transformer.bert_embedding", "range", "range", "range", "range", "range", "range", "len", "len", "len", "len", "len", "roco_utils.Transformer.blocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "input_ids", ",", "token_type_ids", ",", "mask", ")", ":", "\n", "        ", "v_2", ",", "v_3", ",", "v_4", ",", "v_5", ",", "v_7", "=", "self", ".", "trans", "(", "img", ")", "\n", "#         h = self.embed(input_ids, token_type_ids)", "\n", "h", "=", "self", ".", "bert_embedding", "(", "input_ids", "=", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "position_ids", "=", "None", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "            ", "h", "[", "i", "]", "[", "1", "]", "=", "v_2", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "            ", "h", "[", "i", "]", "[", "2", "]", "=", "v_3", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "            ", "h", "[", "i", "]", "[", "3", "]", "=", "v_4", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "            ", "h", "[", "i", "]", "[", "4", "]", "=", "v_5", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "h", ")", ")", ":", "\n", "            ", "h", "[", "i", "]", "[", "5", "]", "=", "v_7", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "h", "=", "self", ".", "blocks", "(", "h", ",", "mask", ",", "i", ")", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__": [[645, 653], ["torch.Module.__init__", "roco_utils.Transformer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transformer", "=", "Transformer", "(", "args", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", "\n", "self", ".", "activ1", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "hidden_size", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "args", ".", "hidden_size", ",", "eps", "=", "1e-12", ",", "elementwise_affine", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "hidden_size", ",", "args", ".", "vocab_size", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "img", ",", "input_ids", ",", "segment_ids", ",", "input_mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.Model.forward": [[653, 658], ["roco_utils.Model.transformer", "roco_utils.Model.activ1", "roco_utils.Model.classifier", "roco_utils.Model.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "input_ids", ",", "segment_ids", ",", "input_mask", ")", ":", "\n", "        ", "h", "=", "self", ".", "transformer", "(", "img", ",", "input_ids", ",", "segment_ids", ",", "input_mask", ")", "\n", "pooled_h", "=", "self", ".", "activ1", "(", "self", ".", "fc1", "(", "h", ")", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_h", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.seed_everything": [[27, 36], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["def", "seed_everything", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.get_permutation": [[38, 45], ["list", "range", "numpy.arange", "perms.append", "numpy.random.choice"], "function", ["None"], ["", "def", "get_permutation", "(", "n", ")", ":", "\n", "    ", "index_list", "=", "list", "(", "np", ".", "arange", "(", "n", ")", ")", "\n", "perms", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "lst", "=", "index_list", "[", ":", "i", "]", "+", "index_list", "[", "i", "+", "1", ":", "]", "\n", "perms", ".", "append", "(", "np", ".", "random", ".", "choice", "(", "lst", ")", ")", "\n", "", "return", "perms", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.get_keywords": [[47, 64], ["pickle.load.items", "list", "list", "open", "pickle.load", "list.extend", "set", "list.extend", "set", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "get_keywords", "(", "args", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'vocab'", ",", "'med_vocab.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "key", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "keywords", "=", "[", "]", "\n", "\n", "for", "k", ",", "v", "in", "key", ".", "items", "(", ")", ":", "\n", "        ", "keywords", ".", "extend", "(", "v", ")", "\n", "\n", "", "keywords_", "=", "list", "(", "set", "(", "keywords", ")", ")", "\n", "\n", "for", "word", "in", "keywords_", ":", "\n", "        ", "keywords", ".", "extend", "(", "word", "+", "'.'", ")", "\n", "\n", "", "keywords", "=", "list", "(", "set", "(", "keywords", ")", ")", "\n", "\n", "return", "keywords", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.load_mlm_data": [[66, 90], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "pandas.read_csv", "pandas.read_csv", "train_data.sample.sample", "val_data.sample.sample", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "train_data[].isin", "val_data[].isin"], "function", ["None"], ["", "def", "load_mlm_data", "(", "args", ")", ":", "\n", "    ", "train_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'train'", ",", "'radiology'", ")", "\n", "val_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'validation'", ",", "'radiology'", ")", "\n", "test_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'test'", ",", "'radiology'", ")", "\n", "\n", "train_image_names", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "train_path", ",", "'images'", ")", ")", "\n", "val_image_names", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "val_path", ",", "'images'", ")", ")", "\n", "# test_image_names = os.listdir(os.path.join(test_path,'images'))", "\n", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "train_path", ",", "'traindata.csv'", ")", ")", "\n", "train_data", "=", "train_data", "[", "train_data", "[", "'name'", "]", ".", "isin", "(", "train_image_names", ")", "]", "\n", "\n", "val_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "val_path", ",", "'valdata.csv'", ")", ")", "\n", "val_data", "=", "val_data", "[", "val_data", "[", "'name'", "]", ".", "isin", "(", "val_image_names", ")", "]", "\n", "\n", "# test_data = pd.read_csv(os.path.join(test_path, 'testdata.csv'))", "\n", "# test_data = test_data[test_data['name'].isin(test_image_names)]", "\n", "\n", "\n", "train_data", "=", "train_data", ".", "sample", "(", "frac", "=", "args", ".", "train_pct", ")", "\n", "val_data", "=", "val_data", ".", "sample", "(", "frac", "=", "args", ".", "valid_pct", ")", "\n", "# test_data = test_data.sample(frac = args.test_pct)", "\n", "\n", "return", "train_data", ",", "val_data", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.shuffle_list": [[91, 99], ["len", "range", "int", "numpy.floor", "numpy.random.uniform"], "function", ["None"], ["", "def", "shuffle_list", "(", "some_list", ")", ":", "\n", "    ", "length", "=", "len", "(", "some_list", ")", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "        ", "j", "=", "i", "+", "np", ".", "floor", "(", "np", ".", "random", ".", "uniform", "(", ")", "*", "(", "length", "-", "i", "-", "1", ")", ")", "\n", "j", "=", "int", "(", "j", ")", "\n", "some_list", "[", "i", "]", ",", "some_list", "[", "j", "]", "=", "some_list", "[", "j", "]", ",", "some_list", "[", "i", "]", "\n", "\n", "", "return", "some_list", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.gelu": [[101, 103], ["torch.erf", "torch.erf", "torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.mask_word": [[105, 131], ["sentence.split", "enumerate", "len", "len", "tokenizer.tokenize", "range", "new_tokens.extend", "tokenizer.tokenize", "new_tokens.extend", "output_label.extend", "len", "random.random", "output_label.extend", "output_label.extend", "len", "tokenizer.encode"], "function", ["None"], ["", "def", "mask_word", "(", "sentence", ",", "tokenizer", ",", "keywords", ",", "args", ")", ":", "\n", "    ", "tokens", "=", "sentence", ".", "split", "(", ")", "\n", "output_label", "=", "[", "]", "\n", "new_tokens", "=", "[", "]", "\n", "\n", "for", "i", ",", "char", "in", "enumerate", "(", "tokens", ")", ":", "\n", "        ", "if", "char", "in", "keywords", ":", "\n", "            ", "t", "=", "tokenizer", ".", "tokenize", "(", "char", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "t", ")", ")", ":", "\n", "                ", "prob", "=", "random", ".", "random", "(", ")", "\n", "if", "prob", "<", "args", ".", "mlm_prob", ":", "\n", "\n", "                    ", "output_label", ".", "extend", "(", "[", "tokenizer", ".", "encode", "(", "t", "[", "j", "]", ")", "[", "1", "]", "]", ")", "\n", "t", "[", "j", "]", "=", "'[MASK]'", "\n", "\n", "", "else", ":", "\n", "                    ", "output_label", ".", "extend", "(", "[", "0", "]", ")", "\n", "", "", "new_tokens", ".", "extend", "(", "t", ")", "\n", "", "else", ":", "\n", "            ", "t", "=", "tokenizer", ".", "tokenize", "(", "char", ")", "\n", "new_tokens", ".", "extend", "(", "t", ")", "\n", "output_label", ".", "extend", "(", "[", "0", "]", "*", "len", "(", "t", ")", ")", "\n", "\n", "", "", "assert", "(", "len", "(", "new_tokens", ")", "==", "len", "(", "output_label", ")", ")", ",", "\"Token len must be equal to label len\"", "\n", "\n", "return", "new_tokens", ",", "output_label", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.encode_text": [[132, 155], ["roco_utils.mask_word", "tokenizer.convert_tokens_to_ids", "tokens.extend", "segment_ids.extend", "input_mask.extend", "labels.extend", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.mask_word"], ["", "def", "encode_text", "(", "caption", ",", "tokenizer", ",", "keywords", ",", "args", ")", ":", "\n", "    ", "part1", "=", "[", "0", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "#get token ids and remove [CLS] and [SEP] token id", "\n", "caption", ",", "labels", "=", "mask_word", "(", "caption", ",", "tokenizer", ",", "keywords", ",", "args", ")", "\n", "\n", "\n", "part2", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "caption", ")", "\n", "part2", "=", "part2", "[", ":", "args", ".", "max_position_embeddings", "-", "8", "]", "\n", "labels", "=", "labels", "[", ":", "args", ".", "max_position_embeddings", "-", "8", "]", "\n", "\n", "tokens", "=", "[", "tokenizer", ".", "cls_token_id", "]", "+", "part1", "+", "[", "tokenizer", ".", "sep_token_id", "]", "+", "part2", "+", "[", "tokenizer", ".", "sep_token_id", "]", "\n", "labels", "=", "[", "0", "]", "*", "(", "2", "+", "len", "(", "part1", ")", ")", "+", "labels", "+", "[", "0", "]", "\n", "\n", "segment_ids", "=", "[", "0", "]", "*", "(", "len", "(", "part1", ")", "+", "2", ")", "+", "[", "1", "]", "*", "(", "len", "(", "part2", "[", ":", "args", ".", "max_position_embeddings", "-", "8", "]", ")", "+", "1", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "tokens", ")", "\n", "n_pad", "=", "args", ".", "max_position_embeddings", "-", "len", "(", "tokens", ")", "\n", "tokens", ".", "extend", "(", "[", "0", "]", "*", "n_pad", ")", "\n", "segment_ids", ".", "extend", "(", "[", "0", "]", "*", "n_pad", ")", "\n", "input_mask", ".", "extend", "(", "[", "0", "]", "*", "n_pad", ")", "\n", "labels", ".", "extend", "(", "[", "0", "]", "*", "(", "n_pad", ")", ")", "\n", "\n", "\n", "return", "torch", ".", "tensor", "(", "tokens", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "segment_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "input_mask", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.calculate_bleu_score": [[455, 458], ["numpy.asarray", "numpy.mean", "nltk.translate.bleu_score.sentence_bleu", "idx2ans[].split", "zip", "idx2ans[].split"], "function", ["None"], ["", "", "def", "calculate_bleu_score", "(", "preds", ",", "targets", ")", ":", "\n", "  ", "bleu_per_answer", "=", "np", ".", "asarray", "(", "[", "sentence_bleu", "(", "[", "idx2ans", "[", "target", "]", ".", "split", "(", ")", "]", ",", "idx2ans", "[", "pred", "]", ".", "split", "(", ")", ")", "for", "pred", ",", "target", "in", "zip", "(", "preds", ",", "targets", ")", "]", ")", "\n", "return", "np", ".", "mean", "(", "bleu_per_answer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.train_one_epoch": [[162, 230], ["model.train", "tqdm.tqdm", "enumerate", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "caption_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "optimizer.zero_grad", "logits[].argmax", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "loss_func.detach().cpu().numpy", "train_loss.append", "tqdm.tqdm.set_description", "wandb.log", "numpy.mean", "img.to", "caption_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "target.to", "model", "logits.log_softmax.log_softmax", "loss_func", "scaler.scale().backward", "scaler.step", "scaler.update", "loss_func.backward", "optimizer.step", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "logits.log_softmax.log_softmax", "loss_func", "logits.log_softmax.permute", "loss_func.detach().cpu", "logits.log_softmax.permute", "scaler.scale", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "loss_func.detach", "len"], "function", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.loss_func", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.loss_func"], ["", "def", "train_one_epoch", "(", "loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "scaler", ",", "device", ",", "args", ",", "epoch", ")", ":", "\n", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "[", "]", "\n", "PREDS", "=", "[", "]", "\n", "TARGETS", "=", "[", "]", "\n", "bar", "=", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", "\n", "for", "i", ",", "(", "img", ",", "caption_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ")", "in", "enumerate", "(", "bar", ")", ":", "\n", "\n", "        ", "img", ",", "caption_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "caption_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "caption_token", "=", "caption_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "\n", "loss_func", "=", "criterion", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                ", "logits", "=", "model", "(", "img", ",", "caption_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "logits", "=", "logits", ".", "log_softmax", "(", "-", "1", ")", "# (bs x seq_len x vocab_size)", "\n", "loss", "=", "loss_func", "(", "logits", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "target", ")", "\n", "", "", "else", ":", "\n", "            ", "logits", "=", "model", "(", "img", ",", "caption_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "logits", "=", "logits", ".", "log_softmax", "(", "-", "1", ")", "# (bs x seq_len x vocab_size)", "\n", "loss", "=", "loss_func", "(", "logits", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "target", ")", "\n", "\n", "\n", "", "if", "args", ".", "mixed_precision", ":", "\n", "            ", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# logits = model(img, caption_token, segment_ids, attention_mask)", "\n", "# logits = logits.log_softmax(-1)  # (bs x seq_len x vocab_size)", "\n", "# loss = loss_func(logits.permute(0,2,1), target)", "\n", "\n", "# loss.backward()", "\n", "# optimizer.step()       ", "\n", "\n", "", "bool_label", "=", "target", ">", "0", "\n", "\n", "pred", "=", "logits", "[", "bool_label", ",", ":", "]", ".", "argmax", "(", "1", ")", "\n", "valid_labels", "=", "target", "[", "bool_label", "]", "\n", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "TARGETS", ".", "append", "(", "valid_labels", ")", "\n", "\n", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "acc", "=", "(", "pred", "==", "valid_labels", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "mean", "(", ")", "*", "100.", "\n", "train_loss", ".", "append", "(", "loss_np", ")", "\n", "bar", ".", "set_description", "(", "'train_loss: %.5f, train_acc: %.2f'", "%", "(", "loss_np", ",", "acc", ")", ")", "\n", "\n", "wandb", ".", "log", "(", "{", "'step_train_loss'", ":", "loss_np", ",", "\n", "'step_train_acc'", ":", "acc", ",", "\n", "'train_batch'", ":", "epoch", "*", "len", "(", "loader", ")", "+", "i", "}", ")", "\n", "\n", "\n", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "#     # Calculate total accuracy", "\n", "total_acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "\n", "return", "np", ".", "mean", "(", "train_loss", ")", ",", "total_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.validate": [[231, 293], ["model.eval", "tqdm.tqdm", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.mean", "caption_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "logits[].argmax", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "loss_func.detach().cpu().numpy", "np.mean.append", "tqdm.tqdm.set_description", "wandb.log", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "img.to", "caption_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "target.to", "model", "logits.log_softmax.log_softmax", "loss_func", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "logits.log_softmax.log_softmax", "loss_func", "logits.log_softmax.permute", "loss_func.detach().cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logits.log_softmax.permute", "loss_func.detach", "len"], "function", ["home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.loss_func", "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.ROCOModel.loss_func"], ["", "def", "validate", "(", "loader", ",", "model", ",", "criterion", ",", "scaler", ",", "device", ",", "args", ",", "epoch", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "val_loss", "=", "[", "]", "\n", "\n", "PREDS", "=", "[", "]", "\n", "TARGETS", "=", "[", "]", "\n", "bar", "=", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "img", ",", "caption_token", ",", "segment_ids", ",", "attention_mask", ",", "target", ")", "in", "enumerate", "(", "bar", ")", ":", "\n", "\n", "            ", "img", ",", "caption_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "caption_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "caption_token", "=", "caption_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "\n", "loss_func", "=", "criterion", "\n", "\n", "if", "args", ".", "mixed_precision", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                    ", "logits", "=", "model", "(", "img", ",", "caption_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "logits", "=", "logits", ".", "log_softmax", "(", "-", "1", ")", "# (bs x seq_len x vocab_size)", "\n", "loss", "=", "loss_func", "(", "logits", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "target", ")", "\n", "", "", "else", ":", "\n", "                ", "logits", "=", "model", "(", "img", ",", "caption_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "logits", "=", "logits", ".", "log_softmax", "(", "-", "1", ")", "# (bs x seq_len x vocab_size)", "\n", "loss", "=", "loss_func", "(", "logits", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "target", ")", "\n", "\n", "\n", "# logits = model(img, caption_token, segment_ids, attention_mask)", "\n", "# logits = logits.log_softmax(-1)  # (bs x seq_len x vocab_size)", "\n", "# loss = loss_func(logits.permute(0,2,1), target)", "\n", "\n", "", "bool_label", "=", "target", ">", "0", "\n", "pred", "=", "logits", "[", "bool_label", ",", ":", "]", ".", "argmax", "(", "1", ")", "\n", "valid_labels", "=", "target", "[", "bool_label", "]", "\n", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "TARGETS", ".", "append", "(", "valid_labels", ")", "\n", "\n", "loss_np", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "val_loss", ".", "append", "(", "loss_np", ")", "\n", "\n", "acc", "=", "(", "pred", "==", "valid_labels", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "mean", "(", ")", "*", "100.", "\n", "\n", "bar", ".", "set_description", "(", "'val_loss: %.5f, val_acc: %.5f'", "%", "(", "loss_np", ",", "acc", ")", ")", "\n", "\n", "wandb", ".", "log", "(", "{", "'step_val_loss'", ":", "loss_np", ",", "\n", "'step_val_acc'", ":", "acc", ",", "\n", "'val_batch'", ":", "epoch", "*", "len", "(", "loader", ")", "+", "i", "}", ")", "\n", "\n", "", "val_loss", "=", "np", ".", "mean", "(", "val_loss", ")", "\n", "\n", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# Calculate total accuracy", "\n", "total_acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "\n", "\n", "return", "val_loss", ",", "PREDS", ",", "total_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.VirajBagal_MMBERT.pretrain.roco_utils.test": [[294, 323], ["model.eval", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "caption_token.squeeze.squeeze", "attention_mask.squeeze.squeeze", "model", "logits[].argmax", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "img.to", "caption_token.squeeze.to", "segment_ids.to", "attention_mask.squeeze.to", "target.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "test", "(", "loader", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "PREDS", "=", "[", "]", "\n", "TARGETS", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "img", ",", "caption_token", ",", "attention_mask", ",", "target", ")", "in", "tqdm", "(", "loader", ",", "leave", "=", "False", ")", ":", "\n", "\n", "            ", "img", ",", "caption_token", ",", "segment_ids", ",", "attention_mask", ",", "target", "=", "img", ".", "to", "(", "device", ")", ",", "caption_token", ".", "to", "(", "device", ")", ",", "segment_ids", ".", "to", "(", "device", ")", ",", "attention_mask", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "caption_token", "=", "caption_token", ".", "squeeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "squeeze", "(", "1", ")", "\n", "\n", "logits", "=", "model", "(", "img", ",", "caption_token", ",", "segment_ids", ",", "attention_mask", ")", "\n", "\n", "bool_label", "=", "target", ">", "0", "\n", "pred", "=", "logits", "[", "bool_label", ",", ":", "]", ".", "argmax", "(", "1", ")", "\n", "valid_labels", "=", "target", "[", "bool_label", "]", "\n", "\n", "PREDS", ".", "append", "(", "pred", ")", "\n", "TARGETS", ".", "append", "(", "valid_labels", ")", "\n", "\n", "", "", "PREDS", "=", "torch", ".", "cat", "(", "PREDS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "TARGETS", "=", "torch", ".", "cat", "(", "TARGETS", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "total_acc", "=", "(", "PREDS", "==", "TARGETS", ")", ".", "mean", "(", ")", "*", "100.", "\n", "\n", "return", "PREDS", ",", "total_acc", "\n", "\n"]]}