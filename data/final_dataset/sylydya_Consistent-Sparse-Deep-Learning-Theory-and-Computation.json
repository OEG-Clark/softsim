{"home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.None.run_bnn.Net.__init__": [[49, 64], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "range", "run_bnn.Net.fc_list.append", "run_bnn.Net.add_module", "run_bnn.Net.fc_list.append", "run_bnn.Net.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "str", "str"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_hidden", ",", "hidden_dim", ",", "input_dim", ",", "output_dim", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_hidden", "=", "num_hidden", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", "[", "0", "]", ")", "\n", "self", ".", "fc_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_hidden", "-", "1", ")", ":", "\n", "            ", "self", ".", "fc_list", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", "[", "i", "]", ",", "hidden_dim", "[", "i", "+", "1", "]", ")", ")", "\n", "self", ".", "add_module", "(", "'fc'", "+", "str", "(", "i", "+", "2", ")", ",", "self", ".", "fc_list", "[", "-", "1", "]", ")", "\n", "", "self", ".", "fc_list", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", "[", "-", "1", "]", ",", "output_dim", ")", ")", "\n", "self", ".", "add_module", "(", "'fc'", "+", "str", "(", "num_hidden", "+", "1", ")", ",", "self", ".", "fc_list", "[", "-", "1", "]", ")", "\n", "\n", "self", ".", "prune_flag", "=", "0", "\n", "self", ".", "mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.None.run_bnn.Net.forward": [[65, 76], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "range", "run_bnn.Net.named_parameters", "run_bnn.Net.fc", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "self", ".", "prune_flag", "==", "1", ":", "\n", "            ", "for", "name", ",", "para", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "para", ".", "data", "[", "self", ".", "mask", "[", "name", "]", "]", "=", "0", "\n", "\n", "", "", "x", "=", "torch", ".", "tanh", "(", "self", ".", "fc", "(", "x", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_hidden", "-", "1", ")", ":", "\n", "            ", "x", "=", "torch", ".", "tanh", "(", "self", ".", "fc_list", "[", "i", "]", "(", "x", ")", ")", "\n", "", "x", "=", "self", ".", "fc_list", "[", "-", "1", "]", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.None.run_bnn.Net.set_prune": [[77, 80], ["None"], "methods", ["None"], ["", "def", "set_prune", "(", "self", ",", "user_mask", ")", ":", "\n", "        ", "self", ".", "mask", "=", "user_mask", "\n", "self", ".", "prune_flag", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.None.run_bnn.Net.cancel_prune": [[81, 84], ["None"], "methods", ["None"], ["", "def", "cancel_prune", "(", "self", ")", ":", "\n", "        ", "self", ".", "prune_flag", "=", "0", "\n", "self", ".", "mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.None.run_bnn.gradient": [[87, 103], ["torch.is_tensor", "torch.is_tensor", "torch.autograd.grad", "torch.autograd.grad", "torch.cat", "torch.cat", "list", "torch.zeros_like", "torch.zeros_like", "zip", "x.contiguous().view", "x.contiguous"], "function", ["None"], ["", "", "def", "gradient", "(", "outputs", ",", "inputs", ",", "grad_outputs", "=", "None", ",", "retain_graph", "=", "None", ",", "create_graph", "=", "False", ")", ":", "\n", "    ", "'''\n    Compute the gradient of `outputs` with respect to `inputs`\n    gradient(x.sum(), x)\n    gradient((x * y).sum(), [x, y])\n    '''", "\n", "if", "torch", ".", "is_tensor", "(", "inputs", ")", ":", "\n", "        ", "inputs", "=", "[", "inputs", "]", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "list", "(", "inputs", ")", "\n", "", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", ",", "inputs", ",", "grad_outputs", ",", "\n", "allow_unused", "=", "True", ",", "\n", "retain_graph", "=", "retain_graph", ",", "\n", "create_graph", "=", "create_graph", ")", "\n", "grads", "=", "[", "x", "if", "x", "is", "not", "None", "else", "torch", ".", "zeros_like", "(", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "grads", ",", "inputs", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "for", "x", "in", "grads", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.None.run_bnn.hessian": [[104, 140], ["torch.is_tensor", "torch.is_tensor", "sum", "enumerate", "list", "output.new_zeros", "torch.autograd.grad", "torch.autograd.grad", "grad.contiguous().view.contiguous().view", "range", "p.numel", "torch.zeros_like", "torch.zeros_like", "inp.numel", "out[].add_", "grad.contiguous().view.contiguous", "grad[].new_zeros", "grad[].new_zeros.type_as", "out[].add_", "run_bnn.gradient", "row[].type_as", "sum", "x.numel"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.gradient"], ["", "def", "hessian", "(", "output", ",", "inputs", ",", "out", "=", "None", ",", "allow_unused", "=", "False", ",", "create_graph", "=", "False", ")", ":", "\n", "    ", "'''\n    Compute the Hessian of `output` with respect to `inputs`\n    hessian((x * y).sum(), [x, y])\n    '''", "\n", "#assert output.ndimension() == 0", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "inputs", ")", ":", "\n", "        ", "inputs", "=", "[", "inputs", "]", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "list", "(", "inputs", ")", "\n", "\n", "", "n", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "inputs", ")", "\n", "if", "out", "is", "None", ":", "\n", "        ", "out", "=", "output", ".", "new_zeros", "(", "n", ",", "n", ")", "\n", "\n", "", "ai", "=", "0", "\n", "for", "i", ",", "inp", "in", "enumerate", "(", "inputs", ")", ":", "\n", "        ", "[", "grad", "]", "=", "torch", ".", "autograd", ".", "grad", "(", "output", ",", "inp", ",", "create_graph", "=", "True", ",", "allow_unused", "=", "allow_unused", ")", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "inp", ")", "if", "grad", "is", "None", "else", "grad", "\n", "grad", "=", "grad", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "for", "j", "in", "range", "(", "inp", ".", "numel", "(", ")", ")", ":", "\n", "            ", "if", "grad", "[", "j", "]", ".", "requires_grad", ":", "\n", "                ", "row", "=", "gradient", "(", "grad", "[", "j", "]", ",", "inputs", "[", "i", ":", "]", ",", "retain_graph", "=", "True", ",", "create_graph", "=", "create_graph", ")", "[", "j", ":", "]", "\n", "", "else", ":", "\n", "                ", "row", "=", "grad", "[", "j", "]", ".", "new_zeros", "(", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "inputs", "[", "i", ":", "]", ")", "-", "j", ")", "\n", "\n", "", "out", "[", "ai", ",", "ai", ":", "]", ".", "add_", "(", "row", ".", "type_as", "(", "out", ")", ")", "# ai's row", "\n", "if", "ai", "+", "1", "<", "n", ":", "\n", "                ", "out", "[", "ai", "+", "1", ":", ",", "ai", "]", ".", "add_", "(", "row", "[", "1", ":", "]", ".", "type_as", "(", "out", ")", ")", "# ai's column", "\n", "", "del", "row", "\n", "ai", "+=", "1", "\n", "", "del", "grad", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.None.run_bnn.main": [[145, 375], ["process_data.preprocess_data", "torch.device", "torch.device", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "run_bnn.Net", "Net.to", "torch.MSELoss", "torch.optim.SGD", "torch.optim.SGD", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.sqrt", "Net.parameters", "numpy.zeros", "numpy.zeros", "numpy.arange", "range", "open", "pickle.dump", "open.close", "numpy.sum", "open", "open.write", "open.close", "Net.named_parameters", "run_bnn.Net.set_prune", "Net.parameters", "numpy.zeros", "numpy.zeros", "torch.optim.SGD", "torch.optim.SGD", "range", "open", "pickle.dump", "open.close", "torch.cuda.is_available", "torch.cuda.is_available", "Net.parameters", "os.path.isdir", "para_path.append", "para_gamma_path.append", "numpy.random.shuffle", "range", "print", "str", "str", "torch.no_grad", "torch.no_grad", "enumerate", "para_path_fine_tune.append", "para_gamma_path_fine_tune.append", "Net.parameters", "numpy.random.shuffle", "range", "print", "str", "torch.no_grad", "torch.no_grad", "Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "Net.named_parameters", "Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "print", "print", "torch.FloatTensor", "torch.FloatTensor", "numpy.log", "numpy.log", "os.makedirs", "numpy.zeros", "numpy.zeros", "Net.zero_grad", "Net.", "nn.MSELoss.", "loss_func.div().add", "loss_func.backward", "torch.optim.SGD.step", "torch.no_grad", "torch.no_grad", "Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "enumerate", "print", "numpy.max", "int", "str", "Net.parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "para.abs", "numpy.zeros", "numpy.zeros", "Net.zero_grad", "Net.", "nn.MSELoss.", "loss_func.div().add", "loss_func.backward", "torch.optim.SGD.step", "torch.no_grad", "torch.no_grad", "Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "enumerate", "print", "numpy.log", "numpy.log", "numpy.log", "torch.FloatTensor().to.log().mul", "torch.no_grad", "torch.no_grad", "Net.parameters", "Net.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.max", "torch.FloatTensor().to.log().mul", "torch.no_grad", "torch.no_grad", "Net.parameters", "Net.parameters", "para.cpu().data.numpy", "numpy.sum", "Net.mask[].sum", "numpy.sqrt", "os.path.isdir", "list", "list", "loss_func.div", "para.pow().mul().add().exp().add().pow", "para.pow().mul().add().exp().add().pow.div", "torch.FloatTensor", "torch.FloatTensor", "list", "list", "loss_func.div", "para.pow().mul().add().exp().add().pow", "para.pow().mul().add().exp().add().pow.div", "loss_func.cpu", "para.numel", "loss_func.cpu", "torch.FloatTensor().to.log", "para.div().mul", "para.div().mul", "loss_func.cpu", "loss_func.cpu", "numpy.max", "torch.FloatTensor().to.log", "para.div().mul", "para.div().mul", "loss_func.cpu", "loss_func.cpu", "numpy.max", "numpy.log", "para.pow().mul().add().exp().add", "para.cpu", "para.pow().mul().add().exp().add", "para.cpu", "para.div", "para.div", "para.div", "para.div", "para.pow().mul().add().exp", "para.pow().mul().add().exp", "para.abs", "para.abs", "para.pow().mul().add", "para.pow().mul().add", "para.pow().mul", "para.pow().mul", "para.pow", "para.pow"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.process_data.preprocess_data", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.Lenet5_sparse.set_prune", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "main", "(", ")", ":", "\n", "    ", "data_name", "=", "args", ".", "data_name", "\n", "subn", "=", "args", ".", "batch_train", "\n", "\n", "prior_sigma_0", "=", "args", ".", "sigma0", "\n", "\n", "prior_sigma_1", "=", "args", ".", "sigma1", "\n", "\n", "lambda_n", "=", "args", ".", "lambdan", "\n", "\n", "num_hidden", "=", "args", ".", "layer", "\n", "hidden_dim", "=", "args", ".", "unit", "\n", "\n", "num_seed", "=", "args", ".", "num_run", "\n", "\n", "num_epoch", "=", "args", ".", "nepoch", "\n", "\n", "\n", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "=", "preprocess_data", "(", "data_name", ")", "\n", "output_dim", "=", "1", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "ntrain", "=", "x_train", ".", "shape", "[", "0", "]", "\n", "dim", "=", "x_train", ".", "shape", "[", "1", "]", "\n", "\n", "\n", "dim_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "BIC_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "num_selection_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "train_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "test_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "for", "my_seed", "in", "range", "(", "num_seed", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "my_seed", ")", "\n", "torch", ".", "manual_seed", "(", "my_seed", ")", "\n", "\n", "net", "=", "Net", "(", "num_hidden", ",", "hidden_dim", ",", "dim", ",", "output_dim", ")", "\n", "net", ".", "to", "(", "device", ")", "\n", "\n", "loss_func", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "step_lr", "=", "args", ".", "lr", "\n", "momentum", "=", "args", ".", "momentum", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ",", "momentum", "=", "momentum", ")", "\n", "\n", "sigma", "=", "torch", ".", "FloatTensor", "(", "[", "1", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "c1", "=", "np", ".", "log", "(", "lambda_n", ")", "-", "np", ".", "log", "(", "1", "-", "lambda_n", ")", "+", "0.5", "*", "np", ".", "log", "(", "prior_sigma_0", ")", "-", "0.5", "*", "np", ".", "log", "(", "prior_sigma_1", ")", "\n", "c2", "=", "0.5", "/", "prior_sigma_0", "-", "0.5", "/", "prior_sigma_1", "\n", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "prior_sigma_1", "/", "prior_sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "prior_sigma_0", "-", "0.5", "/", "prior_sigma_1", ")", ")", "\n", "\n", "\n", "PATH", "=", "args", ".", "base_path", "+", "args", ".", "data_name", "+", "'/'", "+", "args", ".", "model_path", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "                ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "raise", "\n", "\n", "", "", "", "para_path", "=", "[", "]", "\n", "para_gamma_path", "=", "[", "]", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "num_epoch", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "num_epoch", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path", "=", "np", ".", "zeros", "(", "[", "num_epoch", "]", ")", "\n", "test_loss_path", "=", "np", ".", "zeros", "(", "[", "num_epoch", "]", ")", "\n", "\n", "index", "=", "np", ".", "arange", "(", "ntrain", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "num_epoch", ")", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "index", ")", "\n", "\n", "for", "iter", "in", "range", "(", "ntrain", "//", "subn", ")", ":", "\n", "                ", "subsample", "=", "index", "[", "(", "iter", "*", "subn", ")", ":", "(", "(", "iter", "+", "1", ")", "*", "subn", ")", "]", "\n", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss", ".", "div", "(", "2", "*", "sigma", ")", ".", "add", "(", "sigma", ".", "log", "(", ")", ".", "mul", "(", "0.5", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# prior gradient:", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                        ", "temp", "=", "para", ".", "pow", "(", "2", ")", ".", "mul", "(", "c2", ")", ".", "add", "(", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "para", ".", "div", "(", "-", "prior_sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "para", ".", "div", "(", "-", "prior_sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "prior_grad", "=", "temp", ".", "div", "(", "ntrain", ")", "\n", "para", ".", "grad", ".", "data", "-=", "prior_grad", "\n", "", "", "optimization", ".", "step", "(", ")", "\n", "\n", "", "print", "(", "'epoch:'", ",", "epoch", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path", "[", "epoch", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path", "[", "epoch", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "para_path", "[", "i", "]", "[", "epoch", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path", "[", "i", "]", "[", "epoch", ",", "]", "=", "(", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of selected:'", ",", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "epoch", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "\n", "", "", "import", "pickle", "\n", "filename", "=", "PATH", "+", "'result'", "+", "str", "(", "my_seed", ")", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path", ",", "para_gamma_path", ",", "train_loss_path", ",", "test_loss_path", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "num_selection_list", "[", "my_seed", "]", "=", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "\n", "\n", "temp_str", "=", "[", "str", "(", "int", "(", "x", ")", ")", "for", "x", "in", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", "]", "\n", "temp_str", "=", "' '", ".", "join", "(", "temp_str", ")", "\n", "filename", "=", "PATH", "+", "'selected_variable'", "+", "str", "(", "my_seed", ")", "+", "'.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "f", ".", "write", "(", "temp_str", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "para", ".", "data", "=", "torch", ".", "FloatTensor", "(", "para_path", "[", "i", "]", "[", "-", "1", ",", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "user_mask", "=", "{", "}", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "            ", "user_mask", "[", "name", "]", "=", "para", ".", "abs", "(", ")", "<", "threshold", "\n", "", "net", ".", "set_prune", "(", "user_mask", ")", "\n", "\n", "\n", "fine_tune_epoch", "=", "args", ".", "fine_tune_epoch", "\n", "para_path_fine_tune", "=", "[", "]", "\n", "para_gamma_path_fine_tune", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_epoch", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_epoch", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_epoch", "]", ")", "\n", "test_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_epoch", "]", ")", "\n", "\n", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ",", "momentum", "=", "momentum", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "fine_tune_epoch", ")", ":", "\n", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "index", ")", "\n", "for", "iter", "in", "range", "(", "ntrain", "//", "subn", ")", ":", "\n", "                ", "subsample", "=", "index", "[", "(", "iter", "*", "subn", ")", ":", "(", "(", "iter", "+", "1", ")", "*", "subn", ")", "]", "\n", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss", ".", "div", "(", "2", "*", "sigma", ")", ".", "add", "(", "sigma", ".", "log", "(", ")", ".", "mul", "(", "0.5", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# prior gradient:", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                        ", "temp", "=", "para", ".", "pow", "(", "2", ")", ".", "mul", "(", "c2", ")", ".", "add", "(", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "para", ".", "div", "(", "-", "prior_sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "para", ".", "div", "(", "-", "prior_sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "prior_grad", "=", "temp", ".", "div", "(", "ntrain", ")", "\n", "para", ".", "grad", ".", "data", "-=", "prior_grad", "\n", "", "", "optimization", ".", "step", "(", ")", "\n", "\n", "", "print", "(", "'fine tune epoch:'", ",", "epoch", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path_fine_tune", "[", "epoch", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path_fine_tune", "[", "epoch", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "para_path_fine_tune", "[", "i", "]", "[", "epoch", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path_fine_tune", "[", "i", "]", "[", "epoch", ",", "]", "=", "(", "\n", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of selected:'", ",", "\n", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune", "[", "0", "]", "[", "epoch", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "\n", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'fine_tune_result'", "+", "str", "(", "my_seed", ")", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path_fine_tune", ",", "para_gamma_path_fine_tune", ",", "train_loss_path_fine_tune", ",", "\n", "test_loss_path_fine_tune", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"Train Loss:\"", ",", "loss", ")", "\n", "train_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "num_non_zero_element", "=", "0", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "                ", "num_non_zero_element", "=", "num_non_zero_element", "+", "para", ".", "numel", "(", ")", "-", "net", ".", "mask", "[", "name", "]", ".", "sum", "(", ")", "\n", "", "BIC", "=", "(", "2", "*", "ntrain", "*", "loss", "+", "np", ".", "log", "(", "ntrain", ")", "*", "num_non_zero_element", ")", ".", "item", "(", ")", "\n", "BIC_list", "[", "my_seed", "]", "=", "BIC", "\n", "dim_list", "[", "my_seed", "]", "=", "num_non_zero_element", "\n", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"Test Loss:\"", ",", "loss", ")", "\n", "test_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "print", "(", "\"number of non-zero connections:\"", ",", "num_non_zero_element", ")", "\n", "print", "(", "'BIC:'", ",", "BIC", ")", "\n", "\n", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'Overall_result_with_different_initialization'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "BIC_list", ",", "dim_list", ",", "num_selection_list", ",", "train_loss_list", ",", "test_loss_list", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.None.process_data.preprocess_data": [[8, 68], ["torch.device", "print", "numpy.matrix", "numpy.matrix", "range", "numpy.mat", "numpy.mat", "range", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.cuda.is_available", "numpy.zeros", "numpy.zeros", "range", "numpy.zeros", "numpy.zeros", "range", "print", "numpy.sqrt", "numpy.random.normal", "numpy.random.normal", "numpy.sqrt", "numpy.random.normal", "numpy.random.normal", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.sqrt", "numpy.random.normal", "numpy.sqrt", "numpy.random.normal", "numpy.sqrt", "numpy.sqrt", "numpy.random.normal", "numpy.sqrt", "numpy.random.normal", "numpy.sqrt", "numpy.sqrt", "numpy.random.normal", "numpy.sqrt", "numpy.random.normal", "numpy.sin", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["def", "preprocess_data", "(", "data_name", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "if", "data_name", "==", "'Simulation'", ":", "\n", "        ", "a", "=", "1", "\n", "b", "=", "1", "\n", "TotalP", "=", "2000", "\n", "print", "(", "'p = '", ",", "TotalP", ")", "\n", "NTrain", "=", "10000", "\n", "x_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "TotalP", "]", ")", ")", "\n", "y_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "1", "]", ")", ")", "\n", "\n", "sigma", "=", "1.0", "\n", "for", "i", "in", "range", "(", "NTrain", ")", ":", "\n", "            ", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "\"x_train generate = \"", ",", "i", ")", "\n", "", "ee", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "while", "ee", ">", "10", "or", "ee", "<", "-", "10", ":", "\n", "                ", "ee", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "", "for", "j", "in", "range", "(", "TotalP", ")", ":", "\n", "                ", "zj", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "while", "zj", ">", "10", "or", "zj", "<", "-", "10", ":", "\n", "                    ", "zj", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "", "x_train", "[", "i", ",", "j", "]", "=", "(", "a", "*", "ee", "+", "b", "*", "zj", ")", "/", "np", ".", "sqrt", "(", "a", "*", "a", "+", "b", "*", "b", ")", "\n", "", "x0", "=", "x_train", "[", "i", ",", "0", "]", "\n", "x1", "=", "x_train", "[", "i", ",", "1", "]", "\n", "x2", "=", "x_train", "[", "i", ",", "2", "]", "\n", "x3", "=", "x_train", "[", "i", ",", "3", "]", "\n", "x4", "=", "x_train", "[", "i", ",", "4", "]", "\n", "\n", "y_train", "[", "i", ",", "0", "]", "=", "5", "*", "x1", "/", "(", "1", "+", "x0", "*", "x0", ")", "+", "5", "*", "np", ".", "sin", "(", "x2", "*", "x3", ")", "+", "2", "*", "x4", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "\n", "\n", "", "NTest", "=", "1000", "\n", "x_test", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "TotalP", "]", ")", ")", "\n", "y_test", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "1", "]", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "NTest", ")", ":", "\n", "            ", "ee", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "while", "ee", ">", "10", "or", "ee", "<", "-", "10", ":", "\n", "                ", "ee", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "", "for", "j", "in", "range", "(", "TotalP", ")", ":", "\n", "                ", "zj", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "while", "zj", ">", "10", "or", "zj", "<", "-", "10", ":", "\n", "                    ", "zj", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "", "x_test", "[", "i", ",", "j", "]", "=", "(", "a", "*", "ee", "+", "b", "*", "zj", ")", "/", "np", ".", "sqrt", "(", "a", "*", "a", "+", "b", "*", "b", ")", "\n", "", "x0", "=", "x_test", "[", "i", ",", "0", "]", "\n", "x1", "=", "x_test", "[", "i", ",", "1", "]", "\n", "x2", "=", "x_test", "[", "i", ",", "2", "]", "\n", "x3", "=", "x_test", "[", "i", ",", "3", "]", "\n", "x4", "=", "x_test", "[", "i", ",", "4", "]", "\n", "\n", "y_test", "[", "i", ",", "0", "]", "=", "5", "*", "x1", "/", "(", "1", "+", "x0", "*", "x0", ")", "+", "5", "*", "np", ".", "sin", "(", "x2", "*", "x3", ")", "+", "2", "*", "x4", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "\n", "", "x_train", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "device", ")", "\n", "y_train", "=", "torch", ".", "FloatTensor", "(", "y_train", ")", ".", "to", "(", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "device", ")", "\n", "y_test", "=", "torch", ".", "FloatTensor", "(", "y_test", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "", "return", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Classification.my_Net_tanh.__init__": [[23, 38], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Classification.my_Net_tanh.gamma.append", "Simulation_Classification.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Classification.my_Net_tanh.gamma.append", "Simulation_Classification.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Classification.my_Net_tanh.gamma.append", "Simulation_Classification.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Classification.my_Net_tanh.gamma.append", "Simulation_Classification.my_Net_tanh.gamma.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "my_Net_tanh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "[", "]", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1000", ",", "6", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Classification.my_Net_tanh.to": [[39, 44], ["super().to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "range", "Simulation_Classification.my_Net_tanh.gamma.__len__", "Simulation_Classification.my_Net_tanh.gamma[].to"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "my_Net_tanh", ",", "self", ")", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "gamma", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "index", "]", "=", "self", ".", "gamma", "[", "index", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Classification.my_Net_tanh.forward": [[45, 53], ["enumerate", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "Simulation_Classification.my_Net_tanh.fc4", "Simulation_Classification.my_Net_tanh.parameters", "para.data.mul_", "Simulation_Classification.my_Net_tanh.fc1", "Simulation_Classification.my_Net_tanh.fc2", "Simulation_Classification.my_Net_tanh.fc3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "para", ".", "data", ".", "mul_", "(", "self", ".", "gamma", "[", "i", "]", ")", "\n", "", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Classification.my_Net_tanh.mask": [[54, 61], ["enumerate", "enumerate", "Simulation_Classification.my_Net_tanh.parameters", "Simulation_Classification.my_Net_tanh.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "mask", "(", "self", ",", "user_gamma", ",", "device", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "gamma", "[", "i", "]", ".", "shape", "!=", "user_gamma", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'size doesn\\'t match'", ")", "\n", "return", "0", "\n", "", "", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "i", "]", ".", "data", "=", "torch", ".", "tensor", "(", "user_gamma", "[", "i", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Classification.my_Net_relu.__init__": [[63, 78], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Classification.my_Net_relu.gamma.append", "Simulation_Classification.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Classification.my_Net_relu.gamma.append", "Simulation_Classification.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Classification.my_Net_relu.gamma.append", "Simulation_Classification.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Classification.my_Net_relu.gamma.append", "Simulation_Classification.my_Net_relu.gamma.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "my_Net_relu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "[", "]", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1000", ",", "6", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Classification.my_Net_relu.to": [[79, 84], ["super().to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "range", "Simulation_Classification.my_Net_relu.gamma.__len__", "Simulation_Classification.my_Net_relu.gamma[].to"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "my_Net_relu", ",", "self", ")", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "gamma", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "index", "]", "=", "self", ".", "gamma", "[", "index", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Classification.my_Net_relu.forward": [[85, 93], ["enumerate", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "Simulation_Classification.my_Net_relu.fc4", "Simulation_Classification.my_Net_relu.parameters", "para.data.mul_", "Simulation_Classification.my_Net_relu.fc1", "Simulation_Classification.my_Net_relu.fc2", "Simulation_Classification.my_Net_relu.fc3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "para", ".", "data", ".", "mul_", "(", "self", ".", "gamma", "[", "i", "]", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Classification.my_Net_relu.mask": [[94, 101], ["enumerate", "enumerate", "Simulation_Classification.my_Net_relu.parameters", "Simulation_Classification.my_Net_relu.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "mask", "(", "self", ",", "user_gamma", ",", "device", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "gamma", "[", "i", "]", ".", "shape", "!=", "user_gamma", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'size doesn\\'t match'", ")", "\n", "return", "0", "\n", "", "", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "i", "]", ".", "data", "=", "torch", ".", "tensor", "(", "user_gamma", "[", "i", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Classification.gradient": [[103, 119], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.cat", "torch.cat", "torch.cat", "list", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "zip", "x.contiguous().view", "x.contiguous"], "function", ["None"], ["", "", "", "def", "gradient", "(", "outputs", ",", "inputs", ",", "grad_outputs", "=", "None", ",", "retain_graph", "=", "None", ",", "create_graph", "=", "False", ")", ":", "\n", "    ", "'''\n    Compute the gradient of `outputs` with respect to `inputs`\n    gradient(x.sum(), x)\n    gradient((x * y).sum(), [x, y])\n    '''", "\n", "if", "torch", ".", "is_tensor", "(", "inputs", ")", ":", "\n", "        ", "inputs", "=", "[", "inputs", "]", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "list", "(", "inputs", ")", "\n", "", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", ",", "inputs", ",", "grad_outputs", ",", "\n", "allow_unused", "=", "True", ",", "\n", "retain_graph", "=", "retain_graph", ",", "\n", "create_graph", "=", "create_graph", ")", "\n", "grads", "=", "[", "x", "if", "x", "is", "not", "None", "else", "torch", ".", "zeros_like", "(", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "grads", ",", "inputs", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "for", "x", "in", "grads", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Classification.hessian": [[120, 156], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "sum", "enumerate", "list", "output.new_zeros", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "grad.contiguous().view.contiguous().view", "range", "p.numel", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "inp.numel", "out[].add_", "grad.contiguous().view.contiguous", "grad[].new_zeros", "grad[].new_zeros.type_as", "out[].add_", "Simulation_Classification.gradient", "row[].type_as", "sum", "x.numel"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.gradient"], ["", "def", "hessian", "(", "output", ",", "inputs", ",", "out", "=", "None", ",", "allow_unused", "=", "False", ",", "create_graph", "=", "False", ")", ":", "\n", "    ", "'''\n    Compute the Hessian of `output` with respect to `inputs`\n    hessian((x * y).sum(), [x, y])\n    '''", "\n", "#assert output.ndimension() == 0", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "inputs", ")", ":", "\n", "        ", "inputs", "=", "[", "inputs", "]", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "list", "(", "inputs", ")", "\n", "\n", "", "n", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "inputs", ")", "\n", "if", "out", "is", "None", ":", "\n", "        ", "out", "=", "output", ".", "new_zeros", "(", "n", ",", "n", ")", "\n", "\n", "", "ai", "=", "0", "\n", "for", "i", ",", "inp", "in", "enumerate", "(", "inputs", ")", ":", "\n", "        ", "[", "grad", "]", "=", "torch", ".", "autograd", ".", "grad", "(", "output", ",", "inp", ",", "create_graph", "=", "True", ",", "allow_unused", "=", "allow_unused", ")", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "inp", ")", "if", "grad", "is", "None", "else", "grad", "\n", "grad", "=", "grad", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "for", "j", "in", "range", "(", "inp", ".", "numel", "(", ")", ")", ":", "\n", "            ", "if", "grad", "[", "j", "]", ".", "requires_grad", ":", "\n", "                ", "row", "=", "gradient", "(", "grad", "[", "j", "]", ",", "inputs", "[", "i", ":", "]", ",", "retain_graph", "=", "True", ",", "create_graph", "=", "create_graph", ")", "[", "j", ":", "]", "\n", "", "else", ":", "\n", "                ", "row", "=", "grad", "[", "j", "]", ".", "new_zeros", "(", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "inputs", "[", "i", ":", "]", ")", "-", "j", ")", "\n", "\n", "", "out", "[", "ai", ",", "ai", ":", "]", ".", "add_", "(", "row", ".", "type_as", "(", "out", ")", ")", "# ai's row", "\n", "if", "ai", "+", "1", "<", "n", ":", "\n", "                ", "out", "[", "ai", "+", "1", ":", ",", "ai", "]", ".", "add_", "(", "row", "[", "1", ":", "]", ".", "type_as", "(", "out", ")", ")", "# ai's column", "\n", "", "del", "row", "\n", "ai", "+=", "1", "\n", "", "del", "grad", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Classification.main": [[159, 495], ["numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "torch.device", "torch.device", "torch.device", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "Simulation_Classification.my_Net_relu.to", "torch.CrossEntropyLoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "numpy.sqrt", "my_Net_relu.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.sum", "numpy.sum", "range", "Simulation_Classification.my_Net_relu.mask", "my_Net_relu.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "my_Net_relu.", "nn.CrossEntropyLoss.", "enumerate", "prior.div.div", "Simulation_Classification.hessian", "Simulation_Classification.hessian", "torch.eye().mul().to", "torch.eye().mul().to", "torch.eye().mul().to", "torch.where", "torch.where", "torch.where", "torch.cat", "torch.cat", "torch.cat", "print", "print", "log_evidence.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "Simulation_Classification.my_Net_tanh", "my_Net_relu.parameters", "os.path.isdir", "para_path.append", "para_gamma_path.append", "my_Net_relu.zero_grad", "my_Net_relu.", "nn.CrossEntropyLoss.", "loss_func.backward", "torch.optim.SGD.step", "para_gamma_path.__len__", "user_gamma.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "para_path_fine_tune.append", "para_gamma_path_fine_tune.append", "my_Net_relu.zero_grad", "my_Net_relu.", "nn.CrossEntropyLoss.", "loss_func.backward", "torch.optim.SGD.step", "my_Net_relu.parameters", "para.pow().div().add", "torch.where", "torch.where", "torch.where", "my_Net_relu.parameters", "my_Net_relu.parameters", "torch.isnan", "torch.isnan", "torch.isnan", "str", "Simulation_Classification.my_Net_relu", "print", "exit", "numpy.log", "numpy.log", "os.makedirs", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.parameters", "print", "str", "numpy.max", "my_Net_relu.parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.parameters", "print", "str", "numpy.log", "torch.isinf", "torch.isinf", "torch.isinf", "para.pow().mul().add().exp().add().pow.mul().sum", "torch.eye().mul", "torch.eye().mul", "torch.eye().mul", "x.contiguous().view", "[].abs().log().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "str", "str", "str", "str", "str", "str", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.log", "numpy.log", "numpy.log", "range", "para.pow().mul().add().exp().add().pow", "para.pow().mul().add().exp().add().pow.div", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "enumerate", "print", "print", "numpy.max", "range", "para.pow().mul().add().exp().add().pow", "para.pow().mul().add().exp().add().pow.div", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "enumerate", "print", "print", "para.pow().div", "numpy.where", "object.mul", "numpy.log", "log_evidence.cpu", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.sqrt", "os.path.isdir", "list", "list", "para.div().mul", "para.div().mul", "my_Net_relu.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "list", "list", "para.div().mul", "para.div().mul", "my_Net_relu.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "para.pow().div().exp().mul", "para.pow().div().exp().mul", "numpy.sqrt", "para.pow().mul().add().exp().add().pow.mul", "torch.eye", "torch.eye", "torch.eye", "x.contiguous", "numpy.where", "numpy.log", "[].abs().log", "net.data.argmax().eq", "net.data.argmax().eq", "net.data.argmax().eq", "para.pow().mul().add().exp().add", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "para.pow().mul().add().exp().add", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "para.pow", "numpy.where", "torch.cat.cpu().numpy", "para.div", "para.div", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "str", "para.div", "para.div", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "str", "para.pow().div().exp", "numpy.sqrt", "para.pow().div().exp", "numpy.sqrt", "torch.cat.cpu().numpy", "[].abs", "net.data.argmax", "net.data.argmax", "net.data.argmax", "para.pow().mul().add().exp", "net.data.argmax().eq", "net.data.argmax().eq", "net.data.argmax().eq", "para.cpu", "numpy.max", "para.pow().mul().add().exp", "net.data.argmax().eq", "net.data.argmax().eq", "net.data.argmax().eq", "para.cpu", "numpy.max", "torch.cat.cpu().numpy", "torch.cat.cpu", "str", "str", "para.pow().div", "para.pow().div", "torch.cat.cpu", "para.pow().mul().add", "net.data.argmax", "net.data.argmax", "net.data.argmax", "para.pow().mul().add", "net.data.argmax", "net.data.argmax", "net.data.argmax", "torch.cat.cpu", "para.abs", "str", "para.abs", "str", "para.pow", "para.pow", "selected_hessian.eig", "para.pow().mul", "para.pow().mul", "para.pow", "para.pow"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.mask", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.hessian", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.hessian", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "main", "(", ")", ":", "\n", "    ", "data_index", "=", "args", ".", "data_index", "\n", "subn", "=", "500", "\n", "\n", "prior_sigma_0", "=", "0.0001", "\n", "\n", "prior_sigma_1", "=", "1", "\n", "\n", "lambda_n", "=", "0.00001", "\n", "\n", "NTrain", "=", "10000", "\n", "Nval", "=", "1000", "\n", "NTest", "=", "1000", "\n", "TotalP", "=", "1000", "\n", "\n", "x_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "TotalP", "]", ")", ")", "\n", "y_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "1", "]", ")", ")", "\n", "\n", "x_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "TotalP", "]", ")", ")", "\n", "y_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "1", "]", ")", ")", "\n", "\n", "x_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "TotalP", "]", ")", ")", "\n", "y_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "1", "]", ")", ")", "\n", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "data_index", ")", "+", "\"/x_train.csv\"", ")", ")", "\n", "x_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "data_index", ")", "+", "\"/y_train.csv\"", ")", ")", "\n", "y_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "data_index", ")", "+", "\"/x_val.csv\"", ")", ")", "\n", "x_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "data_index", ")", "+", "\"/y_val.csv\"", ")", ")", "\n", "y_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "data_index", ")", "+", "\"/x_test.csv\"", ")", ")", "\n", "x_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "data_index", ")", "+", "\"/y_test.csv\"", ")", ")", "\n", "y_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "x_train", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "device", ")", "\n", "y_train", "=", "torch", ".", "LongTensor", "(", "y_train", ")", ".", "view", "(", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "x_val", "=", "torch", ".", "FloatTensor", "(", "x_val", ")", ".", "to", "(", "device", ")", "\n", "y_val", "=", "torch", ".", "LongTensor", "(", "y_val", ")", ".", "view", "(", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "device", ")", "\n", "y_test", "=", "torch", ".", "LongTensor", "(", "y_test", ")", ".", "view", "(", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "num_seed", "=", "10", "\n", "\n", "log_evidence_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "dim_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "num_selection_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "num_selection_true_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "train_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "val_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "test_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "train_accuracy_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "val_accuracy_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "test_accuracy_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "\n", "for", "my_seed", "in", "range", "(", "num_seed", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "my_seed", ")", "\n", "torch", ".", "manual_seed", "(", "my_seed", ")", "\n", "\n", "if", "args", ".", "activation", "==", "'tanh'", ":", "\n", "            ", "net", "=", "my_Net_tanh", "(", ")", "\n", "", "elif", "args", ".", "activation", "==", "'relu'", ":", "\n", "            ", "net", "=", "my_Net_relu", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'unrecognized activation function'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "net", ".", "to", "(", "device", ")", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "step_lr", "=", "0.005", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ")", "\n", "\n", "c1", "=", "np", ".", "log", "(", "lambda_n", ")", "-", "np", ".", "log", "(", "1", "-", "lambda_n", ")", "+", "0.5", "*", "np", ".", "log", "(", "prior_sigma_0", ")", "-", "0.5", "*", "np", ".", "log", "(", "prior_sigma_1", ")", "\n", "c2", "=", "0.5", "/", "prior_sigma_0", "-", "0.5", "/", "prior_sigma_1", "\n", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "prior_sigma_1", "/", "prior_sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "prior_sigma_0", "-", "0.5", "/", "prior_sigma_1", ")", ")", "\n", "\n", "max_loop", "=", "80001", "\n", "PATH", "=", "'./result/classification/'", "+", "args", ".", "activation", "+", "'/bayesian_evidence/'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "                ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "raise", "\n", "", "", "", "show_information", "=", "100", "\n", "\n", "para_path", "=", "[", "]", "\n", "para_gamma_path", "=", "[", "]", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "train_accuracy_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_accuracy_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_accuracy_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "for", "iter", "in", "range", "(", "max_loop", ")", ":", "\n", "            ", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# prior gradient", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "temp", "=", "para", ".", "pow", "(", "2", ")", ".", "mul", "(", "c2", ")", ".", "add", "(", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "para", ".", "div", "(", "-", "prior_sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "para", ".", "div", "(", "-", "prior_sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "prior_grad", "=", "temp", ".", "div", "(", "NTrain", ")", "\n", "para", ".", "grad", ".", "data", "-=", "prior_grad", "\n", "\n", "", "", "optimization", ".", "step", "(", ")", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_train", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ",", "'train accuracy:'", ",", "accuracy", ")", "\n", "train_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "train_accuracy_path", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_val", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ",", "'val accuracy:'", ",", "accuracy", ")", "\n", "val_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "val_accuracy_path", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_test", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ",", "'test accuracy:'", ",", "accuracy", ")", "\n", "test_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "test_accuracy_path", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "(", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "4", "]", ")", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "\"_simu_\"", "+", "str", "(", "my_seed", ")", "+", "'_'", "+", "str", "(", "subn", ")", "+", "'_'", "+", "str", "(", "\n", "lambda_n", ")", "+", "'_'", "+", "str", "(", "prior_sigma_0", ")", "+", "'.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path", ",", "para_gamma_path", ",", "train_loss_path", ",", "val_loss_path", ",", "test_loss_path", ",", "train_accuracy_path", ",", "\n", "val_accuracy_path", ",", "test_accuracy_path", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "num_selection_list", "[", "my_seed", "]", "=", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "\n", "num_selection_true_list", "[", "my_seed", "]", "=", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "4", "]", ")", "\n", "\n", "user_gamma", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "para_gamma_path", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "user_gamma", ".", "append", "(", "para_gamma_path", "[", "index", "]", "[", "-", "1", ",", "]", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "para", ".", "data", "=", "torch", ".", "FloatTensor", "(", "para_path", "[", "i", "]", "[", "-", "1", ",", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "net", ".", "mask", "(", "user_gamma", ",", "device", ")", "\n", "\n", "fine_tune_loop", "=", "40001", "\n", "para_path_fine_tune", "=", "[", "]", "\n", "para_gamma_path_fine_tune", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "train_accuracy_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_accuracy_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_accuracy_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "for", "iter", "in", "range", "(", "fine_tune_loop", ")", ":", "\n", "            ", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# prior gradient", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "temp", "=", "para", ".", "pow", "(", "2", ")", ".", "mul", "(", "c2", ")", ".", "add", "(", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "para", ".", "div", "(", "-", "prior_sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "para", ".", "div", "(", "-", "prior_sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "prior_grad", "=", "temp", ".", "div", "(", "NTrain", ")", "\n", "para", ".", "grad", ".", "data", "-=", "prior_grad", "\n", "\n", "", "", "optimization", ".", "step", "(", ")", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_train", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ",", "'train accuracy:'", ",", "accuracy", ")", "\n", "train_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "train_accuracy_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_val", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ",", "'val accuracy:'", ",", "accuracy", ")", "\n", "val_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "val_accuracy_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_test", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ",", "'test accuracy:'", ",", "accuracy", ")", "\n", "test_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "test_accuracy_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path_fine_tune", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path_fine_tune", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "(", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "\n", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "4", "]", ")", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "\"_simu_\"", "+", "str", "(", "my_seed", ")", "+", "'_'", "+", "str", "(", "subn", ")", "+", "'_'", "+", "str", "(", "\n", "lambda_n", ")", "+", "'_'", "+", "str", "(", "\n", "prior_sigma_0", ")", "+", "'_fine_tune.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path_fine_tune", ",", "para_gamma_path_fine_tune", ",", "train_loss_path_fine_tune", ",", "val_loss_path_fine_tune", ",", "\n", "test_loss_path_fine_tune", ",", "train_accuracy_path_fine_tune", ",", "val_accuracy_path_fine_tune", ",", "\n", "test_accuracy_path_fine_tune", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "\n", "prior", "=", "0", "\n", "for", "layer_index", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "temp", "=", "(", "para", ".", "pow", "(", "2", ")", ".", "div", "(", "-", "2", "*", "prior_sigma_1", ")", ".", "exp", "(", ")", ".", "mul", "(", "lambda_n", "/", "np", ".", "sqrt", "(", "prior_sigma_1", ")", ")", "+", "\n", "para", ".", "pow", "(", "2", ")", ".", "div", "(", "-", "2", "*", "prior_sigma_0", ")", ".", "exp", "(", ")", ".", "mul", "(", "\n", "(", "1", "-", "lambda_n", ")", "/", "np", ".", "sqrt", "(", "prior_sigma_0", ")", ")", ")", ".", "log", "(", ")", "\n", "debug_temp", "=", "para", ".", "pow", "(", "2", ")", ".", "div", "(", "-", "2", "*", "prior_sigma_1", ")", ".", "add", "(", "np", ".", "log", "(", "lambda_n", "/", "np", ".", "sqrt", "(", "prior_sigma_1", ")", ")", ")", "\n", "temp", "=", "torch", ".", "where", "(", "torch", ".", "isinf", "(", "temp", ")", ",", "debug_temp", ",", "temp", ")", "\n", "prior", "=", "prior", "-", "temp", ".", "mul", "(", "net", ".", "gamma", "[", "layer_index", "]", ")", ".", "sum", "(", ")", "\n", "\n", "", "prior", "=", "prior", ".", "div", "(", "NTrain", ")", "\n", "object", "=", "loss", "+", "prior", "\n", "\n", "loss_hessian", "=", "hessian", "(", "loss", ",", "net", ".", "parameters", "(", ")", ")", "\n", "prior_hessian", "=", "hessian", "(", "prior", ",", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "shape", "=", "prior_hessian", ".", "shape", "[", "0", "]", "\n", "\n", "debug_hessian", "=", "torch", ".", "eye", "(", "shape", ")", ".", "mul", "(", "prior_sigma_1", "/", "NTrain", ")", ".", "to", "(", "device", ")", "\n", "\n", "prior_hessian", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "prior_hessian", ")", ",", "debug_hessian", ",", "prior_hessian", ")", "\n", "\n", "hessian_matrix", "=", "loss_hessian", "+", "prior_hessian", "\n", "\n", "gamma_index", "=", "torch", ".", "cat", "(", "[", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "for", "x", "in", "net", ".", "gamma", "]", ")", "\n", "\n", "selected_hessian", "=", "hessian_matrix", "[", "np", ".", "where", "(", "gamma_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "[", "0", "]", ",", ":", "]", "[", ":", ",", "\n", "np", ".", "where", "(", "gamma_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "[", "0", "]", "]", "\n", "\n", "\n", "dim", "=", "np", ".", "where", "(", "gamma_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "log_evidence", "=", "object", ".", "mul", "(", "-", "NTrain", ")", "+", "0.5", "*", "dim", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "-", "0.5", "*", "dim", "*", "np", ".", "log", "(", "NTrain", ")", "-", "0.5", "*", "selected_hessian", ".", "eig", "(", ")", "[", "0", "]", "[", ":", ",", "0", "]", ".", "abs", "(", ")", ".", "log", "(", ")", ".", "sum", "(", ")", "\n", "\n", "print", "(", "'Bayesian Evidence:'", ",", "log_evidence", ")", "\n", "print", "(", "'Dimension:'", ",", "dim", ")", "\n", "log_evidence_list", "[", "my_seed", "]", "=", "log_evidence", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "dim_list", "[", "my_seed", "]", "=", "dim", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_train", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"Train Loss:\"", ",", "loss", ",", "\"Train accuracy:\"", ",", "accuracy", ")", "\n", "train_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "train_accuracy_list", "[", "my_seed", "]", "=", "accuracy", "\n", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_val", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"Val Loss:\"", ",", "loss", ",", "\"Val accuracy:\"", ",", "accuracy", ")", "\n", "val_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "val_accuracy_list", "[", "my_seed", "]", "=", "accuracy", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_test", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"Test Loss:\"", ",", "loss", ",", "\"Test accuracy:\"", ",", "accuracy", ")", "\n", "test_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "test_accuracy_list", "[", "my_seed", "]", "=", "accuracy", "\n", "\n", "\n", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "'_result.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "\n", "[", "log_evidence_list", ",", "dim_list", ",", "num_selection_list", ",", "num_selection_true_list", ",", "train_loss_list", ",", "val_loss_list", ",", "\n", "test_loss_list", ",", "train_accuracy_list", ",", "val_accuracy_list", ",", "test_accuracy_list", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_structure.my_Net.__init__": [[21, 31], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_structure.my_Net.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_structure.my_Net.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_structure.my_Net.gamma.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "my_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "[", "]", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1000", ",", "5", ",", "bias", "=", "False", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "5", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "3", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_structure.my_Net.to": [[32, 37], ["super().to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "range", "Spinn_structure.my_Net.gamma.__len__", "Spinn_structure.my_Net.gamma[].to"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "my_Net", ",", "self", ")", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "gamma", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "index", "]", "=", "self", ".", "gamma", "[", "index", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_structure.my_Net.forward": [[39, 47], ["enumerate", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "Spinn_structure.my_Net.fc3", "Spinn_structure.my_Net.parameters", "para.data.mul_", "Spinn_structure.my_Net.fc1", "Spinn_structure.my_Net.fc2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "para", ".", "data", ".", "mul_", "(", "self", ".", "gamma", "[", "i", "]", ")", "\n", "", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_structure.my_Net.mask": [[48, 55], ["enumerate", "enumerate", "Spinn_structure.my_Net.parameters", "Spinn_structure.my_Net.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "mask", "(", "self", ",", "user_gamma", ",", "device", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "gamma", "[", "i", "]", ".", "shape", "!=", "user_gamma", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'size doesn\\'t match'", ")", "\n", "return", "0", "\n", "", "", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "i", "]", ".", "data", "=", "torch", ".", "tensor", "(", "user_gamma", "[", "i", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_structure.main": [[57, 329], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.array", "torch.device", "torch.device", "torch.device", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "Spinn_structure.my_Net", "Spinn_structure.my_Net.to", "torch.MSELoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "my_Net.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.sum", "numpy.sum", "range", "Spinn_structure.my_Net.mask", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "my_Net.parameters", "os.path.isdir", "para_path_group_lasso.append", "para_gamma_path_group_lasso.append", "my_Net.zero_grad", "my_Net.", "nn.MSELoss.", "enumerate", "object.backward", "torch.optim.SGD.step", "para_gamma_path_group_lasso.__len__", "user_gamma.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "para_path_fine_tune_group_lasso.append", "para_gamma_path_fine_tune_group_lasso.append", "my_Net.zero_grad", "my_Net.", "nn.MSELoss.", "enumerate", "object.backward", "torch.optim.SGD.step", "str", "os.makedirs", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "my_Net.parameters", "print", "print", "str", "numpy.max", "my_Net.parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "my_Net.parameters", "print", "str", "str", "str", "str", "str", "str", "str", "range", "para.abs().sum().mul", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "enumerate", "print", "print", "numpy.max", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "range", "para.abs().sum().mul", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "enumerate", "print", "print", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "os.path.isdir", "list", "list", "my_Net.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "list", "list", "my_Net.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "para.abs().sum", "para.abs().sum", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "para.abs", "para.cpu", "numpy.max", "para.abs", "para.cpu", "numpy.max", "para.abs", "para.abs"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.mask", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "my_seed", "=", "args", ".", "data_index", "\n", "subn", "=", "500", "\n", "np", ".", "random", ".", "seed", "(", "my_seed", ")", "\n", "torch", ".", "manual_seed", "(", "my_seed", ")", "\n", "\n", "NTrain", "=", "10000", "\n", "Nval", "=", "1000", "\n", "NTest", "=", "1000", "\n", "TotalP", "=", "1000", "\n", "\n", "x_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "TotalP", "]", ")", ")", "\n", "y_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "1", "]", ")", ")", "\n", "\n", "x_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "TotalP", "]", ")", ")", "\n", "y_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "1", "]", ")", ")", "\n", "\n", "x_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "TotalP", "]", ")", ")", "\n", "y_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "1", "]", ")", ")", "\n", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/structure/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_train.csv\"", ")", ")", "\n", "x_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/structure/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_train.csv\"", ")", ")", "\n", "y_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/structure/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_val.csv\"", ")", ")", "\n", "x_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/structure/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_val.csv\"", ")", ")", "\n", "y_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/structure/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_test.csv\"", ")", ")", "\n", "x_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/structure/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_test.csv\"", ")", ")", "\n", "y_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "\n", "# lambda_vec = np.array([0.15, 0.14, 0.13, 0.12, 0.11, 0.1, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02, 0.01])", "\n", "lambda_vec", "=", "np", ".", "array", "(", "[", "0.05", "]", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "x_train", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "device", ")", "\n", "y_train", "=", "torch", ".", "FloatTensor", "(", "y_train", ")", ".", "to", "(", "device", ")", "\n", "x_val", "=", "torch", ".", "FloatTensor", "(", "x_val", ")", ".", "to", "(", "device", ")", "\n", "y_val", "=", "torch", ".", "FloatTensor", "(", "y_val", ")", ".", "to", "(", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "device", ")", "\n", "y_test", "=", "torch", ".", "FloatTensor", "(", "y_test", ")", ".", "to", "(", "device", ")", "\n", "\n", "threshold", "=", "0.01", "\n", "\n", "num_selection_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "num_selection_true_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "train_loss_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "val_loss_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "test_loss_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "train_loss_list_group_lasso_fine_tune", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "val_loss_list_group_lasso_fine_tune", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "test_loss_list_group_lasso_fine_tune", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "for", "hyper_index", "in", "range", "(", "lambda_vec", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "my_seed", "-", "1", ")", "\n", "torch", ".", "manual_seed", "(", "my_seed", "-", "1", ")", "\n", "lambda_1", "=", "lambda_vec", "[", "hyper_index", "]", "\n", "\n", "net", "=", "my_Net", "(", ")", "\n", "net", ".", "to", "(", "device", ")", "\n", "loss_func", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "step_lr", "=", "0.005", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ")", "\n", "\n", "alpha", "=", "0", "\n", "\n", "\n", "max_loop", "=", "80001", "\n", "PATH", "=", "'./result/structure/Spinn/'", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "                ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "raise", "\n", "\n", "", "", "", "show_information", "=", "100", "\n", "\n", "para_path_group_lasso", "=", "[", "]", "\n", "para_gamma_path_group_lasso", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path_group_lasso", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path_group_lasso", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path_group_lasso", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path_group_lasso", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path_group_lasso", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "for", "iter", "in", "range", "(", "max_loop", ")", ":", "\n", "            ", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "\n", "penalty", "=", "0", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "penalty", "=", "penalty", "+", "para", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "mul", "(", "(", "1", "-", "alpha", ")", "*", "lambda_1", ")", "\n", "\n", "", "object", "=", "loss", "+", "penalty", "\n", "object", ".", "backward", "(", ")", "\n", "optimization", ".", "step", "(", ")", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "print", "(", "'lambda1:'", ",", "lambda_1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ")", "\n", "val_loss_path_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path_group_lasso", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path_group_lasso", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "(", "\n", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "\n", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_group_lasso", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path_group_lasso", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "5", "]", ")", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'simu_'", "+", "str", "(", "my_seed", ")", "+", "'_group_lasso_'", "+", "str", "(", "lambda_1", ")", "+", "'.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "\n", "[", "para_path_group_lasso", ",", "para_gamma_path_group_lasso", ",", "train_loss_path_group_lasso", ",", "val_loss_path_group_lasso", ",", "\n", "test_loss_path_group_lasso", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "num_selection_list_group_lasso", "[", "hyper_index", "]", "=", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_group_lasso", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "\n", "num_selection_true_list_group_lasso", "[", "hyper_index", "]", "=", "np", ".", "sum", "(", "\n", "(", "np", ".", "max", "(", "para_gamma_path_group_lasso", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "5", "]", ")", "\n", "\n", "user_gamma", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "para_gamma_path_group_lasso", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "user_gamma", ".", "append", "(", "para_gamma_path_group_lasso", "[", "index", "]", "[", "-", "1", ",", "]", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "para", ".", "data", "=", "torch", ".", "FloatTensor", "(", "para_path_group_lasso", "[", "i", "]", "[", "-", "1", ",", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "net", ".", "mask", "(", "user_gamma", ",", "device", ")", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"Train Loss:\"", ",", "loss", ")", "\n", "train_loss_list_group_lasso", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"Val Loss:\"", ",", "loss", ")", "\n", "val_loss_list_group_lasso", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"Test Loss:\"", ",", "loss", ")", "\n", "test_loss_list_group_lasso", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "fine_tune_loop", "=", "40001", "\n", "para_path_fine_tune_group_lasso", "=", "[", "]", "\n", "para_gamma_path_fine_tune_group_lasso", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path_fine_tune_group_lasso", ".", "append", "(", "\n", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path_fine_tune_group_lasso", ".", "append", "(", "\n", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path_fine_tune_group_lasso", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path_fine_tune_group_lasso", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path_fine_tune_group_lasso", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "\n", "for", "iter", "in", "range", "(", "fine_tune_loop", ")", ":", "\n", "            ", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "\n", "penalty", "=", "0", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "penalty", "=", "penalty", "+", "para", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "mul", "(", "(", "1", "-", "alpha", ")", "*", "lambda_1", ")", "\n", "\n", "", "object", "=", "loss", "+", "penalty", "\n", "object", ".", "backward", "(", ")", "\n", "optimization", ".", "step", "(", ")", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path_fine_tune_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ")", "\n", "val_loss_path_fine_tune_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path_fine_tune_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path_fine_tune_group_lasso", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path_fine_tune_group_lasso", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "(", "\n", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "\n", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune_group_lasso", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune_group_lasso", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "\n", "0", ":", "5", "]", ")", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'simu_'", "+", "str", "(", "my_seed", ")", "+", "'_group_lasso_fine_tune_'", "+", "str", "(", "hyper_index", ")", "+", "'.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path_fine_tune_group_lasso", ",", "para_gamma_path_fine_tune_group_lasso", ",", "\n", "train_loss_path_fine_tune_group_lasso", ",", "val_loss_path_fine_tune_group_lasso", ",", "\n", "test_loss_path_fine_tune_group_lasso", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"Train Loss:\"", ",", "loss", ")", "\n", "train_loss_list_group_lasso_fine_tune", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"Val Loss:\"", ",", "loss", ")", "\n", "val_loss_list_group_lasso_fine_tune", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"Test Loss:\"", ",", "loss", ")", "\n", "test_loss_list_group_lasso_fine_tune", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'simu_'", "+", "str", "(", "my_seed", ")", "+", "'_group_lasso_result.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "num_selection_list_group_lasso", ",", "num_selection_true_list_group_lasso", ",", "train_loss_list_group_lasso", ",", "\n", "val_loss_list_group_lasso", ",", "\n", "test_loss_list_group_lasso", ",", "train_loss_list_group_lasso_fine_tune", ",", "val_loss_list_group_lasso_fine_tune", ",", "\n", "test_loss_list_group_lasso_fine_tune", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Dropout_Classification.Drop_out_Net_tanh.__init__": [[23, 34], ["super().__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Drop_out_Net_tanh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1000", ",", "6", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "drop3", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "drop4", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Dropout_Classification.Drop_out_Net_tanh.forward": [[36, 46], ["Dropout_Classification.Drop_out_Net_tanh.drop1", "torch.tanh", "torch.tanh", "torch.tanh", "Dropout_Classification.Drop_out_Net_tanh.drop2", "torch.tanh", "torch.tanh", "torch.tanh", "Dropout_Classification.Drop_out_Net_tanh.drop3", "torch.tanh", "torch.tanh", "torch.tanh", "Dropout_Classification.Drop_out_Net_tanh.drop4", "Dropout_Classification.Drop_out_Net_tanh.fc4", "Dropout_Classification.Drop_out_Net_tanh.fc1", "Dropout_Classification.Drop_out_Net_tanh.fc2", "Dropout_Classification.Drop_out_Net_tanh.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drop2", "(", "x", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drop3", "(", "x", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drop4", "(", "x", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Dropout_Classification.Drop_out_Net_relu.__init__": [[49, 60], ["super().__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Drop_out_Net_relu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1000", ",", "6", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "drop3", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "drop4", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Dropout_Classification.Drop_out_Net_relu.forward": [[62, 72], ["Dropout_Classification.Drop_out_Net_relu.drop1", "torch.relu", "torch.relu", "torch.relu", "Dropout_Classification.Drop_out_Net_relu.drop2", "torch.relu", "torch.relu", "torch.relu", "Dropout_Classification.Drop_out_Net_relu.drop3", "torch.relu", "torch.relu", "torch.relu", "Dropout_Classification.Drop_out_Net_relu.drop4", "Dropout_Classification.Drop_out_Net_relu.fc4", "Dropout_Classification.Drop_out_Net_relu.fc1", "Dropout_Classification.Drop_out_Net_relu.fc2", "Dropout_Classification.Drop_out_Net_relu.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drop2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drop3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drop4", "(", "x", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Dropout_Classification.main": [[75, 206], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "torch.device", "torch.device", "torch.device", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "Drop_out_Net_relu.to", "torch.CrossEntropyLoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "Drop_out_Net_relu.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "Dropout_Classification.Drop_out_Net_tanh", "Drop_out_Net_relu.parameters", "os.path.isdir", "para_path.append", "Drop_out_Net_relu.train", "Drop_out_Net_relu.zero_grad", "Drop_out_Net_relu.", "nn.CrossEntropyLoss.", "loss_func.backward", "torch.optim.SGD.step", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "Dropout_Classification.Drop_out_Net_relu", "print", "exit", "os.makedirs", "numpy.zeros", "range", "numpy.random.choice", "Drop_out_Net_relu.eval", "print", "str", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Drop_out_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "Drop_out_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "Drop_out_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "enumerate", "str", "str", "str", "str", "str", "str", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "os.path.isdir", "list", "Drop_out_Net_relu.parameters", "para.cpu().data.numpy", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "net.data.argmax().eq", "net.data.argmax().eq", "net.data.argmax().eq", "para.cpu", "net.data.argmax", "net.data.argmax", "net.data.argmax"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "my_seed", "=", "args", ".", "data_index", "\n", "subn", "=", "500", "\n", "\n", "np", ".", "random", ".", "seed", "(", "my_seed", ")", "\n", "torch", ".", "manual_seed", "(", "my_seed", ")", "\n", "\n", "NTrain", "=", "10000", "\n", "Nval", "=", "1000", "\n", "NTest", "=", "1000", "\n", "TotalP", "=", "1000", "\n", "\n", "x_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "TotalP", "]", ")", ")", "\n", "y_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "1", "]", ")", ")", "\n", "\n", "x_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "TotalP", "]", ")", ")", "\n", "y_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "1", "]", ")", ")", "\n", "\n", "x_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "TotalP", "]", ")", ")", "\n", "y_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "1", "]", ")", ")", "\n", "\n", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_train.csv\"", ")", ")", "\n", "x_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_train.csv\"", ")", ")", "\n", "y_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_val.csv\"", ")", ")", "\n", "x_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_val.csv\"", ")", ")", "\n", "y_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_test.csv\"", ")", ")", "\n", "x_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_test.csv\"", ")", ")", "\n", "y_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "x_train", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "device", ")", "\n", "y_train", "=", "torch", ".", "LongTensor", "(", "y_train", ")", ".", "view", "(", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "x_val", "=", "torch", ".", "FloatTensor", "(", "x_val", ")", ".", "to", "(", "device", ")", "\n", "y_val", "=", "torch", ".", "LongTensor", "(", "y_val", ")", ".", "view", "(", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "device", ")", "\n", "y_test", "=", "torch", ".", "LongTensor", "(", "y_test", ")", ".", "view", "(", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "activation", "==", "'tanh'", ":", "\n", "        ", "net", "=", "Drop_out_Net_tanh", "(", ")", "\n", "", "elif", "args", ".", "activation", "==", "'relu'", ":", "\n", "        ", "net", "=", "Drop_out_Net_relu", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'unrecognized activation function'", ")", "\n", "exit", "(", "0", ")", "\n", "", "net", ".", "to", "(", "device", ")", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "step_lr", "=", "0.005", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ")", "\n", "\n", "max_loop", "=", "80001", "\n", "PATH", "=", "'./result/classification/'", "+", "args", ".", "activation", "+", "'/drop_out/'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "            ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "", "", "", "show_information", "=", "100", "\n", "\n", "para_path", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "para_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "train_accuracy_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_accuracy_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_accuracy_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "for", "iter", "in", "range", "(", "max_loop", ")", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "if", "subn", "==", "NTrain", ":", "\n", "            ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "            ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimization", ".", "step", "(", ")", "\n", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "            ", "net", ".", "eval", "(", ")", "\n", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_train", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ",", "'train accuracy:'", ",", "accuracy", ")", "\n", "train_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "train_accuracy_path", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_val", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ",", "'val accuracy:'", ",", "accuracy", ")", "\n", "val_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "val_accuracy_path", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_test", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ",", "'test accuracy:'", ",", "accuracy", ")", "\n", "test_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "test_accuracy_path", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "para_path", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "\"simu_\"", "+", "str", "(", "my_seed", ")", "+", "'_drop_out.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path", ",", "train_loss_path", ",", "val_loss_path", ",", "test_loss_path", ",", "train_accuracy_path", ",", "val_accuracy_path", ",", "\n", "test_accuracy_path", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.transforms.RandomErasing.__init__": [[22, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ",", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r1", "=", "r1", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.transforms.RandomErasing.__call__": [[29, 55], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.size", "img.size", "math.sqrt", "math.sqrt", "img.size", "img.size", "img.size", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "probability", ":", "\n", "            ", "return", "img", "\n", "\n", "", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "(", ")", "[", "1", "]", "*", "img", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img", ".", "size", "(", ")", "[", "2", "]", "and", "h", "<", "img", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "1", "]", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "2", "]", "-", "w", ")", "\n", "if", "img", ".", "size", "(", ")", "[", "0", "]", "==", "3", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "img", "[", "1", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "1", "]", "\n", "img", "[", "2", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "", "return", "img", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Classification.my_Net_tanh.__init__": [[23, 38], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Classification.my_Net_tanh.gamma.append", "Spinn_Classification.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Classification.my_Net_tanh.gamma.append", "Spinn_Classification.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Classification.my_Net_tanh.gamma.append", "Spinn_Classification.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Classification.my_Net_tanh.gamma.append", "Spinn_Classification.my_Net_tanh.gamma.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "my_Net_tanh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "[", "]", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1000", ",", "6", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Classification.my_Net_tanh.to": [[39, 44], ["super().to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "range", "Spinn_Classification.my_Net_tanh.gamma.__len__", "Spinn_Classification.my_Net_tanh.gamma[].to"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "my_Net_tanh", ",", "self", ")", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "gamma", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "index", "]", "=", "self", ".", "gamma", "[", "index", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Classification.my_Net_tanh.forward": [[45, 53], ["enumerate", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "Spinn_Classification.my_Net_tanh.fc4", "Spinn_Classification.my_Net_tanh.parameters", "para.data.mul_", "Spinn_Classification.my_Net_tanh.fc1", "Spinn_Classification.my_Net_tanh.fc2", "Spinn_Classification.my_Net_tanh.fc3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "para", ".", "data", ".", "mul_", "(", "self", ".", "gamma", "[", "i", "]", ")", "\n", "", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Classification.my_Net_tanh.mask": [[54, 61], ["enumerate", "enumerate", "Spinn_Classification.my_Net_tanh.parameters", "Spinn_Classification.my_Net_tanh.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "mask", "(", "self", ",", "user_gamma", ",", "device", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "gamma", "[", "i", "]", ".", "shape", "!=", "user_gamma", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'size doesn\\'t match'", ")", "\n", "return", "0", "\n", "", "", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "i", "]", ".", "data", "=", "torch", ".", "tensor", "(", "user_gamma", "[", "i", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Classification.my_Net_relu.__init__": [[63, 78], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Classification.my_Net_relu.gamma.append", "Spinn_Classification.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Classification.my_Net_relu.gamma.append", "Spinn_Classification.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Classification.my_Net_relu.gamma.append", "Spinn_Classification.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Classification.my_Net_relu.gamma.append", "Spinn_Classification.my_Net_relu.gamma.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "my_Net_relu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "[", "]", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1000", ",", "6", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Classification.my_Net_relu.to": [[79, 84], ["super().to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "range", "Spinn_Classification.my_Net_relu.gamma.__len__", "Spinn_Classification.my_Net_relu.gamma[].to"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "my_Net_relu", ",", "self", ")", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "gamma", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "index", "]", "=", "self", ".", "gamma", "[", "index", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Classification.my_Net_relu.forward": [[85, 93], ["enumerate", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "Spinn_Classification.my_Net_relu.fc4", "Spinn_Classification.my_Net_relu.parameters", "para.data.mul_", "Spinn_Classification.my_Net_relu.fc1", "Spinn_Classification.my_Net_relu.fc2", "Spinn_Classification.my_Net_relu.fc3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "para", ".", "data", ".", "mul_", "(", "self", ".", "gamma", "[", "i", "]", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Classification.my_Net_relu.mask": [[94, 101], ["enumerate", "enumerate", "Spinn_Classification.my_Net_relu.parameters", "Spinn_Classification.my_Net_relu.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "mask", "(", "self", ",", "user_gamma", ",", "device", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "gamma", "[", "i", "]", ".", "shape", "!=", "user_gamma", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'size doesn\\'t match'", ")", "\n", "return", "0", "\n", "", "", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "i", "]", ".", "data", "=", "torch", ".", "tensor", "(", "user_gamma", "[", "i", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Classification.main": [[103, 440], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "torch.device", "torch.device", "torch.device", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "Spinn_Classification.my_Net_relu.to", "torch.CrossEntropyLoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "my_Net_relu.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.sum", "numpy.sum", "range", "Spinn_Classification.my_Net_relu.mask", "my_Net_relu.eval", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "my_Net_relu.eval", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "Spinn_Classification.my_Net_tanh", "my_Net_relu.parameters", "os.path.isdir", "para_path_group_lasso.append", "para_gamma_path_group_lasso.append", "my_Net_relu.train", "my_Net_relu.zero_grad", "my_Net_relu.", "nn.CrossEntropyLoss.", "enumerate", "object.backward", "torch.optim.SGD.step", "para_gamma_path_group_lasso.__len__", "user_gamma.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "para_path_fine_tune_group_lasso.append", "para_gamma_path_fine_tune_group_lasso.append", "my_Net_relu.train", "my_Net_relu.zero_grad", "my_Net_relu.", "nn.CrossEntropyLoss.", "enumerate", "object.backward", "torch.optim.SGD.step", "str", "Spinn_Classification.my_Net_relu", "print", "exit", "os.makedirs", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "my_Net_relu.parameters", "my_Net_relu.eval", "print", "print", "str", "numpy.max", "my_Net_relu.parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "my_Net_relu.parameters", "print", "str", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "str", "str", "str", "str", "str", "str", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "enumerate", "print", "print", "numpy.max", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.eval", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "enumerate", "print", "print", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "os.path.isdir", "list", "list", "para.abs().sum().mul", "para.pow().sum().mul", "my_Net_relu.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "net.data.argmax().eq", "net.data.argmax().eq", "net.data.argmax().eq", "list", "list", "para.abs().sum().mul", "para.pow().sum().mul", "my_Net_relu.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "net.data.argmax().eq", "net.data.argmax().eq", "net.data.argmax().eq", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "para.abs().sum", "para.pow().sum", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "net.data.argmax", "net.data.argmax", "net.data.argmax", "para.abs().sum", "para.pow().sum", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "net.data.argmax", "net.data.argmax", "net.data.argmax", "net.data.argmax().eq", "net.data.argmax().eq", "net.data.argmax().eq", "para.cpu", "numpy.max", "net.data.argmax().eq", "net.data.argmax().eq", "net.data.argmax().eq", "para.cpu", "numpy.max", "para.abs", "para.pow", "para.abs", "para.pow", "net.data.argmax", "net.data.argmax", "net.data.argmax", "net.data.argmax", "net.data.argmax", "net.data.argmax", "para.abs", "para.abs"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.mask", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "my_seed", "=", "args", ".", "data_index", "\n", "subn", "=", "500", "\n", "np", ".", "random", ".", "seed", "(", "my_seed", ")", "\n", "torch", ".", "manual_seed", "(", "my_seed", ")", "\n", "\n", "NTrain", "=", "10000", "\n", "Nval", "=", "1000", "\n", "NTest", "=", "1000", "\n", "TotalP", "=", "1000", "\n", "\n", "x_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "TotalP", "]", ")", ")", "\n", "y_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "1", "]", ")", ")", "\n", "\n", "x_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "TotalP", "]", ")", ")", "\n", "y_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "1", "]", ")", ")", "\n", "\n", "x_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "TotalP", "]", ")", ")", "\n", "y_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "1", "]", ")", ")", "\n", "\n", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_train.csv\"", ")", ")", "\n", "x_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_train.csv\"", ")", ")", "\n", "y_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_val.csv\"", ")", ")", "\n", "x_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_val.csv\"", ")", ")", "\n", "y_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_test.csv\"", ")", ")", "\n", "x_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_test.csv\"", ")", ")", "\n", "y_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "x_train", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "device", ")", "\n", "y_train", "=", "torch", ".", "LongTensor", "(", "y_train", ")", ".", "view", "(", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "x_val", "=", "torch", ".", "FloatTensor", "(", "x_val", ")", ".", "to", "(", "device", ")", "\n", "y_val", "=", "torch", ".", "LongTensor", "(", "y_val", ")", ".", "view", "(", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "device", ")", "\n", "y_test", "=", "torch", ".", "LongTensor", "(", "y_test", ")", ".", "view", "(", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "lambda_vec", "=", "np", ".", "array", "(", "[", "0.15", ",", "0.14", ",", "0.13", ",", "0.12", ",", "0.11", ",", "0.1", ",", "0.09", ",", "0.08", ",", "0.07", ",", "0.06", ",", "0.05", ",", "0.04", ",", "0.03", ",", "0.02", ",", "0.01", "]", ")", "\n", "\n", "threshold", "=", "0.01", "\n", "\n", "num_selection_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "num_selection_true_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "train_loss_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "val_loss_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "test_loss_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "train_accuracy_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "val_accuracy_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "test_accuracy_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "train_loss_list_group_lasso_fine_tune", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "val_loss_list_group_lasso_fine_tune", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "test_loss_list_group_lasso_fine_tune", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "train_accuracy_list_group_lasso_fine_tune", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "val_accuracy_list_group_lasso_fine_tune", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "test_accuracy_list_group_lasso_fine_tune", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "for", "hyper_index", "in", "range", "(", "lambda_vec", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "hyper_index", ")", "\n", "torch", ".", "manual_seed", "(", "hyper_index", ")", "\n", "lambda_1", "=", "lambda_vec", "[", "hyper_index", "]", "\n", "\n", "if", "args", ".", "activation", "==", "'tanh'", ":", "\n", "            ", "net", "=", "my_Net_tanh", "(", ")", "\n", "", "elif", "args", ".", "activation", "==", "'relu'", ":", "\n", "            ", "net", "=", "my_Net_relu", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'unrecognized activation function'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "net", ".", "to", "(", "device", ")", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "step_lr", "=", "0.005", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ")", "\n", "\n", "alpha", "=", "0", "\n", "\n", "lambda_2", "=", "0.0001", "\n", "\n", "max_loop", "=", "80001", "\n", "PATH", "=", "'./result/classification/'", "+", "args", ".", "activation", "+", "'/Spinn/'", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "                ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "raise", "\n", "", "", "", "show_information", "=", "100", "\n", "\n", "para_path_group_lasso", "=", "[", "]", "\n", "para_gamma_path_group_lasso", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path_group_lasso", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path_group_lasso", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path_group_lasso", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path_group_lasso", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path_group_lasso", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "train_accuracy_path_group_lasso", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_accuracy_path_group_lasso", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_accuracy_path_group_lasso", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "for", "iter", "in", "range", "(", "max_loop", ")", ":", "\n", "            ", "net", ".", "train", "(", ")", "\n", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "\n", "penalty", "=", "0", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "penalty", "=", "penalty", "+", "para", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "mul", "(", "(", "1", "-", "alpha", ")", "*", "lambda_1", ")", "\n", "", "else", ":", "\n", "                    ", "penalty", "=", "penalty", "+", "para", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "mul", "(", "lambda_2", ")", "\n", "\n", "", "", "object", "=", "loss", "+", "penalty", "\n", "object", ".", "backward", "(", ")", "\n", "optimization", ".", "step", "(", ")", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "net", ".", "eval", "(", ")", "\n", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "print", "(", "'lambda1:'", ",", "lambda_1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_train", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ",", "'train accuracy:'", ",", "accuracy", ")", "\n", "train_loss_path_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "train_accuracy_path_group_lasso", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_val", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ",", "'val accuracy:'", ",", "accuracy", ")", "\n", "val_loss_path_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "val_accuracy_path_group_lasso", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_test", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ",", "'test accuracy:'", ",", "accuracy", ")", "\n", "test_loss_path_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "test_accuracy_path_group_lasso", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path_group_lasso", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path_group_lasso", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "(", "\n", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "\n", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_group_lasso", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path_group_lasso", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "4", "]", ")", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'simu_'", "+", "str", "(", "my_seed", ")", "+", "'_group_lasso_'", "+", "str", "(", "lambda_1", ")", "+", "'.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "\n", "[", "para_path_group_lasso", ",", "para_gamma_path_group_lasso", ",", "train_loss_path_group_lasso", ",", "val_loss_path_group_lasso", ",", "\n", "test_loss_path_group_lasso", ",", "train_accuracy_path_group_lasso", ",", "val_accuracy_path_group_lasso", ",", "\n", "test_accuracy_path_group_lasso", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "num_selection_list_group_lasso", "[", "hyper_index", "]", "=", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_group_lasso", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "\n", "num_selection_true_list_group_lasso", "[", "hyper_index", "]", "=", "np", ".", "sum", "(", "\n", "(", "np", ".", "max", "(", "para_gamma_path_group_lasso", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "4", "]", ")", "\n", "\n", "user_gamma", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "para_gamma_path_group_lasso", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "user_gamma", ".", "append", "(", "para_gamma_path_group_lasso", "[", "index", "]", "[", "-", "1", ",", "]", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "para", ".", "data", "=", "torch", ".", "FloatTensor", "(", "para_path_group_lasso", "[", "i", "]", "[", "-", "1", ",", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "net", ".", "mask", "(", "user_gamma", ",", "device", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_train", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"Train Loss:\"", ",", "loss", ",", "\"Train accuracy:\"", ",", "accuracy", ")", "\n", "train_loss_list_group_lasso", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "train_accuracy_list_group_lasso", "[", "hyper_index", "]", "=", "accuracy", "\n", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_val", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"Val Loss:\"", ",", "loss", ",", "\"Val accuracy:\"", ",", "accuracy", ")", "\n", "val_loss_list_group_lasso", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "val_accuracy_list_group_lasso", "[", "hyper_index", "]", "=", "accuracy", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_test", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"Test Loss:\"", ",", "loss", ",", "\"Test accuracy:\"", ",", "accuracy", ")", "\n", "test_loss_list_group_lasso", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "test_accuracy_list_group_lasso", "[", "hyper_index", "]", "=", "accuracy", "\n", "\n", "fine_tune_loop", "=", "40001", "\n", "para_path_fine_tune_group_lasso", "=", "[", "]", "\n", "para_gamma_path_fine_tune_group_lasso", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path_fine_tune_group_lasso", ".", "append", "(", "\n", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path_fine_tune_group_lasso", ".", "append", "(", "\n", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path_fine_tune_group_lasso", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path_fine_tune_group_lasso", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path_fine_tune_group_lasso", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "train_accuracy_path_fine_tune_group_lasso", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_accuracy_path_fine_tune_group_lasso", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_accuracy_path_fine_tune_group_lasso", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "lambda_1", "=", "lambda_2", "\n", "\n", "for", "iter", "in", "range", "(", "fine_tune_loop", ")", ":", "\n", "            ", "net", ".", "train", "(", ")", "\n", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "\n", "penalty", "=", "0", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "penalty", "=", "penalty", "+", "para", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "mul", "(", "(", "1", "-", "alpha", ")", "*", "lambda_1", ")", "\n", "", "else", ":", "\n", "                    ", "penalty", "=", "penalty", "+", "para", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "mul", "(", "lambda_2", ")", "\n", "\n", "", "", "object", "=", "loss", "+", "penalty", "\n", "object", ".", "backward", "(", ")", "\n", "optimization", ".", "step", "(", ")", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "net", ".", "eval", "(", ")", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_train", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ",", "'train accuracy:'", ",", "accuracy", ")", "\n", "train_loss_path_fine_tune_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "train_accuracy_path_fine_tune_group_lasso", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_val", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ",", "'val accuracy:'", ",", "accuracy", ")", "\n", "val_loss_path_fine_tune_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "val_accuracy_path_fine_tune_group_lasso", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_test", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ",", "'test accuracy:'", ",", "accuracy", ")", "\n", "test_loss_path_fine_tune_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "test_accuracy_path_fine_tune_group_lasso", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path_fine_tune_group_lasso", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path_fine_tune_group_lasso", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "(", "\n", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "\n", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune_group_lasso", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune_group_lasso", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "\n", "0", ":", "4", "]", ")", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'simu_'", "+", "str", "(", "my_seed", ")", "+", "'_group_lasso_fine_tune_'", "+", "str", "(", "hyper_index", ")", "+", "'.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path_fine_tune_group_lasso", ",", "para_gamma_path_fine_tune_group_lasso", ",", "\n", "train_loss_path_fine_tune_group_lasso", ",", "val_loss_path_fine_tune_group_lasso", ",", "\n", "test_loss_path_fine_tune_group_lasso", ",", "train_accuracy_path_fine_tune_group_lasso", ",", "\n", "val_accuracy_path_fine_tune_group_lasso", ",", "test_accuracy_path_fine_tune_group_lasso", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_train", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"Train Loss:\"", ",", "loss", ",", "\"Train Accuracy:\"", ",", "accuracy", ")", "\n", "train_loss_list_group_lasso_fine_tune", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "train_accuracy_list_group_lasso_fine_tune", "[", "hyper_index", "]", "=", "accuracy", "\n", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_val", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"Val Loss:\"", ",", "loss", ",", "\"Val Accuracy:\"", ",", "accuracy", ")", "\n", "val_loss_list_group_lasso_fine_tune", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "val_accuracy_list_group_lasso_fine_tune", "[", "hyper_index", "]", "=", "accuracy", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_test", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"Test Loss:\"", ",", "loss", ",", "\"Test Accuracy:\"", ",", "accuracy", ")", "\n", "test_loss_list_group_lasso_fine_tune", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "test_accuracy_list_group_lasso_fine_tune", "[", "hyper_index", "]", "=", "accuracy", "\n", "\n", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'simu_'", "+", "str", "(", "my_seed", ")", "+", "'_group_lasso_result.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "num_selection_list_group_lasso", ",", "num_selection_true_list_group_lasso", ",", "train_loss_list_group_lasso", ",", "\n", "val_loss_list_group_lasso", ",", "\n", "test_loss_list_group_lasso", ",", "train_accuracy_list_group_lasso", ",", "val_accuracy_list_group_lasso", ",", "\n", "test_accuracy_list_group_lasso", ",", "\n", "train_loss_list_group_lasso_fine_tune", ",", "val_loss_list_group_lasso_fine_tune", ",", "\n", "test_loss_list_group_lasso_fine_tune", ",", "\n", "train_accuracy_list_group_lasso_fine_tune", ",", "val_accuracy_list_group_lasso_fine_tune", ",", "\n", "test_accuracy_list_group_lasso_fine_tune", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.BasicBlock.__init__": [[28, 37], ["torch.Module.__init__", "resnet_vb.conv3x3", "vb_net.VB_BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_vb.conv3x3", "vb_net.VB_BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.conv3x3", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "lambda_n", "=", "0.01", ",", "sigma_0", "=", "0.00001", ",", "sigma_1", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "bn1", "=", "VB_BatchNorm2d", "(", "planes", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "bn2", "=", "VB_BatchNorm2d", "(", "planes", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.BasicBlock.forward": [[38, 55], ["resnet_vb.BasicBlock.conv1", "resnet_vb.BasicBlock.bn1", "resnet_vb.BasicBlock.relu", "resnet_vb.BasicBlock.conv2", "resnet_vb.BasicBlock.bn2", "resnet_vb.BasicBlock.relu", "resnet_vb.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.Bottleneck.__init__": [[60, 72], ["torch.Module.__init__", "vb_net.VB_Conv2d", "vb_net.VB_BatchNorm2d", "vb_net.VB_Conv2d", "vb_net.VB_BatchNorm2d", "vb_net.VB_Conv2d", "vb_net.VB_BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "lambda_n", "=", "0.01", ",", "sigma_0", "=", "0.00001", ",", "sigma_1", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "VB_Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "bn1", "=", "VB_BatchNorm2d", "(", "planes", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "conv2", "=", "VB_Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "bn2", "=", "VB_BatchNorm2d", "(", "planes", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "conv3", "=", "VB_Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "bn3", "=", "VB_BatchNorm2d", "(", "planes", "*", "4", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.Bottleneck.forward": [[73, 94], ["resnet_vb.Bottleneck.conv1", "resnet_vb.Bottleneck.bn1", "resnet_vb.Bottleneck.relu", "resnet_vb.Bottleneck.conv2", "resnet_vb.Bottleneck.bn2", "resnet_vb.Bottleneck.relu", "resnet_vb.Bottleneck.conv3", "resnet_vb.Bottleneck.bn3", "resnet_vb.Bottleneck.relu", "resnet_vb.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.ResNet_sparse_VB.__init__": [[100, 137], ["torch.Module.__init__", "numpy.sqrt", "vb_net.VB_Conv2d", "vb_net.VB_BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_vb.ResNet_sparse_VB._make_layer", "resnet_vb.ResNet_sparse_VB._make_layer", "resnet_vb.ResNet_sparse_VB._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "vb_net.VB_Linear", "resnet_vb.ResNet_sparse_VB.modules", "isinstance", "numpy.log", "numpy.log", "m.weight_mu.data.normal_", "isinstance", "numpy.log", "numpy.log", "numpy.log", "math.sqrt", "m.weight_mu.data.fill_", "m.bias_mu.data.zero_", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet_sparse._make_layer", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet_sparse._make_layer", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet_sparse._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", "=", "1000", ",", "lambda_n", "=", "0.01", ",", "sigma_0", "=", "0.00001", ",", "sigma_1", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "ResNet_sparse_VB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Model type specifies number of layers for CIFAR-10 model", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be 6n+2'", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "\n", "block", "=", "Bottleneck", "if", "depth", ">=", "44", "else", "BasicBlock", "\n", "\n", "self", ".", "lambda_n", "=", "lambda_n", "\n", "self", ".", "sigma_0", "=", "sigma_0", "\n", "self", ".", "sigma_1", "=", "sigma_1", "\n", "self", ".", "c1", "=", "np", ".", "log", "(", "lambda_n", ")", "-", "np", ".", "log", "(", "1", "-", "lambda_n", ")", "+", "0.5", "*", "np", ".", "log", "(", "sigma_0", ")", "-", "0.5", "*", "np", ".", "log", "(", "sigma_1", ")", "\n", "self", ".", "c2", "=", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", "\n", "self", ".", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "sigma_1", "/", "sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", ")", ")", "\n", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "VB_Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "bn1", "=", "VB_BatchNorm2d", "(", "16", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "fc", "=", "VB_Linear", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "prune_flag", "=", "0", "\n", "self", ".", "mask", "=", "None", "\n", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "VB_Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight_mu", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "VB_BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight_mu", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias_mu", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.ResNet_sparse_VB._make_layer": [[138, 154], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "vb_net.VB_Conv2d", "vb_net.VB_BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "VB_Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "lambda_n", "=", "self", ".", "lambda_n", ",", "sigma_0", "=", "self", ".", "sigma_0", ",", "sigma_1", "=", "self", ".", "sigma_1", ")", ",", "\n", "VB_BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "lambda_n", "=", "self", ".", "lambda_n", ",", "sigma_0", "=", "self", ".", "sigma_0", ",", "sigma_1", "=", "self", ".", "sigma_1", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.ResNet_sparse_VB.forward": [[155, 176], ["resnet_vb.ResNet_sparse_VB.conv1", "resnet_vb.ResNet_sparse_VB.bn1", "resnet_vb.ResNet_sparse_VB.relu", "resnet_vb.ResNet_sparse_VB.layer1", "resnet_vb.ResNet_sparse_VB.layer2", "resnet_vb.ResNet_sparse_VB.layer3", "resnet_vb.ResNet_sparse_VB.avgpool", "resnet_vb.ResNet_sparse_VB.view", "resnet_vb.ResNet_sparse_VB.fc", "resnet_vb.ResNet_sparse_VB.named_parameters", "resnet_vb.ResNet_sparse_VB.size", "float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "prune_flag", "==", "1", ":", "\n", "            ", "for", "name", ",", "para", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'mu'", "in", "name", ":", "\n", "                    ", "para", ".", "data", "[", "self", ".", "mask", "[", "name", "]", "]", "=", "0", "\n", "", "if", "'rho'", "in", "name", ":", "\n", "                    ", "para", ".", "data", "[", "self", ".", "mask", "[", "name", "]", "]", "=", "-", "float", "(", "'inf'", ")", "\n", "\n", "", "", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "# 32x32", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# 32x32", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "# 16x16", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 8x8", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.ResNet_sparse_VB.set_prior": [[177, 188], ["numpy.sqrt", "resnet_vb.ResNet_sparse_VB.modules", "numpy.log", "numpy.log", "hasattr", "m.set_prior", "numpy.log", "numpy.log", "numpy.log", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_BatchNorm.set_prior"], ["", "def", "set_prior", "(", "self", ",", "lambda_n", ",", "sigma_0", ",", "sigma_1", ")", ":", "\n", "        ", "self", ".", "c1", "=", "np", ".", "log", "(", "lambda_n", ")", "-", "np", ".", "log", "(", "1", "-", "lambda_n", ")", "+", "0.5", "*", "np", ".", "log", "(", "sigma_0", ")", "-", "0.5", "*", "np", ".", "log", "(", "sigma_1", ")", "\n", "self", ".", "c2", "=", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", "\n", "self", ".", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "sigma_1", "/", "sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", ")", ")", "\n", "self", ".", "lambda_n", "=", "lambda_n", "\n", "self", ".", "sigma_0", "=", "sigma_0", "\n", "self", ".", "sigma_1", "=", "sigma_1", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'set_prior'", ")", "and", "m", "is", "not", "self", ":", "\n", "                ", "m", ".", "set_prior", "(", "lambda_n", ",", "sigma_0", ",", "sigma_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.ResNet_sparse_VB.set_prune": [[191, 194], ["None"], "methods", ["None"], ["", "", "", "def", "set_prune", "(", "self", ",", "user_mask", ")", ":", "\n", "        ", "self", ".", "mask", "=", "user_mask", "\n", "self", ".", "prune_flag", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.ResNet_sparse_VB.cancel_prune": [[195, 198], ["None"], "methods", ["None"], ["", "def", "cancel_prune", "(", "self", ")", ":", "\n", "        ", "self", ".", "prune_flag", "=", "0", "\n", "self", ".", "mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.Lenet5_sparse_VB.__init__": [[202, 210], ["torch.Module.__init__", "vb_net.VB_Conv2d", "vb_net.VB_Conv2d", "vb_net.VB_Linear", "vb_net.VB_Linear"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambda_n", "=", "0.01", ",", "sigma_0", "=", "0.00001", ",", "sigma_1", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "Lenet5_sparse_VB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "VB_Conv2d", "(", "1", ",", "20", ",", "5", ",", "1", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "conv2", "=", "VB_Conv2d", "(", "20", ",", "50", ",", "5", ",", "1", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "fc1", "=", "VB_Linear", "(", "4", "*", "4", "*", "50", ",", "500", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "fc2", "=", "VB_Linear", "(", "500", ",", "10", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "self", ".", "prune_flag", "=", "0", "\n", "self", ".", "mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.Lenet5_sparse_VB.forward": [[211, 228], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "resnet_vb.Lenet5_sparse_VB.view", "torch.relu", "torch.relu", "resnet_vb.Lenet5_sparse_VB.fc2", "resnet_vb.Lenet5_sparse_VB.named_parameters", "resnet_vb.Lenet5_sparse_VB.conv1", "resnet_vb.Lenet5_sparse_VB.conv2", "resnet_vb.Lenet5_sparse_VB.fc1", "float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "prune_flag", "==", "1", ":", "\n", "            ", "for", "name", ",", "para", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'mu'", "in", "name", ":", "\n", "                    ", "para", ".", "data", "[", "self", ".", "mask", "[", "name", "]", "]", "=", "0", "\n", "", "if", "'rho'", "in", "name", ":", "\n", "                    ", "para", ".", "data", "[", "self", ".", "mask", "[", "name", "]", "]", "=", "-", "float", "(", "'inf'", ")", "\n", "\n", "\n", "", "", "", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "4", "*", "4", "*", "50", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.Lenet5_sparse_VB.set_prune": [[230, 233], ["None"], "methods", ["None"], ["", "def", "set_prune", "(", "self", ",", "user_mask", ")", ":", "\n", "        ", "self", ".", "mask", "=", "user_mask", "\n", "self", ".", "prune_flag", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.Lenet5_sparse_VB.cancel_prune": [[234, 237], ["None"], "methods", ["None"], ["", "def", "cancel_prune", "(", "self", ")", ":", "\n", "        ", "self", ".", "prune_flag", "=", "0", "\n", "self", ".", "mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet_vb.conv3x3": [[19, 23], ["vb_net.VB_Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "lambda_n", "=", "0.01", ",", "sigma_0", "=", "0.00001", ",", "sigma_1", "=", "0.01", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "VB_Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ",", "lambda_n", "=", "lambda_n", ",", "sigma_0", "=", "sigma_0", ",", "sigma_1", "=", "sigma_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.cifar_run_vb.model_eval": [[65, 80], ["net.eval", "enumerate", "net", "loss_func", "prediction.eq().sum().item", "loss_func.mul().item", "images.to", "labels.to", "net.data.max", "prediction.eq().sum", "loss_func.mul", "prediction.eq"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["def", "model_eval", "(", "net", ",", "data_loader", ",", "device", ",", "loss_func", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "total_loss", "=", "0", "\n", "total_count", "=", "0", "\n", "for", "cnt", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "outputs", "=", "net", "(", "images", ")", "\n", "loss", "=", "loss_func", "(", "outputs", ",", "labels", ")", "\n", "prediction", "=", "outputs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "+=", "prediction", ".", "eq", "(", "labels", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total_loss", "+=", "loss", ".", "mul", "(", "images", ".", "shape", "[", "0", "]", ")", ".", "item", "(", ")", "\n", "total_count", "+=", "images", ".", "shape", "[", "0", "]", "\n", "\n", "", "return", "1.0", "*", "correct", "/", "total_count", ",", "total_loss", "/", "total_count", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.cifar_run_vb.main": [[81, 340], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "transforms.Normalize", "transforms.Compose", "transforms.Compose", "torchvision.CIFAR10", "torchvision.CIFAR10", "numpy.random.seed", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.device", "torch.device", "torch.device", "torch.device", "torch.CrossEntropyLoss().to", "resnet_vb.ResNet_sparse_VB().to", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "len", "range", "open", "pickle.dump", "open.close", "resnet_vb.ResNet_sparse_VB().to.load_state_dict", "cifar_run_vb.model_eval", "print", "resnet_vb.ResNet_sparse_VB().to.set_prune", "cifar_run_vb.model_eval", "print", "resnet_vb.ResNet_sparse_VB().to.named_parameters", "print", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "resnet_vb.ResNet_sparse_VB().to.set_prior", "range", "open", "pickle.dump", "open.close", "resnet_vb.ResNet_sparse_VB().to.parameters", "os.path.isdir", "resnet_vb.ResNet_sparse_VB().to.train", "enumerate", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.load", "torch.load", "torch.load", "torch.load", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "resnet_vb.ResNet_sparse_VB().to.named_parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "resnet_vb.ResNet_sparse_VB().to.named_parameters", "int", "resnet_vb.ResNet_sparse_VB().to.named_parameters", "os.path.isdir", "resnet_vb.ResNet_sparse_VB().to.parameters", "resnet_vb.ResNet_sparse_VB().to.train", "enumerate", "print", "torch.save", "torch.save", "torch.save", "torch.save", "transforms.RandomCrop", "transforms.RandomHorizontalFlip", "transforms.ToTensor", "transforms.RandomErasing", "transforms.ToTensor", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.CrossEntropyLoss", "resnet_vb.ResNet_sparse_VB", "os.makedirs", "resnet_vb.ResNet_sparse_VB().to.set_prior", "resnet_vb.ResNet_sparse_VB().to.set_prior", "resnet_vb.ResNet_sparse_VB().to.", "nn.CrossEntropyLoss().to.", "torch.optim.SGD.zero_grad", "loss_func.backward", "torch.optim.SGD.step", "loss_func.mul().item", "net.data.argmax().eq().sum().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "cifar_run_vb.model_eval", "print", "print", "resnet_vb.ResNet_sparse_VB().to.state_dict", "numpy.floor", "torch.zeros.sort", "para.numel", "non_zero_element.item", "os.makedirs", "resnet_vb.ResNet_sparse_VB().to.", "nn.CrossEntropyLoss().to.", "torch.optim.SGD.zero_grad", "loss_func.backward", "torch.optim.SGD.step", "loss_func.mul().item", "net.data.argmax().eq().sum().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cifar_run_vb.model_eval", "print", "resnet_vb.ResNet_sparse_VB().to.named_parameters", "print", "print", "resnet_vb.ResNet_sparse_VB().to.state_dict", "input.to", "target.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "resnet_vb.ResNet_sparse_VB().to.parameters", "torch.save", "torch.save", "torch.save", "torch.save", "para.numel", "torch.log", "torch.log", "torch.log", "torch.log", "temp_mu.abs().div", "para.numel", "temp_mu.abs().div.view", "para.numel", "input.to", "target.to", "non_zero_element.item", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.isdir", "para.prior_grad.div", "loss_func.mul", "net.data.argmax().eq().sum", "resnet_vb.ResNet_sparse_VB().to.state_dict", "str", "str", "os.path.isdir", "loss_func.mul", "net.data.argmax().eq().sum", "para.numel", "non_zero_element.item", "resnet_vb.ResNet_sparse_VB().to.state_dict", "str", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "temp_mu.abs", "net.data.argmax().eq", "net.data.argmax().eq", "para.abs", "net.data.argmax", "net.data.argmax"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.cifar_run.model_eval", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.Lenet5_sparse.set_prune", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.cifar_run.model_eval", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_BatchNorm.set_prior", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_BatchNorm.set_prior", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_BatchNorm.set_prior", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.cifar_run.model_eval", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.cifar_run.model_eval", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "main", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2470", ",", "0.2435", ",", "0.2616", "]", ")", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "transforms", ".", "RandomErasing", "(", "probability", "=", "0.5", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "\n", "train_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "test_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "\n", "batch_size", "=", "args", ".", "batch_train", "\n", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "batch_train", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "args", ".", "batch_test", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "lambda_n", "=", "args", ".", "lambdan", "\n", "prior_sigma_0", "=", "args", ".", "sigma0", "\n", "prior_sigma_1", "=", "args", ".", "sigma1", "\n", "\n", "net", "=", "resnet_vb", ".", "ResNet_sparse_VB", "(", "args", ".", "depth", ",", "10", ",", "lambda_n", ",", "prior_sigma_0", ",", "prior_sigma_1", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "init_lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "0", ")", "\n", "\n", "\n", "PATH", "=", "args", ".", "base_path", "+", "args", ".", "model_path", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "            ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "num_epochs", "=", "args", ".", "nepoch", "\n", "train_accuracy_path", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "train_loss_path", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "\n", "test_accuracy_path", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "test_loss_path", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "sparsity_path", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "NTrain", "=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "best_accuracy", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "epoch_training_loss", "=", "0.0", "\n", "total_count", "=", "0", "\n", "accuracy", "=", "0", "\n", "\n", "if", "epoch", "in", "args", ".", "lr_decay_time", ":", "\n", "            ", "for", "para", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "para", "[", "'lr'", "]", "=", "para", "[", "'lr'", "]", "/", "10", "\n", "\n", "", "", "if", "epoch", "<", "args", ".", "lr_decay_time", "[", "0", "]", ":", "\n", "            ", "prior_sigma_0", "=", "args", ".", "sigma1", "\n", "net", ".", "set_prior", "(", "lambda_n", ",", "prior_sigma_0", ",", "prior_sigma_1", ")", "\n", "", "else", ":", "\n", "            ", "prior_sigma_0", "=", "args", ".", "sigma0", "\n", "net", ".", "set_prior", "(", "lambda_n", ",", "prior_sigma_0", ",", "prior_sigma_1", ")", "\n", "", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "input", ",", "target", "=", "input", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "net", "(", "input", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "target", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "prior_grad", "=", "para", ".", "prior_grad", ".", "div", "(", "NTrain", ")", "\n", "para", ".", "grad", ".", "data", "+=", "prior_grad", "\n", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "epoch_training_loss", "+=", "loss", ".", "mul", "(", "input", ".", "shape", "[", "0", "]", ")", ".", "item", "(", ")", "\n", "accuracy", "+=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "target", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total_count", "+=", "input", ".", "shape", "[", "0", "]", "\n", "train_loss_path", "[", "epoch", "]", "=", "epoch_training_loss", "/", "total_count", "\n", "train_accuracy_path", "[", "epoch", "]", "=", "accuracy", "/", "total_count", "\n", "", "print", "(", "\"epoch: \"", ",", "epoch", ",", "\", train loss: \"", ",", "epoch_training_loss", "/", "total_count", ",", "\"train accuracy: \"", ",", "\n", "accuracy", "/", "total_count", ")", "\n", "\n", "# calculate test set accuracy", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "print", "(", "'sigma0:'", ",", "net", ".", "sigma_0", ",", "'sigma1:'", ",", "net", ".", "sigma_1", ",", "'lambdan:'", ",", "net", ".", "lambda_n", ")", "\n", "\n", "test_accuracy", ",", "test_loss", "=", "model_eval", "(", "net", ",", "test_loader", ",", "device", ",", "loss_func", ")", "\n", "test_loss_path", "[", "epoch", "]", "=", "test_loss", "\n", "test_accuracy_path", "[", "epoch", "]", "=", "test_accuracy", "\n", "print", "(", "\"epoch: \"", ",", "epoch", ",", "\", test loss: \"", ",", "test_loss", ",", "\"test accuracy: \"", ",", "test_accuracy", ")", "\n", "\n", "\n", "if", "test_accuracy", ">", "best_accuracy", ":", "\n", "                ", "best_accuracy", "=", "test_accuracy", "\n", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "PATH", "+", "'best_model.pt'", ")", "\n", "\n", "", "print", "(", "'best accuracy:'", ",", "best_accuracy", ")", "\n", "\n", "", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "PATH", "+", "'model'", "+", "str", "(", "epoch", ")", "+", "'.pt'", ")", "\n", "\n", "", "import", "pickle", "\n", "filename", "=", "PATH", "+", "'result.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "train_loss_path", ",", "train_accuracy_path", ",", "test_loss_path", ",", "test_accuracy_path", ",", "sparsity_path", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "#-----------------fine tune-------------_#", "\n", "PATH", "=", "args", ".", "base_path", "+", "args", ".", "model_path", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "PATH", "+", "'model'", "+", "str", "(", "args", ".", "nepoch", "-", "1", ")", "+", "'.pt'", ")", ")", "\n", "test_accuracy", ",", "test_loss", "=", "model_eval", "(", "net", ",", "test_loader", ",", "device", ",", "loss_func", ")", "\n", "print", "(", "\"test loss: \"", ",", "test_loss", ",", "\"test accuracy: \"", ",", "test_accuracy", ")", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "total_num_para", "=", "0", "\n", "epsilon", "=", "1e-20", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'mu'", "in", "name", ":", "\n", "                ", "total_num_para", "+=", "para", ".", "numel", "(", ")", "\n", "", "", "ratio_array", "=", "torch", ".", "zeros", "(", "total_num_para", ")", "\n", "count", "=", "0", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'mu'", "in", "name", ":", "\n", "                ", "temp_mu", "=", "para", "\n", "", "if", "'rho'", "in", "name", ":", "\n", "                ", "temp_rho", "=", "para", "\n", "temp_sigma", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "para", ")", ")", "\n", "temp_ratio", "=", "temp_mu", ".", "abs", "(", ")", ".", "div", "(", "temp_sigma", "+", "epsilon", ")", "\n", "size", "=", "para", ".", "numel", "(", ")", "\n", "ratio_array", "[", "count", ":", "(", "count", "+", "size", ")", "]", "=", "temp_ratio", ".", "view", "(", "-", "1", ")", "\n", "count", "=", "count", "+", "size", "\n", "", "", "user_mask", "=", "{", "}", "\n", "target_ratio", "=", "args", ".", "prune_ratio", "\n", "threshold_index", "=", "int", "(", "np", ".", "floor", "(", "total_num_para", "*", "(", "1", "-", "target_ratio", ")", ")", ")", "\n", "temp", "=", "ratio_array", ".", "sort", "(", ")", ".", "values", "\n", "ratio_threshold", "=", "temp", "[", "threshold_index", "]", "\n", "count", "=", "0", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'mu'", "in", "name", ":", "\n", "                ", "size", "=", "para", ".", "numel", "(", ")", "\n", "mask", "=", "(", "ratio_array", "[", "count", ":", "(", "count", "+", "size", ")", "]", "<", "ratio_threshold", ")", ".", "view", "(", "para", ".", "shape", ")", "\n", "user_mask", "[", "name", "]", "=", "mask", "\n", "count", "=", "count", "+", "size", "\n", "", "if", "'rho'", "in", "name", ":", "\n", "                ", "user_mask", "[", "name", "]", "=", "mask", "\n", "", "", "", "net", ".", "set_prune", "(", "user_mask", ")", "\n", "test_accuracy", ",", "test_loss", "=", "model_eval", "(", "net", ",", "test_loader", ",", "device", ",", "loss_func", ")", "\n", "print", "(", "\"test loss: \"", ",", "test_loss", ",", "\"test accuracy: \"", ",", "test_accuracy", ")", "\n", "\n", "\n", "total_num_para", "=", "0", "\n", "non_zero_element", "=", "0", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "'mu'", "in", "name", ":", "\n", "            ", "total_num_para", "+=", "para", ".", "numel", "(", ")", "\n", "non_zero_element", "+=", "(", "para", "!=", "0", ")", ".", "sum", "(", ")", "\n", "", "", "print", "(", "'sparsity:'", ",", "non_zero_element", ".", "item", "(", ")", "/", "total_num_para", ")", "\n", "\n", "PATH", "=", "args", ".", "base_path", "+", "args", ".", "model_path", "+", "args", ".", "fine_tune_path", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "            ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "init_lr_fine_tune", ",", "momentum", "=", "args", ".", "momentum_fine_tune", ",", "weight_decay", "=", "5e-4", ")", "\n", "\n", "num_epochs", "=", "args", ".", "nepoch_fine_tune", "\n", "train_accuracy_path_fine_tune", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "train_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "\n", "test_accuracy_path_fine_tune", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "test_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "\n", "sparsity_path_fine_tune", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "best_accuracy", "=", "0", "\n", "\n", "prior_sigma_0", "=", "args", ".", "sigma1", "\n", "net", ".", "set_prior", "(", "lambda_n", ",", "prior_sigma_0", ",", "prior_sigma_1", ")", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "epoch_training_loss", "=", "0.0", "\n", "total_count", "=", "0", "\n", "accuracy", "=", "0", "\n", "\n", "if", "epoch", "in", "args", ".", "lr_decay_time_fine_tune", ":", "\n", "            ", "for", "para", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "para", "[", "'lr'", "]", "=", "para", "[", "'lr'", "]", "/", "10", "\n", "", "", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "input", ",", "target", "=", "input", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "net", "(", "input", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "epoch_training_loss", "+=", "loss", ".", "mul", "(", "input", ".", "shape", "[", "0", "]", ")", ".", "item", "(", ")", "\n", "accuracy", "+=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "target", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total_count", "+=", "input", ".", "shape", "[", "0", "]", "\n", "train_loss_path_fine_tune", "[", "epoch", "]", "=", "epoch_training_loss", "/", "total_count", "\n", "train_accuracy_path_fine_tune", "[", "epoch", "]", "=", "accuracy", "/", "total_count", "\n", "", "print", "(", "\"epoch: \"", ",", "epoch", ",", "\", train loss: \"", ",", "epoch_training_loss", "/", "total_count", ",", "\"train accuracy: \"", ",", "\n", "accuracy", "/", "total_count", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "test_accuracy", ",", "test_loss", "=", "model_eval", "(", "net", ",", "test_loader", ",", "device", ",", "loss_func", ")", "\n", "test_loss_path_fine_tune", "[", "epoch", "]", "=", "test_loss", "\n", "test_accuracy_path_fine_tune", "[", "epoch", "]", "=", "test_accuracy", "\n", "print", "(", "\"epoch: \"", ",", "epoch", ",", "\", test loss: \"", ",", "test_loss", ",", "\"test accuracy: \"", ",", "test_accuracy", ")", "\n", "\n", "total_num_para", "=", "0", "\n", "non_zero_element", "=", "0", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'mu'", "in", "name", ":", "\n", "                    ", "total_num_para", "+=", "para", ".", "numel", "(", ")", "\n", "non_zero_element", "+=", "(", "para", ".", "abs", "(", ")", "!=", "0", ")", ".", "sum", "(", ")", "\n", "", "", "print", "(", "'sparsity:'", ",", "non_zero_element", ".", "item", "(", ")", "/", "total_num_para", ")", "\n", "sparsity_path_fine_tune", "[", "epoch", "]", "=", "non_zero_element", ".", "item", "(", ")", "/", "total_num_para", "\n", "\n", "if", "test_accuracy", ">", "best_accuracy", ":", "\n", "                ", "best_accuracy", "=", "test_accuracy", "\n", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "PATH", "+", "'best_model.pt'", ")", "\n", "", "print", "(", "'best accuracy:'", ",", "best_accuracy", ")", "\n", "\n", "", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "PATH", "+", "'model'", "+", "str", "(", "epoch", ")", "+", "'.pt'", ")", "\n", "\n", "", "import", "pickle", "\n", "filename", "=", "PATH", "+", "'result.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "train_loss_path_fine_tune", ",", "train_accuracy_path_fine_tune", ",", "test_loss_path_fine_tune", ",", "\n", "test_accuracy_path_fine_tune", ",", "sparsity_path_fine_tune", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Regression.my_Net_tanh.__init__": [[22, 37], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Regression.my_Net_tanh.gamma.append", "DPF_Regression.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Regression.my_Net_tanh.gamma.append", "DPF_Regression.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Regression.my_Net_tanh.gamma.append", "DPF_Regression.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Regression.my_Net_tanh.gamma.append", "DPF_Regression.my_Net_tanh.gamma.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "my_Net_tanh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "[", "]", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2000", ",", "6", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "1", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Regression.my_Net_tanh.to": [[38, 43], ["super().to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "range", "DPF_Regression.my_Net_tanh.gamma.__len__", "DPF_Regression.my_Net_tanh.gamma[].to"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "my_Net_tanh", ",", "self", ")", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "gamma", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "index", "]", "=", "self", ".", "gamma", "[", "index", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Regression.my_Net_tanh.forward": [[44, 52], ["enumerate", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "DPF_Regression.my_Net_tanh.fc4", "DPF_Regression.my_Net_tanh.parameters", "para.data.mul_", "DPF_Regression.my_Net_tanh.fc1", "DPF_Regression.my_Net_tanh.fc2", "DPF_Regression.my_Net_tanh.fc3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "para", ".", "data", ".", "mul_", "(", "self", ".", "gamma", "[", "i", "]", ")", "\n", "", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Regression.my_Net_tanh.mask": [[53, 60], ["enumerate", "enumerate", "DPF_Regression.my_Net_tanh.parameters", "DPF_Regression.my_Net_tanh.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "mask", "(", "self", ",", "user_gamma", ",", "device", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "gamma", "[", "i", "]", ".", "shape", "!=", "user_gamma", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'size doesn\\'t match'", ")", "\n", "return", "0", "\n", "", "", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "i", "]", ".", "data", "=", "torch", ".", "tensor", "(", "user_gamma", "[", "i", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Regression.my_Net_relu.__init__": [[62, 77], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Regression.my_Net_relu.gamma.append", "DPF_Regression.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Regression.my_Net_relu.gamma.append", "DPF_Regression.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Regression.my_Net_relu.gamma.append", "DPF_Regression.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Regression.my_Net_relu.gamma.append", "DPF_Regression.my_Net_relu.gamma.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "my_Net_relu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "[", "]", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2000", ",", "6", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "1", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Regression.my_Net_relu.to": [[78, 83], ["super().to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "range", "DPF_Regression.my_Net_relu.gamma.__len__", "DPF_Regression.my_Net_relu.gamma[].to"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "my_Net_relu", ",", "self", ")", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "gamma", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "index", "]", "=", "self", ".", "gamma", "[", "index", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Regression.my_Net_relu.forward": [[84, 92], ["enumerate", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "DPF_Regression.my_Net_relu.fc4", "DPF_Regression.my_Net_relu.parameters", "para.data.mul_", "DPF_Regression.my_Net_relu.fc1", "DPF_Regression.my_Net_relu.fc2", "DPF_Regression.my_Net_relu.fc3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "para", ".", "data", ".", "mul_", "(", "self", ".", "gamma", "[", "i", "]", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Regression.my_Net_relu.mask": [[93, 100], ["enumerate", "enumerate", "DPF_Regression.my_Net_relu.parameters", "DPF_Regression.my_Net_relu.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "mask", "(", "self", ",", "user_gamma", ",", "device", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "gamma", "[", "i", "]", ".", "shape", "!=", "user_gamma", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'size doesn\\'t match'", ")", "\n", "return", "0", "\n", "", "", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "i", "]", ".", "data", "=", "torch", ".", "tensor", "(", "user_gamma", "[", "i", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Regression.main": [[102, 388], ["numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "torch.device", "torch.device", "torch.device", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "my_Net_relu.load_state_dict", "DPF_Regression.my_Net_relu.to", "DPF_Regression.my_Net_relu.to", "torch.MSELoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "my_Net_relu.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "my_Net_relu.named_parameters", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "open", "pickle.dump", "open.close", "numpy.sum", "numpy.sum", "range", "DPF_Regression.my_Net_relu.mask", "my_Net_relu.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "DPF_Regression.my_Net_tanh", "DPF_Regression.my_Net_tanh", "my_Net_relu.state_dict", "my_Net_relu.parameters", "my_Net_relu.parameters", "os.path.isdir", "para_path.append", "para_gamma_path.append", "para.numel", "my_Net_relu.zero_grad", "my_Net_relu.", "nn.MSELoss.", "loss_func.div().add", "loss_func.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "para_gamma_path.__len__", "user_gamma.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "para_path_fine_tune.append", "para_gamma_path_fine_tune.append", "my_Net_relu.zero_grad", "my_Net_relu.", "nn.MSELoss.", "loss_func.div().add", "loss_func.backward", "torch.optim.SGD.step", "str", "DPF_Regression.my_Net_relu", "DPF_Regression.my_Net_relu", "print", "exit", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "os.makedirs", "numpy.zeros", "numpy.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "numpy.random.choice", "torch.FloatTensor().to.log().mul", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "print", "str", "numpy.max", "my_Net_relu.parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "torch.FloatTensor().to.log().mul", "print", "str", "str", "str", "str", "str", "str", "str", "int", "my_Net_relu.parameters", "enumerate", "DPF_Regression.my_Net_relu.mask", "range", "loss_func.div", "my_Net_relu.parameters", "my_Net_relu.parameters", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "print", "enumerate", "print", "print", "print", "print", "numpy.max", "range", "loss_func.div", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "print", "enumerate", "print", "print", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "os.path.isdir", "list", "list", "numpy.floor", "para.numel", "para.abs().view", "my_Net_relu.parameters", "user_gamma.append", "torch.FloatTensor().to.log", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "my_Net_relu.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "list", "list", "torch.FloatTensor().to.log", "my_Net_relu.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "numpy.power", "torch.zeros().to.sort", "para.abs", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "para.cpu", "numpy.max", "para.cpu", "numpy.max", "para.abs"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.mask", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.mask"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "data_index", "=", "args", ".", "data_index", "\n", "subn", "=", "500", "\n", "\n", "\n", "NTrain", "=", "10000", "\n", "Nval", "=", "1000", "\n", "NTest", "=", "1000", "\n", "TotalP", "=", "2000", "\n", "\n", "x_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "TotalP", "]", ")", ")", "\n", "y_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "1", "]", ")", ")", "\n", "\n", "x_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "TotalP", "]", ")", ")", "\n", "y_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "1", "]", ")", ")", "\n", "\n", "x_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "TotalP", "]", ")", ")", "\n", "y_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "1", "]", ")", ")", "\n", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "data_index", ")", "+", "\"/x_train.csv\"", ")", ")", "\n", "x_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "data_index", ")", "+", "\"/y_train.csv\"", ")", ")", "\n", "y_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "data_index", ")", "+", "\"/x_val.csv\"", ")", ")", "\n", "x_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "data_index", ")", "+", "\"/y_val.csv\"", ")", ")", "\n", "y_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "data_index", ")", "+", "\"/x_test.csv\"", ")", ")", "\n", "x_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "data_index", ")", "+", "\"/y_test.csv\"", ")", ")", "\n", "y_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "x_train", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "device", ")", "\n", "y_train", "=", "torch", ".", "FloatTensor", "(", "y_train", ")", ".", "to", "(", "device", ")", "\n", "x_val", "=", "torch", ".", "FloatTensor", "(", "x_val", ")", ".", "to", "(", "device", ")", "\n", "y_val", "=", "torch", ".", "FloatTensor", "(", "y_val", ")", ".", "to", "(", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "device", ")", "\n", "y_test", "=", "torch", ".", "FloatTensor", "(", "y_test", ")", ".", "to", "(", "device", ")", "\n", "\n", "num_seed", "=", "1", "\n", "\n", "num_selection_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "num_selection_true_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "train_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "val_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "test_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "for", "my_seed", "in", "range", "(", "num_seed", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "my_seed", ")", "\n", "torch", ".", "manual_seed", "(", "my_seed", ")", "\n", "\n", "if", "args", ".", "activation", "==", "'tanh'", ":", "\n", "            ", "net", "=", "my_Net_tanh", "(", ")", "\n", "net_dense", "=", "my_Net_tanh", "(", ")", "\n", "", "elif", "args", ".", "activation", "==", "'relu'", ":", "\n", "            ", "net", "=", "my_Net_relu", "(", ")", "\n", "net_dense", "=", "my_Net_relu", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'unrecognized activation function'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "\n", "", "net", ".", "load_state_dict", "(", "net_dense", ".", "state_dict", "(", ")", ")", "\n", "\n", "net_dense", ".", "to", "(", "device", ")", "\n", "net", ".", "to", "(", "device", ")", "\n", "loss_func", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "step_lr", "=", "0.005", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ",", "weight_decay", "=", "5e-4", ")", "\n", "optimization_dense", "=", "torch", ".", "optim", ".", "SGD", "(", "net_dense", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ",", "weight_decay", "=", "5e-4", ")", "\n", "\n", "sigma", "=", "torch", ".", "FloatTensor", "(", "[", "1", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "max_loop", "=", "80001", "\n", "PATH", "=", "'./result/regression/'", "+", "args", ".", "activation", "+", "'/DPF/'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "                ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "raise", "\n", "\n", "", "", "", "show_information", "=", "100", "\n", "\n", "para_path", "=", "[", "]", "\n", "para_gamma_path", "=", "[", "]", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "\n", "\n", "total_num_para", "=", "0", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "            ", "total_num_para", "+=", "para", ".", "numel", "(", ")", "\n", "", "para_placeholder", "=", "torch", ".", "zeros", "(", "[", "total_num_para", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "s_init", "=", "0", "\n", "s_target", "=", "1", "-", "(", "total_num_para", "-", "(", "TotalP", "-", "5", ")", "*", "net", ".", "fc1", ".", "weight", ".", "shape", "[", "0", "]", ")", "/", "total_num_para", "\n", "\n", "\n", "for", "iter", "in", "range", "(", "max_loop", ")", ":", "\n", "\n", "            ", "if", "iter", "<", "(", "0.75", "*", "max_loop", ")", ":", "\n", "                ", "if", "iter", "%", "16", "==", "0", ":", "\n", "\n", "                    ", "sparsity_level", "=", "s_target", "+", "(", "s_init", "-", "s_target", ")", "*", "np", ".", "power", "(", "\n", "(", "1", "-", "iter", "*", "1.0", "/", "(", "0.75", "*", "max_loop", ")", ")", ",", "3", ")", "\n", "cut_index", "=", "int", "(", "np", ".", "floor", "(", "(", "sparsity_level", ")", "*", "(", "total_num_para", "-", "1", ")", ")", ")", "\n", "para_count", "=", "0", "\n", "for", "para", "in", "net_dense", ".", "parameters", "(", ")", ":", "\n", "                        ", "temp_num", "=", "para", ".", "numel", "(", ")", "\n", "para_placeholder", "[", "para_count", ":", "(", "para_count", "+", "temp_num", ")", "]", "=", "para", ".", "abs", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "para_count", "=", "para_count", "+", "temp_num", "\n", "\n", "", "threshold", "=", "para_placeholder", ".", "sort", "(", ")", "[", "0", "]", "[", "cut_index", "]", "\n", "user_gamma", "=", "[", "]", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net_dense", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "user_gamma", ".", "append", "(", "(", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "", "net", ".", "mask", "(", "user_gamma", ",", "device", ")", "\n", "\n", "\n", "", "", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss", ".", "div", "(", "2", "*", "sigma", ")", ".", "add", "(", "sigma", ".", "log", "(", ")", ".", "mul", "(", "0.5", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "para_dense", ",", "para", "in", "zip", "(", "net_dense", ".", "parameters", "(", ")", ",", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "if", "para_dense", ".", "grad", "is", "None", ":", "\n", "                        ", "para_dense", ".", "grad", "=", "torch", ".", "zeros_like", "(", "para", ".", "grad", ")", "\n", "", "para_dense", ".", "grad", ".", "data", "=", "para", ".", "grad", "\n", "\n", "", "", "optimization", ".", "step", "(", ")", "\n", "optimization_dense", ".", "step", "(", ")", "\n", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ")", "\n", "val_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "print", "(", "'sigma:'", ",", "sigma", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "user_gamma", "[", "i", "]", "\n", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "5", "]", ")", ")", "\n", "print", "(", "'sparsity: '", ",", "sparsity_level", ")", "\n", "print", "(", "'cut_index: '", ",", "cut_index", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "\"_simu_\"", "+", "str", "(", "my_seed", ")", "+", "'.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path", ",", "para_gamma_path", ",", "train_loss_path", ",", "val_loss_path", ",", "test_loss_path", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "num_selection_list", "[", "my_seed", "]", "=", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "\n", "num_selection_true_list", "[", "my_seed", "]", "=", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "5", "]", ")", "\n", "\n", "user_gamma", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "para_gamma_path", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "user_gamma", ".", "append", "(", "para_gamma_path", "[", "index", "]", "[", "-", "1", ",", "]", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "para", ".", "data", "=", "torch", ".", "FloatTensor", "(", "para_path", "[", "i", "]", "[", "-", "1", ",", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "net", ".", "mask", "(", "user_gamma", ",", "device", ")", "\n", "\n", "fine_tune_loop", "=", "40001", "\n", "para_path_fine_tune", "=", "[", "]", "\n", "para_gamma_path_fine_tune", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "for", "iter", "in", "range", "(", "fine_tune_loop", ")", ":", "\n", "            ", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss", ".", "div", "(", "2", "*", "sigma", ")", ".", "add", "(", "sigma", ".", "log", "(", ")", ".", "mul", "(", "0.5", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimization", ".", "step", "(", ")", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ")", "\n", "val_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "print", "(", "'sigma:'", ",", "sigma", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path_fine_tune", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path_fine_tune", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "user_gamma", "[", "i", "]", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "\n", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "5", "]", ")", ")", "\n", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "\"_simu_\"", "+", "str", "(", "my_seed", ")", "+", "'_fine_tune.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path_fine_tune", ",", "para_gamma_path_fine_tune", ",", "train_loss_path_fine_tune", ",", "val_loss_path_fine_tune", ",", "\n", "test_loss_path_fine_tune", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"Train Loss:\"", ",", "loss", ")", "\n", "train_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"Val Loss:\"", ",", "loss", ")", "\n", "val_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"Test Loss:\"", ",", "loss", ")", "\n", "test_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "'_result.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "num_selection_list", ",", "num_selection_true_list", ",", "train_loss_list", ",", "val_loss_list", ",", "test_loss_list", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Structure.my_Net.__init__": [[22, 32], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Structure.my_Net.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Structure.my_Net.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Structure.my_Net.gamma.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "my_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "[", "]", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1000", ",", "5", ",", "bias", "=", "False", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "5", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "3", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Structure.my_Net.to": [[33, 38], ["super().to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "range", "Simulation_Structure.my_Net.gamma.__len__", "Simulation_Structure.my_Net.gamma[].to"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "my_Net", ",", "self", ")", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "gamma", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "index", "]", "=", "self", ".", "gamma", "[", "index", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Structure.my_Net.forward": [[40, 48], ["enumerate", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "Simulation_Structure.my_Net.fc3", "Simulation_Structure.my_Net.parameters", "para.data.mul_", "Simulation_Structure.my_Net.fc1", "Simulation_Structure.my_Net.fc2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "para", ".", "data", ".", "mul_", "(", "self", ".", "gamma", "[", "i", "]", ")", "\n", "", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Structure.my_Net.mask": [[49, 56], ["enumerate", "enumerate", "Simulation_Structure.my_Net.parameters", "Simulation_Structure.my_Net.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "mask", "(", "self", ",", "user_gamma", ",", "device", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "gamma", "[", "i", "]", ".", "shape", "!=", "user_gamma", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'size doesn\\'t match'", ")", "\n", "return", "0", "\n", "", "", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "i", "]", ".", "data", "=", "torch", ".", "tensor", "(", "user_gamma", "[", "i", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Structure.gradient": [[58, 74], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.cat", "torch.cat", "torch.cat", "list", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "zip", "x.contiguous().view", "x.contiguous"], "function", ["None"], ["", "", "", "def", "gradient", "(", "outputs", ",", "inputs", ",", "grad_outputs", "=", "None", ",", "retain_graph", "=", "None", ",", "create_graph", "=", "False", ")", ":", "\n", "    ", "'''\n    Compute the gradient of `outputs` with respect to `inputs`\n    gradient(x.sum(), x)\n    gradient((x * y).sum(), [x, y])\n    '''", "\n", "if", "torch", ".", "is_tensor", "(", "inputs", ")", ":", "\n", "        ", "inputs", "=", "[", "inputs", "]", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "list", "(", "inputs", ")", "\n", "", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", ",", "inputs", ",", "grad_outputs", ",", "\n", "allow_unused", "=", "True", ",", "\n", "retain_graph", "=", "retain_graph", ",", "\n", "create_graph", "=", "create_graph", ")", "\n", "grads", "=", "[", "x", "if", "x", "is", "not", "None", "else", "torch", ".", "zeros_like", "(", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "grads", ",", "inputs", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "for", "x", "in", "grads", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Structure.hessian": [[75, 111], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "sum", "enumerate", "list", "output.new_zeros", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "grad.contiguous().view.contiguous().view", "range", "p.numel", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "inp.numel", "out[].add_", "grad.contiguous().view.contiguous", "grad[].new_zeros", "grad[].new_zeros.type_as", "out[].add_", "Simulation_Structure.gradient", "row[].type_as", "sum", "x.numel"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.gradient"], ["", "def", "hessian", "(", "output", ",", "inputs", ",", "out", "=", "None", ",", "allow_unused", "=", "False", ",", "create_graph", "=", "False", ")", ":", "\n", "    ", "'''\n    Compute the Hessian of `output` with respect to `inputs`\n    hessian((x * y).sum(), [x, y])\n    '''", "\n", "#assert output.ndimension() == 0", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "inputs", ")", ":", "\n", "        ", "inputs", "=", "[", "inputs", "]", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "list", "(", "inputs", ")", "\n", "\n", "", "n", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "inputs", ")", "\n", "if", "out", "is", "None", ":", "\n", "        ", "out", "=", "output", ".", "new_zeros", "(", "n", ",", "n", ")", "\n", "\n", "", "ai", "=", "0", "\n", "for", "i", ",", "inp", "in", "enumerate", "(", "inputs", ")", ":", "\n", "        ", "[", "grad", "]", "=", "torch", ".", "autograd", ".", "grad", "(", "output", ",", "inp", ",", "create_graph", "=", "True", ",", "allow_unused", "=", "allow_unused", ")", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "inp", ")", "if", "grad", "is", "None", "else", "grad", "\n", "grad", "=", "grad", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "for", "j", "in", "range", "(", "inp", ".", "numel", "(", ")", ")", ":", "\n", "            ", "if", "grad", "[", "j", "]", ".", "requires_grad", ":", "\n", "                ", "row", "=", "gradient", "(", "grad", "[", "j", "]", ",", "inputs", "[", "i", ":", "]", ",", "retain_graph", "=", "True", ",", "create_graph", "=", "create_graph", ")", "[", "j", ":", "]", "\n", "", "else", ":", "\n", "                ", "row", "=", "grad", "[", "j", "]", ".", "new_zeros", "(", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "inputs", "[", "i", ":", "]", ")", "-", "j", ")", "\n", "\n", "", "out", "[", "ai", ",", "ai", ":", "]", ".", "add_", "(", "row", ".", "type_as", "(", "out", ")", ")", "# ai's row", "\n", "if", "ai", "+", "1", "<", "n", ":", "\n", "                ", "out", "[", "ai", "+", "1", ":", ",", "ai", "]", ".", "add_", "(", "row", "[", "1", ":", "]", ".", "type_as", "(", "out", ")", ")", "# ai's column", "\n", "", "del", "row", "\n", "ai", "+=", "1", "\n", "", "del", "grad", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Structure.main": [[114, 616], ["numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "torch.device", "torch.device", "torch.device", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "Simulation_Structure.my_Net", "Simulation_Structure.my_Net.to", "torch.MSELoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.sqrt", "my_Net.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.sum", "numpy.sum", "range", "Simulation_Structure.my_Net.mask", "my_Net.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "my_Net.", "nn.MSELoss.", "loss_func.div().add", "enumerate", "prior.div.div", "Simulation_Structure.hessian", "Simulation_Structure.hessian", "torch.eye().mul().to", "torch.eye().mul().to", "torch.eye().mul().to", "torch.where", "torch.where", "torch.where", "torch.cat", "torch.cat", "torch.cat", "print", "print", "log_evidence.cpu().data.numpy", "selected_hessian_list.append", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "range", "Simulation_Structure.my_Net.mask", "my_Net.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "my_Net.", "nn.MSELoss.", "loss_func.div().add", "enumerate", "prior.div.div", "Simulation_Structure.hessian", "Simulation_Structure.hessian", "torch.eye().mul().to", "torch.eye().mul().to", "torch.eye().mul().to", "torch.where", "torch.where", "torch.where", "torch.cat", "torch.cat", "torch.cat", "print", "print", "log_evidence.cpu().data.numpy", "selected_hessian_list_fine_tune.append", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "my_Net.parameters", "os.path.isdir", "para_path.append", "para_gamma_path.append", "gamma_dist.append", "my_Net.zero_grad", "my_Net.", "nn.MSELoss.", "loss_func.div().add", "loss_func.backward", "torch.optim.SGD.step", "para_gamma_path.__len__", "user_gamma.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "para_path_fine_tune.append", "para_gamma_path_fine_tune.append", "my_Net.zero_grad", "my_Net.", "nn.MSELoss.", "loss_func.div().add", "loss_func.backward", "torch.optim.SGD.step", "torch.FloatTensor().to.log().mul", "my_Net.parameters", "para.pow().div().add", "torch.where", "torch.where", "torch.where", "my_Net.parameters", "my_Net.parameters", "torch.isnan", "torch.isnan", "torch.isnan", "object.mul", "para_gamma_path_fine_tune.__len__", "user_gamma.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "para_path_fine_tune.append", "para_gamma_path_fine_tune.append", "my_Net.zero_grad", "my_Net.", "nn.MSELoss.", "loss_func.div().add", "loss_func.backward", "torch.optim.SGD.step", "torch.FloatTensor().to.log().mul", "my_Net.parameters", "para.pow().div().add", "torch.where", "torch.where", "torch.where", "my_Net.parameters", "my_Net.parameters", "torch.isnan", "torch.isnan", "torch.isnan", "object.mul", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.log", "numpy.log", "os.makedirs", "numpy.zeros", "numpy.zeros", "torch.distributions.Uniform", "torch.distributions.Uniform", "torch.distributions.Uniform", "range", "numpy.random.choice", "torch.FloatTensor().to.log().mul", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net.parameters", "print", "str", "numpy.max", "my_Net.parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "torch.FloatTensor().to.log().mul", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net.parameters", "print", "str", "loss_func.div", "numpy.log", "torch.isinf", "torch.isinf", "torch.isinf", "para.pow().mul().add().exp().add().pow.mul().sum", "torch.eye().mul", "torch.eye().mul", "torch.eye().mul", "x.contiguous().view", "[].abs().log().sum", "my_Net.parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "torch.FloatTensor().to.log().mul", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net.parameters", "print", "str", "loss_func.div", "numpy.log", "torch.isinf", "torch.isinf", "torch.isinf", "para.pow().mul().add().exp().add().pow.mul().sum", "torch.eye().mul", "torch.eye().mul", "torch.eye().mul", "x.contiguous().view", "[].abs().log().sum", "str", "str", "str", "str", "str", "str", "numpy.log", "numpy.log", "numpy.log", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "range", "loss_func.div", "para.pow().mul().add().exp().add().pow", "para.pow().mul().add().exp().add().pow.div", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "print", "enumerate", "print", "print", "print", "print", "print", "print", "numpy.max", "range", "loss_func.div", "para.pow().mul().add().exp().add().pow", "para.pow().mul().add().exp().add().pow.div", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "print", "enumerate", "print", "print", "torch.FloatTensor().to.log", "para.pow().div", "numpy.where", "numpy.log", "numpy.log", "log_evidence.cpu", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "range", "loss_func.div", "para.pow().mul().add().exp().add().pow", "para.pow().mul().add().exp().add().pow.div", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "print", "enumerate", "print", "print", "torch.FloatTensor().to.log", "para.pow().div", "numpy.where", "numpy.log", "numpy.log", "log_evidence.cpu", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.sqrt", "os.path.isdir", "list", "list", "torch.FloatTensor().to.log", "para.div().mul", "para.div().mul", "my_Net.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "list", "list", "torch.FloatTensor().to.log", "para.div().mul", "para.div().mul", "my_Net.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "para.pow().div().exp().mul", "para.pow().div().exp().mul", "numpy.sqrt", "para.pow().mul().add().exp().add().pow.mul", "torch.eye", "torch.eye", "torch.eye", "x.contiguous", "numpy.where", "[].abs().log", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "list", "list", "torch.FloatTensor().to.log", "para.div().mul", "para.div().mul", "my_Net.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "para.pow().div().exp().mul", "para.pow().div().exp().mul", "numpy.sqrt", "para.pow().mul().add().exp().add().pow.mul", "torch.eye", "torch.eye", "torch.eye", "x.contiguous", "numpy.where", "[].abs().log", "para.pow().mul().add().exp().add", "para.pow().mul().add().exp().add", "para.pow", "numpy.where", "torch.cat.cpu().numpy", "para.pow().mul().add().exp().add", "para.pow", "numpy.where", "torch.cat.cpu().numpy", "para.div", "para.div", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "str", "para.div", "para.div", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "str", "para.pow().div().exp", "numpy.sqrt", "para.pow().div().exp", "numpy.sqrt", "torch.cat.cpu().numpy", "[].abs", "para.div", "para.div", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "str", "para.pow().div().exp", "numpy.sqrt", "para.pow().div().exp", "numpy.sqrt", "torch.cat.cpu().numpy", "[].abs", "para.pow().mul().add().exp", "para.cpu", "numpy.max", "para.pow().mul().add().exp", "para.cpu", "numpy.max", "torch.cat.cpu().numpy", "torch.cat.cpu", "para.pow().mul().add().exp", "para.cpu", "numpy.max", "torch.cat.cpu().numpy", "torch.cat.cpu", "str", "str", "para.pow().div", "para.pow().div", "torch.cat.cpu", "str", "para.pow().div", "para.pow().div", "torch.cat.cpu", "para.pow().mul().add", "para.pow().mul().add", "torch.cat.cpu", "para.pow().mul().add", "torch.cat.cpu", "para.abs", "str", "para.abs", "str", "para.pow", "para.pow", "selected_hessian.eig", "para.abs", "str", "para.pow", "para.pow", "selected_hessian.eig", "para.pow().mul", "para.pow().mul", "para.pow().mul", "para.pow", "para.pow", "para.pow"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.mask", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.hessian", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.hessian", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.mask", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.hessian", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.hessian", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "main", "(", ")", ":", "\n", "    ", "data_index", "=", "args", ".", "data_index", "\n", "subn", "=", "1000", "\n", "\n", "prior_sigma_0", "=", "0.0005", "\n", "\n", "lambda_n", "=", "0.00001", "\n", "\n", "NTrain", "=", "10000", "\n", "Nval", "=", "1000", "\n", "NTest", "=", "1000", "\n", "TotalP", "=", "1000", "\n", "\n", "x_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "TotalP", "]", ")", ")", "\n", "y_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "1", "]", ")", ")", "\n", "\n", "x_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "TotalP", "]", ")", ")", "\n", "y_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "1", "]", ")", ")", "\n", "\n", "x_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "TotalP", "]", ")", ")", "\n", "y_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "1", "]", ")", ")", "\n", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\n", "'./data/structure/'", "+", "str", "(", "data_index", ")", "+", "\"/x_train.csv\"", ")", ")", "\n", "x_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\n", "'./data/structure/'", "+", "str", "(", "data_index", ")", "+", "\"/y_train.csv\"", ")", ")", "\n", "y_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\n", "'./data/structure/'", "+", "str", "(", "data_index", ")", "+", "\"/x_val.csv\"", ")", ")", "\n", "x_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\n", "'./data/structure/'", "+", "str", "(", "data_index", ")", "+", "\"/y_val.csv\"", ")", ")", "\n", "y_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\n", "'./data/structure/'", "+", "str", "(", "data_index", ")", "+", "\"/x_test.csv\"", ")", ")", "\n", "x_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\n", "'./data/structure/'", "+", "str", "(", "data_index", ")", "+", "\"/y_test.csv\"", ")", ")", "\n", "y_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "x_train", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "device", ")", "\n", "y_train", "=", "torch", ".", "FloatTensor", "(", "y_train", ")", ".", "to", "(", "device", ")", "\n", "x_val", "=", "torch", ".", "FloatTensor", "(", "x_val", ")", ".", "to", "(", "device", ")", "\n", "y_val", "=", "torch", ".", "FloatTensor", "(", "y_val", ")", ".", "to", "(", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "device", ")", "\n", "y_test", "=", "torch", ".", "FloatTensor", "(", "y_test", ")", ".", "to", "(", "device", ")", "\n", "\n", "num_seed", "=", "10", "\n", "\n", "selected_hessian_list", "=", "[", "]", "\n", "\n", "hessian_part_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "log_evidence_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "dim_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "num_selection_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "num_selection_true_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "train_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "val_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "test_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "\n", "\n", "for", "my_seed", "in", "range", "(", "num_seed", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "my_seed", ")", "\n", "torch", ".", "manual_seed", "(", "my_seed", ")", "\n", "\n", "net", "=", "my_Net", "(", ")", "\n", "net", ".", "to", "(", "device", ")", "\n", "loss_func", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "step_lr", "=", "0.01", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ")", "\n", "\n", "sigma", "=", "torch", ".", "FloatTensor", "(", "[", "1", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "prior_sigma_1", "=", "0.01", "\n", "\n", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "prior_sigma_1", "/", "prior_sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "prior_sigma_0", "-", "0.5", "/", "prior_sigma_1", ")", ")", "\n", "\n", "c1", "=", "np", ".", "log", "(", "lambda_n", ")", "-", "np", ".", "log", "(", "1", "-", "lambda_n", ")", "+", "0.5", "*", "np", ".", "log", "(", "prior_sigma_0", ")", "-", "0.5", "*", "np", ".", "log", "(", "prior_sigma_1", ")", "\n", "c2", "=", "0.5", "/", "prior_sigma_0", "-", "0.5", "/", "prior_sigma_1", "\n", "\n", "max_loop", "=", "80001", "\n", "PATH", "=", "'./result/structure/bayesian_evidence/'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "                ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "raise", "\n", "\n", "", "", "", "show_information", "=", "100", "\n", "\n", "para_path", "=", "[", "]", "\n", "para_gamma_path", "=", "[", "]", "\n", "gamma_dist", "=", "[", "]", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "gamma_dist", ".", "append", "(", "torch", ".", "distributions", ".", "Uniform", "(", "torch", ".", "zeros", "(", "para", ".", "shape", ")", ",", "torch", ".", "ones", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "\n", "for", "iter", "in", "range", "(", "max_loop", ")", ":", "\n", "            ", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss", ".", "div", "(", "2", "*", "sigma", ")", ".", "add", "(", "sigma", ".", "log", "(", ")", ".", "mul", "(", "0.5", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# prior gradient", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "temp", "=", "para", ".", "pow", "(", "2", ")", ".", "mul", "(", "c2", ")", ".", "add", "(", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "para", ".", "div", "(", "-", "prior_sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "para", ".", "div", "(", "-", "prior_sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "prior_grad", "=", "temp", ".", "div", "(", "NTrain", ")", "\n", "para", ".", "grad", ".", "data", "-=", "prior_grad", "\n", "\n", "", "", "optimization", ".", "step", "(", ")", "\n", "\n", "# with torch.no_grad():", "\n", "#     sigma.data = sigma.sub(sigma.grad.mul(step_lr)).data", "\n", "# sigma.grad.zero_()", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ")", "\n", "val_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "print", "(", "'sigma:'", ",", "sigma", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "(", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "5", "]", ")", ")", "\n", "print", "(", "'threshold = :'", ",", "threshold", ")", "\n", "print", "(", "para_gamma_path", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", "[", ":", ",", "0", ":", "5", "]", ")", "\n", "print", "(", "para_gamma_path", "[", "1", "]", "[", "iter", "//", "show_information", ",", "]", ")", "\n", "print", "(", "para_gamma_path", "[", "2", "]", "[", "iter", "//", "show_information", ",", "]", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "\"_simu_\"", "+", "str", "(", "my_seed", ")", "+", "'_'", "+", "str", "(", "subn", ")", "+", "'_'", "+", "str", "(", "\n", "lambda_n", ")", "+", "'_'", "+", "str", "(", "prior_sigma_0", ")", "+", "'.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path", ",", "para_gamma_path", ",", "train_loss_path", ",", "val_loss_path", ",", "test_loss_path", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "num_selection_list", "[", "my_seed", "]", "=", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "\n", "num_selection_true_list", "[", "my_seed", "]", "=", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "5", "]", ")", "\n", "\n", "user_gamma", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "para_gamma_path", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "user_gamma", ".", "append", "(", "para_gamma_path", "[", "index", "]", "[", "-", "1", ",", "]", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "para", ".", "data", "=", "torch", ".", "FloatTensor", "(", "para_path", "[", "i", "]", "[", "-", "1", ",", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "net", ".", "mask", "(", "user_gamma", ",", "device", ")", "\n", "\n", "fine_tune_loop", "=", "40001", "\n", "para_path_fine_tune", "=", "[", "]", "\n", "para_gamma_path_fine_tune", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "for", "iter", "in", "range", "(", "fine_tune_loop", ")", ":", "\n", "            ", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss", ".", "div", "(", "2", "*", "sigma", ")", ".", "add", "(", "sigma", ".", "log", "(", ")", ".", "mul", "(", "0.5", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# prior gradient", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "temp", "=", "para", ".", "pow", "(", "2", ")", ".", "mul", "(", "c2", ")", ".", "add", "(", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "para", ".", "div", "(", "-", "prior_sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "para", ".", "div", "(", "-", "prior_sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "prior_grad", "=", "temp", ".", "div", "(", "NTrain", ")", "\n", "para", ".", "grad", ".", "data", "-=", "prior_grad", "\n", "\n", "", "", "optimization", ".", "step", "(", ")", "\n", "\n", "# with torch.no_grad():", "\n", "#     sigma.data = sigma.sub(sigma.grad.mul(step_lr)).data", "\n", "# sigma.grad.zero_()", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ")", "\n", "val_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "print", "(", "'sigma:'", ",", "sigma", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path_fine_tune", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path_fine_tune", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "(", "\n", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "\n", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "5", "]", ")", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "\"_simu_\"", "+", "str", "(", "my_seed", ")", "+", "'_'", "+", "str", "(", "subn", ")", "+", "'_'", "+", "str", "(", "\n", "lambda_n", ")", "+", "'_'", "+", "str", "(", "\n", "prior_sigma_0", ")", "+", "'_fine_tune.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path_fine_tune", ",", "para_gamma_path_fine_tune", ",", "train_loss_path_fine_tune", ",", "val_loss_path_fine_tune", ",", "\n", "test_loss_path_fine_tune", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "loss", "=", "loss", ".", "div", "(", "2", "*", "sigma", ")", ".", "add", "(", "sigma", ".", "log", "(", ")", ".", "mul", "(", "0.5", ")", ")", "\n", "# loss = loss.mul(NTrain)", "\n", "\n", "prior", "=", "0", "\n", "for", "layer_index", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "temp", "=", "(", "para", ".", "pow", "(", "2", ")", ".", "div", "(", "-", "2", "*", "prior_sigma_1", ")", ".", "exp", "(", ")", ".", "mul", "(", "lambda_n", "/", "np", ".", "sqrt", "(", "prior_sigma_1", ")", ")", "+", "\n", "para", ".", "pow", "(", "2", ")", ".", "div", "(", "-", "2", "*", "prior_sigma_0", ")", ".", "exp", "(", ")", ".", "mul", "(", "\n", "(", "1", "-", "lambda_n", ")", "/", "np", ".", "sqrt", "(", "prior_sigma_0", ")", ")", ")", ".", "log", "(", ")", "\n", "debug_temp", "=", "para", ".", "pow", "(", "2", ")", ".", "div", "(", "-", "2", "*", "prior_sigma_1", ")", ".", "add", "(", "np", ".", "log", "(", "lambda_n", "/", "np", ".", "sqrt", "(", "prior_sigma_1", ")", ")", ")", "\n", "temp", "=", "torch", ".", "where", "(", "torch", ".", "isinf", "(", "temp", ")", ",", "debug_temp", ",", "temp", ")", "\n", "prior", "=", "prior", "-", "temp", ".", "mul", "(", "net", ".", "gamma", "[", "layer_index", "]", ")", ".", "sum", "(", ")", "\n", "\n", "\n", "", "prior", "=", "prior", ".", "div", "(", "NTrain", ")", "\n", "object", "=", "loss", "+", "prior", "\n", "loss_hessian", "=", "hessian", "(", "loss", ",", "net", ".", "parameters", "(", ")", ")", "\n", "prior_hessian", "=", "hessian", "(", "prior", ",", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "shape", "=", "prior_hessian", ".", "shape", "[", "0", "]", "\n", "\n", "debug_hessian", "=", "torch", ".", "eye", "(", "shape", ")", ".", "mul", "(", "prior_sigma_1", "/", "NTrain", ")", ".", "to", "(", "device", ")", "\n", "\n", "prior_hessian", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "prior_hessian", ")", ",", "debug_hessian", ",", "prior_hessian", ")", "\n", "\n", "hessian_matrix", "=", "loss_hessian", "+", "prior_hessian", "\n", "\n", "gamma_index", "=", "torch", ".", "cat", "(", "[", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "for", "x", "in", "net", ".", "gamma", "]", ")", "\n", "\n", "selected_hessian", "=", "hessian_matrix", "[", "np", ".", "where", "(", "gamma_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "[", "0", "]", ",", ":", "]", "[", ":", ",", "\n", "np", ".", "where", "(", "gamma_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "[", "0", "]", "]", "\n", "\n", "dim", "=", "np", ".", "where", "(", "gamma_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "hessian_part", "=", "0.5", "*", "dim", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "-", "0.5", "*", "dim", "*", "np", ".", "log", "(", "NTrain", ")", "-", "0.5", "*", "selected_hessian", ".", "eig", "(", ")", "[", "0", "]", "[", ":", ",", "0", "]", ".", "abs", "(", ")", ".", "log", "(", ")", ".", "sum", "(", ")", "\n", "log_evidence", "=", "object", ".", "mul", "(", "-", "NTrain", ")", "+", "hessian_part", "\n", "\n", "print", "(", "'Bayesian Evidence:'", ",", "log_evidence", ")", "\n", "print", "(", "'Dimension:'", ",", "dim", ")", "\n", "log_evidence_list", "[", "my_seed", "]", "=", "log_evidence", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "dim_list", "[", "my_seed", "]", "=", "dim", "\n", "hessian_part_list", "[", "my_seed", "]", "=", "hessian_part", "\n", "selected_hessian_list", ".", "append", "(", "selected_hessian", ")", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"Train Loss:\"", ",", "loss", ")", "\n", "train_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"Val Loss:\"", ",", "loss", ")", "\n", "val_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"Test Loss:\"", ",", "loss", ")", "\n", "test_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "user_gamma", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "para_gamma_path_fine_tune", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "user_gamma", ".", "append", "(", "para_gamma_path_fine_tune", "[", "index", "]", "[", "-", "1", ",", "]", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "para", ".", "data", "=", "torch", ".", "FloatTensor", "(", "para_path_fine_tune", "[", "i", "]", "[", "-", "1", ",", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "net", ".", "mask", "(", "user_gamma", ",", "device", ")", "\n", "\n", "fine_tune_loop", "=", "40001", "\n", "para_path_fine_tune", "=", "[", "]", "\n", "para_gamma_path_fine_tune", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "for", "iter", "in", "range", "(", "fine_tune_loop", ")", ":", "\n", "            ", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss", ".", "div", "(", "2", "*", "sigma", ")", ".", "add", "(", "sigma", ".", "log", "(", ")", ".", "mul", "(", "0.5", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# prior gradient", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "temp", "=", "para", ".", "pow", "(", "2", ")", ".", "mul", "(", "c2", ")", ".", "add", "(", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "para", ".", "div", "(", "-", "prior_sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "para", ".", "div", "(", "-", "prior_sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "prior_grad", "=", "temp", ".", "div", "(", "NTrain", ")", "\n", "para", ".", "grad", ".", "data", "-=", "prior_grad", "\n", "\n", "", "", "optimization", ".", "step", "(", ")", "\n", "\n", "# with torch.no_grad():", "\n", "#     sigma.data = sigma.sub(sigma.grad.mul(step_lr)).data", "\n", "# sigma.grad.zero_()", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ")", "\n", "val_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "print", "(", "'sigma:'", ",", "sigma", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path_fine_tune", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path_fine_tune", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "(", "\n", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "# print(net.fc1.weight[0, 0])", "\n", "# print(para_path_fine_tune[0][iter // show_information, 0, 0])", "\n", "", "print", "(", "'number of 1:'", ",", "\n", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "5", "]", ")", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "\"_simu_\"", "+", "str", "(", "my_seed", ")", "+", "'_'", "+", "str", "(", "subn", ")", "+", "'_'", "+", "str", "(", "\n", "lambda_n", ")", "+", "'_'", "+", "str", "(", "\n", "prior_sigma_0", ")", "+", "'_fine_tune_again.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path_fine_tune", ",", "para_gamma_path_fine_tune", ",", "train_loss_path_fine_tune", ",", "val_loss_path_fine_tune", ",", "\n", "test_loss_path_fine_tune", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "loss", "=", "loss", ".", "div", "(", "2", "*", "sigma", ")", ".", "add", "(", "sigma", ".", "log", "(", ")", ".", "mul", "(", "0.5", ")", ")", "\n", "# loss = loss.mul(NTrain)", "\n", "\n", "prior", "=", "0", "\n", "for", "layer_index", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "temp", "=", "(", "para", ".", "pow", "(", "2", ")", ".", "div", "(", "-", "2", "*", "prior_sigma_1", ")", ".", "exp", "(", ")", ".", "mul", "(", "lambda_n", "/", "np", ".", "sqrt", "(", "prior_sigma_1", ")", ")", "+", "\n", "para", ".", "pow", "(", "2", ")", ".", "div", "(", "-", "2", "*", "prior_sigma_0", ")", ".", "exp", "(", ")", ".", "mul", "(", "\n", "(", "1", "-", "lambda_n", ")", "/", "np", ".", "sqrt", "(", "prior_sigma_0", ")", ")", ")", ".", "log", "(", ")", "\n", "debug_temp", "=", "para", ".", "pow", "(", "2", ")", ".", "div", "(", "-", "2", "*", "prior_sigma_1", ")", ".", "add", "(", "np", ".", "log", "(", "lambda_n", "/", "np", ".", "sqrt", "(", "prior_sigma_1", ")", ")", ")", "\n", "temp", "=", "torch", ".", "where", "(", "torch", ".", "isinf", "(", "temp", ")", ",", "debug_temp", ",", "temp", ")", "\n", "prior", "=", "prior", "-", "temp", ".", "mul", "(", "net", ".", "gamma", "[", "layer_index", "]", ")", ".", "sum", "(", ")", "\n", "\n", "# prior = 0", "\n", "# for layer_index, para in enumerate(net.parameters()):", "\n", "#     prior = prior - (para.pow(2).div(-2 * prior_sigma_1).exp().mul(lambda_n / np.sqrt(prior_sigma_1)) +", "\n", "#                      para.pow(2).div(-2 * prior_sigma_0).exp().mul(", "\n", "#                          (1 - lambda_n) / np.sqrt(prior_sigma_0))).log().mul(net.gamma[layer_index]).sum()", "\n", "#     # print(prior)", "\n", "\n", "# prior = prior + sigma.log().mul(inverse_gamma_alpha + 1) + sigma.reciprocal().mul(inverse_gamma_beta)", "\n", "", "prior", "=", "prior", ".", "div", "(", "NTrain", ")", "\n", "object", "=", "loss", "+", "prior", "\n", "\n", "loss_hessian", "=", "hessian", "(", "loss", ",", "net", ".", "parameters", "(", ")", ")", "\n", "prior_hessian", "=", "hessian", "(", "prior", ",", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "shape", "=", "prior_hessian", ".", "shape", "[", "0", "]", "\n", "\n", "debug_hessian", "=", "torch", ".", "eye", "(", "shape", ")", ".", "mul", "(", "prior_sigma_1", "/", "NTrain", ")", ".", "to", "(", "device", ")", "\n", "\n", "prior_hessian", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "prior_hessian", ")", ",", "debug_hessian", ",", "prior_hessian", ")", "\n", "\n", "hessian_matrix", "=", "loss_hessian", "+", "prior_hessian", "\n", "\n", "gamma_index", "=", "torch", ".", "cat", "(", "[", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "for", "x", "in", "net", ".", "gamma", "]", ")", "\n", "\n", "selected_hessian", "=", "hessian_matrix", "[", "np", ".", "where", "(", "gamma_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "[", "0", "]", ",", ":", "]", "[", ":", ",", "\n", "np", ".", "where", "(", "gamma_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "[", "0", "]", "]", "\n", "\n", "dim", "=", "np", ".", "where", "(", "gamma_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "hessian_part", "=", "0.5", "*", "dim", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "-", "0.5", "*", "dim", "*", "np", ".", "log", "(", "NTrain", ")", "-", "0.5", "*", "selected_hessian", ".", "eig", "(", ")", "[", "0", "]", "[", ":", ",", "0", "]", ".", "abs", "(", ")", ".", "log", "(", ")", ".", "sum", "(", ")", "\n", "log_evidence", "=", "object", ".", "mul", "(", "-", "NTrain", ")", "+", "hessian_part", "\n", "\n", "# log_evidence = object.mul(-NTrain) + 0.5 * dim * np.log(2 * np.pi) - 0.5 * dim * np.log(NTrain) - 0.5 * \\", "\n", "#                selected_hessian.eig()[0][:, 0].abs().log().sum()", "\n", "\n", "print", "(", "'Bayesian Evidence:'", ",", "log_evidence", ")", "\n", "print", "(", "'Dimension:'", ",", "dim", ")", "\n", "\n", "log_evidence_list_fine_tune", "[", "my_seed", "]", "=", "log_evidence", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "dim_list_fine_tune", "[", "my_seed", "]", "=", "dim", "\n", "hessian_part_list_fine_tune", "[", "my_seed", "]", "=", "hessian_part", "\n", "selected_hessian_list_fine_tune", ".", "append", "(", "selected_hessian", ")", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"Train Loss:\"", ",", "loss", ")", "\n", "train_loss_list_fine_tune", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"Val Loss:\"", ",", "loss", ")", "\n", "val_loss_list_fine_tune", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"Test Loss:\"", ",", "loss", ")", "\n", "test_loss_list_fine_tune", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "'_result.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "# pickle.dump([log_evidence_list, dim_list, num_selection_list, num_selection_true_list, train_loss_list, val_loss_list ,test_loss_list,", "\n", "#              log_evidence_list_fine_tune, dim_list_fine_tune, num_selection_list_fine_tune, num_selection_true_list_fine_tune, train_loss_list_fine_tune, val_loss_list_fine_tune, test_loss_list_fine_tune], f)", "\n", "pickle", ".", "dump", "(", "[", "log_evidence_list", ",", "dim_list", ",", "hessian_part_list", ",", "selected_hessian_list", ",", "num_selection_list", ",", "\n", "num_selection_true_list", ",", "train_loss_list", ",", "val_loss_list", ",", "test_loss_list", ",", "\n", "log_evidence_list_fine_tune", ",", "dim_list_fine_tune", ",", "hessian_part_list_fine_tune", ",", "\n", "selected_hessian_list_fine_tune", ",", "num_selection_list_fine_tune", ",", "num_selection_true_list_fine_tune", ",", "\n", "train_loss_list_fine_tune", ",", "val_loss_list_fine_tune", ",", "test_loss_list_fine_tune", "]", ",", "f", ")", "\n", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Regression.my_Net_tanh.__init__": [[23, 38], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Regression.my_Net_tanh.gamma.append", "Simulation_Regression.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Regression.my_Net_tanh.gamma.append", "Simulation_Regression.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Regression.my_Net_tanh.gamma.append", "Simulation_Regression.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Regression.my_Net_tanh.gamma.append", "Simulation_Regression.my_Net_tanh.gamma.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "my_Net_tanh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "[", "]", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2000", ",", "6", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "1", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Regression.my_Net_tanh.to": [[39, 44], ["super().to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "range", "Simulation_Regression.my_Net_tanh.gamma.__len__", "Simulation_Regression.my_Net_tanh.gamma[].to"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "my_Net_tanh", ",", "self", ")", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "gamma", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "index", "]", "=", "self", ".", "gamma", "[", "index", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Regression.my_Net_tanh.forward": [[45, 53], ["enumerate", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "Simulation_Regression.my_Net_tanh.fc4", "Simulation_Regression.my_Net_tanh.parameters", "para.data.mul_", "Simulation_Regression.my_Net_tanh.fc1", "Simulation_Regression.my_Net_tanh.fc2", "Simulation_Regression.my_Net_tanh.fc3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "para", ".", "data", ".", "mul_", "(", "self", ".", "gamma", "[", "i", "]", ")", "\n", "", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Regression.my_Net_tanh.mask": [[54, 61], ["enumerate", "enumerate", "Simulation_Regression.my_Net_tanh.parameters", "Simulation_Regression.my_Net_tanh.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "mask", "(", "self", ",", "user_gamma", ",", "device", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "gamma", "[", "i", "]", ".", "shape", "!=", "user_gamma", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'size doesn\\'t match'", ")", "\n", "return", "0", "\n", "", "", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "i", "]", ".", "data", "=", "torch", ".", "tensor", "(", "user_gamma", "[", "i", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Regression.my_Net_relu.__init__": [[63, 78], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Regression.my_Net_relu.gamma.append", "Simulation_Regression.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Regression.my_Net_relu.gamma.append", "Simulation_Regression.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Regression.my_Net_relu.gamma.append", "Simulation_Regression.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Simulation_Regression.my_Net_relu.gamma.append", "Simulation_Regression.my_Net_relu.gamma.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "my_Net_relu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "[", "]", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2000", ",", "6", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "1", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Regression.my_Net_relu.to": [[79, 84], ["super().to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "range", "Simulation_Regression.my_Net_relu.gamma.__len__", "Simulation_Regression.my_Net_relu.gamma[].to"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "my_Net_relu", ",", "self", ")", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "gamma", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "index", "]", "=", "self", ".", "gamma", "[", "index", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Regression.my_Net_relu.forward": [[85, 93], ["enumerate", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "Simulation_Regression.my_Net_relu.fc4", "Simulation_Regression.my_Net_relu.parameters", "para.data.mul_", "Simulation_Regression.my_Net_relu.fc1", "Simulation_Regression.my_Net_relu.fc2", "Simulation_Regression.my_Net_relu.fc3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "para", ".", "data", ".", "mul_", "(", "self", ".", "gamma", "[", "i", "]", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Regression.my_Net_relu.mask": [[94, 101], ["enumerate", "enumerate", "Simulation_Regression.my_Net_relu.parameters", "Simulation_Regression.my_Net_relu.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "mask", "(", "self", ",", "user_gamma", ",", "device", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "gamma", "[", "i", "]", ".", "shape", "!=", "user_gamma", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'size doesn\\'t match'", ")", "\n", "return", "0", "\n", "", "", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "i", "]", ".", "data", "=", "torch", ".", "tensor", "(", "user_gamma", "[", "i", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Regression.gradient": [[103, 119], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.cat", "torch.cat", "torch.cat", "list", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "zip", "x.contiguous().view", "x.contiguous"], "function", ["None"], ["", "", "", "def", "gradient", "(", "outputs", ",", "inputs", ",", "grad_outputs", "=", "None", ",", "retain_graph", "=", "None", ",", "create_graph", "=", "False", ")", ":", "\n", "    ", "'''\n    Compute the gradient of `outputs` with respect to `inputs`\n    gradient(x.sum(), x)\n    gradient((x * y).sum(), [x, y])\n    '''", "\n", "if", "torch", ".", "is_tensor", "(", "inputs", ")", ":", "\n", "        ", "inputs", "=", "[", "inputs", "]", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "list", "(", "inputs", ")", "\n", "", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", ",", "inputs", ",", "grad_outputs", ",", "\n", "allow_unused", "=", "True", ",", "\n", "retain_graph", "=", "retain_graph", ",", "\n", "create_graph", "=", "create_graph", ")", "\n", "grads", "=", "[", "x", "if", "x", "is", "not", "None", "else", "torch", ".", "zeros_like", "(", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "grads", ",", "inputs", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "for", "x", "in", "grads", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Regression.hessian": [[120, 156], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "sum", "enumerate", "list", "output.new_zeros", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "grad.contiguous().view.contiguous().view", "range", "p.numel", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "inp.numel", "out[].add_", "grad.contiguous().view.contiguous", "grad[].new_zeros", "grad[].new_zeros.type_as", "out[].add_", "Simulation_Regression.gradient", "row[].type_as", "sum", "x.numel"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.gradient"], ["", "def", "hessian", "(", "output", ",", "inputs", ",", "out", "=", "None", ",", "allow_unused", "=", "False", ",", "create_graph", "=", "False", ")", ":", "\n", "    ", "'''\n    Compute the Hessian of `output` with respect to `inputs`\n    hessian((x * y).sum(), [x, y])\n    '''", "\n", "#assert output.ndimension() == 0", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "inputs", ")", ":", "\n", "        ", "inputs", "=", "[", "inputs", "]", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "list", "(", "inputs", ")", "\n", "\n", "", "n", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "inputs", ")", "\n", "if", "out", "is", "None", ":", "\n", "        ", "out", "=", "output", ".", "new_zeros", "(", "n", ",", "n", ")", "\n", "\n", "", "ai", "=", "0", "\n", "for", "i", ",", "inp", "in", "enumerate", "(", "inputs", ")", ":", "\n", "        ", "[", "grad", "]", "=", "torch", ".", "autograd", ".", "grad", "(", "output", ",", "inp", ",", "create_graph", "=", "True", ",", "allow_unused", "=", "allow_unused", ")", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "inp", ")", "if", "grad", "is", "None", "else", "grad", "\n", "grad", "=", "grad", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "for", "j", "in", "range", "(", "inp", ".", "numel", "(", ")", ")", ":", "\n", "            ", "if", "grad", "[", "j", "]", ".", "requires_grad", ":", "\n", "                ", "row", "=", "gradient", "(", "grad", "[", "j", "]", ",", "inputs", "[", "i", ":", "]", ",", "retain_graph", "=", "True", ",", "create_graph", "=", "create_graph", ")", "[", "j", ":", "]", "\n", "", "else", ":", "\n", "                ", "row", "=", "grad", "[", "j", "]", ".", "new_zeros", "(", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "inputs", "[", "i", ":", "]", ")", "-", "j", ")", "\n", "\n", "", "out", "[", "ai", ",", "ai", ":", "]", ".", "add_", "(", "row", ".", "type_as", "(", "out", ")", ")", "# ai's row", "\n", "if", "ai", "+", "1", "<", "n", ":", "\n", "                ", "out", "[", "ai", "+", "1", ":", ",", "ai", "]", ".", "add_", "(", "row", "[", "1", ":", "]", ".", "type_as", "(", "out", ")", ")", "# ai's column", "\n", "", "del", "row", "\n", "ai", "+=", "1", "\n", "", "del", "grad", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Simulation_Regression.main": [[159, 493], ["numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "torch.device", "torch.device", "torch.device", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "Simulation_Regression.my_Net_relu.to", "torch.MSELoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.sqrt", "my_Net_relu.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.sum", "numpy.sum", "range", "Simulation_Regression.my_Net_relu.mask", "my_Net_relu.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "open", "pickle.dump", "open.close", "my_Net_relu.", "nn.MSELoss.", "loss_func.div().add", "enumerate", "prior.div.div", "Simulation_Regression.hessian", "Simulation_Regression.hessian", "torch.eye().mul().to", "torch.eye().mul().to", "torch.eye().mul().to", "torch.where", "torch.where", "torch.where", "torch.cat", "torch.cat", "torch.cat", "print", "print", "log_evidence.cpu().data.numpy", "selected_hessian_list.append", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "Simulation_Regression.my_Net_tanh", "Simulation_Regression.my_Net_tanh", "my_Net_relu.parameters", "os.path.isdir", "para_path.append", "para_gamma_path.append", "my_Net_relu.zero_grad", "my_Net_relu.", "nn.MSELoss.", "loss_func.div().add", "loss_func.backward", "torch.optim.SGD.step", "para_gamma_path.__len__", "user_gamma.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "para_path_fine_tune.append", "para_gamma_path_fine_tune.append", "my_Net_relu.parameters", "my_Net_relu.zero_grad", "my_Net_relu.", "nn.MSELoss.", "loss_func.div().add", "loss_func.backward", "torch.optim.SGD.step", "torch.FloatTensor().to.log().mul", "my_Net_relu.parameters", "para.pow().div().add", "torch.where", "torch.where", "torch.where", "my_Net_relu.parameters", "my_Net_relu.parameters", "torch.isnan", "torch.isnan", "torch.isnan", "object.mul", "str", "Simulation_Regression.my_Net_relu", "Simulation_Regression.my_Net_relu", "print", "exit", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.log", "numpy.log", "os.makedirs", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "torch.FloatTensor().to.log().mul", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.parameters", "print", "str", "numpy.max", "my_Net_relu.parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "torch.FloatTensor().to.log().mul", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.parameters", "print", "str", "loss_func.div", "numpy.log", "torch.isinf", "torch.isinf", "torch.isinf", "para.pow().mul().add().exp().add().pow.mul().sum", "torch.eye().mul", "torch.eye().mul", "torch.eye().mul", "x.contiguous().view", "[].abs().log().sum", "str", "str", "str", "str", "str", "str", "numpy.log", "numpy.log", "numpy.log", "range", "loss_func.div", "para.pow().mul().add().exp().add().pow", "para.pow().mul().add().exp().add().pow.div", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "print", "enumerate", "print", "print", "numpy.max", "range", "loss_func.div", "para.pow().mul().add().exp().add().pow", "para.pow().mul().add().exp().add().pow.div", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "print", "enumerate", "print", "print", "torch.FloatTensor().to.log", "para.pow().div", "numpy.where", "numpy.log", "numpy.log", "log_evidence.cpu", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.sqrt", "os.path.isdir", "list", "list", "torch.FloatTensor().to.log", "para.div().mul", "para.div().mul", "my_Net_relu.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "list", "list", "torch.FloatTensor().to.log", "para.div().mul", "para.div().mul", "my_Net_relu.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "para.pow().div().exp().mul", "para.pow().div().exp().mul", "numpy.sqrt", "para.pow().mul().add().exp().add().pow.mul", "torch.eye", "torch.eye", "torch.eye", "x.contiguous", "numpy.where", "[].abs().log", "para.pow().mul().add().exp().add", "para.pow().mul().add().exp().add", "para.pow", "numpy.where", "torch.cat.cpu().numpy", "para.div", "para.div", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "str", "para.div", "para.div", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "str", "para.pow().div().exp", "numpy.sqrt", "para.pow().div().exp", "numpy.sqrt", "torch.cat.cpu().numpy", "[].abs", "para.pow().mul().add().exp", "para.cpu", "numpy.max", "para.pow().mul().add().exp", "para.cpu", "numpy.max", "torch.cat.cpu().numpy", "torch.cat.cpu", "str", "str", "para.pow().div", "para.pow().div", "torch.cat.cpu", "para.pow().mul().add", "para.pow().mul().add", "torch.cat.cpu", "para.abs", "str", "para.abs", "str", "para.pow", "para.pow", "selected_hessian.eig", "para.pow().mul", "para.pow().mul", "para.pow", "para.pow"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.mask", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.hessian", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.hessian", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "main", "(", ")", ":", "\n", "    ", "data_index", "=", "args", ".", "data_index", "\n", "subn", "=", "500", "\n", "\n", "prior_sigma_0", "=", "0.0001", "\n", "\n", "prior_sigma_1", "=", "0.01", "\n", "\n", "lambda_n", "=", "0.00001", "\n", "\n", "NTrain", "=", "10000", "\n", "Nval", "=", "1000", "\n", "NTest", "=", "1000", "\n", "TotalP", "=", "2000", "\n", "\n", "x_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "TotalP", "]", ")", ")", "\n", "y_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "1", "]", ")", ")", "\n", "\n", "x_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "TotalP", "]", ")", ")", "\n", "y_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "1", "]", ")", ")", "\n", "\n", "x_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "TotalP", "]", ")", ")", "\n", "y_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "1", "]", ")", ")", "\n", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "data_index", ")", "+", "\"/x_train.csv\"", ")", ")", "\n", "x_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "data_index", ")", "+", "\"/y_train.csv\"", ")", ")", "\n", "y_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "data_index", ")", "+", "\"/x_val.csv\"", ")", ")", "\n", "x_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "data_index", ")", "+", "\"/y_val.csv\"", ")", ")", "\n", "y_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "data_index", ")", "+", "\"/x_test.csv\"", ")", ")", "\n", "x_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "data_index", ")", "+", "\"/y_test.csv\"", ")", ")", "\n", "y_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "\n", "x_train", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "device", ")", "\n", "y_train", "=", "torch", ".", "FloatTensor", "(", "y_train", ")", ".", "to", "(", "device", ")", "\n", "x_val", "=", "torch", ".", "FloatTensor", "(", "x_val", ")", ".", "to", "(", "device", ")", "\n", "y_val", "=", "torch", ".", "FloatTensor", "(", "y_val", ")", ".", "to", "(", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "device", ")", "\n", "y_test", "=", "torch", ".", "FloatTensor", "(", "y_test", ")", ".", "to", "(", "device", ")", "\n", "\n", "num_seed", "=", "10", "\n", "\n", "selected_hessian_list", "=", "[", "]", "\n", "\n", "hessian_part_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "log_evidence_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "dim_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "num_selection_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "num_selection_true_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "train_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "val_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "test_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "for", "my_seed", "in", "range", "(", "num_seed", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "my_seed", ")", "\n", "torch", ".", "manual_seed", "(", "my_seed", ")", "\n", "\n", "if", "args", ".", "activation", "==", "'tanh'", ":", "\n", "            ", "net", "=", "my_Net_tanh", "(", ")", "\n", "net_dense", "=", "my_Net_tanh", "(", ")", "\n", "", "elif", "args", ".", "activation", "==", "'relu'", ":", "\n", "            ", "net", "=", "my_Net_relu", "(", ")", "\n", "net_dense", "=", "my_Net_relu", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'unrecognized activation function'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "net", ".", "to", "(", "device", ")", "\n", "loss_func", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "step_lr", "=", "0.005", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ")", "\n", "\n", "sigma", "=", "torch", ".", "FloatTensor", "(", "[", "1", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "c1", "=", "np", ".", "log", "(", "lambda_n", ")", "-", "np", ".", "log", "(", "1", "-", "lambda_n", ")", "+", "0.5", "*", "np", ".", "log", "(", "prior_sigma_0", ")", "-", "0.5", "*", "np", ".", "log", "(", "prior_sigma_1", ")", "\n", "c2", "=", "0.5", "/", "prior_sigma_0", "-", "0.5", "/", "prior_sigma_1", "\n", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "prior_sigma_1", "/", "prior_sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "prior_sigma_0", "-", "0.5", "/", "prior_sigma_1", ")", ")", "\n", "\n", "\n", "\n", "\n", "max_loop", "=", "80001", "\n", "PATH", "=", "'./result/regression/'", "+", "args", ".", "activation", "+", "'/bayesian_evidence/'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "                ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "raise", "\n", "\n", "", "", "", "show_information", "=", "100", "\n", "\n", "para_path", "=", "[", "]", "\n", "para_gamma_path", "=", "[", "]", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "for", "iter", "in", "range", "(", "max_loop", ")", ":", "\n", "            ", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss", ".", "div", "(", "2", "*", "sigma", ")", ".", "add", "(", "sigma", ".", "log", "(", ")", ".", "mul", "(", "0.5", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# prior gradient", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "temp", "=", "para", ".", "pow", "(", "2", ")", ".", "mul", "(", "c2", ")", ".", "add", "(", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "para", ".", "div", "(", "-", "prior_sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "para", ".", "div", "(", "-", "prior_sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "prior_grad", "=", "temp", ".", "div", "(", "NTrain", ")", "\n", "para", ".", "grad", ".", "data", "-=", "prior_grad", "\n", "\n", "\n", "", "", "optimization", ".", "step", "(", ")", "\n", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ")", "\n", "val_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "print", "(", "'sigma:'", ",", "sigma", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "(", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "5", "]", ")", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "\"_simu_\"", "+", "str", "(", "my_seed", ")", "+", "'_'", "+", "str", "(", "subn", ")", "+", "'_'", "+", "str", "(", "\n", "lambda_n", ")", "+", "'_'", "+", "str", "(", "prior_sigma_0", ")", "+", "'.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path", ",", "para_gamma_path", ",", "train_loss_path", ",", "val_loss_path", ",", "test_loss_path", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "num_selection_list", "[", "my_seed", "]", "=", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "\n", "num_selection_true_list", "[", "my_seed", "]", "=", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "5", "]", ")", "\n", "\n", "user_gamma", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "para_gamma_path", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "user_gamma", ".", "append", "(", "para_gamma_path", "[", "index", "]", "[", "-", "1", ",", "]", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "para", ".", "data", "=", "torch", ".", "FloatTensor", "(", "para_path", "[", "i", "]", "[", "-", "1", ",", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "net", ".", "mask", "(", "user_gamma", ",", "device", ")", "\n", "\n", "fine_tune_loop", "=", "40001", "\n", "para_path_fine_tune", "=", "[", "]", "\n", "para_gamma_path_fine_tune", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "\n", "step_lr", "=", "0.005", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ")", "\n", "\n", "\n", "for", "iter", "in", "range", "(", "fine_tune_loop", ")", ":", "\n", "            ", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss", ".", "div", "(", "2", "*", "sigma", ")", ".", "add", "(", "sigma", ".", "log", "(", ")", ".", "mul", "(", "0.5", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# prior gradient", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "temp", "=", "para", ".", "pow", "(", "2", ")", ".", "mul", "(", "c2", ")", ".", "add", "(", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "para", ".", "div", "(", "-", "prior_sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "para", ".", "div", "(", "-", "prior_sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "prior_grad", "=", "temp", ".", "div", "(", "NTrain", ")", "\n", "para", ".", "grad", ".", "data", "-=", "prior_grad", "\n", "\n", "\n", "", "", "optimization", ".", "step", "(", ")", "\n", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ")", "\n", "val_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "print", "(", "'sigma:'", ",", "sigma", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path_fine_tune", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path_fine_tune", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "(", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "\n", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "5", "]", ")", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "\"_simu_\"", "+", "str", "(", "my_seed", ")", "+", "'_'", "+", "str", "(", "subn", ")", "+", "'_'", "+", "str", "(", "\n", "lambda_n", ")", "+", "'_'", "+", "str", "(", "\n", "prior_sigma_0", ")", "+", "'_fine_tune.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path_fine_tune", ",", "para_gamma_path_fine_tune", ",", "train_loss_path_fine_tune", ",", "val_loss_path_fine_tune", ",", "\n", "test_loss_path_fine_tune", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "loss", "=", "loss", ".", "div", "(", "2", "*", "sigma", ")", ".", "add", "(", "sigma", ".", "log", "(", ")", ".", "mul", "(", "0.5", ")", ")", "\n", "\n", "prior", "=", "0", "\n", "for", "layer_index", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "temp", "=", "(", "para", ".", "pow", "(", "2", ")", ".", "div", "(", "-", "2", "*", "prior_sigma_1", ")", ".", "exp", "(", ")", ".", "mul", "(", "lambda_n", "/", "np", ".", "sqrt", "(", "prior_sigma_1", ")", ")", "+", "\n", "para", ".", "pow", "(", "2", ")", ".", "div", "(", "-", "2", "*", "prior_sigma_0", ")", ".", "exp", "(", ")", ".", "mul", "(", "\n", "(", "1", "-", "lambda_n", ")", "/", "np", ".", "sqrt", "(", "prior_sigma_0", ")", ")", ")", ".", "log", "(", ")", "\n", "debug_temp", "=", "para", ".", "pow", "(", "2", ")", ".", "div", "(", "-", "2", "*", "prior_sigma_1", ")", ".", "add", "(", "np", ".", "log", "(", "lambda_n", "/", "np", ".", "sqrt", "(", "prior_sigma_1", ")", ")", ")", "\n", "temp", "=", "torch", ".", "where", "(", "torch", ".", "isinf", "(", "temp", ")", ",", "debug_temp", ",", "temp", ")", "\n", "prior", "=", "prior", "-", "temp", ".", "mul", "(", "net", ".", "gamma", "[", "layer_index", "]", ")", ".", "sum", "(", ")", "\n", "\n", "\n", "", "prior", "=", "prior", ".", "div", "(", "NTrain", ")", "\n", "object", "=", "loss", "+", "prior", "\n", "\n", "loss_hessian", "=", "hessian", "(", "loss", ",", "net", ".", "parameters", "(", ")", ")", "\n", "prior_hessian", "=", "hessian", "(", "prior", ",", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "shape", "=", "prior_hessian", ".", "shape", "[", "0", "]", "\n", "\n", "debug_hessian", "=", "torch", ".", "eye", "(", "shape", ")", ".", "mul", "(", "prior_sigma_1", "/", "NTrain", ")", ".", "to", "(", "device", ")", "\n", "\n", "prior_hessian", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "prior_hessian", ")", ",", "debug_hessian", ",", "prior_hessian", ")", "\n", "\n", "hessian_matrix", "=", "loss_hessian", "+", "prior_hessian", "\n", "\n", "gamma_index", "=", "torch", ".", "cat", "(", "[", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "for", "x", "in", "net", ".", "gamma", "]", ")", "\n", "\n", "selected_hessian", "=", "hessian_matrix", "[", "np", ".", "where", "(", "gamma_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "[", "0", "]", ",", ":", "]", "[", ":", ",", "\n", "np", ".", "where", "(", "gamma_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "[", "0", "]", "]", "\n", "\n", "dim", "=", "np", ".", "where", "(", "gamma_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "hessian_part", "=", "0.5", "*", "dim", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "-", "0.5", "*", "dim", "*", "np", ".", "log", "(", "NTrain", ")", "-", "0.5", "*", "selected_hessian", ".", "eig", "(", ")", "[", "0", "]", "[", ":", ",", "0", "]", ".", "abs", "(", ")", ".", "log", "(", ")", ".", "sum", "(", ")", "\n", "\n", "log_evidence", "=", "object", ".", "mul", "(", "-", "NTrain", ")", "+", "hessian_part", "\n", "\n", "print", "(", "'Bayesian Evidence:'", ",", "log_evidence", ")", "\n", "print", "(", "'Dimension:'", ",", "dim", ")", "\n", "log_evidence_list", "[", "my_seed", "]", "=", "log_evidence", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "dim_list", "[", "my_seed", "]", "=", "dim", "\n", "hessian_part_list", "[", "my_seed", "]", "=", "hessian_part", "\n", "selected_hessian_list", ".", "append", "(", "selected_hessian", ")", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"Train Loss:\"", ",", "loss", ")", "\n", "train_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"Val Loss:\"", ",", "loss", ")", "\n", "val_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"Test Loss:\"", ",", "loss", ")", "\n", "test_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "'_result.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "log_evidence_list", ",", "dim_list", ",", "hessian_part_list", ",", "selected_hessian_list", ",", "num_selection_list", ",", "\n", "num_selection_true_list", ",", "train_loss_list", ",", "val_loss_list", ",", "test_loss_list", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.Net.__init__": [[50, 65], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "range", "run_bnn.Net.fc_list.append", "run_bnn.Net.add_module", "run_bnn.Net.fc_list.append", "run_bnn.Net.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "str", "str"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_hidden", "=", "num_hidden", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", "[", "0", "]", ")", "\n", "self", ".", "fc_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_hidden", "-", "1", ")", ":", "\n", "            ", "self", ".", "fc_list", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", "[", "i", "]", ",", "hidden_dim", "[", "i", "+", "1", "]", ")", ")", "\n", "self", ".", "add_module", "(", "'fc'", "+", "str", "(", "i", "+", "2", ")", ",", "self", ".", "fc_list", "[", "-", "1", "]", ")", "\n", "", "self", ".", "fc_list", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", "[", "-", "1", "]", ",", "output_dim", ")", ")", "\n", "self", ".", "add_module", "(", "'fc'", "+", "str", "(", "num_hidden", "+", "1", ")", ",", "self", ".", "fc_list", "[", "-", "1", "]", ")", "\n", "\n", "self", ".", "prune_flag", "=", "0", "\n", "self", ".", "mask", "=", "None", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.Net.forward": [[66, 77], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "range", "run_bnn.Net.named_parameters", "run_bnn.Net.fc", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["\n", "        ", "if", "self", ".", "prune_flag", "==", "1", ":", "\n", "            ", "for", "name", ",", "para", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "para", ".", "data", "[", "self", ".", "mask", "[", "name", "]", "]", "=", "0", "\n", "\n", "", "", "x", "=", "torch", ".", "tanh", "(", "self", ".", "fc", "(", "x", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_hidden", "-", "1", ")", ":", "\n", "            ", "x", "=", "torch", ".", "tanh", "(", "self", ".", "fc_list", "[", "i", "]", "(", "x", ")", ")", "\n", "", "x", "=", "self", ".", "fc_list", "[", "-", "1", "]", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "def", "set_prune", "(", "self", ",", "user_mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.Net.set_prune": [[78, 81], ["None"], "methods", ["None"], ["        ", "self", ".", "mask", "=", "user_mask", "\n", "self", ".", "prune_flag", "=", "1", "\n", "\n", "", "def", "cancel_prune", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.Net.cancel_prune": [[82, 85], ["None"], "methods", ["None"], ["        ", "self", ".", "prune_flag", "=", "0", "\n", "self", ".", "mask", "=", "None", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.gradient": [[88, 104], ["torch.is_tensor", "torch.is_tensor", "torch.autograd.grad", "torch.autograd.grad", "torch.cat", "torch.cat", "list", "torch.zeros_like", "torch.zeros_like", "zip", "x.contiguous().view", "x.contiguous"], "function", ["None"], ["    ", "'''\n    Compute the gradient of `outputs` with respect to `inputs`\n    gradient(x.sum(), x)\n    gradient((x * y).sum(), [x, y])\n    '''", "\n", "if", "torch", ".", "is_tensor", "(", "inputs", ")", ":", "\n", "        ", "inputs", "=", "[", "inputs", "]", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "list", "(", "inputs", ")", "\n", "", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", ",", "inputs", ",", "grad_outputs", ",", "\n", "allow_unused", "=", "True", ",", "\n", "retain_graph", "=", "retain_graph", ",", "\n", "create_graph", "=", "create_graph", ")", "\n", "grads", "=", "[", "x", "if", "x", "is", "not", "None", "else", "torch", ".", "zeros_like", "(", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "grads", ",", "inputs", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "for", "x", "in", "grads", "]", ")", "\n", "\n", "", "def", "hessian", "(", "output", ",", "inputs", ",", "out", "=", "None", ",", "allow_unused", "=", "False", ",", "create_graph", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.hessian": [[105, 141], ["torch.is_tensor", "torch.is_tensor", "sum", "enumerate", "list", "output.new_zeros", "torch.autograd.grad", "torch.autograd.grad", "grad.contiguous().view.contiguous().view", "range", "p.numel", "torch.zeros_like", "torch.zeros_like", "inp.numel", "out[].add_", "grad.contiguous().view.contiguous", "grad[].new_zeros", "grad[].new_zeros.type_as", "out[].add_", "run_bnn.gradient", "row[].type_as", "sum", "x.numel"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.gradient"], ["    ", "'''\n    Compute the Hessian of `output` with respect to `inputs`\n    hessian((x * y).sum(), [x, y])\n    '''", "\n", "#assert output.ndimension() == 0", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "inputs", ")", ":", "\n", "        ", "inputs", "=", "[", "inputs", "]", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "list", "(", "inputs", ")", "\n", "\n", "", "n", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "inputs", ")", "\n", "if", "out", "is", "None", ":", "\n", "        ", "out", "=", "output", ".", "new_zeros", "(", "n", ",", "n", ")", "\n", "\n", "", "ai", "=", "0", "\n", "for", "i", ",", "inp", "in", "enumerate", "(", "inputs", ")", ":", "\n", "        ", "[", "grad", "]", "=", "torch", ".", "autograd", ".", "grad", "(", "output", ",", "inp", ",", "create_graph", "=", "True", ",", "allow_unused", "=", "allow_unused", ")", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "inp", ")", "if", "grad", "is", "None", "else", "grad", "\n", "grad", "=", "grad", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "for", "j", "in", "range", "(", "inp", ".", "numel", "(", ")", ")", ":", "\n", "            ", "if", "grad", "[", "j", "]", ".", "requires_grad", ":", "\n", "                ", "row", "=", "gradient", "(", "grad", "[", "j", "]", ",", "inputs", "[", "i", ":", "]", ",", "retain_graph", "=", "True", ",", "create_graph", "=", "create_graph", ")", "[", "j", ":", "]", "\n", "", "else", ":", "\n", "                ", "row", "=", "grad", "[", "j", "]", ".", "new_zeros", "(", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "inputs", "[", "i", ":", "]", ")", "-", "j", ")", "\n", "\n", "", "out", "[", "ai", ",", "ai", ":", "]", ".", "add_", "(", "row", ".", "type_as", "(", "out", ")", ")", "# ai's row", "\n", "if", "ai", "+", "1", "<", "n", ":", "\n", "                ", "out", "[", "ai", "+", "1", ":", ",", "ai", "]", ".", "add_", "(", "row", "[", "1", ":", "]", ".", "type_as", "(", "out", ")", ")", "# ai's column", "\n", "", "del", "row", "\n", "ai", "+=", "1", "\n", "", "del", "grad", "\n", "\n", "", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.run_bnn.main": [[146, 376], ["process_data.preprocess_data", "torch.device", "torch.device", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "run_bnn.Net", "Net.to", "torch.MSELoss", "torch.optim.SGD", "torch.optim.SGD", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.sqrt", "Net.parameters", "numpy.zeros", "numpy.zeros", "numpy.arange", "range", "open", "pickle.dump", "open.close", "numpy.sum", "open", "open.write", "open.close", "Net.named_parameters", "run_bnn.Net.set_prune", "Net.parameters", "numpy.zeros", "numpy.zeros", "torch.optim.SGD", "torch.optim.SGD", "range", "open", "pickle.dump", "open.close", "torch.cuda.is_available", "torch.cuda.is_available", "Net.parameters", "os.path.isdir", "para_path.append", "para_gamma_path.append", "numpy.random.shuffle", "range", "print", "str", "str", "torch.no_grad", "torch.no_grad", "enumerate", "para_path_fine_tune.append", "para_gamma_path_fine_tune.append", "Net.parameters", "numpy.random.shuffle", "range", "print", "str", "torch.no_grad", "torch.no_grad", "Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "Net.named_parameters", "Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "print", "print", "torch.FloatTensor", "torch.FloatTensor", "numpy.log", "numpy.log", "os.makedirs", "numpy.zeros", "numpy.zeros", "Net.zero_grad", "Net.", "nn.MSELoss.", "loss_func.div().add", "loss_func.backward", "torch.optim.SGD.step", "torch.no_grad", "torch.no_grad", "Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "enumerate", "print", "numpy.max", "int", "str", "Net.parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "para.abs", "numpy.zeros", "numpy.zeros", "Net.zero_grad", "Net.", "nn.MSELoss.", "loss_func.div().add", "loss_func.backward", "torch.optim.SGD.step", "torch.no_grad", "torch.no_grad", "Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "Net.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "enumerate", "print", "numpy.log", "numpy.log", "numpy.log", "torch.FloatTensor().to.log().mul", "torch.no_grad", "torch.no_grad", "Net.parameters", "Net.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.max", "torch.FloatTensor().to.log().mul", "torch.no_grad", "torch.no_grad", "Net.parameters", "Net.parameters", "para.cpu().data.numpy", "numpy.sum", "Net.mask[].sum", "numpy.sqrt", "os.path.isdir", "list", "list", "loss_func.div", "para.pow().mul().add().exp().add().pow", "para.pow().mul().add().exp().add().pow.div", "torch.FloatTensor", "torch.FloatTensor", "list", "list", "loss_func.div", "para.pow().mul().add().exp().add().pow", "para.pow().mul().add().exp().add().pow.div", "loss_func.cpu", "para.numel", "loss_func.cpu", "torch.FloatTensor().to.log", "para.div().mul", "para.div().mul", "loss_func.cpu", "loss_func.cpu", "numpy.max", "torch.FloatTensor().to.log", "para.div().mul", "para.div().mul", "loss_func.cpu", "loss_func.cpu", "numpy.max", "numpy.log", "para.pow().mul().add().exp().add", "para.cpu", "para.pow().mul().add().exp().add", "para.cpu", "para.div", "para.div", "para.div", "para.div", "para.pow().mul().add().exp", "para.pow().mul().add().exp", "para.abs", "para.abs", "para.pow().mul().add", "para.pow().mul().add", "para.pow().mul", "para.pow().mul", "para.pow", "para.pow"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.process_data.preprocess_data", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.Lenet5_sparse.set_prune", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["    ", "data_name", "=", "args", ".", "data_name", "\n", "subn", "=", "args", ".", "batch_train", "\n", "\n", "prior_sigma_0", "=", "args", ".", "sigma0", "\n", "\n", "prior_sigma_1", "=", "args", ".", "sigma1", "\n", "\n", "lambda_n", "=", "args", ".", "lambdan", "\n", "\n", "num_hidden", "=", "args", ".", "layer", "\n", "hidden_dim", "=", "args", ".", "unit", "\n", "\n", "num_seed", "=", "args", ".", "num_run", "\n", "\n", "num_epoch", "=", "args", ".", "nepoch", "\n", "\n", "\n", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "=", "preprocess_data", "(", "data_name", ")", "\n", "output_dim", "=", "1", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "ntrain", "=", "x_train", ".", "shape", "[", "0", "]", "\n", "dim", "=", "x_train", ".", "shape", "[", "1", "]", "\n", "\n", "\n", "dim_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "BIC_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "num_selection_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "train_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "test_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "for", "my_seed", "in", "range", "(", "num_seed", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "my_seed", ")", "\n", "torch", ".", "manual_seed", "(", "my_seed", ")", "\n", "\n", "net", "=", "Net", "(", "num_hidden", ",", "hidden_dim", ",", "dim", ",", "output_dim", ")", "\n", "net", ".", "to", "(", "device", ")", "\n", "\n", "loss_func", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "step_lr", "=", "args", ".", "lr", "\n", "momentum", "=", "args", ".", "momentum", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ",", "momentum", "=", "momentum", ")", "\n", "\n", "sigma", "=", "torch", ".", "FloatTensor", "(", "[", "1", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "c1", "=", "np", ".", "log", "(", "lambda_n", ")", "-", "np", ".", "log", "(", "1", "-", "lambda_n", ")", "+", "0.5", "*", "np", ".", "log", "(", "prior_sigma_0", ")", "-", "0.5", "*", "np", ".", "log", "(", "prior_sigma_1", ")", "\n", "c2", "=", "0.5", "/", "prior_sigma_0", "-", "0.5", "/", "prior_sigma_1", "\n", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "prior_sigma_1", "/", "prior_sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "prior_sigma_0", "-", "0.5", "/", "prior_sigma_1", ")", ")", "\n", "\n", "\n", "PATH", "=", "args", ".", "base_path", "+", "args", ".", "data_name", "+", "'/'", "+", "args", ".", "model_path", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "                ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "raise", "\n", "\n", "", "", "", "para_path", "=", "[", "]", "\n", "para_gamma_path", "=", "[", "]", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "num_epoch", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "num_epoch", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path", "=", "np", ".", "zeros", "(", "[", "num_epoch", "]", ")", "\n", "test_loss_path", "=", "np", ".", "zeros", "(", "[", "num_epoch", "]", ")", "\n", "\n", "index", "=", "np", ".", "arange", "(", "ntrain", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "num_epoch", ")", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "index", ")", "\n", "\n", "for", "iter", "in", "range", "(", "ntrain", "//", "subn", ")", ":", "\n", "                ", "subsample", "=", "index", "[", "(", "iter", "*", "subn", ")", ":", "(", "(", "iter", "+", "1", ")", "*", "subn", ")", "]", "\n", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss", ".", "div", "(", "2", "*", "sigma", ")", ".", "add", "(", "sigma", ".", "log", "(", ")", ".", "mul", "(", "0.5", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# prior gradient:", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                        ", "temp", "=", "para", ".", "pow", "(", "2", ")", ".", "mul", "(", "c2", ")", ".", "add", "(", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "para", ".", "div", "(", "-", "prior_sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "para", ".", "div", "(", "-", "prior_sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "prior_grad", "=", "temp", ".", "div", "(", "ntrain", ")", "\n", "para", ".", "grad", ".", "data", "-=", "prior_grad", "\n", "", "", "optimization", ".", "step", "(", ")", "\n", "\n", "", "print", "(", "'epoch:'", ",", "epoch", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path", "[", "epoch", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path", "[", "epoch", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "para_path", "[", "i", "]", "[", "epoch", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path", "[", "i", "]", "[", "epoch", ",", "]", "=", "(", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of selected:'", ",", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "epoch", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "\n", "", "", "import", "pickle", "\n", "filename", "=", "PATH", "+", "'result'", "+", "str", "(", "my_seed", ")", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path", ",", "para_gamma_path", ",", "train_loss_path", ",", "test_loss_path", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "num_selection_list", "[", "my_seed", "]", "=", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "\n", "\n", "temp_str", "=", "[", "str", "(", "int", "(", "x", ")", ")", "for", "x", "in", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", "]", "\n", "temp_str", "=", "' '", ".", "join", "(", "temp_str", ")", "\n", "filename", "=", "PATH", "+", "'selected_variable'", "+", "str", "(", "my_seed", ")", "+", "'.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "f", ".", "write", "(", "temp_str", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "para", ".", "data", "=", "torch", ".", "FloatTensor", "(", "para_path", "[", "i", "]", "[", "-", "1", ",", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "user_mask", "=", "{", "}", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "            ", "user_mask", "[", "name", "]", "=", "para", ".", "abs", "(", ")", "<", "threshold", "\n", "", "net", ".", "set_prune", "(", "user_mask", ")", "\n", "\n", "\n", "fine_tune_epoch", "=", "args", ".", "fine_tune_epoch", "\n", "para_path_fine_tune", "=", "[", "]", "\n", "para_gamma_path_fine_tune", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_epoch", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_epoch", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_epoch", "]", ")", "\n", "test_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_epoch", "]", ")", "\n", "\n", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ",", "momentum", "=", "momentum", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "fine_tune_epoch", ")", ":", "\n", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "index", ")", "\n", "for", "iter", "in", "range", "(", "ntrain", "//", "subn", ")", ":", "\n", "                ", "subsample", "=", "index", "[", "(", "iter", "*", "subn", ")", ":", "(", "(", "iter", "+", "1", ")", "*", "subn", ")", "]", "\n", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss", ".", "div", "(", "2", "*", "sigma", ")", ".", "add", "(", "sigma", ".", "log", "(", ")", ".", "mul", "(", "0.5", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# prior gradient:", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                        ", "temp", "=", "para", ".", "pow", "(", "2", ")", ".", "mul", "(", "c2", ")", ".", "add", "(", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "para", ".", "div", "(", "-", "prior_sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "para", ".", "div", "(", "-", "prior_sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "prior_grad", "=", "temp", ".", "div", "(", "ntrain", ")", "\n", "para", ".", "grad", ".", "data", "-=", "prior_grad", "\n", "", "", "optimization", ".", "step", "(", ")", "\n", "\n", "", "print", "(", "'fine tune epoch:'", ",", "epoch", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path_fine_tune", "[", "epoch", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path_fine_tune", "[", "epoch", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "para_path_fine_tune", "[", "i", "]", "[", "epoch", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path_fine_tune", "[", "i", "]", "[", "epoch", ",", "]", "=", "(", "\n", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of selected:'", ",", "\n", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune", "[", "0", "]", "[", "epoch", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "\n", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'fine_tune_result'", "+", "str", "(", "my_seed", ")", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path_fine_tune", ",", "para_gamma_path_fine_tune", ",", "train_loss_path_fine_tune", ",", "\n", "test_loss_path_fine_tune", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"Train Loss:\"", ",", "loss", ")", "\n", "train_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "num_non_zero_element", "=", "0", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "                ", "num_non_zero_element", "=", "num_non_zero_element", "+", "para", ".", "numel", "(", ")", "-", "net", ".", "mask", "[", "name", "]", ".", "sum", "(", ")", "\n", "", "BIC", "=", "(", "2", "*", "ntrain", "*", "loss", "+", "np", ".", "log", "(", "ntrain", ")", "*", "num_non_zero_element", ")", ".", "item", "(", ")", "\n", "BIC_list", "[", "my_seed", "]", "=", "BIC", "\n", "dim_list", "[", "my_seed", "]", "=", "num_non_zero_element", "\n", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"Test Loss:\"", ",", "loss", ")", "\n", "test_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "print", "(", "\"number of non-zero connections:\"", ",", "num_non_zero_element", ")", "\n", "print", "(", "'BIC:'", ",", "BIC", ")", "\n", "\n", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'Overall_result_with_different_initialization'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "BIC_list", ",", "dim_list", ",", "num_selection_list", ",", "train_loss_list", ",", "test_loss_list", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Dropout_Regression.Drop_out_Net_relu.__init__": [[25, 35], ["super().__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Drop_out_Net_relu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2000", ",", "6", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "drop3", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "drop4", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Dropout_Regression.Drop_out_Net_relu.forward": [[36, 46], ["Dropout_Regression.Drop_out_Net_relu.drop1", "torch.relu", "torch.relu", "torch.relu", "Dropout_Regression.Drop_out_Net_relu.drop2", "torch.relu", "torch.relu", "torch.relu", "Dropout_Regression.Drop_out_Net_relu.drop3", "torch.relu", "torch.relu", "torch.relu", "Dropout_Regression.Drop_out_Net_relu.drop4", "Dropout_Regression.Drop_out_Net_relu.fc4", "Dropout_Regression.Drop_out_Net_relu.fc1", "Dropout_Regression.Drop_out_Net_relu.fc2", "Dropout_Regression.Drop_out_Net_relu.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drop2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drop3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drop4", "(", "x", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Dropout_Regression.Drop_out_Net_tanh.__init__": [[48, 58], ["super().__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Drop_out_Net_tanh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2000", ",", "6", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "drop3", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "drop4", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Dropout_Regression.Drop_out_Net_tanh.forward": [[59, 69], ["Dropout_Regression.Drop_out_Net_tanh.drop1", "torch.tanh", "torch.tanh", "torch.tanh", "Dropout_Regression.Drop_out_Net_tanh.drop2", "torch.tanh", "torch.tanh", "torch.tanh", "Dropout_Regression.Drop_out_Net_tanh.drop3", "torch.tanh", "torch.tanh", "torch.tanh", "Dropout_Regression.Drop_out_Net_tanh.drop4", "Dropout_Regression.Drop_out_Net_tanh.fc4", "Dropout_Regression.Drop_out_Net_tanh.fc1", "Dropout_Regression.Drop_out_Net_tanh.fc2", "Dropout_Regression.Drop_out_Net_tanh.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drop2", "(", "x", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drop3", "(", "x", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drop4", "(", "x", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Dropout_Regression.main": [[71, 192], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "torch.device", "torch.device", "torch.device", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "Drop_out_Net_relu.to", "torch.MSELoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "Drop_out_Net_relu.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "Dropout_Regression.Drop_out_Net_tanh", "Drop_out_Net_relu.parameters", "os.path.isdir", "para_path.append", "Drop_out_Net_relu.train", "Drop_out_Net_relu.zero_grad", "Drop_out_Net_relu.", "nn.MSELoss.", "loss_func.backward", "torch.optim.SGD.step", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "Dropout_Regression.Drop_out_Net_relu", "print", "exit", "os.makedirs", "numpy.zeros", "range", "numpy.random.choice", "Drop_out_Net_relu.eval", "print", "str", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Drop_out_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "Drop_out_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "Drop_out_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "enumerate", "str", "str", "str", "str", "str", "str", "os.path.isdir", "list", "Drop_out_Net_relu.parameters", "para.cpu().data.numpy", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "para.cpu"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "my_seed", "=", "args", ".", "data_index", "\n", "subn", "=", "500", "\n", "\n", "np", ".", "random", ".", "seed", "(", "my_seed", "-", "1", ")", "\n", "torch", ".", "manual_seed", "(", "my_seed", "-", "1", ")", "\n", "\n", "NTrain", "=", "10000", "\n", "Nval", "=", "1000", "\n", "NTest", "=", "1000", "\n", "TotalP", "=", "2000", "\n", "\n", "x_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "TotalP", "]", ")", ")", "\n", "y_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "1", "]", ")", ")", "\n", "\n", "x_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "TotalP", "]", ")", ")", "\n", "y_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "1", "]", ")", ")", "\n", "\n", "x_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "TotalP", "]", ")", ")", "\n", "y_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "1", "]", ")", ")", "\n", "\n", "\n", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_train.csv\"", ")", ")", "\n", "x_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_train.csv\"", ")", ")", "\n", "y_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_val.csv\"", ")", ")", "\n", "x_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_val.csv\"", ")", ")", "\n", "y_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_test.csv\"", ")", ")", "\n", "x_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_test.csv\"", ")", ")", "\n", "y_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "x_train", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "device", ")", "\n", "y_train", "=", "torch", ".", "FloatTensor", "(", "y_train", ")", ".", "to", "(", "device", ")", "\n", "x_val", "=", "torch", ".", "FloatTensor", "(", "x_val", ")", ".", "to", "(", "device", ")", "\n", "y_val", "=", "torch", ".", "FloatTensor", "(", "y_val", ")", ".", "to", "(", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "device", ")", "\n", "y_test", "=", "torch", ".", "FloatTensor", "(", "y_test", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "activation", "==", "'tanh'", ":", "\n", "        ", "net", "=", "Drop_out_Net_tanh", "(", ")", "\n", "", "elif", "args", ".", "activation", "==", "'relu'", ":", "\n", "        ", "net", "=", "Drop_out_Net_relu", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'unrecognized activation function'", ")", "\n", "exit", "(", "0", ")", "\n", "", "net", ".", "to", "(", "device", ")", "\n", "loss_func", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "step_lr", "=", "0.005", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ")", "\n", "\n", "max_loop", "=", "80001", "\n", "PATH", "=", "'./result/regression/'", "+", "args", ".", "activation", "+", "'/drop_out/'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "            ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "show_information", "=", "100", "\n", "\n", "para_path", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "para_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "for", "iter", "in", "range", "(", "max_loop", ")", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "if", "subn", "==", "NTrain", ":", "\n", "            ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "            ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimization", ".", "step", "(", ")", "\n", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "            ", "net", ".", "eval", "(", ")", "\n", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ")", "\n", "val_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "para_path", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "\"simu_\"", "+", "str", "(", "my_seed", ")", "+", "'_drop_out.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path", ",", "train_loss_path", ",", "val_loss_path", ",", "test_loss_path", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net.VB_Linear.__init__": [[61, 86], ["super().__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "vb_net.VB_Linear.reset_parameters", "numpy.sqrt", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "vb_net.VB_Linear.register_parameter", "vb_net.VB_Linear.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_NormBase.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "lambda_n", "=", "0.01", ",", "sigma_0", "=", "0.00001", ",", "sigma_1", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "VB_Linear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "\n", "self", ".", "weight_mu", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "self", ".", "weight_mu", ".", "prior_grad", "=", "None", "\n", "self", ".", "weight_rho", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "self", ".", "weight_rho", ".", "prior_grad", "=", "None", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias_mu", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "self", ".", "bias_mu", ".", "prior_grad", "=", "None", "\n", "self", ".", "bias_rho", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "self", ".", "bias_rho", ".", "prior_grad", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias_mu'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias_rho'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "self", ".", "c1", "=", "np", ".", "log", "(", "lambda_n", ")", "-", "np", ".", "log", "(", "1", "-", "lambda_n", ")", "+", "0.5", "*", "np", ".", "log", "(", "sigma_0", ")", "-", "0.5", "*", "np", ".", "log", "(", "sigma_1", ")", "\n", "self", ".", "c2", "=", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", "\n", "self", ".", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "sigma_1", "/", "sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", ")", ")", "\n", "self", ".", "lambda_n", "=", "lambda_n", "\n", "self", ".", "sigma_0", "=", "sigma_0", "\n", "self", ".", "sigma_1", "=", "sigma_1", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net.VB_Linear.reset_parameters": [[86, 94], ["torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight_mu", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "init", ".", "constant_", "(", "self", ".", "weight_rho", ",", "-", "5", ")", "\n", "if", "self", ".", "bias_mu", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight_mu", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "bias_mu", ",", "-", "bound", ",", "bound", ")", "\n", "init", ".", "constant_", "(", "self", ".", "bias_rho", ",", "-", "5", ")", "\n", "", "", "def", "extra_repr", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net.VB_Linear.extra_repr": [[94, 97], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'in_features={}, out_features={}, bias={}'", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "self", ".", "bias_mu", "is", "not", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net.VB_Linear.set_prior": [[99, 107], ["numpy.sqrt", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.sqrt"], "methods", ["None"], ["", "def", "set_prior", "(", "self", ",", "lambda_n", ",", "sigma_0", ",", "sigma_1", ")", ":", "\n", "        ", "self", ".", "c1", "=", "np", ".", "log", "(", "lambda_n", ")", "-", "np", ".", "log", "(", "1", "-", "lambda_n", ")", "+", "0.5", "*", "np", ".", "log", "(", "sigma_0", ")", "-", "0.5", "*", "np", ".", "log", "(", "sigma_1", ")", "\n", "self", ".", "c2", "=", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", "\n", "self", ".", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "sigma_1", "/", "sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", ")", ")", "\n", "self", ".", "lambda_n", "=", "lambda_n", "\n", "self", ".", "sigma_0", "=", "sigma_0", "\n", "self", ".", "sigma_1", "=", "sigma_1", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net.VB_Linear.forward": [[108, 138], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weight.pow().mul().add().exp().add().pow", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "weight.div().mul", "weight.div().mul", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias.pow().mul().add().exp().add().pow", "weight.pow().mul().add().exp().add", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "bias.div().mul", "bias.div().mul", "weight.div", "weight.div", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "bias.pow().mul().add().exp().add", "weight.pow().mul().add().exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "bias.div", "bias.div", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "bias.pow().mul().add().exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "weight.pow().mul().add", "bias.pow().mul().add", "weight.pow().mul", "bias.pow().mul", "weight.pow", "bias.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "sample", "=", "False", ",", "calculate_log_probs", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "training", "or", "sample", ":", "\n", "            ", "weight_sigma", "=", "torch", ".", "log1p", "(", "torch", ".", "exp", "(", "self", ".", "weight_rho", ")", ")", "\n", "weight_epsilon", "=", "torch", ".", "zeros_like", "(", "self", ".", "weight_mu", ")", ".", "normal_", "(", ")", "\n", "weight", "=", "self", ".", "weight_mu", "+", "weight_sigma", "*", "weight_epsilon", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "temp", "=", "weight", ".", "pow", "(", "2", ")", ".", "mul", "(", "self", ".", "c2", ")", ".", "add", "(", "self", ".", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "weight", ".", "div", "(", "-", "self", ".", "sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "weight", ".", "div", "(", "-", "self", ".", "sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "self", ".", "weight_mu", ".", "prior_grad", "=", "-", "temp", "\n", "self", ".", "weight_rho", ".", "prior_grad", "=", "-", "temp", "*", "weight_epsilon", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "self", ".", "weight_rho", ")", ")", "-", "1", "/", "(", "\n", "weight_sigma", ")", "*", "(", "1", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "self", ".", "weight_rho", ")", ")", ")", "\n", "", "if", "self", ".", "bias_mu", "is", "not", "None", ":", "\n", "                ", "bias_sigma", "=", "torch", ".", "log1p", "(", "torch", ".", "exp", "(", "self", ".", "bias_rho", ")", ")", "\n", "bias_epsilon", "=", "torch", ".", "zeros_like", "(", "self", ".", "bias_mu", ")", ".", "normal_", "(", ")", "\n", "bias", "=", "self", ".", "bias_mu", "+", "bias_sigma", "*", "bias_epsilon", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "temp", "=", "bias", ".", "pow", "(", "2", ")", ".", "mul", "(", "self", ".", "c2", ")", ".", "add", "(", "self", ".", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "bias", ".", "div", "(", "-", "self", ".", "sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "bias", ".", "div", "(", "-", "self", ".", "sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "self", ".", "bias_mu", ".", "prior_grad", "=", "-", "temp", "\n", "self", ".", "bias_rho", ".", "prior_grad", "=", "-", "temp", "*", "bias_epsilon", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "self", ".", "bias_rho", ")", ")", "-", "1", "/", "(", "\n", "bias_sigma", ")", "*", "(", "1", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "self", ".", "bias_rho", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "bias", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "weight_mu", "\n", "if", "self", ".", "bias_mu", "is", "not", "None", ":", "\n", "                ", "bias", "=", "self", ".", "bias_mu", "\n", "", "else", ":", "\n", "                ", "bias", "=", "None", "\n", "", "", "return", "F", ".", "linear", "(", "input", ",", "weight", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_ConvNd.__init__": [[147, 190], ["super().__init__", "vb_net._VB_ConvNd.reset_parameters", "ValueError", "ValueError", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "vb_net._VB_ConvNd.register_parameter", "vb_net._VB_ConvNd.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_NormBase.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "transposed", ",", "output_padding", ",", "\n", "groups", ",", "bias", ",", "padding_mode", ")", ":", "\n", "        ", "super", "(", "_VB_ConvNd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'in_channels must be divisible by groups'", ")", "\n", "", "if", "out_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'out_channels must be divisible by groups'", ")", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "transposed", "=", "transposed", "\n", "self", ".", "output_padding", "=", "output_padding", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "padding_mode", "=", "padding_mode", "\n", "\n", "\n", "if", "transposed", ":", "\n", "            ", "self", ".", "weight_mu", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "in_channels", ",", "out_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "self", ".", "weight_mu", ".", "prior_grad", "=", "None", "\n", "self", ".", "weight_rho", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "in_channels", ",", "out_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "self", ".", "weight_rho", ".", "prior_grad", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight_mu", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "out_channels", ",", "in_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "self", ".", "weight_mu", ".", "prior_grad", "=", "None", "\n", "self", ".", "weight_rho", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "out_channels", ",", "in_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "self", ".", "weight_rho", ".", "prior_grad", "=", "None", "\n", "", "if", "bias", ":", "\n", "            ", "self", ".", "bias_mu", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "self", ".", "bias_mu", ".", "prior_grad", "=", "None", "\n", "self", ".", "bias_rho", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "self", ".", "bias_rho", ".", "prior_grad", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias_mu'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias_rho'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_ConvNd.reset_parameters": [[192, 200], ["torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight_mu", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "init", ".", "constant_", "(", "self", ".", "weight_rho", ",", "-", "5", ")", "\n", "if", "self", ".", "bias_mu", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight_mu", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "bias_mu", ",", "-", "bound", ",", "bound", ")", "\n", "init", ".", "constant_", "(", "self", ".", "bias_rho", ",", "-", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_ConvNd.extra_repr": [[201, 217], ["s.format", "len", "len", "len"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "(", "'{in_channels}, {out_channels}, kernel_size={kernel_size}'", "\n", "', stride={stride}'", ")", "\n", "if", "self", ".", "padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "padding", ")", ":", "\n", "            ", "s", "+=", "', padding={padding}'", "\n", "", "if", "self", ".", "dilation", "!=", "(", "1", ",", ")", "*", "len", "(", "self", ".", "dilation", ")", ":", "\n", "            ", "s", "+=", "', dilation={dilation}'", "\n", "", "if", "self", ".", "output_padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "output_padding", ")", ":", "\n", "            ", "s", "+=", "', output_padding={output_padding}'", "\n", "", "if", "self", ".", "groups", "!=", "1", ":", "\n", "            ", "s", "+=", "', groups={groups}'", "\n", "", "if", "self", ".", "bias_mu", "is", "None", ":", "\n", "            ", "s", "+=", "', bias=False'", "\n", "", "if", "self", ".", "padding_mode", "!=", "'zeros'", ":", "\n", "            ", "s", "+=", "', padding_mode={padding_mode}'", "\n", "", "return", "s", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_ConvNd.__setstate__": [[218, 222], ["super().__setstate__", "hasattr"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_ConvNd.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "_VB_ConvNd", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "'padding_mode'", ")", ":", "\n", "            ", "self", ".", "padding_mode", "=", "'zeros'", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net.VB_Conv2d.__init__": [[225, 243], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "vb_net._VB_ConvNd.__init__", "numpy.sqrt", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "padding_mode", "=", "'zeros'", ",", "lambda_n", "=", "0.01", ",", "sigma_0", "=", "0.00001", ",", "sigma_1", "=", "0.01", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "super", "(", "VB_Conv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "False", ",", "_pair", "(", "0", ")", ",", "groups", ",", "bias", ",", "padding_mode", ")", "\n", "\n", "self", ".", "c1", "=", "np", ".", "log", "(", "lambda_n", ")", "-", "np", ".", "log", "(", "1", "-", "lambda_n", ")", "+", "0.5", "*", "np", ".", "log", "(", "sigma_0", ")", "-", "0.5", "*", "np", ".", "log", "(", "sigma_1", ")", "\n", "self", ".", "c2", "=", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", "\n", "self", ".", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "sigma_1", "/", "sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", ")", ")", "\n", "self", ".", "lambda_n", "=", "lambda_n", "\n", "self", ".", "sigma_0", "=", "sigma_0", "\n", "self", ".", "sigma_1", "=", "sigma_1", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net.VB_Conv2d.set_prior": [[244, 252], ["numpy.sqrt", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.sqrt"], "methods", ["None"], ["", "def", "set_prior", "(", "self", ",", "lambda_n", ",", "sigma_0", ",", "sigma_1", ")", ":", "\n", "        ", "self", ".", "c1", "=", "np", ".", "log", "(", "lambda_n", ")", "-", "np", ".", "log", "(", "1", "-", "lambda_n", ")", "+", "0.5", "*", "np", ".", "log", "(", "sigma_0", ")", "-", "0.5", "*", "np", ".", "log", "(", "sigma_1", ")", "\n", "self", ".", "c2", "=", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", "\n", "self", ".", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "sigma_1", "/", "sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", ")", ")", "\n", "self", ".", "lambda_n", "=", "lambda_n", "\n", "self", ".", "sigma_0", "=", "sigma_0", "\n", "self", ".", "sigma_1", "=", "sigma_1", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net.VB_Conv2d.conv2d_forward": [[253, 262], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["None"], ["", "def", "conv2d_forward", "(", "self", ",", "input", ",", "weight", ",", "bias", ")", ":", "\n", "        ", "if", "self", ".", "padding_mode", "==", "'circular'", ":", "\n", "            ", "expanded_padding", "=", "(", "(", "self", ".", "padding", "[", "1", "]", "+", "1", ")", "//", "2", ",", "self", ".", "padding", "[", "1", "]", "//", "2", ",", "\n", "(", "self", ".", "padding", "[", "0", "]", "+", "1", ")", "//", "2", ",", "self", ".", "padding", "[", "0", "]", "//", "2", ")", "\n", "return", "F", ".", "conv2d", "(", "F", ".", "pad", "(", "input", ",", "expanded_padding", ",", "mode", "=", "'circular'", ")", ",", "\n", "weight", ",", "bias", ",", "self", ".", "stride", ",", "\n", "_pair", "(", "0", ")", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "return", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net.VB_Conv2d.forward": [[263, 294], ["vb_net.VB_Conv2d.conv2d_forward", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weight.pow().mul().add().exp().add().pow", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "weight.div().mul", "weight.div().mul", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias.pow().mul().add().exp().add().pow", "weight.pow().mul().add().exp().add", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "bias.div().mul", "bias.div().mul", "weight.div", "weight.div", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "bias.pow().mul().add().exp().add", "weight.pow().mul().add().exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "bias.div", "bias.div", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "bias.pow().mul().add().exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "weight.pow().mul().add", "bias.pow().mul().add", "weight.pow().mul", "bias.pow().mul", "weight.pow", "bias.pow"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net.VB_Conv2d.conv2d_forward"], ["", "def", "forward", "(", "self", ",", "input", ",", "sample", "=", "False", ",", "calculate_log_probs", "=", "False", ")", ":", "\n", "\n", "        ", "if", "self", ".", "training", "or", "sample", ":", "\n", "            ", "weight_sigma", "=", "torch", ".", "log1p", "(", "torch", ".", "exp", "(", "self", ".", "weight_rho", ")", ")", "\n", "weight_epsilon", "=", "torch", ".", "zeros_like", "(", "self", ".", "weight_mu", ")", ".", "normal_", "(", ")", "\n", "weight", "=", "self", ".", "weight_mu", "+", "weight_sigma", "*", "weight_epsilon", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "temp", "=", "weight", ".", "pow", "(", "2", ")", ".", "mul", "(", "self", ".", "c2", ")", ".", "add", "(", "self", ".", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "weight", ".", "div", "(", "-", "self", ".", "sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "weight", ".", "div", "(", "-", "self", ".", "sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "self", ".", "weight_mu", ".", "prior_grad", "=", "-", "temp", "\n", "self", ".", "weight_rho", ".", "prior_grad", "=", "-", "temp", "*", "weight_epsilon", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "self", ".", "weight_rho", ")", ")", "-", "1", "/", "(", "\n", "weight_sigma", ")", "*", "(", "1", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "self", ".", "weight_rho", ")", ")", ")", "\n", "", "if", "self", ".", "bias_mu", "is", "not", "None", ":", "\n", "                ", "bias_sigma", "=", "torch", ".", "log1p", "(", "torch", ".", "exp", "(", "self", ".", "bias_rho", ")", ")", "\n", "bias_epsilon", "=", "torch", ".", "zeros_like", "(", "self", ".", "bias_mu", ")", ".", "normal_", "(", ")", "\n", "bias", "=", "self", ".", "bias_mu", "+", "bias_sigma", "*", "bias_epsilon", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "temp", "=", "bias", ".", "pow", "(", "2", ")", ".", "mul", "(", "self", ".", "c2", ")", ".", "add", "(", "self", ".", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "bias", ".", "div", "(", "-", "self", ".", "sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "bias", ".", "div", "(", "-", "self", ".", "sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "self", ".", "bias_mu", ".", "prior_grad", "=", "-", "temp", "\n", "self", ".", "bias_rho", ".", "prior_grad", "=", "-", "temp", "*", "bias_epsilon", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "self", ".", "bias_rho", ")", ")", "-", "1", "/", "(", "\n", "bias_sigma", ")", "*", "(", "1", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "self", ".", "bias_rho", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "bias", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "weight_mu", "\n", "if", "self", ".", "bias_mu", "is", "not", "None", ":", "\n", "                ", "bias", "=", "self", ".", "bias_mu", "\n", "", "else", ":", "\n", "                ", "bias", "=", "None", "\n", "", "", "return", "self", ".", "conv2d_forward", "(", "input", ",", "weight", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_NormBase.__init__": [[304, 339], ["super().__init__", "vb_net._VB_NormBase.reset_parameters", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "vb_net._VB_NormBase.register_parameter", "vb_net._VB_NormBase.register_parameter", "vb_net._VB_NormBase.register_parameter", "vb_net._VB_NormBase.register_parameter", "vb_net._VB_NormBase.register_buffer", "vb_net._VB_NormBase.register_buffer", "vb_net._VB_NormBase.register_buffer", "vb_net._VB_NormBase.register_parameter", "vb_net._VB_NormBase.register_parameter", "vb_net._VB_NormBase.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_NormBase.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "\n", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "_VB_NormBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "track_running_stats", "=", "track_running_stats", "\n", "\n", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight_mu", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "weight_mu", ".", "prior_grad", "=", "None", "\n", "self", ".", "weight_rho", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "weight_rho", ".", "prior_grad", "=", "None", "\n", "\n", "self", ".", "bias_mu", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "bias_mu", ".", "prior_grad", "=", "None", "\n", "self", ".", "bias_rho", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "bias_rho", ".", "prior_grad", "=", "None", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight_mu'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'weight_rho'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias_mu'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias_rho'", ",", "None", ")", "\n", "", "if", "self", ".", "track_running_stats", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'num_batches_tracked'", ",", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'running_mean'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'running_var'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'num_batches_tracked'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_NormBase.reset_running_stats": [[340, 345], ["vb_net._VB_NormBase.running_mean.zero_", "vb_net._VB_NormBase.running_var.fill_", "vb_net._VB_NormBase.num_batches_tracked.zero_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "track_running_stats", ":", "\n", "            ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "self", ".", "num_batches_tracked", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_NormBase.reset_parameters": [[346, 353], ["vb_net._VB_NormBase.reset_running_stats", "torch.ones_", "torch.ones_", "torch.ones_", "torch.ones_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.zeros_", "torch.zeros_", "torch.zeros_", "torch.zeros_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_NormBase.reset_running_stats"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "init", ".", "ones_", "(", "self", ".", "weight_mu", ")", "\n", "init", ".", "constant_", "(", "self", ".", "weight_rho", ",", "-", "5", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias_mu", ")", "\n", "init", ".", "constant_", "(", "self", ".", "bias_rho", ",", "-", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_NormBase._check_input_dim": [[354, 356], ["None"], "methods", ["None"], ["", "", "def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_NormBase.extra_repr": [[357, 360], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'{num_features}, eps={eps}, momentum={momentum}, affine={affine}, '", "'track_running_stats={track_running_stats}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_NormBase._load_from_state_dict": [[362, 376], ["local_metadata.get", "super()._load_from_state_dict", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_NormBase._load_from_state_dict"], ["", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "version", "=", "local_metadata", ".", "get", "(", "'version'", ",", "None", ")", "\n", "\n", "if", "(", "version", "is", "None", "or", "version", "<", "2", ")", "and", "self", ".", "track_running_stats", ":", "\n", "# at version 2: added num_batches_tracked buffer", "\n", "#               this should have a default value of 0", "\n", "            ", "num_batches_tracked_key", "=", "prefix", "+", "'num_batches_tracked'", "\n", "if", "num_batches_tracked_key", "not", "in", "state_dict", ":", "\n", "                ", "state_dict", "[", "num_batches_tracked_key", "]", "=", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "", "super", "(", "_VB_NormBase", ",", "self", ")", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_BatchNorm.__init__": [[380, 392], ["vb_net._VB_NormBase.__init__", "numpy.sqrt", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "\n", "track_running_stats", "=", "True", ",", "lambda_n", "=", "0.01", ",", "sigma_0", "=", "0.00001", ",", "sigma_1", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "_VB_BatchNorm", ",", "self", ")", ".", "__init__", "(", "\n", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "track_running_stats", ")", "\n", "\n", "self", ".", "c1", "=", "np", ".", "log", "(", "lambda_n", ")", "-", "np", ".", "log", "(", "1", "-", "lambda_n", ")", "+", "0.5", "*", "np", ".", "log", "(", "sigma_0", ")", "-", "0.5", "*", "np", ".", "log", "(", "sigma_1", ")", "\n", "self", ".", "c2", "=", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", "\n", "self", ".", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "sigma_1", "/", "sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", ")", ")", "\n", "self", ".", "lambda_n", "=", "lambda_n", "\n", "self", ".", "sigma_0", "=", "sigma_0", "\n", "self", ".", "sigma_1", "=", "sigma_1", "\n", "", "def", "set_prior", "(", "self", ",", "lambda_n", ",", "sigma_0", ",", "sigma_1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_BatchNorm.set_prior": [[392, 400], ["numpy.sqrt", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.sqrt"], "methods", ["None"], ["", "def", "set_prior", "(", "self", ",", "lambda_n", ",", "sigma_0", ",", "sigma_1", ")", ":", "\n", "        ", "self", ".", "c1", "=", "np", ".", "log", "(", "lambda_n", ")", "-", "np", ".", "log", "(", "1", "-", "lambda_n", ")", "+", "0.5", "*", "np", ".", "log", "(", "sigma_0", ")", "-", "0.5", "*", "np", ".", "log", "(", "sigma_1", ")", "\n", "self", ".", "c2", "=", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", "\n", "self", ".", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "sigma_1", "/", "sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "sigma_0", "-", "0.5", "/", "sigma_1", ")", ")", "\n", "self", ".", "lambda_n", "=", "lambda_n", "\n", "self", ".", "sigma_0", "=", "sigma_0", "\n", "self", ".", "sigma_1", "=", "sigma_1", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "sample", "=", "False", ",", "calculate_log_probs", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net._VB_BatchNorm.forward": [[400, 460], ["vb_net._VB_BatchNorm._check_input_dim", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.zeros_like().normal_", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weight.pow().mul().add().exp().add().pow", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias.pow().mul().add().exp().add().pow", "float", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "weight.div().mul", "weight.div().mul", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "bias.div().mul", "bias.div().mul", "weight.pow().mul().add().exp().add", "bias.pow().mul().add().exp().add", "weight.div", "weight.div", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "bias.div", "bias.div", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "weight.pow().mul().add().exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "bias.pow().mul().add().exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "weight.pow().mul().add", "bias.pow().mul().add", "weight.pow().mul", "bias.pow().mul", "weight.pow", "bias.pow"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net.VB_BatchNorm1d._check_input_dim"], ["", "def", "forward", "(", "self", ",", "input", ",", "sample", "=", "False", ",", "calculate_log_probs", "=", "False", ")", ":", "\n", "        ", "self", ".", "_check_input_dim", "(", "input", ")", "\n", "\n", "# exponential_average_factor is set to self.momentum", "\n", "# (when it is available) only so that if gets updated", "\n", "# in ONNX graph when this node is exported to ONNX.", "\n", "if", "self", ".", "momentum", "is", "None", ":", "\n", "            ", "exponential_average_factor", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "exponential_average_factor", "=", "self", ".", "momentum", "\n", "\n", "", "if", "self", ".", "training", "and", "self", ".", "track_running_stats", ":", "\n", "# TODO: if statement only here to tell the jit to skip emitting this when it is None", "\n", "            ", "if", "self", ".", "num_batches_tracked", "is", "not", "None", ":", "\n", "                ", "self", ".", "num_batches_tracked", "=", "self", ".", "num_batches_tracked", "+", "1", "\n", "if", "self", ".", "momentum", "is", "None", ":", "# use cumulative moving average", "\n", "                    ", "exponential_average_factor", "=", "1.0", "/", "float", "(", "self", ".", "num_batches_tracked", ")", "\n", "", "else", ":", "# use exponential moving average", "\n", "                    ", "exponential_average_factor", "=", "self", ".", "momentum", "\n", "\n", "", "", "", "if", "self", ".", "affine", ":", "\n", "# return F.batch_norm(", "\n", "# input, self.running_mean, self.running_var, self.weight.mul(self.weight_mask), self.bias.mul(self.bias_mask),", "\n", "# self.training or not self.track_running_stats,", "\n", "# exponential_average_factor, self.eps)", "\n", "\n", "            ", "if", "self", ".", "training", "or", "sample", ":", "\n", "                ", "weight_sigma", "=", "torch", ".", "log1p", "(", "torch", ".", "exp", "(", "self", ".", "weight_rho", ")", ")", "\n", "weight_epsilon", "=", "torch", ".", "zeros_like", "(", "self", ".", "weight_mu", ")", ".", "normal_", "(", ")", "\n", "weight", "=", "self", ".", "weight_mu", "+", "weight_sigma", "*", "weight_epsilon", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "temp", "=", "weight", ".", "pow", "(", "2", ")", ".", "mul", "(", "self", ".", "c2", ")", ".", "add", "(", "self", ".", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "weight", ".", "div", "(", "-", "self", ".", "sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "weight", ".", "div", "(", "-", "self", ".", "sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "self", ".", "weight_mu", ".", "prior_grad", "=", "-", "temp", "\n", "self", ".", "weight_rho", ".", "prior_grad", "=", "-", "temp", "*", "weight_epsilon", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "self", ".", "weight_rho", ")", ")", "-", "1", "/", "(", "\n", "weight_sigma", ")", "*", "(", "1", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "self", ".", "weight_rho", ")", ")", ")", "\n", "", "bias_sigma", "=", "torch", ".", "log1p", "(", "torch", ".", "exp", "(", "self", ".", "bias_rho", ")", ")", "\n", "bias_epsilon", "=", "torch", ".", "zeros_like", "(", "self", ".", "bias_mu", ")", ".", "normal_", "(", ")", "\n", "bias", "=", "self", ".", "bias_mu", "+", "bias_sigma", "*", "bias_epsilon", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "temp", "=", "bias", ".", "pow", "(", "2", ")", ".", "mul", "(", "self", ".", "c2", ")", ".", "add", "(", "self", ".", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "bias", ".", "div", "(", "-", "self", ".", "sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "bias", ".", "div", "(", "-", "self", ".", "sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "self", ".", "bias_mu", ".", "prior_grad", "=", "-", "temp", "\n", "self", ".", "bias_rho", ".", "prior_grad", "=", "-", "temp", "*", "bias_epsilon", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "self", ".", "bias_rho", ")", ")", "-", "1", "/", "(", "\n", "bias_sigma", ")", "*", "(", "1", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "self", ".", "bias_rho", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "weight", "=", "self", ".", "weight_mu", "\n", "bias", "=", "self", ".", "bias_mu", "\n", "\n", "", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "weight", ",", "bias", ",", "\n", "self", ".", "training", "or", "not", "self", ".", "track_running_stats", ",", "\n", "exponential_average_factor", ",", "self", ".", "eps", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "None", "\n", "bias", "=", "None", "\n", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "weight", ",", "bias", ",", "\n", "self", ".", "training", "or", "not", "self", ".", "track_running_stats", ",", "\n", "exponential_average_factor", ",", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net.VB_BatchNorm2d._check_input_dim": [[462, 466], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["    ", "def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.vb_net.VB_BatchNorm1d._check_input_dim": [[468, 472], ["ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["None"], ["    ", "def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.BasicBlock.__init__": [[26, 35], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.conv3x3", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.BasicBlock.forward": [[36, 53], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.Bottleneck.__init__": [[58, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.Bottleneck.forward": [[71, 92], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet.__init__": [[96, 122], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet_sparse._make_layer", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet_sparse._make_layer", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet_sparse._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Model type specifies number of layers for CIFAR-10 model", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be 6n+2'", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "\n", "block", "=", "Bottleneck", "if", "depth", ">=", "44", "else", "BasicBlock", "\n", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet._make_layer": [[123, 139], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet.forward": [[140, 154], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "# 32x32", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# 32x32", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "# 16x16", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 8x8", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet_sparse.__init__": [[160, 188], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.ResNet_sparse._make_layer", "resnet.ResNet_sparse._make_layer", "resnet.ResNet_sparse._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet_sparse.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet_sparse._make_layer", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet_sparse._make_layer", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet_sparse._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNet_sparse", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Model type specifies number of layers for CIFAR-10 model", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be 6n+2'", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "\n", "block", "=", "Bottleneck", "if", "depth", ">=", "44", "else", "BasicBlock", "\n", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "prune_flag", "=", "0", "\n", "self", ".", "mask", "=", "None", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet_sparse._make_layer": [[189, 205], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet_sparse.forward": [[206, 224], ["resnet.ResNet_sparse.conv1", "resnet.ResNet_sparse.bn1", "resnet.ResNet_sparse.relu", "resnet.ResNet_sparse.layer1", "resnet.ResNet_sparse.layer2", "resnet.ResNet_sparse.layer3", "resnet.ResNet_sparse.avgpool", "resnet.ResNet_sparse.view", "resnet.ResNet_sparse.fc", "resnet.ResNet_sparse.named_parameters", "resnet.ResNet_sparse.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "prune_flag", "==", "1", ":", "\n", "            ", "for", "name", ",", "para", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "para", ".", "data", "[", "self", ".", "mask", "[", "name", "]", "]", "=", "0", "\n", "\n", "", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "# 32x32", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# 32x32", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "# 16x16", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 8x8", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet_sparse.set_prune": [[225, 228], ["None"], "methods", ["None"], ["", "def", "set_prune", "(", "self", ",", "user_mask", ")", ":", "\n", "        ", "self", ".", "mask", "=", "user_mask", "\n", "self", ".", "prune_flag", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.ResNet_sparse.cancel_prune": [[229, 232], ["None"], "methods", ["None"], ["", "def", "cancel_prune", "(", "self", ")", ":", "\n", "        ", "self", ".", "prune_flag", "=", "0", "\n", "self", ".", "mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.Lenet5_sparse.__init__": [[236, 244], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Lenet5_sparse", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "20", ",", "5", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "20", ",", "50", ",", "5", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "4", "*", "4", "*", "50", ",", "500", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "500", ",", "10", ")", "\n", "self", ".", "prune_flag", "=", "0", "\n", "self", ".", "mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.Lenet5_sparse.forward": [[245, 258], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "resnet.Lenet5_sparse.view", "torch.relu", "torch.relu", "resnet.Lenet5_sparse.fc2", "resnet.Lenet5_sparse.named_parameters", "resnet.Lenet5_sparse.conv1", "resnet.Lenet5_sparse.conv2", "resnet.Lenet5_sparse.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "prune_flag", "==", "1", ":", "\n", "            ", "for", "name", ",", "para", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "para", ".", "data", "[", "self", ".", "mask", "[", "name", "]", "]", "=", "0", "\n", "\n", "", "", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "4", "*", "4", "*", "50", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.Lenet5_sparse.set_prune": [[260, 263], ["None"], "methods", ["None"], ["", "def", "set_prune", "(", "self", ",", "user_mask", ")", ":", "\n", "        ", "self", ".", "mask", "=", "user_mask", "\n", "self", ".", "prune_flag", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.Lenet5_sparse.cancel_prune": [[264, 267], ["None"], "methods", ["None"], ["", "def", "cancel_prune", "(", "self", ")", ":", "\n", "        ", "self", ".", "prune_flag", "=", "0", "\n", "self", ".", "mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.conv3x3": [[17, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.resnet": [[270, 275], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ResNet model.\n    \"\"\"", "\n", "return", "ResNet", "(", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.process_data.preprocess_data": [[8, 68], ["torch.device", "print", "numpy.matrix", "numpy.matrix", "range", "numpy.mat", "numpy.mat", "range", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.cuda.is_available", "numpy.zeros", "numpy.zeros", "range", "numpy.zeros", "numpy.zeros", "range", "print", "numpy.sqrt", "numpy.random.normal", "numpy.random.normal", "numpy.sqrt", "numpy.random.normal", "numpy.random.normal", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.sqrt", "numpy.random.normal", "numpy.sqrt", "numpy.random.normal", "numpy.sqrt", "numpy.sqrt", "numpy.random.normal", "numpy.sqrt", "numpy.random.normal", "numpy.sqrt", "numpy.sqrt", "numpy.random.normal", "numpy.sqrt", "numpy.random.normal", "numpy.sin", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["def", "preprocess_data", "(", "data_name", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "if", "data_name", "==", "'Simulation'", ":", "\n", "        ", "a", "=", "1", "\n", "b", "=", "1", "\n", "TotalP", "=", "2000", "\n", "print", "(", "'p = '", ",", "TotalP", ")", "\n", "NTrain", "=", "10000", "\n", "x_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "TotalP", "]", ")", ")", "\n", "y_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "1", "]", ")", ")", "\n", "\n", "sigma", "=", "1.0", "\n", "for", "i", "in", "range", "(", "NTrain", ")", ":", "\n", "            ", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "\"x_train generate = \"", ",", "i", ")", "\n", "", "ee", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "while", "ee", ">", "10", "or", "ee", "<", "-", "10", ":", "\n", "                ", "ee", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "", "for", "j", "in", "range", "(", "TotalP", ")", ":", "\n", "                ", "zj", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "while", "zj", ">", "10", "or", "zj", "<", "-", "10", ":", "\n", "                    ", "zj", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "", "x_train", "[", "i", ",", "j", "]", "=", "(", "a", "*", "ee", "+", "b", "*", "zj", ")", "/", "np", ".", "sqrt", "(", "a", "*", "a", "+", "b", "*", "b", ")", "\n", "", "x0", "=", "x_train", "[", "i", ",", "0", "]", "\n", "x1", "=", "x_train", "[", "i", ",", "1", "]", "\n", "x2", "=", "x_train", "[", "i", ",", "2", "]", "\n", "x3", "=", "x_train", "[", "i", ",", "3", "]", "\n", "x4", "=", "x_train", "[", "i", ",", "4", "]", "\n", "\n", "y_train", "[", "i", ",", "0", "]", "=", "5", "*", "x1", "/", "(", "1", "+", "x0", "*", "x0", ")", "+", "5", "*", "np", ".", "sin", "(", "x2", "*", "x3", ")", "+", "2", "*", "x4", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "\n", "\n", "", "NTest", "=", "1000", "\n", "x_test", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "TotalP", "]", ")", ")", "\n", "y_test", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "1", "]", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "NTest", ")", ":", "\n", "            ", "ee", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "while", "ee", ">", "10", "or", "ee", "<", "-", "10", ":", "\n", "                ", "ee", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "", "for", "j", "in", "range", "(", "TotalP", ")", ":", "\n", "                ", "zj", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "while", "zj", ">", "10", "or", "zj", "<", "-", "10", ":", "\n", "                    ", "zj", "=", "np", ".", "sqrt", "(", "sigma", ")", "*", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "", "x_test", "[", "i", ",", "j", "]", "=", "(", "a", "*", "ee", "+", "b", "*", "zj", ")", "/", "np", ".", "sqrt", "(", "a", "*", "a", "+", "b", "*", "b", ")", "\n", "", "x0", "=", "x_test", "[", "i", ",", "0", "]", "\n", "x1", "=", "x_test", "[", "i", ",", "1", "]", "\n", "x2", "=", "x_test", "[", "i", ",", "2", "]", "\n", "x3", "=", "x_test", "[", "i", ",", "3", "]", "\n", "x4", "=", "x_test", "[", "i", ",", "4", "]", "\n", "\n", "y_test", "[", "i", ",", "0", "]", "=", "5", "*", "x1", "/", "(", "1", "+", "x0", "*", "x0", ")", "+", "5", "*", "np", ".", "sin", "(", "x2", "*", "x3", ")", "+", "2", "*", "x4", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "\n", "", "x_train", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "device", ")", "\n", "y_train", "=", "torch", ".", "FloatTensor", "(", "y_train", ")", ".", "to", "(", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "device", ")", "\n", "y_test", "=", "torch", ".", "FloatTensor", "(", "y_test", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "", "return", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Regression.my_Net_tanh.__init__": [[22, 37], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Regression.my_Net_tanh.gamma.append", "Spinn_Regression.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Regression.my_Net_tanh.gamma.append", "Spinn_Regression.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Regression.my_Net_tanh.gamma.append", "Spinn_Regression.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Regression.my_Net_tanh.gamma.append", "Spinn_Regression.my_Net_tanh.gamma.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "my_Net_tanh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "[", "]", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2000", ",", "6", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "1", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Regression.my_Net_tanh.to": [[38, 43], ["super().to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "range", "Spinn_Regression.my_Net_tanh.gamma.__len__", "Spinn_Regression.my_Net_tanh.gamma[].to"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "my_Net_tanh", ",", "self", ")", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "gamma", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "index", "]", "=", "self", ".", "gamma", "[", "index", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Regression.my_Net_tanh.forward": [[44, 52], ["enumerate", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "Spinn_Regression.my_Net_tanh.fc4", "Spinn_Regression.my_Net_tanh.parameters", "para.data.mul_", "Spinn_Regression.my_Net_tanh.fc1", "Spinn_Regression.my_Net_tanh.fc2", "Spinn_Regression.my_Net_tanh.fc3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "para", ".", "data", ".", "mul_", "(", "self", ".", "gamma", "[", "i", "]", ")", "\n", "", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Regression.my_Net_tanh.mask": [[53, 60], ["enumerate", "enumerate", "Spinn_Regression.my_Net_tanh.parameters", "Spinn_Regression.my_Net_tanh.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "mask", "(", "self", ",", "user_gamma", ",", "device", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "gamma", "[", "i", "]", ".", "shape", "!=", "user_gamma", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'size doesn\\'t match'", ")", "\n", "return", "0", "\n", "", "", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "i", "]", ".", "data", "=", "torch", ".", "tensor", "(", "user_gamma", "[", "i", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Regression.my_Net_relu.__init__": [[62, 77], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Regression.my_Net_relu.gamma.append", "Spinn_Regression.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Regression.my_Net_relu.gamma.append", "Spinn_Regression.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Regression.my_Net_relu.gamma.append", "Spinn_Regression.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "Spinn_Regression.my_Net_relu.gamma.append", "Spinn_Regression.my_Net_relu.gamma.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "my_Net_relu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "[", "]", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2000", ",", "6", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "1", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Regression.my_Net_relu.to": [[78, 83], ["super().to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "range", "Spinn_Regression.my_Net_relu.gamma.__len__", "Spinn_Regression.my_Net_relu.gamma[].to"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "my_Net_relu", ",", "self", ")", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "gamma", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "index", "]", "=", "self", ".", "gamma", "[", "index", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Regression.my_Net_relu.forward": [[84, 92], ["enumerate", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "Spinn_Regression.my_Net_relu.fc4", "Spinn_Regression.my_Net_relu.parameters", "para.data.mul_", "Spinn_Regression.my_Net_relu.fc1", "Spinn_Regression.my_Net_relu.fc2", "Spinn_Regression.my_Net_relu.fc3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "para", ".", "data", ".", "mul_", "(", "self", ".", "gamma", "[", "i", "]", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Regression.my_Net_relu.mask": [[93, 100], ["enumerate", "enumerate", "Spinn_Regression.my_Net_relu.parameters", "Spinn_Regression.my_Net_relu.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "mask", "(", "self", ",", "user_gamma", ",", "device", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "gamma", "[", "i", "]", ".", "shape", "!=", "user_gamma", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'size doesn\\'t match'", ")", "\n", "return", "0", "\n", "", "", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "i", "]", ".", "data", "=", "torch", ".", "tensor", "(", "user_gamma", "[", "i", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Spinn_Regression.main": [[103, 388], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.array", "torch.device", "torch.device", "torch.device", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "Spinn_Regression.my_Net_relu.to", "torch.MSELoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "my_Net_relu.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.sum", "numpy.sum", "range", "Spinn_Regression.my_Net_relu.mask", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "Spinn_Regression.my_Net_tanh", "my_Net_relu.parameters", "os.path.isdir", "para_path_group_lasso.append", "para_gamma_path_group_lasso.append", "my_Net_relu.zero_grad", "my_Net_relu.", "nn.MSELoss.", "enumerate", "object.backward", "torch.optim.SGD.step", "para_gamma_path_group_lasso.__len__", "user_gamma.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "para_path_fine_tune_group_lasso.append", "para_gamma_path_fine_tune_group_lasso.append", "my_Net_relu.zero_grad", "my_Net_relu.", "nn.MSELoss.", "enumerate", "object.backward", "torch.optim.SGD.step", "str", "Spinn_Regression.my_Net_relu", "print", "exit", "os.makedirs", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "my_Net_relu.parameters", "print", "print", "str", "numpy.max", "my_Net_relu.parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "my_Net_relu.parameters", "print", "str", "str", "str", "str", "str", "str", "str", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "enumerate", "print", "print", "numpy.max", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.MSELoss.", "print", "loss_func.cpu().data.numpy", "enumerate", "print", "print", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "os.path.isdir", "list", "list", "para.abs().sum().mul", "para.pow().sum().mul", "my_Net_relu.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "list", "list", "para.abs().sum().mul", "para.pow().sum().mul", "my_Net_relu.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "para.abs().sum", "para.pow().sum", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "para.abs().sum", "para.pow().sum", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "para.cpu", "numpy.max", "para.cpu", "numpy.max", "para.abs", "para.pow", "para.abs", "para.pow", "para.abs", "para.abs"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.mask", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "my_seed", "=", "args", ".", "data_index", "\n", "subn", "=", "500", "\n", "np", ".", "random", ".", "seed", "(", "my_seed", ")", "\n", "torch", ".", "manual_seed", "(", "my_seed", ")", "\n", "\n", "NTrain", "=", "10000", "\n", "Nval", "=", "1000", "\n", "NTest", "=", "1000", "\n", "TotalP", "=", "2000", "\n", "\n", "x_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "TotalP", "]", ")", ")", "\n", "y_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "1", "]", ")", ")", "\n", "\n", "x_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "TotalP", "]", ")", ")", "\n", "y_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "1", "]", ")", ")", "\n", "\n", "x_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "TotalP", "]", ")", ")", "\n", "y_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "1", "]", ")", ")", "\n", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_train.csv\"", ")", ")", "\n", "x_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_train.csv\"", ")", ")", "\n", "y_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_val.csv\"", ")", ")", "\n", "x_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_val.csv\"", ")", ")", "\n", "y_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "my_seed", ")", "+", "\"/x_test.csv\"", ")", ")", "\n", "x_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/regression/\"", "+", "str", "(", "my_seed", ")", "+", "\"/y_test.csv\"", ")", ")", "\n", "y_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "\n", "lambda_vec", "=", "np", ".", "array", "(", "[", "0.15", ",", "0.14", ",", "0.13", ",", "0.12", ",", "0.11", ",", "0.1", ",", "0.09", ",", "0.08", ",", "0.07", ",", "0.06", ",", "0.05", ",", "0.04", ",", "0.03", ",", "0.02", ",", "0.01", "]", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "x_train", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "device", ")", "\n", "y_train", "=", "torch", ".", "FloatTensor", "(", "y_train", ")", ".", "to", "(", "device", ")", "\n", "x_val", "=", "torch", ".", "FloatTensor", "(", "x_val", ")", ".", "to", "(", "device", ")", "\n", "y_val", "=", "torch", ".", "FloatTensor", "(", "y_val", ")", ".", "to", "(", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "device", ")", "\n", "y_test", "=", "torch", ".", "FloatTensor", "(", "y_test", ")", ".", "to", "(", "device", ")", "\n", "\n", "threshold", "=", "0.01", "\n", "\n", "num_selection_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "num_selection_true_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "train_loss_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "val_loss_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "test_loss_list_group_lasso", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "train_loss_list_group_lasso_fine_tune", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "val_loss_list_group_lasso_fine_tune", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "test_loss_list_group_lasso_fine_tune", "=", "np", ".", "zeros", "(", "[", "lambda_vec", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "for", "hyper_index", "in", "range", "(", "lambda_vec", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "my_seed", "-", "1", ")", "\n", "torch", ".", "manual_seed", "(", "my_seed", "-", "1", ")", "\n", "lambda_1", "=", "lambda_vec", "[", "hyper_index", "]", "\n", "\n", "if", "args", ".", "activation", "==", "'tanh'", ":", "\n", "            ", "net", "=", "my_Net_tanh", "(", ")", "\n", "", "elif", "args", ".", "activation", "==", "'relu'", ":", "\n", "            ", "net", "=", "my_Net_relu", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'unrecognized activation function'", ")", "\n", "exit", "(", "0", ")", "\n", "", "net", ".", "to", "(", "device", ")", "\n", "loss_func", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "step_lr", "=", "0.005", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ")", "\n", "\n", "alpha", "=", "0", "\n", "\n", "lambda_2", "=", "0.0001", "\n", "\n", "max_loop", "=", "80001", "\n", "PATH", "=", "'./result/regression/'", "+", "args", ".", "activation", "+", "'/Spinn/'", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "                ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "raise", "\n", "\n", "", "", "", "show_information", "=", "100", "\n", "\n", "para_path_group_lasso", "=", "[", "]", "\n", "para_gamma_path_group_lasso", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path_group_lasso", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path_group_lasso", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path_group_lasso", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path_group_lasso", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path_group_lasso", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "for", "iter", "in", "range", "(", "max_loop", ")", ":", "\n", "            ", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "\n", "penalty", "=", "0", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "penalty", "=", "penalty", "+", "para", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "mul", "(", "(", "1", "-", "alpha", ")", "*", "lambda_1", ")", "\n", "", "else", ":", "\n", "                    ", "penalty", "=", "penalty", "+", "para", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "mul", "(", "lambda_2", ")", "\n", "\n", "", "", "object", "=", "loss", "+", "penalty", "\n", "object", ".", "backward", "(", ")", "\n", "optimization", ".", "step", "(", ")", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "print", "(", "'lambda1:'", ",", "lambda_1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ")", "\n", "val_loss_path_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path_group_lasso", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path_group_lasso", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "(", "\n", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "\n", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_group_lasso", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path_group_lasso", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "5", "]", ")", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'simu_'", "+", "str", "(", "my_seed", ")", "+", "'_group_lasso_'", "+", "str", "(", "lambda_1", ")", "+", "'.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "\n", "[", "para_path_group_lasso", ",", "para_gamma_path_group_lasso", ",", "train_loss_path_group_lasso", ",", "val_loss_path_group_lasso", ",", "\n", "test_loss_path_group_lasso", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "num_selection_list_group_lasso", "[", "hyper_index", "]", "=", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_group_lasso", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "\n", "num_selection_true_list_group_lasso", "[", "hyper_index", "]", "=", "np", ".", "sum", "(", "\n", "(", "np", ".", "max", "(", "para_gamma_path_group_lasso", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "5", "]", ")", "\n", "\n", "user_gamma", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "para_gamma_path_group_lasso", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "user_gamma", ".", "append", "(", "para_gamma_path_group_lasso", "[", "index", "]", "[", "-", "1", ",", "]", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "para", ".", "data", "=", "torch", ".", "FloatTensor", "(", "para_path_group_lasso", "[", "i", "]", "[", "-", "1", ",", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "net", ".", "mask", "(", "user_gamma", ",", "device", ")", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"Train Loss:\"", ",", "loss", ")", "\n", "train_loss_list_group_lasso", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"Val Loss:\"", ",", "loss", ")", "\n", "val_loss_list_group_lasso", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"Test Loss:\"", ",", "loss", ")", "\n", "test_loss_list_group_lasso", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "fine_tune_loop", "=", "40001", "\n", "para_path_fine_tune_group_lasso", "=", "[", "]", "\n", "para_gamma_path_fine_tune_group_lasso", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path_fine_tune_group_lasso", ".", "append", "(", "\n", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path_fine_tune_group_lasso", ".", "append", "(", "\n", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path_fine_tune_group_lasso", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path_fine_tune_group_lasso", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path_fine_tune_group_lasso", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "lambda_1", "=", "lambda_2", "\n", "\n", "for", "iter", "in", "range", "(", "fine_tune_loop", ")", ":", "\n", "            ", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "\n", "penalty", "=", "0", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "penalty", "=", "penalty", "+", "para", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "mul", "(", "(", "1", "-", "alpha", ")", "*", "lambda_1", ")", "\n", "", "else", ":", "\n", "                    ", "penalty", "=", "penalty", "+", "para", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "mul", "(", "lambda_2", ")", "\n", "\n", "", "", "object", "=", "loss", "+", "penalty", "\n", "object", ".", "backward", "(", ")", "\n", "optimization", ".", "step", "(", ")", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ")", "\n", "train_loss_path_fine_tune_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ")", "\n", "val_loss_path_fine_tune_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ")", "\n", "test_loss_path_fine_tune_group_lasso", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path_fine_tune_group_lasso", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path_fine_tune_group_lasso", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "(", "\n", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "\n", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune_group_lasso", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune_group_lasso", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "\n", "0", ":", "5", "]", ")", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'simu_'", "+", "str", "(", "my_seed", ")", "+", "'_group_lasso_fine_tune_'", "+", "str", "(", "hyper_index", ")", "+", "'.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path_fine_tune_group_lasso", ",", "para_gamma_path_fine_tune_group_lasso", ",", "\n", "train_loss_path_fine_tune_group_lasso", ",", "val_loss_path_fine_tune_group_lasso", ",", "\n", "test_loss_path_fine_tune_group_lasso", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "print", "(", "\"Train Loss:\"", ",", "loss", ")", "\n", "train_loss_list_group_lasso_fine_tune", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "print", "(", "\"Val Loss:\"", ",", "loss", ")", "\n", "val_loss_list_group_lasso_fine_tune", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "print", "(", "\"Test Loss:\"", ",", "loss", ")", "\n", "test_loss_list_group_lasso_fine_tune", "[", "hyper_index", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'simu_'", "+", "str", "(", "my_seed", ")", "+", "'_group_lasso_result.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "num_selection_list_group_lasso", ",", "num_selection_true_list_group_lasso", ",", "train_loss_list_group_lasso", ",", "\n", "val_loss_list_group_lasso", ",", "\n", "test_loss_list_group_lasso", ",", "train_loss_list_group_lasso_fine_tune", ",", "val_loss_list_group_lasso_fine_tune", ",", "\n", "test_loss_list_group_lasso_fine_tune", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.cifar_run.model_eval": [[63, 78], ["net.eval", "enumerate", "net", "loss_func", "prediction.eq().sum().item", "loss_func.mul().item", "images.to", "labels.to", "net.data.max", "prediction.eq().sum", "loss_func.mul", "prediction.eq"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["def", "model_eval", "(", "net", ",", "data_loader", ",", "device", ",", "loss_func", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "total_loss", "=", "0", "\n", "total_count", "=", "0", "\n", "for", "cnt", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "outputs", "=", "net", "(", "images", ")", "\n", "loss", "=", "loss_func", "(", "outputs", ",", "labels", ")", "\n", "prediction", "=", "outputs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "+=", "prediction", ".", "eq", "(", "labels", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total_loss", "+=", "loss", ".", "mul", "(", "images", ".", "shape", "[", "0", "]", ")", ".", "item", "(", ")", "\n", "total_count", "+=", "images", ".", "shape", "[", "0", "]", "\n", "\n", "", "return", "1.0", "*", "correct", "/", "total_count", ",", "total_loss", "/", "total_count", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.cifar_run.main": [[79, 323], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "transforms.Normalize", "transforms.Compose", "transforms.Compose", "torchvision.CIFAR10", "torchvision.CIFAR10", "numpy.random.seed", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.device", "torch.device", "torch.device", "torch.device", "torch.CrossEntropyLoss().to", "resnet.ResNet_sparse().to", "numpy.sqrt", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "len", "range", "open", "pickle.dump", "open.close", "resnet.ResNet_sparse().to.load_state_dict", "cifar_run.model_eval", "print", "numpy.sqrt", "resnet.ResNet_sparse().to.named_parameters", "resnet.ResNet_sparse().to.set_prune", "cifar_run.model_eval", "print", "resnet.ResNet_sparse().to.named_parameters", "print", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "len", "range", "open", "pickle.dump", "open.close", "resnet.ResNet_sparse().to.parameters", "os.path.isdir", "resnet.ResNet_sparse().to.train", "enumerate", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.load", "torch.load", "torch.load", "torch.load", "para.numel", "os.path.isdir", "resnet.ResNet_sparse().to.parameters", "resnet.ResNet_sparse().to.train", "enumerate", "print", "torch.save", "torch.save", "torch.save", "torch.save", "transforms.RandomCrop", "transforms.RandomHorizontalFlip", "transforms.ToTensor", "transforms.RandomErasing", "transforms.ToTensor", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.CrossEntropyLoss", "resnet.ResNet_sparse", "numpy.log", "numpy.log", "os.makedirs", "resnet.ResNet_sparse().to.", "nn.CrossEntropyLoss().to.", "torch.optim.SGD.zero_grad", "loss_func.backward", "torch.optim.SGD.step", "loss_func.mul().item", "net.data.argmax().eq().sum().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cifar_run.model_eval", "print", "resnet.ResNet_sparse().to.named_parameters", "print", "print", "resnet.ResNet_sparse().to.state_dict", "numpy.log", "para.abs", "non_zero_element.item", "os.makedirs", "resnet.ResNet_sparse().to.", "nn.CrossEntropyLoss().to.", "torch.optim.SGD.zero_grad", "loss_func.backward", "torch.optim.SGD.step", "loss_func.mul().item", "net.data.argmax().eq().sum().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cifar_run.model_eval", "print", "resnet.ResNet_sparse().to.named_parameters", "print", "print", "resnet.ResNet_sparse().to.state_dict", "numpy.log", "numpy.log", "numpy.log", "input.to", "target.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "resnet.ResNet_sparse().to.parameters", "para.numel", "non_zero_element.item", "torch.save", "torch.save", "torch.save", "torch.save", "input.to", "target.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "resnet.ResNet_sparse().to.parameters", "para.numel", "non_zero_element.item", "torch.save", "torch.save", "torch.save", "torch.save", "numpy.sqrt", "os.path.isdir", "para.pow().mul().add().exp().add().pow", "para.pow().mul().add().exp().add().pow.div", "loss_func.mul", "net.data.argmax().eq().sum", "non_zero_element.item", "resnet.ResNet_sparse().to.state_dict", "str", "str", "numpy.sqrt", "os.path.isdir", "para.pow().mul().add().exp().add().pow", "para.pow().mul().add().exp().add().pow.div", "loss_func.mul", "net.data.argmax().eq().sum", "non_zero_element.item", "resnet.ResNet_sparse().to.state_dict", "str", "para.div().mul", "para.div().mul", "para.div().mul", "para.div().mul", "para.pow().mul().add().exp().add", "net.data.argmax().eq", "para.abs", "para.pow().mul().add().exp().add", "net.data.argmax().eq", "para.abs", "para.div", "para.div", "para.div", "para.div", "para.pow().mul().add().exp", "net.data.argmax", "para.pow().mul().add().exp", "net.data.argmax", "para.pow().mul().add", "para.pow().mul().add", "para.pow().mul", "para.pow().mul", "para.pow", "para.pow"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.cifar_run.model_eval", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.resnet.Lenet5_sparse.set_prune", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.cifar_run.model_eval", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.cifar_run.model_eval", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.cifar_run.model_eval", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "main", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2470", ",", "0.2435", ",", "0.2616", "]", ")", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "transforms", ".", "RandomErasing", "(", "probability", "=", "0.5", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "\n", "train_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "test_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "batch_train", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "args", ".", "batch_test", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "net", "=", "resnet", ".", "ResNet_sparse", "(", "args", ".", "depth", ",", "10", ")", ".", "to", "(", "device", ")", "\n", "\n", "lambda_n", "=", "args", ".", "lambdan", "\n", "prior_sigma_0", "=", "args", ".", "sigma0", "\n", "prior_sigma_1", "=", "args", ".", "sigma1", "\n", "\n", "c1", "=", "np", ".", "log", "(", "lambda_n", ")", "-", "np", ".", "log", "(", "1", "-", "lambda_n", ")", "+", "0.5", "*", "np", ".", "log", "(", "prior_sigma_0", ")", "-", "0.5", "*", "np", ".", "log", "(", "prior_sigma_1", ")", "\n", "c2", "=", "0.5", "/", "prior_sigma_0", "-", "0.5", "/", "prior_sigma_1", "\n", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "prior_sigma_1", "/", "prior_sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "prior_sigma_0", "-", "0.5", "/", "prior_sigma_1", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "init_lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "0", ")", "\n", "\n", "\n", "a", "=", "1", "\n", "PATH", "=", "args", ".", "base_path", "+", "args", ".", "model_path", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "            ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "num_epochs", "=", "args", ".", "nepoch", "\n", "train_accuracy_path", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "train_loss_path", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "\n", "test_accuracy_path", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "test_loss_path", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "sparsity_path", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "NTrain", "=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "best_accuracy", "=", "0", "\n", "best_valid_accuracy", "=", "0", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "epoch_training_loss", "=", "0.0", "\n", "total_count", "=", "0", "\n", "accuracy", "=", "0", "\n", "\n", "if", "epoch", "in", "args", ".", "lr_decay_time", ":", "\n", "            ", "for", "para", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "para", "[", "'lr'", "]", "=", "para", "[", "'lr'", "]", "/", "10", "\n", "\n", "", "", "if", "epoch", "<", "args", ".", "lr_decay_time", "[", "0", "]", ":", "\n", "            ", "prior_sigma_0", "=", "args", ".", "sigma1", "\n", "", "else", ":", "\n", "            ", "prior_sigma_0", "=", "args", ".", "sigma0", "\n", "", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "input", ",", "target", "=", "input", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "net", "(", "input", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "target", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# prior gradient", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "temp", "=", "para", ".", "pow", "(", "2", ")", ".", "mul", "(", "c2", ")", ".", "add", "(", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "para", ".", "div", "(", "-", "prior_sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "para", ".", "div", "(", "-", "prior_sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "prior_grad", "=", "temp", ".", "div", "(", "NTrain", ")", "\n", "para", ".", "grad", ".", "data", "-=", "prior_grad", "\n", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "epoch_training_loss", "+=", "loss", ".", "mul", "(", "input", ".", "shape", "[", "0", "]", ")", ".", "item", "(", ")", "\n", "accuracy", "+=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "target", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total_count", "+=", "input", ".", "shape", "[", "0", "]", "\n", "train_loss_path", "[", "epoch", "]", "=", "epoch_training_loss", "/", "total_count", "\n", "train_accuracy_path", "[", "epoch", "]", "=", "accuracy", "/", "total_count", "\n", "", "print", "(", "\"epoch: \"", ",", "epoch", ",", "\", train loss: \"", ",", "epoch_training_loss", "/", "total_count", ",", "\"train accuracy: \"", ",", "\n", "accuracy", "/", "total_count", ")", "\n", "\n", "# calculate test set accuracy", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "test_accuracy", ",", "test_loss", "=", "model_eval", "(", "net", ",", "test_loader", ",", "device", ",", "loss_func", ")", "\n", "test_loss_path", "[", "epoch", "]", "=", "test_loss", "\n", "test_accuracy_path", "[", "epoch", "]", "=", "test_accuracy", "\n", "print", "(", "\"epoch: \"", ",", "epoch", ",", "\", test loss: \"", ",", "test_loss", ",", "\"test accuracy: \"", ",", "test_accuracy", ")", "\n", "\n", "total_num_para", "=", "0", "\n", "non_zero_element", "=", "0", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "                ", "total_num_para", "+=", "para", ".", "numel", "(", ")", "\n", "non_zero_element", "+=", "(", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "sum", "(", ")", "\n", "", "print", "(", "'sparsity:'", ",", "non_zero_element", ".", "item", "(", ")", "/", "total_num_para", ")", "\n", "sparsity_path", "[", "epoch", "]", "=", "non_zero_element", ".", "item", "(", ")", "/", "total_num_para", "\n", "\n", "if", "test_accuracy", ">", "best_accuracy", ":", "\n", "                ", "best_accuracy", "=", "test_accuracy", "\n", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "PATH", "+", "'best_model.pt'", ")", "\n", "\n", "", "print", "(", "'best accuracy:'", ",", "best_accuracy", ")", "\n", "\n", "", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "PATH", "+", "'model'", "+", "str", "(", "epoch", ")", "+", "'.pt'", ")", "\n", "\n", "", "import", "pickle", "\n", "filename", "=", "PATH", "+", "'result.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "train_loss_path", ",", "train_accuracy_path", ",", "test_loss_path", ",", "test_accuracy_path", ",", "sparsity_path", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "#-----------------fine tune-------------_#", "\n", "PATH", "=", "args", ".", "base_path", "+", "args", ".", "model_path", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "PATH", "+", "'model'", "+", "str", "(", "args", ".", "nepoch", "-", "1", ")", "+", "'.pt'", ")", ")", "\n", "test_accuracy", ",", "test_loss", "=", "model_eval", "(", "net", ",", "test_loader", ",", "device", ",", "loss_func", ")", "\n", "print", "(", "\"test loss: \"", ",", "test_loss", ",", "\"test accuracy: \"", ",", "test_accuracy", ")", "\n", "threshold", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "(", "1", "-", "lambda_n", ")", "/", "lambda_n", "*", "np", ".", "sqrt", "(", "prior_sigma_1", "/", "prior_sigma_0", ")", ")", "/", "(", "\n", "0.5", "/", "prior_sigma_0", "-", "0.5", "/", "prior_sigma_1", ")", ")", "\n", "user_mask", "=", "{", "}", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "user_mask", "[", "name", "]", "=", "para", ".", "abs", "(", ")", "<", "threshold", "\n", "", "net", ".", "set_prune", "(", "user_mask", ")", "\n", "test_accuracy", ",", "test_loss", "=", "model_eval", "(", "net", ",", "test_loader", ",", "device", ",", "loss_func", ")", "\n", "print", "(", "\"test loss: \"", ",", "test_loss", ",", "\"test accuracy: \"", ",", "test_accuracy", ")", "\n", "\n", "total_num_para", "=", "0", "\n", "non_zero_element", "=", "0", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "total_num_para", "+=", "para", ".", "numel", "(", ")", "\n", "non_zero_element", "+=", "(", "para", "!=", "0", ")", ".", "sum", "(", ")", "\n", "", "print", "(", "'sparsity:'", ",", "non_zero_element", ".", "item", "(", ")", "/", "total_num_para", ")", "\n", "\n", "PATH", "=", "args", ".", "base_path", "+", "args", ".", "model_path", "+", "args", ".", "fine_tune_path", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "            ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "init_lr_fine_tune", ",", "momentum", "=", "args", ".", "momentum_fine_tune", ",", "weight_decay", "=", "0", ")", "\n", "\n", "num_epochs", "=", "args", ".", "nepoch_fine_tune", "\n", "train_accuracy_path_fine_tune", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "train_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "\n", "test_accuracy_path_fine_tune", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "test_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "\n", "sparsity_path_fine_tune", "=", "np", ".", "zeros", "(", "num_epochs", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "NTrain", "=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "best_accuracy", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "epoch_training_loss", "=", "0.0", "\n", "total_count", "=", "0", "\n", "accuracy", "=", "0", "\n", "\n", "prior_sigma_0", "=", "args", ".", "sigma1", "\n", "\n", "if", "epoch", "in", "args", ".", "lr_decay_time_fine_tune", ":", "\n", "            ", "for", "para", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "para", "[", "'lr'", "]", "=", "para", "[", "'lr'", "]", "/", "10", "\n", "", "", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "input", ",", "target", "=", "input", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "net", "(", "input", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "temp", "=", "para", ".", "pow", "(", "2", ")", ".", "mul", "(", "c2", ")", ".", "add", "(", "c1", ")", ".", "exp", "(", ")", ".", "add", "(", "1", ")", ".", "pow", "(", "-", "1", ")", "\n", "temp", "=", "para", ".", "div", "(", "-", "prior_sigma_0", ")", ".", "mul", "(", "temp", ")", "+", "para", ".", "div", "(", "-", "prior_sigma_1", ")", ".", "mul", "(", "1", "-", "temp", ")", "\n", "prior_grad", "=", "temp", ".", "div", "(", "NTrain", ")", "\n", "para", ".", "grad", ".", "data", "-=", "prior_grad", "\n", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "epoch_training_loss", "+=", "loss", ".", "mul", "(", "input", ".", "shape", "[", "0", "]", ")", ".", "item", "(", ")", "\n", "accuracy", "+=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "target", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total_count", "+=", "input", ".", "shape", "[", "0", "]", "\n", "train_loss_path_fine_tune", "[", "epoch", "]", "=", "epoch_training_loss", "/", "total_count", "\n", "train_accuracy_path_fine_tune", "[", "epoch", "]", "=", "accuracy", "/", "total_count", "\n", "", "print", "(", "\"epoch: \"", ",", "epoch", ",", "\", train loss: \"", ",", "epoch_training_loss", "/", "total_count", ",", "\"train accuracy: \"", ",", "\n", "accuracy", "/", "total_count", ")", "\n", "\n", "# calculate training set accuracy", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "test_accuracy", ",", "test_loss", "=", "model_eval", "(", "net", ",", "test_loader", ",", "device", ",", "loss_func", ")", "\n", "test_loss_path_fine_tune", "[", "epoch", "]", "=", "test_loss", "\n", "test_accuracy_path_fine_tune", "[", "epoch", "]", "=", "test_accuracy", "\n", "print", "(", "\"epoch: \"", ",", "epoch", ",", "\", test loss: \"", ",", "test_loss", ",", "\"test accuracy: \"", ",", "test_accuracy", ")", "\n", "\n", "total_num_para", "=", "0", "\n", "non_zero_element", "=", "0", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "                ", "total_num_para", "+=", "para", ".", "numel", "(", ")", "\n", "non_zero_element", "+=", "(", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "sum", "(", ")", "\n", "", "print", "(", "'sparsity:'", ",", "non_zero_element", ".", "item", "(", ")", "/", "total_num_para", ")", "\n", "sparsity_path_fine_tune", "[", "epoch", "]", "=", "non_zero_element", ".", "item", "(", ")", "/", "total_num_para", "\n", "\n", "if", "test_accuracy", ">", "best_accuracy", ":", "\n", "                ", "best_accuracy", "=", "test_accuracy", "\n", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "PATH", "+", "'best_model.pt'", ")", "\n", "", "print", "(", "'best accuracy:'", ",", "best_accuracy", ")", "\n", "\n", "", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "PATH", "+", "'model'", "+", "str", "(", "epoch", ")", "+", "'.pt'", ")", "\n", "\n", "", "import", "pickle", "\n", "filename", "=", "PATH", "+", "'result.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "train_loss_path_fine_tune", ",", "train_accuracy_path_fine_tune", ",", "test_loss_path_fine_tune", ",", "\n", "test_accuracy_path_fine_tune", ",", "sparsity_path_fine_tune", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.Generate_Data.my_relu": [[6, 8], ["None"], "function", ["None"], ["def", "my_relu", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "(", "x", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_tanh.__init__": [[22, 37], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Classification.my_Net_tanh.gamma.append", "DPF_Classification.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Classification.my_Net_tanh.gamma.append", "DPF_Classification.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Classification.my_Net_tanh.gamma.append", "DPF_Classification.my_Net_tanh.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Classification.my_Net_tanh.gamma.append", "DPF_Classification.my_Net_tanh.gamma.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "my_Net_tanh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "[", "]", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1000", ",", "6", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_tanh.to": [[38, 43], ["super().to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "range", "DPF_Classification.my_Net_tanh.gamma.__len__", "DPF_Classification.my_Net_tanh.gamma[].to"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "my_Net_tanh", ",", "self", ")", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "gamma", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "index", "]", "=", "self", ".", "gamma", "[", "index", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_tanh.forward": [[44, 52], ["enumerate", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "DPF_Classification.my_Net_tanh.fc4", "DPF_Classification.my_Net_tanh.parameters", "para.data.mul_", "DPF_Classification.my_Net_tanh.fc1", "DPF_Classification.my_Net_tanh.fc2", "DPF_Classification.my_Net_tanh.fc3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "para", ".", "data", ".", "mul_", "(", "self", ".", "gamma", "[", "i", "]", ")", "\n", "", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_tanh.mask": [[53, 60], ["enumerate", "enumerate", "DPF_Classification.my_Net_tanh.parameters", "DPF_Classification.my_Net_tanh.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "mask", "(", "self", ",", "user_gamma", ",", "device", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "gamma", "[", "i", "]", ".", "shape", "!=", "user_gamma", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'size doesn\\'t match'", ")", "\n", "return", "0", "\n", "", "", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "i", "]", ".", "data", "=", "torch", ".", "tensor", "(", "user_gamma", "[", "i", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__": [[62, 77], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Classification.my_Net_relu.gamma.append", "DPF_Classification.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Classification.my_Net_relu.gamma.append", "DPF_Classification.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Classification.my_Net_relu.gamma.append", "DPF_Classification.my_Net_relu.gamma.append", "torch.Linear", "torch.Linear", "torch.Linear", "DPF_Classification.my_Net_relu.gamma.append", "DPF_Classification.my_Net_relu.gamma.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "my_Net_relu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "[", "]", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1000", ",", "6", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc1", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "4", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc2", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "4", ",", "3", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc3", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "weight", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "gamma", ".", "append", "(", "torch", ".", "ones", "(", "self", ".", "fc4", ".", "bias", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to": [[78, 83], ["super().to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "torch._C._nn._parse_to", "range", "DPF_Classification.my_Net_relu.gamma.__len__", "DPF_Classification.my_Net_relu.gamma[].to"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "my_Net_relu", ",", "self", ")", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "gamma", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "index", "]", "=", "self", ".", "gamma", "[", "index", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.forward": [[84, 92], ["enumerate", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "DPF_Classification.my_Net_relu.fc4", "DPF_Classification.my_Net_relu.parameters", "para.data.mul_", "DPF_Classification.my_Net_relu.fc1", "DPF_Classification.my_Net_relu.fc2", "DPF_Classification.my_Net_relu.fc3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "para", ".", "data", ".", "mul_", "(", "self", ".", "gamma", "[", "i", "]", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.mask": [[93, 100], ["enumerate", "enumerate", "DPF_Classification.my_Net_relu.parameters", "DPF_Classification.my_Net_relu.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to"], ["", "def", "mask", "(", "self", ",", "user_gamma", ",", "device", ")", ":", "\n", "        ", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "gamma", "[", "i", "]", ".", "shape", "!=", "user_gamma", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'size doesn\\'t match'", ")", "\n", "return", "0", "\n", "", "", "for", "i", ",", "para", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "self", ".", "gamma", "[", "i", "]", ".", "data", "=", "torch", ".", "tensor", "(", "user_gamma", "[", "i", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.main": [[102, 418], ["numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "torch.device", "torch.device", "torch.device", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "my_Net_relu.load_state_dict", "DPF_Classification.my_Net_relu.to", "DPF_Classification.my_Net_relu.to", "torch.CrossEntropyLoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "my_Net_relu.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "my_Net_relu.named_parameters", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "open", "pickle.dump", "open.close", "numpy.sum", "numpy.sum", "range", "DPF_Classification.my_Net_relu.mask", "my_Net_relu.parameters", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "open", "pickle.dump", "open.close", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "DPF_Classification.my_Net_tanh", "DPF_Classification.my_Net_tanh", "my_Net_relu.state_dict", "my_Net_relu.parameters", "my_Net_relu.parameters", "os.path.isdir", "para_path.append", "para_gamma_path.append", "para.numel", "my_Net_relu.zero_grad", "my_Net_relu.", "nn.CrossEntropyLoss.", "loss_func.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "para_gamma_path.__len__", "user_gamma.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "para_path_fine_tune.append", "para_gamma_path_fine_tune.append", "my_Net_relu.zero_grad", "my_Net_relu.", "nn.CrossEntropyLoss.", "loss_func.backward", "torch.optim.SGD.step", "str", "DPF_Classification.my_Net_relu", "DPF_Classification.my_Net_relu", "print", "exit", "os.makedirs", "numpy.zeros", "numpy.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "numpy.random.choice", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "print", "str", "numpy.max", "my_Net_relu.parameters", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "print", "str", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "str", "str", "str", "str", "str", "str", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "int", "my_Net_relu.parameters", "enumerate", "DPF_Classification.my_Net_relu.mask", "range", "my_Net_relu.parameters", "my_Net_relu.parameters", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "enumerate", "print", "print", "print", "print", "numpy.max", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "my_Net_relu.", "nn.CrossEntropyLoss.", "net.data.argmax().eq().sum().item", "print", "loss_func.cpu().data.numpy", "enumerate", "print", "print", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "os.path.isdir", "list", "list", "numpy.floor", "para.numel", "para.abs().view", "my_Net_relu.parameters", "user_gamma.append", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "my_Net_relu.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "list", "list", "my_Net_relu.parameters", "para.cpu().data.numpy", "numpy.sum", "numpy.sum", "str", "net.data.argmax().eq", "net.data.argmax().eq", "net.data.argmax().eq", "numpy.power", "torch.zeros().to.sort", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "net.data.argmax().eq().sum", "para.abs", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "loss_func.cpu", "loss_func.cpu", "loss_func.cpu", "numpy.max", "net.data.argmax", "net.data.argmax", "net.data.argmax", "net.data.argmax().eq", "net.data.argmax().eq", "net.data.argmax().eq", "para.cpu", "numpy.max", "net.data.argmax().eq", "net.data.argmax().eq", "net.data.argmax().eq", "para.cpu", "numpy.max", "net.data.argmax", "net.data.argmax", "net.data.argmax", "net.data.argmax", "net.data.argmax", "net.data.argmax", "para.abs"], "function", ["home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.mask", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.to", "home.repos.pwc.inspect_result.sylydya_Consistent-Sparse-Deep-Learning-Theory-and-Computation.experiments.DPF_Classification.my_Net_relu.mask"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "data_index", "=", "args", ".", "data_index", "\n", "subn", "=", "500", "\n", "\n", "NTrain", "=", "10000", "\n", "Nval", "=", "1000", "\n", "NTest", "=", "1000", "\n", "TotalP", "=", "1000", "\n", "\n", "x_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "TotalP", "]", ")", ")", "\n", "y_train", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTrain", ",", "1", "]", ")", ")", "\n", "\n", "x_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "TotalP", "]", ")", ")", "\n", "y_val", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "Nval", ",", "1", "]", ")", ")", "\n", "\n", "x_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "TotalP", "]", ")", ")", "\n", "y_test", "=", "np", ".", "matrix", "(", "np", ".", "zeros", "(", "[", "NTest", ",", "1", "]", ")", ")", "\n", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "data_index", ")", "+", "\"/x_train.csv\"", ")", ")", "\n", "x_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "data_index", ")", "+", "\"/y_train.csv\"", ")", ")", "\n", "y_train", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "data_index", ")", "+", "\"/x_val.csv\"", ")", ")", "\n", "x_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "data_index", ")", "+", "\"/y_val.csv\"", ")", ")", "\n", "y_val", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "data_index", ")", "+", "\"/x_test.csv\"", ")", ")", "\n", "x_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "temp", "=", "np", ".", "matrix", "(", "pd", ".", "read_csv", "(", "\"./data/classification/\"", "+", "str", "(", "data_index", ")", "+", "\"/y_test.csv\"", ")", ")", "\n", "y_test", "[", ":", ",", ":", "]", "=", "temp", "[", ":", ",", "1", ":", "]", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "x_train", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "device", ")", "\n", "y_train", "=", "torch", ".", "LongTensor", "(", "y_train", ")", ".", "view", "(", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "x_val", "=", "torch", ".", "FloatTensor", "(", "x_val", ")", ".", "to", "(", "device", ")", "\n", "y_val", "=", "torch", ".", "LongTensor", "(", "y_val", ")", ".", "view", "(", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "device", ")", "\n", "y_test", "=", "torch", ".", "LongTensor", "(", "y_test", ")", ".", "view", "(", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "num_seed", "=", "1", "\n", "\n", "\n", "num_selection_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "num_selection_true_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "train_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "val_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "test_loss_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "\n", "train_accuracy_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "val_accuracy_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "test_accuracy_list", "=", "np", ".", "zeros", "(", "[", "num_seed", "]", ")", "\n", "\n", "for", "my_seed", "in", "range", "(", "num_seed", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "my_seed", ")", "\n", "torch", ".", "manual_seed", "(", "my_seed", ")", "\n", "if", "args", ".", "activation", "==", "'tanh'", ":", "\n", "            ", "net", "=", "my_Net_tanh", "(", ")", "\n", "net_dense", "=", "my_Net_tanh", "(", ")", "\n", "", "elif", "args", ".", "activation", "==", "'relu'", ":", "\n", "            ", "net", "=", "my_Net_relu", "(", ")", "\n", "net_dense", "=", "my_Net_relu", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'unrecognized activation function'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "net", ".", "load_state_dict", "(", "net_dense", ".", "state_dict", "(", ")", ")", "\n", "\n", "net_dense", ".", "to", "(", "device", ")", "\n", "net", ".", "to", "(", "device", ")", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "step_lr", "=", "0.005", "\n", "optimization", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ",", "weight_decay", "=", "5e-4", ")", "\n", "optimization_dense", "=", "torch", ".", "optim", ".", "SGD", "(", "net_dense", ".", "parameters", "(", ")", ",", "lr", "=", "step_lr", ",", "weight_decay", "=", "5e-4", ")", "\n", "\n", "\n", "\n", "\n", "max_loop", "=", "80001", "\n", "PATH", "=", "'./result/classification/'", "+", "args", ".", "activation", "+", "'/DPF/'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "PATH", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "                ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "PATH", ")", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "raise", "\n", "\n", "", "", "", "show_information", "=", "100", "\n", "\n", "para_path", "=", "[", "]", "\n", "para_gamma_path", "=", "[", "]", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path", ".", "append", "(", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "train_accuracy_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_accuracy_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_accuracy_path", "=", "np", ".", "zeros", "(", "[", "max_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "\n", "\n", "total_num_para", "=", "0", "\n", "for", "name", ",", "para", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "            ", "total_num_para", "+=", "para", ".", "numel", "(", ")", "\n", "", "para_placeholder", "=", "torch", ".", "zeros", "(", "[", "total_num_para", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "s_init", "=", "0", "\n", "s_target", "=", "1", "-", "(", "total_num_para", "-", "(", "TotalP", "-", "4", ")", "*", "net", ".", "fc1", ".", "weight", ".", "shape", "[", "0", "]", ")", "/", "total_num_para", "\n", "\n", "\n", "for", "iter", "in", "range", "(", "max_loop", ")", ":", "\n", "\n", "            ", "if", "iter", "<", "(", "0.75", "*", "max_loop", ")", ":", "\n", "                ", "if", "iter", "%", "16", "==", "0", ":", "\n", "\n", "                    ", "sparsity_level", "=", "s_target", "+", "(", "s_init", "-", "s_target", ")", "*", "np", ".", "power", "(", "\n", "(", "1", "-", "iter", "*", "1.0", "/", "(", "0.75", "*", "max_loop", ")", ")", ",", "3", ")", "\n", "cut_index", "=", "int", "(", "np", ".", "floor", "(", "(", "sparsity_level", ")", "*", "(", "total_num_para", "-", "1", ")", ")", ")", "\n", "para_count", "=", "0", "\n", "for", "para", "in", "net_dense", ".", "parameters", "(", ")", ":", "\n", "                        ", "temp_num", "=", "para", ".", "numel", "(", ")", "\n", "para_placeholder", "[", "para_count", ":", "(", "para_count", "+", "temp_num", ")", "]", "=", "para", ".", "abs", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "para_count", "=", "para_count", "+", "temp_num", "\n", "\n", "", "threshold", "=", "para_placeholder", ".", "sort", "(", ")", "[", "0", "]", "[", "cut_index", "]", "\n", "user_gamma", "=", "[", "]", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net_dense", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "user_gamma", ".", "append", "(", "(", "para", ".", "abs", "(", ")", ">", "threshold", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "", "net", ".", "mask", "(", "user_gamma", ",", "device", ")", "\n", "\n", "\n", "", "", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "para_dense", ",", "para", "in", "zip", "(", "net_dense", ".", "parameters", "(", ")", ",", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "if", "para_dense", ".", "grad", "is", "None", ":", "\n", "                        ", "para_dense", ".", "grad", "=", "torch", ".", "zeros_like", "(", "para", ".", "grad", ")", "\n", "", "para_dense", ".", "grad", ".", "data", "=", "para", ".", "grad", "\n", "\n", "", "", "optimization", ".", "step", "(", ")", "\n", "optimization_dense", ".", "step", "(", ")", "\n", "\n", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_train", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ",", "'train accuracy:'", ",", "accuracy", ")", "\n", "train_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "train_accuracy_path", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_val", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ",", "'val accuracy:'", ",", "accuracy", ")", "\n", "val_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "val_accuracy_path", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_test", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ",", "'test accuracy:'", ",", "accuracy", ")", "\n", "test_loss_path", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "test_accuracy_path", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "user_gamma", "[", "i", "]", "\n", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "4", "]", ")", ")", "\n", "print", "(", "'sparsity: '", ",", "sparsity_level", ")", "\n", "print", "(", "'cut_index: '", ",", "cut_index", ")", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "\"_simu_\"", "+", "str", "(", "my_seed", ")", "+", "'.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path", ",", "para_gamma_path", ",", "train_loss_path", ",", "val_loss_path", ",", "test_loss_path", ",", "train_accuracy_path", ",", "\n", "val_accuracy_path", ",", "test_accuracy_path", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "num_selection_list", "[", "my_seed", "]", "=", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "\n", "num_selection_true_list", "[", "my_seed", "]", "=", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path", "[", "0", "]", "[", "-", "1", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "4", "]", ")", "\n", "\n", "user_gamma", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "para_gamma_path", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "user_gamma", ".", "append", "(", "para_gamma_path", "[", "index", "]", "[", "-", "1", ",", "]", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "para", ".", "data", "=", "torch", ".", "FloatTensor", "(", "para_path", "[", "i", "]", "[", "-", "1", ",", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "net", ".", "mask", "(", "user_gamma", ",", "device", ")", "\n", "\n", "fine_tune_loop", "=", "40001", "\n", "para_path_fine_tune", "=", "[", "]", "\n", "para_gamma_path_fine_tune", "=", "[", "]", "\n", "\n", "for", "para", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "para_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "para_gamma_path_fine_tune", ".", "append", "(", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", "+", "list", "(", "para", ".", "shape", ")", ")", ")", "\n", "\n", "", "train_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_loss_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "train_accuracy_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "val_accuracy_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "test_accuracy_path_fine_tune", "=", "np", ".", "zeros", "(", "[", "fine_tune_loop", "//", "show_information", "+", "1", "]", ")", "\n", "\n", "for", "iter", "in", "range", "(", "fine_tune_loop", ")", ":", "\n", "            ", "if", "subn", "==", "NTrain", ":", "\n", "                ", "subsample", "=", "range", "(", "NTrain", ")", "\n", "", "else", ":", "\n", "                ", "subsample", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "NTrain", ")", ",", "size", "=", "subn", ",", "replace", "=", "False", ")", "\n", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "output", "=", "net", "(", "x_train", "[", "subsample", ",", "]", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", "[", "subsample", ",", "]", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimization", ".", "step", "(", ")", "\n", "\n", "if", "iter", "%", "show_information", "==", "0", ":", "\n", "                ", "print", "(", "'iteration:'", ",", "iter", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_train", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"train loss:\"", ",", "loss", ",", "'train accuracy:'", ",", "accuracy", ")", "\n", "train_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "train_accuracy_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_val", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"val loss:\"", ",", "loss", ",", "'val accuracy:'", ",", "accuracy", ")", "\n", "val_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "val_accuracy_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_test", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"test loss:\"", ",", "loss", ",", "'test accuracy:'", ",", "accuracy", ")", "\n", "test_loss_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "test_accuracy_path_fine_tune", "[", "iter", "//", "show_information", "]", "=", "accuracy", "\n", "\n", "\n", "for", "i", ",", "para", "in", "enumerate", "(", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "para_path_fine_tune", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "para", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "para_gamma_path_fine_tune", "[", "i", "]", "[", "iter", "//", "show_information", ",", "]", "=", "user_gamma", "[", "i", "]", "\n", "\n", "", "print", "(", "'number of 1:'", ",", "\n", "np", ".", "sum", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", ")", "\n", "print", "(", "'number of true:'", ",", "\n", "np", ".", "sum", "(", "(", "np", ".", "max", "(", "para_gamma_path_fine_tune", "[", "0", "]", "[", "iter", "//", "show_information", ",", "]", ",", "0", ")", ">", "0", ")", "[", "0", ":", "4", "]", ")", ")", "\n", "\n", "\n", "", "", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "\"_simu_\"", "+", "str", "(", "my_seed", ")", "+", "'_fine_tune.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "para_path_fine_tune", ",", "para_gamma_path_fine_tune", ",", "train_loss_path_fine_tune", ",", "val_loss_path_fine_tune", ",", "\n", "test_loss_path_fine_tune", ",", "train_accuracy_path_fine_tune", ",", "val_accuracy_path_fine_tune", ",", "\n", "test_accuracy_path_fine_tune", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "output", "=", "net", "(", "x_train", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_train", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_train", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"Train Loss:\"", ",", "loss", ",", "\"Train accuracy:\"", ",", "accuracy", ")", "\n", "train_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "train_accuracy_list", "[", "my_seed", "]", "=", "accuracy", "\n", "\n", "output", "=", "net", "(", "x_val", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_val", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_val", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"Val Loss:\"", ",", "loss", ",", "\"Val accuracy:\"", ",", "accuracy", ")", "\n", "val_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "val_accuracy_list", "[", "my_seed", "]", "=", "accuracy", "\n", "\n", "output", "=", "net", "(", "x_test", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "y_test", ")", "\n", "accuracy", "=", "output", ".", "data", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y_test", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"Test Loss:\"", ",", "loss", ",", "\"Test accuracy:\"", ",", "accuracy", ")", "\n", "test_loss_list", "[", "my_seed", "]", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "test_accuracy_list", "[", "my_seed", "]", "=", "accuracy", "\n", "\n", "", "import", "pickle", "\n", "\n", "filename", "=", "PATH", "+", "'data_'", "+", "str", "(", "data_index", ")", "+", "'_result.txt'", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "\n", "[", "num_selection_list", ",", "num_selection_true_list", ",", "train_loss_list", ",", "val_loss_list", ",", "\n", "test_loss_list", ",", "train_accuracy_list", ",", "val_accuracy_list", ",", "test_accuracy_list", "]", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]]}