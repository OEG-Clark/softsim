{"home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.viz_segmask.colorize_mask": [[16, 21], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "return", "new_mask", "\n", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.loss.cross_entropy_2d": [[7, 28], ["predict[].view.size", "predict[].view.transpose().transpose().contiguous", "predict[].view", "torch.cross_entropy", "predict[].view.dim", "target.dim", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "target.data.dim", "torch.autograd.Variable", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "torch.zeros", "torch.zeros", "predict[].view.transpose().transpose", "predict[].view.transpose", "target_mask.view().repeat", "target_mask.view"], "function", ["None"], ["def", "cross_entropy_2d", "(", "predict", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        predict:(n, c, h, w)\n        target:(n, h, w)\n    \"\"\"", "\n", "assert", "not", "target", ".", "requires_grad", "\n", "assert", "predict", ".", "dim", "(", ")", "==", "4", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "\n", "assert", "predict", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "f\"{predict.size(0)} vs {target.size(0)}\"", "\n", "assert", "predict", ".", "size", "(", "2", ")", "==", "target", ".", "size", "(", "1", ")", ",", "f\"{predict.size(2)} vs {target.size(1)}\"", "\n", "assert", "predict", ".", "size", "(", "3", ")", "==", "target", ".", "size", "(", "2", ")", ",", "f\"{predict.size(3)} vs {target.size(3)}\"", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "predict", ".", "size", "(", ")", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "255", ")", "\n", "target", "=", "target", "[", "target_mask", "]", "\n", "if", "not", "target", ".", "data", ".", "dim", "(", ")", ":", "\n", "        ", "return", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "predict", "=", "predict", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "predict", "=", "predict", "[", "target_mask", ".", "view", "(", "n", ",", "h", ",", "w", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "c", ")", "]", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "predict", ",", "target", ",", "size_average", "=", "True", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.loss.entropy_loss": [[30, 39], ["v.size", "v.dim", "torch.sum", "torch.sum", "numpy.log2", "torch.mul", "torch.mul", "torch.log2", "torch.log2"], "function", ["None"], ["", "def", "entropy_loss", "(", "v", ")", ":", "\n", "    ", "\"\"\"\n        Entropy loss for probabilistic prediction vectors\n        input: batch_size x channels x h x w\n        output: batch_size x 1 x h x w\n    \"\"\"", "\n", "assert", "v", ".", "dim", "(", ")", "==", "4", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "v", ".", "size", "(", ")", "\n", "return", "-", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "v", ",", "torch", ".", "log2", "(", "v", "+", "1e-30", ")", ")", ")", "/", "(", "n", "*", "h", "*", "w", "*", "np", ".", "log2", "(", "c", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss": [[9, 14], ["torch.FloatTensor", "torch.FloatTensor", "y_truth_tensor.to.fill_", "y_truth_tensor.to.to", "y_pred.size", "y_pred.get_device", "torch.BCEWithLogitsLoss"], "function", ["None"], ["def", "bce_loss", "(", "y_pred", ",", "y_label", ")", ":", "\n", "    ", "y_truth_tensor", "=", "torch", ".", "FloatTensor", "(", "y_pred", ".", "size", "(", ")", ")", "\n", "y_truth_tensor", ".", "fill_", "(", "y_label", ")", "\n", "y_truth_tensor", "=", "y_truth_tensor", ".", "to", "(", "y_pred", ".", "get_device", "(", ")", ")", "\n", "return", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "y_pred", ",", "y_truth_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss": [[15, 20], ["torch.FloatTensor", "torch.FloatTensor", "y_truth_tensor.to.fill_", "y_truth_tensor.to.to", "y_pred.size", "y_pred.get_device", "torch.MSELoss"], "function", ["None"], ["", "def", "ls_loss", "(", "y_pred", ",", "y_label", ")", ":", "\n", "    ", "y_truth_tensor", "=", "torch", ".", "FloatTensor", "(", "y_pred", ".", "size", "(", ")", ")", "\n", "y_truth_tensor", ".", "fill_", "(", "y_label", ")", "\n", "y_truth_tensor", "=", "y_truth_tensor", ".", "to", "(", "y_pred", ".", "get_device", "(", ")", ")", "\n", "return", "nn", ".", "MSELoss", "(", ")", "(", "y_pred", ",", "y_truth_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc": [[21, 29], ["label.long().to.long().to", "advent.utils.loss.cross_entropy_2d", "label.long().to.long"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.loss.cross_entropy_2d"], ["", "def", "loss_calc", "(", "pred", ",", "label", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    This function returns cross entropy loss for semantic segmentation\n    \"\"\"", "\n", "# out shape batch_size x channels x h x w -> batch_size x channels x h x w", "\n", "# label shape h x w x 1 x batch_size  -> batch_size x 1 x h x w", "\n", "label", "=", "label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "cross_entropy_2d", "(", "pred", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.lr_poly": [[31, 35], ["float"], "function", ["None"], ["", "def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "\"\"\" Poly_LR scheduler\n    \"\"\"", "\n", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "power", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func._adjust_learning_rate": [[37, 42], ["func.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.lr_poly"], ["", "def", "_adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ",", "learning_rate", ")", ":", "\n", "    ", "lr", "=", "lr_poly", "(", "learning_rate", ",", "i_iter", ",", "cfg", ".", "TRAIN", ".", "MAX_ITERS", ",", "cfg", ".", "TRAIN", ".", "POWER", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate": [[44, 48], ["func._adjust_learning_rate"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func._adjust_learning_rate"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ")", ":", "\n", "    ", "\"\"\" adject learning rate for main segnet\n    \"\"\"", "\n", "_adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ",", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate_discriminator": [[50, 52], ["func._adjust_learning_rate"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func._adjust_learning_rate"], ["", "def", "adjust_learning_rate_discriminator", "(", "optimizer", ",", "i_iter", ",", "cfg", ")", ":", "\n", "    ", "_adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ",", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy": [[54, 59], ["prob.size", "numpy.log2", "torch.mul", "torch.mul", "torch.log2", "torch.log2"], "function", ["None"], ["", "def", "prob_2_entropy", "(", "prob", ")", ":", "\n", "    ", "\"\"\" convert probabilistic prediction maps to weighted self-information maps\n    \"\"\"", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "prob", ".", "size", "(", ")", "\n", "return", "-", "torch", ".", "mul", "(", "prob", ",", "torch", ".", "log2", "(", "prob", "+", "1e-30", ")", ")", "/", "np", ".", "log2", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.fast_hist": [[61, 64], ["numpy.bincount().reshape", "numpy.bincount", "a[].astype"], "function", ["None"], ["", "def", "fast_hist", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "k", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu": [[66, 68], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.dice_coefficient": [[69, 82], ["numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "dice_coefficient", "(", "hist", ")", ":", "\n", "    ", "\"\"\"Computes the S\u00f8rensen\u2013Dice coefficient, a.k.a the F1 score.\n    Args:\n        hist: confusion matrix.\n    Returns:\n        avg_dice: the average per-class dice coefficient.\n    \"\"\"", "\n", "A_inter_B", "=", "np", ".", "diag", "(", "hist", ")", "\n", "A", "=", "hist", ".", "sum", "(", "1", ")", "\n", "B", "=", "hist", ".", "sum", "(", "0", ")", "\n", "dice", "=", "(", "2", "*", "A_inter_B", ")", "/", "(", "A", "+", "B", "+", "EPS", ")", "\n", "#avg_dice = np.nanmean(dice)", "\n", "return", "dice", "", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.make_parent": [[8, 11], ["pathlib.Path", "os.makedirs"], "function", ["None"], ["def", "make_parent", "(", "file_path", ")", ":", "\n", "    ", "file_path", "=", "Path", "(", "file_path", ")", "\n", "os", ".", "makedirs", "(", "file_path", ".", "parent", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.pickle_dump": [[13, 17], ["serialization.make_parent", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.make_parent"], ["", "def", "pickle_dump", "(", "python_object", ",", "file_path", ")", ":", "\n", "    ", "make_parent", "(", "file_path", ")", "\n", "with", "open", "(", "file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "python_object", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.pickle_load": [[19, 22], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "pickle_load", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.json_load": [[24, 27], ["open", "json.load"], "function", ["None"], ["", "", "def", "json_load", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "return", "json", ".", "load", "(", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.yaml_dump": [[29, 33], ["serialization.make_parent", "open", "yaml.dump"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.make_parent"], ["", "", "def", "yaml_dump", "(", "python_object", ",", "file_path", ")", ":", "\n", "    ", "make_parent", "(", "file_path", ")", "\n", "with", "open", "(", "file_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "dump", "(", "python_object", ",", "f", ",", "default_flow_style", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.yaml_load": [[35, 38], ["open", "yaml.load"], "function", ["None"], ["", "", "def", "yaml_load", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "return", "yaml", ".", "load", "(", "f", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.Vaihingen.Vaihingen.__init__": [[11, 21], ["advent.dataset.base_dataset.BaseDataset.__init__", "advent.utils.serialization.json_load", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.__init__", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.json_load"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "set", "=", "'val'", ",", "\n", "max_iters", "=", "None", ",", "\n", "crop_size", "=", "(", "512", ",", "512", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "\n", "load_labels", "=", "True", ",", "\n", "info_path", "=", "DEFAULT_INFO_PATH", ",", "labels_size", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root", ",", "list_path", ",", "set", ",", "max_iters", ",", "crop_size", ",", "labels_size", ",", "mean", ")", "\n", "\n", "self", ".", "load_labels", "=", "load_labels", "\n", "self", ".", "info", "=", "json_load", "(", "info_path", ")", "\n", "self", ".", "class_names", "=", "np", ".", "array", "(", "self", ".", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.Vaihingen.Vaihingen.get_metadata": [[22, 26], ["None"], "methods", ["None"], ["", "def", "get_metadata", "(", "self", ",", "name", ")", ":", "\n", "        ", "img_file", "=", "self", ".", "root", "/", "'images'", "/", "name", "\n", "label_file", "=", "self", ".", "root", "/", "'labels'", "/", "name", "\n", "return", "img_file", ",", "label_file", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.Vaihingen.Vaihingen.__getitem__": [[27, 33], ["Vaihingen.Vaihingen.get_labels", "Vaihingen.Vaihingen.get_image", "Vaihingen.Vaihingen.preprocess", "Vaihingen.Vaihingen.copy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset.BaseDataset.get_labels", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset.BaseDataset.get_image", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset.BaseDataset.preprocess"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_file", ",", "label_file", ",", "name", "=", "self", ".", "files", "[", "index", "]", "\n", "label", "=", "self", ".", "get_labels", "(", "label_file", ")", "\n", "image", "=", "self", ".", "get_image", "(", "img_file", ")", "\n", "image", "=", "self", ".", "preprocess", "(", "image", ")", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", "-", "1", ",", "np", ".", "array", "(", "image", ".", "shape", ")", ",", "name", "", "", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.Potsdam.Potsdam.__init__": [[10, 17], ["advent.dataset.base_dataset.BaseDataset.__init__", "advent.utils.serialization.json_load", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.__init__", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.json_load"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "set", "=", "'all'", ",", "\n", "max_iters", "=", "None", ",", "crop_size", "=", "(", "512", ",", "512", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "\n", "info_path", "=", "DEFAULT_INFO_PATH", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root", ",", "list_path", ",", "set", ",", "max_iters", ",", "crop_size", ",", "None", ",", "mean", ")", "\n", "\n", "self", ".", "info", "=", "json_load", "(", "info_path", ")", "\n", "self", ".", "class_names", "=", "np", ".", "array", "(", "self", ".", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.Potsdam.Potsdam.get_metadata": [[18, 22], ["None"], "methods", ["None"], ["", "def", "get_metadata", "(", "self", ",", "name", ")", ":", "\n", "        ", "img_file", "=", "self", ".", "root", "/", "'images'", "/", "name", "\n", "label_file", "=", "self", ".", "root", "/", "'labels'", "/", "name", "\n", "return", "img_file", ",", "label_file", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.Potsdam.Potsdam.__getitem__": [[23, 29], ["Potsdam.Potsdam.get_image", "Potsdam.Potsdam.get_labels", "Potsdam.Potsdam.preprocess", "Potsdam.Potsdam.copy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset.BaseDataset.get_image", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset.BaseDataset.get_labels", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset.BaseDataset.preprocess"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_file", ",", "label_file", ",", "name", "=", "self", ".", "files", "[", "index", "]", "\n", "image", "=", "self", ".", "get_image", "(", "img_file", ")", "\n", "label", "=", "self", ".", "get_labels", "(", "label_file", ")", "\n", "image", "=", "self", ".", "preprocess", "(", "image", ")", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", "-", "1", ",", "np", ".", "array", "(", "image", ".", "shape", ")", ",", "name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset.BaseDataset.__init__": [[19, 38], ["pathlib.Path", "list_path.format", "open", "base_dataset.BaseDataset.get_metadata", "base_dataset.BaseDataset.files.append", "i_id.strip", "int", "numpy.ceil", "float", "len"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset.BaseDataset.get_metadata"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "set_", ",", "\n", "max_iters", ",", "image_size", ",", "labels_size", ",", "mean", ")", ":", "\n", "        ", "self", ".", "root", "=", "Path", "(", "root", ")", "\n", "self", ".", "set", "=", "set_", "\n", "self", ".", "list_path", "=", "list_path", ".", "format", "(", "self", ".", "set", ")", "\n", "self", ".", "image_size", "=", "image_size", "\n", "if", "labels_size", "is", "None", ":", "\n", "            ", "self", ".", "labels_size", "=", "self", ".", "image_size", "\n", "", "else", ":", "\n", "            ", "self", ".", "labels_size", "=", "labels_size", "\n", "", "self", ".", "mean", "=", "mean", "\n", "with", "open", "(", "self", ".", "list_path", ")", "as", "f", ":", "\n", "            ", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "f", "]", "\n", "", "if", "max_iters", "is", "not", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", ",", "label_file", "=", "self", ".", "get_metadata", "(", "name", ")", "\n", "self", ".", "files", ".", "append", "(", "(", "img_file", ",", "label_file", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset.BaseDataset.get_metadata": [[39, 41], ["None"], "methods", ["None"], ["", "", "def", "get_metadata", "(", "self", ",", "name", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset.BaseDataset.__len__": [[42, 44], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset.BaseDataset.preprocess": [[45, 49], ["image.transpose"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "return", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset.BaseDataset.get_image": [[50, 52], ["base_dataset._load_img"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset._load_img"], ["", "def", "get_image", "(", "self", ",", "file", ")", ":", "\n", "        ", "return", "_load_img", "(", "file", ",", "self", ".", "image_size", ",", "Image", ".", "BICUBIC", ",", "rgb", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset.BaseDataset.get_labels": [[53, 55], ["base_dataset._load_img"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset._load_img"], ["", "def", "get_labels", "(", "self", ",", "file", ")", ":", "\n", "        ", "return", "_load_img", "(", "file", ",", "self", ".", "labels_size", ",", "Image", ".", "NEAREST", ",", "rgb", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.dataset.base_dataset._load_img": [[57, 63], ["PIL.Image.open", "img.convert.resize", "numpy.asarray", "img.convert.convert", "PIL.Image.BICUBIC", "PIL.Image.NEAREST"], "function", ["None"], ["", "", "def", "_load_img", "(", "file", ",", "size", ",", "interpolation", ",", "rgb", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "file", ")", "\n", "if", "rgb", ":", "\n", "        ", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "size", ",", "interpolation", ")", "\n", "return", "np", ".", "asarray", "(", "img", ",", "np", ".", "float32", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator": [[11, 22], ["torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d"], "function", ["None"], ["def", "get_fc_discriminator", "(", "num_classes", ",", "ndf", "=", "128", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_classes", ",", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.Bottleneck.__init__": [[17, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv3.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv3.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv3.Bottleneck.bn3.parameters", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# change", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "padding", "=", "dilation", "\n", "# change", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.Bottleneck.forward": [[39, 55], ["deeplabv3.Bottleneck.conv1", "deeplabv3.Bottleneck.bn1", "deeplabv3.Bottleneck.relu", "deeplabv3.Bottleneck.conv2", "deeplabv3.Bottleneck.bn2", "deeplabv3.Bottleneck.relu", "deeplabv3.Bottleneck.conv3", "deeplabv3.Bottleneck.bn3", "deeplabv3.Bottleneck.relu", "deeplabv3.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ClassifierModule.__init__": [[58, 68], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "zip", "deeplabv3.ClassifierModule.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "ClassifierModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ClassifierModule.forward": [[69, 74], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ClassifierModule_GAP.__init__": [[76, 91], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "zip", "torch.Sequential", "torch.Sequential", "deeplabv3.ClassifierModule_GAP.conv2d_list.append", "m.weight.data.normal_", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "ClassifierModule_GAP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n", "", "self", ".", "global_avg_pool", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ClassifierModule_GAP.forward": [[92, 100], ["deeplabv3.ClassifierModule_GAP.global_avg_pool", "torch.upsample", "torch.upsample", "range", "len", "out.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "out_gap", "=", "self", ".", "global_avg_pool", "(", "x", ")", "\n", "out_gap", "=", "F", ".", "upsample", "(", "out_gap", ",", "size", "=", "out", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "", "out", "=", "out", "+", "out_gap", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetMulti.__init__": [[103, 131], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv3.ResNetMulti.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "deeplabv3.ResNetMulti._make_layer", "deeplabv3.ResNetMulti._make_layer", "deeplabv3.ResNetMulti._make_layer", "deeplabv3.ResNetMulti._make_layer", "deeplabv3.ClassifierModule_GAP", "deeplabv3.ResNetMulti.modules", "deeplabv3.ClassifierModule", "deeplabv3.ClassifierModule", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.__init__", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL._make_layer", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL._make_layer", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL._make_layer", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "multi_level", ")", ":", "\n", "        ", "self", ".", "multi_level", "=", "multi_level", "\n", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "self", ".", "low_layers", "=", "ClassifierModule", "(", "512", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "self", ".", "layer5", "=", "ClassifierModule", "(", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "#self.layer6 = ClassifierModule(2048, [6, 12, 18, 24], [6, 12, 18, 24], num_classes)", "\n", "", "self", ".", "layer6", "=", "ClassifierModule_GAP", "(", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetMulti._make_layer": [[132, 152], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "(", "stride", "!=", "1", "\n", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "\n", "or", "dilation", "==", "2", "\n", "or", "dilation", "==", "4", ")", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetMulti.forward": [[153, 172], ["deeplabv3.ResNetMulti.conv1", "deeplabv3.ResNetMulti.bn1", "deeplabv3.ResNetMulti.relu", "deeplabv3.ResNetMulti.maxpool", "deeplabv3.ResNetMulti.layer1", "deeplabv3.ResNetMulti.layer2", "deeplabv3.ResNetMulti.layer3", "deeplabv3.ResNetMulti.layer4", "deeplabv3.ResNetMulti.layer6", "deeplabv3.ResNetMulti.low_layers", "deeplabv3.ResNetMulti.layer5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "x_low_level", "=", "self", ".", "low_layers", "(", "x", ")", "# produce segmap 1", "\n", "", "else", ":", "\n", "            ", "x_low_level", "=", "None", "\n", "", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "x1", "=", "self", ".", "layer5", "(", "x", ")", "# produce segmap 2", "\n", "", "else", ":", "\n", "            ", "x1", "=", "None", "\n", "", "x2", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer6", "(", "x2", ")", "# produce segmap 3", "\n", "return", "x_low_level", ",", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetMulti.get_1x_lr_params_no_scale": [[173, 196], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_no_scale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetMulti.get_10x_lr_params": [[197, 210], ["b.append", "range", "b.append", "deeplabv3.ResNetMulti.layer6.parameters", "len", "deeplabv3.ResNetMulti.layer5.parameters"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetMulti.optim_parameters": [[211, 214], ["deeplabv3.ResNetMulti.get_1x_lr_params_no_scale", "deeplabv3.ResNetMulti.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.get_1x_lr_params_no_scale", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "lr", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_no_scale", "(", ")", ",", "'lr'", ":", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "lr", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleEL.__init__": [[216, 242], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv3.ResNetSingleEL.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "deeplabv3.ResNetSingleEL._make_layer", "deeplabv3.ResNetSingleEL._make_layer", "deeplabv3.ResNetSingleEL._make_layer", "deeplabv3.ResNetSingleEL._make_layer", "deeplabv3.ClassifierModule_GAP", "deeplabv3.ResNetSingleEL.modules", "deeplabv3.ClassifierModule", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.__init__", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL._make_layer", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL._make_layer", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL._make_layer", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "multi_level", ")", ":", "\n", "        ", "self", ".", "multi_level", "=", "multi_level", "\n", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetSingleEL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "self", ".", "layer5", "=", "ClassifierModule", "(", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "#self.layer6 = ClassifierModule(2048, [6, 12, 18, 24], [6, 12, 18, 24], num_classes)", "\n", "", "self", ".", "layer6", "=", "ClassifierModule_GAP", "(", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleEL._make_layer": [[243, 263], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "(", "stride", "!=", "1", "\n", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "\n", "or", "dilation", "==", "2", "\n", "or", "dilation", "==", "4", ")", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleEL.forward": [[264, 279], ["deeplabv3.ResNetSingleEL.conv1", "deeplabv3.ResNetSingleEL.bn1", "deeplabv3.ResNetSingleEL.relu", "deeplabv3.ResNetSingleEL.maxpool", "deeplabv3.ResNetSingleEL.layer1", "deeplabv3.ResNetSingleEL.layer2", "deeplabv3.ResNetSingleEL.layer3", "deeplabv3.ResNetSingleEL.layer4", "deeplabv3.ResNetSingleEL.layer6", "deeplabv3.ResNetSingleEL.layer5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "x1", "=", "self", ".", "layer5", "(", "x", ")", "# produce segmap 1", "\n", "", "else", ":", "\n", "            ", "x1", "=", "None", "\n", "", "x2", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer6", "(", "x2", ")", "# produce segmap 2", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleEL.get_1x_lr_params_no_scale": [[280, 303], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_no_scale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleEL.get_10x_lr_params": [[304, 317], ["b.append", "range", "b.append", "deeplabv3.ResNetSingleEL.layer6.parameters", "len", "deeplabv3.ResNetSingleEL.layer5.parameters"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleEL.optim_parameters": [[318, 321], ["deeplabv3.ResNetSingleEL.get_1x_lr_params_no_scale", "deeplabv3.ResNetSingleEL.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.get_1x_lr_params_no_scale", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "lr", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_no_scale", "(", ")", ",", "'lr'", ":", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "lr", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.__init__": [[323, 349], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv3.ResNetSingleFL.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "deeplabv3.ResNetSingleFL._make_layer", "deeplabv3.ResNetSingleFL._make_layer", "deeplabv3.ResNetSingleFL._make_layer", "deeplabv3.ResNetSingleFL._make_layer", "deeplabv3.ClassifierModule_GAP", "deeplabv3.ResNetSingleFL.modules", "deeplabv3.ClassifierModule", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.__init__", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL._make_layer", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL._make_layer", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL._make_layer", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "multi_level", ")", ":", "\n", "        ", "self", ".", "multi_level", "=", "multi_level", "\n", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetSingleFL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "self", ".", "layer5", "=", "ClassifierModule", "(", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "#self.layer6 = ClassifierModule(2048, [6, 12, 18, 24], [6, 12, 18, 24], num_classes)", "\n", "", "self", ".", "layer6", "=", "ClassifierModule_GAP", "(", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL._make_layer": [[350, 370], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "(", "stride", "!=", "1", "\n", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "\n", "or", "dilation", "==", "2", "\n", "or", "dilation", "==", "4", ")", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.forward": [[371, 386], ["deeplabv3.ResNetSingleFL.conv1", "deeplabv3.ResNetSingleFL.bn1", "deeplabv3.ResNetSingleFL.relu", "deeplabv3.ResNetSingleFL.maxpool", "deeplabv3.ResNetSingleFL.layer1", "deeplabv3.ResNetSingleFL.layer2", "deeplabv3.ResNetSingleFL.layer3", "deeplabv3.ResNetSingleFL.layer4", "deeplabv3.ResNetSingleFL.layer6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "x1", "=", "x", "# produce segmap 1", "\n", "", "else", ":", "\n", "            ", "x1", "=", "None", "\n", "", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x_high", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer6", "(", "x_high", ")", "# produce segmap 2", "\n", "return", "x1", ",", "x_high", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.get_1x_lr_params_no_scale": [[387, 410], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_no_scale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.get_10x_lr_params": [[411, 424], ["b.append", "range", "b.append", "deeplabv3.ResNetSingleFL.layer6.parameters", "len", "deeplabv3.ResNetSingleFL.layer5.parameters"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "if", "self", ".", "multi_level", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.optim_parameters": [[425, 428], ["deeplabv3.ResNetSingleFL.get_1x_lr_params_no_scale", "deeplabv3.ResNetSingleFL.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.get_1x_lr_params_no_scale", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "lr", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_no_scale", "(", ")", ",", "'lr'", ":", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "lr", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.get_deeplab_v3": [[430, 433], ["deeplabv3.ResNetMulti"], "function", ["None"], ["", "", "def", "get_deeplab_v3", "(", "num_classes", "=", "19", ",", "multi_level", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNetMulti", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "multi_level", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.get_deeplab_v3_EL_Adapt": [[434, 437], ["deeplabv3.ResNetSingleEL"], "function", ["None"], ["", "def", "get_deeplab_v3_EL_Adapt", "(", "num_classes", "=", "19", ",", "multi_level", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNetSingleEL", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "multi_level", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.get_deeplab_v3_FL_Adapt": [[438, 441], ["deeplabv3.ResNetSingleFL"], "function", ["None"], ["", "def", "get_deeplab_v3_FL_Adapt", "(", "num_classes", "=", "19", ",", "multi_level", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNetSingleFL", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "multi_level", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.scripts.test_easy.get_arguments": [[25, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Code for evaluation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'optional config file'", ",", ")", "\n", "parser", ".", "add_argument", "(", "'--status'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0 denotes the Feature-Level(FL) adaptation, while 1 denotes the Entropy-Level(EL) adaptation'", ",", ")", "\n", "parser", ".", "add_argument", "(", "\"--exp-suffix\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"optional experiment suffix\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.scripts.test_easy.main": [[39, 113], ["advent.domain_adaptation.config.cfg_from_file", "print", "pprint.pprint", "len", "range", "advent.dataset.Vaihingen.Vaihingen", "torch.utils.data.DataLoader", "evaluate_domain_adaptation", "os.join", "os.makedirs", "os.makedirs", "models.append", "os.environ.get", "os.environ.get", "get_deeplab_v3", "UNet", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.config.cfg_from_file", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.evaluate_domain_adaptation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.get_deeplab_v3"], ["", "def", "main", "(", "config_file", ",", "exp_suffix", ")", ":", "\n", "# LOAD ARGS", "\n", "    ", "assert", "config_file", "is", "not", "None", ",", "'Missing cfg file'", "\n", "cfg_from_file", "(", "config_file", ")", "\n", "\n", "# For feature-level adaptation", "\n", "if", "args", ".", "status", "==", "0", ":", "\n", "        ", "from", "advent", ".", "model", ".", "deeplabv3", "import", "get_deeplab_v3_FL_Adapt", "as", "get_deeplab_v3", "\n", "from", "advent", ".", "domain_adaptation", ".", "eval_UDA_single_FL", "import", "evaluate_domain_adaptation", "\n", "\n", "# For entropy-level adaptation", "\n", "", "if", "args", ".", "status", "==", "1", ":", "\n", "        ", "from", "advent", ".", "model", ".", "deeplabv3", "import", "get_deeplab_v3_EL_Adapt", "as", "get_deeplab_v3", "\n", "from", "advent", ".", "domain_adaptation", ".", "eval_UDA_single_EL", "import", "evaluate_domain_adaptation", "\n", "\n", "# auto-generate exp name if not specified", "\n", "", "if", "cfg", ".", "EXP_NAME", "==", "''", ":", "\n", "        ", "cfg", ".", "EXP_NAME", "=", "f'{cfg.SOURCE}2{cfg.TARGET}_{cfg.TRAIN.MODEL}_{cfg.TRAIN.DA_METHOD}'", "\n", "", "if", "exp_suffix", ":", "\n", "        ", "cfg", ".", "EXP_NAME", "+=", "f'_{exp_suffix}'", "\n", "# auto-generate snapshot path if not specified", "\n", "", "if", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", "==", "''", ":", "\n", "        ", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", "=", "osp", ".", "join", "(", "cfg", ".", "EXP_ROOT_SNAPSHOT", ",", "cfg", ".", "EXP_NAME", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "print", "(", "'Using config:'", ")", "\n", "pprint", ".", "pprint", "(", "cfg", ")", "\n", "# load models", "\n", "models", "=", "[", "]", "\n", "n_models", "=", "len", "(", "cfg", ".", "TEST", ".", "MODEL", ")", "\n", "if", "cfg", ".", "TEST", ".", "MODE", "==", "'best'", ":", "\n", "        ", "assert", "n_models", "==", "1", ",", "'Not yet supported'", "\n", "", "for", "i", "in", "range", "(", "n_models", ")", ":", "\n", "        ", "if", "cfg", ".", "TEST", ".", "MODEL", "[", "i", "]", "==", "'DeepLabv3'", ":", "\n", "            ", "model", "=", "get_deeplab_v3", "(", "num_classes", "=", "cfg", ".", "NUM_CLASSES", ",", "\n", "multi_level", "=", "cfg", ".", "TEST", ".", "MULTI_LEVEL", "[", "i", "]", ")", "\n", "", "elif", "cfg", ".", "TEST", ".", "MODEL", "[", "i", "]", "==", "'UNET'", ":", "\n", "            ", "model", "=", "UNet", "(", "n_channels", "=", "3", ",", "n_classes", "=", "cfg", ".", "NUM_CLASSES", ",", "bilinear", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"Not yet supported {cfg.TEST.MODEL[i]}\"", ")", "\n", "", "models", ".", "append", "(", "model", ")", "\n", "\n", "", "if", "os", ".", "environ", ".", "get", "(", "'ADVENT_DRY_RUN'", ",", "'0'", ")", "==", "'1'", ":", "\n", "        ", "return", "\n", "\n", "# dataloaders", "\n", "#pdb.set_trace()", "\n", "", "test_dataset", "=", "Vaihingen", "(", "root", "=", "cfg", ".", "DATA_DIRECTORY_TARGET", ",", "\n", "list_path", "=", "'/root/code/CCDA_LGFA/ADVENT/advent/dataset/Vaihingen/{}.txt'", ",", "\n", "set", "=", "cfg", ".", "TEST", ".", "SET_TARGET", ",", "\n", "info_path", "=", "cfg", ".", "TEST", ".", "INFO_TARGET", ",", "\n", "crop_size", "=", "cfg", ".", "TEST", ".", "INPUT_SIZE_TARGET", ",", "\n", "mean", "=", "cfg", ".", "TEST", ".", "IMG_MEAN", ",", "\n", "labels_size", "=", "cfg", ".", "TEST", ".", "OUTPUT_SIZE_TARGET", ")", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "test_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "TEST", ".", "BATCH_SIZE_TARGET", ",", "\n", "num_workers", "=", "cfg", ".", "NUM_WORKERS", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ")", "\n", "#-----reverse-----", "\n", "# test_dataset = Potsdam(root=cfg.DATA_DIRECTORY_TARGET,", "\n", "#                          list_path='/root/code/CCDA_LGFA/ADVENT/advent/dataset/PotsdamIRRG/{}.txt',", "\n", "#                          set=cfg.TEST.SET_TARGET,", "\n", "#                          info_path=cfg.TEST.INFO_TARGET,", "\n", "#                          crop_size=cfg.TEST.INPUT_SIZE_TARGET,", "\n", "#                          mean=cfg.TEST.IMG_MEAN)", "\n", "# test_loader = data.DataLoader(test_dataset,", "\n", "#                               batch_size=cfg.TEST.BATCH_SIZE_TARGET,", "\n", "#                               num_workers=cfg.NUM_WORKERS,", "\n", "#                               shuffle=False,", "\n", "#                               pin_memory=True)", "\n", "\n", "# eval", "\n", "evaluate_domain_adaptation", "(", "models", ",", "test_loader", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.scripts.train_easy.get_arguments": [[27, 45], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Easy patches adaptation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'optional config file'", ",", ")", "\n", "parser", ".", "add_argument", "(", "'--status'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0 denotes the Feature-Level(FL) adaptation, while 1 denotes the Entropy-Level(EL) adaptation'", ",", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-train\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"not fixing random seed.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tensorboard\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"visualize training loss with tensorboardX.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--viz-every-iter\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"visualize results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--exp-suffix\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"optional experiment suffix\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.scripts.train_easy.main": [[47, 183], ["train_easy.get_arguments", "print", "print", "advent.domain_adaptation.config.cfg_from_file", "print", "pprint.pprint", "os.exists", "print", "advent.dataset.Potsdam.Potsdam", "torch.utils.data.DataLoader", "advent.dataset.Vaihingen.Vaihingen", "torch.utils.data.DataLoader", "train_domain_adaptation", "os.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "torch.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "os.environ.get", "os.environ.get", "get_deeplab_v3", "torch.load", "open", "yaml.dump", "os.join", "numpy.random.seed", "UNet.state_dict().copy", "UNet.load_state_dict", "UNet.load_state_dict", "UNet", "torch.load", "UNet.load_state_dict", "NotImplementedError", "os.join", "i.split", "UNet.state_dict"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.to_hard.test_patch_wise.get_arguments", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.config.cfg_from_file", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_domain_adaptation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.get_deeplab_v3"], ["", "def", "main", "(", ")", ":", "\n", "# LOAD ARGS", "\n", "    ", "args", "=", "get_arguments", "(", ")", "\n", "print", "(", "'Called with args:'", ")", "\n", "print", "(", "args", ")", "\n", "\n", "# For feature-level adaptation", "\n", "if", "args", ".", "status", "==", "0", ":", "\n", "        ", "from", "advent", ".", "model", ".", "deeplabv3", "import", "get_deeplab_v3_FL_Adapt", "as", "get_deeplab_v3", "\n", "from", "advent", ".", "domain_adaptation", ".", "train_UDA_single_FL", "import", "train_domain_adaptation", "\n", "\n", "# For entropy-level adaptation", "\n", "", "if", "args", ".", "status", "==", "1", ":", "\n", "        ", "from", "advent", ".", "model", ".", "deeplabv3", "import", "get_deeplab_v3_EL_Adapt", "as", "get_deeplab_v3", "\n", "from", "advent", ".", "domain_adaptation", ".", "train_UDA_single_EL", "import", "train_domain_adaptation", "\n", "\n", "", "assert", "args", ".", "cfg", "is", "not", "None", ",", "'Missing cfg file'", "\n", "cfg_from_file", "(", "args", ".", "cfg", ")", "\n", "# auto-generate exp name if not specified", "\n", "if", "cfg", ".", "EXP_NAME", "==", "''", ":", "\n", "        ", "cfg", ".", "EXP_NAME", "=", "f'{cfg.SOURCE}2{cfg.TARGET}_{cfg.TRAIN.MODEL}_{cfg.TRAIN.DA_METHOD}'", "\n", "\n", "", "if", "args", ".", "exp_suffix", ":", "\n", "        ", "cfg", ".", "EXP_NAME", "+=", "f'_{args.exp_suffix}'", "\n", "# auto-generate snapshot path if not specified", "\n", "", "if", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", "==", "''", ":", "\n", "        ", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", "=", "osp", ".", "join", "(", "cfg", ".", "EXP_ROOT_SNAPSHOT", ",", "cfg", ".", "EXP_NAME", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ",", "exist_ok", "=", "True", ")", "\n", "# tensorboard", "\n", "", "if", "args", ".", "tensorboard", ":", "\n", "        ", "if", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", "==", "''", ":", "\n", "            ", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", "=", "osp", ".", "join", "(", "cfg", ".", "EXP_ROOT_LOGS", ",", "'tensorboard'", ",", "cfg", ".", "EXP_NAME", ")", "\n", "", "os", ".", "makedirs", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ",", "exist_ok", "=", "True", ")", "\n", "if", "args", ".", "viz_every_iter", "is", "not", "None", ":", "\n", "            ", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "=", "args", ".", "viz_every_iter", "\n", "", "", "else", ":", "\n", "        ", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", "=", "''", "\n", "", "print", "(", "'Using config:'", ")", "\n", "pprint", ".", "pprint", "(", "cfg", ")", "\n", "\n", "# INIT", "\n", "_init_fn", "=", "None", "\n", "if", "not", "args", ".", "random_train", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", ")", "\n", "np", ".", "random", ".", "seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", ")", "\n", "random", ".", "seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", ")", "\n", "\n", "def", "_init_fn", "(", "worker_id", ")", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", "+", "worker_id", ")", "\n", "\n", "", "", "if", "os", ".", "environ", ".", "get", "(", "'ADVENT_DRY_RUN'", ",", "'0'", ")", "==", "'1'", ":", "\n", "        ", "return", "\n", "\n", "# LOAD SEGMENTATION NET", "\n", "", "assert", "osp", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "RESTORE_FROM", ")", ",", "f'Missing init model {cfg.TRAIN.RESTORE_FROM}'", "\n", "if", "cfg", ".", "TRAIN", ".", "MODEL", "==", "'DeepLabv3'", ":", "\n", "        ", "model", "=", "get_deeplab_v3", "(", "num_classes", "=", "cfg", ".", "NUM_CLASSES", ",", "multi_level", "=", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ")", "\n", "saved_state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "TRAIN", ".", "RESTORE_FROM", ")", "\n", "if", "'DeepLab_resnet_pretrained_imagenet'", "in", "cfg", ".", "TRAIN", ".", "RESTORE_FROM", ":", "\n", "            ", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "                ", "i_parts", "=", "i", ".", "split", "(", "'.'", ")", "\n", "if", "not", "i_parts", "[", "1", "]", "==", "'layer5'", ":", "\n", "                    ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "new_params", ",", "False", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "saved_state_dict", ",", "False", ")", "\n", "", "", "elif", "cfg", ".", "TRAIN", ".", "MODEL", "==", "'UNET'", ":", "\n", "        ", "model", "=", "UNet", "(", "n_channels", "=", "3", ",", "n_classes", "=", "cfg", ".", "NUM_CLASSES", ",", "bilinear", "=", "True", ")", "\n", "saved_state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "TRAIN", ".", "RESTORE_FROM", ")", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ",", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported {cfg.TRAIN.MODEL}\"", ")", "\n", "", "print", "(", "'Model loaded'", ")", "\n", "\n", "# DATALOADERS", "\n", "source_dataset", "=", "Potsdam", "(", "root", "=", "cfg", ".", "DATA_DIRECTORY_SOURCE", ",", "\n", "list_path", "=", "cfg", ".", "DATA_LIST_SOURCE", ",", "\n", "set", "=", "cfg", ".", "TRAIN", ".", "SET_SOURCE", ",", "\n", "max_iters", "=", "cfg", ".", "TRAIN", ".", "MAX_ITERS", "*", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_SOURCE", ",", "\n", "crop_size", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", ",", "\n", "mean", "=", "cfg", ".", "TRAIN", ".", "IMG_MEAN", ")", "\n", "source_loader", "=", "data", ".", "DataLoader", "(", "source_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_SOURCE", ",", "\n", "num_workers", "=", "cfg", ".", "NUM_WORKERS", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "worker_init_fn", "=", "_init_fn", ")", "\n", "\n", "target_dataset", "=", "Vaihingen", "(", "root", "=", "cfg", ".", "DATA_DIRECTORY_TARGET", ",", "\n", "list_path", "=", "cfg", ".", "DATA_LIST_TARGET", ",", "\n", "set", "=", "cfg", ".", "TRAIN", ".", "SET_TARGET", ",", "\n", "info_path", "=", "cfg", ".", "TRAIN", ".", "INFO_TARGET", ",", "\n", "max_iters", "=", "cfg", ".", "TRAIN", ".", "MAX_ITERS", "*", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_TARGET", ",", "\n", "crop_size", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", ",", "\n", "mean", "=", "cfg", ".", "TRAIN", ".", "IMG_MEAN", ")", "\n", "target_loader", "=", "data", ".", "DataLoader", "(", "target_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_TARGET", ",", "\n", "num_workers", "=", "cfg", ".", "NUM_WORKERS", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "worker_init_fn", "=", "_init_fn", ")", "\n", "\n", "#---==reverse-----", "\n", "# source_dataset = Vaihingen(root=cfg.DATA_DIRECTORY_SOURCE,", "\n", "#                          list_path=cfg.DATA_LIST_SOURCE,", "\n", "#                          set=cfg.TRAIN.SET_SOURCE,", "\n", "#                          max_iters=cfg.TRAIN.MAX_ITERS * cfg.TRAIN.BATCH_SIZE_SOURCE,", "\n", "#                          crop_size=cfg.TRAIN.INPUT_SIZE_SOURCE,", "\n", "#                          mean=cfg.TRAIN.IMG_MEAN)", "\n", "# source_loader = data.DataLoader(source_dataset,", "\n", "#                                 batch_size=cfg.TRAIN.BATCH_SIZE_SOURCE,", "\n", "#                                 num_workers=cfg.NUM_WORKERS,", "\n", "#                                 shuffle=True,", "\n", "#                                 pin_memory=True,", "\n", "#                                 worker_init_fn=_init_fn)", "\n", "#", "\n", "# target_dataset = Potsdam(root=cfg.DATA_DIRECTORY_TARGET,", "\n", "#                            list_path=cfg.DATA_LIST_TARGET,", "\n", "#                            set=cfg.TRAIN.SET_TARGET,", "\n", "#                            max_iters=cfg.TRAIN.MAX_ITERS * cfg.TRAIN.BATCH_SIZE_TARGET,", "\n", "#                            crop_size=cfg.TRAIN.INPUT_SIZE_TARGET,", "\n", "#                            mean=cfg.TRAIN.IMG_MEAN)", "\n", "# target_loader = data.DataLoader(target_dataset,", "\n", "#                                 batch_size=cfg.TRAIN.BATCH_SIZE_TARGET,", "\n", "#                                 num_workers=cfg.NUM_WORKERS,", "\n", "#                                 shuffle=True,", "\n", "#                                 pin_memory=True,", "\n", "#                                 worker_init_fn=_init_fn)", "\n", "\n", "with", "open", "(", "osp", ".", "join", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ",", "'train_cfg.yml'", ")", ",", "'w'", ")", "as", "yaml_file", ":", "\n", "        ", "yaml", ".", "dump", "(", "cfg", ",", "yaml_file", ",", "default_flow_style", "=", "False", ")", "\n", "\n", "# UDA TRAINING", "\n", "", "train_domain_adaptation", "(", "model", ",", "source_loader", ",", "target_loader", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_FL.evaluate_domain_adaptation": [[21, 39], ["torch.nn.Upsample", "eval_UDA_single_FL.eval_single", "eval_UDA_single_FL.eval_best", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.eval_single", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.eval_best"], ["def", "evaluate_domain_adaptation", "(", "models", ",", "test_loader", ",", "cfg", ",", "\n", "fixed_test_size", "=", "True", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "    ", "device", "=", "cfg", ".", "GPU_ID", "\n", "interp", "=", "None", "\n", "if", "fixed_test_size", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "cfg", ".", "TEST", ".", "OUTPUT_SIZE_TARGET", "[", "1", "]", ",", "cfg", ".", "TEST", ".", "OUTPUT_SIZE_TARGET", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "# eval", "\n", "", "if", "cfg", ".", "TEST", ".", "MODE", "==", "'single'", ":", "\n", "        ", "eval_single", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "fixed_test_size", ",", "\n", "verbose", ")", "\n", "", "elif", "cfg", ".", "TEST", ".", "MODE", "==", "'best'", ":", "\n", "        ", "eval_best", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "fixed_test_size", ",", "\n", "verbose", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported test mode {cfg.TEST.MODE}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_FL.eval_single": [[41, 71], ["zip", "numpy.zeros", "tqdm.tqdm", "advent.utils.func.per_class_iu", "print", "len", "len", "eval_UDA_single_FL.load_checkpoint_for_evaluation", "enumerate", "advent.utils.func.fast_hist", "eval_UDA_single_FL.display_stats", "torch.nn.Upsample", "torch.no_grad", "zip", "np.argmax.transpose", "numpy.argmax", "label.numpy", "label.flatten", "np.argmax.flatten", "nn.Upsample.cpu().data[].numpy", "round", "model", "image.cuda", "numpy.nanmean", "nn.Upsample.cpu", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.load_checkpoint_for_evaluation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.fast_hist", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.display_stats"], ["", "", "def", "eval_single", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "\n", "fixed_test_size", ",", "verbose", ")", ":", "\n", "    ", "assert", "len", "(", "cfg", ".", "TEST", ".", "RESTORE_FROM", ")", "==", "len", "(", "models", ")", ",", "'Number of models are not matched'", "\n", "for", "checkpoint", ",", "model", "in", "zip", "(", "cfg", ".", "TEST", ".", "RESTORE_FROM", ",", "models", ")", ":", "\n", "        ", "load_checkpoint_for_evaluation", "(", "model", ",", "checkpoint", ",", "device", ")", "\n", "# eval", "\n", "", "hist", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "NUM_CLASSES", ",", "cfg", ".", "NUM_CLASSES", ")", ")", "\n", "for", "index", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "test_loader", ")", ")", ":", "\n", "        ", "image", ",", "label", ",", "_", ",", "name", "=", "batch", "\n", "if", "not", "fixed_test_size", ":", "\n", "            ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "None", "\n", "for", "model", ",", "model_weight", "in", "zip", "(", "models", ",", "cfg", ".", "TEST", ".", "MODEL_WEIGHT", ")", ":", "\n", "                ", "pred_main", "=", "model", "(", "image", ".", "cuda", "(", "device", ")", ")", "[", "2", "]", "\n", "output_", "=", "interp", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "if", "output", "is", "None", ":", "\n", "                    ", "output", "=", "model_weight", "*", "output_", "\n", "", "else", ":", "\n", "                    ", "output", "+=", "model_weight", "*", "output_", "\n", "", "", "assert", "output", "is", "not", "None", ",", "'Output is None'", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", "\n", "", "label", "=", "label", ".", "numpy", "(", ")", "[", "0", "]", "\n", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", ",", "cfg", ".", "NUM_CLASSES", ")", "\n", "", "inters_over_union_classes", "=", "per_class_iu", "(", "hist", ")", "\n", "print", "(", "f'mIoU = \\t{round(np.nanmean(inters_over_union_classes) * 100, 2)}'", ")", "\n", "if", "verbose", ":", "\n", "        ", "display_stats", "(", "cfg", ",", "test_loader", ".", "dataset", ".", "class_names", ",", "inters_over_union_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_FL.eval_best": [[73, 152], ["os.exists", "os.join", "os.exists", "range", "len", "advent.utils.serialization.pickle_load", "os.join", "print", "round", "round", "print", "print", "print", "print", "os.exists", "advent.utils.serialization.pickle_load.keys", "eval_UDA_single_FL.load_checkpoint_for_evaluation", "numpy.zeros", "iter", "tqdm.tqdm", "advent.utils.func.dice_coefficient", "advent.utils.func.per_class_iu", "advent.utils.serialization.pickle_dump", "eval_UDA_single_FL.display_stats", "print", "range", "next", "np.argmax.flatten", "label.flatten", "sklearn.metrics.f1_score", "advent.utils.func.fast_hist", "numpy.nanmean", "numpy.nanmean", "os.exists", "time.sleep", "len", "torch.nn.Upsample", "torch.no_grad", "nn.Upsample.cpu().data[].numpy", "np.argmax.transpose", "numpy.argmax", "label.numpy", "label.flatten", "np.argmax.flatten", "print", "print", "image.cuda", "len", "len", "numpy.nanmean", "numpy.nanmean", "nn.Upsample.cpu", "advent.utils.func.per_class_iu", "advent.utils.func.dice_coefficient", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.pickle_load", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.load_checkpoint_for_evaluation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.dice_coefficient", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.pickle_dump", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.display_stats", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.fast_hist", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.dice_coefficient"], ["", "", "def", "eval_best", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "\n", "fixed_test_size", ",", "verbose", ")", ":", "\n", "    ", "assert", "len", "(", "models", ")", "==", "1", ",", "'Not yet supported multi models in this mode'", "\n", "assert", "osp", ".", "exists", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ")", ",", "'SNAPSHOT_DIR is not found'", "\n", "start_iter", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_STEP", "\n", "step", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_STEP", "\n", "max_iter", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_MAXITER", "\n", "cache_path", "=", "osp", ".", "join", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ",", "'all_res.pkl'", ")", "\n", "if", "osp", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "all_res", "=", "pickle_load", "(", "cache_path", ")", "\n", "", "else", ":", "\n", "        ", "all_res", "=", "{", "}", "\n", "", "cur_best_miou", "=", "-", "1", "\n", "cur_best_model", "=", "''", "\n", "for", "i_iter", "in", "range", "(", "start_iter", ",", "max_iter", "+", "1", ",", "step", ")", ":", "\n", "        ", "restore_from", "=", "osp", ".", "join", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ",", "f'model_{i_iter}.pth'", ")", "\n", "if", "not", "osp", ".", "exists", "(", "restore_from", ")", ":", "\n", "# continue", "\n", "            ", "if", "cfg", ".", "TEST", ".", "WAIT_MODEL", ":", "\n", "                ", "print", "(", "'Waiting for model..!'", ")", "\n", "while", "not", "osp", ".", "exists", "(", "restore_from", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "5", ")", "\n", "", "", "", "print", "(", "\"Evaluating model\"", ",", "restore_from", ")", "\n", "if", "i_iter", "not", "in", "all_res", ".", "keys", "(", ")", ":", "\n", "            ", "load_checkpoint_for_evaluation", "(", "models", "[", "0", "]", ",", "restore_from", ",", "device", ")", "\n", "# eval", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "NUM_CLASSES", ",", "cfg", ".", "NUM_CLASSES", ")", ")", "\n", "# for index, batch in enumerate(test_loader):", "\n", "#     image, _, _, name = batch", "\n", "init_f1_score", "=", "0", "\n", "instance_num", "=", "0", "\n", "test_iter", "=", "iter", "(", "test_loader", ")", "\n", "for", "index", "in", "tqdm", "(", "range", "(", "len", "(", "test_loader", ")", ")", ")", ":", "\n", "                ", "image", ",", "label", ",", "_", ",", "name", "=", "next", "(", "test_iter", ")", "\n", "if", "not", "fixed_test_size", ":", "\n", "                    ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "pred_main", "=", "models", "[", "0", "]", "(", "image", ".", "cuda", "(", "device", ")", ")", "[", "2", "]", "\n", "# pred_main = models[0](image.cuda(device))[2] for feature-level adaptation", "\n", "# pred_main = models[0](image.cuda(device))[1] for entropy-level adaptation", "\n", "output", "=", "interp", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", "\n", "", "label", "=", "label", ".", "numpy", "(", ")", "[", "0", "]", "\n", "# ---Adding Recall and Precision---", "\n", "output_one_dim", "=", "output", ".", "flatten", "(", ")", "\n", "label_one_dim", "=", "label", ".", "flatten", "(", ")", "\n", "f1_all", "=", "f1_score", "(", "label_one_dim", ",", "output_one_dim", ",", "average", "=", "'macro'", ")", "\n", "#f1_all = class_wise_f1.mean()", "\n", "init_f1_score", "=", "init_f1_score", "+", "f1_all", "\n", "instance_num", "+=", "1", "\n", "#p_class, r_class, f_class, support_micro = \\", "\n", "#    precision_recall_fscore_support(label_one_dim, output_one_dim, labels=[1, 2, 3, 4, 5, 6], average=None)", "\n", "#f1_all_2 = f_class.mean()", "\n", "# ---End Recall and Precision---", "\n", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", ",", "cfg", ".", "NUM_CLASSES", ")", "\n", "if", "verbose", "and", "index", ">", "0", "and", "index", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "\n", "index", ",", "len", "(", "test_loader", ")", ",", "100", "*", "np", ".", "nanmean", "(", "per_class_iu", "(", "hist", ")", ")", ")", ")", "\n", "print", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "\n", "index", ",", "len", "(", "test_loader", ")", ",", "100", "*", "np", ".", "nanmean", "(", "dice_coefficient", "(", "hist", ")", ")", ")", ")", "\n", "", "", "per_class_f1_score", "=", "dice_coefficient", "(", "hist", ")", "\n", "inters_over_union_classes", "=", "per_class_iu", "(", "hist", ")", "\n", "all_res", "[", "i_iter", "]", "=", "inters_over_union_classes", "\n", "pickle_dump", "(", "all_res", ",", "cache_path", ")", "\n", "", "else", ":", "\n", "            ", "inters_over_union_classes", "=", "all_res", "[", "i_iter", "]", "\n", "", "computed_miou", "=", "round", "(", "np", ".", "nanmean", "(", "inters_over_union_classes", ")", "*", "100", ",", "2", ")", "\n", "computed_f1score", "=", "round", "(", "np", ".", "nanmean", "(", "per_class_f1_score", ")", "*", "100", ",", "2", ")", "\n", "if", "cur_best_miou", "<", "computed_miou", ":", "\n", "            ", "cur_best_miou", "=", "computed_miou", "\n", "cur_best_model", "=", "restore_from", "\n", "", "print", "(", "'\\tCurrent mIoU:'", ",", "computed_miou", ")", "\n", "print", "(", "'\\tCurrent F1 score:'", ",", "computed_f1score", ")", "\n", "print", "(", "'\\tCurrent best model:'", ",", "cur_best_model", ")", "\n", "print", "(", "'\\tCurrent best mIoU:'", ",", "cur_best_miou", ")", "\n", "if", "verbose", ":", "\n", "            ", "display_stats", "(", "cfg", ",", "test_loader", ".", "dataset", ".", "class_names", ",", "inters_over_union_classes", ",", "per_class_f1_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_FL.load_checkpoint_for_evaluation": [[154, 159], ["torch.load", "model.load_state_dict", "model.eval", "model.cuda"], "function", ["None"], ["", "", "", "def", "load_checkpoint_for_evaluation", "(", "model", ",", "checkpoint", ",", "device", ")", ":", "\n", "    ", "saved_state_dict", "=", "torch", ".", "load", "(", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_FL.display_stats": [[161, 167], ["range", "print", "print", "str", "str", "round", "round"], "function", ["None"], ["", "def", "display_stats", "(", "cfg", ",", "name_classes", ",", "inters_over_union_classes", ",", "per_class_f1_score", ")", ":", "\n", "    ", "for", "ind_class", "in", "range", "(", "cfg", ".", "NUM_CLASSES", ")", ":", "\n", "        ", "print", "(", "name_classes", "[", "ind_class", "]", "\n", "+", "'\\t'", "+", "str", "(", "round", "(", "inters_over_union_classes", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "print", "(", "name_classes", "[", "ind_class", "]", "\n", "+", "'\\t'", "+", "str", "(", "round", "(", "per_class_f1_score", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.config._merge_a_into_b": [[145, 176], ["a.items", "type", "type", "KeyError", "type", "isinstance", "type", "numpy.array", "ValueError", "config._merge_a_into_b", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.config._merge_a_into_b"], ["def", "_merge_a_into_b", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n    options in b whenever they are also specified in a.\n    \"\"\"", "\n", "if", "type", "(", "a", ")", "is", "not", "EasyDict", ":", "\n", "        ", "return", "\n", "\n", "", "for", "k", ",", "v", "in", "a", ".", "items", "(", ")", ":", "\n", "# a must specify keys that are in b", "\n", "# if not b.has_key(k):", "\n", "        ", "if", "k", "not", "in", "b", ":", "\n", "            ", "raise", "KeyError", "(", "f'{k} is not a valid config key'", ")", "\n", "\n", "# the types must match, too", "\n", "", "old_type", "=", "type", "(", "b", "[", "k", "]", ")", "\n", "if", "old_type", "is", "not", "type", "(", "v", ")", ":", "\n", "            ", "if", "isinstance", "(", "b", "[", "k", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "v", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "b", "[", "k", "]", ".", "dtype", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f'Type mismatch ({type(b[k])} vs. {type(v)}) '", "\n", "f'for config key: {k}'", ")", "\n", "\n", "# recursively merge dicts", "\n", "", "", "if", "type", "(", "v", ")", "is", "EasyDict", ":", "\n", "            ", "try", ":", "\n", "                ", "_merge_a_into_b", "(", "a", "[", "k", "]", ",", "b", "[", "k", "]", ")", "\n", "", "except", "Exception", ":", "\n", "                ", "print", "(", "f'Error under config key: {k}'", ")", "\n", "raise", "\n", "", "", "else", ":", "\n", "            ", "b", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.config.cfg_from_file": [[178, 183], ["easydict.EasyDict", "config._merge_a_into_b", "advent.utils.serialization.yaml_load"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.config._merge_a_into_b", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.yaml_load"], ["", "", "", "def", "cfg_from_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Load a config file and merge it into the default options.\n    \"\"\"", "\n", "yaml_cfg", "=", "EasyDict", "(", "yaml_load", "(", "filename", ")", ")", "\n", "_merge_a_into_b", "(", "yaml_cfg", ",", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_EL.evaluate_domain_adaptation": [[20, 38], ["torch.nn.Upsample", "eval_UDA_single_EL.eval_single", "eval_UDA_single_EL.eval_best", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.eval_single", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.eval_best"], ["def", "evaluate_domain_adaptation", "(", "models", ",", "test_loader", ",", "cfg", ",", "\n", "fixed_test_size", "=", "True", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "    ", "device", "=", "cfg", ".", "GPU_ID", "\n", "interp", "=", "None", "\n", "if", "fixed_test_size", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "cfg", ".", "TEST", ".", "OUTPUT_SIZE_TARGET", "[", "1", "]", ",", "cfg", ".", "TEST", ".", "OUTPUT_SIZE_TARGET", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "# eval", "\n", "", "if", "cfg", ".", "TEST", ".", "MODE", "==", "'single'", ":", "\n", "        ", "eval_single", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "fixed_test_size", ",", "\n", "verbose", ")", "\n", "", "elif", "cfg", ".", "TEST", ".", "MODE", "==", "'best'", ":", "\n", "        ", "eval_best", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "fixed_test_size", ",", "\n", "verbose", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported test mode {cfg.TEST.MODE}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_EL.eval_single": [[40, 70], ["zip", "numpy.zeros", "tqdm.tqdm", "advent.utils.func.per_class_iu", "print", "len", "len", "eval_UDA_single_EL.load_checkpoint_for_evaluation", "enumerate", "advent.utils.func.fast_hist", "eval_UDA_single_EL.display_stats", "torch.nn.Upsample", "torch.no_grad", "zip", "np.argmax.transpose", "numpy.argmax", "label.numpy", "label.flatten", "np.argmax.flatten", "nn.Upsample.cpu().data[].numpy", "round", "model", "image.cuda", "numpy.nanmean", "nn.Upsample.cpu", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.load_checkpoint_for_evaluation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.fast_hist", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.display_stats"], ["", "", "def", "eval_single", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "\n", "fixed_test_size", ",", "verbose", ")", ":", "\n", "    ", "assert", "len", "(", "cfg", ".", "TEST", ".", "RESTORE_FROM", ")", "==", "len", "(", "models", ")", ",", "'Number of models are not matched'", "\n", "for", "checkpoint", ",", "model", "in", "zip", "(", "cfg", ".", "TEST", ".", "RESTORE_FROM", ",", "models", ")", ":", "\n", "        ", "load_checkpoint_for_evaluation", "(", "model", ",", "checkpoint", ",", "device", ")", "\n", "# eval", "\n", "", "hist", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "NUM_CLASSES", ",", "cfg", ".", "NUM_CLASSES", ")", ")", "\n", "for", "index", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "test_loader", ")", ")", ":", "\n", "        ", "image", ",", "label", ",", "_", ",", "name", "=", "batch", "\n", "if", "not", "fixed_test_size", ":", "\n", "            ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "None", "\n", "for", "model", ",", "model_weight", "in", "zip", "(", "models", ",", "cfg", ".", "TEST", ".", "MODEL_WEIGHT", ")", ":", "\n", "                ", "pred_main", "=", "model", "(", "image", ".", "cuda", "(", "device", ")", ")", "[", "1", "]", "\n", "output_", "=", "interp", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "if", "output", "is", "None", ":", "\n", "                    ", "output", "=", "model_weight", "*", "output_", "\n", "", "else", ":", "\n", "                    ", "output", "+=", "model_weight", "*", "output_", "\n", "", "", "assert", "output", "is", "not", "None", ",", "'Output is None'", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", "\n", "", "label", "=", "label", ".", "numpy", "(", ")", "[", "0", "]", "\n", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", ",", "cfg", ".", "NUM_CLASSES", ")", "\n", "", "inters_over_union_classes", "=", "per_class_iu", "(", "hist", ")", "\n", "print", "(", "f'mIoU = \\t{round(np.nanmean(inters_over_union_classes) * 100, 2)}'", ")", "\n", "if", "verbose", ":", "\n", "        ", "display_stats", "(", "cfg", ",", "test_loader", ".", "dataset", ".", "class_names", ",", "inters_over_union_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_EL.eval_best": [[72, 134], ["os.exists", "os.join", "os.exists", "range", "len", "advent.utils.serialization.pickle_load", "os.join", "print", "round", "round", "print", "print", "print", "print", "os.exists", "advent.utils.serialization.pickle_load.keys", "eval_UDA_single_EL.load_checkpoint_for_evaluation", "numpy.zeros", "iter", "tqdm.tqdm", "advent.utils.func.dice_coefficient", "advent.utils.func.per_class_iu", "advent.utils.serialization.pickle_dump", "eval_UDA_single_EL.display_stats", "print", "range", "next", "advent.utils.func.fast_hist", "numpy.nanmean", "numpy.nanmean", "os.exists", "time.sleep", "len", "torch.nn.Upsample", "torch.no_grad", "nn.Upsample.cpu().data[].numpy", "np.argmax.transpose", "numpy.argmax", "label.numpy", "label.flatten", "np.argmax.flatten", "print", "image.cuda", "len", "numpy.nanmean", "nn.Upsample.cpu", "advent.utils.func.per_class_iu", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.pickle_load", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.load_checkpoint_for_evaluation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.dice_coefficient", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.pickle_dump", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.display_stats", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.fast_hist", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu"], ["", "", "def", "eval_best", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "\n", "fixed_test_size", ",", "verbose", ")", ":", "\n", "    ", "assert", "len", "(", "models", ")", "==", "1", ",", "'Not yet supported multi models in this mode'", "\n", "assert", "osp", ".", "exists", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ")", ",", "'SNAPSHOT_DIR is not found'", "\n", "start_iter", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_STEP", "\n", "step", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_STEP", "\n", "max_iter", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_MAXITER", "\n", "cache_path", "=", "osp", ".", "join", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ",", "'all_res.pkl'", ")", "\n", "if", "osp", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "all_res", "=", "pickle_load", "(", "cache_path", ")", "\n", "", "else", ":", "\n", "        ", "all_res", "=", "{", "}", "\n", "", "cur_best_miou", "=", "-", "1", "\n", "cur_best_model", "=", "''", "\n", "for", "i_iter", "in", "range", "(", "start_iter", ",", "max_iter", "+", "1", ",", "step", ")", ":", "\n", "        ", "restore_from", "=", "osp", ".", "join", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ",", "f'model_{i_iter}.pth'", ")", "\n", "if", "not", "osp", ".", "exists", "(", "restore_from", ")", ":", "\n", "# continue", "\n", "            ", "if", "cfg", ".", "TEST", ".", "WAIT_MODEL", ":", "\n", "                ", "print", "(", "'Waiting for model..!'", ")", "\n", "while", "not", "osp", ".", "exists", "(", "restore_from", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "5", ")", "\n", "", "", "", "print", "(", "\"Evaluating model\"", ",", "restore_from", ")", "\n", "if", "i_iter", "not", "in", "all_res", ".", "keys", "(", ")", ":", "\n", "            ", "load_checkpoint_for_evaluation", "(", "models", "[", "0", "]", ",", "restore_from", ",", "device", ")", "\n", "# eval", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "NUM_CLASSES", ",", "cfg", ".", "NUM_CLASSES", ")", ")", "\n", "# for index, batch in enumerate(test_loader):", "\n", "#     image, _, _, name = batch", "\n", "test_iter", "=", "iter", "(", "test_loader", ")", "\n", "for", "index", "in", "tqdm", "(", "range", "(", "len", "(", "test_loader", ")", ")", ")", ":", "\n", "                ", "image", ",", "label", ",", "_", ",", "name", "=", "next", "(", "test_iter", ")", "\n", "if", "not", "fixed_test_size", ":", "\n", "                    ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "pred_main", "=", "models", "[", "0", "]", "(", "image", ".", "cuda", "(", "device", ")", ")", "[", "1", "]", "\n", "output", "=", "interp", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", "\n", "", "label", "=", "label", ".", "numpy", "(", ")", "[", "0", "]", "\n", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", ",", "cfg", ".", "NUM_CLASSES", ")", "\n", "if", "verbose", "and", "index", ">", "0", "and", "index", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "\n", "index", ",", "len", "(", "test_loader", ")", ",", "100", "*", "np", ".", "nanmean", "(", "per_class_iu", "(", "hist", ")", ")", ")", ")", "\n", "", "", "per_class_f1_score", "=", "dice_coefficient", "(", "hist", ")", "\n", "inters_over_union_classes", "=", "per_class_iu", "(", "hist", ")", "\n", "all_res", "[", "i_iter", "]", "=", "inters_over_union_classes", "\n", "pickle_dump", "(", "all_res", ",", "cache_path", ")", "\n", "", "else", ":", "\n", "            ", "inters_over_union_classes", "=", "all_res", "[", "i_iter", "]", "\n", "", "computed_miou", "=", "round", "(", "np", ".", "nanmean", "(", "inters_over_union_classes", ")", "*", "100", ",", "2", ")", "\n", "computed_f1score", "=", "round", "(", "np", ".", "nanmean", "(", "per_class_f1_score", ")", "*", "100", ",", "2", ")", "\n", "if", "cur_best_miou", "<", "computed_miou", ":", "\n", "            ", "cur_best_miou", "=", "computed_miou", "\n", "cur_best_model", "=", "restore_from", "\n", "", "print", "(", "'\\tCurrent mIoU:'", ",", "computed_miou", ")", "\n", "print", "(", "'\\tCurrent F1 score:'", ",", "computed_f1score", ")", "\n", "print", "(", "'\\tCurrent best model:'", ",", "cur_best_model", ")", "\n", "print", "(", "'\\tCurrent best mIoU:'", ",", "cur_best_miou", ")", "\n", "if", "verbose", ":", "\n", "            ", "display_stats", "(", "cfg", ",", "test_loader", ".", "dataset", ".", "class_names", ",", "inters_over_union_classes", ",", "per_class_f1_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_EL.load_checkpoint_for_evaluation": [[136, 141], ["torch.load", "model.load_state_dict", "model.eval", "model.cuda"], "function", ["None"], ["", "", "", "def", "load_checkpoint_for_evaluation", "(", "model", ",", "checkpoint", ",", "device", ")", ":", "\n", "    ", "saved_state_dict", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_EL.display_stats": [[143, 149], ["range", "print", "print", "str", "str", "round", "round"], "function", ["None"], ["", "def", "display_stats", "(", "cfg", ",", "name_classes", ",", "inters_over_union_classes", ",", "per_class_f1_score", ")", ":", "\n", "    ", "for", "ind_class", "in", "range", "(", "cfg", ".", "NUM_CLASSES", ")", ":", "\n", "        ", "print", "(", "name_classes", "[", "ind_class", "]", "\n", "+", "'\\t'", "+", "str", "(", "round", "(", "inters_over_union_classes", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "print", "(", "name_classes", "[", "ind_class", "]", "\n", "+", "'\\t'", "+", "str", "(", "round", "(", "per_class_f1_score", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_cls.evaluate_domain_adaptation": [[20, 38], ["torch.nn.Upsample", "eval_UDA_single_cls.eval_single", "eval_UDA_single_cls.eval_best", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.eval_single", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.eval_best"], ["def", "evaluate_domain_adaptation", "(", "models", ",", "test_loader", ",", "cfg", ",", "\n", "fixed_test_size", "=", "True", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "    ", "device", "=", "cfg", ".", "GPU_ID", "\n", "interp", "=", "None", "\n", "if", "fixed_test_size", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "cfg", ".", "TEST", ".", "OUTPUT_SIZE_TARGET", "[", "1", "]", ",", "cfg", ".", "TEST", ".", "OUTPUT_SIZE_TARGET", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "# eval", "\n", "", "if", "cfg", ".", "TEST", ".", "MODE", "==", "'single'", ":", "\n", "        ", "eval_single", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "fixed_test_size", ",", "\n", "verbose", ")", "\n", "", "elif", "cfg", ".", "TEST", ".", "MODE", "==", "'best'", ":", "\n", "        ", "eval_best", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "fixed_test_size", ",", "\n", "verbose", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported test mode {cfg.TEST.MODE}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_cls.eval_single": [[40, 70], ["zip", "numpy.zeros", "tqdm.tqdm", "advent.utils.func.per_class_iu", "print", "len", "len", "eval_UDA_single_cls.load_checkpoint_for_evaluation", "enumerate", "advent.utils.func.fast_hist", "eval_UDA_single_cls.display_stats", "torch.nn.Upsample", "torch.no_grad", "zip", "np.argmax.transpose", "numpy.argmax", "label.numpy", "label.flatten", "np.argmax.flatten", "nn.Upsample.cpu().data[].numpy", "round", "model", "image.cuda", "numpy.nanmean", "nn.Upsample.cpu", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.load_checkpoint_for_evaluation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.fast_hist", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.display_stats"], ["", "", "def", "eval_single", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "\n", "fixed_test_size", ",", "verbose", ")", ":", "\n", "    ", "assert", "len", "(", "cfg", ".", "TEST", ".", "RESTORE_FROM", ")", "==", "len", "(", "models", ")", ",", "'Number of models are not matched'", "\n", "for", "checkpoint", ",", "model", "in", "zip", "(", "cfg", ".", "TEST", ".", "RESTORE_FROM", ",", "models", ")", ":", "\n", "        ", "load_checkpoint_for_evaluation", "(", "model", ",", "checkpoint", ",", "device", ")", "\n", "# eval", "\n", "", "hist", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "NUM_CLASSES", ",", "cfg", ".", "NUM_CLASSES", ")", ")", "\n", "for", "index", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "test_loader", ")", ")", ":", "\n", "        ", "image", ",", "label", ",", "_", ",", "name", "=", "batch", "\n", "if", "not", "fixed_test_size", ":", "\n", "            ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "None", "\n", "for", "model", ",", "model_weight", "in", "zip", "(", "models", ",", "cfg", ".", "TEST", ".", "MODEL_WEIGHT", ")", ":", "\n", "                ", "pred_main", "=", "model", "(", "image", ".", "cuda", "(", "device", ")", ")", "[", "1", "]", "\n", "output_", "=", "interp", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "if", "output", "is", "None", ":", "\n", "                    ", "output", "=", "model_weight", "*", "output_", "\n", "", "else", ":", "\n", "                    ", "output", "+=", "model_weight", "*", "output_", "\n", "", "", "assert", "output", "is", "not", "None", ",", "'Output is None'", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", "\n", "", "label", "=", "label", ".", "numpy", "(", ")", "[", "0", "]", "\n", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", ",", "cfg", ".", "NUM_CLASSES", ")", "\n", "", "inters_over_union_classes", "=", "per_class_iu", "(", "hist", ")", "\n", "print", "(", "f'mIoU = \\t{round(np.nanmean(inters_over_union_classes) * 100, 2)}'", ")", "\n", "if", "verbose", ":", "\n", "        ", "display_stats", "(", "cfg", ",", "test_loader", ".", "dataset", ".", "class_names", ",", "inters_over_union_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_cls.eval_best": [[72, 131], ["os.exists", "os.join", "os.exists", "range", "len", "advent.utils.serialization.pickle_load", "os.join", "print", "round", "print", "print", "print", "os.exists", "advent.utils.serialization.pickle_load.keys", "eval_UDA_single_cls.load_checkpoint_for_evaluation", "numpy.zeros", "iter", "tqdm.tqdm", "advent.utils.func.per_class_iu", "advent.utils.serialization.pickle_dump", "eval_UDA_single_cls.display_stats", "print", "range", "next", "advent.utils.func.fast_hist", "numpy.nanmean", "os.exists", "time.sleep", "len", "torch.nn.Upsample", "torch.no_grad", "nn.Upsample.cpu().data[].numpy", "np.argmax.transpose", "numpy.argmax", "label.numpy", "label.flatten", "np.argmax.flatten", "print", "image.cuda", "len", "numpy.nanmean", "nn.Upsample.cpu", "advent.utils.func.per_class_iu", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.pickle_load", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.load_checkpoint_for_evaluation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.pickle_dump", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.display_stats", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.fast_hist", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu"], ["", "", "def", "eval_best", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "\n", "fixed_test_size", ",", "verbose", ")", ":", "\n", "    ", "assert", "len", "(", "models", ")", "==", "1", ",", "'Not yet supported multi models in this mode'", "\n", "assert", "osp", ".", "exists", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ")", ",", "'SNAPSHOT_DIR is not found'", "\n", "start_iter", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_STEP", "\n", "step", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_STEP", "\n", "max_iter", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_MAXITER", "\n", "cache_path", "=", "osp", ".", "join", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ",", "'all_res.pkl'", ")", "\n", "if", "osp", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "all_res", "=", "pickle_load", "(", "cache_path", ")", "\n", "", "else", ":", "\n", "        ", "all_res", "=", "{", "}", "\n", "", "cur_best_miou", "=", "-", "1", "\n", "cur_best_model", "=", "''", "\n", "for", "i_iter", "in", "range", "(", "start_iter", ",", "max_iter", "+", "1", ",", "step", ")", ":", "\n", "        ", "restore_from", "=", "osp", ".", "join", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ",", "f'model_{i_iter}.pth'", ")", "\n", "if", "not", "osp", ".", "exists", "(", "restore_from", ")", ":", "\n", "# continue", "\n", "            ", "if", "cfg", ".", "TEST", ".", "WAIT_MODEL", ":", "\n", "                ", "print", "(", "'Waiting for model..!'", ")", "\n", "while", "not", "osp", ".", "exists", "(", "restore_from", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "5", ")", "\n", "", "", "", "print", "(", "\"Evaluating model\"", ",", "restore_from", ")", "\n", "if", "i_iter", "not", "in", "all_res", ".", "keys", "(", ")", ":", "\n", "            ", "load_checkpoint_for_evaluation", "(", "models", "[", "0", "]", ",", "restore_from", ",", "device", ")", "\n", "# eval", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "NUM_CLASSES", ",", "cfg", ".", "NUM_CLASSES", ")", ")", "\n", "# for index, batch in enumerate(test_loader):", "\n", "#     image, _, _, name = batch", "\n", "test_iter", "=", "iter", "(", "test_loader", ")", "\n", "for", "index", "in", "tqdm", "(", "range", "(", "len", "(", "test_loader", ")", ")", ")", ":", "\n", "                ", "image", ",", "label", ",", "_", ",", "name", "=", "next", "(", "test_iter", ")", "\n", "if", "not", "fixed_test_size", ":", "\n", "                    ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "pred_main", "=", "models", "[", "0", "]", "(", "image", ".", "cuda", "(", "device", ")", ")", "[", "1", "]", "\n", "output", "=", "interp", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", "\n", "", "label", "=", "label", ".", "numpy", "(", ")", "[", "0", "]", "\n", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", ",", "cfg", ".", "NUM_CLASSES", ")", "\n", "if", "verbose", "and", "index", ">", "0", "and", "index", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "\n", "index", ",", "len", "(", "test_loader", ")", ",", "100", "*", "np", ".", "nanmean", "(", "per_class_iu", "(", "hist", ")", ")", ")", ")", "\n", "", "", "inters_over_union_classes", "=", "per_class_iu", "(", "hist", ")", "\n", "all_res", "[", "i_iter", "]", "=", "inters_over_union_classes", "\n", "pickle_dump", "(", "all_res", ",", "cache_path", ")", "\n", "", "else", ":", "\n", "            ", "inters_over_union_classes", "=", "all_res", "[", "i_iter", "]", "\n", "", "computed_miou", "=", "round", "(", "np", ".", "nanmean", "(", "inters_over_union_classes", ")", "*", "100", ",", "2", ")", "\n", "if", "cur_best_miou", "<", "computed_miou", ":", "\n", "            ", "cur_best_miou", "=", "computed_miou", "\n", "cur_best_model", "=", "restore_from", "\n", "", "print", "(", "'\\tCurrent mIoU:'", ",", "computed_miou", ")", "\n", "print", "(", "'\\tCurrent best model:'", ",", "cur_best_model", ")", "\n", "print", "(", "'\\tCurrent best mIoU:'", ",", "cur_best_miou", ")", "\n", "if", "verbose", ":", "\n", "            ", "display_stats", "(", "cfg", ",", "test_loader", ".", "dataset", ".", "class_names", ",", "inters_over_union_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_cls.load_checkpoint_for_evaluation": [[133, 138], ["torch.load", "model.load_state_dict", "model.eval", "model.cuda"], "function", ["None"], ["", "", "", "def", "load_checkpoint_for_evaluation", "(", "model", ",", "checkpoint", ",", "device", ")", ":", "\n", "    ", "saved_state_dict", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_single_cls.display_stats": [[140, 144], ["range", "print", "str", "round"], "function", ["None"], ["", "def", "display_stats", "(", "cfg", ",", "name_classes", ",", "inters_over_union_classes", ")", ":", "\n", "    ", "for", "ind_class", "in", "range", "(", "cfg", ".", "NUM_CLASSES", ")", ":", "\n", "        ", "print", "(", "name_classes", "[", "ind_class", "]", "\n", "+", "'\\t'", "+", "str", "(", "round", "(", "inters_over_union_classes", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_multi.train_advent": [[30, 259], ["os.path.exists", "os.path.exists", "model.train", "model.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "torch.SGD", "torch.Adam", "torch.Adam", "torch.Adam", "torch.nn.Upsample", "torch.nn.Upsample", "enumerate", "enumerate", "tqdm.tqdm", "tensorboardX.SummaryWriter", "model.optim_parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "range", "optim.SGD.zero_grad", "optim.Adam.zero_grad", "optim.Adam.zero_grad", "optim.Adam.zero_grad", "advent.utils.func.adjust_learning_rate", "advent.utils.func.adjust_learning_rate_discriminator", "advent.utils.func.adjust_learning_rate_discriminator", "advent.utils.func.adjust_learning_rate_discriminator", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "enumerate.__next__", "model", "nn.Upsample.", "advent.utils.func.loss_calc", "loss.backward", "enumerate.__next__", "model", "nn.Upsample.", "advent.model.discriminator.get_fc_discriminator.", "loss.backward", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "pred_src_main.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "pred_trg_main.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "optim.SGD.step", "optim.Adam.step", "train_UDA_multi.print_losses", "sys.stdout.flush", "images_source.cuda", "nn.Upsample.", "advent.utils.func.loss_calc", "nn.Upsample.", "advent.utils.func.loss_calc", "images.cuda", "nn.Upsample.", "nn.Upsample.", "advent.model.discriminator.get_fc_discriminator.", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "pred_src_low.detach.detach", "pred_src_aux.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.utils.func.ls_loss.backward", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "pred_trg_low.detach.detach", "pred_trg_aux.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.utils.func.ls_loss.backward", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "optim.Adam.step", "optim.Adam.step", "print", "print", "pathlib.Path", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train_UDA_multi.log_losses_tensorboard", "advent.utils.func.prob_2_entropy", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "torch.softmax", "advent.utils.func.ls_loss", "advent.utils.func.prob_2_entropy", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "torch.softmax", "advent.utils.func.ls_loss", "advent.utils.func.prob_2_entropy", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "torch.softmax", "advent.utils.func.ls_loss", "model.state_dict", "advent.model.discriminator.get_fc_discriminator.state_dict", "advent.model.discriminator.get_fc_discriminator.state_dict", "advent.model.discriminator.get_fc_discriminator.state_dict", "train_UDA_multi.draw_in_tensorboard", "train_UDA_multi.draw_in_tensorboard", "torch.softmax", "torch.softmax", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "torch.softmax", "torch.softmax", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "torch.softmax", "torch.softmax", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.optim_parameters", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.print_losses", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.log_losses_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss"], ["def", "train_advent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "''' UDA training with advent\n    '''", "\n", "# Create the model and start the training.", "\n", "input_size_source", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", "\n", "input_size_target", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "\n", "device", "=", "cfg", ".", "GPU_ID", "\n", "num_classes", "=", "cfg", ".", "NUM_CLASSES", "\n", "viz_tensorboard", "=", "os", ".", "path", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "if", "viz_tensorboard", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "\n", "# SEGMNETATION NETWORK", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# DISCRIMINATOR NETWORK", "\n", "# low-level", "\n", "d_low", "=", "get_fc_discriminator", "(", "num_classes", "=", "num_classes", ")", "\n", "d_low", ".", "train", "(", ")", "\n", "d_low", ".", "to", "(", "device", ")", "\n", "\n", "# feature-level", "\n", "d_aux", "=", "get_fc_discriminator", "(", "num_classes", "=", "num_classes", ")", "\n", "d_aux", ".", "train", "(", ")", "\n", "d_aux", ".", "to", "(", "device", ")", "\n", "\n", "# seg maps, i.e. output, level", "\n", "d_main", "=", "get_fc_discriminator", "(", "num_classes", "=", "num_classes", ")", "\n", "d_main", ".", "train", "(", ")", "\n", "d_main", ".", "to", "(", "device", ")", "\n", "\n", "# OPTIMIZERS", "\n", "# segnet's optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "# discriminators' optimizers", "\n", "optimizer_d_low", "=", "optim", ".", "Adam", "(", "d_low", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ",", "\n", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "optimizer_d_aux", "=", "optim", ".", "Adam", "(", "d_aux", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ",", "\n", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "optimizer_d_main", "=", "optim", ".", "Adam", "(", "d_main", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ",", "\n", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "\n", "# interpolate output segmaps", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_source", "[", "1", "]", ",", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "# labels for adversarial training", "\n", "source_label", "=", "0", "\n", "target_label", "=", "1", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "for", "i_iter", "in", "tqdm", "(", "range", "(", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "+", "1", ")", ")", ":", "\n", "\n", "# reset optimizers", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_d_low", ".", "zero_grad", "(", ")", "\n", "optimizer_d_aux", ".", "zero_grad", "(", ")", "\n", "optimizer_d_main", ".", "zero_grad", "(", ")", "\n", "# adapt LR if needed", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ")", "\n", "adjust_learning_rate_discriminator", "(", "optimizer_d_low", ",", "i_iter", ",", "cfg", ")", "\n", "adjust_learning_rate_discriminator", "(", "optimizer_d_aux", ",", "i_iter", ",", "cfg", ")", "\n", "adjust_learning_rate_discriminator", "(", "optimizer_d_main", ",", "i_iter", ",", "cfg", ")", "\n", "\n", "# UDA Training", "\n", "# only train segnet. Don't accumulate grads in disciminators", "\n", "for", "param", "in", "d_low", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "d_aux", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "d_main", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "# train on source", "\n", "", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "images_source", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "pred_src_low", ",", "pred_src_aux", ",", "pred_src_main", "=", "model", "(", "images_source", ".", "cuda", "(", "device", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_src_low", "=", "interp", "(", "pred_src_low", ")", "\n", "loss_seg_src_low", "=", "loss_calc", "(", "pred_src_low", ",", "labels", ",", "device", ")", "\n", "pred_src_aux", "=", "interp", "(", "pred_src_aux", ")", "\n", "loss_seg_src_aux", "=", "loss_calc", "(", "pred_src_aux", ",", "labels", ",", "device", ")", "\n", "", "else", ":", "\n", "            ", "loss_seg_src_low", "=", "0", "\n", "loss_seg_src_aux", "=", "0", "\n", "", "pred_src_main", "=", "interp", "(", "pred_src_main", ")", "\n", "loss_seg_src_main", "=", "loss_calc", "(", "pred_src_main", ",", "labels", ",", "device", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_MAIN", "*", "loss_seg_src_main", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_AUX", "*", "loss_seg_src_aux", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_LOW", "*", "loss_seg_src_low", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# adversarial training ot fool the discriminator", "\n", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "images", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "pred_trg_low", ",", "pred_trg_aux", ",", "pred_trg_main", "=", "model", "(", "images", ".", "cuda", "(", "device", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_trg_low", "=", "interp_target", "(", "pred_trg_low", ")", "\n", "pred_trg_aux", "=", "interp_target", "(", "pred_trg_aux", ")", "\n", "d_out_low", "=", "d_low", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_low", ")", ")", ")", "\n", "d_out_aux", "=", "d_aux", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_aux", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "                ", "loss_adv_trg_low", "=", "bce_loss", "(", "d_out_low", ",", "source_label", ")", "\n", "loss_adv_trg_aux", "=", "bce_loss", "(", "d_out_aux", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "                ", "loss_adv_trg_low", "=", "ls_loss", "(", "d_out_low", ",", "source_label", ")", "\n", "loss_adv_trg_aux", "=", "ls_loss", "(", "d_out_aux", ",", "source_label", ")", "\n", "#loss_adv_trg_aux = loss_adv_trg_aux * torch.exp(loss_adv_trg_aux)", "\n", "", "", "else", ":", "\n", "            ", "loss_adv_trg_low", "=", "0", "\n", "loss_adv_trg_aux", "=", "0", "\n", "", "pred_trg_main", "=", "interp_target", "(", "pred_trg_main", ")", "\n", "d_out_main", "=", "d_main", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_main", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_adv_trg_main", "=", "bce_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_adv_trg_main", "=", "ls_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "#loss_adv_trg_main = loss_adv_trg_main * torch.exp(loss_adv_trg_main)", "\n", "", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_ADV_MAIN", "*", "loss_adv_trg_main", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_ADV_AUX", "*", "loss_adv_trg_aux", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_ADV_LOW", "*", "loss_adv_trg_low", ")", "\n", "loss", "=", "loss", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Train discriminator networks", "\n", "# enable training mode on discriminator networks", "\n", "for", "param", "in", "d_low", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "d_aux", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "d_main", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "# train with source", "\n", "", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_src_low", "=", "pred_src_low", ".", "detach", "(", ")", "\n", "pred_src_aux", "=", "pred_src_aux", ".", "detach", "(", ")", "\n", "d_out_low", "=", "d_low", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_src_low", ")", ")", ")", "\n", "d_out_aux", "=", "d_aux", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_src_aux", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "                ", "loss_d_low", "=", "bce_loss", "(", "d_out_low", ",", "source_label", ")", "\n", "loss_d_aux", "=", "bce_loss", "(", "d_out_aux", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "                ", "loss_d_low", "=", "ls_loss", "(", "d_out_low", ",", "source_label", ")", "\n", "loss_d_aux", "=", "ls_loss", "(", "d_out_aux", ",", "source_label", ")", "\n", "", "loss_d_low", "=", "loss_d_low", "/", "2", "\n", "loss_d_low", ".", "backward", "(", ")", "\n", "loss_d_aux", "=", "loss_d_aux", "/", "2", "\n", "loss_d_aux", ".", "backward", "(", ")", "\n", "", "pred_src_main", "=", "pred_src_main", ".", "detach", "(", ")", "\n", "d_out_main", "=", "d_main", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_src_main", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main", "=", "bce_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main", "=", "ls_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "", "loss_d_main", "=", "loss_d_main", "/", "2", "\n", "loss_d_main", ".", "backward", "(", ")", "\n", "\n", "# train with target", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_trg_low", "=", "pred_trg_low", ".", "detach", "(", ")", "\n", "pred_trg_aux", "=", "pred_trg_aux", ".", "detach", "(", ")", "\n", "d_out_low", "=", "d_low", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_low", ")", ")", ")", "\n", "d_out_aux", "=", "d_aux", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_aux", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "                ", "loss_d_low", "=", "bce_loss", "(", "d_out_low", ",", "target_label", ")", "\n", "loss_d_aux", "=", "bce_loss", "(", "d_out_aux", ",", "target_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "                ", "loss_d_low", "=", "ls_loss", "(", "d_out_low", ",", "target_label", ")", "\n", "loss_d_aux", "=", "ls_loss", "(", "d_out_aux", ",", "target_label", ")", "\n", "", "loss_d_low", "=", "loss_d_low", "/", "2", "\n", "loss_d_low", ".", "backward", "(", ")", "\n", "loss_d_aux", "=", "loss_d_aux", "/", "2", "\n", "loss_d_aux", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss_d_low", "=", "0", "\n", "loss_d_aux", "=", "0", "\n", "", "pred_trg_main", "=", "pred_trg_main", ".", "detach", "(", ")", "\n", "d_out_main", "=", "d_main", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_main", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main", "=", "bce_loss", "(", "d_out_main", ",", "target_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main", "=", "ls_loss", "(", "d_out_main", ",", "target_label", ")", "\n", "", "loss_d_main", "=", "loss_d_main", "/", "2", "\n", "loss_d_main", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "optimizer_d_low", ".", "step", "(", ")", "\n", "optimizer_d_aux", ".", "step", "(", ")", "\n", "", "optimizer_d_main", ".", "step", "(", ")", "\n", "\n", "current_losses", "=", "{", "'loss_seg_src_low'", ":", "loss_seg_src_low", ",", "\n", "'loss_seg_src_aux'", ":", "loss_seg_src_aux", ",", "\n", "'loss_seg_src_main'", ":", "loss_seg_src_main", ",", "\n", "'loss_adv_trg_low'", ":", "loss_adv_trg_low", ",", "\n", "'loss_adv_trg_aux'", ":", "loss_adv_trg_aux", ",", "\n", "'loss_adv_trg_main'", ":", "loss_adv_trg_main", ",", "\n", "'loss_d_low'", ":", "loss_d_low", ",", "\n", "'loss_d_aux'", ":", "loss_d_aux", ",", "\n", "'loss_d_main'", ":", "loss_d_main", "}", "\n", "print_losses", "(", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "SAVE_PRED_EVERY", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "print", "(", "'exp ='", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "snapshot_dir", "=", "Path", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}.pth'", ")", "\n", "torch", ".", "save", "(", "d_low", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}_D_low.pth'", ")", "\n", "torch", ".", "save", "(", "d_aux", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}_D_aux.pth'", ")", "\n", "torch", ".", "save", "(", "d_main", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}_D_main.pth'", ")", "\n", "if", "i_iter", ">=", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "-", "1", ":", "\n", "                ", "break", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# Visualize with tensorboard", "\n", "if", "viz_tensorboard", ":", "\n", "            ", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "==", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "-", "1", ":", "\n", "                ", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_trg_main", ",", "num_classes", ",", "'T'", ")", "\n", "draw_in_tensorboard", "(", "writer", ",", "images_source", ",", "i_iter", ",", "pred_src_main", ",", "num_classes", ",", "'S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_multi.draw_in_tensorboard": [[261, 277], ["torchvision.utils.make_grid", "writer.add_image", "torchvision.utils.make_grid", "writer.add_image", "torch.softmax().cpu().data[].numpy().transpose", "numpy.sum", "torchvision.utils.make_grid", "writer.add_image", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "images[].clone().cpu", "numpy.array().transpose", "torch.softmax().cpu().data[].numpy", "numpy.multiply", "numpy.log2", "numpy.log2", "images[].clone", "numpy.array", "advent.utils.viz_segmask.colorize_mask().convert", "torch.softmax().cpu", "advent.utils.viz_segmask.colorize_mask", "numpy.asarray", "torch.softmax", "numpy.argmax", "torch.softmax().cpu().data[].numpy().transpose", "torch.softmax().cpu().data[].numpy", "torch.softmax().cpu", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.viz_segmask.colorize_mask"], ["", "", "", "", "def", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_main", ",", "num_classes", ",", "type_", ")", ":", "\n", "    ", "grid_image", "=", "make_grid", "(", "images", "[", ":", "3", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "3", ",", "normalize", "=", "True", ")", "\n", "writer", ".", "add_image", "(", "f'Image - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n", "grid_image", "=", "make_grid", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "colorize_mask", "(", "np", ".", "asarray", "(", "\n", "np", ".", "argmax", "(", "F", ".", "softmax", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "\n", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "3", ",", "\n", "normalize", "=", "False", ",", "range", "=", "(", "0", ",", "255", ")", ")", "\n", "writer", ".", "add_image", "(", "f'Prediction - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n", "output_sm", "=", "F", ".", "softmax", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output_ent", "=", "np", ".", "sum", "(", "-", "np", ".", "multiply", "(", "output_sm", ",", "np", ".", "log2", "(", "output_sm", ")", ")", ",", "axis", "=", "2", ",", "\n", "keepdims", "=", "False", ")", "\n", "grid_image", "=", "make_grid", "(", "torch", ".", "from_numpy", "(", "output_ent", ")", ",", "3", ",", "normalize", "=", "True", ",", "\n", "range", "=", "(", "0", ",", "np", ".", "log2", "(", "num_classes", ")", ")", ")", "\n", "writer", ".", "add_image", "(", "f'Entropy - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_multi.train_minent": [[279, 375], ["os.path.exists", "os.path.exists", "model.train", "model.to", "torch.SGD", "torch.nn.Upsample", "torch.nn.Upsample", "enumerate", "enumerate", "tqdm.tqdm", "tensorboardX.SummaryWriter", "model.optim_parameters", "range", "optim.SGD.zero_grad", "advent.utils.func.adjust_learning_rate", "enumerate.__next__", "model", "nn.Upsample.", "advent.utils.func.loss_calc", "loss.backward", "enumerate.__next__", "model", "nn.Upsample.", "nn.Upsample.", "torch.softmax", "torch.softmax", "advent.utils.loss.entropy_loss", "advent.utils.loss.entropy_loss", "loss.backward", "optim.SGD.step", "train_UDA_multi.print_losses", "sys.stdout.flush", "images_source.cuda", "nn.Upsample.", "advent.utils.func.loss_calc", "images.cuda", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "train_UDA_multi.log_losses_tensorboard", "model.state_dict", "os.join", "train_UDA_multi.draw_in_tensorboard", "train_UDA_multi.draw_in_tensorboard"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.optim_parameters", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.loss.entropy_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.loss.entropy_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.print_losses", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.log_losses_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard"], ["", "def", "train_minent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "''' UDA training with minEnt\n    '''", "\n", "# Create the model and start the training.", "\n", "input_size_source", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", "\n", "input_size_target", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "\n", "device", "=", "cfg", ".", "GPU_ID", "\n", "num_classes", "=", "cfg", ".", "NUM_CLASSES", "\n", "viz_tensorboard", "=", "os", ".", "path", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "if", "viz_tensorboard", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "\n", "# SEGMNETATION NETWORK", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# OPTIMIZERS", "\n", "# segnet's optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "# interpolate output segmaps", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_source", "[", "1", "]", ",", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "for", "i_iter", "in", "tqdm", "(", "range", "(", "cfg", ".", "TRAIN", ".", "EARLY_STOP", ")", ")", ":", "\n", "\n", "# reset optimizers", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# adapt LR if needed", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ")", "\n", "\n", "# UDA Training", "\n", "# train on source", "\n", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "images_source", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "pred_src_aux", ",", "pred_src_main", "=", "model", "(", "images_source", ".", "cuda", "(", "device", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_src_aux", "=", "interp", "(", "pred_src_aux", ")", "\n", "loss_seg_src_aux", "=", "loss_calc", "(", "pred_src_aux", ",", "labels", ",", "device", ")", "\n", "", "else", ":", "\n", "            ", "loss_seg_src_aux", "=", "0", "\n", "", "pred_src_main", "=", "interp", "(", "pred_src_main", ")", "\n", "loss_seg_src_main", "=", "loss_calc", "(", "pred_src_main", ",", "labels", ",", "device", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_MAIN", "*", "loss_seg_src_main", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_AUX", "*", "loss_seg_src_aux", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# adversarial training with minent", "\n", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "images", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "pred_trg_aux", ",", "pred_trg_main", "=", "model", "(", "images", ".", "cuda", "(", "device", ")", ")", "\n", "pred_trg_aux", "=", "interp_target", "(", "pred_trg_aux", ")", "\n", "pred_trg_main", "=", "interp_target", "(", "pred_trg_main", ")", "\n", "pred_prob_trg_aux", "=", "F", ".", "softmax", "(", "pred_trg_aux", ")", "\n", "pred_prob_trg_main", "=", "F", ".", "softmax", "(", "pred_trg_main", ")", "\n", "\n", "loss_target_entp_aux", "=", "entropy_loss", "(", "pred_prob_trg_aux", ")", "\n", "loss_target_entp_main", "=", "entropy_loss", "(", "pred_prob_trg_main", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_ENT_AUX", "*", "loss_target_entp_aux", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_ENT_MAIN", "*", "loss_target_entp_main", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "current_losses", "=", "{", "'loss_seg_src_aux'", ":", "loss_seg_src_aux", ",", "\n", "'loss_seg_src_main'", ":", "loss_seg_src_main", ",", "\n", "'loss_ent_aux'", ":", "loss_target_entp_aux", ",", "\n", "'loss_ent_main'", ":", "loss_target_entp_main", "}", "\n", "\n", "print_losses", "(", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "SAVE_PRED_EVERY", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "print", "(", "'exp ='", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "osp", ".", "join", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ",", "f'model_{i_iter}.pth'", ")", ")", "\n", "if", "i_iter", ">=", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "-", "1", ":", "\n", "                ", "break", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# Visualize with tensorboard", "\n", "if", "viz_tensorboard", ":", "\n", "            ", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "==", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "-", "1", ":", "\n", "                ", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_trg_main", ",", "num_classes", ",", "'T'", ")", "\n", "draw_in_tensorboard", "(", "writer", ",", "images_source", ",", "i_iter", ",", "pred_src_main", ",", "num_classes", ",", "'S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_multi.print_losses": [[377, 383], ["current_losses.items", "tqdm.tqdm.write", "list_strings.append", "train_UDA_multi.to_numpy"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.to_numpy"], ["", "", "", "", "def", "print_losses", "(", "current_losses", ",", "i_iter", ")", ":", "\n", "    ", "list_strings", "=", "[", "]", "\n", "for", "loss_name", ",", "loss_value", "in", "current_losses", ".", "items", "(", ")", ":", "\n", "        ", "list_strings", ".", "append", "(", "f'{loss_name} = {to_numpy(loss_value):.3f} '", ")", "\n", "", "full_string", "=", "' '", ".", "join", "(", "list_strings", ")", "\n", "tqdm", ".", "write", "(", "f'iter = {i_iter} {full_string}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_multi.log_losses_tensorboard": [[385, 388], ["current_losses.items", "writer.add_scalar", "train_UDA_multi.to_numpy"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.to_numpy"], ["", "def", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", ":", "\n", "    ", "for", "loss_name", ",", "loss_value", "in", "current_losses", ".", "items", "(", ")", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "f'data/{loss_name}'", ",", "to_numpy", "(", "loss_value", ")", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_multi.to_numpy": [[390, 395], ["isinstance", "tensor.data.cpu().numpy", "tensor.data.cpu"], "function", ["None"], ["", "", "def", "to_numpy", "(", "tensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "tensor", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "return", "tensor", "\n", "", "else", ":", "\n", "        ", "return", "tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_multi.train_domain_adaptation": [[397, 404], ["train_UDA_multi.train_minent", "train_UDA_multi.train_advent", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_minent", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_advent"], ["", "", "def", "train_domain_adaptation", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "if", "cfg", ".", "TRAIN", ".", "DA_METHOD", "==", "'MinEnt'", ":", "\n", "        ", "train_minent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "DA_METHOD", "==", "'AdvEnt'", ":", "\n", "        ", "train_advent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported DA method {cfg.TRAIN.DA_METHOD}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_cat_multi.train_advent": [[30, 193], ["os.path.exists", "os.path.exists", "model.train", "model.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "torch.SGD", "torch.Adam", "torch.Adam", "torch.nn.Upsample", "torch.nn.Upsample", "enumerate", "enumerate", "tqdm.tqdm", "tensorboardX.SummaryWriter", "model.optim_parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "range", "optim.SGD.zero_grad", "optim.Adam.zero_grad", "optim.Adam.zero_grad", "advent.utils.func.adjust_learning_rate", "advent.utils.func.adjust_learning_rate_discriminator", "advent.utils.func.adjust_learning_rate_discriminator", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "enumerate.__next__", "model", "nn.Upsample.", "nn.Upsample.", "nn.Upsample.", "advent.utils.func.loss_calc", "loss.backward", "enumerate.__next__", "model", "nn.Upsample.", "nn.Upsample.", "nn.Upsample.", "advent.model.discriminator.get_fc_discriminator.", "loss.backward", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "pred_src_low.detach.detach", "pred_src_aux.detach.detach", "pred_src_main.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "pred_trg_low.detach.detach", "pred_trg_aux.detach.detach", "pred_trg_main.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "optim.SGD.step", "optim.Adam.step", "optim.Adam.step", "train_UDA_cat_multi.print_losses", "sys.stdout.flush", "images_source.cuda", "images.cuda", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "print", "print", "pathlib.Path", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train_UDA_cat_multi.log_losses_tensorboard", "torch.softmax", "advent.utils.func.ls_loss", "torch.softmax", "advent.utils.func.ls_loss", "torch.softmax", "advent.utils.func.ls_loss", "model.state_dict", "advent.model.discriminator.get_fc_discriminator.state_dict", "advent.model.discriminator.get_fc_discriminator.state_dict", "train_UDA_cat_multi.draw_in_tensorboard", "train_UDA_cat_multi.draw_in_tensorboard"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.optim_parameters", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.print_losses", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.log_losses_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard"], ["def", "train_advent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "''' UDA training with advent\n    '''", "\n", "# Create the model and start the training.", "\n", "input_size_source", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", "\n", "input_size_target", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "\n", "device", "=", "cfg", ".", "GPU_ID", "\n", "num_classes", "=", "cfg", ".", "NUM_CLASSES", "\n", "viz_tensorboard", "=", "os", ".", "path", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "if", "viz_tensorboard", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "\n", "# SEGMNETATION NETWORK", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# DISCRIMINATOR NETWORK", "\n", "\n", "# feature-level", "\n", "d_aux", "=", "get_fc_discriminator", "(", "num_classes", "=", "num_classes", ")", "\n", "d_aux", ".", "train", "(", ")", "\n", "d_aux", ".", "to", "(", "device", ")", "\n", "\n", "# seg maps, i.e. output, level", "\n", "d_main", "=", "get_fc_discriminator", "(", "num_classes", "=", "num_classes", ")", "\n", "d_main", ".", "train", "(", ")", "\n", "d_main", ".", "to", "(", "device", ")", "\n", "\n", "# OPTIMIZERS", "\n", "# segnet's optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "# discriminators' optimizers", "\n", "optimizer_d_aux", "=", "optim", ".", "Adam", "(", "d_aux", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ",", "\n", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "optimizer_d_main", "=", "optim", ".", "Adam", "(", "d_main", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ",", "\n", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "\n", "# interpolate output segmaps", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_source", "[", "1", "]", ",", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "# labels for adversarial training", "\n", "source_label", "=", "0", "\n", "target_label", "=", "1", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "for", "i_iter", "in", "tqdm", "(", "range", "(", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "+", "1", ")", ")", ":", "\n", "\n", "# reset optimizers", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_d_aux", ".", "zero_grad", "(", ")", "\n", "optimizer_d_main", ".", "zero_grad", "(", ")", "\n", "# adapt LR if needed", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ")", "\n", "adjust_learning_rate_discriminator", "(", "optimizer_d_aux", ",", "i_iter", ",", "cfg", ")", "\n", "adjust_learning_rate_discriminator", "(", "optimizer_d_main", ",", "i_iter", ",", "cfg", ")", "\n", "\n", "# UDA Training", "\n", "# only train segnet. Don't accumulate grads in disciminators", "\n", "for", "param", "in", "d_aux", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "d_main", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "# train on source", "\n", "", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "images_source", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "pred_src_low", ",", "pred_src_aux", ",", "pred_src_main", "=", "model", "(", "images_source", ".", "cuda", "(", "device", ")", ")", "\n", "\n", "pred_src_low", "=", "interp", "(", "pred_src_low", ")", "\n", "pred_src_aux", "=", "interp", "(", "pred_src_aux", ")", "\n", "pred_src_main", "=", "interp", "(", "pred_src_main", ")", "\n", "pred_src_final", "=", "pred_src_low", "+", "pred_src_aux", "+", "pred_src_main", "\n", "loss_seg_src_main", "=", "loss_calc", "(", "pred_src_final", ",", "labels", ",", "device", ")", "\n", "loss", "=", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_MAIN", "*", "loss_seg_src_main", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# adversarial training ot fool the discriminator", "\n", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "images", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "pred_trg_low", ",", "pred_trg_aux", ",", "pred_trg_main", "=", "model", "(", "images", ".", "cuda", "(", "device", ")", ")", "\n", "\n", "pred_trg_low", "=", "interp_target", "(", "pred_trg_low", ")", "\n", "pred_trg_aux", "=", "interp_target", "(", "pred_trg_aux", ")", "\n", "pred_trg_main", "=", "interp_target", "(", "pred_trg_main", ")", "\n", "pred_tar_final", "=", "pred_trg_low", "+", "pred_trg_aux", "+", "pred_trg_main", "\n", "d_out_main", "=", "d_main", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_tar_final", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_adv_trg_main", "=", "bce_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_adv_trg_main", "=", "ls_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "\n", "", "loss", "=", "cfg", ".", "TRAIN", ".", "LAMBDA_ADV_MAIN", "*", "loss_adv_trg_main", "\n", "loss", "=", "loss", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Train discriminator networks", "\n", "# enable training mode on discriminator networks", "\n", "for", "param", "in", "d_aux", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "d_main", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "# train with source", "\n", "\n", "", "pred_src_low", "=", "pred_src_low", ".", "detach", "(", ")", "\n", "pred_src_aux", "=", "pred_src_aux", ".", "detach", "(", ")", "\n", "pred_src_main", "=", "pred_src_main", ".", "detach", "(", ")", "\n", "pred_src_final", "=", "pred_src_low", "+", "pred_src_aux", "+", "pred_src_main", "\n", "d_out_main", "=", "d_main", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_src_final", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main", "=", "bce_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main", "=", "ls_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "", "loss_d_main", "=", "loss_d_main", "\n", "loss_d_main", ".", "backward", "(", ")", "\n", "\n", "# train with target", "\n", "pred_trg_low", "=", "pred_trg_low", ".", "detach", "(", ")", "\n", "pred_trg_aux", "=", "pred_trg_aux", ".", "detach", "(", ")", "\n", "pred_trg_main", "=", "pred_trg_main", ".", "detach", "(", ")", "\n", "pred_trg_final", "=", "pred_trg_low", "+", "pred_trg_aux", "+", "pred_trg_main", "\n", "d_out_main", "=", "d_main", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_final", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main", "=", "bce_loss", "(", "d_out_main", ",", "target_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main", "=", "ls_loss", "(", "d_out_main", ",", "target_label", ")", "\n", "", "loss_d_main", "=", "loss_d_main", "\n", "loss_d_main", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer_d_aux", ".", "step", "(", ")", "\n", "optimizer_d_main", ".", "step", "(", ")", "\n", "\n", "current_losses", "=", "{", "'loss_seg_src_main'", ":", "loss_seg_src_main", ",", "\n", "'loss_adv_trg_main'", ":", "loss_adv_trg_main", ",", "\n", "'loss_d_main'", ":", "loss_d_main", "}", "\n", "print_losses", "(", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "SAVE_PRED_EVERY", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "print", "(", "'exp ='", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "snapshot_dir", "=", "Path", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}.pth'", ")", "\n", "torch", ".", "save", "(", "d_aux", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}_D_aux.pth'", ")", "\n", "torch", ".", "save", "(", "d_main", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}_D_main.pth'", ")", "\n", "if", "i_iter", ">=", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "-", "1", ":", "\n", "                ", "break", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# Visualize with tensorboard", "\n", "if", "viz_tensorboard", ":", "\n", "            ", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "==", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "-", "1", ":", "\n", "                ", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_trg_main", ",", "num_classes", ",", "'T'", ")", "\n", "draw_in_tensorboard", "(", "writer", ",", "images_source", ",", "i_iter", ",", "pred_src_main", ",", "num_classes", ",", "'S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_cat_multi.draw_in_tensorboard": [[195, 211], ["torchvision.utils.make_grid", "writer.add_image", "torchvision.utils.make_grid", "writer.add_image", "torch.softmax().cpu().data[].numpy().transpose", "numpy.sum", "torchvision.utils.make_grid", "writer.add_image", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "images[].clone().cpu", "numpy.array().transpose", "torch.softmax().cpu().data[].numpy", "numpy.multiply", "numpy.log2", "numpy.log2", "images[].clone", "numpy.array", "advent.utils.viz_segmask.colorize_mask().convert", "torch.softmax().cpu", "advent.utils.viz_segmask.colorize_mask", "numpy.asarray", "torch.softmax", "numpy.argmax", "torch.softmax().cpu().data[].numpy().transpose", "torch.softmax().cpu().data[].numpy", "torch.softmax().cpu", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.viz_segmask.colorize_mask"], ["", "", "", "", "def", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_main", ",", "num_classes", ",", "type_", ")", ":", "\n", "    ", "grid_image", "=", "make_grid", "(", "images", "[", ":", "3", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "3", ",", "normalize", "=", "True", ")", "\n", "writer", ".", "add_image", "(", "f'Image - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n", "grid_image", "=", "make_grid", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "colorize_mask", "(", "np", ".", "asarray", "(", "\n", "np", ".", "argmax", "(", "F", ".", "softmax", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "\n", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "3", ",", "\n", "normalize", "=", "False", ",", "range", "=", "(", "0", ",", "255", ")", ")", "\n", "writer", ".", "add_image", "(", "f'Prediction - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n", "output_sm", "=", "F", ".", "softmax", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output_ent", "=", "np", ".", "sum", "(", "-", "np", ".", "multiply", "(", "output_sm", ",", "np", ".", "log2", "(", "output_sm", ")", ")", ",", "axis", "=", "2", ",", "\n", "keepdims", "=", "False", ")", "\n", "grid_image", "=", "make_grid", "(", "torch", ".", "from_numpy", "(", "output_ent", ")", ",", "3", ",", "normalize", "=", "True", ",", "\n", "range", "=", "(", "0", ",", "np", ".", "log2", "(", "num_classes", ")", ")", ")", "\n", "writer", ".", "add_image", "(", "f'Entropy - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_cat_multi.train_minent": [[213, 309], ["os.path.exists", "os.path.exists", "model.train", "model.to", "torch.SGD", "torch.nn.Upsample", "torch.nn.Upsample", "enumerate", "enumerate", "tqdm.tqdm", "tensorboardX.SummaryWriter", "model.optim_parameters", "range", "optim.SGD.zero_grad", "advent.utils.func.adjust_learning_rate", "enumerate.__next__", "model", "nn.Upsample.", "advent.utils.func.loss_calc", "loss.backward", "enumerate.__next__", "model", "nn.Upsample.", "nn.Upsample.", "torch.softmax", "torch.softmax", "advent.utils.loss.entropy_loss", "advent.utils.loss.entropy_loss", "loss.backward", "optim.SGD.step", "train_UDA_cat_multi.print_losses", "sys.stdout.flush", "images_source.cuda", "nn.Upsample.", "advent.utils.func.loss_calc", "images.cuda", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "train_UDA_cat_multi.log_losses_tensorboard", "model.state_dict", "os.join", "train_UDA_cat_multi.draw_in_tensorboard", "train_UDA_cat_multi.draw_in_tensorboard"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.optim_parameters", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.loss.entropy_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.loss.entropy_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.print_losses", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.log_losses_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard"], ["", "def", "train_minent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "''' UDA training with minEnt\n    '''", "\n", "# Create the model and start the training.", "\n", "input_size_source", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", "\n", "input_size_target", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "\n", "device", "=", "cfg", ".", "GPU_ID", "\n", "num_classes", "=", "cfg", ".", "NUM_CLASSES", "\n", "viz_tensorboard", "=", "os", ".", "path", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "if", "viz_tensorboard", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "\n", "# SEGMNETATION NETWORK", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# OPTIMIZERS", "\n", "# segnet's optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "# interpolate output segmaps", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_source", "[", "1", "]", ",", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "for", "i_iter", "in", "tqdm", "(", "range", "(", "cfg", ".", "TRAIN", ".", "EARLY_STOP", ")", ")", ":", "\n", "\n", "# reset optimizers", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# adapt LR if needed", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ")", "\n", "\n", "# UDA Training", "\n", "# train on source", "\n", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "images_source", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "pred_src_aux", ",", "pred_src_main", "=", "model", "(", "images_source", ".", "cuda", "(", "device", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_src_aux", "=", "interp", "(", "pred_src_aux", ")", "\n", "loss_seg_src_aux", "=", "loss_calc", "(", "pred_src_aux", ",", "labels", ",", "device", ")", "\n", "", "else", ":", "\n", "            ", "loss_seg_src_aux", "=", "0", "\n", "", "pred_src_main", "=", "interp", "(", "pred_src_main", ")", "\n", "loss_seg_src_main", "=", "loss_calc", "(", "pred_src_main", ",", "labels", ",", "device", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_MAIN", "*", "loss_seg_src_main", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_AUX", "*", "loss_seg_src_aux", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# adversarial training with minent", "\n", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "images", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "pred_trg_aux", ",", "pred_trg_main", "=", "model", "(", "images", ".", "cuda", "(", "device", ")", ")", "\n", "pred_trg_aux", "=", "interp_target", "(", "pred_trg_aux", ")", "\n", "pred_trg_main", "=", "interp_target", "(", "pred_trg_main", ")", "\n", "pred_prob_trg_aux", "=", "F", ".", "softmax", "(", "pred_trg_aux", ")", "\n", "pred_prob_trg_main", "=", "F", ".", "softmax", "(", "pred_trg_main", ")", "\n", "\n", "loss_target_entp_aux", "=", "entropy_loss", "(", "pred_prob_trg_aux", ")", "\n", "loss_target_entp_main", "=", "entropy_loss", "(", "pred_prob_trg_main", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_ENT_AUX", "*", "loss_target_entp_aux", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_ENT_MAIN", "*", "loss_target_entp_main", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "current_losses", "=", "{", "'loss_seg_src_aux'", ":", "loss_seg_src_aux", ",", "\n", "'loss_seg_src_main'", ":", "loss_seg_src_main", ",", "\n", "'loss_ent_aux'", ":", "loss_target_entp_aux", ",", "\n", "'loss_ent_main'", ":", "loss_target_entp_main", "}", "\n", "\n", "print_losses", "(", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "SAVE_PRED_EVERY", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "print", "(", "'exp ='", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "osp", ".", "join", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ",", "f'model_{i_iter}.pth'", ")", ")", "\n", "if", "i_iter", ">=", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "-", "1", ":", "\n", "                ", "break", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# Visualize with tensorboard", "\n", "if", "viz_tensorboard", ":", "\n", "            ", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "==", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "-", "1", ":", "\n", "                ", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_trg_main", ",", "num_classes", ",", "'T'", ")", "\n", "draw_in_tensorboard", "(", "writer", ",", "images_source", ",", "i_iter", ",", "pred_src_main", ",", "num_classes", ",", "'S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_cat_multi.print_losses": [[311, 317], ["current_losses.items", "tqdm.tqdm.write", "list_strings.append", "train_UDA_cat_multi.to_numpy"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.to_numpy"], ["", "", "", "", "def", "print_losses", "(", "current_losses", ",", "i_iter", ")", ":", "\n", "    ", "list_strings", "=", "[", "]", "\n", "for", "loss_name", ",", "loss_value", "in", "current_losses", ".", "items", "(", ")", ":", "\n", "        ", "list_strings", ".", "append", "(", "f'{loss_name} = {to_numpy(loss_value):.3f} '", ")", "\n", "", "full_string", "=", "' '", ".", "join", "(", "list_strings", ")", "\n", "tqdm", ".", "write", "(", "f'iter = {i_iter} {full_string}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_cat_multi.log_losses_tensorboard": [[319, 322], ["current_losses.items", "writer.add_scalar", "train_UDA_cat_multi.to_numpy"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.to_numpy"], ["", "def", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", ":", "\n", "    ", "for", "loss_name", ",", "loss_value", "in", "current_losses", ".", "items", "(", ")", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "f'data/{loss_name}'", ",", "to_numpy", "(", "loss_value", ")", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_cat_multi.to_numpy": [[324, 329], ["isinstance", "tensor.data.cpu().numpy", "tensor.data.cpu"], "function", ["None"], ["", "", "def", "to_numpy", "(", "tensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "tensor", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "return", "tensor", "\n", "", "else", ":", "\n", "        ", "return", "tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_cat_multi.train_domain_adaptation": [[331, 338], ["train_UDA_cat_multi.train_minent", "train_UDA_cat_multi.train_advent", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_minent", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_advent"], ["", "", "def", "train_domain_adaptation", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "if", "cfg", ".", "TRAIN", ".", "DA_METHOD", "==", "'MinEnt'", ":", "\n", "        ", "train_minent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "DA_METHOD", "==", "'AdvEnt'", ":", "\n", "        ", "train_advent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported DA method {cfg.TRAIN.DA_METHOD}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_EL.train_advent": [[30, 227], ["os.path.exists", "os.path.exists", "model.train", "model.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "torch.SGD", "torch.Adam", "torch.Adam", "torch.nn.Upsample", "torch.nn.Upsample", "enumerate", "enumerate", "tqdm.tqdm", "tensorboardX.SummaryWriter", "model.optim_parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "range", "optim.SGD.zero_grad", "optim.Adam.zero_grad", "optim.Adam.zero_grad", "advent.utils.func.adjust_learning_rate", "advent.utils.func.adjust_learning_rate_discriminator", "advent.utils.func.adjust_learning_rate_discriminator", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "enumerate.__next__", "model", "nn.Upsample.", "advent.utils.func.loss_calc", "loss.backward", "enumerate.__next__", "model", "nn.Upsample.", "advent.model.discriminator.get_fc_discriminator.", "loss.backward", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "pred_src_main.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "pred_trg_main.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "optim.SGD.step", "optim.Adam.step", "train_UDA_single_EL.print_losses", "sys.stdout.flush", "images_source.cuda", "nn.Upsample.", "advent.utils.func.loss_calc", "images.cuda", "nn.Upsample.", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "pred_src_aux.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "pred_trg_aux.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "optim.Adam.step", "print", "print", "pathlib.Path", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train_UDA_single_EL.log_losses_tensorboard", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "torch.softmax", "advent.utils.func.ls_loss", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "torch.softmax", "advent.utils.func.ls_loss", "advent.utils.func.prob_2_entropy", "advent.utils.func.bce_loss", "torch.softmax", "advent.utils.func.ls_loss", "model.state_dict", "advent.model.discriminator.get_fc_discriminator.state_dict", "advent.model.discriminator.get_fc_discriminator.state_dict", "train_UDA_single_EL.draw_in_tensorboard", "train_UDA_single_EL.draw_in_tensorboard", "torch.softmax", "advent.utils.func.ls_loss", "torch.softmax", "advent.utils.func.ls_loss", "torch.softmax", "advent.utils.func.ls_loss"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.optim_parameters", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.print_losses", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.log_losses_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss"], ["def", "train_advent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "''' UDA training with advent\n    '''", "\n", "# Create the model and start the training.", "\n", "input_size_source", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", "\n", "input_size_target", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "\n", "device", "=", "cfg", ".", "GPU_ID", "\n", "num_classes", "=", "cfg", ".", "NUM_CLASSES", "\n", "viz_tensorboard", "=", "os", ".", "path", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "if", "viz_tensorboard", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "\n", "# SEGMNETATION NETWORK", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# DISCRIMINATOR NETWORK", "\n", "# feature-level", "\n", "d_aux", "=", "get_fc_discriminator", "(", "num_classes", "=", "num_classes", ")", "\n", "d_aux", ".", "train", "(", ")", "\n", "d_aux", ".", "to", "(", "device", ")", "\n", "\n", "# seg maps, i.e. output, level", "\n", "d_main", "=", "get_fc_discriminator", "(", "num_classes", "=", "num_classes", ")", "\n", "d_main", ".", "train", "(", ")", "\n", "d_main", ".", "to", "(", "device", ")", "\n", "\n", "# OPTIMIZERS", "\n", "# segnet's optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "# discriminators' optimizers", "\n", "optimizer_d_aux", "=", "optim", ".", "Adam", "(", "d_aux", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ",", "\n", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "optimizer_d_main", "=", "optim", ".", "Adam", "(", "d_main", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ",", "\n", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "\n", "# interpolate output segmaps", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_source", "[", "1", "]", ",", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "# labels for adversarial training", "\n", "source_label", "=", "0", "\n", "target_label", "=", "1", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "for", "i_iter", "in", "tqdm", "(", "range", "(", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "+", "1", ")", ")", ":", "\n", "\n", "# reset optimizers", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_d_aux", ".", "zero_grad", "(", ")", "\n", "optimizer_d_main", ".", "zero_grad", "(", ")", "\n", "# adapt LR if needed", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ")", "\n", "adjust_learning_rate_discriminator", "(", "optimizer_d_aux", ",", "i_iter", ",", "cfg", ")", "\n", "adjust_learning_rate_discriminator", "(", "optimizer_d_main", ",", "i_iter", ",", "cfg", ")", "\n", "\n", "# UDA Training", "\n", "# only train segnet. Don't accumulate grads in disciminators", "\n", "for", "param", "in", "d_aux", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "d_main", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "# Holobo: Changed", "\n", "# for param in model.parameters():", "\n", "#     param.requires_grad = False", "\n", "#", "\n", "# for name, param in model.named_parameters():", "\n", "#     if \"layer6\" in name:", "\n", "#         param.requires_grad = False", "\n", "\n", "# train on source", "\n", "", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "images_source", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "pred_src_aux", ",", "pred_src_main", "=", "model", "(", "images_source", ".", "cuda", "(", "device", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_src_aux", "=", "interp", "(", "pred_src_aux", ")", "\n", "loss_seg_src_aux", "=", "loss_calc", "(", "pred_src_aux", ",", "labels", ",", "device", ")", "\n", "", "else", ":", "\n", "            ", "loss_seg_src_aux", "=", "0", "\n", "", "pred_src_main", "=", "interp", "(", "pred_src_main", ")", "\n", "loss_seg_src_main", "=", "loss_calc", "(", "pred_src_main", ",", "labels", ",", "device", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_MAIN", "*", "loss_seg_src_main", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_AUX", "*", "loss_seg_src_aux", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# adversarial training ot fool the discriminator", "\n", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "images", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "pred_trg_aux", ",", "pred_trg_main", "=", "model", "(", "images", ".", "cuda", "(", "device", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_trg_aux", "=", "interp_target", "(", "pred_trg_aux", ")", "\n", "d_out_aux", "=", "d_aux", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_aux", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "                ", "loss_adv_trg_aux", "=", "bce_loss", "(", "d_out_aux", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "                ", "loss_adv_trg_aux", "=", "ls_loss", "(", "d_out_aux", ",", "source_label", ")", "\n", "#loss_adv_trg_aux = loss_adv_trg_aux * torch.exp(loss_adv_trg_aux)", "\n", "", "", "else", ":", "\n", "            ", "loss_adv_trg_aux", "=", "0", "\n", "", "pred_trg_main", "=", "interp_target", "(", "pred_trg_main", ")", "\n", "d_out_main", "=", "d_main", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_main", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_adv_trg_main", "=", "bce_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_adv_trg_main", "=", "ls_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "#loss_adv_trg_main = loss_adv_trg_main * torch.exp(loss_adv_trg_main)", "\n", "", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_ADV_MAIN", "*", "loss_adv_trg_main", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_ADV_AUX", "*", "loss_adv_trg_aux", ")", "\n", "loss", "=", "loss", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Train discriminator networks", "\n", "# enable training mode on discriminator networks", "\n", "for", "param", "in", "d_aux", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "d_main", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "# train with source", "\n", "", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_src_aux", "=", "pred_src_aux", ".", "detach", "(", ")", "\n", "d_out_aux", "=", "d_aux", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_src_aux", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "                ", "loss_d_aux", "=", "bce_loss", "(", "d_out_aux", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "                ", "loss_d_aux", "=", "ls_loss", "(", "d_out_aux", ",", "source_label", ")", "\n", "", "loss_d_aux", "=", "loss_d_aux", "/", "2", "\n", "loss_d_aux", ".", "backward", "(", ")", "\n", "", "pred_src_main", "=", "pred_src_main", ".", "detach", "(", ")", "\n", "d_out_main", "=", "d_main", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_src_main", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main", "=", "bce_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main", "=", "ls_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "", "loss_d_main", "=", "loss_d_main", "/", "2", "\n", "loss_d_main", ".", "backward", "(", ")", "\n", "\n", "# train with target", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_trg_aux", "=", "pred_trg_aux", ".", "detach", "(", ")", "\n", "d_out_aux", "=", "d_aux", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_aux", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "                ", "loss_d_aux", "=", "bce_loss", "(", "d_out_aux", ",", "target_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "                ", "loss_d_aux", "=", "ls_loss", "(", "d_out_aux", ",", "target_label", ")", "\n", "", "loss_d_aux", "=", "loss_d_aux", "/", "2", "\n", "loss_d_aux", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss_d_aux", "=", "0", "\n", "", "pred_trg_main", "=", "pred_trg_main", ".", "detach", "(", ")", "\n", "d_out_main", "=", "d_main", "(", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_main", ")", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main", "=", "bce_loss", "(", "d_out_main", ",", "target_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main", "=", "ls_loss", "(", "d_out_main", ",", "target_label", ")", "\n", "", "loss_d_main", "=", "loss_d_main", "/", "2", "\n", "loss_d_main", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "optimizer_d_aux", ".", "step", "(", ")", "\n", "", "optimizer_d_main", ".", "step", "(", ")", "\n", "\n", "current_losses", "=", "{", "'loss_seg_src_aux'", ":", "loss_seg_src_aux", ",", "\n", "'loss_seg_src_main'", ":", "loss_seg_src_main", ",", "\n", "'loss_adv_trg_aux'", ":", "loss_adv_trg_aux", ",", "\n", "'loss_adv_trg_main'", ":", "loss_adv_trg_main", ",", "\n", "'loss_d_aux'", ":", "loss_d_aux", ",", "\n", "'loss_d_main'", ":", "loss_d_main", "}", "\n", "print_losses", "(", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "SAVE_PRED_EVERY", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "print", "(", "'exp ='", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "snapshot_dir", "=", "Path", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}.pth'", ")", "\n", "torch", ".", "save", "(", "d_aux", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}_D_aux.pth'", ")", "\n", "torch", ".", "save", "(", "d_main", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}_D_main.pth'", ")", "\n", "if", "i_iter", ">=", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "-", "1", ":", "\n", "                ", "break", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# Visualize with tensorboard", "\n", "if", "viz_tensorboard", ":", "\n", "            ", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "==", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "-", "1", ":", "\n", "                ", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_trg_main", ",", "num_classes", ",", "'T'", ")", "\n", "draw_in_tensorboard", "(", "writer", ",", "images_source", ",", "i_iter", ",", "pred_src_main", ",", "num_classes", ",", "'S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_EL.draw_in_tensorboard": [[229, 245], ["torchvision.utils.make_grid", "writer.add_image", "torchvision.utils.make_grid", "writer.add_image", "torch.softmax().cpu().data[].numpy().transpose", "numpy.sum", "torchvision.utils.make_grid", "writer.add_image", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "images[].clone().cpu", "numpy.array().transpose", "torch.softmax().cpu().data[].numpy", "numpy.multiply", "numpy.log2", "numpy.log2", "images[].clone", "numpy.array", "advent.utils.viz_segmask.colorize_mask().convert", "torch.softmax().cpu", "advent.utils.viz_segmask.colorize_mask", "numpy.asarray", "torch.softmax", "numpy.argmax", "torch.softmax().cpu().data[].numpy().transpose", "torch.softmax().cpu().data[].numpy", "torch.softmax().cpu", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.viz_segmask.colorize_mask"], ["", "", "", "", "def", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_main", ",", "num_classes", ",", "type_", ")", ":", "\n", "    ", "grid_image", "=", "make_grid", "(", "images", "[", ":", "3", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "3", ",", "normalize", "=", "True", ")", "\n", "writer", ".", "add_image", "(", "f'Image - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n", "grid_image", "=", "make_grid", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "colorize_mask", "(", "np", ".", "asarray", "(", "\n", "np", ".", "argmax", "(", "F", ".", "softmax", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "\n", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "3", ",", "\n", "normalize", "=", "False", ",", "range", "=", "(", "0", ",", "255", ")", ")", "\n", "writer", ".", "add_image", "(", "f'Prediction - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n", "output_sm", "=", "F", ".", "softmax", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output_ent", "=", "np", ".", "sum", "(", "-", "np", ".", "multiply", "(", "output_sm", ",", "np", ".", "log2", "(", "output_sm", ")", ")", ",", "axis", "=", "2", ",", "\n", "keepdims", "=", "False", ")", "\n", "grid_image", "=", "make_grid", "(", "torch", ".", "from_numpy", "(", "output_ent", ")", ",", "3", ",", "normalize", "=", "True", ",", "\n", "range", "=", "(", "0", ",", "np", ".", "log2", "(", "num_classes", ")", ")", ")", "\n", "writer", ".", "add_image", "(", "f'Entropy - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_EL.train_minent": [[247, 343], ["os.path.exists", "os.path.exists", "model.train", "model.to", "torch.SGD", "torch.nn.Upsample", "torch.nn.Upsample", "enumerate", "enumerate", "tqdm.tqdm", "tensorboardX.SummaryWriter", "model.optim_parameters", "range", "optim.SGD.zero_grad", "advent.utils.func.adjust_learning_rate", "enumerate.__next__", "model", "nn.Upsample.", "advent.utils.func.loss_calc", "loss.backward", "enumerate.__next__", "model", "nn.Upsample.", "nn.Upsample.", "torch.softmax", "torch.softmax", "advent.utils.loss.entropy_loss", "advent.utils.loss.entropy_loss", "loss.backward", "optim.SGD.step", "train_UDA_single_EL.print_losses", "sys.stdout.flush", "images_source.cuda", "nn.Upsample.", "advent.utils.func.loss_calc", "images.cuda", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "train_UDA_single_EL.log_losses_tensorboard", "model.state_dict", "os.join", "train_UDA_single_EL.draw_in_tensorboard", "train_UDA_single_EL.draw_in_tensorboard"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.optim_parameters", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.loss.entropy_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.loss.entropy_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.print_losses", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.log_losses_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard"], ["", "def", "train_minent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "''' UDA training with minEnt\n    '''", "\n", "# Create the model and start the training.", "\n", "input_size_source", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", "\n", "input_size_target", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "\n", "device", "=", "cfg", ".", "GPU_ID", "\n", "num_classes", "=", "cfg", ".", "NUM_CLASSES", "\n", "viz_tensorboard", "=", "os", ".", "path", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "if", "viz_tensorboard", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "\n", "# SEGMNETATION NETWORK", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# OPTIMIZERS", "\n", "# segnet's optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "# interpolate output segmaps", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_source", "[", "1", "]", ",", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "for", "i_iter", "in", "tqdm", "(", "range", "(", "cfg", ".", "TRAIN", ".", "EARLY_STOP", ")", ")", ":", "\n", "\n", "# reset optimizers", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# adapt LR if needed", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ")", "\n", "\n", "# UDA Training", "\n", "# train on source", "\n", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "images_source", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "pred_src_aux", ",", "pred_src_main", "=", "model", "(", "images_source", ".", "cuda", "(", "device", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_src_aux", "=", "interp", "(", "pred_src_aux", ")", "\n", "loss_seg_src_aux", "=", "loss_calc", "(", "pred_src_aux", ",", "labels", ",", "device", ")", "\n", "", "else", ":", "\n", "            ", "loss_seg_src_aux", "=", "0", "\n", "", "pred_src_main", "=", "interp", "(", "pred_src_main", ")", "\n", "loss_seg_src_main", "=", "loss_calc", "(", "pred_src_main", ",", "labels", ",", "device", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_MAIN", "*", "loss_seg_src_main", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_AUX", "*", "loss_seg_src_aux", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# adversarial training with minent", "\n", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "images", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "pred_trg_aux", ",", "pred_trg_main", "=", "model", "(", "images", ".", "cuda", "(", "device", ")", ")", "\n", "pred_trg_aux", "=", "interp_target", "(", "pred_trg_aux", ")", "\n", "pred_trg_main", "=", "interp_target", "(", "pred_trg_main", ")", "\n", "pred_prob_trg_aux", "=", "F", ".", "softmax", "(", "pred_trg_aux", ")", "\n", "pred_prob_trg_main", "=", "F", ".", "softmax", "(", "pred_trg_main", ")", "\n", "\n", "loss_target_entp_aux", "=", "entropy_loss", "(", "pred_prob_trg_aux", ")", "\n", "loss_target_entp_main", "=", "entropy_loss", "(", "pred_prob_trg_main", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_ENT_AUX", "*", "loss_target_entp_aux", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_ENT_MAIN", "*", "loss_target_entp_main", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "current_losses", "=", "{", "'loss_seg_src_aux'", ":", "loss_seg_src_aux", ",", "\n", "'loss_seg_src_main'", ":", "loss_seg_src_main", ",", "\n", "'loss_ent_aux'", ":", "loss_target_entp_aux", ",", "\n", "'loss_ent_main'", ":", "loss_target_entp_main", "}", "\n", "\n", "print_losses", "(", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "SAVE_PRED_EVERY", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "print", "(", "'exp ='", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "osp", ".", "join", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ",", "f'model_{i_iter}.pth'", ")", ")", "\n", "if", "i_iter", ">=", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "-", "1", ":", "\n", "                ", "break", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# Visualize with tensorboard", "\n", "if", "viz_tensorboard", ":", "\n", "            ", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "==", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "-", "1", ":", "\n", "                ", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_trg_main", ",", "num_classes", ",", "'T'", ")", "\n", "draw_in_tensorboard", "(", "writer", ",", "images_source", ",", "i_iter", ",", "pred_src_main", ",", "num_classes", ",", "'S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_EL.print_losses": [[345, 351], ["current_losses.items", "tqdm.tqdm.write", "list_strings.append", "train_UDA_single_EL.to_numpy"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.to_numpy"], ["", "", "", "", "def", "print_losses", "(", "current_losses", ",", "i_iter", ")", ":", "\n", "    ", "list_strings", "=", "[", "]", "\n", "for", "loss_name", ",", "loss_value", "in", "current_losses", ".", "items", "(", ")", ":", "\n", "        ", "list_strings", ".", "append", "(", "f'{loss_name} = {to_numpy(loss_value):.3f} '", ")", "\n", "", "full_string", "=", "' '", ".", "join", "(", "list_strings", ")", "\n", "tqdm", ".", "write", "(", "f'iter = {i_iter} {full_string}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_EL.log_losses_tensorboard": [[353, 356], ["current_losses.items", "writer.add_scalar", "train_UDA_single_EL.to_numpy"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.to_numpy"], ["", "def", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", ":", "\n", "    ", "for", "loss_name", ",", "loss_value", "in", "current_losses", ".", "items", "(", ")", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "f'data/{loss_name}'", ",", "to_numpy", "(", "loss_value", ")", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_EL.to_numpy": [[358, 363], ["isinstance", "tensor.data.cpu().numpy", "tensor.data.cpu"], "function", ["None"], ["", "", "def", "to_numpy", "(", "tensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "tensor", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "return", "tensor", "\n", "", "else", ":", "\n", "        ", "return", "tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_EL.train_domain_adaptation": [[365, 372], ["train_UDA_single_EL.train_minent", "train_UDA_single_EL.train_advent", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_minent", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_advent"], ["", "", "def", "train_domain_adaptation", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "if", "cfg", ".", "TRAIN", ".", "DA_METHOD", "==", "'MinEnt'", ":", "\n", "        ", "train_minent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "DA_METHOD", "==", "'AdvEnt'", ":", "\n", "        ", "train_advent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported DA method {cfg.TRAIN.DA_METHOD}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_cls.train_advent": [[30, 472], ["os.path.exists", "os.path.exists", "model.train", "model.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "torch.SGD", "torch.Adam", "torch.Adam", "torch.Adam", "torch.nn.Upsample", "torch.nn.Upsample", "enumerate", "enumerate", "tqdm.tqdm", "tensorboardX.SummaryWriter", "model.optim_parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "range", "optim.SGD.zero_grad", "optim.Adam.zero_grad", "optim.Adam.zero_grad", "optim.Adam.zero_grad", "advent.utils.func.adjust_learning_rate", "advent.utils.func.adjust_learning_rate_discriminator", "advent.utils.func.adjust_learning_rate_discriminator", "advent.utils.func.adjust_learning_rate_discriminator", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "enumerate.__next__", "model", "nn.Upsample.", "advent.utils.func.loss_calc", "loss.backward", "enumerate.__next__", "model", "torch.sigmoid", "advent.utils.func.prob_2_entropy", "advent.utils.func.prob_2_entropy.split", "advent.model.discriminator.get_fc_discriminator.", "advent.model.discriminator.get_fc_discriminator.", "advent.model.discriminator.get_fc_discriminator.", "advent.model.discriminator.get_fc_discriminator.", "advent.model.discriminator.get_fc_discriminator.", "advent.model.discriminator.get_fc_discriminator.", "loss_adv_all.backward", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "torch.sigmoid", "advent.utils.func.prob_2_entropy", "advent.utils.func.prob_2_entropy.split", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "optim.SGD.step", "optim.Adam.step", "train_UDA_single_cls.print_losses", "sys.stdout.flush", "images_source.cuda", "nn.Upsample.", "advent.utils.func.loss_calc", "images.cuda", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "enl_src_main_0.detach", "enl_src_main_1.detach", "enl_src_main_2.detach", "enl_src_main_3.detach", "enl_src_main_4.detach", "enl_src_main_5.detach", "enl_trg_main_0.detach", "enl_trg_main_1.detach", "enl_trg_main_2.detach", "enl_trg_main_3.detach", "enl_trg_main_4.detach", "enl_trg_main_5.detach", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "advent.utils.func.bce_loss", "optim.Adam.step", "print", "print", "pathlib.Path", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train_UDA_single_cls.log_losses_tensorboard", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "model.state_dict", "advent.model.discriminator.get_fc_discriminator.state_dict", "advent.model.discriminator.get_fc_discriminator.state_dict", "train_UDA_single_cls.draw_in_tensorboard", "train_UDA_single_cls.draw_in_tensorboard"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.optim_parameters", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.print_losses", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.log_losses_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard"], ["def", "train_advent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "''' UDA training with advent\n    '''", "\n", "# Create the model and start the training.", "\n", "input_size_source", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", "\n", "input_size_target", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "\n", "device", "=", "cfg", ".", "GPU_ID", "\n", "num_classes", "=", "cfg", ".", "NUM_CLASSES", "\n", "viz_tensorboard", "=", "os", ".", "path", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "if", "viz_tensorboard", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "\n", "# SEGMNETATION NETWORK", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# DISCRIMINATOR NETWORK", "\n", "# feature-level", "\n", "d_aux", "=", "get_fc_discriminator", "(", "num_classes", "=", "num_classes", ")", "\n", "d_aux", ".", "train", "(", ")", "\n", "d_aux", ".", "to", "(", "device", ")", "\n", "\n", "# seg maps, i.e. output, level", "\n", "d_main", "=", "get_fc_discriminator", "(", "num_classes", "=", "num_classes", ")", "\n", "d_main", ".", "train", "(", ")", "\n", "d_main", ".", "to", "(", "device", ")", "\n", "\n", "# seg maps, i.e. class-wise", "\n", "\n", "d_cls_main_0", "=", "get_fc_discriminator", "(", "num_classes", "=", "1", ")", "\n", "d_cls_main_0", ".", "train", "(", ")", "\n", "d_cls_main_0", ".", "to", "(", "device", ")", "\n", "\n", "d_cls_main_1", "=", "get_fc_discriminator", "(", "num_classes", "=", "1", ")", "\n", "d_cls_main_1", ".", "train", "(", ")", "\n", "d_cls_main_1", ".", "to", "(", "device", ")", "\n", "\n", "d_cls_main_2", "=", "get_fc_discriminator", "(", "num_classes", "=", "1", ")", "\n", "d_cls_main_2", ".", "train", "(", ")", "\n", "d_cls_main_2", ".", "to", "(", "device", ")", "\n", "\n", "d_cls_main_3", "=", "get_fc_discriminator", "(", "num_classes", "=", "1", ")", "\n", "d_cls_main_3", ".", "train", "(", ")", "\n", "d_cls_main_3", ".", "to", "(", "device", ")", "\n", "\n", "d_cls_main_4", "=", "get_fc_discriminator", "(", "num_classes", "=", "1", ")", "\n", "d_cls_main_4", ".", "train", "(", ")", "\n", "d_cls_main_4", ".", "to", "(", "device", ")", "\n", "\n", "d_cls_main_5", "=", "get_fc_discriminator", "(", "num_classes", "=", "1", ")", "\n", "d_cls_main_5", ".", "train", "(", ")", "\n", "d_cls_main_5", ".", "to", "(", "device", ")", "\n", "\n", "# OPTIMIZERS", "\n", "# segnet's optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "# discriminators' optimizers", "\n", "optimizer_d_aux", "=", "optim", ".", "Adam", "(", "d_aux", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ",", "\n", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "optimizer_d_main", "=", "optim", ".", "Adam", "(", "d_main", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ",", "\n", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "\n", "optimizer_d_cls", "=", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "d_cls_main_0", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "d_cls_main_1", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "d_cls_main_2", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "d_cls_main_3", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "d_cls_main_4", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "d_cls_main_5", ".", "parameters", "(", ")", "}", "]", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ",", "\n", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "\n", "# interpolate output segmaps", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_source", "[", "1", "]", ",", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "# labels for adversarial training", "\n", "source_label", "=", "0", "\n", "target_label", "=", "1", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "for", "i_iter", "in", "tqdm", "(", "range", "(", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "+", "1", ")", ")", ":", "\n", "\n", "# reset optimizers", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_d_aux", ".", "zero_grad", "(", ")", "\n", "optimizer_d_main", ".", "zero_grad", "(", ")", "\n", "optimizer_d_cls", ".", "zero_grad", "(", ")", "\n", "# adapt LR if needed", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ")", "\n", "adjust_learning_rate_discriminator", "(", "optimizer_d_aux", ",", "i_iter", ",", "cfg", ")", "\n", "adjust_learning_rate_discriminator", "(", "optimizer_d_main", ",", "i_iter", ",", "cfg", ")", "\n", "adjust_learning_rate_discriminator", "(", "optimizer_d_cls", ",", "i_iter", ",", "cfg", ")", "\n", "\n", "# UDA Training", "\n", "# only train segnet. Don't accumulate grads in disciminators", "\n", "for", "param", "in", "d_aux", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "d_main", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "for", "param", "in", "d_cls_main_0", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "d_cls_main_1", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "d_cls_main_2", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "d_cls_main_3", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "d_cls_main_4", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "d_cls_main_5", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "# Holobo: Changed", "\n", "# for param in model.parameters():", "\n", "#     param.requires_grad = False", "\n", "#", "\n", "# for name, param in model.named_parameters():", "\n", "#     if \"layer6\" in name:", "\n", "#         param.requires_grad = False", "\n", "\n", "# train on source", "\n", "", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "images_source", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "pred_src_aux", ",", "pred_src_main", "=", "model", "(", "images_source", ".", "cuda", "(", "device", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_src_aux", "=", "interp", "(", "pred_src_aux", ")", "\n", "loss_seg_src_aux", "=", "loss_calc", "(", "pred_src_aux", ",", "labels", ",", "device", ")", "\n", "", "else", ":", "\n", "            ", "loss_seg_src_aux", "=", "0", "\n", "", "pred_src_main", "=", "interp", "(", "pred_src_main", ")", "\n", "loss_seg_src_main", "=", "loss_calc", "(", "pred_src_main", ",", "labels", ",", "device", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_MAIN", "*", "loss_seg_src_main", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_AUX", "*", "loss_seg_src_aux", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# adversarial training ot fool the discriminator", "\n", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "images", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "pred_trg_aux", ",", "pred_trg_main", "=", "model", "(", "images", ".", "cuda", "(", "device", ")", ")", "\n", "\n", "# Non Class-wise", "\n", "# if cfg.TRAIN.MULTI_LEVEL:", "\n", "#     pred_trg_aux = interp_target(pred_trg_aux)", "\n", "#     d_out_aux = d_aux(prob_2_entropy(F.softmax(pred_trg_aux)))", "\n", "#     if cfg.TRAIN.GANLOSS == 'BCE':", "\n", "#         loss_adv_trg_aux = bce_loss(d_out_aux, source_label)", "\n", "#     elif cfg.TRAIN.GANLOSS == 'LS':", "\n", "#         loss_adv_trg_aux = ls_loss(d_out_aux, source_label)", "\n", "# else:", "\n", "#     loss_adv_trg_aux = 0", "\n", "# pred_trg_main = interp_target(pred_trg_main)", "\n", "# d_out_main = d_main(prob_2_entropy(F.softmax(pred_trg_main)))", "\n", "# if cfg.TRAIN.GANLOSS == 'BCE':", "\n", "#     loss_adv_trg_main = bce_loss(d_out_main, source_label)", "\n", "# elif cfg.TRAIN.GANLOSS == 'LS':", "\n", "#     loss_adv_trg_main = ls_loss(d_out_main, source_label)", "\n", "# loss_adv = (cfg.TRAIN.LAMBDA_ADV_MAIN * loss_adv_trg_main", "\n", "#         + cfg.TRAIN.LAMBDA_ADV_AUX * loss_adv_trg_aux)", "\n", "\n", "\n", "# Class-wise Entropy-based Adversarial", "\n", "sig_trg_main", "=", "F", ".", "sigmoid", "(", "pred_trg_main", ")", "\n", "enl_trg_main", "=", "prob_2_entropy", "(", "sig_trg_main", ")", "\n", "enl_trg_main_0", ",", "enl_trg_main_1", ",", "enl_trg_main_2", ",", "enl_trg_main_3", ",", "enl_trg_main_4", ",", "enl_trg_main_5", "=", "enl_trg_main", ".", "split", "(", "1", ",", "1", ")", "\n", "\n", "#---CLS 0---", "\n", "d_out_cls_0", "=", "d_cls_main_0", "(", "enl_trg_main_0", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_cls_0_adv_trg_main", "=", "bce_loss", "(", "d_out_cls_0", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_cls_0_adv_trg_main", "=", "ls_loss", "(", "d_out_cls_0", ",", "source_label", ")", "\n", "\n", "# ---CLS 1---", "\n", "", "d_out_cls_1", "=", "d_cls_main_1", "(", "enl_trg_main_1", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_cls_1_adv_trg_main", "=", "bce_loss", "(", "d_out_cls_1", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_cls_1_adv_trg_main", "=", "ls_loss", "(", "d_out_cls_1", ",", "source_label", ")", "\n", "\n", "# ---CLS 2---", "\n", "", "d_out_cls_2", "=", "d_cls_main_2", "(", "enl_trg_main_2", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_cls_2_adv_trg_main", "=", "bce_loss", "(", "d_out_cls_2", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_cls_2_adv_trg_main", "=", "ls_loss", "(", "d_out_cls_2", ",", "source_label", ")", "\n", "\n", "# ---CLS 2---", "\n", "", "d_out_cls_3", "=", "d_cls_main_3", "(", "enl_trg_main_3", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_cls_3_adv_trg_main", "=", "bce_loss", "(", "d_out_cls_3", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_cls_3_adv_trg_main", "=", "ls_loss", "(", "d_out_cls_3", ",", "source_label", ")", "\n", "\n", "# ---CLS 4---", "\n", "", "d_out_cls_4", "=", "d_cls_main_4", "(", "enl_trg_main_4", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_cls_4_adv_trg_main", "=", "bce_loss", "(", "d_out_cls_4", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_cls_4_adv_trg_main", "=", "ls_loss", "(", "d_out_cls_4", ",", "source_label", ")", "\n", "\n", "# ---CLS 5---", "\n", "", "d_out_cls_5", "=", "d_cls_main_5", "(", "enl_trg_main_5", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_cls_5_adv_trg_main", "=", "bce_loss", "(", "d_out_cls_5", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_cls_5_adv_trg_main", "=", "ls_loss", "(", "d_out_cls_5", ",", "source_label", ")", "\n", "\n", "", "loss_cls_wise", "=", "cfg", ".", "TRAIN", ".", "LAMBDA_ADV_AUX", "*", "(", "loss_cls_0_adv_trg_main", "+", "loss_cls_1_adv_trg_main", "+", "loss_cls_2_adv_trg_main", "+", "loss_cls_3_adv_trg_main", "+", "loss_cls_4_adv_trg_main", "+", "loss_cls_5_adv_trg_main", ")", "\n", "\n", "loss_adv_all", "=", "loss_cls_wise", "\n", "loss_adv_all", ".", "backward", "(", ")", "\n", "\n", "# Train discriminator networks", "\n", "# enable training mode on discriminator networks", "\n", "for", "param", "in", "d_aux", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "d_main", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "", "for", "param", "in", "d_cls_main_0", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "d_cls_main_1", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "d_cls_main_2", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "d_cls_main_3", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "d_cls_main_4", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "d_cls_main_5", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "# train with source", "\n", "# if cfg.TRAIN.MULTI_LEVEL:", "\n", "#     pred_src_aux = pred_src_aux.detach()", "\n", "#     d_out_aux = d_aux(prob_2_entropy(F.softmax(pred_src_aux)))", "\n", "#     if cfg.TRAIN.GANLOSS == 'BCE':", "\n", "#         loss_d_aux = bce_loss(d_out_aux, source_label)", "\n", "#     elif cfg.TRAIN.GANLOSS == 'LS':", "\n", "#         loss_d_aux = ls_loss(d_out_aux, source_label)", "\n", "#     loss_d_aux = loss_d_aux / 2", "\n", "#     loss_d_aux.backward()", "\n", "# pred_src_main = pred_src_main.detach()", "\n", "# d_out_main = d_main(prob_2_entropy(F.softmax(pred_src_main)))", "\n", "# if cfg.TRAIN.GANLOSS == 'BCE':", "\n", "#     loss_d_main = bce_loss(d_out_main, source_label)", "\n", "# elif cfg.TRAIN.GANLOSS == 'LS':", "\n", "#     loss_d_main = ls_loss(d_out_main, source_label)", "\n", "# loss_d_main = loss_d_main / 2", "\n", "# loss_d_main.backward()", "\n", "#", "\n", "# # train with target", "\n", "# if cfg.TRAIN.MULTI_LEVEL:", "\n", "#     pred_trg_aux = pred_trg_aux.detach()", "\n", "#     d_out_aux = d_aux(prob_2_entropy(F.softmax(pred_trg_aux)))", "\n", "#     if cfg.TRAIN.GANLOSS == 'BCE':", "\n", "#         loss_d_aux = bce_loss(d_out_aux, target_label)", "\n", "#     elif cfg.TRAIN.GANLOSS == 'LS':", "\n", "#         loss_d_aux = ls_loss(d_out_aux, target_label)", "\n", "#     loss_d_aux = loss_d_aux / 2", "\n", "#     loss_d_aux.backward()", "\n", "# else:", "\n", "#     loss_d_aux = 0", "\n", "# pred_trg_main = pred_trg_main.detach()", "\n", "# d_out_main = d_main(prob_2_entropy(F.softmax(pred_trg_main)))", "\n", "# if cfg.TRAIN.GANLOSS == 'BCE':", "\n", "#     loss_d_main = bce_loss(d_out_main, target_label)", "\n", "# elif cfg.TRAIN.GANLOSS == 'LS':", "\n", "#     loss_d_main = ls_loss(d_out_main, target_label)", "\n", "# loss_d_main = loss_d_main / 2", "\n", "# loss_d_main.backward()", "\n", "\n", "\n", "# Class-wise Entropy-based Adversarial", "\n", "", "sig_src_main", "=", "F", ".", "sigmoid", "(", "pred_src_main", ")", "\n", "enl_src_main", "=", "prob_2_entropy", "(", "sig_src_main", ")", "\n", "enl_src_main_0", ",", "enl_src_main_1", ",", "enl_src_main_2", ",", "enl_src_main_3", ",", "enl_src_main_4", ",", "enl_src_main_5", "=", "enl_src_main", ".", "split", "(", "1", ",", "1", ")", "\n", "enl_src_main_0", ",", "enl_src_main_1", ",", "enl_src_main_2", ",", "enl_src_main_3", ",", "enl_src_main_4", ",", "enl_src_main_5", "=", "enl_src_main_0", ".", "detach", "(", ")", ",", "enl_src_main_1", ".", "detach", "(", ")", ",", "enl_src_main_2", ".", "detach", "(", ")", ",", "enl_src_main_3", ".", "detach", "(", ")", ",", "enl_src_main_4", ".", "detach", "(", ")", ",", "enl_src_main_5", ".", "detach", "(", ")", "\n", "\n", "enl_trg_main_0", ",", "enl_trg_main_1", ",", "enl_trg_main_2", ",", "enl_trg_main_3", ",", "enl_trg_main_4", ",", "enl_trg_main_5", "=", "enl_trg_main_0", ".", "detach", "(", ")", ",", "enl_trg_main_1", ".", "detach", "(", ")", ",", "enl_trg_main_2", ".", "detach", "(", ")", ",", "enl_trg_main_3", ".", "detach", "(", ")", ",", "enl_trg_main_4", ".", "detach", "(", ")", ",", "enl_trg_main_5", ".", "detach", "(", ")", "\n", "\n", "\n", "# ---CLS 0---", "\n", "d_out_main_0", "=", "d_cls_main_0", "(", "enl_src_main_0", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main_cls_0", "=", "bce_loss", "(", "d_out_main_0", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main_cls_0", "=", "ls_loss", "(", "d_out_main_0", ",", "source_label", ")", "\n", "", "loss_d_main_cls_0", "=", "loss_d_main_cls_0", "/", "2", "\n", "loss_d_main_cls_0", ".", "backward", "(", ")", "\n", "\n", "# train with target", "\n", "d_out_main_0", "=", "d_cls_main_0", "(", "enl_trg_main_0", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main_cls_0", "=", "bce_loss", "(", "d_out_main_0", ",", "target_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main_cls_0", "=", "ls_loss", "(", "d_out_main_0", ",", "target_label", ")", "\n", "", "loss_d_main_cls_0", "=", "loss_d_main_cls_0", "/", "2", "\n", "loss_d_main_cls_0", ".", "backward", "(", ")", "\n", "\n", "# ---CLS 1---", "\n", "d_out_main_1", "=", "d_cls_main_1", "(", "enl_src_main_1", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main_cls_1", "=", "bce_loss", "(", "d_out_main_1", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main_cls_1", "=", "ls_loss", "(", "d_out_main_1", ",", "source_label", ")", "\n", "", "loss_d_main_cls_1", "=", "loss_d_main_cls_1", "/", "2", "\n", "loss_d_main_cls_1", ".", "backward", "(", ")", "\n", "\n", "# train with target", "\n", "d_out_main_1", "=", "d_cls_main_1", "(", "enl_trg_main_1", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main_cls_1", "=", "bce_loss", "(", "d_out_main_1", ",", "target_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main_cls_1", "=", "ls_loss", "(", "d_out_main_1", ",", "target_label", ")", "\n", "", "loss_d_main_cls_1", "=", "loss_d_main_cls_1", "/", "2", "\n", "loss_d_main_cls_1", ".", "backward", "(", ")", "\n", "\n", "# ---CLS 2---", "\n", "d_out_main_2", "=", "d_cls_main_2", "(", "enl_src_main_2", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main_cls_2", "=", "bce_loss", "(", "d_out_main_2", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main_cls_2", "=", "ls_loss", "(", "d_out_main_2", ",", "source_label", ")", "\n", "", "loss_d_main_cls_2", "=", "loss_d_main_cls_2", "/", "2", "\n", "loss_d_main_cls_2", ".", "backward", "(", ")", "\n", "\n", "# train with target", "\n", "d_out_main_2", "=", "d_cls_main_2", "(", "enl_trg_main_2", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main_cls_2", "=", "bce_loss", "(", "d_out_main_2", ",", "target_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main_cls_2", "=", "ls_loss", "(", "d_out_main_2", ",", "target_label", ")", "\n", "", "loss_d_main_cls_2", "=", "loss_d_main_cls_2", "/", "2", "\n", "loss_d_main_cls_2", ".", "backward", "(", ")", "\n", "\n", "# ---CLS 3---", "\n", "d_out_main_3", "=", "d_cls_main_3", "(", "enl_src_main_3", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main_cls_3", "=", "bce_loss", "(", "d_out_main_3", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main_cls_3", "=", "ls_loss", "(", "d_out_main_3", ",", "source_label", ")", "\n", "", "loss_d_main_cls_3", "=", "loss_d_main_cls_3", "/", "2", "\n", "loss_d_main_cls_3", ".", "backward", "(", ")", "\n", "\n", "# train with target", "\n", "d_out_main_3", "=", "d_cls_main_3", "(", "enl_trg_main_3", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main_cls_3", "=", "bce_loss", "(", "d_out_main_3", ",", "target_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main_cls_3", "=", "ls_loss", "(", "d_out_main_3", ",", "target_label", ")", "\n", "", "loss_d_main_cls_3", "=", "loss_d_main_cls_3", "/", "2", "\n", "loss_d_main_cls_3", ".", "backward", "(", ")", "\n", "\n", "# ---CLS 4---", "\n", "d_out_main_4", "=", "d_cls_main_4", "(", "enl_src_main_4", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main_cls_4", "=", "bce_loss", "(", "d_out_main_4", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main_cls_4", "=", "ls_loss", "(", "d_out_main_4", ",", "source_label", ")", "\n", "", "loss_d_main_cls_4", "=", "loss_d_main_cls_4", "/", "2", "\n", "loss_d_main_cls_4", ".", "backward", "(", ")", "\n", "\n", "# train with target", "\n", "d_out_main_4", "=", "d_cls_main_4", "(", "enl_trg_main_4", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main_cls_4", "=", "bce_loss", "(", "d_out_main_4", ",", "target_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main_cls_4", "=", "ls_loss", "(", "d_out_main_4", ",", "target_label", ")", "\n", "", "loss_d_main_cls_4", "=", "loss_d_main_cls_4", "/", "2", "\n", "loss_d_main_cls_4", ".", "backward", "(", ")", "\n", "\n", "# ---CLS 5---", "\n", "d_out_main_5", "=", "d_cls_main_5", "(", "enl_src_main_5", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main_cls_5", "=", "bce_loss", "(", "d_out_main_5", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main_cls_5", "=", "ls_loss", "(", "d_out_main_5", ",", "source_label", ")", "\n", "", "loss_d_main_cls_5", "=", "loss_d_main_cls_5", "/", "2", "\n", "loss_d_main_cls_5", ".", "backward", "(", ")", "\n", "\n", "# train with target", "\n", "d_out_main_5", "=", "d_cls_main_5", "(", "enl_trg_main_5", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main_cls_5", "=", "bce_loss", "(", "d_out_main_5", ",", "target_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main_cls_5", "=", "ls_loss", "(", "d_out_main_5", ",", "target_label", ")", "\n", "", "loss_d_main_cls_5", "=", "loss_d_main_cls_5", "/", "2", "\n", "loss_d_main_cls_5", ".", "backward", "(", ")", "\n", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "optimizer_d_aux", ".", "step", "(", ")", "\n", "#optimizer_d_main.step()", "\n", "", "optimizer_d_cls", ".", "step", "(", ")", "\n", "\n", "current_losses", "=", "{", "'loss_seg_src_aux'", ":", "loss_seg_src_aux", ",", "\n", "'loss_seg_src_main'", ":", "loss_seg_src_main", ",", "\n", "#'loss_adv_trg_aux': loss_adv_trg_aux,", "\n", "#'loss_adv_trg_main': loss_adv_trg_main,", "\n", "#'loss_d_aux': loss_d_aux,", "\n", "#'loss_d_main': loss_d_main,", "\n", "'loss_cls_0_adv_trg_main'", ":", "loss_cls_0_adv_trg_main", ",", "\n", "'loss_cls_1_adv_trg_main'", ":", "loss_cls_1_adv_trg_main", ",", "\n", "'loss_cls_2_adv_trg_main'", ":", "loss_cls_2_adv_trg_main", ",", "\n", "'loss_cls_3_adv_trg_main'", ":", "loss_cls_3_adv_trg_main", ",", "\n", "'loss_cls_4_adv_trg_main'", ":", "loss_cls_4_adv_trg_main", ",", "\n", "'loss_cls_5_adv_trg_main'", ":", "loss_cls_5_adv_trg_main", ",", "\n", "'loss_d_main_cls_0'", ":", "loss_d_main_cls_0", ",", "\n", "'loss_d_main_cls_1'", ":", "loss_d_main_cls_1", ",", "\n", "'loss_d_main_cls_2'", ":", "loss_d_main_cls_2", ",", "\n", "'loss_d_main_cls_3'", ":", "loss_d_main_cls_3", ",", "\n", "'loss_d_main_cls_4'", ":", "loss_d_main_cls_4", ",", "\n", "'loss_d_main_cls_5'", ":", "loss_d_main_cls_5", "}", "\n", "print_losses", "(", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "SAVE_PRED_EVERY", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "print", "(", "'exp ='", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "snapshot_dir", "=", "Path", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}.pth'", ")", "\n", "torch", ".", "save", "(", "d_aux", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}_D_aux.pth'", ")", "\n", "torch", ".", "save", "(", "d_main", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}_D_main.pth'", ")", "\n", "if", "i_iter", ">=", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "-", "1", ":", "\n", "                ", "break", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# Visualize with tensorboard", "\n", "if", "viz_tensorboard", ":", "\n", "            ", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "==", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "-", "1", ":", "\n", "                ", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_trg_main", ",", "num_classes", ",", "'T'", ")", "\n", "draw_in_tensorboard", "(", "writer", ",", "images_source", ",", "i_iter", ",", "pred_src_main", ",", "num_classes", ",", "'S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_cls.draw_in_tensorboard": [[474, 490], ["torchvision.utils.make_grid", "writer.add_image", "torchvision.utils.make_grid", "writer.add_image", "torch.softmax().cpu().data[].numpy().transpose", "numpy.sum", "torchvision.utils.make_grid", "writer.add_image", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "images[].clone().cpu", "numpy.array().transpose", "torch.softmax().cpu().data[].numpy", "numpy.multiply", "numpy.log2", "numpy.log2", "images[].clone", "numpy.array", "advent.utils.viz_segmask.colorize_mask().convert", "torch.softmax().cpu", "advent.utils.viz_segmask.colorize_mask", "numpy.asarray", "torch.softmax", "numpy.argmax", "torch.softmax().cpu().data[].numpy().transpose", "torch.softmax().cpu().data[].numpy", "torch.softmax().cpu", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.viz_segmask.colorize_mask"], ["", "", "", "", "def", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_main", ",", "num_classes", ",", "type_", ")", ":", "\n", "    ", "grid_image", "=", "make_grid", "(", "images", "[", ":", "3", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "3", ",", "normalize", "=", "True", ")", "\n", "writer", ".", "add_image", "(", "f'Image - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n", "grid_image", "=", "make_grid", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "colorize_mask", "(", "np", ".", "asarray", "(", "\n", "np", ".", "argmax", "(", "F", ".", "softmax", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "\n", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "3", ",", "\n", "normalize", "=", "False", ",", "range", "=", "(", "0", ",", "255", ")", ")", "\n", "writer", ".", "add_image", "(", "f'Prediction - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n", "output_sm", "=", "F", ".", "softmax", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output_ent", "=", "np", ".", "sum", "(", "-", "np", ".", "multiply", "(", "output_sm", ",", "np", ".", "log2", "(", "output_sm", ")", ")", ",", "axis", "=", "2", ",", "\n", "keepdims", "=", "False", ")", "\n", "grid_image", "=", "make_grid", "(", "torch", ".", "from_numpy", "(", "output_ent", ")", ",", "3", ",", "normalize", "=", "True", ",", "\n", "range", "=", "(", "0", ",", "np", ".", "log2", "(", "num_classes", ")", ")", ")", "\n", "writer", ".", "add_image", "(", "f'Entropy - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_cls.train_minent": [[492, 588], ["os.path.exists", "os.path.exists", "model.train", "model.to", "torch.SGD", "torch.nn.Upsample", "torch.nn.Upsample", "enumerate", "enumerate", "tqdm.tqdm", "tensorboardX.SummaryWriter", "model.optim_parameters", "range", "optim.SGD.zero_grad", "advent.utils.func.adjust_learning_rate", "enumerate.__next__", "model", "nn.Upsample.", "advent.utils.func.loss_calc", "loss.backward", "enumerate.__next__", "model", "nn.Upsample.", "nn.Upsample.", "torch.softmax", "torch.softmax", "advent.utils.loss.entropy_loss", "advent.utils.loss.entropy_loss", "loss.backward", "optim.SGD.step", "train_UDA_single_cls.print_losses", "sys.stdout.flush", "images_source.cuda", "nn.Upsample.", "advent.utils.func.loss_calc", "images.cuda", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "train_UDA_single_cls.log_losses_tensorboard", "model.state_dict", "os.join", "train_UDA_single_cls.draw_in_tensorboard", "train_UDA_single_cls.draw_in_tensorboard"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.optim_parameters", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.loss.entropy_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.loss.entropy_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.print_losses", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.log_losses_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard"], ["", "def", "train_minent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "''' UDA training with minEnt\n    '''", "\n", "# Create the model and start the training.", "\n", "input_size_source", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", "\n", "input_size_target", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "\n", "device", "=", "cfg", ".", "GPU_ID", "\n", "num_classes", "=", "cfg", ".", "NUM_CLASSES", "\n", "viz_tensorboard", "=", "os", ".", "path", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "if", "viz_tensorboard", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "\n", "# SEGMNETATION NETWORK", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# OPTIMIZERS", "\n", "# segnet's optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "# interpolate output segmaps", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_source", "[", "1", "]", ",", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "for", "i_iter", "in", "tqdm", "(", "range", "(", "cfg", ".", "TRAIN", ".", "EARLY_STOP", ")", ")", ":", "\n", "\n", "# reset optimizers", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# adapt LR if needed", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ")", "\n", "\n", "# UDA Training", "\n", "# train on source", "\n", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "images_source", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "pred_src_aux", ",", "pred_src_main", "=", "model", "(", "images_source", ".", "cuda", "(", "device", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_src_aux", "=", "interp", "(", "pred_src_aux", ")", "\n", "loss_seg_src_aux", "=", "loss_calc", "(", "pred_src_aux", ",", "labels", ",", "device", ")", "\n", "", "else", ":", "\n", "            ", "loss_seg_src_aux", "=", "0", "\n", "", "pred_src_main", "=", "interp", "(", "pred_src_main", ")", "\n", "loss_seg_src_main", "=", "loss_calc", "(", "pred_src_main", ",", "labels", ",", "device", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_MAIN", "*", "loss_seg_src_main", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_AUX", "*", "loss_seg_src_aux", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# adversarial training with minent", "\n", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "images", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "pred_trg_aux", ",", "pred_trg_main", "=", "model", "(", "images", ".", "cuda", "(", "device", ")", ")", "\n", "pred_trg_aux", "=", "interp_target", "(", "pred_trg_aux", ")", "\n", "pred_trg_main", "=", "interp_target", "(", "pred_trg_main", ")", "\n", "pred_prob_trg_aux", "=", "F", ".", "softmax", "(", "pred_trg_aux", ")", "\n", "pred_prob_trg_main", "=", "F", ".", "softmax", "(", "pred_trg_main", ")", "\n", "\n", "loss_target_entp_aux", "=", "entropy_loss", "(", "pred_prob_trg_aux", ")", "\n", "loss_target_entp_main", "=", "entropy_loss", "(", "pred_prob_trg_main", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_ENT_AUX", "*", "loss_target_entp_aux", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_ENT_MAIN", "*", "loss_target_entp_main", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "current_losses", "=", "{", "'loss_seg_src_aux'", ":", "loss_seg_src_aux", ",", "\n", "'loss_seg_src_main'", ":", "loss_seg_src_main", ",", "\n", "'loss_ent_aux'", ":", "loss_target_entp_aux", ",", "\n", "'loss_ent_main'", ":", "loss_target_entp_main", "}", "\n", "\n", "print_losses", "(", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "SAVE_PRED_EVERY", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "print", "(", "'exp ='", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "osp", ".", "join", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ",", "f'model_{i_iter}.pth'", ")", ")", "\n", "if", "i_iter", ">=", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "-", "1", ":", "\n", "                ", "break", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# Visualize with tensorboard", "\n", "if", "viz_tensorboard", ":", "\n", "            ", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "==", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "-", "1", ":", "\n", "                ", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_trg_main", ",", "num_classes", ",", "'T'", ")", "\n", "draw_in_tensorboard", "(", "writer", ",", "images_source", ",", "i_iter", ",", "pred_src_main", ",", "num_classes", ",", "'S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_cls.print_losses": [[590, 596], ["current_losses.items", "tqdm.tqdm.write", "list_strings.append", "train_UDA_single_cls.to_numpy"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.to_numpy"], ["", "", "", "", "def", "print_losses", "(", "current_losses", ",", "i_iter", ")", ":", "\n", "    ", "list_strings", "=", "[", "]", "\n", "for", "loss_name", ",", "loss_value", "in", "current_losses", ".", "items", "(", ")", ":", "\n", "        ", "list_strings", ".", "append", "(", "f'{loss_name} = {to_numpy(loss_value):.3f} '", ")", "\n", "", "full_string", "=", "' '", ".", "join", "(", "list_strings", ")", "\n", "tqdm", ".", "write", "(", "f'iter = {i_iter} {full_string}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_cls.log_losses_tensorboard": [[598, 601], ["current_losses.items", "writer.add_scalar", "train_UDA_single_cls.to_numpy"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.to_numpy"], ["", "def", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", ":", "\n", "    ", "for", "loss_name", ",", "loss_value", "in", "current_losses", ".", "items", "(", ")", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "f'data/{loss_name}'", ",", "to_numpy", "(", "loss_value", ")", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_cls.to_numpy": [[603, 608], ["isinstance", "tensor.data.cpu().numpy", "tensor.data.cpu"], "function", ["None"], ["", "", "def", "to_numpy", "(", "tensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "tensor", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "return", "tensor", "\n", "", "else", ":", "\n", "        ", "return", "tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_cls.train_domain_adaptation": [[610, 617], ["train_UDA_single_cls.train_minent", "train_UDA_single_cls.train_advent", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_minent", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_advent"], ["", "", "def", "train_domain_adaptation", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "if", "cfg", ".", "TRAIN", ".", "DA_METHOD", "==", "'MinEnt'", ":", "\n", "        ", "train_minent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "DA_METHOD", "==", "'AdvEnt'", ":", "\n", "        ", "train_advent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported DA method {cfg.TRAIN.DA_METHOD}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_multi.evaluate_domain_adaptation": [[20, 38], ["torch.nn.Upsample", "eval_UDA_multi.eval_single", "eval_UDA_multi.eval_best", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.eval_single", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.eval_best"], ["def", "evaluate_domain_adaptation", "(", "models", ",", "test_loader", ",", "cfg", ",", "\n", "fixed_test_size", "=", "True", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "    ", "device", "=", "cfg", ".", "GPU_ID", "\n", "interp", "=", "None", "\n", "if", "fixed_test_size", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "cfg", ".", "TEST", ".", "OUTPUT_SIZE_TARGET", "[", "1", "]", ",", "cfg", ".", "TEST", ".", "OUTPUT_SIZE_TARGET", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "# eval", "\n", "", "if", "cfg", ".", "TEST", ".", "MODE", "==", "'single'", ":", "\n", "        ", "eval_single", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "fixed_test_size", ",", "\n", "verbose", ")", "\n", "", "elif", "cfg", ".", "TEST", ".", "MODE", "==", "'best'", ":", "\n", "        ", "eval_best", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "fixed_test_size", ",", "\n", "verbose", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported test mode {cfg.TEST.MODE}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_multi.eval_single": [[40, 70], ["zip", "numpy.zeros", "tqdm.tqdm", "advent.utils.func.per_class_iu", "print", "len", "len", "eval_UDA_multi.load_checkpoint_for_evaluation", "enumerate", "advent.utils.func.fast_hist", "eval_UDA_multi.display_stats", "torch.nn.Upsample", "torch.no_grad", "zip", "np.argmax.transpose", "numpy.argmax", "label.numpy", "label.flatten", "np.argmax.flatten", "nn.Upsample.cpu().data[].numpy", "round", "model", "image.cuda", "numpy.nanmean", "nn.Upsample.cpu", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.load_checkpoint_for_evaluation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.fast_hist", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.display_stats"], ["", "", "def", "eval_single", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "\n", "fixed_test_size", ",", "verbose", ")", ":", "\n", "    ", "assert", "len", "(", "cfg", ".", "TEST", ".", "RESTORE_FROM", ")", "==", "len", "(", "models", ")", ",", "'Number of models are not matched'", "\n", "for", "checkpoint", ",", "model", "in", "zip", "(", "cfg", ".", "TEST", ".", "RESTORE_FROM", ",", "models", ")", ":", "\n", "        ", "load_checkpoint_for_evaluation", "(", "model", ",", "checkpoint", ",", "device", ")", "\n", "# eval", "\n", "", "hist", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "NUM_CLASSES", ",", "cfg", ".", "NUM_CLASSES", ")", ")", "\n", "for", "index", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "test_loader", ")", ")", ":", "\n", "        ", "image", ",", "label", ",", "_", ",", "name", "=", "batch", "\n", "if", "not", "fixed_test_size", ":", "\n", "            ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "None", "\n", "for", "model", ",", "model_weight", "in", "zip", "(", "models", ",", "cfg", ".", "TEST", ".", "MODEL_WEIGHT", ")", ":", "\n", "                ", "pred_main", "=", "model", "(", "image", ".", "cuda", "(", "device", ")", ")", "[", "2", "]", "# Holobo: Note that for UDA_multi, [2]", "\n", "output_", "=", "interp", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "if", "output", "is", "None", ":", "\n", "                    ", "output", "=", "model_weight", "*", "output_", "\n", "", "else", ":", "\n", "                    ", "output", "+=", "model_weight", "*", "output_", "\n", "", "", "assert", "output", "is", "not", "None", ",", "'Output is None'", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", "\n", "", "label", "=", "label", ".", "numpy", "(", ")", "[", "0", "]", "\n", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", ",", "cfg", ".", "NUM_CLASSES", ")", "\n", "", "inters_over_union_classes", "=", "per_class_iu", "(", "hist", ")", "\n", "print", "(", "f'mIoU = \\t{round(np.nanmean(inters_over_union_classes) * 100, 2)}'", ")", "\n", "if", "verbose", ":", "\n", "        ", "display_stats", "(", "cfg", ",", "test_loader", ".", "dataset", ".", "class_names", ",", "inters_over_union_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_multi.eval_best": [[72, 131], ["os.exists", "os.join", "os.exists", "range", "len", "advent.utils.serialization.pickle_load", "os.join", "print", "round", "print", "print", "print", "os.exists", "advent.utils.serialization.pickle_load.keys", "eval_UDA_multi.load_checkpoint_for_evaluation", "numpy.zeros", "iter", "tqdm.tqdm", "advent.utils.func.per_class_iu", "advent.utils.serialization.pickle_dump", "eval_UDA_multi.display_stats", "print", "range", "next", "advent.utils.func.fast_hist", "numpy.nanmean", "os.exists", "time.sleep", "len", "torch.nn.Upsample", "torch.no_grad", "nn.Upsample.cpu().data[].numpy", "np.argmax.transpose", "numpy.argmax", "label.numpy", "label.flatten", "np.argmax.flatten", "print", "image.cuda", "len", "numpy.nanmean", "nn.Upsample.cpu", "advent.utils.func.per_class_iu", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.pickle_load", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.load_checkpoint_for_evaluation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.pickle_dump", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.display_stats", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.fast_hist", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu"], ["", "", "def", "eval_best", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "\n", "fixed_test_size", ",", "verbose", ")", ":", "\n", "    ", "assert", "len", "(", "models", ")", "==", "1", ",", "'Not yet supported multi models in this mode'", "\n", "assert", "osp", ".", "exists", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ")", ",", "'SNAPSHOT_DIR is not found'", "\n", "start_iter", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_STEP", "\n", "step", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_STEP", "\n", "max_iter", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_MAXITER", "\n", "cache_path", "=", "osp", ".", "join", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ",", "'all_res.pkl'", ")", "\n", "if", "osp", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "all_res", "=", "pickle_load", "(", "cache_path", ")", "\n", "", "else", ":", "\n", "        ", "all_res", "=", "{", "}", "\n", "", "cur_best_miou", "=", "-", "1", "\n", "cur_best_model", "=", "''", "\n", "for", "i_iter", "in", "range", "(", "start_iter", ",", "max_iter", "+", "1", ",", "step", ")", ":", "\n", "        ", "restore_from", "=", "osp", ".", "join", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ",", "f'model_{i_iter}.pth'", ")", "\n", "if", "not", "osp", ".", "exists", "(", "restore_from", ")", ":", "\n", "# continue", "\n", "            ", "if", "cfg", ".", "TEST", ".", "WAIT_MODEL", ":", "\n", "                ", "print", "(", "'Waiting for model..!'", ")", "\n", "while", "not", "osp", ".", "exists", "(", "restore_from", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "5", ")", "\n", "", "", "", "print", "(", "\"Evaluating model\"", ",", "restore_from", ")", "\n", "if", "i_iter", "not", "in", "all_res", ".", "keys", "(", ")", ":", "\n", "            ", "load_checkpoint_for_evaluation", "(", "models", "[", "0", "]", ",", "restore_from", ",", "device", ")", "\n", "# eval", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "NUM_CLASSES", ",", "cfg", ".", "NUM_CLASSES", ")", ")", "\n", "# for index, batch in enumerate(test_loader):", "\n", "#     image, _, _, name = batch", "\n", "test_iter", "=", "iter", "(", "test_loader", ")", "\n", "for", "index", "in", "tqdm", "(", "range", "(", "len", "(", "test_loader", ")", ")", ")", ":", "\n", "                ", "image", ",", "label", ",", "_", ",", "name", "=", "next", "(", "test_iter", ")", "\n", "if", "not", "fixed_test_size", ":", "\n", "                    ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "pred_main", "=", "models", "[", "0", "]", "(", "image", ".", "cuda", "(", "device", ")", ")", "[", "2", "]", "# Holobo: Note that for UDA_multi, [2]", "\n", "output", "=", "interp", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", "\n", "", "label", "=", "label", ".", "numpy", "(", ")", "[", "0", "]", "\n", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", ",", "cfg", ".", "NUM_CLASSES", ")", "\n", "if", "verbose", "and", "index", ">", "0", "and", "index", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "\n", "index", ",", "len", "(", "test_loader", ")", ",", "100", "*", "np", ".", "nanmean", "(", "per_class_iu", "(", "hist", ")", ")", ")", ")", "\n", "", "", "inters_over_union_classes", "=", "per_class_iu", "(", "hist", ")", "\n", "all_res", "[", "i_iter", "]", "=", "inters_over_union_classes", "\n", "pickle_dump", "(", "all_res", ",", "cache_path", ")", "\n", "", "else", ":", "\n", "            ", "inters_over_union_classes", "=", "all_res", "[", "i_iter", "]", "\n", "", "computed_miou", "=", "round", "(", "np", ".", "nanmean", "(", "inters_over_union_classes", ")", "*", "100", ",", "2", ")", "\n", "if", "cur_best_miou", "<", "computed_miou", ":", "\n", "            ", "cur_best_miou", "=", "computed_miou", "\n", "cur_best_model", "=", "restore_from", "\n", "", "print", "(", "'\\tCurrent mIoU:'", ",", "computed_miou", ")", "\n", "print", "(", "'\\tCurrent best model:'", ",", "cur_best_model", ")", "\n", "print", "(", "'\\tCurrent best mIoU:'", ",", "cur_best_miou", ")", "\n", "if", "verbose", ":", "\n", "            ", "display_stats", "(", "cfg", ",", "test_loader", ".", "dataset", ".", "class_names", ",", "inters_over_union_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_multi.load_checkpoint_for_evaluation": [[133, 138], ["torch.load", "model.load_state_dict", "model.eval", "model.cuda"], "function", ["None"], ["", "", "", "def", "load_checkpoint_for_evaluation", "(", "model", ",", "checkpoint", ",", "device", ")", ":", "\n", "    ", "saved_state_dict", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_multi.display_stats": [[140, 144], ["range", "print", "str", "round"], "function", ["None"], ["", "def", "display_stats", "(", "cfg", ",", "name_classes", ",", "inters_over_union_classes", ")", ":", "\n", "    ", "for", "ind_class", "in", "range", "(", "cfg", ".", "NUM_CLASSES", ")", ":", "\n", "        ", "print", "(", "name_classes", "[", "ind_class", "]", "\n", "+", "'\\t'", "+", "str", "(", "round", "(", "inters_over_union_classes", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.evaluate_domain_adaptation": [[20, 38], ["torch.nn.Upsample", "eval_UDA_cat_multi.eval_single", "eval_UDA_cat_multi.eval_best", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.eval_single", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.eval_best"], ["def", "evaluate_domain_adaptation", "(", "models", ",", "test_loader", ",", "cfg", ",", "\n", "fixed_test_size", "=", "True", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "    ", "device", "=", "cfg", ".", "GPU_ID", "\n", "interp", "=", "None", "\n", "if", "fixed_test_size", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "cfg", ".", "TEST", ".", "OUTPUT_SIZE_TARGET", "[", "1", "]", ",", "cfg", ".", "TEST", ".", "OUTPUT_SIZE_TARGET", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "# eval", "\n", "", "if", "cfg", ".", "TEST", ".", "MODE", "==", "'single'", ":", "\n", "        ", "eval_single", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "fixed_test_size", ",", "\n", "verbose", ")", "\n", "", "elif", "cfg", ".", "TEST", ".", "MODE", "==", "'best'", ":", "\n", "        ", "eval_best", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "fixed_test_size", ",", "\n", "verbose", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported test mode {cfg.TEST.MODE}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.eval_single": [[40, 77], ["zip", "numpy.zeros", "tqdm.tqdm", "advent.utils.func.per_class_iu", "print", "len", "len", "eval_UDA_cat_multi.load_checkpoint_for_evaluation", "enumerate", "advent.utils.func.fast_hist", "eval_UDA_cat_multi.display_stats", "torch.nn.Upsample", "torch.no_grad", "zip", "np.argmax.transpose", "numpy.argmax", "label.numpy", "label.flatten", "np.argmax.flatten", "nn.Upsample.cpu().data[].numpy", "nn.Upsample.cpu().data[].numpy", "nn.Upsample.cpu().data[].numpy", "round", "model", "model", "model", "image.cuda", "image.cuda", "image.cuda", "numpy.nanmean", "nn.Upsample.cpu", "nn.Upsample.cpu", "nn.Upsample.cpu", "nn.Upsample.", "nn.Upsample.", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.load_checkpoint_for_evaluation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.fast_hist", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.display_stats"], ["", "", "def", "eval_single", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "\n", "fixed_test_size", ",", "verbose", ")", ":", "\n", "    ", "assert", "len", "(", "cfg", ".", "TEST", ".", "RESTORE_FROM", ")", "==", "len", "(", "models", ")", ",", "'Number of models are not matched'", "\n", "for", "checkpoint", ",", "model", "in", "zip", "(", "cfg", ".", "TEST", ".", "RESTORE_FROM", ",", "models", ")", ":", "\n", "        ", "load_checkpoint_for_evaluation", "(", "model", ",", "checkpoint", ",", "device", ")", "\n", "# eval", "\n", "", "hist", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "NUM_CLASSES", ",", "cfg", ".", "NUM_CLASSES", ")", ")", "\n", "for", "index", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "test_loader", ")", ")", ":", "\n", "        ", "image", ",", "label", ",", "_", ",", "name", "=", "batch", "\n", "if", "not", "fixed_test_size", ":", "\n", "            ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "None", "\n", "for", "model", ",", "model_weight", "in", "zip", "(", "models", ",", "cfg", ".", "TEST", ".", "MODEL_WEIGHT", ")", ":", "\n", "                ", "pred_low", "=", "model", "(", "image", ".", "cuda", "(", "device", ")", ")", "[", "0", "]", "# Holobo: Element-wise all output preds", "\n", "pred_aux", "=", "model", "(", "image", ".", "cuda", "(", "device", ")", ")", "[", "1", "]", "\n", "pred_main", "=", "model", "(", "image", ".", "cuda", "(", "device", ")", ")", "[", "2", "]", "\n", "\n", "pred_low_u", "=", "interp", "(", "pred_low", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "pred_aux_u", "=", "interp", "(", "pred_aux", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "pred_main_u", "=", "interp", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "pred_final", "=", "pred_low_u", "+", "pred_aux_u", "+", "pred_main_u", "\n", "if", "output", "is", "None", ":", "\n", "                    ", "output", "=", "model_weight", "*", "pred_final", "\n", "", "else", ":", "\n", "                    ", "output", "+=", "model_weight", "*", "pred_final", "\n", "", "", "assert", "output", "is", "not", "None", ",", "'Output is None'", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", "\n", "", "label", "=", "label", ".", "numpy", "(", ")", "[", "0", "]", "\n", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", ",", "cfg", ".", "NUM_CLASSES", ")", "\n", "", "inters_over_union_classes", "=", "per_class_iu", "(", "hist", ")", "\n", "print", "(", "f'mIoU = \\t{round(np.nanmean(inters_over_union_classes) * 100, 2)}'", ")", "\n", "if", "verbose", ":", "\n", "        ", "display_stats", "(", "cfg", ",", "test_loader", ".", "dataset", ".", "class_names", ",", "inters_over_union_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.eval_best": [[79, 145], ["os.exists", "os.join", "os.exists", "range", "len", "advent.utils.serialization.pickle_load", "os.join", "print", "round", "print", "print", "print", "os.exists", "advent.utils.serialization.pickle_load.keys", "eval_UDA_cat_multi.load_checkpoint_for_evaluation", "numpy.zeros", "iter", "tqdm.tqdm", "advent.utils.func.per_class_iu", "advent.utils.serialization.pickle_dump", "eval_UDA_cat_multi.display_stats", "print", "range", "next", "advent.utils.func.fast_hist", "numpy.nanmean", "os.exists", "time.sleep", "len", "torch.nn.Upsample", "torch.no_grad", "nn.Upsample.cpu().data[].numpy", "nn.Upsample.cpu().data[].numpy", "nn.Upsample.cpu().data[].numpy", "pred_final.transpose", "numpy.argmax", "label.numpy", "label.flatten", "np.argmax.flatten", "print", "image.cuda", "image.cuda", "image.cuda", "len", "numpy.nanmean", "nn.Upsample.cpu", "nn.Upsample.cpu", "nn.Upsample.cpu", "advent.utils.func.per_class_iu", "nn.Upsample.", "nn.Upsample.", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.pickle_load", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.load_checkpoint_for_evaluation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.serialization.pickle_dump", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.display_stats", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.fast_hist", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.per_class_iu"], ["", "", "def", "eval_best", "(", "cfg", ",", "models", ",", "\n", "device", ",", "test_loader", ",", "interp", ",", "\n", "fixed_test_size", ",", "verbose", ")", ":", "\n", "    ", "assert", "len", "(", "models", ")", "==", "1", ",", "'Not yet supported multi models in this mode'", "\n", "assert", "osp", ".", "exists", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ")", ",", "'SNAPSHOT_DIR is not found'", "\n", "start_iter", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_STEP", "\n", "step", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_STEP", "\n", "max_iter", "=", "cfg", ".", "TEST", ".", "SNAPSHOT_MAXITER", "\n", "cache_path", "=", "osp", ".", "join", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ",", "'all_res.pkl'", ")", "\n", "if", "osp", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "all_res", "=", "pickle_load", "(", "cache_path", ")", "\n", "", "else", ":", "\n", "        ", "all_res", "=", "{", "}", "\n", "", "cur_best_miou", "=", "-", "1", "\n", "cur_best_model", "=", "''", "\n", "for", "i_iter", "in", "range", "(", "start_iter", ",", "max_iter", "+", "1", ",", "step", ")", ":", "\n", "        ", "restore_from", "=", "osp", ".", "join", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ",", "f'model_{i_iter}.pth'", ")", "\n", "if", "not", "osp", ".", "exists", "(", "restore_from", ")", ":", "\n", "# continue", "\n", "            ", "if", "cfg", ".", "TEST", ".", "WAIT_MODEL", ":", "\n", "                ", "print", "(", "'Waiting for model..!'", ")", "\n", "while", "not", "osp", ".", "exists", "(", "restore_from", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "5", ")", "\n", "", "", "", "print", "(", "\"Evaluating model\"", ",", "restore_from", ")", "\n", "if", "i_iter", "not", "in", "all_res", ".", "keys", "(", ")", ":", "\n", "            ", "load_checkpoint_for_evaluation", "(", "models", "[", "0", "]", ",", "restore_from", ",", "device", ")", "\n", "# eval", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "NUM_CLASSES", ",", "cfg", ".", "NUM_CLASSES", ")", ")", "\n", "# for index, batch in enumerate(test_loader):", "\n", "#     image, _, _, name = batch", "\n", "test_iter", "=", "iter", "(", "test_loader", ")", "\n", "for", "index", "in", "tqdm", "(", "range", "(", "len", "(", "test_loader", ")", ")", ")", ":", "\n", "                ", "image", ",", "label", ",", "_", ",", "name", "=", "next", "(", "test_iter", ")", "\n", "if", "not", "fixed_test_size", ":", "\n", "                    ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "pred_low", "=", "models", "[", "0", "]", "(", "image", ".", "cuda", "(", "device", ")", ")", "[", "0", "]", "# Holobo: Element-wise all output preds", "\n", "pred_aux", "=", "models", "[", "0", "]", "(", "image", ".", "cuda", "(", "device", ")", ")", "[", "1", "]", "\n", "pred_main", "=", "models", "[", "0", "]", "(", "image", ".", "cuda", "(", "device", ")", ")", "[", "2", "]", "\n", "\n", "pred_low_u", "=", "interp", "(", "pred_low", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "pred_aux_u", "=", "interp", "(", "pred_aux", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "pred_main_u", "=", "interp", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "pred_final", "=", "pred_low_u", "+", "pred_aux_u", "+", "pred_main_u", "\n", "\n", "output", "=", "pred_final", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", "\n", "", "label", "=", "label", ".", "numpy", "(", ")", "[", "0", "]", "\n", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", ",", "cfg", ".", "NUM_CLASSES", ")", "\n", "if", "verbose", "and", "index", ">", "0", "and", "index", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "\n", "index", ",", "len", "(", "test_loader", ")", ",", "100", "*", "np", ".", "nanmean", "(", "per_class_iu", "(", "hist", ")", ")", ")", ")", "\n", "", "", "inters_over_union_classes", "=", "per_class_iu", "(", "hist", ")", "\n", "all_res", "[", "i_iter", "]", "=", "inters_over_union_classes", "\n", "pickle_dump", "(", "all_res", ",", "cache_path", ")", "\n", "", "else", ":", "\n", "            ", "inters_over_union_classes", "=", "all_res", "[", "i_iter", "]", "\n", "", "computed_miou", "=", "round", "(", "np", ".", "nanmean", "(", "inters_over_union_classes", ")", "*", "100", ",", "2", ")", "\n", "if", "cur_best_miou", "<", "computed_miou", ":", "\n", "            ", "cur_best_miou", "=", "computed_miou", "\n", "cur_best_model", "=", "restore_from", "\n", "", "print", "(", "'\\tCurrent mIoU:'", ",", "computed_miou", ")", "\n", "print", "(", "'\\tCurrent best model:'", ",", "cur_best_model", ")", "\n", "print", "(", "'\\tCurrent best mIoU:'", ",", "cur_best_miou", ")", "\n", "if", "verbose", ":", "\n", "            ", "display_stats", "(", "cfg", ",", "test_loader", ".", "dataset", ".", "class_names", ",", "inters_over_union_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.load_checkpoint_for_evaluation": [[147, 152], ["torch.load", "model.load_state_dict", "model.eval", "model.cuda"], "function", ["None"], ["", "", "", "def", "load_checkpoint_for_evaluation", "(", "model", ",", "checkpoint", ",", "device", ")", ":", "\n", "    ", "saved_state_dict", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.display_stats": [[154, 158], ["range", "print", "str", "round"], "function", ["None"], ["", "def", "display_stats", "(", "cfg", ",", "name_classes", ",", "inters_over_union_classes", ")", ":", "\n", "    ", "for", "ind_class", "in", "range", "(", "cfg", ".", "NUM_CLASSES", ")", ":", "\n", "        ", "print", "(", "name_classes", "[", "ind_class", "]", "\n", "+", "'\\t'", "+", "str", "(", "round", "(", "inters_over_union_classes", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_advent": [[30, 217], ["os.path.exists", "os.path.exists", "model.train", "model.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "advent.model.discriminator.get_fc_discriminator", "advent.model.discriminator.get_fc_discriminator.train", "advent.model.discriminator.get_fc_discriminator.to", "torch.SGD", "torch.Adam", "torch.Adam", "torch.nn.Upsample", "torch.nn.Upsample", "enumerate", "enumerate", "tqdm.tqdm", "tensorboardX.SummaryWriter", "model.optim_parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "range", "optim.SGD.zero_grad", "optim.Adam.zero_grad", "optim.Adam.zero_grad", "advent.utils.func.adjust_learning_rate", "advent.utils.func.adjust_learning_rate_discriminator", "advent.utils.func.adjust_learning_rate_discriminator", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "enumerate.__next__", "model", "nn.Upsample.", "advent.utils.func.loss_calc", "loss.backward", "enumerate.__next__", "model", "advent.model.discriminator.get_fc_discriminator.", "loss.backward", "advent.model.discriminator.get_fc_discriminator.parameters", "advent.model.discriminator.get_fc_discriminator.parameters", "pred_src_high.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "pred_trg_high.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "optim.SGD.step", "optim.Adam.step", "train_UDA_single_FL.print_losses", "sys.stdout.flush", "images_source.cuda", "images.cuda", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.bce_loss", "pred_src_aux.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.utils.func.bce_loss", "pred_trg_aux.detach.detach", "advent.model.discriminator.get_fc_discriminator.", "advent.utils.func.ls_loss.backward", "advent.utils.func.bce_loss", "optim.Adam.step", "print", "print", "pathlib.Path", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train_UDA_single_FL.log_losses_tensorboard", "advent.utils.func.bce_loss", "advent.utils.func.ls_loss", "advent.utils.func.bce_loss", "advent.utils.func.ls_loss", "advent.utils.func.bce_loss", "advent.utils.func.ls_loss", "model.state_dict", "advent.model.discriminator.get_fc_discriminator.state_dict", "advent.model.discriminator.get_fc_discriminator.state_dict", "train_UDA_single_FL.draw_in_tensorboard", "train_UDA_single_FL.draw_in_tensorboard", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss", "advent.utils.func.ls_loss"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.discriminator.get_fc_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.optim_parameters", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate_discriminator", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.print_losses", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.log_losses_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.bce_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.ls_loss"], ["def", "train_advent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "''' UDA training with advent\n    '''", "\n", "# Create the model and start the training.", "\n", "input_size_source", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", "\n", "input_size_target", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "\n", "device", "=", "cfg", ".", "GPU_ID", "\n", "num_classes", "=", "cfg", ".", "NUM_CLASSES", "\n", "viz_tensorboard", "=", "os", ".", "path", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "if", "viz_tensorboard", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "\n", "# SEGMNETATION NETWORK", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# DISCRIMINATOR NETWORK", "\n", "# feature-level", "\n", "d_aux", "=", "get_fc_discriminator", "(", "num_classes", "=", "512", ")", "\n", "d_aux", ".", "train", "(", ")", "\n", "d_aux", ".", "to", "(", "device", ")", "\n", "\n", "# seg maps, i.e. output, level", "\n", "d_main", "=", "get_fc_discriminator", "(", "num_classes", "=", "2048", ")", "\n", "d_main", ".", "train", "(", ")", "\n", "d_main", ".", "to", "(", "device", ")", "\n", "\n", "\n", "# OPTIMIZERS", "\n", "# segnet's optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "# discriminators' optimizers", "\n", "optimizer_d_aux", "=", "optim", ".", "Adam", "(", "d_aux", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ",", "\n", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "optimizer_d_main", "=", "optim", ".", "Adam", "(", "d_main", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE_D", ",", "\n", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "\n", "# interpolate output segmaps", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_source", "[", "1", "]", ",", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "# labels for adversarial training", "\n", "source_label", "=", "0", "\n", "target_label", "=", "1", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "for", "i_iter", "in", "tqdm", "(", "range", "(", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "+", "1", ")", ")", ":", "\n", "\n", "# reset optimizers", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_d_aux", ".", "zero_grad", "(", ")", "\n", "optimizer_d_main", ".", "zero_grad", "(", ")", "\n", "# adapt LR if needed", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ")", "\n", "adjust_learning_rate_discriminator", "(", "optimizer_d_aux", ",", "i_iter", ",", "cfg", ")", "\n", "adjust_learning_rate_discriminator", "(", "optimizer_d_main", ",", "i_iter", ",", "cfg", ")", "\n", "\n", "# UDA Training", "\n", "# only train segnet. Don't accumulate grads in disciminators", "\n", "for", "param", "in", "d_aux", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "d_main", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "# train on source", "\n", "", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "images_source", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "pred_src_aux", ",", "pred_src_high", ",", "pred_src_main", "=", "model", "(", "images_source", ".", "cuda", "(", "device", ")", ")", "\n", "\n", "pred_src_main", "=", "interp", "(", "pred_src_main", ")", "\n", "loss_seg_src_main", "=", "loss_calc", "(", "pred_src_main", ",", "labels", ",", "device", ")", "\n", "loss", "=", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_MAIN", "*", "loss_seg_src_main", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# adversarial training ot fool the discriminator", "\n", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "images", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "pred_trg_aux", ",", "pred_trg_high", ",", "pred_trg_main", "=", "model", "(", "images", ".", "cuda", "(", "device", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "d_out_aux", "=", "d_aux", "(", "pred_trg_aux", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "                ", "loss_adv_trg_aux", "=", "bce_loss", "(", "d_out_aux", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "                ", "loss_adv_trg_aux", "=", "ls_loss", "(", "d_out_aux", ",", "source_label", ")", "\n", "#loss_adv_trg_aux = loss_adv_trg_aux * torch.exp(loss_adv_trg_aux)", "\n", "", "", "else", ":", "\n", "            ", "loss_adv_trg_aux", "=", "0", "\n", "#pred_trg_main = interp_target(pred_trg_main)", "\n", "#d_out_main = d_main(prob_2_entropy(F.softmax(pred_trg_main)))", "\n", "", "d_out_main", "=", "d_main", "(", "pred_trg_high", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_adv_trg_main", "=", "bce_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_adv_trg_main", "=", "ls_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "#loss_adv_trg_main = loss_adv_trg_main * torch.exp(loss_adv_trg_main)", "\n", "", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_ADV_MAIN", "*", "loss_adv_trg_main", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_ADV_AUX", "*", "loss_adv_trg_aux", ")", "\n", "loss", "=", "loss", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Train discriminator networks", "\n", "# enable training mode on discriminator networks", "\n", "for", "param", "in", "d_aux", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "d_main", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "# train with source", "\n", "", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_src_aux", "=", "pred_src_aux", ".", "detach", "(", ")", "\n", "d_out_aux", "=", "d_aux", "(", "pred_src_aux", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "                ", "loss_d_aux", "=", "bce_loss", "(", "d_out_aux", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "                ", "loss_d_aux", "=", "ls_loss", "(", "d_out_aux", ",", "source_label", ")", "\n", "", "loss_d_aux", "=", "loss_d_aux", "/", "2", "\n", "loss_d_aux", ".", "backward", "(", ")", "\n", "#pred_src_main = pred_src_main.detach()", "\n", "", "pred_src_high", "=", "pred_src_high", ".", "detach", "(", ")", "\n", "#d_out_main = d_main(prob_2_entropy(F.softmax(pred_src_main)))", "\n", "d_out_main", "=", "d_main", "(", "pred_src_high", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main", "=", "bce_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main", "=", "ls_loss", "(", "d_out_main", ",", "source_label", ")", "\n", "", "loss_d_main", "=", "loss_d_main", "/", "2", "\n", "loss_d_main", ".", "backward", "(", ")", "\n", "\n", "# train with target", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_trg_aux", "=", "pred_trg_aux", ".", "detach", "(", ")", "\n", "d_out_aux", "=", "d_aux", "(", "pred_trg_aux", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "                ", "loss_d_aux", "=", "bce_loss", "(", "d_out_aux", ",", "target_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "                ", "loss_d_aux", "=", "ls_loss", "(", "d_out_aux", ",", "target_label", ")", "\n", "", "loss_d_aux", "=", "loss_d_aux", "/", "2", "\n", "loss_d_aux", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss_d_aux", "=", "0", "\n", "#pred_trg_main = pred_trg_main.detach()", "\n", "", "pred_trg_high", "=", "pred_trg_high", ".", "detach", "(", ")", "\n", "#d_out_main = d_main(prob_2_entropy(F.softmax(pred_trg_main)))", "\n", "d_out_main", "=", "d_main", "(", "pred_trg_high", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'BCE'", ":", "\n", "            ", "loss_d_main", "=", "bce_loss", "(", "d_out_main", ",", "target_label", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "GANLOSS", "==", "'LS'", ":", "\n", "            ", "loss_d_main", "=", "ls_loss", "(", "d_out_main", ",", "target_label", ")", "\n", "", "loss_d_main", "=", "loss_d_main", "/", "2", "\n", "loss_d_main", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "optimizer_d_aux", ".", "step", "(", ")", "\n", "", "optimizer_d_main", ".", "step", "(", ")", "\n", "\n", "current_losses", "=", "{", "'loss_seg_src_main'", ":", "loss_seg_src_main", ",", "\n", "'loss_adv_trg_aux'", ":", "loss_adv_trg_aux", ",", "\n", "'loss_adv_trg_main'", ":", "loss_adv_trg_main", ",", "\n", "'loss_d_aux'", ":", "loss_d_aux", ",", "\n", "'loss_d_main'", ":", "loss_d_main", "}", "\n", "print_losses", "(", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "SAVE_PRED_EVERY", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "print", "(", "'exp ='", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "snapshot_dir", "=", "Path", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}.pth'", ")", "\n", "torch", ".", "save", "(", "d_aux", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}_D_aux.pth'", ")", "\n", "torch", ".", "save", "(", "d_main", ".", "state_dict", "(", ")", ",", "snapshot_dir", "/", "f'model_{i_iter}_D_main.pth'", ")", "\n", "if", "i_iter", ">=", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "-", "1", ":", "\n", "                ", "break", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# Visualize with tensorboard", "\n", "if", "viz_tensorboard", ":", "\n", "            ", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "==", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "-", "1", ":", "\n", "                ", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_trg_main", ",", "num_classes", ",", "'T'", ")", "\n", "draw_in_tensorboard", "(", "writer", ",", "images_source", ",", "i_iter", ",", "pred_src_main", ",", "num_classes", ",", "'S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard": [[219, 235], ["torchvision.utils.make_grid", "writer.add_image", "torchvision.utils.make_grid", "writer.add_image", "torch.softmax().cpu().data[].numpy().transpose", "numpy.sum", "torchvision.utils.make_grid", "writer.add_image", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "images[].clone().cpu", "numpy.array().transpose", "torch.softmax().cpu().data[].numpy", "numpy.multiply", "numpy.log2", "numpy.log2", "images[].clone", "numpy.array", "advent.utils.viz_segmask.colorize_mask().convert", "torch.softmax().cpu", "advent.utils.viz_segmask.colorize_mask", "numpy.asarray", "torch.softmax", "numpy.argmax", "torch.softmax().cpu().data[].numpy().transpose", "torch.softmax().cpu().data[].numpy", "torch.softmax().cpu", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.viz_segmask.colorize_mask"], ["", "", "", "", "def", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_main", ",", "num_classes", ",", "type_", ")", ":", "\n", "    ", "grid_image", "=", "make_grid", "(", "images", "[", ":", "3", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "3", ",", "normalize", "=", "True", ")", "\n", "writer", ".", "add_image", "(", "f'Image - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n", "grid_image", "=", "make_grid", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "colorize_mask", "(", "np", ".", "asarray", "(", "\n", "np", ".", "argmax", "(", "F", ".", "softmax", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "\n", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ",", "3", ",", "\n", "normalize", "=", "False", ",", "range", "=", "(", "0", ",", "255", ")", ")", "\n", "writer", ".", "add_image", "(", "f'Prediction - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n", "output_sm", "=", "F", ".", "softmax", "(", "pred_main", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output_ent", "=", "np", ".", "sum", "(", "-", "np", ".", "multiply", "(", "output_sm", ",", "np", ".", "log2", "(", "output_sm", ")", ")", ",", "axis", "=", "2", ",", "\n", "keepdims", "=", "False", ")", "\n", "grid_image", "=", "make_grid", "(", "torch", ".", "from_numpy", "(", "output_ent", ")", ",", "3", ",", "normalize", "=", "True", ",", "\n", "range", "=", "(", "0", ",", "np", ".", "log2", "(", "num_classes", ")", ")", ")", "\n", "writer", ".", "add_image", "(", "f'Entropy - {type_}'", ",", "grid_image", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_minent": [[237, 333], ["os.path.exists", "os.path.exists", "model.train", "model.to", "torch.SGD", "torch.nn.Upsample", "torch.nn.Upsample", "enumerate", "enumerate", "tqdm.tqdm", "tensorboardX.SummaryWriter", "model.optim_parameters", "range", "optim.SGD.zero_grad", "advent.utils.func.adjust_learning_rate", "enumerate.__next__", "model", "nn.Upsample.", "advent.utils.func.loss_calc", "loss.backward", "enumerate.__next__", "model", "nn.Upsample.", "nn.Upsample.", "torch.softmax", "torch.softmax", "advent.utils.loss.entropy_loss", "advent.utils.loss.entropy_loss", "loss.backward", "optim.SGD.step", "train_UDA_single_FL.print_losses", "sys.stdout.flush", "images_source.cuda", "nn.Upsample.", "advent.utils.func.loss_calc", "images.cuda", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "train_UDA_single_FL.log_losses_tensorboard", "model.state_dict", "os.join", "train_UDA_single_FL.draw_in_tensorboard", "train_UDA_single_FL.draw_in_tensorboard"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.ResNetSingleFL.optim_parameters", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.adjust_learning_rate", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.loss.entropy_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.loss.entropy_loss", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.print_losses", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.loss_calc", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.log_losses_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.draw_in_tensorboard"], ["", "def", "train_minent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "''' UDA training with minEnt\n    '''", "\n", "# Create the model and start the training.", "\n", "input_size_source", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", "\n", "input_size_target", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "\n", "device", "=", "cfg", ".", "GPU_ID", "\n", "num_classes", "=", "cfg", ".", "NUM_CLASSES", "\n", "viz_tensorboard", "=", "os", ".", "path", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "if", "viz_tensorboard", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ")", "\n", "\n", "# SEGMNETATION NETWORK", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# OPTIMIZERS", "\n", "# segnet's optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "# interpolate output segmaps", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_source", "[", "1", "]", ",", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "for", "i_iter", "in", "tqdm", "(", "range", "(", "cfg", ".", "TRAIN", ".", "EARLY_STOP", ")", ")", ":", "\n", "\n", "# reset optimizers", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# adapt LR if needed", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "cfg", ")", "\n", "\n", "# UDA Training", "\n", "# train on source", "\n", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "images_source", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "pred_src_aux", ",", "pred_src_main", "=", "model", "(", "images_source", ".", "cuda", "(", "device", ")", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ":", "\n", "            ", "pred_src_aux", "=", "interp", "(", "pred_src_aux", ")", "\n", "loss_seg_src_aux", "=", "loss_calc", "(", "pred_src_aux", ",", "labels", ",", "device", ")", "\n", "", "else", ":", "\n", "            ", "loss_seg_src_aux", "=", "0", "\n", "", "pred_src_main", "=", "interp", "(", "pred_src_main", ")", "\n", "loss_seg_src_main", "=", "loss_calc", "(", "pred_src_main", ",", "labels", ",", "device", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_MAIN", "*", "loss_seg_src_main", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_SEG_AUX", "*", "loss_seg_src_aux", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# adversarial training with minent", "\n", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "images", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "pred_trg_aux", ",", "pred_trg_main", "=", "model", "(", "images", ".", "cuda", "(", "device", ")", ")", "\n", "pred_trg_aux", "=", "interp_target", "(", "pred_trg_aux", ")", "\n", "pred_trg_main", "=", "interp_target", "(", "pred_trg_main", ")", "\n", "pred_prob_trg_aux", "=", "F", ".", "softmax", "(", "pred_trg_aux", ")", "\n", "pred_prob_trg_main", "=", "F", ".", "softmax", "(", "pred_trg_main", ")", "\n", "\n", "loss_target_entp_aux", "=", "entropy_loss", "(", "pred_prob_trg_aux", ")", "\n", "loss_target_entp_main", "=", "entropy_loss", "(", "pred_prob_trg_main", ")", "\n", "loss", "=", "(", "cfg", ".", "TRAIN", ".", "LAMBDA_ENT_AUX", "*", "loss_target_entp_aux", "\n", "+", "cfg", ".", "TRAIN", ".", "LAMBDA_ENT_MAIN", "*", "loss_target_entp_main", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "current_losses", "=", "{", "'loss_seg_src_aux'", ":", "loss_seg_src_aux", ",", "\n", "'loss_seg_src_main'", ":", "loss_seg_src_main", ",", "\n", "'loss_ent_aux'", ":", "loss_target_entp_aux", ",", "\n", "'loss_ent_main'", ":", "loss_target_entp_main", "}", "\n", "\n", "print_losses", "(", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "SAVE_PRED_EVERY", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "print", "(", "'exp ='", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "osp", ".", "join", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ",", "f'model_{i_iter}.pth'", ")", ")", "\n", "if", "i_iter", ">=", "cfg", ".", "TRAIN", ".", "EARLY_STOP", "-", "1", ":", "\n", "                ", "break", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# Visualize with tensorboard", "\n", "if", "viz_tensorboard", ":", "\n", "            ", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", "\n", "\n", "if", "i_iter", "%", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "==", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "-", "1", ":", "\n", "                ", "draw_in_tensorboard", "(", "writer", ",", "images", ",", "i_iter", ",", "pred_trg_main", ",", "num_classes", ",", "'T'", ")", "\n", "draw_in_tensorboard", "(", "writer", ",", "images_source", ",", "i_iter", ",", "pred_src_main", ",", "num_classes", ",", "'S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.print_losses": [[335, 341], ["current_losses.items", "tqdm.tqdm.write", "list_strings.append", "train_UDA_single_FL.to_numpy"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.to_numpy"], ["", "", "", "", "def", "print_losses", "(", "current_losses", ",", "i_iter", ")", ":", "\n", "    ", "list_strings", "=", "[", "]", "\n", "for", "loss_name", ",", "loss_value", "in", "current_losses", ".", "items", "(", ")", ":", "\n", "        ", "list_strings", ".", "append", "(", "f'{loss_name} = {to_numpy(loss_value):.3f} '", ")", "\n", "", "full_string", "=", "' '", ".", "join", "(", "list_strings", ")", "\n", "tqdm", ".", "write", "(", "f'iter = {i_iter} {full_string}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.log_losses_tensorboard": [[343, 346], ["current_losses.items", "writer.add_scalar", "train_UDA_single_FL.to_numpy"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.to_numpy"], ["", "def", "log_losses_tensorboard", "(", "writer", ",", "current_losses", ",", "i_iter", ")", ":", "\n", "    ", "for", "loss_name", ",", "loss_value", "in", "current_losses", ".", "items", "(", ")", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "f'data/{loss_name}'", ",", "to_numpy", "(", "loss_value", ")", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.to_numpy": [[348, 353], ["isinstance", "tensor.data.cpu().numpy", "tensor.data.cpu"], "function", ["None"], ["", "", "def", "to_numpy", "(", "tensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "tensor", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "return", "tensor", "\n", "", "else", ":", "\n", "        ", "return", "tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_domain_adaptation": [[355, 362], ["train_UDA_single_FL.train_minent", "train_UDA_single_FL.train_advent", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_minent", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_advent"], ["", "", "def", "train_domain_adaptation", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", ":", "\n", "    ", "if", "cfg", ".", "TRAIN", ".", "DA_METHOD", "==", "'MinEnt'", ":", "\n", "        ", "train_minent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "DA_METHOD", "==", "'AdvEnt'", ":", "\n", "        ", "train_advent", "(", "model", ",", "trainloader", ",", "targetloader", ",", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported DA method {cfg.TRAIN.DA_METHOD}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.test.label_to_color.create_pascal_label_colormap": [[15, 26], ["numpy.zeros", "numpy.arange", "reversed", "range", "range"], "function", ["None"], ["def", "create_pascal_label_colormap", "(", ")", ":", "\n", "\n", "    ", "colormap", "=", "np", ".", "zeros", "(", "(", "256", ",", "3", ")", ",", "dtype", "=", "int", ")", "\n", "ind", "=", "np", ".", "arange", "(", "256", ",", "dtype", "=", "int", ")", "\n", "\n", "for", "shift", "in", "reversed", "(", "range", "(", "8", ")", ")", ":", "\n", "        ", "for", "channel", "in", "range", "(", "3", ")", ":", "\n", "            ", "colormap", "[", ":", ",", "channel", "]", "|=", "(", "(", "ind", ">>", "channel", ")", "&", "1", ")", "<<", "shift", "\n", "", "ind", ">>=", "3", "\n", "\n", "", "return", "colormap", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.test.label_to_color.label_to_color_image": [[28, 39], ["label_to_color.create_pascal_label_colormap", "ValueError", "numpy.max", "len", "ValueError"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.test.label_to_color.create_pascal_label_colormap"], ["", "def", "label_to_color_image", "(", "label", ")", ":", "\n", "\n", "    ", "if", "label", ".", "ndim", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'Expect 2-D input label'", ")", "\n", "\n", "", "colormap", "=", "create_pascal_label_colormap", "(", ")", "\n", "\n", "if", "np", ".", "max", "(", "label", ")", ">=", "len", "(", "colormap", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'label value too large.'", ")", "\n", "\n", "", "return", "colormap", "[", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.test.label_to_color.vis_segmentation": [[41, 72], ["matplotlib.figure", "matplotlib.gridspec.GridSpec", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.subplot", "label_to_color_image().astype", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "numpy.unique", "matplotlib.subplot", "matplotlib.imshow", "plt.subplot.yaxis.tick_right", "matplotlib.yticks", "matplotlib.xticks", "plt.subplot.tick_params", "matplotlib.grid", "matplotlib.show", "FULL_COLOR_MAP[].astype", "range", "label_to_color.label_to_color_image", "len"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.test.label_to_color.label_to_color_image"], ["", "def", "vis_segmentation", "(", "image", ",", "seg_map", ")", ":", "\n", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "5", ")", ")", "\n", "grid_spec", "=", "gridspec", ".", "GridSpec", "(", "1", ",", "4", ",", "width_ratios", "=", "[", "6", ",", "6", ",", "6", ",", "1", "]", ")", "\n", "\n", "plt", ".", "subplot", "(", "grid_spec", "[", "0", "]", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'input image'", ")", "\n", "\n", "plt", ".", "subplot", "(", "grid_spec", "[", "1", "]", ")", "\n", "seg_image", "=", "label_to_color_image", "(", "seg_map", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "plt", ".", "imshow", "(", "seg_image", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'segmentation map'", ")", "\n", "\n", "plt", ".", "subplot", "(", "grid_spec", "[", "2", "]", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "imshow", "(", "seg_image", ",", "alpha", "=", "0.7", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'segmentation overlay'", ")", "\n", "\n", "unique_labels", "=", "np", ".", "unique", "(", "seg_map", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "grid_spec", "[", "3", "]", ")", "\n", "plt", ".", "imshow", "(", "FULL_COLOR_MAP", "[", "unique_labels", "]", ".", "astype", "(", "np", ".", "uint8", ")", ",", "interpolation", "=", "'nearest'", ")", "\n", "ax", ".", "yaxis", ".", "tick_right", "(", ")", "\n", "plt", ".", "yticks", "(", "range", "(", "len", "(", "unique_labels", ")", ")", ",", "LABEL_NAMES", "[", "unique_labels", "]", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "ax", ".", "tick_params", "(", "width", "=", "0.0", ")", "\n", "plt", ".", "grid", "(", "'off'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.labelcolormap": [[55, 82], ["numpy.zeros", "advent.domain_adaptation.config.cfg.NUM_CLASSES"], "function", ["None"], ["def", "labelcolormap", "(", "N", ")", ":", "\n", "    ", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cmap", "[", "0", ",", "0", "]", "=", "255", "\n", "cmap", "[", "0", ",", "1", "]", "=", "0", "\n", "cmap", "[", "0", ",", "2", "]", "=", "0", "\n", "\n", "cmap", "[", "1", ",", "0", "]", "=", "255", "\n", "cmap", "[", "1", ",", "1", "]", "=", "255", "\n", "cmap", "[", "1", ",", "2", "]", "=", "255", "\n", "\n", "cmap", "[", "2", ",", "0", "]", "=", "255", "\n", "cmap", "[", "2", ",", "1", "]", "=", "255", "\n", "cmap", "[", "2", ",", "2", "]", "=", "0", "\n", "\n", "cmap", "[", "3", ",", "0", "]", "=", "0", "\n", "cmap", "[", "3", ",", "1", "]", "=", "255", "\n", "cmap", "[", "3", ",", "2", "]", "=", "0", "\n", "\n", "cmap", "[", "4", ",", "0", "]", "=", "9", "\n", "cmap", "[", "4", ",", "1", "]", "=", "217", "\n", "cmap", "[", "4", ",", "2", "]", "=", "240", "\n", "\n", "cmap", "[", "5", ",", "0", "]", "=", "0", "\n", "cmap", "[", "5", ",", "1", "]", "=", "0", "\n", "cmap", "[", "5", ",", "2", "]", "=", "255", "\n", "\n", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.convert_colormap": [[84, 95], ["cv2.resize", "numpy.zeros", "range"], "function", ["None"], ["", "def", "convert_colormap", "(", "label", ",", "colormap", ",", "num_clc", ")", ":", "\n", "    ", "height", "=", "label", ".", "shape", "[", "0", "]", "\n", "width", "=", "label", ".", "shape", "[", "1", "]", "\n", "label_resize", "=", "cv2", ".", "resize", "(", "label", ",", "(", "width", ",", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "label_resize", "=", "label_resize", "-", "1", "\n", "img_color", "=", "np", ".", "zeros", "(", "[", "height", ",", "width", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "idx", "in", "range", "(", "num_clc", ")", ":", "\n", "        ", "img_color", "[", "label_resize", "==", "idx", "]", "=", "colormap", "[", "idx", "]", "\n", "\n", "", "return", "img_color", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.colorize": [[97, 103], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.colorize_save": [[105, 117], ["output_pt_tensor.cpu().data[].numpy", "output_pt_tensor.cpu().data[].numpy.transpose", "numpy.asarray", "entropy.convert_colormap", "PIL.Image.fromarray", "PIL.Image.fromarray", "Image.fromarray.save", "Image.fromarray.save", "numpy.argmax", "name.split", "name.split", "output_pt_tensor.cpu", "advent.domain_adaptation.config.cfg.NUM_CLASSES"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.convert_colormap"], ["", "def", "colorize_save", "(", "output_pt_tensor", ",", "colormap", ",", "num_clc", ",", "name", ")", ":", "\n", "    ", "output_np_tensor", "=", "output_pt_tensor", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "mask_np_tensor", "=", "output_np_tensor", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "mask_np_tensor", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "mask_np_tensor", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "mask_np_tensor", "=", "mask_np_tensor", "+", "1", "\n", "mask_np_color", "=", "convert_colormap", "(", "mask_np_tensor", ",", "colormap", ",", "num_clc", ")", "\n", "mask_Img", "=", "Image", ".", "fromarray", "(", "mask_np_tensor", ")", "\n", "mask_color", "=", "Image", ".", "fromarray", "(", "mask_np_color", ")", "\n", "\n", "name", "=", "name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "mask_Img", ".", "save", "(", "'./color_masks/%s'", "%", "(", "name", ")", ")", "\n", "mask_color", ".", "save", "(", "'./color_masks/%s_color.png'", "%", "(", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.find_rare_class": [[119, 127], ["output_pt_tensor.cpu().data[].numpy", "output_pt_tensor.cpu().data[].numpy.transpose", "numpy.asarray", "numpy.reshape", "numpy.unique().tolist", "set().intersection", "numpy.argmax", "numpy.unique", "set", "output_pt_tensor.cpu"], "function", ["None"], ["", "def", "find_rare_class", "(", "output_pt_tensor", ")", ":", "\n", "    ", "output_np_tensor", "=", "output_pt_tensor", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "mask_np_tensor", "=", "output_np_tensor", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "mask_np_tensor", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "mask_np_tensor", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "mask_np_tensor", "=", "np", ".", "reshape", "(", "mask_np_tensor", ",", "512", "*", "512", ")", "\n", "unique_class", "=", "np", ".", "unique", "(", "mask_np_tensor", ")", ".", "tolist", "(", ")", "\n", "commom_class", "=", "set", "(", "unique_class", ")", ".", "intersection", "(", "rare_class", ")", "\n", "return", "commom_class", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.cluster_subdomain": [[129, 146], ["sorted", "sorted.copy", "open", "open", "int", "int", "f.write", "f.write", "len", "len"], "function", ["None"], ["", "def", "cluster_subdomain", "(", "entropy_list", ",", "lambda1", ")", ":", "\n", "    ", "entropy_list", "=", "sorted", "(", "entropy_list", ",", "key", "=", "lambda", "img", ":", "img", "[", "1", "]", ")", "\n", "copy_list", "=", "entropy_list", ".", "copy", "(", ")", "\n", "entropy_rank", "=", "[", "item", "[", "0", "]", "for", "item", "in", "entropy_list", "]", "\n", "\n", "easy_split", "=", "entropy_rank", "[", ":", "int", "(", "len", "(", "entropy_rank", ")", "*", "lambda1", ")", "]", "\n", "hard_split", "=", "entropy_rank", "[", "int", "(", "len", "(", "entropy_rank", ")", "*", "lambda1", ")", ":", "]", "\n", "\n", "with", "open", "(", "'easy_split.txt'", ",", "'w+'", ")", "as", "f", ":", "\n", "        ", "for", "item", "in", "easy_split", ":", "\n", "            ", "f", ".", "write", "(", "'%s\\n'", "%", "item", ")", "\n", "\n", "", "", "with", "open", "(", "'hard_split.txt'", ",", "'w+'", ")", "as", "f", ":", "\n", "        ", "for", "item", "in", "hard_split", ":", "\n", "            ", "f", ".", "write", "(", "'%s\\n'", "%", "item", ")", "\n", "\n", "", "", "return", "copy_list", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.load_checkpoint_for_evaluation": [[148, 153], ["torch.load", "torch.load", "model.load_state_dict", "model.eval", "model.cuda"], "function", ["None"], ["", "def", "load_checkpoint_for_evaluation", "(", "model", ",", "checkpoint", ",", "device", ")", ":", "\n", "    ", "saved_state_dict", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ",", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.get_arguments": [[155, 165], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Code for evaluation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'hyperparameter lambda to split the target domain'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "type", "=", "str", ",", "default", "=", "'../ADVENT/advent/scripts/configs/advent_all.yml'", ",", "\n", "help", "=", "'optional config file'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.main": [[167, 241], ["advent.domain_adaptation.config.cfg_from_file", "entropy.labelcolormap", "os.join", "advent.model.deeplabv3.get_deeplab_v3_EL_Adapt", "print", "entropy.load_checkpoint_for_evaluation", "advent.dataset.Vaihingen.Vaihingen", "torch.utils.data.DataLoader", "enumerate", "torch.nn.Upsample", "tqdm.tqdm", "entropy.cluster_subdomain", "print", "os.path.exists", "os.path.exists", "os.mkdir", "os.mkdir", "range", "enumerate.__next__", "len", "torch.no_grad", "torch.no_grad", "advent.model.deeplabv3.get_deeplab_v3_EL_Adapt", "nn.Upsample.", "advent.utils.func.prob_2_entropy", "entropy_list.append", "entropy.colorize_save", "matplotlib.image.cuda", "torch.softmax", "advent.utils.func.prob_2_entropy.mean().item", "advent.utils.func.prob_2_entropy.mean"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.config.cfg_from_file", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.labelcolormap", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.get_deeplab_v3_EL_Adapt", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.load_checkpoint_for_evaluation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.cluster_subdomain", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.get_deeplab_v3_EL_Adapt", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.utils.func.prob_2_entropy", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.CCDA.entropy.colorize_save"], ["", "def", "main", "(", "args", ")", ":", "\n", "# load configuration file", "\n", "    ", "device", "=", "cfg", ".", "GPU_ID", "\n", "assert", "args", ".", "cfg", "is", "not", "None", ",", "'Missing cfg file'", "\n", "cfg_from_file", "(", "args", ".", "cfg", ")", "\n", "\n", "colormap", "=", "labelcolormap", "(", "cfg", ".", "NUM_CLASSES", ")", "\n", "print", "(", "\"colormap\"", ")", ",", "colormap", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./color_masks'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'./color_masks'", ")", "\n", "\n", "# cfg.EXP_NAME = f'{cfg.SOURCE}2{cfg.TARGET}_{cfg.TRAIN.MODEL}_{cfg.TRAIN.DA_METHOD}'", "\n", "", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", "=", "osp", ".", "join", "(", "cfg", ".", "EXP_ROOT_SNAPSHOT", ",", "cfg", ".", "EXP_NAME", ")", "\n", "\n", "# load model with parameters trained from pretrained models, e.g., source-domain pretained models or easy-to-adapted models", "\n", "model_gen", "=", "get_deeplab_v3", "(", "num_classes", "=", "cfg", ".", "NUM_CLASSES", ",", "multi_level", "=", "cfg", ".", "TEST", ".", "MULTI_LEVEL", ")", "# Need to change", "\n", "restore_from", "=", "\"/root/code/CCDA_LGFA/ADVENT/pretrained_models/PotsIRRG_source_model.pth\"", "# Please change this path for your reproduction", "\n", "#restore_from = \"/root/code/CCDA_LGFA/ADVENT/experiments/snapshots/reproduce_PotsIRRG_Vaih_EL/model_2700.pth\" # Stage-two SL-Adapted-Baseline, please change this path for your reproduction", "\n", "\n", "print", "(", "\"Loading the generator:\"", ",", "restore_from", ")", "\n", "load_checkpoint_for_evaluation", "(", "model_gen", ",", "restore_from", ",", "device", ")", "\n", "\n", "# load data", "\n", "target_dataset", "=", "Vaihingen", "(", "root", "=", "cfg", ".", "DATA_DIRECTORY_TARGET", ",", "\n", "list_path", "=", "cfg", ".", "DATA_LIST_TARGET", ",", "\n", "set", "=", "cfg", ".", "TRAIN", ".", "SET_TARGET", ",", "\n", "info_path", "=", "cfg", ".", "TRAIN", ".", "INFO_TARGET", ",", "\n", "max_iters", "=", "None", ",", "\n", "crop_size", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", ",", "\n", "mean", "=", "cfg", ".", "TRAIN", ".", "IMG_MEAN", ")", "\n", "\n", "target_loader", "=", "data", ".", "DataLoader", "(", "target_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_TARGET", ",", "\n", "num_workers", "=", "cfg", ".", "NUM_WORKERS", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "worker_init_fn", "=", "None", ")", "\n", "#----REVERSE----", "\n", "# target_dataset = Potsdam(root=cfg.DATA_DIRECTORY_TARGET,", "\n", "#                          list_path=cfg.DATA_LIST_TARGET,", "\n", "#                          set=cfg.TRAIN.SET_TARGET,", "\n", "#                          info_path=cfg.TRAIN.INFO_TARGET,", "\n", "#                          max_iters=None,", "\n", "#                          crop_size=cfg.TRAIN.INPUT_SIZE_TARGET,", "\n", "#                          mean=cfg.TRAIN.IMG_MEAN)", "\n", "#", "\n", "# target_loader = data.DataLoader(target_dataset,", "\n", "#                                 batch_size=cfg.TRAIN.BATCH_SIZE_TARGET,", "\n", "#                                 num_workers=cfg.NUM_WORKERS,", "\n", "#                                 shuffle=True,", "\n", "#                                 pin_memory=True,", "\n", "#                                 worker_init_fn=None)", "\n", "\n", "target_loader_iter", "=", "enumerate", "(", "target_loader", ")", "\n", "\n", "# upsampling layer", "\n", "input_size_target", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "entropy_list", "=", "[", "]", "\n", "for", "index", "in", "tqdm", "(", "range", "(", "len", "(", "target_loader", ")", ")", ")", ":", "\n", "        ", "_", ",", "batch", "=", "target_loader_iter", ".", "__next__", "(", ")", "\n", "image", ",", "_", ",", "_", ",", "name", "=", "batch", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "pred_trg_main", "=", "model_gen", "(", "image", ".", "cuda", "(", "device", ")", ")", "\n", "pred_trg_main", "=", "interp_target", "(", "pred_trg_main", ")", "\n", "pred_trg_entropy", "=", "prob_2_entropy", "(", "F", ".", "softmax", "(", "pred_trg_main", ")", ")", "\n", "entropy_list", ".", "append", "(", "(", "name", "[", "0", "]", ",", "pred_trg_entropy", ".", "mean", "(", ")", ".", "item", "(", ")", ")", ")", "\n", "colorize_save", "(", "pred_trg_main", ",", "colormap", ",", "cfg", ".", "NUM_CLASSES", ",", "name", "[", "0", "]", ")", "\n", "\n", "# split the enntropy_list into ", "\n", "", "", "cluster_subdomain", "(", "entropy_list", ",", "args", ".", "lambda1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.to_hard.train_patch_wise_hard.get_arguments": [[29, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Code for domain adaptation (DA) training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'optional config file'", ",", ")", "\n", "parser", ".", "add_argument", "(", "'--status'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0 denotes the Feature-Level(FL) adaptation, while 1 denotes the Entropy-Level(EL) adaptation'", ",", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-train\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"not fixing random seed.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tensorboard\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"visualize training loss with tensorboardX.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--viz_every_iter\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"visualize results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--exp-suffix\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"optional experiment suffix\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.to_hard.train_patch_wise_hard.main": [[49, 190], ["train_patch_wise_hard.get_arguments", "print", "print", "advent.domain_adaptation.config.cfg_from_file", "print", "pprint.pprint", "os.exists", "print", "advent.dataset.Potsdam.Potsdam", "torch.utils.data.DataLoader", "advent.dataset.Vaihingen.Vaihingen", "torch.utils.data.DataLoader", "train_domain_adaptation", "os.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "torch.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "os.environ.get", "os.environ.get", "get_deeplab_v3", "torch.load", "open", "yaml.dump", "os.join", "numpy.random.seed", "UNet.state_dict().copy", "UNet.load_state_dict", "UNet.load_state_dict", "UNet", "torch.load", "UNet.load_state_dict", "NotImplementedError", "os.join", "i.split", "UNet.state_dict"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.to_hard.test_patch_wise.get_arguments", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.config.cfg_from_file", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.train_UDA_single_FL.train_domain_adaptation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.get_deeplab_v3"], ["", "def", "main", "(", ")", ":", "\n", "# LOAD ARGS", "\n", "    ", "args", "=", "get_arguments", "(", ")", "\n", "print", "(", "'Called with args:'", ")", "\n", "print", "(", "args", ")", "\n", "\n", "# pdb.set_trace()", "\n", "# For feature-level adaptation", "\n", "if", "args", ".", "status", "==", "0", ":", "\n", "        ", "from", "advent", ".", "model", ".", "deeplabv3", "import", "get_deeplab_v3_FL_Adapt", "as", "get_deeplab_v3", "\n", "from", "advent", ".", "domain_adaptation", ".", "train_UDA_single_FL", "import", "train_domain_adaptation", "\n", "\n", "# For entropy-level adaptation", "\n", "", "if", "args", ".", "status", "==", "1", ":", "\n", "        ", "from", "advent", ".", "model", ".", "deeplabv3", "import", "get_deeplab_v3_EL_Adapt", "as", "get_deeplab_v3", "\n", "from", "advent", ".", "domain_adaptation", ".", "train_UDA_single_EL", "import", "train_domain_adaptation", "\n", "\n", "", "assert", "args", ".", "cfg", "is", "not", "None", ",", "'Missing cfg file'", "\n", "cfg_from_file", "(", "args", ".", "cfg", ")", "\n", "# auto-generate exp name if not specified", "\n", "if", "cfg", ".", "EXP_NAME", "==", "''", ":", "\n", "        ", "cfg", ".", "EXP_NAME", "=", "f'{cfg.SOURCE}2{cfg.TARGET}_{cfg.TRAIN.MODEL}_{cfg.TRAIN.DA_METHOD}'", "\n", "\n", "", "if", "args", ".", "exp_suffix", ":", "\n", "        ", "cfg", ".", "EXP_NAME", "+=", "f'_{args.exp_suffix}'", "\n", "# auto-generate snapshot path if not specified", "\n", "", "if", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", "==", "''", ":", "\n", "        ", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", "=", "osp", ".", "join", "(", "cfg", ".", "EXP_ROOT_SNAPSHOT", ",", "cfg", ".", "EXP_NAME", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ",", "exist_ok", "=", "True", ")", "\n", "# tensorboard", "\n", "", "if", "args", ".", "tensorboard", ":", "\n", "        ", "if", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", "==", "''", ":", "\n", "            ", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", "=", "osp", ".", "join", "(", "cfg", ".", "EXP_ROOT_LOGS", ",", "'tensorboard'", ",", "cfg", ".", "EXP_NAME", ")", "\n", "", "os", ".", "makedirs", "(", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", ",", "exist_ok", "=", "True", ")", "\n", "if", "args", ".", "viz_every_iter", "is", "not", "None", ":", "\n", "            ", "cfg", ".", "TRAIN", ".", "TENSORBOARD_VIZRATE", "=", "args", ".", "viz_every_iter", "\n", "", "", "else", ":", "\n", "        ", "cfg", ".", "TRAIN", ".", "TENSORBOARD_LOGDIR", "=", "''", "\n", "", "print", "(", "'Using config:'", ")", "\n", "pprint", ".", "pprint", "(", "cfg", ")", "\n", "\n", "# INIT", "\n", "_init_fn", "=", "None", "\n", "if", "not", "args", ".", "random_train", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", ")", "\n", "np", ".", "random", ".", "seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", ")", "\n", "random", ".", "seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", ")", "\n", "\n", "def", "_init_fn", "(", "worker_id", ")", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "cfg", ".", "TRAIN", ".", "RANDOM_SEED", "+", "worker_id", ")", "\n", "\n", "", "", "if", "os", ".", "environ", ".", "get", "(", "'ADVENT_DRY_RUN'", ",", "'0'", ")", "==", "'1'", ":", "\n", "        ", "return", "\n", "\n", "# LOAD SEGMENTATION NET", "\n", "", "assert", "osp", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "RESTORE_FROM", ")", ",", "f'Missing init model {cfg.TRAIN.RESTORE_FROM}'", "\n", "if", "cfg", ".", "TRAIN", ".", "MODEL", "==", "'DeepLabv3'", ":", "\n", "        ", "model", "=", "get_deeplab_v3", "(", "num_classes", "=", "cfg", ".", "NUM_CLASSES", ",", "multi_level", "=", "cfg", ".", "TRAIN", ".", "MULTI_LEVEL", ")", "\n", "saved_state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "TRAIN", ".", "RESTORE_FROM", ")", "\n", "if", "'DeepLab_resnet_pretrained_imagenet'", "in", "cfg", ".", "TRAIN", ".", "RESTORE_FROM", ":", "\n", "            ", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "                ", "i_parts", "=", "i", ".", "split", "(", "'.'", ")", "\n", "if", "not", "i_parts", "[", "1", "]", "==", "'layer5'", ":", "\n", "                    ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "new_params", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "", "", "elif", "cfg", ".", "TRAIN", ".", "MODEL", "==", "'UNET'", ":", "\n", "        ", "model", "=", "UNet", "(", "n_channels", "=", "3", ",", "n_classes", "=", "cfg", ".", "NUM_CLASSES", ",", "bilinear", "=", "True", ")", "\n", "saved_state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "TRAIN", ".", "RESTORE_FROM", ")", "\n", "del", "saved_state_dict", "[", "'outc.conv.weight'", "]", "\n", "del", "saved_state_dict", "[", "'outc.conv.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ",", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Not yet supported {cfg.TRAIN.MODEL}\"", ")", "\n", "", "print", "(", "'Model loaded'", ")", "\n", "\n", "# DATALOADERS", "\n", "# pdb.set_trace()", "\n", "source_dataset", "=", "Potsdam", "(", "root", "=", "cfg", ".", "DATA_DIRECTORY_SOURCE", ",", "\n", "list_path", "=", "cfg", ".", "DATA_LIST_SOURCE", ",", "\n", "set", "=", "cfg", ".", "TRAIN", ".", "SET_SOURCE", ",", "\n", "max_iters", "=", "cfg", ".", "TRAIN", ".", "MAX_ITERS", "*", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_SOURCE", ",", "\n", "crop_size", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_SOURCE", ",", "\n", "mean", "=", "cfg", ".", "TRAIN", ".", "IMG_MEAN", ")", "\n", "source_loader", "=", "data", ".", "DataLoader", "(", "source_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_SOURCE", ",", "\n", "num_workers", "=", "cfg", ".", "NUM_WORKERS", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "worker_init_fn", "=", "_init_fn", ")", "\n", "\n", "# pdb.set_trace()", "\n", "hard_dataset", "=", "Vaihingen_hard", "(", "root", "=", "cfg", ".", "DATA_DIRECTORY_TARGET", ",", "\n", "list_path", "=", "cfg", ".", "DATA_LIST_TARGET", ",", "\n", "set", "=", "cfg", ".", "TRAIN", ".", "SET_TARGET", ",", "\n", "info_path", "=", "cfg", ".", "TRAIN", ".", "INFO_TARGET", ",", "\n", "max_iters", "=", "cfg", ".", "TRAIN", ".", "MAX_ITERS", "*", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_TARGET", ",", "\n", "crop_size", "=", "cfg", ".", "TRAIN", ".", "INPUT_SIZE_TARGET", ",", "\n", "mean", "=", "cfg", ".", "TRAIN", ".", "IMG_MEAN", ")", "\n", "hard_loader", "=", "data", ".", "DataLoader", "(", "hard_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_TARGET", ",", "\n", "num_workers", "=", "cfg", ".", "NUM_WORKERS", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "False", ",", "\n", "worker_init_fn", "=", "_init_fn", ")", "\n", "\n", "#-----REVERSE-----", "\n", "# source_dataset = Vaihingen_hard(root=cfg.DATA_DIRECTORY_SOURCE,", "\n", "#                            list_path=cfg.DATA_LIST_SOURCE,", "\n", "#                            set=cfg.TRAIN.SET_SOURCE,", "\n", "#                            max_iters=cfg.TRAIN.MAX_ITERS * cfg.TRAIN.BATCH_SIZE_SOURCE,", "\n", "#                            crop_size=cfg.TRAIN.INPUT_SIZE_SOURCE,", "\n", "#                            mean=cfg.TRAIN.IMG_MEAN)", "\n", "# source_loader = data.DataLoader(source_dataset,", "\n", "#                                 batch_size=cfg.TRAIN.BATCH_SIZE_SOURCE,", "\n", "#                                 num_workers=cfg.NUM_WORKERS,", "\n", "#                                 shuffle=True,", "\n", "#                                 pin_memory=True,", "\n", "#                                 worker_init_fn=_init_fn)", "\n", "#", "\n", "# target_dataset = Potsdam(root=cfg.DATA_DIRECTORY_TARGET,", "\n", "#                          list_path=cfg.DATA_LIST_TARGET,", "\n", "#                          set=cfg.TRAIN.SET_TARGET,", "\n", "#                          max_iters=cfg.TRAIN.MAX_ITERS * cfg.TRAIN.BATCH_SIZE_TARGET,", "\n", "#                          crop_size=cfg.TRAIN.INPUT_SIZE_TARGET,", "\n", "#                          mean=cfg.TRAIN.IMG_MEAN)", "\n", "# hard_loader = data.DataLoader(target_dataset,", "\n", "#                                 batch_size=cfg.TRAIN.BATCH_SIZE_TARGET,", "\n", "#                                 num_workers=cfg.NUM_WORKERS,", "\n", "#                                 shuffle=True,", "\n", "#                                 pin_memory=True,", "\n", "#                                 worker_init_fn=_init_fn)", "\n", "\n", "with", "open", "(", "osp", ".", "join", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ",", "'train_cfg.yml'", ")", ",", "'w'", ")", "as", "yaml_file", ":", "\n", "        ", "yaml", ".", "dump", "(", "cfg", ",", "yaml_file", ",", "default_flow_style", "=", "False", ")", "\n", "\n", "# pdb.set_trace()", "\n", "", "train_domain_adaptation", "(", "model", ",", "source_loader", ",", "hard_loader", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.to_hard.test_patch_wise.get_arguments": [[23, 35], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Code for evaluation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'optional config file'", ",", ")", "\n", "parser", ".", "add_argument", "(", "'--status'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0 denotes the Feature-Level(FL) adaptation, while 1 denotes the Entropy-Level(EL) adaptation'", ",", ")", "\n", "parser", ".", "add_argument", "(", "\"--exp-suffix\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"optional experiment suffix\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.to_hard.test_patch_wise.main": [[37, 115], ["advent.domain_adaptation.config.cfg_from_file", "print", "pprint.pprint", "len", "range", "advent.dataset.Vaihingen.Vaihingen", "torch.utils.data.DataLoader", "evaluate_domain_adaptation", "os.join", "os.makedirs", "os.makedirs", "models.append", "os.environ.get", "os.environ.get", "get_deeplab_v3", "UNet", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.config.cfg_from_file", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.domain_adaptation.eval_UDA_cat_multi.evaluate_domain_adaptation", "home.repos.pwc.inspect_result.bobrown_ccda_lgfa.model.deeplabv3.get_deeplab_v3"], ["", "def", "main", "(", "config_file", ",", "exp_suffix", ")", ":", "\n", "# LOAD ARGS", "\n", "    ", "assert", "config_file", "is", "not", "None", ",", "'Missing cfg file'", "\n", "cfg_from_file", "(", "config_file", ")", "\n", "\n", "# For feature-level adaptation", "\n", "if", "args", ".", "status", "==", "0", ":", "\n", "        ", "from", "advent", ".", "model", ".", "deeplabv3", "import", "get_deeplab_v3_FL_Adapt", "as", "get_deeplab_v3", "\n", "from", "advent", ".", "domain_adaptation", ".", "eval_UDA_single_FL", "import", "evaluate_domain_adaptation", "\n", "\n", "# For entropy-level adaptation", "\n", "", "if", "args", ".", "status", "==", "1", ":", "\n", "        ", "from", "advent", ".", "model", ".", "deeplabv3", "import", "get_deeplab_v3_EL_Adapt", "as", "get_deeplab_v3", "\n", "from", "advent", ".", "domain_adaptation", ".", "eval_UDA_single_EL", "import", "evaluate_domain_adaptation", "\n", "\n", "# auto-generate exp name if not specified", "\n", "# pdb.set_trace()", "\n", "", "if", "cfg", ".", "EXP_NAME", "==", "''", ":", "\n", "        ", "cfg", ".", "EXP_NAME", "=", "f'{cfg.SOURCE}2{cfg.TARGET}_{cfg.TRAIN.MODEL}_{cfg.TRAIN.DA_METHOD}'", "\n", "", "if", "exp_suffix", ":", "\n", "        ", "cfg", ".", "EXP_NAME", "+=", "f'_{exp_suffix}'", "\n", "# auto-generate snapshot path if not specified", "\n", "# pdb.set_trace()", "\n", "", "if", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", "==", "''", ":", "\n", "        ", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", "=", "osp", ".", "join", "(", "cfg", ".", "EXP_ROOT_SNAPSHOT", ",", "cfg", ".", "EXP_NAME", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "TEST", ".", "SNAPSHOT_DIR", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "print", "(", "'Using config:'", ")", "\n", "pprint", ".", "pprint", "(", "cfg", ")", "\n", "# load models", "\n", "models", "=", "[", "]", "\n", "n_models", "=", "len", "(", "cfg", ".", "TEST", ".", "MODEL", ")", "\n", "if", "cfg", ".", "TEST", ".", "MODE", "==", "'best'", ":", "\n", "        ", "assert", "n_models", "==", "1", ",", "'Not yet supported'", "\n", "", "for", "i", "in", "range", "(", "n_models", ")", ":", "\n", "        ", "if", "cfg", ".", "TEST", ".", "MODEL", "[", "i", "]", "==", "'DeepLabv3'", ":", "\n", "            ", "model", "=", "get_deeplab_v3", "(", "num_classes", "=", "cfg", ".", "NUM_CLASSES", ",", "\n", "multi_level", "=", "cfg", ".", "TEST", ".", "MULTI_LEVEL", "[", "i", "]", ")", "\n", "", "elif", "cfg", ".", "TEST", ".", "MODEL", "[", "i", "]", "==", "'UNET'", ":", "\n", "            ", "model", "=", "UNet", "(", "n_channels", "=", "3", ",", "n_classes", "=", "cfg", ".", "NUM_CLASSES", ",", "bilinear", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"Not yet supported {cfg.TEST.MODEL[i]}\"", ")", "\n", "", "models", ".", "append", "(", "model", ")", "\n", "\n", "", "if", "os", ".", "environ", ".", "get", "(", "'ADVENT_DRY_RUN'", ",", "'0'", ")", "==", "'1'", ":", "\n", "        ", "return", "\n", "\n", "# dataloaders", "\n", "# pdb.set_trace()", "\n", "", "test_dataset", "=", "Vaihingen", "(", "root", "=", "cfg", ".", "DATA_DIRECTORY_TARGET", ",", "\n", "list_path", "=", "'/root/code/CCDA_LGFA/ADVENT/advent/dataset/Vaihingen/{}.txt'", ",", "\n", "set", "=", "cfg", ".", "TEST", ".", "SET_TARGET", ",", "\n", "info_path", "=", "cfg", ".", "TEST", ".", "INFO_TARGET", ",", "\n", "crop_size", "=", "cfg", ".", "TEST", ".", "INPUT_SIZE_TARGET", ",", "\n", "mean", "=", "cfg", ".", "TEST", ".", "IMG_MEAN", ",", "\n", "labels_size", "=", "cfg", ".", "TEST", ".", "OUTPUT_SIZE_TARGET", ")", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "test_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "TEST", ".", "BATCH_SIZE_TARGET", ",", "\n", "num_workers", "=", "cfg", ".", "NUM_WORKERS", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "#HOLOBO: NEED TO CHANGE", "\n", "# test_dataset = Potsdam(root=cfg.DATA_DIRECTORY_TARGET,", "\n", "#                                 list_path='/root/code/CCDA_LGFA/ADVENT/advent/dataset/PotsdamIRRG/{}.txt',", "\n", "#                                 set=cfg.TEST.SET_TARGET,", "\n", "#                                 info_path=cfg.TEST.INFO_TARGET,", "\n", "#                                 crop_size=cfg.TEST.INPUT_SIZE_TARGET,", "\n", "#                                 mean=cfg.TEST.IMG_MEAN)", "\n", "# test_loader = data.DataLoader(test_dataset,", "\n", "#                              batch_size=cfg.TEST.BATCH_SIZE_TARGET,", "\n", "#                              num_workers=cfg.NUM_WORKERS,", "\n", "#                              shuffle=False,", "\n", "#                              pin_memory=True)", "\n", "\n", "# eval", "\n", "# pdb.set_trace()", "\n", "evaluate_domain_adaptation", "(", "models", ",", "test_loader", ",", "cfg", ")", "\n", "\n"]]}