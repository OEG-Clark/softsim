{"home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.None.main.create_arg_parser": [[8, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "os.path.join", "os.path.join", "os.path.join", "os.getcwd", "os.getcwd"], "function", ["None"], ["def", "create_arg_parser", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--train\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--augmentation\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--add-metadata\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--multiprocessing\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--add-osm\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--load-best-train-weights\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--wrangle-data\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "str", ",", "help", "=", "\"index of gpu device to use\"", ",", "default", "=", "\"0\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "40", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "help", "=", "\"\"", ",", "default", "=", "1.0e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_lr\"", ",", "type", "=", "float", ",", "help", "=", "\"\"", ",", "default", "=", "6.0e-3", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-epochs\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "60", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-period\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "6", ")", "\n", "parser", ".", "add_argument", "(", "\"--sample-size\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "\"--test-block-size\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "224", ")", "\n", "parser", ".", "add_argument", "(", "\"--overlap\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--block-sizes\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "help", "=", "\"\"", ",", "default", "=", "[", "1024", ",", "720", ",", "640", ",", "480", ",", "320", ",", "224", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--model-image-size\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "help", "=", "\"\"", ",", "default", "=", "(", "224", ",", "224", ")", ")", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint-dir\"", ",", "type", "=", "str", ",", "help", "=", "\"\"", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"checkpoints\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\"--chip-pop-dir\"", ",", "type", "=", "str", ",", "help", "=", "\"\"", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "params", ".", "sandbox_dir", ",", "\"tmp\"", ",", "\"train_chips\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\"--test-chip-pop-dir\"", ",", "type", "=", "str", ",", "help", "=", "\"\"", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"dataset\"", ",", "\"test_chips\"", ")", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.dataset.download.main": [[13, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "download.download_shapefiles", "download.extract_archives", "download.download_imagery", "download.extract_archives"], "function", ["home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.dataset.download.download_shapefiles", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.dataset.download.extract_archives", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.dataset.download.download_imagery", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.dataset.download.extract_archives"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--output_directory'", ",", "type", "=", "str", ",", "default", "=", "'./'", ")", "\n", "parser", ".", "add_argument", "(", "'--overwrite'", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "'Downloading data...'", ")", "\n", "\n", "shapefiles", "=", "download_shapefiles", "(", "args", ")", "\n", "extract_archives", "(", "shapefiles", ",", "args", ")", "\n", "imgfiles", "=", "download_imagery", "(", "args", ")", "\n", "extract_archives", "(", "imgfiles", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.dataset.download.download_imagery": [[26, 50], ["os.path.join", "glob.glob", "tqdm.tqdm", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "open", "sum", "url_fp.seek", "tqdm.tqdm", "os.path.splitext", "os.path.join().strip", "output_filenames.append", "os.path.basename", "requests.get", "open().write", "os.path.basename", "os.path.join", "os.path.exists", "open", "curr_url.split"], "function", ["None"], ["", "def", "download_imagery", "(", "args", ")", ":", "\n", "\n", "    ", "imagery_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_directory", ",", "'imagery'", ")", "\n", "url_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "imagery_path", ",", "'*.txt'", ")", ")", "\n", "\n", "# Loop over urls", "\n", "output_filenames", "=", "[", "]", "\n", "for", "url_file", "in", "tqdm", "(", "url_files", ",", "desc", "=", "'Top imagery urls'", ")", ":", "\n", "# Create the associated subdirectory", "\n", "        ", "url_subdir", "=", "os", ".", "path", ".", "join", "(", "imagery_path", ",", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "url_file", ")", ")", "[", "0", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "url_subdir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "url_subdir", ")", "\n", "\n", "", "with", "open", "(", "url_file", ",", "'r'", ")", "as", "url_fp", ":", "\n", "            ", "line_count", "=", "sum", "(", "1", "for", "_", "in", "url_fp", ")", "\n", "url_fp", ".", "seek", "(", "0", ")", "\n", "for", "curr_url", "in", "tqdm", "(", "url_fp", ",", "total", "=", "line_count", ",", "desc", "=", "os", ".", "path", ".", "basename", "(", "url_subdir", ")", "+", "' urls'", ")", ":", "\n", "                ", "filename", "=", "os", ".", "path", ".", "join", "(", "url_subdir", ",", "curr_url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", ".", "strip", "(", ")", "\n", "output_filenames", ".", "append", "(", "filename", ")", "\n", "if", "args", ".", "overwrite", "or", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "                    ", "data", "=", "requests", ".", "get", "(", "curr_url", ",", "allow_redirects", "=", "True", ")", "\n", "open", "(", "filename", ",", "'wb'", ")", ".", "write", "(", "data", ".", "content", ")", "\n", "\n", "", "", "", "", "return", "output_filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.dataset.download.extract_archives": [[51, 71], ["tqdm.tqdm", "os.path.dirname", "next", "os.path.join", "glob.glob", "shutil.rmtree", "zipfile.ZipFile", "currZip.extractall", "print", "os.walk", "os.path.join", "os.path.join", "os.path.basename", "shutil.move", "os.path.exists", "os.path.exists"], "function", ["None"], ["", "def", "extract_archives", "(", "filenames", ",", "args", ")", ":", "\n", "    ", "for", "file", "in", "tqdm", "(", "filenames", ",", "desc", "=", "'Extracting archives'", ")", ":", "\n", "        ", "extractDir", "=", "os", ".", "path", ".", "dirname", "(", "file", ")", "\n", "try", ":", "\n", "            ", "with", "ZipFile", "(", "file", ")", "as", "currZip", ":", "\n", "                ", "currZip", ".", "extractall", "(", "extractDir", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "'Could not extract {}'", ".", "format", "(", "file", ")", ")", "\n", "\n", "# Check if we created new subdirectories", "\n", "", "subdirs", "=", "next", "(", "os", ".", "walk", "(", "extractDir", ")", ")", "[", "1", "]", "\n", "for", "subdir", "in", "subdirs", ":", "\n", "# Move the files out and delete the subdir", "\n", "            ", "subdir", "=", "os", ".", "path", ".", "join", "(", "extractDir", ",", "subdir", ")", "\n", "subdir_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "subdir", ",", "'*'", ")", ")", "\n", "for", "subdir_file", "in", "subdir_files", ":", "\n", "                ", "output_filename", "=", "os", ".", "path", ".", "join", "(", "extractDir", ",", "os", ".", "path", ".", "basename", "(", "subdir_file", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_filename", ")", "or", "(", "os", ".", "path", ".", "exists", "(", "output_filename", ")", "and", "args", ".", "overwrite", ")", ":", "\n", "                    ", "shutil", ".", "move", "(", "subdir_file", ",", "output_filename", ")", "\n", "", "", "shutil", ".", "rmtree", "(", "subdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.dataset.download.download_shapefiles": [[72, 94], ["os.path.join", "requests.get", "re.findall", "tqdm.tqdm", "os.path.exists", "os.makedirs", "os.path.join", "output_filenames.append", "requests.get", "open().write", "url.split", "os.path.exists", "open"], "function", ["None"], ["", "", "", "def", "download_shapefiles", "(", "args", ")", ":", "\n", "\n", "# Create the shapefile output directory if it doesn't exist", "\n", "    ", "output_directory", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_directory", ",", "'shapefiles'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_directory", ")", "\n", "\n", "# Get shapefile .zip urls", "\n", "", "shapefile_top_url", "=", "'https://data.humdata.org/dataset/iom-bangladesh-needs-and-population-monitoring-npm-majhee-blocks-mapping'", "\n", "top_html", "=", "requests", ".", "get", "(", "shapefile_top_url", ")", "\n", "\n", "# Extract .zip download URLs", "\n", "matches", "=", "re", ".", "findall", "(", "'\"(http.*?\\.zip)\"'", ",", "top_html", ".", "text", ")", "\n", "output_filenames", "=", "[", "]", ";", "\n", "for", "url", "in", "tqdm", "(", "matches", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_directory", ",", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "output_filenames", ".", "append", "(", "filename", ")", "\n", "if", "args", ".", "overwrite", "or", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "            ", "data", "=", "requests", ".", "get", "(", "url", ",", "allow_redirects", "=", "True", ")", "\n", "open", "(", "filename", ",", "'wb'", ")", ".", "write", "(", "data", ".", "content", ")", "\n", "\n", "", "", "return", "output_filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils._wrangle_helper": [[21, 42], ["misc_utils.load_tiff", "os.path.basename().replace", "misc_utils.get_chip_coords", "misc_utils.get_pop_gt", "range", "os.path.join", "json.dump", "len", "open", "os.path.basename", "all_gt.append", "chip_coords.append"], "function", ["home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.load_tiff", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_chip_coords", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_pop_gt"], ["def", "_wrangle_helper", "(", "item", ")", ":", "\n", "\n", "    ", "image_path", ",", "block_sizes", ",", "overlap", ",", "chip_pop_dir", "=", "item", "\n", "\n", "image", ",", "tr", "=", "load_tiff", "(", "image_path", ",", "size_only", "=", "False", ")", "\n", "\n", "basename", "=", "os", ".", "path", ".", "basename", "(", "image_path", ")", ".", "replace", "(", "\".tif\"", ",", "\"\"", ")", "\n", "\n", "chip_coords_orig", "=", "get_chip_coords", "(", "image", ".", "shape", "[", ":", "2", "]", ",", "block_sizes", ",", "overlap", ")", "\n", "all_gt_orig", "=", "get_pop_gt", "(", "chip_coords_orig", ",", "tr", ",", "pop_polygons", ",", "image", ",", "image_path", ")", "\n", "chip_coords", ",", "all_gt", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "all_gt_orig", ")", ")", ":", "\n", "        ", "if", "all_gt_orig", "[", "i", "]", "is", "not", "None", ":", "\n", "            ", "all_gt", ".", "append", "(", "all_gt_orig", "[", "i", "]", ")", "\n", "chip_coords", ".", "append", "(", "chip_coords_orig", "[", "i", "]", ")", "\n", "\n", "", "", "data", "=", "{", "\"all_gt\"", ":", "all_gt", ",", "\"chip_coords\"", ":", "chip_coords", "}", "\n", "chip_data_file", "=", "os", ".", "path", ".", "join", "(", "chip_pop_dir", ",", "basename", "+", "\".json\"", ")", "\n", "json", ".", "dump", "(", "data", ",", "open", "(", "chip_data_file", ",", "\"w\"", ")", ")", "\n", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.wrangle_data": [[43, 57], ["print", "multiprocessing.Pool", "list", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "tqdm.tqdm", "tqdm.tqdm", "misc_utils._wrangle_helper", "multiprocessing.Pool.imap_unordered", "len"], "function", ["home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils._wrangle_helper"], ["", "def", "wrangle_data", "(", "image_paths", ",", "args", ")", ":", "\n", "\n", "    ", "print", "(", "\"Data wrangling\"", ")", "\n", "\n", "items", "=", "[", "(", "image_path", ",", "args", ".", "block_sizes", ",", "args", ".", "overlap", ",", "args", ".", "chip_pop_dir", ")", "for", "image_path", "in", "image_paths", "]", "\n", "\n", "if", "args", ".", "multiprocessing", ":", "\n", "        ", "pool", "=", "multiprocessing", ".", "Pool", "(", ")", "\n", "results", "=", "list", "(", "tqdm", "(", "pool", ".", "imap_unordered", "(", "_wrangle_helper", ",", "items", ")", ",", "total", "=", "len", "(", "items", ")", ")", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "", "else", ":", "\n", "        ", "for", "item", "in", "tqdm", "(", "items", ")", ":", "\n", "            ", "result", "=", "_wrangle_helper", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils._wrangle_test_helper": [[58, 107], ["misc_utils.load_tiff", "os.path.basename().replace", "numpy.ceil().astype", "numpy.ceil().astype", "misc_utils.get_pop_gt", "misc_utils.get_chip_coords", "misc_utils.get_pop_gt", "os.path.join", "cv2.imread", "cv2.resize", "range", "os.path.join", "json.dump", "len", "open", "os.path.basename", "numpy.ceil", "numpy.ceil", "cv2.resize", "cv2.resize", "numpy.uint8", "numpy.sum", "numpy.float", "numpy.float", "numpy.float", "numpy.float", "background.sum", "np.uint8.sum", "chip_coords.append"], "function", ["home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.load_tiff", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_pop_gt", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_chip_coords", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_pop_gt"], ["", "", "", "def", "_wrangle_test_helper", "(", "item", ")", ":", "\n", "\n", "    ", "image_path", ",", "block_size", ",", "test_chip_pop_dir", "=", "item", "\n", "\n", "image", ",", "tr", "=", "load_tiff", "(", "image_path", ",", "size_only", "=", "False", ")", "\n", "\n", "basename", "=", "os", ".", "path", ".", "basename", "(", "image_path", ")", ".", "replace", "(", "\".tif\"", ",", "\"\"", ")", "\n", "\n", "# Calculate the GT population for the entire camp", "\n", "num_y_chips", "=", "np", ".", "ceil", "(", "image", ".", "shape", "[", "0", "]", "/", "np", ".", "float", "(", "block_size", ")", ")", ".", "astype", "(", "'int'", ")", "\n", "num_x_chips", "=", "np", ".", "ceil", "(", "image", ".", "shape", "[", "1", "]", "/", "np", ".", "float", "(", "block_size", ")", ")", ".", "astype", "(", "'int'", ")", "\n", "yend", "=", "num_y_chips", "*", "block_size", "\n", "xend", "=", "num_x_chips", "*", "block_size", "\n", "coords", "=", "[", "[", "0", ",", "0", ",", "xend", ",", "yend", "]", "]", "\n", "total_gt_orig", "=", "get_pop_gt", "(", "coords", ",", "tr", ",", "pop_polygons", ",", "image", ",", "image_path", ")", "\n", "total_gt", ",", "_", ",", "_", "=", "total_gt_orig", "[", "0", "]", "\n", "\n", "# Collect test chip coordinates", "\n", "chip_coords_orig", "=", "get_chip_coords", "(", "image", ".", "shape", "[", ":", "2", "]", ",", "[", "block_size", "]", ",", "0", ")", "\n", "all_gt_orig", "=", "get_pop_gt", "(", "chip_coords_orig", ",", "tr", ",", "pop_polygons", ",", "image", ",", "image_path", ")", "\n", "chip_coords", ",", "all_gt", "=", "[", "]", ",", "[", "]", "\n", "\n", "osm_path", "=", "os", ".", "path", ".", "join", "(", "params", ".", "osm_dir", ",", "basename", "+", "\".png\"", ")", "\n", "osm_mask", "=", "cv2", ".", "imread", "(", "osm_path", ",", "0", ")", "\n", "osm_mask", "=", "cv2", ".", "resize", "(", "osm_mask", ",", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "all_gt_orig", ")", ")", ":", "\n", "        ", "if", "all_gt_orig", "[", "i", "]", "is", "not", "None", ":", "\n", "            ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "chip_coords_orig", "[", "i", "]", "\n", "sub_image", "=", "image", "[", "y1", ":", "y2", ",", "x1", ":", "x2", ",", ":", "3", "]", "\n", "sub_image", "=", "cv2", ".", "resize", "(", "sub_image", ",", "(", "block_size", ",", "block_size", ")", ")", "\n", "background", "=", "np", ".", "sum", "(", "sub_image", ",", "axis", "=", "2", ")", "==", "0", "\n", "ratio", "=", "np", ".", "float", "(", "background", ".", "sum", "(", ")", ")", "/", "np", ".", "float", "(", "background", ".", "shape", "[", "0", "]", "*", "background", ".", "shape", "[", "1", "]", ")", "\n", "\n", "sub_mask", "=", "osm_mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "sub_mask", "=", "cv2", ".", "resize", "(", "sub_mask", ",", "(", "block_size", ",", "block_size", ")", ")", "\n", "sub_mask", "=", "np", ".", "uint8", "(", "sub_mask", ">", "0", ")", "\n", "\n", "if", "(", "all_gt_orig", "[", "i", "]", "==", "0", ")", "and", "(", "sub_mask", ".", "sum", "(", ")", ">", "0", ")", ":", "\n", "                ", "continue", "\n", "", "elif", "ratio", ">", "0.2", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "chip_coords", ".", "append", "(", "chip_coords_orig", "[", "i", "]", ")", "\n", "\n", "", "", "", "data", "=", "{", "\"total_gt\"", ":", "total_gt", ",", "\"chip_coords\"", ":", "chip_coords", "}", "\n", "chip_data_file", "=", "os", ".", "path", ".", "join", "(", "test_chip_pop_dir", ",", "basename", "+", "\".json\"", ")", "\n", "json", ".", "dump", "(", "data", ",", "open", "(", "chip_data_file", ",", "\"w\"", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.wrangle_test_data": [[108, 123], ["print", "multiprocessing.Pool", "list", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "tqdm.tqdm", "tqdm.tqdm", "misc_utils._wrangle_helper", "multiprocessing.Pool.imap_unordered", "len"], "function", ["home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils._wrangle_helper"], ["", "def", "wrangle_test_data", "(", "image_paths", ",", "args", ")", ":", "\n", "\n", "    ", "print", "(", "\"Test data wrangling\"", ")", "\n", "\n", "items", "=", "[", "(", "image_path", ",", "args", ".", "test_block_size", ",", "args", ".", "test_chip_pop_dir", ")", "for", "image_path", "in", "image_paths", "]", "\n", "test_gt", "=", "{", "}", "\n", "\n", "if", "args", ".", "multiprocessing", ":", "\n", "        ", "pool", "=", "multiprocessing", ".", "Pool", "(", ")", "\n", "results", "=", "list", "(", "tqdm", "(", "pool", ".", "imap_unordered", "(", "_wrangle_test_helper", ",", "items", ")", ",", "total", "=", "len", "(", "items", ")", ")", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "", "else", ":", "\n", "        ", "for", "item", "in", "tqdm", "(", "items", ")", ":", "\n", "            ", "result", "=", "_wrangle_helper", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_latlng": [[125, 137], ["range", "len", "utm.to_latlon", "lat.append", "lng.append"], "function", ["None"], ["", "", "", "def", "get_latlng", "(", "x", ",", "y", ",", "tr", ")", ":", "\n", "    ", "xutm", "=", "tr", "[", "0", "]", "+", "(", "x", "*", "tr", "[", "1", "]", ")", "+", "(", "y", "*", "tr", "[", "2", "]", ")", "\n", "yutm", "=", "tr", "[", "3", "]", "+", "(", "x", "*", "tr", "[", "4", "]", ")", "+", "(", "y", "*", "tr", "[", "5", "]", ")", "\n", "\n", "lat", ",", "lng", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "xutm", ")", ")", ":", "\n", "        ", "currlat", ",", "currlng", "=", "utm", ".", "to_latlon", "(", "xutm", "[", "i", "]", ",", "yutm", "[", "i", "]", ",", "params", ".", "utm_zone", "[", "0", "]", ",", "params", ".", "utm_zone", "[", "1", "]", ")", "\n", "lat", ".", "append", "(", "currlat", ")", "\n", "lng", ".", "append", "(", "currlng", ")", "\n", "\n", "", "return", "lat", ",", "lng", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_pop_gt": [[138, 196], ["misc_utils.get_datetime", "numpy.sum", "os.path.basename", "cv2.findContours", "numpy.float", "numpy.float", "all_gt.append", "numpy.float", "numpy.float", "all_gt.append", "sub_mask.astype", "numpy.squeeze", "misc_utils.get_latlng", "shapely.geometry.LineString", "shapely.geometry.LineString.simplify", "numpy.array", "numpy.array", "shapely.geometry.Polygon", "utilities.pop_utils.population_lookup", "sub_mask.sum", "len", "numpy.array", "line.simplify.coords.xy[].tolist", "line.simplify.coords.xy[].tolist", "len", "abs", "range", "range", "abs", "abs", "len", "len"], "function", ["home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_datetime", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_latlng", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.pop_utils.population_lookup"], ["", "def", "get_pop_gt", "(", "chip_coords", ",", "tr", ",", "pop_polygons", ",", "image", ",", "image_path", ")", ":", "\n", "    ", "valid_mask", "=", "np", ".", "sum", "(", "image", ",", "axis", "=", "2", ")", ">", "0", "\n", "\n", "base_datetime", "=", "get_datetime", "(", "os", ".", "path", ".", "basename", "(", "image_path", ")", ")", "\n", "\n", "all_gt", "=", "[", "]", "\n", "\n", "for", "coord", "in", "chip_coords", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "coord", "\n", "\n", "sub_mask", "=", "valid_mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "\n", "ratio", "=", "np", ".", "float", "(", "sub_mask", ".", "sum", "(", ")", ")", "/", "np", ".", "float", "(", "sub_mask", ".", "shape", "[", "0", "]", "*", "sub_mask", ".", "shape", "[", "1", "]", ")", "\n", "\n", "if", "ratio", "<", "0.2", ":", "\n", "            ", "all_gt", ".", "append", "(", "None", ")", "\n", "continue", "\n", "\n", "", "contours", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "sub_mask", ".", "astype", "(", "'uint8'", ")", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", ")", "\n", "\n", "pop", "=", "np", ".", "float", "(", "0", ")", "\n", "for", "contour", "in", "contours", ":", "\n", "            ", "curr_contour", "=", "np", ".", "squeeze", "(", "contour", ")", "\n", "if", "curr_contour", ".", "shape", "[", "0", "]", "<", "3", ":", "\n", "                ", "continue", "\n", "\n", "", "curr_contour", "[", ":", ",", "0", "]", "+=", "x1", "\n", "curr_contour", "[", ":", ",", "1", "]", "+=", "y1", "\n", "\n", "lat", ",", "lng", "=", "get_latlng", "(", "curr_contour", "[", ":", ",", "0", "]", ",", "curr_contour", "[", ":", ",", "1", "]", ",", "tr", ")", "\n", "\n", "curr_coords", "=", "[", "(", "lng", "[", "i", "]", ",", "lat", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "lat", ")", ")", "]", "\n", "\n", "if", "len", "(", "curr_coords", ")", "<", "3", ":", "\n", "                ", "continue", "\n", "\n", "", "line", "=", "LineString", "(", "np", ".", "array", "(", "curr_coords", ")", ")", "\n", "simplified_line", "=", "line", ".", "simplify", "(", "params", ".", "tolerance", ",", "preserve_topology", "=", "True", ")", "\n", "lng", "=", "np", ".", "array", "(", "simplified_line", ".", "coords", ".", "xy", "[", "0", "]", ".", "tolist", "(", ")", ")", "\n", "lat", "=", "np", ".", "array", "(", "simplified_line", ".", "coords", ".", "xy", "[", "1", "]", ".", "tolist", "(", ")", ")", "\n", "\n", "curr_coords", "=", "[", "(", "lat", "[", "i", "]", ",", "lng", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "lat", ")", ")", "]", "\n", "\n", "if", "len", "(", "curr_coords", ")", "<", "3", ":", "\n", "                ", "continue", "\n", "\n", "", "bbox_polygon", "=", "Polygon", "(", "curr_coords", ")", "\n", "bbox_pop", ",", "_", "=", "population_lookup", "(", "bbox_polygon", ",", "base_datetime", ",", "pop_polygons", ")", "\n", "pop", "+=", "bbox_pop", "\n", "\n", "", "xgsd", "=", "tr", "[", "1", "]", "\n", "ygsd", "=", "tr", "[", "-", "1", "]", "\n", "\n", "area", "=", "np", ".", "float", "(", "abs", "(", "xgsd", "*", "ygsd", ")", "*", "abs", "(", "y2", "-", "y1", ")", "*", "abs", "(", "x2", "-", "x1", ")", ")", "\n", "\n", "all_gt", ".", "append", "(", "(", "pop", ",", "area", ",", "(", "xgsd", ",", "ygsd", ")", ")", ")", "\n", "\n", "", "return", "all_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_chip_coords": [[197, 217], ["range", "range", "coords.append", "numpy.array().astype().tolist", "numpy.array().astype", "numpy.array"], "function", ["None"], ["", "def", "get_chip_coords", "(", "image_size", ",", "block_sizes", ",", "overlap", ")", ":", "\n", "\n", "    ", "coords", "=", "[", "]", "\n", "for", "block_size", "in", "block_sizes", ":", "\n", "        ", "'''\n        yend, xend = np.subtract(image_size, (block_size,block_size))\n        x = np.linspace(0, xend, np.ceil(xend / np.float(block_size - overlap)).astype('int') + 1, endpoint=True).astype('int')\n        y = np.linspace(0, yend, np.ceil(yend / np.float(block_size - overlap)).astype('int') + 1, endpoint=True).astype('int')\n        for x1 in x:\n            x2 = x1 + block_size\n            for y1 in y:\n                y2 = y1 + block_size\n                coords.append(np.array([x1, y1, x2, y2]).astype(np.int).tolist())\n        '''", "\n", "for", "y1", "in", "range", "(", "0", ",", "image_size", "[", "0", "]", ",", "block_size", ")", ":", "\n", "            ", "y2", "=", "y1", "+", "block_size", "\n", "for", "x1", "in", "range", "(", "0", ",", "image_size", "[", "1", "]", ",", "block_size", ")", ":", "\n", "                ", "x2", "=", "x1", "+", "block_size", "\n", "coords", ".", "append", "(", "np", ".", "array", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", ".", "astype", "(", "np", ".", "int", ")", ".", "tolist", "(", ")", ")", "\n", "", "", "", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_batch_inds": [[218, 232], ["len", "batch_inds.append"], "function", ["None"], ["", "def", "get_batch_inds", "(", "idx", ",", "batch_size", ")", ":", "\n", "    ", "n", "=", "len", "(", "idx", ")", "\n", "batch_inds", "=", "[", "]", "\n", "idx0", "=", "0", "\n", "to_process", "=", "True", "\n", "while", "to_process", ":", "\n", "        ", "idx1", "=", "idx0", "+", "batch_size", "\n", "if", "idx1", ">", "n", ":", "\n", "            ", "idx1", "=", "n", "\n", "idx0", "=", "idx1", "-", "batch_size", "\n", "to_process", "=", "False", "\n", "", "batch_inds", ".", "append", "(", "idx", "[", "idx0", ":", "idx1", "]", ")", "\n", "idx0", "=", "idx1", "\n", "", "return", "batch_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_paths": [[233, 246], ["json.load", "open", "os.path.join", "os.path.isfile", "misc_utils.get_subcamp_name", "test_paths.append", "train_paths.append"], "function", ["home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_subcamp_name"], ["", "def", "get_paths", "(", ")", ":", "\n", "    ", "basenames", "=", "json", ".", "load", "(", "open", "(", "params", ".", "image_basenames_path", ",", "\"r\"", ")", ")", "\n", "train_paths", ",", "test_paths", "=", "[", "]", ",", "[", "]", "\n", "for", "basename", "in", "basenames", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "params", ".", "image_dir", ",", "basename", "+", "\".tif\"", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "image_path", ")", ":", "\n", "            ", "continue", "\n", "", "if", "get_subcamp_name", "(", "basename", ")", "in", "params", ".", "test_camps", ":", "\n", "            ", "test_paths", ".", "append", "(", "image_path", ")", "\n", "", "else", ":", "\n", "            ", "train_paths", ".", "append", "(", "image_path", ")", "\n", "\n", "", "", "return", "train_paths", ",", "test_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.load_tiff": [[247, 255], ["gdal.Open", "gdal.Open.ReadAsArray", "gdal.Open.GetGeoTransform", "len", "numpy.transpose"], "function", ["None"], ["", "def", "load_tiff", "(", "image_path", ",", "size_only", "=", "False", ")", ":", "\n", "    ", "image_data", "=", "gdal", ".", "Open", "(", "image_path", ")", "\n", "\n", "image", "=", "image_data", ".", "ReadAsArray", "(", ")", "\n", "if", "len", "(", "image", ".", "shape", ")", ">", "2", ":", "\n", "        ", "image", "=", "np", ".", "transpose", "(", "image", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "", "tr", "=", "image_data", ".", "GetGeoTransform", "(", ")", "\n", "return", "image", ",", "tr", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_subcamp_name": [[256, 332], ["filename.lower", "filename.lower.split"], "function", ["None"], ["", "def", "get_subcamp_name", "(", "filename", ")", ":", "\n", "    ", "fname", "=", "filename", ".", "lower", "(", ")", "\n", "fname", "=", "fname", ".", "split", "(", "'_'", ")", "[", "1", ":", "]", "\n", "#strip punctuation", "\n", "fname", "=", "[", "''", ".", "join", "(", "c", "for", "c", "in", "seg", "if", "c", "not", "in", "string", ".", "punctuation", ")", "for", "seg", "in", "fname", "]", "\n", "for", "segment", "in", "fname", ":", "\n", "        ", "if", "'kutupalong'", "in", "segment", ":", "\n", "            ", "return", "'kutupalongrc'", "\n", "", "if", "'choukhali'", "in", "segment", ":", "\n", "            ", "return", "'choukhlai'", "\n", "", "if", "'01e'", "in", "segment", "or", "'camp1e'", "in", "segment", ":", "\n", "            ", "return", "'camp_01e'", "\n", "", "if", "'01w'", "in", "segment", "or", "'camp1w'", "in", "segment", ":", "\n", "            ", "return", "'camp_01w'", "\n", "", "if", "'02e'", "in", "segment", "or", "'camp2e'", "in", "segment", ":", "\n", "            ", "return", "'camp_02e'", "\n", "", "if", "'02w'", "in", "segment", "or", "'camp2w'", "in", "segment", ":", "\n", "            ", "return", "'camp_02w'", "\n", "", "if", "'03'", "in", "segment", "or", "'camp3'", "in", "segment", ":", "\n", "            ", "return", "'camp_03'", "\n", "", "if", "'04ext'", "in", "segment", "or", "'camp4ext'", "in", "segment", ":", "\n", "            ", "return", "'camp_04ext'", "\n", "", "if", "'04'", "in", "segment", "or", "'camp4'", "in", "segment", ":", "\n", "            ", "return", "'camp_04'", "\n", "", "if", "'05'", "in", "segment", "or", "'camp5'", "in", "segment", ":", "\n", "            ", "return", "'camp_05'", "\n", "", "if", "'06'", "in", "segment", "or", "'camp6'", "in", "segment", ":", "\n", "            ", "return", "'camp_06'", "\n", "", "if", "'07'", "in", "segment", "or", "'camp7'", "in", "segment", ":", "\n", "            ", "return", "'camp_07'", "\n", "", "if", "'08e'", "in", "segment", "or", "'camp8e'", "in", "segment", ":", "\n", "            ", "return", "'camp_08e'", "\n", "", "if", "'08w'", "in", "segment", "or", "'camp8w'", "in", "segment", ":", "\n", "            ", "return", "'camp_08w'", "\n", "", "if", "'09'", "in", "segment", "or", "'camp9'", "in", "segment", ":", "\n", "            ", "return", "'camp_09'", "\n", "", "if", "'10'", "in", "segment", "or", "'camp10'", "in", "segment", ":", "\n", "            ", "return", "'camp_10'", "\n", "", "if", "'11'", "in", "segment", ":", "\n", "            ", "return", "'camp_11'", "\n", "", "if", "'12'", "in", "segment", ":", "\n", "            ", "return", "'camp_12'", "\n", "", "if", "'13'", "in", "segment", ":", "\n", "            ", "return", "'camp_13'", "\n", "", "if", "'14'", "in", "segment", ":", "\n", "            ", "return", "'camp_14'", "\n", "", "if", "'15'", "in", "segment", ":", "\n", "            ", "return", "'camp_15'", "\n", "", "if", "'16'", "in", "segment", ":", "\n", "            ", "return", "'camp_16'", "\n", "", "if", "'17'", "in", "segment", ":", "\n", "            ", "return", "'camp_17'", "\n", "", "if", "'19'", "in", "segment", ":", "\n", "            ", "return", "'camp_19'", "\n", "", "if", "'20ext'", "in", "segment", ":", "\n", "            ", "return", "'camp_20ext'", "\n", "", "if", "'chakmarkul'", "in", "segment", "or", "'21'", "in", "segment", ":", "\n", "            ", "return", "'camp_21_chakmarkul'", "\n", "", "if", "'unchiprang'", "in", "segment", "or", "'22'", "in", "segment", ":", "\n", "            ", "return", "'camp_22_unchiprang'", "\n", "", "if", "'shamlapur'", "in", "segment", "or", "'23'", "in", "segment", ":", "\n", "            ", "return", "'camp_23_shamlapur'", "\n", "", "if", "'leda'", "in", "segment", "or", "'24'", "in", "segment", ":", "\n", "            ", "return", "'camp_24_leda'", "\n", "", "if", "'khali'", "in", "segment", "or", "'25'", "in", "segment", ":", "\n", "            ", "return", "'camp_25_ali_khali'", "\n", "", "if", "'nayapara'", "in", "segment", "or", "'26'", "in", "segment", ":", "\n", "            ", "return", "'camp_26_nayapara'", "\n", "", "if", "'jadimura'", "in", "segment", "or", "'27'", "in", "segment", ":", "\n", "            ", "return", "'camp_27_jadimura'", "\n", "", "if", "'18'", "in", "segment", ":", "\n", "            ", "return", "'camp_18'", "\n", "", "if", "'20'", "in", "segment", ":", "\n", "            ", "return", "'camp_20'", "\n", "\n", "", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_datetime": [[333, 355], ["[].lower", "datetime.datetime", "datetime.datetime", "basename.split", "datetime.datetime", "datetime.datetime", "datetime.datetime", "datetime.datetime", "datetime.datetime", "datetime.datetime", "datetime.datetime", "print"], "function", ["None"], ["", "def", "get_datetime", "(", "basename", ")", ":", "\n", "    ", "datestr", "=", "basename", ".", "split", "(", "'_'", ")", "[", "0", "]", ".", "lower", "(", ")", "\n", "if", "datestr", "==", "'april2018'", ":", "\n", "        ", "return", "datetime", "(", "2018", ",", "4", ",", "17", ")", "\n", "", "elif", "datestr", "==", "'may2018'", ":", "\n", "        ", "return", "datetime", "(", "2018", ",", "5", ",", "20", ")", "\n", "", "elif", "datestr", "==", "'june2018'", ":", "\n", "        ", "return", "datetime", "(", "2018", ",", "6", ",", "14", ")", "\n", "", "elif", "datestr", "==", "'july2018'", ":", "\n", "        ", "return", "datetime", "(", "2018", ",", "7", ",", "22", ")", "\n", "", "elif", "datestr", "==", "'august2018'", ":", "\n", "        ", "return", "datetime", "(", "2018", ",", "9", ",", "4", ")", "\n", "", "elif", "datestr", "==", "'septemper-october2018'", ":", "\n", "        ", "return", "datetime", "(", "2018", ",", "10", ",", "10", ")", "\n", "", "elif", "datestr", "==", "'november2018'", ":", "\n", "        ", "return", "datetime", "(", "2018", ",", "11", ",", "20", ")", "\n", "", "elif", "datestr", "==", "'january2019'", ":", "\n", "        ", "return", "datetime", "(", "2018", ",", "12", ",", "19", ")", "\n", "", "elif", "datestr", "==", "'march2019'", ":", "\n", "        ", "return", "datetime", "(", "2019", ",", "2", ",", "13", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "datestr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.pop_utils.get_pop_polygons": [[12, 50], ["os.walk", "tqdm.tqdm", "os.path.basename", "dateutil.parser.parse", "osgeo.ogr.Open", "ogr.Open.GetLayer", "sf.GetLayer.GetSpatialRef", "layer.GetSpatialRef.CloneGeogCS", "osgeo.osr.CoordinateTransformation", "os.path.join", "area.GetGeometryRef", "area.GetGeometryRef.GetGeometryRef", "area_shape.GetGeometryRef.Transform", "area_shape.GetGeometryRef.GetPointCount", "range", "shapely.geometry.Polygon", "curr_date_entries.append", "os.path.basename.lower().endswith", "area_shape.GetGeometryRef.GetPoint", "polygon_points.append", "os.path.splitext", "os.path.basename.lower"], "function", ["None"], ["def", "get_pop_polygons", "(", "shapefile_dir", ")", ":", "\n", "\n", "    ", "population_polygons", "=", "{", "}", "\n", "all_paths", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "shapefile_dir", ")", ":", "\n", "        ", "all_paths", "+=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", "for", "file", "in", "files", "if", "file", ".", "lower", "(", ")", ".", "endswith", "(", "'.shp'", ")", "]", "\n", "\n", "", "for", "path", "in", "tqdm", "(", "all_paths", ")", ":", "\n", "        ", "file", "=", "os", ".", "path", ".", "basename", "(", "path", ")", "\n", "# Extract the associated date from the end of the filename", "\n", "curr_date", "=", "dateutil", ".", "parser", ".", "parse", "(", "os", ".", "path", ".", "splitext", "(", "file", ")", "[", "0", "]", "[", "-", "8", ":", "]", ")", "\n", "\n", "sf", "=", "ogr", ".", "Open", "(", "path", ")", "\n", "\n", "layer", "=", "sf", ".", "GetLayer", "(", ")", "\n", "# get projected spatial reference", "\n", "sr", "=", "layer", ".", "GetSpatialRef", "(", ")", "\n", "# get geographic spatial reference", "\n", "geogr_sr", "=", "sr", ".", "CloneGeogCS", "(", ")", "\n", "# define reprojection", "\n", "proj_to_geog", "=", "osr", ".", "CoordinateTransformation", "(", "sr", ",", "geogr_sr", ")", "\n", "curr_date_entries", "=", "[", "]", "\n", "for", "area", "in", "layer", ":", "\n", "            ", "area_shape", "=", "area", ".", "GetGeometryRef", "(", ")", "\n", "area_polygon", "=", "area_shape", ".", "GetGeometryRef", "(", "0", ")", "\n", "# transform coordinates", "\n", "area_polygon", ".", "Transform", "(", "proj_to_geog", ")", "\n", "no_of_polygon_vertices", "=", "area_polygon", ".", "GetPointCount", "(", ")", "\n", "polygon_points", "=", "[", "]", "\n", "for", "vertex", "in", "range", "(", "no_of_polygon_vertices", ")", ":", "\n", "                ", "lon", ",", "lat", ",", "z", "=", "area_polygon", ".", "GetPoint", "(", "vertex", ")", "\n", "polygon_points", ".", "append", "(", "(", "lat", ",", "lon", ")", ")", "\n", "", "curr_poly", "=", "Polygon", "(", "polygon_points", ")", "\n", "curr_date_entries", ".", "append", "(", "(", "curr_poly", ",", "area", ")", ")", "\n", "\n", "", "population_polygons", "[", "curr_date", "]", "=", "curr_date_entries", "\n", "\n", "", "return", "population_polygons", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.pop_utils.population_lookup": [[51, 81], ["list", "min", "date_distances.index", "population_polygons.keys", "abs", "bounding_polygon.buffer.buffer", "polygon.intersection", "pop_utils.get_population_from_record"], "function", ["home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.pop_utils.get_population_from_record"], ["", "def", "population_lookup", "(", "bounding_polygon", ",", "reference_date", ",", "population_polygons", ")", ":", "\n", "    ", "\"\"\"\n    Compute a population estimate by overlapping all population polygons\n    with the provided polygon and multiply by an area-based population\n    factor. Use the provided reference date to pull the right set of\n    shapefiles.\n    \"\"\"", "\n", "all_dates", "=", "list", "(", "population_polygons", ".", "keys", "(", ")", ")", "\n", "date_distances", "=", "[", "abs", "(", "date", "-", "reference_date", ")", "for", "date", "in", "all_dates", "]", "\n", "min_date_distance", "=", "min", "(", "date_distances", ")", "\n", "min_index", "=", "date_distances", ".", "index", "(", "min_date_distance", ")", "\n", "\n", "population_polygons", "=", "population_polygons", "[", "all_dates", "[", "min_index", "]", "]", "\n", "\n", "if", "not", "bounding_polygon", ".", "is_valid", ":", "\n", "        ", "bounding_polygon", "=", "bounding_polygon", ".", "buffer", "(", "0", ")", "\n", "\n", "", "total_population", "=", "0", "\n", "total_area", "=", "0", "\n", "for", "polygon", ",", "record", "in", "population_polygons", ":", "\n", "        ", "try", ":", "\n", "            ", "intersection_polygon", "=", "polygon", ".", "intersection", "(", "bounding_polygon", ")", "\n", "if", "not", "intersection_polygon", ".", "is_empty", ":", "\n", "                ", "population_multiplier", "=", "intersection_polygon", ".", "area", "/", "polygon", ".", "area", "\n", "total_population", "+=", "(", "population_multiplier", "*", "get_population_from_record", "(", "record", ")", ")", "\n", "total_area", "+=", "intersection_polygon", ".", "area", "/", "polygon", ".", "area", "\n", "", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "return", "total_population", ",", "total_area", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.pop_utils.get_population_from_record": [[83, 93], ["record.keys", "RuntimeError"], "function", ["None"], ["", "def", "get_population_from_record", "(", "record", ")", ":", "\n", "    ", "\"\"\" The shapefile population records aren't consistent, so we use this\n    method to search for and return the population entry. \"\"\"", "\n", "record_keys", "=", "record", ".", "keys", "(", ")", "\n", "possible_keys", "=", "[", "'Total_Pop'", ",", "'Population'", ",", "'Total_INDs'", "]", "\n", "for", "key", "in", "possible_keys", ":", "\n", "        ", "if", "key", "in", "record_keys", ":", "\n", "            ", "return", "record", "[", "key", "]", "\n", "\n", "", "", "raise", "RuntimeError", "(", "'Could not find valid population key! Possible keys are: {}'", ".", "format", "(", "record_keys", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.ml_utils.load_batch": [[47, 82], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "cv2.resize", "albumentations.Compose", "keras.applications.imagenet_utils.preprocess_input", "len", "len", "len", "albumentations.Compose.", "albumentations.VerticalFlip", "albumentations.RandomRotate90", "albumentations.HorizontalFlip", "albumentations.Transpose", "albumentations.CLAHE", "albumentations.RandomBrightness", "albumentations.RandomGamma", "albumentations.HueSaturationValue", "albumentations.RandomContrast", "abs", "abs"], "function", ["None"], ["def", "load_batch", "(", "chip_coords", ",", "all_density", ",", "all_gsd", ",", "image", ",", "gsd_train_mean", ",", "gsd_train_std", ",", "args", ")", ":", "\n", "    ", "images", "=", "np", ".", "zeros", "(", "(", "len", "(", "chip_coords", ")", ",", "args", ".", "model_image_size", "[", "0", "]", ",", "args", ".", "model_image_size", "[", "1", "]", ",", "3", ")", ")", "\n", "densities", "=", "np", ".", "zeros", "(", "(", "len", "(", "chip_coords", ")", ",", "1", ")", ")", "\n", "gsds", "=", "np", ".", "zeros", "(", "(", "len", "(", "chip_coords", ")", ",", "2", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "chip_coords", ")", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "chip_coords", "[", "i", "]", "\n", "density", "=", "all_density", "[", "i", "]", "\n", "gsd", "=", "all_gsd", "[", "i", "]", "\n", "sub_image", "=", "image", "[", "y1", ":", "y2", ",", "x1", ":", "x2", ",", ":", "3", "]", "\n", "sub_image", "=", "cv2", ".", "resize", "(", "sub_image", ",", "args", ".", "model_image_size", ")", "\n", "\n", "aug", "=", "Compose", "(", "[", "VerticalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "RandomRotate90", "(", "p", "=", "0.5", ")", ",", "\n", "HorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "Transpose", "(", "p", "=", "0.5", ")", ",", "\n", "CLAHE", "(", "p", "=", "0.2", ")", ",", "\n", "RandomBrightness", "(", "limit", "=", "0.2", ",", "p", "=", "0.2", ")", ",", "\n", "RandomGamma", "(", "p", "=", "0.2", ")", ",", "\n", "HueSaturationValue", "(", "hue_shift_limit", "=", "20", ",", "sat_shift_limit", "=", "10", ",", "\n", "val_shift_limit", "=", "10", ",", "p", "=", "0.2", ")", ",", "\n", "RandomContrast", "(", "limit", "=", "0.4", ",", "p", "=", "0.3", ")", "]", ")", "\n", "\n", "sub_image", "=", "aug", "(", "image", "=", "sub_image", ")", "[", "'image'", "]", "\n", "\n", "images", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "sub_image", "\n", "\n", "densities", "[", "i", ",", "0", "]", "=", "density", "\n", "gsds", "[", "i", ",", "0", "]", "=", "(", "abs", "(", "gsd", "[", "0", "]", ")", "-", "gsd_train_mean", "[", "0", "]", ")", "/", "gsd_train_std", "[", "0", "]", "\n", "gsds", "[", "i", ",", "1", "]", "=", "(", "abs", "(", "gsd", "[", "1", "]", ")", "-", "gsd_train_mean", "[", "1", "]", ")", "/", "gsd_train_std", "[", "1", "]", "\n", "\n", "", "images", "=", "imagenet_utils", ".", "preprocess_input", "(", "images", ")", "/", "255.0", "\n", "\n", "\n", "return", "images", ",", "densities", ",", "gsds", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.ml_utils.image_generator": [[84, 116], ["os.path.join", "json.load", "open", "numpy.int", "train_data.items", "range", "range", "numpy.ceil", "numpy.random.permutation", "ml_utils.load_batch", "len", "batch_data.append", "os.path.basename().replace", "utilities.misc_utils.load_tiff", "os.path.join", "cv2.imread", "cv2.resize", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.ml_utils.load_batch", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.load_tiff"], ["", "def", "image_generator", "(", "train_data", ",", "args", ")", ":", "\n", "    ", "norm_params_path", "=", "os", ".", "path", ".", "join", "(", "params", ".", "normalization_params_dir", ",", "'normalization_parameters.json'", ")", "\n", "norm_data", "=", "json", ".", "load", "(", "open", "(", "norm_params_path", ",", "'r'", ")", ")", "\n", "gsd_train_mean", "=", "[", "norm_data", "[", "\"mean\"", "]", "[", "i", "]", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "gsd_train_std", "=", "[", "norm_data", "[", "\"var\"", "]", "[", "i", "]", "**", "0.5", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "\n", "while", "True", ":", "\n", "        ", "prev_image_path", "=", "\"\"", "\n", "sample_num", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "args", ".", "sample_size", "/", "args", ".", "batch_size", ")", ")", "\n", "\n", "batch_data", "=", "[", "]", "\n", "for", "key", ",", "val", "in", "train_data", ".", "items", "(", ")", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "val", ")", ")", "\n", "for", "ind", "in", "idx", "[", ":", "sample_num", "]", ":", "\n", "                ", "batch_data", ".", "append", "(", "val", "[", "ind", "]", ")", "\n", "\n", "", "", "for", "data", "in", "batch_data", ":", "\n", "            ", "image_path", ",", "chip_coords", ",", "density", ",", "gsd", "=", "data", "\n", "if", "prev_image_path", "!=", "image_path", ":", "\n", "                ", "basename", "=", "os", ".", "path", ".", "basename", "(", "image_path", ")", ".", "replace", "(", "\".tif\"", ",", "\"\"", ")", "\n", "image", ",", "tr", "=", "load_tiff", "(", "image_path", ")", "\n", "if", "args", ".", "add_osm", ":", "\n", "                    ", "osm_path", "=", "os", ".", "path", ".", "join", "(", "params", ".", "osm_dir", ",", "basename", "+", "\".png\"", ")", "\n", "osm_mask", "=", "cv2", ".", "imread", "(", "osm_path", ",", "0", ")", "\n", "osm_mask", "=", "cv2", ".", "resize", "(", "osm_mask", ",", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "image", "[", "osm_mask", "==", "0", "]", "=", "0", "\n", "", "prev_image_path", "=", "image_path", "\n", "", "images", ",", "densities", ",", "gsds", "=", "load_batch", "(", "chip_coords", ",", "density", ",", "gsd", ",", "image", ",", "gsd_train_mean", ",", "gsd_train_std", ",", "args", ")", "\n", "if", "args", ".", "add_metadata", ":", "\n", "                ", "yield", "(", "[", "images", ",", "gsds", "]", ",", "densities", ")", "\n", "", "else", ":", "\n", "                ", "yield", "(", "images", ",", "densities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.ml_utils.get_train_data": [[117, 142], ["os.path.basename().replace", "os.path.join", "json.load", "numpy.random.permutation", "utilities.misc_utils.get_batch_inds", "open", "len", "batch_data.append", "os.path.basename", "batch_chip_coords.append", "batch_density.append", "batch_gsd.append", "numpy.abs().tolist", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_batch_inds"], ["", "", "", "", "def", "get_train_data", "(", "image_paths", ",", "args", ")", ":", "\n", "    ", "batch_data", "=", "[", "]", "\n", "\n", "min_density", ",", "max_density", "=", "np", ".", "inf", ",", "-", "np", ".", "inf", "\n", "\n", "for", "image_path", "in", "image_paths", ":", "\n", "        ", "basename", "=", "os", ".", "path", ".", "basename", "(", "image_path", ")", ".", "replace", "(", "\".tif\"", ",", "\"\"", ")", "\n", "chip_data_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "chip_pop_dir", ",", "basename", "+", "\".json\"", ")", "\n", "data", "=", "json", ".", "load", "(", "open", "(", "chip_data_file", ",", "\"r\"", ")", ")", "\n", "idx", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "data", "[", "\"chip_coords\"", "]", ")", ")", "\n", "batch_inds", "=", "get_batch_inds", "(", "idx", ",", "args", ".", "batch_size", ")", "\n", "for", "inds", "in", "batch_inds", ":", "\n", "            ", "batch_chip_coords", "=", "[", "]", "\n", "batch_density", "=", "[", "]", "\n", "batch_gsd", "=", "[", "]", "\n", "for", "ind", "in", "inds", ":", "\n", "                ", "batch_chip_coords", ".", "append", "(", "data", "[", "\"chip_coords\"", "]", "[", "ind", "]", ")", "\n", "density", "=", "data", "[", "\"all_gt\"", "]", "[", "ind", "]", "[", "0", "]", "/", "data", "[", "\"all_gt\"", "]", "[", "ind", "]", "[", "1", "]", "\n", "\n", "batch_density", ".", "append", "(", "density", ")", "\n", "batch_gsd", ".", "append", "(", "np", ".", "abs", "(", "data", "[", "\"all_gt\"", "]", "[", "ind", "]", "[", "2", "]", ")", ".", "tolist", "(", ")", ")", "\n", "", "batch_data", ".", "append", "(", "[", "image_path", ",", "batch_chip_coords", ",", "batch_density", ",", "batch_gsd", "]", ")", "\n", "\n", "\n", "", "", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.ml_utils.huber_loss_mean": [[143, 150], ["tensorflow.where", "keras.mean", "keras.abs", "keras.square", "keras.abs"], "function", ["None"], ["", "def", "huber_loss_mean", "(", "y_true", ",", "y_pred", ",", "clip_delta", "=", "1.0", ")", ":", "\n", "    ", "error", "=", "y_true", "-", "y_pred", "\n", "cond", "=", "K", ".", "abs", "(", "error", ")", "<", "clip_delta", "\n", "squared_loss", "=", "0.5", "*", "K", ".", "square", "(", "error", ")", "\n", "linear_loss", "=", "clip_delta", "*", "(", "K", ".", "abs", "(", "error", ")", "-", "0.5", "*", "clip_delta", ")", "\n", "huber_loss", "=", "tf", ".", "where", "(", "cond", ",", "squared_loss", ",", "linear_loss", ")", "\n", "return", "K", ".", "mean", "(", "huber_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.ml_utils.train": [[151, 213], ["utilities.misc_utils.get_paths", "ml_utils.get_train_data", "ml_utils.image_generator", "keras.models.Model.compile", "print", "os.path.join", "keras.callbacks.ModelCheckpoint", "libs.CLR.clr_callback.CyclicLR", "keras.models.Model.fit_generator", "utilities.misc_utils.wrangle_data", "train_data[].append", "os.path.isdir", "os.makedirs", "glob.glob", "numpy.int", "keras.models.load_model", "ResNet", "keras.models.Model.summary", "train_data.keys", "os.path.join", "numpy.int", "numpy.argsort", "keras.layers.GlobalAveragePooling2D", "keras.layers.GlobalAveragePooling2D", "keras.layers.Dropout", "keras.layers.Input", "keras.layers.concatenate", "keras.models.Model", "keras.models.Model", "numpy.int", "weights_path.split", "keras.layers.Dense", "keras.layers.Dense", "len", "weights_path.split"], "function", ["home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_paths", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.ml_utils.get_train_data", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.ml_utils.image_generator", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.wrangle_data"], ["", "def", "train", "(", "args", ")", ":", "\n", "\n", "    ", "train_paths", ",", "_", "=", "get_paths", "(", ")", "\n", "\n", "if", "args", ".", "wrangle_data", ":", "\n", "        ", "wrangle_data", "(", "train_paths", ",", "args", ")", "\n", "\n", "", "batch_data", "=", "get_train_data", "(", "train_paths", ",", "args", ")", "\n", "\n", "train_data", "=", "{", "}", "\n", "for", "data", "in", "batch_data", ":", "\n", "        ", "if", "data", "[", "0", "]", "not", "in", "train_data", ".", "keys", "(", ")", ":", "\n", "            ", "train_data", "[", "data", "[", "0", "]", "]", "=", "[", "]", "\n", "", "train_data", "[", "data", "[", "0", "]", "]", ".", "append", "(", "data", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "checkpoint_dir", ")", "\n", "\n", "", "train_datagen", "=", "image_generator", "(", "train_data", ",", "args", ")", "\n", "\n", "initial_epoch", "=", "0", "\n", "if", "args", ".", "load_best_train_weights", ":", "\n", "        ", "weights_paths", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "\"*.hdf5\"", ")", ")", "\n", "nums", "=", "[", "np", ".", "int", "(", "weights_path", ".", "split", "(", "\".\"", ")", "[", "-", "2", "]", ")", "for", "weights_path", "in", "weights_paths", "]", "\n", "idx", "=", "np", ".", "argsort", "(", "nums", ")", "[", ":", ":", "-", "1", "]", "\n", "weights_path", "=", "weights_paths", "[", "idx", "[", "0", "]", "]", "\n", "initial_epoch", "=", "np", ".", "int", "(", "weights_path", ".", "split", "(", "\".\"", ")", "[", "-", "2", "]", ")", "\n", "model", "=", "load_model", "(", "weights_path", ",", "custom_objects", "=", "{", "\"huber_loss_mean\"", ":", "huber_loss_mean", "}", ")", "\n", "", "else", ":", "\n", "        ", "base_model", "=", "ResNet", "(", "input_shape", "=", "(", "args", ".", "model_image_size", "[", "0", "]", ",", "args", ".", "model_image_size", "[", "1", "]", ",", "3", ")", ",", "weights", "=", "\"imagenet\"", ",", "include_top", "=", "False", ")", "\n", "\n", "x", "=", "keras", ".", "layers", ".", "GlobalAveragePooling2D", "(", ")", "(", "base_model", ".", "output", ")", "\n", "x", "=", "Dropout", "(", "0.7", ")", "(", "x", ")", "\n", "if", "args", ".", "add_metadata", ":", "\n", "            ", "input_gsd", "=", "Input", "(", "shape", "=", "(", "2", ",", ")", ")", "\n", "x", "=", "concatenate", "(", "[", "x", ",", "input_gsd", "]", ")", "\n", "out", "=", "Dense", "(", "1", ",", "name", "=", "\"out\"", ")", "(", "x", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "base_model", ".", "input", ",", "input_gsd", "]", ",", "outputs", "=", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "Dense", "(", "1", ",", "name", "=", "\"out\"", ")", "(", "x", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "base_model", ".", "input", ",", "outputs", "=", "out", ")", "\n", "\n", "", "", "model", ".", "compile", "(", "optimizer", "=", "\"Adam\"", ",", "loss", "=", "huber_loss_mean", ")", "\n", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "\n", "checkpoint_filepath", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "\"weights.{epoch:02d}.hdf5\"", ")", "\n", "checkpoint", "=", "ModelCheckpoint", "(", "filepath", "=", "checkpoint_filepath", ",", "monitor", "=", "\"loss\"", ",", "verbose", "=", "0", ",", "save_best_only", "=", "False", ",", "\n", "save_weights_only", "=", "False", ",", "mode", "=", "\"auto\"", ",", "period", "=", "args", ".", "save_period", ")", "\n", "\n", "steps_per_epoch", "=", "(", "(", "args", ".", "sample_size", "*", "len", "(", "train_paths", ")", ")", "/", "args", ".", "batch_size", "+", "1", ")", "\n", "triangular_clr", "=", "CyclicLR", "(", "base_lr", "=", "args", ".", "lr", ",", "\n", "max_lr", "=", "args", ".", "max_lr", ",", "\n", "mode", "=", "'triangular2'", ",", "\n", "step_size", "=", "np", ".", "int", "(", "0.5", "*", "args", ".", "save_period", "*", "steps_per_epoch", ")", ")", "\n", "callbacks_list", "=", "[", "checkpoint", ",", "triangular_clr", "]", "\n", "\n", "model", ".", "fit_generator", "(", "generator", "=", "train_datagen", ",", "\n", "steps_per_epoch", "=", "steps_per_epoch", ",", "\n", "epochs", "=", "args", ".", "num_epochs", ",", "\n", "callbacks", "=", "callbacks_list", ",", "\n", "initial_epoch", "=", "initial_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.ml_utils.test": [[215, 295], ["utilities.misc_utils.get_paths", "glob.glob", "print", "keras.models.load_model", "os.path.join", "json.load", "tqdm.tqdm", "numpy.mean", "print", "utilities.misc_utils.wrangle_test_data", "os.path.join", "numpy.int", "numpy.argsort", "open", "os.path.basename().replace", "print", "os.path.join", "json.load", "utilities.misc_utils.load_tiff", "enumerate", "predicted_tots.append", "gt_tots.append", "numpy.mean", "print", "range", "range", "open", "os.path.join", "cv2.imread", "cv2.resize", "tqdm.tqdm", "numpy.zeros", "numpy.float", "numpy.zeros", "cv2.resize.astype", "cv2.resize.astype", "numpy.expand_dims", "abs", "numpy.divide", "weights_path.split", "os.path.basename", "min", "min", "cv2.resize", "cv2.resize.sum", "keras.applications.imagenet_utils.preprocess_input", "numpy.divide", "numpy.abs", "abs", "abs", "abs", "numpy.abs", "abs", "keras.models.load_model.predict", "keras.models.load_model.predict", "numpy.array", "numpy.array", "abs", "abs", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.get_paths", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.wrangle_test_data", "home.repos.pwc.inspect_result.JHUAPL_EstimatingDisplacedPopulations.utilities.misc_utils.load_tiff"], ["", "def", "test", "(", "args", ")", ":", "\n", "    ", "_", ",", "test_paths", "=", "get_paths", "(", ")", "\n", "if", "args", ".", "wrangle_data", ":", "\n", "        ", "wrangle_test_data", "(", "test_paths", ",", "args", ")", "\n", "", "weights_paths", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "\"*.hdf5\"", ")", ")", "\n", "nums", "=", "[", "np", ".", "int", "(", "weights_path", ".", "split", "(", "\".\"", ")", "[", "-", "2", "]", ")", "for", "weights_path", "in", "weights_paths", "]", "\n", "idx", "=", "np", ".", "argsort", "(", "nums", ")", "[", ":", ":", "-", "1", "]", "\n", "weights_path", "=", "weights_paths", "[", "idx", "[", "0", "]", "]", "\n", "\n", "print", "(", "f\"Loading weights from: {weights_path}\"", ",", "flush", "=", "True", ")", "\n", "\n", "model", "=", "load_model", "(", "weights_path", ",", "custom_objects", "=", "{", "\"huber_loss_mean\"", ":", "huber_loss_mean", "}", ")", "\n", "\n", "predicted_pops", ",", "gt_pops", "=", "[", "]", ",", "[", "]", "\n", "predicted_tots", ",", "gt_tots", "=", "[", "]", ",", "[", "]", "\n", "\n", "norm_params_path", "=", "os", ".", "path", ".", "join", "(", "params", ".", "normalization_params_dir", ",", "'normalization_parameters.json'", ")", "\n", "norm_data", "=", "json", ".", "load", "(", "open", "(", "norm_params_path", ",", "'r'", ")", ")", "\n", "gsd_train_mean", "=", "[", "norm_data", "[", "\"mean\"", "]", "[", "i", "]", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "gsd_train_std", "=", "[", "norm_data", "[", "\"var\"", "]", "[", "i", "]", "**", "0.5", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "\n", "for", "test_path", "in", "tqdm", "(", "test_paths", ")", ":", "\n", "        ", "basename", "=", "os", ".", "path", ".", "basename", "(", "test_path", ")", ".", "replace", "(", "\".tif\"", ",", "\"\"", ")", "\n", "print", "(", "basename", ")", "\n", "\n", "data_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "test_chip_pop_dir", ",", "f\"{basename}.json\"", ")", "\n", "data", "=", "json", ".", "load", "(", "open", "(", "data_file", ",", "\"r\"", ")", ")", "\n", "gt_pop", "=", "data", "[", "\"total_gt\"", "]", "\n", "pred_tot", "=", "0", "\n", "\n", "image", ",", "tr", "=", "load_tiff", "(", "test_path", ")", "\n", "\n", "if", "args", ".", "add_osm", ":", "\n", "            ", "osm_path", "=", "os", ".", "path", ".", "join", "(", "params", ".", "osm_dir", ",", "basename", "+", "\".png\"", ")", "\n", "osm_mask", "=", "cv2", ".", "imread", "(", "osm_path", ",", "0", ")", "\n", "osm_mask", "=", "cv2", ".", "resize", "(", "osm_mask", ",", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "image", "[", "osm_mask", "==", "0", "]", "=", "0", "\n", "\n", "", "for", "i", ",", "coords", "in", "enumerate", "(", "tqdm", "(", "data", "[", "\"chip_coords\"", "]", ")", ")", ":", "\n", "            ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "coords", "\n", "\n", "sub_image_size", "=", "(", "min", "(", "(", "y2", "-", "y1", ")", ",", "(", "image", ".", "shape", "[", "0", "]", "-", "y1", ")", ")", ",", "min", "(", "(", "x2", "-", "x1", ")", ",", "(", "image", ".", "shape", "[", "1", "]", "-", "x1", ")", ")", ",", "3", ")", "\n", "sub_image", "=", "np", ".", "zeros", "(", "sub_image_size", ")", "\n", "sub_image", "[", ":", "(", "y2", "-", "y1", ")", ",", ":", "(", "x2", "-", "x1", ")", ",", ":", "]", "=", "image", "[", "y1", ":", "y2", ",", "x1", ":", "x2", ",", ":", "3", "]", "\n", "\n", "if", "sub_image", ".", "shape", "[", ":", "2", "]", "!=", "args", ".", "model_image_size", ":", "\n", "                ", "sub_image", "=", "cv2", ".", "resize", "(", "sub_image", ",", "args", ".", "model_image_size", ")", "\n", "\n", "", "xgsd", ",", "ygsd", "=", "tr", "[", "1", "]", ",", "tr", "[", "-", "1", "]", "\n", "\n", "area", "=", "np", ".", "float", "(", "abs", "(", "xgsd", ")", "*", "abs", "(", "x2", "-", "x1", ")", "*", "abs", "(", "ygsd", ")", "*", "abs", "(", "y2", "-", "y1", ")", ")", "\n", "gsd", "=", "np", ".", "zeros", "(", "(", "1", ",", "2", ")", ")", "\n", "gsd", "[", "0", ",", "0", "]", "=", "(", "abs", "(", "xgsd", ")", "-", "gsd_train_mean", "[", "0", "]", ")", "/", "gsd_train_std", "[", "0", "]", "\n", "gsd", "[", "0", ",", "1", "]", "=", "(", "abs", "(", "ygsd", ")", "-", "gsd_train_mean", "[", "1", "]", ")", "/", "gsd_train_std", "[", "1", "]", "\n", "\n", "sub_image", "=", "sub_image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "sub_image", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "sub_image", "=", "sub_image", ".", "astype", "(", "np", ".", "float64", ")", "\n", "sub_image", "=", "imagenet_utils", ".", "preprocess_input", "(", "sub_image", ")", "/", "255.0", "\n", "sub_image", "=", "np", ".", "expand_dims", "(", "sub_image", ",", "axis", "=", "0", ")", "\n", "if", "args", ".", "add_metadata", ":", "\n", "                ", "pred", "=", "model", ".", "predict", "(", "[", "sub_image", ",", "gsd", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "pred", "=", "model", ".", "predict", "(", "sub_image", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "pred", "=", "abs", "(", "pred", "*", "(", "pred", ">", "0.0", ")", ")", "# Remove negative predictions", "\n", "predicted_pop", "=", "pred", "*", "area", "\n", "\n", "pred_tot", "+=", "predicted_pop", "\n", "\n", "", "predicted_tots", ".", "append", "(", "pred_tot", ")", "\n", "gt_tots", ".", "append", "(", "gt_pop", ")", "\n", "curr_mape", "=", "np", ".", "mean", "(", "100", "*", "np", ".", "divide", "(", "np", ".", "abs", "(", "np", ".", "array", "(", "pred_tot", ")", "-", "np", ".", "array", "(", "gt_pop", ")", ")", ",", "gt_pop", ")", ")", "\n", "print", "(", "f\"Current image pred: {pred_tot} gt: {gt_pop} and tested images MAPE: {curr_mape}%\"", ",", "flush", "=", "True", ")", "\n", "\n", "", "mape", "=", "np", ".", "mean", "(", "100", "*", "np", ".", "divide", "(", "np", ".", "abs", "(", "np", ".", "array", "(", "predicted_tots", ")", "-", "np", ".", "array", "(", "gt_tots", ")", ")", ",", "gt_tots", ")", ")", "\n", "print", "(", "f\"Test MAPE: {mape}%\"", ",", "flush", "=", "True", ")", "\n", "", ""]]}