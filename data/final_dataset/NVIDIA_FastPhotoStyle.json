{"home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.models.VGGEncoder.__init__": [[9, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.MaxPool2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.MaxPool2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.MaxPool2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "level", ")", ":", "\n", "        ", "super", "(", "VGGEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "level", "=", "level", "\n", "\n", "# 224 x 224", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "pad1_1", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "# 226 x 226", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu1_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 224 x 224", "\n", "\n", "if", "level", "<", "2", ":", "return", "\n", "\n", "self", ".", "pad1_2", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu1_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 224 x 224", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "# 112 x 112", "\n", "\n", "self", ".", "pad2_1", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu2_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 112 x 112", "\n", "\n", "if", "level", "<", "3", ":", "return", "\n", "\n", "self", ".", "pad2_2", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu2_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 112 x 112", "\n", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "# 56 x 56", "\n", "\n", "self", ".", "pad3_1", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu3_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 56 x 56", "\n", "\n", "if", "level", "<", "4", ":", "return", "\n", "\n", "self", ".", "pad3_2", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu3_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 56 x 56", "\n", "\n", "self", ".", "pad3_3", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu3_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 56 x 56", "\n", "\n", "self", ".", "pad3_4", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv3_4", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu3_4", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 56 x 56", "\n", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "# 28 x 28", "\n", "\n", "self", ".", "pad4_1", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu4_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 28 x 28", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.models.VGGEncoder.forward": [[76, 130], ["models.VGGEncoder.conv0", "models.VGGEncoder.pad1_1", "models.VGGEncoder.conv1_1", "models.VGGEncoder.relu1_1", "models.VGGEncoder.pad1_2", "models.VGGEncoder.conv1_2", "models.VGGEncoder.relu1_2", "models.VGGEncoder.maxpool1", "models.VGGEncoder.pad2_1", "models.VGGEncoder.conv2_1", "models.VGGEncoder.relu2_1", "models.VGGEncoder.pad2_2", "models.VGGEncoder.conv2_2", "models.VGGEncoder.relu2_2", "models.VGGEncoder.maxpool2", "models.VGGEncoder.pad3_1", "models.VGGEncoder.conv3_1", "models.VGGEncoder.relu3_1", "models.VGGEncoder.pad3_2", "models.VGGEncoder.conv3_2", "models.VGGEncoder.relu3_2", "models.VGGEncoder.pad3_3", "models.VGGEncoder.conv3_3", "models.VGGEncoder.relu3_3", "models.VGGEncoder.pad3_4", "models.VGGEncoder.conv3_4", "models.VGGEncoder.relu3_4", "models.VGGEncoder.maxpool3", "models.VGGEncoder.pad4_1", "models.VGGEncoder.conv4_1", "models.VGGEncoder.relu4_1", "models.VGGEncoder.size", "models.VGGEncoder.size", "models.VGGEncoder.size", "models.VGGEncoder.size", "models.VGGEncoder.size", "models.VGGEncoder.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv0", "(", "x", ")", "\n", "\n", "out", "=", "self", ".", "pad1_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1_1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1_1", "(", "out", ")", "\n", "\n", "if", "self", ".", "level", "<", "2", ":", "\n", "            ", "return", "out", "\n", "\n", "", "out", "=", "self", ".", "pad1_2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1_2", "(", "out", ")", "\n", "pool1", "=", "self", ".", "relu1_2", "(", "out", ")", "\n", "\n", "out", ",", "pool1_idx", "=", "self", ".", "maxpool1", "(", "pool1", ")", "\n", "\n", "out", "=", "self", ".", "pad2_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2_1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu2_1", "(", "out", ")", "\n", "\n", "if", "self", ".", "level", "<", "3", ":", "\n", "            ", "return", "out", ",", "pool1_idx", ",", "pool1", ".", "size", "(", ")", "\n", "\n", "", "out", "=", "self", ".", "pad2_2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2_2", "(", "out", ")", "\n", "pool2", "=", "self", ".", "relu2_2", "(", "out", ")", "\n", "\n", "out", ",", "pool2_idx", "=", "self", ".", "maxpool2", "(", "pool2", ")", "\n", "\n", "out", "=", "self", ".", "pad3_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu3_1", "(", "out", ")", "\n", "\n", "if", "self", ".", "level", "<", "4", ":", "\n", "            ", "return", "out", ",", "pool1_idx", ",", "pool1", ".", "size", "(", ")", ",", "pool2_idx", ",", "pool2", ".", "size", "(", ")", "\n", "\n", "", "out", "=", "self", ".", "pad3_2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu3_2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "pad3_3", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu3_3", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "pad3_4", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_4", "(", "out", ")", "\n", "pool3", "=", "self", ".", "relu3_4", "(", "out", ")", "\n", "out", ",", "pool3_idx", "=", "self", ".", "maxpool3", "(", "pool3", ")", "\n", "\n", "out", "=", "self", ".", "pad4_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv4_1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu4_1", "(", "out", ")", "\n", "\n", "return", "out", ",", "pool1_idx", ",", "pool1", ".", "size", "(", ")", ",", "pool2_idx", ",", "pool2", ".", "size", "(", ")", ",", "pool3_idx", ",", "pool3", ".", "size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.models.VGGEncoder.forward_multiple": [[131, 188], ["models.VGGEncoder.conv0", "models.VGGEncoder.pad1_1", "models.VGGEncoder.conv1_1", "models.VGGEncoder.relu1_1", "models.VGGEncoder.pad1_2", "models.VGGEncoder.conv1_2", "models.VGGEncoder.relu1_2", "models.VGGEncoder.maxpool1", "models.VGGEncoder.pad2_1", "models.VGGEncoder.conv2_1", "models.VGGEncoder.relu2_1", "models.VGGEncoder.pad2_2", "models.VGGEncoder.conv2_2", "models.VGGEncoder.relu2_2", "models.VGGEncoder.maxpool2", "models.VGGEncoder.pad3_1", "models.VGGEncoder.conv3_1", "models.VGGEncoder.relu3_1", "models.VGGEncoder.pad3_2", "models.VGGEncoder.conv3_2", "models.VGGEncoder.relu3_2", "models.VGGEncoder.pad3_3", "models.VGGEncoder.conv3_3", "models.VGGEncoder.relu3_3", "models.VGGEncoder.pad3_4", "models.VGGEncoder.conv3_4", "models.VGGEncoder.relu3_4", "models.VGGEncoder.maxpool3", "models.VGGEncoder.pad4_1", "models.VGGEncoder.conv4_1", "models.VGGEncoder.relu4_1"], "methods", ["None"], ["", "def", "forward_multiple", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv0", "(", "x", ")", "\n", "\n", "out", "=", "self", ".", "pad1_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1_1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1_1", "(", "out", ")", "\n", "\n", "if", "self", ".", "level", "<", "2", ":", "return", "out", "\n", "\n", "out1", "=", "out", "\n", "\n", "out", "=", "self", ".", "pad1_2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1_2", "(", "out", ")", "\n", "pool1", "=", "self", ".", "relu1_2", "(", "out", ")", "\n", "\n", "out", ",", "pool1_idx", "=", "self", ".", "maxpool1", "(", "pool1", ")", "\n", "\n", "out", "=", "self", ".", "pad2_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2_1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu2_1", "(", "out", ")", "\n", "\n", "if", "self", ".", "level", "<", "3", ":", "return", "out", ",", "out1", "\n", "\n", "out2", "=", "out", "\n", "\n", "out", "=", "self", ".", "pad2_2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2_2", "(", "out", ")", "\n", "pool2", "=", "self", ".", "relu2_2", "(", "out", ")", "\n", "\n", "out", ",", "pool2_idx", "=", "self", ".", "maxpool2", "(", "pool2", ")", "\n", "\n", "out", "=", "self", ".", "pad3_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu3_1", "(", "out", ")", "\n", "\n", "if", "self", ".", "level", "<", "4", ":", "return", "out", ",", "out2", ",", "out1", "\n", "\n", "out3", "=", "out", "\n", "\n", "out", "=", "self", ".", "pad3_2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu3_2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "pad3_3", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu3_3", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "pad3_4", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_4", "(", "out", ")", "\n", "pool3", "=", "self", ".", "relu3_4", "(", "out", ")", "\n", "out", ",", "pool3_idx", "=", "self", ".", "maxpool3", "(", "pool3", ")", "\n", "\n", "out", "=", "self", ".", "pad4_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv4_1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu4_1", "(", "out", ")", "\n", "\n", "return", "out", ",", "out3", ",", "out2", ",", "out1", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.models.VGGDecoder.__init__": [[191, 250], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.MaxUnpool2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.MaxUnpool2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.MaxUnpool2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.ReLU", "torch.ReflectionPad2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "level", ")", ":", "\n", "        ", "super", "(", "VGGDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "level", "=", "level", "\n", "\n", "if", "level", ">", "3", ":", "\n", "            ", "self", ".", "pad4_1", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu4_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 28 x 28", "\n", "\n", "self", ".", "unpool3", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "# 56 x 56", "\n", "\n", "self", ".", "pad3_4", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv3_4", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu3_4", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 56 x 56", "\n", "\n", "self", ".", "pad3_3", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu3_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 56 x 56", "\n", "\n", "self", ".", "pad3_2", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu3_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 56 x 56", "\n", "\n", "", "if", "level", ">", "2", ":", "\n", "            ", "self", ".", "pad3_1", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu3_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 56 x 56", "\n", "\n", "self", ".", "unpool2", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "# 112 x 112", "\n", "\n", "self", ".", "pad2_2", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu2_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 112 x 112", "\n", "\n", "", "if", "level", ">", "1", ":", "\n", "            ", "self", ".", "pad2_1", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu2_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 112 x 112", "\n", "\n", "self", ".", "unpool1", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "# 224 x 224", "\n", "\n", "self", ".", "pad1_2", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "relu1_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# 224 x 224", "\n", "\n", "", "if", "level", ">", "0", ":", "\n", "            ", "self", ".", "pad1_1", "=", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "3", ",", "3", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.models.VGGDecoder.forward": [[251, 298], ["models.VGGDecoder.pad4_1", "models.VGGDecoder.conv4_1", "models.VGGDecoder.relu4_1", "models.VGGDecoder.unpool3", "models.VGGDecoder.pad3_4", "models.VGGDecoder.conv3_4", "models.VGGDecoder.relu3_4", "models.VGGDecoder.pad3_3", "models.VGGDecoder.conv3_3", "models.VGGDecoder.relu3_3", "models.VGGDecoder.pad3_2", "models.VGGDecoder.conv3_2", "models.VGGDecoder.relu3_2", "models.VGGDecoder.pad3_1", "models.VGGDecoder.conv3_1", "models.VGGDecoder.relu3_1", "models.VGGDecoder.unpool2", "models.VGGDecoder.pad2_2", "models.VGGDecoder.conv2_2", "models.VGGDecoder.relu2_2", "models.VGGDecoder.pad2_1", "models.VGGDecoder.conv2_1", "models.VGGDecoder.relu2_1", "models.VGGDecoder.unpool1", "models.VGGDecoder.pad1_2", "models.VGGDecoder.conv1_2", "models.VGGDecoder.relu1_2", "models.VGGDecoder.pad1_1", "models.VGGDecoder.conv1_1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "pool1_idx", "=", "None", ",", "pool1_size", "=", "None", ",", "pool2_idx", "=", "None", ",", "pool2_size", "=", "None", ",", "pool3_idx", "=", "None", ",", "\n", "pool3_size", "=", "None", ")", ":", "\n", "        ", "out", "=", "x", "\n", "\n", "if", "self", ".", "level", ">", "3", ":", "\n", "            ", "out", "=", "self", ".", "pad4_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv4_1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu4_1", "(", "out", ")", "\n", "out", "=", "self", ".", "unpool3", "(", "out", ",", "pool3_idx", ",", "output_size", "=", "pool3_size", ")", "\n", "\n", "out", "=", "self", ".", "pad3_4", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_4", "(", "out", ")", "\n", "out", "=", "self", ".", "relu3_4", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "pad3_3", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu3_3", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "pad3_2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu3_2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "level", ">", "2", ":", "\n", "            ", "out", "=", "self", ".", "pad3_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu3_1", "(", "out", ")", "\n", "out", "=", "self", ".", "unpool2", "(", "out", ",", "pool2_idx", ",", "output_size", "=", "pool2_size", ")", "\n", "\n", "out", "=", "self", ".", "pad2_2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2_2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu2_2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "level", ">", "1", ":", "\n", "            ", "out", "=", "self", ".", "pad2_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2_1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu2_1", "(", "out", ")", "\n", "out", "=", "self", ".", "unpool1", "(", "out", ",", "pool1_idx", ",", "output_size", "=", "pool1_size", ")", "\n", "\n", "out", "=", "self", ".", "pad1_2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1_2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1_2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "level", ">", "0", ":", "\n", "            ", "out", "=", "self", ".", "pad1_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1_1", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_gif.GIFSmoothing.forward": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_gif.GIFSmoothing.__init__": [[17, 21], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__init__"], ["", "def", "__init__", "(", "self", ",", "r", ",", "eps", ")", ":", "\n", "        ", "super", "(", "GIFSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_gif.GIFSmoothing.process": [[22, 24], ["photo_gif.GIFSmoothing.process_opencv"], "methods", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_gif.GIFSmoothing.process_opencv"], ["", "def", "process", "(", "self", ",", "initImg", ",", "contentImg", ")", ":", "\n", "        ", "return", "self", ".", "process_opencv", "(", "initImg", ",", "contentImg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_gif.GIFSmoothing.process_opencv": [[25, 46], ["cv2.ximgproc.guidedFilter", "cv2.cvtColor", "PIL.Image.fromarray", "type", "cv2.imread", "[].copy", "type", "cv2.imread", "[].copy", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "process_opencv", "(", "self", ",", "initImg", ",", "contentImg", ")", ":", "\n", "        ", "'''\n        :param initImg: intermediate output. Either image path or PIL Image\n        :param contentImg: content image output. Either path or PIL Image\n        :return: stylized output image. PIL Image\n        '''", "\n", "if", "type", "(", "initImg", ")", "==", "str", ":", "\n", "            ", "init_img", "=", "cv2", ".", "imread", "(", "initImg", ")", "\n", "init_img", "=", "init_img", "[", "2", ":", "-", "2", ",", "2", ":", "-", "2", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "init_img", "=", "np", ".", "array", "(", "initImg", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "\n", "", "if", "type", "(", "contentImg", ")", "==", "str", ":", "\n", "            ", "cont_img", "=", "cv2", ".", "imread", "(", "contentImg", ")", "\n", "", "else", ":", "\n", "            ", "cont_img", "=", "np", ".", "array", "(", "contentImg", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "\n", "", "output_img", "=", "guidedFilter", "(", "guide", "=", "cont_img", ",", "src", "=", "init_img", ",", "radius", "=", "self", ".", "r", ",", "eps", "=", "self", ".", "eps", ")", "\n", "output_img", "=", "cv2", ".", "cvtColor", "(", "output_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "output_img", "=", "Image", ".", "fromarray", "(", "output_img", ")", "\n", "return", "output_img", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_smooth.Propagator.__init__": [[16, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "beta", "=", "0.9999", ")", ":", "\n", "        ", "super", "(", "Propagator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_smooth.Propagator.process": [[20, 63], ["scipy.misc.imresize", "scipy.misc.imresize", "scipy.misc.imresize", "scipy.misc.imresize", "scipy.misc.imresize", "scipy.misc.imresize", "scipy.misc.imresize", "scipy.misc.imresize", "scipy.misc.imresize", "photo_smooth.Propagator.__replication_padding", "photo_smooth.Propagator.__replication_padding", "numpy.reshape", "photo_smooth.Propagator.__compute_laplacian", "W.tocsc.tocsc.tocsc", "W.tocsc.tocsc.sum", "numpy.sqrt", "dd.A.squeeze.A.squeeze.A.squeeze", "scipy.sparse.csc_matrix", "scipy.sparse.csc_matrix", "scipy.sparse.csc_matrix", "scipy.sparse.csc_matrix", "scipy.sparse.csc_matrix", "scipy.sparse.csc_matrix", "scipy.sparse.csc_matrix", "scipy.sparse.csc_matrix", "scipy.sparse.csc_matrix", "scipy.sparse.csc_matrix.dot().dot", "scipy.sparse.csc_matrix.dot().dot", "scipy.sparse.csc_matrix.dot().dot", "A.tocsc.tocsc.tocsc", "scipy.sparse.linalg.factorized", "scipy.sparse.linalg.factorized", "scipy.sparse.linalg.factorized", "scipy.sparse.linalg.factorized", "scipy.sparse.linalg.factorized", "scipy.sparse.linalg.factorized", "scipy.sparse.linalg.factorized", "scipy.sparse.linalg.factorized", "scipy.sparse.linalg.factorized", "numpy.zeros", "scipy.sparse.linalg.factorized.", "scipy.sparse.linalg.factorized.", "scipy.sparse.linalg.factorized.", "scipy.sparse.linalg.factorized.", "scipy.sparse.linalg.factorized.", "scipy.sparse.linalg.factorized.", "scipy.sparse.linalg.factorized.", "scipy.sparse.linalg.factorized.", "scipy.sparse.linalg.factorized.", "V.reshape.reshape.reshape", "PIL.Image.fromarray", "type", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "contentImg.copy", "type", "contentImg.copy.astype", "numpy.power", "scipy.sparse.identity", "scipy.sparse.identity", "scipy.sparse.identity", "scipy.sparse.identity", "scipy.sparse.identity", "scipy.sparse.identity", "scipy.sparse.identity", "scipy.sparse.identity", "scipy.sparse.identity", "numpy.uint8", "scipy.misc.imread().astype", "scipy.misc.imread().astype", "scipy.misc.imread().astype", "scipy.misc.imread().astype", "scipy.misc.imread().astype", "scipy.misc.imread().astype", "scipy.misc.imread().astype", "scipy.misc.imread().astype", "scipy.misc.imread().astype", "scipy.asarray().astype", "scipy.asarray().astype", "scipy.asarray().astype", "scipy.asarray().astype", "scipy.asarray().astype", "scipy.asarray().astype", "scipy.asarray().astype", "scipy.asarray().astype", "scipy.asarray().astype", "scipy.sparse.csc_matrix.dot", "scipy.sparse.csc_matrix.dot", "scipy.sparse.csc_matrix.dot", "numpy.clip", "int", "int", "int", "int", "numpy.arange", "numpy.arange", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.asarray", "scipy.asarray", "scipy.asarray", "scipy.asarray", "scipy.asarray", "scipy.asarray", "scipy.asarray", "scipy.asarray", "scipy.asarray"], "methods", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_smooth.Propagator.__replication_padding", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_smooth.Propagator.__replication_padding", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_smooth.Propagator.__compute_laplacian"], ["", "def", "process", "(", "self", ",", "initImg", ",", "contentImg", ")", ":", "\n", "\n", "        ", "if", "type", "(", "contentImg", ")", "==", "str", ":", "\n", "            ", "content", "=", "scipy", ".", "misc", ".", "imread", "(", "contentImg", ",", "mode", "=", "'RGB'", ")", "\n", "", "else", ":", "\n", "            ", "content", "=", "contentImg", ".", "copy", "(", ")", "\n", "# content = scipy.misc.imread(contentImg, mode='RGB')", "\n", "\n", "", "if", "type", "(", "initImg", ")", "==", "str", ":", "\n", "            ", "B", "=", "scipy", ".", "misc", ".", "imread", "(", "initImg", ",", "mode", "=", "'RGB'", ")", ".", "astype", "(", "np", ".", "float64", ")", "/", "255", "\n", "", "else", ":", "\n", "            ", "B", "=", "scipy", ".", "asarray", "(", "initImg", ")", ".", "astype", "(", "np", ".", "float64", ")", "/", "255", "\n", "# B = self.", "\n", "# B = scipy.misc.imread(initImg, mode='RGB').astype(np.float64)/255", "\n", "", "h1", ",", "w1", ",", "k", "=", "B", ".", "shape", "\n", "h", "=", "h1", "-", "4", "\n", "w", "=", "w1", "-", "4", "\n", "B", "=", "B", "[", "int", "(", "(", "h1", "-", "h", ")", "/", "2", ")", ":", "int", "(", "(", "h1", "-", "h", ")", "/", "2", "+", "h", ")", ",", "int", "(", "(", "w1", "-", "w", ")", "/", "2", ")", ":", "int", "(", "(", "w1", "-", "w", ")", "/", "2", "+", "w", ")", ",", ":", "]", "\n", "content", "=", "scipy", ".", "misc", ".", "imresize", "(", "content", ",", "(", "h", ",", "w", ")", ")", "\n", "B", "=", "self", ".", "__replication_padding", "(", "B", ",", "2", ")", "\n", "content", "=", "self", ".", "__replication_padding", "(", "content", ",", "2", ")", "\n", "content", "=", "content", ".", "astype", "(", "np", ".", "float64", ")", "/", "255", "\n", "B", "=", "np", ".", "reshape", "(", "B", ",", "(", "h1", "*", "w1", ",", "k", ")", ")", "\n", "W", "=", "self", ".", "__compute_laplacian", "(", "content", ")", "\n", "W", "=", "W", ".", "tocsc", "(", ")", "\n", "dd", "=", "W", ".", "sum", "(", "0", ")", "\n", "dd", "=", "np", ".", "sqrt", "(", "np", ".", "power", "(", "dd", ",", "-", "1", ")", ")", "\n", "dd", "=", "dd", ".", "A", ".", "squeeze", "(", ")", "\n", "D", "=", "scipy", ".", "sparse", ".", "csc_matrix", "(", "(", "dd", ",", "(", "np", ".", "arange", "(", "0", ",", "w1", "*", "h1", ")", ",", "np", ".", "arange", "(", "0", ",", "w1", "*", "h1", ")", ")", ")", ")", "# 0.026", "\n", "S", "=", "D", ".", "dot", "(", "W", ")", ".", "dot", "(", "D", ")", "\n", "A", "=", "scipy", ".", "sparse", ".", "identity", "(", "w1", "*", "h1", ")", "-", "self", ".", "beta", "*", "S", "\n", "A", "=", "A", ".", "tocsc", "(", ")", "\n", "solver", "=", "scipy", ".", "sparse", ".", "linalg", ".", "factorized", "(", "A", ")", "\n", "V", "=", "np", ".", "zeros", "(", "(", "h1", "*", "w1", ",", "k", ")", ")", "\n", "V", "[", ":", ",", "0", "]", "=", "solver", "(", "B", "[", ":", ",", "0", "]", ")", "\n", "V", "[", ":", ",", "1", "]", "=", "solver", "(", "B", "[", ":", ",", "1", "]", ")", "\n", "V", "[", ":", ",", "2", "]", "=", "solver", "(", "B", "[", ":", ",", "2", "]", ")", "\n", "V", "=", "V", "*", "(", "1", "-", "self", ".", "beta", ")", "\n", "V", "=", "V", ".", "reshape", "(", "h1", ",", "w1", ",", "k", ")", "\n", "V", "=", "V", "[", "2", ":", "2", "+", "h", ",", "2", ":", "2", "+", "w", ",", ":", "]", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "np", ".", "clip", "(", "V", "*", "255.", ",", "0", ",", "255.", ")", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_smooth.Propagator.__compute_laplacian": [[68, 88], ["numpy.arange().reshape", "img.reshape", "photo_smooth.Propagator.__rolling_block", "win_inds.reshape.reshape.reshape", "numpy.mean", "numpy.linalg.inv", "numpy.einsum", "numpy.tile().ravel", "numpy.repeat().ravel", "vals.ravel", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix", "numpy.einsum", "numpy.arange", "numpy.einsum", "numpy.einsum", "numpy.tile", "numpy.repeat", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_smooth.Propagator.__rolling_block"], ["", "def", "__compute_laplacian", "(", "self", ",", "img", ",", "eps", "=", "10", "**", "(", "-", "7", ")", ",", "win_rad", "=", "1", ")", ":", "\n", "            ", "win_size", "=", "(", "win_rad", "*", "2", "+", "1", ")", "**", "2", "\n", "h", ",", "w", ",", "d", "=", "img", ".", "shape", "\n", "c_h", ",", "c_w", "=", "h", "-", "2", "*", "win_rad", ",", "w", "-", "2", "*", "win_rad", "\n", "win_diam", "=", "win_rad", "*", "2", "+", "1", "\n", "indsM", "=", "np", ".", "arange", "(", "h", "*", "w", ")", ".", "reshape", "(", "(", "h", ",", "w", ")", ")", "\n", "ravelImg", "=", "img", ".", "reshape", "(", "h", "*", "w", ",", "d", ")", "\n", "win_inds", "=", "self", ".", "__rolling_block", "(", "indsM", ",", "block", "=", "(", "win_diam", ",", "win_diam", ")", ")", "\n", "win_inds", "=", "win_inds", ".", "reshape", "(", "c_h", ",", "c_w", ",", "win_size", ")", "\n", "winI", "=", "ravelImg", "[", "win_inds", "]", "\n", "win_mu", "=", "np", ".", "mean", "(", "winI", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "win_var", "=", "np", ".", "einsum", "(", "'...ji,...jk ->...ik'", ",", "winI", ",", "winI", ")", "/", "win_size", "-", "np", ".", "einsum", "(", "'...ji,...jk ->...ik'", ",", "win_mu", ",", "win_mu", ")", "\n", "inv", "=", "np", ".", "linalg", ".", "inv", "(", "win_var", "+", "(", "eps", "/", "win_size", ")", "*", "np", ".", "eye", "(", "3", ")", ")", "\n", "X", "=", "np", ".", "einsum", "(", "'...ij,...jk->...ik'", ",", "winI", "-", "win_mu", ",", "inv", ")", "\n", "vals", "=", "(", "1", "/", "win_size", ")", "*", "(", "1", "+", "np", ".", "einsum", "(", "'...ij,...kj->...ik'", ",", "X", ",", "winI", "-", "win_mu", ")", ")", "\n", "nz_indsCol", "=", "np", ".", "tile", "(", "win_inds", ",", "win_size", ")", ".", "ravel", "(", ")", "\n", "nz_indsRow", "=", "np", ".", "repeat", "(", "win_inds", ",", "win_size", ")", ".", "ravel", "(", ")", "\n", "nz_indsVal", "=", "vals", ".", "ravel", "(", ")", "\n", "L", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "nz_indsVal", ",", "(", "nz_indsRow", ",", "nz_indsCol", ")", ")", ",", "shape", "=", "(", "h", "*", "w", ",", "h", "*", "w", ")", ")", "\n", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_smooth.Propagator.__replication_padding": [[89, 95], ["numpy.zeros", "range", "numpy.pad"], "methods", ["None"], ["", "def", "__replication_padding", "(", "self", ",", "arr", ",", "pad", ")", ":", "\n", "            ", "h", ",", "w", ",", "c", "=", "arr", ".", "shape", "\n", "ans", "=", "np", ".", "zeros", "(", "(", "h", "+", "pad", "*", "2", ",", "w", "+", "pad", "*", "2", ",", "c", ")", ")", "\n", "for", "i", "in", "range", "(", "c", ")", ":", "\n", "                    ", "ans", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "pad", "(", "arr", "[", ":", ",", ":", ",", "i", "]", ",", "pad_width", "=", "(", "pad", ",", "pad", ")", ",", "mode", "=", "'edge'", ")", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_smooth.Propagator.__rolling_block": [[96, 100], ["numpy.lib.stride_tricks.as_strided"], "methods", ["None"], ["", "def", "__rolling_block", "(", "self", ",", "A", ",", "block", "=", "(", "3", ",", "3", ")", ")", ":", "\n", "        ", "shape", "=", "(", "A", ".", "shape", "[", "0", "]", "-", "block", "[", "0", "]", "+", "1", ",", "A", ".", "shape", "[", "1", "]", "-", "block", "[", "1", "]", "+", "1", ")", "+", "block", "\n", "strides", "=", "(", "A", ".", "strides", "[", "0", "]", ",", "A", ".", "strides", "[", "1", "]", ")", "+", "A", ".", "strides", "\n", "return", "as_strided", "(", "A", ",", "shape", "=", "shape", ",", "strides", "=", "strides", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.demo_with_ade20k_ssn.segment_this_img": [[83, 115], ["scipy.misc.imread", "dict", "scipy.misc.imread.copy", "segmentation.dataset.round2nearest_multiple", "segmentation.dataset.round2nearest_multiple", "cv2.resize", "torch.unsqueeze.astype", "torch.unsqueeze.transpose", "transform", "torch.unsqueeze", "img_resized_list.append", "x.contiguous", "torch.no_grad", "torch.zeros", "torch.max", "lib.utils.as_numpy", "float", "int", "int", "scipy.misc.imread.copy", "torch.from_numpy", "dict", "timg.cuda", "lib.nn.async_copy_to", "segmentation_module", "lib.utils.as_numpy.squeeze", "min", "segmentation_module.cpu", "len"], "function", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.transform"], ["", "def", "segment_this_img", "(", "f", ")", ":", "\n", "    ", "img", "=", "imread", "(", "f", ",", "mode", "=", "'RGB'", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# BGR to RGB!!!", "\n", "ori_height", ",", "ori_width", ",", "_", "=", "img", ".", "shape", "\n", "img_resized_list", "=", "[", "]", "\n", "for", "this_short_size", "in", "args", ".", "imgSize", ":", "\n", "        ", "scale", "=", "this_short_size", "/", "float", "(", "min", "(", "ori_height", ",", "ori_width", ")", ")", "\n", "target_height", ",", "target_width", "=", "int", "(", "ori_height", "*", "scale", ")", ",", "int", "(", "ori_width", "*", "scale", ")", "\n", "target_height", "=", "round2nearest_multiple", "(", "target_height", ",", "args", ".", "padding_constant", ")", "\n", "target_width", "=", "round2nearest_multiple", "(", "target_width", ",", "args", ".", "padding_constant", ")", "\n", "img_resized", "=", "cv2", ".", "resize", "(", "img", ".", "copy", "(", ")", ",", "(", "target_width", ",", "target_height", ")", ")", "\n", "img_resized", "=", "img_resized", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img_resized", "=", "img_resized", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "img_resized", "=", "transform", "(", "torch", ".", "from_numpy", "(", "img_resized", ")", ")", "\n", "img_resized", "=", "torch", ".", "unsqueeze", "(", "img_resized", ",", "0", ")", "\n", "img_resized_list", ".", "append", "(", "img_resized", ")", "\n", "", "input", "=", "dict", "(", ")", "\n", "input", "[", "'img_ori'", "]", "=", "img", ".", "copy", "(", ")", "\n", "input", "[", "'img_data'", "]", "=", "[", "x", ".", "contiguous", "(", ")", "for", "x", "in", "img_resized_list", "]", "\n", "segSize", "=", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "pred", "=", "torch", ".", "zeros", "(", "1", ",", "args", ".", "num_class", ",", "segSize", "[", "0", "]", ",", "segSize", "[", "1", "]", ")", "\n", "for", "timg", "in", "img_resized_list", ":", "\n", "            ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", "[", "'img_data'", "]", "=", "timg", ".", "cuda", "(", ")", "\n", "feed_dict", "=", "async_copy_to", "(", "feed_dict", ",", "args", ".", "gpu_id", ")", "\n", "# forward pass", "\n", "pred_tmp", "=", "segmentation_module", "(", "feed_dict", ",", "segSize", "=", "segSize", ")", "\n", "pred", "=", "pred", "+", "pred_tmp", ".", "cpu", "(", ")", "/", "len", "(", "args", ".", "imgSize", ")", "\n", "", "_", ",", "preds", "=", "torch", ".", "max", "(", "pred", ",", "dim", "=", "1", ")", "\n", "preds", "=", "as_numpy", "(", "preds", ".", "squeeze", "(", "0", ")", ")", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.converter.weight_assign": [[11, 15], ["maps.items", "torch.Parameter", "torch.Parameter", "getattr", "lua.get().weight.float", "getattr", "lua.get().bias.float", "lua.get", "lua.get"], "function", ["None"], ["def", "weight_assign", "(", "lua", ",", "pth", ",", "maps", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "maps", ".", "items", "(", ")", ":", "\n", "        ", "getattr", "(", "pth", ",", "k", ")", ".", "weight", "=", "nn", ".", "Parameter", "(", "lua", ".", "get", "(", "v", ")", ".", "weight", ".", "float", "(", ")", ")", "\n", "getattr", "(", "pth", ",", "k", ")", ".", "bias", "=", "nn", ".", "Parameter", "(", "lua", ".", "get", "(", "v", ")", ".", "bias", ".", "float", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.converter.photo_wct_loader": [[17, 26], ["p_wct.e1.load_state_dict", "p_wct.d1.load_state_dict", "p_wct.e2.load_state_dict", "p_wct.d2.load_state_dict", "p_wct.e3.load_state_dict", "p_wct.d3.load_state_dict", "p_wct.e4.load_state_dict", "p_wct.d4.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "", "def", "photo_wct_loader", "(", "p_wct", ")", ":", "\n", "    ", "p_wct", ".", "e1", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'pth_models/vgg_normalised_conv1.pth'", ")", ")", "\n", "p_wct", ".", "d1", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'pth_models/feature_invertor_conv1.pth'", ")", ")", "\n", "p_wct", ".", "e2", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'pth_models/vgg_normalised_conv2.pth'", ")", ")", "\n", "p_wct", ".", "d2", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'pth_models/feature_invertor_conv2.pth'", ")", ")", "\n", "p_wct", ".", "e3", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'pth_models/vgg_normalised_conv3.pth'", ")", ")", "\n", "p_wct", ".", "d3", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'pth_models/feature_invertor_conv3.pth'", ")", ")", "\n", "p_wct", ".", "e4", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'pth_models/vgg_normalised_conv4.pth'", ")", ")", "\n", "p_wct", ".", "d4", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'pth_models/feature_invertor_conv4.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.download_models.download_file_from_google_drive": [[4, 17], ["requests.Session", "requests.Session.get", "download_models.get_confirm_token", "download_models.save_response_content", "requests.Session.get"], "function", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.download_models.get_confirm_token", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.download_models.save_response_content"], ["def", "download_file_from_google_drive", "(", "id", ",", "destination", ")", ":", "\n", "    ", "URL", "=", "\"https://docs.google.com/uc?export=download\"", "\n", "\n", "session", "=", "requests", ".", "Session", "(", ")", "\n", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "{", "'id'", ":", "id", "}", ",", "stream", "=", "True", ")", "\n", "token", "=", "get_confirm_token", "(", "response", ")", "\n", "\n", "if", "token", ":", "\n", "        ", "params", "=", "{", "'id'", ":", "id", ",", "'confirm'", ":", "token", "}", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "\n", "", "save_response_content", "(", "response", ",", "destination", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.download_models.get_confirm_token": [[18, 24], ["response.cookies.items", "key.startswith"], "function", ["None"], ["", "def", "get_confirm_token", "(", "response", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'download_warning'", ")", ":", "\n", "            ", "return", "value", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.download_models.save_response_content": [[25, 32], ["open", "response.iter_content", "f.write"], "function", ["None"], ["", "def", "save_response_content", "(", "response", ",", "destination", ")", ":", "\n", "    ", "CHUNK_SIZE", "=", "32768", "\n", "\n", "with", "open", "(", "destination", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "response", ".", "iter_content", "(", "CHUNK_SIZE", ")", ":", "\n", "            ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization_ade20k_ssn.SegReMapping.__init__": [[44, 47], ["numpy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mapping_name", ",", "min_ratio", "=", "0.02", ")", ":", "\n", "        ", "self", ".", "label_mapping", "=", "np", ".", "load", "(", "mapping_name", ")", "\n", "self", ".", "min_ratio", "=", "min_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization_ade20k_ssn.SegReMapping.cross_remapping": [[48, 93], ["numpy.unique", "numpy.unique", "cont_seg.copy", "enumerate", "numpy.unique", "styl_seg.copy", "enumerate", "cont_label_info.append", "new_cont_label_info.append", "style_label_info.append", "new_style_label_info.append", "set", "set", "cont_label_info.index", "range", "cont_label_info.append", "set", "set", "set", "set", "style_label_info.index", "range"], "methods", ["None"], ["", "def", "cross_remapping", "(", "self", ",", "cont_seg", ",", "styl_seg", ")", ":", "\n", "        ", "cont_label_info", "=", "[", "]", "\n", "new_cont_label_info", "=", "[", "]", "\n", "for", "label", "in", "np", ".", "unique", "(", "cont_seg", ")", ":", "\n", "            ", "cont_label_info", ".", "append", "(", "label", ")", "\n", "new_cont_label_info", ".", "append", "(", "label", ")", "\n", "\n", "", "style_label_info", "=", "[", "]", "\n", "new_style_label_info", "=", "[", "]", "\n", "for", "label", "in", "np", ".", "unique", "(", "styl_seg", ")", ":", "\n", "            ", "style_label_info", ".", "append", "(", "label", ")", "\n", "new_style_label_info", ".", "append", "(", "label", ")", "\n", "\n", "", "cont_set_diff", "=", "set", "(", "cont_label_info", ")", "-", "set", "(", "style_label_info", ")", "\n", "# Find the labels that are not covered by the style", "\n", "# Assign them to the best matched region in the style region", "\n", "for", "s", "in", "cont_set_diff", ":", "\n", "            ", "cont_label_index", "=", "cont_label_info", ".", "index", "(", "s", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "label_mapping", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "new_label", "=", "self", ".", "label_mapping", "[", "j", ",", "s", "]", "\n", "if", "new_label", "in", "style_label_info", ":", "\n", "                    ", "new_cont_label_info", "[", "cont_label_index", "]", "=", "new_label", "\n", "break", "\n", "", "", "", "new_cont_seg", "=", "cont_seg", ".", "copy", "(", ")", "\n", "for", "i", ",", "current_label", "in", "enumerate", "(", "cont_label_info", ")", ":", "\n", "            ", "new_cont_seg", "[", "(", "cont_seg", "==", "current_label", ")", "]", "=", "new_cont_label_info", "[", "i", "]", "\n", "\n", "", "cont_label_info", "=", "[", "]", "\n", "for", "label", "in", "np", ".", "unique", "(", "new_cont_seg", ")", ":", "\n", "            ", "cont_label_info", ".", "append", "(", "label", ")", "\n", "", "styl_set_diff", "=", "set", "(", "style_label_info", ")", "-", "set", "(", "cont_label_info", ")", "\n", "valid_styl_set", "=", "set", "(", "style_label_info", ")", "-", "set", "(", "styl_set_diff", ")", "\n", "for", "s", "in", "styl_set_diff", ":", "\n", "            ", "style_label_index", "=", "style_label_info", ".", "index", "(", "s", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "label_mapping", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "new_label", "=", "self", ".", "label_mapping", "[", "j", ",", "s", "]", "\n", "if", "new_label", "in", "valid_styl_set", ":", "\n", "                    ", "new_style_label_info", "[", "style_label_index", "]", "=", "new_label", "\n", "break", "\n", "", "", "", "new_styl_seg", "=", "styl_seg", ".", "copy", "(", ")", "\n", "for", "i", ",", "current_label", "in", "enumerate", "(", "style_label_info", ")", ":", "\n", "# print(\"%d -> %d\" %(current_label,new_style_label_info[i]))", "\n", "            ", "new_styl_seg", "[", "(", "styl_seg", "==", "current_label", ")", "]", "=", "new_style_label_info", "[", "i", "]", "\n", "\n", "", "return", "new_cont_seg", ",", "new_styl_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization_ade20k_ssn.SegReMapping.self_remapping": [[94, 122], ["seg.copy", "numpy.unique", "enumerate", "enumerate", "label_info.append", "new_label_info.append", "ratio_info.append", "numpy.sum", "range", "numpy.float32", "label_info.index"], "methods", ["None"], ["", "def", "self_remapping", "(", "self", ",", "seg", ")", ":", "\n", "        ", "init_ratio", "=", "self", ".", "min_ratio", "\n", "# Assign label with small portions to label with large portion", "\n", "new_seg", "=", "seg", ".", "copy", "(", ")", "\n", "[", "h", ",", "w", "]", "=", "new_seg", ".", "shape", "\n", "n_pixels", "=", "h", "*", "w", "\n", "# First scan through what are the available labels and their sizes", "\n", "label_info", "=", "[", "]", "\n", "ratio_info", "=", "[", "]", "\n", "new_label_info", "=", "[", "]", "\n", "for", "label", "in", "np", ".", "unique", "(", "seg", ")", ":", "\n", "            ", "ratio", "=", "np", ".", "sum", "(", "np", ".", "float32", "(", "(", "seg", "==", "label", ")", ")", "[", ":", "]", ")", "/", "n_pixels", "\n", "label_info", ".", "append", "(", "label", ")", "\n", "new_label_info", ".", "append", "(", "label", ")", "\n", "ratio_info", ".", "append", "(", "ratio", ")", "\n", "", "for", "i", ",", "current_label", "in", "enumerate", "(", "label_info", ")", ":", "\n", "            ", "if", "ratio_info", "[", "i", "]", "<", "init_ratio", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "label_mapping", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "new_label", "=", "self", ".", "label_mapping", "[", "j", ",", "current_label", "]", "\n", "if", "new_label", "in", "label_info", ":", "\n", "                        ", "index", "=", "label_info", ".", "index", "(", "new_label", ")", "\n", "if", "index", ">=", "0", ":", "\n", "                            ", "if", "ratio_info", "[", "index", "]", ">=", "init_ratio", ":", "\n", "                                ", "new_label_info", "[", "i", "]", "=", "new_label", "\n", "break", "\n", "", "", "", "", "", "", "for", "i", ",", "current_label", "in", "enumerate", "(", "label_info", ")", ":", "\n", "            ", "new_seg", "[", "(", "seg", "==", "current_label", ")", "]", "=", "new_label_info", "[", "i", "]", "\n", "", "return", "new_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization_ade20k_ssn.overlay": [[20, 32], ["cv2.Canny", "cv2.dilate", "range", "numpy.ones"], "function", ["None"], ["def", "overlay", "(", "img", ",", "pred_color", ",", "blend_factor", "=", "0.4", ")", ":", "\n", "    ", "import", "cv2", "\n", "edges", "=", "cv2", ".", "Canny", "(", "pred_color", ",", "20", ",", "40", ")", "\n", "edges", "=", "cv2", ".", "dilate", "(", "edges", ",", "np", ".", "ones", "(", "(", "5", ",", "5", ")", ",", "np", ".", "uint8", ")", ",", "iterations", "=", "1", ")", "\n", "out", "=", "(", "1", "-", "blend_factor", ")", "*", "img", "+", "blend_factor", "*", "pred_color", "\n", "edge_pixels", "=", "(", "edges", "==", "255", ")", "\n", "new_color", "=", "[", "0", ",", "0", ",", "255", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "timg", "=", "out", "[", ":", ",", ":", ",", "i", "]", "\n", "timg", "[", "edge_pixels", "]", "=", "new_color", "[", "i", "]", "\n", "out", "[", ":", ",", ":", ",", "i", "]", "=", "timg", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization_ade20k_ssn.visualize_result": [[34, 41], ["label_map.astype.astype", "numpy.zeros", "numpy.unique", "numpy.tile"], "function", ["None"], ["", "def", "visualize_result", "(", "label_map", ")", ":", "\n", "    ", "label_map", "=", "label_map", ".", "astype", "(", "'int'", ")", "\n", "label_map_rgb", "=", "np", ".", "zeros", "(", "(", "label_map", ".", "shape", "[", "0", "]", ",", "label_map", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "label", "in", "np", ".", "unique", "(", "label_map", ")", ":", "\n", "        ", "label_map_rgb", "+=", "(", "label_map", "==", "label", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "np", ".", "tile", "(", "colors", "[", "label", "]", ",", "(", "label_map", ".", "shape", "[", "0", "]", ",", "label_map", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "", "return", "label_map_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization_ade20k_ssn.stylization": [[124, 213], ["torch.no_grad", "torch.no_grad", "PIL.Image.open().convert", "PIL.Image.open().convert", "process_stylization.memory_limit_image_resize", "process_stylization.memory_limit_image_resize", "cont_img.cuda.copy", "styl_img.cuda.copy", "numpy.asarray", "numpy.asarray", "label_remapping.self_remapping", "label_remapping.self_remapping", "label_remapping.cross_remapping", "PIL.Image.open", "PIL.Image.open", "Image.open.resize", "Image.open.resize", "cont_img.cuda.cuda", "styl_img.cuda.cuda", "stylization_module.cuda", "process_stylization_ade20k_ssn.visualize_result", "process_stylization_ade20k_ssn.visualize_result", "process_stylization_ade20k_ssn.overlay", "process_stylization_ade20k_ssn.overlay", "cv2.imwrite", "cv2.imwrite", "torchvision.save_image", "smooth_filter.smooth_filter.save", "smooth_filter.smooth_filter.save", "torchvision.make_grid", "utils.make_grid.mul().clamp().byte().permute().cpu().numpy", "PIL.Image.fromarray", "smooth_filter.smooth_filter.save", "PIL.Image.open", "PIL.Image.open", "cv2.imread", "cv2.imread", "process_stylization.Timer", "stylization_module.transform", "print", "torch.functional.upsample", "nn.functional.upsample.data.cpu().float", "process_stylization.Timer", "smoothing_module.process", "print", "process_stylization.Timer", "stylization_module.transform", "print", "torch.functional.upsample", "process_stylization.Timer", "smoothing_module.process", "torchvision.ToTensor", "torchvision.ToTensor", "process_stylization.Timer", "smooth_filter.smooth_filter", "utils.make_grid.mul().clamp().byte().permute().cpu", "process_stylization.Timer", "smooth_filter.smooth_filter", "nn.functional.upsample.data.cpu", "utils.make_grid.mul().clamp().byte().permute", "utils.make_grid.mul().clamp().byte", "utils.make_grid.mul().clamp", "utils.make_grid.mul"], "function", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.memory_limit_image_resize", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.memory_limit_image_resize", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization_ade20k_ssn.SegReMapping.self_remapping", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization_ade20k_ssn.SegReMapping.self_remapping", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization_ade20k_ssn.SegReMapping.cross_remapping", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization_ade20k_ssn.visualize_result", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization_ade20k_ssn.visualize_result", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization_ade20k_ssn.overlay", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization_ade20k_ssn.overlay", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.transform", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.ReMapping.process", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.transform", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.ReMapping.process", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.smooth_filter.smooth_filter", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.smooth_filter.smooth_filter"], ["", "", "def", "stylization", "(", "stylization_module", ",", "smoothing_module", ",", "content_image_path", ",", "style_image_path", ",", "content_seg_path", ",", "\n", "style_seg_path", ",", "output_image_path", ",", "\n", "cuda", ",", "save_intermediate", ",", "no_post", ",", "label_remapping", ",", "output_visualization", "=", "False", ")", ":", "\n", "# Load image", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "cont_img", "=", "Image", ".", "open", "(", "content_image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "styl_img", "=", "Image", ".", "open", "(", "style_image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "new_cw", ",", "new_ch", "=", "memory_limit_image_resize", "(", "cont_img", ")", "\n", "new_sw", ",", "new_sh", "=", "memory_limit_image_resize", "(", "styl_img", ")", "\n", "cont_pilimg", "=", "cont_img", ".", "copy", "(", ")", "\n", "styl_pilimg", "=", "styl_img", ".", "copy", "(", ")", "\n", "cw", "=", "cont_pilimg", ".", "width", "\n", "ch", "=", "cont_pilimg", ".", "height", "\n", "try", ":", "\n", "            ", "cont_seg", "=", "Image", ".", "open", "(", "content_seg_path", ")", "\n", "styl_seg", "=", "Image", ".", "open", "(", "style_seg_path", ")", "\n", "cont_seg", ".", "resize", "(", "(", "new_cw", ",", "new_ch", ")", ",", "Image", ".", "NEAREST", ")", "\n", "styl_seg", ".", "resize", "(", "(", "new_sw", ",", "new_sh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "except", ":", "\n", "            ", "cont_seg", "=", "[", "]", "\n", "styl_seg", "=", "[", "]", "\n", "\n", "", "cont_img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "cont_img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "styl_img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "styl_img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "cuda", ":", "\n", "            ", "cont_img", "=", "cont_img", ".", "cuda", "(", "0", ")", "\n", "styl_img", "=", "styl_img", ".", "cuda", "(", "0", ")", "\n", "stylization_module", ".", "cuda", "(", "0", ")", "\n", "\n", "# cont_img = Variable(cont_img, volatile=True)", "\n", "# styl_img = Variable(styl_img, volatile=True)", "\n", "\n", "", "cont_seg", "=", "np", ".", "asarray", "(", "cont_seg", ")", "\n", "styl_seg", "=", "np", ".", "asarray", "(", "styl_seg", ")", "\n", "\n", "cont_seg", "=", "label_remapping", ".", "self_remapping", "(", "cont_seg", ")", "\n", "styl_seg", "=", "label_remapping", ".", "self_remapping", "(", "styl_seg", ")", "\n", "cont_seg", ",", "styl_seg", "=", "label_remapping", ".", "cross_remapping", "(", "cont_seg", ",", "styl_seg", ")", "\n", "\n", "if", "output_visualization", ":", "\n", "            ", "import", "cv2", "\n", "cont_seg_vis", "=", "visualize_result", "(", "cont_seg", ")", "\n", "styl_seg_vis", "=", "visualize_result", "(", "styl_seg", ")", "\n", "cont_seg_vis", "=", "overlay", "(", "cv2", ".", "imread", "(", "content_image_path", ")", ",", "cont_seg_vis", ")", "\n", "styl_seg_vis", "=", "overlay", "(", "cv2", ".", "imread", "(", "style_image_path", ")", ",", "styl_seg_vis", ")", "\n", "cv2", ".", "imwrite", "(", "content_seg_path", "+", "'.visualization.jpg'", ",", "cont_seg_vis", ")", "\n", "cv2", ".", "imwrite", "(", "style_seg_path", "+", "'.visualization.jpg'", ",", "styl_seg_vis", ")", "\n", "\n", "", "if", "save_intermediate", ":", "\n", "            ", "with", "Timer", "(", "\"Elapsed time in stylization: %f\"", ")", ":", "\n", "                ", "stylized_img", "=", "stylization_module", ".", "transform", "(", "cont_img", ",", "styl_img", ",", "cont_seg", ",", "styl_seg", ")", "\n", "", "if", "ch", "!=", "new_ch", "or", "cw", "!=", "new_cw", ":", "\n", "                ", "print", "(", "\"De-resize image: (%d,%d)->(%d,%d)\"", "%", "(", "new_cw", ",", "new_ch", ",", "cw", ",", "ch", ")", ")", "\n", "stylized_img", "=", "nn", ".", "functional", ".", "upsample", "(", "stylized_img", ",", "size", "=", "(", "ch", ",", "cw", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "", "utils", ".", "save_image", "(", "stylized_img", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ",", "output_image_path", ",", "nrow", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "with", "Timer", "(", "\"Elapsed time in propagation: %f\"", ")", ":", "\n", "                ", "out_img", "=", "smoothing_module", ".", "process", "(", "output_image_path", ",", "content_image_path", ")", "\n", "", "out_img", ".", "save", "(", "output_image_path", ")", "\n", "\n", "if", "not", "cuda", ":", "\n", "                ", "print", "(", "\"NotImplemented: The CPU version of smooth filter has not been implemented currently.\"", ")", "\n", "return", "\n", "\n", "", "if", "no_post", "is", "False", ":", "\n", "                ", "with", "Timer", "(", "\"Elapsed time in post processing: %f\"", ")", ":", "\n", "                    ", "out_img", "=", "smooth_filter", "(", "output_image_path", ",", "content_image_path", ",", "f_radius", "=", "15", ",", "f_edge", "=", "1e-1", ")", "\n", "", "", "out_img", ".", "save", "(", "output_image_path", ")", "\n", "", "else", ":", "\n", "            ", "with", "Timer", "(", "\"Elapsed time in stylization: %f\"", ")", ":", "\n", "                ", "stylized_img", "=", "stylization_module", ".", "transform", "(", "cont_img", ",", "styl_img", ",", "cont_seg", ",", "styl_seg", ")", "\n", "", "if", "ch", "!=", "new_ch", "or", "cw", "!=", "new_cw", ":", "\n", "                ", "print", "(", "\"De-resize image: (%d,%d)->(%d,%d)\"", "%", "(", "new_cw", ",", "new_ch", ",", "cw", ",", "ch", ")", ")", "\n", "stylized_img", "=", "nn", ".", "functional", ".", "upsample", "(", "stylized_img", ",", "size", "=", "(", "ch", ",", "cw", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "", "grid", "=", "utils", ".", "make_grid", "(", "stylized_img", ".", "data", ",", "nrow", "=", "1", ",", "padding", "=", "0", ")", "\n", "ndarr", "=", "grid", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out_img", "=", "Image", ".", "fromarray", "(", "ndarr", ")", "\n", "\n", "with", "Timer", "(", "\"Elapsed time in propagation: %f\"", ")", ":", "\n", "                ", "out_img", "=", "smoothing_module", ".", "process", "(", "out_img", ",", "cont_pilimg", ")", "\n", "\n", "", "if", "no_post", "is", "False", ":", "\n", "                ", "with", "Timer", "(", "\"Elapsed time in post processing: %f\"", ")", ":", "\n", "                    ", "out_img", "=", "smooth_filter", "(", "out_img", ",", "cont_pilimg", ",", "f_radius", "=", "15", ",", "f_edge", "=", "1e-1", ")", "\n", "", "", "out_img", ".", "save", "(", "output_image_path", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.ReMapping.__init__": [[18, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "remapping", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.ReMapping.process": [[21, 26], ["seg.copy", "process_stylization.ReMapping.remapping.items"], "methods", ["None"], ["", "def", "process", "(", "self", ",", "seg", ")", ":", "\n", "        ", "new_seg", "=", "seg", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "remapping", ".", "items", "(", ")", ":", "\n", "            ", "new_seg", "[", "seg", "==", "k", "]", "=", "v", "\n", "", "return", "new_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.Timer.__init__": [[29, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "msg", "=", "msg", "\n", "self", ".", "start_time", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.Timer.__enter__": [[33, 35], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.Timer.__exit__": [[36, 38], ["print", "time.time"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "exc_tb", ")", ":", "\n", "        ", "print", "(", "self", ".", "msg", "%", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.memory_limit_image_resize": [[40, 58], ["print", "max", "min", "cont_img.thumbnail", "cont_img.thumbnail", "cont_img.thumbnail", "cont_img.thumbnail", "int", "int", "int", "int"], "function", ["None"], ["", "", "def", "memory_limit_image_resize", "(", "cont_img", ")", ":", "\n", "# prevent too small or too big images", "\n", "    ", "MINSIZE", "=", "256", "\n", "MAXSIZE", "=", "960", "\n", "orig_width", "=", "cont_img", ".", "width", "\n", "orig_height", "=", "cont_img", ".", "height", "\n", "if", "max", "(", "cont_img", ".", "width", ",", "cont_img", ".", "height", ")", "<", "MINSIZE", ":", "\n", "        ", "if", "cont_img", ".", "width", ">", "cont_img", ".", "height", ":", "\n", "            ", "cont_img", ".", "thumbnail", "(", "(", "int", "(", "cont_img", ".", "width", "*", "1.0", "/", "cont_img", ".", "height", "*", "MINSIZE", ")", ",", "MINSIZE", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "", "else", ":", "\n", "            ", "cont_img", ".", "thumbnail", "(", "(", "MINSIZE", ",", "int", "(", "cont_img", ".", "height", "*", "1.0", "/", "cont_img", ".", "width", "*", "MINSIZE", ")", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "", "", "if", "min", "(", "cont_img", ".", "width", ",", "cont_img", ".", "height", ")", ">", "MAXSIZE", ":", "\n", "        ", "if", "cont_img", ".", "width", ">", "cont_img", ".", "height", ":", "\n", "            ", "cont_img", ".", "thumbnail", "(", "(", "MAXSIZE", ",", "int", "(", "cont_img", ".", "height", "*", "1.0", "/", "cont_img", ".", "width", "*", "MAXSIZE", ")", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "", "else", ":", "\n", "            ", "cont_img", ".", "thumbnail", "(", "(", "(", "int", "(", "cont_img", ".", "width", "*", "1.0", "/", "cont_img", ".", "height", "*", "MAXSIZE", ")", ",", "MAXSIZE", ")", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "", "", "print", "(", "\"Resize image: (%d,%d)->(%d,%d)\"", "%", "(", "orig_width", ",", "orig_height", ",", "cont_img", ".", "width", ",", "cont_img", ".", "height", ")", ")", "\n", "return", "cont_img", ".", "width", ",", "cont_img", ".", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.stylization": [[60, 137], ["torch.no_grad", "torch.no_grad", "PIL.Image.open().convert", "PIL.Image.open().convert", "process_stylization.memory_limit_image_resize", "process_stylization.memory_limit_image_resize", "cont_img.cuda.copy", "numpy.asarray", "numpy.asarray", "PIL.Image.open", "PIL.Image.open", "cont_seg_remapping.process.resize", "styl_seg_remapping.process.resize", "cont_img.cuda.cuda", "styl_img.cuda.cuda", "stylization_module.cuda", "cont_seg_remapping.process", "styl_seg_remapping.process", "torchvision.save_image", "smooth_filter.smooth_filter.save", "smooth_filter.smooth_filter.save", "torchvision.make_grid", "utils.make_grid.mul().clamp().byte().permute().cpu().numpy", "PIL.Image.fromarray", "smooth_filter.smooth_filter.save", "PIL.Image.open", "PIL.Image.open", "process_stylization.Timer", "stylization_module.transform", "print", "torch.functional.upsample", "nn.functional.upsample.data.cpu().float", "process_stylization.Timer", "smoothing_module.process", "print", "process_stylization.Timer", "stylization_module.transform", "print", "torch.functional.upsample", "process_stylization.Timer", "smoothing_module.process", "torchvision.ToTensor", "torchvision.ToTensor", "process_stylization.Timer", "smooth_filter.smooth_filter", "utils.make_grid.mul().clamp().byte().permute().cpu", "process_stylization.Timer", "smooth_filter.smooth_filter", "nn.functional.upsample.data.cpu", "utils.make_grid.mul().clamp().byte().permute", "utils.make_grid.mul().clamp().byte", "utils.make_grid.mul().clamp", "utils.make_grid.mul"], "function", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.memory_limit_image_resize", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.memory_limit_image_resize", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.ReMapping.process", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.ReMapping.process", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.transform", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.ReMapping.process", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.transform", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.process_stylization.ReMapping.process", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.smooth_filter.smooth_filter", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.smooth_filter.smooth_filter"], ["", "def", "stylization", "(", "stylization_module", ",", "smoothing_module", ",", "content_image_path", ",", "style_image_path", ",", "content_seg_path", ",", "style_seg_path", ",", "output_image_path", ",", "\n", "cuda", ",", "save_intermediate", ",", "no_post", ",", "cont_seg_remapping", "=", "None", ",", "styl_seg_remapping", "=", "None", ")", ":", "\n", "# Load image", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "cont_img", "=", "Image", ".", "open", "(", "content_image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "styl_img", "=", "Image", ".", "open", "(", "style_image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "new_cw", ",", "new_ch", "=", "memory_limit_image_resize", "(", "cont_img", ")", "\n", "new_sw", ",", "new_sh", "=", "memory_limit_image_resize", "(", "styl_img", ")", "\n", "cont_pilimg", "=", "cont_img", ".", "copy", "(", ")", "\n", "cw", "=", "cont_pilimg", ".", "width", "\n", "ch", "=", "cont_pilimg", ".", "height", "\n", "try", ":", "\n", "            ", "cont_seg", "=", "Image", ".", "open", "(", "content_seg_path", ")", "\n", "styl_seg", "=", "Image", ".", "open", "(", "style_seg_path", ")", "\n", "cont_seg", ".", "resize", "(", "(", "new_cw", ",", "new_ch", ")", ",", "Image", ".", "NEAREST", ")", "\n", "styl_seg", ".", "resize", "(", "(", "new_sw", ",", "new_sh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "except", ":", "\n", "            ", "cont_seg", "=", "[", "]", "\n", "styl_seg", "=", "[", "]", "\n", "\n", "", "cont_img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "cont_img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "styl_img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "styl_img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "cuda", ":", "\n", "            ", "cont_img", "=", "cont_img", ".", "cuda", "(", "0", ")", "\n", "styl_img", "=", "styl_img", ".", "cuda", "(", "0", ")", "\n", "stylization_module", ".", "cuda", "(", "0", ")", "\n", "\n", "# cont_img = Variable(cont_img, volatile=True)", "\n", "# styl_img = Variable(styl_img, volatile=True)", "\n", "\n", "", "cont_seg", "=", "np", ".", "asarray", "(", "cont_seg", ")", "\n", "styl_seg", "=", "np", ".", "asarray", "(", "styl_seg", ")", "\n", "if", "cont_seg_remapping", "is", "not", "None", ":", "\n", "            ", "cont_seg", "=", "cont_seg_remapping", ".", "process", "(", "cont_seg", ")", "\n", "", "if", "styl_seg_remapping", "is", "not", "None", ":", "\n", "            ", "styl_seg", "=", "styl_seg_remapping", ".", "process", "(", "styl_seg", ")", "\n", "\n", "", "if", "save_intermediate", ":", "\n", "            ", "with", "Timer", "(", "\"Elapsed time in stylization: %f\"", ")", ":", "\n", "                ", "stylized_img", "=", "stylization_module", ".", "transform", "(", "cont_img", ",", "styl_img", ",", "cont_seg", ",", "styl_seg", ")", "\n", "", "if", "ch", "!=", "new_ch", "or", "cw", "!=", "new_cw", ":", "\n", "                ", "print", "(", "\"De-resize image: (%d,%d)->(%d,%d)\"", "%", "(", "new_cw", ",", "new_ch", ",", "cw", ",", "ch", ")", ")", "\n", "stylized_img", "=", "nn", ".", "functional", ".", "upsample", "(", "stylized_img", ",", "size", "=", "(", "ch", ",", "cw", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "", "utils", ".", "save_image", "(", "stylized_img", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ",", "output_image_path", ",", "nrow", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "with", "Timer", "(", "\"Elapsed time in propagation: %f\"", ")", ":", "\n", "                ", "out_img", "=", "smoothing_module", ".", "process", "(", "output_image_path", ",", "content_image_path", ")", "\n", "", "out_img", ".", "save", "(", "output_image_path", ")", "\n", "\n", "if", "not", "cuda", ":", "\n", "                ", "print", "(", "\"NotImplemented: The CPU version of smooth filter has not been implemented currently.\"", ")", "\n", "return", "\n", "\n", "", "if", "no_post", "is", "False", ":", "\n", "                ", "with", "Timer", "(", "\"Elapsed time in post processing: %f\"", ")", ":", "\n", "                    ", "out_img", "=", "smooth_filter", "(", "output_image_path", ",", "content_image_path", ",", "f_radius", "=", "15", ",", "f_edge", "=", "1e-1", ")", "\n", "", "", "out_img", ".", "save", "(", "output_image_path", ")", "\n", "", "else", ":", "\n", "            ", "with", "Timer", "(", "\"Elapsed time in stylization: %f\"", ")", ":", "\n", "                ", "stylized_img", "=", "stylization_module", ".", "transform", "(", "cont_img", ",", "styl_img", ",", "cont_seg", ",", "styl_seg", ")", "\n", "", "if", "ch", "!=", "new_ch", "or", "cw", "!=", "new_cw", ":", "\n", "                ", "print", "(", "\"De-resize image: (%d,%d)->(%d,%d)\"", "%", "(", "new_cw", ",", "new_ch", ",", "cw", ",", "ch", ")", ")", "\n", "stylized_img", "=", "nn", ".", "functional", ".", "upsample", "(", "stylized_img", ",", "size", "=", "(", "ch", ",", "cw", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "", "grid", "=", "utils", ".", "make_grid", "(", "stylized_img", ".", "data", ",", "nrow", "=", "1", ",", "padding", "=", "0", ")", "\n", "ndarr", "=", "grid", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out_img", "=", "Image", ".", "fromarray", "(", "ndarr", ")", "\n", "\n", "with", "Timer", "(", "\"Elapsed time in propagation: %f\"", ")", ":", "\n", "                ", "out_img", "=", "smoothing_module", ".", "process", "(", "out_img", ",", "cont_pilimg", ")", "\n", "\n", "", "if", "no_post", "is", "False", ":", "\n", "                ", "with", "Timer", "(", "\"Elapsed time in post processing: %f\"", ")", ":", "\n", "                    ", "out_img", "=", "smooth_filter", "(", "out_img", ",", "cont_pilimg", ",", "f_radius", "=", "15", ",", "f_edge", "=", "1e-1", ")", "\n", "", "", "out_img", ".", "save", "(", "output_image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__init__": [[14, 24], ["torch.Module.__init__", "models.VGGEncoder", "models.VGGDecoder", "models.VGGEncoder", "models.VGGDecoder", "models.VGGEncoder", "models.VGGDecoder", "models.VGGEncoder", "models.VGGDecoder"], "methods", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PhotoWCT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "e1", "=", "VGGEncoder", "(", "1", ")", "\n", "self", ".", "d1", "=", "VGGDecoder", "(", "1", ")", "\n", "self", ".", "e2", "=", "VGGEncoder", "(", "2", ")", "\n", "self", ".", "d2", "=", "VGGDecoder", "(", "2", ")", "\n", "self", ".", "e3", "=", "VGGEncoder", "(", "3", ")", "\n", "self", ".", "d3", "=", "VGGDecoder", "(", "3", ")", "\n", "self", ".", "e4", "=", "VGGEncoder", "(", "4", ")", "\n", "self", ".", "d4", "=", "VGGDecoder", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.transform": [[25, 55], ["photo_wct.PhotoWCT.__compute_label_info", "photo_wct.PhotoWCT.e4.forward_multiple", "photo_wct.PhotoWCT.e4", "sF4.data.squeeze.data.squeeze.data.squeeze", "cF4.data.squeeze.data.squeeze.data.squeeze", "photo_wct.PhotoWCT.__feature_wct", "photo_wct.PhotoWCT.d4", "photo_wct.PhotoWCT.e3", "sF3.data.squeeze.data.squeeze.data.squeeze", "cF3.data.squeeze.data.squeeze.data.squeeze", "photo_wct.PhotoWCT.__feature_wct", "photo_wct.PhotoWCT.d3", "photo_wct.PhotoWCT.e2", "sF2.data.squeeze.data.squeeze.data.squeeze", "cF2.data.squeeze.data.squeeze.data.squeeze", "photo_wct.PhotoWCT.__feature_wct", "photo_wct.PhotoWCT.d2", "photo_wct.PhotoWCT.e1", "sF1.data.squeeze.data.squeeze.data.squeeze", "cF1.data.squeeze.data.squeeze.data.squeeze", "photo_wct.PhotoWCT.__feature_wct", "photo_wct.PhotoWCT.d1"], "methods", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__compute_label_info", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.models.VGGEncoder.forward_multiple", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__feature_wct", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__feature_wct", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__feature_wct", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__feature_wct"], ["", "def", "transform", "(", "self", ",", "cont_img", ",", "styl_img", ",", "cont_seg", ",", "styl_seg", ")", ":", "\n", "        ", "self", ".", "__compute_label_info", "(", "cont_seg", ",", "styl_seg", ")", "\n", "\n", "sF4", ",", "sF3", ",", "sF2", ",", "sF1", "=", "self", ".", "e4", ".", "forward_multiple", "(", "styl_img", ")", "\n", "\n", "cF4", ",", "cpool_idx", ",", "cpool1", ",", "cpool_idx2", ",", "cpool2", ",", "cpool_idx3", ",", "cpool3", "=", "self", ".", "e4", "(", "cont_img", ")", "\n", "sF4", "=", "sF4", ".", "data", ".", "squeeze", "(", "0", ")", "\n", "cF4", "=", "cF4", ".", "data", ".", "squeeze", "(", "0", ")", "\n", "# print(cont_seg)", "\n", "csF4", "=", "self", ".", "__feature_wct", "(", "cF4", ",", "sF4", ",", "cont_seg", ",", "styl_seg", ")", "\n", "Im4", "=", "self", ".", "d4", "(", "csF4", ",", "cpool_idx", ",", "cpool1", ",", "cpool_idx2", ",", "cpool2", ",", "cpool_idx3", ",", "cpool3", ")", "\n", "\n", "cF3", ",", "cpool_idx", ",", "cpool1", ",", "cpool_idx2", ",", "cpool2", "=", "self", ".", "e3", "(", "Im4", ")", "\n", "sF3", "=", "sF3", ".", "data", ".", "squeeze", "(", "0", ")", "\n", "cF3", "=", "cF3", ".", "data", ".", "squeeze", "(", "0", ")", "\n", "csF3", "=", "self", ".", "__feature_wct", "(", "cF3", ",", "sF3", ",", "cont_seg", ",", "styl_seg", ")", "\n", "Im3", "=", "self", ".", "d3", "(", "csF3", ",", "cpool_idx", ",", "cpool1", ",", "cpool_idx2", ",", "cpool2", ")", "\n", "\n", "cF2", ",", "cpool_idx", ",", "cpool", "=", "self", ".", "e2", "(", "Im3", ")", "\n", "sF2", "=", "sF2", ".", "data", ".", "squeeze", "(", "0", ")", "\n", "cF2", "=", "cF2", ".", "data", ".", "squeeze", "(", "0", ")", "\n", "csF2", "=", "self", ".", "__feature_wct", "(", "cF2", ",", "sF2", ",", "cont_seg", ",", "styl_seg", ")", "\n", "Im2", "=", "self", ".", "d2", "(", "csF2", ",", "cpool_idx", ",", "cpool", ")", "\n", "\n", "cF1", "=", "self", ".", "e1", "(", "Im2", ")", "\n", "sF1", "=", "sF1", ".", "data", ".", "squeeze", "(", "0", ")", "\n", "cF1", "=", "cF1", ".", "data", ".", "squeeze", "(", "0", ")", "\n", "csF1", "=", "self", ".", "__feature_wct", "(", "cF1", ",", "sF1", ",", "cont_seg", ",", "styl_seg", ")", "\n", "Im1", "=", "self", ".", "d1", "(", "csF1", ")", "\n", "return", "Im1", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__compute_label_info": [[56, 69], ["numpy.unique", "numpy.zeros", "numpy.max", "numpy.where", "numpy.where", "is_valid", "cont_seg.reshape", "styl_seg.reshape"], "methods", ["None"], ["", "def", "__compute_label_info", "(", "self", ",", "cont_seg", ",", "styl_seg", ")", ":", "\n", "        ", "if", "cont_seg", ".", "size", "==", "False", "or", "styl_seg", ".", "size", "==", "False", ":", "\n", "            ", "return", "\n", "", "max_label", "=", "np", ".", "max", "(", "cont_seg", ")", "+", "1", "\n", "self", ".", "label_set", "=", "np", ".", "unique", "(", "cont_seg", ")", "\n", "self", ".", "label_indicator", "=", "np", ".", "zeros", "(", "max_label", ")", "\n", "for", "l", "in", "self", ".", "label_set", ":", "\n", "# if l==0:", "\n", "#   continue", "\n", "            ", "is_valid", "=", "lambda", "a", ",", "b", ":", "a", ">", "10", "and", "b", ">", "10", "and", "a", "/", "b", "<", "100", "and", "b", "/", "a", "<", "100", "\n", "o_cont_mask", "=", "np", ".", "where", "(", "cont_seg", ".", "reshape", "(", "cont_seg", ".", "shape", "[", "0", "]", "*", "cont_seg", ".", "shape", "[", "1", "]", ")", "==", "l", ")", "\n", "o_styl_mask", "=", "np", ".", "where", "(", "styl_seg", ".", "reshape", "(", "styl_seg", ".", "shape", "[", "0", "]", "*", "styl_seg", ".", "shape", "[", "1", "]", ")", "==", "l", ")", "\n", "self", ".", "label_indicator", "[", "l", "]", "=", "is_valid", "(", "o_cont_mask", "[", "0", "]", ".", "size", ",", "o_styl_mask", "[", "0", "]", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__feature_wct": [[70, 121], ["cont_feat.view().clone", "styl_feat.view().clone", "torch.transpose.view_as", "torch.transpose.view_as", "torch.transpose.float().unsqueeze", "torch.transpose.float().unsqueeze", "cont_feat.size", "cont_feat.size", "cont_feat.size", "styl_feat.size", "styl_feat.size", "styl_feat.size", "photo_wct.PhotoWCT.__wct_core", "cont_feat.view().clone", "cont_feat.view", "styl_feat.view", "len", "numpy.asarray", "numpy.asarray", "len", "numpy.asarray", "numpy.asarray", "numpy.where", "numpy.where", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "photo_wct.PhotoWCT.__wct_core", "torch.transpose.float", "torch.transpose.float", "cont_feat.view", "PIL.Image.fromarray().resize", "PIL.Image.fromarray().resize", "PIL.Image.fromarray().resize", "PIL.Image.fromarray().resize", "cont_indi.cuda.cuda.cuda", "styl_indi.cuda.cuda.cuda", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose.index_copy_", "torch.transpose.index_copy_", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose.index_copy_", "torch.transpose.index_copy_", "numpy.asarray.reshape", "numpy.asarray.reshape", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__wct_core", "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__wct_core"], ["", "", "def", "__feature_wct", "(", "self", ",", "cont_feat", ",", "styl_feat", ",", "cont_seg", ",", "styl_seg", ")", ":", "\n", "        ", "cont_c", ",", "cont_h", ",", "cont_w", "=", "cont_feat", ".", "size", "(", "0", ")", ",", "cont_feat", ".", "size", "(", "1", ")", ",", "cont_feat", ".", "size", "(", "2", ")", "\n", "styl_c", ",", "styl_h", ",", "styl_w", "=", "styl_feat", ".", "size", "(", "0", ")", ",", "styl_feat", ".", "size", "(", "1", ")", ",", "styl_feat", ".", "size", "(", "2", ")", "\n", "cont_feat_view", "=", "cont_feat", ".", "view", "(", "cont_c", ",", "-", "1", ")", ".", "clone", "(", ")", "\n", "styl_feat_view", "=", "styl_feat", ".", "view", "(", "styl_c", ",", "-", "1", ")", ".", "clone", "(", ")", "\n", "\n", "if", "cont_seg", ".", "size", "==", "False", "or", "styl_seg", ".", "size", "==", "False", ":", "\n", "            ", "target_feature", "=", "self", ".", "__wct_core", "(", "cont_feat_view", ",", "styl_feat_view", ")", "\n", "", "else", ":", "\n", "            ", "target_feature", "=", "cont_feat", ".", "view", "(", "cont_c", ",", "-", "1", ")", ".", "clone", "(", ")", "\n", "if", "len", "(", "cont_seg", ".", "shape", ")", "==", "2", ":", "\n", "                ", "t_cont_seg", "=", "np", ".", "asarray", "(", "Image", ".", "fromarray", "(", "cont_seg", ")", ".", "resize", "(", "(", "cont_w", ",", "cont_h", ")", ",", "Image", ".", "NEAREST", ")", ")", "\n", "", "else", ":", "\n", "                ", "t_cont_seg", "=", "np", ".", "asarray", "(", "Image", ".", "fromarray", "(", "cont_seg", ",", "mode", "=", "'RGB'", ")", ".", "resize", "(", "(", "cont_w", ",", "cont_h", ")", ",", "Image", ".", "NEAREST", ")", ")", "\n", "", "if", "len", "(", "styl_seg", ".", "shape", ")", "==", "2", ":", "\n", "                ", "t_styl_seg", "=", "np", ".", "asarray", "(", "Image", ".", "fromarray", "(", "styl_seg", ")", ".", "resize", "(", "(", "styl_w", ",", "styl_h", ")", ",", "Image", ".", "NEAREST", ")", ")", "\n", "", "else", ":", "\n", "                ", "t_styl_seg", "=", "np", ".", "asarray", "(", "Image", ".", "fromarray", "(", "styl_seg", ",", "mode", "=", "'RGB'", ")", ".", "resize", "(", "(", "styl_w", ",", "styl_h", ")", ",", "Image", ".", "NEAREST", ")", ")", "\n", "\n", "", "for", "l", "in", "self", ".", "label_set", ":", "\n", "                ", "if", "self", ".", "label_indicator", "[", "l", "]", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "cont_mask", "=", "np", ".", "where", "(", "t_cont_seg", ".", "reshape", "(", "t_cont_seg", ".", "shape", "[", "0", "]", "*", "t_cont_seg", ".", "shape", "[", "1", "]", ")", "==", "l", ")", "\n", "styl_mask", "=", "np", ".", "where", "(", "t_styl_seg", ".", "reshape", "(", "t_styl_seg", ".", "shape", "[", "0", "]", "*", "t_styl_seg", ".", "shape", "[", "1", "]", ")", "==", "l", ")", "\n", "if", "cont_mask", "[", "0", "]", ".", "size", "<=", "0", "or", "styl_mask", "[", "0", "]", ".", "size", "<=", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "cont_indi", "=", "torch", ".", "LongTensor", "(", "cont_mask", "[", "0", "]", ")", "\n", "styl_indi", "=", "torch", ".", "LongTensor", "(", "styl_mask", "[", "0", "]", ")", "\n", "if", "self", ".", "is_cuda", ":", "\n", "                    ", "cont_indi", "=", "cont_indi", ".", "cuda", "(", "0", ")", "\n", "styl_indi", "=", "styl_indi", ".", "cuda", "(", "0", ")", "\n", "\n", "", "cFFG", "=", "torch", ".", "index_select", "(", "cont_feat_view", ",", "1", ",", "cont_indi", ")", "\n", "sFFG", "=", "torch", ".", "index_select", "(", "styl_feat_view", ",", "1", ",", "styl_indi", ")", "\n", "# print(len(cont_indi))", "\n", "# print(len(styl_indi))", "\n", "tmp_target_feature", "=", "self", ".", "__wct_core", "(", "cFFG", ",", "sFFG", ")", "\n", "# print(tmp_target_feature.size())", "\n", "if", "torch", ".", "__version__", ">=", "\"0.4.0\"", ":", "\n", "# This seems to be a bug in PyTorch 0.4.0 to me.", "\n", "                    ", "new_target_feature", "=", "torch", ".", "transpose", "(", "target_feature", ",", "1", ",", "0", ")", "\n", "new_target_feature", ".", "index_copy_", "(", "0", ",", "cont_indi", ",", "torch", ".", "transpose", "(", "tmp_target_feature", ",", "1", ",", "0", ")", ")", "\n", "target_feature", "=", "torch", ".", "transpose", "(", "new_target_feature", ",", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "                    ", "target_feature", ".", "index_copy_", "(", "1", ",", "cont_indi", ",", "tmp_target_feature", ")", "\n", "\n", "", "", "", "target_feature", "=", "target_feature", ".", "view_as", "(", "cont_feat", ")", "\n", "ccsF", "=", "target_feature", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "ccsF", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.__wct_core": [[122, 165], ["cont_feat.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "c_mean.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "range", "styl_feat.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mm().div", "torch.mm().div", "torch.mm().div", "torch.mm().div", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "range", "c_e[].pow", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "s_e[].pow", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "iden.cuda.cuda.cuda", "torch.mm().div", "torch.mm().div", "torch.mm().div", "torch.mm().div", "torch.mean.unsqueeze().expand_as", "torch.mean.unsqueeze().expand_as", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "c_v[].t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mean.unsqueeze().expand_as", "torch.mean.unsqueeze().expand_as", "c_mean.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "s_v[].t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mean.unsqueeze", "torch.mean.unsqueeze", "styl_feat.t", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.mean.unsqueeze", "torch.mean.unsqueeze", "cont_feat.t"], "methods", ["None"], ["", "def", "__wct_core", "(", "self", ",", "cont_feat", ",", "styl_feat", ")", ":", "\n", "        ", "cFSize", "=", "cont_feat", ".", "size", "(", ")", "\n", "c_mean", "=", "torch", ".", "mean", "(", "cont_feat", ",", "1", ")", "# c x (h x w)", "\n", "c_mean", "=", "c_mean", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "cont_feat", ")", "\n", "cont_feat", "=", "cont_feat", "-", "c_mean", "\n", "\n", "iden", "=", "torch", ".", "eye", "(", "cFSize", "[", "0", "]", ")", "# .double()", "\n", "if", "self", ".", "is_cuda", ":", "\n", "            ", "iden", "=", "iden", ".", "cuda", "(", ")", "\n", "\n", "", "contentConv", "=", "torch", ".", "mm", "(", "cont_feat", ",", "cont_feat", ".", "t", "(", ")", ")", ".", "div", "(", "cFSize", "[", "1", "]", "-", "1", ")", "+", "iden", "\n", "# del iden", "\n", "c_u", ",", "c_e", ",", "c_v", "=", "torch", ".", "svd", "(", "contentConv", ",", "some", "=", "False", ")", "\n", "# c_e2, c_v = torch.eig(contentConv, True)", "\n", "# c_e = c_e2[:,0]", "\n", "\n", "k_c", "=", "cFSize", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "cFSize", "[", "0", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "c_e", "[", "i", "]", ">=", "0.00001", ":", "\n", "                ", "k_c", "=", "i", "+", "1", "\n", "break", "\n", "\n", "", "", "sFSize", "=", "styl_feat", ".", "size", "(", ")", "\n", "s_mean", "=", "torch", ".", "mean", "(", "styl_feat", ",", "1", ")", "\n", "styl_feat", "=", "styl_feat", "-", "s_mean", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "styl_feat", ")", "\n", "styleConv", "=", "torch", ".", "mm", "(", "styl_feat", ",", "styl_feat", ".", "t", "(", ")", ")", ".", "div", "(", "sFSize", "[", "1", "]", "-", "1", ")", "\n", "s_u", ",", "s_e", ",", "s_v", "=", "torch", ".", "svd", "(", "styleConv", ",", "some", "=", "False", ")", "\n", "\n", "k_s", "=", "sFSize", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "sFSize", "[", "0", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "s_e", "[", "i", "]", ">=", "0.00001", ":", "\n", "                ", "k_s", "=", "i", "+", "1", "\n", "break", "\n", "\n", "", "", "c_d", "=", "(", "c_e", "[", "0", ":", "k_c", "]", ")", ".", "pow", "(", "-", "0.5", ")", "\n", "step1", "=", "torch", ".", "mm", "(", "c_v", "[", ":", ",", "0", ":", "k_c", "]", ",", "torch", ".", "diag", "(", "c_d", ")", ")", "\n", "step2", "=", "torch", ".", "mm", "(", "step1", ",", "(", "c_v", "[", ":", ",", "0", ":", "k_c", "]", ".", "t", "(", ")", ")", ")", "\n", "whiten_cF", "=", "torch", ".", "mm", "(", "step2", ",", "cont_feat", ")", "\n", "\n", "s_d", "=", "(", "s_e", "[", "0", ":", "k_s", "]", ")", ".", "pow", "(", "0.5", ")", "\n", "targetFeature", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "s_v", "[", ":", ",", "0", ":", "k_s", "]", ",", "torch", ".", "diag", "(", "s_d", ")", ")", ",", "(", "s_v", "[", ":", ",", "0", ":", "k_s", "]", ".", "t", "(", ")", ")", ")", ",", "whiten_cF", ")", "\n", "targetFeature", "=", "targetFeature", "+", "s_mean", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "targetFeature", ")", "\n", "return", "targetFeature", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.is_cuda": [[166, 169], ["next", "photo_wct.PhotoWCT.parameters"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_cuda", "(", "self", ")", ":", "\n", "        ", "return", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "is_cuda", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.photo_wct.PhotoWCT.forward": [[170, 172], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.smooth_filter.smooth_local_affine": [[332, 378], ["pynvrtc.compiler.Program", "pynvrtc.compiler.Program.compile", "cupy.cuda.function.Module", "function.Module.load", "function.Module.get_function", "function.Module.get_function", "function.Module.get_function", "collections.namedtuple", "collections.namedtuple.", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "m.get_function.", "m.get_function.", "m.get_function.", "torch.zeros().cuda.cpu().numpy", "bytes", "program.compile.encode", "torch.zeros", "torch.zeros", "torch.zeros", "torch.from_numpy", "torch.from_numpy", "torch.zeros().cuda.cpu", "torch.cuda.current_stream", "numpy.shape", "int", "torch.from_numpy().cuda.data_ptr", "torch.from_numpy().cuda.data_ptr", "torch.zeros().cuda.data_ptr", "numpy.int32", "numpy.int32", "numpy.float32", "numpy.int32", "int", "torch.zeros().cuda.data_ptr", "torch.zeros().cuda.data_ptr", "torch.from_numpy().cuda.data_ptr", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.float32", "numpy.float32", "int", "torch.from_numpy().cuda.data_ptr", "torch.zeros().cuda.data_ptr", "torch.zeros().cuda.data_ptr", "numpy.int32", "numpy.int32"], "function", ["None"], ["def", "smooth_local_affine", "(", "output_cpu", ",", "input_cpu", ",", "epsilon", ",", "patch", ",", "h", ",", "w", ",", "f_r", ",", "f_e", ")", ":", "\n", "# program = Program(src.encode('utf-8'), 'best_local_affine_kernel.cu'.encode('utf-8'))", "\n", "# ptx = program.compile(['-I/usr/local/cuda/include'.encode('utf-8')])", "\n", "    ", "program", "=", "Program", "(", "src", ",", "'best_local_affine_kernel.cu'", ")", "\n", "ptx", "=", "program", ".", "compile", "(", "[", "'-I/usr/local/cuda/include'", "]", ")", "\n", "m", "=", "function", ".", "Module", "(", ")", "\n", "m", ".", "load", "(", "bytes", "(", "ptx", ".", "encode", "(", ")", ")", ")", "\n", "\n", "_reconstruction_best_kernel", "=", "m", ".", "get_function", "(", "'reconstruction_best_kernel'", ")", "\n", "_bilateral_smooth_kernel", "=", "m", ".", "get_function", "(", "'bilateral_smooth_kernel'", ")", "\n", "_best_local_affine_kernel", "=", "m", ".", "get_function", "(", "'best_local_affine_kernel'", ")", "\n", "Stream", "=", "namedtuple", "(", "'Stream'", ",", "[", "'ptr'", "]", ")", "\n", "s", "=", "Stream", "(", "ptr", "=", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "cuda_stream", ")", "\n", "\n", "filter_radius", "=", "f_r", "\n", "sigma1", "=", "filter_radius", "/", "3", "\n", "sigma2", "=", "f_e", "\n", "radius", "=", "(", "patch", "-", "1", ")", "/", "2", "\n", "\n", "filtered_best_output", "=", "torch", ".", "zeros", "(", "np", ".", "shape", "(", "input_cpu", ")", ")", ".", "cuda", "(", ")", "\n", "affine_model", "=", "torch", ".", "zeros", "(", "(", "h", "*", "w", ",", "12", ")", ")", ".", "cuda", "(", ")", "\n", "filtered_affine_model", "=", "torch", ".", "zeros", "(", "(", "h", "*", "w", ",", "12", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "input_", "=", "torch", ".", "from_numpy", "(", "input_cpu", ")", ".", "cuda", "(", ")", "\n", "output_", "=", "torch", ".", "from_numpy", "(", "output_cpu", ")", ".", "cuda", "(", ")", "\n", "_best_local_affine_kernel", "(", "\n", "grid", "=", "(", "int", "(", "(", "h", "*", "w", ")", "/", "256", "+", "1", ")", ",", "1", ")", ",", "\n", "block", "=", "(", "256", ",", "1", ",", "1", ")", ",", "\n", "args", "=", "[", "output_", ".", "data_ptr", "(", ")", ",", "input_", ".", "data_ptr", "(", ")", ",", "affine_model", ".", "data_ptr", "(", ")", ",", "\n", "np", ".", "int32", "(", "h", ")", ",", "np", ".", "int32", "(", "w", ")", ",", "np", ".", "float32", "(", "epsilon", ")", ",", "np", ".", "int32", "(", "radius", ")", "]", ",", "stream", "=", "s", "\n", ")", "\n", "\n", "_bilateral_smooth_kernel", "(", "\n", "grid", "=", "(", "int", "(", "(", "h", "*", "w", ")", "/", "256", "+", "1", ")", ",", "1", ")", ",", "\n", "block", "=", "(", "256", ",", "1", ",", "1", ")", ",", "\n", "args", "=", "[", "affine_model", ".", "data_ptr", "(", ")", ",", "filtered_affine_model", ".", "data_ptr", "(", ")", ",", "input_", ".", "data_ptr", "(", ")", ",", "np", ".", "int32", "(", "h", ")", ",", "np", ".", "int32", "(", "w", ")", ",", "np", ".", "int32", "(", "f_r", ")", ",", "np", ".", "float32", "(", "sigma1", ")", ",", "np", ".", "float32", "(", "sigma2", ")", "]", ",", "stream", "=", "s", "\n", ")", "\n", "\n", "_reconstruction_best_kernel", "(", "\n", "grid", "=", "(", "int", "(", "(", "h", "*", "w", ")", "/", "256", "+", "1", ")", ",", "1", ")", ",", "\n", "block", "=", "(", "256", ",", "1", ",", "1", ")", ",", "\n", "args", "=", "[", "input_", ".", "data_ptr", "(", ")", ",", "filtered_affine_model", ".", "data_ptr", "(", ")", ",", "filtered_best_output", ".", "data_ptr", "(", ")", ",", "\n", "np", ".", "int32", "(", "h", ")", ",", "np", ".", "int32", "(", "w", ")", "]", ",", "stream", "=", "s", "\n", ")", "\n", "numpy_filtered_best_output", "=", "filtered_best_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "numpy_filtered_best_output", "\n", "\n"]], "home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.smooth_filter.smooth_filter": [[380, 406], ["numpy.array", "best_image_bgr.transpose.transpose", "Image.open().convert.resize", "numpy.array", "content_input.transpose.transpose", "numpy.shape", "smooth_filter.smooth_local_affine", "best_.transpose.transpose", "PIL.Image.fromarray", "type", "PIL.Image.open().convert", "type", "PIL.Image.open().convert", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.uint8", "numpy.clip", "PIL.Image.open", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.NVIDIA_FastPhotoStyle.None.smooth_filter.smooth_local_affine"], ["", "def", "smooth_filter", "(", "initImg", ",", "contentImg", ",", "f_radius", "=", "15", ",", "f_edge", "=", "1e-1", ")", ":", "\n", "    ", "'''\n    :param initImg: intermediate output. Either image path or PIL Image\n    :param contentImg: content image output. Either path or PIL Image\n    :return: stylized output image. PIL Image\n    '''", "\n", "if", "type", "(", "initImg", ")", "==", "str", ":", "\n", "        ", "initImg", "=", "Image", ".", "open", "(", "initImg", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "best_image_bgr", "=", "np", ".", "array", "(", "initImg", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "bW", ",", "bH", ",", "bC", "=", "best_image_bgr", ".", "shape", "\n", "best_image_bgr", "=", "best_image_bgr", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "best_image_bgr", "=", "best_image_bgr", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "if", "type", "(", "contentImg", ")", "==", "str", ":", "\n", "        ", "contentImg", "=", "Image", ".", "open", "(", "contentImg", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "content_input", "=", "contentImg", ".", "resize", "(", "(", "bH", ",", "bW", ")", ")", "\n", "content_input", "=", "np", ".", "array", "(", "content_input", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "content_input", "=", "content_input", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "content_input", "=", "content_input", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "input_", "=", "np", ".", "ascontiguousarray", "(", "content_input", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "_", ",", "H", ",", "W", "=", "np", ".", "shape", "(", "input_", ")", "\n", "output_", "=", "np", ".", "ascontiguousarray", "(", "best_image_bgr", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "best_", "=", "smooth_local_affine", "(", "output_", ",", "input_", ",", "1e-7", ",", "3", ",", "H", ",", "W", ",", "f_radius", ",", "f_edge", ")", "\n", "best_", "=", "best_", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "result", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "np", ".", "clip", "(", "best_", "*", "255.", ",", "0", ",", "255.", ")", ")", ")", "\n", "return", "result", "\n", "", ""]]}