{"home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.l2norm": [[11, 16], ["torch.norm", "torch.norm", "torch.norm", "torch.norm.clamp"], "function", ["None"], ["def", "l2norm", "(", "inputs", ",", "dim", "=", "-", "1", ")", ":", "\n", "# inputs: (batch, dim_ft)", "\n", "  ", "norm", "=", "torch", ".", "norm", "(", "inputs", ",", "p", "=", "2", ",", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "\n", "inputs", "=", "inputs", "/", "norm", ".", "clamp", "(", "min", "=", "1e-10", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.sequence_mask": [[17, 29], ["lengths.size", "torch.arange().type_as().repeat", "torch.arange().type_as().repeat", "torch.arange().type_as().repeat", "lengths.max", "mask.lt.ge", "mask.lt.lt", "torch.arange().type_as", "torch.arange().type_as", "torch.arange().type_as", "lengths.unsqueeze", "lengths.unsqueeze", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "sequence_mask", "(", "lengths", ",", "max_len", "=", "None", ",", "inverse", "=", "False", ")", ":", "\n", "  ", "''' Creates a boolean mask from sequence lengths.\n  '''", "\n", "# lengths: LongTensor, (batch, )", "\n", "batch_size", "=", "lengths", ".", "size", "(", "0", ")", "\n", "max_len", "=", "max_len", "or", "lengths", ".", "max", "(", ")", "\n", "mask", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "type_as", "(", "lengths", ")", ".", "repeat", "(", "batch_size", ",", "1", ")", "\n", "if", "inverse", ":", "\n", "    ", "mask", "=", "mask", ".", "ge", "(", "lengths", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "    ", "mask", "=", "mask", ".", "lt", "(", "lengths", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.subsequent_mask": [[30, 39], ["numpy.triu().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.triu", "numpy.ones"], "function", ["None"], ["", "def", "subsequent_mask", "(", "size", ")", ":", "\n", "  ", "'''Mask out subsequent position.\n  Args\n    size: the length of tgt words'''", "\n", "attn_shape", "=", "(", "1", ",", "size", ",", "size", ")", "\n", "# set the values below the 1th diagnose as 0", "\n", "mask", "=", "np", ".", "triu", "(", "np", ".", "ones", "(", "attn_shape", ")", ",", "k", "=", "1", ")", ".", "astype", "(", "'uint8'", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "==", "0", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.rnn_factory": [[40, 44], ["getattr", "rnn_type.upper"], "function", ["None"], ["", "def", "rnn_factory", "(", "rnn_type", ",", "**", "kwargs", ")", ":", "\n", "# Use pytorch version when available.", "\n", "  ", "rnn", "=", "getattr", "(", "nn", ",", "rnn_type", ".", "upper", "(", ")", ")", "(", "**", "kwargs", ")", "\n", "return", "rnn", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.calc_rnn_outs_with_sort": [[45, 84], ["torch.index_select.size", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.index_select", "torch.index_select", "torch.index_select", "torch.nn.utils.rnn.pack_padded_sequence", "rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.index_select", "torch.index_select", "torch.index_select", "isinstance", "isinstance", "enumerate", "tuple", "torch.index_select", "torch.index_select", "torch.index_select", "enumerate", "tuple", "torch.index_select", "torch.index_select", "torch.index_select", "new_states.append", "new_states.append", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select"], "function", ["None"], ["", "def", "calc_rnn_outs_with_sort", "(", "rnn", ",", "inputs", ",", "seq_lens", ",", "init_states", "=", "None", ")", ":", "\n", "  ", "'''\n  inputs: FloatTensor, (batch, seq_len, dim_ft)\n  seq_lens: LongTensor, (batch,)\n  init_states: FloatTensor, (num_layers * num_direction, batch, hidden_size)\n  '''", "\n", "seq_len", "=", "inputs", ".", "size", "(", "1", ")", "\n", "# sort", "\n", "sorted_seq_lens", ",", "seq_sort_idx", "=", "torch", ".", "sort", "(", "seq_lens", ",", "descending", "=", "True", ")", "\n", "_", ",", "seq_unsort_idx", "=", "torch", ".", "sort", "(", "seq_sort_idx", ",", "descending", "=", "False", ")", "\n", "# pack", "\n", "inputs", "=", "torch", ".", "index_select", "(", "inputs", ",", "0", ",", "seq_sort_idx", ")", "\n", "if", "init_states", "is", "not", "None", ":", "\n", "    ", "if", "isinstance", "(", "init_states", ",", "tuple", ")", ":", "\n", "      ", "new_states", "=", "[", "]", "\n", "for", "i", ",", "init_state", "in", "enumerate", "(", "init_states", ")", ":", "\n", "        ", "new_states", ".", "append", "(", "torch", ".", "index_select", "(", "init_state", ",", "1", ",", "seq_sort_idx", ")", ")", "\n", "", "init_states", "=", "tuple", "(", "new_states", ")", "\n", "", "else", ":", "\n", "      ", "init_states", "=", "torch", ".", "index_select", "(", "init_states", ",", "1", ",", "seq_sort_idx", ")", "\n", "", "", "packed_inputs", "=", "pack_padded_sequence", "(", "inputs", ",", "sorted_seq_lens", ",", "batch_first", "=", "True", ")", "\n", "# rnn", "\n", "packed_outs", ",", "states", "=", "rnn", "(", "packed_inputs", ",", "init_states", ")", "\n", "# unpack", "\n", "outs", ",", "_", "=", "pad_packed_sequence", "(", "packed_outs", ",", "batch_first", "=", "True", ",", "\n", "total_length", "=", "seq_len", ",", "padding_value", "=", "0", ")", "\n", "# unsort", "\n", "# outs.size = (batch, seq_len, num_directions * hidden_size)     ", "\n", "outs", "=", "torch", ".", "index_select", "(", "outs", ",", "0", ",", "seq_unsort_idx", ")", "\n", "if", "isinstance", "(", "states", ",", "tuple", ")", ":", "\n", "# states: (num_layers * num_directions, batch, hidden_size)", "\n", "    ", "new_states", "=", "[", "]", "\n", "for", "i", ",", "state", "in", "enumerate", "(", "states", ")", ":", "\n", "      ", "new_states", ".", "append", "(", "torch", ".", "index_select", "(", "state", ",", "1", ",", "seq_unsort_idx", ")", ")", "\n", "", "states", "=", "tuple", "(", "new_states", ")", "\n", "", "else", ":", "\n", "    ", "states", "=", "torch", ".", "index_select", "(", "states", ",", "1", ",", "seq_unsort_idx", ")", "\n", "\n", "", "return", "outs", ",", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.run_utils.gen_common_pathcfg": [[10, 33], ["framework.configbase.PathCfg", "framework.configbase.PathCfg.load", "os.path.join", "os.path.join", "os.path.join", "json.load", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "datetime.datetime.now().strftime", "os.path.join", "open", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load"], ["def", "gen_common_pathcfg", "(", "path_cfg_file", ",", "is_train", "=", "False", ")", ":", "\n", "  ", "path_cfg", "=", "framework", ".", "configbase", ".", "PathCfg", "(", ")", "\n", "path_cfg", ".", "load", "(", "json", ".", "load", "(", "open", "(", "path_cfg_file", ")", ")", ")", "\n", "\n", "output_dir", "=", "path_cfg", ".", "output_dir", "\n", "\n", "path_cfg", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'log'", ")", "\n", "path_cfg", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'model'", ")", "\n", "path_cfg", ".", "pred_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'pred'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_cfg", ".", "log_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "path_cfg", ".", "log_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path_cfg", ".", "model_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "path_cfg", ".", "model_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path_cfg", ".", "pred_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "path_cfg", ".", "pred_dir", ")", "\n", "\n", "", "if", "is_train", ":", "\n", "    ", "timestamp", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d-%H-%M-%S'", ")", "\n", "path_cfg", ".", "log_file", "=", "os", ".", "path", ".", "join", "(", "path_cfg", ".", "log_dir", ",", "'log-'", "+", "timestamp", ")", "\n", "", "else", ":", "\n", "    ", "path_cfg", ".", "log_file", "=", "None", "\n", "\n", "", "return", "path_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.run_utils.find_best_val_models": [[35, 65], ["glob.glob", "glob.glob", "enumerate", "list", "os.path.join", "os.path.join", "os.path.basename", "json.load", "val_names.append", "val_scores.append", "val_scores[].keys", "os.path.join", "model_files.setdefault", "model_files[].append", "open", "numpy.argmin", "numpy.argmax", "model_files.items", "os.path.basename.split", "os.path.basename.split"], "function", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load"], ["", "def", "find_best_val_models", "(", "log_dir", ",", "model_dir", ")", ":", "\n", "  ", "step_jsons", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'val.step.*.json'", ")", ")", "\n", "epoch_jsons", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'val.epoch.*.json'", ")", ")", "\n", "\n", "val_names", ",", "val_scores", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "json_file", "in", "enumerate", "(", "step_jsons", "+", "epoch_jsons", ")", ":", "\n", "    ", "json_name", "=", "os", ".", "path", ".", "basename", "(", "json_file", ")", "\n", "scores", "=", "json", ".", "load", "(", "open", "(", "json_file", ")", ")", "\n", "val_names", ".", "append", "(", "json_name", ")", "\n", "val_scores", ".", "append", "(", "scores", ")", "\n", "\n", "", "measure_names", "=", "list", "(", "val_scores", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "model_files", "=", "{", "}", "\n", "for", "measure_name", "in", "measure_names", ":", "\n", "# for metrics: the lower the better", "\n", "    ", "if", "'loss'", "in", "measure_name", "or", "'medr'", "in", "measure_name", "or", "'meanr'", "in", "measure_name", ":", "\n", "      ", "idx", "=", "np", ".", "argmin", "(", "[", "scores", "[", "measure_name", "]", "for", "scores", "in", "val_scores", "]", ")", "\n", "# for metrics: the higher the better", "\n", "", "else", ":", "\n", "      ", "idx", "=", "np", ".", "argmax", "(", "[", "scores", "[", "measure_name", "]", "for", "scores", "in", "val_scores", "]", ")", "\n", "", "json_name", "=", "val_names", "[", "idx", "]", "\n", "model_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\n", "'epoch.%s.th'", "%", "(", "json_name", ".", "split", "(", "'.'", ")", "[", "2", "]", ")", "if", "'epoch'", "in", "json_name", "else", "'step.%s.th'", "%", "(", "json_name", ".", "split", "(", "'.'", ")", "[", "2", "]", ")", ")", "\n", "model_files", ".", "setdefault", "(", "model_file", ",", "[", "]", ")", "\n", "model_files", "[", "model_file", "]", ".", "append", "(", "measure_name", ")", "\n", "\n", "", "name2file", "=", "{", "'-'", ".", "join", "(", "measure_name", ")", ":", "model_file", "for", "model_file", ",", "measure_name", "in", "model_files", ".", "items", "(", ")", "}", "\n", "\n", "return", "name2file", "\n", "", ""]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.__init__": [[9, 38], ["torch.device", "torch.nn.BCELoss", "torch.nn.MSELoss", "modelbase.ModelBase.build_submods", "modelbase.ModelBase.submods.values", "modelbase.ModelBase.build_loss", "modelbase.ModelBase.build_optimizer", "modelbase.ModelBase.submods.items", "modelbase.ModelBase.print_fn", "modelbase.ModelBase.print_fn", "submod.to", "submod.state_dict().items", "torch.cuda.is_available", "modelbase.ModelBase.print_fn", "numpy.prod", "submod.state_dict", "varvalue.size", "len", "sum", "str", "numpy.prod", "numpy.prod", "varvalue.size", "varvalue.size", "param.size"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.build_submods", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.build_loss", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.build_optimizer"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "_logger", "=", "None", ",", "gpu_id", "=", "0", ")", ":", "\n", "    ", "'''initialize model \n    (support single GPU, otherwise need to be customized)\n    '''", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "gpu_id", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "criterion_bce", "=", "torch", ".", "nn", ".", "BCELoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "criterion_mse", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "if", "_logger", "is", "None", ":", "\n", "      ", "self", ".", "print_fn", "=", "print", "\n", "", "else", ":", "\n", "      ", "self", ".", "print_fn", "=", "_logger", ".", "info", "\n", "\n", "", "self", ".", "submods", "=", "self", ".", "build_submods", "(", ")", "\n", "for", "submod", "in", "self", ".", "submods", ".", "values", "(", ")", ":", "\n", "      ", "submod", ".", "to", "(", "self", ".", "device", ")", "\n", "", "self", ".", "criterion", "=", "self", ".", "build_loss", "(", ")", "\n", "self", ".", "params", ",", "self", ".", "optimizer", ",", "self", ".", "lr_scheduler", "=", "self", ".", "build_optimizer", "(", ")", "\n", "\n", "num_params", ",", "num_weights", "=", "0", ",", "0", "\n", "for", "key", ",", "submod", "in", "self", ".", "submods", ".", "items", "(", ")", ":", "\n", "      ", "for", "varname", ",", "varvalue", "in", "submod", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "self", ".", "print_fn", "(", "'%s: %s, shape=%s, num:%d'", "%", "(", "\n", "key", ",", "varname", ",", "str", "(", "varvalue", ".", "size", "(", ")", ")", ",", "np", ".", "prod", "(", "varvalue", ".", "size", "(", ")", ")", ")", ")", "\n", "num_params", "+=", "1", "\n", "num_weights", "+=", "np", ".", "prod", "(", "varvalue", ".", "size", "(", ")", ")", "\n", "", "", "self", ".", "print_fn", "(", "'num params %d, num weights %d'", "%", "(", "num_params", ",", "num_weights", ")", ")", "\n", "self", ".", "print_fn", "(", "'trainable: num params %d, num weights %d'", "%", "(", "\n", "len", "(", "self", ".", "params", ")", ",", "sum", "(", "[", "np", ".", "prod", "(", "param", ".", "size", "(", ")", ")", "for", "param", "in", "self", ".", "params", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.build_submods": [[39, 41], ["NotImplementedError"], "methods", ["None"], ["", "def", "build_submods", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "'implement build_submods function: return submods'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.build_loss": [[42, 44], ["NotImplementedError"], "methods", ["None"], ["", "def", "build_loss", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "'implement build_loss function: return criterion'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.forward_loss": [[45, 47], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward_loss", "(", "self", ",", "batch_data", ",", "step", "=", "None", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "'implement forward_loss function: return loss and additional outs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.validate": [[48, 50], ["modelbase.ModelBase.eval_start"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.eval_start"], ["", "def", "validate", "(", "self", ",", "val_reader", ",", "step", "=", "None", ")", ":", "\n", "    ", "self", ".", "eval_start", "(", ")", "\n", "# raise NotImplementedError('implement validate function: return metrics')", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.test": [[52, 56], ["modelbase.ModelBase.eval_start", "modelbase.ModelBase.load_checkpoint"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.eval_start", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.load_checkpoint"], ["", "def", "test", "(", "self", ",", "tst_reader", ",", "tst_pred_file", ",", "tst_model_file", "=", "None", ")", ":", "\n", "    ", "if", "tst_model_file", "is", "not", "None", ":", "\n", "      ", "self", ".", "load_checkpoint", "(", "tst_model_file", ")", "\n", "", "self", ".", "eval_start", "(", ")", "\n", "# raise NotImplementedError('implement test function')", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.build_optimizer": [[59, 88], ["set", "modelbase.ModelBase.submods.items", "len", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "print", "submod.parameters", "submod.parameters", "per_param_opts.append", "trn_params.extend", "params.append", "set.add", "id", "id"], "methods", ["None"], ["", "def", "build_optimizer", "(", "self", ")", ":", "\n", "    ", "trn_params", "=", "[", "]", "\n", "trn_param_ids", "=", "set", "(", ")", "\n", "per_param_opts", "=", "[", "]", "\n", "for", "key", ",", "submod", "in", "self", ".", "submods", ".", "items", "(", ")", ":", "\n", "      ", "if", "self", ".", "config", ".", "subcfgs", "[", "key", "]", ".", "freeze", ":", "\n", "        ", "for", "param", "in", "submod", ".", "parameters", "(", ")", ":", "\n", "          ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "else", ":", "\n", "        ", "params", "=", "[", "]", "\n", "for", "param", "in", "submod", ".", "parameters", "(", ")", ":", "\n", "# sometimes we share params in different submods", "\n", "          ", "if", "param", ".", "requires_grad", "and", "id", "(", "param", ")", "not", "in", "trn_param_ids", ":", "\n", "            ", "params", ".", "append", "(", "param", ")", "\n", "trn_param_ids", ".", "add", "(", "id", "(", "param", ")", ")", "\n", "", "", "per_param_opts", ".", "append", "(", "{", "\n", "'params'", ":", "params", ",", "\n", "'lr'", ":", "self", ".", "config", ".", "base_lr", "*", "self", ".", "config", ".", "subcfgs", "[", "key", "]", ".", "lr_mult", ",", "\n", "'weight_decay'", ":", "self", ".", "config", ".", "subcfgs", "[", "key", "]", ".", "weight_decay", ",", "\n", "}", ")", "\n", "trn_params", ".", "extend", "(", "params", ")", "\n", "", "", "if", "len", "(", "trn_params", ")", ">", "0", ":", "\n", "      ", "optimizer", "=", "optim", ".", "Adam", "(", "per_param_opts", ",", "lr", "=", "self", ".", "config", ".", "base_lr", ")", "\n", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "self", ".", "config", ".", "decay_boundarys", ",", "gamma", "=", "self", ".", "config", ".", "decay_rate", ")", "\n", "", "else", ":", "\n", "      ", "optimizer", ",", "lr_scheduler", "=", "None", ",", "None", "\n", "print", "(", "'no traiable parameters'", ")", "\n", "", "return", "trn_params", ",", "optimizer", ",", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.train_start": [[89, 93], ["modelbase.ModelBase.submods.items", "torch.set_grad_enabled", "submod.train"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.train"], ["", "def", "train_start", "(", "self", ")", ":", "\n", "    ", "for", "key", ",", "submod", "in", "self", ".", "submods", ".", "items", "(", ")", ":", "\n", "      ", "submod", ".", "train", "(", ")", "\n", "", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.eval_start": [[94, 98], ["modelbase.ModelBase.submods.items", "torch.set_grad_enabled", "submod.eval"], "methods", ["None"], ["", "def", "eval_start", "(", "self", ")", ":", "\n", "    ", "for", "key", ",", "submod", "in", "self", ".", "submods", ".", "items", "(", ")", ":", "\n", "      ", "submod", ".", "eval", "(", ")", "\n", "", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.save_checkpoint": [[99, 108], ["submods.items", "torch.save", "submod.state_dict().items", "varvalue.cpu", "submod.state_dict"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.save"], ["", "def", "save_checkpoint", "(", "self", ",", "ckpt_file", ",", "submods", "=", "None", ")", ":", "\n", "    ", "if", "submods", "is", "None", ":", "\n", "      ", "submods", "=", "self", ".", "submods", "\n", "", "state_dicts", "=", "{", "}", "\n", "for", "key", ",", "submod", "in", "submods", ".", "items", "(", ")", ":", "\n", "      ", "state_dicts", "[", "key", "]", "=", "{", "}", "\n", "for", "varname", ",", "varvalue", "in", "submod", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "state_dicts", "[", "key", "]", "[", "varname", "]", "=", "varvalue", ".", "cpu", "(", ")", "\n", "", "", "torch", ".", "save", "(", "state_dicts", ",", "ckpt_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.load_checkpoint": [[109, 126], ["torch.load", "torch.load.items", "modelbase.ModelBase.print_fn", "submods[].state_dict", "state_dict.items", "submods[].state_dict.update", "submods[].load_state_dict"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load"], ["", "def", "load_checkpoint", "(", "self", ",", "ckpt_file", ",", "submods", "=", "None", ")", ":", "\n", "    ", "if", "submods", "is", "None", ":", "\n", "      ", "submods", "=", "self", ".", "submods", "\n", "", "state_dicts", "=", "torch", ".", "load", "(", "ckpt_file", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "num_resumed_vars", "=", "0", "\n", "for", "key", ",", "state_dict", "in", "state_dicts", ".", "items", "(", ")", ":", "\n", "      ", "if", "key", "in", "submods", ":", "\n", "        ", "own_state_dict", "=", "submods", "[", "key", "]", ".", "state_dict", "(", ")", "\n", "new_state_dict", "=", "{", "}", "\n", "for", "varname", ",", "varvalue", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "          ", "if", "varname", "in", "own_state_dict", ":", "\n", "            ", "new_state_dict", "[", "varname", "]", "=", "varvalue", "\n", "num_resumed_vars", "+=", "1", "\n", "", "", "own_state_dict", ".", "update", "(", "new_state_dict", ")", "\n", "submods", "[", "key", "]", ".", "load_state_dict", "(", "own_state_dict", ")", "\n", "", "", "self", ".", "print_fn", "(", "'number of resumed variables: %d'", "%", "num_resumed_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.pretty_print_metrics": [[127, 133], ["metrics.items", "modelbase.ModelBase.print_fn", "metric_str.append"], "methods", ["None"], ["", "def", "pretty_print_metrics", "(", "self", ",", "prefix", ",", "metrics", ")", ":", "\n", "    ", "metric_str", "=", "[", "]", "\n", "for", "measure", ",", "score", "in", "metrics", ".", "items", "(", ")", ":", "\n", "      ", "metric_str", ".", "append", "(", "'%s %.4f'", "%", "(", "measure", ",", "score", ")", ")", "\n", "", "metric_str", "=", "' '", ".", "join", "(", "metric_str", ")", "\n", "self", ".", "print_fn", "(", "'%s: %s'", "%", "(", "prefix", ",", "metric_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.get_current_base_lr": [[134, 136], ["None"], "methods", ["None"], ["", "def", "get_current_base_lr", "(", "self", ")", ":", "\n", "      ", "return", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.train_one_batch": [[137, 147], ["modelbase.ModelBase.optimizer.zero_grad", "modelbase.ModelBase.forward_loss", "modelbase.ModelBase.backward", "modelbase.ModelBase.optimizer.step", "modelbase.ModelBase.data.item", "modelbase.ModelBase.print_fn", "modelbase.ModelBase.get_current_base_lr"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.forward_loss", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.get_current_base_lr"], ["", "def", "train_one_batch", "(", "self", ",", "batch_data", ",", "step", ")", ":", "\n", "    ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "forward_loss", "(", "batch_data", ",", "step", "=", "step", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "loss_value", "=", "loss", ".", "data", ".", "item", "(", ")", "\n", "if", "step", "is", "not", "None", "and", "self", ".", "config", ".", "monitor_iter", ">", "0", "and", "step", "%", "self", ".", "config", ".", "monitor_iter", "==", "0", ":", "\n", "      ", "self", ".", "print_fn", "(", "'\\ttrn step %d lr %.8f %s: %.4f'", "%", "(", "step", ",", "self", ".", "get_current_base_lr", "(", ")", ",", "'loss'", ",", "loss_value", ")", ")", "\n", "", "return", "{", "'loss'", ":", "loss_value", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.train_one_epoch": [[148, 176], ["modelbase.ModelBase.train_start", "avg_loss.items", "modelbase.ModelBase.train_one_batch", "modelbase.ModelBase.items", "avg_loss.setdefault", "n_batches.setdefault", "modelbase.ModelBase.save_checkpoint", "modelbase.ModelBase.validate", "modelbase.ModelBase.pretty_print_metrics", "modelbase.ModelBase.train_start", "os.path.join", "open", "json.dump", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.train_start", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.train_one_batch", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.save_checkpoint", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.validate", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.pretty_print_metrics", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.train_start"], ["", "def", "train_one_epoch", "(", "self", ",", "step", ",", "trn_reader", ",", "val_reader", ",", "model_dir", ",", "log_dir", ")", ":", "\n", "    ", "self", ".", "train_start", "(", ")", "\n", "\n", "avg_loss", ",", "n_batches", "=", "{", "}", ",", "{", "}", "\n", "for", "batch_data", "in", "trn_reader", ":", "\n", "      ", "loss", "=", "self", ".", "train_one_batch", "(", "batch_data", ",", "step", ")", "\n", "\n", "for", "loss_key", ",", "loss_value", "in", "loss", ".", "items", "(", ")", ":", "\n", "        ", "avg_loss", ".", "setdefault", "(", "loss_key", ",", "0", ")", "\n", "n_batches", ".", "setdefault", "(", "loss_key", ",", "0", ")", "\n", "avg_loss", "[", "loss_key", "]", "+=", "loss_value", "\n", "n_batches", "[", "loss_key", "]", "+=", "1", "\n", "", "step", "+=", "1", "\n", "\n", "if", "self", ".", "config", ".", "save_iter", ">", "0", "and", "step", "%", "self", ".", "config", ".", "save_iter", "==", "0", ":", "\n", "        ", "self", ".", "save_checkpoint", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'step.%d.th'", "%", "step", ")", ")", "\n", "\n", "", "if", "(", "self", ".", "config", ".", "save_iter", ">", "0", "and", "step", "%", "self", ".", "config", ".", "save_iter", "==", "0", ")", "or", "(", "self", ".", "config", ".", "val_iter", ">", "0", "and", "step", "%", "self", ".", "config", ".", "val_iter", "==", "0", ")", ":", "\n", "        ", "metrics", "=", "self", ".", "validate", "(", "val_reader", ",", "step", "=", "step", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'val.step.%d.json'", "%", "step", ")", ",", "'w'", ")", "as", "f", ":", "\n", "          ", "json", ".", "dump", "(", "metrics", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "self", ".", "pretty_print_metrics", "(", "'\\tval step %d'", "%", "step", ",", "metrics", ")", "\n", "self", ".", "train_start", "(", ")", "\n", "\n", "", "", "for", "loss_key", ",", "loss_value", "in", "avg_loss", ".", "items", "(", ")", ":", "\n", "      ", "avg_loss", "[", "loss_key", "]", "=", "loss_value", "/", "n_batches", "[", "loss_key", "]", "\n", "", "return", "avg_loss", ",", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.epoch_postprocess": [[177, 180], ["modelbase.ModelBase.lr_scheduler.step"], "methods", ["None"], ["", "def", "epoch_postprocess", "(", "self", ",", "epoch", ")", ":", "\n", "    ", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "      ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.decay_learning_rate": [[182, 186], ["None"], "methods", ["None"], ["", "", "def", "decay_learning_rate", "(", "self", ",", "optimizer", ",", "decay", "=", "0.99", ")", ":", "\n", "    ", "\"\"\"decay learning rate to the last LR\"\"\"", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "      ", "param_group", "[", "'lr'", "]", "=", "param_group", "[", "'lr'", "]", "*", "decay", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.train": [[188, 247], ["range", "modelbase.ModelBase.load_checkpoint", "modelbase.ModelBase.train_one_epoch", "modelbase.ModelBase.pretty_print_metrics", "max", "print", "print", "modelbase.ModelBase.save_checkpoint", "modelbase.ModelBase.validate", "modelbase.ModelBase.pretty_print_metrics", "print", "os.path.join", "open", "json.dump", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.load_checkpoint", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.train_one_epoch", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.pretty_print_metrics", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.save_checkpoint", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.validate", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.pretty_print_metrics"], ["", "", "def", "train", "(", "self", ",", "trn_reader", ",", "val_reader", ",", "model_dir", ",", "log_dir", ",", "resume_file", "=", "None", ")", ":", "\n", "    ", "assert", "self", ".", "optimizer", "is", "not", "None", "\n", "\n", "if", "resume_file", "is", "not", "None", ":", "\n", "      ", "self", ".", "load_checkpoint", "(", "resume_file", ")", "\n", "\n", "# first validate", "\n", "# metrics,_,_ = self.validate(val_reader)", "\n", "# self.pretty_print_metrics('init val', metrics)", "\n", "\n", "# training", "\n", "", "step", "=", "0", "\n", "###################################", "\n", "best_rsum", "=", "0", "\n", "no_impr_counter", "=", "0", "\n", "lr_counter", "=", "0", "\n", "###################################", "\n", "for", "epoch", "in", "range", "(", "self", ".", "config", ".", "num_epoch", ")", ":", "\n", "      ", "avg_loss", ",", "step", "=", "self", ".", "train_one_epoch", "(", "\n", "step", ",", "trn_reader", ",", "val_reader", ",", "model_dir", ",", "log_dir", ")", "\n", "self", ".", "pretty_print_metrics", "(", "'epoch (%d/%d) trn'", "%", "(", "epoch", ",", "self", ".", "config", ".", "num_epoch", ")", ",", "avg_loss", ")", "\n", "# self.epoch_postprocess(epoch) #################################", "\n", "\n", "if", "self", ".", "config", ".", "save_per_epoch", ":", "\n", "        ", "self", ".", "save_checkpoint", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'epoch.%d.th'", "%", "epoch", ")", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "val_per_epoch", ":", "\n", "        ", "metrics", "=", "self", ".", "validate", "(", "val_reader", ",", "step", "=", "step", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\n", "'val.epoch.%d.step.%d.json'", "%", "(", "epoch", ",", "step", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "          ", "json", ".", "dump", "(", "metrics", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "self", ".", "pretty_print_metrics", "(", "'epoch (%d/%d) val'", "%", "(", "epoch", ",", "self", ".", "config", ".", "num_epoch", ")", ",", "metrics", ")", "\n", "############################################################################", "\n", "# lr decay", "\n", "# remember best R@ sum and save checkpoint", "\n", "", "rsum", "=", "metrics", "[", "'rsum'", "]", "\n", "is_best", "=", "rsum", ">", "best_rsum", "\n", "best_rsum", "=", "max", "(", "rsum", ",", "best_rsum", ")", "\n", "print", "(", "' * Current perf: {:.2f}'", ".", "format", "(", "rsum", ")", ")", "\n", "print", "(", "' * Best perf: {:.2f}'", ".", "format", "(", "best_rsum", ")", ")", "\n", "\n", "lr_counter", "+=", "1", "\n", "# self.decay_learning_rate(self.optimizer)", "\n", "if", "not", "is_best", ":", "\n", "# When the validation performance decreased after an epoch,", "\n", "# we divide the learning rate by 2 and continue training;", "\n", "# but we use each learning rate for at least 3 epochs.", "\n", "        ", "if", "lr_counter", ">", "3", ":", "\n", "# self.decay_learning_rate(self.optimizer, 0.5)", "\n", "          ", "lr_counter", "=", "0", "\n", "\n", "# Early stop occurs if the validation performance does not improve in ten consecutive epochs", "\n", "", "", "if", "not", "is_best", ":", "\n", "        ", "no_impr_counter", "+=", "1", "\n", "", "else", ":", "\n", "        ", "no_impr_counter", "=", "0", "\n", "", "if", "no_impr_counter", ">", "10", ":", "\n", "        ", "print", "(", "'Early stopping happended.\\n'", ")", "\n", "break", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.logbase.set_logger": [[6, 28], ["os.path.exists", "logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.StreamHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "print", "print", "logging.Formatter", "logging.Formatter"], "function", ["None"], ["def", "set_logger", "(", "log_path", ",", "log_name", "=", "'training'", ")", ":", "\n", "  ", "if", "log_path", "is", "None", ":", "\n", "    ", "print", "(", "'log_path is empty'", ")", "\n", "return", "None", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "    ", "print", "(", "'%s already exists'", "%", "log_path", ")", "\n", "return", "None", "\n", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "log_name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "logfile", "=", "logging", ".", "FileHandler", "(", "log_path", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "logfile", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logfile", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "'%(asctime)s %(message)s'", ")", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "console", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "'%(asctime)s %(message)s'", ")", ")", "\n", "logger", ".", "addHandler", "(", "logfile", ")", "\n", "logger", ".", "addHandler", "(", "console", ")", "\n", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.ModuleConfig.__init__": [[13, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "freeze", "=", "False", "\n", "self", ".", "lr_mult", "=", "1.0", "\n", "self", ".", "opt_alg", "=", "'Adam'", "\n", "self", ".", "weight_decay", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.ModuleConfig.load_from_dict": [[19, 24], ["cfg_dict.items", "configbase.ModuleConfig._assert", "setattr"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.sentence.SentEncoderConfig._assert"], ["", "def", "load_from_dict", "(", "self", ",", "cfg_dict", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "cfg_dict", ".", "items", "(", ")", ":", "\n", "      ", "if", "key", "in", "self", ".", "__dict__", ":", "\n", "        ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "", "", "self", ".", "_assert", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.ModuleConfig.save_to_dict": [[25, 31], ["None"], "methods", ["None"], ["", "def", "save_to_dict", "(", "self", ")", ":", "\n", "    ", "out", "=", "{", "}", "\n", "for", "attr", "in", "self", ".", "__dict__", ":", "\n", "      ", "val", "=", "self", ".", "__dict__", "[", "attr", "]", "\n", "out", "[", "attr", "]", "=", "val", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.ModuleConfig._assert": [[32, 37], ["None"], "methods", ["None"], ["", "def", "_assert", "(", "self", ")", ":", "\n", "    ", "\"\"\"check compatibility between configs\n    \"\"\"", "\n", "# raise NotImplementedError(\"\"\"please customize %s._assert\"\"\"%(self.__class__.__name__))", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.ModelConfig.__init__": [[40, 57], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "subcfgs", "=", "{", "}", "# save configure of submodules", "\n", "\n", "self", ".", "trn_batch_size", "=", "128", "\n", "self", ".", "tst_batch_size", "=", "128", "\n", "self", ".", "num_epoch", "=", "100", "\n", "self", ".", "val_per_epoch", "=", "True", "\n", "self", ".", "save_per_epoch", "=", "True", "\n", "self", ".", "val_iter", "=", "-", "1", "\n", "self", ".", "save_iter", "=", "-", "1", "\n", "self", ".", "monitor_iter", "=", "-", "1", "\n", "self", ".", "summary_iter", "=", "-", "1", "# tensorboard summary", "\n", "\n", "self", ".", "base_lr", "=", "1e-4", "\n", "self", ".", "decay_schema", "=", "None", "#'MultiStepLR'", "\n", "self", ".", "decay_boundarys", "=", "[", "]", "\n", "self", ".", "decay_rate", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.ModelConfig.load": [[58, 67], ["json.load.items", "open", "json.load", "data[].items", "setattr", "configbase.ModelConfig.subcfgs[].load_from_dict"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.ModuleConfig.load_from_dict"], ["", "def", "load", "(", "self", ",", "cfg_file", ")", ":", "\n", "    ", "with", "open", "(", "cfg_file", ")", "as", "f", ":", "\n", "      ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "      ", "if", "key", "==", "'subcfgs'", ":", "\n", "        ", "for", "subname", ",", "subcfg", "in", "data", "[", "key", "]", ".", "items", "(", ")", ":", "\n", "          ", "self", ".", "subcfgs", "[", "subname", "]", ".", "load_from_dict", "(", "subcfg", ")", "\n", "", "", "else", ":", "\n", "        ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.ModelConfig.save": [[68, 79], ["open", "json.dump", "configbase.ModelConfig.__dict__[].items", "subcfg.save_to_dict"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.ModuleConfig.save_to_dict"], ["", "", "", "def", "save", "(", "self", ",", "out_file", ")", ":", "\n", "    ", "out", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "__dict__", ":", "\n", "      ", "if", "key", "==", "'subcfgs'", ":", "\n", "        ", "out", "[", "'subcfgs'", "]", "=", "{", "}", "\n", "for", "subname", ",", "subcfg", "in", "self", ".", "__dict__", "[", "'subcfgs'", "]", ".", "items", "(", ")", ":", "\n", "          ", "out", "[", "'subcfgs'", "]", "[", "subname", "]", "=", "subcfg", ".", "save_to_dict", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "out", "[", "key", "]", "=", "self", ".", "__dict__", "[", "key", "]", "\n", "", "", "with", "open", "(", "out_file", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "json", ".", "dump", "(", "out", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.__init__": [[82, 91], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "log_dir", "=", "''", "\n", "self", ".", "model_dir", "=", "''", "\n", "self", ".", "pred_dir", "=", "''", "\n", "\n", "self", ".", "log_file", "=", "''", "\n", "self", ".", "val_metric_file", "=", "''", "\n", "self", ".", "model_file", "=", "''", "\n", "self", ".", "predict_file", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load": [[92, 95], ["config_dict.items", "setattr"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "config_dict", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "config_dict", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.save": [[96, 102], ["configbase.PathCfg.__getattribute__", "open", "json.dump"], "methods", ["None"], ["", "", "def", "save", "(", "self", ",", "output_path", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "__dict__", ":", "\n", "      ", "data", "[", "key", "]", "=", "self", ".", "__getattribute__", "(", "key", ")", "\n", "", "with", "open", "(", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "json", ".", "dump", "(", "data", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.modules.embeddings.PositionalEncoding.__init__": [[19, 31], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().unsqueeze.float", "torch.arange().unsqueeze.float", "torch.arange().unsqueeze.float", "torch.arange().unsqueeze.float", "math.log"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["def", "__init__", "(", "self", ",", "dim_embed", ",", "max_len", "=", "100", ")", ":", "\n", "    ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "dim_embed", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "(", "torch", ".", "arange", "(", "0", ",", "dim_embed", ",", "2", ",", "dtype", "=", "torch", ".", "float", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "dim_embed", ")", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", ".", "float", "(", ")", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", ".", "float", "(", ")", "*", "div_term", ")", "\n", "\n", "self", ".", "pe", "=", "pe", "# size=(max_len, dim_embed)", "\n", "self", ".", "dim_embed", "=", "dim_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.modules.embeddings.PositionalEncoding.forward": [[32, 42], ["embeddings.PositionalEncoding.pe.to", "emb.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "emb", ",", "step", "=", "None", ")", ":", "\n", "    ", "if", "emb", ".", "device", "!=", "self", ".", "pe", ".", "device", ":", "\n", "      ", "self", ".", "pe", "=", "self", ".", "pe", ".", "to", "(", "emb", ".", "device", ")", "\n", "", "if", "step", "is", "None", ":", "\n", "# emb.size = (batch, seq_len, dim_embed)", "\n", "      ", "emb", "=", "emb", "+", "self", ".", "pe", "[", ":", "emb", ".", "size", "(", "1", ")", "]", "\n", "", "else", ":", "\n", "# emb.size = (batch, dim_embed)", "\n", "      ", "emb", "=", "emb", "+", "self", ".", "pe", "[", "step", "]", "\n", "", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.modules.embeddings.Embedding.__init__": [[51, 64], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "embeddings.Embedding.init_weight", "embeddings.PositionalEncoding"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__", "home.repos.pwc.inspect_result.Roc-Ng_HANet.modules.embeddings.Embedding.init_weight"], ["def", "__init__", "(", "self", ",", "word_vocab_size", ",", "word_vec_size", ",", "\n", "position_encoding", "=", "False", ",", "fix_word_embed", "=", "False", ",", "max_len", "=", "100", ")", ":", "\n", "    ", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "word_vec_size", "=", "word_vec_size", "\n", "self", ".", "we", "=", "nn", ".", "Embedding", "(", "word_vocab_size", ",", "word_vec_size", ")", "\n", "if", "fix_word_embed", ":", "\n", "      ", "self", ".", "we", ".", "weight", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "init_weight", "(", ")", "\n", "\n", "self", ".", "position_encoding", "=", "position_encoding", "\n", "if", "self", ".", "position_encoding", ":", "\n", "      ", "self", ".", "pe", "=", "PositionalEncoding", "(", "word_vec_size", ",", "max_len", "=", "max_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.modules.embeddings.Embedding.init_weight": [[65, 68], ["torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "", "def", "init_weight", "(", "self", ")", ":", "\n", "    ", "std", "=", "1.", "/", "(", "self", ".", "word_vec_size", "**", "0.5", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "we", ".", "weight", ",", "-", "std", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.modules.embeddings.Embedding.forward": [[69, 82], ["embeddings.Embedding.we", "embeddings.Embedding.pe"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "word_idxs", ",", "step", "=", "None", ")", ":", "\n", "    ", "\"\"\"Computes the embeddings for words.\n    Args:\n      word_idxs (`LongTensor`): index tensor \n        size = (batch, seq_len) or (batch, )\n    Return:\n      embeds: `FloatTensor`, \n        size = (batch, seq_len, dim_embed) or (batch, dim_embed)\n    \"\"\"", "\n", "embeds", "=", "self", ".", "we", "(", "word_idxs", ")", "\n", "if", "self", ".", "position_encoding", ":", "\n", "      ", "embeds", "=", "self", ".", "pe", "(", "embeds", ",", "step", "=", "step", ")", "\n", "", "return", "embeds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.modules.global_attention.GlobalAttention.__init__": [[34, 48], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["def", "__init__", "(", "self", ",", "query_size", ",", "attn_size", ",", "attn_type", "=", "'dot'", ")", ":", "\n", "    ", "super", "(", "GlobalAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "query_size", "=", "query_size", "\n", "self", ".", "attn_size", "=", "attn_size", "\n", "self", ".", "attn_type", "=", "attn_type", "\n", "\n", "if", "self", ".", "attn_type", "==", "'general'", ":", "\n", "      ", "self", ".", "linear_in", "=", "nn", ".", "Linear", "(", "query_size", ",", "attn_size", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "'mlp'", ":", "\n", "      ", "self", ".", "linear_query", "=", "nn", ".", "Linear", "(", "query_size", ",", "attn_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "attn_w", "=", "nn", ".", "Linear", "(", "attn_size", ",", "1", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "'dot'", ":", "\n", "      ", "assert", "self", ".", "query_size", "==", "self", ".", "attn_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.modules.global_attention.GlobalAttention.forward": [[49, 88], ["memory_keys.size", "torch.bmm.squeeze", "torch.bmm.squeeze", "torch.bmm.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "global_attention.GlobalAttention.linear_query().expand", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "global_attention.GlobalAttention.attn_w", "torch.bmm.masked_fill", "torch.bmm.masked_fill", "torch.bmm.masked_fill", "torch.bmm.masked_fill", "torch.bmm.masked_fill", "torch.bmm.masked_fill", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.unsqueeze", "torch.bmm.unsqueeze", "torch.bmm.unsqueeze", "global_attention.GlobalAttention.linear_query", "query.unsqueeze", "global_attention.GlobalAttention.linear_in", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "query.unsqueeze", "global_attention.GlobalAttention.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "query", ",", "memory_keys", ",", "memory_values", ",", "memory_masks", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      query (`FloatTensor`): (batch, query_size)\n      memory_keys (`FloatTensor`): (batch, seq_len, attn_size)\n      memory_values (`FloatTensor`): (batch, seq_len, attn_size)\n      memory_masks (`LongTensor`): (batch, seq_len)\n\n    Returns:\n      attn_score: attention distributions (batch, seq_len)\n      attn_memory: computed context vector, (batch, attn_size)\n    \"\"\"", "\n", "batch_size", ",", "seq_len", ",", "attn_size", "=", "memory_keys", ".", "size", "(", ")", "\n", "\n", "if", "self", ".", "attn_type", "==", "'mlp'", ":", "\n", "      ", "query_hidden", "=", "self", ".", "linear_query", "(", "query", ".", "unsqueeze", "(", "1", ")", ")", ".", "expand", "(", "\n", "batch_size", ",", "seq_len", ",", "attn_size", ")", "\n", "# attn_hidden: # (batch, seq_len, attn_size)", "\n", "attn_hidden", "=", "torch", ".", "tanh", "(", "query_hidden", "+", "memory_keys", ")", "\n", "# attn_score: (batch, seq_len, 1)", "\n", "attn_score", "=", "self", ".", "attn_w", "(", "attn_hidden", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "'dot'", ":", "\n", "# attn_score: (batch, seq_len, 1)", "\n", "      ", "attn_score", "=", "torch", ".", "bmm", "(", "memory_keys", ",", "query", ".", "unsqueeze", "(", "2", ")", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "'general'", ":", "\n", "      ", "query_hidden", "=", "self", ".", "linear_in", "(", "query", ")", "\n", "attn_score", "=", "torch", ".", "bmm", "(", "memory_keys", ",", "query_hidden", ".", "unsqueeze", "(", "2", ")", ")", "\n", "\n", "# attn_score: (batch, seq_len)", "\n", "", "attn_score", "=", "attn_score", ".", "squeeze", "(", "2", ")", "\n", "if", "memory_masks", "is", "not", "None", ":", "\n", "      ", "attn_score", "=", "attn_score", "*", "memory_masks", "# memory mask [0, 1]", "\n", "attn_score", "=", "attn_score", ".", "masked_fill", "(", "memory_masks", "==", "0", ",", "-", "1e18", ")", "\n", "", "attn_score", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "# make sure no item is attended when all memory_masks are all zeros", "\n", "if", "memory_masks", "is", "not", "None", ":", "\n", "      ", "attn_score", "=", "attn_score", ".", "masked_fill", "(", "memory_masks", "==", "0", ",", "0", ")", "\n", "", "attn_memory", "=", "torch", ".", "sum", "(", "attn_score", ".", "unsqueeze", "(", "2", ")", "*", "memory_values", ",", "1", ")", "\n", "return", "attn_score", ",", "attn_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.modules.global_attention.AdaptiveAttention.__init__": [[91, 102], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ",", "query_size", ",", "attn_size", ")", ":", "\n", "    ", "super", "(", "AdaptiveAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "query_size", "=", "query_size", "\n", "self", ".", "attn_size", "=", "attn_size", "\n", "\n", "self", ".", "query_attn_conv", "=", "nn", ".", "Conv1d", "(", "query_size", ",", "\n", "attn_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "sentinel_attn_conv", "=", "nn", ".", "Conv1d", "(", "query_size", ",", "\n", "attn_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "attn_w", "=", "nn", ".", "Conv1d", "(", "attn_size", ",", "1", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.modules.global_attention.AdaptiveAttention.forward": [[103, 118], ["memory_keys.size", "global_attention.AdaptiveAttention.query_attn_conv", "global_attention.AdaptiveAttention.sentinel_attn_conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "global_attention.AdaptiveAttention.attn_w().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "query.unsqueeze", "sentinel.unsqueeze", "global_attention.AdaptiveAttention.attn_w", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "attn_score[].unsqueeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query", ",", "memory_keys", ",", "memory_values", ",", "memory_masks", ",", "sentinel", ")", ":", "\n", "    ", "batch_size", ",", "_", ",", "enc_seq_len", "=", "memory_keys", ".", "size", "(", ")", "\n", "\n", "query_hidden", "=", "self", ".", "query_attn_conv", "(", "query", ".", "unsqueeze", "(", "2", ")", ")", "\n", "sentinel_hidden", "=", "self", ".", "sentinel_attn_conv", "(", "sentinel", ".", "unsqueeze", "(", "2", ")", ")", "\n", "\n", "memory_keys_sentinel", "=", "torch", ".", "cat", "(", "[", "memory_keys", ",", "sentinel_hidden", "]", ",", "dim", "=", "2", ")", "\n", "attn_score", "=", "self", ".", "attn_w", "(", "F", ".", "tanh", "(", "query_hidden", "+", "memory_keys_sentinel", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "attn_score", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "masks", "=", "torch", ".", "cat", "(", "[", "memory_masks", ",", "torch", ".", "ones", "(", "batch_size", ",", "1", ")", ".", "to", "(", "memory_masks", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "attn_score", "=", "attn_score", "*", "masks", "\n", "attn_score", "=", "attn_score", "/", "(", "torch", ".", "sum", "(", "attn_score", ",", "1", ",", "keepdim", "=", "True", ")", "+", "1e-10", ")", "\n", "attn_memory", "=", "torch", ".", "sum", "(", "attn_score", "[", ":", ",", ":", "-", "1", "]", ".", "unsqueeze", "(", "1", ")", "*", "memory_values", ",", "2", ")", "\n", "attn_memory", "=", "attn_memory", "+", "attn_score", "[", ":", ",", "-", "1", ":", "]", "*", "sentinel", "\n", "return", "attn_score", ",", "attn_memory", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.miscs.semantic_role_labeling.main": [[7, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "allennlp.predictors.predictor.Predictor.from_path", "json.load", "set", "json.load.items", "list", "print", "os.path.exists", "enumerate", "open", "len", "json.load", "open", "json.dump", "list.add", "open", "Predictor.from_path.predict_tokenized", "print", "sent.split", "len", "len"], "function", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load"], ["def", "main", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'ref_caption_file'", ")", "\n", "parser", ".", "add_argument", "(", "'out_file'", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda_device'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ")", "\n", "opts", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "predictor", "=", "Predictor", ".", "from_path", "(", "\"https://s3-us-west-2.amazonaws.com/allennlp/models/bert-base-srl-2019.06.17.tar.gz\"", ",", "cuda_device", "=", "opts", ".", "cuda_device", ")", "\n", "\n", "ref_caps", "=", "json", ".", "load", "(", "open", "(", "opts", ".", "ref_caption_file", ")", ")", "\n", "uniq_sents", "=", "set", "(", ")", "\n", "for", "key", ",", "sents", "in", "ref_caps", ".", "items", "(", ")", ":", "\n", "    ", "for", "sent", "in", "sents", ":", "\n", "      ", "uniq_sents", ".", "add", "(", "sent", ")", "\n", "", "", "uniq_sents", "=", "list", "(", "uniq_sents", ")", "\n", "print", "(", "'unique sents'", ",", "len", "(", "uniq_sents", ")", ")", "\n", "\n", "outs", "=", "{", "}", "\n", "if", "os", ".", "path", ".", "exists", "(", "opts", ".", "out_file", ")", ":", "\n", "    ", "outs", "=", "json", ".", "load", "(", "open", "(", "opts", ".", "out_file", ")", ")", "\n", "", "for", "i", ",", "sent", "in", "enumerate", "(", "uniq_sents", ")", ":", "\n", "    ", "if", "sent", "in", "outs", ":", "\n", "      ", "continue", "\n", "", "try", ":", "\n", "      ", "out", "=", "predictor", ".", "predict_tokenized", "(", "sent", ".", "split", "(", ")", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "      ", "break", "\n", "", "except", ":", "\n", "      ", "continue", "\n", "", "outs", "[", "sent", "]", "=", "out", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "      ", "print", "(", "'finish %d / %d = %.2f%%'", "%", "(", "i", ",", "len", "(", "uniq_sents", ")", ",", "i", "/", "len", "(", "uniq_sents", ")", "*", "100", ")", ")", "\n", "\n", "", "", "with", "open", "(", "opts", ".", "out_file", ",", "'w'", ")", "as", "f", ":", "\n", "    ", "json", ".", "dump", "(", "outs", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.driver.multilevel_match.main": [[14, 118], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "framework.run_utils.gen_common_pathcfg", "framework.run_utils.gen_common_pathcfg", "t2vretrieval.models.mlmatch.RoleGraphMatchModelConfig", "t2vretrieval.models.mlmatch.RoleGraphMatchModelConfig", "t2vretrieval.models.mlmatch.RoleGraphMatchModelConfig.load", "model_fn", "framework.logbase.set_logger", "framework.logbase.set_logger", "t2vretrieval.models.mlmatch.RoleGraphMatchModelConfig.save", "framework.run_utils.gen_common_pathcfg.save", "json.dump", "dataset_fn", "torch.DataLoader", "dataset_fn", "torch.DataLoader", "model_fn.train", "dataset_fn", "torch.DataLoader", "framework.run_utils.find_best_val_models.items", "os.path.join", "os.path.join", "vars", "open", "framework.run_utils.find_best_val_models", "framework.run_utils.find_best_val_models", "os.path.join", "os.path.join", "model_fn.test", "len", "os.path.join", "time.time", "os.path.join", "os.path.exists", "os.makedirs", "print", "model_str_scores.append", "open", "_model.test.keys", "model_str_scores.append", "print", "os.path.basename", "str_scores.append", "print", "os.path.splitext", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.run_utils.gen_common_pathcfg", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.run_utils.gen_common_pathcfg", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.logbase.set_logger", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.logbase.set_logger", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.save", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.save", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.train", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.run_utils.find_best_val_models", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.run_utils.find_best_val_models", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.test"], ["def", "main", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'model_cfg_file'", ")", "\n", "parser", ".", "add_argument", "(", "'path_cfg_file'", ")", "\n", "parser", ".", "add_argument", "(", "'--is_train'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_file'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_set'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--load_video_first'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "opts", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "path_cfg", "=", "framework", ".", "run_utils", ".", "gen_common_pathcfg", "(", "\n", "opts", ".", "path_cfg_file", ",", "is_train", "=", "opts", ".", "is_train", ")", "\n", "if", "path_cfg", ".", "log_file", "is", "not", "None", ":", "\n", "    ", "_logger", "=", "framework", ".", "logbase", ".", "set_logger", "(", "path_cfg", ".", "log_file", ",", "'trn_%f'", "%", "time", ".", "time", "(", ")", ")", "\n", "", "else", ":", "\n", "    ", "_logger", "=", "None", "\n", "\n", "", "model_cfg", "=", "t2vretrieval", ".", "models", ".", "mlmatch", ".", "RoleGraphMatchModelConfig", "(", ")", "\n", "model_fn", "=", "t2vretrieval", ".", "models", ".", "mlmatch", ".", "RoleGraphMatchModel", "\n", "dataset_fn", "=", "t2vretrieval", ".", "readers", ".", "rolegraphs", ".", "RoleGraphDataset", "\n", "\n", "model_cfg", ".", "load", "(", "opts", ".", "model_cfg_file", ")", "\n", "_model", "=", "model_fn", "(", "model_cfg", ",", "_logger", "=", "_logger", ")", "\n", "\n", "collate_fn", "=", "t2vretrieval", ".", "readers", ".", "rolegraphs", ".", "collate_graph_fn", "\n", "\n", "if", "opts", ".", "is_train", ":", "\n", "    ", "model_cfg", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path_cfg", ".", "log_dir", ",", "'model.cfg'", ")", ")", "\n", "path_cfg", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path_cfg", ".", "log_dir", ",", "'path.cfg'", ")", ")", "\n", "json", ".", "dump", "(", "vars", "(", "opts", ")", ",", "open", "(", "os", ".", "path", ".", "join", "(", "path_cfg", ".", "log_dir", ",", "'opts.cfg'", ")", ",", "'w'", ")", ",", "indent", "=", "2", ")", "\n", "\n", "trn_dataset", "=", "dataset_fn", "(", "path_cfg", ".", "name_file", "[", "'trn'", "]", ",", "\n", "path_cfg", ".", "attn_ft_files", "[", "'trn'", "]", ",", "path_cfg", ".", "word2int_file", ",", "model_cfg", ".", "max_words_in_sent", ",", "\n", "model_cfg", ".", "num_verbs", ",", "model_cfg", ".", "num_nouns", ",", "\n", "path_cfg", ".", "ref_caption_file", "[", "'trn'", "]", ",", "path_cfg", ".", "ref_graph_file", "[", "'trn'", "]", ",", "\n", "path_cfg", ".", "verb_concept_file", ",", "path_cfg", ".", "noun_concept_file", ",", "#################", "\n", "path_cfg", ".", "verb_concept_all_file", ",", "path_cfg", ".", "noun_concept_all_file", ",", "\n", "is_train", "=", "True", ",", "_logger", "=", "_logger", ",", "\n", "max_attn_len", "=", "model_cfg", ".", "max_frames_in_video", ",", "load_video_first", "=", "opts", ".", "load_video_first", ")", "\n", "trn_reader", "=", "dataloader", ".", "DataLoader", "(", "trn_dataset", ",", "batch_size", "=", "model_cfg", ".", "trn_batch_size", ",", "\n", "shuffle", "=", "True", ",", "collate_fn", "=", "collate_fn", ",", "num_workers", "=", "opts", ".", "num_workers", ")", "\n", "val_dataset", "=", "dataset_fn", "(", "path_cfg", ".", "name_file", "[", "'val'", "]", ",", "\n", "path_cfg", ".", "attn_ft_files", "[", "'val'", "]", ",", "path_cfg", ".", "word2int_file", ",", "model_cfg", ".", "max_words_in_sent", ",", "\n", "model_cfg", ".", "num_verbs", ",", "model_cfg", ".", "num_nouns", ",", "\n", "path_cfg", ".", "ref_caption_file", "[", "'val'", "]", ",", "path_cfg", ".", "ref_graph_file", "[", "'val'", "]", ",", "\n", "verb_concept_file", "=", "None", ",", "noun_concept_file", "=", "None", ",", "\n", "verb_concept_all_file", "=", "None", ",", "noun_concept_all_file", "=", "None", ",", "\n", "is_train", "=", "False", ",", "_logger", "=", "_logger", ",", "\n", "max_attn_len", "=", "model_cfg", ".", "max_frames_in_video", ",", "load_video_first", "=", "opts", ".", "load_video_first", ")", "\n", "val_reader", "=", "dataloader", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "model_cfg", ".", "tst_batch_size", ",", "\n", "shuffle", "=", "False", ",", "collate_fn", "=", "collate_fn", ",", "num_workers", "=", "opts", ".", "num_workers", ")", "\n", "\n", "_model", ".", "train", "(", "trn_reader", ",", "val_reader", ",", "path_cfg", ".", "model_dir", ",", "path_cfg", ".", "log_dir", ",", "\n", "resume_file", "=", "opts", ".", "resume_file", ")", "\n", "\n", "", "else", ":", "\n", "    ", "tst_dataset", "=", "dataset_fn", "(", "path_cfg", ".", "name_file", "[", "opts", ".", "eval_set", "]", ",", "\n", "path_cfg", ".", "attn_ft_files", "[", "opts", ".", "eval_set", "]", ",", "path_cfg", ".", "word2int_file", ",", "model_cfg", ".", "max_words_in_sent", ",", "\n", "model_cfg", ".", "num_verbs", ",", "model_cfg", ".", "num_nouns", ",", "\n", "path_cfg", ".", "ref_caption_file", "[", "opts", ".", "eval_set", "]", ",", "path_cfg", ".", "ref_graph_file", "[", "opts", ".", "eval_set", "]", ",", "\n", "verb_concept_file", "=", "None", ",", "noun_concept_file", "=", "None", ",", "\n", "verb_concept_all_file", "=", "None", ",", "noun_concept_all_file", "=", "None", ",", "\n", "is_train", "=", "False", ",", "_logger", "=", "_logger", ",", "\n", "max_attn_len", "=", "model_cfg", ".", "max_frames_in_video", ",", "load_video_first", "=", "opts", ".", "load_video_first", ")", "\n", "tst_reader", "=", "dataloader", ".", "DataLoader", "(", "tst_dataset", ",", "batch_size", "=", "model_cfg", ".", "tst_batch_size", ",", "\n", "shuffle", "=", "False", ",", "collate_fn", "=", "collate_fn", ",", "num_workers", "=", "opts", ".", "num_workers", ")", "\n", "\n", "model_str_scores", "=", "[", "]", "\n", "is_first_eval", "=", "True", "\n", "if", "opts", ".", "resume_file", "is", "None", ":", "\n", "      ", "model_files", "=", "framework", ".", "run_utils", ".", "find_best_val_models", "(", "path_cfg", ".", "log_dir", ",", "path_cfg", ".", "model_dir", ")", "\n", "", "else", ":", "\n", "      ", "model_files", "=", "{", "'predefined'", ":", "opts", ".", "resume_file", "}", "\n", "\n", "", "for", "measure_name", ",", "model_file", "in", "model_files", ".", "items", "(", ")", ":", "\n", "      ", "if", "'predefined'", "not", "in", "measure_name", "and", "'rsum'", "not", "in", "measure_name", ":", "\n", "        ", "continue", "\n", "", "set_pred_dir", "=", "os", ".", "path", ".", "join", "(", "path_cfg", ".", "pred_dir", ",", "opts", ".", "eval_set", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "set_pred_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "set_pred_dir", ")", "\n", "", "tst_pred_file", "=", "os", ".", "path", ".", "join", "(", "set_pred_dir", ",", "\n", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "model_file", ")", ")", "[", "0", "]", "+", "'.npy'", ")", "\n", "\n", "scores", "=", "_model", ".", "test", "(", "tst_reader", ",", "tst_pred_file", ",", "tst_model_file", "=", "model_file", ")", "\n", "\n", "if", "scores", "is", "not", "None", ":", "\n", "        ", "if", "is_first_eval", ":", "\n", "          ", "score_names", "=", "scores", ".", "keys", "(", ")", "\n", "model_str_scores", ".", "append", "(", "','", ".", "join", "(", "score_names", ")", ")", "\n", "is_first_eval", "=", "False", "\n", "print", "(", "model_str_scores", "[", "-", "1", "]", ")", "\n", "", "str_scores", "=", "[", "measure_name", ",", "os", ".", "path", ".", "basename", "(", "model_file", ")", "]", "\n", "for", "score_name", "in", "score_names", ":", "\n", "          ", "str_scores", ".", "append", "(", "'%.2f'", "%", "(", "scores", "[", "score_name", "]", ")", ")", "\n", "", "str_scores", "=", "','", ".", "join", "(", "str_scores", ")", "\n", "print", "(", "str_scores", ")", "\n", "model_str_scores", ".", "append", "(", "str_scores", ")", "\n", "\n", "", "", "if", "len", "(", "model_str_scores", ")", ">", "0", ":", "\n", "      ", "score_log_file", "=", "os", ".", "path", ".", "join", "(", "path_cfg", ".", "pred_dir", ",", "opts", ".", "eval_set", ",", "'scores.csv'", ")", "\n", "with", "open", "(", "score_log_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "str_scores", "in", "model_str_scores", ":", "\n", "          ", "print", "(", "str_scores", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModelConfig.__init__": [[19, 30], ["super().__init__", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.video.MPEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig", "t2vretrieval.encoders.sentence.SentEncoderConfig"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_frames_in_video", "=", "None", "\n", "self", ".", "max_words_in_sent", "=", "30", "\n", "self", ".", "margin", "=", "0.2", "\n", "self", ".", "max_violation", "=", "False", "\n", "self", ".", "hard_topk", "=", "1", "\n", "self", ".", "loss_direction", "=", "'bi'", "\n", "\n", "self", ".", "subcfgs", "[", "VISENC", "]", "=", "t2vretrieval", ".", "encoders", ".", "video", ".", "MPEncoderConfig", "(", ")", "\n", "self", ".", "subcfgs", "[", "TXTENC", "]", "=", "t2vretrieval", ".", "encoders", ".", "sentence", ".", "SentEncoderConfig", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.build_submods": [[32, 38], ["t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.video.MPEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder", "t2vretrieval.encoders.sentence.SentEncoder"], "methods", ["None"], ["  ", "def", "build_submods", "(", "self", ")", ":", "\n", "    ", "submods", "=", "{", "\n", "VISENC", ":", "t2vretrieval", ".", "encoders", ".", "video", ".", "MPEncoder", "(", "self", ".", "config", ".", "subcfgs", "[", "VISENC", "]", ")", ",", "\n", "TXTENC", ":", "t2vretrieval", ".", "encoders", ".", "sentence", ".", "SentEncoder", "(", "self", ".", "config", ".", "subcfgs", "[", "TXTENC", "]", ")", ",", "\n", "}", "\n", "return", "submods", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.build_loss": [[39, 46], ["t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss", "t2vretrieval.models.criterion.ContrastiveLoss"], "methods", ["None"], ["", "def", "build_loss", "(", "self", ")", ":", "\n", "    ", "criterion", "=", "t2vretrieval", ".", "models", ".", "criterion", ".", "ContrastiveLoss", "(", "\n", "margin", "=", "self", ".", "config", ".", "margin", ",", "\n", "max_violation", "=", "self", ".", "config", ".", "max_violation", ",", "\n", "topk", "=", "self", ".", "config", ".", "hard_topk", ",", "\n", "direction", "=", "self", ".", "config", ".", "loss_direction", ")", "\n", "return", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.forward_video_embed": [[47, 51], ["torch.FloatTensor().to", "torch.FloatTensor"], "methods", ["None"], ["", "def", "forward_video_embed", "(", "self", ",", "batch_data", ")", ":", "\n", "    ", "vid_fts", "=", "torch", ".", "FloatTensor", "(", "batch_data", "[", "'mp_fts'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "vid_embeds", "=", "self", ".", "submods", "[", "VISENC", "]", "(", "vid_fts", ")", "\n", "return", "{", "'vid_embeds'", ":", "vid_embeds", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.forward_text_embed": [[52, 57], ["torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "forward_text_embed", "(", "self", ",", "batch_data", ")", ":", "\n", "    ", "cap_ids", "=", "torch", ".", "LongTensor", "(", "batch_data", "[", "'caption_ids'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "cap_lens", "=", "torch", ".", "LongTensor", "(", "batch_data", "[", "'caption_lens'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "cap_embeds", "=", "self", ".", "submods", "[", "TXTENC", "]", "(", "cap_ids", ",", "cap_lens", ")", "\n", "return", "{", "'cap_embeds'", ":", "cap_embeds", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.generate_scores": [[58, 64], ["t2vretrieval.models.criterion.cosine_sim", "t2vretrieval.models.criterion.cosine_sim", "t2vretrieval.models.criterion.cosine_sim", "t2vretrieval.models.criterion.cosine_sim"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.models.criterion.cosine_sim", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.criterion.cosine_sim", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.criterion.cosine_sim", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.criterion.cosine_sim"], ["", "def", "generate_scores", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# compute image-sentence similarity", "\n", "    ", "vid_embeds", "=", "kwargs", "[", "'vid_embeds'", "]", "\n", "cap_embeds", "=", "kwargs", "[", "'cap_embeds'", "]", "\n", "scores", "=", "cosine_sim", "(", "vid_embeds", ",", "cap_embeds", ")", "# s[i, j] i: im_idx, j: s_idx", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.forward_loss": [[65, 79], ["globalmatch.GlobalMatchModel.forward_video_embed", "globalmatch.GlobalMatchModel.forward_text_embed", "globalmatch.GlobalMatchModel.update", "globalmatch.GlobalMatchModel.generate_scores", "globalmatch.GlobalMatchModel.criterion", "globalmatch.GlobalMatchModel.masked_fill", "globalmatch.GlobalMatchModel.print_fn", "torch.eye().to", "torch.eye", "torch.mean", "torch.mean", "torch.mean", "len", "torch.diag", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.forward_video_embed", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.forward_text_embed", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.generate_scores"], ["", "def", "forward_loss", "(", "self", ",", "batch_data", ",", "step", "=", "None", ")", ":", "\n", "    ", "vid_enc_outs", "=", "self", ".", "forward_video_embed", "(", "batch_data", ")", "\n", "cap_enc_outs", "=", "self", ".", "forward_text_embed", "(", "batch_data", ")", "\n", "cap_enc_outs", ".", "update", "(", "vid_enc_outs", ")", "\n", "scores", "=", "self", ".", "generate_scores", "(", "**", "cap_enc_outs", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "scores", ")", "\n", "\n", "if", "step", "is", "not", "None", "and", "self", ".", "config", ".", "monitor_iter", ">", "0", "and", "step", "%", "self", ".", "config", ".", "monitor_iter", "==", "0", ":", "\n", "      ", "neg_scores", "=", "scores", ".", "masked_fill", "(", "torch", ".", "eye", "(", "len", "(", "scores", ")", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "to", "(", "self", ".", "device", ")", ",", "-", "1e10", ")", "\n", "self", ".", "print_fn", "(", "'\\tstep %d: pos mean scores %.2f, hard neg mean scores i2t %.2f, t2i %.2f'", "%", "(", "\n", "step", ",", "torch", ".", "mean", "(", "torch", ".", "diag", "(", "scores", ")", ")", ",", "torch", ".", "mean", "(", "torch", ".", "max", "(", "neg_scores", ",", "1", ")", "[", "0", "]", ")", ",", "\n", "torch", ".", "mean", "(", "torch", ".", "max", "(", "neg_scores", ",", "0", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.evaluate_scores": [[80, 95], ["numpy.concatenate", "vid_names.extend", "globalmatch.GlobalMatchModel.forward_video_embed", "numpy.concatenate.append", "tst_reader.dataset.iterate_over_captions", "numpy.concatenate", "globalmatch.GlobalMatchModel.forward_text_embed", "globalmatch.GlobalMatchModel.update", "globalmatch.GlobalMatchModel.generate_scores", "all_scores[].append", "globalmatch.GlobalMatchModel.data.cpu().numpy", "globalmatch.GlobalMatchModel.data.cpu"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.forward_video_embed", "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.iterate_over_captions", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.forward_text_embed", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.generate_scores"], ["", "def", "evaluate_scores", "(", "self", ",", "tst_reader", ")", ":", "\n", "    ", "vid_names", ",", "all_scores", "=", "[", "]", ",", "[", "]", "\n", "cap_names", "=", "tst_reader", ".", "dataset", ".", "captions", "\n", "for", "vid_data", "in", "tst_reader", ":", "\n", "      ", "vid_names", ".", "extend", "(", "vid_data", "[", "'names'", "]", ")", "\n", "vid_enc_outs", "=", "self", ".", "forward_video_embed", "(", "vid_data", ")", "\n", "all_scores", ".", "append", "(", "[", "]", ")", "\n", "for", "cap_data", "in", "tst_reader", ".", "dataset", ".", "iterate_over_captions", "(", "self", ".", "config", ".", "tst_batch_size", ")", ":", "\n", "        ", "cap_enc_outs", "=", "self", ".", "forward_text_embed", "(", "cap_data", ")", "\n", "cap_enc_outs", ".", "update", "(", "vid_enc_outs", ")", "\n", "scores", "=", "self", ".", "generate_scores", "(", "**", "cap_enc_outs", ")", "\n", "all_scores", "[", "-", "1", "]", ".", "append", "(", "scores", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "all_scores", "[", "-", "1", "]", "=", "np", ".", "concatenate", "(", "all_scores", "[", "-", "1", "]", ",", "axis", "=", "1", ")", "\n", "", "all_scores", "=", "np", ".", "concatenate", "(", "all_scores", ",", "axis", "=", "0", ")", "# (n_img, n_cap)", "\n", "return", "vid_names", ",", "cap_names", ",", "all_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.calculate_metrics": [[96, 118], ["t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "t2vretrieval.models.evaluation.eval_q2m", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m"], ["", "def", "calculate_metrics", "(", "self", ",", "scores", ",", "i2t_gts", ",", "t2i_gts", ")", ":", "\n", "# caption retrieval", "\n", "    ", "cr1", ",", "cr5", ",", "cr10", ",", "cmedr", ",", "cmeanr", "=", "t2vretrieval", ".", "models", ".", "evaluation", ".", "eval_q2m", "(", "scores", ",", "i2t_gts", ")", "\n", "# image retrieval", "\n", "ir1", ",", "ir5", ",", "ir10", ",", "imedr", ",", "imeanr", "=", "t2vretrieval", ".", "models", ".", "evaluation", ".", "eval_q2m", "(", "scores", ".", "T", ",", "t2i_gts", ")", "\n", "# sum of recalls to be used for early stopping", "\n", "rsum", "=", "cr1", "+", "cr5", "+", "cr10", "+", "ir1", "+", "ir5", "+", "ir10", "\n", "\n", "metrics", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "metrics", "[", "'ir1'", "]", "=", "ir1", "\n", "metrics", "[", "'ir5'", "]", "=", "ir5", "\n", "metrics", "[", "'ir10'", "]", "=", "ir10", "\n", "metrics", "[", "'imedr'", "]", "=", "imedr", "\n", "metrics", "[", "'imeanr'", "]", "=", "imeanr", "\n", "metrics", "[", "'cr1'", "]", "=", "cr1", "\n", "metrics", "[", "'cr5'", "]", "=", "cr5", "\n", "metrics", "[", "'cr10'", "]", "=", "cr10", "\n", "metrics", "[", "'cmedr'", "]", "=", "cmedr", "\n", "metrics", "[", "'cmeanr'", "]", "=", "cmeanr", "\n", "metrics", "[", "'rsum'", "]", "=", "rsum", "\n", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.evaluate": [[119, 145], ["globalmatch.GlobalMatchModel.evaluate_scores", "enumerate", "globalmatch.GlobalMatchModel.calculate_metrics", "i2t_gts.append", "enumerate", "t2i_gts.setdefault", "t2i_gts[].append", "i2t_gts[].append"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.evaluate_scores", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.calculate_metrics"], ["", "def", "evaluate", "(", "self", ",", "tst_reader", ",", "return_outs", "=", "False", ")", ":", "\n", "    ", "vid_names", ",", "cap_names", ",", "scores", "=", "self", ".", "evaluate_scores", "(", "tst_reader", ")", "\n", "\n", "i2t_gts", "=", "[", "]", "\n", "for", "vid_name", "in", "vid_names", ":", "\n", "      ", "i2t_gts", ".", "append", "(", "[", "]", ")", "\n", "for", "i", ",", "cap_name", "in", "enumerate", "(", "cap_names", ")", ":", "\n", "        ", "if", "cap_name", "in", "tst_reader", ".", "dataset", ".", "ref_captions", "[", "vid_name", "]", ":", "\n", "          ", "i2t_gts", "[", "-", "1", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "", "t2i_gts", "=", "{", "}", "\n", "for", "i", ",", "t_gts", "in", "enumerate", "(", "i2t_gts", ")", ":", "\n", "      ", "for", "t_gt", "in", "t_gts", ":", "\n", "        ", "t2i_gts", ".", "setdefault", "(", "t_gt", ",", "[", "]", ")", "\n", "t2i_gts", "[", "t_gt", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "metrics", "=", "self", ".", "calculate_metrics", "(", "scores", ",", "i2t_gts", ",", "t2i_gts", ")", "\n", "if", "return_outs", ":", "\n", "      ", "outs", "=", "{", "\n", "'vid_names'", ":", "vid_names", ",", "\n", "'cap_names'", ":", "cap_names", ",", "\n", "'scores'", ":", "scores", ",", "\n", "}", "\n", "return", "metrics", ",", "outs", "\n", "", "else", ":", "\n", "      ", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.validate": [[146, 150], ["globalmatch.GlobalMatchModel.eval_start", "globalmatch.GlobalMatchModel.evaluate"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.eval_start", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.evaluate"], ["", "", "def", "validate", "(", "self", ",", "val_reader", ",", "step", "=", "None", ")", ":", "\n", "    ", "self", ".", "eval_start", "(", ")", "\n", "metrics", "=", "self", ".", "evaluate", "(", "val_reader", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.test": [[151, 169], ["globalmatch.GlobalMatchModel.eval_start", "globalmatch.GlobalMatchModel.load_checkpoint", "globalmatch.GlobalMatchModel.evaluate_scores", "globalmatch.GlobalMatchModel.evaluate"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.eval_start", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.modelbase.ModelBase.load_checkpoint", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.evaluate_scores", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.evaluate"], ["", "def", "test", "(", "self", ",", "tst_reader", ",", "tst_pred_file", ",", "tst_model_file", "=", "None", ")", ":", "\n", "    ", "if", "tst_model_file", "is", "not", "None", ":", "\n", "      ", "self", ".", "load_checkpoint", "(", "tst_model_file", ")", "\n", "", "self", ".", "eval_start", "(", ")", "\n", "\n", "if", "tst_reader", ".", "dataset", ".", "ref_captions", "is", "None", ":", "\n", "      ", "vid_names", ",", "cap_names", ",", "scores", "=", "self", ".", "evaluate_scores", "(", "tst_reader", ")", "\n", "outs", "=", "{", "\n", "'vid_names'", ":", "vid_names", ",", "\n", "'cap_names'", ":", "cap_names", ",", "\n", "'scores'", ":", "scores", ",", "\n", "}", "\n", "metrics", "=", "None", "\n", "", "else", ":", "\n", "      ", "metrics", ",", "outs", "=", "self", ".", "evaluate", "(", "tst_reader", ",", "return_outs", "=", "True", ")", "\n", "\n", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModelConfig.__init__": [[13, 28], ["super().__init__", "t2vretrieval.encoders.mlvideo.MultilevelEncoderConfig", "t2vretrieval.encoders.mlvideo.MultilevelEncoderConfig", "t2vretrieval.encoders.mlvideo.MultilevelEncoderConfig", "t2vretrieval.encoders.mlvideo.MultilevelEncoderConfig", "t2vretrieval.encoders.mlvideo.MultilevelEncoderConfig", "t2vretrieval.encoders.mlvideo.MultilevelEncoderConfig", "t2vretrieval.encoders.mlvideo.MultilevelEncoderConfig", "t2vretrieval.encoders.mlvideo.MultilevelEncoderConfig", "t2vretrieval.encoders.mlvideo.MultilevelEncoderConfig", "t2vretrieval.encoders.mlsent.RoleGraphEncoderConfig", "t2vretrieval.encoders.mlsent.RoleGraphEncoderConfig", "t2vretrieval.encoders.mlsent.RoleGraphEncoderConfig", "t2vretrieval.encoders.mlsent.RoleGraphEncoderConfig", "t2vretrieval.encoders.mlsent.RoleGraphEncoderConfig", "t2vretrieval.encoders.mlsent.RoleGraphEncoderConfig", "t2vretrieval.encoders.mlsent.RoleGraphEncoderConfig", "t2vretrieval.encoders.mlsent.RoleGraphEncoderConfig", "t2vretrieval.encoders.mlsent.RoleGraphEncoderConfig"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_verbs", "=", "4", "\n", "self", ".", "num_nouns", "=", "6", "\n", "\n", "self", ".", "attn_fusion", "=", "'embed'", "# sim, embed", "\n", "self", ".", "simattn_sigma", "=", "4", "\n", "\n", "self", ".", "hard_topk", "=", "1", "\n", "self", ".", "max_violation", "=", "True", "\n", "\n", "self", ".", "loss_weights", "=", "None", "\n", "## this config will be covered by model.json due to the functions of load and load_from_dict", "\n", "self", ".", "subcfgs", "[", "VISENC", "]", "=", "t2vretrieval", ".", "encoders", ".", "mlvideo", ".", "MultilevelEncoderConfig", "(", ")", "\n", "self", ".", "subcfgs", "[", "TXTENC", "]", "=", "t2vretrieval", ".", "encoders", ".", "mlsent", ".", "RoleGraphEncoderConfig", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.build_submods": [[31, 35], ["t2vretrieval.encoders.mlvideo.MultilevelEncoder", "t2vretrieval.encoders.mlvideo.MultilevelEncoder", "t2vretrieval.encoders.mlvideo.MultilevelEncoder", "t2vretrieval.encoders.mlvideo.MultilevelEncoder", "t2vretrieval.encoders.mlvideo.MultilevelEncoder", "t2vretrieval.encoders.mlvideo.MultilevelEncoder", "t2vretrieval.encoders.mlvideo.MultilevelEncoder", "t2vretrieval.encoders.mlvideo.MultilevelEncoder", "t2vretrieval.encoders.mlvideo.MultilevelEncoder", "t2vretrieval.encoders.mlsent.RoleGraphEncoder", "t2vretrieval.encoders.mlsent.RoleGraphEncoder", "t2vretrieval.encoders.mlsent.RoleGraphEncoder", "t2vretrieval.encoders.mlsent.RoleGraphEncoder", "t2vretrieval.encoders.mlsent.RoleGraphEncoder", "t2vretrieval.encoders.mlsent.RoleGraphEncoder", "t2vretrieval.encoders.mlsent.RoleGraphEncoder", "t2vretrieval.encoders.mlsent.RoleGraphEncoder", "t2vretrieval.encoders.mlsent.RoleGraphEncoder"], "methods", ["None"], ["  ", "def", "build_submods", "(", "self", ")", ":", "\n", "    ", "return", "{", "\n", "VISENC", ":", "t2vretrieval", ".", "encoders", ".", "mlvideo", ".", "MultilevelEncoder", "(", "self", ".", "config", ".", "subcfgs", "[", "VISENC", "]", ")", ",", "\n", "TXTENC", ":", "t2vretrieval", ".", "encoders", ".", "mlsent", ".", "RoleGraphEncoder", "(", "self", ".", "config", ".", "subcfgs", "[", "TXTENC", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.forward_video_embed": [[37, 50], ["torch.FloatTensor().to", "torch.LongTensor().to", "torch.FloatTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "forward_video_embed", "(", "self", ",", "batch_data", ")", ":", "\n", "    ", "vid_fts", "=", "torch", ".", "FloatTensor", "(", "batch_data", "[", "'attn_fts'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "vid_lens", "=", "torch", ".", "LongTensor", "(", "batch_data", "[", "'attn_lens'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# (batch, max_vis_len, dim_embed)", "\n", "vid_sent_embeds", ",", "vid_verb_embeds", ",", "vid_noun_embeds", ",", "local_sent_embeds", ",", "logits", ",", "max_len", "=", "self", ".", "submods", "[", "VISENC", "]", "(", "vid_fts", ",", "vid_lens", ")", "\n", "return", "{", "\n", "'vid_sent_embeds'", ":", "vid_sent_embeds", ",", "\n", "'vid_verb_embeds'", ":", "vid_verb_embeds", ",", "\n", "'vid_noun_embeds'", ":", "vid_noun_embeds", ",", "\n", "'local_vid_embeds'", ":", "local_sent_embeds", ",", "\n", "'vid_lens'", ":", "vid_lens", ",", "\n", "'max_len'", ":", "max_len", ",", "\n", "'logits'", ":", "logits", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.forward_text_embed": [[52, 72], ["torch.LongTensor().to", "torch.LongTensor().to", "torch.BoolTensor().to", "torch.BoolTensor().to", "torch.LongTensor().to", "torch.FloatTensor().to", "torch.sum", "torch.sum", "torch.LongTensor", "torch.LongTensor", "torch.BoolTensor", "torch.BoolTensor", "torch.LongTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "forward_text_embed", "(", "self", ",", "batch_data", ")", ":", "\n", "    ", "sent_ids", "=", "torch", ".", "LongTensor", "(", "batch_data", "[", "'sent_ids'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "## sentence", "\n", "sent_lens", "=", "torch", ".", "LongTensor", "(", "batch_data", "[", "'sent_lens'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "## length", "\n", "verb_masks", "=", "torch", ".", "BoolTensor", "(", "batch_data", "[", "'verb_masks'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "## batch*nv*max_sen_len", "\n", "noun_masks", "=", "torch", ".", "BoolTensor", "(", "batch_data", "[", "'noun_masks'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "node_roles", "=", "torch", ".", "LongTensor", "(", "batch_data", "[", "'node_roles'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "## batch*(n_v+n_n)", "\n", "rel_edges", "=", "torch", ".", "FloatTensor", "(", "batch_data", "[", "'rel_edges'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "## batch*(1+n_v+n_n)*(1+n_v+n_n)", "\n", "\n", "verb_lens", "=", "torch", ".", "sum", "(", "verb_masks", ",", "2", ")", "\n", "noun_lens", "=", "torch", ".", "sum", "(", "noun_masks", ",", "2", ")", "\n", "\n", "# sent_embeds: (batch, dim_embed)", "\n", "# verb_embeds, noun_embeds: (batch, num_xxx, dim_embed)", "\n", "sent_embeds", ",", "verb_embeds", ",", "noun_embeds", ",", "local_sent_embeds", ",", "sent_logits", "=", "self", ".", "submods", "[", "TXTENC", "]", "(", "\n", "sent_ids", ",", "sent_lens", ",", "verb_masks", ",", "noun_masks", ",", "node_roles", ",", "rel_edges", ")", "\n", "return", "{", "\n", "'sent_embeds'", ":", "sent_embeds", ",", "'sent_lens'", ":", "sent_lens", ",", "\n", "'verb_embeds'", ":", "verb_embeds", ",", "'verb_lens'", ":", "verb_lens", ",", "\n", "'noun_embeds'", ":", "noun_embeds", ",", "'noun_lens'", ":", "noun_lens", ",", "\n", "'sent_logits'", ":", "sent_logits", ",", "'local_sent_embeds'", ":", "local_sent_embeds", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.generate_phrase_scores": [[74, 115], ["vid_embeds.size", "phrase_embeds.size", "vid_embeds.view", "phrase_embeds.view", "t2vretrieval.models.criterion.cosine_sim().view().transpose", "t2vretrieval.models.criterion.cosine_sim().view().transpose", "t2vretrieval.models.criterion.cosine_sim().view().transpose", "framework.ops.l2norm", "torch.softmax", "t2vretrieval.models.criterion.cosine_sim().view().transpose.masked_fill", "vid_attn_per_word.masked_fill.masked_fill.masked_fill", "torch.einsum", "torch.einsum", "torch.sum", "torch.sum().float().unsqueeze().clamp", "t2vretrieval.models.criterion.cosine_sim().view", "t2vretrieval.models.criterion.cosine_sim().view", "t2vretrieval.models.criterion.cosine_sim().view", "framework.ops.l2norm", "framework.ops.l2norm", "torch.sum", "phrase_masks.float().unsqueeze", "torch.sum().float().unsqueeze", "t2vretrieval.models.criterion.cosine_sim", "t2vretrieval.models.criterion.cosine_sim", "t2vretrieval.models.criterion.cosine_sim", "phrase_masks.float", "torch.sum().float", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.l2norm", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.l2norm", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.l2norm", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.criterion.cosine_sim", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.criterion.cosine_sim", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.criterion.cosine_sim"], ["", "def", "generate_phrase_scores", "(", "self", ",", "vid_embeds", ",", "vid_masks", ",", "phrase_embeds", ",", "phrase_masks", ",", "mask_flag", "=", "False", ")", ":", "\n", "    ", "'''Args:\n      - vid_embeds: (batch, num_frames, embed_size)\n      - vid_masks: (batch, num_frames)\n      - phrase_embeds: (batch, num_phrases, embed_size)\n      - phrase_masks: (batch, num_phrases)\n    '''", "\n", "batch_vids", ",", "num_frames", ",", "_", "=", "vid_embeds", ".", "size", "(", ")", "\n", "vid_pad_masks", "=", "(", "vid_masks", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "3", ")", "\n", "batch_phrases", ",", "num_phrases", ",", "dim_embed", "=", "phrase_embeds", ".", "size", "(", ")", "\n", "\n", "# compute component-wise similarity", "\n", "vid_2d_embeds", "=", "vid_embeds", ".", "view", "(", "-", "1", ",", "dim_embed", ")", "\n", "phrase_2d_embeds", "=", "phrase_embeds", ".", "view", "(", "-", "1", ",", "dim_embed", ")", "\n", "# size = (batch_vids, batch_phrases, num_frames, num_phrases)", "\n", "ground_sims", "=", "cosine_sim", "(", "vid_2d_embeds", ",", "phrase_2d_embeds", ")", ".", "view", "(", "\n", "batch_vids", ",", "num_frames", ",", "batch_phrases", ",", "num_phrases", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "###", "\n", "if", "mask_flag", ":", "\n", "      ", "vid_attn_per_word", "=", "ground_sims", ".", "masked_fill", "(", "vid_pad_masks", ",", "0", ")", "##############", "\n", "", "else", ":", "\n", "      ", "vid_attn_per_word", "=", "ground_sims", "\n", "", "vid_attn_per_word", "[", "vid_attn_per_word", "<", "0", "]", "=", "0", "\n", "vid_attn_per_word", "=", "framework", ".", "ops", ".", "l2norm", "(", "vid_attn_per_word", ",", "dim", "=", "2", ")", "\n", "if", "mask_flag", ":", "\n", "      ", "vid_attn_per_word", "=", "vid_attn_per_word", ".", "masked_fill", "(", "vid_pad_masks", ",", "-", "1e18", ")", "#################", "\n", "", "vid_attn_per_word", "=", "torch", ".", "softmax", "(", "self", ".", "config", ".", "simattn_sigma", "*", "vid_attn_per_word", ",", "dim", "=", "2", ")", "\n", "\n", "if", "self", ".", "config", ".", "attn_fusion", "==", "'embed'", ":", "\n", "      ", "vid_attned_embeds", "=", "torch", ".", "einsum", "(", "'abcd,ace->abde'", ",", "vid_attn_per_word", ",", "vid_embeds", ")", "\n", "word_attn_sims", "=", "torch", ".", "einsum", "(", "'abde,bde->abd'", ",", "\n", "framework", ".", "ops", ".", "l2norm", "(", "vid_attned_embeds", ")", ",", "\n", "framework", ".", "ops", ".", "l2norm", "(", "phrase_embeds", ")", ")", "\n", "", "elif", "self", ".", "config", ".", "attn_fusion", "==", "'sim'", ":", "\n", "# (batch_vids, batch_phrases, num_phrases)", "\n", "      ", "word_attn_sims", "=", "torch", ".", "sum", "(", "ground_sims", "*", "vid_attn_per_word", ",", "dim", "=", "2", ")", "\n", "\n", "# sum: (batch_vid, batch_phrases)", "\n", "", "phrase_scores", "=", "torch", ".", "sum", "(", "word_attn_sims", "*", "phrase_masks", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ",", "2", ")", "/", "torch", ".", "sum", "(", "phrase_masks", ",", "1", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "clamp", "(", "min", "=", "1", ")", "\n", "return", "phrase_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.generate_scores": [[116, 150], ["int", "framework.ops.sequence_mask", "t2vretrieval.models.criterion.cosine_sim", "t2vretrieval.models.criterion.cosine_sim", "t2vretrieval.models.criterion.cosine_sim", "mlmatch.RoleGraphMatchModel.jaccard_sim", "mlmatch.RoleGraphMatchModel.jaccard_sim", "framework.ops.sequence_mask", "mlmatch.RoleGraphMatchModel.generate_phrase_scores", "mlmatch.RoleGraphMatchModel.generate_phrase_scores", "framework.ops.sequence_mask", "mlmatch.RoleGraphMatchModel.generate_phrase_scores", "mlmatch.RoleGraphMatchModel.generate_phrase_scores", "torch.sum().long", "torch.sum().long", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.sequence_mask", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.criterion.cosine_sim", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.criterion.cosine_sim", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.criterion.cosine_sim", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.jaccard_sim", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.jaccard_sim", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.sequence_mask", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.generate_phrase_scores", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.generate_phrase_scores", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.sequence_mask", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.generate_phrase_scores", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.generate_phrase_scores"], ["", "def", "generate_scores", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "##### shared #####", "\n", "    ", "vid_lens", "=", "kwargs", "[", "'vid_lens'", "]", "# (batch, )", "\n", "num_frames", "=", "int", "(", "kwargs", "[", "'max_len'", "]", ")", "###########################kwargs['vid_verb_embeds'].size(1)", "\n", "vid_masks", "=", "framework", ".", "ops", ".", "sequence_mask", "(", "vid_lens", ",", "num_frames", ",", "inverse", "=", "False", ")", "\n", "# batch*max_len", "\n", "##### sentence-level scores #####", "\n", "sent_scores", "=", "cosine_sim", "(", "kwargs", "[", "'vid_sent_embeds'", "]", ",", "kwargs", "[", "'sent_embeds'", "]", ")", "\n", "#######################################################", "\n", "# concept scores use jaccard similarity", "\n", "concept_verb_scores", "=", "self", ".", "jaccard_sim", "(", "kwargs", "[", "'logits'", "]", "[", "0", "]", ",", "kwargs", "[", "'sent_logits'", "]", "[", "0", "]", ")", "\n", "concept_noun_scores", "=", "self", ".", "jaccard_sim", "(", "kwargs", "[", "'logits'", "]", "[", "1", "]", ",", "kwargs", "[", "'sent_logits'", "]", "[", "1", "]", ")", "\n", "#######################################################", "\n", "##### verb-level scores #####", "\n", "vid_verb_embeds", "=", "kwargs", "[", "'vid_verb_embeds'", "]", "# (batch, num_frames, dim_embed)", "\n", "verb_embeds", "=", "kwargs", "[", "'verb_embeds'", "]", "# (batch, num_verbs, dim_embed)", "\n", "verb_lens", "=", "kwargs", "[", "'verb_lens'", "]", "# (batch, num_verbs)", "\n", "local_vid_embeds", "=", "kwargs", "[", "'local_vid_embeds'", "]", "\n", "local_sent_embeds", "=", "kwargs", "[", "'local_sent_embeds'", "]", "\n", "verb_masks", "=", "framework", ".", "ops", ".", "sequence_mask", "(", "torch", ".", "sum", "(", "verb_lens", ">", "0", ",", "1", ")", ".", "long", "(", ")", ",", "\n", "self", ".", "config", ".", "num_verbs", ",", "inverse", "=", "False", ")", "\n", "# sum: (batch_vids, batch_sents)", "\n", "verb_scores", "=", "self", ".", "generate_phrase_scores", "(", "vid_verb_embeds", ",", "vid_masks", ",", "verb_embeds", ",", "verb_masks", ")", "\n", "ind_verb_scores", "=", "self", ".", "generate_phrase_scores", "(", "local_vid_embeds", "[", "0", "]", ",", "vid_masks", ",", "local_sent_embeds", "[", "0", "]", ",", "verb_masks", ",", "True", ")", "\n", "##### noun-level scores #####", "\n", "vid_noun_embeds", "=", "kwargs", "[", "'vid_noun_embeds'", "]", "# (batch, num_frames, dim_embed)", "\n", "noun_embeds", "=", "kwargs", "[", "'noun_embeds'", "]", "# (batch, num_nouns, dim_embed)", "\n", "noun_lens", "=", "kwargs", "[", "'noun_lens'", "]", "# (batch, num_nouns)", "\n", "noun_masks", "=", "framework", ".", "ops", ".", "sequence_mask", "(", "torch", ".", "sum", "(", "noun_lens", ">", "0", ",", "1", ")", ".", "long", "(", ")", ",", "\n", "self", ".", "config", ".", "num_nouns", ",", "inverse", "=", "False", ")", "\n", "# sum: (batch_vids, batch_sents)", "\n", "noun_scores", "=", "self", ".", "generate_phrase_scores", "(", "vid_noun_embeds", ",", "vid_masks", ",", "noun_embeds", ",", "noun_masks", ")", "\n", "ind_noun_scores", "=", "self", ".", "generate_phrase_scores", "(", "local_vid_embeds", "[", "1", "]", ",", "vid_masks", ",", "local_sent_embeds", "[", "1", "]", ",", "noun_masks", ",", "True", ")", "\n", "return", "sent_scores", ",", "verb_scores", ",", "noun_scores", ",", "concept_verb_scores", ",", "concept_noun_scores", ",", "ind_verb_scores", ",", "ind_noun_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.jaccard_sim": [[151, 160], ["im.unsqueeze().expand.unsqueeze().expand.size", "s.unsqueeze().expand.unsqueeze().expand.size", "im.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "s.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.min().sum", "torch.max().sum", "im.unsqueeze().expand.unsqueeze().expand.unsqueeze", "s.unsqueeze().expand.unsqueeze().expand.unsqueeze", "torch.min", "torch.max"], "methods", ["None"], ["", "def", "jaccard_sim", "(", "self", ",", "im", ",", "s", ")", ":", "\n", "    ", "im_bs", "=", "im", ".", "size", "(", "0", ")", "\n", "s_bs", "=", "s", ".", "size", "(", "0", ")", "\n", "im", "=", "im", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "s_bs", ",", "-", "1", ")", "\n", "s", "=", "s", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "im_bs", ",", "-", "1", ",", "-", "1", ")", "\n", "intersection", "=", "torch", ".", "min", "(", "im", ",", "s", ")", ".", "sum", "(", "-", "1", ")", "\n", "union", "=", "torch", ".", "max", "(", "im", ",", "s", ")", ".", "sum", "(", "-", "1", ")", "\n", "score", "=", "intersection", "/", "union", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.forward_loss": [[161, 219], ["mlmatch.RoleGraphMatchModel.forward_video_embed", "mlmatch.RoleGraphMatchModel.forward_text_embed", "mlmatch.RoleGraphMatchModel.update", "mlmatch.RoleGraphMatchModel.generate_scores", "mlmatch.RoleGraphMatchModel.criterion", "mlmatch.RoleGraphMatchModel.criterion", "mlmatch.RoleGraphMatchModel.criterion", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mlmatch.RoleGraphMatchModel.criterion", "mlmatch.RoleGraphMatchModel.criterion", "mlmatch.RoleGraphMatchModel.criterion", "mlmatch.RoleGraphMatchModel.criterion", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "scores.masked_fill", "mlmatch.RoleGraphMatchModel.print_fn", "mlmatch.RoleGraphMatchModel.print_fn", "mlmatch.RoleGraphMatchModel.print_fn", "mlmatch.RoleGraphMatchModel.print_fn", "mlmatch.RoleGraphMatchModel.print_fn", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "mlmatch.RoleGraphMatchModel.criterion_bce", "mlmatch.RoleGraphMatchModel.criterion_bce", "mlmatch.RoleGraphMatchModel.criterion_bce", "mlmatch.RoleGraphMatchModel.criterion_bce", "torch.eye().to", "torch.eye", "torch.mean", "torch.mean", "torch.mean", "mlmatch.RoleGraphMatchModel.data.item", "mlmatch.RoleGraphMatchModel.data.item", "mlmatch.RoleGraphMatchModel.data.item", "mlmatch.RoleGraphMatchModel.data.item", "torch.sum.item", "torch.sum.item", "torch.sum.item", "torch.sum.item", "concept_loss.item", "concept_verb_loss.item", "concept_noun_loss.item", "len", "torch.diag", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.forward_video_embed", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.forward_text_embed", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.generate_scores"], ["", "def", "forward_loss", "(", "self", ",", "batch_data", ",", "step", "=", "None", ")", ":", "\n", "    ", "enc_outs", "=", "self", ".", "forward_video_embed", "(", "batch_data", ")", "\n", "cap_enc_outs", "=", "self", ".", "forward_text_embed", "(", "batch_data", ")", "\n", "enc_outs", ".", "update", "(", "cap_enc_outs", ")", "\n", "sent_scores", ",", "verb_scores", ",", "noun_scores", ",", "concept_verb_scores", ",", "concept_noun_scores", ",", "local_verb_scores", ",", "local_noun_scores", "=", "self", ".", "generate_scores", "(", "**", "enc_outs", ")", "\n", "scores", "=", "(", "sent_scores", "+", "verb_scores", "+", "noun_scores", "+", "local_verb_scores", "+", "local_noun_scores", ")", "/", "5", "\n", "scores2", "=", "(", "concept_verb_scores", "+", "concept_noun_scores", ")", "/", "2", "\n", "\n", "sent_loss", "=", "self", ".", "criterion", "(", "sent_scores", ")", "\n", "verb_loss", "=", "self", ".", "criterion", "(", "verb_scores", ")", "\n", "noun_loss", "=", "self", ".", "criterion", "(", "noun_scores", ")", "\n", "\n", "eta", "=", "0.1", "\n", "mu", "=", "0.01", "\n", "concept_verb_loss", "=", "0.5", "*", "self", ".", "criterion", "(", "concept_verb_scores", ")", "\n", "concept_noun_loss", "=", "0.5", "*", "self", ".", "criterion", "(", "concept_noun_scores", ")", "\n", "concept_loss", "=", "eta", "*", "self", ".", "criterion", "(", "scores2", ")", "\n", "\n", "verb_concept_label", "=", "torch", ".", "FloatTensor", "(", "batch_data", "[", "'verb_concept_label'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "noun_concept_label", "=", "torch", ".", "FloatTensor", "(", "batch_data", "[", "'noun_concept_label'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "verb_concept_mask", "=", "torch", ".", "FloatTensor", "(", "batch_data", "[", "'verb_concept_mask'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "noun_concept_mask", "=", "torch", ".", "FloatTensor", "(", "batch_data", "[", "'noun_concept_mask'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "v_mask_sum", "=", "torch", ".", "sum", "(", "verb_concept_mask", ",", "dim", "=", "1", ")", "\n", "n_mask_sum", "=", "torch", ".", "sum", "(", "noun_concept_mask", ",", "dim", "=", "1", ")", "\n", "\n", "vbce_loss", "=", "torch", ".", "sum", "(", "verb_concept_mask", "*", "self", ".", "criterion_bce", "(", "enc_outs", "[", "'logits'", "]", "[", "0", "]", ",", "verb_concept_label", ")", ",", "dim", "=", "1", ")", "\n", "vbce_loss", "=", "mu", "*", "torch", ".", "mean", "(", "vbce_loss", "/", "v_mask_sum", ")", "\n", "nbce_loss", "=", "torch", ".", "sum", "(", "noun_concept_mask", "*", "self", ".", "criterion_bce", "(", "enc_outs", "[", "'logits'", "]", "[", "1", "]", ",", "noun_concept_label", ")", ",", "dim", "=", "1", ")", "\n", "nbce_loss", "=", "mu", "*", "torch", ".", "mean", "(", "nbce_loss", "/", "n_mask_sum", ")", "\n", "vbce_sent_loss", "=", "torch", ".", "sum", "(", "verb_concept_mask", "*", "self", ".", "criterion_bce", "(", "enc_outs", "[", "'sent_logits'", "]", "[", "0", "]", ",", "verb_concept_label", ")", ",", "dim", "=", "1", ")", "\n", "vbce_sent_loss", "=", "mu", "*", "torch", ".", "mean", "(", "vbce_sent_loss", "/", "v_mask_sum", ")", "\n", "nbce_sent_loss", "=", "torch", ".", "sum", "(", "noun_concept_mask", "*", "self", ".", "criterion_bce", "(", "enc_outs", "[", "'sent_logits'", "]", "[", "1", "]", ",", "noun_concept_label", ")", ",", "dim", "=", "1", ")", "\n", "nbce_sent_loss", "=", "mu", "*", "torch", ".", "mean", "(", "nbce_sent_loss", "/", "n_mask_sum", ")", "\n", "\n", "fusion_loss", "=", "self", ".", "criterion", "(", "scores", ")", "\n", "\n", "if", "self", ".", "config", ".", "loss_weights", "is", "None", ":", "\n", "      ", "loss", "=", "fusion_loss", "+", "1", "*", "(", "vbce_loss", "+", "nbce_loss", ")", "+", "1", "*", "(", "vbce_sent_loss", "+", "nbce_sent_loss", ")", "+", "concept_loss", "\n", "", "else", ":", "\n", "      ", "loss", "=", "self", ".", "config", ".", "loss_weights", "[", "0", "]", "*", "fusion_loss", "+", "self", ".", "config", ".", "loss_weights", "[", "1", "]", "*", "sent_loss", "+", "self", ".", "config", ".", "loss_weights", "[", "2", "]", "*", "verb_loss", "+", "self", ".", "config", ".", "loss_weights", "[", "3", "]", "*", "noun_loss", "+", "vbce_loss", "+", "nbce_loss", "\n", "", "if", "step", "is", "not", "None", "and", "self", ".", "config", ".", "monitor_iter", ">", "0", "and", "step", "%", "self", ".", "config", ".", "monitor_iter", "==", "0", ":", "\n", "      ", "neg_scores", "=", "scores", ".", "masked_fill", "(", "torch", ".", "eye", "(", "len", "(", "scores", ")", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "to", "(", "self", ".", "device", ")", ",", "-", "1e10", ")", "\n", "self", ".", "print_fn", "(", "'\\tstep %d: pos mean scores %.2f, hard neg mean scores i2t %.2f, t2i %.2f'", "%", "(", "\n", "step", ",", "torch", ".", "mean", "(", "torch", ".", "diag", "(", "scores", ")", ")", ",", "torch", ".", "mean", "(", "torch", ".", "max", "(", "neg_scores", ",", "1", ")", "[", "0", "]", ")", ",", "\n", "torch", ".", "mean", "(", "torch", ".", "max", "(", "neg_scores", ",", "0", ")", "[", "0", "]", ")", ")", ")", "\n", "self", ".", "print_fn", "(", "'\\tstep %d: sent_loss %.4f, verb_loss %.4f, noun_loss %.4f, fusion_loss %.4f'", "%", "(", "\n", "step", ",", "sent_loss", ".", "data", ".", "item", "(", ")", ",", "verb_loss", ".", "data", ".", "item", "(", ")", ",", "noun_loss", ".", "data", ".", "item", "(", ")", ",", "fusion_loss", ".", "data", ".", "item", "(", ")", ")", ")", "\n", "self", ".", "print_fn", "(", "'\\tstep %d: vbce_loss %.4f, nbce_loss %.4f'", "%", "(", "step", ",", "vbce_loss", ".", "item", "(", ")", ",", "nbce_loss", ".", "item", "(", ")", ")", ")", "\n", "self", ".", "print_fn", "(", "'\\tstep %d: vbce_sent_loss %.4f, nbce_sent_loss %.4f'", "%", "(", "step", ",", "vbce_sent_loss", ".", "item", "(", ")", ",", "nbce_sent_loss", ".", "item", "(", ")", ")", ")", "\n", "self", ".", "print_fn", "(", "'\\tstep %d: sim_loss %.4f, vsim_loss %.4f, nsim_loss %.4f'", "%", "(", "step", ",", "concept_loss", ".", "item", "(", ")", ",", "\n", "concept_verb_loss", ".", "item", "(", ")", ",", "concept_noun_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.evaluate_scores": [[220, 247], ["range", "numpy.array", "vid_names.extend", "mlmatch.RoleGraphMatchModel.forward_video_embed", "range", "tst_reader.dataset.iterate_over_captions", "range", "numpy.concatenate", "all_scores[].append", "mlmatch.RoleGraphMatchModel.forward_text_embed", "mlmatch.RoleGraphMatchModel.update", "mlmatch.RoleGraphMatchModel.generate_scores", "range", "numpy.concatenate", "range", "[].append", "indv_scores[].data.cpu().numpy", "indv_scores[].data.cpu"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.forward_video_embed", "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.iterate_over_captions", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.forward_text_embed", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.generate_scores"], ["", "def", "evaluate_scores", "(", "self", ",", "tst_reader", ")", ":", "\n", "    ", "K", "=", "self", ".", "config", ".", "subcfgs", "[", "VISENC", "]", ".", "num_levels", "\n", "K", "=", "K", "+", "4", "\n", "assert", "K", "==", "7", ",", "'Note that this error indicates losing other scores!'", "\n", "vid_names", ",", "all_scores", "=", "[", "]", ",", "[", "[", "]", "for", "_", "in", "range", "(", "K", ")", "]", "\n", "cap_names", "=", "tst_reader", ".", "dataset", ".", "captions", "\n", "\n", "for", "vid_data", "in", "tst_reader", ":", "\n", "      ", "vid_names", ".", "extend", "(", "vid_data", "[", "'names'", "]", ")", "\n", "vid_enc_outs", "=", "self", ".", "forward_video_embed", "(", "vid_data", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "all_scores", "[", "k", "]", ".", "append", "(", "[", "]", ")", "\n", "", "ijj", "=", "0", "\n", "for", "cap_data", "in", "tst_reader", ".", "dataset", ".", "iterate_over_captions", "(", "self", ".", "config", ".", "tst_batch_size", ")", ":", "\n", "        ", "cap_enc_outs", "=", "self", ".", "forward_text_embed", "(", "cap_data", ")", "\n", "cap_enc_outs", ".", "update", "(", "vid_enc_outs", ")", "\n", "indv_scores", "=", "self", ".", "generate_scores", "(", "**", "cap_enc_outs", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "          ", "all_scores", "[", "k", "]", "[", "-", "1", "]", ".", "append", "(", "indv_scores", "[", "k", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "ijj", "+=", "0", "\n", "", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "all_scores", "[", "k", "]", "[", "-", "1", "]", "=", "np", ".", "concatenate", "(", "all_scores", "[", "k", "]", "[", "-", "1", "]", ",", "axis", "=", "1", ")", "\n", "", "", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "      ", "all_scores", "[", "k", "]", "=", "np", ".", "concatenate", "(", "all_scores", "[", "k", "]", ",", "axis", "=", "0", ")", "# (n_img, n_cap)", "\n", "", "all_scores", "=", "np", ".", "array", "(", "all_scores", ")", "# (k, n_img, n_cap)", "\n", "\n", "return", "vid_names", ",", "cap_names", ",", "all_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.evaluate": [[248, 278], ["mlmatch.RoleGraphMatchModel.evaluate_scores", "enumerate", "mlmatch.RoleGraphMatchModel.calculate_metrics", "i2t_gts.append", "enumerate", "t2i_gts.setdefault", "t2i_gts[].append", "numpy.mean", "numpy.mean", "i2t_gts[].append"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.models.mlmatch.RoleGraphMatchModel.evaluate_scores", "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.globalmatch.GlobalMatchModel.calculate_metrics"], ["", "def", "evaluate", "(", "self", ",", "tst_reader", ",", "return_outs", "=", "False", ")", ":", "\n", "    ", "vid_names", ",", "cap_names", ",", "scores", "=", "self", ".", "evaluate_scores", "(", "tst_reader", ")", "\n", "\n", "i2t_gts", "=", "[", "]", "\n", "for", "vid_name", "in", "vid_names", ":", "\n", "      ", "i2t_gts", ".", "append", "(", "[", "]", ")", "\n", "for", "i", ",", "cap_name", "in", "enumerate", "(", "cap_names", ")", ":", "\n", "        ", "if", "cap_name", "in", "tst_reader", ".", "dataset", ".", "ref_captions", "[", "vid_name", "]", ":", "\n", "          ", "i2t_gts", "[", "-", "1", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "", "t2i_gts", "=", "{", "}", "\n", "for", "i", ",", "t_gts", "in", "enumerate", "(", "i2t_gts", ")", ":", "\n", "      ", "for", "t_gt", "in", "t_gts", ":", "\n", "        ", "t2i_gts", ".", "setdefault", "(", "t_gt", ",", "[", "]", ")", "\n", "t2i_gts", "[", "t_gt", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "idx", "=", "[", "0", ",", "1", ",", "2", ",", "5", ",", "6", "]", "\n", "\n", "fused_scores", "=", "(", "np", ".", "mean", "(", "scores", "[", "idx", "]", ",", "0", ")", "+", "np", ".", "mean", "(", "scores", "[", "3", ":", "5", "]", ",", "0", ")", ")", "/", "2", "\n", "metrics", "=", "self", ".", "calculate_metrics", "(", "fused_scores", ",", "i2t_gts", ",", "t2i_gts", ")", "\n", "\n", "if", "return_outs", ":", "\n", "      ", "outs", "=", "{", "\n", "'vid_names'", ":", "vid_names", ",", "\n", "'cap_names'", ":", "cap_names", ",", "\n", "'scores'", ":", "scores", ",", "\n", "}", "\n", "return", "metrics", ",", "outs", "\n", "", "else", ":", "\n", "      ", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.evaluation.eval_q2m": [[3, 35], ["numpy.zeros", "range", "numpy.argsort", "numpy.median", "np.zeros.mean", "len", "len", "len", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "function", ["None"], ["def", "eval_q2m", "(", "scores", ",", "q2m_gts", ")", ":", "\n", "  ", "'''\n  Image -> Text / Text -> Image\n  Args:\n    scores: (n_query, n_memory) matrix of similarity scores\n    q2m_gts: list, each item is the positive memory ids of the query id\n  Returns:\n    scores: (recall@1, 5, 10, median rank, mean rank)\n    gt_ranks: the best ranking of ground-truth memories\n  '''", "\n", "n_q", ",", "n_m", "=", "scores", ".", "shape", "\n", "gt_ranks", "=", "np", ".", "zeros", "(", "(", "n_q", ",", ")", ",", "np", ".", "int32", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_q", ")", ":", "\n", "    ", "s", "=", "scores", "[", "i", "]", "\n", "sorted_idxs", "=", "np", ".", "argsort", "(", "-", "s", ")", "\n", "\n", "rank", "=", "n_m", "\n", "for", "k", "in", "q2m_gts", "[", "i", "]", ":", "\n", "      ", "tmp", "=", "np", ".", "where", "(", "sorted_idxs", "==", "k", ")", "[", "0", "]", "[", "0", "]", "\n", "if", "tmp", "<", "rank", ":", "\n", "        ", "rank", "=", "tmp", "\n", "", "", "gt_ranks", "[", "i", "]", "=", "rank", "\n", "\n", "# compute metrics", "\n", "", "r1", "=", "100", "*", "len", "(", "np", ".", "where", "(", "gt_ranks", "<", "1", ")", "[", "0", "]", ")", "/", "n_q", "\n", "r5", "=", "100", "*", "len", "(", "np", ".", "where", "(", "gt_ranks", "<", "5", ")", "[", "0", "]", ")", "/", "n_q", "\n", "r10", "=", "100", "*", "len", "(", "np", ".", "where", "(", "gt_ranks", "<", "10", ")", "[", "0", "]", ")", "/", "n_q", "\n", "medr", "=", "np", ".", "median", "(", "gt_ranks", ")", "+", "1", "\n", "meanr", "=", "gt_ranks", ".", "mean", "(", ")", "+", "1", "\n", "\n", "return", "(", "r1", ",", "r5", ",", "r10", ",", "medr", ",", "meanr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.criterion.ContrastiveLoss.__init__": [[19, 28], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["def", "__init__", "(", "self", ",", "margin", "=", "0", ",", "max_violation", "=", "False", ",", "direction", "=", "'bi'", ",", "topk", "=", "1", ")", ":", "\n", "    ", "'''Args:\n      direction: i2t for negative sentence, t2i for negative image, bi for both\n    '''", "\n", "super", "(", "ContrastiveLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "max_violation", "=", "max_violation", "\n", "self", ".", "direction", "=", "direction", "\n", "self", ".", "topk", "=", "topk", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.criterion.ContrastiveLoss.forward": [[29, 84], ["scores.size", "scores.diag().view", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "min", "scores.diag().view.expand_as", "torch.sum.masked_fill", "torch.sum.masked_fill", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "scores.diag().view.t().expand_as", "torch.sum.masked_fill", "torch.sum.masked_fill", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "scores.diag", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "scores.diag().view.t", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "scores", ",", "margin", "=", "None", ",", "average_batch", "=", "True", ")", ":", "\n", "    ", "'''\n    Args:\n      scores: image-sentence score matrix, (batch, batch)\n        the same row of im and s are positive pairs, different rows are negative pairs\n    '''", "\n", "\n", "if", "margin", "is", "None", ":", "\n", "      ", "margin", "=", "self", ".", "margin", "\n", "\n", "", "batch_size", "=", "scores", ".", "size", "(", "0", ")", "\n", "diagonal", "=", "scores", ".", "diag", "(", ")", ".", "view", "(", "batch_size", ",", "1", ")", "# positive pairs", "\n", "# mask to clear diagonals which are positive pairs", "\n", "pos_masks", "=", "torch", ".", "eye", "(", "batch_size", ")", ".", "bool", "(", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "batch_topk", "=", "min", "(", "batch_size", ",", "self", ".", "topk", ")", "\n", "\n", "\n", "if", "self", ".", "direction", "==", "'i2t'", "or", "self", ".", "direction", "==", "'bi'", ":", "\n", "      ", "d1", "=", "diagonal", ".", "expand_as", "(", "scores", ")", "# same collumn for im2s (negative sentence)", "\n", "# compare every diagonal score to scores in its collumn", "\n", "# caption retrieval", "\n", "cost_s", "=", "(", "margin", "+", "scores", "-", "d1", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "cost_s", "=", "cost_s", ".", "masked_fill", "(", "pos_masks", ",", "0", ")", "\n", "if", "self", ".", "max_violation", ":", "\n", "        ", "cost_s", ",", "_", "=", "torch", ".", "topk", "(", "cost_s", ",", "batch_topk", ",", "dim", "=", "1", ")", "\n", "cost_s", "=", "cost_s", "/", "batch_topk", "\n", "if", "average_batch", ":", "\n", "          ", "cost_s", "=", "cost_s", "/", "batch_size", "\n", "", "", "else", ":", "\n", "        ", "if", "average_batch", ":", "\n", "          ", "cost_s", "=", "cost_s", "/", "(", "batch_size", "*", "(", "batch_size", "-", "1", ")", ")", "\n", "", "", "cost_s", "=", "torch", ".", "sum", "(", "cost_s", ")", "\n", "\n", "", "if", "self", ".", "direction", "==", "'t2i'", "or", "self", ".", "direction", "==", "'bi'", ":", "\n", "      ", "d2", "=", "diagonal", ".", "t", "(", ")", ".", "expand_as", "(", "scores", ")", "# same row for s2im (negative image)", "\n", "# compare every diagonal score to scores in its row", "\n", "cost_im", "=", "(", "margin", "+", "scores", "-", "d2", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "cost_im", "=", "cost_im", ".", "masked_fill", "(", "pos_masks", ",", "0", ")", "\n", "if", "self", ".", "max_violation", ":", "\n", "        ", "cost_im", ",", "_", "=", "torch", ".", "topk", "(", "cost_im", ",", "batch_topk", ",", "dim", "=", "0", ")", "\n", "cost_im", "=", "cost_im", "/", "batch_topk", "\n", "\n", "if", "average_batch", ":", "\n", "          ", "cost_im", "=", "cost_im", "/", "batch_size", "\n", "", "", "else", ":", "\n", "        ", "if", "average_batch", ":", "\n", "          ", "cost_im", "=", "cost_im", "/", "(", "batch_size", "*", "(", "batch_size", "-", "1", ")", ")", "\n", "", "", "cost_im", "=", "torch", ".", "sum", "(", "cost_im", ")", "\n", "\n", "", "if", "self", ".", "direction", "==", "'i2t'", ":", "\n", "      ", "return", "cost_s", "\n", "", "elif", "self", ".", "direction", "==", "'t2i'", ":", "\n", "      ", "return", "cost_im", "\n", "", "else", ":", "\n", "      ", "return", "cost_s", "+", "cost_im", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.models.criterion.cosine_sim": [[7, 15], ["im.mm", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "s.t"], "function", ["None"], ["def", "cosine_sim", "(", "im", ",", "s", ")", ":", "\n", "  ", "'''cosine similarity between all the image and sentence pairs\n  '''", "\n", "inner_prod", "=", "im", ".", "mm", "(", "s", ".", "t", "(", ")", ")", "\n", "im_norm", "=", "torch", ".", "sqrt", "(", "(", "im", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "+", "1e-18", ")", "\n", "s_norm", "=", "torch", ".", "sqrt", "(", "(", "s", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "1", ",", "-", "1", ")", "+", "1e-18", ")", "\n", "sim", "=", "inner_prod", "/", "(", "im_norm", "*", "s_norm", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.sentence.SentEncoderConfig.__init__": [[10, 20], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_words", "=", "0", "\n", "self", ".", "dim_word", "=", "300", "\n", "self", ".", "fix_word_embed", "=", "False", "\n", "self", ".", "rnn_type", "=", "'gru'", "# gru, lstm", "\n", "self", ".", "bidirectional", "=", "True", "\n", "self", ".", "rnn_hidden_size", "=", "1024", "\n", "self", ".", "num_layers", "=", "1", "\n", "self", ".", "dropout", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.sentence.SentEncoderConfig._assert": [[21, 23], ["None"], "methods", ["None"], ["", "def", "_assert", "(", "self", ")", ":", "\n", "    ", "assert", "self", ".", "rnn_type", "in", "[", "'gru'", ",", "'lstm'", "]", ",", "'invalid rnn_type'", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.sentence.SentEncoder.__init__": [[25, 41], ["torch.Module.__init__", "framework.modules.embeddings.Embedding", "framework.modules.embeddings.Embedding", "framework.ops.rnn_factory", "framework.ops.rnn_factory", "framework.ops.rnn_factory", "framework.ops.rnn_factory", "torch.Dropout", "torch.Dropout", "torch.Dropout", "print", "sentence.SentEncoder.init_weights"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.rnn_factory", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.rnn_factory", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.rnn_factory", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.rnn_factory", "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.sentence.SentEncoder.init_weights"], ["  ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "embedding", "=", "Embedding", "(", "self", ".", "config", ".", "num_words", ",", "self", ".", "config", ".", "dim_word", ",", "\n", "fix_word_embed", "=", "self", ".", "config", ".", "fix_word_embed", ")", "\n", "dim_word", "=", "self", ".", "config", ".", "dim_word", "\n", "\n", "self", ".", "rnn", "=", "framework", ".", "ops", ".", "rnn_factory", "(", "self", ".", "config", ".", "rnn_type", ",", "\n", "input_size", "=", "dim_word", ",", "hidden_size", "=", "self", ".", "config", ".", "rnn_hidden_size", ",", "\n", "num_layers", "=", "self", ".", "config", ".", "num_layers", ",", "dropout", "=", "self", ".", "config", ".", "dropout", ",", "\n", "bidirectional", "=", "self", ".", "config", ".", "bidirectional", ",", "bias", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "config", ".", "dropout", ")", "\n", "print", "(", "'Dropout in Text Sentence:{}'", ".", "format", "(", "self", ".", "config", ".", "dropout", ")", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.sentence.SentEncoder.init_weights": [[42, 56], ["range", "directions.append", "getattr", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "getattr", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "getattr.data.index_fill_", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "    ", "directions", "=", "[", "''", "]", "\n", "if", "self", ".", "config", ".", "bidirectional", ":", "\n", "      ", "directions", ".", "append", "(", "'_reverse'", ")", "\n", "", "for", "layer", "in", "range", "(", "self", ".", "config", ".", "num_layers", ")", ":", "\n", "      ", "for", "direction", "in", "directions", ":", "\n", "        ", "for", "name", "in", "[", "'i'", ",", "'h'", "]", ":", "\n", "          ", "weight", "=", "getattr", "(", "self", ".", "rnn", ",", "'weight_%sh_l%d%s'", "%", "(", "name", ",", "layer", ",", "direction", ")", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "weight", ".", "data", ")", "\n", "bias", "=", "getattr", "(", "self", ".", "rnn", ",", "'bias_%sh_l%d%s'", "%", "(", "name", ",", "layer", ",", "direction", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "bias", ",", "0", ")", "\n", "if", "name", "==", "'i'", "and", "self", ".", "config", ".", "rnn_type", "==", "'lstm'", ":", "\n", "            ", "bias", ".", "data", ".", "index_fill_", "(", "0", ",", "torch", ".", "arange", "(", "\n", "self", ".", "config", ".", "rnn_hidden_size", ",", "self", ".", "config", ".", "rnn_hidden_size", "*", "2", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.sentence.SentEncoder.forward_text_encoder": [[57, 62], ["framework.ops.calc_rnn_outs_with_sort", "framework.ops.calc_rnn_outs_with_sort", "framework.ops.calc_rnn_outs_with_sort", "framework.ops.calc_rnn_outs_with_sort"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.calc_rnn_outs_with_sort", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.calc_rnn_outs_with_sort", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.calc_rnn_outs_with_sort", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.calc_rnn_outs_with_sort"], ["", "", "", "", "", "def", "forward_text_encoder", "(", "self", ",", "word_embeds", ",", "seq_lens", ",", "init_states", ")", ":", "\n", "# outs.size = (batch, seq_len, num_directions * hidden_size)", "\n", "    ", "outs", ",", "states", "=", "framework", ".", "ops", ".", "calc_rnn_outs_with_sort", "(", "\n", "self", ".", "rnn", ",", "word_embeds", ",", "seq_lens", ",", "init_states", ")", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.sentence.SentEncoder.forward": [[63, 90], ["sentence.SentEncoder.embedding", "sentence.SentEncoder.forward_text_encoder", "sentence.SentEncoder.size", "sentence.SentEncoder.dropout", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "framework.ops.sequence_mask().float", "framework.ops.sequence_mask().float", "framework.ops.sequence_mask().float", "framework.ops.sequence_mask().float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "cap_lens.unsqueeze().float", "framework.ops.sequence_mask", "framework.ops.sequence_mask", "framework.ops.sequence_mask", "framework.ops.sequence_mask", "framework.ops.sequence_mask().float.unsqueeze", "framework.ops.sequence_mask().float.unsqueeze", "cap_lens.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.sentence.SentEncoder.forward_text_encoder", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.sequence_mask", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.sequence_mask", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.sequence_mask", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.sequence_mask"], ["", "def", "forward", "(", "self", ",", "cap_ids", ",", "cap_lens", ",", "init_states", "=", "None", ",", "return_dense", "=", "False", ")", ":", "\n", "    ", "'''\n    Args:\n      cap_ids: LongTensor, (batch, seq_len)\n      cap_lens: FloatTensor, (batch, )\n    Returns:\n      if return_dense:\n        embeds: FloatTensor, (batch, seq_len, embed_size)\n      else:\n        embeds: FloatTensor, (batch, embed_size)\n    '''", "\n", "word_embeds", "=", "self", ".", "embedding", "(", "cap_ids", ")", "\n", "\n", "hiddens", "=", "self", ".", "forward_text_encoder", "(", "\n", "self", ".", "dropout", "(", "word_embeds", ")", ",", "cap_lens", ",", "init_states", ")", "\n", "batch_size", ",", "max_seq_len", ",", "hidden_size", "=", "hiddens", ".", "size", "(", ")", "\n", "\n", "if", "self", ".", "config", ".", "bidirectional", ":", "\n", "      ", "splited_hiddens", "=", "torch", ".", "split", "(", "hiddens", ",", "self", ".", "config", ".", "rnn_hidden_size", ",", "dim", "=", "2", ")", "\n", "hiddens", "=", "(", "splited_hiddens", "[", "0", "]", "+", "splited_hiddens", "[", "1", "]", ")", "/", "2", "\n", "\n", "", "if", "return_dense", ":", "\n", "      ", "return", "hiddens", "\n", "", "else", ":", "\n", "      ", "sent_masks", "=", "framework", ".", "ops", ".", "sequence_mask", "(", "cap_lens", ",", "max_seq_len", ",", "inverse", "=", "False", ")", ".", "float", "(", ")", "\n", "sent_embeds", "=", "torch", ".", "sum", "(", "hiddens", "*", "sent_masks", ".", "unsqueeze", "(", "2", ")", ",", "1", ")", "/", "cap_lens", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "return", "sent_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.sentence.SentAttnEncoder.__init__": [[93, 97], ["sentence.SentEncoder.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "ft_attn", "=", "nn", ".", "Linear", "(", "self", ".", "config", ".", "rnn_hidden_size", ",", "1", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.sentence.SentAttnEncoder.forward": [[98, 110], ["sentence.SentEncoder.forward", "sentence.SentAttnEncoder.ft_attn().squeeze", "framework.ops.sequence_mask", "framework.ops.sequence_mask", "framework.ops.sequence_mask", "framework.ops.sequence_mask", "sentence.SentAttnEncoder.masked_fill", "sentence.SentAttnEncoder.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "sentence.SentAttnEncoder.ft_attn", "sentence.SentAttnEncoder.size", "sentence.SentAttnEncoder.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.mlvideo.MultilevelEncoder.forward", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.sequence_mask", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.sequence_mask", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.sequence_mask", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.sequence_mask"], ["", "def", "forward", "(", "self", ",", "cap_ids", ",", "cap_lens", ",", "init_states", "=", "None", ",", "return_dense", "=", "False", ")", ":", "\n", "    ", "hiddens", "=", "super", "(", ")", ".", "forward", "(", "cap_ids", ",", "cap_lens", ",", "init_states", "=", "init_states", ",", "return_dense", "=", "True", ")", "\n", "\n", "attn_scores", "=", "self", ".", "ft_attn", "(", "hiddens", ")", ".", "squeeze", "(", "2", ")", "\n", "cap_masks", "=", "framework", ".", "ops", ".", "sequence_mask", "(", "cap_lens", ",", "max_len", "=", "attn_scores", ".", "size", "(", "1", ")", ",", "inverse", "=", "False", ")", "\n", "attn_scores", "=", "attn_scores", ".", "masked_fill", "(", "cap_masks", "==", "0", ",", "-", "1e18", ")", "\n", "attn_scores", "=", "self", ".", "softmax", "(", "attn_scores", ")", "\n", "\n", "if", "return_dense", ":", "\n", "      ", "return", "hiddens", ",", "attn_scores", "\n", "", "else", ":", "\n", "      ", "return", "torch", ".", "sum", "(", "hiddens", "*", "attn_scores", ".", "unsqueeze", "(", "2", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.graph.GCNLayer.__init__": [[7, 13], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed_size", ",", "dropout", "=", "0.0", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_size", "=", "embed_size", "\n", "self", ".", "ctx_layer", "=", "nn", ".", "Linear", "(", "self", ".", "embed_size", ",", "self", ".", "embed_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "layernorm", "=", "nn", ".", "LayerNorm", "(", "embed_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.graph.GCNLayer.forward": [[14, 23], ["graph.GCNLayer.ctx_layer", "graph.GCNLayer.layernorm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "graph.GCNLayer.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "node_fts", ",", "rel_edges", ")", ":", "\n", "    ", "'''Args:\n      node_fts: (batch_size, num_nodes, embed_size)\n      rel_edges: (batch_size, num_nodes, num_nodes)\n    '''", "\n", "ctx_embeds", "=", "self", ".", "ctx_layer", "(", "torch", ".", "bmm", "(", "rel_edges", ",", "node_fts", ")", ")", "\n", "node_embeds", "=", "node_fts", "+", "self", ".", "dropout", "(", "ctx_embeds", ")", "\n", "node_embeds", "=", "self", ".", "layernorm", "(", "node_embeds", ")", "\n", "return", "node_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.graph.AttnGCNLayer.__init__": [[26, 31], ["graph.GCNLayer.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed_size", ",", "d_ff", ",", "dropout", "=", "0.0", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "embed_size", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "edge_attn_query", "=", "nn", ".", "Linear", "(", "embed_size", ",", "d_ff", ")", "\n", "self", ".", "edge_attn_key", "=", "nn", ".", "Linear", "(", "embed_size", ",", "d_ff", ")", "\n", "self", ".", "attn_denominator", "=", "math", ".", "sqrt", "(", "d_ff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.graph.AttnGCNLayer.forward": [[32, 51], ["attn_scores.masked_fill.masked_fill.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "attn_scores.masked_fill.masked_fill.masked_fill", "graph.AttnGCNLayer.ctx_layer", "graph.AttnGCNLayer.layernorm", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "graph.AttnGCNLayer.dropout", "graph.AttnGCNLayer.edge_attn_query", "graph.AttnGCNLayer.edge_attn_key"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "node_fts", ",", "rel_edges", ")", ":", "\n", "    ", "'''\n    Args:\n      node_fts: (batch_size, num_nodes, embed_size)\n      rel_edges: (batch_size, num_nodes, num_nodes)\n    '''", "\n", "# (batch_size, num_nodes, num_nodes)", "\n", "attn_scores", "=", "torch", ".", "einsum", "(", "'bod,bid->boi'", ",", "\n", "self", ".", "edge_attn_query", "(", "node_fts", ")", ",", "\n", "self", ".", "edge_attn_key", "(", "node_fts", ")", ")", "/", "self", ".", "attn_denominator", "\n", "attn_scores", "=", "attn_scores", ".", "masked_fill", "(", "rel_edges", "==", "0", ",", "-", "1e18", ")", "\n", "attn_scores", "=", "torch", ".", "softmax", "(", "attn_scores", ",", "dim", "=", "2", ")", "\n", "# some nodes do not connect with any edge", "\n", "attn_scores", "=", "attn_scores", ".", "masked_fill", "(", "rel_edges", "==", "0", ",", "0", ")", "\n", "\n", "ctx_embeds", "=", "self", ".", "ctx_layer", "(", "torch", ".", "bmm", "(", "attn_scores", ",", "node_fts", ")", ")", "\n", "node_embeds", "=", "node_fts", "+", "self", ".", "dropout", "(", "ctx_embeds", ")", "\n", "node_embeds", "=", "self", ".", "layernorm", "(", "node_embeds", ")", "\n", "return", "node_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.graph.GCNEncoder.__init__": [[54, 79], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "graph.GCNEncoder.layers.append", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "gcn_fn", "gcn_fn"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ",", "dim_input", ",", "dim_hidden", ",", "num_hidden_layers", ",", "\n", "embed_first", "=", "False", ",", "dropout", "=", "0", ",", "attention", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_input", "=", "dim_input", "\n", "self", ".", "dim_hidden", "=", "dim_hidden", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "embed_first", "=", "embed_first", "\n", "self", ".", "attention", "=", "attention", "\n", "\n", "if", "self", ".", "attention", ":", "\n", "      ", "gcn_fn", "=", "AttnGCNLayer", "\n", "", "else", ":", "\n", "      ", "gcn_fn", "=", "GCNLayer", "\n", "", "if", "self", ".", "embed_first", ":", "\n", "      ", "self", ".", "first_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "dim_input", ",", "self", ".", "dim_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "k", "in", "range", "(", "num_hidden_layers", ")", ":", "\n", "      ", "if", "self", ".", "attention", ":", "\n", "        ", "h2h", "=", "gcn_fn", "(", "self", ".", "dim_hidden", ",", "self", ".", "dim_hidden", "//", "2", ",", "dropout", "=", "dropout", ")", "\n", "", "else", ":", "\n", "        ", "h2h", "=", "gcn_fn", "(", "self", ".", "dim_hidden", ",", "dropout", "=", "dropout", ")", "\n", "", "self", ".", "layers", ".", "append", "(", "h2h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.graph.GCNEncoder.forward": [[80, 89], ["range", "graph.GCNEncoder.first_embedding", "layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "node_fts", ",", "rel_edges", ")", ":", "\n", "    ", "if", "self", ".", "embed_first", ":", "\n", "      ", "node_fts", "=", "self", ".", "first_embedding", "(", "node_fts", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "self", ".", "num_hidden_layers", ")", ":", "\n", "      ", "layer", "=", "self", ".", "layers", "[", "k", "]", "\n", "node_fts", "=", "layer", "(", "node_fts", ",", "rel_edges", ")", "\n", "# (batch_size, num_nodes, dim_hidden)", "\n", "", "return", "node_fts", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.video.MPEncoderConfig.__init__": [[8, 13], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_fts", "=", "[", "2048", "]", "\n", "self", ".", "dim_embed", "=", "1024", "\n", "self", ".", "dropout", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.video.MPEncoder.__init__": [[15, 22], ["torch.Module.__init__", "sum", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "input_size", "=", "sum", "(", "self", ".", "config", ".", "dim_fts", ")", "\n", "self", ".", "ft_embed", "=", "nn", ".", "Linear", "(", "input_size", ",", "self", ".", "config", ".", "dim_embed", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.video.MPEncoder.forward": [[23, 33], ["video.MPEncoder.ft_embed", "video.MPEncoder.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "'''\n    Args:\n      inputs: (batch, dim_fts) or (batch, max_seq_len, dim_fts)\n    Return:\n      embeds: (batch, dim_embed) or (batch, max_seq_len, dim_fts)\n    '''", "\n", "embeds", "=", "self", ".", "ft_embed", "(", "inputs", ")", "\n", "embeds", "=", "self", ".", "dropout", "(", "embeds", ")", "\n", "return", "embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.mlsent.RoleGraphEncoderConfig.__init__": [[10, 17], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_roles", "=", "16", "\n", "\n", "self", ".", "gcn_num_layers", "=", "1", "\n", "self", ".", "gcn_attention", "=", "False", "\n", "self", ".", "gcn_dropout", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.mlsent.RoleGraphEncoder.__init__": [[20, 42], ["super().__init__", "torch.device", "torch.device", "torch.device", "torch.device", "print", "t2vretrieval.encoders.graph.GCNEncoder", "t2vretrieval.encoders.graph.GCNEncoder", "t2vretrieval.encoders.graph.GCNEncoder", "t2vretrieval.encoders.graph.GCNEncoder", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "if", "self", ".", "config", ".", "num_roles", ">", "0", ":", "\n", "      ", "self", ".", "role_embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "config", ".", "num_roles", ",", "self", ".", "config", ".", "rnn_hidden_size", ")", "\n", "", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "# GCN parameters", "\n", "print", "(", "'GCN in Text:{}'", ".", "format", "(", "self", ".", "config", ".", "gcn_attention", ")", ")", "\n", "self", ".", "gcn", "=", "t2vretrieval", ".", "encoders", ".", "graph", ".", "GCNEncoder", "(", "self", ".", "config", ".", "rnn_hidden_size", ",", "\n", "self", ".", "config", ".", "rnn_hidden_size", ",", "self", ".", "config", ".", "gcn_num_layers", ",", "\n", "attention", "=", "self", ".", "config", ".", "gcn_attention", ",", "\n", "embed_first", "=", "False", ",", "dropout", "=", "self", ".", "config", ".", "gcn_dropout", ")", "\n", "\n", "#########################################3", "\n", "verb_concept", "=", "512", "\n", "noun_concept", "=", "1024", "\n", "self", ".", "bn_verb", "=", "nn", ".", "BatchNorm1d", "(", "verb_concept", ")", "\n", "self", ".", "bn_noun", "=", "nn", ".", "BatchNorm1d", "(", "noun_concept", ")", "\n", "self", ".", "classifier_verb", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "self", ".", "config", ".", "rnn_hidden_size", ",", "verb_concept", ",", "1", ")", ",", "self", ".", "bn_verb", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "classifier_noun", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "self", ".", "config", ".", "rnn_hidden_size", ",", "noun_concept", ",", "1", ")", ",", "self", ".", "bn_noun", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "config", ".", "rnn_hidden_size", ",", "self", ".", "config", ".", "rnn_hidden_size", ")", "\n", "#########################################", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.mlsent.RoleGraphEncoder.pool_phrases": [[44, 62], ["phrase_masks.float.float.float", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.sum().clamp", "torch.sum().clamp", "torch.sum().clamp", "torch.sum().clamp", "word_embeds.unsqueeze().masked_fill", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "word_embeds.unsqueeze", "phrase_masks.float.float.unsqueeze"], "methods", ["None"], ["", "def", "pool_phrases", "(", "self", ",", "word_embeds", ",", "phrase_masks", ",", "pool_type", "=", "'avg'", ")", ":", "\n", "    ", "'''\n    Args:\n      word_embeds: (batch, max_sent_len, embed_size)\n      phrase_masks: (batch, num_phrases, max_sent_len)\n    Returns:\n      phrase_embeds: (batch, num_phrases, embed_size)\n    '''", "\n", "if", "pool_type", "==", "'avg'", ":", "\n", "# (batch, num_phrases, max_sent_len, embed_size)", "\n", "      ", "phrase_masks", "=", "phrase_masks", ".", "float", "(", ")", "\n", "phrase_embeds", "=", "torch", ".", "bmm", "(", "phrase_masks", ",", "word_embeds", ")", "/", "torch", ".", "sum", "(", "phrase_masks", ",", "2", ",", "keepdim", "=", "2", ")", ".", "clamp", "(", "min", "=", "1", ")", "\n", "", "elif", "pool_type", "==", "'max'", ":", "\n", "      ", "embeds", "=", "word_embeds", ".", "unsqueeze", "(", "1", ")", ".", "masked_fill", "(", "phrase_masks", ".", "unsqueeze", "(", "3", ")", "==", "0", ",", "-", "1e10", ")", "\n", "phrase_embeds", "=", "torch", ".", "max", "(", "embeds", ",", "2", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "\n", "", "return", "phrase_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.mlsent.RoleGraphEncoder.forward": [[63, 111], ["super().forward", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "word_embeds.permute", "mlsent.RoleGraphEncoder.classifier_verb", "mlsent.RoleGraphEncoder.classifier_noun", "logits_verb.permute.permute.permute", "logits_noun.permute.permute.permute", "sent_lens.cpu().numpy", "numpy.ceil().astype", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "verb_masks.size", "mlsent.RoleGraphEncoder.pool_phrases", "mlsent.RoleGraphEncoder.pool_phrases", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mlsent.RoleGraphEncoder.gcn", "node_ctx_embeds[].contiguous", "node_ctx_embeds[].contiguous", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "word_attn_scores.unsqueeze", "sent_lens.cpu", "numpy.ceil", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mlsent.RoleGraphEncoder.role_embedding", "mlsent.RoleGraphEncoder.role_embedding", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.mlvideo.MultilevelEncoder.forward", "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.mlsent.RoleGraphEncoder.pool_phrases", "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.mlsent.RoleGraphEncoder.pool_phrases"], ["", "def", "forward", "(", "self", ",", "sent_ids", ",", "sent_lens", ",", "verb_masks", ",", "noun_masks", ",", "node_roles", ",", "rel_edges", ")", ":", "\n", "    ", "'''\n    Args:\n      sent_ids: (batch, max_sent_len)\n      sent_lens: (batch, )\n      verb_masks: (batch, num_verbs, max_sent_len)\n      noun_masks: (batch, num_nouns, max_sent_len)\n      node_roles: (batch, num_verbs + num_nouns)\n    '''", "\n", "# (batch, max_sent_len, embed_size)", "\n", "word_embeds", ",", "word_attn_scores", "=", "super", "(", ")", ".", "forward", "(", "sent_ids", ",", "sent_lens", ",", "return_dense", "=", "True", ")", "\n", "sent_embeds", "=", "torch", ".", "sum", "(", "word_embeds", "*", "word_attn_scores", ".", "unsqueeze", "(", "2", ")", ",", "1", ")", "## event embeds", "\n", "\n", "#####################################################################################", "\n", "word_embeds_re", "=", "word_embeds", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "logits_verb", "=", "self", ".", "classifier_verb", "(", "word_embeds_re", ")", "# batch*seq_len*concept", "\n", "logits_noun", "=", "self", ".", "classifier_noun", "(", "word_embeds_re", ")", "# batch*seq_len*concept", "\n", "logits_verb", "=", "logits_verb", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "logits_noun", "=", "logits_noun", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "seq_len", "=", "sent_lens", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "k", "=", "np", ".", "ceil", "(", "seq_len", "/", "8", ")", ".", "astype", "(", "'int32'", ")", "\n", "instance_logits_verb", "=", "torch", ".", "zeros", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "# batch* concept", "\n", "instance_logits_noun", "=", "torch", ".", "zeros", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "logits_verb", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "tmp", ",", "_", "=", "torch", ".", "topk", "(", "logits_verb", "[", "i", "]", "[", ":", "seq_len", "[", "i", "]", "]", ",", "k", "=", "int", "(", "k", "[", "i", "]", ")", ",", "dim", "=", "0", ")", "\n", "instance_logits_verb", "=", "torch", ".", "cat", "(", "[", "instance_logits_verb", ",", "torch", ".", "mean", "(", "tmp", ",", "0", ",", "keepdim", "=", "True", ")", "]", ",", "dim", "=", "0", ")", "\n", "tmp", ",", "_", "=", "torch", ".", "topk", "(", "logits_noun", "[", "i", "]", "[", ":", "seq_len", "[", "i", "]", "]", ",", "k", "=", "int", "(", "k", "[", "i", "]", ")", ",", "dim", "=", "0", ")", "\n", "instance_logits_noun", "=", "torch", ".", "cat", "(", "[", "instance_logits_noun", ",", "torch", ".", "mean", "(", "tmp", ",", "0", ",", "keepdim", "=", "True", ")", "]", ",", "dim", "=", "0", ")", "\n", "######################################################################################", "\n", "# (batch, num_phrases, embed_size)", "\n", "", "num_verbs", "=", "verb_masks", ".", "size", "(", "1", ")", "\n", "verb_embeds", "=", "self", ".", "pool_phrases", "(", "word_embeds", ",", "verb_masks", ",", "pool_type", "=", "'max'", ")", "\n", "embeds_1", "=", "verb_embeds", "\n", "\n", "if", "self", ".", "config", ".", "num_roles", ">", "0", ":", "\n", "      ", "verb_embeds", "=", "verb_embeds", "*", "self", ".", "role_embedding", "(", "node_roles", "[", ":", ",", ":", "num_verbs", "]", ")", "\n", "\n", "", "noun_embeds", "=", "self", ".", "pool_phrases", "(", "word_embeds", ",", "noun_masks", ",", "pool_type", "=", "'max'", ")", "\n", "embeds_2", "=", "noun_embeds", "\n", "if", "self", ".", "config", ".", "num_roles", ">", "0", ":", "\n", "      ", "noun_embeds", "=", "noun_embeds", "*", "self", ".", "role_embedding", "(", "node_roles", "[", ":", ",", "num_verbs", ":", "]", ")", "# batch*n_n*dim", "\n", "\n", "", "node_embeds", "=", "torch", ".", "cat", "(", "[", "sent_embeds", ".", "unsqueeze", "(", "1", ")", ",", "verb_embeds", ",", "noun_embeds", "]", ",", "1", ")", "# batch*(1+n_v+n_n)*dim", "\n", "node_ctx_embeds", "=", "self", ".", "gcn", "(", "node_embeds", ",", "rel_edges", ")", "# batch*(1+n_v+n_n)*dim2", "\n", "sent_ctx_embeds", "=", "node_ctx_embeds", "[", ":", ",", "0", "]", "\n", "verb_ctx_embeds", "=", "node_ctx_embeds", "[", ":", ",", "1", ":", "1", "+", "num_verbs", "]", ".", "contiguous", "(", ")", "\n", "noun_ctx_embeds", "=", "node_ctx_embeds", "[", ":", ",", "1", "+", "num_verbs", ":", "]", ".", "contiguous", "(", ")", "\n", "return", "sent_ctx_embeds", ",", "verb_ctx_embeds", ",", "noun_ctx_embeds", ",", "[", "embeds_1", ",", "embeds_2", "]", ",", "[", "instance_logits_verb", ",", "instance_logits_noun", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.mlvideo.MultilevelEncoderConfig.__init__": [[8, 15], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_fts", "=", "[", "2048", "]", "\n", "self", ".", "dim_embed", "=", "1024", "\n", "self", ".", "dropout", "=", "0", "\n", "self", ".", "num_levels", "=", "3", "\n", "self", ".", "share_enc", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.mlvideo.SEBlock.__init__": [[18, 26], ["torch.Module.__init__", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ",", "channel", ",", "r", "=", "16", ")", ":", "\n", "    ", "super", "(", "SEBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "r", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "r", ",", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.mlvideo.SEBlock.forward": [[28, 34], ["x.size", "mlvideo.SEBlock.avg_pool().view", "mlvideo.SEBlock.fc().view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "mlvideo.SEBlock.avg_pool", "mlvideo.SEBlock.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "b", ",", "c", ",", "t", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ")", "\n", "y", "=", "torch", ".", "mul", "(", "x", ",", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.mlvideo.MultilevelEncoder.__init__": [[37, 62], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "sum", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mlvideo.SEBlock", "mlvideo.SEBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__"], ["  ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "input_size", "=", "sum", "(", "self", ".", "config", ".", "dim_fts", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "config", ".", "dropout", ")", "\n", "self", ".", "num_verbs", "=", "10", "\n", "self", ".", "num_nouns", "=", "20", "\n", "num_levels", "=", "1", "if", "self", ".", "config", ".", "share_enc", "else", "self", ".", "config", ".", "num_levels", "\n", "self", ".", "level_embeds", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Linear", "(", "input_size", ",", "self", ".", "config", ".", "dim_embed", ",", "bias", "=", "True", ")", "for", "k", "in", "range", "(", "num_levels", ")", "]", ")", "\n", "self", ".", "ft_attn", "=", "nn", ".", "Linear", "(", "self", ".", "config", ".", "dim_embed", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "verb_concept", "=", "512", "\n", "noun_concept", "=", "1024", "\n", "self", ".", "bn_verb", "=", "nn", ".", "BatchNorm1d", "(", "verb_concept", ")", "\n", "self", ".", "bn_noun", "=", "nn", ".", "BatchNorm1d", "(", "noun_concept", ")", "\n", "self", ".", "classifier_verb", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "self", ".", "config", ".", "dim_embed", ",", "verb_concept", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "self", ".", "bn_verb", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "classifier_noun", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "self", ".", "config", ".", "dim_embed", ",", "noun_concept", ",", "1", ")", ",", "self", ".", "bn_noun", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "seblock1", "=", "SEBlock", "(", "self", ".", "config", ".", "dim_embed", ")", "\n", "self", ".", "seblock2", "=", "SEBlock", "(", "self", ".", "config", ".", "dim_embed", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "self", ".", "config", ".", "dim_embed", ",", "self", ".", "config", ".", "dim_embed", ",", "1", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "self", ".", "config", ".", "dim_embed", ",", "self", ".", "config", ".", "dim_embed", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.encoders.mlvideo.MultilevelEncoder.forward": [[63, 135], ["range", "mlvideo.MultilevelEncoder.ft_attn().squeeze", "framework.ops.sequence_mask", "torch.softmax.masked_fill", "torch.softmax.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "embeds[].permute", "mlvideo.MultilevelEncoder.seblock1", "embeds_re11.permute().contiguous.permute().contiguous.permute().contiguous", "mlvideo.MultilevelEncoder.classifier_verb", "logits_verb.permute.permute.permute", "embeds[].permute", "mlvideo.MultilevelEncoder.seblock2", "embeds_re22.permute().contiguous.permute().contiguous.permute().contiguous", "mlvideo.MultilevelEncoder.classifier_noun", "logits_noun.permute.permute.permute", "input_lens.cpu().numpy", "numpy.ceil().astype", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "range", "embeds.append", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mlvideo.MultilevelEncoder.dropout", "mlvideo.MultilevelEncoder.ft_attn", "torch.softmax.size", "torch.softmax.size", "torch.softmax.unsqueeze", "torch.softmax.unsqueeze", "embeds_re11.permute().contiguous.permute().contiguous.permute", "embeds_re22.permute().contiguous.permute().contiguous.permute", "input_lens.cpu", "numpy.ceil", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.ops.sequence_mask"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "input_lens", ")", ":", "\n", "    ", "'''\n    Args:\n      inputs: (batch, max_seq_len, dim_fts)\n    Return:\n      sent_embeds: (batch, dim_embed)\n      verb_embeds: (batch, max_seq_len, dim_embed)\n      noun_embeds: (batch, max_seq_len, dim_embed)\n    '''", "\n", "embeds", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "config", ".", "num_levels", ")", ":", "\n", "      ", "if", "self", ".", "config", ".", "share_enc", ":", "\n", "        ", "k", "=", "0", "\n", "", "embeds", ".", "append", "(", "self", ".", "dropout", "(", "self", ".", "level_embeds", "[", "k", "]", "(", "inputs", ")", ")", ")", "\n", "\n", "", "attn_scores", "=", "self", ".", "ft_attn", "(", "embeds", "[", "0", "]", ")", ".", "squeeze", "(", "2", ")", "\n", "input_pad_masks", "=", "framework", ".", "ops", ".", "sequence_mask", "(", "input_lens", ",", "\n", "max_len", "=", "attn_scores", ".", "size", "(", "1", ")", ",", "inverse", "=", "True", ")", "\n", "attn_scores", "=", "attn_scores", ".", "masked_fill", "(", "input_pad_masks", ",", "-", "1e18", ")", "\n", "attn_scores", "=", "torch", ".", "softmax", "(", "attn_scores", ",", "dim", "=", "1", ")", "\n", "sent_embeds", "=", "torch", ".", "sum", "(", "embeds", "[", "0", "]", "*", "attn_scores", ".", "unsqueeze", "(", "2", ")", ",", "1", ")", "\n", "max_len", "=", "inputs", ".", "shape", "[", "1", "]", "\n", "batch_size", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "############################################################", "\n", "embeds_re1", "=", "embeds", "[", "1", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "embeds_re11", "=", "self", ".", "seblock1", "(", "embeds_re1", ")", "\n", "embeds_re11", "=", "embeds_re11", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "logits_verb", "=", "self", ".", "classifier_verb", "(", "embeds_re1", ")", "\n", "logits_verb", "=", "logits_verb", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# batch*seq_len*concept", "\n", "\n", "embeds_re2", "=", "embeds", "[", "2", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "embeds_re22", "=", "self", ".", "seblock2", "(", "embeds_re2", ")", "\n", "embeds_re22", "=", "embeds_re22", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "logits_noun", "=", "self", ".", "classifier_noun", "(", "embeds_re2", ")", "\n", "logits_noun", "=", "logits_noun", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# batch*seq_len*concept", "\n", "\n", "seq_len", "=", "input_lens", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "k", "=", "np", ".", "ceil", "(", "seq_len", "/", "8", ")", ".", "astype", "(", "'int32'", ")", "\n", "instance_logits_verb", "=", "torch", ".", "zeros", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "# batch* concept", "\n", "instance_logits_noun", "=", "torch", ".", "zeros", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "      ", "tmp", ",", "_", "=", "torch", ".", "topk", "(", "logits_verb", "[", "i", "]", "[", ":", "seq_len", "[", "i", "]", "]", ",", "k", "=", "int", "(", "k", "[", "i", "]", ")", ",", "dim", "=", "0", ")", "\n", "instance_logits_verb", "=", "torch", ".", "cat", "(", "[", "instance_logits_verb", ",", "torch", ".", "mean", "(", "tmp", ",", "0", ",", "keepdim", "=", "True", ")", "]", ",", "dim", "=", "0", ")", "\n", "tmp", ",", "_", "=", "torch", ".", "topk", "(", "logits_noun", "[", "i", "]", "[", ":", "seq_len", "[", "i", "]", "]", ",", "k", "=", "int", "(", "k", "[", "i", "]", ")", ",", "dim", "=", "0", ")", "\n", "instance_logits_noun", "=", "torch", ".", "cat", "(", "[", "instance_logits_noun", ",", "torch", ".", "mean", "(", "tmp", ",", "0", ",", "keepdim", "=", "True", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "embeds_verb", "=", "torch", ".", "zeros", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "embeds_noun", "=", "torch", ".", "zeros", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "_", ",", "top_idx_verb", "=", "torch", ".", "topk", "(", "instance_logits_verb", ",", "k", "=", "self", ".", "num_verbs", ",", "dim", "=", "1", ")", "# batch*nv", "\n", "_", ",", "top_idx_noun", "=", "torch", ".", "topk", "(", "instance_logits_noun", ",", "k", "=", "self", ".", "num_nouns", ",", "dim", "=", "1", ")", "# batch*nn", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "      ", "logits_verb_tmp", "=", "logits_verb", "[", "i", ",", ":", "input_lens", "[", "i", "]", ",", "top_idx_verb", "[", "i", "]", "]", "# len*num_verb  logits_verb", "\n", "ind", "=", "torch", ".", "argmax", "(", "logits_verb_tmp", ",", "dim", "=", "0", ")", "# num_verb", "\n", "if", "torch", ".", "max", "(", "ind", ")", "+", "2", "<", "input_lens", "[", "i", "]", "and", "torch", ".", "min", "(", "ind", ")", ">", "1", ":", "\n", "        ", "emb_tmp", "=", "(", "embeds_re11", "[", "i", ":", "i", "+", "1", ",", "ind", "-", "2", ",", ":", "]", "+", "embeds_re11", "[", "i", ":", "i", "+", "1", ",", "ind", "-", "1", ",", ":", "]", "+", "embeds_re11", "[", "i", ":", "i", "+", "1", ",", "ind", ",", ":", "]", "\n", "+", "embeds_re11", "[", "i", ":", "i", "+", "1", ",", "ind", "+", "1", ",", ":", "]", "+", "embeds_re11", "[", "i", ":", "i", "+", "1", ",", "ind", "+", "2", ",", ":", "]", ")", "/", "5", "\n", "embeds_verb", "=", "torch", ".", "cat", "(", "[", "embeds_verb", ",", "emb_tmp", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "embeds_verb", "=", "torch", ".", "cat", "(", "[", "embeds_verb", ",", "embeds_re11", "[", "i", ":", "i", "+", "1", ",", "ind", ",", ":", "]", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "logits_noun_tmp", "=", "logits_noun", "[", "i", ",", ":", "input_lens", "[", "i", "]", ",", "top_idx_noun", "[", "i", "]", "]", "# len*num_noun", "\n", "\n", "if", "logits_noun_tmp", ".", "shape", "[", "0", "]", ">", "2", ":", "\n", "        ", "_", ",", "ind", "=", "torch", ".", "topk", "(", "logits_noun_tmp", ",", "k", "=", "3", ",", "dim", "=", "0", ")", "# 3*num_noun", "\n", "emb_tmp", "=", "(", "embeds_re22", "[", "i", ":", "i", "+", "1", ",", "ind", "[", "0", "]", ",", ":", "]", "+", "embeds_re22", "[", "i", ":", "i", "+", "1", ",", "ind", "[", "1", "]", ",", ":", "]", "+", "embeds_re22", "[", "i", ":", "i", "+", "1", ",", "ind", "[", "2", "]", ",", ":", "]", ")", "/", "3", "\n", "", "else", ":", "\n", "        ", "ind", "=", "torch", ".", "argmax", "(", "logits_noun_tmp", ",", "dim", "=", "0", ")", "# num_verb", "\n", "emb_tmp", "=", "embeds_re22", "[", "i", ":", "i", "+", "1", ",", "ind", ",", ":", "]", "\n", "", "embeds_noun", "=", "torch", ".", "cat", "(", "[", "embeds_noun", ",", "emb_tmp", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "sent_embeds", ",", "embeds_verb", ",", "embeds_noun", ",", "[", "embeds", "[", "1", "]", ",", "embeds", "[", "2", "]", "]", ",", "[", "instance_logits_verb", ",", "instance_logits_noun", ",", "top_idx_verb", ",", "top_idx_noun", "]", ",", "max_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.rolegraphs.RoleGraphDataset.__init__": [[13, 76], ["numpy.load", "json.load", "len", "rolegraphs.RoleGraphDataset.print_fn", "enumerate", "json.load", "open", "json.load", "json.load", "json.load", "json.load", "json.load", "set", "enumerate", "list", "len", "rolegraphs.RoleGraphDataset.print_fn", "numpy.array", "numpy.array", "open", "open", "open", "open", "open", "open", "enumerate", "rolegraphs.RoleGraphDataset.load_attn_ft_by_name", "rolegraphs.RoleGraphDataset.pad_or_trim_feature", "rolegraphs.RoleGraphDataset.all_attn_fts.append", "rolegraphs.RoleGraphDataset.all_attn_lens.append", "rolegraphs.RoleGraphDataset.captions.add", "rolegraphs.RoleGraphDataset.pair_idxs.append"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.rolegraphs.RoleGraphDataset.load_attn_ft_by_name", "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.rolegraphs.RoleGraphDataset.pad_or_trim_feature"], ["  ", "def", "__init__", "(", "self", ",", "name_file", ",", "attn_ft_files", ",", "word2int_file", ",", "\n", "max_words_in_sent", ",", "num_verbs", ",", "num_nouns", ",", "ref_caption_file", ",", "ref_graph_file", ",", "\n", "verb_concept_file", "=", "None", ",", "noun_concept_file", "=", "None", ",", "\n", "verb_concept_all_file", "=", "None", ",", "noun_concept_all_file", "=", "None", ",", "\n", "max_attn_len", "=", "20", ",", "load_video_first", "=", "False", ",", "is_train", "=", "False", ",", "_logger", "=", "None", ")", ":", "\n", "    ", "if", "_logger", "is", "None", ":", "\n", "      ", "self", ".", "print_fn", "=", "print", "\n", "", "else", ":", "\n", "      ", "self", ".", "print_fn", "=", "_logger", ".", "info", "\n", "\n", "", "self", ".", "max_words_in_sent", "=", "max_words_in_sent", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "attn_ft_files", "=", "attn_ft_files", "\n", "self", ".", "max_attn_len", "=", "max_attn_len", "\n", "self", ".", "load_video_first", "=", "load_video_first", "\n", "\n", "self", ".", "names", "=", "np", ".", "load", "(", "name_file", ")", "\n", "self", ".", "word2int", "=", "json", ".", "load", "(", "open", "(", "word2int_file", ")", ")", "\n", "\n", "self", ".", "num_videos", "=", "len", "(", "self", ".", "names", ")", "\n", "self", ".", "print_fn", "(", "'num_videos %d'", "%", "(", "self", ".", "num_videos", ")", ")", "\n", "####################################################3", "\n", "if", "verb_concept_file", "is", "not", "None", ":", "\n", "      ", "self", ".", "verb_concept", "=", "json", ".", "load", "(", "open", "(", "verb_concept_file", ")", ")", "\n", "self", ".", "noun_concept", "=", "json", ".", "load", "(", "open", "(", "noun_concept_file", ")", ")", "\n", "", "if", "verb_concept_all_file", "is", "not", "None", ":", "\n", "      ", "self", ".", "verb_concept_all", "=", "json", ".", "load", "(", "open", "(", "verb_concept_all_file", ")", ")", "\n", "self", ".", "noun_concept_all", "=", "json", ".", "load", "(", "open", "(", "noun_concept_all_file", ")", ")", "\n", "#####################################################", "\n", "", "if", "ref_caption_file", "is", "None", ":", "\n", "      ", "self", ".", "ref_captions", "=", "None", "\n", "", "else", ":", "\n", "      ", "self", ".", "ref_captions", "=", "json", ".", "load", "(", "open", "(", "ref_caption_file", ")", ")", "\n", "self", ".", "captions", "=", "set", "(", ")", "\n", "self", ".", "pair_idxs", "=", "[", "]", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "        ", "for", "j", ",", "sent", "in", "enumerate", "(", "self", ".", "ref_captions", "[", "name", "]", ")", ":", "\n", "          ", "self", ".", "captions", ".", "add", "(", "sent", ")", "\n", "self", ".", "pair_idxs", ".", "append", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "self", ".", "captions", "=", "list", "(", "self", ".", "captions", ")", "\n", "self", ".", "num_pairs", "=", "len", "(", "self", ".", "pair_idxs", ")", "\n", "self", ".", "print_fn", "(", "'captions size %d'", "%", "self", ".", "num_pairs", ")", "\n", "\n", "", "if", "self", ".", "load_video_first", ":", "\n", "      ", "self", ".", "all_attn_fts", ",", "self", ".", "all_attn_lens", "=", "[", "]", ",", "[", "]", "\n", "for", "name", "in", "self", ".", "names", ":", "\n", "        ", "attn_fts", "=", "self", ".", "load_attn_ft_by_name", "(", "name", ",", "self", ".", "attn_ft_files", ")", "\n", "attn_fts", ",", "attn_len", "=", "self", ".", "pad_or_trim_feature", "(", "attn_fts", ",", "self", ".", "max_attn_len", ",", "trim_type", "=", "'select'", ")", "\n", "self", ".", "all_attn_fts", ".", "append", "(", "attn_fts", ")", "\n", "self", ".", "all_attn_lens", ".", "append", "(", "attn_len", ")", "\n", "", "self", ".", "all_attn_fts", "=", "np", ".", "array", "(", "self", ".", "all_attn_fts", ")", "\n", "self", ".", "all_attn_lens", "=", "np", ".", "array", "(", "self", ".", "all_attn_lens", ")", "\n", "\n", "", "self", ".", "num_verbs", "=", "num_verbs", "\n", "self", ".", "num_nouns", "=", "num_nouns", "\n", "\n", "self", ".", "role2int", "=", "{", "}", "\n", "for", "i", ",", "role", "in", "enumerate", "(", "ROLES", ")", ":", "\n", "      ", "self", ".", "role2int", "[", "role", "]", "=", "i", "\n", "self", ".", "role2int", "[", "'C-%s'", "%", "role", "]", "=", "i", "\n", "self", ".", "role2int", "[", "'R-%s'", "%", "role", "]", "=", "i", "\n", "\n", "", "self", ".", "ref_graphs", "=", "json", ".", "load", "(", "open", "(", "ref_graph_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.rolegraphs.RoleGraphDataset.load_attn_ft_by_name": [[77, 86], ["enumerate", "numpy.concatenate", "h5py.File", "name.replace", "numpy.concatenate.append"], "methods", ["None"], ["", "def", "load_attn_ft_by_name", "(", "self", ",", "name", ",", "attn_ft_files", ")", ":", "\n", "    ", "attn_fts", "=", "[", "]", "\n", "for", "i", ",", "attn_ft_file", "in", "enumerate", "(", "attn_ft_files", ")", ":", "\n", "      ", "with", "h5py", ".", "File", "(", "attn_ft_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "key", "=", "name", ".", "replace", "(", "'/'", ",", "'_'", ")", "\n", "attn_ft", "=", "f", "[", "key", "]", "[", "...", "]", "\n", "attn_fts", ".", "append", "(", "attn_ft", ")", "\n", "", "", "attn_fts", "=", "np", ".", "concatenate", "(", "[", "attn_ft", "for", "attn_ft", "in", "attn_fts", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "attn_fts", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.rolegraphs.RoleGraphDataset.pad_or_trim_feature": [[87, 103], ["min", "numpy.zeros", "numpy.round().astype", "numpy.round", "numpy.linspace"], "methods", ["None"], ["", "def", "pad_or_trim_feature", "(", "self", ",", "attn_ft", ",", "max_attn_len", ",", "trim_type", "=", "'top'", ")", ":", "\n", "    ", "seq_len", ",", "dim_ft", "=", "attn_ft", ".", "shape", "\n", "attn_len", "=", "min", "(", "seq_len", ",", "max_attn_len", ")", "\n", "\n", "# pad", "\n", "if", "seq_len", "<", "max_attn_len", ":", "\n", "      ", "new_ft", "=", "np", ".", "zeros", "(", "(", "max_attn_len", ",", "dim_ft", ")", ",", "np", ".", "float32", ")", "\n", "new_ft", "[", ":", "seq_len", "]", "=", "attn_ft", "\n", "# trim", "\n", "", "else", ":", "\n", "      ", "if", "trim_type", "==", "'top'", ":", "\n", "        ", "new_ft", "=", "attn_ft", "[", ":", "max_attn_len", "]", "\n", "", "elif", "trim_type", "==", "'select'", ":", "\n", "        ", "idxs", "=", "np", ".", "round", "(", "np", ".", "linspace", "(", "0", ",", "seq_len", "-", "1", ",", "max_attn_len", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "new_ft", "=", "attn_ft", "[", "idxs", "]", "\n", "", "", "return", "new_ft", ",", "attn_len", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.rolegraphs.RoleGraphDataset.get_caption_outs": [[104, 167], ["numpy.zeros", "rolegraphs.RoleGraphDataset.process_sent", "numpy.zeros", "graph_nodes.items", "numpy.zeros", "graph_nodes.items", "numpy.zeros", "range", "numpy.sum", "edges.append", "rolegraphs.RoleGraphDataset.role2int.get", "edges.append", "edges.append", "numpy.min", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.process_sent"], ["", "def", "get_caption_outs", "(", "self", ",", "out", ",", "sent", ",", "graph", ")", ":", "\n", "    ", "graph_nodes", ",", "graph_edges", "=", "graph", "\n", "#print(graph)", "\n", "\n", "verb_node2idxs", ",", "noun_node2idxs", "=", "{", "}", ",", "{", "}", "\n", "edges", "=", "[", "]", "\n", "out", "[", "'node_roles'", "]", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_verbs", "+", "self", ".", "num_nouns", ",", ")", ",", "np", ".", "int32", ")", "\n", "\n", "# root node", "\n", "sent_ids", ",", "sent_len", "=", "self", ".", "process_sent", "(", "sent", ",", "self", ".", "max_words_in_sent", ")", "\n", "out", "[", "'sent_ids'", "]", "=", "sent_ids", "\n", "out", "[", "'sent_lens'", "]", "=", "sent_len", "\n", "\n", "# graph: add verb nodes", "\n", "node_idx", "=", "1", "\n", "out", "[", "'verb_masks'", "]", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_verbs", ",", "self", ".", "max_words_in_sent", ")", ",", "np", ".", "bool", ")", "\n", "for", "knode", ",", "vnode", "in", "graph_nodes", ".", "items", "(", ")", ":", "\n", "      ", "k", "=", "node_idx", "-", "1", "\n", "if", "k", ">=", "self", ".", "num_verbs", ":", "\n", "        ", "break", "\n", "", "if", "vnode", "[", "'role'", "]", "==", "'V'", "and", "np", ".", "min", "(", "vnode", "[", "'spans'", "]", ")", "<", "self", ".", "max_words_in_sent", ":", "\n", "        ", "verb_node2idxs", "[", "knode", "]", "=", "node_idx", "\n", "for", "widx", "in", "vnode", "[", "'spans'", "]", ":", "\n", "          ", "if", "widx", "<", "self", ".", "max_words_in_sent", ":", "\n", "            ", "out", "[", "'verb_masks'", "]", "[", "k", "]", "[", "widx", "]", "=", "True", "\n", "", "", "out", "[", "'node_roles'", "]", "[", "node_idx", "-", "1", "]", "=", "self", ".", "role2int", "[", "'V'", "]", "\n", "# add root to verb edge", "\n", "edges", ".", "append", "(", "(", "0", ",", "node_idx", ")", ")", "\n", "node_idx", "+=", "1", "\n", "\n", "# graph: add noun nodes", "\n", "", "", "node_idx", "=", "1", "+", "self", ".", "num_verbs", "\n", "out", "[", "'noun_masks'", "]", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_nouns", ",", "self", ".", "max_words_in_sent", ")", ",", "np", ".", "bool", ")", "\n", "for", "knode", ",", "vnode", "in", "graph_nodes", ".", "items", "(", ")", ":", "\n", "      ", "k", "=", "node_idx", "-", "self", ".", "num_verbs", "-", "1", "\n", "if", "k", ">=", "self", ".", "num_nouns", ":", "\n", "          ", "break", "\n", "", "if", "vnode", "[", "'role'", "]", "not", "in", "[", "'ROOT'", ",", "'V'", "]", "and", "np", ".", "min", "(", "vnode", "[", "'spans'", "]", ")", "<", "self", ".", "max_words_in_sent", ":", "\n", "        ", "noun_node2idxs", "[", "knode", "]", "=", "node_idx", "\n", "for", "widx", "in", "vnode", "[", "'spans'", "]", ":", "\n", "          ", "if", "widx", "<", "self", ".", "max_words_in_sent", ":", "\n", "            ", "out", "[", "'noun_masks'", "]", "[", "k", "]", "[", "widx", "]", "=", "True", "\n", "", "", "out", "[", "'node_roles'", "]", "[", "node_idx", "-", "1", "]", "=", "self", ".", "role2int", ".", "get", "(", "vnode", "[", "'role'", "]", ",", "self", ".", "role2int", "[", "'NOUN'", "]", ")", "\n", "node_idx", "+=", "1", "\n", "\n", "# graph: add verb_node to noun_node edges", "\n", "", "", "for", "e", "in", "graph_edges", ":", "\n", "      ", "if", "e", "[", "0", "]", "in", "verb_node2idxs", "and", "e", "[", "1", "]", "in", "noun_node2idxs", ":", "\n", "        ", "edges", ".", "append", "(", "(", "verb_node2idxs", "[", "e", "[", "0", "]", "]", ",", "noun_node2idxs", "[", "e", "[", "1", "]", "]", ")", ")", "\n", "edges", ".", "append", "(", "(", "noun_node2idxs", "[", "e", "[", "1", "]", "]", ",", "verb_node2idxs", "[", "e", "[", "0", "]", "]", ")", ")", "\n", "\n", "", "", "num_nodes", "=", "1", "+", "self", ".", "num_verbs", "+", "self", ".", "num_nouns", "\n", "rel_matrix", "=", "np", ".", "zeros", "(", "(", "num_nodes", ",", "num_nodes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "src_nodeidx", ",", "tgt_nodeidx", "in", "edges", ":", "\n", "      ", "rel_matrix", "[", "tgt_nodeidx", ",", "src_nodeidx", "]", "=", "1", "\n", "# row norm", "\n", "", "for", "i", "in", "range", "(", "num_nodes", ")", ":", "\n", "      ", "s", "=", "np", ".", "sum", "(", "rel_matrix", "[", "i", "]", ")", "\n", "if", "s", ">", "0", ":", "\n", "        ", "rel_matrix", "[", "i", "]", "/=", "s", "\n", "\n", "", "", "out", "[", "'rel_edges'", "]", "=", "rel_matrix", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.rolegraphs.RoleGraphDataset.__getitem__": [[168, 215], ["rolegraphs.RoleGraphDataset.get_caption_outs", "numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.ones", "rolegraphs.RoleGraphDataset.load_attn_ft_by_name", "rolegraphs.RoleGraphDataset.pad_or_trim_feature", "int", "int"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.rolegraphs.RoleGraphDataset.get_caption_outs", "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.rolegraphs.RoleGraphDataset.load_attn_ft_by_name", "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.rolegraphs.RoleGraphDataset.pad_or_trim_feature"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "    ", "out", "=", "{", "}", "\n", "if", "self", ".", "is_train", ":", "\n", "      ", "video_idx", ",", "cap_idx", "=", "self", ".", "pair_idxs", "[", "idx", "]", "\n", "name", "=", "self", ".", "names", "[", "video_idx", "]", "\n", "sent", "=", "self", ".", "ref_captions", "[", "name", "]", "[", "cap_idx", "]", "\n", "out", "=", "self", ".", "get_caption_outs", "(", "out", ",", "sent", ",", "self", ".", "ref_graphs", "[", "sent", "]", ")", "\n", "###############################################", "\n", "verb_concept", "=", "self", ".", "verb_concept", "[", "name", "]", "[", "cap_idx", "]", "\n", "noun_concept", "=", "self", ".", "noun_concept", "[", "name", "]", "[", "cap_idx", "]", "\n", "verb_concept_all", "=", "self", ".", "verb_concept_all", "[", "name", "]", "\n", "noun_concept_all", "=", "self", ".", "noun_concept_all", "[", "name", "]", "\n", "verb_concept_label", "=", "np", ".", "zeros", "(", "512", ")", "\n", "noun_concept_label", "=", "np", ".", "zeros", "(", "1024", ")", "\n", "verb_concept_mask", "=", "np", ".", "ones", "(", "512", ")", "\n", "noun_concept_mask", "=", "np", ".", "ones", "(", "1024", ")", "\n", "verb_concept_label", "[", "verb_concept", "]", "=", "1", "\n", "noun_concept_label", "[", "noun_concept", "]", "=", "1", "\n", "for", "key", "in", "verb_concept_all", ":", "\n", "        ", "verb_concept_mask", "[", "int", "(", "key", ")", "]", "=", "0", "#float(verb_concept[key])", "\n", "", "for", "key", "in", "noun_concept_all", ":", "\n", "        ", "noun_concept_mask", "[", "int", "(", "key", ")", "]", "=", "0", "#float(noun_concept[key])", "\n", "", "verb_concept_mask", "[", "verb_concept", "]", "=", "1", "\n", "noun_concept_mask", "[", "noun_concept", "]", "=", "1", "\n", "\n", "out", "[", "'verb_concept_label'", "]", "=", "verb_concept_label", "# list#######", "\n", "out", "[", "'noun_concept_label'", "]", "=", "noun_concept_label", "#############", "\n", "out", "[", "'verb_concept_mask'", "]", "=", "verb_concept_mask", "# list#######", "\n", "out", "[", "'noun_concept_mask'", "]", "=", "noun_concept_mask", "#############", "\n", "####################################", "\n", "\n", "\n", "", "else", ":", "\n", "      ", "video_idx", "=", "idx", "\n", "name", "=", "self", ".", "names", "[", "idx", "]", "\n", "\n", "", "if", "self", ".", "load_video_first", ":", "\n", "      ", "attn_fts", ",", "attn_len", "=", "self", ".", "all_attn_fts", "[", "video_idx", "]", ",", "self", ".", "all_attn_lens", "[", "video_idx", "]", "\n", "", "else", ":", "\n", "      ", "attn_fts", "=", "self", ".", "load_attn_ft_by_name", "(", "name", ",", "self", ".", "attn_ft_files", ")", "\n", "attn_fts", ",", "attn_len", "=", "self", ".", "pad_or_trim_feature", "(", "attn_fts", ",", "self", ".", "max_attn_len", ",", "trim_type", "=", "'select'", ")", "\n", "\n", "", "out", "[", "'names'", "]", "=", "name", "\n", "out", "[", "'attn_fts'", "]", "=", "attn_fts", "\n", "out", "[", "'attn_lens'", "]", "=", "attn_len", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.rolegraphs.RoleGraphDataset.iterate_over_captions": [[216, 229], ["range", "len", "rolegraphs.collate_graph_fn", "rolegraphs.RoleGraphDataset.get_caption_outs", "data.append"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.rolegraphs.collate_graph_fn", "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.rolegraphs.RoleGraphDataset.get_caption_outs"], ["", "def", "iterate_over_captions", "(", "self", ",", "batch_size", ")", ":", "\n", "# the sentence order is the same as self.captions", "\n", "    ", "idx", "=", "0", "\n", "for", "s", "in", "range", "(", "0", ",", "len", "(", "self", ".", "captions", ")", ",", "batch_size", ")", ":", "\n", "      ", "e", "=", "s", "+", "batch_size", "\n", "data", "=", "[", "]", "\n", "for", "sent", "in", "self", ".", "captions", "[", "s", ":", "e", "]", ":", "\n", "        ", "out", "=", "self", ".", "get_caption_outs", "(", "{", "}", ",", "sent", ",", "self", ".", "ref_graphs", "[", "sent", "]", ")", "\n", "data", ".", "append", "(", "out", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "outs", "=", "collate_graph_fn", "(", "data", ")", "\n", "yield", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.rolegraphs.collate_graph_fn": [[230, 253], ["len", "numpy.max", "numpy.max", "numpy.stack", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "", "def", "collate_graph_fn", "(", "data", ")", ":", "\n", "  ", "outs", "=", "{", "}", "\n", "for", "key", "in", "[", "'names'", ",", "'attn_fts'", ",", "'attn_lens'", ",", "'sent_ids'", ",", "'sent_lens'", ",", "\n", "'verb_masks'", ",", "'noun_masks'", ",", "'node_roles'", ",", "'rel_edges'", ",", "\n", "'verb_concept_mask'", ",", "'noun_concept_mask'", ",", "\n", "'verb_concept_label'", ",", "'noun_concept_label'", ",", "'sent_concept'", "]", ":", "\n", "    ", "if", "key", "in", "data", "[", "0", "]", ":", "\n", "      ", "outs", "[", "key", "]", "=", "[", "x", "[", "key", "]", "for", "x", "in", "data", "]", "\n", "\n", "", "", "batch_size", "=", "len", "(", "data", ")", "\n", "\n", "# reduce attn_lens", "\n", "if", "'attn_fts'", "in", "outs", ":", "\n", "    ", "max_len", "=", "np", ".", "max", "(", "outs", "[", "'attn_lens'", "]", ")", "\n", "outs", "[", "'attn_fts'", "]", "=", "np", ".", "stack", "(", "outs", "[", "'attn_fts'", "]", ",", "0", ")", "[", ":", ",", ":", "max_len", "]", "\n", "\n", "# reduce caption_ids lens", "\n", "", "if", "'sent_lens'", "in", "outs", ":", "\n", "    ", "max_cap_len", "=", "np", ".", "max", "(", "outs", "[", "'sent_lens'", "]", ")", "\n", "outs", "[", "'sent_ids'", "]", "=", "np", ".", "array", "(", "outs", "[", "'sent_ids'", "]", ")", "[", ":", ",", ":", "max_cap_len", "]", "\n", "outs", "[", "'verb_masks'", "]", "=", "np", ".", "array", "(", "outs", "[", "'verb_masks'", "]", ")", "[", ":", ",", ":", ",", ":", "max_cap_len", "]", "\n", "outs", "[", "'noun_masks'", "]", "=", "np", ".", "array", "(", "outs", "[", "'noun_masks'", "]", ")", "[", ":", ",", ":", ",", ":", "max_cap_len", "]", "\n", "", "return", "outs", "\n", "", ""]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__init__": [[9, 41], ["numpy.load", "json.load", "numpy.concatenate", "len", "mpdata.MPDataset.print_fn", "open", "mpdata.MPDataset.mp_fts.append", "json.load", "set", "enumerate", "list", "len", "mpdata.MPDataset.print_fn", "numpy.load", "str", "open", "enumerate", "mpdata.MPDataset.captions.add", "mpdata.MPDataset.pair_idxs.append"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load", "home.repos.pwc.inspect_result.Roc-Ng_HANet.framework.configbase.PathCfg.load"], ["  ", "def", "__init__", "(", "self", ",", "name_file", ",", "mp_ft_files", ",", "word2int_file", ",", "max_words_in_sent", ",", "\n", "ref_caption_file", "=", "None", ",", "is_train", "=", "False", ",", "_logger", "=", "None", ")", ":", "\n", "    ", "if", "_logger", "is", "None", ":", "\n", "      ", "self", ".", "print_fn", "=", "print", "\n", "", "else", ":", "\n", "      ", "self", ".", "print_fn", "=", "_logger", ".", "info", "\n", "", "self", ".", "max_words_in_sent", "=", "max_words_in_sent", "\n", "self", ".", "is_train", "=", "is_train", "\n", "\n", "self", ".", "names", "=", "np", ".", "load", "(", "name_file", ")", "\n", "self", ".", "word2int", "=", "json", ".", "load", "(", "open", "(", "word2int_file", ")", ")", "\n", "\n", "self", ".", "mp_fts", "=", "[", "]", "\n", "for", "mp_ft_file", "in", "mp_ft_files", ":", "\n", "      ", "self", ".", "mp_fts", ".", "append", "(", "np", ".", "load", "(", "mp_ft_file", ")", ")", "\n", "", "self", ".", "mp_fts", "=", "np", ".", "concatenate", "(", "self", ".", "mp_fts", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "num_videos", "=", "len", "(", "self", ".", "mp_fts", ")", "\n", "self", ".", "print_fn", "(", "'mp_fts size %s'", "%", "(", "str", "(", "self", ".", "mp_fts", ".", "shape", ")", ")", ")", "\n", "\n", "if", "ref_caption_file", "is", "None", ":", "\n", "      ", "self", ".", "ref_captions", "=", "None", "\n", "", "else", ":", "\n", "      ", "self", ".", "ref_captions", "=", "json", ".", "load", "(", "open", "(", "ref_caption_file", ")", ")", "\n", "self", ".", "captions", "=", "set", "(", ")", "\n", "self", ".", "pair_idxs", "=", "[", "]", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "        ", "for", "j", ",", "sent", "in", "enumerate", "(", "self", ".", "ref_captions", "[", "name", "]", ")", ":", "\n", "          ", "self", ".", "captions", ".", "add", "(", "sent", ")", "\n", "self", ".", "pair_idxs", ".", "append", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "self", ".", "captions", "=", "list", "(", "self", ".", "captions", ")", "\n", "self", ".", "num_pairs", "=", "len", "(", "self", ".", "pair_idxs", ")", "\n", "self", ".", "print_fn", "(", "'captions size %d'", "%", "self", ".", "num_pairs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.process_sent": [[42, 50], ["len", "numpy.array", "mpdata.MPDataset.word2int.get", "sent.split"], "methods", ["None"], ["", "", "def", "process_sent", "(", "self", ",", "sent", ",", "max_words", ")", ":", "\n", "    ", "tokens", "=", "[", "self", ".", "word2int", ".", "get", "(", "w", ",", "UNK", ")", "for", "w", "in", "sent", ".", "split", "(", ")", "]", "\n", "# # add BOS, EOS?", "\n", "# tokens = [BOS] + tokens + [EOS]", "\n", "tokens", "=", "tokens", "[", ":", "max_words", "]", "\n", "tokens_len", "=", "len", "(", "tokens", ")", "\n", "tokens", "=", "np", ".", "array", "(", "tokens", "+", "[", "EOS", "]", "*", "(", "max_words", "-", "tokens_len", ")", ")", "\n", "return", "tokens", ",", "tokens_len", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__len__": [[51, 56], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "is_train", ":", "\n", "      ", "return", "self", ".", "num_pairs", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "num_videos", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.__getitem__": [[57, 74], ["mpdata.MPDataset.process_sent"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.process_sent"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "    ", "out", "=", "{", "}", "\n", "if", "self", ".", "is_train", ":", "\n", "      ", "video_idx", ",", "cap_idx", "=", "self", ".", "pair_idxs", "[", "idx", "]", "\n", "name", "=", "self", ".", "names", "[", "video_idx", "]", "\n", "mp_ft", "=", "self", ".", "mp_fts", "[", "video_idx", "]", "\n", "sent", "=", "self", ".", "ref_captions", "[", "name", "]", "[", "cap_idx", "]", "\n", "cap_ids", ",", "cap_len", "=", "self", ".", "process_sent", "(", "sent", ",", "self", ".", "max_words_in_sent", ")", "\n", "out", "[", "'caption_ids'", "]", "=", "cap_ids", "\n", "out", "[", "'caption_lens'", "]", "=", "cap_len", "\n", "", "else", ":", "\n", "      ", "name", "=", "self", ".", "names", "[", "idx", "]", "\n", "mp_ft", "=", "self", ".", "mp_fts", "[", "idx", "]", "\n", "\n", "", "out", "[", "'names'", "]", "=", "name", "\n", "out", "[", "'mp_fts'", "]", "=", "mp_ft", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.iterate_over_captions": [[75, 87], ["range", "len", "mpdata.MPDataset.process_sent", "cap_ids.append", "cap_lens.append", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.MPDataset.process_sent"], ["", "def", "iterate_over_captions", "(", "self", ",", "batch_size", ")", ":", "\n", "# the sentence order is the same as self.captions", "\n", "    ", "for", "s", "in", "range", "(", "0", ",", "len", "(", "self", ".", "captions", ")", ",", "batch_size", ")", ":", "\n", "      ", "e", "=", "s", "+", "batch_size", "\n", "cap_ids", ",", "cap_lens", "=", "[", "]", ",", "[", "]", "\n", "for", "sent", "in", "self", ".", "captions", "[", "s", ":", "e", "]", ":", "\n", "        ", "cap_id", ",", "cap_len", "=", "self", ".", "process_sent", "(", "sent", ",", "self", ".", "max_words_in_sent", ")", "\n", "cap_ids", ".", "append", "(", "cap_id", ")", "\n", "cap_lens", ".", "append", "(", "cap_len", ")", "\n", "", "yield", "{", "\n", "'caption_ids'", ":", "np", ".", "array", "(", "cap_ids", ",", "np", ".", "int32", ")", ",", "\n", "'caption_lens'", ":", "np", ".", "array", "(", "cap_lens", ",", "np", ".", "int32", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Roc-Ng_HANet.readers.mpdata.collate_fn": [[90, 102], ["numpy.max", "numpy.array"], "function", ["None"], ["", "", "", "def", "collate_fn", "(", "data", ")", ":", "\n", "  ", "outs", "=", "{", "}", "\n", "for", "key", "in", "[", "'names'", ",", "'mp_fts'", ",", "'caption_ids'", ",", "'caption_lens'", "]", ":", "\n", "    ", "if", "key", "in", "data", "[", "0", "]", ":", "\n", "      ", "outs", "[", "key", "]", "=", "[", "x", "[", "key", "]", "for", "x", "in", "data", "]", "\n", "\n", "# reduce caption_ids lens", "\n", "", "", "if", "'caption_lens'", "in", "outs", ":", "\n", "    ", "max_cap_len", "=", "np", ".", "max", "(", "outs", "[", "'caption_lens'", "]", ")", "\n", "outs", "[", "'caption_ids'", "]", "=", "np", ".", "array", "(", "outs", "[", "'caption_ids'", "]", ")", "[", ":", ",", ":", "max_cap_len", "]", "\n", "\n", "", "return", "outs", "\n", "\n"]]}