{"home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.wrn_mixup_model.BasicBlock.__init__": [[21, 35], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.wrn_mixup_model.BasicBlock.forward": [[35, 45], ["wrn_mixup_model.BasicBlock.relu2", "wrn_mixup_model.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wrn_mixup_model.BasicBlock.relu1", "wrn_mixup_model.BasicBlock.relu1", "wrn_mixup_model.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "wrn_mixup_model.BasicBlock.bn1", "wrn_mixup_model.BasicBlock.bn1", "wrn_mixup_model.BasicBlock.conv1", "wrn_mixup_model.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.wrn_mixup_model.NetworkBlock.__init__": [[49, 52], ["torch.Module.__init__", "wrn_mixup_model.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.wrn_mixup_model.NetworkBlock._make_layer": [[52, 57], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.wrn_mixup_model.NetworkBlock.forward": [[57, 59], ["wrn_mixup_model.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.wrn_mixup_model.WideResNet.__init__": [[94, 129], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wrn_mixup_model.NetworkBlock", "wrn_mixup_model.NetworkBlock", "wrn_mixup_model.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "wrn_mixup_model.WideResNet.modules", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "wrn_mixup_model.WideResNet.linear.bias.data.fill_", "backbone.distLinear", "isinstance", "int", "int", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "28", ",", "widen_factor", "=", "10", ",", "num_classes", "=", "200", ",", "loss_type", "=", "'dist'", ",", "per_img_std", "=", "False", ",", "stride", "=", "1", ",", "dropRate", "=", "0.5", ")", ":", "\n", "        ", "flatten", "=", "True", "\n", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "stride", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and linear", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "if", "loss_type", "==", "'softmax'", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "int", "(", "num_classes", ")", ")", "\n", "self", ".", "linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear", "=", "backbone", ".", "distLinear", "(", "nChannels", "[", "3", "]", ",", "int", "(", "num_classes", ")", ")", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "flatten", ":", "\n", "            ", "self", ".", "final_feat_dim", "=", "640", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.wrn_mixup_model.WideResNet.forward": [[131, 181], ["wrn_mixup_model.WideResNet.conv1", "wrn_mixup_model.WideResNet.block1", "wrn_mixup_model.WideResNet.block2", "wrn_mixup_model.WideResNet.block3", "wrn_mixup_model.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wrn_mixup_model.WideResNet.linear", "wrn_mixup_model.WideResNet.conv1", "wrn_mixup_model.WideResNet.block1", "wrn_mixup_model.WideResNet.block2", "wrn_mixup_model.WideResNet.block3", "wrn_mixup_model.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wrn_mixup_model.WideResNet.linear", "random.randint", "wrn_mixup_model.mixup_data", "wrn_mixup_model.mixup_data", "wrn_mixup_model.mixup_data", "wrn_mixup_model.mixup_data", "wrn_mixup_model.WideResNet.bn1", "out.view.view.size", "wrn_mixup_model.WideResNet.bn1", "out.view.view.size", "out.view.view.size", "out.view.view.size"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.wrn_mixup_model.mixup_data", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.wrn_mixup_model.mixup_data", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.wrn_mixup_model.mixup_data", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.wrn_mixup_model.mixup_data"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "target", "=", "None", ",", "mixup", "=", "False", ",", "mixup_hidden", "=", "True", ",", "mixup_alpha", "=", "None", ",", "lam", "=", "0.4", ")", ":", "\n", "        ", "if", "target", "is", "not", "None", ":", "\n", "            ", "if", "mixup_hidden", ":", "\n", "                ", "layer_mix", "=", "random", ".", "randint", "(", "0", ",", "3", ")", "\n", "", "elif", "mixup", ":", "\n", "                ", "layer_mix", "=", "0", "\n", "", "else", ":", "\n", "                ", "layer_mix", "=", "None", "\n", "\n", "", "out", "=", "x", "\n", "\n", "target_a", "=", "target_b", "=", "target", "\n", "\n", "if", "layer_mix", "==", "0", ":", "\n", "                ", "out", ",", "target_a", ",", "target_b", ",", "lam", "=", "mixup_data", "(", "out", ",", "target", ",", "lam", "=", "lam", ")", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "\n", "\n", "if", "layer_mix", "==", "1", ":", "\n", "                ", "out", ",", "target_a", ",", "target_b", ",", "lam", "=", "mixup_data", "(", "out", ",", "target", ",", "lam", "=", "lam", ")", "\n", "\n", "", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "\n", "if", "layer_mix", "==", "2", ":", "\n", "                ", "out", ",", "target_a", ",", "target_b", ",", "lam", "=", "mixup_data", "(", "out", ",", "target", ",", "lam", "=", "lam", ")", "\n", "\n", "\n", "", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "if", "layer_mix", "==", "3", ":", "\n", "                ", "out", ",", "target_a", ",", "target_b", ",", "lam", "=", "mixup_data", "(", "out", ",", "target", ",", "lam", "=", "lam", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out1", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", ",", "out1", ",", "target_a", ",", "target_b", "\n", "", "else", ":", "\n", "            ", "out", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out1", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ",", "out1", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.wrn_mixup_model.to_one_hot": [[61, 76], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "y_onehot.cuda.zero_", "inp.type", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "y_onehot.cuda.scatter_", "torch.autograd.Variable", "inp.size", "y_onehot.cuda.cuda", "x.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "", "def", "to_one_hot", "(", "inp", ",", "num_classes", ")", ":", "\n", "\n", "    ", "y_onehot", "=", "torch", ".", "FloatTensor", "(", "inp", ".", "size", "(", "0", ")", ",", "num_classes", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "y_onehot", "=", "y_onehot", ".", "cuda", "(", ")", "\n", "\n", "", "y_onehot", ".", "zero_", "(", ")", "\n", "x", "=", "inp", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "\n", "", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "1", ")", "\n", "y_onehot", ".", "scatter_", "(", "1", ",", "x", ",", "1", ")", "\n", "\n", "return", "Variable", "(", "y_onehot", ",", "requires_grad", "=", "False", ")", "\n", "# return y_onehot", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.wrn_mixup_model.mixup_data": [[79, 91], ["torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "x.size", "index.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "mixup_data", "(", "x", ",", "y", ",", "lam", ")", ":", "\n", "\n", "    ", "'''Compute the mixup data. Return mixed inputs, pairs of targets, and lambda'''", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "index", "=", "torch", ".", "randperm", "(", "batch_size", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "index", "=", "index", ".", "cuda", "(", ")", "\n", "", "mixed_x", "=", "lam", "*", "x", "+", "(", "1", "-", "lam", ")", "*", "x", "[", "index", ",", ":", "]", "\n", "y_a", ",", "y_b", "=", "y", ",", "y", "[", "index", "]", "\n", "\n", "return", "mixed_x", ",", "y_a", ",", "y_b", ",", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.wrn_mixup_model.wrn28_10": [[184, 187], ["wrn_mixup_model.WideResNet"], "function", ["None"], ["", "", "", "def", "wrn28_10", "(", "num_classes", "=", "10", ",", "drop_rate", "=", "0.5", ",", "loss_type", "=", "'dist'", ")", ":", "\n", "    ", "model", "=", "WideResNet", "(", "depth", "=", "28", ",", "widen_factor", "=", "10", ",", "num_classes", "=", "num_classes", ",", "loss_type", "=", "loss_type", ",", "per_img_std", "=", "False", ",", "stride", "=", "1", ",", "dropRate", "=", "drop_rate", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.train.train_manifold_mixup": [[32, 104], ["torch.CrossEntropyLoss", "torch.Adam", "print", "range", "model.parameters", "print", "model.train", "enumerate", "model.eval", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "numpy.random.beta", "model", "train.train_manifold_mixup.mixup_criterion"], "function", ["None"], ["def", "train_manifold_mixup", "(", "base_loader", ",", "base_loader_test", ",", "model", ",", "start_epoch", ",", "stop_epoch", ",", "params", ")", ":", "\n", "\n", "    ", "def", "mixup_criterion", "(", "criterion", ",", "pred", ",", "y_a", ",", "y_b", ",", "lam", ")", ":", "\n", "        ", "return", "lam", "*", "criterion", "(", "pred", ",", "y_a", ")", "+", "(", "1", "-", "lam", ")", "*", "criterion", "(", "pred", ",", "y_b", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ")", "\n", "print", "(", "\"stop_epoch\"", ",", "start_epoch", ",", "stop_epoch", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "stop_epoch", ")", ":", "\n", "        ", "print", "(", "'\\nEpoch: %d'", "%", "epoch", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "reg_loss", "=", "0", "\n", "correct", "=", "0", "\n", "correct1", "=", "0.0", "\n", "total", "=", "0", "\n", "\n", "for", "batch_idx", ",", "(", "input_var", ",", "target_var", ")", "in", "enumerate", "(", "base_loader", ")", ":", "\n", "            ", "if", "use_gpu", ":", "\n", "                ", "input_var", ",", "target_var", "=", "input_var", ".", "cuda", "(", ")", ",", "target_var", ".", "cuda", "(", ")", "\n", "", "input_var", ",", "target_var", "=", "Variable", "(", "input_var", ")", ",", "Variable", "(", "target_var", ")", "\n", "# print(target_var, input_var)", "\n", "lam", "=", "np", ".", "random", ".", "beta", "(", "params", ".", "alpha", ",", "params", ".", "alpha", ")", "\n", "_", ",", "outputs", ",", "target_a", ",", "target_b", "=", "model", "(", "input_var", ",", "target_var", ",", "mixup_hidden", "=", "True", ",", "mixup_alpha", "=", "params", ".", "alpha", ",", "lam", "=", "lam", ")", "\n", "loss", "=", "mixup_criterion", "(", "criterion", ",", "outputs", ",", "target_a", ",", "target_b", ",", "lam", ")", "\n", "train_loss", "+=", "loss", ".", "data", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "target_var", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "lam", "*", "predicted", ".", "eq", "(", "target_a", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "+", "(", "1", "-", "lam", ")", "*", "predicted", ".", "eq", "(", "target_b", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "batch_idx", "%", "50", "==", "0", ":", "\n", "                ", "print", "(", "'{0}/{1}'", ".", "format", "(", "batch_idx", ",", "len", "(", "base_loader", ")", ")", ",", "'Loss: %.3f | Acc: %.3f%%  '", "\n", "%", "(", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "params", ".", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "params", ".", "checkpoint_dir", ")", "\n", "\n", "", "if", "(", "epoch", "%", "params", ".", "save_freq", "==", "0", ")", "or", "(", "epoch", "==", "stop_epoch", "-", "1", ")", ":", "\n", "            ", "outfile", "=", "os", ".", "path", ".", "join", "(", "params", ".", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "'state'", ":", "model", ".", "state_dict", "(", ")", "}", ",", "outfile", ")", "\n", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "base_loader_test", ")", ":", "\n", "                ", "if", "use_gpu", ":", "\n", "                    ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "inputs", ",", "targets", "=", "Variable", "(", "inputs", ")", ",", "Variable", "(", "targets", ")", "\n", "f", ",", "outputs", "=", "model", ".", "forward", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "test_loss", "+=", "loss", ".", "data", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "", "print", "(", "'Loss: %.3f | Acc: %.3f%%'", "\n", "%", "(", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.train.train_s2m2": [[106, 269], ["os.path.exists", "torch.CrossEntropyLoss", "torch.Sequential", "nn.Sequential.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "print", "range", "torch.load", "torch.load", "torch.load", "torch.load", "enumerate", "torch.save", "torch.save", "torch.save", "torch.save", "torch.Linear", "print", "nn.Sequential.load_state_dict", "print", "model.train", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "enumerate", "model.eval", "methods.baselinefinetune.BaselineFinetune", "enumerate", "print", "print", "print", "torch.load.append", "numpy.random.beta", "model", "train.train_manifold_mixup.mixup_criterion"], "function", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "train_s2m2", "(", "base_loader", ",", "base_loader_test", ",", "val_loader", ",", "model", ",", "start_epoch", ",", "stop_epoch", ",", "params", ",", "tmp", ")", ":", "\n", "    ", "val_acc_best", "=", "0.0", "\n", "\n", "if", "path", ".", "exists", "(", "'./val_'", "+", "params", ".", "dataset", "+", "'.pt'", ")", ":", "\n", "        ", "loader", "=", "torch", ".", "load", "(", "'./val_'", "+", "params", ".", "dataset", "+", "'.pt'", ")", "\n", "", "else", ":", "\n", "        ", "loader", "=", "[", "]", "\n", "for", "_", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "loader", ".", "append", "(", "x", ")", "\n", "", "torch", ".", "save", "(", "loader", ",", "'./val_'", "+", "params", ".", "dataset", "+", "'.pt'", ")", "\n", "\n", "\n", "", "def", "mixup_criterion", "(", "criterion", ",", "pred", ",", "y_a", ",", "y_b", ",", "lam", ")", ":", "\n", "        ", "return", "lam", "*", "criterion", "(", "pred", ",", "y_a", ")", "+", "(", "1", "-", "lam", ")", "*", "criterion", "(", "pred", ",", "y_b", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "rotate_classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "640", ",", "4", ")", ")", "\n", "rotate_classifier", ".", "cuda", "(", ")", "\n", "\n", "if", "'rotate'", "in", "tmp", ":", "\n", "        ", "print", "(", "\"loading rotate model\"", ")", "\n", "rotate_classifier", ".", "load_state_dict", "(", "tmp", "[", "'rotate'", "]", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "model", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "rotate_classifier", ".", "parameters", "(", ")", "}", "\n", "]", ")", "\n", "\n", "print", "(", "\"stop_epoch\"", ",", "start_epoch", ",", "stop_epoch", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "stop_epoch", ")", ":", "\n", "        ", "print", "(", "'\\nEpoch: %d'", "%", "epoch", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "rotate_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "base_loader", ")", ":", "\n", "\n", "            ", "if", "use_gpu", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "lam", "=", "np", ".", "random", ".", "beta", "(", "params", ".", "alpha", ",", "params", ".", "alpha", ")", "\n", "f", ",", "outputs", ",", "target_a", ",", "target_b", "=", "model", "(", "inputs", ",", "targets", ",", "mixup_hidden", "=", "True", ",", "mixup_alpha", "=", "params", ".", "alpha", ",", "lam", "=", "lam", ")", "\n", "loss", "=", "mixup_criterion", "(", "criterion", ",", "outputs", ",", "target_a", ",", "target_b", ",", "lam", ")", "\n", "train_loss", "+=", "loss", ".", "data", ".", "item", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "lam", "*", "predicted", ".", "eq", "(", "target_a", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "+", "(", "1", "-", "lam", ")", "*", "predicted", ".", "eq", "(", "target_b", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", ")", "\n", "\n", "bs", "=", "inputs", ".", "size", "(", "0", ")", "\n", "inputs_", "=", "[", "]", "\n", "targets_", "=", "[", "]", "\n", "a_", "=", "[", "]", "\n", "indices", "=", "np", ".", "arange", "(", "bs", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "\n", "split_size", "=", "int", "(", "bs", "/", "4", ")", "\n", "for", "j", "in", "indices", "[", "0", ":", "split_size", "]", ":", "\n", "                ", "x90", "=", "inputs", "[", "j", "]", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x180", "=", "x90", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x270", "=", "x180", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "inputs_", "+=", "[", "inputs", "[", "j", "]", ",", "x90", ",", "x180", ",", "x270", "]", "\n", "targets_", "+=", "[", "targets", "[", "j", "]", "for", "_", "in", "range", "(", "4", ")", "]", "\n", "a_", "+=", "[", "torch", ".", "tensor", "(", "0", ")", ",", "torch", ".", "tensor", "(", "1", ")", ",", "torch", ".", "tensor", "(", "2", ")", ",", "torch", ".", "tensor", "(", "3", ")", "]", "\n", "\n", "", "inputs", "=", "Variable", "(", "torch", ".", "stack", "(", "inputs_", ",", "0", ")", ")", "\n", "targets", "=", "Variable", "(", "torch", ".", "stack", "(", "targets_", ",", "0", ")", ")", "\n", "a_", "=", "Variable", "(", "torch", ".", "stack", "(", "a_", ",", "0", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "                ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "a_", "=", "a_", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "rf", ",", "outputs", "=", "model", "(", "inputs", ")", "\n", "rotate_outputs", "=", "rotate_classifier", "(", "rf", ")", "\n", "rloss", "=", "criterion", "(", "rotate_outputs", ",", "a_", ")", "\n", "closs", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", "=", "(", "rloss", "+", "closs", ")", "/", "2.0", "\n", "\n", "rotate_loss", "+=", "rloss", ".", "data", ".", "item", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "if", "batch_idx", "%", "50", "==", "0", ":", "\n", "                ", "print", "(", "'{0}/{1}'", ".", "format", "(", "batch_idx", ",", "len", "(", "base_loader", ")", ")", ",", "\n", "'Loss: %.3f | Acc: %.3f%% | RotLoss: %.3f  '", "\n", "%", "(", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "\n", "100.", "*", "correct", "/", "total", ",", "rotate_loss", "/", "(", "batch_idx", "+", "1", ")", ")", ")", "\n", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "params", ".", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "params", ".", "checkpoint_dir", ")", "\n", "\n", "", "if", "(", "epoch", "%", "params", ".", "save_freq", "==", "0", ")", "or", "(", "epoch", "==", "stop_epoch", "-", "1", ")", ":", "\n", "            ", "outfile", "=", "os", ".", "path", ".", "join", "(", "params", ".", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "'state'", ":", "model", ".", "state_dict", "(", ")", "}", ",", "outfile", ")", "\n", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "base_loader_test", ")", ":", "\n", "                ", "if", "use_gpu", ":", "\n", "                    ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "inputs", ",", "targets", "=", "Variable", "(", "inputs", ")", ",", "Variable", "(", "targets", ")", "\n", "f", ",", "outputs", "=", "model", ".", "forward", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "test_loss", "+=", "loss", ".", "data", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "", "print", "(", "'Loss: %.3f | Acc: %.3f%%'", "\n", "%", "(", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "\n", "\n", "", "valmodel", "=", "BaselineFinetune", "(", "model_dict", "[", "params", ".", "model", "]", ",", "5", ",", "1", ",", "loss_type", "=", "'dist'", ")", "\n", "valmodel", ".", "n_query", "=", "15", "\n", "acc_all1", ",", "acc_all2", ",", "acc_all3", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "image_size", ",", "image_size", ")", "\n", "if", "use_gpu", ":", "\n", "                ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "f", ",", "scores", "=", "model", "(", "x", ")", "\n", "", "f", "=", "f", ".", "view", "(", "5", ",", "16", ",", "-", "1", ")", "\n", "scores", "=", "valmodel", ".", "set_forward_adaptation", "(", "f", ".", "cpu", "(", ")", ")", "\n", "acc", "=", "[", "]", "\n", "for", "each_score", "in", "scores", ":", "\n", "                ", "pred", "=", "each_score", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "y", "=", "np", ".", "repeat", "(", "range", "(", "5", ")", ",", "15", ")", "\n", "acc", ".", "append", "(", "np", ".", "mean", "(", "pred", "==", "y", ")", "*", "100", ")", "\n", "", "acc_all1", ".", "append", "(", "acc", "[", "0", "]", ")", "\n", "acc_all2", ".", "append", "(", "acc", "[", "1", "]", ")", "\n", "acc_all3", ".", "append", "(", "acc", "[", "2", "]", ")", "\n", "\n", "", "print", "(", "'Test Acc at 100= %4.2f%%'", "%", "(", "np", ".", "mean", "(", "acc_all1", ")", ")", ")", "\n", "print", "(", "'Test Acc at 200= %4.2f%%'", "%", "(", "np", ".", "mean", "(", "acc_all2", ")", ")", ")", "\n", "print", "(", "'Test Acc at 300= %4.2f%%'", "%", "(", "np", ".", "mean", "(", "acc_all3", ")", ")", ")", "\n", "\n", "if", "np", ".", "mean", "(", "acc_all3", ")", ">", "val_acc_best", ":", "\n", "            ", "val_acc_best", "=", "np", ".", "mean", "(", "acc_all3", ")", "\n", "bestfile", "=", "os", ".", "path", ".", "join", "(", "params", ".", "checkpoint_dir", ",", "'best.tar'", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "'state'", ":", "model", ".", "state_dict", "(", ")", ",", "'rotate'", ":", "rotate_classifier", ".", "state_dict", "(", ")", "}", ",", "bestfile", ")", "\n", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.train.train_rotation": [[271, 387], ["torch.Sequential", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.CrossEntropyLoss", "print", "range", "torch.Linear", "nn.Sequential.cuda", "print", "nn.Sequential.load_state_dict", "nn.Sequential.train", "model.train", "enumerate", "model.eval", "nn.Sequential.eval", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "x.size", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model.forward", "nn.Sequential.", "torch.optim.Adam.zero_grad", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "loss.backward", "torch.optim.Adam.step", "os.path.isdir", "os.makedirs", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "model.parameters", "nn.Sequential.parameters", "x[].transpose().flip", "x[].transpose().flip.transpose().flip", "x90.transpose().flip.transpose().flip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x_.cuda.cuda", "y_.cuda.cuda", "a_.cuda.cuda", "lossfn.data.item", "lossfn.data.item", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "model.state_dict", "nn.Sequential.state_dict", "x.size", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model", "nn.Sequential.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax.size", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "x[].transpose", "x[].transpose().flip.transpose", "x90.transpose().flip.transpose", "range", "len", "x[].transpose().flip", "x[].transpose().flip.transpose().flip", "x90.transpose().flip.transpose().flip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x_.cuda.cuda", "y_.cuda.cuda", "a_.cuda.cuda", "float", "float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "float", "float", "x[].transpose", "x[].transpose().flip.transpose", "x90.transpose().flip.transpose", "range"], "function", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "train_rotation", "(", "base_loader", ",", "base_loader_test", ",", "model", ",", "start_epoch", ",", "stop_epoch", ",", "params", ",", "tmp", ")", ":", "\n", "    ", "rotate_classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "640", ",", "4", ")", ")", "\n", "if", "use_gpu", ":", "\n", "        ", "rotate_classifier", ".", "cuda", "(", ")", "\n", "\n", "", "if", "'rotate'", "in", "tmp", ":", "\n", "        ", "print", "(", "\"loading rotate model\"", ")", "\n", "rotate_classifier", ".", "load_state_dict", "(", "tmp", "[", "'rotate'", "]", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "model", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "rotate_classifier", ".", "parameters", "(", ")", "}", "\n", "]", ")", "\n", "\n", "lossfn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "max_acc", "=", "0", "\n", "\n", "print", "(", "\"stop_epoch\"", ",", "start_epoch", ",", "stop_epoch", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "stop_epoch", ")", ":", "\n", "        ", "rotate_classifier", ".", "train", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "avg_loss", "=", "0", "\n", "avg_rloss", "=", "0", "\n", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "base_loader", ")", ":", "\n", "            ", "bs", "=", "x", ".", "size", "(", "0", ")", "\n", "x_", "=", "[", "]", "\n", "y_", "=", "[", "]", "\n", "a_", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "bs", ")", ":", "\n", "                ", "x90", "=", "x", "[", "j", "]", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x180", "=", "x90", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x270", "=", "x180", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x_", "+=", "[", "x", "[", "j", "]", ",", "x90", ",", "x180", ",", "x270", "]", "\n", "y_", "+=", "[", "y", "[", "j", "]", "for", "_", "in", "range", "(", "4", ")", "]", "\n", "a_", "+=", "[", "torch", ".", "tensor", "(", "0", ")", ",", "torch", ".", "tensor", "(", "1", ")", ",", "torch", ".", "tensor", "(", "2", ")", ",", "torch", ".", "tensor", "(", "3", ")", "]", "\n", "\n", "", "x_", "=", "Variable", "(", "torch", ".", "stack", "(", "x_", ",", "0", ")", ")", "\n", "y_", "=", "Variable", "(", "torch", ".", "stack", "(", "y_", ",", "0", ")", ")", "\n", "a_", "=", "Variable", "(", "torch", ".", "stack", "(", "a_", ",", "0", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "                ", "x_", "=", "x_", ".", "cuda", "(", ")", "\n", "y_", "=", "y_", ".", "cuda", "(", ")", "\n", "a_", "=", "a_", ".", "cuda", "(", ")", "\n", "\n", "", "f", ",", "scores", "=", "model", ".", "forward", "(", "x_", ")", "\n", "rotate_scores", "=", "rotate_classifier", "(", "f", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "rloss", "=", "lossfn", "(", "rotate_scores", ",", "a_", ")", "\n", "closs", "=", "lossfn", "(", "scores", ",", "y_", ")", "\n", "loss", "=", "0.5", "*", "closs", "+", "0.5", "*", "rloss", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "avg_loss", "=", "avg_loss", "+", "closs", ".", "data", ".", "item", "(", ")", "\n", "avg_rloss", "=", "avg_rloss", "+", "rloss", ".", "data", ".", "item", "(", ")", "\n", "\n", "\n", "if", "i", "%", "50", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch {:d} | Batch {:d}/{:d} | Loss {:f} | Rotate Loss {:f}'", ".", "format", "(", "epoch", ",", "i", ",", "len", "(", "base_loader", ")", ",", "avg_loss", "/", "float", "(", "i", "+", "1", ")", ",", "avg_rloss", "/", "float", "(", "i", "+", "1", ")", ")", ")", "\n", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "params", ".", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "params", ".", "checkpoint_dir", ")", "\n", "\n", "", "if", "(", "epoch", "%", "params", ".", "save_freq", "==", "0", ")", "or", "(", "epoch", "==", "stop_epoch", "-", "1", ")", ":", "\n", "            ", "outfile", "=", "os", ".", "path", ".", "join", "(", "params", ".", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "'state'", ":", "model", ".", "state_dict", "(", ")", ",", "'rotate'", ":", "rotate_classifier", ".", "state_dict", "(", ")", "}", ",", "outfile", ")", "\n", "\n", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "rotate_classifier", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "correct", "=", "rcorrect", "=", "total", "=", "0", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "base_loader_test", ")", ":", "\n", "                ", "if", "i", "<", "2", ":", "\n", "                    ", "bs", "=", "x", ".", "size", "(", "0", ")", "\n", "x_", "=", "[", "]", "\n", "y_", "=", "[", "]", "\n", "a_", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "bs", ")", ":", "\n", "                        ", "x90", "=", "x", "[", "j", "]", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x180", "=", "x90", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x270", "=", "x180", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x_", "+=", "[", "x", "[", "j", "]", ",", "x90", ",", "x180", ",", "x270", "]", "\n", "y_", "+=", "[", "y", "[", "j", "]", "for", "_", "in", "range", "(", "4", ")", "]", "\n", "a_", "+=", "[", "torch", ".", "tensor", "(", "0", ")", ",", "torch", ".", "tensor", "(", "1", ")", ",", "torch", ".", "tensor", "(", "2", ")", ",", "torch", ".", "tensor", "(", "3", ")", "]", "\n", "\n", "", "x_", "=", "Variable", "(", "torch", ".", "stack", "(", "x_", ",", "0", ")", ")", "\n", "y_", "=", "Variable", "(", "torch", ".", "stack", "(", "y_", ",", "0", ")", ")", "\n", "a_", "=", "Variable", "(", "torch", ".", "stack", "(", "a_", ",", "0", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "                        ", "x_", "=", "x_", ".", "cuda", "(", ")", "\n", "y_", "=", "y_", ".", "cuda", "(", ")", "\n", "a_", "=", "a_", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "f", ",", "scores", "=", "model", "(", "x_", ")", "\n", "rotate_scores", "=", "rotate_classifier", "(", "f", ")", "\n", "p1", "=", "torch", ".", "argmax", "(", "scores", ",", "1", ")", "\n", "correct", "+=", "(", "p1", "==", "y_", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "p1", ".", "size", "(", "0", ")", "\n", "p2", "=", "torch", ".", "argmax", "(", "rotate_scores", ",", "1", ")", "\n", "rcorrect", "+=", "(", "p2", "==", "a_", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "print", "(", "\"Epoch {0} : Accuracy {1}, Rotate Accuracy {2}\"", ".", "format", "(", "epoch", ",", "(", "float", "(", "correct", ")", "*", "100", ")", "/", "total", ",", "(", "float", "(", "rcorrect", ")", "*", "100", ")", "/", "total", ")", ")", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.train_cifar.train_manifold_mixup": [[32, 103], ["torch.CrossEntropyLoss", "torch.Adam", "print", "range", "model.parameters", "print", "model.train", "enumerate", "model.eval", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "numpy.random.beta", "model", "train_cifar.train_manifold_mixup.mixup_criterion"], "function", ["None"], ["def", "train_manifold_mixup", "(", "base_loader", ",", "base_loader_test", ",", "model", ",", "start_epoch", ",", "stop_epoch", ",", "params", ")", ":", "\n", "\n", "    ", "def", "mixup_criterion", "(", "criterion", ",", "pred", ",", "y_a", ",", "y_b", ",", "lam", ")", ":", "\n", "        ", "return", "lam", "*", "criterion", "(", "pred", ",", "y_a", ")", "+", "(", "1", "-", "lam", ")", "*", "criterion", "(", "pred", ",", "y_b", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ")", "\n", "print", "(", "\"stop_epoch\"", ",", "start_epoch", ",", "stop_epoch", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "stop_epoch", ")", ":", "\n", "        ", "print", "(", "'\\nEpoch: %d'", "%", "epoch", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "reg_loss", "=", "0", "\n", "correct", "=", "0", "\n", "correct1", "=", "0.0", "\n", "total", "=", "0", "\n", "\n", "for", "batch_idx", ",", "(", "input_var", ",", "target_var", ")", "in", "enumerate", "(", "base_loader", ")", ":", "\n", "            ", "if", "use_gpu", ":", "\n", "                ", "input_var", ",", "target_var", "=", "input_var", ".", "cuda", "(", ")", ",", "target_var", ".", "cuda", "(", ")", "\n", "", "input_var", ",", "target_var", "=", "Variable", "(", "input_var", ")", ",", "Variable", "(", "target_var", ")", "\n", "lam", "=", "np", ".", "random", ".", "beta", "(", "params", ".", "alpha", ",", "params", ".", "alpha", ")", "\n", "_", ",", "outputs", ",", "target_a", ",", "target_b", "=", "model", "(", "input_var", ",", "target_var", ",", "mixup_hidden", "=", "True", ",", "mixup_alpha", "=", "params", ".", "alpha", ",", "lam", "=", "lam", ")", "\n", "loss", "=", "mixup_criterion", "(", "criterion", ",", "outputs", ",", "target_a", ",", "target_b", ",", "lam", ")", "\n", "train_loss", "+=", "loss", ".", "data", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "target_var", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "lam", "*", "predicted", ".", "eq", "(", "target_a", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "+", "(", "1", "-", "lam", ")", "*", "predicted", ".", "eq", "(", "target_b", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "batch_idx", "%", "50", "==", "0", ":", "\n", "                ", "print", "(", "'{0}/{1}'", ".", "format", "(", "batch_idx", ",", "len", "(", "base_loader", ")", ")", ",", "'Loss: %.3f | Acc: %.3f%% '", "\n", "%", "(", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "params", ".", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "params", ".", "checkpoint_dir", ")", "\n", "\n", "", "if", "(", "epoch", "%", "params", ".", "save_freq", "==", "0", ")", "or", "(", "epoch", "==", "stop_epoch", "-", "1", ")", ":", "\n", "            ", "outfile", "=", "os", ".", "path", ".", "join", "(", "params", ".", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "'state'", ":", "model", ".", "state_dict", "(", ")", "}", ",", "outfile", ")", "\n", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "base_loader_test", ")", ":", "\n", "                ", "if", "use_gpu", ":", "\n", "                    ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "inputs", ",", "targets", "=", "Variable", "(", "inputs", ")", ",", "Variable", "(", "targets", ")", "\n", "f", ",", "outputs", "=", "model", ".", "forward", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "test_loss", "+=", "loss", ".", "data", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "", "print", "(", "'Loss: %.3f | Acc: %.3f%%'", "\n", "%", "(", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.train_cifar.train_rotation": [[107, 224], ["torch.Sequential", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.CrossEntropyLoss", "print", "range", "torch.Linear", "nn.Sequential.cuda", "print", "nn.Sequential.load_state_dict", "nn.Sequential.train", "model.train", "enumerate", "model.eval", "nn.Sequential.eval", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "x.size", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model.forward", "nn.Sequential.", "torch.optim.Adam.zero_grad", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "loss.backward", "torch.optim.Adam.step", "os.path.isdir", "os.makedirs", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "model.parameters", "nn.Sequential.parameters", "x[].transpose().flip", "x[].transpose().flip.transpose().flip", "x90.transpose().flip.transpose().flip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x_.cuda.cuda", "y_.cuda.cuda", "a_.cuda.cuda", "lossfn.data.item", "lossfn.data.item", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "model.state_dict", "nn.Sequential.state_dict", "x.size", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model", "nn.Sequential.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax.size", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "x[].transpose", "x[].transpose().flip.transpose", "x90.transpose().flip.transpose", "range", "len", "x[].transpose().flip", "x[].transpose().flip.transpose().flip", "x90.transpose().flip.transpose().flip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x_.cuda.cuda", "y_.cuda.cuda", "a_.cuda.cuda", "float", "float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "float", "float", "x[].transpose", "x[].transpose().flip.transpose", "x90.transpose().flip.transpose", "range"], "function", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "train_rotation", "(", "base_loader", ",", "base_loader_test", ",", "model", ",", "start_epoch", ",", "stop_epoch", ",", "params", ",", "tmp", ")", ":", "\n", "    ", "rotate_classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "640", ",", "4", ")", ")", "\n", "if", "use_gpu", ":", "\n", "        ", "rotate_classifier", ".", "cuda", "(", ")", "\n", "\n", "", "if", "tmp", "is", "not", "None", "and", "'rotate'", "in", "tmp", ":", "\n", "        ", "print", "(", "\"loading rotate model\"", ")", "\n", "rotate_classifier", ".", "load_state_dict", "(", "tmp", "[", "'rotate'", "]", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "model", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "rotate_classifier", ".", "parameters", "(", ")", "}", "\n", "]", ")", "\n", "\n", "lossfn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "max_acc", "=", "0", "\n", "\n", "print", "(", "\"stop_epoch\"", ",", "start_epoch", ",", "stop_epoch", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "stop_epoch", ")", ":", "\n", "        ", "rotate_classifier", ".", "train", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "avg_loss", "=", "0", "\n", "avg_rloss", "=", "0", "\n", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "base_loader", ")", ":", "\n", "            ", "bs", "=", "x", ".", "size", "(", "0", ")", "\n", "x_", "=", "[", "]", "\n", "y_", "=", "[", "]", "\n", "a_", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "bs", ")", ":", "\n", "                ", "x90", "=", "x", "[", "j", "]", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x180", "=", "x90", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x270", "=", "x180", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x_", "+=", "[", "x", "[", "j", "]", ",", "x90", ",", "x180", ",", "x270", "]", "\n", "y_", "+=", "[", "y", "[", "j", "]", "for", "_", "in", "range", "(", "4", ")", "]", "\n", "a_", "+=", "[", "torch", ".", "tensor", "(", "0", ")", ",", "torch", ".", "tensor", "(", "1", ")", ",", "torch", ".", "tensor", "(", "2", ")", ",", "torch", ".", "tensor", "(", "3", ")", "]", "\n", "\n", "", "x_", "=", "Variable", "(", "torch", ".", "stack", "(", "x_", ",", "0", ")", ")", "\n", "y_", "=", "Variable", "(", "torch", ".", "stack", "(", "y_", ",", "0", ")", ")", "\n", "a_", "=", "Variable", "(", "torch", ".", "stack", "(", "a_", ",", "0", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "                ", "x_", "=", "x_", ".", "cuda", "(", ")", "\n", "y_", "=", "y_", ".", "cuda", "(", ")", "\n", "a_", "=", "a_", ".", "cuda", "(", ")", "\n", "\n", "", "f", ",", "scores", "=", "model", ".", "forward", "(", "x_", ")", "\n", "rotate_scores", "=", "rotate_classifier", "(", "f", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "rloss", "=", "lossfn", "(", "rotate_scores", ",", "a_", ")", "\n", "closs", "=", "lossfn", "(", "scores", ",", "y_", ")", "\n", "loss", "=", "0.5", "*", "closs", "+", "0.5", "*", "rloss", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "avg_loss", "=", "avg_loss", "+", "closs", ".", "data", ".", "item", "(", ")", "\n", "avg_rloss", "=", "avg_rloss", "+", "rloss", ".", "data", ".", "item", "(", ")", "\n", "\n", "\n", "if", "i", "%", "50", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch {:d} | Batch {:d}/{:d} | Loss {:f} | Rotate Loss {:f}'", ".", "format", "(", "epoch", ",", "i", ",", "len", "(", "base_loader", ")", ",", "avg_loss", "/", "float", "(", "i", "+", "1", ")", ",", "avg_rloss", "/", "float", "(", "i", "+", "1", ")", ")", ")", "\n", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "params", ".", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "params", ".", "checkpoint_dir", ")", "\n", "\n", "", "if", "(", "epoch", "%", "params", ".", "save_freq", "==", "0", ")", "or", "(", "epoch", "==", "stop_epoch", "-", "1", ")", ":", "\n", "            ", "outfile", "=", "os", ".", "path", ".", "join", "(", "params", ".", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "'state'", ":", "model", ".", "state_dict", "(", ")", ",", "'rotate'", ":", "rotate_classifier", ".", "state_dict", "(", ")", "}", ",", "outfile", ")", "\n", "\n", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "rotate_classifier", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "correct", "=", "rcorrect", "=", "total", "=", "0", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "base_loader_test", ")", ":", "\n", "                ", "if", "i", "<", "10", ":", "\n", "                    ", "bs", "=", "x", ".", "size", "(", "0", ")", "\n", "x_", "=", "[", "]", "\n", "y_", "=", "[", "]", "\n", "a_", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "bs", ")", ":", "\n", "                        ", "x90", "=", "x", "[", "j", "]", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x180", "=", "x90", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x270", "=", "x180", ".", "transpose", "(", "2", ",", "1", ")", ".", "flip", "(", "1", ")", "\n", "x_", "+=", "[", "x", "[", "j", "]", ",", "x90", ",", "x180", ",", "x270", "]", "\n", "y_", "+=", "[", "y", "[", "j", "]", "for", "_", "in", "range", "(", "4", ")", "]", "\n", "a_", "+=", "[", "torch", ".", "tensor", "(", "0", ")", ",", "torch", ".", "tensor", "(", "1", ")", ",", "torch", ".", "tensor", "(", "2", ")", ",", "torch", ".", "tensor", "(", "3", ")", "]", "\n", "\n", "", "x_", "=", "Variable", "(", "torch", ".", "stack", "(", "x_", ",", "0", ")", ")", "\n", "y_", "=", "Variable", "(", "torch", ".", "stack", "(", "y_", ",", "0", ")", ")", "\n", "a_", "=", "Variable", "(", "torch", ".", "stack", "(", "a_", ",", "0", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "                        ", "x_", "=", "x_", ".", "cuda", "(", ")", "\n", "y_", "=", "y_", ".", "cuda", "(", ")", "\n", "a_", "=", "a_", ".", "cuda", "(", ")", "\n", "\n", "", "f", ",", "scores", "=", "model", "(", "x_", ")", "\n", "rotate_scores", "=", "rotate_classifier", "(", "f", ")", "\n", "p1", "=", "torch", ".", "argmax", "(", "scores", ",", "1", ")", "\n", "correct", "+=", "(", "p1", "==", "y_", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "p1", ".", "size", "(", "0", ")", "\n", "p2", "=", "torch", ".", "argmax", "(", "rotate_scores", ",", "1", ")", "\n", "rcorrect", "+=", "(", "p2", "==", "a_", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "print", "(", "\"Epoch {0} : Accuracy {1}, Rotate Accuracy {2}\"", ".", "format", "(", "epoch", ",", "(", "float", "(", "correct", ")", "*", "100", ")", "/", "total", ",", "(", "float", "(", "rcorrect", ")", "*", "100", ")", "/", "total", ")", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.test.feature_evaluation": [[25, 49], ["cl_data_file.keys", "random.sample", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.permutation().tolist", "torch.from_numpy.append", "numpy.array", "model.set_forward_adaptation", "model.set_forward", "each_score.data.cpu().numpy().argmax", "numpy.repeat", "acc.append", "range", "numpy.random.permutation", "numpy.squeeze", "each_score.data.cpu().numpy", "numpy.mean", "len", "range", "each_score.data.cpu"], "function", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.set_forward_adaptation", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.set_forward"], ["def", "feature_evaluation", "(", "cl_data_file", ",", "model", ",", "n_way", "=", "5", ",", "n_support", "=", "5", ",", "n_query", "=", "15", ",", "adaptation", "=", "False", ")", ":", "\n", "    ", "class_list", "=", "cl_data_file", ".", "keys", "(", ")", "\n", "\n", "select_class", "=", "random", ".", "sample", "(", "class_list", ",", "n_way", ")", "\n", "z_all", "=", "[", "]", "\n", "for", "cl", "in", "select_class", ":", "\n", "        ", "img_feat", "=", "cl_data_file", "[", "cl", "]", "\n", "perm_ids", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "img_feat", ")", ")", ".", "tolist", "(", ")", "\n", "z_all", ".", "append", "(", "[", "np", ".", "squeeze", "(", "img_feat", "[", "perm_ids", "[", "i", "]", "]", ")", "for", "i", "in", "range", "(", "n_support", "+", "n_query", ")", "]", ")", "# stack each batch", "\n", "\n", "", "z_all", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "z_all", ")", ")", "\n", "\n", "model", ".", "n_query", "=", "n_query", "\n", "if", "adaptation", ":", "\n", "        ", "scores", "=", "model", ".", "set_forward_adaptation", "(", "z_all", ",", "is_feature", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "scores", "=", "model", ".", "set_forward", "(", "z_all", ",", "is_feature", "=", "True", ")", "\n", "\n", "", "acc", "=", "[", "]", "\n", "for", "each_score", "in", "scores", ":", "\n", "        ", "pred", "=", "each_score", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "y", "=", "np", ".", "repeat", "(", "range", "(", "n_way", ")", ",", "n_query", ")", "\n", "acc", ".", "append", "(", "np", ".", "mean", "(", "pred", "==", "y", ")", "*", "100", ")", "\n", "", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.save_features.WrappedModel.__init__": [[22, 25], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "module", ")", ":", "\n", "        ", "super", "(", "WrappedModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "module", "# that I actually define.", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.save_features.WrappedModel.forward": [[25, 27], ["save_features.WrappedModel.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.save_features.save_features": [[29, 56], ["h5py.File", "h5py.File.create_dataset", "enumerate", "h5py.File.create_dataset", "h5py.File.close", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "model.data.cpu().numpy", "y.cpu().numpy", "print", "x.cuda.cuda", "model", "model", "h5py.File.create_dataset", "model.size", "model.data.cpu", "y.cpu", "len", "list", "model.size", "model.size", "model.size"], "function", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "", "def", "save_features", "(", "model", ",", "data_loader", ",", "outfile", ",", "params", ")", ":", "\n", "    ", "f", "=", "h5py", ".", "File", "(", "outfile", ",", "'w'", ")", "\n", "max_count", "=", "len", "(", "data_loader", ")", "*", "data_loader", ".", "batch_size", "\n", "all_labels", "=", "f", ".", "create_dataset", "(", "'all_labels'", ",", "(", "max_count", ",", ")", ",", "dtype", "=", "'i'", ")", "\n", "all_feats", "=", "None", "\n", "count", "=", "0", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "if", "i", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'{:d}/{:d}'", ".", "format", "(", "i", ",", "len", "(", "data_loader", ")", ")", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "x_var", "=", "Variable", "(", "x", ")", "\n", "if", "params", ".", "method", "==", "'manifold_mixup'", "or", "params", ".", "method", "==", "'S2M2_R'", ":", "\n", "            ", "feats", ",", "_", "=", "model", "(", "x_var", ")", "\n", "", "else", ":", "\n", "            ", "feats", "=", "model", "(", "x_var", ")", "\n", "", "if", "all_feats", "is", "None", ":", "\n", "            ", "all_feats", "=", "f", ".", "create_dataset", "(", "'all_feats'", ",", "[", "max_count", "]", "+", "list", "(", "feats", ".", "size", "(", ")", "[", "1", ":", "]", ")", ",", "dtype", "=", "'f'", ")", "\n", "", "all_feats", "[", "count", ":", "count", "+", "feats", ".", "size", "(", "0", ")", "]", "=", "feats", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "all_labels", "[", "count", ":", "count", "+", "feats", ".", "size", "(", "0", ")", "]", "=", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "count", "=", "count", "+", "feats", ".", "size", "(", "0", ")", "\n", "\n", "", "count_var", "=", "f", ".", "create_dataset", "(", "'count'", ",", "(", "1", ",", ")", ",", "dtype", "=", "'i'", ")", "\n", "count_var", "[", "0", "]", "=", "count", "\n", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.utils.one_hot": [[4, 6], ["torch.zeros().scatter_", "y.unsqueeze", "torch.zeros", "len"], "function", ["None"], ["def", "one_hot", "(", "y", ",", "num_class", ")", ":", "\n", "    ", "return", "torch", ".", "zeros", "(", "(", "len", "(", "y", ")", ",", "num_class", ")", ")", ".", "scatter_", "(", "1", ",", "y", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.utils.DBindex": [[7, 24], ["cl_data_file.keys", "len", "numpy.tile", "numpy.transpose", "numpy.sqrt", "range", "numpy.mean", "cl_means.append", "stds.append", "numpy.expand_dims", "numpy.sum", "DBs.append", "numpy.mean", "numpy.sqrt", "numpy.array", "len", "numpy.square", "numpy.max", "numpy.mean", "numpy.sum", "numpy.square", "range"], "function", ["None"], ["", "def", "DBindex", "(", "cl_data_file", ")", ":", "\n", "    ", "class_list", "=", "cl_data_file", ".", "keys", "(", ")", "\n", "cl_num", "=", "len", "(", "class_list", ")", "\n", "cl_means", "=", "[", "]", "\n", "stds", "=", "[", "]", "\n", "DBs", "=", "[", "]", "\n", "for", "cl", "in", "class_list", ":", "\n", "        ", "cl_means", ".", "append", "(", "np", ".", "mean", "(", "cl_data_file", "[", "cl", "]", ",", "axis", "=", "0", ")", ")", "\n", "stds", ".", "append", "(", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "cl_data_file", "[", "cl", "]", "-", "cl_means", "[", "-", "1", "]", ")", ",", "axis", "=", "1", ")", ")", ")", ")", "\n", "\n", "", "mu_i", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "cl_means", ")", ",", "axis", "=", "0", ")", ",", "(", "len", "(", "class_list", ")", ",", "1", ",", "1", ")", ")", "\n", "mu_j", "=", "np", ".", "transpose", "(", "mu_i", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "mdists", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "mu_i", "-", "mu_j", ")", ",", "axis", "=", "2", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "cl_num", ")", ":", "\n", "        ", "DBs", ".", "append", "(", "np", ".", "max", "(", "[", "(", "stds", "[", "i", "]", "+", "stds", "[", "j", "]", ")", "/", "mdists", "[", "i", ",", "j", "]", "for", "j", "in", "range", "(", "cl_num", ")", "if", "j", "!=", "i", "]", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "DBs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.utils.sparsity": [[25, 32], ["cl_data_file.keys", "numpy.mean", "cl_sparsity.append", "numpy.mean", "numpy.sum"], "function", ["None"], ["", "def", "sparsity", "(", "cl_data_file", ")", ":", "\n", "    ", "class_list", "=", "cl_data_file", ".", "keys", "(", ")", "\n", "cl_sparsity", "=", "[", "]", "\n", "for", "cl", "in", "class_list", ":", "\n", "        ", "cl_sparsity", ".", "append", "(", "np", ".", "mean", "(", "[", "np", ".", "sum", "(", "x", "!=", "0", ")", "for", "x", "in", "cl_data_file", "[", "cl", "]", "]", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "cl_sparsity", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.distLinear.__init__": [[23, 34], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.utils.weight_norm.WeightNorm.apply", "torch.nn.utils.weight_norm.WeightNorm.apply", "torch.nn.utils.weight_norm.WeightNorm.apply"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ")", ":", "\n", "        ", "super", "(", "distLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "L", "=", "nn", ".", "Linear", "(", "indim", ",", "outdim", ",", "bias", "=", "False", ")", "\n", "self", ".", "class_wise_learnable_norm", "=", "True", "#See the issue#4&8 in the github ", "\n", "if", "self", ".", "class_wise_learnable_norm", ":", "\n", "            ", "WeightNorm", ".", "apply", "(", "self", ".", "L", ",", "'weight'", ",", "dim", "=", "0", ")", "#split the weight update component to direction and norm      ", "\n", "\n", "", "if", "outdim", "<=", "200", ":", "\n", "            ", "self", ".", "scale_factor", "=", "2", ";", "#a fixed scale factor to scale the output of cos value into a reasonably large input for softmax", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_factor", "=", "10", ";", "#in omniglot, a larger scale factor is required to handle >1000 output classes.", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.distLinear.forward": [[35, 45], ["torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "x.div", "backbone.distLinear.L", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "backbone.distLinear.L.weight.data.div", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_norm", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "x_normalized", "=", "x", ".", "div", "(", "x_norm", "+", "0.00001", ")", "\n", "if", "not", "self", ".", "class_wise_learnable_norm", ":", "\n", "            ", "L_norm", "=", "torch", ".", "norm", "(", "self", ".", "L", ".", "weight", ".", "data", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "self", ".", "L", ".", "weight", ".", "data", ")", "\n", "self", ".", "L", ".", "weight", ".", "data", "=", "self", ".", "L", ".", "weight", ".", "data", ".", "div", "(", "L_norm", "+", "0.00001", ")", "\n", "", "cos_dist", "=", "self", ".", "L", "(", "x_normalized", ")", "#matrix product by forward function, but when using WeightNorm, this also multiply the cosine distance by a class-wise learnable norm, see the issue#4&8 in the github", "\n", "scores", "=", "self", ".", "scale_factor", "*", "(", "cos_dist", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.Flatten.__init__": [[47, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.Flatten.forward": [[50, 52], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.Linear_fw.__init__": [[55, 59], ["torch.Linear.__init__"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "Linear_fw", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "#Lazy hack to add fast weight link", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.Linear_fw.forward": [[60, 66], ["torch.linear", "torch.linear", "torch.linear", "super().forward"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ")", "#weight.fast (fast weight) is the temporaily adapted weight", "\n", "", "else", ":", "\n", "            ", "out", "=", "super", "(", "Linear_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.Conv2d_fw.__init__": [[68, 73], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "if", "not", "self", ".", "bias", "is", "None", ":", "\n", "            ", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.Conv2d_fw.forward": [[74, 87], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward", "torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "None", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.BatchNorm2d_fw.__init__": [[89, 93], ["torch.BatchNorm2d.__init__"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "super", "(", "BatchNorm2d_fw", ",", "self", ")", ".", "__init__", "(", "num_features", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.BatchNorm2d_fw.forward": [[94, 103], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x.data.size", "x.data.size"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "running_mean", "=", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "running_var", "=", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "running_mean", ",", "running_var", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ",", "training", "=", "True", ",", "momentum", "=", "1", ")", "\n", "#batch_norm momentum hack: follow hack of Kate Rakelly in pytorch-maml/src/layers.py", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "running_mean", ",", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "training", "=", "True", ",", "momentum", "=", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ConvBlock.__init__": [[107, 128], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "backbone.ConvBlock.parametrized_layers.append", "backbone.init_layer"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "pool", "=", "True", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C", ",", "self", ".", "BN", ",", "self", ".", "relu", "]", "\n", "if", "pool", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "pool", ")", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "parametrized_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ConvBlock.forward": [[130, 133], ["backbone.ConvBlock.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.SimpleBlock.__init__": [[137, 175], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "backbone.SimpleBlock.parametrized_layers.append", "backbone.SimpleBlock.parametrized_layers.append", "backbone.init_layer", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ")", ":", "\n", "        ", "super", "(", "SimpleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C1", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "self", ".", "C2", "=", "Conv2d_fw", "(", "outdim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "outdim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "C2", ",", "self", ".", "BN1", ",", "self", ".", "BN2", "]", "\n", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "            ", "if", "self", ".", "maml", ":", "\n", "                ", "self", ".", "shortcut", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "1", ",", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BNshortcut", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "1", ",", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BNshortcut", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "BNshortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.SimpleBlock.forward": [[176, 186], ["backbone.SimpleBlock.C1", "backbone.SimpleBlock.BN1", "backbone.SimpleBlock.relu1", "backbone.SimpleBlock.C2", "backbone.SimpleBlock.BN2", "backbone.SimpleBlock.relu2", "backbone.SimpleBlock.BNshortcut", "backbone.SimpleBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "BNshortcut", "(", "self", ".", "shortcut", "(", "x", ")", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.BottleneckBlock.__init__": [[192, 231], ["torch.Module.__init__", "int", "torch.ReLU", "torch.ReLU", "torch.ReLU", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "backbone.BottleneckBlock.parametrized_layers.append", "backbone.init_layer", "backbone.Conv2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bottleneckdim", "=", "int", "(", "outdim", "/", "4", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C1", "=", "Conv2d_fw", "(", "indim", ",", "bottleneckdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "BatchNorm2d_fw", "(", "bottleneckdim", ")", "\n", "self", ".", "C2", "=", "Conv2d_fw", "(", "bottleneckdim", ",", "bottleneckdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "BN2", "=", "BatchNorm2d_fw", "(", "bottleneckdim", ")", "\n", "self", ".", "C3", "=", "Conv2d_fw", "(", "bottleneckdim", ",", "outdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN3", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "bottleneckdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "bottleneckdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C3", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "outdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN3", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "BN1", ",", "self", ".", "C2", ",", "self", ".", "BN2", ",", "self", ".", "C3", ",", "self", ".", "BN3", "]", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "            ", "if", "self", ".", "maml", ":", "\n", "                ", "self", ".", "shortcut", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "1", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "1", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.BottleneckBlock.forward": [[233, 248], ["backbone.BottleneckBlock.C1", "backbone.BottleneckBlock.BN1", "backbone.BottleneckBlock.relu", "backbone.BottleneckBlock.C2", "backbone.BottleneckBlock.BN2", "backbone.BottleneckBlock.relu", "backbone.BottleneckBlock.C3", "backbone.BottleneckBlock.BN3", "backbone.BottleneckBlock.relu", "backbone.BottleneckBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C3", "(", "out", ")", "\n", "out", "=", "self", ".", "BN3", "(", "out", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ConvNet.__init__": [[251, 265], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append", "trunk.append", "backbone.Flatten"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "flatten", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "3", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "<", "4", ")", ")", "#only pooling for fist 4 layers", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "if", "flatten", ":", "\n", "            ", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "1600", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ConvNet.forward": [[266, 269], ["backbone.ConvNet.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ConvNetNopool.__init__": [[271, 282], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ")", ":", "\n", "        ", "super", "(", "ConvNetNopool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "3", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "in", "[", "0", ",", "1", "]", ")", ",", "padding", "=", "0", "if", "i", "in", "[", "0", ",", "1", "]", "else", "1", ")", "#only first two layer has pooling and no padding", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "[", "64", ",", "19", ",", "19", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ConvNetNopool.forward": [[283, 286], ["backbone.ConvNetNopool.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ConvNetS.__init__": [[288, 302], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append", "trunk.append", "backbone.Flatten"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "flatten", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvNetS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "1", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "<", "4", ")", ")", "#only pooling for fist 4 layers", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "if", "flatten", ":", "\n", "            ", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "64", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ConvNetS.forward": [[303, 307], ["backbone.ConvNetS.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "#only use the first dimension", "\n", "out", "=", "self", ".", "trunk", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ConvNetSNopool.__init__": [[309, 320], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ")", ":", "\n", "        ", "super", "(", "ConvNetSNopool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "1", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "in", "[", "0", ",", "1", "]", ")", ",", "padding", "=", "0", "if", "i", "in", "[", "0", ",", "1", "]", "else", "1", ")", "#only first two layer has pooling and no padding", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "[", "64", ",", "5", ",", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ConvNetSNopool.forward": [[321, 325], ["backbone.ConvNetSNopool.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "#only use the first dimension", "\n", "out", "=", "self", ".", "trunk", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ResNet.__init__": [[328, 369], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "backbone.init_layer", "backbone.init_layer", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "trunk.append", "trunk.append", "block", "trunk.append", "backbone.Flatten"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.init_layer", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "list_of_num_layers", ",", "list_of_out_dims", ",", "flatten", "=", "True", ")", ":", "\n", "# list_of_num_layers specifies number of layers in each stage", "\n", "# list_of_out_dims specifies number of output channel for each stage", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "list_of_num_layers", ")", "==", "4", ",", "'Can have only four stages'", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "conv1", "=", "Conv2d_fw", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "bn1", "=", "BatchNorm2d_fw", "(", "64", ")", "\n", "", "else", ":", "\n", "            ", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "init_layer", "(", "conv1", ")", "\n", "init_layer", "(", "bn1", ")", "\n", "\n", "\n", "trunk", "=", "[", "conv1", ",", "bn1", ",", "relu", ",", "pool1", "]", "\n", "\n", "indim", "=", "64", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "\n", "            ", "for", "j", "in", "range", "(", "list_of_num_layers", "[", "i", "]", ")", ":", "\n", "                ", "half_res", "=", "(", "i", ">=", "1", ")", "and", "(", "j", "==", "0", ")", "\n", "B", "=", "block", "(", "indim", ",", "list_of_out_dims", "[", "i", "]", ",", "half_res", ")", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "indim", "=", "list_of_out_dims", "[", "i", "]", "\n", "\n", "", "", "if", "flatten", ":", "\n", "            ", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "trunk", ".", "append", "(", "avgpool", ")", "\n", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "self", ".", "final_feat_dim", "=", "indim", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_feat_dim", "=", "[", "indim", ",", "7", ",", "7", "]", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ResNet.forward": [[370, 373], ["backbone.ResNet.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.BasicBlock.__init__": [[377, 391], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.BasicBlock.forward": [[391, 401], ["backbone.BasicBlock.relu2", "backbone.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "backbone.BasicBlock.relu1", "backbone.BasicBlock.relu1", "backbone.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "backbone.BasicBlock.bn1", "backbone.BasicBlock.bn1", "backbone.BasicBlock.conv1", "backbone.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.NetworkBlock.__init__": [[403, 406], ["torch.Module.__init__", "backbone.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.NetworkBlock._make_layer": [[406, 411], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.NetworkBlock.forward": [[411, 413], ["backbone.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.WideResNet.__init__": [[415, 445], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "backbone.NetworkBlock", "backbone.NetworkBlock", "backbone.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "backbone.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.5", ",", "flatten", "=", "True", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "stride", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "if", "flatten", ":", "\n", "            ", "self", ".", "final_feat_dim", "=", "640", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.WideResNet.forward": [[445, 457], ["backbone.WideResNet.conv1", "backbone.WideResNet.block1", "backbone.WideResNet.block2", "backbone.WideResNet.block3", "backbone.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "backbone.WideResNet.bn1", "x.size", "out.view.view.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "#         print(out.size())", "\n", "#         out = out.view(out.size(0),640,-1)", "\n", "#         out = out.mean(1)", "\n", "out", "=", "out", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.init_layer": [[13, 21], ["isinstance", "L.weight.data.normal_", "isinstance", "math.sqrt", "L.weight.data.fill_", "L.bias.data.fill_", "float"], "function", ["None"], ["def", "init_layer", "(", "L", ")", ":", "\n", "# Initialization using fan-in", "\n", "    ", "if", "isinstance", "(", "L", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "L", ".", "kernel_size", "[", "0", "]", "*", "L", ".", "kernel_size", "[", "1", "]", "*", "L", ".", "out_channels", "\n", "L", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "n", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "L", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "L", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "L", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.Conv4": [[460, 462], ["backbone.ConvNet"], "function", ["None"], ["", "", "def", "Conv4", "(", ")", ":", "\n", "    ", "return", "ConvNet", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.Conv6": [[463, 465], ["backbone.ConvNet"], "function", ["None"], ["", "def", "Conv6", "(", ")", ":", "\n", "    ", "return", "ConvNet", "(", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.Conv4NP": [[466, 468], ["backbone.ConvNetNopool"], "function", ["None"], ["", "def", "Conv4NP", "(", ")", ":", "\n", "    ", "return", "ConvNetNopool", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.Conv6NP": [[469, 471], ["backbone.ConvNetNopool"], "function", ["None"], ["", "def", "Conv6NP", "(", ")", ":", "\n", "    ", "return", "ConvNetNopool", "(", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.Conv4S": [[472, 474], ["backbone.ConvNetS"], "function", ["None"], ["", "def", "Conv4S", "(", ")", ":", "\n", "    ", "return", "ConvNetS", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.Conv4SNP": [[475, 477], ["backbone.ConvNetSNopool"], "function", ["None"], ["", "def", "Conv4SNP", "(", ")", ":", "\n", "    ", "return", "ConvNetSNopool", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ResNet10": [[478, 480], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet10", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ResNet18": [[481, 483], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet18", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ResNet34": [[484, 486], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ResNet50": [[487, 489], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "BottleneckBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.ResNet101": [[490, 492], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "BottleneckBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.WideResNet28_10": [[494, 496], ["backbone.WideResNet"], "function", ["None"], ["", "def", "WideResNet28_10", "(", "flatten", "=", "True", ",", "dropRate", "=", "0.5", ")", ":", "\n", "    ", "return", "WideResNet", "(", "28", ",", "10", ",", "dropRate", "=", "dropRate", ",", "flatten", "=", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.io_utils.parse_args": [[24, 57], ["argparse.ArgumentParser", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "ValueError"], "function", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.io_utils.parse_args"], ["def", "parse_args", "(", "script", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'few-shot script %s'", "%", "(", "script", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'cifar'", ",", "help", "=", "'CUB/miniImagenet/cross/cifar'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'WideResNet28_10'", ",", "help", "=", "'model:  WideResNet28_10 /Conv{4|6} /ResNet{10|18|34|50|101}'", ")", "# 50 and 101 are not used in the paper", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "default", "=", "'S2M2_R'", ",", "help", "=", "'rotation/manifold_mixup/S2M2_R'", ")", "#relationnet_softmax replace L2 norm with softmax to expedite training, maml_approx use first-order approximation in the gradient for efficiency", "\n", "parser", ".", "add_argument", "(", "'--train_n_way'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'class num to classify for training'", ")", "#baseline and baseline++ would ignore this parameter", "\n", "parser", ".", "add_argument", "(", "'--test_n_way'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'class num to classify for testing (validation) '", ")", "#baseline and baseline++ only use this parameter in finetuning", "\n", "parser", ".", "add_argument", "(", "'--n_shot'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'number of labeled data in each class, same as n_support'", ")", "#baseline and baseline++ only use this parameter in finetuning", "\n", "parser", ".", "add_argument", "(", "'--train_aug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'perform data augmentation or not during training '", ")", "#still required for save_features.py and test.py to find the model path correctly", "\n", "\n", "if", "script", "==", "'train'", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "default", "=", "200", ",", "type", "=", "int", ",", "help", "=", "'total number of classes in softmax, only used in baseline'", ")", "#make it larger than the maximum label value in base class", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "'Save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Starting epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--stop_epoch'", ",", "default", "=", "400", ",", "type", "=", "int", ",", "help", "=", "'Stopping epoch'", ")", "#for meta-learning methods, each epoch contains 100 episodes. The default epoch number is dataset dependent. See train.py", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue from previous trained model with largest epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "0.001", ",", "type", "=", "int", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "'batch size '", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'batch size '", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "default", "=", "2.0", ",", "type", "=", "int", ",", "help", "=", "'for manifold_mixup or S2M2 training '", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue from baseline, neglected if resume is true'", ")", "#never used in the paper", "\n", "", "elif", "script", "==", "'save_features'", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--split'", ",", "default", "=", "'novel'", ",", "help", "=", "'base/val/novel'", ")", "#default novel, but you can also test base/val class accuracy if you want ", "\n", "parser", ".", "add_argument", "(", "'--save_iter'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "'save feature from the model trained in x epoch, use the best model if x is -1'", ")", "\n", "", "elif", "script", "==", "'test'", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--split'", ",", "default", "=", "'novel'", ",", "help", "=", "'base/val/novel'", ")", "#default novel, but you can also test base/val class accuracy if you want ", "\n", "parser", ".", "add_argument", "(", "'--save_iter'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "'saved feature from the model trained in x epoch, use the best model if x is -1'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptation'", ",", "action", "=", "'store_true'", ",", "help", "=", "'further adaptation in test time or not'", ")", "\n", "", "else", ":", "\n", "       ", "raise", "ValueError", "(", "'Unknown script'", ")", "\n", "\n", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.io_utils.get_assigned_file": [[59, 62], ["os.path.join", "os.path.join"], "function", ["None"], ["", "def", "get_assigned_file", "(", "checkpoint_dir", ",", "num", ")", ":", "\n", "    ", "assign_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "num", ")", ")", "\n", "return", "assign_file", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.io_utils.get_resume_file": [[63, 73], ["glob.glob", "glob.glob", "numpy.array", "numpy.max", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "int", "os.path.basename", "os.path.basename", "os.path.splitext", "os.path.splitext", "os.path.basename", "os.path.basename"], "function", ["None"], ["", "def", "get_resume_file", "(", "checkpoint_dir", ")", ":", "\n", "    ", "filelist", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'*.tar'", ")", ")", "\n", "if", "len", "(", "filelist", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "", "filelist", "=", "[", "x", "for", "x", "in", "filelist", "if", "os", ".", "path", ".", "basename", "(", "x", ")", "!=", "'best.tar'", "]", "\n", "epochs", "=", "np", ".", "array", "(", "[", "int", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "[", "0", "]", ")", "for", "x", "in", "filelist", "]", ")", "\n", "max_epoch", "=", "np", ".", "max", "(", "epochs", ")", "\n", "resume_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "max_epoch", ")", ")", "\n", "return", "resume_file", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.io_utils.get_best_file": [[74, 80], ["os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "io_utils.get_resume_file"], "function", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.io_utils.get_resume_file"], ["", "def", "get_best_file", "(", "checkpoint_dir", ")", ":", "\n", "    ", "best_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'best.tar'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "best_file", ")", ":", "\n", "        ", "return", "best_file", "\n", "", "else", ":", "\n", "        ", "return", "get_resume_file", "(", "checkpoint_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.additional_transforms.ImageJitter.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transformdict", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "[", "(", "transformtypedict", "[", "k", "]", ",", "transformdict", "[", "k", "]", ")", "for", "k", "in", "transformdict", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.additional_transforms.ImageJitter.__call__": [[20, 29], ["torch.rand", "enumerate", "len", "transformer().enhance().convert", "transformer().enhance", "transformer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "img", "\n", "randtensor", "=", "torch", ".", "rand", "(", "len", "(", "self", ".", "transforms", ")", ")", "\n", "\n", "for", "i", ",", "(", "transformer", ",", "alpha", ")", "in", "enumerate", "(", "self", ".", "transforms", ")", ":", "\n", "            ", "r", "=", "alpha", "*", "(", "randtensor", "[", "i", "]", "*", "2.0", "-", "1.0", ")", "+", "1", "\n", "out", "=", "transformer", "(", "out", ")", ".", "enhance", "(", "r", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.feature_loader.SimpleHDF5Dataset.__init__": [[6, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_handle", "=", "None", ")", ":", "\n", "        ", "if", "file_handle", "==", "None", ":", "\n", "            ", "self", ".", "f", "=", "''", "\n", "self", ".", "all_feats_dset", "=", "[", "]", "\n", "self", ".", "all_labels", "=", "[", "]", "\n", "self", ".", "total", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "f", "=", "file_handle", "\n", "self", ".", "all_feats_dset", "=", "self", ".", "f", "[", "'all_feats'", "]", "[", "...", "]", "\n", "self", ".", "all_labels", "=", "self", ".", "f", "[", "'all_labels'", "]", "[", "...", "]", "\n", "self", ".", "total", "=", "self", ".", "f", "[", "'count'", "]", "[", "0", "]", "\n", "# print('here')", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.feature_loader.SimpleHDF5Dataset.__getitem__": [[18, 20], ["torch.Tensor", "int"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "torch", ".", "Tensor", "(", "self", ".", "all_feats_dset", "[", "i", ",", ":", "]", ")", ",", "int", "(", "self", ".", "all_labels", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.feature_loader.SimpleHDF5Dataset.__len__": [[21, 23], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.feature_loader.init_loader": [[24, 45], ["numpy.unique().tolist", "range", "h5py.File", "feature_loader.SimpleHDF5Dataset", "numpy.sum", "numpy.delete", "numpy.delete", "len", "cl_data_file[].append", "numpy.unique", "numpy.array"], "function", ["None"], ["", "", "def", "init_loader", "(", "filename", ")", ":", "\n", "    ", "with", "h5py", ".", "File", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "fileset", "=", "SimpleHDF5Dataset", "(", "f", ")", "\n", "\n", "#labels = [ l for l  in fileset.all_labels if l != 0]", "\n", "", "feats", "=", "fileset", ".", "all_feats_dset", "\n", "labels", "=", "fileset", ".", "all_labels", "\n", "while", "np", ".", "sum", "(", "feats", "[", "-", "1", "]", ")", "==", "0", ":", "\n", "        ", "feats", "=", "np", ".", "delete", "(", "feats", ",", "-", "1", ",", "axis", "=", "0", ")", "\n", "labels", "=", "np", ".", "delete", "(", "labels", ",", "-", "1", ",", "axis", "=", "0", ")", "\n", "\n", "", "class_list", "=", "np", ".", "unique", "(", "np", ".", "array", "(", "labels", ")", ")", ".", "tolist", "(", ")", "\n", "inds", "=", "range", "(", "len", "(", "labels", ")", ")", "\n", "\n", "cl_data_file", "=", "{", "}", "\n", "for", "cl", "in", "class_list", ":", "\n", "        ", "cl_data_file", "[", "cl", "]", "=", "[", "]", "\n", "", "for", "ind", "in", "inds", ":", "\n", "        ", "cl_data_file", "[", "labels", "[", "ind", "]", "]", ".", "append", "(", "feats", "[", "ind", "]", ")", "\n", "\n", "", "return", "cl_data_file", "\n", "", ""]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.dataset.SimpleDataset.__init__": [[11, 16], ["open", "json.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_file", ",", "transform", ",", "target_transform", "=", "identity", ")", ":", "\n", "        ", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.dataset.SimpleDataset.__getitem__": [[18, 24], ["os.path.join", "PIL.Image.open().convert", "dataset.SimpleDataset.transform", "dataset.SimpleDataset.target_transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "meta", "[", "'image_names'", "]", "[", "i", "]", ")", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "meta", "[", "'image_labels'", "]", "[", "i", "]", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.dataset.SimpleDataset.__len__": [[25, 27], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "meta", "[", "'image_names'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.dataset.SetDataset.__init__": [[30, 51], ["numpy.unique().tolist", "zip", "dict", "open", "json.load", "dataset.SetDataset.sub_meta[].append", "dataset.SubDataset", "dataset.SetDataset.sub_dataloader.append", "numpy.unique", "torch.utils.data.DataLoader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_file", ",", "batch_size", ",", "transform", ")", ":", "\n", "        ", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "cl_list", "=", "np", ".", "unique", "(", "self", ".", "meta", "[", "'image_labels'", "]", ")", ".", "tolist", "(", ")", "\n", "\n", "self", ".", "sub_meta", "=", "{", "}", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "            ", "self", ".", "sub_meta", "[", "cl", "]", "=", "[", "]", "\n", "\n", "", "for", "x", ",", "y", "in", "zip", "(", "self", ".", "meta", "[", "'image_names'", "]", ",", "self", ".", "meta", "[", "'image_labels'", "]", ")", ":", "\n", "            ", "self", ".", "sub_meta", "[", "y", "]", ".", "append", "(", "x", ")", "\n", "\n", "", "self", ".", "sub_dataloader", "=", "[", "]", "\n", "sub_data_loader_params", "=", "dict", "(", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "0", ",", "#use main thread only or may receive multiple batches", "\n", "pin_memory", "=", "False", ")", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "            ", "sub_dataset", "=", "SubDataset", "(", "self", ".", "sub_meta", "[", "cl", "]", ",", "cl", ",", "transform", "=", "transform", ")", "\n", "self", ".", "sub_dataloader", ".", "append", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "sub_dataset", ",", "**", "sub_data_loader_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.dataset.SetDataset.__getitem__": [[52, 54], ["next", "iter"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "next", "(", "iter", "(", "self", ".", "sub_dataloader", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.dataset.SetDataset.__len__": [[55, 57], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "cl_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.dataset.SubDataset.__init__": [[59, 64], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sub_meta", ",", "cl", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ",", "target_transform", "=", "identity", ")", ":", "\n", "        ", "self", ".", "sub_meta", "=", "sub_meta", "\n", "self", ".", "cl", "=", "cl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.dataset.SubDataset.__getitem__": [[65, 72], ["os.path.join", "PIL.Image.open().convert", "dataset.SubDataset.transform", "dataset.SubDataset.target_transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "#print( '%d -%d' %(self.cl,i))", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "sub_meta", "[", "i", "]", ")", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "cl", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.dataset.SubDataset.__len__": [[73, 75], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sub_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.dataset.EpisodicBatchSampler.__init__": [[77, 81], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "n_way", ",", "n_episodes", ")", ":", "\n", "        ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_episodes", "=", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.dataset.EpisodicBatchSampler.__len__": [[82, 84], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.dataset.EpisodicBatchSampler.__iter__": [[85, 88], ["range", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "n_episodes", ")", ":", "\n", "            ", "yield", "torch", ".", "randperm", "(", "self", ".", "n_classes", ")", "[", ":", "self", ".", "n_way", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.datamgr.TransformLoader.__init__": [[12, 18], ["dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "\n", "normalize_param", "=", "dict", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "jitter_param", "=", "dict", "(", "Brightness", "=", "0.4", ",", "Contrast", "=", "0.4", ",", "Color", "=", "0.4", ")", ")", ":", "\n", "        ", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "normalize_param", "=", "normalize_param", "\n", "self", ".", "jitter_param", "=", "jitter_param", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.datamgr.TransformLoader.parse_transform": [[19, 34], ["getattr", "data.ImageJitter", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "int", "int"], "methods", ["None"], ["", "def", "parse_transform", "(", "self", ",", "transform_type", ")", ":", "\n", "        ", "if", "transform_type", "==", "'ImageJitter'", ":", "\n", "            ", "method", "=", "add_transforms", ".", "ImageJitter", "(", "self", ".", "jitter_param", ")", "\n", "return", "method", "\n", "", "method", "=", "getattr", "(", "transforms", ",", "transform_type", ")", "\n", "if", "transform_type", "==", "'RandomSizedCrop'", ":", "\n", "            ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'CenterCrop'", ":", "\n", "            ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'Scale'", ":", "\n", "            ", "return", "method", "(", "[", "int", "(", "self", ".", "image_size", "*", "1.15", ")", ",", "int", "(", "self", ".", "image_size", "*", "1.15", ")", "]", ")", "\n", "", "elif", "transform_type", "==", "'Normalize'", ":", "\n", "            ", "return", "method", "(", "**", "self", ".", "normalize_param", ")", "\n", "", "else", ":", "\n", "            ", "return", "method", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.datamgr.TransformLoader.get_composed_transform": [[35, 44], ["torchvision.Compose", "datamgr.TransformLoader.parse_transform"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.datamgr.TransformLoader.parse_transform"], ["", "", "def", "get_composed_transform", "(", "self", ",", "aug", "=", "False", ")", ":", "\n", "        ", "if", "aug", ":", "\n", "            ", "transform_list", "=", "[", "'RandomSizedCrop'", ",", "'ImageJitter'", ",", "'RandomHorizontalFlip'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "", "else", ":", "\n", "            ", "transform_list", "=", "[", "'Scale'", ",", "'CenterCrop'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "\n", "", "transform_funcs", "=", "[", "self", ".", "parse_transform", "(", "x", ")", "for", "x", "in", "transform_list", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_funcs", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.datamgr.DataManager.get_data_loader": [[46, 49], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.datamgr.SimpleDataManager.__init__": [[52, 56], ["super().__init__", "datamgr.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "SimpleDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.datamgr.SimpleDataManager.get_data_loader": [[57, 64], ["datamgr.SimpleDataManager.trans_loader.get_composed_transform", "data.dataset.SimpleDataset", "dict", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.datamgr.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "        ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SimpleDataset", "(", "data_file", ",", "transform", ")", "\n", "data_loader_params", "=", "dict", "(", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.datamgr.SetDataManager.__init__": [[66, 74], ["super().__init__", "datamgr.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "n_way", ",", "n_support", ",", "n_query", ",", "n_eposide", "=", "100", ")", ":", "\n", "        ", "super", "(", "SetDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "batch_size", "=", "n_support", "+", "n_query", "\n", "self", ".", "n_eposide", "=", "n_eposide", "\n", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.datamgr.SetDataManager.get_data_loader": [[75, 82], ["datamgr.SetDataManager.trans_loader.get_composed_transform", "data.dataset.SetDataset", "data.dataset.EpisodicBatchSampler", "dict", "torch.utils.data.DataLoader", "len"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.data.datamgr.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "        ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SetDataset", "(", "data_file", ",", "self", ".", "batch_size", ",", "transform", ")", "\n", "sampler", "=", "EpisodicBatchSampler", "(", "len", "(", "dataset", ")", ",", "self", ".", "n_way", ",", "self", ".", "n_eposide", ")", "\n", "data_loader_params", "=", "dict", "(", "batch_sampler", "=", "sampler", ",", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.MatchingNet.__init__": [[14, 24], ["methods.meta_template.MetaTemplate.__init__", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "matchingnet.FullyContextualEmbedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ")", ":", "\n", "        ", "super", "(", "MatchingNet", ",", "self", ")", ".", "__init__", "(", "model_func", ",", "n_way", ",", "n_support", ")", "\n", "\n", "self", ".", "loss_fn", "=", "nn", ".", "NLLLoss", "(", ")", "\n", "\n", "self", ".", "FCE", "=", "FullyContextualEmbedding", "(", "self", ".", "feat_dim", ")", "\n", "self", ".", "G_encoder", "=", "nn", ".", "LSTM", "(", "self", ".", "feat_dim", ",", "self", ".", "feat_dim", ",", "1", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.MatchingNet.encode_training_set": [[25, 34], ["out_G.squeeze.squeeze.squeeze", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "G.div", "G_encoder", "S.unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "S.size", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "S.size"], "methods", ["None"], ["", "def", "encode_training_set", "(", "self", ",", "S", ",", "G_encoder", "=", "None", ")", ":", "\n", "        ", "if", "G_encoder", "is", "None", ":", "\n", "            ", "G_encoder", "=", "self", ".", "G_encoder", "\n", "", "out_G", "=", "G_encoder", "(", "S", ".", "unsqueeze", "(", "0", ")", ")", "[", "0", "]", "\n", "out_G", "=", "out_G", ".", "squeeze", "(", "0", ")", "\n", "G", "=", "S", "+", "out_G", "[", ":", ",", ":", "S", ".", "size", "(", "1", ")", "]", "+", "out_G", "[", ":", ",", "S", ".", "size", "(", "1", ")", ":", "]", "\n", "G_norm", "=", "torch", ".", "norm", "(", "G", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "G", ")", "\n", "G_normalized", "=", "G", ".", "div", "(", "G_norm", "+", "0.00001", ")", "\n", "return", "G", ",", "G_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.MatchingNet.get_logprobs": [[35, 46], ["FCE", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "FCE.div", "matchingnet.MatchingNet.softmax", "matchingnet.MatchingNet.relu", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "FCE.div.mm", "G_normalized.transpose", "matchingnet.MatchingNet.mm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "get_logprobs", "(", "self", ",", "f", ",", "G", ",", "G_normalized", ",", "Y_S", ",", "FCE", "=", "None", ")", ":", "\n", "        ", "if", "FCE", "is", "None", ":", "\n", "            ", "FCE", "=", "self", ".", "FCE", "\n", "", "F", "=", "FCE", "(", "f", ",", "G", ")", "\n", "F_norm", "=", "torch", ".", "norm", "(", "F", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "F", ")", "\n", "F_normalized", "=", "F", ".", "div", "(", "F_norm", "+", "0.00001", ")", "\n", "#scores = F.mm(G_normalized.transpose(0,1)) #The implementation of Ross et al., but not consistent with origin paper and would cause large norm feature dominate ", "\n", "scores", "=", "self", ".", "relu", "(", "F_normalized", ".", "mm", "(", "G_normalized", ".", "transpose", "(", "0", ",", "1", ")", ")", ")", "*", "100", "# The original paper use cosine simlarity, but here we scale it by 100 to strengthen highest probability after softmax", "\n", "softmax", "=", "self", ".", "softmax", "(", "scores", ")", "\n", "logprobs", "=", "(", "softmax", ".", "mm", "(", "Y_S", ")", "+", "1e-6", ")", ".", "log", "(", ")", "\n", "return", "logprobs", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.MatchingNet.set_forward": [[47, 59], ["matchingnet.MatchingNet.parse_feature", "z_support.contiguous().view.contiguous().view.contiguous().view", "z_query.contiguous().view.contiguous().view.contiguous().view", "matchingnet.MatchingNet.encode_training_set", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "matchingnet.MatchingNet.get_logprobs", "numpy.repeat", "z_support.contiguous().view.contiguous().view.contiguous", "z_query.contiguous().view.contiguous().view.contiguous", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "utils.one_hot"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.parse_feature", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.MatchingNet.encode_training_set", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.MatchingNet.get_logprobs", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.utils.one_hot"], ["", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "\n", "        ", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_support", ",", "-", "1", ")", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "-", "1", ")", "\n", "G", ",", "G_normalized", "=", "self", ".", "encode_training_set", "(", "z_support", ")", "\n", "\n", "y_s", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_support", ")", ")", "\n", "Y_S", "=", "Variable", "(", "utils", ".", "one_hot", "(", "y_s", ",", "self", ".", "n_way", ")", ")", ".", "cuda", "(", ")", "\n", "f", "=", "z_query", "\n", "logprobs", "=", "self", ".", "get_logprobs", "(", "f", ",", "G", ",", "G_normalized", ",", "Y_S", ")", "\n", "return", "logprobs", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.MatchingNet.set_forward_loss": [[60, 67], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "matchingnet.MatchingNet.set_forward", "matchingnet.MatchingNet.loss_fn", "numpy.repeat", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "range"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.set_forward", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "y_query", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", "\n", "y_query", "=", "Variable", "(", "y_query", ".", "cuda", "(", ")", ")", "\n", "\n", "logprobs", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "\n", "return", "self", ".", "loss_fn", "(", "logprobs", ",", "y_query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.MatchingNet.cuda": [[68, 72], ["super().cuda", "matchingnet.MatchingNet.FCE.cuda"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "super", "(", "MatchingNet", ",", "self", ")", ".", "cuda", "(", ")", "\n", "self", ".", "FCE", "=", "self", ".", "FCE", ".", "cuda", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.__init__": [[74, 80], ["torch.Module.__init__", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ")", ":", "\n", "        ", "super", "(", "FullyContextualEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lstmcell", "=", "nn", ".", "LSTMCell", "(", "feat_dim", "*", "2", ",", "feat_dim", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "self", ".", "c_0", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "feat_dim", ")", ")", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "#self.K = K", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.forward": [[82, 97], ["matchingnet.FullyContextualEmbedding.c_0.expand_as", "G.transpose", "G.size", "range", "h.mm", "matchingnet.FullyContextualEmbedding.softmax", "matchingnet.FullyContextualEmbedding.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "matchingnet.FullyContextualEmbedding.lstmcell"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "f", ",", "G", ")", ":", "\n", "        ", "h", "=", "f", "\n", "c", "=", "self", ".", "c_0", ".", "expand_as", "(", "f", ")", "\n", "G_T", "=", "G", ".", "transpose", "(", "0", ",", "1", ")", "\n", "K", "=", "G", ".", "size", "(", "0", ")", "#Tuna to be comfirmed", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "            ", "logit_a", "=", "h", ".", "mm", "(", "G_T", ")", "\n", "a", "=", "self", ".", "softmax", "(", "logit_a", ")", "\n", "r", "=", "a", ".", "mm", "(", "G", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "f", ",", "r", ")", ",", "1", ")", "\n", "\n", "h", ",", "c", "=", "self", ".", "lstmcell", "(", "x", ",", "(", "h", ",", "c", ")", ")", "\n", "h", "=", "h", "+", "f", "\n", "\n", "", "return", "h", "\n", "", "def", "cuda", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda": [[97, 101], ["super().cuda", "matchingnet.FullyContextualEmbedding.c_0.cuda"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "super", "(", "FullyContextualEmbedding", ",", "self", ")", ".", "cuda", "(", ")", "\n", "self", ".", "c_0", "=", "self", ".", "c_0", ".", "cuda", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinetrain.BaselineTrain.__init__": [[11, 22], ["torch.Module.__init__", "model_func", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.Linear", "torch.Linear", "torch.Linear", "baselinetrain.BaselineTrain.classifier.bias.data.fill_", "backbone.distLinear"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "num_class", ",", "dropRate", "=", "0.5", ",", "loss_type", "=", "'softmax'", ")", ":", "\n", "        ", "super", "(", "BaselineTrain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature", "=", "model_func", "(", "dropRate", "=", "dropRate", ")", "\n", "if", "loss_type", "==", "'softmax'", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "feature", ".", "final_feat_dim", ",", "num_class", ")", "\n", "self", ".", "classifier", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "loss_type", "==", "'dist'", ":", "#Baseline ++", "\n", "            ", "self", ".", "classifier", "=", "backbone", ".", "distLinear", "(", "self", ".", "feature", ".", "final_feat_dim", ",", "num_class", ")", "\n", "", "self", ".", "loss_type", "=", "loss_type", "#'softmax' #'dist'", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinetrain.BaselineTrain.forward": [[23, 28], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "baselinetrain.BaselineTrain.feature.forward", "baselinetrain.BaselineTrain.classifier.forward", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "Variable", "(", "x", ".", "cuda", "(", ")", ")", "\n", "out", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "scores", "=", "self", ".", "classifier", ".", "forward", "(", "out", ")", "\n", "return", "out", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinetrain.BaselineTrain.forward_loss": [[29, 33], ["baselinetrain.BaselineTrain.forward", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "baselinetrain.BaselineTrain.loss_fn", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "forward_loss", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "scores", "=", "self", ".", "forward", "(", "x", ")", "\n", "y", "=", "Variable", "(", "y", ".", "cuda", "(", ")", ")", "\n", "return", "self", ".", "loss_fn", "(", "scores", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinetrain.BaselineTrain.train_loop": [[34, 49], ["enumerate", "optimizer.zero_grad", "baselinetrain.BaselineTrain.forward_loss", "baselinetrain.BaselineTrain.backward", "optimizer.step", "print", "len", "float"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinetrain.BaselineTrain.forward_loss"], ["", "def", "train_loop", "(", "self", ",", "epoch", ",", "train_loader", ",", "optimizer", ")", ":", "\n", "        ", "print_freq", "=", "10", "\n", "avg_loss", "=", "0", "\n", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "forward_loss", "(", "x", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "avg_loss", "=", "avg_loss", "+", "loss", ".", "data", "[", "0", "]", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", ":", "\n", "#print(optimizer.state_dict()['param_groups'][0]['lr'])", "\n", "                ", "print", "(", "'Epoch {:d} | Batch {:d}/{:d} | Loss {:f}'", ".", "format", "(", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "avg_loss", "/", "float", "(", "i", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinetrain.BaselineTrain.test_loop": [[50, 52], ["None"], "methods", ["None"], ["", "", "", "def", "test_loop", "(", "self", ",", "val_loader", ")", ":", "\n", "        ", "return", "-", "1", "#no validation, just save model during iteration", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.protonet.ProtoNet.__init__": [[12, 15], ["methods.meta_template.MetaTemplate.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ")", ":", "\n", "        ", "super", "(", "ProtoNet", ",", "self", ")", ".", "__init__", "(", "model_func", ",", "n_way", ",", "n_support", ")", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.protonet.ProtoNet.set_forward": [[17, 27], ["protonet.ProtoNet.parse_feature", "z_support.contiguous.contiguous.contiguous", "z_support.contiguous.contiguous.view().mean", "z_query.contiguous().view.contiguous().view.contiguous().view", "protonet.euclidean_dist", "z_support.contiguous.contiguous.view", "z_query.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.parse_feature", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.protonet.euclidean_dist"], ["", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "\n", "        ", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", "\n", "z_proto", "=", "z_support", ".", "view", "(", "self", ".", "n_way", ",", "self", ".", "n_support", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "#the shape of z is [n_data, n_dim]", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "-", "1", ")", "\n", "\n", "dists", "=", "euclidean_dist", "(", "z_query", ",", "z_proto", ")", "\n", "scores", "=", "-", "dists", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.protonet.ProtoNet.set_forward_loss": [[29, 36], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "protonet.ProtoNet.set_forward", "protonet.ProtoNet.loss_fn", "numpy.repeat", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "range"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.set_forward", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "y_query", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", "\n", "y_query", "=", "Variable", "(", "y_query", ".", "cuda", "(", ")", ")", "\n", "\n", "scores", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "\n", "return", "self", ".", "loss_fn", "(", "scores", ",", "y_query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.protonet.euclidean_dist": [[38, 50], ["x.unsqueeze().expand.size", "y.unsqueeze().expand.size", "x.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand", "y.unsqueeze().expand.unsqueeze().expand", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "y.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze", "y.unsqueeze().expand.unsqueeze", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "", "def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "# x: N x D", "\n", "# y: M x D", "\n", "    ", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "m", "=", "y", ".", "size", "(", "0", ")", "\n", "d", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "d", "==", "y", ".", "size", "(", "1", ")", "\n", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "\n", "return", "torch", ".", "pow", "(", "x", "-", "y", ",", "2", ")", ".", "sum", "(", "2", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.maml.MAML.__init__": [[12, 23], ["methods.meta_template.MetaTemplate.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "backbone.Linear_fw", "maml.MAML.classifier.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "approx", "=", "False", ")", ":", "\n", "        ", "super", "(", "MAML", ",", "self", ")", ".", "__init__", "(", "model_func", ",", "n_way", ",", "n_support", ",", "change_way", "=", "False", ")", "\n", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "classifier", "=", "backbone", ".", "Linear_fw", "(", "self", ".", "feat_dim", ",", "n_way", ")", "\n", "self", ".", "classifier", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "self", ".", "n_task", "=", "4", "\n", "self", ".", "task_update_num", "=", "5", "\n", "self", ".", "train_lr", "=", "0.01", "\n", "self", ".", "approx", "=", "approx", "#first order approx.        ", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.maml.MAML.forward": [[24, 28], ["maml.MAML.feature.forward", "maml.MAML.classifier.forward"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "scores", "=", "self", ".", "classifier", ".", "forward", "(", "out", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.maml.MAML.set_forward": [[29, 59], ["x.cuda.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x_var[].contiguous().view", "x_var[].contiguous().view", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "list", "maml.MAML.parameters", "maml.MAML.zero_grad", "range", "maml.MAML.forward", "maml.MAML.parameters", "maml.MAML.forward", "maml.MAML.loss_fn", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "enumerate", "x_var[].contiguous", "x_var[].contiguous", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "maml.MAML.parameters", "list.append", "x.cuda.cuda.size", "x.cuda.cuda.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "g.detach", "numpy.repeat", "range"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward"], ["", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "\n", "        ", "assert", "is_feature", "==", "False", ",", "'MAML do not support fixed feature'", "\n", "x", "=", "x", ".", "cuda", "(", ")", "\n", "x_var", "=", "Variable", "(", "x", ")", "\n", "x_a_i", "=", "x_var", "[", ":", ",", ":", "self", ".", "n_support", ",", ":", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_support", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "#support data ", "\n", "x_b_i", "=", "x_var", "[", ":", ",", "self", ".", "n_support", ":", ",", ":", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "#query data", "\n", "y_a_i", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_support", ")", ")", ")", ".", "cuda", "(", ")", "#label for support data", "\n", "\n", "fast_parameters", "=", "list", "(", "self", ".", "parameters", "(", ")", ")", "#the first gradient calcuated in line 45 is based on original weight", "\n", "for", "weight", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "weight", ".", "fast", "=", "None", "\n", "", "self", ".", "zero_grad", "(", ")", "\n", "\n", "for", "task_step", "in", "range", "(", "self", ".", "task_update_num", ")", ":", "\n", "            ", "scores", "=", "self", ".", "forward", "(", "x_a_i", ")", "\n", "set_loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y_a_i", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "set_loss", ",", "fast_parameters", ",", "create_graph", "=", "True", ")", "#build full graph support gradient of gradient", "\n", "if", "self", ".", "approx", ":", "\n", "                ", "grad", "=", "[", "g", ".", "detach", "(", ")", "for", "g", "in", "grad", "]", "#do not calculate gradient of gradient if using first order approximation", "\n", "", "fast_parameters", "=", "[", "]", "\n", "for", "k", ",", "weight", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "#for usage of weight.fast, please see Linear_fw, Conv_fw in backbone.py ", "\n", "                ", "if", "weight", ".", "fast", "is", "None", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", "-", "self", ".", "train_lr", "*", "grad", "[", "k", "]", "#create weight.fast ", "\n", "", "else", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", ".", "fast", "-", "self", ".", "train_lr", "*", "grad", "[", "k", "]", "#create an updated weight.fast, note the '-' is not merely minus value, but to create a new weight.fast ", "\n", "", "fast_parameters", ".", "append", "(", "weight", ".", "fast", ")", "#gradients calculated in line 45 are based on newest fast weight, but the graph will retain the link to old weight.fasts", "\n", "\n", "", "", "scores", "=", "self", ".", "forward", "(", "x_b_i", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.maml.MAML.set_forward_adaptation": [[60, 62], ["ValueError"], "methods", ["None"], ["", "def", "set_forward_adaptation", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "#overwrite parrent function", "\n", "        ", "raise", "ValueError", "(", "'MAML performs further adapation simply by increasing task_upate_num'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.maml.MAML.set_forward_loss": [[64, 70], ["maml.MAML.set_forward", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "maml.MAML.loss_fn", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.repeat", "range"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.set_forward", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "scores", "=", "self", ".", "set_forward", "(", "x", ",", "is_feature", "=", "False", ")", "\n", "y_b_i", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", ")", ".", "cuda", "(", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y_b_i", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.maml.MAML.train_loop": [[71, 99], ["optimizer.zero_grad", "enumerate", "maml.MAML.set_forward_loss", "loss_all.append", "optimizer.zero_grad", "x.size", "x.size", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum.backward", "torch.stack().sum.backward", "torch.stack().sum.backward", "optimizer.step", "print", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "float"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.set_forward_loss"], ["", "def", "train_loop", "(", "self", ",", "epoch", ",", "train_loader", ",", "optimizer", ")", ":", "#overwrite parrent function", "\n", "        ", "print_freq", "=", "10", "\n", "avg_loss", "=", "0", "\n", "task_count", "=", "0", "\n", "loss_all", "=", "[", "]", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#train", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "assert", "self", ".", "n_way", "==", "x", ".", "size", "(", "0", ")", ",", "\"MAML do not support way change\"", "\n", "\n", "loss", "=", "self", ".", "set_forward_loss", "(", "x", ")", "\n", "avg_loss", "=", "avg_loss", "+", "loss", ".", "data", "[", "0", "]", "\n", "loss_all", ".", "append", "(", "loss", ")", "\n", "\n", "task_count", "+=", "1", "\n", "\n", "if", "task_count", "==", "self", ".", "n_task", ":", "#MAML update several tasks at one time", "\n", "                ", "loss_q", "=", "torch", ".", "stack", "(", "loss_all", ")", ".", "sum", "(", "0", ")", "\n", "loss_q", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "task_count", "=", "0", "\n", "loss_all", "=", "[", "]", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "i", "%", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch {:d} | Batch {:d}/{:d} | Loss {:f}'", ".", "format", "(", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "avg_loss", "/", "float", "(", "i", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.maml.MAML.test_loop": [[100, 120], ["len", "enumerate", "numpy.asarray", "numpy.mean", "numpy.std", "print", "maml.MAML.correct", "numpy.asarray.append", "x.size", "x.size", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.correct"], ["", "", "", "def", "test_loop", "(", "self", ",", "test_loader", ",", "return_std", "=", "False", ")", ":", "#overwrite parrent function", "\n", "        ", "correct", "=", "0", "\n", "count", "=", "0", "\n", "acc_all", "=", "[", "]", "\n", "\n", "iter_num", "=", "len", "(", "test_loader", ")", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "assert", "self", ".", "n_way", "==", "x", ".", "size", "(", "0", ")", ",", "\"MAML do not support way change\"", "\n", "correct_this", ",", "count_this", "=", "self", ".", "correct", "(", "x", ")", "\n", "acc_all", ".", "append", "(", "correct_this", "/", "count_this", "*", "100", ")", "\n", "\n", "", "acc_all", "=", "np", ".", "asarray", "(", "acc_all", ")", "\n", "acc_mean", "=", "np", ".", "mean", "(", "acc_all", ")", "\n", "acc_std", "=", "np", ".", "std", "(", "acc_all", ")", "\n", "print", "(", "'%d Test Acc = %4.2f%% +- %4.2f%%'", "%", "(", "iter_num", ",", "acc_mean", ",", "1.96", "*", "acc_std", "/", "np", ".", "sqrt", "(", "iter_num", ")", ")", ")", "\n", "if", "return_std", ":", "\n", "            ", "return", "acc_mean", ",", "acc_std", "\n", "", "else", ":", "\n", "            ", "return", "acc_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.__init__": [[11, 19], ["torch.Module.__init__", "model_func"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "change_way", "=", "True", ")", ":", "\n", "        ", "super", "(", "MetaTemplate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_support", "=", "n_support", "\n", "self", ".", "n_query", "=", "-", "1", "#(change depends on input) ", "\n", "self", ".", "feature", "=", "model_func", "(", ")", "\n", "self", ".", "feat_dim", "=", "self", ".", "feature", ".", "final_feat_dim", "\n", "self", ".", "change_way", "=", "change_way", "#some methods allow different_way classification during training and test", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.set_forward": [[20, 23], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.set_forward_loss": [[24, 27], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.forward": [[28, 31], ["meta_template.MetaTemplate.feature.forward"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.parse_feature": [[32, 44], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x.contiguous().view.contiguous().view.cuda", "x.contiguous().view.contiguous().view.contiguous().view", "meta_template.MetaTemplate.feature.forward", "z_all.view.view.view", "x.contiguous().view.contiguous().view.contiguous", "x.contiguous().view.contiguous().view.size"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward"], ["", "def", "parse_feature", "(", "self", ",", "x", ",", "is_feature", ")", ":", "\n", "        ", "x", "=", "Variable", "(", "x", ".", "cuda", "(", ")", ")", "\n", "if", "is_feature", ":", "\n", "            ", "z_all", "=", "x", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "(", "self", ".", "n_support", "+", "self", ".", "n_query", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "z_all", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "z_all", "=", "z_all", ".", "view", "(", "self", ".", "n_way", ",", "self", ".", "n_support", "+", "self", ".", "n_query", ",", "-", "1", ")", "\n", "", "z_support", "=", "z_all", "[", ":", ",", ":", "self", ".", "n_support", "]", "\n", "z_query", "=", "z_all", "[", ":", ",", "self", ".", "n_support", ":", "]", "\n", "\n", "return", "z_support", ",", "z_query", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.correct": [[45, 53], ["meta_template.MetaTemplate.set_forward", "numpy.repeat", "meta_template.MetaTemplate.data.topk", "topk_labels.cpu().numpy", "numpy.sum", "range", "float", "len", "topk_labels.cpu"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.set_forward"], ["", "def", "correct", "(", "self", ",", "x", ")", ":", "\n", "        ", "scores", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "y_query", "=", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", "\n", "\n", "topk_scores", ",", "topk_labels", "=", "scores", ".", "data", ".", "topk", "(", "1", ",", "1", ",", "True", ",", "True", ")", "\n", "topk_ind", "=", "topk_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "top1_correct", "=", "np", ".", "sum", "(", "topk_ind", "[", ":", ",", "0", "]", "==", "y_query", ")", "\n", "return", "float", "(", "top1_correct", ")", ",", "len", "(", "y_query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.train_loop": [[54, 71], ["enumerate", "optimizer.zero_grad", "meta_template.MetaTemplate.set_forward_loss", "meta_template.MetaTemplate.backward", "optimizer.step", "x.size", "x.size", "print", "len", "float"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.set_forward_loss"], ["", "def", "train_loop", "(", "self", ",", "epoch", ",", "train_loader", ",", "optimizer", ")", ":", "\n", "        ", "print_freq", "=", "10", "\n", "\n", "avg_loss", "=", "0", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "if", "self", ".", "change_way", ":", "\n", "                ", "self", ".", "n_way", "=", "x", ".", "size", "(", "0", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "set_forward_loss", "(", "x", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "avg_loss", "=", "avg_loss", "+", "loss", ".", "data", "[", "0", "]", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", ":", "\n", "#print(optimizer.state_dict()['param_groups'][0]['lr'])", "\n", "                ", "print", "(", "'Epoch {:d} | Batch {:d}/{:d} | Loss {:f}'", ".", "format", "(", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "avg_loss", "/", "float", "(", "i", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.test_loop": [[72, 91], ["len", "enumerate", "numpy.asarray", "numpy.mean", "numpy.std", "print", "meta_template.MetaTemplate.correct", "numpy.asarray.append", "x.size", "x.size", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.correct"], ["", "", "", "def", "test_loop", "(", "self", ",", "test_loader", ",", "record", "=", "None", ")", ":", "\n", "        ", "correct", "=", "0", "\n", "count", "=", "0", "\n", "acc_all", "=", "[", "]", "\n", "\n", "iter_num", "=", "len", "(", "test_loader", ")", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "if", "self", ".", "change_way", ":", "\n", "                ", "self", ".", "n_way", "=", "x", ".", "size", "(", "0", ")", "\n", "", "correct_this", ",", "count_this", "=", "self", ".", "correct", "(", "x", ")", "\n", "acc_all", ".", "append", "(", "correct_this", "/", "count_this", "*", "100", ")", "\n", "\n", "", "acc_all", "=", "np", ".", "asarray", "(", "acc_all", ")", "\n", "acc_mean", "=", "np", ".", "mean", "(", "acc_all", ")", "\n", "acc_std", "=", "np", ".", "std", "(", "acc_all", ")", "\n", "print", "(", "'%d Test Acc = %4.2f%% +- %4.2f%%'", "%", "(", "iter_num", ",", "acc_mean", ",", "1.96", "*", "acc_std", "/", "np", ".", "sqrt", "(", "iter_num", ")", ")", ")", "\n", "\n", "return", "acc_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.set_forward_adaptation": [[92, 126], ["meta_template.MetaTemplate.parse_feature", "z_support.contiguous().view.contiguous().view.contiguous().view", "z_query.contiguous().view.contiguous().view.contiguous().view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Linear", "torch.Linear", "torch.Linear", "linear_clf.cuda.cuda.cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "loss_function.cuda.cuda.cuda", "range", "linear_clf.cuda.cuda.", "numpy.repeat", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "linear_clf.cuda.cuda.parameters", "numpy.random.permutation", "range", "z_support.contiguous().view.contiguous().view.contiguous", "z_query.contiguous().view.contiguous().view.contiguous", "range", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "linear_clf.cuda.cuda.", "loss_function.cuda.cuda.", "loss_function.cuda.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "min"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.parse_feature", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "set_forward_adaptation", "(", "self", ",", "x", ",", "is_feature", "=", "True", ")", ":", "#further adaptation, default is fixing feature and train a new softmax clasifier", "\n", "        ", "assert", "is_feature", "==", "True", ",", "'Feature is fixed in further adaptation'", "\n", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_support", ",", "-", "1", ")", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "-", "1", ")", "\n", "\n", "y_support", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_support", ")", ")", "\n", "y_support", "=", "Variable", "(", "y_support", ".", "cuda", "(", ")", ")", "\n", "\n", "linear_clf", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "n_way", ")", "\n", "linear_clf", "=", "linear_clf", ".", "cuda", "(", ")", "\n", "\n", "set_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "linear_clf", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ",", "momentum", "=", "0.9", ",", "dampening", "=", "0.9", ",", "weight_decay", "=", "0.001", ")", "\n", "\n", "loss_function", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss_function", "=", "loss_function", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "4", "\n", "support_size", "=", "self", ".", "n_way", "*", "self", ".", "n_support", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "\n", "            ", "rand_id", "=", "np", ".", "random", ".", "permutation", "(", "support_size", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "support_size", ",", "batch_size", ")", ":", "\n", "                ", "set_optimizer", ".", "zero_grad", "(", ")", "\n", "selected_id", "=", "torch", ".", "from_numpy", "(", "rand_id", "[", "i", ":", "min", "(", "i", "+", "batch_size", ",", "support_size", ")", "]", ")", ".", "cuda", "(", ")", "\n", "z_batch", "=", "z_support", "[", "selected_id", "]", "\n", "y_batch", "=", "y_support", "[", "selected_id", "]", "\n", "scores", "=", "linear_clf", "(", "z_batch", ")", "\n", "loss", "=", "loss_function", "(", "scores", ",", "y_batch", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "set_optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "scores", "=", "linear_clf", "(", "z_query", ")", "\n", "return", "scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationNet.__init__": [[13, 23], ["methods.meta_template.MetaTemplate.__init__", "relationnet.RelationModule", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "loss_type", "=", "'mse'", ")", ":", "\n", "        ", "super", "(", "RelationNet", ",", "self", ")", ".", "__init__", "(", "model_func", ",", "n_way", ",", "n_support", ")", "\n", "\n", "self", ".", "loss_type", "=", "loss_type", "#'softmax'# 'mse'", "\n", "self", ".", "relation_module", "=", "RelationModule", "(", "self", ".", "feat_dim", ",", "8", ",", "self", ".", "loss_type", ")", "#relation net features are not pooled, so self.feat_dim is [dim, w, h] ", "\n", "\n", "if", "self", ".", "loss_type", "==", "'mse'", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationNet.set_forward": [[24, 41], ["relationnet.RelationNet.parse_feature", "z_support.contiguous.contiguous.contiguous", "z_support.contiguous.contiguous.view().mean", "z_query.contiguous().view.contiguous().view.contiguous().view", "z_support.contiguous.view().mean.unsqueeze().repeat", "z_query.contiguous().view.contiguous().view.unsqueeze().repeat", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "relationnet.RelationNet.feat_dim.copy", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "relationnet.RelationNet.relation_module().view", "z_support.contiguous.contiguous.view", "z_query.contiguous().view.contiguous().view.contiguous", "z_support.contiguous.view().mean.unsqueeze", "z_query.contiguous().view.contiguous().view.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relationnet.RelationNet.relation_module"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.parse_feature"], ["", "", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "\n", "        ", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", "\n", "z_proto", "=", "z_support", ".", "view", "(", "self", ".", "n_way", ",", "self", ".", "n_support", ",", "*", "self", ".", "feat_dim", ")", ".", "mean", "(", "1", ")", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "*", "self", ".", "feat_dim", ")", "\n", "\n", "\n", "z_proto_ext", "=", "z_proto", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "n_query", "*", "self", ".", "n_way", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "z_query_ext", "=", "z_query", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "n_way", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "z_query_ext", "=", "torch", ".", "transpose", "(", "z_query_ext", ",", "0", ",", "1", ")", "\n", "extend_final_feat_dim", "=", "self", ".", "feat_dim", ".", "copy", "(", ")", "\n", "extend_final_feat_dim", "[", "0", "]", "*=", "2", "\n", "relation_pairs", "=", "torch", ".", "cat", "(", "(", "z_proto_ext", ",", "z_query_ext", ")", ",", "2", ")", ".", "view", "(", "-", "1", ",", "*", "extend_final_feat_dim", ")", "\n", "relations", "=", "self", ".", "relation_module", "(", "relation_pairs", ")", ".", "view", "(", "-", "1", ",", "self", ".", "n_way", ")", "\n", "\n", "return", "relations", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationNet.set_forward_adaptation": [[42, 94], ["relationnet.RelationModule", "RelationModule.load_state_dict", "relationnet.RelationNet.parse_feature", "z_support.contiguous.contiguous.contiguous", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "z_support.contiguous.contiguous.data.cpu().numpy", "range", "z_support.contiguous.contiguous.view().mean", "z_query.contiguous().view.contiguous().view.contiguous().view", "z_support.contiguous.view().mean.unsqueeze().repeat", "z_query.contiguous().view.contiguous().view.unsqueeze().repeat", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "relationnet.RelationNet.feat_dim.copy", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "relationnet.RelationNet.relation_module().view", "relationnet.RelationNet.relation_module.load_state_dict", "relationnet.RelationNet.relation_module.state_dict", "relationnet.RelationNet.relation_module.parameters", "numpy.random.permutation().tolist", "numpy.array", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "relationnet.RelationNet.set_forward", "relationnet.RelationNet.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.optim.SGD.step", "RelationModule.state_dict", "z_support.contiguous.contiguous.data.cpu", "torch.Tensor().cuda.size", "torch.Tensor().cuda.size", "torch.Tensor().cuda.size", "numpy.repeat", "utils.one_hot", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "relationnet.RelationNet.loss_fn", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "relationnet.RelationNet.loss_fn", "z_support.contiguous.contiguous.view", "z_query.contiguous().view.contiguous().view.contiguous", "z_support.contiguous.view().mean.unsqueeze", "z_query.contiguous().view.contiguous().view.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relationnet.RelationNet.relation_module", "numpy.random.permutation", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "range", "z_support.contiguous.contiguous.size"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.parse_feature", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.set_forward", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.utils.one_hot", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "set_forward_adaptation", "(", "self", ",", "x", ",", "is_feature", "=", "True", ")", ":", "#overwrite parent function", "\n", "        ", "assert", "is_feature", "==", "True", ",", "'Finetune only support fixed feature'", "\n", "full_n_support", "=", "self", ".", "n_support", "\n", "full_n_query", "=", "self", ".", "n_query", "\n", "relation_module_clone", "=", "RelationModule", "(", "self", ".", "feat_dim", ",", "8", ",", "self", ".", "loss_type", ")", "\n", "relation_module_clone", ".", "load_state_dict", "(", "self", ".", "relation_module", ".", "state_dict", "(", ")", ")", "\n", "\n", "\n", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", "\n", "set_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "relation_module", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ",", "momentum", "=", "0.9", ",", "dampening", "=", "0.9", ",", "weight_decay", "=", "0.001", ")", "\n", "\n", "self", ".", "n_support", "=", "3", "\n", "self", ".", "n_query", "=", "2", "\n", "\n", "z_support_cpu", "=", "z_support", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "\n", "            ", "perm_id", "=", "np", ".", "random", ".", "permutation", "(", "full_n_support", ")", ".", "tolist", "(", ")", "\n", "sub_x", "=", "np", ".", "array", "(", "[", "z_support_cpu", "[", "i", ",", "perm_id", ",", ":", ",", ":", ",", ":", "]", "for", "i", "in", "range", "(", "z_support", ".", "size", "(", "0", ")", ")", "]", ")", "\n", "sub_x", "=", "torch", ".", "Tensor", "(", "sub_x", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "change_way", ":", "\n", "                ", "self", ".", "n_way", "=", "sub_x", ".", "size", "(", "0", ")", "\n", "", "set_optimizer", ".", "zero_grad", "(", ")", "\n", "y", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", "\n", "scores", "=", "self", ".", "set_forward", "(", "sub_x", ",", "is_feature", "=", "True", ")", "\n", "if", "self", ".", "loss_type", "==", "'mse'", ":", "\n", "                ", "y_oh", "=", "utils", ".", "one_hot", "(", "y", ",", "self", ".", "n_way", ")", "\n", "y_oh", "=", "Variable", "(", "y_oh", ".", "cuda", "(", ")", ")", "\n", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y_oh", ")", "\n", "", "else", ":", "\n", "                ", "y", "=", "Variable", "(", "y", ".", "cuda", "(", ")", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "set_optimizer", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "n_support", "=", "full_n_support", "\n", "self", ".", "n_query", "=", "full_n_query", "\n", "z_proto", "=", "z_support", ".", "view", "(", "self", ".", "n_way", ",", "self", ".", "n_support", ",", "*", "self", ".", "feat_dim", ")", ".", "mean", "(", "1", ")", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "*", "self", ".", "feat_dim", ")", "\n", "\n", "\n", "z_proto_ext", "=", "z_proto", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "n_query", "*", "self", ".", "n_way", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "z_query_ext", "=", "z_query", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "n_way", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "z_query_ext", "=", "torch", ".", "transpose", "(", "z_query_ext", ",", "0", ",", "1", ")", "\n", "extend_final_feat_dim", "=", "self", ".", "feat_dim", ".", "copy", "(", ")", "\n", "extend_final_feat_dim", "[", "0", "]", "*=", "2", "\n", "relation_pairs", "=", "torch", ".", "cat", "(", "(", "z_proto_ext", ",", "z_query_ext", ")", ",", "2", ")", ".", "view", "(", "-", "1", ",", "*", "extend_final_feat_dim", ")", "\n", "relations", "=", "self", ".", "relation_module", "(", "relation_pairs", ")", ".", "view", "(", "-", "1", ",", "self", ".", "n_way", ")", "\n", "\n", "self", ".", "relation_module", ".", "load_state_dict", "(", "relation_module_clone", ".", "state_dict", "(", ")", ")", "\n", "return", "relations", "\n", "", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationNet.set_forward_loss": [[94, 106], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "relationnet.RelationNet.set_forward", "numpy.repeat", "utils.one_hot", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "relationnet.RelationNet.loss_fn", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "relationnet.RelationNet.loss_fn", "range", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.set_forward", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.utils.one_hot", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", "\n", "\n", "scores", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "if", "self", ".", "loss_type", "==", "'mse'", ":", "\n", "            ", "y_oh", "=", "utils", ".", "one_hot", "(", "y", ",", "self", ".", "n_way", ")", "\n", "y_oh", "=", "Variable", "(", "y_oh", ".", "cuda", "(", ")", ")", "\n", "\n", "return", "self", ".", "loss_fn", "(", "scores", ",", "y_oh", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "Variable", "(", "y", ".", "cuda", "(", ")", ")", "\n", "return", "self", ".", "loss_fn", "(", "scores", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationConvBlock.__init__": [[108, 123], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.init_layer"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.None.backbone.init_layer"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "RelationConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "self", ".", "C", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C", ",", "self", ".", "BN", ",", "self", ".", "relu", ",", "self", ".", "pool", "]", "\n", "\n", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "backbone", ".", "init_layer", "(", "layer", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "parametrized_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationConvBlock.forward": [[124, 127], ["relationnet.RelationConvBlock.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.__init__": [[130, 143], ["torch.Module.__init__", "relationnet.RelationConvBlock", "relationnet.RelationConvBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "int", "shrink_s", "shrink_s", "int"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "loss_type", "=", "'mse'", ")", ":", "\n", "        ", "super", "(", "RelationModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "padding", "=", "1", "if", "(", "input_size", "[", "1", "]", "<", "10", ")", "and", "(", "input_size", "[", "2", "]", "<", "10", ")", "else", "0", "# when using Resnet, conv map without avgpooling is 7x7, need padding in block to do pooling", "\n", "\n", "self", ".", "layer1", "=", "RelationConvBlock", "(", "input_size", "[", "0", "]", "*", "2", ",", "input_size", "[", "0", "]", ",", "padding", "=", "padding", ")", "\n", "self", ".", "layer2", "=", "RelationConvBlock", "(", "input_size", "[", "0", "]", ",", "input_size", "[", "0", "]", ",", "padding", "=", "padding", ")", "\n", "\n", "shrink_s", "=", "lambda", "s", ":", "int", "(", "(", "int", "(", "(", "s", "-", "2", "+", "2", "*", "padding", ")", "/", "2", ")", "-", "2", "+", "2", "*", "padding", ")", "/", "2", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_size", "[", "0", "]", "*", "shrink_s", "(", "input_size", "[", "1", "]", ")", "*", "shrink_s", "(", "input_size", "[", "2", "]", ")", ",", "hidden_size", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.relationnet.RelationModule.forward": [[144, 155], ["relationnet.RelationModule.layer1", "relationnet.RelationModule.layer2", "relationnet.RelationModule.view", "torch.relu", "torch.relu", "torch.relu", "relationnet.RelationModule.size", "relationnet.RelationModule.fc1", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "relationnet.RelationModule.fc2", "relationnet.RelationModule.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "if", "self", ".", "loss_type", "==", "'mse'", ":", "\n", "            ", "out", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "'softmax'", ":", "\n", "            ", "out", "=", "self", ".", "fc2", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__": [[10, 13], ["methods.meta_template.MetaTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "loss_type", "=", "\"dist\"", ")", ":", "\n", "        ", "super", "(", "BaselineFinetune", ",", "self", ")", ".", "__init__", "(", "model_func", ",", "n_way", ",", "n_support", ")", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.set_forward": [[14, 16], ["baselinefinetune.BaselineFinetune.set_forward_adaptation"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.set_forward_adaptation"], ["", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "True", ")", ":", "\n", "        ", "return", "self", ".", "set_forward_adaptation", "(", "x", ",", "is_feature", ")", ";", "#Baseline always do adaptation", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.set_forward_adaptation": [[17, 55], ["baselinefinetune.BaselineFinetune.parse_feature", "z_support.contiguous().view.contiguous().view.contiguous().view", "z_query.contiguous().view.contiguous().view.contiguous().view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "backbone.distLinear.cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "loss_function.cuda.cuda.cuda", "range", "numpy.repeat", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.Linear", "torch.Linear", "torch.Linear", "backbone.distLinear.parameters", "numpy.random.permutation", "range", "z_support.contiguous().view.contiguous().view.contiguous", "z_query.contiguous().view.contiguous().view.contiguous", "range", "backbone.distLinear", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "backbone.distLinear.", "loss_function.cuda.cuda.", "loss_function.cuda.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.optim.SGD.step", "scores_eval.append", "backbone.distLinear.", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "min"], "methods", ["home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.meta_template.MetaTemplate.parse_feature", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda", "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.matchingnet.FullyContextualEmbedding.cuda"], ["", "def", "set_forward_adaptation", "(", "self", ",", "x", ",", "is_feature", "=", "True", ")", ":", "\n", "        ", "assert", "is_feature", "==", "True", ",", "'Baseline only support testing with feature'", "\n", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_support", ",", "-", "1", ")", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "-", "1", ")", "\n", "\n", "y_support", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_support", ")", ")", "\n", "y_support", "=", "Variable", "(", "y_support", ".", "cuda", "(", ")", ")", "\n", "\n", "if", "self", ".", "loss_type", "==", "'softmax'", ":", "\n", "            ", "linear_clf", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "n_way", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "'dist'", ":", "\n", "            ", "linear_clf", "=", "backbone", ".", "distLinear", "(", "self", ".", "feat_dim", ",", "self", ".", "n_way", ")", "\n", "", "linear_clf", "=", "linear_clf", ".", "cuda", "(", ")", "\n", "\n", "set_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "linear_clf", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ",", "momentum", "=", "0.9", ",", "dampening", "=", "0.9", ",", "weight_decay", "=", "0.001", ")", "\n", "\n", "loss_function", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss_function", "=", "loss_function", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "4", "\n", "support_size", "=", "self", ".", "n_way", "*", "self", ".", "n_support", "\n", "scores_eval", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "301", ")", ":", "\n", "            ", "rand_id", "=", "np", ".", "random", ".", "permutation", "(", "support_size", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "support_size", ",", "batch_size", ")", ":", "\n", "                ", "set_optimizer", ".", "zero_grad", "(", ")", "\n", "selected_id", "=", "torch", ".", "from_numpy", "(", "rand_id", "[", "i", ":", "min", "(", "i", "+", "batch_size", ",", "support_size", ")", "]", ")", ".", "cuda", "(", ")", "\n", "z_batch", "=", "z_support", "[", "selected_id", "]", "\n", "y_batch", "=", "y_support", "[", "selected_id", "]", "\n", "scores", "=", "linear_clf", "(", "z_batch", ")", "\n", "loss", "=", "loss_function", "(", "scores", ",", "y_batch", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "set_optimizer", ".", "step", "(", ")", "\n", "", "if", "epoch", "%", "100", "==", "0", "and", "epoch", "!=", "0", ":", "\n", "                ", "scores_eval", ".", "append", "(", "linear_clf", "(", "z_query", ")", ")", "\n", "", "", "return", "scores_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.nupurkmr9_S2M2_fewshot.methods.baselinefinetune.BaselineFinetune.set_forward_loss": [[57, 59], ["ValueError"], "methods", ["None"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Baseline predict on pretrained feature and do not support finetune backbone'", ")", "\n", "\n"]]}