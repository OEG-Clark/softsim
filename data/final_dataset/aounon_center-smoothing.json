{"home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.GANpretrained.__init__": [[14, 18], ["torch.Module.__init__", "pytorch_pretrained_biggan.BigGAN.from_pretrained().to", "torch.squeeze().to", "torch.squeeze().to", "torch.squeeze().to", "torch.squeeze().to", "torch.squeeze().to", "torch.squeeze().to", "torch.squeeze().to", "torch.squeeze().to", "torch.squeeze().to", "pytorch_pretrained_biggan.BigGAN.from_pretrained", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "pytorch_pretrained_biggan.one_hot_from_names"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.__init__"], ["    ", "def", "__init__", "(", "self", ",", "class_name", ":", "str", ")", ":", "\n", "        ", "super", "(", "GANpretrained", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "BigGAN", ".", "from_pretrained", "(", "'biggan-deep-128'", ")", ".", "to", "(", "'cuda'", ")", "\n", "self", ".", "class_vector", "=", "torch", ".", "squeeze", "(", "torch", ".", "from_numpy", "(", "one_hot_from_names", "(", "[", "class_name", "]", ")", ")", ",", "dim", "=", "0", ")", ".", "to", "(", "'cuda'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.GANpretrained.forward": [[19, 23], ["tools.repeat_along_dim", "models.GANpretrained.model"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "num_vec", "=", "x", ".", "shape", "[", "0", "]", "\n", "cls_vec", "=", "repeat_along_dim", "(", "self", ".", "class_vector", ",", "num_vec", ")", "\n", "return", "self", ".", "model", "(", "x", ",", "cls_vec", ",", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.FaceDetector.__init__": [[25, 29], ["torch.Module.__init__", "facenet_pytorch.MTCNN"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", "FaceDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "mtcnn", "=", "MTCNN", "(", "device", "=", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.FaceDetector.boxes_tensor": [[30, 41], ["torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "range", "boxes_tensor.cuda.cuda.cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "boxes_tensor", "(", "self", ",", "boxes", ")", ":", "\n", "        ", "num_boxes", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "boxes_tensor", "=", "torch", ".", "full", "(", "(", "num_boxes", ",", "4", ")", ",", "-", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_boxes", ")", ":", "\n", "            ", "boxes_list", "=", "boxes", "[", "i", "]", "\n", "if", "boxes_list", "is", "not", "None", ":", "\n", "                ", "boxes_tensor", "[", "i", "]", "=", "torch", ".", "tensor", "(", "boxes_list", "[", "0", "]", ")", "\n", "\n", "", "", "boxes_tensor", "=", "boxes_tensor", ".", "cuda", "(", "device", "=", "self", ".", "device", ")", "\n", "return", "boxes_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.FaceDetector.forward": [[42, 45], ["models.FaceDetector.mtcnn.detect", "models.FaceDetector.boxes_tensor"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.FaceDetector.boxes_tensor"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "boxes", ",", "_", "=", "self", ".", "mtcnn", ".", "detect", "(", "x", ")", "\n", "return", "self", ".", "boxes_tensor", "(", "boxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.Reconstructor.__init__": [[48, 61], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Reconstructor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Input is expected in the shape: batch_size * 3 * 32 * 32", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "# 32 * 30 * 30", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "# 64 * 28 * 28", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "# 128 * 26 * 26", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.Reconstructor.forward": [[62, 73], ["torch.relu", "torch.relu", "torch.relu", "models.Reconstructor.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.Reconstructor.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.Reconstructor.bn3", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models.Reconstructor.conv1", "models.Reconstructor.conv2", "models.Reconstructor.conv3", "models.Reconstructor.deconv1", "models.Reconstructor.deconv2", "models.Reconstructor.deconv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "deconv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "deconv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "self", ".", "deconv3", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.AutoencoderMNIST.__init__": [[75, 94], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.__init__"], ["    ", "def", "__init__", "(", "self", ",", "code_size", ":", "int", "=", "128", ")", ":", "\n", "        ", "super", "(", "AutoencoderMNIST", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# encoder", "\n", "# Input is expected in the shape: batch_size * 1 * 28 * 28", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "# 32 * 28 * 28", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 64 * 14 * 14", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 128 * 7 * 7", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "128", "*", "7", "*", "7", ",", "code_size", ")", "\n", "\n", "# decoder", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "code_size", ",", "128", "*", "7", "*", "7", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.AutoencoderMNIST.encode": [[95, 104], ["torch.relu", "torch.relu", "torch.relu", "models.AutoencoderMNIST.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.AutoencoderMNIST.bn2", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.relu", "torch.relu", "torch.relu", "models.AutoencoderMNIST.conv1", "models.AutoencoderMNIST.conv2", "models.AutoencoderMNIST.conv3", "models.AutoencoderMNIST.fc1"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "# Low-dimensional code", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.AutoencoderMNIST.decode": [[105, 115], ["torch.relu", "torch.relu", "torch.relu", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "models.AutoencoderMNIST.bn3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.AutoencoderMNIST.bn4", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models.AutoencoderMNIST.fc2", "models.AutoencoderMNIST.deconv1", "models.AutoencoderMNIST.deconv2", "models.AutoencoderMNIST.deconv3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "(", "x_shape", "[", "0", "]", ",", "128", ",", "7", ",", "7", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "deconv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "deconv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "self", ".", "deconv3", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.AutoencoderMNIST.forward": [[116, 123], ["models.AutoencoderMNIST.encode", "models.AutoencoderMNIST.decode"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.AutoencoderCIFAR.encode", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.AutoencoderCIFAR.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Encode", "\n", "        ", "x", "=", "self", ".", "encode", "(", "x", ")", "\n", "\n", "# Decode", "\n", "x", "=", "self", ".", "decode", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.AutoencoderCIFAR.__init__": [[126, 145], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.__init__"], ["    ", "def", "__init__", "(", "self", ",", "code_size", ":", "int", "=", "256", ")", ":", "\n", "        ", "super", "(", "AutoencoderCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# encoder", "\n", "# Input is expected in the shape: batch_size * 3 * 32 * 32", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "# 32 * 32 * 32", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 64 * 16 * 16", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 128 * 8 * 8", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "128", "*", "8", "*", "8", ",", "code_size", ")", "\n", "\n", "# decoder", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "code_size", ",", "128", "*", "8", "*", "8", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.AutoencoderCIFAR.encode": [[146, 155], ["torch.relu", "torch.relu", "torch.relu", "models.AutoencoderCIFAR.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.AutoencoderCIFAR.bn2", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.relu", "torch.relu", "torch.relu", "models.AutoencoderCIFAR.conv1", "models.AutoencoderCIFAR.conv2", "models.AutoencoderCIFAR.conv3", "models.AutoencoderCIFAR.fc1"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "# Low-dimensional code", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.AutoencoderCIFAR.decode": [[156, 166], ["torch.relu", "torch.relu", "torch.relu", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "models.AutoencoderCIFAR.bn3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.AutoencoderCIFAR.bn4", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models.AutoencoderCIFAR.fc2", "models.AutoencoderCIFAR.deconv1", "models.AutoencoderCIFAR.deconv2", "models.AutoencoderCIFAR.deconv3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "(", "x_shape", "[", "0", "]", ",", "128", ",", "8", ",", "8", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "deconv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "deconv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "self", ".", "deconv3", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.AutoencoderCIFAR.forward": [[167, 174], ["models.AutoencoderCIFAR.encode", "models.AutoencoderCIFAR.decode"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.AutoencoderCIFAR.encode", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.AutoencoderCIFAR.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Encode", "\n", "        ", "x", "=", "self", ".", "encode", "(", "x", ")", "\n", "\n", "# Decode", "\n", "x", "=", "self", ".", "decode", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.Autoencoder.__init__": [[177, 196], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Autoencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# encoder", "\n", "# Input is expected in the shape: batch_size * 3 * 32 * 32", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "# 32 * 30 * 30", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ")", "# 64 * 14 * 14", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ")", "# 128 * 6 * 6", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "128", "*", "6", "*", "6", ",", "256", ")", "\n", "\n", "# decoder", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "256", ",", "128", "*", "6", "*", "6", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.Autoencoder.forward": [[197, 217], ["torch.relu", "torch.relu", "torch.relu", "models.Autoencoder.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.Autoencoder.bn2", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.size", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "models.Autoencoder.bn3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.Autoencoder.bn4", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models.Autoencoder.conv1", "models.Autoencoder.conv2", "models.Autoencoder.conv3", "models.Autoencoder.fc1", "models.Autoencoder.fc2", "models.Autoencoder.deconv1", "models.Autoencoder.deconv2", "models.Autoencoder.deconv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Encode", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "# Low-dimensional code", "\n", "\n", "# Decode", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x_shape", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "deconv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "deconv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "self", ".", "deconv3", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.ReconstructorMNIST.__init__": [[220, 234], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.__init__"], ["    ", "def", "__init__", "(", "self", ",", "A_mat", ")", ":", "\n", "        ", "super", "(", "ReconstructorMNIST", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "A_mat", "=", "A_mat", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "# 32 * 28 * 28", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 64 * 14 * 14", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 128 * 7 * 7", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.ReconstructorMNIST.forward": [[235, 250], ["torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "torch.relu", "torch.relu", "torch.relu", "models.ReconstructorMNIST.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.ReconstructorMNIST.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.ReconstructorMNIST.bn3", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models.ReconstructorMNIST.conv1", "models.ReconstructorMNIST.conv2", "models.ReconstructorMNIST.conv3", "models.ReconstructorMNIST.deconv1", "models.ReconstructorMNIST.deconv2", "models.ReconstructorMNIST.deconv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "A_t", "=", "torch", ".", "transpose", "(", "self", ".", "A_mat", ",", "0", ",", "1", ")", "\n", "x", "=", "torch", ".", "matmul", "(", "x", ",", "A_t", ")", "\n", "x", "=", "x", ".", "view", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "28", ",", "28", ")", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "deconv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "deconv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "self", ".", "deconv3", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.ReconstructorCIFAR.__init__": [[253, 267], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.__init__"], ["    ", "def", "__init__", "(", "self", ",", "A_mat", ")", ":", "\n", "        ", "super", "(", "ReconstructorCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "A_mat", "=", "A_mat", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "# 32 * 32 * 32", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 64 * 16 * 16", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 128 * 8 * 8", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.ReconstructorCIFAR.forward": [[268, 283], ["torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "torch.relu", "torch.relu", "torch.relu", "models.ReconstructorCIFAR.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.ReconstructorCIFAR.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.ReconstructorCIFAR.bn3", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models.ReconstructorCIFAR.conv1", "models.ReconstructorCIFAR.conv2", "models.ReconstructorCIFAR.conv3", "models.ReconstructorCIFAR.deconv1", "models.ReconstructorCIFAR.deconv2", "models.ReconstructorCIFAR.deconv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "A_t", "=", "torch", ".", "transpose", "(", "self", ".", "A_mat", ",", "0", ",", "1", ")", "\n", "x", "=", "torch", ".", "matmul", "(", "x", ",", "A_t", ")", "\n", "x", "=", "x", ".", "view", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "deconv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "deconv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "self", ".", "deconv3", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.FaceRecCelebA.__init__": [[286, 296], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FaceRecCelebA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Input is expected in the shape: batch_size * 3 * 64 * 64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 32 * 32 * 32", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 128 * 16 * 16", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 128 * 8 * 8", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "128", "*", "8", "*", "8", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.FaceRecCelebA.forward": [[298, 307], ["torch.relu", "torch.relu", "torch.relu", "models.FaceRecCelebA.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.FaceRecCelebA.bn2", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "models.FaceRecCelebA.fc1", "models.FaceRecCelebA.conv1", "models.FaceRecCelebA.conv2", "models.FaceRecCelebA.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.FaceRecCelebAold.__init__": [[310, 321], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FaceRecCelebAold", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Input is expected in the shape: batch_size * 3 * 218 * 178", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "# 32 * 108 * 88", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 64 * 54 * 44", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 128 * 27 * 22", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "5", ",", "4", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", "# 128 * 12 * 11", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "128", "*", "12", "*", "11", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.models.FaceRecCelebAold.forward": [[323, 333], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.FaceRecCelebAold.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.FaceRecCelebAold.bn2", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "models.FaceRecCelebAold.fc1", "models.FaceRecCelebAold.conv1", "models.FaceRecCelebAold.conv2", "models.FaceRecCelebAold.conv3", "models.FaceRecCelebAold.conv4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv4", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim": [[8, 10], ["torch.repeat_interleave", "torch.unsqueeze"], "function", ["None"], ["def", "repeat_along_dim", "(", "input", ":", "torch", ".", "tensor", ",", "num_repeat", ":", "int", ",", "dim", ":", "int", "=", "0", ")", ":", "\n", "    ", "return", "torch", ".", "repeat_interleave", "(", "torch", ".", "unsqueeze", "(", "input", ",", "dim", ")", ",", "num_repeat", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.project": [[12, 21], ["torch.flatten", "torch.matmul", "torch.transpose", "torch.matmul", "inputs.view.view", "torch.randn_like"], "function", ["None"], ["", "def", "project", "(", "inputs", ",", "A", ",", "sigma", "=", "0.0", ")", ":", "\n", "    ", "inp_shape", "=", "inputs", ".", "shape", "\n", "inputs", "=", "torch", ".", "flatten", "(", "inputs", ",", "start_dim", "=", "1", ")", "\n", "y", "=", "torch", ".", "matmul", "(", "inputs", ",", "A", ")", "\n", "y_noisy", "=", "y", "+", "(", "torch", ".", "randn_like", "(", "y", ")", "*", "sigma", ")", "\n", "A_t", "=", "torch", ".", "transpose", "(", "A", ",", "0", ",", "1", ")", "\n", "inputs", "=", "torch", ".", "matmul", "(", "y_noisy", ",", "A_t", ")", "\n", "inputs", "=", "inputs", ".", "view", "(", "inp_shape", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.create_subdataset": [[22, 32], ["range", "torch.utils.data.Subset", "len", "class_indices.append"], "function", ["None"], ["", "def", "create_subdataset", "(", "dataset", ",", "class_name", ":", "str", ")", ":", "\n", "    ", "class_indices", "=", "[", "]", "\n", "class_idx", "=", "dataset", ".", "class_to_idx", "[", "class_name", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "current_class", "=", "dataset", "[", "i", "]", "[", "1", "]", "\n", "if", "current_class", "==", "class_idx", ":", "\n", "            ", "class_indices", ".", "append", "(", "i", ")", "\n", "\n", "", "", "return", "Subset", "(", "dataset", ",", "class_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.imgsave": [[34, 39], ["img.numpy", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.close", "numpy.transpose"], "function", ["None"], ["", "def", "imgsave", "(", "img", ",", "filename", ")", ":", "\n", "    ", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "plt", ".", "savefig", "(", "filename", ")", "# plt.draw()", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.plot_landmarks": [[41, 54], ["img.numpy", "landmarks.numpy", "matplotlib.imshow", "range", "matplotlib.savefig", "matplotlib.close", "numpy.transpose", "matplotlib.scatter"], "function", ["None"], ["", "def", "plot_landmarks", "(", "img", ",", "landmarks", ",", "filename", ")", ":", "\n", "    ", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "nplandmarks", "=", "landmarks", ".", "numpy", "(", ")", "\n", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "x", ",", "y", "=", "nplandmarks", "[", "2", "*", "i", "]", ",", "nplandmarks", "[", "(", "2", "*", "i", ")", "+", "1", "]", "\n", "\n", "plt", ".", "scatter", "(", "x", ",", "y", ",", "c", "=", "'g'", ")", "\n", "\n", "", "plt", ".", "savefig", "(", "filename", ")", "# plt.draw()", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.plot_bbox": [[56, 67], ["img.numpy", "bbox.numpy", "print", "matplotlib.imshow", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.savefig", "matplotlib.close", "numpy.transpose"], "function", ["None"], ["", "def", "plot_bbox", "(", "img", ",", "bbox", ",", "filename", ")", ":", "\n", "    ", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "npbbox", "=", "bbox", ".", "numpy", "(", ")", "\n", "print", "(", "npbbox", ")", "\n", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "plt", ".", "scatter", "(", "npbbox", "[", "0", "]", ",", "npbbox", "[", "1", "]", ",", "c", "=", "'g'", ")", "\n", "plt", ".", "scatter", "(", "npbbox", "[", "0", "]", "+", "npbbox", "[", "2", "]", ",", "npbbox", "[", "1", "]", "+", "npbbox", "[", "3", "]", ",", "c", "=", "'g'", ")", "\n", "\n", "plt", ".", "savefig", "(", "filename", ")", "# plt.draw()", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.facenet-celeba.main": [[21, 61], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "open", "open.write", "open.flush", "torch.device", "models.FaceDetector", "center_smoothing.Smooth", "range", "open.close", "os.path.join", "PIL.Image.open", "numpy.asarray", "torch.tensor", "input.cuda.cuda", "time.time", "center_smoothing.Smooth.certify", "time.time", "print", "open.write", "open.flush", "torch.cuda.is_available", "random.randrange", "str"], "function", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.certify"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"celeba_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"logfile\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--eps_in\"", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--sigma\"", ",", "type", "=", "float", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logger", "=", "open", "(", "args", ".", "logfile", ",", "\"w\"", ")", "\n", "logger", ".", "write", "(", "'eps_in = %.3f\\tsigma = %.3f\\niter\\tsmoothing_error\\teps_out\\ttime\\n'", "%", "(", "\n", "args", ".", "eps_in", ",", "args", ".", "sigma", ")", ")", "\n", "logger", ".", "flush", "(", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "model", "=", "FaceDetector", "(", "device", ")", "\n", "model_smooth", "=", "Smooth", "(", "model", ",", "jaccard_dist", ",", "args", ".", "sigma", "*", "255", ",", "n_pred", "=", "5000", ",", "n_cert", "=", "10000", ")", "\n", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "        ", "img_id", "=", "randrange", "(", "202600", ")", "+", "10", "**", "6", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "args", ".", "celeba_path", ",", "str", "(", "img_id", ")", "[", "1", ":", "]", "+", "\".jpg\"", ")", "\n", "\n", "img", "=", "Image", ".", "open", "(", "filepath", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "input", "=", "torch", ".", "tensor", "(", "img", ",", "dtype", "=", "float", ")", "\n", "input", "=", "input", ".", "cuda", "(", "device", "=", "device", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "eps_out", ",", "smoothing_error", "=", "model_smooth", ".", "certify", "(", "input", ",", "args", ".", "eps_in", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "time_diff", "=", "end", "-", "start", "\n", "\n", "print", "(", "'iter = %d\\tsmoothing_error = %.3f\\teps_out = %.3f\\ttime = %.3f'", "%", "(", "\n", "i", ",", "smoothing_error", ",", "eps_out", ",", "time_diff", ")", ")", "\n", "logger", ".", "write", "(", "'%d\\t%.3f\\t%.3f\\t%.3f\\n'", "%", "(", "i", ",", "smoothing_error", ",", "eps_out", ",", "time_diff", ")", ")", "\n", "logger", ".", "flush", "(", ")", "\n", "\n", "", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.test_reconstructor.main": [[19, 88], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.load", "torch.utils.data.DataLoader", "iter", "open", "open.write", "open.flush", "ReconstructorMNIST().cuda.load_state_dict", "center_smoothing.Smooth", "range", "open.close", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "models.ReconstructorCIFAR().cuda", "torch.load", "iter.next", "images.cuda.cuda", "torch.flatten", "torch.matmul", "time.time", "center_smoothing.Smooth.certify", "time.time", "print", "open.write", "open.flush", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "models.ReconstructorMNIST().cuda", "sys.exit", "torchvision.ToTensor", "models.ReconstructorCIFAR", "torchvision.ToTensor", "models.ReconstructorMNIST", "sys.exit"], "function", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.certify"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"model_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"distance_function\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"logfile\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"dataset\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"A_mat_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--eps_in\"", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--sigma\"", ",", "type", "=", "float", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "A", "=", "torch", ".", "load", "(", "args", ".", "A_mat_path", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "model", "=", "ReconstructorCIFAR", "(", "A", ")", ".", "cuda", "(", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "testset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "model", "=", "ReconstructorMNIST", "(", "A", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "sys", ".", "exit", "(", "'Unrecognized dataset name'", ")", "\n", "\n", "", "if", "args", ".", "distance_function", "==", "'tv1'", ":", "\n", "        ", "dist_fn", "=", "tv1_diff", "\n", "", "elif", "args", ".", "distance_function", "==", "'tv2'", ":", "\n", "        ", "dist_fn", "=", "tv2_diff", "\n", "", "elif", "args", ".", "distance_function", "==", "'angular_distance'", ":", "\n", "        ", "dist_fn", "=", "angular_distance", "\n", "", "elif", "args", ".", "distance_function", "==", "'L2'", ":", "\n", "        ", "dist_fn", "=", "l2_dist", "\n", "", "else", ":", "\n", "        ", "sys", ".", "exit", "(", "'Unrecognized distance function'", ")", "\n", "\n", "", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "4", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "dataiter", "=", "iter", "(", "testloader", ")", "\n", "logger", "=", "open", "(", "args", ".", "logfile", ",", "\"w\"", ")", "\n", "logger", ".", "write", "(", "'eps_in = %.3f\\tsigma = %.3f\\niter\\teps_out\\tsmoothing_error\\ttime\\n'", "%", "(", "args", ".", "eps_in", ",", "args", ".", "sigma", ")", ")", "\n", "logger", ".", "flush", "(", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "model_path", ")", ")", "\n", "model_smooth", "=", "Smooth", "(", "model", ",", "dist_fn", ",", "args", ".", "sigma", ")", "\n", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "        ", "images", ",", "_", "=", "dataiter", ".", "next", "(", ")", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "input", "=", "images", "[", "0", "]", "\n", "\n", "input_flat", "=", "torch", ".", "flatten", "(", "input", ")", "\n", "\n", "measurements", "=", "torch", ".", "matmul", "(", "input_flat", ",", "A", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "eps_out", ",", "smoothing_error", "=", "model_smooth", ".", "certify", "(", "measurements", ",", "args", ".", "eps_in", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "time_diff", "=", "end", "-", "start", "\n", "\n", "print", "(", "'iter = %d\\teps_out = %.3f\\tsmoothing_error = %.3f\\ttime = %.3f'", "%", "(", "i", ",", "eps_out", ",", "smoothing_error", ",", "time_diff", ")", ")", "\n", "logger", ".", "write", "(", "'%d\\t%.3f\\t%.3f\\t%.3f\\n'", "%", "(", "i", ",", "eps_out", ",", "smoothing_error", ",", "time_diff", ")", ")", "\n", "logger", ".", "flush", "(", ")", "\n", "\n", "", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.train_dim_red.main": [[17, 89], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.MSELoss().cuda", "torch.Adam", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "open", "open.write", "open.flush", "range", "print", "torch.save", "torch.save", "torch.save", "open.close", "torchvision.datasets.CIFAR10", "models.AutoencoderCIFAR().cuda", "AutoencoderMNIST().cuda.parameters", "print", "print", "enumerate", "print", "open.write", "open.flush", "AutoencoderMNIST().cuda.state_dict", "torchvision.datasets.MNIST", "models.AutoencoderMNIST().cuda", "sys.exit", "torch.MSELoss", "inputs.cuda.cuda", "optim.Adam.zero_grad", "AutoencoderMNIST().cuda.", "nn.MSELoss().cuda.", "criterion.backward", "optim.Adam.step", "torch.save", "torch.save", "torch.save", "torchvision.transforms.ToTensor", "models.AutoencoderCIFAR", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "AutoencoderMNIST().cuda.state_dict", "torchvision.transforms.ToTensor", "models.AutoencoderMNIST", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.randn_like", "torch.randn_like", "torch.randn_like", "criterion.item", "criterion.item"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"model_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"dataset\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--latent_dim\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\"--sigma\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "model", "=", "AutoencoderCIFAR", "(", "args", ".", "latent_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "trainset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "model", "=", "AutoencoderMNIST", "(", "args", ".", "latent_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "sys", ".", "exit", "(", "'Unrecognized dataset name'", ")", "\n", "\n", "", "batch_size", "=", "1000", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", ")", "# nn.BCELoss().cuda()", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "'GPU: %s'", "%", "torch", ".", "cuda", ".", "get_device_name", "(", "torch", ".", "cuda", ".", "current_device", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'GPU not available. Current device: %s'", "%", "torch", ".", "cuda", ".", "get_device_name", "(", "torch", ".", "cuda", ".", "current_device", "(", ")", ")", ")", "\n", "\n", "", "log", "=", "open", "(", "args", ".", "model_path", "+", "'.csv'", ",", "\"w\"", ")", "\n", "log", ".", "write", "(", "'Epoch\\tLoss\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "# loop over the dataset multiple times", "\n", "\n", "        ", "for", "i", ",", "data", "in", "enumerate", "(", "trainloader", ",", "0", ")", ":", "\n", "\n", "# get the inputs; data is a list of [inputs, labels]", "\n", "            ", "inputs", ",", "_", "=", "data", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "\n", "# Adding Gaussian noise", "\n", "inputs_noisy", "=", "inputs", "+", "(", "torch", ".", "randn_like", "(", "inputs", ")", "*", "args", ".", "sigma", ")", "\n", "\n", "# zero the parameter gradients", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# forward + backward + optimize", "\n", "outputs", "=", "model", "(", "inputs_noisy", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "inputs", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Print and log loss for this epoch", "\n", "", "print", "(", "'Epoch: %d, loss: %.3f'", "%", "(", "epoch", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "log", ".", "write", "(", "'%d\\t%.3f\\n'", "%", "(", "epoch", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "# Save model parameters after every ten epochs", "\n", "if", "epoch", "%", "10", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "model_path", ")", "\n", "\n", "", "", "print", "(", "'Finished Training'", ")", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "model_path", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.gen_gaussian_mat.main": [[5, 19], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.save", "torch.randn", "math.sqrt"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"save_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"inp_dim\"", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"num_measurements\"", ",", "type", "=", "int", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "inp_dim", "=", "args", ".", "inp_dim", "\n", "num_measurements", "=", "args", ".", "num_measurements", "\n", "\n", "A", "=", "torch", ".", "randn", "(", "(", "inp_dim", ",", "num_measurements", ")", ",", "device", "=", "'cuda'", ")", "*", "(", "1", "/", "sqrt", "(", "num_measurements", ")", ")", "\n", "torch", ".", "save", "(", "A", ",", "args", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.__init__": [[12, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_function", ":", "nn", ".", "Module", ",", "dist_fn", ",", "sigma", ":", "float", ",", "n_pred", ":", "int", "=", "10", "**", "4", ",", "n_cert", ":", "int", "=", "10", "**", "6", ",", "\n", "n_cntr", ":", "int", "=", "30", ",", "alpha_1", ":", "float", "=", "0.005", ",", "alpha_2", ":", "float", "=", "0.005", ",", "delta", "=", "0.05", ",", "radius_coeff", "=", "3", ",", "\n", "output_is_hd", ":", "bool", "=", "False", ")", ":", "\n", "        ", "self", ".", "base_function", "=", "base_function", "\n", "self", ".", "dist_fn", "=", "dist_fn", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "n_pred", "=", "n_pred", "# number of samples used for prediction", "\n", "self", ".", "n_cert", "=", "n_cert", "# number of samples used for certification", "\n", "self", ".", "n_cntr", "=", "n_cntr", "# number of candidate centers", "\n", "self", ".", "alpha_1", "=", "alpha_1", "\n", "self", ".", "alpha_2", "=", "alpha_2", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "radius_coeff", "=", "radius_coeff", "# for the relaxed triangle inequality", "\n", "self", ".", "output_is_hd", "=", "output_is_hd", "# whether to use procedure for high-dimensional outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.certify": [[27, 75], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "center_smoothing.Smooth.dist_fn", "numpy.zeros", "tools.repeat_along_dim", "tools.repeat_along_dim", "range", "center_smoothing.Smooth.compute_center_hd", "center_smoothing.Smooth.compute_center", "center_smoothing.Smooth.base_function", "tools.repeat_along_dim", "tools.repeat_along_dim", "scipy.stats.norm.cdf", "math.sqrt", "print", "math.ceil", "min", "center_smoothing.Smooth.base_function", "center_smoothing.Smooth.dist_fn", "numpy.quantile", "tools.repeat_along_dim", "tools.repeat_along_dim", "tools.repeat_along_dim", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "scipy.stats.norm.ppf", "math.log"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.compute_center_hd", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.compute_center", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim"], ["", "def", "certify", "(", "self", ",", "input", ":", "torch", ".", "tensor", ",", "eps_in", ":", "float", ",", "batch_size", ":", "int", "=", "1000", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Computing center", "\n", "            ", "if", "self", ".", "output_is_hd", ":", "\n", "                ", "center", ",", "is_good", "=", "self", ".", "compute_center_hd", "(", "input", ",", "batch_size", "=", "batch_size", ")", "\n", "", "else", ":", "\n", "                ", "center", ",", "is_good", "=", "self", ".", "compute_center", "(", "input", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "", "if", "not", "is_good", ":", "\n", "                ", "return", "-", "1.0", ",", "-", "1.0", "\n", "\n", "# Calculating smoothing error", "\n", "", "model_output", "=", "torch", ".", "squeeze", "(", "self", ".", "base_function", "(", "repeat_along_dim", "(", "input", ",", "1", ")", ")", ",", "0", ")", "\n", "smoothing_error", "=", "self", ".", "dist_fn", "(", "repeat_along_dim", "(", "center", ",", "1", ")", ",", "repeat_along_dim", "(", "model_output", ",", "1", ")", ")", "\n", "\n", "# Computing certificate", "\n", "min_prob", "=", "0.5", "+", "self", ".", "delta", "\n", "quantile", "=", "norm", ".", "cdf", "(", "norm", ".", "ppf", "(", "min_prob", ")", "+", "(", "eps_in", "/", "self", ".", "sigma", ")", ")", "+", "sqrt", "(", "log", "(", "1", "/", "self", ".", "alpha_2", ")", "/", "(", "2", "*", "self", ".", "n_cert", ")", ")", "\n", "\n", "if", "quantile", ">", "1.0", "or", "quantile", "<", "0.0", ":", "\n", "                ", "print", "(", "'Invalid quantile value: %.3f'", "%", "quantile", ")", "\n", "return", "-", "1.0", ",", "smoothing_error", "\n", "\n", "", "dist", "=", "np", ".", "zeros", "(", "self", ".", "n_cert", ")", "\n", "num", "=", "self", ".", "n_cert", "\n", "\n", "batch_inp", "=", "repeat_along_dim", "(", "input", ",", "batch_size", ")", "\n", "batch_cen", "=", "repeat_along_dim", "(", "center", ",", "batch_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "ceil", "(", "num", "/", "batch_size", ")", ")", ":", "\n", "                ", "this_batch_size", "=", "min", "(", "batch_size", ",", "num", ")", "\n", "num", "-=", "this_batch_size", "\n", "\n", "if", "this_batch_size", "!=", "batch_size", ":", "\n", "                    ", "batch_inp", "=", "repeat_along_dim", "(", "input", ",", "this_batch_size", ")", "\n", "batch_cen", "=", "repeat_along_dim", "(", "center", ",", "this_batch_size", ")", "\n", "\n", "", "noise", "=", "torch", ".", "randn_like", "(", "batch_inp", ")", "*", "self", ".", "sigma", "\n", "samples", "=", "self", ".", "base_function", "(", "batch_inp", "+", "noise", ")", "\n", "\n", "dist_batch", "=", "self", ".", "dist_fn", "(", "samples", ",", "batch_cen", ")", "\n", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "this_batch_size", "\n", "dist", "[", "start", ":", "end", "]", "=", "dist_batch", "\n", "\n", "", "eps_out", "=", "self", ".", "radius_coeff", "*", "np", ".", "quantile", "(", "dist", ",", "quantile", ")", "# 3 * np.quantile(dist, quantile)", "\n", "\n", "return", "eps_out", ",", "smoothing_error", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.compute_center": [[77, 113], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "math.sqrt", "tools.repeat_along_dim", "range", "center_smoothing.Smooth.meb", "center_smoothing.Smooth.pts_in_nbd", "print", "math.ceil", "min", "max", "max", "print", "math.log", "tools.repeat_along_dim", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "center_smoothing.Smooth.base_function", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "center_smoothing.Smooth.base_function"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.meb", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.pts_in_nbd", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim"], ["", "", "def", "compute_center", "(", "self", ",", "input", ":", "torch", ".", "tensor", ",", "batch_size", ":", "int", "=", "1000", ")", ":", "\n", "# Smoothing procedure", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "delta_1", "=", "sqrt", "(", "log", "(", "2", "/", "self", ".", "alpha_1", ")", "/", "(", "2", "*", "self", ".", "n_pred", ")", ")", "\n", "is_good", "=", "False", "\n", "num", "=", "self", ".", "n_pred", "\n", "\n", "inp_batch", "=", "repeat_along_dim", "(", "input", ",", "batch_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "ceil", "(", "num", "/", "batch_size", ")", ")", ":", "\n", "                ", "this_batch_size", "=", "min", "(", "batch_size", ",", "num", ")", "\n", "num", "-=", "this_batch_size", "\n", "\n", "if", "this_batch_size", "!=", "batch_size", ":", "\n", "                    ", "inp_batch", "=", "repeat_along_dim", "(", "input", ",", "this_batch_size", ")", "\n", "\n", "", "noise", "=", "torch", ".", "randn_like", "(", "inp_batch", ")", "*", "self", ".", "sigma", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "samples", "=", "self", ".", "base_function", "(", "inp_batch", "+", "noise", ")", "\n", "", "else", ":", "\n", "                    ", "samples", "=", "torch", ".", "cat", "(", "(", "samples", ",", "self", ".", "base_function", "(", "inp_batch", "+", "noise", ")", ")", ",", "0", ")", "\n", "\n", "", "", "center", ",", "radius", "=", "self", ".", "meb", "(", "samples", ")", "\n", "num_pts", "=", "self", ".", "pts_in_nbd", "(", "input", ",", "center", ",", "radius", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "frac", "=", "num_pts", "/", "self", ".", "n_pred", "\n", "p_delta_1", "=", "frac", "-", "delta_1", "\n", "delta_2", "=", "(", "1", "/", "2", ")", "-", "p_delta_1", "\n", "\n", "print", "(", "max", "(", "delta_1", ",", "delta_2", ")", ")", "\n", "if", "max", "(", "delta_1", ",", "delta_2", ")", "<=", "self", ".", "delta", ":", "\n", "                ", "is_good", "=", "True", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Bad center. Abstaining ...'", ")", "\n", "\n", "", "", "return", "center", ",", "is_good", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.compute_center_hd": [[114, 163], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tools.repeat_along_dim", "center_smoothing.Smooth.base_function", "numpy.zeros", "math.sqrt", "tools.repeat_along_dim", "range", "numpy.median", "numpy.argmin", "center_smoothing.Smooth.pts_in_nbd", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "math.ceil", "min", "center_smoothing.Smooth.base_function", "range", "max", "print", "math.log", "tools.repeat_along_dim", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "tools.repeat_along_dim", "center_smoothing.Smooth.dist_fn"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.pts_in_nbd", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim"], ["", "def", "compute_center_hd", "(", "self", ",", "input", ":", "torch", ".", "tensor", ",", "batch_size", ":", "int", "=", "1000", ")", ":", "\n", "# Smoothing procedure for high-dimensional outputs", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "inp_batch", "=", "repeat_along_dim", "(", "input", ",", "self", ".", "n_cntr", ")", "\n", "noise", "=", "torch", ".", "randn_like", "(", "inp_batch", ")", "*", "self", ".", "sigma", "\n", "candidate_centers", "=", "self", ".", "base_function", "(", "inp_batch", "+", "noise", ")", "\n", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_cntr", ",", "self", ".", "n_pred", ")", ")", "\n", "\n", "delta_1", "=", "sqrt", "(", "log", "(", "2", "/", "self", ".", "alpha_1", ")", "/", "(", "2", "*", "self", ".", "n_pred", ")", ")", "\n", "is_good", "=", "False", "\n", "num", "=", "self", ".", "n_pred", "\n", "\n", "inp_batch", "=", "repeat_along_dim", "(", "input", ",", "batch_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "ceil", "(", "num", "/", "batch_size", ")", ")", ":", "\n", "                ", "this_batch_size", "=", "min", "(", "batch_size", ",", "num", ")", "\n", "num", "-=", "this_batch_size", "\n", "if", "this_batch_size", "!=", "batch_size", ":", "\n", "                    ", "inp_batch", "=", "repeat_along_dim", "(", "input", ",", "this_batch_size", ")", "\n", "\n", "", "noise", "=", "torch", ".", "randn_like", "(", "inp_batch", ")", "*", "self", ".", "sigma", "\n", "samples", "=", "self", ".", "base_function", "(", "inp_batch", "+", "noise", ")", "\n", "\n", "for", "cntr_idx", "in", "range", "(", "self", ".", "n_cntr", ")", ":", "\n", "                    ", "batch_cen", "=", "repeat_along_dim", "(", "candidate_centers", "[", "cntr_idx", "]", ",", "this_batch_size", ")", "\n", "dist_batch", "=", "self", ".", "dist_fn", "(", "samples", ",", "batch_cen", ")", "\n", "\n", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "this_batch_size", "\n", "dist", "[", "cntr_idx", ",", "start", ":", "end", "]", "=", "dist_batch", "\n", "\n", "", "", "median_dist", "=", "np", ".", "median", "(", "dist", ",", "axis", "=", "1", ")", "\n", "min_idx", "=", "np", ".", "argmin", "(", "median_dist", ")", "\n", "center", "=", "candidate_centers", "[", "min_idx", "]", "\n", "radius", "=", "median_dist", "[", "min_idx", "]", "\n", "\n", "num_pts", "=", "self", ".", "pts_in_nbd", "(", "input", ",", "center", ",", "radius", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "frac", "=", "num_pts", "/", "self", ".", "n_pred", "\n", "p_delta_1", "=", "frac", "-", "delta_1", "\n", "delta_2", "=", "(", "1", "/", "2", ")", "-", "p_delta_1", "\n", "\n", "if", "max", "(", "delta_1", ",", "delta_2", ")", "<=", "self", ".", "delta", ":", "\n", "                ", "is_good", "=", "True", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Bad center. Abstaining ...'", ")", "\n", "\n", "", "", "return", "center", ",", "is_good", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.pts_in_nbd": [[165, 187], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tools.repeat_along_dim", "tools.repeat_along_dim", "range", "math.ceil", "min", "center_smoothing.Smooth.base_function", "center_smoothing.Smooth.dist_fn", "numpy.sum", "tools.repeat_along_dim", "tools.repeat_along_dim", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim"], ["", "def", "pts_in_nbd", "(", "self", ",", "input", ":", "torch", ".", "tensor", ",", "center", ":", "torch", ".", "tensor", ",", "radius", ",", "batch_size", ":", "int", "=", "1000", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "num", "=", "self", ".", "n_pred", "\n", "num_pts", "=", "0", "\n", "\n", "batch_inp", "=", "repeat_along_dim", "(", "input", ",", "batch_size", ")", "\n", "batch_cen", "=", "repeat_along_dim", "(", "center", ",", "batch_size", ")", "\n", "\n", "for", "_", "in", "range", "(", "ceil", "(", "num", "/", "batch_size", ")", ")", ":", "\n", "                ", "this_batch_size", "=", "min", "(", "batch_size", ",", "num", ")", "\n", "num", "-=", "this_batch_size", "\n", "\n", "if", "this_batch_size", "!=", "batch_size", ":", "\n", "                    ", "batch_inp", "=", "repeat_along_dim", "(", "input", ",", "this_batch_size", ")", "\n", "batch_cen", "=", "repeat_along_dim", "(", "center", ",", "this_batch_size", ")", "\n", "\n", "", "noise", "=", "torch", ".", "randn_like", "(", "batch_inp", ")", "*", "self", ".", "sigma", "\n", "samples", "=", "self", ".", "base_function", "(", "batch_inp", "+", "noise", ")", "\n", "\n", "dist", "=", "self", ".", "dist_fn", "(", "samples", ",", "batch_cen", ")", "\n", "num_pts", "+=", "np", ".", "sum", "(", "np", ".", "where", "(", "dist", "<=", "radius", ",", "1", ",", "0", ")", ")", "\n", "", "", "return", "num_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.meb": [[188, 202], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "tools.repeat_along_dim", "center_smoothing.Smooth.dist_fn", "numpy.median"], "methods", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.tools.repeat_along_dim"], ["", "def", "meb", "(", "self", ",", "samples", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "radius", "=", "np", ".", "inf", "\n", "num_samples", "=", "samples", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "                ", "curr_sample", "=", "samples", "[", "i", "]", "\n", "sample_batch", "=", "repeat_along_dim", "(", "curr_sample", ",", "num_samples", ")", "\n", "dist", "=", "self", ".", "dist_fn", "(", "samples", ",", "sample_batch", ")", "\n", "median_dist", "=", "np", ".", "median", "(", "dist", ")", "\n", "if", "median_dist", "<", "radius", ":", "\n", "                    ", "radius", "=", "median_dist", "\n", "center", "=", "curr_sample", "\n", "\n", "", "", "", "return", "center", ",", "radius", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.test_dim_red.main": [[19, 84], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.utils.data.DataLoader", "iter", "open", "open.write", "open.flush", "AutoencoderMNIST().cuda.load_state_dict", "center_smoothing.Smooth", "range", "open.close", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "models.AutoencoderCIFAR().cuda", "torch.load", "iter.next", "images.cuda.cuda", "time.time", "center_smoothing.Smooth.certify", "time.time", "print", "open.write", "open.flush", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "models.AutoencoderMNIST().cuda", "sys.exit", "torchvision.ToTensor", "models.AutoencoderCIFAR", "torchvision.ToTensor", "models.AutoencoderMNIST", "sys.exit"], "function", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.certify"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"model_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"distance_function\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"logfile\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"dataset\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--eps_in\"", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--sigma\"", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--latent_dim\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_pred\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_cert\"", ",", "type", "=", "int", ",", "default", "=", "10", "**", "6", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "model", "=", "AutoencoderCIFAR", "(", "args", ".", "latent_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "testset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "model", "=", "AutoencoderMNIST", "(", "args", ".", "latent_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "sys", ".", "exit", "(", "'Unrecognized dataset name'", ")", "\n", "\n", "", "if", "args", ".", "distance_function", "==", "'tv1'", ":", "\n", "        ", "dist_fn", "=", "tv1_diff", "\n", "", "elif", "args", ".", "distance_function", "==", "'tv2'", ":", "\n", "        ", "dist_fn", "=", "tv2_diff", "\n", "", "elif", "args", ".", "distance_function", "==", "'angular_distance'", ":", "\n", "        ", "dist_fn", "=", "angular_distance", "\n", "", "elif", "args", ".", "distance_function", "==", "'L2'", ":", "\n", "        ", "dist_fn", "=", "l2_dist", "\n", "", "else", ":", "\n", "        ", "sys", ".", "exit", "(", "'Unrecognized distance function'", ")", "\n", "\n", "", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "4", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "dataiter", "=", "iter", "(", "testloader", ")", "\n", "logger", "=", "open", "(", "args", ".", "logfile", ",", "\"w\"", ")", "\n", "logger", ".", "write", "(", "'eps_in = %.3f\\tsigma = %.3f\\niter\\teps_out\\tsmoothing_error\\ttime\\n'", "%", "(", "args", ".", "eps_in", ",", "args", ".", "sigma", ")", ")", "\n", "logger", ".", "flush", "(", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "model_path", ")", ")", "\n", "model_smooth", "=", "Smooth", "(", "model", ",", "dist_fn", ",", "args", ".", "sigma", ",", "n_pred", "=", "args", ".", "n_pred", ",", "n_cert", "=", "args", ".", "n_cert", ")", "\n", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "        ", "images", ",", "_", "=", "dataiter", ".", "next", "(", ")", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "input", "=", "images", "[", "0", "]", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "eps_out", ",", "smoothing_error", "=", "model_smooth", ".", "certify", "(", "input", ",", "args", ".", "eps_in", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "time_diff", "=", "end", "-", "start", "\n", "\n", "print", "(", "'iter = %d\\teps_out = %.3f\\tsmoothing_error = %.3f\\ttime = %.3f'", "%", "(", "i", ",", "eps_out", ",", "smoothing_error", ",", "time_diff", ")", ")", "\n", "logger", ".", "write", "(", "'%d\\t%.3f\\t%.3f\\t%.3f\\n'", "%", "(", "i", ",", "eps_out", ",", "smoothing_error", ",", "time_diff", ")", ")", "\n", "logger", ".", "flush", "(", ")", "\n", "\n", "", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.gan_lpips.main": [[17, 54], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "open", "open.write", "open.flush", "models.GANpretrained", "center_smoothing.Smooth", "range", "open.close", "pytorch_pretrained_biggan.truncated_noise_sample", "torch.from_numpy().to", "torch.squeeze", "time.time", "center_smoothing.Smooth.certify", "time.time", "print", "open.write", "open.flush", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.center_smoothing.Smooth.certify"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"logfile\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--eps_in\"", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--sigma\"", ",", "type", "=", "float", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logger", "=", "open", "(", "args", ".", "logfile", ",", "\"w\"", ")", "\n", "logger", ".", "write", "(", "'eps_in = %.3f\\tsigma = %.3f\\niter\\tsmoothing_error\\teps_out\\ttime\\n'", "%", "(", "\n", "args", ".", "eps_in", ",", "args", ".", "sigma", ")", ")", "\n", "logger", ".", "flush", "(", ")", "\n", "\n", "# Load pre-trained model tokenizer (vocabulary)", "\n", "model", "=", "GANpretrained", "(", "'Butterfly'", ")", "\n", "model_smooth", "=", "Smooth", "(", "model", ",", "perceptual_dist", ",", "args", ".", "sigma", ",", "n_pred", "=", "2000", ",", "n_cert", "=", "10000", ",", "delta", "=", "0.08", ",", "\n", "radius_coeff", "=", "10", ",", "output_is_hd", "=", "True", ")", "\n", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "# Prepare an input", "\n", "        ", "truncation", "=", "0.5", "\n", "latent_vector", "=", "truncated_noise_sample", "(", "truncation", "=", "truncation", ",", "batch_size", "=", "1", ")", "\n", "latent_vector", "=", "torch", ".", "from_numpy", "(", "latent_vector", ")", ".", "to", "(", "'cuda'", ")", "\n", "latent_vector", "=", "torch", ".", "squeeze", "(", "latent_vector", ",", "dim", "=", "0", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "eps_out", ",", "smoothing_error", "=", "model_smooth", ".", "certify", "(", "latent_vector", ",", "args", ".", "eps_in", ",", "batch_size", "=", "150", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "time_diff", "=", "end", "-", "start", "\n", "\n", "print", "(", "'iter = %d\\tsmoothing_error = %.3f\\teps_out = %.3f\\ttime = %.3f'", "%", "(", "\n", "i", ",", "smoothing_error", ",", "eps_out", ",", "time_diff", ")", ")", "\n", "logger", ".", "write", "(", "'%d\\t%.3f\\t%.3f\\t%.3f\\n'", "%", "(", "i", ",", "smoothing_error", ",", "eps_out", ",", "time_diff", ")", ")", "\n", "logger", ".", "flush", "(", ")", "\n", "\n", "", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.normalize_in_range": [[11, 26], ["torch.flatten", "torch.flatten", "torch.unsqueeze", "torch.unsqueeze", "torch.flatten", "torch.flatten", "torch.unsqueeze", "torch.unsqueeze", "torch.min", "torch.min", "torch.unsqueeze", "torch.unsqueeze", "torch.max", "torch.max", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "function", ["None"], ["def", "normalize_in_range", "(", "batch", ",", "range_max", "=", "1", ",", "range_min", "=", "-", "1", ")", ":", "\n", "    ", "batch_flat", "=", "torch", ".", "flatten", "(", "batch", ",", "start_dim", "=", "1", ")", "\n", "batch_min", "=", "torch", ".", "min", "(", "batch_flat", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "batch_min", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "batch_min", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "\n", "\n", "batch", "=", "batch", "-", "batch_min", "\n", "\n", "batch_flat", "=", "torch", ".", "flatten", "(", "batch", ",", "start_dim", "=", "1", ")", "\n", "batch_max", "=", "torch", ".", "max", "(", "batch_flat", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "batch_max", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "batch_max", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "\n", "\n", "batch", "=", "batch", "/", "batch_max", "\n", "\n", "batch", "=", "(", "batch", "*", "(", "range_max", "-", "range_min", ")", ")", "+", "range_min", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.perceptual_dist": [[28, 35], ["distance_functions.normalize_in_range", "distance_functions.normalize_in_range", "loss_fn_vgg", "torch.squeeze", "torch.squeeze", "dist.cpu().numpy.cpu().numpy", "dist.cpu().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.normalize_in_range", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.normalize_in_range"], ["", "def", "perceptual_dist", "(", "batch1", ",", "batch2", ")", ":", "\n", "    ", "batch1", "=", "normalize_in_range", "(", "batch1", ")", "\n", "batch2", "=", "normalize_in_range", "(", "batch2", ")", "\n", "dist", "=", "loss_fn_vgg", "(", "batch1", ",", "batch2", ")", "\n", "dist", "=", "torch", ".", "squeeze", "(", "dist", ")", "\n", "dist", "=", "dist", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.angular_distance": [[37, 45], ["torch.CosineSimilarity", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "nn.CosineSimilarity.", "dist.cpu().numpy.cpu().numpy", "torch.acos", "torch.acos", "dist.cpu().numpy.cpu"], "function", ["None"], ["", "def", "angular_distance", "(", "batch1", ",", "batch2", ")", ":", "\n", "    ", "cos", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-6", ")", "\n", "b1_flat", "=", "torch", ".", "flatten", "(", "batch1", ",", "start_dim", "=", "1", ")", "\n", "b2_flat", "=", "torch", ".", "flatten", "(", "batch2", ",", "start_dim", "=", "1", ")", "\n", "sim", "=", "cos", "(", "b1_flat", ",", "b2_flat", ")", "\n", "dist", "=", "torch", ".", "acos", "(", "sim", ")", "/", "math", ".", "pi", "\n", "dist", "=", "dist", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.total_variation": [[47, 55], ["torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "dist.cpu().numpy.cpu().numpy", "torch.norm", "torch.norm", "dist.cpu().numpy.cpu"], "function", ["None"], ["", "def", "total_variation", "(", "batch", ":", "torch", ".", "tensor", ",", "p", ":", "int", "=", "1", ")", ":", "\n", "# batch: torch tensor containing a batch of images idexed as batch_size * color_channel * height * width", "\n", "    ", "diff1", "=", "torch", ".", "flatten", "(", "batch", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "batch", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ",", "start_dim", "=", "2", ")", "\n", "diff2", "=", "torch", ".", "flatten", "(", "batch", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "batch", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ",", "start_dim", "=", "2", ")", "\n", "diff", "=", "torch", ".", "cat", "(", "(", "diff1", ",", "diff2", ")", ",", "dim", "=", "2", ")", "\n", "dist", "=", "torch", ".", "sum", "(", "torch", ".", "norm", "(", "diff", ",", "p", "=", "p", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "\n", "dist", "=", "dist", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.tv1_diff": [[57, 59], ["distance_functions.total_variation"], "function", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.total_variation"], ["", "def", "tv1_diff", "(", "batch1", ":", "torch", ".", "tensor", ",", "batch2", ":", "torch", ".", "tensor", ")", ":", "\n", "    ", "return", "total_variation", "(", "batch1", "-", "batch2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.tv2_diff": [[60, 62], ["distance_functions.total_variation"], "function", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.total_variation"], ["", "def", "tv2_diff", "(", "batch1", ":", "torch", ".", "tensor", ",", "batch2", ":", "torch", ".", "tensor", ")", ":", "\n", "    ", "return", "total_variation", "(", "batch1", "-", "batch2", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.rect_intersection": [[65, 71], ["torch.zeros_like", "torch.zeros_like", "torch.max", "torch.max", "torch.min", "torch.min"], "function", ["None"], ["", "def", "rect_intersection", "(", "r1", ",", "r2", ")", ":", "\n", "    ", "r3", "=", "torch", ".", "zeros_like", "(", "r1", ")", "\n", "r3", "[", ":", ",", "[", "0", ",", "1", "]", "]", "=", "torch", ".", "max", "(", "r1", "[", ":", ",", "[", "0", ",", "1", "]", "]", ",", "r2", "[", ":", ",", "[", "0", ",", "1", "]", "]", ")", "\n", "r3", "[", ":", ",", "[", "2", ",", "3", "]", "]", "=", "torch", ".", "min", "(", "r1", "[", ":", ",", "[", "2", ",", "3", "]", "]", ",", "r2", "[", ":", ",", "[", "2", ",", "3", "]", "]", ")", "\n", "r3", "[", "(", "r3", "[", ":", ",", "0", "]", ">", "r3", "[", ":", ",", "2", "]", ")", "|", "(", "r3", "[", ":", ",", "1", "]", ">", "r3", "[", ":", ",", "3", "]", ")", ",", ":", "]", "=", "-", "1.0", "\n", "return", "r3", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.rect_area": [[73, 75], ["None"], "function", ["None"], ["", "def", "rect_area", "(", "r", ")", ":", "\n", "    ", "return", "(", "r", "[", ":", ",", "2", "]", "-", "r", "[", ":", ",", "0", "]", ")", "*", "(", "r", "[", ":", ",", "3", "]", "-", "r", "[", ":", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.iou": [[77, 83], ["distance_functions.rect_intersection", "distance_functions.rect_area", "distance_functions.rect_area", "distance_functions.rect_area"], "function", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.rect_intersection", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.rect_area", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.rect_area", "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.rect_area"], ["", "def", "iou", "(", "r1", ",", "r2", ")", ":", "\n", "    ", "intersection", "=", "rect_intersection", "(", "r1", ",", "r2", ")", "\n", "area_intersection", "=", "rect_area", "(", "intersection", ")", "\n", "area_union", "=", "rect_area", "(", "r1", ")", "+", "rect_area", "(", "r2", ")", "-", "area_intersection", "\n", "\n", "return", "area_intersection", "/", "area_union", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.jaccard_dist": [[85, 89], ["dist.cpu().numpy.cpu().numpy", "distance_functions.iou", "dist.cpu().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.iou"], ["", "def", "jaccard_dist", "(", "batch1", ",", "batch2", ")", ":", "\n", "    ", "dist", "=", "1", "-", "iou", "(", "batch1", ",", "batch2", ")", "\n", "dist", "=", "dist", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.distance_functions.l2_dist": [[92, 96], ["torch.norm", "torch.norm", "dist.cpu().numpy.cpu().numpy", "torch.flatten", "torch.flatten", "dist.cpu().numpy.cpu"], "function", ["None"], ["", "def", "l2_dist", "(", "batch1", ",", "batch2", ")", ":", "\n", "    ", "dist", "=", "torch", ".", "norm", "(", "torch", ".", "flatten", "(", "batch1", "-", "batch2", ",", "start_dim", "=", "1", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "dist", "=", "dist", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "dist", "\n", "", ""]], "home.repos.pwc.inspect_result.aounon_center-smoothing.None.train_reconstructor.main": [[15, 96], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.load", "torch.load", "torch.load", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.MSELoss().cuda", "torch.Adam", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "open", "open.write", "open.flush", "range", "print", "torch.save", "torch.save", "torch.save", "open.close", "torchvision.datasets.CIFAR10", "models.ReconstructorCIFAR().cuda", "ReconstructorMNIST().cuda.parameters", "print", "print", "enumerate", "print", "open.write", "open.flush", "ReconstructorMNIST().cuda.state_dict", "torchvision.datasets.MNIST", "models.ReconstructorMNIST().cuda", "sys.exit", "torch.MSELoss", "inputs.cuda.cuda", "torch.flatten", "torch.flatten", "torch.flatten", "torch.matmul", "torch.matmul", "torch.matmul", "optim.Adam.zero_grad", "ReconstructorMNIST().cuda.", "nn.MSELoss().cuda.", "criterion.backward", "optim.Adam.step", "torch.save", "torch.save", "torch.save", "torchvision.transforms.ToTensor", "models.ReconstructorCIFAR", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "ReconstructorMNIST().cuda.state_dict", "torchvision.transforms.ToTensor", "models.ReconstructorMNIST", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.randn_like", "torch.randn_like", "torch.randn_like", "criterion.item", "criterion.item"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"model_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"dataset\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"A_mat_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--sigma\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "A", "=", "torch", ".", "load", "(", "args", ".", "A_mat_path", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "model", "=", "ReconstructorCIFAR", "(", "A", ")", ".", "cuda", "(", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "trainset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "model", "=", "ReconstructorMNIST", "(", "A", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "sys", ".", "exit", "(", "'Unrecognized dataset name'", ")", "\n", "\n", "", "batch_size", "=", "1000", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "'GPU: %s'", "%", "torch", ".", "cuda", ".", "get_device_name", "(", "torch", ".", "cuda", ".", "current_device", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'GPU not available. Current device: %s'", "%", "torch", ".", "cuda", ".", "get_device_name", "(", "torch", ".", "cuda", ".", "current_device", "(", ")", ")", ")", "\n", "\n", "", "log", "=", "open", "(", "args", ".", "model_path", "+", "'.csv'", ",", "\"w\"", ")", "\n", "log", ".", "write", "(", "'Epoch\\tLoss\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "# loop over the dataset multiple times", "\n", "\n", "        ", "for", "i", ",", "data", "in", "enumerate", "(", "trainloader", ",", "0", ")", ":", "\n", "\n", "# get the inputs; data is a list of [inputs, labels]", "\n", "            ", "inputs", ",", "_", "=", "data", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "\n", "# Adding Gaussian noise", "\n", "# inputs_noisy = inputs + (torch.randn_like(inputs) * args.sigma)", "\n", "\n", "# Projecting input with noise in latent space", "\n", "inputs_flat", "=", "torch", ".", "flatten", "(", "inputs", ",", "start_dim", "=", "1", ")", "\n", "measurements", "=", "torch", ".", "matmul", "(", "inputs_flat", ",", "A", ")", "\n", "measurements_noisy", "=", "measurements", "+", "(", "torch", ".", "randn_like", "(", "measurements", ")", "*", "args", ".", "sigma", ")", "\n", "# inputs_proj = project(inputs, A, args.sigma)", "\n", "\n", "# zero the parameter gradients", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# forward + backward + optimize", "\n", "outputs", "=", "model", "(", "measurements_noisy", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "inputs", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Print and log loss for this epoch", "\n", "", "print", "(", "'Epoch: %d, loss: %.3f'", "%", "(", "epoch", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "log", ".", "write", "(", "'%d\\t%.3f\\n'", "%", "(", "epoch", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "# Save model parameters after every ten epochs", "\n", "if", "epoch", "%", "10", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "model_path", ")", "\n", "\n", "", "", "print", "(", "'Finished Training'", ")", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "model_path", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n"]]}